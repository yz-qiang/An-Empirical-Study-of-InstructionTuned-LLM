{"ID": 1, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected final void fastPathOrderedEmit(U value, boolean delayError, Disposable disposable) { final Observer<? super V> observer = downstream; final SimplePlainQueue<U> q = queue; if (wip.get() == 0 && wip.compareAndSet(0, 1)) { if (q.isEmpty()) { accept(observer, value); if (leave(-1) == 0) { return; } } else { q.offer(value); } } else { q.offer(value); if (!enter()) { return; } } QueueDrainHelper.drainLoop(q, observer, delayError, disposable, this); }. ### Assistant:", "ground_truth": "Makes sure the fast-path emits in order.\n@param value the value to emit or queue up\n@param delayError if true, errors are delayed until the source has terminated\n@param disposable the resource to dispose if the drain terminates", "predict": "Emit the next value in the queue, or if the queue is empty, emit the current value."}
{"ID": 2, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @CheckReturnValue @SchedulerSupport(SchedulerSupport.NONE) public static <T> Observable<T> wrap(ObservableSource<T> source) { ObjectHelper.requireNonNull(source, \"source is null\"); if (source instanceof Observable) { return RxJavaPlugins.onAssembly((Observable<T>)source); } return RxJavaPlugins.onAssembly(new ObservableFromUnsafeSource<T>(source)); }. ### Assistant:", "ground_truth": "Wraps an ObservableSource into an Observable if not already an Observable.\n\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code wrap} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n\n@param <T> the value type\n@param source the source ObservableSource instance\n@return the new Observable instance or the same as the source\n@throws NullPointerException if source is null", "predict": "Wraps an observable sequence into another observable sequence. @param source the source observable to wrap @return the wrapped observable\n * @see <a href=\"http://reactivex.io/documentation/operators/wrap.html\">ReactiveX operators documentation: Wrap</a>"}
{"ID": 3, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @CheckReturnValue @SchedulerSupport(SchedulerSupport.NONE) public final Observable<T> sorted(Comparator<? super T> sortFunction) { ObjectHelper.requireNonNull(sortFunction, \"sortFunction is null\"); return toList().toObservable().map(Functions.listSorter(sortFunction)).flatMapIterable(Functions.<List<T>>identity()); }. ### Assistant:", "ground_truth": "Returns an Observable that emits the events emitted by source ObservableSource, in a\nsorted order based on a specified comparison function.\n\n<p>Note that calling {@code sorted} with long, non-terminating or infinite sources\nmight cause {@link OutOfMemoryError}\n\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code sorted} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n\n@param sortFunction\na function that compares two items emitted by the source ObservableSource and returns an Integer\nthat indicates their sort order\n@return an Observable that emits the items emitted by the source ObservableSource in sorted order", "predict": "Sort the items emitted by this observable according to the specified comparator and emit them in ascending order. @param sortFunction the sorting function to use. @return an observable that emits the sorted items. @see <a href=\"https://github.com/reactor/reactor-core/issues/307\">Reactor issue #307</a>"}
{"ID": 4, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <T> ConnectableObservable<T> observeOn(final ConnectableObservable<T> co, final Scheduler scheduler) { final Observable<T> observable = co.observeOn(scheduler); return RxJavaPlugins.onAssembly(new Replay<T>(co, observable)); }. ### Assistant:", "ground_truth": "Child Observers will observe the events of the ConnectableObservable on the\nspecified scheduler.\n@param <T> the value type\n@param co the connectable observable instance\n@param scheduler the target scheduler\n@return the new ConnectableObservable instance", "predict": "Create an Observable that replays the items emitted by the source Observable on a specified Scheduler. @param co the source Observable @param scheduler the Scheduler to observe on @return the replayed Observable\n * @see <a href=\"http://reactivex.io/documentation/operators/replay.html\">ReactiveX: Replay</a>\n */\npublic static <T> ConnectableObservable<T> observeOn(ConnectableObservable<T> co, Scheduler scheduler) {\n    return RxJavaPlugins.onAssembly(new Replay<T>(co, scheduler));\n}\n\n/**\n * Returns an Observable that replays the items emitted by the source Observable on a specified Scheduler.\n * <p>\n * Note that the operator will replay the items emitted by the source Observable on the specified Scheduler, so it will not be executed in real-time.\n * @param co the source Observable @param scheduler the Scheduler to observe on"}
{"ID": 5, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @CheckReturnValue @NonNull public static <T> UnicastProcessor<T> create(int capacityHint) { return new UnicastProcessor<T>(capacityHint); }. ### Assistant:", "ground_truth": "Creates an UnicastProcessor with the given internal buffer capacity hint.\n@param <T> the value type\n@param capacityHint the hint to size the internal unbounded buffer\n@return an UnicastProcessor instance", "predict": "Create a new UnicastProcessor with the given capacity hint. @param capacityHint The hint for the capacity of the processor. @return The newly created processor. @throws IllegalArgumentException If the capacityHint is negative."}
{"ID": 6, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @CheckReturnValue @NonNull public static <T> UnicastProcessor<T> create(int capacityHint, Runnable onCancelled) { ObjectHelper.requireNonNull(onCancelled, \"onTerminate\"); return new UnicastProcessor<T>(capacityHint, onCancelled); }. ### Assistant:", "ground_truth": "Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for\nthe case when the single Subscriber cancels its subscription.\n\n<p>The callback, if not null, is called exactly once and\nnon-overlapped with any active replay.\n\n@param <T> the value type\n@param capacityHint the hint to size the internal unbounded buffer\n@param onCancelled the non null callback\n@return an UnicastProcessor instance", "predict": "Create a new UnicastProcessor with the given capacity hint and onCancelled callback. @param capacityHint the hint for the capacity of the processor. @param onCancelled the callback to be invoked when the processor is cancelled. @return a new UnicastProcessor with the given capacity hint and onCancelled callback. @throws NullPointerException if the capacityHint or onCancelled is null. @since 1.0.0"}
{"ID": 7, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") public static <T, R> boolean tryScalarXMapSubscribe(Publisher<T> source, Subscriber<? super R> subscriber, Function<? super T, ? extends Publisher<? extends R>> mapper) { if (source instanceof Callable) { T t; try { t = ((Callable<T>)source).call(); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptySubscription.error(ex, subscriber); return true; } if (t == null) { EmptySubscription.complete(subscriber); return true; } Publisher<? extends R> r; try { r = ObjectHelper.requireNonNull(mapper.apply(t), \"The mapper returned a null Publisher\"); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptySubscription.error(ex, subscriber); return true; } if (r instanceof Callable) { R u; try { u = ((Callable<R>)r).call(); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptySubscription.error(ex, subscriber); return true; } if (u == null) { EmptySubscription.complete(subscriber); return true; } subscriber.onSubscribe(new ScalarSubscription<R>(subscriber, u)); } else { r.subscribe(subscriber); } return true; } return false; }. ### Assistant:", "ground_truth": "Tries to subscribe to a possibly Callable source's mapped Publisher.\n@param <T> the input value type\n@param <R> the output value type\n@param source the source Publisher\n@param subscriber the subscriber\n@param mapper the function mapping a scalar value into a Publisher\n@return true if successful, false if the caller should continue with the regular path.", "predict": "Try to apply a mapping to the source Publisher and then subscribe to the resulting Publisher. @param <T> the source value type @param <R> the mapped value type @param source the source Publisher @param subscriber the subscriber to the mapped Publisher @param mapper the mapping function @return true if the mapping was applied and subscribed to, false if the mapping was not applied or the subscriber was not interested in the mapped Publisher"}
{"ID": 8, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <T, U> Flowable<U> scalarXMap(final T value, final Function<? super T, ? extends Publisher<? extends U>> mapper) { return RxJavaPlugins.onAssembly(new ScalarXMapFlowable<T, U>(value, mapper)); }. ### Assistant:", "ground_truth": "Maps a scalar value into a Publisher and emits its values.\n\n@param <T> the scalar value type\n@param <U> the output value type\n@param value the scalar value to map\n@param mapper the function that gets the scalar value and should return\na Publisher that gets streamed\n@return the new Flowable instance", "predict": "Maps the upstream value to a Publisher using the specified mapper function. @param <T> the upstream value type @param <U> the output value type @param value the upstream value @param mapper the mapper function @return the mapped Publisher"}
{"ID": 9, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void reset() { setErrorHandler(null); setScheduleHandler(null); setComputationSchedulerHandler(null); setInitComputationSchedulerHandler(null); setIoSchedulerHandler(null); setInitIoSchedulerHandler(null); setSingleSchedulerHandler(null); setInitSingleSchedulerHandler(null); setNewThreadSchedulerHandler(null); setInitNewThreadSchedulerHandler(null); setOnFlowableAssembly(null); setOnFlowableSubscribe(null); setOnObservableAssembly(null); setOnObservableSubscribe(null); setOnSingleAssembly(null); setOnSingleSubscribe(null); setOnCompletableAssembly(null); setOnCompletableSubscribe(null); setOnConnectableFlowableAssembly(null); setOnConnectableObservableAssembly(null); setOnMaybeAssembly(null); setOnMaybeSubscribe(null); setOnParallelAssembly(null); setFailOnNonBlockingScheduler(false); setOnBeforeBlocking(null); }. ### Assistant:", "ground_truth": "Removes all handlers and resets to default behavior.", "predict": "Reset all schedulers and handlers."}
{"ID": 10, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @CheckReturnValue @NonNull @SchedulerSupport(SchedulerSupport.NONE) public static <T> Maybe<T> fromCompletable(CompletableSource completableSource) { ObjectHelper.requireNonNull(completableSource, \"completableSource is null\"); return RxJavaPlugins.onAssembly(new MaybeFromCompletable<T>(completableSource)); }. ### Assistant:", "ground_truth": "Wraps a CompletableSource into a Maybe.\n\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code fromCompletable} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n@param <T> the target type\n@param completableSource the CompletableSource to convert from\n@return the new Maybe instance\n@throws NullPointerException if completable is null", "predict": "Create a Maybe from a CompletableSource. @param completableSource the CompletableSource to convert to a Maybe @return the Maybe instance"}
{"ID": 11, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @CheckReturnValue @NonNull @SchedulerSupport(SchedulerSupport.NONE) public static <T> Maybe<T> fromSingle(SingleSource<T> singleSource) { ObjectHelper.requireNonNull(singleSource, \"singleSource is null\"); return RxJavaPlugins.onAssembly(new MaybeFromSingle<T>(singleSource)); }. ### Assistant:", "ground_truth": "Wraps a SingleSource into a Maybe.\n\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code fromSingle} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n@param <T> the target type\n@param singleSource the SingleSource to convert from\n@return the new Maybe instance\n@throws NullPointerException if single is null", "predict": "Create a Maybe from a SingleSource. @param <T> the element type (@see SingleSource) @param singleSource the SingleSource to create a Maybe from (@see SingleSource) @return the Maybe created from the input SingleSource @see <a href=\"http://reactivex.io/documentation/operators/fromsingle.html\">ReactiveX operators documentation: FromSingle</a>"}
{"ID": 12, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @CheckReturnValue @SchedulerSupport(SchedulerSupport.NONE) public final Maybe<T> retry(long times, Predicate<? super Throwable> predicate) { return toFlowable().retry(times, predicate).singleElement(); }. ### Assistant:", "ground_truth": "Retries at most times or until the predicate returns false, whichever happens first.\n\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code retry} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n@param times the number of times to resubscribe if the current Maybe fails\n@param predicate the predicate called with the failure Throwable and should return true to trigger a retry.\n@return the new Maybe instance", "predict": "Retries the Observable up to a maximum number of times, each time retrying only if the predicate evaluates to true. @param times the maximum number of times to retry @param predicate the predicate to determine whether to retry or not @return a Maybe that emits the original value of the source Observable or a default value if the source Observable emits no value before the retry limit is reached @see <a href=\"https://github.com/reactor/reactor-core/issues/2004\">#2004</a> @since 3.0"}
{"ID": 13, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <T> T requireNonNull(T object, String message) { if (object == null) { throw new NullPointerException(message); } return object; }. ### Assistant:", "ground_truth": "Verifies if the object is not null and returns it or throws a NullPointerException\nwith the given message.\n@param <T> the value type\n@param object the object to verify\n@param message the message to use with the NullPointerException\n@return the object itself\n@throws NullPointerException if object is null", "predict": "Ensures that the object is not null. If it is, it throws a NullPointerException. @param object the object to check @param message a message to include in the exception @return the object @throws NullPointerException if the object is null"}
{"ID": 14, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") public static <T> Function<T, T> identity() { return (Function<T, T>)IDENTITY; }. ### Assistant:", "ground_truth": "Returns an identity function that simply returns its argument.\n@param <T> the input and output value type\n@return the identity function", "predict": "Returns an identity function. @return identity function"}
{"ID": 15, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <T> Callable<T> justCallable(T value) { return new JustValue<Object, T>(value); }. ### Assistant:", "ground_truth": "Returns a Callable that returns the given value.\n@param <T> the value type\n@param value the value to return\n@return the new Callable instance", "predict": "Create a Callable that always returns the given value."}
{"ID": 16, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <T, U> Function<T, U> justFunction(U value) { return new JustValue<T, U>(value); }. ### Assistant:", "ground_truth": "Returns a Function that ignores its parameter and returns the given value.\n@param <T> the function's input type\n@param <U> the value and return type of the function\n@param value the value to return\n@return the new Function instance", "predict": "Create a function that always returns a given value. @param value the value to return @param <T> the type of the input value @param <U> the type of the output value @return a function that always returns the given value."}
{"ID": 17, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <T, U> Function<T, U> castFunction(Class<U> target) { return new CastToClass<T, U>(target); }. ### Assistant:", "ground_truth": "Returns a function that cast the incoming values via a Class object.\n@param <T> the input value type\n@param <U> the output and target type\n@param target the target class\n@return the new Function instance", "predict": "Casts a function to a specific target type. @param target the target type @param <T> the source type @param <U> the target type @return the cast function"}
{"ID": 18, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @CheckReturnValue @NonNull public static <T> UnicastSubject<T> create() { return new UnicastSubject<T>(bufferSize(), true); }. ### Assistant:", "ground_truth": "Creates an UnicastSubject with an internal buffer capacity hint 16.\n@param <T> the value type\n@return an UnicastSubject instance", "predict": "Creates a subject that sends all events to the subscribers. @param bufferSize the buffer size of the subject. @return the created subject. @since 2.0"}
{"ID": 19, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @CheckReturnValue @NonNull public static <T> UnicastSubject<T> create(int capacityHint) { return new UnicastSubject<T>(capacityHint, true); }. ### Assistant:", "ground_truth": "Creates an UnicastSubject with the given internal buffer capacity hint.\n@param <T> the value type\n@param capacityHint the hint to size the internal unbounded buffer\n@return an UnicastSubject instance", "predict": "Create a subject with a capacity hint. @param capacityHint the hint for the capacity of the subject. @return a new subject with the given capacity hint. @throws IllegalArgumentException if the capacity hint is negative. @since 2.0"}
{"ID": 20, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @CheckReturnValue @NonNull public static <T> UnicastSubject<T> create(int capacityHint, Runnable onTerminate) { return new UnicastSubject<T>(capacityHint, onTerminate, true); }. ### Assistant:", "ground_truth": "Creates an UnicastSubject with the given internal buffer capacity hint and a callback for\nthe case when the single Subscriber cancels its subscription.\n\n<p>The callback, if not null, is called exactly once and\nnon-overlapped with any active replay.\n\n@param <T> the value type\n@param capacityHint the hint to size the internal unbounded buffer\n@param onTerminate the callback to run when the Subject is terminated or cancelled, null not allowed\n@return an UnicastSubject instance", "predict": "Create a subject with a capacity hint and an optional onTerminate action. @param capacityHint the capacity hint for the subject. @param onTerminate an optional action to be executed when the subject terminates. @param <T> the type of items emitted by the subject. @return a new subject with the given capacity hint and optional onTerminate action."}
{"ID": 21, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @CheckReturnValue @NonNull public static <T> UnicastSubject<T> create(boolean delayError) { return new UnicastSubject<T>(bufferSize(), delayError); }. ### Assistant:", "ground_truth": "Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag.\n\n<p>The callback, if not null, is called exactly once and\nnon-overlapped with any active replay.\n<p>History: 2.0.8 - experimental\n@param <T> the value type\n@param delayError deliver pending onNext events before onError\n@return an UnicastSubject instance\n@since 2.2", "predict": "Create a subject that sends out values immediately. @param delayError If true, the subject will delay sending the error until the subscriber has received all values. If false, the subject will send the error immediately. @param <T> The type of the values emitted by the subject. @return A subject that sends out values immediately."}
{"ID": 22, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Throwable blockingGetError() { if (getCount() != 0) { try { BlockingHelper.verifyNonBlocking(); await(); } catch (InterruptedException ex) { dispose(); return ex; } } return error; }. ### Assistant:", "ground_truth": "Block until the latch is counted down and return the error received or null if no\nerror happened.\n@return the error received or null", "predict": "Get the error without blocking. If the count is greater than zero, it will block until the count is zero. If the count is zero, it will return the error immediately. If interrupted, it will dispose itself."}
{"ID": 23, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Throwable blockingGetError(long timeout, TimeUnit unit) { if (getCount() != 0) { try { BlockingHelper.verifyNonBlocking(); if (!await(timeout, unit)) { dispose(); throw ExceptionHelper.wrapOrThrow(new TimeoutException(timeoutMessage(timeout, unit))); } } catch (InterruptedException ex) { dispose(); throw ExceptionHelper.wrapOrThrow(ex); } } return error; }. ### Assistant:", "ground_truth": "Block until the latch is counted down and return the error received or\nwhen the wait is interrupted or times out, null otherwise.\n@param timeout the timeout value\n@param unit the time unit\n@return the error received or null", "predict": "Waits for the error to be set and returns it. If timeout occurs, the error is disposed and a TimeoutException is thrown. @param timeout the timeout time in milliseconds. @param unit the timeout unit. @return the error. @throws TimeoutException if timeout occurs."}
{"ID": 24, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean blockingAwait(long timeout, TimeUnit unit) { if (getCount() != 0) { try { BlockingHelper.verifyNonBlocking(); if (!await(timeout, unit)) { dispose(); return false; } } catch (InterruptedException ex) { dispose(); throw ExceptionHelper.wrapOrThrow(ex); } } Throwable ex = error; if (ex != null) { throw ExceptionHelper.wrapOrThrow(ex); } return true; }. ### Assistant:", "ground_truth": "Block until the observer terminates and return true; return false if\nthe wait times out.\n@param timeout the timeout value\n@param unit the time unit\n@return true if the observer terminated in time, false otherwise", "predict": "Block until the count reaches zero or the timeout expires. @param timeout the maximum time to wait in milliseconds @param unit the unit of time @return true if the thread was interrupted and the thread was disposed, false otherwise."}
{"ID": 25, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <T, U> void drainMaxLoop(SimplePlainQueue<T> q, Subscriber<? super U> a, boolean delayError, Disposable dispose, QueueDrain<T, U> qd) { int missed = 1; for (;;) { for (;;) { boolean d = qd.done(); T v = q.poll(); boolean empty = v == null; if (checkTerminated(d, empty, a, delayError, q, qd)) { if (dispose != null) { dispose.dispose(); } return; } if (empty) { break; } long r = qd.requested(); if (r != 0L) { if (qd.accept(a, v)) { if (r != Long.MAX_VALUE) { qd.produced(1); } } } else { q.clear(); if (dispose != null) { dispose.dispose(); } a.onError(new MissingBackpressureException(\"Could not emit value due to lack of requests.\")); return; } } missed = qd.leave(-missed); if (missed == 0) { break; } } }. ### Assistant:", "ground_truth": "Drain the queue but give up with an error if there aren't enough requests.\n@param <T> the queue value type\n@param <U> the emission value type\n@param q the queue\n@param a the subscriber\n@param delayError true if errors should be delayed after all normal items\n@param dispose the disposable to call when termination happens and cleanup is necessary\n@param qd the QueueDrain instance that gives status information to the drain logic", "predict": "Drain the queue until it is empty, or until the maximum number of requests have been made. @param q the queue to drain @param a the subscriber to receive the drained items @param delayError true if the error should be delayed until the queue is drained @param dispose the disposable to dispose when the queue is drained @param qd the queue drain to use @return true if the queue was drained, false if the maximum number of requests was reached and the queue was not drained"}
{"ID": 26, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void request(Subscription s, int prefetch) { s.request(prefetch < 0 ? Long.MAX_VALUE : prefetch); }. ### Assistant:", "ground_truth": "Requests Long.MAX_VALUE if prefetch is negative or the exact\namount if prefetch is positive.\n@param s the Subscription to request from\n@param prefetch the prefetch value", "predict": "Requests the specified subscription to receive data. The subscription will receive data until it has received the specified amount of data or until it has received Long.MAX_VALUE. If the prefetch value is negative, it will be ignored. If the prefetch value is greater than the number of available messages, it will be set to Long.MAX_VALUE. @param s the subscription to request data for @param prefetch the number of messages to request"}
{"ID": 27, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <T> void postComplete(Subscriber<? super T> actual, Queue<T> queue, AtomicLong state, BooleanSupplier isCancelled) { if (queue.isEmpty()) { actual.onComplete(); return; } if (postCompleteDrain(state.get(), actual, queue, state, isCancelled)) { return; } for (; ; ) { long r = state.get(); if ((r & COMPLETED_MASK) != 0L) { return; } long u = r | COMPLETED_MASK; // (active, r) -> (complete, r) transition if (state.compareAndSet(r, u)) { // if the requested amount was non-zero, drain the queue if (r != 0L) { postCompleteDrain(u, actual, queue, state, isCancelled); } return; } } }. ### Assistant:", "ground_truth": "Signals the completion of the main sequence and switches to post-completion replay mode.\n\n<p>\nDon't modify the queue after calling this method!\n\n<p>\nPost-completion backpressure handles the case when a source produces values based on\nrequests when it is active but more values are available even after its completion.\nIn this case, the onComplete() can't just emit the contents of the queue but has to\ncoordinate with the requested amounts. This requires two distinct modes: active and\ncompleted. In active mode, requests flow through and the queue is not accessed but\nin completed mode, requests no-longer reach the upstream but help in draining the queue.\n<p>\nThe algorithm utilizes the most significant bit (bit 63) of a long value (AtomicLong) since\nrequest amount only goes up to Long.MAX_VALUE (bits 0-62) and negative values aren't\nallowed.\n\n@param <T> the value type emitted\n@param actual the target Subscriber to send events to\n@param queue the queue to drain if in the post-complete state\n@param state holds the request amount and the post-completed flag\n@param isCancelled a supplier that returns true if the drain has been cancelled", "predict": "Posts a completion to the actual subscriber. @param actual the subscriber to post the completion to @param queue the queue to drain @param state the state of the subscription @param isCancelled the cancelled flag"}
{"ID": 28, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected final void complete(R n) { long p = produced; if (p != 0) { BackpressureHelper.produced(this, p); } for (;;) { long r = get(); if ((r & COMPLETE_MASK) != 0) { onDrop(n); return; } if ((r & REQUEST_MASK) != 0) { lazySet(COMPLETE_MASK + 1); downstream.onNext(n); downstream.onComplete(); return; } value = n; if (compareAndSet(0, COMPLETE_MASK)) { return; } value = null; } }. ### Assistant:", "ground_truth": "Signals the given value and an onComplete if the downstream is ready to receive the final value.\n@param n the value to emit", "predict": "Completes the stream."}
{"ID": 29, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") @Nullable public T getValue() { Object o = value; if (o != null && !NotificationLite.isError(o)) { return (T)value; } return null; }. ### Assistant:", "ground_truth": "Returns the contained value if this notification is an onNext\nsignal, null otherwise.\n@return the value contained or null\n@see #isOnNext()", "predict": "Returns the value of the notification, or null if the value is an error."}
{"ID": 30, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Nullable public Throwable getError() { Object o = value; if (NotificationLite.isError(o)) { return NotificationLite.getError(o); } return null; }. ### Assistant:", "ground_truth": "Returns the container Throwable error if this notification is an onError\nsignal, null otherwise.\n@return the Throwable error contained or null\n@see #isOnError()", "predict": "Returns the error associated with this notification. @return the error associated with this notification, or null if there is no error."}
{"ID": 31, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean validate(Disposable upstream, Disposable next, Class<?> observer) { ObjectHelper.requireNonNull(next, \"next is null\"); if (upstream != null) { next.dispose(); if (upstream != DisposableHelper.DISPOSED) { reportDoubleSubscription(observer); } return false; } return true; }. ### Assistant:", "ground_truth": "Ensures that the upstream Disposable is null and returns true, otherwise\ndisposes the next Disposable and if the upstream is not the shared\ndisposed instance, reports a ProtocolViolationException due to\nmultiple subscribe attempts.\n@param upstream the upstream current value\n@param next the Disposable to check for nullness and dispose if necessary\n@param observer the class of the consumer to have a personalized\nerror message if the upstream already contains a non-cancelled Disposable.\n@return true if successful, false if the upstream was non null", "predict": "Validates that the upstream disposable is not already disposed and that the downstream disposable is not already subscribed. @param upstream the upstream disposable @param next the downstream disposable @param observer the observer class @return true if the upstream is not already disposed and the downstream is not already subscribed, false otherwise"}
{"ID": 32, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean setOnce(AtomicReference<Disposable> upstream, Disposable next, Class<?> observer) { ObjectHelper.requireNonNull(next, \"next is null\"); if (!upstream.compareAndSet(null, next)) { next.dispose(); if (upstream.get() != DisposableHelper.DISPOSED) { reportDoubleSubscription(observer); } return false; } return true; }. ### Assistant:", "ground_truth": "Atomically updates the target upstream AtomicReference from null to the non-null\nnext Disposable, otherwise disposes next and reports a ProtocolViolationException\nif the AtomicReference doesn't contain the shared disposed indicator.\n@param upstream the target AtomicReference to update\n@param next the Disposable to set on it atomically\n@param observer the class of the consumer to have a personalized\nerror message if the upstream already contains a non-cancelled Disposable.\n@return true if successful, false if the content of the AtomicReference was non null", "predict": "Sets the upstream disposable once and reports a double subscription if the upstream disposable was already set. @param upstream the upstream disposable @param next the next disposable to set @param observer the observer class @return true if the upstream disposable was already set, false otherwise"}
{"ID": 33, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean validate(Subscription upstream, Subscription next, Class<?> subscriber) { ObjectHelper.requireNonNull(next, \"next is null\"); if (upstream != null) { next.cancel(); if (upstream != SubscriptionHelper.CANCELLED) { reportDoubleSubscription(subscriber); } return false; } return true; }. ### Assistant:", "ground_truth": "Ensures that the upstream Subscription is null and returns true, otherwise\ncancels the next Subscription and if the upstream is not the shared\ncancelled instance, reports a ProtocolViolationException due to\nmultiple subscribe attempts.\n@param upstream the upstream current value\n@param next the Subscription to check for nullness and cancel if necessary\n@param subscriber the class of the consumer to have a personalized\nerror message if the upstream already contains a non-cancelled Subscription.\n@return true if successful, false if the upstream was non null", "predict": "Validates if the upstream subscription is cancelled before subscribing to the next subscription. @param upstream the upstream subscription @param next the next subscription @param subscriber the subscriber class @return true if the upstream subscription is cancelled before subscribing to the next subscription, false otherwise"}
{"ID": 34, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean setOnce(AtomicReference<Subscription> upstream, Subscription next, Class<?> subscriber) { ObjectHelper.requireNonNull(next, \"next is null\"); if (!upstream.compareAndSet(null, next)) { next.cancel(); if (upstream.get() != SubscriptionHelper.CANCELLED) { reportDoubleSubscription(subscriber); } return false; } return true; }. ### Assistant:", "ground_truth": "Atomically updates the target upstream AtomicReference from null to the non-null\nnext Subscription, otherwise cancels next and reports a ProtocolViolationException\nif the AtomicReference doesn't contain the shared cancelled indicator.\n@param upstream the target AtomicReference to update\n@param next the Subscription to set on it atomically\n@param subscriber the class of the consumer to have a personalized\nerror message if the upstream already contains a non-cancelled Subscription.\n@return true if successful, false if the content of the AtomicReference was non null", "predict": "Sets the upstream subscription once. If the upstream is already subscribed, the subscription is cancelled and the downstream is informed accordingly. If the upstream is not subscribed, the subscription is set and the downstream is informed accordingly. If the upstream is already subscribed, the subscription is cancelled and the downstream is informed accordingly. If the upstream is not subscribed, the subscription is set and the downstream is informed accordingly. @param upstream the upstream reference @param next the subscription to set @param subscriber the subscriber class @return true if the subscription was set, false otherwise"}
{"ID": 35, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static long addCap(long a, long b) { long u = a + b; if (u < 0L) { return Long.MAX_VALUE; } return u; }. ### Assistant:", "ground_truth": "Adds two long values and caps the sum at Long.MAX_VALUE.\n@param a the first value\n@param b the second value\n@return the sum capped at Long.MAX_VALUE", "predict": "Add two longs together and return the result. If the result is negative, return Long.MAX_VALUE."}
{"ID": 36, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static long multiplyCap(long a, long b) { long u = a * b; if (((a | b) >>> 31) != 0) { if (u / a != b) { return Long.MAX_VALUE; } } return u; }. ### Assistant:", "ground_truth": "Multiplies two long values and caps the product at Long.MAX_VALUE.\n@param a the first value\n@param b the second value\n@return the product capped at Long.MAX_VALUE", "predict": "Multiply two numbers, checking for overflow."}
{"ID": 37, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static long add(AtomicLong requested, long n) { for (;;) { long r = requested.get(); if (r == Long.MAX_VALUE) { return Long.MAX_VALUE; } long u = addCap(r, n); if (requested.compareAndSet(r, u)) { return r; } } }. ### Assistant:", "ground_truth": "Atomically adds the positive value n to the requested value in the AtomicLong and\ncaps the result at Long.MAX_VALUE and returns the previous value.\n@param requested the AtomicLong holding the current requested value\n@param n the value to add, must be positive (not verified)\n@return the original value before the add", "predict": "Atomic long addition. @param requested the atomic long to be incremented @param n the number of times to increment @return the final value of the atomic long after the addition"}
{"ID": 38, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static NullPointerException toNpe(Throwable ex) { NullPointerException npe = new NullPointerException(\"Actually not, but can't pass out an exception otherwise...\"); npe.initCause(ex); return npe; }. ### Assistant:", "ground_truth": "Creates a NullPointerException instance and sets the given Throwable as its initial cause.\n@param ex the Throwable instance to use as cause, not null (not verified)\n@return the created NullPointerException", "predict": "Turns a Throwable into a NullPointerException."}
{"ID": 39, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void add(Object o) { // if no value yet, create the first array if (size == 0) { head = new Object[capacityHint + 1]; tail = head; head[0] = o; indexInTail = 1; size = 1; } else // if the tail is full, create a new tail and link if (indexInTail == capacityHint) { Object[] t = new Object[capacityHint + 1]; t[0] = o; tail[capacityHint] = t; tail = t; indexInTail = 1; size++; } else { tail[indexInTail] = o; indexInTail++; size++; } }. ### Assistant:", "ground_truth": "Adds a new element to this list.\n@param o the object to add, nulls are accepted", "predict": "Adds an element to the tail of the array. If the tail is full, a new tail is created and linked to the old tail. The capacity is increased accordingly."}
{"ID": 40, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void shutdown() { ScheduledExecutorService exec = PURGE_THREAD.getAndSet(null); if (exec != null) { exec.shutdownNow(); } POOLS.clear(); }. ### Assistant:", "ground_truth": "Stops the purge thread.", "predict": "Shutdown the purge threads."}
{"ID": 41, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static ScheduledExecutorService create(ThreadFactory factory) { final ScheduledExecutorService exec = Executors.newScheduledThreadPool(1, factory); tryPutIntoPool(PURGE_ENABLED, exec); return exec; }. ### Assistant:", "ground_truth": "Creates a ScheduledExecutorService with the given factory.\n@param factory the thread factory\n@return the ScheduledExecutorService", "predict": "Creates a new ScheduledExecutorService with the specified thread factory. The executor will be put into the pool when it is created. @param factory the thread factory to use when creating threads for the executor. @return the ScheduledExecutorService."}
{"ID": 42, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public final void setSubscription(Subscription s) { if (cancelled) { s.cancel(); return; } ObjectHelper.requireNonNull(s, \"s is null\"); if (get() == 0 && compareAndSet(0, 1)) { Subscription a = actual; if (a != null && cancelOnReplace) { a.cancel(); } actual = s; long r = requested; if (decrementAndGet() != 0) { drainLoop(); } if (r != 0L) { s.request(r); } return; } Subscription a = missedSubscription.getAndSet(s); if (a != null && cancelOnReplace) { a.cancel(); } drain(); }. ### Assistant:", "ground_truth": "Atomically sets a new subscription.\n@param s the subscription to set, not null (verified)", "predict": "Replaces the current subscription with a new one. The previous subscription is cancelled. @param s the subscription to set. @throws IllegalStateException if the subscription has been cancelled. @throws NullPointerException if the subscription is null."}
{"ID": 43, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: void emitLoop() { for (;;) { AppendOnlyLinkedArrayList<Object> q; synchronized (this) { q = queue; if (q == null) { emitting = false; return; } queue = null; } q.forEachWhile(this); } }. ### Assistant:", "ground_truth": "Loops until all notifications in the queue has been processed.", "predict": "Emit loop."}
{"ID": 44, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static RuntimeException wrapOrThrow(Throwable error) { if (error instanceof Error) { throw (Error)error; } if (error instanceof RuntimeException) { return (RuntimeException)error; } return new RuntimeException(error); }. ### Assistant:", "ground_truth": "If the provided Throwable is an Error this method\nthrows it, otherwise returns a RuntimeException wrapping the error\nif that error is a checked exception.\n@param error the error to wrap or throw\n@return the (wrapped) error", "predict": "Wrap or throw the given error. @param error the error to wrap or throw. @return the wrapped or thrown error. @throws RuntimeException if the error is an error or a runtime exception. @throws Error if the error is an error."}
{"ID": 45, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static List<Throwable> flatten(Throwable t) { List<Throwable> list = new ArrayList<Throwable>(); ArrayDeque<Throwable> deque = new ArrayDeque<Throwable>(); deque.offer(t); while (!deque.isEmpty()) { Throwable e = deque.removeFirst(); if (e instanceof CompositeException) { CompositeException ce = (CompositeException) e; List<Throwable> exceptions = ce.getExceptions(); for (int i = exceptions.size() - 1; i >= 0; i--) { deque.offerFirst(exceptions.get(i)); } } else { list.add(e); } } return list; }. ### Assistant:", "ground_truth": "Returns a flattened list of Throwables from tree-like CompositeException chain.\n@param t the starting throwable\n@return the list of Throwables flattened in a depth-first manner", "predict": "Flattens a composite exception. @param t the composite exception @return the flattened list of exceptions"}
{"ID": 46, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") public static <E extends Throwable> Exception throwIfThrowable(Throwable e) throws E { if (e instanceof Exception) { return (Exception)e; } throw (E)e; }. ### Assistant:", "ground_truth": "Workaround for Java 6 not supporting throwing a final Throwable from a catch block.\n@param <E> the generic exception type\n@param e the Throwable error to return or throw\n@return the Throwable e if it is a subclass of Exception\n@throws E the generic exception thrown", "predict": "Wrapper around throwing a checked exception. If the passed in exception is an exception, it is returned. Otherwise, a new exception is thrown. @param e Throwable to check for exception @return Exception thrown if the passed in exception is not an exception."}
{"ID": 47, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void clear() { if (disposed) { return; } OpenHashSet<Disposable> set; synchronized (this) { if (disposed) { return; } set = resources; resources = null; } dispose(set); }. ### Assistant:", "ground_truth": "Atomically clears the container, then disposes all the previously contained Disposables.", "predict": "Clear all resources. This is a convenient way to release all resources at once, instead of calling dispose() for each resource."}
{"ID": 48, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public int size() { if (disposed) { return 0; } synchronized (this) { if (disposed) { return 0; } OpenHashSet<Disposable> set = resources; return set != null ? set.size() : 0; } }. ### Assistant:", "ground_truth": "Returns the number of currently held Disposables.\n@return the number of currently held Disposables", "predict": "Returns the number of disposable resources held by this instance."}
{"ID": 49, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") public static <T, R> boolean tryScalarXMapSubscribe(ObservableSource<T> source, Observer<? super R> observer, Function<? super T, ? extends ObservableSource<? extends R>> mapper) { if (source instanceof Callable) { T t; try { t = ((Callable<T>)source).call(); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptyDisposable.error(ex, observer); return true; } if (t == null) { EmptyDisposable.complete(observer); return true; } ObservableSource<? extends R> r; try { r = ObjectHelper.requireNonNull(mapper.apply(t), \"The mapper returned a null ObservableSource\"); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptyDisposable.error(ex, observer); return true; } if (r instanceof Callable) { R u; try { u = ((Callable<R>)r).call(); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptyDisposable.error(ex, observer); return true; } if (u == null) { EmptyDisposable.complete(observer); return true; } ScalarDisposable<R> sd = new ScalarDisposable<R>(observer, u); observer.onSubscribe(sd); sd.run(); } else { r.subscribe(observer); } return true; } return false; }. ### Assistant:", "ground_truth": "Tries to subscribe to a possibly Callable source's mapped ObservableSource.\n@param <T> the input value type\n@param <R> the output value type\n@param source the source ObservableSource\n@param observer the subscriber\n@param mapper the function mapping a scalar value into an ObservableSource\n@return true if successful, false if the caller should continue with the regular path.", "predict": "Try to map the items emitted by the source to a new ObservableSource, and then subscribe to it. If the mapping fails, it will fallback to subscribing to the original source. @param source the source to be mapped @param observer the observer to be subscribed to the resulting Observable @param mapper the mapping function @return true if the mapping succeeded, false otherwise"}
{"ID": 50, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <T, U> Observable<U> scalarXMap(T value, Function<? super T, ? extends ObservableSource<? extends U>> mapper) { return RxJavaPlugins.onAssembly(new ScalarXMapObservable<T, U>(value, mapper)); }. ### Assistant:", "ground_truth": "Maps a scalar value into an Observable and emits its values.\n\n@param <T> the scalar value type\n@param <U> the output value type\n@param value the scalar value to map\n@param mapper the function that gets the scalar value and should return\nan ObservableSource that gets streamed\n@return the new Observable instance", "predict": "Maps the value to an observable sequence using a function and then flattens the resulting observable sequences into one observable sequence. @param value the value to be mapped @param mapper the function to be used to map the value to the observable sequence @param <T> the type of the value @param <U> the type of the output @return the observable sequence that results from mapping the input value to the output observable sequence using the specified function"}
{"ID": 51, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <U> boolean accept(Subscriber<? super U> subscriber) { Object[] a = head; final int c = capacity; while (a != null) { for (int i = 0; i < c; i++) { Object o = a[i]; if (o == null) { break; } if (NotificationLite.acceptFull(o, subscriber)) { return true; } } a = (Object[])a[c]; } return false; }. ### Assistant:", "ground_truth": "Interprets the contents as NotificationLite objects and calls\nthe appropriate Subscriber method.\n\n@param <U> the target type\n@param subscriber the subscriber to emit the events to\n@return true if a terminal event has been reached", "predict": "Accepts a subscriber and returns true if the queue is not empty and the subscriber consumes all items."}
{"ID": 52, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <U> boolean accept(Observer<? super U> observer) { Object[] a = head; final int c = capacity; while (a != null) { for (int i = 0; i < c; i++) { Object o = a[i]; if (o == null) { break; } if (NotificationLite.acceptFull(o, observer)) { return true; } } a = (Object[])a[c]; } return false; }. ### Assistant:", "ground_truth": "Interprets the contents as NotificationLite objects and calls\nthe appropriate Observer method.\n\n@param <U> the target type\n@param observer the observer to emit the events to\n@return true if a terminal event has been reached", "predict": "Accepts an Observer. The Observer is notified of all elements in the queue. The elements are not polled; rather, the Observer is notified as soon as an element becomes available. @param observer the Observer to accept @return true if the Observer was accepted, false if the Observer was rejected"}
{"ID": 53, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void start() { if (SubscriptionHelper.setOnce(upstream, EmptySubscription.INSTANCE)) { queue = new SpscArrayQueue<T>(bufferSize); } }. ### Assistant:", "ground_truth": "Initializes this Processor by setting an upstream Subscription that\nignores request amounts, uses a fixed buffer\nand allows using the onXXX and offer methods\nafterwards.", "predict": "Start the pipeline."}
{"ID": 54, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void startUnbounded() { if (SubscriptionHelper.setOnce(upstream, EmptySubscription.INSTANCE)) { queue = new SpscLinkedArrayQueue<T>(bufferSize); } }. ### Assistant:", "ground_truth": "Initializes this Processor by setting an upstream Subscription that\nignores request amounts, uses an unbounded buffer\nand allows using the onXXX and offer methods\nafterwards.", "predict": "Start the unbounded pipeline."}
{"ID": 55, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean offer(T t) { if (once.get()) { return false; } ObjectHelper.requireNonNull(t, \"offer called with null. Null values are generally not allowed in 2.x operators and sources.\"); if (fusionMode == QueueSubscription.NONE) { if (queue.offer(t)) { drain(); return true; } } return false; }. ### Assistant:", "ground_truth": "Tries to offer an item into the internal queue and returns false\nif the queue is full.\n@param t the item to offer, not null\n@return true if successful, false if the queue is full", "predict": "Offer an item to the queue. If the queue is already full, the item will be dropped. @param t the item to offer @return true if the item was offered successfully, false if the queue was already full"}
{"ID": 56, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Nullable public Disposable get() { Disposable d = resource.get(); if (d == DisposableHelper.DISPOSED) { return Disposables.disposed(); } return d; }. ### Assistant:", "ground_truth": "Returns the currently contained Disposable or null if this container is empty.\n@return the current Disposable, may be null", "predict": "Returns the resource, or null if it has been disposed."}
{"ID": 57, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public final void complete(T value) { int state = get(); if ((state & (FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED)) != 0) { return; } Observer<? super T> a = downstream; if (state == FUSED_EMPTY) { this.value = value; lazySet(FUSED_READY); a.onNext(null); } else { lazySet(TERMINATED); a.onNext(value); } if (get() != DISPOSED) { a.onComplete(); } }. ### Assistant:", "ground_truth": "Complete the target with a single value or indicate there is a value available in\nfusion mode.\n@param value the value to signal, not null (not verified)", "predict": "Completes the fuseable with the given value. @param value the value to complete the fuseable with."}
{"ID": 58, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public final void error(Throwable t) { int state = get(); if ((state & (FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED)) != 0) { RxJavaPlugins.onError(t); return; } lazySet(TERMINATED); downstream.onError(t); }. ### Assistant:", "ground_truth": "Complete the target with an error signal.\n@param t the Throwable to signal, not null (not verified)", "predict": "Signal an error to the downstream consumer. @param t the error to be signaled"}
{"ID": 59, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public final void complete() { int state = get(); if ((state & (FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED)) != 0) { return; } lazySet(TERMINATED); downstream.onComplete(); }. ### Assistant:", "ground_truth": "Complete the target without any value.", "predict": "Complete the stream."}
{"ID": 60, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @CheckReturnValue @BackpressureSupport(BackpressureKind.FULL) @SchedulerSupport(SchedulerSupport.NONE) public final <R> Flowable<R> concatMapDelayError(Function<? super T, ? extends Publisher<? extends R>> mapper) { return concatMapDelayError(mapper, 2, true); }. ### Assistant:", "ground_truth": "Maps each of the items into a Publisher, subscribes to them one after the other,\none at a time and emits their values in order\nwhile delaying any error from either this or any of the inner Publishers\ntill all of them terminate.\n\n<dl>\n<dt><b>Backpressure:</b></dt>\n<dd>The operator honors backpressure from downstream. Both this and the inner {@code Publisher}s are\nexpected to honor backpressure as well. If the source {@code Publisher} violates the rule, the operator will\nsignal a {@code MissingBackpressureException}. If any of the inner {@code Publisher}s doesn't honor\nbackpressure, that <em>may</em> throw an {@code IllegalStateException} when that\n{@code Publisher} completes.</dd>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code concatMapDelayError} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n\n@param <R> the result value type\n@param mapper the function that maps the items of this Publisher into the inner Publishers.\n@return the new Publisher instance with the concatenation behavior", "predict": "Maps each value emitted by the source Publisher into a Publisher, and emits the result of each Publisher. @param mapper the function used to map each value emitted by the source Publisher into a Publisher @return a Flowable that emits the result of applying the mapping function to each item emitted by the source Publisher, and then emits the error of that Publisher, if it is an Publisher<Throwable> @see <a href=\"https://github.com/reactor/reactor-core/issues/2006\">#2006</a> @since 3.0\n */\n@CheckReturnValue\n@BackpressureSupport(BackpressureKind.FULL)\n@SchedulerSupport(SchedulerSupport.NONE)\npublic final <R> Flowable<R> concatMapDelayError(Function<? super T, ? extends Publisher<? extends R>> mapper) {\n    ObjectHelper.requireNonNull(mapper,"}
{"ID": 61, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @CheckReturnValue @BackpressureSupport(BackpressureKind.FULL) @SchedulerSupport(SchedulerSupport.NONE) public final <U> Flowable<U> concatMapIterable(Function<? super T, ? extends Iterable<? extends U>> mapper) { return concatMapIterable(mapper, 2); }. ### Assistant:", "ground_truth": "Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an\nIterable corresponding to that item that is generated by a selector.\n\n<dl>\n<dt><b>Backpressure:</b></dt>\n<dd>The operator honors backpressure from downstream. The source {@code Publisher}s is\nexpected to honor backpressure as well. If the source {@code Publisher} violates the rule, the operator will\nsignal a {@code MissingBackpressureException}.</dd>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code concatMapIterable} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n\n@param <U>\nthe type of item emitted by the resulting Publisher\n@param mapper\na function that returns an Iterable sequence of values for when given an item emitted by the\nsource Publisher\n@return a Flowable that emits the results of concatenating the items emitted by the source Publisher with\nthe values in the Iterables corresponding to those items, as generated by {@code collectionSelector}\n@see <a href=\"http://reactivex.io/documentation/operators/flatmap.html\">ReactiveX operators documentation: FlatMap</a>", "predict": "Maps each item emitted by the source Publisher into a Publisher that emits the items emitted by the Iterable returned from the specified mapper function. <strong>Note:</strong> This operator does not operate on the original Publisher, but on a Publisher that is derived from the original Publisher. @param mapper the function to apply to each item emitted by the source Publisher @return a Flowable that emits the items emitted by the Iterable returned from the specified mapper function, in the order they are emitted by the source Publisher, without any transformation @see <a href=\"https://github.com/reactor/reactor-core/issues/2005\">#2005</a> @see <a href=\"https://github.com/reactor/reactor-core/issues/3049\">#3049</a> @see <a href=\"https://github.com/reactor/reactor-core/issues/"}
{"ID": 62, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @CheckReturnValue @NonNull @BackpressureSupport(BackpressureKind.FULL) @SchedulerSupport(SchedulerSupport.NONE) public final Flowable<T> sorted(Comparator<? super T> sortFunction) { ObjectHelper.requireNonNull(sortFunction, \"sortFunction\"); return toList().toFlowable().map(Functions.listSorter(sortFunction)).flatMapIterable(Functions.<List<T>>identity()); }. ### Assistant:", "ground_truth": "Returns a Flowable that emits the events emitted by source Publisher, in a\nsorted order based on a specified comparison function.\n\n<p>Note that calling {@code sorted} with long, non-terminating or infinite sources\nmight cause {@link OutOfMemoryError}\n\n<dl>\n<dt><b>Backpressure:</b></dt>\n<dd>The operator honors backpressure from downstream and consumes the source {@code Publisher} in an\nunbounded manner (i.e., without applying backpressure to it).</dd>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code sorted} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n\n@param sortFunction\na function that compares two items emitted by the source Publisher and returns an Integer\nthat indicates their sort order\n@return a Flowable that emits the items emitted by the source Publisher in sorted order", "predict": "Collects the items of this observable in a sorted order according to the specified comparator. The resulting observable emits the sorted items in ascending order. @param sortFunction the sorting function to use. @return the new observable\n */\n@CheckReturnValue @NonNull @BackpressureSupport(BackpressureKind.FULL) @SchedulerSupport(SchedulerSupport.NONE) public final Flowable<T> sorted(Comparator<? super T> sortFunction) {\n    ObjectHelper.requireNonNull(sortFunction, \"sortFunction\");\n    return toList().toFlowable().map(Functions.listSorter(sortFunction)).flatMapIterable(Functions.<List<T>>identity());\n}\n\n/**\n * Collects the items of this observable in a sorted order according to the specified comparator. The resulting observable emits the sorted items in ascending order.\n * <dl>\n *  <dt><b>Backpressure:</b></dt>\n * "}
{"ID": 63, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public PerfAsyncConsumer await(int count) { if (count <= 1000) { while (getCount() != 0) { } } else { try { await(); } catch (InterruptedException ex) { throw new RuntimeException(ex); } } return this; }. ### Assistant:", "ground_truth": "Wait for the terminal signal.\n@param count if less than 1001, a spin-wait is used\n@return this", "predict": "Wait until the number of messages in the queue is zero. If the number of messages is less than count, the consumer will continue to consume messages. If the number of messages is greater than count, the consumer will block until the number of messages is zero. @param count the maximum number of messages to wait for. @return the consumer."}
{"ID": 64, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected final void request(long n) { Subscription s = this.upstream; if (s != null) { s.request(n); } }. ### Assistant:", "ground_truth": "Requests from the upstream Subscription.\n@param n the request amount, positive", "predict": "Requests the specified amount of items from the upstream. If the upstream is not yet subscribed, this method will not do anything."}
{"ID": 65, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: boolean add(PublishDisposable<T> ps) { for (;;) { PublishDisposable<T>[] a = subscribers.get(); if (a == TERMINATED) { return false; } int n = a.length; @SuppressWarnings(\"unchecked\") PublishDisposable<T>[] b = new PublishDisposable[n + 1]; System.arraycopy(a, 0, b, 0, n); b[n] = ps; if (subscribers.compareAndSet(a, b)) { return true; } } }. ### Assistant:", "ground_truth": "Tries to add the given subscriber to the subscribers array atomically\nor returns false if the subject has terminated.\n@param ps the subscriber to add\n@return true if successful, false if the subject has terminated", "predict": "Adds the given Subscriber to the list of subscribers. @param ps the Subscriber to add @return true if successful, false if the Subscriber was already subscribed"}
{"ID": 66, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") void remove(PublishDisposable<T> ps) { for (;;) { PublishDisposable<T>[] a = subscribers.get(); if (a == TERMINATED || a == EMPTY) { return; } int n = a.length; int j = -1; for (int i = 0; i < n; i++) { if (a[i] == ps) { j = i; break; } } if (j < 0) { return; } PublishDisposable<T>[] b; if (n == 1) { b = EMPTY; } else { b = new PublishDisposable[n - 1]; System.arraycopy(a, 0, b, 0, j); System.arraycopy(a, j + 1, b, j, n - j - 1); } if (subscribers.compareAndSet(a, b)) { return; } } }. ### Assistant:", "ground_truth": "Atomically removes the given subscriber if it is subscribed to the subject.\n@param ps the subject to remove", "predict": "Remove the specified Subscriber from the list of subscribers. The subscriber will be unsubscribed from all downstream Subscribers. @param ps the Subscriber to remove"}
{"ID": 67, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <T> ConnectableFlowable<T> observeOn(final ConnectableFlowable<T> cf, final Scheduler scheduler) { final Flowable<T> flowable = cf.observeOn(scheduler); return RxJavaPlugins.onAssembly(new ConnectableFlowableReplay<T>(cf, flowable)); }. ### Assistant:", "ground_truth": "Child Subscribers will observe the events of the ConnectableObservable on the\nspecified scheduler.\n@param <T> the value type\n@param cf the ConnectableFlowable to wrap\n@param scheduler the target scheduler\n@return the new ConnectableObservable instance", "predict": "Create an Flowable that replays the upstream Flowable's items on the specified Scheduler. @param cf the ConnectableFlowable to observe on @param scheduler the Scheduler to observe on @return the new Flowable instance @see <a href=\"http://reactivex.io/documentation/operators/observeon.html\">ReactiveX: ObserveOn</a>"}
{"ID": 68, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: static <ResponseT, ReturnT> HttpServiceMethod<ResponseT, ReturnT> parseAnnotations( Retrofit retrofit, Method method, RequestFactory requestFactory) { boolean isKotlinSuspendFunction = requestFactory.isKotlinSuspendFunction; boolean continuationWantsResponse = false; boolean continuationBodyNullable = false; Annotation[] annotations = method.getAnnotations(); Type adapterType; if (isKotlinSuspendFunction) { Type[] parameterTypes = method.getGenericParameterTypes(); Type responseType = Utils.getParameterLowerBound(0, (ParameterizedType) parameterTypes[parameterTypes.length - 1]); if (getRawType(responseType) == Response.class && responseType instanceof ParameterizedType) { // Unwrap the actual body type from Response<T>. responseType = Utils.getParameterUpperBound(0, (ParameterizedType) responseType); continuationWantsResponse = true; } else { // TODO figure out if type is nullable or not // Metadata metadata = method.getDeclaringClass().getAnnotation(Metadata.class) // Find the entry for method // Determine if return type is nullable or not } adapterType = new Utils.ParameterizedTypeImpl(null, Call.class, responseType); annotations = SkipCallbackExecutorImpl.ensurePresent(annotations); } else { adapterType = method.getGenericReturnType(); } CallAdapter<ResponseT, ReturnT> callAdapter = createCallAdapter(retrofit, method, adapterType, annotations); Type responseType = callAdapter.responseType(); if (responseType == okhttp3.Response.class) { throw methodError(method, \"'\" + getRawType(responseType).getName() + \"' is not a valid response body type. Did you mean ResponseBody?\"); } if (responseType == Response.class) { throw methodError(method, \"Response must include generic type (e.g., Response<String>)\"); } // TODO support Unit for Kotlin? if (requestFactory.httpMethod.equals(\"HEAD\") && !Void.class.equals(responseType)) { throw methodError(method, \"HEAD method must use Void as response type.\"); } Converter<ResponseBody, ResponseT> responseConverter = createResponseConverter(retrofit, method, responseType); okhttp3.Call.Factory callFactory = retrofit.callFactory; if (!isKotlinSuspendFunction) { return new CallAdapted<>(requestFactory, callFactory, responseConverter, callAdapter); } else if (continuationWantsResponse) { //noinspection unchecked Kotlin compiler guarantees ReturnT to be Object. return (HttpServiceMethod<ResponseT, ReturnT>) new SuspendForResponse<>(requestFactory, callFactory, responseConverter, (CallAdapter<ResponseT, Call<ResponseT>>) callAdapter); } else { //noinspection unchecked Kotlin compiler guarantees ReturnT to be Object. return (HttpServiceMethod<ResponseT, ReturnT>) new SuspendForBody<>(requestFactory, callFactory, responseConverter, (CallAdapter<ResponseT, Call<ResponseT>>) callAdapter, continuationBodyNullable); } }. ### Assistant:", "ground_truth": "Inspects the annotations on an interface method to construct a reusable service method that\nspeaks HTTP. This requires potentially-expensive reflection so it is best to build each service\nmethod only once and reuse it.", "predict": "Parse annotations to create a CallAdapter."}
{"ID": 69, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void setDelay(long amount, TimeUnit unit) { if (amount < 0) { throw new IllegalArgumentException(\"Amount must be positive value.\"); } this.delayMs = unit.toMillis(amount); }. ### Assistant:", "ground_truth": "Set the network round trip delay.", "predict": "Set delay amount in milliseconds. @param amount delay amount in milliseconds. @param unit delay unit."}
{"ID": 70, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Response<?> createErrorResponse() { Response<?> call; try { call = errorFactory.call(); } catch (Exception e) { throw new IllegalStateException(\"Error factory threw an exception.\", e); } if (call == null) { throw new IllegalStateException(\"Error factory returned null.\"); } if (call.isSuccessful()) { throw new IllegalStateException(\"Error factory returned successful response.\"); } return call; }. ### Assistant:", "ground_truth": "The HTTP error to be used when an error is triggered.", "predict": "Creates a response for an error. @return A response for an error."}
{"ID": 71, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public long calculateDelay(TimeUnit unit) { float delta = variancePercent / 100f; // e.g., 20 / 100f == 0.2f float lowerBound = 1f - delta; // 0.2f --> 0.8f float upperBound = 1f + delta; // 0.2f --> 1.2f float bound = upperBound - lowerBound; // 1.2f - 0.8f == 0.4f float delayPercent = lowerBound + (random.nextFloat() * bound); // 0.8 + (rnd * 0.4) long callDelayMs = (long) (delayMs * delayPercent); return MILLISECONDS.convert(callDelayMs, unit); }. ### Assistant:", "ground_truth": "Get the delay that should be used for delaying a response in accordance with configured\nbehavior.", "predict": "Calculate delay time in given unit."}
{"ID": 72, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void createSampleData(String username, String password) { Assert.notNull(documentDao, \"DocumentDao required\"); Assert.hasText(username, \"Username required\"); Authentication auth = new UsernamePasswordAuthenticationToken(username, password); try { // Set the SecurityContextHolder ThreadLocal so any subclasses // automatically know which user is operating SecurityContextHolder.getContext().setAuthentication(auth); // Create the home directory first Directory home = new Directory(username, Directory.ROOT_DIRECTORY); documentDao.create(home); addPermission(documentDao, home, username, LEVEL_GRANT_ADMIN); addPermission(documentDao, home, \"ROLE_USER\", LEVEL_GRANT_READ); createFiles(documentDao, home); // Now create the confidential directory Directory confid = new Directory(\"confidential\", home); documentDao.create(confid); addPermission(documentDao, confid, \"ROLE_USER\", LEVEL_NEGATE_READ); createFiles(documentDao, confid); // Now create the shared directory Directory shared = new Directory(\"shared\", home); documentDao.create(shared); addPermission(documentDao, shared, \"ROLE_USER\", LEVEL_GRANT_READ); addPermission(documentDao, shared, \"ROLE_USER\", LEVEL_GRANT_WRITE); createFiles(documentDao, shared); } finally { // Clear the SecurityContextHolder ThreadLocal so future calls are // guaranteed to be clean SecurityContextHolder.clearContext(); } }. ### Assistant:", "ground_truth": "Creates a directory for the user, and a series of sub-directories. The root\ndirectory is the parent for the user directory. The sub-directories are\n\"confidential\" and \"shared\". The ROLE_USER will be given read and write access to\n\"shared\".", "predict": "Creates sample data in the documentDao. @param username The username of the user creating the data @param password The password of the user creating the data"}
{"ID": 73, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static HttpMethod valueOf(String method) { try { return HttpMethod.valueOf(method); } catch (IllegalArgumentException e) { } return null; }. ### Assistant:", "ground_truth": "Provides a save way of obtaining the HttpMethod from a String. If the method is\ninvalid, returns null.\n\n@param method the HTTP method to use.\n\n@return the HttpMethod or null if method is invalid.", "predict": "Returns the HttpMethod corresponding to the given method name. If the name is not recognized, returns null."}
{"ID": 74, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public DirContextOperations searchForUser(String username) { if (logger.isDebugEnabled()) { logger.debug(\"Searching for user '\" + username + \"', with user search \" + this); } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate( contextSource); template.setSearchControls(searchControls); try { return template.searchForSingleEntry(searchBase, searchFilter, new String[] { username }); } catch (IncorrectResultSizeDataAccessException notFound) { if (notFound.getActualSize() == 0) { throw new UsernameNotFoundException(\"User \" + username + \" not found in directory.\"); } // Search should never return multiple results if properly configured, so just // rethrow throw notFound; } }. ### Assistant:", "ground_truth": "Return the LdapUserDetails containing the user's information\n\n@param username the username to search for.\n\n@return An LdapUserDetails object containing the details of the located user's\ndirectory entry\n\n@throws UsernameNotFoundException if no matching entry is found.", "predict": "Search for a user by username. Returns null if the user is not found. @param username the username to search for @return the user or null if not found"}
{"ID": 75, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String encode(CharSequence rawPassword) { String salt = PREFIX + this.saltGenerator.generateKey() + SUFFIX; return digest(salt, rawPassword); }. ### Assistant:", "ground_truth": "Encodes the rawPass using a MessageDigest. If a salt is specified it will be merged\nwith the password before encoding.\n\n@param rawPassword The plain text password\n@return Hex string of password digest (or base64 encoded string if\nencodeHashAsBase64 is enabled.", "predict": "Encodes a password using the salt. @param rawPassword the password to encode. @return the encoded password."}
{"ID": 76, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean matches(CharSequence rawPassword, String encodedPassword) { String salt = extractSalt(encodedPassword); String rawPasswordEncoded = digest(salt, rawPassword); return PasswordEncoderUtils.equals(encodedPassword.toString(), rawPasswordEncoded); }. ### Assistant:", "ground_truth": "Takes a previously encoded password and compares it with a rawpassword after mixing\nin the salt and encoding that value\n\n@param rawPassword plain text password\n@param encodedPassword previously encoded password\n@return true or false", "predict": "Matches the plaintext password with the encoded password."}
{"ID": 77, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static void performVersionChecks(String minSpringVersion) { if (minSpringVersion == null) { return; } // Check Spring Compatibility String springVersion = SpringVersion.getVersion(); String version = getVersion(); if (disableChecks(springVersion, version)) { return; } logger.info(\"You are running with Spring Security Core \" + version); if (new ComparableVersion(springVersion) .compareTo(new ComparableVersion(minSpringVersion)) < 0) { logger.warn(\"**** You are advised to use Spring \" + minSpringVersion + \" or later with this version. You are running: \" + springVersion); } }. ### Assistant:", "ground_truth": "Perform version checks with specific min Spring Version\n\n@param minSpringVersion", "predict": "Checks the Spring version against the minimum version specified in the configuration. If the version is less than the minimum, a warning message is logged."}
{"ID": 78, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static boolean disableChecks(String springVersion, String springSecurityVersion) { if (springVersion == null || springVersion.equals(springSecurityVersion)) { return true; } return Boolean.getBoolean(DISABLE_CHECKS); }. ### Assistant:", "ground_truth": "Disable if springVersion and springSecurityVersion are the same to allow working\nwith Uber Jars.\n\n@param springVersion\n@param springSecurityVersion\n@return", "predict": "Disable checks for compatibility between Spring and Spring Security versions. @param springVersion Spring version @param springSecurityVersion Spring Security version @return true if checks should be disabled"}
{"ID": 79, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static String getSpringVersion() { Properties properties = new Properties(); try { properties.load(SpringSecurityCoreVersion.class.getClassLoader().getResourceAsStream(\"META-INF/spring-security.versions\")); } catch (IOException | NullPointerException e) { return null; } return properties.getProperty(\"org.springframework:spring-core\"); }. ### Assistant:", "ground_truth": "Loads the spring version or null if it cannot be found.\n@return", "predict": "Returns the Spring version from the spring-security.versions file. @return The Spring version from the spring-security.versions file."}
{"ID": 80, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public AttributeExchangeConfigurer attributeExchange(String identifierPattern) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer( identifierPattern); this.attributeExchangeConfigurers.add(attributeExchangeConfigurer); return attributeExchangeConfigurer; }. ### Assistant:", "ground_truth": "Sets up OpenID attribute exchange for OpenID's matching the specified pattern.\n\n@param identifierPattern the regular expression for matching on OpenID's (i.e.\n\"https://www.google.com/.*\", \".*yahoo.com.*\", etc)\n@return a {@link AttributeExchangeConfigurer} for further customizations of the\nattribute exchange", "predict": "Adds an AttributeExchangeConfigurer to the exchange configuration. @param identifierPattern the pattern for the incoming attribute exchange identifiers. @return the AttributeExchangeConfigurer that was added."}
{"ID": 81, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public OAuth2ClientConfigurer<HttpSecurity> oauth2Client() throws Exception { OAuth2ClientConfigurer<HttpSecurity> configurer = getOrApply(new OAuth2ClientConfigurer<>()); this.postProcess(configurer); return configurer; }. ### Assistant:", "ground_truth": "Configures OAuth 2.0 Client support.\n\n@since 5.1\n@see <a target=\"_blank\" href=\"https://tools.ietf.org/html/rfc6749#section-1.1\">OAuth 2.0 Authorization Framework</a>\n@return the {@link OAuth2ClientConfigurer} for further customizations\n@throws Exception", "predict": "Configure OAuth2 client authentication. @return the OAuth2 client authentication configuration @throws Exception if failed to configure OAuth2 client authentication"}
{"ID": 82, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public OAuth2ResourceServerConfigurer<HttpSecurity> oauth2ResourceServer() throws Exception { OAuth2ResourceServerConfigurer<HttpSecurity> configurer = getOrApply(new OAuth2ResourceServerConfigurer<>(getContext())); this.postProcess(configurer); return configurer; }. ### Assistant:", "ground_truth": "Configures OAuth 2.0 Resource Server support.\n\n@since 5.1\n@see <a target=\"_blank\" href=\"https://tools.ietf.org/html/rfc6749#section-1.1\">OAuth 2.0 Authorization Framework</a>\n@return the {@link OAuth2ResourceServerConfigurer} for further customizations\n@throws Exception", "predict": "Configure the OAuth2 resource server. @return the configured OAuth2 resource server @throws Exception if failed to configure OAuth2 resource server"}
{"ID": 83, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ChannelSecurityConfigurer<HttpSecurity>.ChannelRequestMatcherRegistry requiresChannel() throws Exception { ApplicationContext context = getContext(); return getOrApply(new ChannelSecurityConfigurer<>(context)) .getRegistry(); }. ### Assistant:", "ground_truth": "Configures channel security. In order for this configuration to be useful at least\none mapping to a required channel must be provided.\n\n<h2>Example Configuration</h2>\n\nThe example below demonstrates how to require HTTPs for every request. Only\nrequiring HTTPS for some requests is supported, but not recommended since an\napplication that allows for HTTP introduces many security vulnerabilities. For one\nsuch example, read about <a\nhref=\"https://en.wikipedia.org/wiki/Firesheep\">Firesheep</a>.\n\n<pre>\n&#064;Configuration\n&#064;EnableWebSecurity\npublic class ChannelSecurityConfig extends WebSecurityConfigurerAdapter {\n\n&#064;Override\nprotected void configure(HttpSecurity http) throws Exception {\nhttp.authorizeRequests().antMatchers(&quot;/**&quot;).hasRole(&quot;USER&quot;).and().formLogin()\n.and().requiresChannel().anyRequest().requiresSecure();\n}\n\n&#064;Override\nprotected void configure(AuthenticationManagerBuilder auth) throws Exception {\nauth.inMemoryAuthentication().withUser(&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;);\n}\n}\n</pre>\n\n\n@return the {@link ChannelSecurityConfigurer} for further customizations\n@throws Exception", "predict": "Returns the ChannelRequestMatcherRegistry of the ChannelSecurityConfigurer. @return ChannelRequestMatcherRegistry of the ChannelSecurityConfigurer. @throws Exception if the ChannelSecurityConfigurer is not present in the Spring context."}
{"ID": 84, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean compare(final String dn, final String attributeName, final Object value) { final String comparisonFilter = \"(\" + attributeName + \"={0})\"; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext(DirContext ctx) throws NamingException { SearchControls ctls = new SearchControls(); ctls.setReturningAttributes(NO_ATTRS); ctls.setSearchScope(SearchControls.OBJECT_SCOPE); NamingEnumeration<SearchResult> results = ctx.search(dn, comparisonFilter, new Object[] { value }, ctls); Boolean match = Boolean.valueOf(results.hasMore()); LdapUtils.closeEnumeration(results); return match; } } Boolean matches = (Boolean) executeReadOnly(new LdapCompareCallback()); return matches.booleanValue(); }. ### Assistant:", "ground_truth": "Performs an LDAP compare operation of the value of an attribute for a particular\ndirectory entry.\n\n@param dn the entry who's attribute is to be used\n@param attributeName the attribute who's value we want to compare\n@param value the value to be checked against the directory value\n\n@return true if the supplied value matches that in the directory", "predict": "Compare the DN, attributeName and value against the directory. @param dn the distinguished name of the entry to compare against. @param attributeName the attribute name to compare. @param value the value to compare. @return true if the comparison succeeds, false otherwise."}
{"ID": 85, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public DirContextOperations retrieveEntry(final String dn, final String[] attributesToRetrieve) { return (DirContextOperations) executeReadOnly(new ContextExecutor() { public Object executeWithContext(DirContext ctx) throws NamingException { Attributes attrs = ctx.getAttributes(dn, attributesToRetrieve); // Object object = ctx.lookup(LdapUtils.getRelativeName(dn, ctx)); return new DirContextAdapter(attrs, new DistinguishedName(dn), new DistinguishedName(ctx.getNameInNamespace())); } }); }. ### Assistant:", "ground_truth": "Composes an object from the attributes of the given DN.\n\n@param dn the directory entry which will be read\n@param attributesToRetrieve the named attributes which will be retrieved from the\ndirectory entry.\n\n@return the object created by the mapper", "predict": "Retrieve a DirContextOperations object for the entry associated with the specified DN. @param dn the DN of the entry to retrieve @param attributesToRetrieve the attributes to retrieve @return DirContextOperations object for the entry"}
{"ID": 86, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Set<String> searchForSingleAttributeValues(final String base, final String filter, final Object[] params, final String attributeName) { String[] attributeNames = new String[] { attributeName }; Set<Map<String, List<String>>> multipleAttributeValues = searchForMultipleAttributeValues( base, filter, params, attributeNames); Set<String> result = new HashSet<>(); for (Map<String, List<String>> map : multipleAttributeValues) { List<String> values = map.get(attributeName); if (values != null) { result.addAll(values); } } return result; }. ### Assistant:", "ground_truth": "Performs a search using the supplied filter and returns the union of the values of\nthe named attribute found in all entries matched by the search. Note that one\ndirectory entry may have several values for the attribute. Intended for role\nsearches and similar scenarios.\n\n@param base the DN to search in\n@param filter search filter to use\n@param params the parameters to substitute in the search filter\n@param attributeName the attribute who's values are to be retrieved.\n\n@return the set of String values for the attribute as a union of the values found\nin all the matching entries.", "predict": "Search for single attribute values. @param base the base table name @param filter the filter @param params the parameters @param attributeName the attribute name @return the attribute values"}
{"ID": 87, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Set<Map<String, List<String>>> searchForMultipleAttributeValues( final String base, final String filter, final Object[] params, final String[] attributeNames) { // Escape the params acording to RFC2254 Object[] encodedParams = new String[params.length]; for (int i = 0; i < params.length; i++) { encodedParams[i] = LdapEncoder.filterEncode(params[i].toString()); } String formattedFilter = MessageFormat.format(filter, encodedParams); logger.debug(\"Using filter: \" + formattedFilter); final HashSet<Map<String, List<String>>> set = new HashSet<Map<String, List<String>>>(); ContextMapper roleMapper = new ContextMapper() { public Object mapFromContext(Object ctx) { DirContextAdapter adapter = (DirContextAdapter) ctx; Map<String, List<String>> record = new HashMap<String, List<String>>(); if (attributeNames == null || attributeNames.length == 0) { try { for (NamingEnumeration ae = adapter.getAttributes().getAll(); ae .hasMore();) { Attribute attr = (Attribute) ae.next(); extractStringAttributeValues(adapter, record, attr.getID()); } } catch (NamingException x) { org.springframework.ldap.support.LdapUtils .convertLdapException(x); } } else { for (String attributeName : attributeNames) { extractStringAttributeValues(adapter, record, attributeName); } } record.put(DN_KEY, Arrays.asList(getAdapterDN(adapter))); set.add(record); return null; } }; SearchControls ctls = new SearchControls(); ctls.setSearchScope(searchControls.getSearchScope()); ctls.setReturningAttributes(attributeNames != null && attributeNames.length > 0 ? attributeNames : null); search(base, formattedFilter, ctls, roleMapper); return set; }. ### Assistant:", "ground_truth": "Performs a search using the supplied filter and returns the values of each named\nattribute found in all entries matched by the search. Note that one directory entry\nmay have several values for the attribute. Intended for role searches and similar\nscenarios.\n\n@param base the DN to search in\n@param filter search filter to use\n@param params the parameters to substitute in the search filter\n@param attributeNames the attributes' values that are to be retrieved.\n\n@return the set of String values for each attribute found in all the matching\nentries. The attribute name is the key for each set of values. In addition each map\ncontains the DN as a String with the key predefined key {@link #DN_KEY}.", "predict": "Search for multiple attribute values. @param base the base DN @param filter the filter to use @param params the parameters to use in the filter @param attributeNames the names of the attributes to extract values from @return the results of the search"}
{"ID": 88, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static DirContextOperations searchForSingleEntryInternal(DirContext ctx, SearchControls searchControls, String base, String filter, Object[] params) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName( ctx.getNameInNamespace()); final DistinguishedName searchBaseDn = new DistinguishedName(base); final NamingEnumeration<SearchResult> resultsEnum = ctx.search(searchBaseDn, filter, params, buildControls(searchControls)); if (logger.isDebugEnabled()) { logger.debug(\"Searching for entry under DN '\" + ctxBaseDn + \"', base = '\" + searchBaseDn + \"', filter = '\" + filter + \"'\"); } Set<DirContextOperations> results = new HashSet<>(); try { while (resultsEnum.hasMore()) { SearchResult searchResult = resultsEnum.next(); DirContextAdapter dca = (DirContextAdapter) searchResult.getObject(); Assert.notNull(dca, \"No object returned by search, DirContext is not correctly configured\"); if (logger.isDebugEnabled()) { logger.debug(\"Found DN: \" + dca.getDn()); } results.add(dca); } } catch (PartialResultException e) { LdapUtils.closeEnumeration(resultsEnum); logger.info(\"Ignoring PartialResultException\"); } if (results.size() == 0) { throw new IncorrectResultSizeDataAccessException(1, 0); } if (results.size() > 1) { throw new IncorrectResultSizeDataAccessException(1, results.size()); } return results.iterator().next(); }. ### Assistant:", "ground_truth": "Internal method extracted to avoid code duplication in AD search.", "predict": "Search for a single entry under the given base DN, using the given filter and parameters. The search is performed using the given search controls. The search is performed using the search controls provided, and the results are returned as a DirContextOperations object. The search is performed using the search controls provided, and the results are returned as a DirContextOperations object. The search is performed using the search controls provided, and the results are returned as a DirContextOperations object. The search is performed using the search controls provided, and the results are returned as a DirContextOperations object. The search is performed using the search controls provided, and the results are returned as a DirContextOperations object. The search is performed using the search controls provided, and the results are returned as a DirContextOperations object. The search is performed using the search controls provided, and the results are returned as a DirContextOperations object. The search is performed using the search controls provided, and the results are returned as a DirContextOperations object. The search is"}
{"ID": 89, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static SearchControls buildControls(SearchControls originalControls) { return new SearchControls(originalControls.getSearchScope(), originalControls.getCountLimit(), originalControls.getTimeLimit(), originalControls.getReturningAttributes(), RETURN_OBJECT, originalControls.getDerefLinkFlag()); }. ### Assistant:", "ground_truth": "We need to make sure the search controls has the return object flag set to true, in\norder for the search to return DirContextAdapter instances.\n@param originalControls\n@return", "predict": "Builds a SearchControls object from the original one. @param originalControls the original controls @return the new controls object"}
{"ID": 90, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void lookupPrimaryKeys(final Map<Serializable, Acl> acls, final Set<Long> findNow, final List<Sid> sids) { Assert.notNull(acls, \"ACLs are required\"); Assert.notEmpty(findNow, \"Items to find now required\"); String sql = computeRepeatingSql(lookupPrimaryKeysWhereClause, findNow.size()); Set<Long> parentsToLookup = jdbcTemplate.query(sql, new PreparedStatementSetter() { public void setValues(PreparedStatement ps) throws SQLException { int i = 0; for (Long toFind : findNow) { i++; ps.setLong(i, toFind); } } }, new ProcessResultSet(acls, sids)); // Lookup the parents, now that our JdbcTemplate has released the database // connection (SEC-547) if (parentsToLookup.size() > 0) { lookupPrimaryKeys(acls, parentsToLookup, sids); } }. ### Assistant:", "ground_truth": "Locates the primary key IDs specified in \"findNow\", adding AclImpl instances with\nStubAclParents to the \"acls\" Map.\n\n@param acls the AclImpls (with StubAclParents)\n@param findNow Long-based primary keys to retrieve\n@param sids", "predict": "Lookup the primary keys of the items found in the database. This is done by repeatedly looking up the parents of the items until we find the primary key. This is necessary because the primary key is often stored in a different table than the table containing the items themselves."}
{"ID": 91, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails buildDetails( HttpServletRequest context) { Collection<String> j2eeUserRoles = getUserRoles(context); Collection<? extends GrantedAuthority> userGas = j2eeUserRoles2GrantedAuthoritiesMapper .getGrantedAuthorities(j2eeUserRoles); if (logger.isDebugEnabled()) { logger.debug(\"J2EE roles [\" + j2eeUserRoles + \"] mapped to Granted Authorities: [\" + userGas + \"]\"); } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails( context, userGas); return result; }. ### Assistant:", "ground_truth": "Builds the authentication details object.\n\n@see org.springframework.security.authentication.AuthenticationDetailsSource#buildDetails(Object)", "predict": "Build the details of the Granted Authorities for the J2EE user roles. @param context the HttpServletRequest @return the details of the Granted Authorities for the J2EE user roles."}
{"ID": 92, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private RootBeanDefinition createEmbeddedServer(Element element, ParserContext parserContext) { Object source = parserContext.extractSource(element); String suffix = element.getAttribute(ATT_ROOT_SUFFIX); if (!StringUtils.hasText(suffix)) { suffix = OPT_DEFAULT_ROOT_SUFFIX; } String port = element.getAttribute(ATT_PORT); if (!StringUtils.hasText(port)) { port = getDefaultPort(); if (logger.isDebugEnabled()) { logger.debug(\"Using default port of \" + port); } } String url = \"ldap://127.0.0.1:\" + port + \"/\" + suffix; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder .rootBeanDefinition(CONTEXT_SOURCE_CLASS); contextSource.addConstructorArgValue(url); contextSource.addPropertyValue(\"userDn\", \"uid=admin,ou=system\"); contextSource.addPropertyValue(\"password\", \"secret\"); RootBeanDefinition apacheContainer = new RootBeanDefinition( \"org.springframework.security.ldap.server.ApacheDSContainer\", null, null); apacheContainer.setSource(source); apacheContainer.getConstructorArgumentValues().addGenericArgumentValue(suffix); String ldifs = element.getAttribute(ATT_LDIF_FILE); if (!StringUtils.hasText(ldifs)) { ldifs = OPT_DEFAULT_LDIF_FILE; } apacheContainer.getConstructorArgumentValues().addGenericArgumentValue(ldifs); apacheContainer.getPropertyValues().addPropertyValue(\"port\", port); logger.info(\"Embedded LDAP server bean definition created for URL: \" + url); if (parserContext.getRegistry() .containsBeanDefinition(BeanIds.EMBEDDED_APACHE_DS)) { parserContext.getReaderContext().error( \"Only one embedded server bean is allowed per application context\", element); } parserContext.getRegistry().registerBeanDefinition(BeanIds.EMBEDDED_APACHE_DS, apacheContainer); return (RootBeanDefinition) contextSource.getBeanDefinition(); }. ### Assistant:", "ground_truth": "Will be called if no url attribute is supplied.\n\nRegisters beans to create an embedded apache directory server.\n\n@return the BeanDefinition for the ContextSource for the embedded server.\n\n@see ApacheDSContainer", "predict": "Create an embedded ApacheDS server bean definition. @param element the element @param parserContext the parser context @return the embedded ApacheDS server bean definition"}
{"ID": 93, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void createServletApiFilter(BeanReference authenticationManager) { final String ATT_SERVLET_API_PROVISION = \"servlet-api-provision\"; final String DEF_SERVLET_API_PROVISION = \"true\"; String provideServletApi = httpElt.getAttribute(ATT_SERVLET_API_PROVISION); if (!StringUtils.hasText(provideServletApi)) { provideServletApi = DEF_SERVLET_API_PROVISION; } if (\"true\".equals(provideServletApi)) { servApiFilter = GrantedAuthorityDefaultsParserUtils.registerWithDefaultRolePrefix(pc, SecurityContextHolderAwareRequestFilterBeanFactory.class); servApiFilter.getPropertyValues().add(\"authenticationManager\", authenticationManager); } }. ### Assistant:", "ground_truth": "Adds the servlet-api integration filter if required", "predict": "Create ServletApiFilter bean. @param authenticationManager AuthenticationManager bean."}
{"ID": 94, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void createJaasApiFilter() { final String ATT_JAAS_API_PROVISION = \"jaas-api-provision\"; final String DEF_JAAS_API_PROVISION = \"false\"; String provideJaasApi = httpElt.getAttribute(ATT_JAAS_API_PROVISION); if (!StringUtils.hasText(provideJaasApi)) { provideJaasApi = DEF_JAAS_API_PROVISION; } if (\"true\".equals(provideJaasApi)) { jaasApiFilter = new RootBeanDefinition(JaasApiIntegrationFilter.class); } }. ### Assistant:", "ground_truth": "Adds the jaas-api integration filter if required", "predict": "Create jaas-api filter bean definition."}
{"ID": 95, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static TypeResolverBuilder<? extends TypeResolverBuilder> createWhitelistedDefaultTyping() { TypeResolverBuilder<? extends TypeResolverBuilder> result = new WhitelistTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); result = result.init(JsonTypeInfo.Id.CLASS, null); result = result.inclusion(JsonTypeInfo.As.PROPERTY); return result; }. ### Assistant:", "ground_truth": "Creates a TypeResolverBuilder that performs whitelisting.\n@return a TypeResolverBuilder that performs whitelisting.", "predict": "Create a default typing resolver that includes class level type information and allows properties to be annotated with JsonTypeInfo.As.PROPERTY. This is useful for cases where you want to allow properties to be annotated with JsonTypeInfo.As.PROPERTY but don't want to include the class level type information. @return A typing resolver that includes class level type information and allows properties to be annotated with JsonTypeInfo.As.PROPERTY."}
{"ID": 96, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void insertSpringSecurityFilterChain(ServletContext servletContext) { String filterName = DEFAULT_FILTER_NAME; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy( filterName); String contextAttribute = getWebApplicationContextAttribute(); if (contextAttribute != null) { springSecurityFilterChain.setContextAttribute(contextAttribute); } registerFilter(servletContext, true, filterName, springSecurityFilterChain); }. ### Assistant:", "ground_truth": "Registers the springSecurityFilterChain\n@param servletContext the {@link ServletContext}", "predict": "Register the Spring Security Filter. @param servletContext ServletContext instance."}
{"ID": 97, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public PersistentRememberMeToken getTokenForSeries(String seriesId) { try { return getJdbcTemplate().queryForObject(tokensBySeriesSql, new RowMapper<PersistentRememberMeToken>() { public PersistentRememberMeToken mapRow(ResultSet rs, int rowNum) throws SQLException { return new PersistentRememberMeToken(rs.getString(1), rs .getString(2), rs.getString(3), rs.getTimestamp(4)); } }, seriesId); } catch (EmptyResultDataAccessException zeroResults) { if (logger.isDebugEnabled()) { logger.debug(\"Querying token for series '\" + seriesId + \"' returned no results.\", zeroResults); } } catch (IncorrectResultSizeDataAccessException moreThanOne) { logger.error(\"Querying token for series '\" + seriesId + \"' returned more than one value. Series\" + \" should be unique\"); } catch (DataAccessException e) { logger.error(\"Failed to load token for series \" + seriesId, e); } return null; }. ### Assistant:", "ground_truth": "Loads the token data for the supplied series identifier.\n\nIf an error occurs, it will be reported and null will be returned (since the result\nshould just be a failed persistent login).\n\n@param seriesId\n@return the token matching the series, or null if no match found or an exception\noccurred.", "predict": "Returns a token for the given series. If the series is not found, returns null."}
{"ID": 98, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public List<GrantedAuthority> getGrantedAuthorities(Collection<String> attributes) { List<GrantedAuthority> result = new ArrayList<>(attributes.size()); for (String attribute : attributes) { result.add(getGrantedAuthority(attribute)); } return result; }. ### Assistant:", "ground_truth": "Map the given list of string attributes one-to-one to Spring Security\nGrantedAuthorities.", "predict": "Returns authorities granted by the user for the given attributes. @param attributes the attributes to check. @return the authorities granted by the user for the given attributes."}
{"ID": 99, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Cipher newCipher(String algorithm) { try { return Cipher.getInstance(algorithm); } catch (NoSuchAlgorithmException e) { throw new IllegalArgumentException(\"Not a valid encryption algorithm\", e); } catch (NoSuchPaddingException e) { throw new IllegalStateException(\"Should not happen\", e); } }. ### Assistant:", "ground_truth": "Constructs a new Cipher.", "predict": "Creates a Cipher object using the specified algorithm. @param algorithm the algorithm to use. @return a Cipher object. @throws IllegalArgumentException if the algorithm is not a valid encryption algorithm. @throws IllegalStateException if the algorithm is not supported."}
{"ID": 100, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void afterPropertiesSet() { try { super.afterPropertiesSet(); } catch (ServletException e) { // convert to RuntimeException for passivity on afterPropertiesSet signature throw new RuntimeException(e); } Assert.notNull(authenticationManager, \"An AuthenticationManager must be set\"); }. ### Assistant:", "ground_truth": "Check whether all required properties have been set.", "predict": "AfterPropertiesSet override to initialize Spring Security."}
{"ID": 101, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { if (logger.isDebugEnabled()) { logger.debug(\"Checking secure context token: \" + SecurityContextHolder.getContext().getAuthentication()); } if (requiresAuthentication((HttpServletRequest) request)) { doAuthenticate((HttpServletRequest) request, (HttpServletResponse) response); } chain.doFilter(request, response); }. ### Assistant:", "ground_truth": "Try to authenticate a pre-authenticated user with Spring Security if the user has\nnot yet been authenticated.", "predict": "Authenticate the incoming request and redirect to secure context if necessary. @param request @param response @param chain @throws IOException @throws ServletException"}
{"ID": 102, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected boolean principalChanged(HttpServletRequest request, Authentication currentAuthentication) { Object principal = getPreAuthenticatedPrincipal(request); if ((principal instanceof String) && currentAuthentication.getName().equals(principal)) { return false; } if (principal != null && principal.equals(currentAuthentication.getPrincipal())) { return false; } if (logger.isDebugEnabled()) { logger.debug(\"Pre-authenticated principal has changed to \" + principal + \" and will be reauthenticated\"); } return true; }. ### Assistant:", "ground_truth": "Determines if the current principal has changed. The default implementation tries\n\n<ul>\n<li>If the {@link #getPreAuthenticatedPrincipal(HttpServletRequest)} is a String, the {@link Authentication#getName()} is compared against the pre authenticated principal</li>\n<li>Otherwise, the {@link #getPreAuthenticatedPrincipal(HttpServletRequest)} is compared against the {@link Authentication#getPrincipal()}\n</ul>\n\n<p>\nSubclasses can override this method to determine when a principal has changed.\n</p>\n\n@param request\n@param currentAuthentication\n@return true if the principal has changed, else false", "predict": "Determines whether the principal has changed and needs to be reauthenticated. @param request the incoming request @param currentAuthentication the current authentication @return true if the principal has changed and needs to be reauthenticated, false otherwise."}
{"ID": 103, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void doAuthenticate(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException { Authentication authResult; Object principal = getPreAuthenticatedPrincipal(request); Object credentials = getPreAuthenticatedCredentials(request); if (principal == null) { if (logger.isDebugEnabled()) { logger.debug(\"No pre-authenticated principal found in request\"); } return; } if (logger.isDebugEnabled()) { logger.debug(\"preAuthenticatedPrincipal = \" + principal + \", trying to authenticate\"); } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken( principal, credentials); authRequest.setDetails(authenticationDetailsSource.buildDetails(request)); authResult = authenticationManager.authenticate(authRequest); successfulAuthentication(request, response, authResult); } catch (AuthenticationException failed) { unsuccessfulAuthentication(request, response, failed); if (!continueFilterChainOnUnsuccessfulAuthentication) { throw failed; } } }. ### Assistant:", "ground_truth": "Do the actual authentication for a pre-authenticated user.", "predict": "Authenticate the user. @param request the incoming request @param response the response to send back to the client @throws IOException if there is a problem reading the incoming request @throws ServletException if there is a problem processing the incoming request"}
{"ID": 104, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void checkContentLength(long contentLengthToWrite) { this.contentWritten += contentLengthToWrite; boolean isBodyFullyWritten = this.contentLength > 0 && this.contentWritten >= this.contentLength; int bufferSize = getBufferSize(); boolean requiresFlush = bufferSize > 0 && this.contentWritten >= bufferSize; if (isBodyFullyWritten || requiresFlush) { doOnResponseCommitted(); } }. ### Assistant:", "ground_truth": "Adds the contentLengthToWrite to the total contentWritten size and checks to see if\nthe response should be written.\n\n@param contentLengthToWrite the size of the content that is about to be written.", "predict": "Check if the content length has been reached. If so, call doOnResponseCommitted. @param contentLengthToWrite the content length to write"}
{"ID": 105, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Set<GrantedAuthority> mapAuthorities( Collection<? extends GrantedAuthority> authorities) { HashSet<GrantedAuthority> mapped = new HashSet<>( authorities.size()); for (GrantedAuthority authority : authorities) { mapped.add(mapAuthority(authority.getAuthority())); } if (defaultAuthority != null) { mapped.add(defaultAuthority); } return mapped; }. ### Assistant:", "ground_truth": "Creates a mapping of the supplied authorities based on the case-conversion and\nprefix settings. The mapping will be one-to-one unless duplicates are produced\nduring the conversion. If a default authority has been set, this will also be\nassigned to each mapping.\n\n@param authorities the original authorities\n\n@return the converted set of authorities", "predict": "Maps authorities to authorities that can be used in Spring Security. @param authorities authorities to map @return authorities that can be used in Spring Security"}
{"ID": 106, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public T loginProcessingUrl(String loginProcessingUrl) { this.loginProcessingUrl = loginProcessingUrl; authFilter .setRequiresAuthenticationRequestMatcher(createLoginProcessingUrlMatcher(loginProcessingUrl)); return getSelf(); }. ### Assistant:", "ground_truth": "Specifies the URL to validate the credentials.\n\n@param loginProcessingUrl the URL to validate username and password\n@return the {@link FormLoginConfigurer} for additional customization", "predict": "Sets the login processing URL. The login processing URL is used to determine whether a request is a login request. The login processing URL is typically the login page. @param loginProcessingUrl the login processing url @return the current instance of this builder"}
{"ID": 107, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected final void updateAuthenticationDefaults() { if (loginProcessingUrl == null) { loginProcessingUrl(loginPage); } if (failureHandler == null) { failureUrl(loginPage + \"?error\"); } final LogoutConfigurer<B> logoutConfigurer = getBuilder().getConfigurer( LogoutConfigurer.class); if (logoutConfigurer != null && !logoutConfigurer.isCustomLogoutSuccess()) { logoutConfigurer.logoutSuccessUrl(loginPage + \"?logout\"); } }. ### Assistant:", "ground_truth": "Updates the default values for authentication.\n\n@throws Exception", "predict": "Update default values for authentication. @see #loginProcessingUrl(String) @see #failureHandler(RedirectUriProvider)"}
{"ID": 108, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected final void updateAccessDefaults(B http) { if (permitAll) { PermitAllSupport.permitAll(http, loginPage, loginProcessingUrl, failureUrl); } }. ### Assistant:", "ground_truth": "Updates the default values for access.", "predict": "Update the access defaults for the given B. @param http the B to update the access defaults for."}
{"ID": 109, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String mapPassword(Object passwordValue) { if (!(passwordValue instanceof String)) { // Assume it's binary passwordValue = new String((byte[]) passwordValue); } return (String) passwordValue; }. ### Assistant:", "ground_truth": "Extension point to allow customized creation of the user's password from the\nattribute stored in the directory.\n\n@param passwordValue the value of the password attribute\n@return a String representation of the password.", "predict": "Map password value to string. @param passwordValue password value @return password value"}
{"ID": 110, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String extractRememberMeCookie(HttpServletRequest request) { Cookie[] cookies = request.getCookies(); if ((cookies == null) || (cookies.length == 0)) { return null; } for (Cookie cookie : cookies) { if (cookieName.equals(cookie.getName())) { return cookie.getValue(); } } return null; }. ### Assistant:", "ground_truth": "Locates the Spring Security remember me cookie in the request and returns its\nvalue. The cookie is searched for by name and also by matching the context path to\nthe cookie path.\n\n@param request the submitted request which is to be authenticated\n@return the cookie value (if present), null otherwise.", "predict": "Extract the remember-me cookie value from the request. @param request The request @return The cookie value or null if no cookie was found."}
{"ID": 111, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String encodeCookie(String[] cookieTokens) { StringBuilder sb = new StringBuilder(); for (int i = 0; i < cookieTokens.length; i++) { try { sb.append(URLEncoder.encode(cookieTokens[i], StandardCharsets.UTF_8.toString())); } catch (UnsupportedEncodingException e) { logger.error(e.getMessage(), e); } if (i < cookieTokens.length - 1) { sb.append(DELIMITER); } } String value = sb.toString(); sb = new StringBuilder(new String(Base64.getEncoder().encode(value.getBytes()))); while (sb.charAt(sb.length() - 1) == '=') { sb.deleteCharAt(sb.length() - 1); } return sb.toString(); }. ### Assistant:", "ground_truth": "Inverse operation of decodeCookie.\n\n@param cookieTokens the tokens to be encoded.\n@return base64 encoding of the tokens concatenated with the \":\" delimiter.", "predict": "Encodes the cookie tokens into a string. The resulting string is Base64 encoded. @param cookieTokens the tokens to encode @return the encoded string"}
{"ID": 112, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void setCookie(String[] tokens, int maxAge, HttpServletRequest request, HttpServletResponse response) { String cookieValue = encodeCookie(tokens); Cookie cookie = new Cookie(cookieName, cookieValue); cookie.setMaxAge(maxAge); cookie.setPath(getCookiePath(request)); if (cookieDomain != null) { cookie.setDomain(cookieDomain); } if (maxAge < 1) { cookie.setVersion(1); } if (useSecureCookie == null) { cookie.setSecure(request.isSecure()); } else { cookie.setSecure(useSecureCookie); } cookie.setHttpOnly(true); response.addCookie(cookie); }. ### Assistant:", "ground_truth": "Sets the cookie on the response.\n\nBy default a secure cookie will be used if the connection is secure. You can set\nthe {@code useSecureCookie} property to {@code false} to override this. If you set\nit to {@code true}, the cookie will always be flagged as secure. By default the cookie\nwill be marked as HttpOnly.\n\n@param tokens the tokens which will be encoded to make the cookie value.\n@param maxAge the value passed to {@link Cookie#setMaxAge(int)}\n@param request the request\n@param response the response to add the cookie to.", "predict": "Sets the cookie. @param tokens the tokens @param maxAge the max age @param request the request @param response the response"}
{"ID": 113, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public Mono<Object> resolveArgument(MethodParameter parameter, BindingContext bindingContext, ServerWebExchange exchange) { ReactiveAdapter adapter = getAdapterRegistry().getAdapter(parameter.getParameterType()); Mono<SecurityContext> reactiveSecurityContext = ReactiveSecurityContextHolder.getContext(); if (reactiveSecurityContext == null) { return null; } return reactiveSecurityContext.flatMap( a -> { Object p = resolveSecurityContext(parameter, a); Mono<Object> o = Mono.justOrEmpty(p); return adapter == null ? o : Mono.just(adapter.fromPublisher(o)); }); }. ### Assistant:", "ground_truth": "resolve the argument to inject into the controller parameter.\n@param parameter the method parameter.\n@param bindingContext the binding context.\n@param exchange the server web exchange.\n@return the reactive mono object result.", "predict": "Resolve the argument for a method parameter. @param parameter the parameter @param bindingContext the binding context @param exchange the exchange @return the resolved argument"}
{"ID": 114, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private String getQueryString(final HttpServletRequest request, final Pattern artifactPattern) { final String query = request.getQueryString(); if (query == null) { return null; } final String result = artifactPattern.matcher(query).replaceFirst(\"\"); if (result.length() == 0) { return null; } // strip off the trailing & only if the artifact was the first query param return result.startsWith(\"&\") ? result.substring(1) : result; }. ### Assistant:", "ground_truth": "If present, removes the artifactParameterName and the corresponding value from the\nquery String.\n@param request\n@return the query String minus the artifactParameterName and the corresponding\nvalue.", "predict": "Get the artifact from the query string. @param request the request @param artifactPattern the artifact pattern @return the artifact or null if none was found"}
{"ID": 115, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static int getServicePort(URL casServiceUrl) { int port = casServiceUrl.getPort(); if (port == -1) { port = casServiceUrl.getDefaultPort(); } return port; }. ### Assistant:", "ground_truth": "Gets the port from the casServiceURL ensuring to return the proper value if the\ndefault port is being used.\n@param casServiceUrl the casServerUrl to be used (i.e.\n\"https://example.com/context/login/cas\")\n@return the port that is configured for the casServerUrl", "predict": "Get the port from the URL. If the port is not specified, use the default port. @param casServiceUrl the URL @return the port"}
{"ID": 116, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String getPrincipal() { Authentication authentication = SecurityContextHolder.getContext() .getAuthentication(); if (authentication == null) { log.warn(\"No Authentication object set in SecurityContext - returning empty String as Principal\"); return \"\"; } Object principal = authentication.getPrincipal(); if (principal instanceof LdapUserDetails) { LdapUserDetails details = (LdapUserDetails) principal; return details.getDn(); } else if (authentication instanceof AnonymousAuthenticationToken) { if (log.isDebugEnabled()) { log.debug(\"Anonymous Authentication, returning empty String as Principal\"); } return \"\"; } else { throw new IllegalArgumentException( \"The principal property of the authentication object\" + \"needs to be an LdapUserDetails.\"); } }. ### Assistant:", "ground_truth": "Get the principals of the logged in user, in this case the distinguished name.\n\n@return the distinguished name of the logged in user.", "predict": "Returns the principal of the current user. This is either the DN of the LdapUserDetails or an empty string if the principal is not set."}
{"ID": 117, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) { Assert.notNull(request, \"HttpServletRequest required\"); if (invalidateHttpSession) { HttpSession session = request.getSession(false); if (session != null) { logger.debug(\"Invalidating session: \" + session.getId()); session.invalidate(); } } if (clearAuthentication) { SecurityContext context = SecurityContextHolder.getContext(); context.setAuthentication(null); } SecurityContextHolder.clearContext(); }. ### Assistant:", "ground_truth": "Requires the request to be passed in.\n\n@param request from which to obtain a HTTP session (cannot be null)\n@param response not used (can be <code>null</code>)\n@param authentication not used (can be <code>null</code>)", "predict": "Logout the user. @param request The request. @param response The response. @param authentication The authentication."}
{"ID": 118, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Authentication authenticate(Authentication auth) throws AuthenticationException { if (!(auth instanceof UsernamePasswordAuthenticationToken)) { return null; } UsernamePasswordAuthenticationToken request = (UsernamePasswordAuthenticationToken) auth; Set<GrantedAuthority> authorities; try { // Create the LoginContext object, and pass our InternallCallbackHandler LoginContext loginContext = createLoginContext( new InternalCallbackHandler(auth)); // Attempt to login the user, the LoginContext will call our // InternalCallbackHandler at this point. loginContext.login(); // Create a set to hold the authorities, and add any that have already been // applied. authorities = new HashSet<>(); // Get the subject principals and pass them to each of the AuthorityGranters Set<Principal> principals = loginContext.getSubject().getPrincipals(); for (Principal principal : principals) { for (AuthorityGranter granter : this.authorityGranters) { Set<String> roles = granter.grant(principal); // If the granter doesn't wish to grant any authorities, it should // return null. if ((roles != null) && !roles.isEmpty()) { for (String role : roles) { authorities.add(new JaasGrantedAuthority(role, principal)); } } } } // Convert the authorities set back to an array and apply it to the token. JaasAuthenticationToken result = new JaasAuthenticationToken( request.getPrincipal(), request.getCredentials(), new ArrayList<>(authorities), loginContext); // Publish the success event publishSuccessEvent(result); // we're done, return the token. return result; } catch (LoginException loginException) { AuthenticationException ase = this.loginExceptionResolver .resolveException(loginException); publishFailureEvent(request, ase); throw ase; } }. ### Assistant:", "ground_truth": "Attempts to login the user given the Authentication objects principal and\ncredential\n\n@param auth The Authentication object to be authenticated.\n\n@return The authenticated Authentication object, with it's grantedAuthorities set.\n\n@throws AuthenticationException This implementation does not handle 'locked' or\n'disabled' accounts. This method only throws a AuthenticationServiceException, with\nthe message of the LoginException that will be thrown, should the\nloginContext.login() method fail.", "predict": "Authenticate the given authentication object. @param auth the authentication object to authenticate @return the authenticated authentication object, or null if authentication fails @throws AuthenticationException if authentication fails"}
{"ID": 119, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static String buildProviderUrl(List<String> urls, String baseDn) { Assert.notNull(baseDn, \"The Base DN for the LDAP server must not be null.\"); Assert.notEmpty(urls, \"At least one LDAP server URL must be provided.\"); String trimmedBaseDn = baseDn.trim(); StringBuilder providerUrl = new StringBuilder(); for (String serverUrl : urls) { String trimmedUrl = serverUrl.trim(); if (\"\".equals(trimmedUrl)) { continue; } providerUrl.append(trimmedUrl); if (!trimmedUrl.endsWith(\"/\")) { providerUrl.append(\"/\"); } providerUrl.append(trimmedBaseDn); providerUrl.append(\" \"); } return providerUrl.toString(); }. ### Assistant:", "ground_truth": "Builds a Spring LDAP-compliant Provider URL string, i.e. a space-separated list of\nLDAP servers with their base DNs. As the base DN must be identical for all servers,\nit needs to be supplied only once.\n\n@param urls A list of string values which are LDAP server URLs. An example would be\n\n<pre>\nldap://ldap.company.com:389\n</pre>\n\n. LDAPS URLs may be used as well, given that Spring Security is able to connect to\nthe server.\n@param baseDn The common Base DN for all provided servers, e.g.\n\n<pre>\ndc=company,dc=com\n</pre>\n\n.\n@return A Spring Security/Spring LDAP-compliant Provider URL string.", "predict": "Builds the provider URL from the provided URLs and Base DN. @param urls The URLs of the LDAP servers. @param baseDn The Base DN for the LDAP server. @return The provider URL."}
{"ID": 120, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void setContextEnvironmentProperties(Map<String, Object> environment) { Assert.notEmpty(environment, \"environment must not be empty\"); this.contextEnvironmentProperties = new Hashtable<>(environment); }. ### Assistant:", "ground_truth": "Allows a custom environment properties to be used to create initial LDAP context.\n\n@param environment the additional environment parameters to use when creating the LDAP Context", "predict": "Sets the environment properties for the current context. @param environment the environment properties."}
{"ID": 121, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public String getRedirectUrl() { return UrlUtils.buildFullRequestUrl(scheme, serverName, serverPort, requestURI, queryString); }. ### Assistant:", "ground_truth": "Indicates the URL that the user agent used for this request.\n\n@return the full URL of this request", "predict": "Returns the full redirect URL."}
{"ID": 122, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public int doEndTag() throws JspException { try { if (!authorized && TagLibConfig.isUiSecurityDisabled()) { pageContext.getOut().write(TagLibConfig.getSecuredUiSuffix()); } } catch (IOException e) { throw new JspException(e); } return EVAL_PAGE; }. ### Assistant:", "ground_truth": "Default processing of the end tag returning EVAL_PAGE.\n\n@return EVAL_PAGE\n@see Tag#doEndTag()", "predict": "Displays the UI security message if the user is not authorized."}
{"ID": 123, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override protected void initUserDetailsService() throws Exception { for (UserDetailsBuilder userBuilder : userBuilders) { getUserDetailsService().createUser(userBuilder.build()); } for (UserDetails userDetails : this.users) { getUserDetailsService().createUser(userDetails); } }. ### Assistant:", "ground_truth": "Populates the users that have been added.\n\n@throws Exception", "predict": "Create all the users."}
{"ID": 124, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private UserDetailsService getUserDetailsService() { Map<String, ?> beans = getBeansOfType(CachingUserDetailsService.class); if (beans.size() == 0) { beans = getBeansOfType(UserDetailsService.class); } if (beans.size() == 0) { throw new ApplicationContextException(\"No UserDetailsService registered.\"); } else if (beans.size() > 1) { throw new ApplicationContextException( \"More than one UserDetailsService registered. Please \" + \"use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements.\"); } return (UserDetailsService) beans.values().toArray()[0]; }. ### Assistant:", "ground_truth": "Obtains a user details service for use in RememberMeServices etc. Will return a\ncaching version if available so should not be used for beans which need to separate\nthe two.", "predict": "Finds the first UserDetailsService bean in the application context. @return the first UserDetailsService bean in the application context. @throws ApplicationContextException if no UserDetailsService bean is found."}
{"ID": 125, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void addPkceParameters(Map<String, Object> attributes, Map<String, Object> additionalParameters) { String codeVerifier = this.codeVerifierGenerator.generateKey(); attributes.put(PkceParameterNames.CODE_VERIFIER, codeVerifier); try { String codeChallenge = createCodeChallenge(codeVerifier); additionalParameters.put(PkceParameterNames.CODE_CHALLENGE, codeChallenge); additionalParameters.put(PkceParameterNames.CODE_CHALLENGE_METHOD, \"S256\"); } catch (NoSuchAlgorithmException e) { additionalParameters.put(PkceParameterNames.CODE_CHALLENGE, codeVerifier); } }. ### Assistant:", "ground_truth": "Creates and adds additional PKCE parameters for use in the OAuth 2.0 Authorization and Access Token Requests\n\n@param attributes where {@link PkceParameterNames#CODE_VERIFIER} is stored for the token request\n@param additionalParameters where {@link PkceParameterNames#CODE_CHALLENGE} and, usually,\n{@link PkceParameterNames#CODE_CHALLENGE_METHOD} are added to be used in the authorization request.\n\n@since 5.2\n@see <a target=\"_blank\" href=\"https://tools.ietf.org/html/rfc7636#section-1.1\">1.1.  Protocol Flow</a>\n@see <a target=\"_blank\" href=\"https://tools.ietf.org/html/rfc7636#section-4.1\">4.1.  Client Creates a Code Verifier</a>\n@see <a target=\"_blank\" href=\"https://tools.ietf.org/html/rfc7636#section-4.2\">4.2.  Client Creates the Code Challenge</a>", "predict": "Add PKCE parameters to the additionalParameters Map. @param attributes The attributes Map. @param additionalParameters The additionalParameters Map."}
{"ID": 126, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected boolean requiresAuthentication(final HttpServletRequest request, final HttpServletResponse response) { final boolean serviceTicketRequest = serviceTicketRequest(request, response); final boolean result = serviceTicketRequest || proxyReceptorRequest(request) || (proxyTicketRequest(serviceTicketRequest, request)); if (logger.isDebugEnabled()) { logger.debug(\"requiresAuthentication = \" + result); } return result; }. ### Assistant:", "ground_truth": "Overridden to provide proxying capabilities.", "predict": "Determines if the request requires authentication. @param request the request @param response the response @return true if the request requires authentication, false otherwise"}
{"ID": 127, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private boolean serviceTicketRequest(final HttpServletRequest request, final HttpServletResponse response) { boolean result = super.requiresAuthentication(request, response); if (logger.isDebugEnabled()) { logger.debug(\"serviceTicketRequest = \" + result); } return result; }. ### Assistant:", "ground_truth": "Indicates if the request is elgible to process a service ticket. This method exists\nfor readability.\n@param request\n@param response\n@return", "predict": "Service Ticket Request. @param request the request @param response the response @return the boolean"}
{"ID": 128, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private boolean proxyTicketRequest(final boolean serviceTicketRequest, final HttpServletRequest request) { if (serviceTicketRequest) { return false; } final boolean result = authenticateAllArtifacts && obtainArtifact(request) != null && !authenticated(); if (logger.isDebugEnabled()) { logger.debug(\"proxyTicketRequest = \" + result); } return result; }. ### Assistant:", "ground_truth": "Indicates if the request is elgible to process a proxy ticket.\n@param request\n@return", "predict": "Check if the request is a proxy ticket request. @param serviceTicketRequest the service ticket request @param request the request @return true if the request is a proxy ticket request, false otherwise"}
{"ID": 129, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private boolean authenticated() { Authentication authentication = SecurityContextHolder.getContext() .getAuthentication(); return authentication != null && authentication.isAuthenticated() && !(authentication instanceof AnonymousAuthenticationToken); }. ### Assistant:", "ground_truth": "Determines if a user is already authenticated.\n@return", "predict": "Determines if the user is authenticated. @return True if the user is authenticated, false otherwise."}
{"ID": 130, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private boolean proxyReceptorRequest(final HttpServletRequest request) { final boolean result = proxyReceptorConfigured() && proxyReceptorMatcher.matches(request); if (logger.isDebugEnabled()) { logger.debug(\"proxyReceptorRequest = \" + result); } return result; }. ### Assistant:", "ground_truth": "Indicates if the request is elgible to be processed as the proxy receptor.\n@param request\n@return", "predict": "Verifica si se debe realizar la solicitud a trav\u00e9s de un proxy. @param request ServletRequest @return true si se debe realizar la solicitud a trav\u00e9s de un proxy, false si no se debe realizar la solicitud a trav\u00e9s de un proxy."}
{"ID": 131, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected MethodSecurityExpressionOperations createSecurityExpressionRoot( Authentication authentication, MethodInvocation invocation) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot( authentication); root.setThis(invocation.getThis()); root.setPermissionEvaluator(getPermissionEvaluator()); root.setTrustResolver(getTrustResolver()); root.setRoleHierarchy(getRoleHierarchy()); root.setDefaultRolePrefix(getDefaultRolePrefix()); return root; }. ### Assistant:", "ground_truth": "Creates the root object for expression evaluation.", "predict": "Creates the MethodSecurityExpressionOperations instance. @param authentication Authentication @param invocation Invocation @return MethodSecurityExpressionOperations instance"}
{"ID": 132, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private Mono<JWKSet> getJWKSet() { return this.webClient.get() .uri(this.jwkSetURL) .retrieve() .bodyToMono(String.class) .map(this::parse) .doOnNext(jwkSet -> this.cachedJWKSet.set(Mono.just(jwkSet))) .cache(); }. ### Assistant:", "ground_truth": "Updates the cached JWK set from the configured URL.\n\n@return The updated JWK set.\n\n@throws RemoteKeySourceException If JWK retrieval failed.", "predict": "Get the JSON Web Key Set from the JWK Set URL. @return the JSON Web Key Set from the JWK Set URL"}
{"ID": 133, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private String utf8UrlEncode(String value) { try { return URLEncoder.encode(value, \"UTF-8\"); } catch (UnsupportedEncodingException e) { Error err = new AssertionError( \"The Java platform guarantees UTF-8 support, but it seemingly is not present.\"); err.initCause(e); throw err; } }. ### Assistant:", "ground_truth": "Performs URL encoding with UTF-8\n\n@param value the value to URL encode\n@return the encoded value", "predict": "URL-encode a string, preserving the UTF-8 encoding."}
{"ID": 134, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private Collection<? extends GrantedAuthority> getWebSphereGroupsBasedGrantedAuthorities() { List<String> webSphereGroups = wasHelper.getGroupsForCurrentUser(); Collection<? extends GrantedAuthority> userGas = webSphereGroups2GrantedAuthoritiesMapper .getGrantedAuthorities(webSphereGroups); if (logger.isDebugEnabled()) { logger.debug(\"WebSphere groups: \" + webSphereGroups + \" mapped to Granted Authorities: \" + userGas); } return userGas; }. ### Assistant:", "ground_truth": "Get a list of Granted Authorities based on the current user's WebSphere groups.\n\n@return authorities mapped from the user's WebSphere groups.", "predict": "Get Granted Authorities based on WebSphere groups. @return Granted Authorities based on WebSphere groups."}
{"ID": 135, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected UserDetails loadUserByAssertion(final Assertion assertion) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken( assertion, \"\"); return this.authenticationUserDetailsService.loadUserDetails(token); }. ### Assistant:", "ground_truth": "Template method for retrieving the UserDetails based on the assertion. Default is\nto call configured userDetailsService and pass the username. Deployers can override\nthis method and retrieve the user based on any criteria they desire.\n\n@param assertion The CAS Assertion.\n@return the UserDetails.", "predict": "Load user by assertion. @param assertion the assertion @return the user"}
{"ID": 136, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Object getPreAuthenticatedPrincipal(HttpServletRequest httpRequest) { Object principal = wasHelper.getCurrentUserName(); if (logger.isDebugEnabled()) { logger.debug(\"PreAuthenticated WebSphere principal: \" + principal); } return principal; }. ### Assistant:", "ground_truth": "Return the WebSphere user name.", "predict": "Get the pre-authenticated principal from the WebSphere request. @param httpRequest the incoming request @return the pre-authenticated principal"}
{"ID": 137, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static byte[] concatenate(byte[]... arrays) { int length = 0; for (byte[] array : arrays) { length += array.length; } byte[] newArray = new byte[length]; int destPos = 0; for (byte[] array : arrays) { System.arraycopy(array, 0, newArray, destPos, array.length); destPos += array.length; } return newArray; }. ### Assistant:", "ground_truth": "Combine the individual byte arrays into one array.", "predict": "Concatenate the given arrays. The resulting array will have the same length as the longest array."}
{"ID": 138, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static byte[] subArray(byte[] array, int beginIndex, int endIndex) { int length = endIndex - beginIndex; byte[] subarray = new byte[length]; System.arraycopy(array, beginIndex, subarray, 0, length); return subarray; }. ### Assistant:", "ground_truth": "Extract a sub array of bytes out of the byte array.\n@param array the byte array to extract from\n@param beginIndex the beginning index of the sub array, inclusive\n@param endIndex the ending index of the sub array, exclusive", "predict": "Returns a new array containing the specified subarray of the original array. The original array is not modified. @param array the original array @param beginIndex the index of the first element in the subarray @param endIndex the index of the last element in the subarray @return the subarray of the original array"}
{"ID": 139, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public List<GrantedAuthority> getGrantedAuthorities(Collection<String> attributes) { ArrayList<GrantedAuthority> gaList = new ArrayList<>(); for (String attribute : attributes) { Collection<GrantedAuthority> c = attributes2grantedAuthoritiesMap .get(attribute); if (c != null) { gaList.addAll(c); } } gaList.trimToSize(); return gaList; }. ### Assistant:", "ground_truth": "Map the given array of attributes to Spring Security GrantedAuthorities.", "predict": "Returns authorities granted by authorities2attributesMap. @param attributes authorities2attributesMap keys @return authorities granted by authorities2attributesMap."}
{"ID": 140, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private Map<String, Collection<GrantedAuthority>> preProcessMap(Map<?, ?> orgMap) { Map<String, Collection<GrantedAuthority>> result = new HashMap<String, Collection<GrantedAuthority>>( orgMap.size()); for (Map.Entry<?, ?> entry : orgMap.entrySet()) { Assert.isInstanceOf(String.class, entry.getKey(), \"attributes2grantedAuthoritiesMap contains non-String objects as keys\"); result.put((String) entry.getKey(), getGrantedAuthorityCollection(entry.getValue())); } return result; }. ### Assistant:", "ground_truth": "Preprocess the given map to convert all the values to GrantedAuthority collections\n\n@param orgMap The map to process\n@return the processed Map", "predict": "Pre-process the orgMap to ensure that the keys are Strings and that the values are GrantedAuthorityCollections. This is necessary because the orgMap is used to populate the authorities attribute of the user object. @param orgMap the orgMap to pre-process @return the pre-processed orgMap"}
{"ID": 141, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private Collection<GrantedAuthority> getGrantedAuthorityCollection(Object value) { Collection<GrantedAuthority> result = new ArrayList<>(); addGrantedAuthorityCollection(result, value); return result; }. ### Assistant:", "ground_truth": "Convert the given value to a collection of Granted Authorities\n\n@param value The value to convert to a GrantedAuthority Collection\n@return Collection containing the GrantedAuthority Collection", "predict": "Helper method to create a collection of authorities from a given value. @param value the value to create authorities from. @return the authorities."}
{"ID": 142, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void addGrantedAuthorityCollection(Collection<GrantedAuthority> result, Object value) { if (value == null) { return; } if (value instanceof Collection<?>) { addGrantedAuthorityCollection(result, (Collection<?>) value); } else if (value instanceof Object[]) { addGrantedAuthorityCollection(result, (Object[]) value); } else if (value instanceof String) { addGrantedAuthorityCollection(result, (String) value); } else if (value instanceof GrantedAuthority) { result.add((GrantedAuthority) value); } else { throw new IllegalArgumentException(\"Invalid object type: \" + value.getClass().getName()); } }. ### Assistant:", "ground_truth": "Convert the given value to a collection of Granted Authorities, adding the result\nto the given result collection.\n\n@param value The value to convert to a GrantedAuthority Collection\n@return Collection containing the GrantedAuthority Collection", "predict": "Adds the given value to the collection of authorities. If the value is already a collection, it is added to the existing collection. If the value is not a collection, it is added as a single GrantedAuthority. If the value is not a GrantedAuthority, it is ignored. @param result The collection of authorities to add to. @param value The value to add to the collection."}
{"ID": 143, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Object getPreAuthenticatedPrincipal(HttpServletRequest httpRequest) { Object principal = httpRequest.getUserPrincipal() == null ? null : httpRequest .getUserPrincipal().getName(); if (logger.isDebugEnabled()) { logger.debug(\"PreAuthenticated J2EE principal: \" + principal); } return principal; }. ### Assistant:", "ground_truth": "Return the J2EE user name.", "predict": "Get the pre-authenticated principal from the request. @param httpRequest the request @return the principal"}
{"ID": 144, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") public <C> C getSharedObject(Class<C> sharedType) { return (C) this.sharedObjects.get(sharedType); }. ### Assistant:", "ground_truth": "Gets a shared Object. Note that object heirarchies are not considered.\n\n@param sharedType the type of the shared Object\n@return the shared Object or null if it is not found", "predict": "Returns the shared object of the given type. If no shared object of the given type is available, a new one is created and added to the cache. @param sharedType the type of the shared object @return the shared object of the given type, or a new one if none is available"}
{"ID": 145, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String buildHttpsRedirectUrlForRequest(HttpServletRequest request) throws IOException, ServletException { int serverPort = portResolver.getServerPort(request); Integer httpsPort = portMapper.lookupHttpsPort(Integer.valueOf(serverPort)); if (httpsPort != null) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder(); urlBuilder.setScheme(\"https\"); urlBuilder.setServerName(request.getServerName()); urlBuilder.setPort(httpsPort.intValue()); urlBuilder.setContextPath(request.getContextPath()); urlBuilder.setServletPath(request.getServletPath()); urlBuilder.setPathInfo(request.getPathInfo()); urlBuilder.setQuery(request.getQueryString()); return urlBuilder.getUrl(); } // Fall through to server-side forward with warning message logger.warn(\"Unable to redirect to HTTPS as no port mapping found for HTTP port \" + serverPort); return null; }. ### Assistant:", "ground_truth": "Builds a URL to redirect the supplied request to HTTPS. Used to redirect the\ncurrent request to HTTPS, before doing a forward to the login page.", "predict": "Builds a redirect URL to HTTPS based on the current request. @param request the current request @return the redirect URL @throws IOException @throws ServletException"}
{"ID": 146, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Object invoke(JoinPoint jp, AspectJCallback advisorProceed) { InterceptorStatusToken token = super .beforeInvocation(new MethodInvocationAdapter(jp)); Object result; try { result = advisorProceed.proceedWithObject(); } finally { super.finallyInvocation(token); } return super.afterInvocation(token, result); }. ### Assistant:", "ground_truth": "Method that is suitable for user with traditional AspectJ-code aspects.\n\n@param jp The AspectJ joint point being invoked which requires a security decision\n@param advisorProceed the advice-defined anonymous class that implements\n{@code AspectJCallback} containing a simple {@code return proceed();} statement\n\n@return The returned value from the method invocation", "predict": "Invokes the advice. @param jp the jp @param advisorProceed the advisor proceed @return the object"}
{"ID": 147, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static String hasRole(String role) { Assert.isTrue( !role.startsWith(\"ROLE_\"), () -> role + \" should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead.\"); return \"ROLE_\" + role; }. ### Assistant:", "ground_truth": "Creates a String for specifying a user requires a role.\n\n@param role the role that should be required which is prepended with ROLE_\nautomatically (i.e. USER, ADMIN, etc). It should not start with ROLE_\n@return the {@link ConfigAttribute} expressed as a String", "predict": "Prepends ROLE_ before the given role. This is necessary because Spring Security uses ROLE_ prefixed roles to identify the roles. @param role Role to prepend ROLE_ to. @return ROLE_ prefixed role."}
{"ID": 148, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static String[] hasAnyRole(String... roles) { for (int i = 0; i < roles.length; i++) { roles[i] = \"ROLE_\" + roles[i]; } return roles; }. ### Assistant:", "ground_truth": "Creates a String for specifying that a user requires one of many roles.\n\n@param roles the roles that the user should have at least one of (i.e. ADMIN, USER,\netc). Each role should not start with ROLE_ since it is automatically prepended\nalready.\n@return the {@link ConfigAttribute} expressed as a String", "predict": "Returns a hardcoded list of roles, which can be used to test if a user has any of them. @param roles the roles to check @return the hardcoded list of roles"}
{"ID": 149, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected UserDetails processAutoLoginCookie(String[] cookieTokens, HttpServletRequest request, HttpServletResponse response) { if (cookieTokens.length != 2) { throw new InvalidCookieException(\"Cookie token did not contain \" + 2 + \" tokens, but contained '\" + Arrays.asList(cookieTokens) + \"'\"); } final String presentedSeries = cookieTokens[0]; final String presentedToken = cookieTokens[1]; PersistentRememberMeToken token = tokenRepository .getTokenForSeries(presentedSeries); if (token == null) { // No series match, so we can't authenticate using this cookie throw new RememberMeAuthenticationException( \"No persistent token found for series id: \" + presentedSeries); } // We have a match for this user/series combination if (!presentedToken.equals(token.getTokenValue())) { // Token doesn't match series value. Delete all logins for this user and throw // an exception to warn them. tokenRepository.removeUserTokens(token.getUsername()); throw new CookieTheftException( messages.getMessage( \"PersistentTokenBasedRememberMeServices.cookieStolen\", \"Invalid remember-me token (Series/token) mismatch. Implies previous cookie theft attack.\")); } if (token.getDate().getTime() + getTokenValiditySeconds() * 1000L < System .currentTimeMillis()) { throw new RememberMeAuthenticationException(\"Remember-me login has expired\"); } // Token also matches, so login is valid. Update the token value, keeping the // *same* series number. if (logger.isDebugEnabled()) { logger.debug(\"Refreshing persistent login token for user '\" + token.getUsername() + \"', series '\" + token.getSeries() + \"'\"); } PersistentRememberMeToken newToken = new PersistentRememberMeToken( token.getUsername(), token.getSeries(), generateTokenData(), new Date()); try { tokenRepository.updateToken(newToken.getSeries(), newToken.getTokenValue(), newToken.getDate()); addCookie(newToken, request, response); } catch (Exception e) { logger.error(\"Failed to update token: \", e); throw new RememberMeAuthenticationException( \"Autologin failed due to data access problem\"); } return getUserDetailsService().loadUserByUsername(token.getUsername()); }. ### Assistant:", "ground_truth": "Locates the presented cookie data in the token repository, using the series id. If\nthe data compares successfully with that in the persistent store, a new token is\ngenerated and stored with the same series. The corresponding cookie value is set on\nthe response.\n\n@param cookieTokens the series and token values\n\n@throws RememberMeAuthenticationException if there is no stored token corresponding\nto the submitted cookie, or if the token in the persistent store has expired.\n@throws InvalidCookieException if the cookie doesn't have two tokens as expected.\n@throws CookieTheftException if a presented series value is found, but the stored\ntoken is different from the one presented.", "predict": "Process the cookie tokens and determine whether the user is authenticated. @param cookieTokens the tokens extracted from the cookie @param request the request @param response the response @return the authenticated user"}
{"ID": 150, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void onLoginSuccess(HttpServletRequest request, HttpServletResponse response, Authentication successfulAuthentication) { String username = successfulAuthentication.getName(); logger.debug(\"Creating new persistent login for user \" + username); PersistentRememberMeToken persistentToken = new PersistentRememberMeToken( username, generateSeriesData(), generateTokenData(), new Date()); try { tokenRepository.createNewToken(persistentToken); addCookie(persistentToken, request, response); } catch (Exception e) { logger.error(\"Failed to save persistent token \", e); } }. ### Assistant:", "ground_truth": "Creates a new persistent login token with a new series number, stores the data in\nthe persistent token repository and adds the corresponding cookie to the response.", "predict": "Called after successful login. @param request @param response @param successfulAuthentication"}
{"ID": 151, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Authentication attemptSwitchUser(HttpServletRequest request) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest; String username = request.getParameter(this.usernameParameter); if (username == null) { username = \"\"; } if (this.logger.isDebugEnabled()) { this.logger.debug(\"Attempt to switch to user [\" + username + \"]\"); } UserDetails targetUser = this.userDetailsService.loadUserByUsername(username); this.userDetailsChecker.check(targetUser); // OK, create the switch user token targetUserRequest = createSwitchUserToken(request, targetUser); if (this.logger.isDebugEnabled()) { this.logger.debug(\"Switch User Token [\" + targetUserRequest + \"]\"); } // publish event if (this.eventPublisher != null) { this.eventPublisher.publishEvent(new AuthenticationSwitchUserEvent( SecurityContextHolder.getContext().getAuthentication(), targetUser)); } return targetUserRequest; }. ### Assistant:", "ground_truth": "Attempt to switch to another user. If the user does not exist or is not active,\nreturn null.\n\n@return The new <code>Authentication</code> request if successfully switched to\nanother user, <code>null</code> otherwise.\n\n@throws UsernameNotFoundException If the target user is not found.\n@throws LockedException if the account is locked.\n@throws DisabledException If the target user is disabled.\n@throws AccountExpiredException If the target user account is expired.\n@throws CredentialsExpiredException If the target user credentials are expired.", "predict": "Switch user authentication flow. @param request the request @return the authentication token @throws AuthenticationException if switching to the user fails"}
{"ID": 152, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Authentication attemptExitUser(HttpServletRequest request) throws AuthenticationCredentialsNotFoundException { // need to check to see if the current user has a SwitchUserGrantedAuthority Authentication current = SecurityContextHolder.getContext().getAuthentication(); if (null == current) { throw new AuthenticationCredentialsNotFoundException( this.messages.getMessage(\"SwitchUserFilter.noCurrentUser\", \"No current user associated with this request\")); } // check to see if the current user did actual switch to another user // if so, get the original source user so we can switch back Authentication original = getSourceAuthentication(current); if (original == null) { this.logger.debug(\"Could not find original user Authentication object!\"); throw new AuthenticationCredentialsNotFoundException( this.messages.getMessage(\"SwitchUserFilter.noOriginalAuthentication\", \"Could not find original Authentication object\")); } // get the source user details UserDetails originalUser = null; Object obj = original.getPrincipal(); if ((obj != null) && obj instanceof UserDetails) { originalUser = (UserDetails) obj; } // publish event if (this.eventPublisher != null) { this.eventPublisher.publishEvent( new AuthenticationSwitchUserEvent(current, originalUser)); } return original; }. ### Assistant:", "ground_truth": "Attempt to exit from an already switched user.\n\n@param request The http servlet request\n\n@return The original <code>Authentication</code> object or <code>null</code>\notherwise.\n\n@throws AuthenticationCredentialsNotFoundException If no\n<code>Authentication</code> associated with this request.", "predict": "Attempt to switch to another user. If the user is not authenticated, it will be prompted to authenticate. If the user is authenticated, it will be switched to the other user. @param request the HttpServletRequest @return the original user Authentication object @throws AuthenticationCredentialsNotFoundException if the user is not authenticated"}
{"ID": 153, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void setExitUserUrl(String exitUserUrl) { Assert.isTrue(UrlUtils.isValidRedirectUrl(exitUserUrl), \"exitUserUrl cannot be empty and must be a valid redirect URL\"); this.exitUserMatcher = createMatcher(exitUserUrl); }. ### Assistant:", "ground_truth": "Set the URL to respond to exit user processing.\n\n@param exitUserUrl The exit user URL.", "predict": "Sets the exit user URL. @param exitUserUrl the exit user URL"}
{"ID": 154, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @RequestMapping(value = \"/hello.htm\", method = RequestMethod.GET) public ModelAndView displayPublicIndex() { Contact rnd = contactManager.getRandomContact(); return new ModelAndView(\"hello\", \"contact\", rnd); }. ### Assistant:", "ground_truth": "The public index page, used for unauthenticated users.", "predict": "Display the public index page. @param model The model to populate @return The ModelAndView object to return to the browser"}
{"ID": 155, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Bean(name = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME) public Filter springSecurityFilterChain() throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && !webSecurityConfigurers.isEmpty(); if (!hasConfigurers) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor .postProcess(new WebSecurityConfigurerAdapter() { }); webSecurity.apply(adapter); } return webSecurity.build(); }. ### Assistant:", "ground_truth": "Creates the Spring Security Filter Chain\n@return the {@link Filter} that represents the security filter chain\n@throws Exception", "predict": "This method is called when Spring is booted and the Spring Security filter needs to be initialized. @return the Spring Security filter @throws Exception if initialization fails"}
{"ID": 156, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public Jwt decode(String token) throws JwtException { JWT jwt = parse(token); if (jwt instanceof SignedJWT) { Jwt createdJwt = createJwt(token, jwt); return validateJwt(createdJwt); } throw new JwtException(\"Unsupported algorithm of \" + jwt.getHeader().getAlgorithm()); }. ### Assistant:", "ground_truth": "Decode and validate the JWT from its compact claims representation format\n\n@param token the JWT value\n@return a validated {@link Jwt}\n@throws JwtException", "predict": "Decode the token. The algorithm of the token is checked before decoding. If the algorithm is not supported, an exception is thrown. If the algorithm is supported, the decoded token is returned. If the token is not a signed token, it is not decoded. @param token the token to decode @return the decoded token @throws JwtException if the algorithm of the token is not supported or the token is not a signed token"}
{"ID": 157, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean authorizeUsingAccessExpression() throws IOException { if (SecurityContextHolder.getContext().getAuthentication() == null) { return false; } SecurityExpressionHandler<FilterInvocation> handler = getExpressionHandler(); Expression accessExpression; try { accessExpression = handler.getExpressionParser().parseExpression(getAccess()); } catch (ParseException e) { IOException ioException = new IOException(); ioException.initCause(e); throw ioException; } return ExpressionUtils.evaluateAsBoolean(accessExpression, createExpressionEvaluationContext(handler)); }. ### Assistant:", "ground_truth": "Make an authorization decision based on a Spring EL expression. See the\n\"Expression-Based Access Control\" chapter in Spring Security for details on what\nexpressions can be used.\n\n@return the result of the authorization decision\n@throws IOException", "predict": "Determines whether the user is authorized to access the resource. @return true if the user is authorized, false otherwise @throws IOException if an error occurs while evaluating the access expression"}
{"ID": 158, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean authorizeUsingUrlCheck() throws IOException { String contextPath = ((HttpServletRequest) getRequest()).getContextPath(); Authentication currentUser = SecurityContextHolder.getContext() .getAuthentication(); return getPrivilegeEvaluator().isAllowed(contextPath, getUrl(), getMethod(), currentUser); }. ### Assistant:", "ground_truth": "Make an authorization decision based on the URL and HTTP method attributes. True is\nreturned if the user is allowed to access the given URL as defined.\n\n@return the result of the authorization decision\n@throws IOException", "predict": "This method is used to evaluate whether the current user has the appropriate privilege to access the current URL using the current HTTP method. @return true if the user has the appropriate privilege, false otherwise. @throws IOException if an error occurs while evaluating the privilege."}
{"ID": 159, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public Collection<GrantedAuthority> convert(Jwt jwt) { return getScopes(jwt) .stream() .map(authority -> SCOPE_AUTHORITY_PREFIX + authority) .map(SimpleGrantedAuthority::new) .collect(Collectors.toList()); }. ### Assistant:", "ground_truth": "Extracts the authorities\n@param jwt The {@link Jwt} token\n@return The {@link GrantedAuthority authorities} read from the token scopes", "predict": "Convert JWT scopes to authorities. @param jwt JWT @return authorities"}
{"ID": 160, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public CsrfToken generateToken(HttpServletRequest request) { return wrap(request, this.delegate.generateToken(request)); }. ### Assistant:", "ground_truth": "Generates a new token\n@param request the {@link HttpServletRequest} to use. The\n{@link HttpServletRequest} must have the {@link HttpServletResponse} as an\nattribute with the name of <code>HttpServletResponse.class.getName()</code>", "predict": "Generates a new CsrfToken from the underlying delegate. @param request the request to generate the token for. @return the generated CsrfToken."}
{"ID": 161, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @RequestMapping(value = \"/secure/adminPermission.htm\", method = RequestMethod.GET) public ModelAndView displayAdminPage(@RequestParam(\"contactId\") int contactId) { Contact contact = contactManager.getById(Long.valueOf(contactId)); Acl acl = aclService.readAclById(new ObjectIdentityImpl(contact)); Map<String, Object> model = new HashMap<>(); model.put(\"contact\", contact); model.put(\"acl\", acl); return new ModelAndView(\"adminPermission\", \"model\", model); }. ### Assistant:", "ground_truth": "Displays the permission admin page for a particular contact.", "predict": "Display the admin page for a contact. @param contactId the contact id @return the model and view for the admin page."}
{"ID": 162, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @RequestMapping(value = \"/secure/addPermission.htm\", method = RequestMethod.GET) public ModelAndView displayAddPermissionPageForContact( @RequestParam(\"contactId\") long contactId) { Contact contact = contactManager.getById(contactId); AddPermission addPermission = new AddPermission(); addPermission.setContact(contact); Map<String, Object> model = new HashMap<>(); model.put(\"addPermission\", addPermission); model.put(\"recipients\", listRecipients()); model.put(\"permissions\", listPermissions()); return new ModelAndView(\"addPermission\", model); }. ### Assistant:", "ground_truth": "Displays the \"add permission\" page for a contact.", "predict": "Display the add permission page for a contact. @param contactId the id of the contact @return the ModelAndView object"}
{"ID": 163, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @RequestMapping(value = \"/secure/addPermission.htm\", method = RequestMethod.POST) public String addPermission(AddPermission addPermission, BindingResult result, ModelMap model) { addPermissionValidator.validate(addPermission, result); if (result.hasErrors()) { model.put(\"recipients\", listRecipients()); model.put(\"permissions\", listPermissions()); return \"addPermission\"; } PrincipalSid sid = new PrincipalSid(addPermission.getRecipient()); Permission permission = permissionFactory.buildFromMask(addPermission .getPermission()); try { contactManager.addPermission(addPermission.getContact(), sid, permission); } catch (DataAccessException existingPermission) { existingPermission.printStackTrace(); result.rejectValue(\"recipient\", \"err.recipientExistsForContact\", \"Addition failure.\"); model.put(\"recipients\", listRecipients()); model.put(\"permissions\", listPermissions()); return \"addPermission\"; } return \"redirect:/secure/index.htm\"; }. ### Assistant:", "ground_truth": "Handles submission of the \"add permission\" form.", "predict": "Add permission page. @param addPermission @param result @param model @return"}
{"ID": 164, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @RequestMapping(value = \"/secure/deletePermission.htm\") public ModelAndView deletePermission(@RequestParam(\"contactId\") long contactId, @RequestParam(\"sid\") String sid, @RequestParam(\"permission\") int mask) { Contact contact = contactManager.getById(contactId); Sid sidObject = new PrincipalSid(sid); Permission permission = permissionFactory.buildFromMask(mask); contactManager.deletePermission(contact, sidObject, permission); Map<String, Object> model = new HashMap<>(); model.put(\"contact\", contact); model.put(\"sid\", sidObject); model.put(\"permission\", permission); return new ModelAndView(\"deletePermission\", \"model\", model); }. ### Assistant:", "ground_truth": "Deletes a permission", "predict": "Delete a permission for a contact and sid. @param contactId the contact id @param sid the sid @param mask the permission mask @return the model and view"}
{"ID": 165, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static String getRoleWithDefaultPrefix(String defaultRolePrefix, String role) { if (role == null) { return role; } if (defaultRolePrefix == null || defaultRolePrefix.length() == 0) { return role; } if (role.startsWith(defaultRolePrefix)) { return role; } return defaultRolePrefix + role; }. ### Assistant:", "ground_truth": "Prefixes role with defaultRolePrefix if defaultRolePrefix is non-null and if role\ndoes not already start with defaultRolePrefix.\n\n@param defaultRolePrefix\n@param role\n@return", "predict": "Get the Role with the default prefix. If the Role starts with the prefix, it will be returned as is. If the Role does not start with the prefix, it will be prefixed with the default prefix. @param defaultRolePrefix the default Role prefix @param role the Role to get the prefixed Role from @return the Role with the default prefix"}
{"ID": 166, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static UserDetailsResourceFactoryBean fromString(String users) { InMemoryResource resource = new InMemoryResource(users); return fromResource(resource); }. ### Assistant:", "ground_truth": "Creates a UserDetailsResourceFactoryBean with a resource from the provided String\n\n@param users the string representing the users\n@return the UserDetailsResourceFactoryBean", "predict": "Create a new UserDetailsResourceFactoryBean from a string representation of a users file. The string representation should be the path to a file containing a comma-separated list of user names. @param users the string representation of a users file @return a UserDetailsResourceFactoryBean instance"}
{"ID": 167, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public List<String> getAttributeValues(String name) { List<String> result = null; if (attributes != null) { result = attributes.get(name); } if (result == null) { result = Collections.emptyList(); } return result; }. ### Assistant:", "ground_truth": "Returns the values for a specific attribute\n\n@param name the attribute name\n@return a String array, never null but may be zero length", "predict": "Returns the values of the specified attribute. @param name the name of the attribute @return the values of the specified attribute"}
{"ID": 168, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String getFirstAttributeValue(String name) { List<String> result = getAttributeValues(name); if (result.isEmpty()) { return null; } else { return result.get(0); } }. ### Assistant:", "ground_truth": "Returns the first attribute value for a specified attribute\n\n@param name\n@return the first attribute value for a specified attribute, may be null", "predict": "Returns the first value of the specified attribute. If the attribute doesn't exist, it returns null. @param name the name of the attribute @return the first value of the specified attribute"}
{"ID": 169, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static byte[] encode(CharSequence string) { try { ByteBuffer bytes = CHARSET.newEncoder().encode(CharBuffer.wrap(string)); byte[] bytesCopy = new byte[bytes.limit()]; System.arraycopy(bytes.array(), 0, bytesCopy, 0, bytes.limit()); return bytesCopy; } catch (CharacterCodingException e) { throw new IllegalArgumentException(\"Encoding failed\", e); } }. ### Assistant:", "ground_truth": "Get the bytes of the String in UTF-8 encoded form.", "predict": "Encode a CharSequence using UTF-8. @param string CharSequence to encode @return encoded bytes"}
{"ID": 170, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String decode(byte[] bytes) { try { return CHARSET.newDecoder().decode(ByteBuffer.wrap(bytes)).toString(); } catch (CharacterCodingException e) { throw new IllegalArgumentException(\"Decoding failed\", e); } }. ### Assistant:", "ground_truth": "Decode the bytes in UTF-8 form into a String.", "predict": "Decode bytes to string. @param bytes bytes to decode @return decoded string"}
{"ID": 171, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private <T extends AccessibleObject> String[] lookupParameterNames( ParameterNameFactory<T> parameterNameFactory, T t) { Annotation[][] parameterAnnotations = parameterNameFactory.findParameterAnnotations(t); int parameterCount = parameterAnnotations.length; String[] paramNames = new String[parameterCount]; boolean found = false; for (int i = 0; i < parameterCount; i++) { Annotation[] annotations = parameterAnnotations[i]; String parameterName = findParameterName(annotations); if (parameterName != null) { found = true; paramNames[i] = parameterName; } } return found ? paramNames : null; }. ### Assistant:", "ground_truth": "Gets the parameter names or null if not found.\n\n@param parameterNameFactory the {@link ParameterNameFactory} to use\n@param t the {@link AccessibleObject} to find the parameter names on (i.e. Method\nor Constructor)\n@return the parameter names or null", "predict": "Finds the parameter names of a given method parameter. The parameter names are determined by the annotations on the parameter. The parameter names are returned as an array of strings. If the parameter annotations do not contain any annotations that define a parameter name, then the method returns null. @param parameterNameFactory the factory used to create parameter names. @param t the object that defines the method parameter. @return the parameter names of the method parameter."}
{"ID": 172, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @RequestMapping(value = \"/secure/add.htm\", method = RequestMethod.POST) public String addContact(WebContact form, BindingResult result) { validator.validate(form, result); if (result.hasErrors()) { return \"add\"; } Contact contact = new Contact(form.getName(), form.getEmail()); contactManager.create(contact); return \"redirect:/secure/index.htm\"; }. ### Assistant:", "ground_truth": "Handles the submission of the contact form, creating a new instance if the username\nand email are valid.", "predict": "Add a new contact. @param form @param result @return"}
{"ID": 173, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override protected Collection<ConfigAttribute> findAttributes(Method method, Class<?> targetClass) { if (targetClass == null) { return null; } return findAttributesSpecifiedAgainst(method, targetClass); }. ### Assistant:", "ground_truth": "Will walk the method inheritance tree to find the most specific declaration\napplicable.", "predict": "Finds all attributes specified against the method. If no attributes are specified against the method, returns null."}
{"ID": 174, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void addSecureMethod(RegisteredMethod method, List<ConfigAttribute> attr) { Assert.notNull(method, \"RegisteredMethod required\"); Assert.notNull(attr, \"Configuration attribute required\"); if (logger.isInfoEnabled()) { logger.info(\"Adding secure method [\" + method + \"] with attributes [\" + attr + \"]\"); } this.methodMap.put(method, attr); }. ### Assistant:", "ground_truth": "Add configuration attributes for a secure method.\n\n@param method the method to be secured\n@param attr required authorities associated with the method", "predict": "Adds a secure method to the registry. @param method the method to add @param attr the attributes for the method"}
{"ID": 175, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public Collection<ConfigAttribute> getAllConfigAttributes() { Set<ConfigAttribute> allAttributes = new HashSet<>(); for (List<ConfigAttribute> attributeList : methodMap.values()) { allAttributes.addAll(attributeList); } return allAttributes; }. ### Assistant:", "ground_truth": "Obtains the configuration attributes explicitly defined against this bean.\n\n@return the attributes explicitly defined against this bean", "predict": "Returns a collection of all ConfigAttributes in the ConfigContext. @return a collection of all ConfigAttributes in the ConfigContext."}
{"ID": 176, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private boolean isMatch(String methodName, String mappedName) { return (mappedName.endsWith(\"*\") && methodName.startsWith(mappedName.substring(0, mappedName.length() - 1))) || (mappedName.startsWith(\"*\") && methodName.endsWith(mappedName .substring(1, mappedName.length()))); }. ### Assistant:", "ground_truth": "Return if the given method name matches the mapped name. The default implementation\nchecks for \"xxx\" and \"xxx\" matches.\n\n@param methodName the method name of the class\n@param mappedName the name in the descriptor\n\n@return if the names match", "predict": "Determines if the methodName matches the mappedName. @param methodName the method name to check against. @param mappedName the mapped name to check against. @return true if the methodName matches the mappedName."}
{"ID": 177, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public C anyRequest() { Assert.state(!this.anyRequestConfigured, \"Can't configure anyRequest after itself\"); C configurer = requestMatchers(ANY_REQUEST); this.anyRequestConfigured = true; return configurer; }. ### Assistant:", "ground_truth": "Maps any request.\n\n@return the object that is chained after creating the {@link RequestMatcher}", "predict": "Configure the anyRequest matcher. @return the matcher"}
{"ID": 178, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void handleBindException(String userDn, String username, Throwable cause) { if (logger.isDebugEnabled()) { logger.debug(\"Failed to bind as \" + userDn + \": \" + cause); } }. ### Assistant:", "ground_truth": "Allows subclasses to inspect the exception thrown by an attempt to bind with a\nparticular DN. The default implementation just reports the failure to the debug\nlogger.", "predict": "Handle bind exception. @param userDn the user DN @param username the username @param cause the cause"}
{"ID": 179, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Transactional(readOnly = true) public Contact getRandomContact() { logger.debug(\"Returning random contact\"); Random rnd = new Random(); List<Contact> contacts = contactDao.findAll(); int getNumber = rnd.nextInt(contacts.size()); return contacts.get(getNumber); }. ### Assistant:", "ground_truth": "This is a public method.", "predict": "Returns a random Contact from the database. @return Random Contact from the database. @Transactional(readOnly = true)"}
{"ID": 180, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected final void clearAuthenticationAttributes(HttpServletRequest request) { HttpSession session = request.getSession(false); if (session == null) { return; } session.removeAttribute(WebAttributes.AUTHENTICATION_EXCEPTION); }. ### Assistant:", "ground_truth": "Removes temporary authentication-related data which may have been stored in the\nsession during the authentication process.", "predict": "Clear authentication attributes from the request. @param request the request to clear authentication attributes from."}
{"ID": 181, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Field getField(Class<?> clazz, String fieldName) throws IllegalStateException { Assert.notNull(clazz, \"Class required\"); Assert.hasText(fieldName, \"Field name required\"); try { return clazz.getDeclaredField(fieldName); } catch (NoSuchFieldException nsf) { // Try superclass if (clazz.getSuperclass() != null) { return getField(clazz.getSuperclass(), fieldName); } throw new IllegalStateException(\"Could not locate field '\" + fieldName + \"' on class \" + clazz); } }. ### Assistant:", "ground_truth": "Attempts to locate the specified field on the class.\n\n@param clazz the class definition containing the field\n@param fieldName the name of the field to locate\n\n@return the Field (never null)\n\n@throws IllegalStateException if field could not be found", "predict": "Finds a field on a class. @param clazz The class to search for the field on. @param fieldName The name of the field. @return The field. @throws IllegalStateException If the field cannot be found on the class."}
{"ID": 182, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String createServiceUrl(final HttpServletRequest request, final HttpServletResponse response) { return CommonUtils.constructServiceUrl(null, response, this.serviceProperties.getService(), null, this.serviceProperties.getArtifactParameter(), this.encodeServiceUrlWithSessionId); }. ### Assistant:", "ground_truth": "Constructs a new Service Url. The default implementation relies on the CAS client\nto do the bulk of the work.\n@param request the HttpServletRequest\n@param response the HttpServlet Response\n@return the constructed service url. CANNOT be NULL.", "predict": "Creates the service URL based on the request and response objects. @param request the request object @param response the response object @return the service URL"}
{"ID": 183, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String createRedirectUrl(final String serviceUrl) { return CommonUtils.constructRedirectUrl(this.loginUrl, this.serviceProperties.getServiceParameter(), serviceUrl, this.serviceProperties.isSendRenew(), false); }. ### Assistant:", "ground_truth": "Constructs the Url for Redirection to the CAS server. Default implementation relies\non the CAS client to do the bulk of the work.\n\n@param serviceUrl the service url that should be included.\n@return the redirect url. CANNOT be NULL.", "predict": "Create the redirect URL. @param serviceUrl the service URL @return the redirect URL"}
{"ID": 184, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private String extractPrefix(String encPass) { if (!encPass.startsWith(\"{\")) { return null; } int secondBrace = encPass.lastIndexOf('}'); if (secondBrace < 0) { throw new IllegalArgumentException( \"Couldn't find closing brace for SHA prefix\"); } return encPass.substring(0, secondBrace + 1); }. ### Assistant:", "ground_truth": "Returns the hash prefix or null if there isn't one.", "predict": "Extracts the prefix from the encrypted password. The prefix is the first part of the encrypted password, before the braces. The prefix is typically the salt. @param encPass The encrypted password @return The prefix, or null if the password doesn't have one."}
{"ID": 185, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException arg2) throws IOException, ServletException { if (logger.isDebugEnabled()) { logger.debug(\"Pre-authenticated entry point called. Rejecting access\"); } response.sendError(HttpServletResponse.SC_FORBIDDEN, \"Access Denied\"); }. ### Assistant:", "ground_truth": "Always returns a 403 error code to the client.", "predict": "This is the entry point for pre-authenticated requests. @param request @param response @param arg2 @throws IOException @throws ServletException"}
{"ID": 186, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void checkFilterStack(List<Filter> filters) { checkForDuplicates(SecurityContextPersistenceFilter.class, filters); checkForDuplicates(UsernamePasswordAuthenticationFilter.class, filters); checkForDuplicates(SessionManagementFilter.class, filters); checkForDuplicates(BasicAuthenticationFilter.class, filters); checkForDuplicates(SecurityContextHolderAwareRequestFilter.class, filters); checkForDuplicates(JaasApiIntegrationFilter.class, filters); checkForDuplicates(ExceptionTranslationFilter.class, filters); checkForDuplicates(FilterSecurityInterceptor.class, filters); }. ### Assistant:", "ground_truth": "Checks the filter list for possible errors and logs them", "predict": "Check if the stack of filters contains any duplicates of the security filters."}
{"ID": 187, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") final Class<? extends Throwable>[] getRegisteredTypes() { Set<Class<? extends Throwable>> typeList = this.extractorMap.keySet(); return typeList.toArray(new Class[typeList.size()]); }. ### Assistant:", "ground_truth": "Returns an array containing the classes for which extractors are registered. The\norder of the classes is the order in which comparisons will occur for resolving a\nmatching extractor.\n\n@return the types for which extractors are registered", "predict": "Get the registered types. @return the registered types"}
{"ID": 188, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private Throwable extractCause(Throwable throwable) { for (Map.Entry<Class<? extends Throwable>, ThrowableCauseExtractor> entry : extractorMap .entrySet()) { Class<? extends Throwable> throwableType = entry.getKey(); if (throwableType.isInstance(throwable)) { ThrowableCauseExtractor extractor = entry.getValue(); return extractor.extractCause(throwable); } } return null; }. ### Assistant:", "ground_truth": "Extracts the cause of the given throwable using an appropriate extractor.\n\n@param throwable the <code>Throwable</code> (not <code>null</code>\n@return the cause, may be <code>null</code> if none could be resolved", "predict": "Find the cause of the throwable. If the throwable is not assignable to any of the registered throwable types, it will return null. @param throwable Throwable to extract cause from. @return Cause of the throwable."}
{"ID": 189, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) private String registerAccessManager(ParserContext pc, boolean jsr250Enabled, BeanDefinition expressionVoter) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder .rootBeanDefinition(AffirmativeBased.class); ManagedList voters = new ManagedList(4); if (expressionVoter != null) { voters.add(expressionVoter); } voters.add(new RootBeanDefinition(RoleVoter.class)); voters.add(new RootBeanDefinition(AuthenticatedVoter.class)); if (jsr250Enabled) { voters.add(new RootBeanDefinition(Jsr250Voter.class)); } accessMgrBuilder.addConstructorArgValue(voters); BeanDefinition accessManager = accessMgrBuilder.getBeanDefinition(); String id = pc.getReaderContext().generateBeanName(accessManager); pc.registerBeanComponent(new BeanComponentDefinition(accessManager, id)); return id; }. ### Assistant:", "ground_truth": "Register the default AccessDecisionManager. Adds the special JSR 250 voter jsr-250\nis enabled and an expression voter if expression-based access control is enabled.\n@return", "predict": "Registers the access manager bean. @param pc the parser context @param jsr250Enabled whether JSR250 is enabled @param expressionVoter the expression voter to add to the access manager @return the bean name of the access manager"}
{"ID": 190, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Set<String> authorityListToSet( Collection<? extends GrantedAuthority> userAuthorities) { Assert.notNull(userAuthorities, \"userAuthorities cannot be null\"); Set<String> set = new HashSet<>(userAuthorities.size()); for (GrantedAuthority authority : userAuthorities) { set.add(authority.getAuthority()); } return set; }. ### Assistant:", "ground_truth": "Converts an array of GrantedAuthority objects to a Set.\n@return a Set of the Strings obtained from each call to\nGrantedAuthority.getAuthority()", "predict": "Convert a collection of authorities to a set of strings. @param userAuthorities the authorities to convert @return the authorities as a set of strings"}
{"ID": 191, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private boolean matches(byte[] expected, byte[] actual) { if (expected.length != actual.length) { return false; } int result = 0; for (int i = 0; i < expected.length; i++) { result |= expected[i] ^ actual[i]; } return result == 0; }. ### Assistant:", "ground_truth": "Constant time comparison to prevent against timing attacks.", "predict": "Determines whether the two byte arrays match."}
{"ID": 192, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void setDefaultFailureUrl(String defaultFailureUrl) { Assert.isTrue(UrlUtils.isValidRedirectUrl(defaultFailureUrl), () -> \"'\" + defaultFailureUrl + \"' is not a valid redirect URL\"); this.defaultFailureUrl = defaultFailureUrl; }. ### Assistant:", "ground_truth": "The URL which will be used as the failure destination.\n\n@param defaultFailureUrl the failure URL, for example \"/loginFailed.jsp\".", "predict": "Sets the default failure URL. @param defaultFailureUrl the default failure URL"}
{"ID": 193, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void setResolveHiddenInputs( Function<HttpServletRequest, Map<String, String>> resolveHiddenInputs) { Assert.notNull(resolveHiddenInputs, \"resolveHiddenInputs cannot be null\"); this.resolveHiddenInputs = resolveHiddenInputs; }. ### Assistant:", "ground_truth": "Sets a Function used to resolve a Map of the hidden inputs where the key is the\nname of the input and the value is the value of the input. Typically this is used\nto resolve the CSRF token.\n@param resolveHiddenInputs the function to resolve the inputs", "predict": "Sets the function to resolve hidden inputs. @param resolveHiddenInputs the resolve hidden inputs function. @see #resolveHiddenInputs"}
{"ID": 194, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static String buildRequestUrl(String servletPath, String requestURI, String contextPath, String pathInfo, String queryString) { StringBuilder url = new StringBuilder(); if (servletPath != null) { url.append(servletPath); if (pathInfo != null) { url.append(pathInfo); } } else { url.append(requestURI.substring(contextPath.length())); } if (queryString != null) { url.append(\"?\").append(queryString); } return url.toString(); }. ### Assistant:", "ground_truth": "Obtains the web application-specific fragment of the URL.", "predict": "Builds the request URL from the given parts. The parts are: servletPath, requestURI, contextPath, pathInfo, and queryString. The resulting URL is constructed by concatenating these parts. The resulting URL is guaranteed to be a valid URL. The resulting URL is guaranteed to be a valid URL. The resulting URL is guaranteed to be a valid URL. The resulting URL is guaranteed to be a valid URL. The resulting URL is guaranteed to be a valid URL. The resulting URL is guaranteed to be a valid URL. The resulting URL is guaranteed to be a valid URL. The resulting URL is guaranteed to be a valid URL. The resulting URL is guaranteed to be a valid URL. The resulting URL is guaranteed to be a valid URL. The resulting URL is guaranteed to be a valid URL. The resulting URL is guaranteed to be a valid URL. The resulting URL is guaranteed to be a valid URL. The resulting URL is guaranteed to be a valid URL. The resulting URL is guaranteed to be a valid URL. The resulting URL is guaranteed to be a valid URL"}
{"ID": 195, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean isAbsoluteUrl(String url) { if (url == null) { return false; } final Pattern ABSOLUTE_URL = Pattern.compile(\"\\\\A[a-z0-9.+-]+://.*\", Pattern.CASE_INSENSITIVE); return ABSOLUTE_URL.matcher(url).matches(); }. ### Assistant:", "ground_truth": "Decides if a URL is absolute based on whether it contains a valid scheme name, as\ndefined in RFC 1738.", "predict": "Determines if the given URL is absolute or not. @param url the URL to check. @return true if the given URL is absolute, false otherwise."}
{"ID": 196, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public List<OpenIDAttribute> createAttributeList(String identifier) { for (Map.Entry<Pattern, List<OpenIDAttribute>> entry : idToAttributes.entrySet()) { if (entry.getKey().matcher(identifier).matches()) { return entry.getValue(); } } return Collections.emptyList(); }. ### Assistant:", "ground_truth": "Iterates through the patterns stored in the map and returns the list of attributes\ndefined for the first match. If no match is found, returns an empty list.", "predict": "Find the attributes that match the given identifier. If no match is found, return an empty list. @param identifier the identifier to match against. @return the list of attributes that match the given identifier."}
{"ID": 197, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: Serializable identifierFrom(Serializable identifier, ResultSet resultSet) throws SQLException { if (isString(identifier) && hasValidClassIdType(resultSet) && canConvertFromStringTo(classIdTypeFrom(resultSet))) { identifier = convertFromStringTo((String) identifier, classIdTypeFrom(resultSet)); } else { // Assume it should be a Long type identifier = convertToLong(identifier); } return identifier; }. ### Assistant:", "ground_truth": "Converts the raw type from the database into the right Java type. For most applications the 'raw type' will be Long, for some applications\nit could be String.\n@param identifier The identifier from the database\n@param resultSet  Result set of the query\n@return The identifier in the appropriate target Java type. Typically Long or UUID.\n@throws SQLException", "predict": "Converts the given identifier from its string representation to its actual classId type. The identifier is assumed to be a string, but it could be a Long if it was originally a Long. The classIdTypeFrom(resultSet) is used to determine the appropriate conversion. @param identifier the identifier @param resultSet the result set to extract the classId type from @return the converted identifier @throws SQLException if there is a problem converting the identifier"}
{"ID": 198, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void createEntries(final MutableAcl acl) { if (acl.getEntries().isEmpty()) { return; } jdbcOperations.batchUpdate(insertEntry, new BatchPreparedStatementSetter() { public int getBatchSize() { return acl.getEntries().size(); } public void setValues(PreparedStatement stmt, int i) throws SQLException { AccessControlEntry entry_ = acl.getEntries().get(i); Assert.isTrue(entry_ instanceof AccessControlEntryImpl, \"Unknown ACE class\"); AccessControlEntryImpl entry = (AccessControlEntryImpl) entry_; stmt.setLong(1, ((Long) acl.getId()).longValue()); stmt.setInt(2, i); stmt.setLong(3, createOrRetrieveSidPrimaryKey(entry.getSid(), true) .longValue()); stmt.setInt(4, entry.getPermission().getMask()); stmt.setBoolean(5, entry.isGranting()); stmt.setBoolean(6, entry.isAuditSuccess()); stmt.setBoolean(7, entry.isAuditFailure()); } }); }. ### Assistant:", "ground_truth": "Creates a new row in acl_entry for every ACE defined in the passed MutableAcl\nobject.\n\n@param acl containing the ACEs to insert", "predict": "Create the ACL entries. @param acl the acl object to update"}
{"ID": 199, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void createObjectIdentity(ObjectIdentity object, Sid owner) { Long sidId = createOrRetrieveSidPrimaryKey(owner, true); Long classId = createOrRetrieveClassPrimaryKey(object.getType(), true, object.getIdentifier().getClass()); jdbcOperations.update(insertObjectIdentity, classId, object.getIdentifier().toString(), sidId, Boolean.TRUE); }. ### Assistant:", "ground_truth": "Creates an entry in the acl_object_identity table for the passed ObjectIdentity.\nThe Sid is also necessary, as acl_object_identity has defined the sid column as\nnon-null.\n\n@param object to represent an acl_object_identity for\n@param owner for the SID column (will be created if there is no acl_sid entry for\nthis particular Sid already)", "predict": "Creates the object identity in the database. The Sid is created if it doesn't exist yet. @param object the object to create the identity for @param owner the owner of the object"}
{"ID": 200, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void updateObjectIdentity(MutableAcl acl) { Long parentId = null; if (acl.getParentAcl() != null) { Assert.isInstanceOf(ObjectIdentityImpl.class, acl.getParentAcl() .getObjectIdentity(), \"Implementation only supports ObjectIdentityImpl\"); ObjectIdentityImpl oii = (ObjectIdentityImpl) acl.getParentAcl() .getObjectIdentity(); parentId = retrieveObjectIdentityPrimaryKey(oii); } Assert.notNull(acl.getOwner(), \"Owner is required in this implementation\"); Long ownerSid = createOrRetrieveSidPrimaryKey(acl.getOwner(), true); int count = jdbcOperations.update(updateObjectIdentity, parentId, ownerSid, Boolean.valueOf(acl.isEntriesInheriting()), acl.getId()); if (count != 1) { throw new NotFoundException(\"Unable to locate ACL to update\"); } }. ### Assistant:", "ground_truth": "Updates an existing acl_object_identity row, with new information presented in the\npassed MutableAcl object. Also will create an acl_sid entry if needed for the Sid\nthat owns the MutableAcl.\n\n@param acl to modify (a row must already exist in acl_object_identity)\n\n@throws NotFoundException if the ACL could not be found to update.", "predict": "Update the object identity of the acl. The parent acl is also updated if it exists. @param acl the acl to update"}
{"ID": 201, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void saveRequest(HttpServletRequest request, HttpServletResponse response) { if (requestMatcher.matches(request)) { DefaultSavedRequest savedRequest = new DefaultSavedRequest(request, portResolver); if (createSessionAllowed || request.getSession(false) != null) { // Store the HTTP request itself. Used by // AbstractAuthenticationProcessingFilter // for redirection after successful authentication (SEC-29) request.getSession().setAttribute(this.sessionAttrName, savedRequest); logger.debug(\"DefaultSavedRequest added to Session: \" + savedRequest); } } else { logger.debug(\"Request not saved as configured RequestMatcher did not match\"); } }. ### Assistant:", "ground_truth": "Stores the current request, provided the configuration properties allow it.", "predict": "Save the incoming request to the HttpSession. The request itself is stored in the HttpSession. The request is matched against the configured RequestMatcher. If the request matches, the request is stored in the HttpSession. If the request does not match, the request is ignored. @param request the incoming request @param response the response"}
{"ID": 202, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static ServerWebExchangeMatcher pathMatchers(HttpMethod method, String... patterns) { List<ServerWebExchangeMatcher> matchers = new ArrayList<>(patterns.length); for (String pattern : patterns) { matchers.add(new PathPatternParserServerWebExchangeMatcher(pattern, method)); } return new OrServerWebExchangeMatcher(matchers); }. ### Assistant:", "ground_truth": "Creates a matcher that matches on the specific method and any of the provided patterns.\n@param method the method to match on. If null, any method will be matched\n@param patterns the patterns to match on\n@return the matcher to use", "predict": "Creates a matcher that matches if the path matches any of the given patterns. The patterns are matched against the path in the exchange. @param method the HTTP method to match against @param patterns the patterns to match against the path @return a matcher that matches if the path matches any of the given patterns"}
{"ID": 203, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static ServerWebExchangeMatcher anyExchange() { // we don't use a lambda to ensure a unique equals and hashcode // which otherwise can cause problems with adding multiple entries to an ordered LinkedHashMap return new ServerWebExchangeMatcher() { @Override public Mono<MatchResult> matches(ServerWebExchange exchange) { return ServerWebExchangeMatcher.MatchResult.match(); } }; }. ### Assistant:", "ground_truth": "Matches any exchange\n@return the matcher to use", "predict": "Matches any exchange. @return a matcher that matches any exchange"}
{"ID": 204, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static TextEncryptor delux(CharSequence password, CharSequence salt) { return new HexEncodingTextEncryptor(stronger(password, salt)); }. ### Assistant:", "ground_truth": "Creates a text encryptor that uses \"stronger\" password-based encryption. Encrypted\ntext is hex-encoded.\n\n@param password the password used to generate the encryptor's secret key; should\nnot be shared\n@see Encryptors#stronger(CharSequence, CharSequence)", "predict": "Create a Deluxe encryption algorithm encryptor using the salt. @param password Password to encrypt @param salt Salt to use @return Encryption algorithm encryptor"}
{"ID": 205, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static TextEncryptor text(CharSequence password, CharSequence salt) { return new HexEncodingTextEncryptor(standard(password, salt)); }. ### Assistant:", "ground_truth": "Creates a text encryptor that uses \"standard\" password-based encryption. Encrypted\ntext is hex-encoded.\n\n@param password the password used to generate the encryptor's secret key; should\nnot be shared\n@see Encryptors#standard(CharSequence, CharSequence)", "predict": "Create a password-based encryption object using a salt. @param password Password to encrypt. @param salt Salt to use. @return Encryption object."}
{"ID": 206, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static TextEncryptor queryableText(CharSequence password, CharSequence salt) { return new HexEncodingTextEncryptor(new AesBytesEncryptor(password.toString(), salt)); }. ### Assistant:", "ground_truth": "Creates an encryptor for queryable text strings that uses standard password-based\nencryption. Uses a 16-byte all-zero initialization vector so encrypting the same\ndata results in the same encryption result. This is done to allow encrypted data to\nbe queried against. Encrypted text is hex-encoded.\n\n@param password the password used to generate the encryptor's secret key; should\nnot be shared\n@param salt a hex-encoded, random, site-global salt value to use to generate the\nsecret key", "predict": "Create a password-based encryptor using a queryable password and salt. This is useful for encrypting large amounts of data. @param password Password to use for encryption. @param salt Salt to use for encryption. @return Encryptor for encrypting data using the password and salt."}
{"ID": 207, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void writeHeaders(HttpServletRequest request, HttpServletResponse response) { if (XFrameOptionsMode.ALLOW_FROM.equals(frameOptionsMode)) { String allowFromValue = this.allowFromStrategy.getAllowFromValue(request); if (XFrameOptionsMode.DENY.getMode().equals(allowFromValue)) { if (!response.containsHeader(XFRAME_OPTIONS_HEADER)) { response.setHeader(XFRAME_OPTIONS_HEADER, XFrameOptionsMode.DENY.getMode()); } } else if (allowFromValue != null) { if (!response.containsHeader(XFRAME_OPTIONS_HEADER)) { response.setHeader(XFRAME_OPTIONS_HEADER, XFrameOptionsMode.ALLOW_FROM.getMode() + \" \" + allowFromValue); } } } else { response.setHeader(XFRAME_OPTIONS_HEADER, frameOptionsMode.getMode()); } }. ### Assistant:", "ground_truth": "Writes the X-Frame-Options header value, overwritting any previous value.\n\n@param request the servlet request\n@param response the servlet response", "predict": "Write the X-Frame-Options header based on the current mode. @param request the request object @param response the response object"}
{"ID": 208, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String determineTargetUrl(HttpServletRequest request, HttpServletResponse response, Authentication authentication) { return determineTargetUrl(request, response); }. ### Assistant:", "ground_truth": "Builds the target URL according to the logic defined in the main class Javadoc\n\n@since 5.2", "predict": "Determine the target URL for the response. This is typically the URL that the client will be redirected to after authentication. @param request the incoming request @param response the response to be sent to the client @param authentication the authentication information @return the target URL for the response"}
{"ID": 209, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String determineTargetUrl(HttpServletRequest request, HttpServletResponse response) { if (isAlwaysUseDefaultTargetUrl()) { return defaultTargetUrl; } // Check for the parameter and use that if available String targetUrl = null; if (targetUrlParameter != null) { targetUrl = request.getParameter(targetUrlParameter); if (StringUtils.hasText(targetUrl)) { logger.debug(\"Found targetUrlParameter in request: \" + targetUrl); return targetUrl; } } if (useReferer && !StringUtils.hasLength(targetUrl)) { targetUrl = request.getHeader(\"Referer\"); logger.debug(\"Using Referer header: \" + targetUrl); } if (!StringUtils.hasText(targetUrl)) { targetUrl = defaultTargetUrl; logger.debug(\"Using default Url: \" + targetUrl); } return targetUrl; }. ### Assistant:", "ground_truth": "Builds the target URL according to the logic defined in the main class Javadoc.", "predict": "Determines the targetUrl based on the request and the configuration. @param request the request @param response the response @return the targetUrl"}
{"ID": 210, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void setTargetUrlParameter(String targetUrlParameter) { if (targetUrlParameter != null) { Assert.hasText(targetUrlParameter, \"targetUrlParameter cannot be empty\"); } this.targetUrlParameter = targetUrlParameter; }. ### Assistant:", "ground_truth": "If this property is set, the current request will be checked for this a parameter\nwith this name and the value used as the target URL if present.\n\n@param targetUrlParameter the name of the parameter containing the encoded target\nURL. Defaults to null.", "predict": "Sets the targetUrlParameter. @param targetUrlParameter the targetUrlParameter to set"}
{"ID": 211, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private Directory getDirectoryWithImmediateParentPopulated(final Long id) { return getJdbcTemplate().queryForObject(SELECT_FROM_DIRECTORY_SINGLE, new Object[] { id }, new RowMapper<Directory>() { public Directory mapRow(ResultSet rs, int rowNumber) throws SQLException { Long parentDirectoryId = new Long(rs .getLong(\"parent_directory_id\")); Directory parentDirectory = Directory.ROOT_DIRECTORY; if (parentDirectoryId != null && !parentDirectoryId.equals(new Long(-1))) { // Need to go and lookup the parent, so do that first parentDirectory = getDirectoryWithImmediateParentPopulated(parentDirectoryId); } Directory directory = new Directory(rs .getString(\"directory_name\"), parentDirectory); FieldUtils.setProtectedFieldValue(\"id\", directory, new Long(rs.getLong(\"id\"))); return directory; } }); }. ### Assistant:", "ground_truth": "Executes recursive SQL as needed to build a full Directory hierarchy of objects", "predict": "Get the directory with immediate parent populated. This is done by calling this method recursively until the parent directory is found. @param id @return"}
{"ID": 212, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public DistinguishedName buildDn(String username) { DistinguishedName dn = new DistinguishedName(userDnBase); dn.add(usernameAttribute, username); return dn; }. ### Assistant:", "ground_truth": "Assembles the Distinguished Name that should be used the given username.", "predict": "Build distinguished name for given username. @param username username @return distinguished name"}
{"ID": 213, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private Map<Class<? extends Object>, Object> createSharedObjects() { Map<Class<? extends Object>, Object> sharedObjects = new HashMap<Class<? extends Object>, Object>(); sharedObjects.putAll(localConfigureAuthenticationBldr.getSharedObjects()); sharedObjects.put(UserDetailsService.class, userDetailsService()); sharedObjects.put(ApplicationContext.class, context); sharedObjects.put(ContentNegotiationStrategy.class, contentNegotiationStrategy); sharedObjects.put(AuthenticationTrustResolver.class, trustResolver); return sharedObjects; }. ### Assistant:", "ground_truth": "Creates the shared objects\n\n@return the shared Objects", "predict": "Create shared objects map. @return Map of shared objects."}
{"ID": 214, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void configureJaasUsingLoop() throws IOException { String loginConfigUrl = convertLoginConfigToUrl(); boolean alreadySet = false; int n = 1; final String prefix = \"login.config.url.\"; String existing; while ((existing = Security.getProperty(prefix + n)) != null) { alreadySet = existing.equals(loginConfigUrl); if (alreadySet) { break; } n++; } if (!alreadySet) { String key = prefix + n; log.debug(\"Setting security property [\" + key + \"] to: \" + loginConfigUrl); Security.setProperty(key, loginConfigUrl); } }. ### Assistant:", "ground_truth": "Loops through the login.config.url.1,login.config.url.2 properties looking for the\nlogin configuration. If it is not set, it will be set to the last available\nlogin.config.url.X property.", "predict": "Try to set the jaas configuration using the login-config-url security property. This is a fallback mechanism in case the jaas configuration is not set in the web.xml file. @throws IOException"}
{"ID": 215, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String getCurrentDate() { long now = System.currentTimeMillis(); if ((now - currentDateGenerated) > 1000) { synchronized (format) { if ((now - currentDateGenerated) > 1000) { currentDateGenerated = now; currentDate = format.format(new Date(now)); } } } return currentDate; }. ### Assistant:", "ground_truth": "Gets the current date in HTTP format.\n\n@return Current date in HTTP format", "predict": "Get the current date in the format specified by the user. @return The current date in the format specified by the user."}
{"ID": 216, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static Long internalParseDate(String value, DateFormat[] formats) { Date date = null; for (int i = 0; (date == null) && (i < formats.length); i++) { try { date = formats[i].parse(value); } catch (ParseException ignored) { } } if (date == null) { return null; } return new Long(date.getTime()); }. ### Assistant:", "ground_truth": "Parses date with given formatters.\n\n@param value The string to parse\n@param formats Array of formats to use\n\n@return Parsed date (or <code>null</code> if no formatter mached)", "predict": "Parse the date from the given string using the given formats. The first format that can parse the string will be used. If none can parse it, null will be returned. @param value The date string to parse. @param formats The formats to use when parsing. @return The date, or null if none can be parsed."}
{"ID": 217, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") private static void updateCache(HashMap cache, Object key, Object value) { if (value == null) { return; } if (cache.size() > 1000) { cache.clear(); } cache.put(key, value); }. ### Assistant:", "ground_truth": "Updates cache.\n\n@param cache Cache to be updated\n@param key Key to be updated\n@param value New value", "predict": "Updates the cache with the given key and value. If the value is null, the cache is cleared. If the cache is too large, it is cleared."}
{"ID": 218, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void setDetails(HttpServletRequest request, UsernamePasswordAuthenticationToken authRequest) { authRequest.setDetails(authenticationDetailsSource.buildDetails(request)); }. ### Assistant:", "ground_truth": "Provided so that subclasses may configure what is put into the authentication\nrequest's details property.\n\n@param request that an authentication request is being created for\n@param authRequest the authentication request object that should have its details\nset", "predict": "Populate the authentication details from the request. @param request the request @param authRequest the authentication request"}
{"ID": 219, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static String getSecurityName(final Subject subject) { if (logger.isDebugEnabled()) { logger.debug(\"Determining Websphere security name for subject \" + subject); } String userSecurityName = null; if (subject != null) { // SEC-803 Object credential = subject.getPublicCredentials(getWSCredentialClass()) .iterator().next(); if (credential != null) { userSecurityName = (String) invokeMethod(getSecurityNameMethod(), credential); } } if (logger.isDebugEnabled()) { logger.debug(\"Websphere security name is \" + userSecurityName + \" for subject \" + subject); } return userSecurityName; }. ### Assistant:", "ground_truth": "Get the security name for the given subject.\n\n@param subject The subject for which to retrieve the security name\n@return String the security name for the given subject", "predict": "Get the security name from the subject. This is used to determine the security name of the user. @param subject the subject @return the security name of the user"}
{"ID": 220, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") private static List<String> getWebSphereGroups(final String securityName) { Context ic = null; try { // TODO: Cache UserRegistry object ic = new InitialContext(); Object objRef = ic.lookup(USER_REGISTRY); Object userReg = invokeMethod(getNarrowMethod(), null , objRef, Class.forName(\"com.ibm.websphere.security.UserRegistry\")); if (logger.isDebugEnabled()) { logger.debug(\"Determining WebSphere groups for user \" + securityName + \" using WebSphere UserRegistry \" + userReg); } final Collection groups = (Collection) invokeMethod(getGroupsForUserMethod(), userReg, new Object[] { securityName }); if (logger.isDebugEnabled()) { logger.debug(\"Groups for user \" + securityName + \": \" + groups.toString()); } return new ArrayList(groups); } catch (Exception e) { logger.error(\"Exception occured while looking up groups for user\", e); throw new RuntimeException( \"Exception occured while looking up groups for user\", e); } finally { try { if (ic != null) { ic.close(); } } catch (NamingException e) { logger.debug(\"Exception occured while closing context\", e); } } }. ### Assistant:", "ground_truth": "Get the WebSphere group names for the given security name.\n\n@param securityName The security name for which to retrieve the WebSphere group\nnames\n@return the WebSphere group names for the given security name", "predict": "Returns a list of groups for the given securityName. The groups are determined by calling the IBM WebSphere UserRegistry API. @param securityName The securityName of the user for whom the groups should be determined. @return A list of groups for the given securityName."}
{"ID": 221, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void changePassword(final String oldPassword, final String newPassword) { Authentication authentication = SecurityContextHolder.getContext() .getAuthentication(); Assert.notNull( authentication, \"No authentication object found in security context. Can't change current user's password!\"); String username = authentication.getName(); logger.debug(\"Changing password for user '\" + username); DistinguishedName userDn = usernameMapper.buildDn(username); if (usePasswordModifyExtensionOperation) { changePasswordUsingExtensionOperation(userDn, oldPassword, newPassword); } else { changePasswordUsingAttributeModification(userDn, oldPassword, newPassword); } }. ### Assistant:", "ground_truth": "Changes the password for the current user. The username is obtained from the\nsecurity context.\n\nThere are two supported strategies for modifying the user's password depending on\nthe capabilities of the corresponding LDAP server.\n\n<p>\nConfigured one way, this method will modify the user's password via the\n<a target=\"_blank\" href=\"https://tools.ietf.org/html/rfc3062\">\nLDAP Password Modify Extended Operation\n</a>.\n\nSee {@link LdapUserDetailsManager#setUsePasswordModifyExtensionOperation(boolean)} for details.\n</p>\n\n<p>\nBy default, though, if the old password is supplied, the update will be made by rebinding as the user,\nthus modifying the password using the user's permissions. If\n<code>oldPassword</code> is null, the update will be attempted using a standard\nread/write context supplied by the context source.\n</p>\n\n@param oldPassword the old password\n@param newPassword the new value of the password.", "predict": "Change password for current user. @param oldPassword old password @param newPassword new password"}
{"ID": 222, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected DistinguishedName buildGroupDn(String group) { DistinguishedName dn = new DistinguishedName(groupSearchBase); dn.add(groupRoleAttributeName, group.toLowerCase()); return dn; }. ### Assistant:", "ground_truth": "Creates a DN from a group name.\n\n@param group the name of the group\n@return the DN of the corresponding group, including the groupSearchBase", "predict": "Build distinguished name for group. @param group Group name. @return Distinguished name for group."}
{"ID": 223, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void allowableSessionsExceeded(List<SessionInformation> sessions, int allowableSessions, SessionRegistry registry) throws SessionAuthenticationException { if (exceptionIfMaximumExceeded || (sessions == null)) { throw new SessionAuthenticationException(messages.getMessage( \"ConcurrentSessionControlAuthenticationStrategy.exceededAllowed\", new Object[] { Integer.valueOf(allowableSessions) }, \"Maximum sessions of {0} for this principal exceeded\")); } // Determine least recently used session, and mark it for invalidation SessionInformation leastRecentlyUsed = null; for (SessionInformation session : sessions) { if ((leastRecentlyUsed == null) || session.getLastRequest() .before(leastRecentlyUsed.getLastRequest())) { leastRecentlyUsed = session; } } leastRecentlyUsed.expireNow(); }. ### Assistant:", "ground_truth": "Allows subclasses to customise behaviour when too many sessions are detected.\n\n@param sessions either <code>null</code> or all unexpired sessions associated with\nthe principal\n@param allowableSessions the number of concurrent sessions the user is allowed to\nhave\n@param registry an instance of the <code>SessionRegistry</code> for subclass use", "predict": "Allowable sessions exceeded. @param sessions List of sessions. @param allowableSessions Maximum number of sessions allowed. @param registry Session registry. @throws SessionAuthenticationException If exceeded."}
{"ID": 224, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void copyDetails(Authentication source, Authentication dest) { if ((dest instanceof AbstractAuthenticationToken) && (dest.getDetails() == null)) { AbstractAuthenticationToken token = (AbstractAuthenticationToken) dest; token.setDetails(source.getDetails()); } }. ### Assistant:", "ground_truth": "Copies the authentication details from a source Authentication object to a\ndestination one, provided the latter does not already have one set.\n\n@param source source authentication\n@param dest the destination authentication object", "predict": "Copy the details from the source to the dest authentication object."}
{"ID": 225, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private List<Filter> getFilters(HttpServletRequest request) { for (SecurityFilterChain chain : filterChains) { if (chain.matches(request)) { return chain.getFilters(); } } return null; }. ### Assistant:", "ground_truth": "Returns the first filter chain matching the supplied URL.\n\n@param request the request to match\n@return an ordered array of Filters defining the filter chain", "predict": "Returns the filters associated with the securityFilterChain that match the given request. @param request the request @return the filters associated with the securityFilterChain that match the given request."}
{"ID": 226, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public List<Filter> getFilters(String url) { return getFilters(firewall.getFirewalledRequest((new FilterInvocation(url, \"GET\") .getRequest()))); }. ### Assistant:", "ground_truth": "Convenience method, mainly for testing.\n\n@param url the URL\n@return matching filter list", "predict": "Get the filters for a GET request. @param url the url @return the filters"}
{"ID": 227, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected ApplicationContext getContext(PageContext pageContext) { ServletContext servletContext = pageContext.getServletContext(); return SecurityWebApplicationContextUtils.findRequiredWebApplicationContext(servletContext); }. ### Assistant:", "ground_truth": "Allows test cases to override where application context obtained from.\n\n@param pageContext so the <code>ServletContext</code> can be accessed as required\nby Spring's <code>WebApplicationContextUtils</code>\n\n@return the Spring application context (never <code>null</code>)", "predict": "Get the Spring application context. @param pageContext the page context @return the application context"}
{"ID": 228, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static DistinguishedName getFullDn(DistinguishedName dn, Context baseCtx) throws NamingException { DistinguishedName baseDn = new DistinguishedName(baseCtx.getNameInNamespace()); if (dn.contains(baseDn)) { return dn; } baseDn.append(dn); return baseDn; }. ### Assistant:", "ground_truth": "Gets the full dn of a name by prepending the name of the context it is relative to.\nIf the name already contains the base name, it is returned unaltered.", "predict": "Get the full distinguished name of a distinguished name by recursively appending the distinguished name to the base distinguished name. The base distinguished name is the distinguished name of the base context. @param dn the distinguished name to expand. @param baseCtx the base context. @return the expanded distinguished name. @throws NamingException if an error occurs."}
{"ID": 229, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public MockMvcRequestSpecification sessionAttrs(Map<String, Object> sessionAttributes) { notNull(sessionAttributes, \"sessionAttributes\"); parameterUpdater.updateParameters(convert(cfg.getMockMvcParamConfig().sessionAttributesUpdateStrategy()), sessionAttributes, this.sessionAttributes); return this; }. ### Assistant:", "ground_truth": "Set session attributes.\n\n@param sessionAttributes the session attributes", "predict": "Specify session attributes. @param sessionAttributes @return"}
{"ID": 230, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public AuthenticationScheme basic(String userName, String password) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme(); preemptiveBasicAuthScheme.setUserName(userName); preemptiveBasicAuthScheme.setPassword(password); return preemptiveBasicAuthScheme; }. ### Assistant:", "ground_truth": "Use preemptive http basic authentication. This means that the authentication details are sent in the request\nheader regardless if the server has challenged for authentication or not.\n\n@param userName The user name.\n@param password The password.\n\n@return The Request specification", "predict": "Create a preemptive basic authentication scheme with the given user name and password. @param userName the user name @param password the password @return the authentication scheme"}
{"ID": 231, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void filters(List<Filter> filters) { Validate.notNull(filters, \"Filter list cannot be null\"); RestAssured.filters.addAll(filters); }. ### Assistant:", "ground_truth": "Add default filters that will be applied to each request.\n\n@param filters The filter list", "predict": "Adds filters to the request. @param filters the filters to add"}
{"ID": 232, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void filters(Filter filter, Filter... additionalFilters) { Validate.notNull(filter, \"Filter cannot be null\"); RestAssured.filters.add(filter); if (additionalFilters != null) { Collections.addAll(RestAssured.filters, additionalFilters); } }. ### Assistant:", "ground_truth": "Add default filters to apply to each request.\n\n@param filter            The filter to add\n@param additionalFilters An optional array of additional filters to add", "predict": "Adds a filter to the request. If additional filters are provided, they will be added to the existing filters. @param filter The filter to add. @param additionalFilters Additional filters to add."}
{"ID": 233, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static AuthenticationScheme basic(String userName, String password) { final BasicAuthScheme scheme = new BasicAuthScheme(); scheme.setUserName(userName); scheme.setPassword(password); return scheme; }. ### Assistant:", "ground_truth": "Create a http basic authentication scheme.\n\n@param userName The user name.\n@param password The password.\n@return The authentication scheme", "predict": "Create a basic authentication scheme. @param userName the username. @param password the password. @return the authentication scheme."}
{"ID": 234, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static AuthenticationScheme ntlm(String userName, String password, String workstation, String domain) { final NTLMAuthScheme scheme = new NTLMAuthScheme(); scheme.setUserName(userName); scheme.setPassword(password); scheme.setWorkstation(workstation); scheme.setDomain(domain); return scheme; }. ### Assistant:", "ground_truth": "Create a NTLM authentication scheme.\n\n@param userName The user name.\n@param password The password.\n@param workstation The NTLM workstation.\n@param domain The NTLM workstation.\n@return The authentication scheme", "predict": "Create an NTLMAuthScheme. @param userName the username to authenticate with. @param password the password to authenticate with. @param workstation the workstation to authenticate from. @param domain the domain to authenticate from. @return the NTLMAuthScheme."}
{"ID": 235, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static AuthenticationScheme form(String userName, String password, FormAuthConfig config) { if (userName == null) { throw new IllegalArgumentException(\"Username cannot be null\"); } if (password == null) { throw new IllegalArgumentException(\"Password cannot be null\"); } final FormAuthScheme scheme = new FormAuthScheme(); scheme.setUserName(userName); scheme.setPassword(password); scheme.setConfig(config); return scheme; }. ### Assistant:", "ground_truth": "Use form authentication with the supplied configuration.\n\n@param userName The user name.\n@param password The password.\n@param config   The form authentication config\n@return The authentication scheme", "predict": "Creates a new authentication scheme from a username and password. The password is not stored securely. @param userName the username @param password the password @param config the form authentication configuration @return the authentication scheme"}
{"ID": 236, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void proxy(URI uri) { if (uri == null) { throw new IllegalArgumentException(\"Proxy URI cannot be null\"); } proxy(new ProxySpecification(uri.getHost(), uri.getPort(), uri.getScheme())); }. ### Assistant:", "ground_truth": "Instruct REST Assured to connect to a proxy using a URI.\n\n@param uri The URI of the proxy", "predict": "Creates a new proxy specification from the given URI. @param uri the URI to create the proxy specification from. @throws IllegalArgumentException if the URI is null."}
{"ID": 237, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String print(ResponseOptions responseOptions, ResponseBody responseBody, PrintStream stream, LogDetail logDetail, boolean shouldPrettyPrint) { final StringBuilder builder = new StringBuilder(); if (logDetail == ALL || logDetail == STATUS) { builder.append(responseOptions.statusLine()); } if (logDetail == ALL || logDetail == HEADERS) { final Headers headers = responseOptions.headers(); if (headers.exist()) { appendNewLineIfAll(logDetail, builder).append(toString(headers)); } } else if (logDetail == COOKIES) { final Cookies cookies = responseOptions.detailedCookies(); if (cookies.exist()) { appendNewLineIfAll(logDetail, builder).append(cookies.toString()); } } if (logDetail == ALL || logDetail == BODY) { String responseBodyToAppend; if (shouldPrettyPrint) { responseBodyToAppend = new Prettifier().getPrettifiedBodyIfPossible(responseOptions, responseBody); } else { responseBodyToAppend = responseBody.asString(); } if (logDetail == ALL && !isBlank(responseBodyToAppend)) { builder.append(SystemUtils.LINE_SEPARATOR).append(SystemUtils.LINE_SEPARATOR); } builder.append(responseBodyToAppend); } String response = builder.toString(); stream.println(response); return response; }. ### Assistant:", "ground_truth": "Prints the response to the print stream\n\n@return A string of representing the response", "predict": "Print the response body and headers to the console. @param responseOptions the response options @param responseBody the response body @param stream the console output stream @param logDetail the log detail level @param shouldPrettyPrint whether to pretty print the response body @return the response body printed to the console"}
{"ID": 238, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public RestAssuredConfig redirect(RedirectConfig redirectConfig) { notNull(redirectConfig, \"Redirect config\"); return new RestAssuredConfig(redirectConfig, conf(HttpClientConfig.class), conf(LogConfig.class), conf(EncoderConfig.class), conf(DecoderConfig.class), conf(SessionConfig.class), conf(ObjectMapperConfig.class), conf(ConnectionConfig.class), conf(JsonConfig.class), conf(XmlConfig.class), conf(SSLConfig.class), conf(MatcherConfig.class), conf(HeaderConfig.class), conf(MultiPartConfig.class), conf(ParamConfig.class), conf(OAuthConfig.class), conf(FailureConfig.class)); }. ### Assistant:", "ground_truth": "Set the redirect config.\n\n@param redirectConfig The {@link RedirectConfig} to set\n@return An updated RestAssuredConfiguration", "predict": "Creates a new RestAssuredConfig instance with the given redirect configuration. @param redirectConfig Redirect configuration @return New RestAssuredConfig instance"}
{"ID": 239, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public EncoderConfig defaultQueryParameterCharset(String charset) { return new EncoderConfig(defaultContentCharset, charset, shouldAppendDefaultContentCharsetToContentTypeIfUndefined, contentEncoders, contentTypeToDefaultCharset, true); }. ### Assistant:", "ground_truth": "Specify the default charset for query parameters\n\n@param charset The charset to use.\n@return A new instance of {@link EncoderConfig}", "predict": "Create a new encoder config with the default query parameter charset set. @param charset the charset to use as the default query parameter charset @return the encoder config"}
{"ID": 240, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ObjectMapperConfig defaultObjectMapperType(ObjectMapperType defaultObjectMapperType) { return new ObjectMapperConfig(defaultObjectMapper, defaultObjectMapperType, gsonObjectMapperFactory, jackson1ObjectMapperFactory, jackson2ObjectMapperFactory, jaxbObjectMapperFactory, johnzonObjectMapperFactory, true); }. ### Assistant:", "ground_truth": "Creates an object mapper configuration that uses the specified object mapper as default.\n\n@param defaultObjectMapperType The object mapper to use. If <code>null</code> then classpath scanning will be used.", "predict": "Default ObjectMapperType for all requests. @param defaultObjectMapperType the default object mapper type @return the object mapper config"}
{"ID": 241, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ObjectMapperConfig jaxbObjectMapperFactory(JAXBObjectMapperFactory jaxbObjectMapperFactory) { return new ObjectMapperConfig(defaultObjectMapper, defaultObjectMapperType, gsonObjectMapperFactory, jackson1ObjectMapperFactory, jackson2ObjectMapperFactory, jaxbObjectMapperFactory, johnzonObjectMapperFactory, true); }. ### Assistant:", "ground_truth": "Specify a custom JAXB object mapper factory.\n\n@param jaxbObjectMapperFactory The object mapper factory", "predict": "JAXB ObjectMapperFactory. @param jaxbObjectMapperFactory the jaxb object mapper factory @return the object mapper config"}
{"ID": 242, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public RestAssuredMockMvcConfig logConfig(LogConfig logConfig) { notNull(logConfig, \"Log config\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }. ### Assistant:", "ground_truth": "Set the Log config.\n\n@param logConfig The {@link LogConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Configures the logging for the mockMvc. @param logConfig LogConfig @return RestAssuredMockMvcConfig"}
{"ID": 243, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public RestAssuredMockMvcConfig sessionConfig(SessionConfig sessionConfig) { notNull(sessionConfig, \"Session config\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }. ### Assistant:", "ground_truth": "Set the session config.\n\n@param sessionConfig The {@link SessionConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Configures the mockMvc to use the given sessionConfig. @param sessionConfig the sessionConfig @return the RestAssuredMockMvcConfig"}
{"ID": 244, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public RestAssuredMockMvcConfig objectMapperConfig(ObjectMapperConfig objectMapperConfig) { notNull(objectMapperConfig, \"Object mapper config\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }. ### Assistant:", "ground_truth": "Set the object mapper config.\n\n@param objectMapperConfig The {@link ObjectMapperConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Object mapper configuration. @param objectMapperConfig Object mapper config @return RestAssuredMockMvcConfig"}
{"ID": 245, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public RestAssuredMockMvcConfig jsonConfig(JsonConfig jsonConfig) { notNull(jsonConfig, \"JsonConfig\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }. ### Assistant:", "ground_truth": "Set the Json config.\n\n@param jsonConfig The {@link JsonConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Configures JSON request and response mappings. @param jsonConfig JSON configuration @return self"}
{"ID": 246, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public RestAssuredMockMvcConfig xmlConfig(XmlConfig xmlConfig) { notNull(xmlConfig, \"XmlConfig\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }. ### Assistant:", "ground_truth": "Set the Xml config.\n\n@param xmlConfig The {@link XmlConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Configures the mockMvc with an XmlConfig @param xmlConfig XmlConfig @return RestAssuredMockMvcConfig"}
{"ID": 247, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public RestAssuredMockMvcConfig encoderConfig(EncoderConfig encoderConfig) { notNull(encoderConfig, \"EncoderConfig\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }. ### Assistant:", "ground_truth": "Set the encoder config\n\n@param encoderConfig The {@link EncoderConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Configures the encoder to use. @param encoderConfig encoderConfig to use. @return self"}
{"ID": 248, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public RestAssuredMockMvcConfig headerConfig(HeaderConfig headerConfig) { notNull(headerConfig, \"HeaderConfig\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }. ### Assistant:", "ground_truth": "Set the header config\n\n@param headerConfig The {@link HeaderConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Configures headers for the mockMvc. @param headerConfig @return"}
{"ID": 249, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public RestAssuredMockMvcConfig asyncConfig(AsyncConfig asyncConfig) { notNull(asyncConfig, AsyncConfig.class); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }. ### Assistant:", "ground_truth": "Set the async config\n\n@param asyncConfig The {@link AsyncConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Configures async support. @param asyncConfig @return"}
{"ID": 250, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public RestAssuredMockMvcConfig mockMvcConfig(MockMvcConfig mockMvcConfig) { notNull(mockMvcConfig, MockMvcConfig.class); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }. ### Assistant:", "ground_truth": "Set the MockMVC config\n\n@param mockMvcConfig The {@link MockMvcConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "MockMvcConfig is used to configure the mockMvc. @param mockMvcConfig @return"}
{"ID": 251, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public RestAssuredMockMvcConfig multiPartConfig(MultiPartConfig multiPartConfig) { notNull(multiPartConfig, MultiPartConfig.class); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }. ### Assistant:", "ground_truth": "Set the multi-part config\n\n@param multiPartConfig The {@link MultiPartConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Configures the mockMvc for multi-part requests. @param multiPartConfig the multi-part config @return the mockMvcConfig"}
{"ID": 252, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public RestAssuredMockMvcConfig paramConfig(MockMvcParamConfig paramConfig) { notNull(paramConfig, MultiPartConfig.class); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }. ### Assistant:", "ground_truth": "Set the parameter config\n\n@param paramConfig The {@link MockMvcParamConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Configures parameters for RestAssuredMockMvc. @param paramConfig Parameters configuration. @return The mockMvcConfig object."}
{"ID": 253, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public RestAssuredMockMvcConfig matcherConfig(MatcherConfig matcherConfig) { notNull(matcherConfig, MatcherConfig.class); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }. ### Assistant:", "ground_truth": "Set the matcher config\n\n@param matcherConfig The {@link MockMvcParamConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Configures the matchers used by the mockMvc. @param matcherConfig the matcher config @return the mockMvcConfig"}
{"ID": 254, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public CertificateAuthSettings allowAllHostnames() { return new CertificateAuthSettings(keystoreType, trustStoreType, port, trustStore, keyStore, ALLOW_ALL_HOSTNAME_VERIFIER, sslSocketFactory); }. ### Assistant:", "ground_truth": "Configure the CertificateAuthSettings to allow all host names.\n\n@return A new CertificateAuthSettings instance\n@see org.apache.http.conn.ssl.SSLSocketFactory#ALLOW_ALL_HOSTNAME_VERIFIER", "predict": "Allow all hostnames. @return CertificateAuthSettings"}
{"ID": 255, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public XmlPathConfig declareNamespaces(Map<String, String> namespacesToDeclare) { return new XmlPathConfig(jaxbObjectMapperFactory, defaultParserType, defaultDeserializer, charset, features, namespacesToDeclare, properties, validating, namespaceAware, allowDocTypeDeclaration); }. ### Assistant:", "ground_truth": "Specify declared namespaces that will be used when parsing XML.\n\n@param namespacesToDeclare A map containing features that will be used by the underlying {@link groovy.util.XmlSlurper}.\n@return A new instance of XmlPathConfig\n@see org.xml.sax.XMLReader#setFeature(java.lang.String, boolean)", "predict": "Declare namespaces for the xml path configuration. @param namespacesToDeclare Namespaces to declare. @return XmlPathConfig object."}
{"ID": 256, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public XmlPathConfig declaredNamespace(String prefix, String namespaceURI) { Validate.notEmpty(prefix, \"Prefix cannot be empty\"); Validate.notEmpty(namespaceURI, \"Namespace URI cannot be empty\"); Map<String, String> updatedNamespaces = new HashMap<String, String>(declaredNamespaces); updatedNamespaces.put(prefix, namespaceURI); return new XmlPathConfig(jaxbObjectMapperFactory, defaultParserType, defaultDeserializer, charset, features, updatedNamespaces, properties, validating, true, allowDocTypeDeclaration); }. ### Assistant:", "ground_truth": "Declares a namespace.\n\n@param prefix       The feature name, which is a fully-qualified URI.\n@param namespaceURI The requested value of the feature (true or false).\n@return A new XmlPathConfig instance\n@see org.xml.sax.XMLReader#setFeature(java.lang.String, boolean)", "predict": "Declares a namespace prefix and namespace URI. @param prefix the prefix to use @param namespaceURI the namespace URI to use @return the XmlPathConfig object with the namespace prefix and namespace URI added."}
{"ID": 257, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Object request(String method, boolean hasBody, Closure configClosure) throws ClientProtocolException, IOException { return this.doRequest(this.defaultURI.toURI(), method, this.defaultContentType, hasBody, configClosure); }. ### Assistant:", "ground_truth": "Make an HTTP request to the default URI, and parse using the default\ncontent-type.\n\n@param method        {@link HttpRequestFactory HTTP method}\n@param configClosure request configuration options\n@return whatever value was returned by the executed response handler.\n@throws ClientProtocolException\n@throws IOException\n@see #request(Object, HttpRequestFactory, Object, Closure)", "predict": "Send a request to the default URI using the specified HTTP method. The request will be sent with the default headers and the specified Content-Type. If the request has a body, it will be sent as a multipart request. @param method the HTTP method to use for the request. @param hasBody whether the request has a body. @param configClosure a closure that will be executed with the request configuration. @return the response object. @throws ClientProtocolException if the client cannot connect to the server. @throws IOException if the client cannot send the request."}
{"ID": 258, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void setHeaders(Map<?, ?> headers) { this.defaultRequestHeaders.clear(); if (headers == null) return; for (Object key : headers.keySet()) { Object val = headers.get(key); if (val == null) continue; this.defaultRequestHeaders.put(key.toString(), val.toString()); } }. ### Assistant:", "ground_truth": "Set the default headers to add to all requests made by this builder\ninstance.  These values will replace any previously set default headers.\n\n@param headers map of header names & values.", "predict": "Sets headers to be sent with every request. @param headers headers to be sent with every request."}
{"ID": 259, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void setProxy(String host, int port, String scheme) { getClient().getParams().setParameter( ConnRoutePNames.DEFAULT_PROXY, new HttpHost(host, port, scheme)); }. ### Assistant:", "ground_truth": "Set the default HTTP proxy to be used for all requests.\n\n@param host   host name or IP\n@param port   port, or -1 for the default port\n@param scheme usually \"http\" or \"https,\" or <code>null</code> for the default\n@see HttpHost#HttpHost(String, int, String)", "predict": "Sets the proxy for the connection. @param host the host of the proxy @param port the port of the proxy @param scheme the scheme of the proxy"}
{"ID": 260, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public MultiPartSpecBuilder controlName(String controlName) { Validate.notEmpty(controlName, \"Control name cannot be empty\"); this.controlName = controlName; this.isControlNameExplicit = true; return this; }. ### Assistant:", "ground_truth": "Specify the control name of this multi-part.\n\n@param controlName The control name to use. Default is <code>file</code>.\n@return An instance of MultiPartSpecBuilder", "predict": "Specifies the control name. @param controlName the control name @return the builder instance"}
{"ID": 261, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public MultiPartSpecBuilder header(String name, String value) { Validate.notEmpty(name, \"Header name cannot be empty\"); Validate.notEmpty(value, \"Header value cannot be empty\"); // Replace previous header if exists final Set<String> headerNames = headers.keySet(); final String trimmedName = name.trim(); for (String headerName : headerNames) { if (headerName.equalsIgnoreCase(trimmedName)) { headers.remove(headerName); } } // Put the name header in the header list headers.put(name, value); return this; }. ### Assistant:", "ground_truth": "Add a header to this multipart specification.\n\n@param name The name of the header\n@param value The value of the header\n@return An instance of MultiPartSpecBuilder", "predict": "Adds a header to the multipart request. @param name the header name @param value the header value @return this builder instance"}
{"ID": 262, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void basic(String host, int port, String user, String pass) { builder.getClient().getCredentialsProvider().setCredentials( new AuthScope(host, port), new UsernamePasswordCredentials(user, pass) ); }. ### Assistant:", "ground_truth": "Set authentication credentials to be used for the given host and port.\n\n@param host\n@param port\n@param user\n@param pass", "predict": "Connect to the database with username and password. @param host hostname of the database @param port port number of the database @param user username of the database @param pass password of the database"}
{"ID": 263, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void ntlm(String host, int port, String user, String pass, String workstation, String domain) { builder.getClient().getCredentialsProvider().setCredentials( new AuthScope(host, port), new NTCredentials(user, pass, workstation, domain) ); }. ### Assistant:", "ground_truth": "Set NTLM authentication credentials to be used for the given host and port.\n\n@param host\n@param port\n@param user\n@param pass\n@param workstation\n@param domain", "predict": "Authenticate with Kerberos NTLM. @param host hostname of the server @param port port number of the server @param user Kerberos username @param pass Kerberos password @param workstation workstation name @param domain domain name"}
{"ID": 264, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Headers headers(Header header, Header... additionalHeaders) { notNull(header, \"Header\"); final List<Header> headerList = new LinkedList<Header>(); headerList.add(header); if (additionalHeaders != null) { Collections.addAll(headerList, additionalHeaders); } return new Headers(headerList); }. ### Assistant:", "ground_truth": "An alternative way to create a Headers object from the constructor.\n\n@param header            The header to be included\n@param additionalHeaders Additional headers to be included (optional)\n@return A new headers object containing the specified headers", "predict": "Create a Headers object from a single Header object and additional headers. @param header The header to include in the Headers object. @param additionalHeaders Additional headers to include in the Headers object. @return A Headers object. @throws IllegalArgumentException If the header is null. @throws IllegalArgumentException If the additionalHeaders is null. @throws IllegalArgumentException If the additionalHeaders is empty."}
{"ID": 265, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void reset() { mockMvcFactory = null; config = null; basePath = \"/\"; resultHandlers.clear(); requestPostProcessors.clear(); responseSpecification = null; requestSpecification = null; authentication = null; }. ### Assistant:", "ground_truth": "Reset all static configurations to their default values.", "predict": "Resets the SpringMockMvcFactory and all its properties."}
{"ID": 266, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ResponseBuilder setHeader(String name, String value) { notNull(name, \"Header name\"); notNull(value, \"Header value\"); List<Header> newHeaders = new ArrayList<Header>(restAssuredResponse.headers().asList()); newHeaders.add(new Header(name, value)); restAssuredResponse.setResponseHeaders(new Headers(newHeaders)); if (trim(name).equalsIgnoreCase(CONTENT_TYPE)) { restAssuredResponse.setContentType(value); } return this; }. ### Assistant:", "ground_truth": "Set a specific header\n\n@return The builder", "predict": "Sets a header with the given name and value. If the header already exists, it will not be overwritten. If the header name is \"Content-Type\" it will set the content type of the response. @param name the header name @param value the header value @return the builder instance"}
{"ID": 267, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Response build() { final int statusCode = restAssuredResponse.statusCode(); if (statusCode < 100 || statusCode >= 600) { throw new IllegalArgumentException(format(\"Status code must be greater than 100 and less than 600, was %d.\", statusCode)); } if (StringUtils.isBlank(restAssuredResponse.statusLine())) { restAssuredResponse.setStatusLine(restAssuredResponse.statusCode()); } restAssuredResponse.setRpr(new ResponseParserRegistrar()); return restAssuredResponse; }. ### Assistant:", "ground_truth": "Build the actual response\n\n@return The response object", "predict": "Builds the response object. @return The response object. @throws IllegalArgumentException If the status code is not between 100 and 600."}
{"ID": 268, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public DetailedCookieMatcher value(Matcher<? super String> valueMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"value\", valueMatcher))); }. ### Assistant:", "ground_truth": "Verifies whether value of cookie satisfies specified matcher.\n@param valueMatcher value assertion\n@return A {@link DetailedCookieMatcher} instance with and-composed value property assertion", "predict": "Matches cookies with the specified value. @param valueMatcher Matcher for the value of the cookie. @return Matcher for cookies with the specified value."}
{"ID": 269, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public DetailedCookieMatcher comment(Matcher<? super String> commentMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"comment\", commentMatcher))); }. ### Assistant:", "ground_truth": "Verifies whether comment of cookie satisfies specified matcher.\n@param commentMatcher comment assertion\n@return A {@link DetailedCookieMatcher} instance with and-composed comment property assertion", "predict": "Match cookies with a specific comment. @param commentMatcher the matcher to use to determine if the cookie has a specific comment. @return a cookie matcher that matches cookies with a specific comment."}
{"ID": 270, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public DetailedCookieMatcher expiryDate(Matcher<? super Date> expiryDateMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"expiryDate\", expiryDateMatcher))); }. ### Assistant:", "ground_truth": "Verifies whether expiry date of cookie satisfies specified matcher.\n@param expiryDateMatcher expiry date assertion\n@return A {@link DetailedCookieMatcher} instance with and-composed expiry date property assertion", "predict": "Matches cookies that have an expiry date. @param expiryDateMatcher Matcher for the expiry date of the cookie. @return The cookie matcher."}
{"ID": 271, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public DetailedCookieMatcher domain(Matcher<? super String> domainMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"domain\", domainMatcher))); }. ### Assistant:", "ground_truth": "Verifies whether domain of cookie satisfies specified matcher.\n@param domainMatcher assertion for domain property\n@return A {@link DetailedCookieMatcher} instance with and-composed domain property assertion", "predict": "Matches cookies that have a domain matching the given matcher. @param domainMatcher the matcher to use @return a cookie matcher that matches cookies with a domain matching the given matcher"}
{"ID": 272, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public DetailedCookieMatcher path(Matcher<? super String> pathMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"path\", pathMatcher))); }. ### Assistant:", "ground_truth": "Verifies whether path of cookie satisfies specified matcher.\n@param pathMatcher assertion for path property\n@return A {@link DetailedCookieMatcher} instance with and-composed path property assertion", "predict": "Matches cookies that have a path attribute that matches the given matcher. @param pathMatcher the matcher to use @return the cookie matcher"}
{"ID": 273, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public DetailedCookieMatcher secured(Matcher<? super Boolean> securedMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"secured\", securedMatcher))); }. ### Assistant:", "ground_truth": "Verifies whether secured property of cookie satisfies specified matcher.\n@param securedMatcher assertion for secured property\n@return A {@link DetailedCookieMatcher} instance with and-composed secured property assertion", "predict": "Matches cookies that are marked as secured. @param securedMatcher the matcher to use to determine if the cookie is secured. @return a cookie matcher that matches cookies that are secured."}
{"ID": 274, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public DetailedCookieMatcher httpOnly(Matcher<? super Boolean> httpOnlyMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"httpOnly\", httpOnlyMatcher))); }. ### Assistant:", "ground_truth": "Verifies whether http-only property of cookie satisfies specified matcher.\n@param httpOnlyMatcher assertion for domain property\n@return A {@link DetailedCookieMatcher} instance with and-composed http-only property assertion", "predict": "Matches cookies that are marked as HttpOnly. @param httpOnlyMatcher Matcher for the HttpOnly flag. @return The updated cookie matcher."}
{"ID": 275, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public DetailedCookieMatcher version(Matcher<? super Integer> versionMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"version\", versionMatcher))); }. ### Assistant:", "ground_truth": "Verifies whether version of cookie satisfies specified matcher.\n@param versionMatcher assertion for version property\n@return A {@link DetailedCookieMatcher} instance with and-composed version property assertion", "predict": "Matches cookies that have a version attribute. @param versionMatcher Matcher for version attribute. @return Matcher for cookies with version attribute."}
{"ID": 276, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public DetailedCookieMatcher maxAge(Matcher<? super Integer> maxAgeMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"maxAge\", maxAgeMatcher))); }. ### Assistant:", "ground_truth": "Verifies whether max age of cookie satisfies specified matcher.\n@param maxAgeMatcher assertion for max age property\n@return A {@link DetailedCookieMatcher} instance with and-composed max age property assertion", "predict": "Matches cookies that have a maxAge property with the value of the given matcher. @param maxAgeMatcher The matcher to use. @return The new matcher."}
{"ID": 277, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ResponseSpecBuilder expectHeader(String headerName, Matcher<String> expectedValueMatcher) { spec.header(headerName, expectedValueMatcher); return this; }. ### Assistant:", "ground_truth": "Expect that a response header matches the supplied header name and hamcrest matcher.\n\n@param headerName           The name of the expected header\n@param expectedValueMatcher The Hamcrest matcher that must conform to the value\n@return The builder", "predict": "Expects a header to be present with a specific value. @param headerName the header name @param expectedValueMatcher the expected value matcher @return this builder @see ResponseSpecBuilder#header(String, Matcher<String>)"}
{"ID": 278, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ResponseSpecBuilder expectHeader(String headerName, String expectedValue) { spec.header(headerName, expectedValue); return this; }. ### Assistant:", "ground_truth": "Expect that a response header matches the supplied name and value.\n\n@param headerName    The name of the expected header\n@param expectedValue The value of the expected header\n@return The builder", "predict": "Expects a header to be present with the given name and value. @param headerName the name of the header @param expectedValue the expected value of the header @return this builder"}
{"ID": 279, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ResponseSpecBuilder expectCookie(String cookieName, String expectedValue) { spec.cookie(cookieName, expectedValue); return this; }. ### Assistant:", "ground_truth": "Expect that a response cookie matches the supplied name and value.\n\n@param cookieName    The name of the expected cookie\n@param expectedValue The value of the expected cookie\n@return The builder", "predict": "Expect a cookie to be present with the given name and value. @param cookieName the name of the cookie @param expectedValue the expected value of the cookie @return this builder"}
{"ID": 280, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ProxySpecification withHost(String host) { return new ProxySpecification(host, port, scheme, username, password); }. ### Assistant:", "ground_truth": "Specify the hostname of the proxy.\n\n@param host The hostname of the proxy.\n@return A new ProxySpecification instance", "predict": "Create a new specification with a host. @param host the host to use for the proxy. @return the new specification."}
{"ID": 281, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public JsonPathConfig numberReturnType(NumberReturnType numberReturnType) { return new JsonPathConfig(numberReturnType, defaultParserType, gsonObjectMapperFactory, jackson1ObjectMapperFactory, jackson2ObjectMapperFactory, johnzonObjectMapperFactory, defaultDeserializer, charset); }. ### Assistant:", "ground_truth": "Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers.\n\n@param numberReturnType The choice.\n@return A new instance of JsonPathConfig with the given configuration", "predict": "Specifies the return type of numbers in JSON @param numberReturnType the number return type @return the config object"}
{"ID": 282, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public JsonPathConfig defaultParserType(JsonParserType defaultParserType) { return new JsonPathConfig(numberReturnType, defaultParserType, gsonObjectMapperFactory, jackson1ObjectMapperFactory, jackson2ObjectMapperFactory, johnzonObjectMapperFactory, defaultDeserializer, charset); }. ### Assistant:", "ground_truth": "Creates an json path configuration that uses the specified parser type as default.\n\n@param defaultParserType The parser type to use. If <code>null</code> then classpath scanning will be used.", "predict": "Default parser type. @param defaultParserType the default parser type @return the json path config"}
{"ID": 283, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public LogConfig defaultStream(PrintStream printStream) { return new LogConfig(printStream, true, logDetailIfValidationFails, urlEncodeRequestUri, true); }. ### Assistant:", "ground_truth": "Specify a new default stream to the print to.\n\n@param printStream The stream\n@return A new LogConfig instance", "predict": "Default logging configuration. @param printStream PrintStream to log to. @return LogConfig with default settings."}
{"ID": 284, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public LogConfig enableLoggingOfRequestAndResponseIfValidationFails(LogDetail logDetail) { return new LogConfig(defaultPrintStream, prettyPrintingEnabled, logDetail, urlEncodeRequestUri, true); }. ### Assistant:", "ground_truth": "Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail\n\n@param logDetail The log detail to show in the log\n@return A new LogConfig instance", "predict": "Enable logging of request and response if validation fails. @param logDetail Log detail @return LogConfig"}
{"ID": 285, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: static HttpRequestBase createHttpRequest(URI uri, String httpMethod, boolean hasBody) { String method = notNull(upperCase(trimToNull(httpMethod)), \"Http method\"); Class<? extends HttpRequestBase> type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE.get(method); final HttpRequestBase httpRequest; // If we are sending HTTP method that does not allow body (like GET) then HTTP library prevents // us from including it, however we chose to allow deviations from standard if user wants so, // so it needs custom handling - hence the second condition below. // Otherwise we should use standard implementation found in the map if (type == null || (!(type.isInstance(HttpEntityEnclosingRequest.class)) && hasBody)) { httpRequest = new CustomHttpMethod(method, uri); } else { try { httpRequest = type.newInstance(); } catch (Exception e) { throw new RuntimeException(e); } httpRequest.setURI(uri); } return httpRequest; }. ### Assistant:", "ground_truth": "Get the HttpRequest class that represents this request type.\n\n@return a non-abstract class that implements {@link HttpRequest}", "predict": "Creates HttpRequestBase instance from given URI and HTTP method. If there is no suitable implementation in the map, it falls back to CustomHttpMethod. @param uri URI of the request @param httpMethod HTTP method of the request @param hasBody Whether request has body or not @return HttpRequestBase instance"}
{"ID": 286, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public MultiPartConfig defaultBoundary(String defaultBoundary) { return new MultiPartConfig(defaultControlName, defaultFileName, defaultSubtype, defaultBoundary, defaultCharset, true); }. ### Assistant:", "ground_truth": "Specify an explicit default multipart boundary to use when sending multi-part data.\n\n@param defaultBoundary The boundary to set\n@return An updated MultiPartConfig", "predict": "Create a new instance with a default boundary. @param defaultBoundary the default boundary. @return the new instance."}
{"ID": 287, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public MockMvcRequestSpecBuilder addAttribute(String attributeName, Object attributeValue) { spec.attribute(attributeName, attributeValue); return this; }. ### Assistant:", "ground_truth": "Add request attribute\n\n@param attributeName  The attribute name\n@param attributeValue The attribute value\n@return The request specification builder", "predict": "Adds an attribute to the request. @param attributeName the name of the attribute @param attributeValue the value of the attribute @return the builder instance"}
{"ID": 288, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public MockMvcRequestSpecBuilder addHeader(String headerName, String headerValue) { spec.header(headerName, headerValue); return this; }. ### Assistant:", "ground_truth": "Add a header to be sent with the request\n\n@param headerName  The header name\n@param headerValue The header value\n@return The request specification builder", "predict": "Adds a header to the request. @param headerName the header name @param headerValue the header value @return the builder instance"}
{"ID": 289, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public MockMvcRequestSpecBuilder addMultiPart(String controlName, String contentBody, String mimeType) { spec.multiPart(controlName, mimeType); return this; }. ### Assistant:", "ground_truth": "Specify a string to send to the server using multi-part form data with a specific mime-type.\n\n@param controlName Defines the control name of the body part. In HTML this is the attribute name of the input tag.\n@param contentBody The string to send\n@param mimeType    The mime-type\n@return The request specification", "predict": "Add a multipart control to the request. @param controlName the name of the control @param contentBody the body of the control @param mimeType the mime type of the control @return the builder instance"}
{"ID": 290, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public MockMvcRequestSpecBuilder addResultHandlers(ResultHandler resultHandler, ResultHandler... additionalResultHandlers) { spec.resultHandlers(resultHandler, additionalResultHandlers); return this; }. ### Assistant:", "ground_truth": "Add a result handler\n\n@param resultHandler The result handler\n@return MockMvcRequestSpecBuilder", "predict": "Adds a result handler to the request spec. @param resultHandler the result handler @param additionalResultHandlers additional handlers to add @return the request spec builder"}
{"ID": 291, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <T> HttpClientConfig setParam(String parameterName, T parameterValue) { notNull(parameterName, \"Parameter name\"); final Map<String, Object> newParams = new HashMap<String, Object>(httpClientParams); newParams.put(parameterName, parameterValue); return new HttpClientConfig(httpClientFactory, newParams, httpMultipartMode, shouldReuseHttpClientInstance, NO_HTTP_CLIENT, true); }. ### Assistant:", "ground_truth": "Set a http client parameter.\n\n@param parameterName  The name of the parameter\n@param parameterValue The value of the parameter (may be null)\n@param <T>            The parameter type\n@return An updated HttpClientConfig", "predict": "Sets a parameter value for the HttpClientConfig. The parameterName is case sensitive. The parameterValue is not. The parameterValue is converted to the correct type. If the parameterValue is null, the parameterName is ignored. If the parameterValue is a HttpClientConfig, the HttpClientConfig is converted to the correct type. If the parameterValue is a HttpClientConfig, the HttpClientConfig is converted to the correct type. If the parameterValue is a HttpClientConfig, the HttpClientConfig is converted to the correct type. If the parameterValue is a HttpClientConfig, the HttpClientConfig is converted to the correct type. If the parameterValue is a HttpClientConfig, the HttpClientConfig is converted to the correct type. If the parameterValue is a HttpClientConfig, the HttpClientConfig is converted to the correct type. If the parameterValue is a HttpClientConfig, the HttpClientConfig is converted to the correct type. If the parameterValue is a HttpClientConfig, the HttpClientConfig is converted to the correct type. If"}
{"ID": 292, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public HttpClientConfig addParams(Map<String, ?> httpClientParams) { notNull(httpClientParams, \"httpClientParams\"); final Map<String, Object> newParams = new HashMap<String, Object>(this.httpClientParams); newParams.putAll(httpClientParams); return new HttpClientConfig(httpClientFactory, newParams, httpMultipartMode, shouldReuseHttpClientInstance, NO_HTTP_CLIENT, true); }. ### Assistant:", "ground_truth": "Add the given parameters to an already configured number of parameters.\n\n@param httpClientParams The parameters.\n@return An updated HttpClientConfig", "predict": "Adds the given parameters to the HttpClientConfig. @param httpClientParams Parameters to add. @return The HttpClientConfig with the added parameters."}
{"ID": 293, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public HttpClientConfig httpClientFactory(HttpClientFactory httpClientFactory) { return new HttpClientConfig(httpClientFactory, httpClientParams, httpMultipartMode, shouldReuseHttpClientInstance, NO_HTTP_CLIENT, true); }. ### Assistant:", "ground_truth": "Set the http client factory that Rest Assured should use when making request. For each request REST Assured will invoke the factory to get the a the HttpClient instance.\n\n@param httpClientFactory The http client factory to use.\n@return An updated HttpClientConfig", "predict": "Configure HttpClientFactory. @param httpClientFactory HttpClientFactory @return HttpClientConfig"}
{"ID": 294, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public HttpClientConfig httpMultipartMode(HttpMultipartMode httpMultipartMode) { return new HttpClientConfig(httpClientFactory, httpClientParams, httpMultipartMode, shouldReuseHttpClientInstance, httpClient, true); }. ### Assistant:", "ground_truth": "Specify the HTTP Multipart mode when sending multi-part data.\n\n@param httpMultipartMode The multi-part mode to set.\n@return An updated HttpClientConfig", "predict": "Configure HttpClient for multipart mode. @param httpMultipartMode HttpMultipartMode @return HttpClientConfig"}
{"ID": 295, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <T> T get(String path) { final JSONAssertion jsonAssertion = createJsonAssertion(path, params); final Object json = jsonParser.parseWith(createConfigurableJsonSlurper()); return (T) jsonAssertion.getResult(json, null); }. ### Assistant:", "ground_truth": "Get the result of an Object path expression as a boolean.\n\n@param path The Object path.\n@return The object matching the Object path. This may be any primitive type, a List or a Map.  A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "Get the value of a path. @param path the path to retrieve. @param <T> the type of the value. @return the value of the path."}
{"ID": 296, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public int getInt(String path) { //The type returned from Groovy depends on the input, so we need to handle different numerical types. Object value = get(path); if (value instanceof Integer) { return (Integer) value; } else if (value instanceof Short) { return ((Short) value).intValue(); } else if (value instanceof Long) { return ((Long) value).intValue(); } else { return ObjectConverter.convertObjectTo(value, Integer.class); } }. ### Assistant:", "ground_truth": "Get the result of an Object path expression as an int.\n\n@param path The Object path.\n@return The int matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "Returns the value of the property at the specified path as an integer. If the property is not found, it returns null. If the property is a primitive type, it will be returned as a primitive type. If the property is a complex object, it will be converted to an integer. @param path the path to the property @return the value of the property at the specified path as an integer."}
{"ID": 297, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public byte getByte(String path) { //The type returned from Groovy depends on the input, so we need to handle different numerical types. Object value = get(path); if (value instanceof Byte) { return (Byte) value; } else if (value instanceof Long) { return ((Long) value).byteValue(); } else if (value instanceof Integer) { return ((Integer) value).byteValue(); } else { return ObjectConverter.convertObjectTo(value, Byte.class); } }. ### Assistant:", "ground_truth": "Get the result of an Object path expression as a byte.\n\n@param path The Object path.\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "Returns the value of the specified path as a Byte. If the value is not a Byte, it is converted to a Byte using the ObjectConverter. @param path the path to the value @return the value of the path as a Byte"}
{"ID": 298, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public short getShort(String path) { //The type returned from Groovy depends on the input, so we need to handle different numerical types. Object value = get(path); if (value instanceof Short) { return (Short) value; } else if (value instanceof Long) { return ((Long) value).shortValue(); } else if (value instanceof Integer) { return ((Integer) value).shortValue(); } else { return ObjectConverter.convertObjectTo(value, Short.class); } }. ### Assistant:", "ground_truth": "Get the result of an Object path expression as a short.\n\n@param path The Object path.\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "Returns the value stored at the path as a short. If the value is not a short, it will be converted to a short before being returned. @param path the path to the value @return the value stored at the path as a short."}
{"ID": 299, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public float getFloat(String path) { final Object value = get(path); //Groovy will always return a Double for floating point values. if (value instanceof Double) { return ((Double) value).floatValue(); } else { return ObjectConverter.convertObjectTo(value, Float.class); } }. ### Assistant:", "ground_truth": "Get the result of an Object path expression as a float.\n\n@param path The Object path.\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "Returns the float value of the given path. If the value is a Double, it will be converted to a Float. If the value is not a Double, it will be converted to a Float using the ObjectConverter. @param path the path to the value @return the value of the path as a float"}
{"ID": 300, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public double getDouble(String path) { final Object value = get(path); if (value instanceof Double) { return (Double) value; } return ObjectConverter.convertObjectTo(value, Double.class); }. ### Assistant:", "ground_truth": "Get the result of an Object path expression as a double.\n\n@param path The Object path.\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "Get double value from JSON path. @param path JSON path to double value @return double value from JSON path"}
{"ID": 301, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public long getLong(String path) { //The type returned from Groovy depends on the input, so we need to handle different numerical types. Object value = get(path); if (value instanceof Long) { return (Long) value; } else if (value instanceof Short) { return ((Short) value).longValue(); } else if (value instanceof Integer) { return ((Integer) value).longValue(); } else { return ObjectConverter.convertObjectTo(value, Long.class); } }. ### Assistant:", "ground_truth": "Get the result of an Object path expression as a long.\n\n@param path The Object path.\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "Returns the value of the property at the given path as a long. If the property is not a long, it will be converted to a long. If the property is not found, it will return null."}
{"ID": 302, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <T> List<T> getList(String path, Class<T> genericType) { if (genericType == null) { throw new IllegalArgumentException(\"Generic type cannot be null\"); } final List<T> original = get(path); final List<T> newList = new LinkedList<T>(); if (original != null) { for (T t : original) { T e; if (t instanceof Map && !genericType.isAssignableFrom(Map.class)) { // TODO Avoid double parsing String str = objectToString(t); //noinspection unchecked e = (T) jsonStringToObject(str, genericType); } else { e = ObjectConverter.convertObjectTo(t, genericType); } newList.add(e); } } return Collections.unmodifiableList(newList); }. ### Assistant:", "ground_truth": "Get the result of an Object path expression as a list.\n\n@param path        The Object path.\n@param genericType The generic list type\n@param <T>         The type\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "Get a list from the JSON data. The generic type is used to determine the type of the elements in the list. If the generic type is not specified, the JSON elements will be converted to the default type Object. @param path the path to the JSON data @param genericType the generic type of the elements in the list. If this is null, the JSON elements will be converted to the default type Object. @return the list of elements. The list is unmodifiable. @throws IllegalArgumentException if the generic type is null."}
{"ID": 303, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <K, V> Map<K, V> getMap(String path) { return get(path); }. ### Assistant:", "ground_truth": "Get the result of an Object path expression as a map.\n\n@param path The Object path.\n@param <K>  The type of the expected key\n@param <V>  The type of the expected value\n@return The map matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "Get a map from the given path. @param path the path to the map @param <K> the key type @param <V> the value type @return the map"}
{"ID": 304, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <T> T getObject(String path, Class<T> objectType) { Object object = getFromPath(path, false); return getObjectAsType(object, objectType); }. ### Assistant:", "ground_truth": "Get an XML document as a Java Object.\n\n@param objectType The type of the java object.\n@param <T>        The type of the java object\n@return A Java object representation of the XML document", "predict": "Get the object from the path. If the object is not found, it will be created. @param path the path to the object @param objectType the type of the object @return the object"}
{"ID": 305, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public RequestSpecBuilder setBody(Object object, ObjectMapper mapper) { spec.body(object, mapper); return this; }. ### Assistant:", "ground_truth": "Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper.\nThis works for the POST, PATCH and PUT methods only. Trying to do this for the other http methods will cause an exception to be thrown.\n\n@param object The object to serialize and send with the request\n@param mapper The object mapper\n@return The request specification", "predict": "Sets the body of the request. @param object the object to set as the body @param mapper the mapper to use to serialize the object @return this RequestSpecBuilder instance @see #body(Object) @see #body(Object, ObjectMapper) @see ObjectMapper"}
{"ID": 306, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public RequestSpecBuilder addCookie(String key, Object value, Object... cookieNameValuePairs) { spec.cookie(key, value, cookieNameValuePairs); return this; }. ### Assistant:", "ground_truth": "Add a cookie to be sent with the request.\n\n@param key                  The cookie key\n@param value                The cookie value\n@param cookieNameValuePairs Additional cookies values. This will actually create two cookies with the same name but with different values.\n@return The request specification builder", "predict": "Add a cookie to the request. @param key The key of the cookie. @param value The value of the cookie. @param cookieNameValuePairs A list of key-value pairs for the cookie. @return The builder."}
{"ID": 307, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public RequestSpecBuilder addParam(String parameterName, Object... parameterValues) { spec.param(parameterName, parameterValues); return this; }. ### Assistant:", "ground_truth": "Add a parameter to be sent with the request.\n\n@param parameterName   The parameter name\n@param parameterValues Zero to many parameter values for this parameter name.\n@return The request specification builder", "predict": "Adds a parameter to the request body. @param parameterName the parameter name @param parameterValues the parameter values @return the request builder"}
{"ID": 308, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public RequestSpecBuilder addParam(String parameterName, Collection<?> parameterValues) { spec.param(parameterName, parameterValues); return this; }. ### Assistant:", "ground_truth": "Add a multi-value parameter to be sent with the request.\n\n@param parameterName   The parameter key\n@param parameterValues The parameter values\n@return The request specification builder", "predict": "Add a parameter to the request body. The parameterName is the name of the parameter and the parameterValues are the values of the parameter. @param parameterName the name of the parameter @param parameterValues the values of the parameter @return this RequestSpecBuilder instance"}
{"ID": 309, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public MockMvcParamConfig formParamsUpdateStrategy(UpdateStrategy updateStrategy) { return new MockMvcParamConfig(queryParamsUpdateStrategy, updateStrategy, requestParameterUpdateStrategy, attributeUpdateStrategy, sessionUpdateStrategy, true); }. ### Assistant:", "ground_truth": "Set form parameter update strategy to the given value.\n\n@param updateStrategy The update strategy to use for form parameters\n@return A new instance of {@link MockMvcParamConfig}", "predict": "Create a new MockMvcParamConfig with form parameters update strategy. @param updateStrategy the update strategy @return the mock mvc param config"}
{"ID": 310, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Filter logResponseToIfMatches(PrintStream stream, Matcher<Integer> matcher) { return new ResponseLoggingFilter(stream, matcher); }. ### Assistant:", "ground_truth": "Create a new logging filter without using the \"new\" operator.\nWill make the DSL look nicer.\n\n@param stream The print stream to log to\n@param matcher The matcher that must be fulfilled in order for logging to occur\n@return a new instance of the filter", "predict": "Logs the response to the console if it matches the given matcher. @param stream the PrintStream to write the response to @param matcher the matcher to use to determine if the response matches @return a filter that logs the response to the console if it matches the given matcher @since 1.0.0"}
{"ID": 311, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Cookies cookies(Cookie cookie, Cookie... additionalCookies) { AssertParameter.notNull(cookie, \"Cookie\"); final List<Cookie> cookieList = new LinkedList<Cookie>(); cookieList.add(cookie); Collections.addAll(cookieList, additionalCookies); return new Cookies(cookieList); }. ### Assistant:", "ground_truth": "An alternative way to create a Cookies object from the constructor.\n\n@param cookie            The cookie to be included\n@param additionalCookies Additional cookies to be included (optional)\n@return A new cookies object containing the specified cookies", "predict": "Create a new cookies object with the given cookie and additional cookies. @param cookie the cookie to include in the cookies object. @param additionalCookies the additional cookies to include in the cookies object. @return the cookies object."}
{"ID": 312, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void cleanUpForCollectedState(Set<KeyAndSource> keysAndSources) { synchronized (lock) { for (KeyAndSource keyAndSource : keysAndSources) { Multiset<Object> set = backingMap.get(keyAndSource.key); if (set != null) { set.remove(keyAndSource.source); if (set.isEmpty()) { backingMap.remove(keyAndSource.key); } } } } }. ### Assistant:", "ground_truth": "There may be multiple child injectors blacklisting a certain key so only remove the source\nthat's relevant.", "predict": "Clean up any collected state in the backing map."}
{"ID": 313, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: void index() { for (Binding<?> binding : state.getExplicitBindingsThisLevel().values()) { bindingsMultimap.put(binding.getKey().getTypeLiteral(), binding); } }. ### Assistant:", "ground_truth": "Indexes bindings by type.", "predict": "Index the bindings in the state."}
{"ID": 314, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: <T> BindingImpl<T> getBindingOrThrow(Key<T> key, Errors errors, JitLimitation jitType) throws ErrorsException { // Check explicit bindings, i.e. bindings created by modules. BindingImpl<T> binding = state.getExplicitBinding(key); if (binding != null) { return binding; } // Look for an on-demand binding. return getJustInTimeBinding(key, errors, jitType); }. ### Assistant:", "ground_truth": "Gets a binding implementation. First, it check to see if the parent has a binding. If the\nparent has a binding and the binding is scoped, it will use that binding. Otherwise, this\nchecks for an explicit binding. If no explicit binding is found, it looks for a just-in-time\nbinding.", "predict": "Finds a binding for the given key. If no binding is found, it creates a new binding. If the binding is not found due to a JIT limitation, it throws an exception."}
{"ID": 315, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private <T> BindingImpl<T> convertConstantStringBinding(Key<T> key, Errors errors) throws ErrorsException { // Find a constant string binding. Key<String> stringKey = key.ofType(STRING_TYPE); BindingImpl<String> stringBinding = state.getExplicitBinding(stringKey); if (stringBinding == null || !stringBinding.isConstant()) { return null; } // We can't call getProvider().get() because this InstanceBinding may not have been inintialized // yet (because we may have been called during InternalInjectorCreator.initializeStatically and // instance binding validation hasn't happened yet.) @SuppressWarnings(\"unchecked\") String stringValue = ((InstanceBinding<String>) stringBinding).getInstance(); Object source = stringBinding.getSource(); // Find a matching type converter. TypeLiteral<T> type = key.getTypeLiteral(); TypeConverterBinding typeConverterBinding = state.getConverter(stringValue, type, errors, source); if (typeConverterBinding == null) { // No converter can handle the given type. return null; } // Try to convert the string. A failed conversion results in an error. try { @SuppressWarnings(\"unchecked\") // This cast is safe because we double check below. T converted = (T) typeConverterBinding.getTypeConverter().convert(stringValue, type); if (converted == null) { throw errors .converterReturnedNull(stringValue, source, type, typeConverterBinding) .toException(); } if (!type.getRawType().isInstance(converted)) { throw errors .conversionTypeError(stringValue, source, type, typeConverterBinding, converted) .toException(); } return new ConvertedConstantBindingImpl<T>( this, key, converted, stringBinding, typeConverterBinding); } catch (ErrorsException e) { throw e; } catch (RuntimeException e) { throw errors .conversionError(stringValue, source, type, typeConverterBinding, e) .toException(); } }. ### Assistant:", "ground_truth": "Converts a constant string binding to the required type.\n\n@return the binding if it could be resolved, or null if the binding doesn't exist\n@throws com.google.inject.internal.ErrorsException if there was an error resolving the binding", "predict": "Try to convert a constant string binding to a binding of the given type. If the conversion is successful, it will be returned. If the conversion fails, a runtime exception will be thrown."}
{"ID": 316, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private boolean cleanup(BindingImpl<?> binding, Set<Key> encountered) { boolean bindingFailed = false; Set<Dependency<?>> deps = getInternalDependencies(binding); for (Dependency dep : deps) { Key<?> depKey = dep.getKey(); InjectionPoint ip = dep.getInjectionPoint(); if (encountered.add(depKey)) { // only check if we haven't looked at this key yet BindingImpl depBinding = jitBindings.get(depKey); if (depBinding != null) { // if the binding still exists, validate boolean failed = cleanup(depBinding, encountered); // if children fail, we fail if (depBinding instanceof ConstructorBindingImpl) { ConstructorBindingImpl ctorBinding = (ConstructorBindingImpl) depBinding; ip = ctorBinding.getInternalConstructor(); if (!ctorBinding.isInitialized()) { failed = true; } } if (failed) { removeFailedJitBinding(depBinding, ip); bindingFailed = true; } } else if (state.getExplicitBinding(depKey) == null) { // ignore keys if they were explicitly bound, but if neither JIT // nor explicit, it's also invalid & should let parent know. bindingFailed = true; } } } return bindingFailed; }. ### Assistant:", "ground_truth": "Iterates through the binding's dependencies to clean up any stray bindings that were leftover\nfrom a failed JIT binding. This is required because the bindings are eagerly & optimistically\nadded to allow circular dependency support, so dependencies may pass where they should have\nfailed.", "predict": "Cleanup the binding and its dependencies. This is called after the binding has been successfully processed, but before the binding is added to the JIT bindings map. This is done to ensure that the binding is properly constructed and that all its dependencies are properly satisfied. If any of the dependencies fail, the binding is marked as failed and the binding process is terminated. @param binding The binding to cleanup @param encountered The set of encountered keys @return True if the binding failed, false otherwise"}
{"ID": 317, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void removeFailedJitBinding(Binding<?> binding, InjectionPoint ip) { failedJitBindings.add(binding.getKey()); jitBindings.remove(binding.getKey()); membersInjectorStore.remove(binding.getKey().getTypeLiteral()); provisionListenerStore.remove(binding); if (ip != null) { constructors.remove(ip); } }. ### Assistant:", "ground_truth": "Cleans up any state that may have been cached when constructing the JIT binding.", "predict": "Remove the Binding from the JitBindingStore, and mark it as failed. If the Binding was associated with an InjectionPoint, remove it from the InjectionPointStore as well."}
{"ID": 318, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") private Set<Dependency<?>> getInternalDependencies(BindingImpl<?> binding) { if (binding instanceof ConstructorBindingImpl) { return ((ConstructorBindingImpl) binding).getInternalDependencies(); } else if (binding instanceof HasDependencies) { return ((HasDependencies) binding).getDependencies(); } else { return ImmutableSet.of(); } }. ### Assistant:", "ground_truth": "Safely gets the dependencies of possibly not initialized bindings.", "predict": "Get the internal dependencies of a binding. This is used to determine whether a binding is a singleton or not."}
{"ID": 319, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: <T> BindingImpl<T> createUninitializedBinding( Key<T> key, Scoping scoping, Object source, Errors errors, boolean jitBinding) throws ErrorsException { Class<?> rawType = key.getTypeLiteral().getRawType(); ImplementedBy implementedBy = rawType.getAnnotation(ImplementedBy.class); // Don't try to inject arrays or enums annotated with @ImplementedBy. if (rawType.isArray() || (rawType.isEnum() && implementedBy != null)) { throw errors.missingImplementationWithHint(key, this).toException(); } // Handle TypeLiteral<T> by binding the inner type if (rawType == TypeLiteral.class) { @SuppressWarnings(\"unchecked\") // we have to fudge the inner type as Object BindingImpl<T> binding = (BindingImpl<T>) createTypeLiteralBinding((Key<TypeLiteral<Object>>) key, errors); return binding; } // Handle @ImplementedBy if (implementedBy != null) { Annotations.checkForMisplacedScopeAnnotations(rawType, source, errors); return createImplementedByBinding(key, scoping, implementedBy, errors); } // Handle @ProvidedBy. ProvidedBy providedBy = rawType.getAnnotation(ProvidedBy.class); if (providedBy != null) { Annotations.checkForMisplacedScopeAnnotations(rawType, source, errors); return createProvidedByBinding(key, scoping, providedBy, errors); } return ConstructorBindingImpl.create( this, key, null, /* use default constructor */ source, scoping, errors, jitBinding && options.jitDisabled, options.atInjectRequired); }. ### Assistant:", "ground_truth": "Creates a binding for an injectable type with the given scope. Looks for a scope on the type if\nnone is specified.", "predict": "Create a binding for a type that is not yet instantiated. This is typically used for singletons."}
{"ID": 320, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: static Object[] getAll(InternalContext context, SingleParameterInjector<?>[] parameterInjectors) throws InternalProvisionException { if (parameterInjectors == null) { return NO_ARGUMENTS; } int size = parameterInjectors.length; Object[] parameters = new Object[size]; // optimization: use manual for/each to save allocating an iterator here for (int i = 0; i < size; i++) { parameters[i] = parameterInjectors[i].inject(context); } return parameters; }. ### Assistant:", "ground_truth": "Returns an array of parameter values.", "predict": "Returns the values of all the parameter injectors. The order of the parameters is the same as the order of the parameter injectors."}
{"ID": 321, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static void bindInjector(InjectorImpl injector) { Key<Injector> key = Key.get(Injector.class); InjectorFactory injectorFactory = new InjectorFactory(injector); injector.state.putBinding( key, new ProviderInstanceBindingImpl<Injector>( injector, key, SourceProvider.UNKNOWN_SOURCE, injectorFactory, Scoping.UNSCOPED, injectorFactory, ImmutableSet.<InjectionPoint>of())); }. ### Assistant:", "ground_truth": "The Injector is a special case because we allow both parent and child injectors to both have a\nbinding for that key.", "predict": "Binds the injector to the injector factory."}
{"ID": 322, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static void bindLogger(InjectorImpl injector) { Key<Logger> key = Key.get(Logger.class); LoggerFactory loggerFactory = new LoggerFactory(); injector.state.putBinding( key, new ProviderInstanceBindingImpl<Logger>( injector, key, SourceProvider.UNKNOWN_SOURCE, loggerFactory, Scoping.UNSCOPED, loggerFactory, ImmutableSet.<InjectionPoint>of())); }. ### Assistant:", "ground_truth": "The Logger is a special case because it knows the injection point of the injected member. It's\nthe only binding that does this.", "predict": "Binds the Logger to the Injector."}
{"ID": 323, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static boolean checkForMisplacedBindingAnnotations(Member member, Errors errors) { Annotation misplacedBindingAnnotation = Annotations.findBindingAnnotation( errors, member, ((AnnotatedElement) member).getAnnotations()); if (misplacedBindingAnnotation == null) { return false; } // don't warn about misplaced binding annotations on methods when there's a field with the same // name. In Scala, fields always get accessor methods (that we need to ignore). See bug 242. if (member instanceof Method) { try { if (member.getDeclaringClass().getDeclaredField(member.getName()) != null) { return false; } } catch (NoSuchFieldException ignore) { } } errors.misplacedBindingAnnotation(member, misplacedBindingAnnotation); return true; }. ### Assistant:", "ground_truth": "Returns true if the binding annotation is in the wrong place.", "predict": "Checks for misplaced binding annotations on a member. If found, logs a warning."}
{"ID": 324, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static boolean overrides(Method a, Method b) { // See JLS section 8.4.8.1 int modifiers = b.getModifiers(); if (Modifier.isPublic(modifiers) || Modifier.isProtected(modifiers)) { return true; } if (Modifier.isPrivate(modifiers)) { return false; } // b must be package-private return a.getDeclaringClass().getPackage().equals(b.getDeclaringClass().getPackage()); }. ### Assistant:", "ground_truth": "Returns true if a overrides b. Assumes signatures of a and b are the same and a's declaring\nclass is a subclass of b's declaring class.", "predict": "Determines whether Method A overrides Method B. @param a the method to check @param b the method to compare @return true if Method A overrides Method B, false otherwise"}
{"ID": 325, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void initializeDelegate(MembersInjector<T> delegate) { checkState(this.delegate == null, \"delegate already initialized\"); this.delegate = checkNotNull(delegate, \"delegate\"); }. ### Assistant:", "ground_truth": "Sets the actual members injector.\n\n@throws IllegalStateException if the delegate is already set", "predict": "Initializes the delegate injector. The delegate injector is used to create instances of the members of the class being constructed. This method is typically called by the constructor of the class being constructed."}
{"ID": 326, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") final TypeLiteral<Provider<T>> providerType() { // This cast is safe and wouldn't generate a warning if Type had a type // parameter. return (TypeLiteral<Provider<T>>) get(Types.providerOf(getType())); }. ### Assistant:", "ground_truth": "Gets the type of this type's provider.", "predict": "Returns the type of the provider for this type."}
{"ID": 327, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private List<TypeLiteral<?>> resolveAll(Type[] types) { TypeLiteral<?>[] result = new TypeLiteral<?>[types.length]; for (int t = 0; t < types.length; t++) { result[t] = resolve(types[t]); } return ImmutableList.copyOf(result); }. ### Assistant:", "ground_truth": "Returns an immutable list of the resolved types.", "predict": "Resolves all types in the given array. @param types the types to resolve @return the resolved types"}
{"ID": 328, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <T> TypeLiteral<T> canonicalizeForKey(TypeLiteral<T> typeLiteral) { Type type = typeLiteral.getType(); if (!isFullySpecified(type)) { Errors errors = new Errors().keyNotFullySpecified(typeLiteral); throw new ConfigurationException(errors.getMessages()); } if (typeLiteral.getRawType() == javax.inject.Provider.class) { ParameterizedType parameterizedType = (ParameterizedType) type; // the following casts are generally unsafe, but com.google.inject.Provider extends // javax.inject.Provider and is covariant @SuppressWarnings(\"unchecked\") TypeLiteral<T> guiceProviderType = (TypeLiteral<T>) TypeLiteral.get(Types.providerOf(parameterizedType.getActualTypeArguments()[0])); return guiceProviderType; } @SuppressWarnings(\"unchecked\") TypeLiteral<T> wrappedPrimitives = (TypeLiteral<T>) PRIMITIVE_TO_WRAPPER.get(typeLiteral); if (wrappedPrimitives != null) { return wrappedPrimitives; } // If we know this isn't a subclass, return as-is. if (typeLiteral.getClass() == TypeLiteral.class) { return typeLiteral; } // recreate the TypeLiteral to avoid anonymous TypeLiterals from holding refs to their // surrounding classes. @SuppressWarnings(\"unchecked\") TypeLiteral<T> recreated = (TypeLiteral<T>) TypeLiteral.get(typeLiteral.getType()); return recreated; }. ### Assistant:", "ground_truth": "Returns an type that's appropriate for use in a key.\n\n<p>If the raw type of {@code typeLiteral} is a {@code javax.inject.Provider}, this returns a\n{@code com.google.inject.Provider} with the same type parameters.\n\n<p>If the type is a primitive, the corresponding wrapper type will be returned.\n\n@throws ConfigurationException if {@code type} contains a type variable", "predict": "Canonicalizes a type literal for use in a key. This is necessary because the type literal may not be fully specified, and because the type literal may be a Provider. @param typeLiteral the type literal to canonicalize @return the canonicalized type literal @throws ConfigurationException if the type literal is not fully specified"}
{"ID": 329, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: static void prepareBuiltInConverters(InjectorImpl injector) { // Configure type converters. convertToPrimitiveType(injector, int.class, Integer.class); convertToPrimitiveType(injector, long.class, Long.class); convertToPrimitiveType(injector, boolean.class, Boolean.class); convertToPrimitiveType(injector, byte.class, Byte.class); convertToPrimitiveType(injector, short.class, Short.class); convertToPrimitiveType(injector, float.class, Float.class); convertToPrimitiveType(injector, double.class, Double.class); convertToClass( injector, Character.class, new TypeConverter() { @Override public Object convert(String value, TypeLiteral<?> toType) { value = value.trim(); if (value.length() != 1) { throw new RuntimeException(\"Length != 1.\"); } return value.charAt(0); } @Override public String toString() { return \"TypeConverter<Character>\"; } }); convertToClasses( injector, Matchers.subclassesOf(Enum.class), new TypeConverter() { @Override @SuppressWarnings(\"unchecked\") public Object convert(String value, TypeLiteral<?> toType) { return Enum.valueOf((Class) toType.getRawType(), value); } @Override public String toString() { return \"TypeConverter<E extends Enum<E>>\"; } }); internalConvertToTypes( injector, new AbstractMatcher<TypeLiteral<?>>() { @Override public boolean matches(TypeLiteral<?> typeLiteral) { return typeLiteral.getRawType() == Class.class; } @Override public String toString() { return \"Class<?>\"; } }, new TypeConverter() { @Override @SuppressWarnings(\"unchecked\") public Object convert(String value, TypeLiteral<?> toType) { try { return Class.forName(value); } catch (ClassNotFoundException e) { throw new RuntimeException(e.getMessage()); } } @Override public String toString() { return \"TypeConverter<Class<?>>\"; } }); }. ### Assistant:", "ground_truth": "Installs default converters for primitives, enums, and class literals.", "predict": "Register built-in converters."}
{"ID": 330, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static ClassLoader canonicalize(ClassLoader classLoader) { return classLoader != null ? classLoader : SystemBridgeHolder.SYSTEM_BRIDGE.getParent(); }. ### Assistant:", "ground_truth": "Attempts to canonicalize null references to the system class loader. May return null if for\nsome reason the system loader is unavailable.", "predict": "Returns the canonical classloader for the bridge classloader. If the bridge classloader is not set, returns the system classloader."}
{"ID": 331, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static boolean hasSameVersionOfCglib(ClassLoader classLoader) { Class<?> fc = net.sf.cglib.reflect.FastClass.class; try { return classLoader.loadClass(fc.getName()) == fc; } catch (ClassNotFoundException e) { return false; } }. ### Assistant:", "ground_truth": "Returns true if the types classloader has the same version of cglib that BytecodeGen has. This\nonly returns false in strange OSGI situations, but it prevents us from using FastClass for non\npublic members.", "predict": "Returns true if the classloader has the same version of cglib as the one used to load this classloader. This is used to check if the classloader is compatible with the version of cglib used to load the classloader. @param classLoader the classloader to check compatibility with. @return true if the classloader has the same version of cglib as the one used to load this classloader."}
{"ID": 332, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static boolean isPubliclyCallable(Member member) { if (!Modifier.isPublic(member.getModifiers())) { return false; } Class<?>[] parameterTypes; if (member instanceof Constructor) { parameterTypes = ((Constructor) member).getParameterTypes(); } else { Method method = (Method) member; if (!Modifier.isPublic(method.getReturnType().getModifiers())) { return false; } parameterTypes = method.getParameterTypes(); } for (Class<?> type : parameterTypes) { if (!Modifier.isPublic(type.getModifiers())) { return false; } } return true; }. ### Assistant:", "ground_truth": "Returns true if the member can be called by a fast class generated in a different classloader.", "predict": "Returns true if the member is publicly callable. @param member the member to check. @return true if the member is publicly callable."}
{"ID": 333, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Key<?> fixAnnotations(Key<?> key) { return key.getAnnotation() == null ? key : Key.get(key.getTypeLiteral(), key.getAnnotation().annotationType()); }. ### Assistant:", "ground_truth": "Replace annotation instances with annotation types, this is only appropriate for testing if a\nkey is bound and not for injecting.\n\n<p>See Guice bug 125, https://github.com/google/guice/issues/125", "predict": "Fix annotations on keys. This is necessary because Jackson doesn't like keys with no annotations. @param key the key to fix @return the fixed key"}
{"ID": 334, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: <T> Initializable<T> requestInjection( InjectorImpl injector, T instance, Binding<T> binding, Object source, Set<InjectionPoint> injectionPoints) { checkNotNull(source); Preconditions.checkState( !validationStarted, \"Member injection could not be requested after validation is started\"); ProvisionListenerStackCallback<T> provisionCallback = binding == null ? null : injector.provisionListenerStore.get(binding); // short circuit if the object has no injections or listeners. if (instance == null || (injectionPoints.isEmpty() && !injector.membersInjectorStore.hasTypeListeners() && provisionCallback == null)) { return Initializables.of(instance); } if (initializablesCache.containsKey(instance)) { @SuppressWarnings(\"unchecked\") // Map from T to InjectableReference<T> Initializable<T> cached = (Initializable<T>) initializablesCache.get(instance); return cached; } InjectableReference<T> injectableReference = new InjectableReference<T>( injector, instance, binding == null ? null : binding.getKey(), provisionCallback, source, cycleDetectingLockFactory.create(instance.getClass())); initializablesCache.put(instance, injectableReference); pendingInjections.add(injectableReference); return injectableReference; }. ### Assistant:", "ground_truth": "Registers an instance for member injection when that step is performed.\n\n@param instance an instance that optionally has members to be injected (each annotated\nwith @Inject).\n@param binding the binding that caused this initializable to be created, if it exists.\n@param source the source location that this injection was requested", "predict": "Requests an instance to be injected into the given binding. The instance is cached in the Initializables cache. If the instance is already cached, it is returned. Otherwise, it is requested from the injector and added to the pending injections list. The injection points are used to determine the dependencies of the instance. If the instance is not yet initialized, it is initialized by the injector. @param injector the injector to use @param instance the instance to be injected @param binding the binding to use for the injection @param source the source of the injection (usually a field or constructor parameter) @param injectionPoints the injection points to use for the injection @return the injected instance or a cached instance if it already exists."}
{"ID": 335, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: void validateOustandingInjections(Errors errors) { validationStarted = true; initializablesCache.clear(); for (InjectableReference<?> reference : pendingInjections) { try { reference.validate(errors); } catch (ErrorsException e) { errors.merge(e.getErrors()); } } }. ### Assistant:", "ground_truth": "Prepares member injectors for all injected instances. This prompts Guice to do static analysis\non the injected instances.", "predict": "Validate all pending injections. @param errors errors to collect errors in"}
{"ID": 336, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public T newInstance(Object[] args) throws Throwable { constructor.setAccessible(true); try { return constructor.newInstance(args); } catch (InvocationTargetException e) { throw e.getCause(); } }. ### Assistant:", "ground_truth": "Returns an instance of T, constructed using this constructor, with the supplied arguments.", "predict": "Create a new instance of the class using the constructor arguments. @param args the constructor arguments @return the new instance @throws Throwable if an exception is thrown during the construction process"}
{"ID": 337, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings({\"JavaDoc\", \"deprecation\"}) private ServletRequest withDispatcher( ServletRequest servletRequest, final ManagedServletPipeline servletPipeline) { // don't wrap the request if there are no servlets mapped. This prevents us from inserting our // wrapper unless it's actually going to be used. This is necessary for compatibility for apps // that downcast their HttpServletRequests to a concrete implementation. if (!servletPipeline.hasServletsMapped()) { return servletRequest; } HttpServletRequest request = (HttpServletRequest) servletRequest; //noinspection OverlyComplexAnonymousInnerClass return new HttpServletRequestWrapper(request) { @Override public RequestDispatcher getRequestDispatcher(String path) { final RequestDispatcher dispatcher = servletPipeline.getRequestDispatcher(path); return (null != dispatcher) ? dispatcher : super.getRequestDispatcher(path); } }; }. ### Assistant:", "ground_truth": "Used to create an proxy that dispatches either to the guice-servlet pipeline or the regular\npipeline based on uri-path match. This proxy also provides minimal forwarding support.\n\n<p>We cannot forward from a web.xml Servlet/JSP to a guice-servlet (because the filter pipeline\nis not called again). However, we can wrap requests with our own dispatcher to forward the\n*other* way. web.xml Servlets/JSPs can forward to themselves as per normal.\n\n<p>This is not a problem cuz we intend for people to migrate from web.xml to guice-servlet,\nincrementally, but not the other way around (which, we should actively discourage).", "predict": "Wraps the servletRequest with a wrapper that dispatches requests to the pipeline. This is necessary for compatibility with apps that downcast HttpServletRequests to a concrete implementation. @param servletRequest The servletRequest to wrap. @param servletPipeline The pipeline to dispatch requests to. @return A ServletRequestWrapper that dispatches requests to the pipeline."}
{"ID": 338, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: static <T> InternalFactory<? extends T> scope( Key<T> key, InjectorImpl injector, InternalFactory<? extends T> creator, Object source, Scoping scoping) { if (scoping.isNoScope()) { return creator; } Scope scope = scoping.getScopeInstance(); // NOTE: SingletonScope relies on the fact that we are passing a // ProviderToInternalFactoryAdapter here. If you change the type make sure to update // SingletonScope as well. Provider<T> scoped = scope.scope(key, new ProviderToInternalFactoryAdapter<T>(injector, creator)); return new InternalFactoryToProviderAdapter<T>(scoped, source); }. ### Assistant:", "ground_truth": "Scopes an internal factory.", "predict": "Create a scope for the factory. This is used when the factory is not already scoped. @param key The key for the factory. @param injector The injector. @param creator The factory creator. @param source The source for the factory. @param scoping The scoping strategy. @return The scope."}
{"ID": 339, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: static Scoping makeInjectable(Scoping scoping, InjectorImpl injector, Errors errors) { Class<? extends Annotation> scopeAnnotation = scoping.getScopeAnnotation(); if (scopeAnnotation == null) { return scoping; } ScopeBinding scope = injector.state.getScopeBinding(scopeAnnotation); if (scope != null) { return forInstance(scope.getScope()); } errors.scopeNotFound(scopeAnnotation); return UNSCOPED; }. ### Assistant:", "ground_truth": "Replaces annotation scopes with instance scopes using the Injector's annotation-to-instance\nmap. If the scope annotation has no corresponding instance, an error will be added and unscoped\nwill be retuned.", "predict": "Make injectable by looking up the scope binding."}
{"ID": 340, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: static String normalizePath(String path) { StringBuilder sb = new StringBuilder(path.length()); int queryStart = path.indexOf('?'); String query = null; if (queryStart != -1) { query = path.substring(queryStart); path = path.substring(0, queryStart); } // Normalize the path. we need to decode path segments, normalize and rejoin in order to // 1. decode and normalize safe percent escaped characters. e.g. %70 -> 'p' // 2. decode and interpret dangerous character sequences. e.g. /%2E/ -> '/./' -> '/' // 3. preserve dangerous encoded characters. e.g. '/%2F/' -> '///' -> '/%2F' List<String> segments = new ArrayList<>(); for (String segment : SLASH_SPLITTER.split(path)) { // This decodes all non-special characters from the path segment. so if someone passes // /%2E/foo we will normalize it to /./foo and then /foo String normalized = UrlEscapers.urlPathSegmentEscaper().escape(lenientDecode(segment, UTF_8, false)); if (\".\".equals(normalized)) { // skip } else if (\"..\".equals(normalized)) { if (segments.size() > 1) { segments.remove(segments.size() - 1); } } else { segments.add(normalized); } } SLASH_JOINER.appendTo(sb, segments); if (query != null) { sb.append(query); } return sb.toString(); }. ### Assistant:", "ground_truth": "Normalizes a path by unescaping all safe, percent encoded characters.", "predict": "Normalize the path. This is a combination of the following steps: decode the path segments, remove double slashes, preserve double slashes, remove ../ and ., remove query parameters, join the segments together."}
{"ID": 341, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <T extends Annotation> T generateAnnotation(Class<T> annotationType) { Preconditions.checkState( isAllDefaultMethods(annotationType), \"%s is not all default methods\", annotationType); return (T) cache.getUnchecked(annotationType); }. ### Assistant:", "ground_truth": "Generates an Annotation for the annotation class. Requires that the annotation is all\noptionals.", "predict": "Generates an instance of the specified annotation type. If the type is not all default methods, it will be cached. @param annotationType the annotation type to generate @return the generated annotation instance @throws IllegalArgumentException if the type is not all default methods"}
{"ID": 342, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean isRetainedAtRuntime(Class<? extends Annotation> annotationType) { Retention retention = annotationType.getAnnotation(Retention.class); return retention != null && retention.value() == RetentionPolicy.RUNTIME; }. ### Assistant:", "ground_truth": "Returns true if the given annotation is retained at runtime.", "predict": "Checks whether the annotation is retained at runtime. @param annotationType the annotation type to check @return whether the annotation is retained at runtime"}
{"ID": 343, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Class<? extends Annotation> findScopeAnnotation( Errors errors, Annotation[] annotations) { Class<? extends Annotation> found = null; for (Annotation annotation : annotations) { Class<? extends Annotation> annotationType = annotation.annotationType(); if (isScopeAnnotation(annotationType)) { if (found != null) { errors.duplicateScopeAnnotations(found, annotationType); } else { found = annotationType; } } } return found; }. ### Assistant:", "ground_truth": "Returns the scoping annotation, or null if there isn't one.", "predict": "Find the first scope annotation in the given annotations. If none found, return null. @param errors errors to report @param annotations annotations to check @return first scope annotation or null if none found"}
{"ID": 344, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Key<?> getKey( TypeLiteral<?> type, Member member, Annotation[] annotations, Errors errors) throws ErrorsException { int numErrorsBefore = errors.size(); Annotation found = findBindingAnnotation(errors, member, annotations); errors.throwIfNewErrors(numErrorsBefore); return found == null ? Key.get(type) : Key.get(type, found); }. ### Assistant:", "ground_truth": "Gets a key for the given type, member and annotations.", "predict": "Finds the key for a member annotated with a binding annotation. If no binding annotation is found, returns the key for the type. @param type the type of the member @param member the member to find the key for @param annotations the annotations on the member @param errors errors to report @return the key for the member or the type if no binding annotation is found @throws ErrorsException if there are errors in the annotations or the member"}
{"ID": 345, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String nameOf(Key<?> key) { Annotation annotation = key.getAnnotation(); Class<? extends Annotation> annotationType = key.getAnnotationType(); if (annotation != null && !isMarker(annotationType)) { return key.getAnnotation().toString(); } else if (key.getAnnotationType() != null) { return \"@\" + key.getAnnotationType().getName(); } else { return \"\"; } }. ### Assistant:", "ground_truth": "Returns the name the binding should use. This is based on the annotation. If the annotation has\nan instance and is not a marker annotation, we ask the annotation for its toString. If it was a\nmarker annotation or just an annotation type, we use the annotation's name. Otherwise, the name\nis the empty string.", "predict": "Returns the name of a key, either the name of the annotation or the name of the annotation type. If the key has no annotation, returns an empty string. @param key the key to get the name of. @return the name of the key."}
{"ID": 346, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void initializeDelegate(Provider<T> delegate) { checkState(this.delegate == null, \"delegate already initialized\"); this.delegate = checkNotNull(delegate, \"delegate\"); }. ### Assistant:", "ground_truth": "Sets the actual provider.\n\n@throws IllegalStateException if the delegate is already set", "predict": "Initializes the delegate. The delegate must be set before any delegated calls are made."}
{"ID": 347, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void addDirectTypeBinding(Binder binder) { binder .bind(bindingSelection.getDirectKey()) .toProvider(new RealDirectTypeProvider<T>(bindingSelection)); }. ### Assistant:", "ground_truth": "Adds a binding for T. Multiple calls to this are safe, and will be collapsed as duplicate\nbindings.", "predict": "Adds a direct type binding to the binder. @param binder The binder to bind to."}
{"ID": 348, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ConstructorInjector<?> get(InjectionPoint constructorInjector, Errors errors) throws ErrorsException { return cache.get(constructorInjector, errors); }. ### Assistant:", "ground_truth": "Returns a new complete constructor injector with injection listeners registered.", "predict": "Get the cached instance for the given constructor injector. @param constructorInjector the constructor injector to get the instance for @param errors errors to report if the instance cannot be found @return the cached instance for the given constructor injector @throws ErrorsException if the instance cannot be found"}
{"ID": 349, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static boolean hasScope(Class<? extends Interceptor> interceptorClass) { for (Annotation annotation : interceptorClass.getAnnotations()) { if (Annotations.isScopeAnnotation(annotation.annotationType())) { return true; } } return false; }. ### Assistant:", "ground_truth": "Returns true if the given class has a scope annotation.", "predict": "Check if the interceptor class has scope annotation. @param interceptorClass interceptor class @return true if has scope annotation, false otherwise"}
{"ID": 350, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: static <K, V> RealMapBinder<K, V> newRealMapBinder( Binder binder, TypeLiteral<K> keyType, Key<V> valueTypeAndAnnotation) { binder = binder.skipSources(RealMapBinder.class); TypeLiteral<V> valueType = valueTypeAndAnnotation.getTypeLiteral(); return newRealMapBinder( binder, keyType, valueType, valueTypeAndAnnotation.ofType(mapOf(keyType, valueType)), RealMultibinder.newRealSetBinder( binder, valueTypeAndAnnotation.ofType(entryOfProviderOf(keyType, valueType)))); }. ### Assistant:", "ground_truth": "since it's an easy way to group a type and an optional annotation type or instance.", "predict": "Create a RealMapBinder."}
{"ID": 351, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: Key<V> getKeyForNewValue(K key) { checkNotNull(key, \"key\"); checkConfiguration(!bindingSelection.isInitialized(), \"MapBinder was already initialized\"); RealMultibinder<Map.Entry<K, Provider<V>>> entrySetBinder = bindingSelection.getEntrySetBinder(); Key<V> valueKey = Key.get( bindingSelection.getValueType(), new RealElement( entrySetBinder.getSetName(), MAPBINDER, bindingSelection.getKeyType().toString())); entrySetBinder.addBinding().toProvider(new ProviderMapEntry<K, V>(key, valueKey)); return valueKey; }. ### Assistant:", "ground_truth": "Adds a binding to the map for the given key.", "predict": "Create a key for a new value. This is used to create a binding for the value. The key is created using the key type and the name of the entry set binder. The binding is added to the entry set binder."}
{"ID": 352, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private T provision(InternalContext context, ConstructionContext<T> constructionContext) throws InternalProvisionException { try { T t; try { Object[] parameters = SingleParameterInjector.getAll(context, parameterInjectors); t = constructionProxy.newInstance(parameters); constructionContext.setProxyDelegates(t); } finally { constructionContext.finishConstruction(); } // Store reference. If an injector re-enters this factory, they'll get the same reference. constructionContext.setCurrentReference(t); MembersInjectorImpl<T> localMembersInjector = membersInjector; localMembersInjector.injectMembers(t, context, false); localMembersInjector.notifyListeners(t); return t; } catch (InvocationTargetException userException) { Throwable cause = userException.getCause() != null ? userException.getCause() : userException; throw InternalProvisionException.errorInjectingConstructor(cause) .addSource(constructionProxy.getInjectionPoint()); } finally { constructionContext.removeCurrentReference(); } }. ### Assistant:", "ground_truth": "Provisions a new T.", "predict": "Provision the object."}
{"ID": 353, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private Object writeReplace() throws ObjectStreamException { Object[] sourcesAsStrings = sources.toArray(); for (int i = 0; i < sourcesAsStrings.length; i++) { sourcesAsStrings[i] = Errors.convert(sourcesAsStrings[i]).toString(); } return new Message(ImmutableList.copyOf(sourcesAsStrings), message, cause); }. ### Assistant:", "ground_truth": "When serialized, we eagerly convert sources to strings. This hurts our formatting, but it\nguarantees that the receiving end will be able to read the message.", "predict": "Write the message to a stream in a serialized form. The sources are converted to strings before being written. @return the serialized form of the message. @throws ObjectStreamException if an error occurs during serialization."}
{"ID": 354, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: static Module forModule(Module module) { // avoid infinite recursion, since installing a module always installs itself if (module instanceof CheckedProviderMethodsModule) { return Modules.EMPTY_MODULE; } return new CheckedProviderMethodsModule(module); }. ### Assistant:", "ground_truth": "Returns a module which creates bindings for provider methods from the given module.", "predict": "Returns a module that installs itself as a provider. This is useful for testing purposes."}
{"ID": 355, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override @SuppressWarnings(\"unchecked\") public Collection<AssistedMethod> getAssistedMethods() { return (Collection<AssistedMethod>) (Collection<?>) assistDataByMethod.values(); }. ### Assistant:", "ground_truth": "the collection is immutable.", "predict": "Returns all assisted methods. @return all assisted methods."}
{"ID": 356, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private boolean isTypeNotSpecified(TypeLiteral<?> typeLiteral, ConfigurationException ce) { Collection<Message> messages = ce.getErrorMessages(); if (messages.size() == 1) { Message msg = Iterables.getOnlyElement(new Errors().keyNotFullySpecified(typeLiteral).getMessages()); return msg.getMessage().equals(Iterables.getOnlyElement(messages).getMessage()); } else { return false; } }. ### Assistant:", "ground_truth": "Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully\nspecified.", "predict": "Check if the typeLiteral is not specified in the exception. @param typeLiteral the typeLiteral @param ce the exception @return true if the typeLiteral is not specified in the exception"}
{"ID": 357, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private boolean constructorHasMatchingParams( TypeLiteral<?> type, Constructor<?> constructor, List<Key<?>> paramList, Errors errors) throws ErrorsException { List<TypeLiteral<?>> params = type.getParameterTypes(constructor); Annotation[][] paramAnnotations = constructor.getParameterAnnotations(); int p = 0; List<Key<?>> constructorKeys = Lists.newArrayList(); for (TypeLiteral<?> param : params) { Key<?> paramKey = Annotations.getKey(param, constructor, paramAnnotations[p++], errors); constructorKeys.add(paramKey); } // Require that every key exist in the constructor to match up exactly. for (Key<?> key : paramList) { // If it didn't exist in the constructor set, we can't use it. if (!constructorKeys.remove(key)) { return false; } } // If any keys remain and their annotation is Assisted, we can't use it. for (Key<?> key : constructorKeys) { if (key.getAnnotationType() == Assisted.class) { return false; } } // All @Assisted params match up to the method's parameters. return true; }. ### Assistant:", "ground_truth": "Matching logic for constructors annotated with AssistedInject. This returns true if and only if\nall @Assisted parameters in the constructor exactly match (in any order) all @Assisted\nparameters the method's parameter.", "predict": "Determines whether a constructor matches up with the given list of params. @param type The type of the constructor @param constructor The constructor to check against @param paramList The list of params to check against @param errors Errors to report @return True if the constructor matches up with the given list of params. @throws ErrorsException If the constructor doesn't match up with the given list of params."}
{"ID": 358, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private Set<Dependency<?>> getDependencies( InjectionPoint ctorPoint, TypeLiteral<?> implementation) { ImmutableSet.Builder<Dependency<?>> builder = ImmutableSet.builder(); builder.addAll(ctorPoint.getDependencies()); if (!implementation.getRawType().isInterface()) { for (InjectionPoint ip : InjectionPoint.forInstanceMethodsAndFields(implementation)) { builder.addAll(ip.getDependencies()); } } return builder.build(); }. ### Assistant:", "ground_truth": "Calculates all dependencies required by the implementation and constructor.", "predict": "Get dependencies for the given constructor and implementation. @param ctorPoint The constructor point. @param implementation The implementation. @return The dependencies."}
{"ID": 359, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private Set<Dependency<?>> removeAssistedDeps(Set<Dependency<?>> deps) { ImmutableSet.Builder<Dependency<?>> builder = ImmutableSet.builder(); for (Dependency<?> dep : deps) { Class<?> annotationType = dep.getKey().getAnnotationType(); if (annotationType == null || !annotationType.equals(Assisted.class)) { builder.add(dep); } } return builder.build(); }. ### Assistant:", "ground_truth": "Return all non-assisted dependencies.", "predict": "Remove any assisted dependencies from a set of dependencies. @param deps dependencies to check for assisted dependencies @return a set of dependencies without any assisted dependencies"}
{"ID": 360, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private boolean isValidForOptimizedAssistedInject( Set<Dependency<?>> dependencies, Class<?> implementation, TypeLiteral<?> factoryType) { Set<Dependency<?>> badDeps = null; // optimization: create lazily for (Dependency<?> dep : dependencies) { if (isInjectorOrAssistedProvider(dep)) { if (badDeps == null) { badDeps = Sets.newHashSet(); } badDeps.add(dep); } } if (badDeps != null && !badDeps.isEmpty()) { logger.log( Level.WARNING, \"AssistedInject factory {0} will be slow \" + \"because {1} has assisted Provider dependencies or injects the Injector. \" + \"Stop injecting @Assisted Provider<T> (instead use @Assisted T) \" + \"or Injector to speed things up. (It will be a ~6500% speed bump!) \" + \"The exact offending deps are: {2}\", new Object[] {factoryType, implementation, badDeps}); return false; } return true; }. ### Assistant:", "ground_truth": "Returns true if all dependencies are suitable for the optimized version of AssistedInject. The\noptimized version caches the binding & uses a ThreadLocal Provider, so can only be applied if\nthe assisted bindings are immediately provided. This looks for hints that the values may be\nlazily retrieved, by looking for injections of Injector or a Provider for the assisted values.", "predict": "Determines whether the factory is valid for use with assisted injection. If there are any dependencies that are not injectors or assisted providers, then the factory is invalid for assisted injection. This is a performance optimization. @param dependencies dependencies of the factory @param implementation implementation type of the factory @param factoryType type of the factory @return true if the factory is valid for assisted injection, false otherwise"}
{"ID": 361, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Binding<?> getBindingFromNewInjector( final Method method, final Object[] args, final AssistData data) { checkState( injector != null, \"Factories.create() factories cannot be used until they're initialized by Guice.\"); final Key<?> returnType = data.returnType; // We ignore any pre-existing binding annotation. final Key<?> returnKey = Key.get(returnType.getTypeLiteral(), RETURN_ANNOTATION); Module assistedModule = new AbstractModule() { @Override @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) // raw keys are necessary for the args array and return value protected void configure() { Binder binder = binder().withSource(method); int p = 0; if (!data.optimized) { for (Key<?> paramKey : data.paramTypes) { // Wrap in a Provider to cover null, and to prevent Guice from injecting the // parameter binder.bind((Key) paramKey).toProvider(Providers.of(args[p++])); } } else { for (Key<?> paramKey : data.paramTypes) { // Bind to our ThreadLocalProviders. binder.bind((Key) paramKey).toProvider(data.providers.get(p++)); } } Constructor constructor = data.constructor; // Constructor *should* always be non-null here, // but if it isn't, we'll end up throwing a fairly good error // message for the user. if (constructor != null) { binder .bind(returnKey) .toConstructor(constructor, (TypeLiteral) data.implementationType) .in(Scopes.NO_SCOPE); // make sure we erase any scope on the implementation type } } }; Injector forCreate = injector.createChildInjector(assistedModule); Binding<?> binding = forCreate.getBinding(returnKey); // If we have providers cached in data, cache the binding for future optimizations. if (data.optimized) { data.cachedBinding = binding; } return binding; }. ### Assistant:", "ground_truth": "Creates a child injector that binds the args, and returns the binding for the method's result.", "predict": "Returns a binding for the method's return type and parameters. If the method has a constructor, it will be injected. If the method has a return type, it will be injected. If the method has parameters, they will be injected. If the method has a constructor, it will be injected. If the method has a return type, it will be injected. If the method has parameters, they will be injected. If the method has a return type, it will be injected. If the method has parameters, they will be injected. If the method has a return type, it will be injected. If the method has parameters, they will be injected. If the method has a return type, it will be injected. If the method has parameters, they will be injected. If the method has a return type, it will be injected. If the method has parameters, they will be injected. If the method has a return type, it will be injected. If the method has parameters, they"}
{"ID": 362, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public Object invoke(Object proxy, final Method method, final Object[] args) throws Throwable { // If we setup a method handle earlier for this method, call it. // This is necessary for default methods that java8 creates, so we // can call the default method implementation (and not our proxied version of it). if (methodHandleByMethod.containsKey(method)) { return methodHandleByMethod.get(method).invokeWithArguments(args); } if (method.getDeclaringClass().equals(Object.class)) { if (\"equals\".equals(method.getName())) { return proxy == args[0]; } else if (\"hashCode\".equals(method.getName())) { return System.identityHashCode(proxy); } else { return method.invoke(this, args); } } AssistData data = assistDataByMethod.get(method); checkState(data != null, \"No data for method: %s\", method); Provider<?> provider; if (data.cachedBinding != null) { // Try to get optimized form... provider = data.cachedBinding.getProvider(); } else { provider = getBindingFromNewInjector(method, args, data).getProvider(); } try { int p = 0; for (ThreadLocalProvider tlp : data.providers) { tlp.set(args[p++]); } return provider.get(); } catch (ProvisionException e) { // if this is an exception declared by the factory method, throw it as-is if (e.getErrorMessages().size() == 1) { Message onlyError = getOnlyElement(e.getErrorMessages()); Throwable cause = onlyError.getCause(); if (cause != null && canRethrow(method, cause)) { throw cause; } } throw e; } finally { for (ThreadLocalProvider tlp : data.providers) { tlp.remove(); } } }. ### Assistant:", "ground_truth": "When a factory method is invoked, we create a child injector that binds all parameters, then\nuse that to get an instance of the return type.", "predict": "Invoke the method on the proxy."}
{"ID": 363, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: <T> Errors missingImplementationWithHint(Key<T> key, Injector injector) { StringBuilder sb = new StringBuilder(); sb.append(format(\"No implementation for %s was bound.\", key)); // Keys which have similar strings as the desired key List<String> possibleMatches = new ArrayList<>(); // Check for other keys that may have the same type, // but not the same annotation TypeLiteral<T> type = key.getTypeLiteral(); List<Binding<T>> sameTypes = injector.findBindingsByType(type); if (!sameTypes.isEmpty()) { sb.append(format(\"%n Did you mean?\")); int howMany = Math.min(sameTypes.size(), MAX_MATCHING_TYPES_REPORTED); for (int i = 0; i < howMany; ++i) { // TODO: Look into a better way to prioritize suggestions. For example, possbily // use levenshtein distance of the given annotation vs actual annotation. sb.append(format(\"%n * %s\", sameTypes.get(i).getKey())); } int remaining = sameTypes.size() - MAX_MATCHING_TYPES_REPORTED; if (remaining > 0) { String plural = (remaining == 1) ? \"\" : \"s\"; sb.append(format(\"%n %d more binding%s with other annotations.\", remaining, plural)); } } else { // For now, do a simple substring search for possibilities. This can help spot // issues when there are generics being used (such as a wrapper class) and the // user has forgotten they need to bind based on the wrapper, not the underlying // class. In the future, consider doing a strict in-depth type search. // TODO: Look into a better way to prioritize suggestions. For example, possbily // use levenshtein distance of the type literal strings. String want = type.toString(); Map<Key<?>, Binding<?>> bindingMap = injector.getAllBindings(); for (Key<?> bindingKey : bindingMap.keySet()) { String have = bindingKey.getTypeLiteral().toString(); if (have.contains(want) || want.contains(have)) { Formatter fmt = new Formatter(); Messages.formatSource(fmt, bindingMap.get(bindingKey).getSource()); String match = String.format(\"%s bound%s\", convert(bindingKey), fmt.toString()); possibleMatches.add(match); // TODO: Consider a check that if there are more than some number of results, // don't suggest any. if (possibleMatches.size() > MAX_RELATED_TYPES_REPORTED) { // Early exit if we have found more than we need. break; } } } if ((possibleMatches.size() > 0) && (possibleMatches.size() <= MAX_RELATED_TYPES_REPORTED)) { sb.append(format(\"%n Did you mean?\")); for (String possibleMatch : possibleMatches) { sb.append(format(\"%n %s\", possibleMatch)); } } } // If where are no possibilities to suggest, then handle the case of missing // annotations on simple types. This is usually a bad idea. if (sameTypes.isEmpty() && possibleMatches.isEmpty() && key.getAnnotation() == null && COMMON_AMBIGUOUS_TYPES.contains(key.getTypeLiteral().getRawType())) { // We don't recommend using such simple types without annotations. sb.append(format(\"%nThe key seems very generic, did you forget an annotation?\")); } return addMessage(sb.toString()); }. ### Assistant:", "ground_truth": "Within guice's core, allow for better missing binding messages", "predict": "Suggests alternative bindings when a binding is missing. This is done by checking for other bindings with similar types. If there are no other bindings, it suggests using annotations to avoid ambiguity."}
{"ID": 364, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <T> RealMultibinder<T> newRealSetBinder(Binder binder, Key<T> key) { binder = binder.skipSources(RealMultibinder.class); RealMultibinder<T> result = new RealMultibinder<>(binder, key); binder.install(result); return result; }. ### Assistant:", "ground_truth": "Implementation of newSetBinder.", "predict": "Create a RealMultibinder. @param binder The binder to use. @param key The key to use. @param <T> The type of the elements. @return The RealMultibinder."}
{"ID": 365, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: Key<T> getKeyForNewItem() { checkConfiguration(!bindingSelection.isInitialized(), \"Multibinder was already initialized\"); return Key.get( bindingSelection.getElementTypeLiteral(), new RealElement(bindingSelection.getSetName(), MULTIBINDER, \"\")); }. ### Assistant:", "ground_truth": "Adds a new entry to the set and returns the key for it.", "predict": "Returns a key for a new item. This is used to create a new binding when the multibinder is being initialized."}
{"ID": 366, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private Filter findNextFilter(HttpServletRequest request) { while (++index < filterDefinitions.length) { Filter filter = filterDefinitions[index].getFilterIfMatching(request); if (filter != null) { return filter; } } return null; }. ### Assistant:", "ground_truth": "Iterates over the remaining filter definitions. Returns the first applicable filter, or null if\nnone apply.", "predict": "Find the next filter that matches the request. If none match, return null."}
{"ID": 367, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static boolean hasAtInject(Constructor cxtor) { return cxtor.isAnnotationPresent(Inject.class) || cxtor.isAnnotationPresent(javax.inject.Inject.class); }. ### Assistant:", "ground_truth": "Returns true if the inject annotation is on the constructor.", "predict": "Determines if a constructor is annotated with @Inject or javax.inject.Inject. @param cxtor the constructor to check @return true if annotated with @Inject or javax.inject.Inject"}
{"ID": 368, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: InjectionPoint getInternalConstructor() { if (factory.constructorInjector != null) { return factory.constructorInjector.getConstructionProxy().getInjectionPoint(); } else { return constructorInjectionPoint; } }. ### Assistant:", "ground_truth": "Returns an injection point that can be used to clean up the constructor store.", "predict": "Returns the internal constructor injection point. This is used to determine whether the constructor injection point is a synthetic one."}
{"ID": 369, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: Set<Dependency<?>> getInternalDependencies() { ImmutableSet.Builder<InjectionPoint> builder = ImmutableSet.builder(); if (factory.constructorInjector == null) { builder.add(constructorInjectionPoint); // If the below throws, it's OK -- we just ignore those dependencies, because no one // could have used them anyway. try { builder.addAll( InjectionPoint.forInstanceMethodsAndFields( constructorInjectionPoint.getDeclaringType())); } catch (ConfigurationException ignored) { } } else { builder.add(getConstructor()).addAll(getInjectableMembers()); } return Dependency.forInjectionPoints(builder.build()); }. ### Assistant:", "ground_truth": "Returns a set of dependencies that can be iterated over to clean up stray JIT bindings.", "predict": "Returns the dependencies that are required to create instances of this factory. This includes dependencies on any methods or fields that are injected into the factory constructor, as well as dependencies on any methods or fields that are injected into the factory itself. Note that this includes dependencies on any methods or fields that are injected into the factory constructor, but not dependencies on any methods or fields that are injected into the factory itself. This is because the factory constructor is responsible for creating instances of the factory, and therefore needs to be able to access any dependencies that are required to create those instances. However, the factory itself does not need to be able to access any dependencies that are required to create instances of itself."}
{"ID": 370, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Module forModule(Object module, ModuleAnnotatedMethodScanner scanner) { return forObject(module, false, scanner); }. ### Assistant:", "ground_truth": "Returns a module which creates bindings methods in the module that match the scanner.", "predict": "Create a module for a given module. The module will be created using the scanner. @param module the module to create a module for. @param scanner the scanner to use. @return the module."}
{"ID": 371, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private Annotation getAnnotation(Binder binder, Method method) { if (method.isBridge() || method.isSynthetic()) { return null; } Annotation annotation = null; for (Class<? extends Annotation> annotationClass : scanner.annotationClasses()) { Annotation foundAnnotation = method.getAnnotation(annotationClass); if (foundAnnotation != null) { if (annotation != null) { binder.addError( \"More than one annotation claimed by %s on method %s.\" + \" Methods can only have one annotation claimed per scanner.\", scanner, method); return null; } annotation = foundAnnotation; } } return annotation; }. ### Assistant:", "ground_truth": "Returns the annotation that is claimed by the scanner, or null if there is none.", "predict": "Find the annotation on the method. If there are multiple annotations, throw an error."}
{"ID": 372, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Integer getLineNumber(Member member) { Preconditions.checkArgument( type == member.getDeclaringClass(), \"Member %s belongs to %s, not %s\", member, member.getDeclaringClass(), type); return lines.get(memberKey(member)); }. ### Assistant:", "ground_truth": "Get the line number associated with the given member.\n\n@param member a field, constructor, or method belonging to the class used during construction\n@return the wrapped line number, or null if not available\n@throws IllegalArgumentException if the member does not belong to the class used during\nconstruction", "predict": "Returns the line number for the given member. @param member The member whose line number should be returned. @return The line number for the given member."}
{"ID": 373, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: void initialize(Errors errors) { injector.lookups = injector; new LookupProcessor(errors).process(injector, lookups); }. ### Assistant:", "ground_truth": "Initialize the specified lookups, either immediately or when the injector is created.", "predict": "Initializes the lookup service. This method is called by the constructor. The errors are used to report errors during initialization. @param errors Errors to report during initialization."}
{"ID": 374, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Deprecated public static <T> Callable<T> continueRequest(Callable<T> callable, Map<Key<?>, Object> seedMap) { return wrap(callable, continueRequest(seedMap)); }. ### Assistant:", "ground_truth": "Wraps the given callable in a contextual callable that \"continues\" the HTTP request in another\nthread. This acts as a way of transporting request context data from the request processing\nthread to to worker threads.\n\n<p>There are some limitations:\n\n<ul>\n<li>Derived objects (i.e. anything marked @RequestScoped will not be transported.\n<li>State changes to the HttpServletRequest after this method is called will not be seen in the\ncontinued thread.\n<li>Only the HttpServletRequest, ServletContext and request parameter map are available in the\ncontinued thread. The response and session are not available.\n</ul>\n\n<p>The returned callable will throw a {@link ScopingException} when called if the HTTP request\nscope is still active on the current thread.\n\n@param callable code to be executed in another thread, which depends on the request scope.\n@param seedMap the initial set of scoped instances for Guice to seed the request scope with. To\nseed a key with null, use {@code null} as the value.\n@return a callable that will invoke the given callable, making the request context available to\nit.\n@throws OutOfScopeException if this method is called from a non-request thread, or if the\nrequest has completed.\n@since 3.0\n@deprecated You probably want to use {@code transferRequest} instead", "predict": "Wraps a callable with a continueRequest, allowing for the continuation of a computation. The computation will be resumed from the point where it was interrupted. @param callable The callable to wrap. @param seedMap The seed map to use for continuation. @deprecated Use continueRequest(Callable<? extends T>, Map<? extends Key<?>, ? extends Object>) instead."}
{"ID": 375, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <T> Callable<T> transferRequest(Callable<T> callable) { return wrap(callable, transferRequest()); }. ### Assistant:", "ground_truth": "Wraps the given callable in a contextual callable that \"transfers\" the request to another\nthread. This acts as a way of transporting request context data from the current thread to a\nfuture thread.\n\n<p>As opposed to {@link #continueRequest}, this method propagates all existing scoped objects.\nThe primary use case is in server implementations where you can detach the request processing\nthread while waiting for data, and reattach to a different thread to finish processing at a\nlater time.\n\n<p>Because request-scoped objects are not typically thread-safe, the callable returned by this\nmethod must not be run on a different thread until the current request scope has terminated.\nThe returned callable will block until the current thread has released the request scope.\n\n@param callable code to be executed in another thread, which depends on the request scope.\n@return a callable that will invoke the given callable, making the request context available to\nit.\n@throws OutOfScopeException if this method is called from a non-request thread, or if the\nrequest has completed.\n@since 4.0", "predict": "Wraps a callable with transfer request."}
{"ID": 376, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static Object validateAndCanonicalizeValue(Key<?> key, Object object) { if (object == null || object == NullObject.INSTANCE) { return NullObject.INSTANCE; } if (!key.getTypeLiteral().getRawType().isInstance(object)) { throw new IllegalArgumentException( \"Value[\" + object + \"] of type[\" + object.getClass().getName() + \"] is not compatible with key[\" + key + \"]\"); } return object; }. ### Assistant:", "ground_truth": "Validates the key and object, ensuring the value matches the key type, and canonicalizing null\nobjects to the null sentinel.", "predict": "Validates the object passed to the key and canonicalizes it if necessary."}
{"ID": 377, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") // the MembersInjector type always agrees with the passed type public <T> MembersInjectorImpl<T> get(TypeLiteral<T> key, Errors errors) throws ErrorsException { return (MembersInjectorImpl<T>) cache.get(key, errors); }. ### Assistant:", "ground_truth": "Returns a new complete members injector with injection listeners registered.", "predict": "Get a MembersInjectorImpl from the cache. If not found, it will be created and added to the cache."}
{"ID": 378, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private <T> MembersInjectorImpl<T> createWithListeners(TypeLiteral<T> type, Errors errors) throws ErrorsException { int numErrorsBefore = errors.size(); Set<InjectionPoint> injectionPoints; try { injectionPoints = InjectionPoint.forInstanceMethodsAndFields(type); } catch (ConfigurationException e) { errors.merge(e.getErrorMessages()); injectionPoints = e.getPartialValue(); } ImmutableList<SingleMemberInjector> injectors = getInjectors(injectionPoints, errors); errors.throwIfNewErrors(numErrorsBefore); EncounterImpl<T> encounter = new EncounterImpl<>(errors, injector.lookups); Set<TypeListener> alreadySeenListeners = Sets.newHashSet(); for (TypeListenerBinding binding : typeListenerBindings) { TypeListener typeListener = binding.getListener(); if (!alreadySeenListeners.contains(typeListener) && binding.getTypeMatcher().matches(type)) { alreadySeenListeners.add(typeListener); try { typeListener.hear(type, encounter); } catch (RuntimeException e) { errors.errorNotifyingTypeListener(binding, type, e); } } } encounter.invalidate(); errors.throwIfNewErrors(numErrorsBefore); return new MembersInjectorImpl<T>(injector, type, encounter, injectors); }. ### Assistant:", "ground_truth": "Creates a new members injector and attaches both injection listeners and method aspects.", "predict": "Creates a new MembersInjectorImpl with listeners."}
{"ID": 379, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: ImmutableList<SingleMemberInjector> getInjectors( Set<InjectionPoint> injectionPoints, Errors errors) { List<SingleMemberInjector> injectors = Lists.newArrayList(); for (InjectionPoint injectionPoint : injectionPoints) { try { Errors errorsForMember = injectionPoint.isOptional() ? new Errors(injectionPoint) : errors.withSource(injectionPoint); SingleMemberInjector injector = injectionPoint.getMember() instanceof Field ? new SingleFieldInjector(this.injector, injectionPoint, errorsForMember) : new SingleMethodInjector(this.injector, injectionPoint, errorsForMember); injectors.add(injector); } catch (ErrorsException ignoredForNow) { // ignored for now } } return ImmutableList.copyOf(injectors); }. ### Assistant:", "ground_truth": "Returns the injectors for the specified injection points.", "predict": "Returns a list of injectors for the given injection points. The injectors are created using the injector itself. The errors are propagated to the injectors."}
{"ID": 380, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: static <T> Key<T> get(Class<T> type, AnnotationStrategy annotationStrategy) { return new Key<T>(type, annotationStrategy); }. ### Assistant:", "ground_truth": "Gets a key for an injection type and an annotation strategy.", "predict": "Create a new key with the given type and annotation strategy."}
{"ID": 381, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: static AnnotationStrategy strategyFor(Annotation annotation) { checkNotNull(annotation, \"annotation\"); Class<? extends Annotation> annotationType = annotation.annotationType(); ensureRetainedAtRuntime(annotationType); ensureIsBindingAnnotation(annotationType); if (Annotations.isMarker(annotationType)) { return new AnnotationTypeStrategy(annotationType, annotation); } return new AnnotationInstanceStrategy(Annotations.canonicalizeIfNamed(annotation)); }. ### Assistant:", "ground_truth": "Gets the strategy for an annotation.", "predict": "Returns the appropriate strategy for the given annotation. If the annotation is a marker, it is returned directly. Otherwise, it is converted to an instance strategy."}
{"ID": 382, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: static AnnotationStrategy strategyFor(Class<? extends Annotation> annotationType) { annotationType = Annotations.canonicalizeIfNamed(annotationType); if (isAllDefaultMethods(annotationType)) { return strategyFor(generateAnnotation(annotationType)); } checkNotNull(annotationType, \"annotation type\"); ensureRetainedAtRuntime(annotationType); ensureIsBindingAnnotation(annotationType); return new AnnotationTypeStrategy(annotationType, null); }. ### Assistant:", "ground_truth": "Gets the strategy for an annotation type.", "predict": "Determines the appropriate strategy for the given annotation type. @param annotationType the annotation type to determine the strategy for @return the strategy for the given annotation type"}
{"ID": 383, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void pruneStacktrace(Throwable throwable) { for (Throwable t = throwable; t != null; t = t.getCause()) { StackTraceElement[] stackTrace = t.getStackTrace(); List<StackTraceElement> pruned = Lists.newArrayList(); for (StackTraceElement element : stackTrace) { String className = element.getClassName(); if (!AOP_INTERNAL_CLASSES.contains(className) && !className.contains(\"$EnhancerByGuice$\")) { pruned.add(element); } } t.setStackTrace(pruned.toArray(new StackTraceElement[pruned.size()])); } }. ### Assistant:", "ground_truth": "Removes stacktrace elements related to AOP internal mechanics from the throwable's stack trace\nand any causes it may have.", "predict": "Prune the stacktrace of the given throwable to remove traces of the AOP framework."}
{"ID": 384, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String getBindingSource() { if (source instanceof Class) { return StackTraceElements.forType((Class) source).toString(); } else if (source instanceof Member) { return StackTraceElements.forMember((Member) source).toString(); } else { return source.toString(); } }. ### Assistant:", "ground_truth": "Returns a string describing where this dependency was bound. If the binding was just-in-time,\nthere is no valid binding source, so this describes the class in question.", "predict": "Returns the binding source. @return the binding source"}
{"ID": 385, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String formatMessages(String heading, Collection<Message> errorMessages) { Formatter fmt = new Formatter().format(heading).format(\":%n%n\"); int index = 1; boolean displayCauses = getOnlyCause(errorMessages) == null; Map<Equivalence.Wrapper<Throwable>, Integer> causes = Maps.newHashMap(); for (Message errorMessage : errorMessages) { int thisIdx = index++; fmt.format(\"%s) %s%n\", thisIdx, errorMessage.getMessage()); List<Object> dependencies = errorMessage.getSources(); for (int i = dependencies.size() - 1; i >= 0; i--) { Object source = dependencies.get(i); formatSource(fmt, source); } Throwable cause = errorMessage.getCause(); if (displayCauses && cause != null) { Equivalence.Wrapper<Throwable> causeEquivalence = ThrowableEquivalence.INSTANCE.wrap(cause); if (!causes.containsKey(causeEquivalence)) { causes.put(causeEquivalence, thisIdx); fmt.format(\"Caused by: %s\", Throwables.getStackTraceAsString(cause)); } else { int causeIdx = causes.get(causeEquivalence); fmt.format( \"Caused by: %s (same stack trace as error #%s)\", cause.getClass().getName(), causeIdx); } } fmt.format(\"%n\"); } if (errorMessages.size() == 1) { fmt.format(\"1 error\"); } else { fmt.format(\"%s errors\", errorMessages.size()); } return fmt.toString(); }. ### Assistant:", "ground_truth": "Returns the formatted message for an exception with the specified messages.", "predict": "Formats the given errorMessages as a single message. The message will contain the heading and each errorMessage as a separate paragraph. The heading will be bolded. If there is only one errorMessage, it will be displayed as a single paragraph. Otherwise, it will be displayed as multiple paragraphs. The stack traces of each errorMessage will be indented and displayed as separate paragraphs. If there is a cause for any errorMessage, it will be displayed as a separate paragraph. The heading will be bolded. @param heading the heading for the message @param errorMessages the errorMessages to format @return the formatted message"}
{"ID": 386, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Message create(String messageFormat, Object... arguments) { return create(null, messageFormat, arguments); }. ### Assistant:", "ground_truth": "Creates a new Message without a cause.\n\n@param messageFormat Format string\n@param arguments format string arguments", "predict": "Creates a Message with the given message format and arguments. @param messageFormat the message format @param arguments the arguments @return the Message"}
{"ID": 387, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Message create(Throwable cause, String messageFormat, Object... arguments) { return create(cause, ImmutableList.of(), messageFormat, arguments); }. ### Assistant:", "ground_truth": "Creates a new Message with the given cause.\n\n@param cause The exception that caused the error\n@param messageFormat Format string\n@param arguments format string arguments", "predict": "Creates a new message with the given cause and message format. The arguments are not included in the message. @param cause the cause of the message @param messageFormat the message format @param arguments the arguments to include in the message @return the new message"}
{"ID": 388, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Message create( Throwable cause, List<Object> sources, String messageFormat, Object... arguments) { String message = format(messageFormat, arguments); return new Message(sources, message, cause); }. ### Assistant:", "ground_truth": "Creates a new Message with the given cause and a binding source stack.\n\n@param cause The exception that caused the error\n@param sources The binding sources for the source stack\n@param messageFormat Format string\n@param arguments format string arguments", "predict": "Create a new message with the given arguments. The message format is interpolated using the arguments. @param cause the cause of the message @param sources the sources of the message @param messageFormat the message format @param arguments the arguments to use in the message format @return the new message"}
{"ID": 389, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: static Object convert(Object o) { ElementSource source = null; if (o instanceof ElementSource) { source = (ElementSource) o; o = source.getDeclaringSource(); } return convert(o, source); }. ### Assistant:", "ground_truth": "Formats an object in a user friendly way.", "predict": "Convert the object to a valid ElementSource. If the object is already an ElementSource, then the source is returned. Otherwise, the source is searched recursively until an ElementSource is found. @param o The object to convert. @return The converted object."}
{"ID": 390, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private boolean shouldBeSkipped(String className) { return (parent != null && parent.shouldBeSkipped(className)) || classNamesToSkip.contains(className); }. ### Assistant:", "ground_truth": "Returns true if the className should be skipped.", "predict": "Determines whether the given class should be skipped. @param className the class to check. @return true if the class should be skipped, false otherwise."}
{"ID": 391, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Object getFromClassNames(List<String> moduleClassNames) { Preconditions.checkNotNull(moduleClassNames, \"The list of module class names cannot be null.\"); for (final String moduleClassName : moduleClassNames) { if (!shouldBeSkipped(moduleClassName)) { return new StackTraceElement(moduleClassName, \"configure\", null, -1); } } return UNKNOWN_SOURCE; }. ### Assistant:", "ground_truth": "Returns the non-skipped module class name.", "predict": "Get the source of the configuration from the given module class names. @param moduleClassNames The list of module class names. @return The source of the configuration."}
{"ID": 392, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void main(String[] args) throws Exception { if (args.length != 1) { System.err.println( \"Usage: java -Dcom.sun.management.jmxremote \" + Manager.class.getName() + \" [module class name]\"); System.err.println(\"Then run 'jconsole' to connect.\"); System.exit(1); } Module module = (Module) Class.forName(args[0]).newInstance(); Injector injector = Guice.createInjector(module); manage(args[0], injector); System.out.println(\"Press Ctrl+C to exit...\"); // Sleep forever. Thread.sleep(Long.MAX_VALUE); }. ### Assistant:", "ground_truth": "Run with no arguments for usage instructions.", "predict": "Run the manager."}
{"ID": 393, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: Dependency<?> pushDependency(Dependency<?> dependency, Object source) { Dependency<?> previous = this.dependency; this.dependency = dependency; doPushState(dependency, source); return previous; }. ### Assistant:", "ground_truth": "Sets the new current dependency & adds it to the state.", "predict": "Pushes a dependency onto the stack. The source is used to determine whether the dependency should be pushed onto the stack."}
{"ID": 394, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: void pushState(com.google.inject.Key<?> key, Object source) { doPushState(key, source); }. ### Assistant:", "ground_truth": "Adds to the state without setting the dependency.", "predict": "Pushes a state value onto the stack. The value is associated with the given key. @param key the key associated with the value @param source the source of the value"}
{"ID": 395, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: static <T> Initializable<T> of(final T instance) { return new Initializable<T>() { @Override public T get() { return instance; } @Override public String toString() { return String.valueOf(instance); } }; }. ### Assistant:", "ground_truth": "Returns an initializable for an instance that requires no initialization.", "predict": "Create an Initializable instance for a given instance. @param instance the instance to be used. @return an Initializable instance."}
{"ID": 396, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected T provision( Provider<? extends T> provider, Dependency<?> dependency, ConstructionContext<T> constructionContext) throws InternalProvisionException { T t = provider.get(); if (t == null && !dependency.isNullable()) { InternalProvisionException.onNullInjectedIntoNonNullableDependency(source, dependency); } constructionContext.setProxyDelegates(t); return t; }. ### Assistant:", "ground_truth": "Provisions a new instance. Subclasses should override this to catch exceptions & rethrow as\nErrorsExceptions.", "predict": "Provision the dependency using the provider. @param provider the provider to use @param dependency the dependency to provision @param constructionContext the context to use @return the provisioned object @throws InternalProvisionException if the object cannot be provisioned"}
{"ID": 397, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void onEvent(ConnectionEventType type, String remoteAddr, Connection conn) { List<ConnectionEventProcessor> processorList = this.processors.get(type); if (processorList != null) { for (ConnectionEventProcessor processor : processorList) { processor.onEvent(remoteAddr, conn); } } }. ### Assistant:", "ground_truth": "Dispatch events.\n\n@param type\n@param remoteAddr\n@param conn", "predict": "Handle incoming events from the remote peer. @param type the type of event @param remoteAddr the remote address of the peer that sent the event @param conn the connection that sent the event"}
{"ID": 398, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void addConnectionEventProcessor(ConnectionEventType type, ConnectionEventProcessor processor) { List<ConnectionEventProcessor> processorList = this.processors.get(type); if (processorList == null) { this.processors.putIfAbsent(type, new ArrayList<ConnectionEventProcessor>(1)); processorList = this.processors.get(type); } processorList.add(processor); }. ### Assistant:", "ground_truth": "Add event processor.\n\n@param type\n@param processor", "predict": "Adds a processor to the list of processors for a specific type of connection event. @param type The type of connection event. @param processor The processor to add."}
{"ID": 399, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <T> T getFutureTaskResult(RunStateRecordedFutureTask<T> task, Logger logger) { T t = null; if (null != task) { try { t = task.getAfterRun(); } catch (InterruptedException e) { logger.error(\"Future task interrupted!\", e); } catch (ExecutionException e) { logger.error(\"Future task execute failed!\", e); } catch (FutureTaskNotRunYetException e) { logger.error(\"Future task has not run yet!\", e); } catch (FutureTaskNotCompleted e) { logger.error(\"Future task has not completed!\", e); } } return t; }. ### Assistant:", "ground_truth": "get the result of a future task\n\nNotice: the run method of this task should have been called at first.\n\n@param task\n@param <T>\n@return", "predict": "Get the result of the future task. @param task the task to get the result. @param logger the logger to log the error. @return the result of the task."}
{"ID": 400, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void launderThrowable(Throwable t) { if (t instanceof RuntimeException) { throw (RuntimeException) t; } else if (t instanceof Error) { throw (Error) t; } else { throw new IllegalStateException(\"Not unchecked!\", t); } }. ### Assistant:", "ground_truth": "launder the throwable\n\n@param t", "predict": "Throws an exception that wraps the given throwable, but doesn't throw the original exception. This is useful for propagating exceptions that are not meant to be thrown as exceptions."}
{"ID": 401, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void registerProcessor(CommandCode cmdCode, RemotingProcessor<?> processor) { if (this.cmd2processors.containsKey(cmdCode)) { logger .warn( \"Processor for cmd={} is already registered, the processor is {}, and changed to {}\", cmdCode, cmd2processors.get(cmdCode).getClass().getName(), processor.getClass() .getName()); } this.cmd2processors.put(cmdCode, processor); }. ### Assistant:", "ground_truth": "Register processor to process command that has the command code of cmdCode.\n\n@param cmdCode\n@param processor", "predict": "Register a processor for a command code. @param cmdCode command code @param processor processor to register"}
{"ID": 402, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void registerDefaultProcessor(RemotingProcessor<?> processor) { if (this.defaultProcessor == null) { this.defaultProcessor = processor; } else { throw new IllegalStateException(\"The defaultProcessor has already been registered: \" + this.defaultProcessor.getClass()); } }. ### Assistant:", "ground_truth": "Register the default processor to process command with no specific processor registered.\n\n@param processor", "predict": "Registers a default processor. @param processor the processor to register."}
{"ID": 403, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public RemotingProcessor<?> getProcessor(CommandCode cmdCode) { RemotingProcessor<?> processor = this.cmd2processors.get(cmdCode); if (processor != null) { return processor; } return this.defaultProcessor; }. ### Assistant:", "ground_truth": "Get the specific processor with command code of cmdCode if registered, otherwise the default processor is returned.\n\n@param cmdCode\n@return", "predict": "Get the processor for the command code. @param cmdCode the command code. @return the processor."}
{"ID": 404, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private Url tryGet(String url) { SoftReference<Url> softRef = Url.parsedUrls.get(url); return (null == softRef) ? null : softRef.get(); }. ### Assistant:", "ground_truth": "try get from cache\n\n@param url\n@return", "predict": "Try to get the Url from the cache. If not found, return null."}
{"ID": 405, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected ProtocolCode decodeProtocolCode(ByteBuf in) { if (in.readableBytes() >= protocolCodeLength) { byte[] protocolCodeBytes = new byte[protocolCodeLength]; in.readBytes(protocolCodeBytes); return ProtocolCode.fromBytes(protocolCodeBytes); } return null; }. ### Assistant:", "ground_truth": "decode the protocol code\n\n@param in input byte buf\n@return an instance of ProtocolCode", "predict": "Decode the protocol code from the given buffer. @param in the buffer to read from @return the decoded protocol code or null if the buffer is too small"}
{"ID": 406, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public Map<String, List<Connection>> getAll() { Map<String, List<Connection>> allConnections = new HashMap<String, List<Connection>>(); Iterator<Map.Entry<String, RunStateRecordedFutureTask<ConnectionPool>>> iterator = this .getConnPools().entrySet().iterator(); while (iterator.hasNext()) { Map.Entry<String, RunStateRecordedFutureTask<ConnectionPool>> entry = iterator.next(); ConnectionPool pool = FutureTaskUtil.getFutureTaskResult(entry.getValue(), logger); if (null != pool) { allConnections.put(entry.getKey(), pool.getAll()); } } return allConnections; }. ### Assistant:", "ground_truth": "Get all connections of all poolKey.\n\n@return a map with poolKey as key and a list of connections in ConnectionPool as value", "predict": "Get all connections from all conn pools. @return Map of conn pool names to their respective connections."}
{"ID": 407, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void scan() { if (null != this.connTasks && !this.connTasks.isEmpty()) { Iterator<String> iter = this.connTasks.keySet().iterator(); while (iter.hasNext()) { String poolKey = iter.next(); ConnectionPool pool = this.getConnectionPool(this.connTasks.get(poolKey)); if (null != pool) { pool.scan(); if (pool.isEmpty()) { if ((System.currentTimeMillis() - pool.getLastAccessTimestamp()) > DEFAULT_EXPIRE_TIME) { iter.remove(); logger.warn(\"Remove expired pool task of poolKey {} which is empty.\", poolKey); } } } } } }. ### Assistant:", "ground_truth": "in case of cache pollution and connection leak, to do schedule scan\n\n@see com.alipay.remoting.Scannable#scan()", "predict": "Scan all connTasks."}
{"ID": 408, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public Connection getAndCreateIfAbsent(Url url) throws InterruptedException, RemotingException { // get and create a connection pool with initialized connections. ConnectionPool pool = this.getConnectionPoolAndCreateIfAbsent(url.getUniqueKey(), new ConnectionPoolCall(url)); if (null != pool) { return pool.get(); } else { logger.error(\"[NOTIFYME] bug detected! pool here must not be null!\"); return null; } }. ### Assistant:", "ground_truth": "If no task cached, create one and initialize the connections.\n\n@see ConnectionManager#getAndCreateIfAbsent(Url)", "predict": "Get and create a connection pool with initialized connections. @param url the url of the connection pool. @return the connection pool. @throws InterruptedException interrupted exception. @throws RemotingException remoting exception."}
{"ID": 409, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void createConnectionAndHealIfNeed(Url url) throws InterruptedException, RemotingException { // get and create a connection pool with initialized connections. ConnectionPool pool = this.getConnectionPoolAndCreateIfAbsent(url.getUniqueKey(), new ConnectionPoolCall(url)); if (null != pool) { healIfNeed(pool, url); } else { logger.error(\"[NOTIFYME] bug detected! pool here must not be null!\"); } }. ### Assistant:", "ground_truth": "If no task cached, create one and initialize the connections.\nIf task cached, check whether the number of connections adequate, if not then heal it.\n\n@param url\n@return\n@throws InterruptedException\n@throws RemotingException", "predict": "Create connection and heal if need. @param url the url of the remote server. @throws InterruptedException @throws RemotingException"}
{"ID": 410, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void removeTask(String poolKey) { RunStateRecordedFutureTask<ConnectionPool> task = this.connTasks.remove(poolKey); if (null != task) { ConnectionPool pool = FutureTaskUtil.getFutureTaskResult(task, logger); if (null != pool) { pool.removeAllAndTryClose(); } } }. ### Assistant:", "ground_truth": "remove task and remove all connections\n\n@param poolKey", "predict": "Remove task from the pool. Close the pool if it has no task."}
{"ID": 411, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void healIfNeed(ConnectionPool pool, Url url) throws RemotingException, InterruptedException { String poolKey = url.getUniqueKey(); // only when async creating connections done // and the actual size of connections less than expected, the healing task can be run. if (pool.isAsyncCreationDone() && pool.size() < url.getConnNum()) { FutureTask<Integer> task = this.healTasks.get(poolKey); if (null == task) { task = new FutureTask<Integer>(new HealConnectionCall(url, pool)); task = this.healTasks.putIfAbsent(poolKey, task); if (null == task) { task = this.healTasks.get(poolKey); task.run(); } } try { int numAfterHeal = task.get(); if (logger.isDebugEnabled()) { logger.debug(\"[NOTIFYME] - conn num after heal {}, expected {}, warmup {}\", numAfterHeal, url.getConnNum(), url.isConnWarmup()); } } catch (InterruptedException e) { this.healTasks.remove(poolKey); throw e; } catch (ExecutionException e) { this.healTasks.remove(poolKey); Throwable cause = e.getCause(); if (cause instanceof RemotingException) { throw (RemotingException) cause; } else { FutureTaskUtil.launderThrowable(cause); } } // heal task is one-off, remove from cache directly after run this.healTasks.remove(poolKey); } }. ### Assistant:", "ground_truth": "execute heal connection tasks if the actual number of connections in pool is less than expected\n\n@param pool\n@param url", "predict": "Heal connections if needed. @param pool the connection pool @param url the url of the pool @throws RemotingException @throws InterruptedException"}
{"ID": 412, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void doCreate(final Url url, final ConnectionPool pool, final String taskName, final int syncCreateNumWhenNotWarmup) throws RemotingException { final int actualNum = pool.size(); final int expectNum = url.getConnNum(); if (actualNum < expectNum) { if (logger.isDebugEnabled()) { logger.debug(\"actual num {}, expect num {}, task name {}\", actualNum, expectNum, taskName); } if (url.isConnWarmup()) { for (int i = actualNum; i < expectNum; ++i) { Connection connection = create(url); pool.add(connection); } } else { if (syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url.getConnNum()) { throw new IllegalArgumentException( \"sync create number when not warmup should be [0,\" + url.getConnNum() + \"]\"); } // create connection in sync way if (syncCreateNumWhenNotWarmup > 0) { for (int i = 0; i < syncCreateNumWhenNotWarmup; ++i) { Connection connection = create(url); pool.add(connection); } if (syncCreateNumWhenNotWarmup == url.getConnNum()) { return; } } // initialize executor in lazy way initializeExecutor(); pool.markAsyncCreationStart();// mark the start of async try { this.asyncCreateConnectionExecutor.execute(new Runnable() { @Override public void run() { try { for (int i = pool.size(); i < url.getConnNum(); ++i) { Connection conn = null; try { conn = create(url); } catch (RemotingException e) { logger .error( \"Exception occurred in async create connection thread for {}, taskName {}\", url.getUniqueKey(), taskName, e); } pool.add(conn); } } finally { pool.markAsyncCreationDone();// mark the end of async } } }); } catch (RejectedExecutionException e) { pool.markAsyncCreationDone();// mark the end of async when reject throw e; } } // end of NOT warm up } // end of if }. ### Assistant:", "ground_truth": "do create connections\n\n@param url\n@param pool\n@param taskName\n@param syncCreateNumWhenNotWarmup you can specify this param to ensure at least desired number of connections available in sync way\n@throws RemotingException", "predict": "create connection in async way @param url the url of the connection pool @param pool the connection pool @param taskName the task name @param syncCreateNumWhenNotWarmup the sync create num when not warmup @throws RemotingException the remoting exception"}
{"ID": 413, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void closeConnection(String addr) { Url url = this.addressParser.parse(addr); this.connectionManager.remove(url.getUniqueKey()); }. ### Assistant:", "ground_truth": "Close all connections of a address\n\n@param addr", "predict": "Close connection. @param addr the addr"}
{"ID": 414, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void onClose() { Iterator<Entry<Integer, InvokeFuture>> iter = invokeFutureMap.entrySet().iterator(); while (iter.hasNext()) { Entry<Integer, InvokeFuture> entry = iter.next(); iter.remove(); InvokeFuture future = entry.getValue(); if (future != null) { future.putResponse(future.createConnectionClosedResponse(this.getRemoteAddress())); future.cancelTimeout(); future.tryAsyncExecuteInvokeCallbackAbnormally(); } } }. ### Assistant:", "ground_truth": "Do something when closing.", "predict": "When connection closed, remove all invoke futures from map."}
{"ID": 415, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void close() { if (closed.compareAndSet(false, true)) { try { if (this.getChannel() != null) { this.getChannel().close().addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture future) throws Exception { if (logger.isInfoEnabled()) { logger .info( \"Close the connection to remote address={}, result={}, cause={}\", RemotingUtil.parseRemoteAddress(Connection.this .getChannel()), future.isSuccess(), future.cause()); } } }); } } catch (Exception e) { logger.warn(\"Exception caught when closing connection {}\", RemotingUtil.parseRemoteAddress(Connection.this.getChannel()), e); } } }. ### Assistant:", "ground_truth": "Close the connection.", "predict": "Close the connection."}
{"ID": 416, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Object setAttributeIfAbsent(String key, Object value) { return attributes.putIfAbsent(key, value); }. ### Assistant:", "ground_truth": "set attribute if key absent.\n\n@param key\n@param value\n@return", "predict": "Sets an attribute if it doesn't already exist. If the key is already present, it is not changed. @param key the key of the attribute @param value the value of the attribute @return the previous value of the attribute, or null if it did not exist"}
{"ID": 417, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void registerUserProcessor(UserProcessor<?> processor, ConcurrentHashMap<String, UserProcessor<?>> userProcessors) { if (null == processor) { throw new RuntimeException(\"User processor should not be null!\"); } if (processor instanceof MultiInterestUserProcessor) { registerUserProcessor((MultiInterestUserProcessor) processor, userProcessors); } else { if (StringUtils.isBlank(processor.interest())) { throw new RuntimeException(\"Processor interest should not be blank!\"); } UserProcessor<?> preProcessor = userProcessors.putIfAbsent(processor.interest(), processor); if (preProcessor != null) { String errMsg = \"Processor with interest key [\" + processor.interest() + \"] has already been registered to rpc server, can not register again!\"; throw new RuntimeException(errMsg); } } }. ### Assistant:", "ground_truth": "Help register single-interest user processor.\n\n@param processor  the processor need to be registered\n@param userProcessors   the map of user processors", "predict": "Registers user processor to RPC server. @param processor User processor to be registered. @param userProcessors User processors map."}
{"ID": 418, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static void registerUserProcessor(MultiInterestUserProcessor<?> processor, ConcurrentHashMap<String, UserProcessor<?>> userProcessors) { if (null == processor.multiInterest() || processor.multiInterest().isEmpty()) { throw new RuntimeException(\"Processor interest should not be blank!\"); } for (String interest : processor.multiInterest()) { UserProcessor<?> preProcessor = userProcessors.putIfAbsent(interest, processor); if (preProcessor != null) { String errMsg = \"Processor with interest key [\" + interest + \"] has already been registered to rpc server, can not register again!\"; throw new RuntimeException(errMsg); } } }. ### Assistant:", "ground_truth": "Help register multi-interest user processor.\n\n@param processor  the processor with multi-interest need to be registered\n@param userProcessors    the map of user processors", "predict": "Registers the given processor to the given user interest processor map. @param processor the processor to register. @param userProcessors the user interest processor map."}
{"ID": 419, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void dispatchToUserProcessor(RemotingContext ctx, RpcRequestCommand cmd) { final int id = cmd.getId(); final byte type = cmd.getType(); // processor here must not be null, for it have been checked before UserProcessor processor = ctx.getUserProcessor(cmd.getRequestClass()); if (processor instanceof AsyncUserProcessor) { try { processor.handleRequest(processor.preHandleRequest(ctx, cmd.getRequestObject()), new RpcAsyncContext(ctx, cmd, this), cmd.getRequestObject()); } catch (RejectedExecutionException e) { logger .warn(\"RejectedExecutionException occurred when do ASYNC process in RpcRequestProcessor\"); sendResponseIfNecessary(ctx, type, this.getCommandFactory() .createExceptionResponse(id, ResponseStatus.SERVER_THREADPOOL_BUSY)); } catch (Throwable t) { String errMsg = \"AYSNC process rpc request failed in RpcRequestProcessor, id=\" + id; logger.error(errMsg, t); sendResponseIfNecessary(ctx, type, this.getCommandFactory() .createExceptionResponse(id, t, errMsg)); } } else { try { Object responseObject = processor .handleRequest(processor.preHandleRequest(ctx, cmd.getRequestObject()), cmd.getRequestObject()); sendResponseIfNecessary(ctx, type, this.getCommandFactory().createResponse(responseObject, cmd)); } catch (RejectedExecutionException e) { logger .warn(\"RejectedExecutionException occurred when do SYNC process in RpcRequestProcessor\"); sendResponseIfNecessary(ctx, type, this.getCommandFactory() .createExceptionResponse(id, ResponseStatus.SERVER_THREADPOOL_BUSY)); } catch (Throwable t) { String errMsg = \"SYNC process rpc request failed in RpcRequestProcessor, id=\" + id; logger.error(errMsg, t); sendResponseIfNecessary(ctx, type, this.getCommandFactory() .createExceptionResponse(id, t, errMsg)); } } }. ### Assistant:", "ground_truth": "dispatch request command to user processor\n@param ctx remoting context\n@param cmd rpc request command", "predict": "dispatch to user processor. @param ctx the remoting context @param cmd the rpc request command"}
{"ID": 420, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private boolean deserializeRequestCommand(RemotingContext ctx, RpcRequestCommand cmd, int level) { boolean result; try { cmd.deserialize(level); result = true; } catch (DeserializationException e) { logger .error( \"DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}\", cmd.getId(), RpcDeserializeLevel.valueOf(level), e); sendResponseIfNecessary(ctx, cmd.getType(), this.getCommandFactory() .createExceptionResponse(cmd.getId(), ResponseStatus.SERVER_DESERIAL_EXCEPTION, e)); result = false; } catch (Throwable t) { String errMsg = \"Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=\" + cmd.getId() + \", deserializeLevel=\" + level; logger.error(errMsg, t); sendResponseIfNecessary(ctx, cmd.getType(), this.getCommandFactory() .createExceptionResponse(cmd.getId(), t, errMsg)); result = false; } return result; }. ### Assistant:", "ground_truth": "deserialize request command\n\n@return true if deserialize success; false if exception catched", "predict": "Deserialize request command. @param ctx the remoting context @param cmd the request command @param level the deserialize level @return true if succeed, otherwise false"}
{"ID": 421, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void preProcessRemotingContext(RemotingContext ctx, RpcRequestCommand cmd, long currentTimestamp) { ctx.setArriveTimestamp(cmd.getArriveTime()); ctx.setTimeout(cmd.getTimeout()); ctx.setRpcCommandType(cmd.getType()); ctx.getInvokeContext().putIfAbsent(InvokeContext.BOLT_PROCESS_WAIT_TIME, currentTimestamp - cmd.getArriveTime()); }. ### Assistant:", "ground_truth": "pre process remoting context, initial some useful infos and pass to biz\n\n@param ctx remoting context\n@param cmd rpc request command\n@param currentTimestamp current timestamp", "predict": "Pre-process remoting context before sending request to Bolt. @param ctx Remoting context @param cmd RpcRequestCommand @param currentTimestamp current timestamp"}
{"ID": 422, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void timeoutLog(final RpcRequestCommand cmd, long currentTimestamp, RemotingContext ctx) { if (logger.isDebugEnabled()) { logger .debug( \"request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}].\", cmd.getId(), currentTimestamp, cmd.getArriveTime(), (currentTimestamp - cmd.getArriveTime()), cmd.getTimeout()); } String remoteAddr = \"UNKNOWN\"; if (null != ctx) { ChannelHandlerContext channelCtx = ctx.getChannelContext(); Channel channel = channelCtx.channel(); if (null != channel) { remoteAddr = RemotingUtil.parseRemoteAddress(channel); } } logger .warn( \"Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}].\", cmd.getId(), remoteAddr, (currentTimestamp - cmd.getArriveTime()), cmd.getTimeout()); }. ### Assistant:", "ground_truth": "print some log when request timeout and discarded in io thread.", "predict": "Log the timeout of the request. @param cmd the request command @param currentTimestamp the current timestamp @param ctx the remoting context"}
{"ID": 423, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void debugLog(RemotingContext ctx, RpcRequestCommand cmd, long currentTimestamp) { if (logger.isDebugEnabled()) { logger.debug(\"Rpc request received! requestId={}, from {}\", cmd.getId(), RemotingUtil.parseRemoteAddress(ctx.getChannelContext().channel())); logger.debug( \"request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}.\", cmd.getId(), currentTimestamp, cmd.getArriveTime(), (currentTimestamp - cmd.getArriveTime()), cmd.getTimeout()); } }. ### Assistant:", "ground_truth": "print some debug log when receive request", "predict": "Debug log."}
{"ID": 424, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void process(RemotingContext ctx, T msg, ExecutorService defaultExecutor) throws Exception { ProcessTask task = new ProcessTask(ctx, msg); if (this.getExecutor() != null) { this.getExecutor().execute(task); } else { defaultExecutor.execute(task); } }. ### Assistant:", "ground_truth": "Process the remoting command with its own executor or with the defaultExecutor if its own if null.\n\n@param ctx\n@param msg\n@param defaultExecutor\n@throws Exception", "predict": "Process the message. @param ctx the remoting context @param msg the message @param defaultExecutor the default executor service @throws Exception the exception"}
{"ID": 425, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void invokeWithCallback(final Connection conn, final RemotingCommand request, final InvokeCallback invokeCallback, final int timeoutMillis) { final InvokeFuture future = createInvokeFuture(conn, request, request.getInvokeContext(), invokeCallback); conn.addInvokeFuture(future); final int requestId = request.getId(); try { Timeout timeout = TimerHolder.getTimer().newTimeout(new TimerTask() { @Override public void run(Timeout timeout) throws Exception { InvokeFuture future = conn.removeInvokeFuture(requestId); if (future != null) { future.putResponse(commandFactory.createTimeoutResponse(conn .getRemoteAddress())); future.tryAsyncExecuteInvokeCallbackAbnormally(); } } }, timeoutMillis, TimeUnit.MILLISECONDS); future.addTimeout(timeout); conn.getChannel().writeAndFlush(request).addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture cf) throws Exception { if (!cf.isSuccess()) { InvokeFuture f = conn.removeInvokeFuture(requestId); if (f != null) { f.cancelTimeout(); f.putResponse(commandFactory.createSendFailedResponse( conn.getRemoteAddress(), cf.cause())); f.tryAsyncExecuteInvokeCallbackAbnormally(); } logger.error(\"Invoke send failed. The address is {}\", RemotingUtil.parseRemoteAddress(conn.getChannel()), cf.cause()); } } }); } catch (Exception e) { InvokeFuture f = conn.removeInvokeFuture(requestId); if (f != null) { f.cancelTimeout(); f.putResponse(commandFactory.createSendFailedResponse(conn.getRemoteAddress(), e)); f.tryAsyncExecuteInvokeCallbackAbnormally(); } logger.error(\"Exception caught when sending invocation. The address is {}\", RemotingUtil.parseRemoteAddress(conn.getChannel()), e); } }. ### Assistant:", "ground_truth": "Invocation with callback.\n\n@param conn\n@param request\n@param invokeCallback\n@param timeoutMillis\n@throws InterruptedException", "predict": "Send the request to the remote server and invoke the callback. @param conn the connection @param request the request @param invokeCallback the callback @param timeoutMillis the timeout milliseconds"}
{"ID": 426, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void oneway(final Connection conn, final RemotingCommand request) { try { conn.getChannel().writeAndFlush(request).addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture f) throws Exception { if (!f.isSuccess()) { logger.error(\"Invoke send failed. The address is {}\", RemotingUtil.parseRemoteAddress(conn.getChannel()), f.cause()); } } }); } catch (Exception e) { if (null == conn) { logger.error(\"Conn is null\"); } else { logger.error(\"Exception caught when sending invocation. The address is {}\", RemotingUtil.parseRemoteAddress(conn.getChannel()), e); } } }. ### Assistant:", "ground_truth": "Oneway invocation.\n\n@param conn\n@param request\n@throws InterruptedException", "predict": "Send the request to the server. @param conn the connection which connects to the server @param request the request to be sent"}
{"ID": 427, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static byte toByte(BitSet bs) { int value = 0; for (int i = 0; i < bs.length(); ++i) { if (bs.get(i)) { value += 1 << i; } } if (bs.length() > 7) { throw new IllegalArgumentException(\"The byte value \" + value + \" generated according to bit set \" + bs + \" is out of range, should be limited between [\" + Byte.MIN_VALUE + \"] to [\" + Byte.MAX_VALUE + \"]\"); } return (byte) value; }. ### Assistant:", "ground_truth": "from bit set to byte\n@param bs\n@return byte represent the bit set", "predict": "Convert a BitSet to a byte value. @param bs BitSet to convert @return byte value"}
{"ID": 428, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static BitSet toBitSet(int value) { if (value > Byte.MAX_VALUE || value < Byte.MIN_VALUE) { throw new IllegalArgumentException( \"The value \" + value + \" is out of byte range, should be limited between [\" + Byte.MIN_VALUE + \"] to [\" + Byte.MAX_VALUE + \"]\"); } BitSet bs = new BitSet(); int index = 0; while (value != 0) { if (value % 2 != 0) { bs.set(index); } ++index; value = (byte) (value >> 1); } return bs; }. ### Assistant:", "ground_truth": "from byte to bit set\n@param value\n@return bit set represent the byte", "predict": "Convert a value to a bitset. @param value the value to convert @return the bitset representation of the value"}
{"ID": 429, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void addReconnectTask(Url url) { ReconnectTask task = new ReconnectTask(); task.url = url; tasks.add(task); }. ### Assistant:", "ground_truth": "add reconnect task\n\n@param url", "predict": "Add a task to reconnect to the given url. @param url the url to reconnect to."}
{"ID": 430, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void stop() { if (!this.started) { return; } this.started = false; healConnectionThreads.interrupt(); this.tasks.clear(); this.canceled.clear(); }. ### Assistant:", "ground_truth": "stop reconnect thread", "predict": "Stop the connection manager."}
{"ID": 431, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected RemotingCommand toRemotingCommand(Object request, Connection conn, InvokeContext invokeContext, int timeoutMillis) throws SerializationException { RpcRequestCommand command = this.getCommandFactory().createRequestCommand(request); if (null != invokeContext) { // set client custom serializer for request command if not null Object clientCustomSerializer = invokeContext.get(InvokeContext.BOLT_CUSTOM_SERIALIZER); if (null != clientCustomSerializer) { try { command.setSerializer((Byte) clientCustomSerializer); } catch (ClassCastException e) { throw new IllegalArgumentException( \"Illegal custom serializer [\" + clientCustomSerializer + \"], the type of value should be [byte], but now is [\" + clientCustomSerializer.getClass().getName() + \"].\"); } } // enable crc by default, user can disable by set invoke context `false` for key `InvokeContext.BOLT_CRC_SWITCH` Boolean crcSwitch = invokeContext.get(InvokeContext.BOLT_CRC_SWITCH, ProtocolSwitch.CRC_SWITCH_DEFAULT_VALUE); if (null != crcSwitch && crcSwitch) { command.setProtocolSwitch(ProtocolSwitch .create(new int[] { ProtocolSwitch.CRC_SWITCH_INDEX })); } } else { // enable crc by default, if there is no invoke context. command.setProtocolSwitch(ProtocolSwitch .create(new int[] { ProtocolSwitch.CRC_SWITCH_INDEX })); } command.setTimeout(timeoutMillis); command.setRequestClass(request.getClass().getName()); command.setInvokeContext(invokeContext); command.serialize(); logDebugInfo(command); return command; }. ### Assistant:", "ground_truth": "Convert application request object to remoting request command.\n\n@param request\n@param conn\n@param timeoutMillis\n@return\n@throws CodecException", "predict": "Create request message from request object. @param request Bolt request object. @param conn Connection. @param invokeContext InvokeContext. @param timeoutMillis Timeout milliseconds. @return Request message. @throws SerializationException If failed to serialize request object."}
{"ID": 432, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public Map<String, List<Connection>> filter(List<Connection> connections) { List<Connection> serviceOnConnections = new ArrayList<Connection>(); List<Connection> serviceOffConnections = new ArrayList<Connection>(); Map<String, List<Connection>> filteredConnections = new ConcurrentHashMap<String, List<Connection>>(); for (Connection connection : connections) { String serviceStatus = (String) connection.getAttribute(Configs.CONN_SERVICE_STATUS); if (serviceStatus != null) { if (connection.isInvokeFutureMapFinish() && !freshSelectConnections.containsValue(connection)) { serviceOffConnections.add(connection); } } else { serviceOnConnections.add(connection); } } filteredConnections.put(Configs.CONN_SERVICE_STATUS_ON, serviceOnConnections); filteredConnections.put(Configs.CONN_SERVICE_STATUS_OFF, serviceOffConnections); return filteredConnections; }. ### Assistant:", "ground_truth": "Filter connections to monitor\n\n@param connections", "predict": "Filter connections based on service status. @param connections List of connections. @return Map of connections based on service status."}
{"ID": 433, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void monitor(Map<String, RunStateRecordedFutureTask<ConnectionPool>> connPools) { try { if (null != connPools && !connPools.isEmpty()) { Iterator<Map.Entry<String, RunStateRecordedFutureTask<ConnectionPool>>> iter = connPools .entrySet().iterator(); while (iter.hasNext()) { Map.Entry<String, RunStateRecordedFutureTask<ConnectionPool>> entry = iter .next(); String poolKey = entry.getKey(); ConnectionPool pool = FutureTaskUtil.getFutureTaskResult(entry.getValue(), logger); List<Connection> connections = pool.getAll(); Map<String, List<Connection>> filteredConnectons = this.filter(connections); List<Connection> serviceOnConnections = filteredConnectons .get(Configs.CONN_SERVICE_STATUS_ON); List<Connection> serviceOffConnections = filteredConnectons .get(Configs.CONN_SERVICE_STATUS_OFF); if (serviceOnConnections.size() > CONNECTION_THRESHOLD) { Connection freshSelectConnect = serviceOnConnections.get(random .nextInt(serviceOnConnections.size())); freshSelectConnect.setAttribute(Configs.CONN_SERVICE_STATUS, Configs.CONN_SERVICE_STATUS_OFF); Connection lastSelectConnect = freshSelectConnections.remove(poolKey); freshSelectConnections.put(poolKey, freshSelectConnect); closeFreshSelectConnections(lastSelectConnect, serviceOffConnections); } else { if (freshSelectConnections.containsKey(poolKey)) { Connection lastSelectConnect = freshSelectConnections.remove(poolKey); closeFreshSelectConnections(lastSelectConnect, serviceOffConnections); } if (logger.isInfoEnabled()) { logger .info( \"the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}].\", serviceOnConnections.size(), CONNECTION_THRESHOLD); } } for (Connection offConn : serviceOffConnections) { if (offConn.isFine()) { offConn.close(); } } } } } catch (Exception e) { logger.error(\"ScheduledDisconnectStrategy monitor error\", e); } }. ### Assistant:", "ground_truth": "Monitor connections and close connections with status is off\n\n@param connPools", "predict": "Monitor the connection pool. @param connPools the connection pool"}
{"ID": 434, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void closeFreshSelectConnections(Connection lastSelectConnect, List<Connection> serviceOffConnections) throws InterruptedException { if (null != lastSelectConnect) { if (lastSelectConnect.isInvokeFutureMapFinish()) { serviceOffConnections.add(lastSelectConnect); } else { Thread.sleep(RETRY_DETECT_PERIOD); if (lastSelectConnect.isInvokeFutureMapFinish()) { serviceOffConnections.add(lastSelectConnect); } else { if (logger.isInfoEnabled()) { logger.info(\"Address={} won't close at this schedule turn\", RemotingUtil.parseRemoteAddress(lastSelectConnect.getChannel())); } } } } }. ### Assistant:", "ground_truth": "close the connection of the fresh select connections\n\n@param lastSelectConnect\n@param serviceOffConnections\n@throws InterruptedException", "predict": "Close fresh select connections. @param lastSelectConnect the last select connect @param serviceOffConnections the service off connections @throws InterruptedException the interrupted exception"}
{"ID": 435, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean getBool(String key, String defaultValue) { return Boolean.parseBoolean(System.getProperty(key, defaultValue)); }. ### Assistant:", "ground_truth": "~~~ public helper methods to retrieve system property", "predict": "Get a boolean value from the system properties. If the key is not found, the default value is returned. @param key the key to look for. @param defaultValue the default value to return if the key is not found. @return the boolean value."}
{"ID": 436, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void infoLog(String format, String addr) { if (logger.isInfoEnabled()) { if (StringUtils.isNotEmpty(addr)) { logger.info(format, addr); } else { logger.info(format, \"UNKNOWN-ADDR\"); } } }. ### Assistant:", "ground_truth": "print info log\n@param format\n@param addr", "predict": "Logs the message with the given format and address. If the address is not empty, it will be logged. If the address is empty, the message will be logged with \"UNKNOWN-ADDR\" instead. @param format the message format @param addr the address of the device that caused the message"}
{"ID": 437, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean isRequestTimeout() { if (this.timeout > 0 && (this.rpcCommandType != RpcCommandType.REQUEST_ONEWAY) && (System.currentTimeMillis() - this.arriveTimestamp) > this.timeout) { return true; } return false; }. ### Assistant:", "ground_truth": "whether this request already timeout\n\n@return", "predict": "Check if this message is timed out. @return True if timeout, false otherwise."}
{"ID": 438, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public UserProcessor<?> getUserProcessor(String className) { return StringUtils.isBlank(className) ? null : this.userProcessors.get(className); }. ### Assistant:", "ground_truth": "Get user processor for class name.\n\n@param className\n@return", "predict": "Get user processor by className. @param className className of user processor. @return user processor or null if not found."}
{"ID": 439, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private Connection randomGet(List<Connection> conns) { if (null == conns || conns.isEmpty()) { return null; } int size = conns.size(); int tries = 0; Connection result = null; while ((result == null || !result.isFine()) && tries++ < MAX_TIMES) { result = conns.get(this.random.nextInt(size)); } if (result != null && !result.isFine()) { result = null; } return result; }. ### Assistant:", "ground_truth": "get one connection randomly\n\n@param conns\n@return", "predict": "Get a connection randomly from the list of connections. The connection is only used once. If the connection is not fine, it is removed from the list. The method returns the connection if it is fine. If the connection is not fine, it returns null. The method tries to get a connection until it finds a fine one. The method tries to get a connection randomly from the list of connections. The method tries to get a connection randomly from the list of connections. The method tries to get a connection randomly from the list of connections. The method tries to get a connection randomly from the list of connections. The method tries to get a connection randomly from the list of connections. The method tries to get a connection randomly from the list of connections. The method tries to get a connection randomly from the list of connections. The method tries to get a connection randomly from the list of connections. The method tries to get a connection randomly from the list of connections. The method tries to get a connection randomly from the list of connections. The method tries to get a connection randomly from the"}
{"ID": 440, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") public <T> T get(String key, T defaultIfNotFound) { return this.context.get(key) != null ? (T) this.context.get(key) : defaultIfNotFound; }. ### Assistant:", "ground_truth": "get and use default if not found\n\n@param key\n@param defaultIfNotFound\n@param <T>\n@return", "predict": "Get the value of a key in the context. If the key is not found, the defaultIfNotFound value is returned. @param key The key to retrieve. @param defaultIfNotFound The default value to return if the key is not found. @param <T> The type of the value. @return The value of the key or the defaultIfNotFound value."}
{"ID": 441, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String getProperty(String key) { if (properties == null) { return null; } return properties.getProperty(key); }. ### Assistant:", "ground_truth": "Get property value according to property key\n\n@param key\n@return property value", "predict": "Get a property from the properties map. @param key The property key. @return The property value."}
{"ID": 442, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Object resolveResponseObject(ResponseCommand responseCommand, String addr) throws RemotingException { preProcess(responseCommand, addr); if (responseCommand.getResponseStatus() == ResponseStatus.SUCCESS) { return toResponseObject(responseCommand); } else { String msg = String.format(\"Rpc invocation exception: %s, the address is %s, id=%s\", responseCommand.getResponseStatus(), addr, responseCommand.getId()); logger.warn(msg); if (responseCommand.getCause() != null) { throw new InvokeException(msg, responseCommand.getCause()); } else { throw new InvokeException(msg + \", please check the server log for more.\"); } } }. ### Assistant:", "ground_truth": "Analyze the response command and generate the response object.\n\n@param responseCommand response command\n@param addr response address\n@return response object", "predict": "Resolve response object. @param responseCommand the response command @param addr the addr @return the response object @throws RemotingException the remoting exception"}
{"ID": 443, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static Object toResponseObject(ResponseCommand responseCommand) throws CodecException { RpcResponseCommand response = (RpcResponseCommand) responseCommand; response.deserialize(); return response.getResponseObject(); }. ### Assistant:", "ground_truth": "Convert remoting response command to application response object.", "predict": "Deserialize response command to response object. @param responseCommand @return @throws CodecException"}
{"ID": 444, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static Throwable toThrowable(ResponseCommand responseCommand) throws CodecException { RpcResponseCommand resp = (RpcResponseCommand) responseCommand; resp.deserialize(); Object ex = resp.getResponseObject(); if (ex != null && ex instanceof Throwable) { return (Throwable) ex; } return null; }. ### Assistant:", "ground_truth": "Convert remoting response command to throwable if it is a throwable, otherwise return null.", "predict": "Convert ResponseCommand to Throwable."}
{"ID": 445, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static String detailErrMsg(String clientErrMsg, ResponseCommand responseCommand) { RpcResponseCommand resp = (RpcResponseCommand) responseCommand; if (StringUtils.isNotBlank(resp.getErrorMsg())) { return String.format(\"%s, ServerErrorMsg:%s\", clientErrMsg, resp.getErrorMsg()); } else { return String.format(\"%s, ServerErrorMsg:null\", clientErrMsg); } }. ### Assistant:", "ground_truth": "Detail your error msg with the error msg returned from response command", "predict": "Extract the detail error message from the response command. @param clientErrMsg the client error message @param responseCommand the response command @return the detail error message"}
{"ID": 446, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private RpcServerException createServerException(Throwable t, String errMsg) { String formattedErrMsg = String.format( \"[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s\", t.getClass().getName(), t.getMessage(), errMsg); RpcServerException e = new RpcServerException(formattedErrMsg); e.setStackTrace(t.getStackTrace()); return e; }. ### Assistant:", "ground_truth": "create server exception using error msg and fill the stack trace using the stack trace of throwable.\n\n@param t the origin throwable to fill the stack trace of rpc server exception\n@param errMsg additional error msg, <code>null</code> is allowed\n@return an instance of RpcServerException", "predict": "Create a RpcServerException from a Throwable and a string errMsg. @param t Throwable @param errMsg errMsg @return RpcServerException"}
{"ID": 447, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void printConnectionTraceLog(Logger logger, String traceId, InvokeContext invokeContext) { String sourceIp = invokeContext.get(InvokeContext.CLIENT_LOCAL_IP); Integer sourcePort = invokeContext.get(InvokeContext.CLIENT_LOCAL_PORT); String targetIp = invokeContext.get(InvokeContext.CLIENT_REMOTE_IP); Integer targetPort = invokeContext.get(InvokeContext.CLIENT_REMOTE_PORT); StringBuilder logMsg = new StringBuilder(); logMsg.append(traceId).append(\",\"); logMsg.append(sourceIp).append(\",\"); logMsg.append(sourcePort).append(\",\"); logMsg.append(targetIp).append(\",\"); logMsg.append(targetPort); if (logger.isInfoEnabled()) { logger.info(logMsg.toString()); } }. ### Assistant:", "ground_truth": "print trace log\n@param traceId\n@param invokeContext", "predict": "Print the connection trace log. @param logger the logger @param traceId the traceId @param invokeContext the invoke context"}
{"ID": 448, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static EventLoopGroup newEventLoopGroup(int nThreads, ThreadFactory threadFactory) { return epollEnabled ? new EpollEventLoopGroup(nThreads, threadFactory) : new NioEventLoopGroup(nThreads, threadFactory); }. ### Assistant:", "ground_truth": "Create the right event loop according to current platform and system property, fallback to NIO when epoll not enabled.\n\n@param nThreads\n@param threadFactory\n@return an EventLoopGroup suitable for the current platform", "predict": "Create a new event loop group. @param nThreads number of threads to create @param threadFactory thread factory to use when creating threads @return event loop group"}
{"ID": 449, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String parseRemoteAddress(final Channel channel) { if (null == channel) { return StringUtils.EMPTY; } final SocketAddress remote = channel.remoteAddress(); return doParse(remote != null ? remote.toString().trim() : StringUtils.EMPTY); }. ### Assistant:", "ground_truth": "Parse the remote address of the channel.\n\n@param channel\n@return", "predict": "Parse remote address from channel. @param channel Channel. @return Remote address."}
{"ID": 450, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String parseLocalAddress(final Channel channel) { if (null == channel) { return StringUtils.EMPTY; } final SocketAddress local = channel.localAddress(); return doParse(local != null ? local.toString().trim() : StringUtils.EMPTY); }. ### Assistant:", "ground_truth": "Parse the local address of the channel.\n\n@param channel\n@return", "predict": "Get the local address of the channel. @param channel Channel to get the local address from. @return Local address of the channel."}
{"ID": 451, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String parseRemoteIP(final Channel channel) { if (null == channel) { return StringUtils.EMPTY; } final InetSocketAddress remote = (InetSocketAddress) channel.remoteAddress(); if (remote != null) { return remote.getAddress().getHostAddress(); } return StringUtils.EMPTY; }. ### Assistant:", "ground_truth": "Parse the remote host ip of the channel.\n\n@param channel\n@return", "predict": "Get the remote IP address of the channel. @param channel Channel to get remote IP address from. @return Remote IP address of the channel."}
{"ID": 452, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String parseRemoteHostName(final Channel channel) { if (null == channel) { return StringUtils.EMPTY; } final InetSocketAddress remote = (InetSocketAddress) channel.remoteAddress(); if (remote != null) { return remote.getAddress().getHostName(); } return StringUtils.EMPTY; }. ### Assistant:", "ground_truth": "Parse the remote hostname of the channel.\n\nNote: take care to use this method, for a reverse name lookup takes uncertain time in {@link InetAddress#getHostName}.\n\n@param channel\n@return", "predict": "Get the hostname of the remote host. If the remote host is not available, return empty string. @param channel Channel to get the remote hostname from. @return Hostname of the remote host."}
{"ID": 453, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String parseLocalIP(final Channel channel) { if (null == channel) { return StringUtils.EMPTY; } final InetSocketAddress local = (InetSocketAddress) channel.localAddress(); if (local != null) { return local.getAddress().getHostAddress(); } return StringUtils.EMPTY; }. ### Assistant:", "ground_truth": "Parse the local host ip of the channel.\n\n@param channel\n@return", "predict": "Get the local IP address of the channel. @param channel Channel to get the local IP address from. @return Local IP address of the channel."}
{"ID": 454, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int parseRemotePort(final Channel channel) { if (null == channel) { return -1; } final InetSocketAddress remote = (InetSocketAddress) channel.remoteAddress(); if (remote != null) { return remote.getPort(); } return -1; }. ### Assistant:", "ground_truth": "Parse the remote host port of the channel.\n\n@param channel\n@return int", "predict": "Parse remote port from Channel. @param channel Channel to parse remote port from. @return Remote port or -1 if not available."}
{"ID": 455, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int parseLocalPort(final Channel channel) { if (null == channel) { return -1; } final InetSocketAddress local = (InetSocketAddress) channel.localAddress(); if (local != null) { return local.getPort(); } return -1; }. ### Assistant:", "ground_truth": "Parse the local host port of the channel.\n\n@param channel\n@return int", "predict": "Get the local port of a Channel. If the Channel is null, return -1. @param channel Channel to get the local port from. @return The local port of the Channel."}
{"ID": 456, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String parseSocketAddressToHostIp(SocketAddress socketAddress) { final InetSocketAddress addrs = (InetSocketAddress) socketAddress; if (addrs != null) { InetAddress addr = addrs.getAddress(); if (null != addr) { return addr.getHostAddress(); } } return StringUtils.EMPTY; }. ### Assistant:", "ground_truth": "Parse the host ip of socket address.\n\ne.g. /127.0.0.1:1234 -> 127.0.0.1\n\n@param socketAddress\n@return String", "predict": "Parse socket address to host IP. @param socketAddress socket address @return host IP"}
{"ID": 457, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void add(Connection connection) { markAccess(); if (null == connection) { return; } boolean res = this.conns.addIfAbsent(connection); if (res) { connection.increaseRef(); } }. ### Assistant:", "ground_truth": "add a connection\n\n@param connection", "predict": "Add a connection to the pool. If the connection is already in the pool, it will be marked as accessed. If the connection is not already in the pool, it will be added. The connection will be marked as accessed. @param connection the connection to add."}
{"ID": 458, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void removeAndTryClose(Connection connection) { if (null == connection) { return; } boolean res = this.conns.remove(connection); if (res) { connection.decreaseRef(); } if (connection.noRef()) { connection.close(); } }. ### Assistant:", "ground_truth": "removeAndTryClose a connection\n\n@param connection", "predict": "Remove the connection from the pool and decrement its reference count. If the reference count reaches zero, close the connection. @param connection Connection to remove."}
{"ID": 459, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Connection get() { markAccess(); if (null != this.conns) { List<Connection> snapshot = new ArrayList<Connection>(this.conns); if (snapshot.size() > 0) { return this.strategy.select(snapshot); } else { return null; } } else { return null; } }. ### Assistant:", "ground_truth": "get a connection\n\n@return", "predict": "Get the connection from the pool. If there is no connection available, it will wait until one becomes available. @return the connection from the pool or null if none available."}
{"ID": 460, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void registerCustomSerializer(String className, CustomSerializer serializer) { CustomSerializer prevSerializer = classCustomSerializer.putIfAbsent(className, serializer); if (prevSerializer != null) { throw new RuntimeException(\"CustomSerializer has been registered for class: \" + className + \", the custom serializer is: \" + prevSerializer.getClass().getName()); } }. ### Assistant:", "ground_truth": "Register custom serializer for class name.\n\n@param className\n@param serializer\n@return", "predict": "Register a custom serializer for a class. @param className The class to register the serializer for. @param serializer The serializer to register."}
{"ID": 461, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static CustomSerializer getCustomSerializer(String className) { if (!classCustomSerializer.isEmpty()) { return classCustomSerializer.get(className); } return null; }. ### Assistant:", "ground_truth": "Get the custom serializer for class name.\n\n@param className\n@return", "predict": "Get custom serializer for class. @param className className of class to get serializer for @return custom serializer for class or null if not found"}
{"ID": 462, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void registerCustomSerializer(CommandCode code, CustomSerializer serializer) { CustomSerializer prevSerializer = commandCustomSerializer.putIfAbsent(code, serializer); if (prevSerializer != null) { throw new RuntimeException(\"CustomSerializer has been registered for command code: \" + code + \", the custom serializer is: \" + prevSerializer.getClass().getName()); } }. ### Assistant:", "ground_truth": "Register custom serializer for command code.\n\n@param code\n@param serializer\n@return", "predict": "Register a custom serializer for a command code. @param code Command code. @param serializer Custom serializer."}
{"ID": 463, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static CustomSerializer getCustomSerializer(CommandCode code) { if (!commandCustomSerializer.isEmpty()) { return commandCustomSerializer.get(code); } return null; }. ### Assistant:", "ground_truth": "Get the custom serializer for command code.\n\n@param code\n@return", "predict": "Get custom serializer for command code. @param code Command code. @return Custom serializer or null if not found."}
{"ID": 464, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void start() { /** initial delay to execute schedule task, unit: ms */ long initialDelay = ConfigManager.conn_monitor_initial_delay(); /** period of schedule task, unit: ms*/ long period = ConfigManager.conn_monitor_period(); this.executor = new ScheduledThreadPoolExecutor(1, new NamedThreadFactory( \"ConnectionMonitorThread\", true), new ThreadPoolExecutor.AbortPolicy()); MonitorTask monitorTask = new MonitorTask(); this.executor.scheduleAtFixedRate(monitorTask, initialDelay, period, TimeUnit.MILLISECONDS); }. ### Assistant:", "ground_truth": "Start schedule task", "predict": "Start the connection monitor thread."}
{"ID": 465, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean isConnected(String remoteAddr) { Url url = this.rpcRemoting.addressParser.parse(remoteAddr); return this.isConnected(url); }. ### Assistant:", "ground_truth": "check whether a client address connected\n\n@param remoteAddr\n@return", "predict": "Check if this client is connected to the remote address. @param remoteAddr the remote address of the client. @return true if connected, false otherwise."}
{"ID": 466, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void initWriteBufferWaterMark() { int lowWaterMark = this.netty_buffer_low_watermark(); int highWaterMark = this.netty_buffer_high_watermark(); if (lowWaterMark > highWaterMark) { throw new IllegalArgumentException( String .format( \"[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)\", highWaterMark, lowWaterMark)); } else { logger.warn( \"[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes\", lowWaterMark, highWaterMark); } this.bootstrap.childOption(ChannelOption.WRITE_BUFFER_WATER_MARK, new WriteBufferWaterMark( lowWaterMark, highWaterMark)); }. ### Assistant:", "ground_truth": "init netty write buffer water mark", "predict": "Bolt's netty channel option configuration."}
{"ID": 467, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static FramedataImpl1 get(Opcode opcode) { if (opcode== null) { throw new IllegalArgumentException(\"Supplied opcode cannot be null\"); } switch (opcode) { case PING: return new PingFrame(); case PONG: return new PongFrame(); case TEXT: return new TextFrame(); case BINARY: return new BinaryFrame(); case CLOSING: return new CloseFrame(); case CONTINUOUS: return new ContinuousFrame(); default: throw new IllegalArgumentException(\"Supplied opcode is invalid\"); } }. ### Assistant:", "ground_truth": "Get a frame with a specific opcode\n\n@param opcode the opcode representing the frame\n@return the frame with a specific opcode", "predict": "Returns a new instance of the appropriate class based on the opcode. @param opcode the opcode of the frame @return a new instance of the appropriate class based on the opcode."}
{"ID": 468, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean batch( WebSocketImpl ws, ByteChannel sockchannel ) throws IOException { if (ws == null) { return false; } ByteBuffer buffer = ws.outQueue.peek(); WrappedByteChannel c = null; if( buffer == null ) { if( sockchannel instanceof WrappedByteChannel ) { c = (WrappedByteChannel) sockchannel; if( c.isNeedWrite() ) { c.writeMore(); } } } else { do {// FIXME writing as much as possible is unfair!! /*int written = */sockchannel.write( buffer ); if( buffer.remaining() > 0 ) { return false; } else { ws.outQueue.poll(); // Buffer finished. Remove it. buffer = ws.outQueue.peek(); } } while ( buffer != null ); } if( ws.outQueue.isEmpty() && ws.isFlushAndClose() && ws.getDraft() != null && ws.getDraft().getRole() != null && ws.getDraft().getRole() == Role.SERVER ) {// ws.closeConnection(); } return c == null || !((WrappedByteChannel) sockchannel).isNeedWrite(); }. ### Assistant:", "ground_truth": "Returns whether the whole outQueue has been flushed\n@param ws The WebSocketImpl associated with the channels\n@param sockchannel The channel to write to\n@throws IOException May be thrown by {@link WrappedByteChannel#writeMore()}\n@return returns Whether there is more data to write", "predict": "Batch sending. @param ws WebSocketImpl. @param sockchannel ByteChannel. @return true if sending is completed. @throws IOException"}
{"ID": 469, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void setCode(int code) { this.code = code; // CloseFrame.TLS_ERROR is not allowed to be transfered over the wire if (code == CloseFrame.TLS_ERROR) { this.code = CloseFrame.NOCODE; this.reason = \"\"; } updatePayload(); }. ### Assistant:", "ground_truth": "Set the close code for this close frame\n@param code the close code", "predict": "Set the TLS error code. TLS errors are not transfered over the wire. @param code TLS Error Code."}
{"ID": 470, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void validateUtf8(ByteBuffer payload, int mark) throws InvalidDataException { try { payload.position( payload.position() + 2 ); reason = Charsetfunctions.stringUtf8( payload ); } catch ( IllegalArgumentException e ) { throw new InvalidDataException( CloseFrame.NO_UTF8 ); } finally { payload.position( mark ); } }. ### Assistant:", "ground_truth": "Validate the payload to valid utf8\n@param mark the current mark\n@param payload the current payload\n@throws InvalidDataException the current payload is not a valid utf8", "predict": "Validates the utf8 encoding of the payload. @param payload Payload to validate. @param mark Mark to restore the position. @throws InvalidDataException If the payload is not utf8 encoded."}
{"ID": 471, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void updatePayload() { byte[] by = Charsetfunctions.utf8Bytes(reason); ByteBuffer buf = ByteBuffer.allocate(4); buf.putInt(code); buf.position(2); ByteBuffer pay = ByteBuffer.allocate(2 + by.length); pay.put(buf); pay.put(by); pay.rewind(); super.setPayload(pay); }. ### Assistant:", "ground_truth": "Update the payload to represent the close code and the reason", "predict": "Update the payload."}
{"ID": 472, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private HandshakeState containsRequestedProtocol(String requestedProtocol) { for( IProtocol knownProtocol : knownProtocols ) { if( knownProtocol.acceptProvidedProtocol( requestedProtocol ) ) { protocol = knownProtocol; log.trace(\"acceptHandshake - Matching protocol found: {}\", protocol); return HandshakeState.MATCHED; } } return HandshakeState.NOT_MATCHED; }. ### Assistant:", "ground_truth": "Check if the requested protocol is part of this draft\n@param requestedProtocol the requested protocol\n@return MATCHED if it is matched, otherwise NOT_MATCHED", "predict": "Determines if the requested protocol is acceptable to the server. If it is, the protocol is set to the requested protocol. If it is not, the protocol remains unchanged. @param requestedProtocol the requested protocol @return the handshake state after the determination"}
{"ID": 473, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void translateSingleFrameCheckLengthLimit(long length) throws LimitExceededException { if( length > Integer.MAX_VALUE ) { log.trace(\"Limit exedeed: Payloadsize is to big...\"); throw new LimitExceededException(\"Payloadsize is to big...\"); } if( length > maxFrameSize) { log.trace( \"Payload limit reached. Allowed: {} Current: {}\" , maxFrameSize, length); throw new LimitExceededException( \"Payload limit reached.\", maxFrameSize ); } if( length < 0 ) { log.trace(\"Limit underflow: Payloadsize is to little...\"); throw new LimitExceededException(\"Payloadsize is to little...\"); } }. ### Assistant:", "ground_truth": "Check if the frame size exceeds the allowed limit\n@param length the current payload length\n@throws LimitExceededException if the payload length is to big", "predict": "Translate the incoming length value into the correct frame size limit. This is done by checking the length against the maximum allowed length and throwing an exception if the length exceeds the maximum limit. The length is also checked against the minimum allowed length and if it is less than the minimum allowed length, an exception is thrown. @param length The length of the incoming message @throws LimitExceededException If the incoming message exceeds the maximum allowed length or if the incoming message is less than the minimum allowed length."}
{"ID": 474, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void translateSingleFrameCheckPacketSize(int maxpacketsize, int realpacketsize) throws IncompleteException { if( maxpacketsize < realpacketsize ) { log.trace( \"Incomplete frame: maxpacketsize < realpacketsize\" ); throw new IncompleteException( realpacketsize ); } }. ### Assistant:", "ground_truth": "Check if the max packet size is smaller than the real packet size\n@param maxpacketsize the max packet size\n@param realpacketsize the real packet size\n@throws IncompleteException if the maxpacketsize is smaller than the realpackagesize", "predict": "Translate the packet size of the single frame check packet. The packet size is specified in the header of the packet. The packet size of the single frame check packet is determined by the packet size of the single frame check packet. The packet size of the single frame check packet is determined by the packet size of the single frame check packet."}
{"ID": 475, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private String generateFinalKey( String in ) { String seckey = in.trim(); String acc = seckey + \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"; MessageDigest sh1; try { sh1 = MessageDigest.getInstance( \"SHA1\" ); } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException( e ); } return Base64.encodeBytes( sh1.digest( acc.getBytes() ) ); }. ### Assistant:", "ground_truth": "Generate a final key from a input string\n@param in the input string\n@return a final key", "predict": "Generate a final key from a given key. The key is first hashed, then Base64 encoded. The resulting key is then signed with the secret key. The resulting signature is Base64 encoded. The resulting signature is then hashed and Base64 encoded. The resulting signature is then signed with the secret key. The resulting signature is Base64 encoded. The resulting signature is then hashed and Base64 encoded. The resulting signature is then signed with the secret key. The resulting signature is Base64 encoded. The resulting signature is then hashed and Base64 encoded. The resulting signature is then signed with the secret key. The resulting signature is Base64 encoded. The resulting signature is then hashed and Base64 encoded. The resulting signature is then signed with the secret key. The resulting signature is Base64 encoded. The resulting signature is then hashed and Base64 encoded. The resulting signature is then signed with the secret key. The resulting signature is Base64 encoded. The resulting signature is then hashed and"}
{"ID": 476, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void processFrameContinuousAndNonFin(WebSocketImpl webSocketImpl, Framedata frame, Opcode curop) throws InvalidDataException { if( curop != Opcode.CONTINUOUS ) { processFrameIsNotFin(frame); } else if( frame.isFin() ) { processFrameIsFin(webSocketImpl, frame); } else if( currentContinuousFrame == null ) { log.error( \"Protocol error: Continuous frame sequence was not started.\" ); throw new InvalidDataException( CloseFrame.PROTOCOL_ERROR, \"Continuous frame sequence was not started.\" ); } //Check if the whole payload is valid utf8, when the opcode indicates a text if( curop == Opcode.TEXT && !Charsetfunctions.isValidUTF8( frame.getPayloadData() ) ) { log.error( \"Protocol error: Payload is not UTF8\" ); throw new InvalidDataException( CloseFrame.NO_UTF8 ); } //Checking if the current continuous frame contains a correct payload with the other frames combined if( curop == Opcode.CONTINUOUS && currentContinuousFrame != null ) { addToBufferList(frame.getPayloadData()); } }. ### Assistant:", "ground_truth": "Process the frame if it is a continuous frame or the fin bit is not set\n@param webSocketImpl the websocket implementation to use\n@param frame the current frame\n@param curop the current Opcode\n@throws InvalidDataException if there is a protocol error", "predict": "Process the frame continuously and non-fin. @param webSocketImpl the WebSocketImpl object. @param frame the frame to process. @param curop the opcode of the frame. @throws InvalidDataException if the frame is invalid."}
{"ID": 477, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void processFrameBinary(WebSocketImpl webSocketImpl, Framedata frame) { try { webSocketImpl.getWebSocketListener().onWebsocketMessage( webSocketImpl, frame.getPayloadData() ); } catch ( RuntimeException e ) { logRuntimeException(webSocketImpl, e); } }. ### Assistant:", "ground_truth": "Process the frame if it is a binary frame\n@param webSocketImpl the websocket impl\n@param frame the frame", "predict": "Process binary message. @param webSocketImpl the web socket impl. @param frame the frame."}
{"ID": 478, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void logRuntimeException(WebSocketImpl webSocketImpl, RuntimeException e) { log.error( \"Runtime exception during onWebsocketMessage\", e ); webSocketImpl.getWebSocketListener().onWebsocketError( webSocketImpl, e ); }. ### Assistant:", "ground_truth": "Log the runtime exception to the specific WebSocketImpl\n@param webSocketImpl the implementation of the websocket\n@param e the runtime exception", "predict": "Logs the exception and calls the WebSocketListener's onWebsocketError method."}
{"ID": 479, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void processFrameText(WebSocketImpl webSocketImpl, Framedata frame) throws InvalidDataException { try { webSocketImpl.getWebSocketListener().onWebsocketMessage( webSocketImpl, Charsetfunctions.stringUtf8( frame.getPayloadData() ) ); } catch ( RuntimeException e ) { logRuntimeException(webSocketImpl, e); } }. ### Assistant:", "ground_truth": "Process the frame if it is a text frame\n@param webSocketImpl the websocket impl\n@param frame the frame", "predict": "Process the text frame. @param webSocketImpl the websocket impl. @param frame the frame. @throws InvalidDataException if the frame is invalid."}
{"ID": 480, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void processFrameIsFin(WebSocketImpl webSocketImpl, Framedata frame) throws InvalidDataException { if( currentContinuousFrame == null ) { log.trace( \"Protocol error: Previous continuous frame sequence not completed.\" ); throw new InvalidDataException( CloseFrame.PROTOCOL_ERROR, \"Continuous frame sequence was not started.\" ); } addToBufferList(frame.getPayloadData()); checkBufferLimit(); if( currentContinuousFrame.getOpcode() == Opcode.TEXT ) { ((FramedataImpl1) currentContinuousFrame).setPayload( getPayloadFromByteBufferList() ); ((FramedataImpl1) currentContinuousFrame).isValid(); try { webSocketImpl.getWebSocketListener().onWebsocketMessage( webSocketImpl, Charsetfunctions.stringUtf8( currentContinuousFrame.getPayloadData() ) ); } catch ( RuntimeException e ) { logRuntimeException(webSocketImpl, e); } } else if( currentContinuousFrame.getOpcode() == Opcode.BINARY ) { ((FramedataImpl1) currentContinuousFrame).setPayload( getPayloadFromByteBufferList() ); ((FramedataImpl1) currentContinuousFrame).isValid(); try { webSocketImpl.getWebSocketListener().onWebsocketMessage( webSocketImpl, currentContinuousFrame.getPayloadData() ); } catch ( RuntimeException e ) { logRuntimeException(webSocketImpl, e); } } currentContinuousFrame = null; clearBufferList(); }. ### Assistant:", "ground_truth": "Process the frame if it is the last frame\n@param webSocketImpl the websocket impl\n@param frame the frame\n@throws InvalidDataException if there is a protocol error", "predict": "Process the FIN frame. @param webSocketImpl the WebSocketImpl object. @param frame the frame. @throws InvalidDataException if the frame is not valid."}
{"ID": 481, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void processFrameIsNotFin(Framedata frame) throws InvalidDataException { if( currentContinuousFrame != null ) { log.trace( \"Protocol error: Previous continuous frame sequence not completed.\" ); throw new InvalidDataException( CloseFrame.PROTOCOL_ERROR, \"Previous continuous frame sequence not completed.\" ); } currentContinuousFrame = frame; addToBufferList(frame.getPayloadData()); checkBufferLimit(); }. ### Assistant:", "ground_truth": "Process the frame if it is not the last frame\n@param frame the frame\n@throws InvalidDataException if there is a protocol error", "predict": "Process frame is not finished. @param frame the frame @throws InvalidDataException if the frame is not finished"}
{"ID": 482, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void processFrameClosing(WebSocketImpl webSocketImpl, Framedata frame) { int code = CloseFrame.NOCODE; String reason = \"\"; if( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame; code = cf.getCloseCode(); reason = cf.getMessage(); } if( webSocketImpl.getReadyState() == ReadyState.CLOSING ) { // complete the close handshake by disconnecting webSocketImpl.closeConnection( code, reason, true ); } else { // echo close handshake if( getCloseHandshakeType() == CloseHandshakeType.TWOWAY ) webSocketImpl.close( code, reason, true ); else webSocketImpl.flushAndClose( code, reason, false ); } }. ### Assistant:", "ground_truth": "Process the frame if it is a closing frame\n@param webSocketImpl the websocket impl\n@param frame the frame", "predict": "Process the closing frame. @param webSocketImpl the websocket impl. @param frame the frame."}
{"ID": 483, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void checkBufferLimit() throws LimitExceededException { long totalSize = getByteBufferListSize(); if( totalSize > maxFrameSize ) { clearBufferList(); log.trace(\"Payload limit reached. Allowed: {} Current: {}\", maxFrameSize, totalSize); throw new LimitExceededException(maxFrameSize); } }. ### Assistant:", "ground_truth": "Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size\n@throws LimitExceededException if the current size is bigger than the allowed size", "predict": "Checks if the buffer list size exceeds the maximum allowed size. If it does, it clears the buffer list. @throws LimitExceededException If the buffer size exceeds the maximum allowed size."}
{"ID": 484, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private ByteBuffer getPayloadFromByteBufferList() throws LimitExceededException { long totalSize = 0; ByteBuffer resultingByteBuffer; synchronized (byteBufferList) { for (ByteBuffer buffer : byteBufferList) { totalSize += buffer.limit(); } checkBufferLimit(); resultingByteBuffer = ByteBuffer.allocate( (int) totalSize ); for (ByteBuffer buffer : byteBufferList) { resultingByteBuffer.put( buffer ); } } resultingByteBuffer.flip(); return resultingByteBuffer; }. ### Assistant:", "ground_truth": "Method to generate a full bytebuffer out of all the fragmented frame payload\n@return a bytebuffer containing all the data\n@throws LimitExceededException will be thrown when the totalSize is bigger then Integer.MAX_VALUE due to not being able to allocate more", "predict": "Concatenates all ByteBuffers in the ByteBufferList into a single ByteBuffer. The resultingByteBuffer is returned. @return resultingByteBuffer @throws LimitExceededException If the size of the resultingByteBuffer exceeds the maximum allowed size."}
{"ID": 485, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private long getByteBufferListSize() { long totalSize = 0; synchronized (byteBufferList) { for (ByteBuffer buffer : byteBufferList) { totalSize += buffer.limit(); } } return totalSize; }. ### Assistant:", "ground_truth": "Get the current size of the resulting bytebuffer in the bytebuffer list\n@return the size as long (to not get an integer overflow)", "predict": "Returns the total size of all ByteBuffers in the ByteBufferList."}
{"ID": 486, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static HandshakeBuilder translateHandshakeHttpServer(String[] firstLineTokens, String line) throws InvalidHandshakeException { // translating/parsing the request from the CLIENT if (!\"GET\".equalsIgnoreCase(firstLineTokens[0])) { throw new InvalidHandshakeException( String.format(\"Invalid request method received: %s Status line: %s\", firstLineTokens[0],line)); } if (!\"HTTP/1.1\".equalsIgnoreCase(firstLineTokens[2])) { throw new InvalidHandshakeException( String.format(\"Invalid status line received: %s Status line: %s\", firstLineTokens[2], line)); } ClientHandshakeBuilder clienthandshake = new HandshakeImpl1Client(); clienthandshake.setResourceDescriptor( firstLineTokens[ 1 ] ); return clienthandshake; }. ### Assistant:", "ground_truth": "Checking the handshake for the role as server\n@return a handshake\n@param firstLineTokens the token of the first line split as as an string array\n@param line the whole line", "predict": "Translate the HTTP request from the CLIENT to the HANDSHAKE."}
{"ID": 487, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static HandshakeBuilder translateHandshakeHttpClient(String[] firstLineTokens, String line) throws InvalidHandshakeException { // translating/parsing the response from the SERVER if (!\"101\".equals(firstLineTokens[1])) { throw new InvalidHandshakeException( String.format(\"Invalid status code received: %s Status line: %s\", firstLineTokens[1], line)); } if (!\"HTTP/1.1\".equalsIgnoreCase(firstLineTokens[0])) { throw new InvalidHandshakeException( String.format(\"Invalid status line received: %s Status line: %s\", firstLineTokens[0], line)); } HandshakeBuilder handshake = new HandshakeImpl1Server(); ServerHandshakeBuilder serverhandshake = (ServerHandshakeBuilder) handshake; serverhandshake.setHttpStatus( Short.parseShort( firstLineTokens[ 1 ] ) ); serverhandshake.setHttpStatusMessage( firstLineTokens[ 2 ] ); return handshake; }. ### Assistant:", "ground_truth": "Checking the handshake for the role as client\n@return a handshake\n@param firstLineTokens the token of the first line split as as an string array\n@param line the whole line", "predict": "Translate the received handshake HTTP client to the server side."}
{"ID": 488, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void decode( ByteBuffer socketBuffer ) { assert ( socketBuffer.hasRemaining() ); log.trace( \"process({}): ({})\", socketBuffer.remaining(), ( socketBuffer.remaining() > 1000 ? \"too big to display\" : new String( socketBuffer.array(), socketBuffer.position(), socketBuffer.remaining() ) )); if( readyState != ReadyState.NOT_YET_CONNECTED ) { if( readyState == ReadyState.OPEN ) { decodeFrames( socketBuffer ); } } else { if( decodeHandshake( socketBuffer ) && (!isClosing() && !isClosed())) { assert ( tmpHandshakeBytes.hasRemaining() != socketBuffer.hasRemaining() || !socketBuffer.hasRemaining() ); // the buffers will never have remaining bytes at the same time if( socketBuffer.hasRemaining() ) { decodeFrames( socketBuffer ); } else if( tmpHandshakeBytes.hasRemaining() ) { decodeFrames( tmpHandshakeBytes ); } } } }. ### Assistant:", "ground_truth": "Method to decode the provided ByteBuffer\n\n@param socketBuffer the ByteBuffer to decode", "predict": "Decode the buffer passed to this method. The buffer passed to this method must have remaining bytes. @param socketBuffer the buffer to decode."}
{"ID": 489, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void closeConnectionDueToWrongHandshake( InvalidDataException exception ) { write( generateHttpResponseDueToError( 404 ) ); flushAndClose( exception.getCloseCode(), exception.getMessage(), false ); }. ### Assistant:", "ground_truth": "Close the connection if the received handshake was not correct\n\n@param exception the InvalidDataException causing this problem", "predict": "Close the connection due to wrong handshake. @param exception InvalidDataException"}
{"ID": 490, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void closeConnectionDueToInternalServerError( RuntimeException exception ) { write( generateHttpResponseDueToError( 500 ) ); flushAndClose( CloseFrame.NEVER_CONNECTED, exception.getMessage(), false ); }. ### Assistant:", "ground_truth": "Close the connection if there was a server error by a RuntimeException\n\n@param exception the RuntimeException causing this problem", "predict": "Close the connection due to an internal server error. @param exception RuntimeException thrown by the server."}
{"ID": 491, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private ByteBuffer generateHttpResponseDueToError( int errorCode ) { String errorCodeDescription; switch(errorCode) { case 404: errorCodeDescription = \"404 WebSocket Upgrade Failure\"; break; case 500: default: errorCodeDescription = \"500 Internal Server Error\"; } return ByteBuffer.wrap( Charsetfunctions.asciiBytes( \"HTTP/1.1 \" + errorCodeDescription + \"\\r\\nContent-Type: text/html\\nServer: TooTallNate Java-WebSocket\\r\\nContent-Length: \" + ( 48 + errorCodeDescription.length() ) + \"\\r\\n\\r\\n<html><head></head><body><h1>\" + errorCodeDescription + \"</h1></body></html>\" ) ); }. ### Assistant:", "ground_truth": "Generate a simple response for the corresponding endpoint to indicate some error\n\n@param errorCode the http error code\n@return the complete response as ByteBuffer", "predict": "Generates the HTTP response to be sent to the client. @param errorCode The error code to include in the response. @return The ByteBuffer representing the HTTP response."}
{"ID": 492, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void send( String text ) { if( text == null ) throw new IllegalArgumentException( \"Cannot send 'null' data to a WebSocketImpl.\" ); send( draft.createFrames( text, role == Role.CLIENT ) ); }. ### Assistant:", "ground_truth": "Send Text data to the other end.\n\n@throws WebsocketNotConnectedException websocket is not yet connected", "predict": "Send a message to the WebSocketImpl. @param text the message to send. @throws IllegalArgumentException if the message is null."}
{"ID": 493, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void reset() { Thread current = Thread.currentThread(); if (current == writeThread || current == connectReadThread) { throw new IllegalStateException(\"You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup.\"); } try { closeBlocking(); if( writeThread != null ) { this.writeThread.interrupt(); this.writeThread = null; } if( connectReadThread != null ) { this.connectReadThread.interrupt(); this.connectReadThread = null; } this.draft.reset(); if( this.socket != null ) { this.socket.close(); this.socket = null; } } catch ( Exception e ) { onError( e ); engine.closeConnection( CloseFrame.ABNORMAL_CLOSE, e.getMessage() ); return; } connectLatch = new CountDownLatch( 1 ); closeLatch = new CountDownLatch( 1 ); this.engine = new WebSocketImpl( this, this.draft ); }. ### Assistant:", "ground_truth": "Reset everything relevant to allow a reconnect\n@since 1.3.8", "predict": "Reset the WebSocketEngine. This is typically done when a new WebSocketEngine is created. It will close the current connection and reset the draft."}
{"ID": 494, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void connect() { if( connectReadThread != null ) throw new IllegalStateException( \"WebSocketClient objects are not reuseable\" ); connectReadThread = new Thread( this ); connectReadThread.setName( \"WebSocketConnectReadThread-\" + connectReadThread.getId() ); connectReadThread.start(); }. ### Assistant:", "ground_truth": "Initiates the websocket connection. This method does not block.", "predict": "Connect to the server. This method will block until the WebSocket connection is established. If the connection fails, an exception will be thrown. @throws IllegalStateException if a WebSocketClient object is already connected."}
{"ID": 495, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private int getPort() { int port = uri.getPort(); if( port == -1 ) { String scheme = uri.getScheme(); if( \"wss\".equals( scheme ) ) { return WebSocketImpl.DEFAULT_WSS_PORT; } else if( \"ws\".equals( scheme ) ) { return WebSocketImpl.DEFAULT_PORT; } else { throw new IllegalArgumentException( \"unknown scheme: \" + scheme ); } } return port; }. ### Assistant:", "ground_truth": "Extract the specified port\n@return the specified port or the default port for the specific scheme", "predict": "Get the port number from the URI. If the port is not specified, the default port for the scheme is used. If the scheme is not \"ws\" or \"wss\", an IllegalArgumentException is thrown."}
{"ID": 496, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void sendHandshake() throws InvalidHandshakeException { String path; String part1 = uri.getRawPath(); String part2 = uri.getRawQuery(); if( part1 == null || part1.length() == 0 ) path = \"/\"; else path = part1; if( part2 != null ) path += '?' + part2; int port = getPort(); String host = uri.getHost() + ( (port != WebSocketImpl.DEFAULT_PORT && port != WebSocketImpl.DEFAULT_WSS_PORT) ? \":\" + port : \"\" ); HandshakeImpl1Client handshake = new HandshakeImpl1Client(); handshake.setResourceDescriptor( path ); handshake.put( \"Host\", host ); if( headers != null ) { for( Map.Entry<String,String> kv : headers.entrySet() ) { handshake.put( kv.getKey(), kv.getValue() ); } } engine.startHandshake( handshake ); }. ### Assistant:", "ground_truth": "Create and send the handshake to the other endpoint\n@throws InvalidHandshakeException  a invalid handshake was created", "predict": "Send the handshake request. @throws InvalidHandshakeException If the handshake fails."}
{"ID": 497, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void setConnectionLostTimeout( int connectionLostTimeout ) { synchronized (syncConnectionLost) { this.connectionLostTimeout = TimeUnit.SECONDS.toNanos(connectionLostTimeout); if (this.connectionLostTimeout <= 0) { log.trace(\"Connection lost timer stopped\"); cancelConnectionLostTimer(); return; } if (this.websocketRunning) { log.trace(\"Connection lost timer restarted\"); //Reset all the pings try { ArrayList<WebSocket> connections = new ArrayList<WebSocket>(getConnections()); WebSocketImpl webSocketImpl; for (WebSocket conn : connections) { if (conn instanceof WebSocketImpl) { webSocketImpl = (WebSocketImpl) conn; webSocketImpl.updateLastPong(); } } } catch (Exception e) { log.error(\"Exception during connection lost restart\", e); } restartConnectionLostTimer(); } } }. ### Assistant:", "ground_truth": "Setter for the interval checking for lost connections\nA value lower or equal 0 results in the check to be deactivated\n\n@param connectionLostTimeout the interval in seconds\n@since 1.3.4", "predict": "Sets the timeout for the connection lost timer. @param connectionLostTimeout Timeout in nanoseconds."}
{"ID": 498, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void stopConnectionLostTimer() { synchronized (syncConnectionLost) { if (connectionLostCheckerService != null || connectionLostCheckerFuture != null) { this.websocketRunning = false; log.trace(\"Connection lost timer stopped\"); cancelConnectionLostTimer(); } } }. ### Assistant:", "ground_truth": "Stop the connection lost timer\n@since 1.3.4", "predict": "Stop the connection lost timer."}
{"ID": 499, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void startConnectionLostTimer() { synchronized (syncConnectionLost) { if (this.connectionLostTimeout <= 0) { log.trace(\"Connection lost timer deactivated\"); return; } log.trace(\"Connection lost timer started\"); this.websocketRunning = true; restartConnectionLostTimer(); } }. ### Assistant:", "ground_truth": "Start the connection lost timer\n@since 1.3.4", "predict": "Start the timer for connection lost. @see #restartConnectionLostTimer()"}
{"ID": 500, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void restartConnectionLostTimer() { cancelConnectionLostTimer(); connectionLostCheckerService = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory(\"connectionLostChecker\")); Runnable connectionLostChecker = new Runnable() { /** * Keep the connections in a separate list to not cause deadlocks */ private ArrayList<WebSocket> connections = new ArrayList<WebSocket>( ); @Override public void run() { connections.clear(); try { connections.addAll( getConnections() ); long minimumPongTime = (long) (System.nanoTime() - ( connectionLostTimeout * 1.5 )); for( WebSocket conn : connections ) { executeConnectionLostDetection(conn, minimumPongTime); } } catch ( Exception e ) { //Ignore this exception } connections.clear(); } }; connectionLostCheckerFuture = connectionLostCheckerService.scheduleAtFixedRate(connectionLostChecker, connectionLostTimeout, connectionLostTimeout, TimeUnit.NANOSECONDS); }. ### Assistant:", "ground_truth": "This methods allows the reset of the connection lost timer in case of a changed parameter\n@since 1.3.4", "predict": "Restarts the connectionLostTimer."}
{"ID": 501, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void executeConnectionLostDetection(WebSocket webSocket, long minimumPongTime) { if (!(webSocket instanceof WebSocketImpl)) { return; } WebSocketImpl webSocketImpl = (WebSocketImpl) webSocket; if( webSocketImpl.getLastPong() < minimumPongTime ) { log.trace(\"Closing connection due to no pong received: {}\", webSocketImpl); webSocketImpl.closeConnection( CloseFrame.ABNORMAL_CLOSE, \"The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection\" ); } else { if( webSocketImpl.isOpen() ) { webSocketImpl.sendPing(); } else { log.trace(\"Trying to ping a non open connection: {}\", webSocketImpl); } } }. ### Assistant:", "ground_truth": "Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping\n@param webSocket the websocket instance\n@param minimumPongTime the lowest/oldest allowable last pong time (in nanoTime) before we consider the connection to be lost", "predict": "This method is called when a WebSocket connection is lost. It checks if the connection was closed abnormally and if so, sends a ping to the other endpoint. If the ping is not responded to, the connection is closed."}
{"ID": 502, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void cancelConnectionLostTimer() { if( connectionLostCheckerService != null ) { connectionLostCheckerService.shutdownNow(); connectionLostCheckerService = null; } if( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture.cancel(false); connectionLostCheckerFuture = null; } }. ### Assistant:", "ground_truth": "Cancel any running timer for the connection lost detection\n@since 1.3.4", "predict": "Cancel the connection lost timer."}
{"ID": 503, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public ServerHandshakeBuilder onWebsocketHandshakeReceivedAsServer( WebSocket conn, Draft draft, ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server(); }. ### Assistant:", "ground_truth": "This default implementation does not do anything. Go ahead and overwrite it.\n\n@see org.java_websocket.WebSocketListener#onWebsocketHandshakeReceivedAsServer(WebSocket, Draft, ClientHandshake)", "predict": "Implement the handshake logic for WebSocket clients. This is used when the WebSocket client is acting as the server. @param conn the WebSocket connection @param draft the draft of the WebSocket protocol @param request the client's handshake request @return a new ServerHandshakeBuilder @throws InvalidDataException if the handshake request is invalid"}
{"ID": 504, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void onWebsocketPing( WebSocket conn, Framedata f ) { conn.sendFrame( new PongFrame( (PingFrame)f ) ); }. ### Assistant:", "ground_truth": "This default implementation will send a pong in response to the received ping.\nThe pong frame will have the same payload as the ping frame.\n\n@see org.java_websocket.WebSocketListener#onWebsocketPing(WebSocket, Framedata)", "predict": "Send a ping frame back to the client."}
{"ID": 505, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void stop( int timeout ) throws InterruptedException { if( !isclosed.compareAndSet( false, true ) ) { // this also makes sure that no further connections will be added to this.connections return; } List<WebSocket> socketsToClose; // copy the connections in a list (prevent callback deadlocks) synchronized ( connections ) { socketsToClose = new ArrayList<WebSocket>( connections ); } for( WebSocket ws : socketsToClose ) { ws.close( CloseFrame.GOING_AWAY ); } wsf.close(); synchronized ( this ) { if( selectorthread != null && selector != null) { selector.wakeup(); selectorthread.join( timeout ); } } }. ### Assistant:", "ground_truth": "Closes all connected clients sockets, then closes the underlying\nServerSocketChannel, effectively killing the server socket selectorthread,\nfreeing the port the server was bound to and stops all internal workerthreads.\n\nIf this method is called before the server is started it will never start.\n\n@param timeout\nSpecifies how many milliseconds the overall close handshaking may take altogether before the connections are closed without proper close handshaking.<br>\n\n@throws InterruptedException Interrupt", "predict": "Stop the WebSocket server. This will close all connected WebSocket clients. The server will wait for a timeout before closing the selector thread. @param timeout Timeout in milliseconds. @throws InterruptedException If the thread was interrupted while waiting for the timeout."}
{"ID": 506, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public int getPort() { int port = getAddress().getPort(); if( port == 0 && server != null ) { port = server.socket().getLocalPort(); } return port; }. ### Assistant:", "ground_truth": "Gets the port number that this server listens on.\n\n@return The port number.", "predict": "Get the port number. If the port is not set, it will try to get the port from the server socket. @return the port number."}
{"ID": 507, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void doAdditionalRead() throws InterruptedException, IOException { WebSocketImpl conn; while ( !iqueue.isEmpty() ) { conn = iqueue.remove( 0 ); WrappedByteChannel c = ( (WrappedByteChannel) conn.getChannel() ); ByteBuffer buf = takeBuffer(); try { if( SocketChannelIOHelper.readMore( buf, conn, c ) ) iqueue.add( conn ); if( buf.hasRemaining() ) { conn.inQueue.put( buf ); queue( conn ); } else { pushBuffer( buf ); } } catch ( IOException e ) { pushBuffer( buf ); throw e; } } }. ### Assistant:", "ground_truth": "Do an additional read\n@throws InterruptedException thrown by taking a buffer\n@throws IOException if an error happened during read", "predict": "Read more from the channel if possible. If not, add the buffer to the channel's inQueue."}
{"ID": 508, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void doAccept(SelectionKey key, Iterator<SelectionKey> i) throws IOException, InterruptedException { if( !onConnect( key ) ) { key.cancel(); return; } SocketChannel channel = server.accept(); if(channel==null){ return; } channel.configureBlocking( false ); Socket socket = channel.socket(); socket.setTcpNoDelay( isTcpNoDelay() ); socket.setKeepAlive( true ); WebSocketImpl w = wsf.createWebSocket( this, drafts ); w.setSelectionKey(channel.register( selector, SelectionKey.OP_READ, w )); try { w.setChannel( wsf.wrapChannel( channel, w.getSelectionKey() )); i.remove(); allocateBuffers( w ); } catch (IOException ex) { if( w.getSelectionKey() != null ) w.getSelectionKey().cancel(); handleIOException( w.getSelectionKey(), null, ex ); } }. ### Assistant:", "ground_truth": "Execute a accept operation\n@param key the selectionkey to read off\n@param i the iterator for the selection keys\n@throws InterruptedException  thrown by taking a buffer\n@throws IOException if an error happened during accept", "predict": "Accept incoming connections. @param key SelectionKey @param i Iterator of SelectionKeys to be closed @throws IOException if an IOException occurs @throws InterruptedException if interrupted"}
{"ID": 509, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private boolean doRead(SelectionKey key, Iterator<SelectionKey> i) throws InterruptedException, IOException { WebSocketImpl conn = (WebSocketImpl) key.attachment(); ByteBuffer buf = takeBuffer(); if(conn.getChannel() == null){ key.cancel(); handleIOException( key, conn, new IOException() ); return false; } try { if( SocketChannelIOHelper.read( buf, conn, conn.getChannel() ) ) { if( buf.hasRemaining() ) { conn.inQueue.put( buf ); queue( conn ); i.remove(); if( conn.getChannel() instanceof WrappedByteChannel && ( (WrappedByteChannel) conn.getChannel() ).isNeedRead() ) { iqueue.add( conn ); } } else { pushBuffer(buf); } } else { pushBuffer( buf ); } } catch ( IOException e ) { pushBuffer( buf ); throw e; } return true; }. ### Assistant:", "ground_truth": "Execute a read operation\n@param key the selectionkey to read off\n@param i the iterator for the selection keys\n@return true, if the read was successful, or false if there was an error\n@throws InterruptedException thrown by taking a buffer\n@throws IOException if an error happened during read", "predict": "Read from the channel. @param key SelectionKey @param i Iterator<SelectionKey> @return true if read succeed, false otherwise @throws InterruptedException @throws IOException"}
{"ID": 510, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void doWrite(SelectionKey key) throws IOException { WebSocketImpl conn = (WebSocketImpl) key.attachment(); if( SocketChannelIOHelper.batch( conn, conn.getChannel() ) ) { if( key.isValid() ) { key.interestOps(SelectionKey.OP_READ); } } }. ### Assistant:", "ground_truth": "Execute a write operation\n@param key the selectionkey to write on\n@throws IOException if an error happened during batch", "predict": "Write to the channel. If the channel is in the middle of a batch, wait until it's done. @param key SelectionKey @throws IOException"}
{"ID": 511, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private boolean doSetupSelectorAndServerThread() { selectorthread.setName( \"WebSocketSelector-\" + selectorthread.getId() ); try { server = ServerSocketChannel.open(); server.configureBlocking( false ); ServerSocket socket = server.socket(); socket.setReceiveBufferSize( WebSocketImpl.RCVBUF ); socket.setReuseAddress( isReuseAddr() ); socket.bind( address ); selector = Selector.open(); server.register( selector, server.validOps() ); startConnectionLostTimer(); for( WebSocketWorker ex : decoders ){ ex.start(); } onStart(); } catch ( IOException ex ) { handleFatal( null, ex ); return false; } return true; }. ### Assistant:", "ground_truth": "Setup the selector thread as well as basic server settings\n@return true, if everything was successful, false if some error happened", "predict": "Set up the selector and server threads. @return true if successful, false otherwise."}
{"ID": 512, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private boolean doEnsureSingleThread() { synchronized ( this ) { if( selectorthread != null ) throw new IllegalStateException( getClass().getName() + \" can only be started once.\" ); selectorthread = Thread.currentThread(); if( isclosed.get() ) { return false; } } return true; }. ### Assistant:", "ground_truth": "The websocket server can only be started once\n@return true, if the server can be started, false if already a thread is running", "predict": "Ensure that the thread is only running once. @return true if the thread is running, false if it is closed."}
{"ID": 513, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void doServerShutdown() { stopConnectionLostTimer(); if( decoders != null ) { for( WebSocketWorker w : decoders ) { w.interrupt(); } } if( selector != null ) { try { selector.close(); } catch ( IOException e ) { log.error( \"IOException during selector.close\", e ); onError( null, e ); } } if( server != null ) { try { server.close(); } catch ( IOException e ) { log.error( \"IOException during server.close\", e ); onError( null, e ); } } }. ### Assistant:", "ground_truth": "Clean up everything after a shutdown", "predict": "Shutdown the server."}
{"ID": 514, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private Socket getSocket( WebSocket conn ) { WebSocketImpl impl = (WebSocketImpl) conn; return ( (SocketChannel) impl.getSelectionKey().channel() ).socket(); }. ### Assistant:", "ground_truth": "Getter to return the socket used by this specific connection\n@param conn The specific connection\n@return The socket used by this connection", "predict": "Get the socket associated with the WebSocket connection. This is done by looking at the SelectionKey associated with the WebSocket connection. @param conn The WebSocket connection. @return The socket associated with the WebSocket connection."}
{"ID": 515, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void broadcast(byte[] data, Collection<WebSocket> clients) { if (data == null || clients == null) { throw new IllegalArgumentException(); } broadcast(ByteBuffer.wrap(data), clients); }. ### Assistant:", "ground_truth": "Send a byte array to a specific collection of websocket connections\n@param data the data to send to the endpoints\n@param clients a collection of endpoints to whom the text has to be send", "predict": "Broadcasts the given data to all connected clients. @param data the data to broadcast. @param clients the clients to broadcast to."}
{"ID": 516, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void broadcast(String text, Collection<WebSocket> clients) { if (text == null || clients == null) { throw new IllegalArgumentException(); } doBroadcast(text, clients); }. ### Assistant:", "ground_truth": "Send a text to a specific collection of websocket connections\n@param text the text to send to the endpoints\n@param clients a collection of endpoints to whom the text has to be send", "predict": "Broadcast the message to all connected clients. @param text message to broadcast @param clients clients to broadcast to"}
{"ID": 517, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void doBroadcast(Object data, Collection<WebSocket> clients) { String sData = null; if (data instanceof String) { sData = (String)data; } ByteBuffer bData = null; if (data instanceof ByteBuffer) { bData = (ByteBuffer)data; } if (sData == null && bData == null) { return; } Map<Draft, List<Framedata>> draftFrames = new HashMap<Draft, List<Framedata>>(); for( WebSocket client : clients ) { if( client != null ) { Draft draft = client.getDraft(); fillFrames(draft, draftFrames, sData, bData); try { client.sendFrame( draftFrames.get( draft ) ); } catch ( WebsocketNotConnectedException e ) { //Ignore this exception in this case } } } }. ### Assistant:", "ground_truth": "Private method to cache all the frames to improve memory footprint and conversion time\n@param data the data to broadcast\n@param clients the clients to send the message to", "predict": "Broadcast the data to all connected clients."}
{"ID": 518, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void fillFrames(Draft draft, Map<Draft, List<Framedata>> draftFrames, String sData, ByteBuffer bData) { if( !draftFrames.containsKey( draft ) ) { List<Framedata> frames = null; if (sData != null) { frames = draft.createFrames( sData, false ); } if (bData != null) { frames = draft.createFrames( bData, false ); } if (frames != null) { draftFrames.put(draft, frames); } } }. ### Assistant:", "ground_truth": "Fills the draftFrames with new data for the broadcast\n@param draft The draft to use\n@param draftFrames The list of frames per draft to fill\n@param sData the string data, can be null\n@param bData the bytebuffer data, can be null", "predict": "Fills the draft frames map with frames created from the draft data. @param draft the draft to fill the frames map with. @param draftFrames the draft frames map. @param sData the data to create frames from. @param bData the binary data to create frames from."}
{"ID": 519, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int transferByteBuffer( ByteBuffer source, ByteBuffer dest ) { if( source == null || dest == null ) { throw new IllegalArgumentException(); } int fremain = source.remaining(); int toremain = dest.remaining(); if( fremain > toremain ) { int limit = Math.min( fremain, toremain ); source.limit( limit ); dest.put( source ); return limit; } else { dest.put( source ); return fremain; } }. ### Assistant:", "ground_truth": "Transfer from one ByteBuffer to another ByteBuffer\n\n@param source the ByteBuffer to copy from\n@param dest   the ByteBuffer to copy to\n@return the number of transferred bytes", "predict": "Transfer bytes between two ByteBuffer. If the source buffer is not enough to fill the destination, it will be filled with the remaining bytes of the source buffer. If the destination buffer is not enough to hold the bytes, it will be filled with the remaining bytes of the source buffer. The remaining bytes of the source buffer will be set to zero. @param source source buffer @param dest destination buffer @return the number of bytes transferred."}
{"ID": 520, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public JPAApi start() { jpaConfig .persistenceUnits() .forEach( persistenceUnit -> emfs.put( persistenceUnit.name, Persistence.createEntityManagerFactory(persistenceUnit.unitName))); return this; }. ### Assistant:", "ground_truth": "Initialise JPA entity manager factories.", "predict": "Start the JPA container. @return JPAApi object for further operations."}
{"ID": 521, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public EntityManager em(String name) { EntityManagerFactory emf = emfs.get(name); if (emf == null) { return null; } return emf.createEntityManager(); }. ### Assistant:", "ground_truth": "Get a newly created EntityManager for the specified persistence unit name.\n\n@param name The persistence unit name", "predict": "Returns an EntityManager for the given name. If the EntityManagerFactory is not found, it will return null. @param name The name of the EntityManagerFactory. @return An EntityManager for the given name."}
{"ID": 522, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void withTransaction(Consumer<EntityManager> block) { withTransaction( em -> { block.accept(em); return null; }); }. ### Assistant:", "ground_truth": "Run a block of code with a newly created EntityManager for the default Persistence Unit.\n\n@param block Block of code to execute", "predict": "Blocks the execution of the current transaction until the given consumer is called. The consumer is executed with the current EntityManager. @param block The consumer to be executed."}
{"ID": 523, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static Seq<Object> convertArgsToScalaBuffer(final Object... args) { return scala.collection.JavaConverters.asScalaBufferConverter(wrapArgsToListIfNeeded(args)) .asScala() .toList(); }. ### Assistant:", "ground_truth": "Converts the varargs to a scala buffer, takes care of wrapping varargs into a intermediate list\nif necessary\n\n@param args the message arguments\n@return scala type for message processing", "predict": "Convert the given Java args to Scala Seq."}
{"ID": 524, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SafeVarargs private static <T> List<T> wrapArgsToListIfNeeded(final T... args) { List<T> out; if (args != null && args.length == 1 && args[0] instanceof List) { out = (List<T>) args[0]; } else { out = Arrays.asList(args); } return out; }. ### Assistant:", "ground_truth": "Wraps arguments passed into a list if necessary.\n\n<p>Returns the first value as is if it is the only argument and a subtype of `java.util.List`\nOtherwise, it calls Arrays.asList on args\n\n@param args arguments as a List", "predict": "Wraps argsToListIfNeeded if args is a single list. If args is not a single list, it wraps the args in a list. @param args the args @return the list"}
{"ID": 525, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String get(play.api.i18n.Lang lang, String key, Object... args) { Seq<Object> scalaArgs = convertArgsToScalaBuffer(args); return messages.apply(key, scalaArgs, lang); }. ### Assistant:", "ground_truth": "Translates a message.\n\n<p>Uses `java.text.MessageFormat` internally to format the message.\n\n@param lang the message lang\n@param key the message key\n@param args the message arguments\n@return the formatted message or a default rendering if the key wasn't defined", "predict": "Get a message from the messages map. The message is looked up by key, and if found, the message is translated into the specified language. If the message is not found, the default message is returned. The message is looked up by key, and if found, the message is translated into the specified language. If the message is not found, the default message is returned. If the message is found, it is translated using the specified arguments. If the message is not found, the default message is returned. If the message is found, it is translated using the specified arguments. If the message is found, it is translated using the specified arguments. If the message is found, it is translated using the specified arguments. If the message is found, it is translated using the specified arguments. If the message is found, it is translated using the specified arguments. If the message is found, it is translated using the specified arguments. If the message is found, it is translated using the specified arguments. If the message is found, it is translated using the specified arguments. If"}
{"ID": 526, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String get(play.api.i18n.Lang lang, List<String> keys, Object... args) { Buffer<String> keyArgs = scala.collection.JavaConverters.asScalaBufferConverter(keys).asScala(); Seq<Object> scalaArgs = convertArgsToScalaBuffer(args); return messages.apply(keyArgs.toSeq(), scalaArgs, lang); }. ### Assistant:", "ground_truth": "Translates the first defined message.\n\n<p>Uses `java.text.MessageFormat` internally to format the message.\n\n@param lang the message lang\n@param keys the messages keys\n@param args the message arguments\n@return the formatted message or a default rendering if the key wasn't defined", "predict": "Get a message for the given keys and args. The keys are resolved against the given lang. @param lang the lang to resolve the keys against @param keys the keys to retrieve the message for @param args the args to use in the message @return the message"}
{"ID": 527, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Boolean isDefinedAt(play.api.i18n.Lang lang, String key) { return messages.isDefinedAt(key, lang); }. ### Assistant:", "ground_truth": "Check if a message key is defined.\n\n@param lang the message lang\n@param key the message key\n@return a Boolean", "predict": "Returns whether the message is defined in the given lang. @param lang the lang to check against @param key the key to check @return true if the message is defined in the given lang, false otherwise"}
{"ID": 528, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Messages preferred(Collection<Lang> candidates) { Seq<Lang> cs = Scala.asScala(candidates); play.api.i18n.Messages msgs = messages.preferred((Seq) cs); return new MessagesImpl(new Lang(msgs.lang()), this); }. ### Assistant:", "ground_truth": "Get a messages context appropriate for the given candidates.\n\n<p>Will select a language from the candidates, based on the languages available, and fallback\nto the default language if none of the candidates are available.\n\n@param candidates the candidate languages\n@return the most appropriate Messages instance given the candidate languages", "predict": "Preferred messages. @param candidates the languages to use as preferred messages. @return a new MessagesImpl instance."}
{"ID": 529, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Messages preferred(Http.RequestHeader request) { play.api.i18n.Messages msgs = messages.preferred(request); return new MessagesImpl(new Lang(msgs.lang()), this); }. ### Assistant:", "ground_truth": "Get a messages context appropriate for the given request.\n\n<p>Will select a language from the request, based on the languages available, and fallback to\nthe default language if none of the candidates are available.\n\n@param request the incoming request\n@return the preferred messages context for the request", "predict": "Returns the messages for the preferred language. @param request The request headers. @return The messages."}
{"ID": 530, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Result setLang(Result result, Lang lang) { return messages.setLang(result.asScala(), lang).asJava(); }. ### Assistant:", "ground_truth": "Given a Result and a Lang, return a new Result with the lang cookie set to the given Lang.\n\n@param result the result where the lang will be set.\n@param lang the lang to set on the result\n@return a new result with the lang.", "predict": "Sets the lang attribute of the result. @param result the result to update @param lang the lang attribute to set @return the updated result"}
{"ID": 531, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public final Self bindings(GuiceableModule... modules) { return newBuilder(delegate.bindings(Scala.varargs(modules))); }. ### Assistant:", "ground_truth": "Add bindings from guiceable modules.\n\n@param modules the set of modules to bind\n@return a copy of this builder configured with those modules", "predict": "Bindings are notified of the creation of the module, and are asked to bind their dependencies. @param modules Modules to bind dependencies for. @return Self."}
{"ID": 532, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public final Self bindings(play.api.inject.Module... modules) { return bindings(Guiceable.modules(modules)); }. ### Assistant:", "ground_truth": "Add bindings from Play modules.\n\n@param modules the set of Guice modules whose bindings to apply\n@return a copy of this builder configured with the provided bindings", "predict": "Bindings method. @param modules modules to bind @return self"}
{"ID": 533, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public final Self bindings(play.api.inject.Binding<?>... bindings) { return bindings(Guiceable.bindings(bindings)); }. ### Assistant:", "ground_truth": "Add Play bindings.\n\n@param bindings the set of play bindings to apply\n@return a copy of this builder configured with the provided bindings", "predict": "Bindings are injected into the scope. @param bindings the bindings to inject. @return the self object."}
{"ID": 534, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public final Self overrides(GuiceableModule... modules) { return newBuilder(delegate.overrides(Scala.varargs(modules))); }. ### Assistant:", "ground_truth": "Override bindings using guiceable modules.\n\n@param modules the set of Guice modules whose bindings override some previously configured ones\n@return a copy of this builder re-configured with the provided bindings", "predict": "Override the bindings of these modules in this module. @param modules the modules to override. @return this builder."}
{"ID": 535, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public final Self overrides(play.api.inject.Module... modules) { return overrides(Guiceable.modules(modules)); }. ### Assistant:", "ground_truth": "Override bindings using Play modules.\n\n@param modules the set of Play modules whose bindings override some previously configured ones\n@return a copy of this builder re-configured with the provided bindings", "predict": "Overrides the bindings of this module with the given modules. @param modules the modules to override @return this"}
{"ID": 536, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public final Self overrides(play.api.inject.Binding<?>... bindings) { return overrides(Guiceable.bindings(bindings)); }. ### Assistant:", "ground_truth": "Override bindings using Play bindings.\n\n@param bindings a set of Play bindings that override some previously configured ones\n@return a copy of this builder re-configured with the provided bindings", "predict": "Overrides the bindings of this module. @param bindings the bindings to override. @return the self."}
{"ID": 537, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public final Self disable(Class<?>... moduleClasses) { return newBuilder(delegate.disable(Scala.toSeq(moduleClasses))); }. ### Assistant:", "ground_truth": "Disable modules by class.\n\n@param moduleClasses the module classes whose bindings should be disabled\n@return a copy of this builder configured to ignore the provided module classes", "predict": "Disable the given modules. @param moduleClasses The modules to disable. @return The builder."}
{"ID": 538, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Deprecated // TODO: When you remove this method make call(Request) below abstract public CompletionStage<Result> call(Context ctx) { return call( ctx.args != null && !ctx.args.isEmpty() ? ctx.request().addAttr(CTX_ARGS, ctx.args) : ctx.request()); }. ### Assistant:", "ground_truth": "Executes this action with the given HTTP context and returns the result.\n\n@param ctx the http context in which to execute this action\n@return a promise to the action's result\n@deprecated Since 2.7.0. Use {@link #call(Request)} instead. Please see <a\nhref=\"https://www.playframework.com/documentation/latest/JavaHttpContextMigration27\">the\nmigration guide</a> for more details.", "predict": "This is a deprecated method. It is recommended to use the `call` method instead."}
{"ID": 539, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public CompletionStage<Result> call( Request req) { // TODO: Make this method abstract after removing call(Context) return Context.safeCurrent() .map( threadLocalCtx -> { // A previous action did explicitly set a context onto the thread local (via // Http.Context.current.set(...)) // Let's use that context so the user doesn't loose data he/she set onto that ctx // (args,...) Context newCtx = threadLocalCtx.withRequest(req.removeAttr(CTX_ARGS)); Context.setCurrent(newCtx); return call(newCtx); }) .orElseGet( () -> { // A previous action did not set a context explicitly, we simply create a new one to // pass on the request Context ctx = new Context(req.removeAttr(CTX_ARGS), contextComponents); ctx.args = req.attrs().getOptional(CTX_ARGS).orElse(new HashMap<>()); return call(ctx); }); }. ### Assistant:", "ground_truth": "Executes this action with the given HTTP request and returns the result.\n\n@param req the http request with which to execute this action\n@return a promise to the action's result", "predict": "Call the handler with the given request and ctx. If no ctx is set explicitly, it will create a new one with the given request. If no ctx is set explicitly, it will create a new one with the given request. @param req the request to pass to the handler @return a completion stage representing the result of the handler's execution"}
{"ID": 540, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Optional<File> getExistingFile(String relativePath) { return OptionConverters.toJava(env.getExistingFile(relativePath)); }. ### Assistant:", "ground_truth": "Retrieves a file relative to the application root path. This method returns an Optional, using\nempty if the file was not found.\n\n@param relativePath relative path of the file to fetch\n@return an existing file", "predict": "Get an existing file in the current working directory. @param relativePath The relative path to the file. @return The file, or an empty Optional if the file does not exist."}
{"ID": 541, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <A extends Annotation> Binding<T> in(final Class<A> scope) { return underlying.in(scope).asJava(); }. ### Assistant:", "ground_truth": "Configure the scope for this binding.", "predict": "Injects an instance of the specified annotation type. @param scope the scope of the injection. @param <A> the type of the annotation. @return the binding for the injection."}
{"ID": 542, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <A, B> Tuple<A, B> Tuple(A a, B b) { return new Tuple<A, B>(a, b); }. ### Assistant:", "ground_truth": "Constructs a tuple of A,B\n\n@param a The a value\n@param b The b value\n@param <A> a's type\n@param <B> b's type\n@return The tuple", "predict": "Create a new tuple with two elements."}
{"ID": 543, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <A, B, C, D, E> Tuple5<A, B, C, D, E> Tuple5(A a, B b, C c, D d, E e) { return new Tuple5<A, B, C, D, E>(a, b, c, d, e); }. ### Assistant:", "ground_truth": "Constructs a tuple of A,B,C,D,E\n\n@param a The a value\n@param b The b value\n@param c The c value\n@param d The d value\n@param e The e value\n@param <A> a's type\n@param <B> b's type\n@param <C> c's type\n@param <D> d's type\n@param <E> e's type\n@return The tuple", "predict": "Create a Tuple5 from the given values."}
{"ID": 544, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static Executor toExecutor(ExecutionContext ec) { ExecutionContext prepared = ec.prepare(); if (prepared instanceof Executor) { return (Executor) prepared; } else { return prepared::execute; } }. ### Assistant:", "ground_truth": "Converts the execution context to an executor, preparing it first.\n\n@param ec the execution context.\n@return the Java Executor.", "predict": "Wraps an ExecutionContext into an Executor."}
{"ID": 545, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static JPAConfig of(String name, String unitName) { return new DefaultJPAConfig(new JPAConfig.PersistenceUnit(name, unitName)); }. ### Assistant:", "ground_truth": "Create a default JPA configuration with the given name and unit name.\n\n@param name the name for the entity manager factory\n@param unitName the persistence unit name as used in `persistence.xml`\n@return a default JPA configuration", "predict": "Create a JPAConfig with a given name and unitName. @param name the name of the persistence unit @param unitName the unitName of the persistence unit @return the JPAConfig"}
{"ID": 546, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static JPAConfig of(String n1, String u1, String n2, String u2) { return new DefaultJPAConfig( new JPAConfig.PersistenceUnit(n1, u1), new JPAConfig.PersistenceUnit(n2, u2)); }. ### Assistant:", "ground_truth": "Create a default JPA configuration with the given names and unit names.\n\n@param n1 Name of the first entity manager factory\n@param u1 Name of the first unit\n@param n2 Name of the second entity manager factory\n@param u2 Name of the second unit\n@return a default JPA configuration with the provided persistence units.", "predict": "Create a JPAConfig with two persistence units. @param n1 the name of the first persistence unit @param u1 the unit's unique name @param n2 the name of the second persistence unit @param u2 the unit's unique name @return the JPAConfig instance"}
{"ID": 547, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static JPAConfig from(Map<String, String> map) { ImmutableSet.Builder<JPAConfig.PersistenceUnit> persistenceUnits = new ImmutableSet.Builder<JPAConfig.PersistenceUnit>(); for (Map.Entry<String, String> entry : map.entrySet()) { persistenceUnits.add(new JPAConfig.PersistenceUnit(entry.getKey(), entry.getValue())); } return new DefaultJPAConfig(persistenceUnits.build()); }. ### Assistant:", "ground_truth": "Create a default JPA configuration from a map of names to unit names.\n\n@param map Map of entity manager factory names to unit names\n@return a JPAConfig configured with the provided mapping", "predict": "Creates a JPAConfig from a map of persistence units. The map should contain a key for the persistence unit name and a value for the persistence unit properties. @param map A map of persistence units. @return A JPAConfig populated from the map."}
{"ID": 548, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Flow<String, ByteString, NotUsed> string(String callbackName) { return Flow.of(String.class) .map( str -> { return ByteString.fromString(\"'\" + StringEscapeUtils.escapeEcmaScript(str) + \"'\"); }) .via(flow(callbackName)); }. ### Assistant:", "ground_truth": "Produces a Flow of escaped ByteString from a series of String elements. Calls out to Comet.flow\ninternally.\n\n@param callbackName the javascript callback method.\n@return a flow of ByteString elements.", "predict": "Converts a string to a ByteString. The resulting ByteString is a JSON string. @param callbackName The name of the callback function. @return A Flow that converts a string to a ByteString."}
{"ID": 549, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Flow<JsonNode, ByteString, NotUsed> json(String callbackName) { return Flow.of(JsonNode.class) .map( json -> { return ByteString.fromString(Json.stringify(json)); }) .via(flow(callbackName)); }. ### Assistant:", "ground_truth": "Produces a flow of ByteString using `Json.stringify` from a Flow of JsonNode. Calls out to\nComet.flow internally.\n\n@param callbackName the javascript callback method.\n@return a flow of ByteString elements.", "predict": "Send a JSON object to a server and receive a response. @param callbackName The name of the callback function to be invoked on the server. @return A Flow that emits the JSON object and its response."}
{"ID": 550, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <T extends ConstraintValidator<?, ?>> MappedConstraintValidatorFactory addConstraintValidator(Class<T> key, T constraintValidator) { validators.put(key, () -> constraintValidator); return this; }. ### Assistant:", "ground_truth": "Adds validator as a singleton.\n\n@param key the constraint validator type\n@param constraintValidator the constraint validator instance\n@param <T> the type of constraint validator implementation\n@return {@link MappedConstraintValidatorFactory} with the given constraint validator added.", "predict": "Registers a constraint validator factory for a specific key. The key is used to retrieve the constraint validator factory when a constraint is needed. The constraint validator factory is registered with the key. @param key the key for the constraint validator factory @param constraintValidator the constraint validator factory @return this factory for chaining"}
{"ID": 551, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private <T extends ConstraintValidator<?, ?>> T newInstance(Class<T> key) { try { return key.getDeclaredConstructor().newInstance(); } catch (InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex) { throw new RuntimeException(ex); } }. ### Assistant:", "ground_truth": "need to do so.", "predict": "Create a new instance of the constraint validator."}
{"ID": 552, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Method getMatchingAccessibleMethod( final Class<?> cls, final String methodName, final Class<?>... parameterTypes) { try { final Method method = cls.getMethod(methodName, parameterTypes); MemberUtils.setAccessibleWorkaround(method); return method; } catch (final NoSuchMethodException e) { // NOPMD - Swallow the exception } // search through all methods Method bestMatch = null; final Method[] methods = cls.getMethods(); for (final Method method : methods) { // compare name and parameters if (method.getName().equals(methodName) && MemberUtils.isMatchingMethod(method, parameterTypes)) { // get accessible version of method final Method accessibleMethod = getAccessibleMethod(method); if (accessibleMethod != null && (bestMatch == null || MemberUtils.compareMethodFit(accessibleMethod, bestMatch, parameterTypes) < 0)) { bestMatch = accessibleMethod; } } } if (bestMatch != null) { MemberUtils.setAccessibleWorkaround(bestMatch); } if (bestMatch != null && bestMatch.isVarArgs() && bestMatch.getParameterTypes().length > 0 && parameterTypes.length > 0) { final Class<?>[] methodParameterTypes = bestMatch.getParameterTypes(); final Class<?> methodParameterComponentType = methodParameterTypes[methodParameterTypes.length - 1].getComponentType(); final String methodParameterComponentTypeName = ClassUtils.primitiveToWrapper(methodParameterComponentType).getName(); final String parameterTypeName = parameterTypes[parameterTypes.length - 1].getName(); final String parameterTypeSuperClassName = parameterTypes[parameterTypes.length - 1].getSuperclass().getName(); if (!methodParameterComponentTypeName.equals(parameterTypeName) && !methodParameterComponentTypeName.equals(parameterTypeSuperClassName)) { return null; } } return bestMatch; }. ### Assistant:", "ground_truth": "Finds an accessible method that matches the given name and has compatible parameters.\nCompatible parameters mean that every method parameter is assignable from the given parameters.\nIn other words, it finds a method with the given name that will take the parameters given.\n\n<p>This method can match primitive parameter by passing in wrapper classes. For example, a\n{@code Boolean} will match a primitive {@code boolean} parameter.\n\n@param cls find method in this class\n@param methodName find method with this name\n@param parameterTypes find method with most compatible parameters\n@return The accessible method", "predict": "Finds the first accessible method that matches the given method name and parameter types. If the method is varargs, the last parameter type is compared with the last parameter type of the given parameter types. If the method is not accessible, returns null. @param cls the class to search in @param methodName the name of the method to find @param parameterTypes the parameter types of the method to find @return the first accessible method that matches the given method name and parameter types or null if no such method is found"}
{"ID": 553, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public CompletionStage<Result> onClientError( RequestHeader request, int statusCode, String message) { if (statusCode == 400) { return onBadRequest(request, message); } else if (statusCode == 403) { return onForbidden(request, message); } else if (statusCode == 404) { return onNotFound(request, message); } else if (statusCode >= 400 && statusCode < 500) { return onOtherClientError(request, statusCode, message); } else { throw new IllegalArgumentException( \"onClientError invoked with non client error status code \" + statusCode + \": \" + message); } }. ### Assistant:", "ground_truth": "Invoked when a client error occurs, that is, an error in the 4xx series.\n\n<p>The base implementation calls onBadRequest, onForbidden, onNotFound, or onOtherClientError\ndepending on the HTTP status code.\n\n@param request The request that caused the client error.\n@param statusCode The error status code. Must be greater or equal to 400, and less than 500.\n@param message The error message.\n@return a CompletionStage containing the Result.", "predict": "Handle a client error. @param request the request that caused the error @param statusCode the HTTP status code of the error @param message the error message @return a result indicating the outcome of the request"}
{"ID": 554, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected CompletionStage<Result> onBadRequest(RequestHeader request, String message) { return CompletableFuture.completedFuture( Results.badRequest( views.html.defaultpages.badRequest.render( request.method(), request.uri(), message, request.asScala()))); }. ### Assistant:", "ground_truth": "Invoked when a client makes a bad request.\n\n<p>Returns Results.badRequest (400) with the included template from {@code\nviews.html.defaultpages.badRequest} as the content.\n\n@param request The request that was bad.\n@param message The error message.\n@return a CompletionStage containing the Result.", "predict": "Handle bad request. @param request the incoming request @param message the error message @return the result"}
{"ID": 555, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected CompletionStage<Result> onForbidden(RequestHeader request, String message) { return CompletableFuture.completedFuture( Results.forbidden(views.html.defaultpages.unauthorized.render(request.asScala()))); }. ### Assistant:", "ground_truth": "Invoked when a client makes a request that was forbidden.\n\n<p>Returns Results.forbidden (401) with the included template from {@code\nviews.html.defaultpages.unauthorized} as the content.\n\n@param request The forbidden request.\n@param message The error message.\n@return a CompletionStage containing the Result.", "predict": "This is called when the user is not authorized to access the requested resource. @param request the request @param message the message to display @return the result to be returned to the client"}
{"ID": 556, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected CompletionStage<Result> onNotFound(RequestHeader request, String message) { if (environment.isProd()) { return CompletableFuture.completedFuture( Results.notFound( views.html.defaultpages.notFound.render( request.method(), request.uri(), request.asScala()))); } else { return CompletableFuture.completedFuture( Results.notFound( views.html.defaultpages.devNotFound.render( request.method(), request.uri(), Some.apply(routes.get()), request.asScala()))); } }. ### Assistant:", "ground_truth": "Invoked when a handler or resource is not found.\n\n<p>If the environment's mode is production, then returns Results.notFound (404) with the\nincluded template from `views.html.defaultpages.notFound` as the content.\n\n<p>Otherwise, Results.notFound (404) is rendered with {@code\nviews.html.defaultpages.devNotFound} template.\n\n@param request The request that no handler was found to handle.\n@param message A message, which is not used by the default implementation.\n@return a CompletionStage containing the Result.", "predict": "Renders the not found page. @param request The incoming request. @param message The message to display. @return The result to return."}
{"ID": 557, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public CompletionStage<Result> onServerError(RequestHeader request, Throwable exception) { try { UsefulException usefulException = throwableToUsefulException(exception); logServerError(request, usefulException); switch (environment.mode()) { case PROD: return onProdServerError(request, usefulException); default: return onDevServerError(request, usefulException); } } catch (Exception e) { logger.error(\"Error while handling error\", e); return CompletableFuture.completedFuture(Results.internalServerError()); } }. ### Assistant:", "ground_truth": "Invoked when a server error occurs.\n\n<p>By default, the implementation of this method delegates to [[onProdServerError()]] when in\nprod mode, and [[onDevServerError()]] in dev mode. It is recommended, if you want Play's debug\ninfo on the error page in dev mode, that you override [[onProdServerError()]] instead of this\nmethod.\n\n@param request The request that triggered the server error.\n@param exception The server error.\n@return a CompletionStage containing the Result.", "predict": "Handle server errors. @param request the request that caused the error. @param exception the exception that caused the error. @return a result indicating the error."}
{"ID": 558, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void logServerError(RequestHeader request, UsefulException usefulException) { logger.error( String.format( \"\\n\\n! @%s - Internal server error, for (%s) [%s] ->\\n\", usefulException.id, request.method(), request.uri()), usefulException); }. ### Assistant:", "ground_truth": "Responsible for logging server errors.\n\n<p>The base implementation uses a SLF4J Logger. If a special annotation is desired for internal\nserver errors, you may want to use SLF4J directly with the Marker API to distinguish server\nerrors from application errors.\n\n<p>This can also be overridden to add additional logging information, eg. the id of the\nauthenticated user.\n\n@param request The request that triggered the server error.\n@param usefulException The server error.", "predict": "Logging the error message. @param request RequestHeader @param usefulException useful exception"}
{"ID": 559, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected final UsefulException throwableToUsefulException(final Throwable throwable) { return HttpErrorHandlerExceptions.throwableToUsefulException( sourceMapper.sourceMapper(), environment.isProd(), throwable); }. ### Assistant:", "ground_truth": "Convert the given exception to an exception that Play can report more information about.\n\n<p>This will generate an id for the exception, and in dev mode, will load the source code for\nthe code that threw the exception, making it possible to report on the location that the\nexception was thrown from.", "predict": "Convert a Throwable to a UsefulException. @param throwable the Throwable to convert. @return the converted Throwable."}
{"ID": 560, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected CompletionStage<Result> onDevServerError( RequestHeader request, UsefulException exception) { return CompletableFuture.completedFuture( Results.internalServerError( views.html.defaultpages.devError.render(playEditor, exception, request.asScala()))); }. ### Assistant:", "ground_truth": "Invoked in dev mode when a server error occurs. Note that this method is where the URL set by\nplay.editor is used.\n\n<p>The base implementation returns {@code Results.internalServerError} with the content of\n{@code views.html.defaultpages.devError}.\n\n@param request The request that triggered the error.\n@param exception The exception.\n@return a CompletionStage containing the Result.", "predict": "Renders the error page for the dev server @param request the request @param exception the exception @return the result"}
{"ID": 561, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected CompletionStage<Result> onProdServerError( RequestHeader request, UsefulException exception) { return CompletableFuture.completedFuture( Results.internalServerError( views.html.defaultpages.error.render(exception, request.asScala()))); }. ### Assistant:", "ground_truth": "Invoked in prod mode when a server error occurs.\n\n<p>The base implementation returns {@code Results.internalServerError} with the content of\n{@code views.html.defaultpages.error} template.\n\n<p>Override this rather than [[onServerError()]] if you don't want to change Play's debug\noutput when logging errors in dev mode.\n\n@param request The request that triggered the error.\n@param exception The exception.\n@return a CompletionStage containing the Result.", "predict": "Renders the error page. @param request the request @param exception the exception @return the result"}
{"ID": 562, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static BuildDocHandler fromResources(File[] files, String[] baseDirs) throws IOException { assert (files.length == baseDirs.length); FileRepository[] repositories = new FileRepository[files.length]; List<JarFile> jarFiles = new ArrayList<>(); for (int i = 0; i < files.length; i++) { File file = files[i]; String baseDir = baseDirs[i]; if (file.isDirectory()) { repositories[i] = new FilesystemRepository(file); } else { // Assume it's a jar file JarFile jarFile = new JarFile(file); jarFiles.add(jarFile); repositories[i] = new JarRepository(jarFile, Option.apply(baseDir)); } } return new DocumentationHandler( new AggregateFileRepository(repositories), () -> { for (JarFile jarFile : jarFiles) { jarFile.close(); } }); }. ### Assistant:", "ground_truth": "Create a BuildDocHandler that serves documentation from the given files, which could either be\ndirectories or jar files. The baseDir array must be the same length as the files array, and the\ncorresponding entry in there for jar files is used as a base directory to use resources from in\nthe jar.\n\n@param files The directories or jar files to serve documentation from.\n@param baseDirs The base directories for the jar files. Entries may be null.\n@return a BuildDocHandler.", "predict": "Create a handler that aggregates the contents of the specified files. The files are assumed to be in the specified directories. @param files the files to aggregate @param baseDirs the directories to aggregate the files from @return the handler @throws IOException if any of the files cannot be read"}
{"ID": 563, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static BuildDocHandler fromDirectory(File directory) { FileRepository repo = new FilesystemRepository(directory); return new DocumentationHandler(repo); }. ### Assistant:", "ground_truth": "Create an BuildDocHandler that serves documentation from a given directory by wrapping a\nFilesystemRepository.\n\n@param directory The directory to serve the documentation from.", "predict": "Create a handler for a directory of Markdown files. @param directory directory of Markdown files @return handler for Markdown files in the directory"}
{"ID": 564, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static BuildDocHandler fromDirectoryAndJar(File directory, JarFile jarFile, String base) { return fromDirectoryAndJar(directory, jarFile, base, false); }. ### Assistant:", "ground_truth": "Create an BuildDocHandler that serves the manual from a given directory by wrapping a\nFilesystemRepository, and the API docs from a given JAR file by wrapping a JarRepository\n\n@param directory The directory to serve the documentation from.\n@param jarFile The JAR file to server the documentation from.\n@param base The directory within the JAR file to serve the documentation from, or null if the\ndocumentation should be served from the root of the JAR.", "predict": "Reads the documentation from a directory and jar file. This is useful when you want to read the documentation from a directory that contains both the documentation files and the jar file. @param directory directory containing documentation files and jar file @param jarFile jar file @param base base directory for relative paths in documentation files @return documentation handler"}
{"ID": 565, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static BuildDocHandler fromDirectoryAndJar( File directory, JarFile jarFile, String base, boolean fallbackToJar) { FileRepository fileRepo = new FilesystemRepository(directory); FileRepository jarRepo = new JarRepository(jarFile, Option.apply(base)); FileRepository manualRepo; if (fallbackToJar) { manualRepo = new AggregateFileRepository(new FileRepository[] {fileRepo, jarRepo}); } else { manualRepo = fileRepo; } return new DocumentationHandler(manualRepo, jarRepo); }. ### Assistant:", "ground_truth": "Create an BuildDocHandler that serves the manual from a given directory by wrapping a\nFilesystemRepository, and the API docs from a given JAR file by wrapping a JarRepository.\n\n@param directory The directory to serve the documentation from.\n@param jarFile The JAR file to server the documentation from.\n@param base The directory within the JAR file to serve the documentation from, or null if the\ndocumentation should be served from the root of the JAR.\n@param fallbackToJar Whether the doc handler should fall back to the jar repo for docs.", "predict": "Create a documentation handler that combines a directory and a jar file. The directory is used for documentation files that are not in the jar file, and the jar file is used for documentation files that are in the jar file. The documentation files in the jar file are assumed to be in the base directory. If the jar file is not found, the directory is used as the base directory. If the directory is not found, the jar file is used as the base directory."}
{"ID": 566, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static BuildDocHandler fromJar(JarFile jarFile, String base) { FileRepository repo = new JarRepository(jarFile, Option.apply(base)); return new DocumentationHandler(repo); }. ### Assistant:", "ground_truth": "Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a\nJarRepository.\n\n@param jarFile The JAR file to server the documentation from.\n@param base The directory within the JAR file to serve the documentation from, or null if the\ndocumentation should be served from the root of the JAR.", "predict": "Create a handler for a jar file."}
{"ID": 567, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public CompletionStage<ByteString> consumeData(Materializer mat) { return dataStream().runFold(ByteString.empty(), ByteString::concat, mat); }. ### Assistant:", "ground_truth": "Consumes the data.\n\n<p>This method should be used carefully, since if the source represents an ephemeral stream,\nthen the entity may not be usable after this method is invoked.\n\n@param mat the application's materializer.\n@return a CompletionStage holding the data", "predict": "Consumes the data stream and returns the resulting ByteString."}
{"ID": 568, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static final HttpEntity fromContent(Content content, String charset) { String body; if (content instanceof Xml) { // See https://github.com/playframework/playframework/issues/2770 body = content.body().trim(); } else { body = content.body(); } return new Strict( ByteString.fromString(body, charset), Optional.of(content.contentType() + \"; charset=\" + charset)); }. ### Assistant:", "ground_truth": "Create an entity from the given content.\n\n@param content The content.\n@param charset The charset.\n@return the HTTP entity.", "predict": "Create a new HttpEntity from a Content object. @param content The Content object. @param charset The charset of the Content object. @return A new HttpEntity."}
{"ID": 569, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static final HttpEntity fromString(String content, String charset) { return new Strict( ByteString.fromString(content, charset), Optional.of(\"text/plain; charset=\" + charset)); }. ### Assistant:", "ground_truth": "Create an entity from the given String.\n\n@param content The content.\n@param charset The charset.\n@return the HTTP entity.", "predict": "Create a HttpEntity from a string. The charset is mandatory. @param content the content of the HttpEntity @param charset the charset of the content @return HttpEntity"}
{"ID": 570, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static final HttpEntity chunked(Source<ByteString, ?> data, Optional<String> contentType) { return new Chunked(data.map(HttpChunk.Chunk::new), contentType); }. ### Assistant:", "ground_truth": "Convert the given source of ByteStrings to a chunked entity.\n\n@param data The source.\n@param contentType The optional content type.\n@return The ByteStrings.", "predict": "Creates a new chunked entity. @param data the data to be chunked. @param contentType the content type of the data. @return the chunked entity."}
{"ID": 571, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Result status(int status, JsonNode content) { return status(status, content, JsonEncoding.UTF8); }. ### Assistant:", "ground_truth": "Generates a simple result with json content and UTF8 encoding.\n\n@param status the HTTP status for this result e.g. 200 (OK), 404 (NOT_FOUND)\n@param content the result's body content as a play-json object\n@return the result", "predict": "Render a status page with JSON content. @param status HTTP status code @param content JSON content @return Response object"}
{"ID": 572, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Result status(int status, JsonNode content, JsonEncoding encoding) { if (content == null) { throw new NullPointerException(\"Null content\"); } return status(status).sendJson(content, encoding); }. ### Assistant:", "ground_truth": "Generates a simple result with json content.\n\n@param status the HTTP status for this result e.g. 200 (OK), 404 (NOT_FOUND)\n@param content the result's body content, as a play-json object\n@param encoding the encoding into which the json should be encoded\n@return the result", "predict": "Send a status code and JSON content. The content is serialized using the specified encoding. @param status the HTTP status code @param content the JSON content @param encoding the encoding @return the response object"}
{"ID": 573, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Result status(int status, byte[] content) { if (content == null) { throw new NullPointerException(\"Null content\"); } return new Result( status, new HttpEntity.Strict(ByteString.fromArray(content), Optional.empty())); }. ### Assistant:", "ground_truth": "Generates a simple result with byte-array content.\n\n@param status the HTTP status for this result e.g. 200 (OK), 404 (NOT_FOUND)\n@param content the result's body content, as a byte array\n@return the result", "predict": "Status 200 with content. @param status HTTP status code @param content content @return Response object"}
{"ID": 574, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Result status(int status, InputStream content, long contentLength) { return status(status).sendInputStream(content, contentLength); }. ### Assistant:", "ground_truth": "Generates a chunked result.\n\n@param status the HTTP status for this result e.g. 200 (OK), 404 (NOT_FOUND)\n@param content the input stream containing data to chunk over\n@param contentLength the length of the provided content in bytes.\n@return the result", "predict": "Send an HTTP status and an InputStream. @param status HTTP status code @param content InputStream to send @param contentLength Content length @return Response object"}
{"ID": 575, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Result status(int status, File content) { return status(status, content, StaticFileMimeTypes.fileMimeTypes()); }. ### Assistant:", "ground_truth": "Generates a result with file contents.\n\n@param status the HTTP status for this result e.g. 200 (OK), 404 (NOT_FOUND)\n@param content the file to send\n@return the result", "predict": "Serve a static file with a given HTTP status code. The file is served as a plain text file, not as a HTML file. The content type is inferred from the file extension. If the file is not found, a 404 Not Found error is returned. @param status HTTP status code to return. @param content File to serve. @return HTTP response."}
{"ID": 576, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private User findById(Long id) { if (id > 3) return null; User user = new User(); user.id = id; user.name = \"User \" + String.valueOf(id); return user; }. ### Assistant:", "ground_truth": "designed to be lightweight operation", "predict": "Find a user by id. @param id the id @return the user"}
{"ID": 577, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Lang preferred(Collection<Lang> candidates) { return new Lang( langs.preferred((scala.collection.immutable.Seq) Scala.asScala(candidates).toSeq())); }. ### Assistant:", "ground_truth": "Select a preferred language, given the list of candidates.\n\n<p>Will select the preferred language, based on what languages are available, or return the\ndefault language if none of the candidates are available.\n\n@param candidates The candidate languages\n@return The preferred language", "predict": "Preferred Langs."}
{"ID": 578, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Call unique() { return new play.api.mvc.Call(method(), this.uniquify(this.url()), fragment()); }. ### Assistant:", "ground_truth": "Append a unique identifier to the URL.\n\n@return a copy if this call with a unique identifier to this url", "predict": "Create a new Call with the same method, but with a unique URL. The fragment is preserved. @return a new Call with a unique URL"}
{"ID": 579, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Call withFragment(String fragment) { return new play.api.mvc.Call(method(), url(), fragment); }. ### Assistant:", "ground_truth": "Returns a new Call with the given fragment.\n\n@param fragment the URL fragment\n@return a copy of this call that contains the fragment", "predict": "Create a new call with a fragment. The fragment is included in the URL. @param fragment The fragment to include in the URL. @return A new call with the fragment included in the URL."}
{"ID": 580, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String absoluteURL(Http.Request request) { return absoluteURL(request.secure(), request.host()); }. ### Assistant:", "ground_truth": "Transform this call to an absolute URL.\n\n@param request used to identify the host and protocol that should base this absolute URL\n@return the absolute URL string", "predict": "Returns the absolute URL for the given request. The scheme and host are included."}
{"ID": 581, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String webSocketURL(Http.Request request) { return webSocketURL(request.secure(), request.host()); }. ### Assistant:", "ground_truth": "Transform this call to an WebSocket URL.\n\n@param request used as the base for forming the WS url\n@return the websocket url string", "predict": "The websocket URL for this endpoint. @param request the incoming request @return the websocket URL"}
{"ID": 582, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: AbstractFunction1<Connection, BoxedUnit> connectionFunction(final ConnectionRunnable block) { return new AbstractFunction1<Connection, BoxedUnit>() { public BoxedUnit apply(Connection connection) { try { block.run(connection); return BoxedUnit.UNIT; } catch (java.sql.SQLException e) { throw new RuntimeException(\"Connection runnable failed\", e); } } }; }. ### Assistant:", "ground_truth": "Create a Scala function wrapper for ConnectionRunnable.\n\n@param block a Java functional interface instance to wrap\n@return a scala function that wraps the given block", "predict": "A connection is required to execute this function."}
{"ID": 583, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: <A> AbstractFunction1<Connection, A> connectionFunction(final ConnectionCallable<A> block) { return new AbstractFunction1<Connection, A>() { public A apply(Connection connection) { try { return block.call(connection); } catch (java.sql.SQLException e) { throw new RuntimeException(\"Connection callable failed\", e); } } }; }. ### Assistant:", "ground_truth": "Create a Scala function wrapper for ConnectionCallable.\n\n@param block a Java functional interface instance to wrap\n@param <A> the provided block's return type\n@return a scala function wrapping the given block", "predict": "A connection-based function. This is used to execute functions that require a connection. @param block the block to execute. @return the result of the block."}
{"ID": 584, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Server forRouter(Mode mode, int port, Function<BuiltInComponents, Router> block) { return new Builder().mode(mode).http(port).build(block); }. ### Assistant:", "ground_truth": "Create a server for the router returned by the given block.\n\n@param block The block which creates a router.\n@param mode The mode the server will run on.\n@param port The port the server will run on.\n@return The running server.", "predict": "Create a server using a router. The router is created by passing the BuiltInComponents to the block function. @param mode the mode of the server @param port the port of the server @param block a function that takes the BuiltInComponents and returns the router @return a Server instance"}
{"ID": 585, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static JsonNode toJson(final Object data) { try { return mapper().valueToTree(data); } catch (Exception e) { throw new RuntimeException(e); } }. ### Assistant:", "ground_truth": "Converts an object to JsonNode.\n\n@param data Value to convert in Json.\n@return the JSON node.", "predict": "Convert data to json. @param data the data to convert @return the json representation of the data"}
{"ID": 586, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <A> A fromJson(JsonNode json, Class<A> clazz) { try { return mapper().treeToValue(json, clazz); } catch (Exception e) { throw new RuntimeException(e); } }. ### Assistant:", "ground_truth": "Converts a JsonNode to a Java value\n\n@param <A> the type of the return value.\n@param json Json value to convert.\n@param clazz Expected Java value type.\n@return the return value.", "predict": "Deserialize a JSON object into a Java object. @param json JSON object @param clazz Java class @param <A> Type of object to deserialize @return deserialized object"}
{"ID": 587, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static JsonNode parse(String src) { try { return mapper().readTree(src); } catch (Throwable t) { throw new RuntimeException(t); } }. ### Assistant:", "ground_truth": "Parses a String representing a json, and return it as a JsonNode.\n\n@param src the JSON string.\n@return the JSON node.", "predict": "Parse a JSON string into a JSON node. @param src the JSON string to parse. @return the parsed JSON node."}
{"ID": 588, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static JsonNode parse(java.io.InputStream src) { try { return mapper().readTree(src); } catch (Throwable t) { throw new RuntimeException(t); } }. ### Assistant:", "ground_truth": "Parses a InputStream representing a json, and return it as a JsonNode.\n\n@param src the JSON input stream.\n@return the JSON node.", "predict": "Parse JSON from an InputStream. @param src InputStream to parse. @return parsed JSON."}
{"ID": 589, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String relative(String startPath, String targetPath) { // If the start and target path's are the same then link to the current directory if (startPath.equals(targetPath)) { return CURRENT_DIR; } String[] start = toSegments(canonical(startPath)); String[] target = toSegments(canonical(targetPath)); // If start path has no trailing separator (a \"file\" path), then drop file segment if (!startPath.endsWith(SEPARATOR)) start = Arrays.copyOfRange(start, 0, start.length - 1); // If target path has no trailing separator, then drop file segment, but keep a reference to add // it later String targetFile = \"\"; if (!targetPath.endsWith(SEPARATOR)) { targetFile = target[target.length - 1]; target = Arrays.copyOfRange(target, 0, target.length - 1); } // Work out how much of the filepath is shared by start and path. String[] common = commonPrefix(start, target); String[] parents = toParentDirs(start.length - common.length); int relativeStartIdx = common.length; String[] relativeDirs = Arrays.copyOfRange(target, relativeStartIdx, target.length); String[] relativePath = Arrays.copyOf(parents, parents.length + relativeDirs.length); System.arraycopy(relativeDirs, 0, relativePath, parents.length, relativeDirs.length); // If this is not a sibling reference append a trailing / to path String trailingSep = \"\"; if (relativePath.length > 0) trailingSep = SEPARATOR; return Arrays.stream(relativePath).collect(Collectors.joining(SEPARATOR)) + trailingSep + targetFile; }. ### Assistant:", "ground_truth": "Create a path to targetPath that's relative to the given startPath.", "predict": "Returns the relative path from the start path to the target path. If the paths are the same then it returns the current directory. If the target path is a file path then it will not include the trailing separator. If the start path is a file path then it will not include the trailing separator."}
{"ID": 590, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String canonical(String url) { String[] urlPath = toSegments(url); Stack<String> canonical = new Stack<>(); for (String comp : urlPath) { if (comp.isEmpty() || comp.equals(CURRENT_DIR)) continue; if (!comp.equals(PARENT_DIR) || (!canonical.empty() && canonical.peek().equals(PARENT_DIR))) canonical.push(comp); else canonical.pop(); } String prefixSep = url.startsWith(SEPARATOR) ? SEPARATOR : \"\"; String trailingSep = url.endsWith(SEPARATOR) ? SEPARATOR : \"\"; return prefixSep + canonical.stream().collect(Collectors.joining(SEPARATOR)) + trailingSep; }. ### Assistant:", "ground_truth": "Create a canonical path that does not contain parent directories, current directories, or\nsuperfluous directory separators.", "predict": "Canonicalize a URL by flattening out any hierarchical structure."}
{"ID": 591, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static List<Tuple<String, List<Object>>> displayableConstraint( Set<ConstraintDescriptor<?>> constraints) { return constraints .parallelStream() .filter(c -> c.getAnnotation().annotationType().isAnnotationPresent(Display.class)) .map(c -> displayableConstraint(c)) .collect(Collectors.toList()); }. ### Assistant:", "ground_truth": "Converts a set of constraints to human-readable values. Does not guarantee the order of the\nreturned constraints.\n\n<p>This method calls {@code displayableConstraint} under the hood.\n\n@param constraints the set of constraint descriptors.\n@return a list of pairs of tuples assembled from displayableConstraint.", "predict": "Displayable constraints. @param constraints constraints @return displayable constraints"}
{"ID": 592, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Tuple<String, List<Object>> displayableConstraint( ConstraintDescriptor<?> constraint) { final Display displayAnnotation = constraint.getAnnotation().annotationType().getAnnotation(Display.class); return Tuple( displayAnnotation.name(), Collections.unmodifiableList( Stream.of(displayAnnotation.attributes()) .map(attr -> constraint.getAttributes().get(attr)) .collect(Collectors.toList()))); }. ### Assistant:", "ground_truth": "Converts a constraint to a human-readable value.\n\n@param constraint the constraint descriptor.\n@return A tuple containing the constraint's display name and the constraint attributes.", "predict": "Extract displayable information from a constraint. @param constraint constraint to extract displayable information from @return Tuple of display name and display attributes"}
{"ID": 593, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public <A> CompletionStage<A> timeout( final CompletionStage<A> stage, final long amount, final TimeUnit unit) { requireNonNull(stage, \"Null stage\"); requireNonNull(unit, \"Null unit\"); FiniteDuration duration = FiniteDuration.apply(amount, unit); return toJava(delegate.timeout(duration, Scala.asScalaWithFuture(() -> stage))); }. ### Assistant:", "ground_truth": "Creates a CompletionStage that returns either the input stage, or a futures.\n\n<p>Note that timeout is not the same as cancellation. Even in case of futures, the given\ncompletion stage will still complete, even though that completed value is not returned.\n\n@param stage the input completion stage that may time out.\n@param amount The amount (expressed with the corresponding unit).\n@param unit The time Unit.\n@param <A> the completion's result type.\n@return either the completed future, or a completion stage that failed with futures.", "predict": "Asynchronous timeout. @param stage the stage to timeout @param amount the timeout amount in the specified unit @param unit the timeout unit @return a completion stage representing the result of the timeout operation"}
{"ID": 594, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean isAssignable( Class<?>[] classArray, Class<?>[] toClassArray, boolean autoboxing) { if (arrayGetLength(classArray) != arrayGetLength(toClassArray)) { return false; } if (classArray == null) { classArray = EMPTY_CLASS_ARRAY; } if (toClassArray == null) { toClassArray = EMPTY_CLASS_ARRAY; } for (int i = 0; i < classArray.length; i++) { if (isAssignable(classArray[i], toClassArray[i], autoboxing) == false) { return false; } } return true; }. ### Assistant:", "ground_truth": "Checks if an array of Classes can be assigned to another array of Classes.\n\n<p>This method calls {@link #isAssignable(Class, Class) isAssignable} for each Class pair in\nthe input arrays. It can be used to check if a set of arguments (the first parameter) are\nsuitably compatible with a set of method parameter types (the second parameter).\n\n<p>Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method, this method takes into\naccount widenings of primitive classes and {@code null}s.\n\n<p>Primitive widenings allow an int to be assigned to a {@code long}, {@code float} or {@code\ndouble}. This method returns the correct result for these cases.\n\n<p>{@code Null} may be assigned to any reference type. This method will return {@code true} if\n{@code null} is passed in and the toClass is non-primitive.\n\n<p>Specifically, this method tests whether the type represented by the specified {@code Class}\nparameter can be converted to the type represented by this {@code Class} object via an identity\nconversion widening primitive or widening reference conversion. See <em><a\nhref=\"http://java.sun.com/docs/books/jls/\">The Java Language Specification</a></em>, sections\n5.1.1, 5.1.2 and 5.1.4 for details.\n\n@param classArray the array of Classes to check, may be {@code null}\n@param toClassArray the array of Classes to try to assign into, may be {@code null}\n@param autoboxing whether to use implicit autoboxing/unboxing between primitives and wrappers\n@return {@code true} if assignment possible", "predict": "Determines whether the specified class array is assignable to the specified to class array. @param classArray the class array to compare. @param toClassArray the class array to compare. @param autoboxing whether to use autoboxing. @return true if the class array is assignable to the specified to class array."}
{"ID": 595, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Date parseCRONExpression(String cron) { try { return new CronExpression(cron).getNextValidTimeAfter(new Date()); } catch (Exception e) { throw new IllegalArgumentException(\"Invalid CRON pattern : \" + cron, e); } }. ### Assistant:", "ground_truth": "Parses a CRON expression.\n\n@param cron the CRON String\n@return the next <code>Date</code> that satisfies the expression", "predict": "Parse a CRON expression and return the next valid date after the current date. @param cron cron expression @return the next valid date after the current date"}
{"ID": 596, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static long cronInterval(String cron, Date date) { try { return new CronExpression(cron).getNextInterval(date); } catch (Exception e) { throw new IllegalArgumentException(\"Invalid CRON pattern : \" + cron, e); } }. ### Assistant:", "ground_truth": "Compute the number of milliseconds between the next valid date and the one after.\n\n@param cron the CRON String\n@param date the date to start search\n@return the number of milliseconds between the next valid date and the one after, with an\ninvalid interval between", "predict": "Calculate cron interval between two dates. @param cron cron pattern @param date date @return cron interval"}
{"ID": 597, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static AhcWSClient create( AhcWSClientConfig config, AhcHttpCache cache, Materializer materializer) { final StandaloneAhcWSClient client = StandaloneAhcWSClient.create(config, cache, materializer); return new AhcWSClient(client, materializer); }. ### Assistant:", "ground_truth": "Creates WS client manually from configuration, internally creating a new instance of\nAsyncHttpClient and managing its own thread pool.\n\n<p>This client is not managed as part of Play's lifecycle, and <b>must</b> be closed by calling\nws.close(), otherwise you will run into memory leaks.\n\n@param config a config object, usually from AhcWSClientConfigFactory\n@param cache if not null, provides HTTP caching.\n@param materializer an Akka materializer\n@return a new instance of AhcWSClient.", "predict": "Create a AhcWSClient instance using the given AhcWSClientConfig, AhcHttpCache, and Materializer. @param config AhcWSClientConfig @param cache AhcHttpCache @param materializer Materializer @return AhcWSClient instance"}
{"ID": 598, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public GuiceApplicationBuilder builder(ApplicationLoader.Context context) { return initialBuilder .in(context.environment()) .loadConfig(context.initialConfig()) .overrides(overrides(context)); }. ### Assistant:", "ground_truth": "Construct a builder to use for loading the given context.\n\n@param context the context the returned builder will load\n@return the builder", "predict": "Create a builder with the given context."}
{"ID": 599, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Result TODO(Request request) { return status(NOT_IMPLEMENTED, views.html.defaultpages.todo.render(request.asScala())); }. ### Assistant:", "ground_truth": "Generates a 501 NOT_IMPLEMENTED simple result.", "predict": "TODO page."}
{"ID": 600, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Deprecated public static void session(String key, String value) { session().put(key, value); }. ### Assistant:", "ground_truth": "Puts a new value into the current session.\n\n@param key the key to set into the session\n@param value the value to set for <code>key</code>\n@deprecated Deprecated as of 2.7.0. Use {@link Result} instead.", "predict": "Put a value into the session. @param key the key of the value to put @param value the value to put"}
{"ID": 601, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Deprecated public static void flash(String key, String value) { flash().put(key, value); }. ### Assistant:", "ground_truth": "Puts a new value into the flash scope.\n\n@param key the key to put into the flash scope\n@param value the value corresponding to <code>key</code>\n@deprecated Deprecated as of 2.7.0. Use {@link Result} instead.", "predict": "Flash a value to the flash scope. @param key the key to flash @param value the value to flash"}
{"ID": 602, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <A extends Annotation> BindingKey<T> qualifiedWith(final A instance) { return underlying.qualifiedWith(instance).asJava(); }. ### Assistant:", "ground_truth": "Qualify this binding key with the given instance of an annotation.\n\n<p>This can be used to specify bindings with annotations that have particular values.", "predict": "Qualifies the binding key with the given annotation instance. @param instance the annotation instance to qualify the binding key with. @return the qualified binding key."}
{"ID": 603, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <A extends Annotation> BindingKey<T> qualifiedWith(final Class<A> annotation) { return underlying.qualifiedWith(annotation).asJava(); }. ### Assistant:", "ground_truth": "Qualify this binding key with the given annotation.\n\n<p>For example, you may have both a cached implementation, and a direct implementation of a\nservice. To differentiate between them, you may define a Cached annotation:\n\n<pre>{@code\nbindClass(Foo.class).qualifiedWith(Cached.class).to(FooCached.class),\nbindClass(Foo.class).to(FooImpl.class)\n\n...\n\nclass MyController {\n{@literal @}Inject\nMyController({@literal @}Cached Foo foo) {\n...\n}\n...\n}\n}</pre>\n\nIn the above example, the controller will get the cached {@code Foo} service.", "predict": "Create a qualified binding key. @param annotation the annotation to qualify the binding key with. @return the qualified binding key."}
{"ID": 604, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Binding<T> to(final Class<? extends T> implementation) { return underlying.to(implementation).asJava(); }. ### Assistant:", "ground_truth": "Bind this binding key to the given implementation class.\n\n<p>This class will be instantiated and injected by the injection framework.", "predict": "Convert this binding to a Java-typed binding. @param implementation the implementation type @return the converted binding"}
{"ID": 605, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Binding<T> to(final Provider<? extends T> provider) { return underlying.to(provider).asJava(); }. ### Assistant:", "ground_truth": "Bind this binding key to the given provider instance.\n\n<p>This provider instance will be invoked to obtain the implementation for the key.", "predict": "Maps the binding to the specified provider. @param provider the provider to map to. @return the binding mapped to the provider."}
{"ID": 606, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <A extends T> Binding<T> to(final Supplier<A> instance) { return underlying.to(new FromJavaSupplier<>(instance)).asJava(); }. ### Assistant:", "ground_truth": "Bind this binding key to the given instance.", "predict": "Create a binding to a supplier. @param instance the supplier to create the binding to. @return the binding."}
{"ID": 607, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Binding<T> to(final BindingKey<? extends T> key) { return underlying.to(key.asScala()).asJava(); }. ### Assistant:", "ground_truth": "Bind this binding key to another binding key.", "predict": "Maps the Scala BindingKey to Java. @param key Scala BindingKey @return Java Binding"}
{"ID": 608, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <P extends Provider<? extends T>> Binding<T> toProvider(final Class<P> provider) { return underlying.toProvider(provider).asJava(); }. ### Assistant:", "ground_truth": "Bind this binding key to the given provider class.\n\n<p>The dependency injection framework will instantiate and inject this provider, and then\ninvoke its `get` method whenever an instance of the class is needed.", "predict": "Convert this binding to a provider. @param provider the provider type @return the converted provider"}
{"ID": 609, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static List<Lang> availables(Application app) { play.api.i18n.Langs langs = app.injector().instanceOf(play.api.i18n.Langs.class); List<play.api.i18n.Lang> availableLangs = Scala.asJava(langs.availables()); return availableLangs.stream().map(Lang::new).collect(toList()); }. ### Assistant:", "ground_truth": "Retrieve Lang availables from the application configuration.\n\n@param app the current application.\n@return the list of available Lang.", "predict": "Return the list of langs available in the application @param app the application @return the list of langs available in the application"}
{"ID": 610, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Lang preferred(Application app, List<Lang> availableLangs) { play.api.i18n.Langs langs = app.injector().instanceOf(play.api.i18n.Langs.class); Stream<Lang> stream = availableLangs.stream(); List<play.api.i18n.Lang> langSeq = stream.map(l -> new play.api.i18n.Lang(l.toLocale())).collect(toList()); return new Lang(langs.preferred(Scala.toSeq(langSeq))); }. ### Assistant:", "ground_truth": "Guess the preferred lang in the langs set passed as argument. The first Lang that matches an\navailable Lang wins, otherwise returns the first Lang available in this application.\n\n@param app the currept application\n@param availableLangs the set of langs from which to guess the preferred\n@return the preferred lang.", "predict": "Preferred Lang is the Lang that is preferred by the LangResolver. It is the Lang that will be used if the LangResolver is unable to resolve any of the Langs in the LangSeq."}
{"ID": 611, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static play.api.db.evolutions.EvolutionsReader fromMap( Map<String, List<Evolution>> evolutions) { return new SimpleEvolutionsReader(evolutions); }. ### Assistant:", "ground_truth": "Create an evolutions reader based on a simple map of database names to evolutions.\n\n@param evolutions The map of database names to evolutions.\n@return the evolutions reader.", "predict": "Read Evolution information from a map."}
{"ID": 612, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static play.api.db.evolutions.EvolutionsReader forDefault(Evolution... evolutions) { Map<String, List<Evolution>> map = new HashMap<String, List<Evolution>>(); map.put(\"default\", Arrays.asList(evolutions)); return fromMap(map); }. ### Assistant:", "ground_truth": "Create an evolutions reader for the default database from a list of evolutions.\n\n@param evolutions The list of evolutions.\n@return the evolutions reader.", "predict": "Read the evolutions from the default database. @param evolutions Evolutions to read from the default database. @return EvolutionsReader for the default database."}
{"ID": 613, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void cleanupEvolutions(Database database, boolean autocommit, String schema) { DatabaseEvolutions evolutions = new DatabaseEvolutions(database.asScala(), schema); evolutions.evolve(evolutions.resetScripts(), autocommit); }. ### Assistant:", "ground_truth": "Cleanup evolutions for the given database.\n\n<p>This will run the down scripts for all the applied evolutions.\n\n@param database The database to apply the evolutions to.\n@param autocommit Whether autocommit should be used.\n@param schema The schema where all the play evolution tables are saved in", "predict": "Cleans up the evolutions scripts. This method is typically used after a migration has been run. @param database Database to cleanup evolutions for @param autocommit Whether to autocommit after cleanup @param schema Optional schema to cleanup evolutions for"}
{"ID": 614, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public GuiceApplicationBuilder withConfigLoader(Function<Environment, Config> load) { return newBuilder( delegate.loadConfig( func( (play.api.Environment env) -> new play.api.Configuration(load.apply(new Environment(env)))))); }. ### Assistant:", "ground_truth": "Set the initial configuration loader. Overrides the default or any previously configured\nvalues.\n\n@param load the configuration loader\n@return the configured application builder", "predict": "Sets the configuration loader. The configuration loader is responsible for loading the configuration from the environment. @param load the configuration loader @return the builder"}
{"ID": 615, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public GuiceApplicationBuilder withModuleLoader( BiFunction<Environment, Config, List<GuiceableModule>> loader) { return newBuilder( delegate.load( func( (play.api.Environment env, play.api.Configuration conf) -> Scala.toSeq(loader.apply(new Environment(env), conf.underlying()))))); }. ### Assistant:", "ground_truth": "Set the module loader. Overrides the default or any previously configured values.\n\n@param loader the configuration\n@return the configured application builder", "predict": "Registers a custom module loader. This is useful for testing purposes. @param loader a function that takes an environment and a configuration and returns a list of modules to load. @return the builder instance."}
{"ID": 616, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public GuiceApplicationBuilder load(GuiceableModule... modules) { return newBuilder(delegate.load(Scala.varargs(modules))); }. ### Assistant:", "ground_truth": "Override the module loader with the given guiceable modules.\n\n@param modules the set of overriding modules\n@return an application builder that incorporates the overrides", "predict": "Load the given modules into the application. @param modules the modules to load @return the builder"}
{"ID": 617, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public GuiceApplicationBuilder load(com.google.inject.Module... modules) { return load(Guiceable.modules(modules)); }. ### Assistant:", "ground_truth": "Override the module loader with the given Guice modules.\n\n@param modules the set of overriding modules\n@return an application builder that incorporates the overrides", "predict": "Load the given modules. @param modules the modules to load. @return this builder."}
{"ID": 618, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public GuiceApplicationBuilder load(play.api.inject.Module... modules) { return load(Guiceable.modules(modules)); }. ### Assistant:", "ground_truth": "Override the module loader with the given Play modules.\n\n@param modules the set of overriding modules\n@return an application builder that incorporates the overrides", "predict": "Load the Guice application with the given modules. @param modules the modules to load @return the GuiceApplicationBuilder instance"}
{"ID": 619, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public GuiceApplicationBuilder load(play.api.inject.Binding<?>... bindings) { return load(Guiceable.bindings(bindings)); }. ### Assistant:", "ground_truth": "Override the module loader with the given Play bindings.\n\n@param bindings the set of binding override\n@return an application builder that incorporates the overrides", "predict": "Load the given bindings into the application. @param bindings the bindings to load @return the builder"}
{"ID": 620, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected GuiceApplicationBuilder newBuilder( play.api.inject.guice.GuiceApplicationBuilder builder) { return new GuiceApplicationBuilder(builder); }. ### Assistant:", "ground_truth": "Implementation of Self creation for GuiceBuilder.\n\n@return the application builder", "predict": "A helper method to create a new GuiceApplicationBuilder."}
{"ID": 621, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String encode(Cookie cookie) { if (cookie == null) { throw new NullPointerException(\"cookie\"); } StringBuilder buf = new StringBuilder(); encode(buf, cookie); return stripTrailingSeparator(buf); }. ### Assistant:", "ground_truth": "Encodes the specified cookie into a Cookie header value.\n\n@param cookie specified the cookie\n@return a Rfc6265 style Cookie header value", "predict": "Encodes the cookie according to the RFC 6265 standard. @param cookie the cookie to encode. @return the encoded cookie."}
{"ID": 622, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public EntityManager em() { Deque<EntityManager> ems = this.emStack(true); if (ems.isEmpty()) { Http.Context.safeCurrent() .map( ctx -> { throw new RuntimeException( \"No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional\"); }) .orElseGet( () -> { throw new RuntimeException( \"No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread.\"); }); } return ems.peekFirst(); }. ### Assistant:", "ground_truth": "Get the default EntityManager for this thread.\n\n@throws RuntimeException if no EntityManager is bound to the current Http.Context or the\ncurrent Thread.\n@return the EntityManager", "predict": "Returns the EntityManager associated with this thread. If none is found, it will attempt to create one using the EntityManagerProvider. If that fails, it will throw an exception."}
{"ID": 623, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") public Deque<EntityManager> emStack(boolean threadLocalFallback) { return Http.Context.safeCurrent() .map( context -> { Object emsObject = context.args.get(CURRENT_ENTITY_MANAGER); if (emsObject != null) { return (Deque<EntityManager>) emsObject; } else { Deque<EntityManager> ems = new ArrayDeque<>(); context.args.put(CURRENT_ENTITY_MANAGER, ems); return ems; } }) .orElseGet( () -> { // Not a web request if (threadLocalFallback) { return this.get(); } else { throw new RuntimeException( \"No Http.Context is present. If you want to invoke this method outside of a HTTP request, you need to wrap the call with JPA.withTransaction instead.\"); } }); }. ### Assistant:", "ground_truth": "Get the EntityManager stack.\n\n@param threadLocalFallback if true, fall back to a ThreadLocal queue of entity managers if no\nHTTP.Context object is found.\n@return the queue of entity managers.", "predict": "Get the current EntityManager stack. If the stack is empty, it will be filled with the current EntityManager. If the stack is already filled, it will be returned. The stack is thread-local, so it is safe to call this method from multiple threads. If you want to use this method outside of a HTTP request, you need to wrap the call with JPA.withTransaction. @param threadLocalFallback If true, fallback to the thread-local EntityManager stack. If false, throw an exception. @return The current EntityManager stack."}
{"ID": 624, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: void pushOrPopEm(EntityManager em, boolean threadLocalFallback) { Deque<EntityManager> ems = this.emStack(threadLocalFallback); if (em != null) { ems.push(em); } else { if (ems.isEmpty()) { throw new IllegalStateException(\"Tried to remove the EntityManager, but none was set.\"); } ems.pop(); } }. ### Assistant:", "ground_truth": "Pushes or pops the EntityManager stack depending on the value of the em argument. If em is\nnull, then the current EntityManager is popped. If em is non-null, then em is pushed onto the\nstack and becomes the current EntityManager.\n\n@param em the entity manager to push, if null then will pop one off the stack.\n@param threadLocalFallback if true, fall back to a ThreadLocal queue of entity managers if no\nHTTP.Context object is found.", "predict": "Push or pop the EntityManager from the stack. If the EntityManager is already on the stack, it will be popped. If it is not on the stack, it will be pushed. If the stack is empty, it will fallback to the thread local EntityManager. @param em The EntityManager to push or pop. @param threadLocalFallback Fallback to the thread local EntityManager if the stack is empty."}
{"ID": 625, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <In, FlowIn, Out> Flow<In, Out, ?> bypassWith( Function<In, F.Either<FlowIn, Out>> splitter, Flow<FlowIn, Out, ?> flow) { return bypassWith( Flow.<In>create().map(splitter::apply), play.api.libs.streams.AkkaStreams.onlyFirstCanFinishMerge(2), flow); }. ### Assistant:", "ground_truth": "Bypass the given flow using the given splitter function.\n\n<p>If the splitter function returns Left, they will go through the flow. If it returns Right,\nthey will bypass the flow.\n\n<p>Uses onlyFirstCanFinishMerge(2) by default.\n\n@param <In> the In type parameter for Flow\n@param <FlowIn> the FlowIn type parameter for the left branch in Either.\n@param <Out> the Out type parameter for Flow\n@param flow the original flow\n@param splitter the splitter function to use\n@return the flow with a bypass.", "predict": "Bypasses the flow and applies the splitter to the input stream. The splitter is applied to the input stream, and the output of the splitter is emitted as the output of the flow. The input stream is dropped. The splitter is applied to the input stream, and the output of the splitter is emitted as the output of the flow. The input stream is dropped. The splitter is applied to the input stream, and the output of the splitter is emitted as the output of the flow. The input stream is dropped. The splitter is applied to the input stream, and the output of the splitter is emitted as the output of the flow. The input stream is dropped. The splitter is applied to the input stream, and the output of the splitter is emitted as the output of the flow. The input stream is dropped. The splitter is applied to the input stream, and the output of the splitter is emitted as the output of the flow. The input stream is dropped. The split"}
{"ID": 626, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <In, FlowIn, Out> Flow<In, Out, ?> bypassWith( Flow<In, F.Either<FlowIn, Out>, ?> splitter, Graph<UniformFanInShape<Out, Out>, ?> mergeStrategy, Flow<FlowIn, Out, ?> flow) { return splitter.via( Flow.fromGraph( GraphDSL.<FlowShape<F.Either<FlowIn, Out>, Out>>create( builder -> { // Eager cancel must be true so that if the flow cancels, that will be propagated // upstream. // However, that means the bypasser must block cancel, since when this flow // finishes, the merge // will result in a cancel flowing up through the bypasser, which could lead to // dropped messages. // Using scaladsl here because of https://github.com/akka/akka/issues/18384 UniformFanOutShape<F.Either<FlowIn, Out>, F.Either<FlowIn, Out>> broadcast = builder.add(Broadcast.create(2, true)); UniformFanInShape<Out, Out> merge = builder.add(mergeStrategy); Flow<F.Either<FlowIn, Out>, FlowIn, ?> collectIn = Flow.<F.Either<FlowIn, Out>>create() .collect( Scala.partialFunction( x -> { if (x.left.isPresent()) { return x.left.get(); } else { throw Scala.noMatch(); } })); Flow<F.Either<FlowIn, Out>, Out, ?> collectOut = Flow.<F.Either<FlowIn, Out>>create() .collect( Scala.partialFunction( x -> { if (x.right.isPresent()) { return x.right.get(); } else { throw Scala.noMatch(); } })); Flow<F.Either<FlowIn, Out>, F.Either<FlowIn, Out>, ?> blockCancel = play.api.libs.streams.AkkaStreams .<F.Either<FlowIn, Out>>ignoreAfterCancellation() .asJava(); // Normal flow builder .from(broadcast.out(0)) .via(builder.add(collectIn)) .via(builder.add(flow)) .toInlet(merge.in(0)); // Bypass flow, need to ignore downstream finish builder .from(broadcast.out(1)) .via(builder.add(blockCancel)) .via(builder.add(collectOut)) .toInlet(merge.in(1)); return new FlowShape<>(broadcast.in(), merge.out()); }))); }. ### Assistant:", "ground_truth": "Using the given splitter flow, allow messages to bypass a flow.\n\n<p>If the splitter flow produces Left, they will be fed into the flow. If it produces Right,\nthey will bypass the flow.\n\n@param <In> the In type parameter for Flow\n@param <FlowIn> the FlowIn type parameter for the left branch in Either.\n@param <Out> the Out type parameter for Flow.\n@param flow the original flow.\n@param splitter the splitter function.\n@param mergeStrategy the merge strategy (onlyFirstCanFinishMerge, ignoreAfterFinish,\nignoreAfterCancellation)\n@return the flow with a bypass.", "predict": "Bypasses a flow using a splitter and a merge strategy. The splitter splits the flow into two flows, one of which is the original flow and the other is the bypass flow. The merge strategy merges the two flows into a single flow. The bypass flow is designed to be cancelled, so that it does not interfere with the original flow. The bypass flow is designed to be cancelled, so that it does not interfere with the original flow. @param splitter The splitter to use @param mergeStrategy The merge strategy to use @param flow The flow to bypass @return The bypass flow"}
{"ID": 627, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <In, Out> Flow<In, Out, ?> actorRef( Function<ActorRef, Props> props, int bufferSize, OverflowStrategy overflowStrategy, ActorRefFactory factory, Materializer mat) { return play.api.libs.streams.ActorFlow.<In, Out>actorRef( new AbstractFunction1<ActorRef, Props>() { @Override public Props apply(ActorRef v1) { return props.apply(v1); } }, bufferSize, overflowStrategy, factory, mat) .asJava(); }. ### Assistant:", "ground_truth": "Create a flow that is handled by an actor.\n\n<p>Messages can be sent downstream by sending them to the actor passed into the props function.\nThis actor meets the contract of the actor returned by {@link\nakka.stream.javadsl.Source#actorRef}.\n\n<p>The props function should return the props for an actor to handle the flow. This actor will\nbe created using the passed in {@link akka.actor.ActorRefFactory}. Each message received will\nbe sent to the actor - there is no back pressure, if the actor is unable to process the\nmessages, they will queue up in the actors mailbox. The upstream can be cancelled by the actor\nterminating itself.\n\n@param <In> the In type parameter for a Flow\n@param <Out> the Out type parameter for a Flow\n@param props A function that creates the props for actor to handle the flow.\n@param bufferSize The maximum number of elements to buffer.\n@param overflowStrategy The strategy for how to handle a buffer overflow.\n@param factory The Actor Factory used to create the actor to handle the flow - for example, an\nActorSystem.\n@param mat The materializer to materialize the flow.\n@return the flow itself.", "predict": "Create a flow that sends its input to an actor, and receives its output from the actor. The actor is created using the given actor factory. The actor's props are obtained using the given props function. The props are sent to the actor using the actor's `props` method. The actor's output is received using the actor's `receive` method. The actor's output is received using the actor's `receive` method. The actor's output is received using the actor's `receive` method. The actor's output is received using the actor's `receive` method. The actor's output is received using the actor's `receive` method. The actor's output is received using the actor's `receive` method. The actor's output is received using the actor's `receive` method. The actor's output is received using the actor's `receive` method. The actor's output is received using the actor's `"}
{"ID": 628, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private List<Object> convertErrorArguments(Object[] arguments) { if (arguments == null) { return Collections.emptyList(); } List<Object> converted = Arrays.stream(arguments) .filter( arg -> !(arg instanceof org.springframework.context.support.DefaultMessageSourceResolvable)) .collect(Collectors.toList()); return Collections.unmodifiableList(converted); }. ### Assistant:", "ground_truth": "Convert the error arguments.\n\n@param arguments The arguments to convert.\n@return The converted arguments.", "predict": "Convert arguments to a list of objects. If arguments is null, return an empty list. If arguments contains Spring MessageSourceResolvable objects, they are ignored. @param arguments The arguments to convert. @return The converted arguments."}
{"ID": 629, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Form<T> fill(T value) { if (value == null) { throw new RuntimeException(\"Cannot fill a form with a null value\"); } return new Form<>( rootName, backedType, new HashMap<>(), new HashMap<>(), new ArrayList<>(), Optional.ofNullable(value), groups, messagesApi, formatters, validatorFactory, config, lang, directFieldAccess); }. ### Assistant:", "ground_truth": "Populates this form with an existing value, used for edit forms.\n\n@param value existing value of type <code>T</code> used to fill this form\n@return a copy of this form filled with the new data", "predict": "Fills the form with the given value. If the value is null, it will throw a runtime exception. @param value the value to fill the form with. @return the filled form."}
{"ID": 630, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public List<ValidationError> globalErrors() { return Collections.unmodifiableList( errors.stream().filter(error -> error.key().isEmpty()).collect(Collectors.toList())); }. ### Assistant:", "ground_truth": "Retrieve all global errors - errors without a key.\n\n@return All global errors.", "predict": "Returns a list of errors that are global to the entire schema. These errors are not specific to any particular field or property. @return a list of errors that are global to the entire schema."}
{"ID": 631, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public JsonNode errorsAsJson(Lang lang) { Map<String, List<String>> allMessages = new HashMap<>(); errors.forEach( error -> { if (error != null) { final List<String> messages = new ArrayList<>(); if (messagesApi != null && lang != null) { final List<String> reversedMessages = new ArrayList<>(error.messages()); Collections.reverse(reversedMessages); messages.add( messagesApi.get( lang, reversedMessages, translateMsgArg(error.arguments(), messagesApi, lang))); } else { messages.add(error.message()); } allMessages.put(error.key(), messages); } }); return play.libs.Json.toJson(allMessages); }. ### Assistant:", "ground_truth": "Returns the form errors serialized as Json using the given Lang.\n\n@param lang the language to use.\n@return the JSON node containing the errors.", "predict": "Returns the errors as a JSON object. The keys of the JSON object are the keys of the errors. The values are lists of messages. The messages are themselves lists of strings. The messages are obtained from the messagesApi. If the messagesApi is not available, the messages are obtained from the error messages. @param lang The language of the messages. @return The errors as a JSON object."}
{"ID": 632, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Optional<Object> value(String key) { return super.value().map(v -> v.getData().get(asNormalKey(key))); }. ### Assistant:", "ground_truth": "Gets the concrete value\n\n@param key the string key.\n@return the value", "predict": "Returns the value associated with the given key. If the value is a nested object, it will be unwrapped to a map and the value will be looked up in that map. If the value is a primitive, it will be unwrapped to an object. If the value is an object, it will be unwrapped to a map and the value will be looked up in that map. If the value is a nested object, it will be unwrapped to a map and the value will be looked up in that map. If the value is a primitive, it will be unwrapped to an object. If the value is an object, it will be unwrapped to a map and the value will be looked up in that map. If the value is a nested object, it will be unwrapped to a map and the value will be looked up in that map. If the value is a primitive, it will be unwrapped to an object. If the value is an object, it will be unwrapped to a map and the"}
{"ID": 633, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public DynamicForm fill(Map<String, Object> value) { Form<Dynamic> form = super.fill(new Dynamic(value)); return new DynamicForm( form.rawData(), form.files(), form.errors(), form.value(), messagesApi, formatters, validatorFactory, config, lang().orElse(null)); }. ### Assistant:", "ground_truth": "Fills the form with existing data.\n\n@param value the map of values to fill in the form.\n@return the modified form.", "predict": "Fills the form with the given data. The data is transformed into a DynamicForm. @param value the data to fill the form with. @return the filled form."}
{"ID": 634, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <T> T parse(String text, Class<T> clazz) { return conversion.convert(text, clazz); }. ### Assistant:", "ground_truth": "Parses this string as instance of the given class.\n\n@param text the text to parse\n@param clazz class representing the required type\n@param <T> the type to parse out of the text\n@return the parsed value", "predict": "Parse the given text into the given class. @param text the text to parse. @param clazz the class to parse into. @return the parsed object."}
{"ID": 635, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") public <T> T parse(Field field, String text) { return (T) conversion.convert(text, new TypeDescriptor(field)); }. ### Assistant:", "ground_truth": "Parses this string as instance of a specific field\n\n@param field the related field (custom formatters are extracted from this field annotation)\n@param text the text to parse\n@param <T> the type to parse out of the text\n@return the parsed value", "predict": "Parse the given text into a Java object of the given type. The type must be a subtype of the Field's type. @param field The Field that describes the type of the object @param text The text to parse @return The Java object of the given type constructed from the text."}
{"ID": 636, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <T> String print(T t) { if (t == null) { return \"\"; } if (conversion.canConvert(t.getClass(), String.class)) { return conversion.convert(t, String.class); } else { return t.toString(); } }. ### Assistant:", "ground_truth": "Computes the display string for any value.\n\n@param t the value to print\n@param <T> the type to print\n@return the formatted string", "predict": "Prints the given object as a string. If the object is null, it returns an empty string. If the object is not null, it uses the conversion to convert the object to a string. If the conversion is not defined, it uses the toString method of the object. @param t the object to print. @return the string representation of the object."}
{"ID": 637, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <T> String print(Field field, T t) { return print(new TypeDescriptor(field), t); }. ### Assistant:", "ground_truth": "Computes the display string for any value, for a specific field.\n\n@param field the related field - custom formatters are extracted from this field annotation\n@param t the value to print\n@param <T> the type to print\n@return the formatted string", "predict": "Print the value of a field. @param field the field to print @param t the value of the field @return the string representation of the value"}
{"ID": 638, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <T> String print(TypeDescriptor desc, T t) { if (t == null) { return \"\"; } if (desc != null && conversion.canConvert(desc, TypeDescriptor.valueOf(String.class))) { return (String) conversion.convert(t, desc, TypeDescriptor.valueOf(String.class)); } else if (conversion.canConvert(t.getClass(), String.class)) { return conversion.convert(t, String.class); } else { return t.toString(); } }. ### Assistant:", "ground_truth": "Computes the display string for any value, for a specific type.\n\n@param desc the field descriptor - custom formatters are extracted from this descriptor.\n@param t the value to print\n@param <T> the type to print\n@return the formatted string", "predict": "Print the value of the object. If the object is null, it will return an empty string. Otherwise, it will convert the object to a string using the conversion rules. If the object is not convertible to a string, it will return the object's toString() method. @param desc the type descriptor for the object @param t the object to print @return the string representation of the object."}
{"ID": 639, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private Formatters registerOptional() { conversion.addConverter( new GenericConverter() { public Object convert( Object source, TypeDescriptor sourceType, TypeDescriptor targetType) { if (sourceType.getObjectType().equals(String.class)) { // From String to Optional Object element = conversion.convert(source, sourceType, targetType.elementTypeDescriptor(source)); return Optional.ofNullable(element); } else if (targetType.getObjectType().equals(String.class)) { // From Optional to String if (source == null) return \"\"; Optional<?> opt = (Optional) source; return opt.map( o -> conversion.convert( source, sourceType.getElementTypeDescriptor(), targetType)) .orElse(\"\"); } return null; } public Set<GenericConverter.ConvertiblePair> getConvertibleTypes() { Set<ConvertiblePair> result = new HashSet<>(); result.add(new ConvertiblePair(Optional.class, String.class)); result.add(new ConvertiblePair(String.class, Optional.class)); return result; } }); return this; }. ### Assistant:", "ground_truth": "Converter for String -> Optional and Optional -> String", "predict": "Register the optional conversion."}
{"ID": 640, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <T> Formatters register(final Class<T> clazz, final SimpleFormatter<T> formatter) { conversion.addFormatterForFieldType( clazz, new org.springframework.format.Formatter<T>() { public T parse(String text, Locale locale) throws java.text.ParseException { return formatter.parse(text, locale); } public String print(T t, Locale locale) { return formatter.print(t, locale); } public String toString() { return formatter.toString(); } }); return this; }. ### Assistant:", "ground_truth": "Registers a simple formatter.\n\n@param clazz class handled by this formatter\n@param <T> the type that this formatter will parse and print\n@param formatter the formatter to register\n@return the modified Formatters object.", "predict": "Register a custom formatter for a specific class. @param clazz the class to register the formatter for. @param formatter the formatter to register. @return this instance."}
{"ID": 641, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") public <A extends Annotation, T> Formatters register( final Class<T> clazz, final AnnotationFormatter<A, T> formatter) { final Class<? extends Annotation> annotationType = (Class<? extends Annotation>) GenericTypeResolver.resolveTypeArguments( formatter.getClass(), AnnotationFormatter.class)[0]; conversion.addConverter( new ConditionalGenericConverter() { public Set<GenericConverter.ConvertiblePair> getConvertibleTypes() { Set<GenericConverter.ConvertiblePair> types = new HashSet<>(); types.add(new GenericConverter.ConvertiblePair(clazz, String.class)); return types; } public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) { return (sourceType.getAnnotation(annotationType) != null); } public Object convert( Object source, TypeDescriptor sourceType, TypeDescriptor targetType) { final A a = (A) sourceType.getAnnotation(annotationType); Locale locale = LocaleContextHolder.getLocale(); try { return formatter.print(a, (T) source, locale); } catch (Exception ex) { throw new ConversionFailedException(sourceType, targetType, source, ex); } } public String toString() { return \"@\" + annotationType.getName() + \" \" + clazz.getName() + \" -> \" + String.class.getName() + \": \" + formatter; } }); conversion.addConverter( new ConditionalGenericConverter() { public Set<GenericConverter.ConvertiblePair> getConvertibleTypes() { Set<GenericConverter.ConvertiblePair> types = new HashSet<>(); types.add(new GenericConverter.ConvertiblePair(String.class, clazz)); return types; } public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) { return (targetType.getAnnotation(annotationType) != null); } public Object convert( Object source, TypeDescriptor sourceType, TypeDescriptor targetType) { final A a = (A) targetType.getAnnotation(annotationType); Locale locale = LocaleContextHolder.getLocale(); try { return formatter.parse(a, (String) source, locale); } catch (Exception ex) { throw new ConversionFailedException(sourceType, targetType, source, ex); } } public String toString() { return String.class.getName() + \" -> @\" + annotationType.getName() + \" \" + clazz.getName() + \": \" + formatter; } }); return this; }. ### Assistant:", "ground_truth": "Registers an annotation-based formatter.\n\n@param clazz class handled by this formatter\n@param formatter the formatter to register\n@param <A> the annotation type\n@param <T> the type that will be parsed or printed\n@return the modified Formatters object.", "predict": "Registers a formatter for a specific annotation type. @param clazz the class of the annotation type @param formatter the formatter to register @param <A> the annotation type @param <T> the generic type @return this instance for chaining"}
{"ID": 642, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String encode(Cookie cookie) { if (cookie == null) { throw new NullPointerException(\"cookie\"); } final String name = cookie.name(); final String value = cookie.value() != null ? cookie.value() : \"\"; validateCookie(name, value); StringBuilder buf = new StringBuilder(); if (cookie.wrap()) { addQuoted(buf, name, value); } else { add(buf, name, value); } if (cookie.maxAge() != Integer.MIN_VALUE) { add(buf, CookieHeaderNames.MAX_AGE, cookie.maxAge()); Date expires = cookie.maxAge() <= 0 ? new Date(0) // Set expires to the Unix epoch : new Date(cookie.maxAge() * 1000L + System.currentTimeMillis()); add(buf, CookieHeaderNames.EXPIRES, HttpHeaderDateFormat.get().format(expires)); } if (cookie.sameSite() != null) { add(buf, CookieHeaderNames.SAMESITE, cookie.sameSite()); } if (cookie.path() != null) { add(buf, CookieHeaderNames.PATH, cookie.path()); } if (cookie.domain() != null) { add(buf, CookieHeaderNames.DOMAIN, cookie.domain()); } if (cookie.isSecure()) { add(buf, CookieHeaderNames.SECURE); } if (cookie.isHttpOnly()) { add(buf, CookieHeaderNames.HTTPONLY); } return stripTrailingSeparator(buf); }. ### Assistant:", "ground_truth": "Encodes the specified cookie into a Set-Cookie header value.\n\n@param cookie the cookie\n@return a single Set-Cookie header value", "predict": "Encodes a cookie. The resulting string is suitable for inclusion in a response. @param cookie the cookie to encode. @return the encoded cookie."}
{"ID": 643, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static NodeList selectNodes(String path, Object node) { return selectNodes(path, node, null); }. ### Assistant:", "ground_truth": "Select all nodes that are selected by this XPath expression. If multiple nodes match, multiple\nnodes will be returned. Nodes will be returned in document-order,\n\n@param path the xpath expression\n@param node the starting node\n@return result of evaluating the xpath expression against node", "predict": "Selects nodes from the document tree based on the given path and the given node. The path is relative to the root element of the document. The node is used to determine the type of nodes to select. @param path the path to select from the document tree @param node the node to determine the type of nodes to select @return the selected nodes"}
{"ID": 644, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <T> scala.collection.immutable.Seq<T> toSeq(java.util.List<T> list) { return scala.collection.JavaConverters.asScalaBufferConverter(list).asScala().toList(); }. ### Assistant:", "ground_truth": "Converts a Java List to Scala Seq.\n\n@param list    the java list.\n@return the converted Seq.\n@param <T> the element type.", "predict": "Convert a Java List to a Scala Seq. The resulting Seq is immutable. @param list the Java List to convert @return the Scala Seq"}
{"ID": 645, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <T> scala.collection.immutable.Seq<T> toSeq(T[] array) { return toSeq(java.util.Arrays.asList(array)); }. ### Assistant:", "ground_truth": "Converts a Java Array to Scala Seq.\n\n@param array    the java array.\n@return the converted Seq.\n@param <T> the element type.", "predict": "Convert an array to a Seq."}
{"ID": 646, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SafeVarargs public static <T> scala.collection.immutable.Seq<T> varargs(T... array) { return toSeq(array); }. ### Assistant:", "ground_truth": "Converts a Java varargs to Scala varargs.\n\n@param array    the java array.\n@return the Scala varargs\n@param <T> the element type.", "predict": "Convert an array of elements to a Seq. @param array an array of elements @param <T> the type of elements in the array @return a Seq of elements from the array"}
{"ID": 647, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <In, Out> MappedWebSocketAcceptor<In, Out> json(Class<In> in) { return new MappedWebSocketAcceptor<>( Scala.partialFunction( message -> { try { if (message instanceof Message.Binary) { return F.Either.Left( play.libs.Json.mapper() .readValue( ((Message.Binary) message).data().iterator().asInputStream(), in)); } else if (message instanceof Message.Text) { return F.Either.Left( play.libs.Json.mapper().readValue(((Message.Text) message).data(), in)); } } catch (Exception e) { return F.Either.Right(new Message.Close(CloseCodes.Unacceptable(), e.getMessage())); } throw Scala.noMatch(); }), outMessage -> { try { return new Message.Text(play.libs.Json.mapper().writeValueAsString(outMessage)); } catch (Exception e) { throw new RuntimeException(e); } }); }. ### Assistant:", "ground_truth": "Acceptor for JSON WebSockets.\n\n@param in The class of the incoming messages, used to decode them from the JSON.\n@param <In> The websocket's input type (what it receives from clients)\n@param <Out> The websocket's output type (what it writes to clients)\n@return The WebSocket acceptor.", "predict": "Accept incoming messages as JSON. @param in the Scala type of the incoming message @return a WebSocketAcceptor that accepts incoming JSON messages and sends them back as JSON"}
{"ID": 648, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static <In, Out> WebSocket acceptOrResult( PartialFunction<Message, F.Either<In, Message>> inMapper, Function<Http.RequestHeader, CompletionStage<F.Either<Result, Flow<In, Out, ?>>>> f, Function<Out, Message> outMapper) { return new WebSocket() { @Override public CompletionStage<F.Either<Result, Flow<Message, Message, ?>>> apply( Http.RequestHeader request) { return f.apply(request) .thenApply( resultOrFlow -> { if (resultOrFlow.left.isPresent()) { return F.Either.Left(resultOrFlow.left.get()); } else { Flow<Message, Message, ?> flow = AkkaStreams.bypassWith( Flow.<Message>create().collect(inMapper), play.api.libs.streams.AkkaStreams.onlyFirstCanFinishMerge(2), resultOrFlow.right.get().map(outMapper::apply)); return F.Either.Right(flow); } }); } }; }. ### Assistant:", "ground_truth": "Helper to create handlers for WebSockets.\n\n@param inMapper Function to map input messages. If it produces left, the message will be passed\nto the WebSocket flow, if it produces right, the message will be sent back out to the\nclient - this can be used to send errors directly to the client.\n@param f The function to handle the WebSocket.\n@param outMapper Function to map output messages.\n@return The WebSocket handler.", "predict": "Create a WebSocket that applies the provided function to incoming requests and returns a flow of messages. If the function returns a failure, the WebSocket will return a failure. Otherwise, it will return a flow of messages."}
{"ID": 649, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: static boolean setAccessibleWorkaround(final AccessibleObject o) { if (o == null || o.isAccessible()) { return false; } final Member m = (Member) o; if (!o.isAccessible() && Modifier.isPublic(m.getModifiers()) && isPackageAccess(m.getDeclaringClass().getModifiers())) { try { o.setAccessible(true); return true; } catch (final SecurityException e) { // NOPMD // ignore in favor of subsequent IllegalAccessException } } return false; }. ### Assistant:", "ground_truth": "XXX Default access superclass workaround.\n\n<p>When a {@code public} class has a default access superclass with {@code public} members,\nthese members are accessible. Calling them from compiled code works fine. Unfortunately, on\nsome JVMs, using reflection to invoke these members seems to (wrongly) prevent access even when\nthe modifier is {@code public}. Calling {@code setAccessible(true)} solves the problem but will\nonly work from sufficiently privileged code. Better workarounds would be gratefully accepted.\n\n@param o the AccessibleObject to set as accessible\n@return a boolean indicating whether the accessibility of the object was set to true.", "predict": "A workaround for the security restrictions in Java 1.4.0. @param o the object to check. @return true if the object is accessible."}
{"ID": 650, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static float getPrimitivePromotionCost( final Class<?> srcClass, final Class<?> destClass) { float cost = 0.0f; Class<?> cls = srcClass; if (!cls.isPrimitive()) { // slight unwrapping penalty cost += 0.1f; cls = ClassUtils.wrapperToPrimitive(cls); } for (int i = 0; cls != destClass && i < ORDERED_PRIMITIVE_TYPES.length; i++) { if (cls == ORDERED_PRIMITIVE_TYPES[i]) { cost += 0.1f; if (i < ORDERED_PRIMITIVE_TYPES.length - 1) { cls = ORDERED_PRIMITIVE_TYPES[i + 1]; } } } return cost; }. ### Assistant:", "ground_truth": "Gets the number of steps required to promote a primitive number to another type.\n\n@param srcClass the (primitive) source class\n@param destClass the (primitive) destination class\n@return The cost of promoting the primitive", "predict": "Returns the cost of primitive promotion. The cost is the sum of the penalties for each primitive type promoted. @param srcClass the source class @param destClass the destination class @return the cost of primitive promotion"}
{"ID": 651, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static float getTotalTransformationCost( final Class<?>[] srcArgs, final Executable executable) { final Class<?>[] destArgs = executable.getParameterTypes(); final boolean isVarArgs = executable.isVarArgs(); // \"source\" and \"destination\" are the actual and declared args respectively. float totalCost = 0.0f; final long normalArgsLen = isVarArgs ? destArgs.length - 1 : destArgs.length; if (srcArgs.length < normalArgsLen) { return Float.MAX_VALUE; } for (int i = 0; i < normalArgsLen; i++) { totalCost += getObjectTransformationCost(srcArgs[i], destArgs[i]); } if (isVarArgs) { // When isVarArgs is true, srcArgs and dstArgs may differ in length. // There are two special cases to consider: final boolean noVarArgsPassed = srcArgs.length < destArgs.length; final boolean explicitArrayForVarags = srcArgs.length == destArgs.length && srcArgs[srcArgs.length - 1].isArray(); final float varArgsCost = 0.001f; final Class<?> destClass = destArgs[destArgs.length - 1].getComponentType(); if (noVarArgsPassed) { // When no varargs passed, the best match is the most generic matching type, not the most // specific. totalCost += getObjectTransformationCost(destClass, Object.class) + varArgsCost; } else if (explicitArrayForVarags) { final Class<?> sourceClass = srcArgs[srcArgs.length - 1].getComponentType(); totalCost += getObjectTransformationCost(sourceClass, destClass) + varArgsCost; } else { // This is typical varargs case. for (int i = destArgs.length - 1; i < srcArgs.length; i++) { final Class<?> srcClass = srcArgs[i]; totalCost += getObjectTransformationCost(srcClass, destClass) + varArgsCost; } } } return totalCost; }. ### Assistant:", "ground_truth": "Returns the sum of the object transformation cost for each class in the source argument list.\n\n@param srcArgs The source arguments\n@param executable The executable to calculate transformation costs for\n@return The total transformation cost", "predict": "Calculates the total cost of transformation from the source arguments to the destination arguments. This cost is based on the cost of transforming each individual argument. The cost is calculated using the cost of transforming the source argument to the destination argument. The cost is then accumulated for each argument. The cost is dominated by the cost of transforming the most generic argument. The cost of transforming an explicit array for varargs is also considered. @param srcArgs The source arguments. @param executable The executable to be executed. @return The total cost of transformation."}
{"ID": 652, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static float getObjectTransformationCost(Class<?> srcClass, final Class<?> destClass) { if (destClass.isPrimitive()) { return getPrimitivePromotionCost(srcClass, destClass); } float cost = 0.0f; while (srcClass != null && !destClass.equals(srcClass)) { if (destClass.isInterface() && ClassUtils.isAssignable(srcClass, destClass)) { // slight penalty for interface match. // we still want an exact match to override an interface match, // but // an interface match should override anything where we have to // get a superclass. cost += 0.25f; break; } cost++; srcClass = srcClass.getSuperclass(); } /* * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if (srcClass == null) { cost += 1.5f; } return cost; }. ### Assistant:", "ground_truth": "Gets the number of steps required needed to turn the source class into the destination class.\nThis represents the number of steps in the object hierarchy graph.\n\n@param srcClass The source class\n@param destClass The destination class\n@return The cost of transforming an object", "predict": "Returns the cost of transforming an object from srcClass to destClass. The cost is determined by traversing the inheritance hierarchy of srcClass and destClass, and taking into account the cost of promoting primitive types. The cost is also increased if the destination class is an interface and the source class implements it. @param srcClass the source class @param destClass the destination class @return the cost of transforming an object from srcClass to destClass."}
{"ID": 653, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String at(String key, Object... args) { return messagesApi.get(lang, key, args); }. ### Assistant:", "ground_truth": "Get the message at the given key.\n\n<p>Uses `java.text.MessageFormat` internally to format the message.\n\n@param key the message key\n@param args the message arguments\n@return the formatted message or a default rendering if the key wasn't defined", "predict": "Translate a message using the specified arguments. @param key Message key @param args Arguments to substitute into the message @return Translated message"}
{"ID": 654, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String at(List<String> keys, Object... args) { return messagesApi.get(lang, keys, args); }. ### Assistant:", "ground_truth": "Get the message at the first defined key.\n\n<p>Uses `java.text.MessageFormat` internally to format the message.\n\n@param keys the messages keys\n@param args the message arguments\n@return the formatted message or a default rendering if the key wasn't defined", "predict": "Get messages at the specified keys. @param keys Keys to retrieve messages for. @param args Additional arguments to pass to the message. @return Messages."}
{"ID": 655, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Database createFrom( String driver, String url, Map<String, ? extends Object> config) { return createFrom(\"default\", driver, url, config); }. ### Assistant:", "ground_truth": "Create a pooled database named \"default\" with the given configuration.\n\n@param driver the database driver class\n@param url the database url\n@param config a map of extra database configuration\n@return a configured database", "predict": "Create a new database from the given driver, url, and configuration. The database will be created with the default settings. @param driver the database driver to use @param url the database URL to use @param config the database configuration to use @return the database object"}
{"ID": 656, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static ParallelSorter create(Object[] arrays) { Generator gen = new Generator(); gen.setArrays(arrays); return gen.create(); }. ### Assistant:", "ground_truth": "Create a new ParallelSorter object for a set of arrays. You may\nsort the arrays multiple times via the same ParallelSorter object.\n@param arrays An array of arrays to sort. The arrays may be a mix\nof primitive and non-primitive types, but should all be the same\nlength.\n@param loader ClassLoader for generated class, uses \"current\" if null", "predict": "Create a ParallelSorter from an array of arrays. @param arrays the arrays to sort @return a ParallelSorter"}
{"ID": 657, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void quickSort(int index, int lo, int hi, Comparator cmp) { chooseComparer(index, cmp); super.quickSort(lo, hi - 1); }. ### Assistant:", "ground_truth": "Sort the arrays using the quicksort algorithm.\n@param index array (column) to sort by\n@param lo starting array index (row), inclusive\n@param hi ending array index (row), exclusive\n@param cmp Comparator to use if the specified column is non-primitive", "predict": "Sorts the elements in the range [lo, hi) using quicksort. The elements are compared using the specified comparator. @param index the index of the pivot element @param lo the index of the first element in the range to be sorted @param hi the index of the last element in the range to be sorted @param cmp the comparator used to compare the elements in the range"}
{"ID": 658, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void mergeSort(int index, int lo, int hi, Comparator cmp) { chooseComparer(index, cmp); super.mergeSort(lo, hi - 1); }. ### Assistant:", "ground_truth": "Sort the arrays using an in-place merge sort.\n@param index array (column) to sort by\n@param lo starting array index (row), inclusive\n@param hi ending array index (row), exclusive\n@param cmp Comparator to use if the specified column is non-primitive", "predict": "Merge sort with a custom comparator."}
{"ID": 659, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Object invoke(Object obj, Object[] args) throws Throwable { try { init(); FastClassInfo fci = fastClassInfo; return fci.f1.invoke(fci.i1, obj, args); } catch (InvocationTargetException e) { throw e.getTargetException(); } catch (IllegalArgumentException e) { if (fastClassInfo.i1 < 0) throw new IllegalArgumentException(\"Protected method: \" + sig1); throw e; } }. ### Assistant:", "ground_truth": "Invoke the original method, on a different object of the same type.\n@param obj the compatible object; recursion will result if you use the object passed as the first\nargument to the MethodInterceptor (usually not what you want)\n@param args the arguments passed to the intercepted method; you may substitute a different\nargument array as long as the types are compatible\n@see MethodInterceptor#intercept\n@throws Throwable the bare exceptions thrown by the called method are passed through\nwithout wrapping in an <code>InvocationTargetException</code>", "predict": "Invokes the method."}
{"ID": 660, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void cast_numeric(Type from, Type to) { if (from != to) { if (from == Type.DOUBLE_TYPE) { if (to == Type.FLOAT_TYPE) { mv.visitInsn(Constants.D2F); } else if (to == Type.LONG_TYPE) { mv.visitInsn(Constants.D2L); } else { mv.visitInsn(Constants.D2I); cast_numeric(Type.INT_TYPE, to); } } else if (from == Type.FLOAT_TYPE) { if (to == Type.DOUBLE_TYPE) { mv.visitInsn(Constants.F2D); } else if (to == Type.LONG_TYPE) { mv.visitInsn(Constants.F2L); } else { mv.visitInsn(Constants.F2I); cast_numeric(Type.INT_TYPE, to); } } else if (from == Type.LONG_TYPE) { if (to == Type.DOUBLE_TYPE) { mv.visitInsn(Constants.L2D); } else if (to == Type.FLOAT_TYPE) { mv.visitInsn(Constants.L2F); } else { mv.visitInsn(Constants.L2I); cast_numeric(Type.INT_TYPE, to); } } else { if (to == Type.BYTE_TYPE) { mv.visitInsn(Constants.I2B); } else if (to == Type.CHAR_TYPE) { mv.visitInsn(Constants.I2C); } else if (to == Type.DOUBLE_TYPE) { mv.visitInsn(Constants.I2D); } else if (to == Type.FLOAT_TYPE) { mv.visitInsn(Constants.I2F); } else if (to == Type.LONG_TYPE) { mv.visitInsn(Constants.I2L); } else if (to == Type.SHORT_TYPE) { mv.visitInsn(Constants.I2S); } } } }. ### Assistant:", "ground_truth": "Casts from one primitive numeric type to another", "predict": "Cast numeric types."}
{"ID": 661, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void load_arg(int index) { load_local(state.argumentTypes[index], state.localOffset + skipArgs(index)); }. ### Assistant:", "ground_truth": "Pushes the specified argument of the current method onto the stack.\n@param index the zero-based index into the argument list", "predict": "Load the value of the argument at the given index into the register."}
{"ID": 662, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: void emit_field(int opcode, Type ctype, String name, Type ftype) { mv.visitFieldInsn(opcode, ctype.getInternalName(), name, ftype.getDescriptor()); }. ### Assistant:", "ground_truth": "package-protected for EmitUtils, try to fix", "predict": "Emit a field instruction."}
{"ID": 663, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void zero_or_null(Type type) { if (TypeUtils.isPrimitive(type)) { switch (type.getSort()) { case Type.DOUBLE: push(0d); break; case Type.LONG: push(0L); break; case Type.FLOAT: push(0f); break; case Type.VOID: aconst_null(); default: push(0); } } else { aconst_null(); } }. ### Assistant:", "ground_truth": "Pushes a zero onto the stack if the argument is a primitive class, or a null otherwise.", "predict": "Zero or null constant."}
{"ID": 664, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void unbox_or_zero(Type type) { if (TypeUtils.isPrimitive(type)) { if (type != Type.VOID_TYPE) { Label nonNull = make_label(); Label end = make_label(); dup(); ifnonnull(nonNull); pop(); zero_or_null(type); goTo(end); mark(nonNull); unbox(type); mark(end); } } else { checkcast(type); } }. ### Assistant:", "ground_truth": "Unboxes the object on the top of the stack. If the object is null, the\nunboxed primitive value becomes zero.", "predict": "Unbox or zero the given value. If the value is null, it is marked as such and the unbox instruction is executed. If the value is not null, it is marked as such and the zero or unbox instruction is executed."}
{"ID": 665, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void process_array(CodeEmitter e, Type type, ProcessArrayCallback callback) { Type componentType = TypeUtils.getComponentType(type); Local array = e.make_local(); Local loopvar = e.make_local(Type.INT_TYPE); Label loopbody = e.make_label(); Label checkloop = e.make_label(); e.store_local(array); e.push(0); e.store_local(loopvar); e.goTo(checkloop); e.mark(loopbody); e.load_local(array); e.load_local(loopvar); e.array_load(componentType); callback.processElement(componentType); e.iinc(loopvar, 1); e.mark(checkloop); e.load_local(loopvar); e.load_local(array); e.arraylength(); e.if_icmp(e.LT, loopbody); }. ### Assistant:", "ground_truth": "Process an array on the stack. Assumes the top item on the stack\nis an array of the specified type. For each element in the array,\nputs the element on the stack and triggers the callback.\n@param type the type of the array (type.isArray() must be true)\n@param callback the callback triggered for each element", "predict": "Process an array using the callback. @param e CodeEmitter @param type Type of array being processed @param callback Callback to use for processing elements"}
{"ID": 666, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static void nullcmp(CodeEmitter e, Label oneNull, Label bothNull) { e.dup2(); Label nonNull = e.make_label(); Label oneNullHelper = e.make_label(); Label end = e.make_label(); e.ifnonnull(nonNull); e.ifnonnull(oneNullHelper); e.pop2(); e.goTo(bothNull); e.mark(nonNull); e.ifnull(oneNullHelper); e.goTo(end); e.mark(oneNullHelper); e.pop2(); e.goTo(oneNull); e.mark(end); }. ### Assistant:", "ground_truth": "If both objects on the top of the stack are non-null, does nothing.\nIf one is null, or both are null, both are popped off and execution\nbranches to the respective label.\n@param oneNull label to branch to if only one of the objects is null\n@param bothNull label to branch to if both of the objects are null", "predict": "This is a helper method to compare against null, and handle the case where one of the operands is null."}
{"ID": 667, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Map/*<Signature, Signature>*/resolveAll() { Map resolved = new HashMap(); for (Iterator entryIter = declToBridge.entrySet().iterator(); entryIter.hasNext(); ) { Map.Entry entry = (Map.Entry) entryIter.next(); Class owner = (Class) entry.getKey(); Set bridges = (Set) entry.getValue(); try { InputStream is = classLoader.getResourceAsStream(owner.getName().replace('.', '/') + \".class\"); if (is == null) { return resolved; } try { new ClassReader(is) .accept(new BridgedFinder(bridges, resolved), ClassReader.SKIP_FRAMES | ClassReader.SKIP_DEBUG); } finally { is.close(); } } catch (IOException ignored) {} } return resolved; }. ### Assistant:", "ground_truth": "Finds all bridge methods that are being called with invokespecial &\nreturns them.", "predict": "Resolve all bridges."}
{"ID": 668, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void getMethods(Class superclass, Class[] interfaces, List methods) { getMethods(superclass, interfaces, methods, null, null); }. ### Assistant:", "ground_truth": "Finds all of the methods that will be extended by an\nEnhancer-generated class using the specified superclass and\ninterfaces. This can be useful in building a list of Callback\nobjects. The methods are added to the end of the given list.  Due\nto the subclassing nature of the classes generated by Enhancer,\nthe methods are guaranteed to be non-static, non-final, and\nnon-private. Each method signature will only occur once, even if\nit occurs in multiple classes.\n@param superclass the class that will be extended, or null\n@param interfaces the list of interfaces that will be implemented, or null\n@param methods the list into which to copy the applicable methods", "predict": "Get the methods of a class and its interfaces. @param superclass The class to get methods from. @param interfaces The interfaces to get methods from. @param methods The list to add the methods to."}
{"ID": 669, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void filterConstructors(Class sc, List constructors) { CollectionUtils.filter(constructors, new VisibilityPredicate(sc, true)); if (constructors.size() == 0) throw new IllegalArgumentException(\"No visible constructors in \" + sc); }. ### Assistant:", "ground_truth": "Filter the list of constructors from the superclass. The\nconstructors which remain will be included in the generated\nclass. The default implementation is to filter out all private\nconstructors, but subclasses may extend Enhancer to override this\nbehavior.\n@param sc the superclass\n@param constructors the list of all declared constructors from the superclass\n@throws IllegalArgumentException if there are no non-private constructors", "predict": "Filters the constructors to only those that are visible from the superclass. @param sc the superclass @param constructors the list of constructors to filter"}
{"ID": 670, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void setSuperclass(Class superclass) { if (superclass != null && superclass.equals(Object.class)) { superclass = null; } this.superclass = superclass; }. ### Assistant:", "ground_truth": "Set the class which the generated class will extend. The class\nmust not be declared as final, and must have a non-private\nno-argument constructor.\n@param superclass class to extend, or null to extend Object", "predict": "Sets the superclass of the generated class. @param superclass the superclass of the generated class."}
{"ID": 671, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void getField(String[] names) throws Exception { final CodeEmitter e = begin_method(Constants.ACC_PUBLIC, PROVIDER_GET, null); e.load_this(); e.load_arg(0); EmitUtils.string_switch(e, names, Constants.SWITCH_STYLE_HASH, new ObjectSwitchCallback() { public void processCase(Object key, Label end) { Type type = (Type)fields.get(key); e.getfield((String)key); e.box(type); e.return_value(); } public void processDefault() { e.throw_exception(ILLEGAL_ARGUMENT_EXCEPTION, \"Unknown field name\"); } }); e.end_method(); }. ### Assistant:", "ground_truth": "to avoid JVM hashcode implementation incompatibilities", "predict": "Get a field value. @param names Field names. @throws Exception"}
{"ID": 672, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void add(Method method) { add(ReflectUtils.getSignature(method), ReflectUtils.getExceptionTypes(method)); }. ### Assistant:", "ground_truth": "Add a method signature to the interface. The method modifiers are ignored,\nsince interface methods are by definition abstract and public.\n@param method the method to add to the interface", "predict": "Add a method to the list of methods to exclude from the signature. @param method the method to exclude from the signature."}
{"ID": 673, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public int cardinality() { int w = value; int c = 0; while (w != 0) { c += T[w & 255]; w >>= 8; } return c; }. ### Assistant:", "ground_truth": "If bit 31 is set then this method results in an infinite loop.\n\n@return the number of bits set to <code>true</code> in this TinyBitSet.", "predict": "Returns the cardinality of the histogram."}
{"ID": 674, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void setNamingPolicy(NamingPolicy namingPolicy) { if (namingPolicy == null) namingPolicy = DefaultNamingPolicy.INSTANCE; this.namingPolicy = namingPolicy; }. ### Assistant:", "ground_truth": "Override the default naming policy.\n@see DefaultNamingPolicy\n@param namingPolicy the custom policy, or null to use the default", "predict": "Sets the naming policy for this context. @param namingPolicy the naming policy for this context."}
{"ID": 675, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Method[] findMethods(String[] namesAndDescriptors, Method[] methods) { Map map = new HashMap(); for (int i = 0; i < methods.length; i++) { Method method = methods[i]; map.put(method.getName() + Type.getMethodDescriptor(method), method); } Method[] result = new Method[namesAndDescriptors.length / 2]; for (int i = 0; i < result.length; i++) { result[i] = (Method)map.get(namesAndDescriptors[i * 2] + namesAndDescriptors[i * 2 + 1]); if (result[i] == null) { // TODO: error? } } return result; }. ### Assistant:", "ground_truth": "used by MethodInterceptorGenerated generated code", "predict": "Finds the Methods in the Methods array that match the names and descriptors in the namesAndDescriptors array. The names and descriptors are assumed to be in the order of the Methods in the Methods array. @param namesAndDescriptors the names and descriptors of the Methods in the Methods array. @param methods the Methods array to find the Methods in. @return the Methods found."}
{"ID": 676, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Path resolve(final Path base, String child) { if (StringUtil.startsWithChar(child, File.separatorChar)) { child = child.substring(1); } return base.resolve(child); }. ### Assistant:", "ground_truth": "Resolves subpath in safer way. For some reason, if child starts with\na separator it gets resolved as a full path, ignoring the base.\nThis method acts different.", "predict": "Resolve a child path from a base path. @param base base path @param child child path @return resolved path"}
{"ID": 677, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String readString(final Path path) throws IOException { try (BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) { StringWriter writer = new StringWriter(); // flush & close not needed for StringWriter-instance StreamUtil.copy(reader, writer); return writer.toString(); } }. ### Assistant:", "ground_truth": "Reads path content.", "predict": "Reads a string from a file. @param path Path to the file. @return The string read from the file. @throws IOException If an error occurs while reading the file."}
{"ID": 678, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public HttpRequest host(final String host) { this.host = host; if (headers.contains(HEADER_HOST)) { headerOverwrite(HEADER_HOST, host); } return this; }. ### Assistant:", "ground_truth": "Sets request host name.", "predict": "Set the host header. @param host the host to set @return this request"}
{"ID": 679, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static HttpRequest create(final String method, final String destination) { return new HttpRequest() .method(method.toUpperCase()) .set(destination); }. ### Assistant:", "ground_truth": "Generic request builder, usually used when method is a variable.\nOtherwise, use one of the other static request builder methods.", "predict": "Create a new HttpRequest instance with the specified method and destination. @param method the HTTP method (e.g. GET, POST, PUT, DELETE) @param destination the destination of the request (e.g. \"/some/path\") @return HttpRequest"}
{"ID": 680, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static HttpRequest connect(final String destination) { return new HttpRequest() .method(HttpMethod.CONNECT) .set(destination); }. ### Assistant:", "ground_truth": "Builds a CONNECT request.", "predict": "Connect to a destination using the HTTP CONNECT method. @param destination Destination to connect to. @return HttpRequest instance."}
{"ID": 681, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static HttpRequest get(final String destination) { return new HttpRequest() .method(HttpMethod.GET) .set(destination); }. ### Assistant:", "ground_truth": "Builds a GET request.", "predict": "Create a GET request to the specified destination. @param destination the destination to GET to. @return the GET request."}
{"ID": 682, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static HttpRequest post(final String destination) { return new HttpRequest() .method(HttpMethod.POST) .set(destination); }. ### Assistant:", "ground_truth": "Builds a POST request.", "predict": "Send a POST request to the specified destination. @param destination The destination to send the POST request to. @return The HttpRequest object."}
{"ID": 683, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static HttpRequest put(final String destination) { return new HttpRequest() .method(HttpMethod.PUT) .set(destination); }. ### Assistant:", "ground_truth": "Builds a PUT request.", "predict": "Create a new HttpRequest for a PUT request to the given destination. @param destination The destination to which the PUT request should be sent. @return The new HttpRequest."}
{"ID": 684, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static HttpRequest patch(final String destination) { return new HttpRequest() .method(HttpMethod.PATCH) .set(destination); }. ### Assistant:", "ground_truth": "Builds a PATCH request.", "predict": "Patch request to the specified destination. @param destination the destination to send the request to. @return HttpRequest instance."}
{"ID": 685, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static HttpRequest delete(final String destination) { return new HttpRequest() .method(HttpMethod.DELETE) .set(destination); }. ### Assistant:", "ground_truth": "Builds a DELETE request.", "predict": "Create a DELETE request to the specified destination. @param destination the destination to send the request to. @return the HttpRequest object."}
{"ID": 686, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static HttpRequest head(final String destination) { return new HttpRequest() .method(HttpMethod.HEAD) .set(destination); }. ### Assistant:", "ground_truth": "Builds a HEAD request.", "predict": "Send a HEAD request to the given destination. @param destination the destination to send the HEAD request to. @return the HttpRequest object."}
{"ID": 687, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static HttpRequest trace(final String destination) { return new HttpRequest() .method(HttpMethod.TRACE) .set(destination); }. ### Assistant:", "ground_truth": "Builds a TRACE request.", "predict": "Create a new HttpRequest with TRACE method and destination set. @param destination Destination to set. @return HttpRequest with TRACE method and destination set."}
{"ID": 688, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static HttpRequest options(final String destination) { return new HttpRequest() .method(HttpMethod.OPTIONS) .set(destination); }. ### Assistant:", "ground_truth": "Builds an OPTIONS request.", "predict": "Send an OPTIONS request to the specified destination. @param destination the destination to send the OPTIONS request to. @return the HttpRequest object."}
{"ID": 689, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public HttpRequest path(String path) { // this must be the only place that sets the path if (!path.startsWith(StringPool.SLASH)) { path = StringPool.SLASH + path; } int ndx = path.indexOf('?'); if (ndx != -1) { String queryString = path.substring(ndx + 1); path = path.substring(0, ndx); query = HttpUtil.parseQuery(queryString, true); } else { query = HttpMultiMap.newCaseInsensitiveMap(); } this.path = path; return this; }. ### Assistant:", "ground_truth": "Sets request path. Query string is allowed.\nAdds a slash if path doesn't start with one.\nQuery will be stripped out from the path.\nPrevious query is discarded.\n@see #query()", "predict": "Set the path of the request. If the path starts with a slash, it is treated as a relative path. If it doesn't, it is treated as an absolute path. @param path the path of the request. @return the request."}
{"ID": 690, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public HttpRequest cookies(final Cookie... cookies) { if (cookies.length == 0) { return this; } StringBuilder cookieString = new StringBuilder(); boolean first = true; for (Cookie cookie : cookies) { Integer maxAge = cookie.getMaxAge(); if (maxAge != null && maxAge.intValue() == 0) { continue; } if (!first) { cookieString.append(\"; \"); } first = false; cookieString.append(cookie.getName()); cookieString.append('='); cookieString.append(cookie.getValue()); } headerOverwrite(\"cookie\", cookieString.toString()); return this; }. ### Assistant:", "ground_truth": "Sets cookies to the request.", "predict": "Add cookies to the headers of the request. If no cookies are provided, the headers will not be modified. @param cookies the cookies to add to the headers. @return the updated request."}
{"ID": 691, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public HttpRequest query(final String name1, final Object value1, final Object... parameters) { query(name1, value1 == null ? null : value1.toString()); for (int i = 0; i < parameters.length; i += 2) { String name = parameters[i].toString(); String value = parameters[i + 1].toString(); query.add(name, value); } return this; }. ### Assistant:", "ground_truth": "Adds many query parameters at once. Although it accepts objects,\neach value will be converted to string.", "predict": "Adds parameters to the query. @param name1 Parameter name. @param value1 Parameter value. @param parameters Additional parameters. @return HttpRequest object."}
{"ID": 692, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public HttpRequest query(final Map<String, String> queryMap) { for (Map.Entry<String, String> entry : queryMap.entrySet()) { query.add(entry.getKey(), entry.getValue()); } return this; }. ### Assistant:", "ground_truth": "Adds all parameters from the provided map.", "predict": "Add query parameters to the request. @param queryMap Map of query parameters. @return HttpRequest for chaining."}
{"ID": 693, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public HttpRequest queryString(final String queryString, final boolean decode) { this.query = HttpUtil.parseQuery(queryString, decode); return this; }. ### Assistant:", "ground_truth": "Sets query from provided query string. Previous query values\nare discarded.", "predict": "Add query string parameters to the request. @param queryString the query string @param decode whether to decode the query string @return the HttpRequest object itself"}
{"ID": 694, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String queryString() { if (query == null) { return StringPool.EMPTY; } return HttpUtil.buildQuery(query, queryEncoding); }. ### Assistant:", "ground_truth": "Generates query string. All values are URL encoded.", "predict": "Get the query string. @return the query string"}
{"ID": 695, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String hostUrl() { StringBand url = new StringBand(8); if (protocol != null) { url.append(protocol); url.append(\"://\"); } if (host != null) { url.append(host); } if (port != Defaults.DEFAULT_PORT) { url.append(':'); url.append(port); } return url.toString(); }. ### Assistant:", "ground_truth": "Returns just host url, without path and query.", "predict": "Returns the host URL. @return the host URL"}
{"ID": 696, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public HttpRequest basicAuthentication(final String username, final String password) { if (username != null && password != null) { String data = username.concat(StringPool.COLON).concat(password); String base64 = Base64.encodeToString(data); headerOverwrite(HEADER_AUTHORIZATION, \"Basic \" + base64); } return this; }. ### Assistant:", "ground_truth": "Enables basic authentication by adding required header.", "predict": "Adds basic authentication to the request. @param username username @param password password @return HttpRequest self"}
{"ID": 697, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public HttpRequest setHostHeader() { String hostPort = this.host; if (port != Defaults.DEFAULT_PORT) { hostPort += StringPool.COLON + port; } headerOverwrite(HEADER_HOST, hostPort); return this; }. ### Assistant:", "ground_truth": "Sets 'Host' header from current host and port.", "predict": "Set the host header. @return The HttpRequest for chaining."}
{"ID": 698, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override protected Buffer buffer(final boolean fullRequest) { // INITIALIZATION // host port if (header(HEADER_HOST) == null) { setHostHeader(); } // form Buffer formBuffer = formBuffer(); // query string String queryString = queryString(); // user-agent if (header(\"User-Agent\") == null) { header(\"User-Agent\", Defaults.userAgent); } // POST method requires Content-Type to be set if (method.equals(\"POST\") && (contentLength() == null)) { contentLength(0); } // BUILD OUT Buffer request = new Buffer(); request.append(method) .append(SPACE) .append(path); if (query != null && !query.isEmpty()) { request.append('?'); request.append(queryString); } request.append(SPACE) .append(httpVersion) .append(CRLF); populateHeaderAndBody(request, formBuffer, fullRequest); return request; }. ### Assistant:", "ground_truth": "Prepares the request buffer.", "predict": "Build the request buffer. @param fullRequest Whether the full request should be built. @return The request buffer."}
{"ID": 699, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <R> R sendAndReceive(final Function<HttpResponse, R> responseHandler) { return responseHandler.apply(send()); }. ### Assistant:", "ground_truth": "Syntax sugar.", "predict": "Send the request and return the response. The responseHandler is called with the response. @param responseHandler the response handler @return the response"}
{"ID": 700, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: static Handler removeRange(final Handler firstHandler, final Label start, final Label end) { if (firstHandler == null) { return null; } else { firstHandler.nextHandler = removeRange(firstHandler.nextHandler, start, end); } int handlerStart = firstHandler.startPc.bytecodeOffset; int handlerEnd = firstHandler.endPc.bytecodeOffset; int rangeStart = start.bytecodeOffset; int rangeEnd = end == null ? Integer.MAX_VALUE : end.bytecodeOffset; // Return early if [handlerStart,handlerEnd[ and [rangeStart,rangeEnd[ don't intersect. if (rangeStart >= handlerEnd || rangeEnd <= handlerStart) { return firstHandler; } if (rangeStart <= handlerStart) { if (rangeEnd >= handlerEnd) { // If [handlerStart,handlerEnd[ is included in [rangeStart,rangeEnd[, remove firstHandler. return firstHandler.nextHandler; } else { // [handlerStart,handlerEnd[ - [rangeStart,rangeEnd[ = [rangeEnd,handlerEnd[ return new Handler(firstHandler, end, firstHandler.endPc); } } else if (rangeEnd >= handlerEnd) { // [handlerStart,handlerEnd[ - [rangeStart,rangeEnd[ = [handlerStart,rangeStart[ return new Handler(firstHandler, firstHandler.startPc, start); } else { // [handlerStart,handlerEnd[ - [rangeStart,rangeEnd[ = // [handlerStart,rangeStart[ + [rangeEnd,handerEnd[ firstHandler.nextHandler = new Handler(firstHandler, end, firstHandler.endPc); return new Handler(firstHandler, firstHandler.startPc, start); } }. ### Assistant:", "ground_truth": "Removes the range between start and end from the Handler list that begins with the given\nelement.\n\n@param firstHandler the beginning of a Handler list. May be {@literal null}.\n@param start the start of the range to be removed.\n@param end the end of the range to be removed. Maybe {@literal null}.\n@return the exception handler list with the start-end range removed.", "predict": "Remove a range of handlers from the firstHandler. The range is defined by the Label start and end. The firstHandler is returned if the range is empty. Otherwise, the firstHandler is replaced by a new Handler that contains the range. The new Handler is returned if the range is empty. Otherwise, the new Handler is returned. @param firstHandler The first handler in the chain. @param start The Label defining the start of the range. @param end The Label defining the end of the range. @return The firstHandler or a new Handler that contains the range."}
{"ID": 701, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: static int getExceptionTableLength(final Handler firstHandler) { int length = 0; Handler handler = firstHandler; while (handler != null) { length++; handler = handler.nextHandler; } return length; }. ### Assistant:", "ground_truth": "Returns the number of elements of the Handler list that begins with the given element.\n\n@param firstHandler the beginning of a Handler list. May be {@literal null}.\n@return the number of elements of the Handler list that begins with 'handler'.", "predict": "Returns the length of the exception table. The length is the number of handlers in the chain."}
{"ID": 702, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void collectActionInterceptors() { final Collection<? extends ActionInterceptor> interceptorValues = interceptorsManager.getAllInterceptors(); interceptors = new ArrayList<>(); interceptors.addAll(interceptorValues); interceptors.sort(Comparator.comparing(a -> a.getClass().getSimpleName())); }. ### Assistant:", "ground_truth": "Collects all interceptors.", "predict": "Collect action interceptors. @see #interceptors"}
{"ID": 703, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void collectActionFilters() { final Collection<? extends ActionFilter> filterValues = filtersManager.getAllFilters(); filters = new ArrayList<>(); filters.addAll(filterValues); filters.sort(Comparator.comparing(a -> a.getClass().getSimpleName())); }. ### Assistant:", "ground_truth": "Collects all filters.", "predict": "Collect all action filters."}
{"ID": 704, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void collectActionResults() { final Collection<ActionResult> resultsValues = resultsManager.getAllActionResults(); results = new ArrayList<>(); results.addAll(resultsValues); results.sort(Comparator.comparing(a -> a.getClass().getSimpleName())); }. ### Assistant:", "ground_truth": "Collects all action results.", "predict": "Collect all action results."}
{"ID": 705, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void collectActionRuntimes() { actions = actionsManager.getAllActionRuntimes(); actions.sort(Comparator.comparing(ActionRuntime::getActionPath)); }. ### Assistant:", "ground_truth": "Collects all action runtime configurations.", "predict": "Collect all action runtimes from actions manager."}
{"ID": 706, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings({\"unchecked\"}) protected void setSimpleProperty(final BeanProperty bp, final Object value) { Setter setter = bp.getSetter(isDeclared); // try: setter if (setter != null) { invokeSetter(setter, bp, value); return; } // try: put(\"property\", value) if (bp.isMap()) { ((Map) bp.bean).put(bp.name, value); return; } if (isSilent) { return; } throw new BeanException(\"Simple property not found: \" + bp.name, bp); }. ### Assistant:", "ground_truth": "Sets a value of simple property.", "predict": "Property setter is not found."}
{"ID": 707, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public <T> T getProperty(final Object bean, final String name) { BeanProperty beanProperty = new BeanProperty(this, bean, name); if (!isSilent) { resolveNestedProperties(beanProperty); return (T) getIndexProperty(beanProperty); } else { try { resolveNestedProperties(beanProperty); return (T) getIndexProperty(beanProperty); } catch (Exception ignore) { return null; } } }. ### Assistant:", "ground_truth": "Returns value of bean's property.", "predict": "Get a property from the given bean. If the property is not found, returns null. If the property is found, returns the value. If the property is nested, resolves the nested property recursively. If the property is not found, returns null. If the property is found, returns the value. If the property is nested, resolves the nested property recursively. If the property is not found, returns null. If the property is found, returns the value. If the property is nested, resolves the nested property recursively. If the property is not found, returns null. If the property is found, returns the value. If the property is nested, resolves the nested property recursively. If the property is not found, returns null. If the property is found, returns the value. If the property is nested, resolves the nested property recursively. If the property is not found, returns null. If the property is found, returns the value. If the property is nested, resolves the nested property recursively. If the property is"}
{"ID": 708, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public String extractThisReference(final String propertyName) { int ndx = StringUtil.indexOfChars(propertyName, INDEX_CHARS); if (ndx == -1) { return propertyName; } return propertyName.substring(0, ndx); }. ### Assistant:", "ground_truth": "Extract the first name of this reference.", "predict": "Extracts the first part of a camelCase property name. @param propertyName the property name @return the first part of the camelCase property name"}
{"ID": 709, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public PrintWriter getWriter() { if (writer == null) { writer = new FastCharArrayWriter(); printWriter = new PrintWriter(writer); } return printWriter; }. ### Assistant:", "ground_truth": "Returns buffered writer. Buffer will be created if not already used.", "predict": "Returns the writer used to print the response. @return the writer used to print the response."}
{"ID": 710, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void setObjectReference(final String name, final Object object) { if (objectRefs == null) { objectRefs = new HashMap<>(); } objectRefs.put(name, object); }. ### Assistant:", "ground_truth": "Saves object reference.", "predict": "Sets the object reference for the given name. If the object reference already exists, it will be replaced. @param name The name of the object reference @param object The object reference itself"}
{"ID": 711, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Object getObjectReference(final String name) { if (objectRefs == null) { return null; } return objectRefs.get(name); }. ### Assistant:", "ground_truth": "Returns object reference.", "predict": "Returns the object reference for the specified name. If the name is not found, returns null. @param name the name of the object reference @return the object reference for the specified name"}
{"ID": 712, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Object lookupObject(final String ref) { Object value = getObjectReference(ref); if (value == null) { throw new DbSqlBuilderException(\"Invalid object reference: \" + ref); } return value; }. ### Assistant:", "ground_truth": "Lookups for object reference and throws an exception if reference doesn't exist.", "predict": "Lookup an object reference. @param ref the object reference @return the object reference @throws DbSqlBuilderException if the reference is invalid"}
{"ID": 713, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public DbEntityDescriptor getTableDescriptor(final String tableRef) { if (tableRefs == null) { return null; } TableRefData t = tableRefs.get(tableRef); return t == null ? null : t.desc; }. ### Assistant:", "ground_truth": "Returns entity descriptor for provided table reference.", "predict": "Get the descriptor for the table referenced by the tableRef. @param tableRef the tableRef to get the descriptor for @return the descriptor for the table referenced by the tableRef or null if the tableRef is not registered in the tableRefs map."}
{"ID": 714, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public DbEntityDescriptor findTableDescriptorByColumnRef(final String columnRef) { for (Map.Entry<String, TableRefData> entry : tableRefs.entrySet()) { DbEntityDescriptor ded = entry.getValue().desc; if (ded.findByPropertyName(columnRef) != null) { return ded; } } return null; }. ### Assistant:", "ground_truth": "Finds entity descriptor of a table that contains provided column reference.", "predict": "Find the DbEntityDescriptor for the table that contains the column referenced by the columnRef. @param columnRef ColumnRef to search for @return DbEntityDescriptor for the table that contains the column referenced by the columnRef or null if not found"}
{"ID": 715, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String getTableAlias(final String tableRef) { if (tableRefs == null) { return null; } TableRefData t = tableRefs.get(tableRef); return t == null ? null : t.alias; }. ### Assistant:", "ground_truth": "Returns table alias for provided table reference.", "predict": "Returns the alias for the table referenced by the given tableRef. If the tableRef is not found in the tableRefs map, returns null. @param tableRef the tableRef to look up @return the alias for the table referenced by the given tableRef or null if the tableRef is not found in the tableRefs map."}
{"ID": 716, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void registerTableReference(final String tableReference, final DbEntityDescriptor ded, final String tableAlias) { if (tableRefs == null) { tableRefs = new HashMap<>(); } TableRefData t = new TableRefData(ded, tableAlias); if (tableRefs.put(tableReference, t) != null) { throw new DbSqlBuilderException(\"Duplicated table reference: \" + tableReference); } }. ### Assistant:", "ground_truth": "Registers table reference for provided entity.", "predict": "Register table reference. @param tableReference table reference @param ded entity descriptor @param tableAlias table alias"}
{"ID": 717, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected DbEntityDescriptor lookupTableRef(final String tableRef) { DbEntityDescriptor ded = getTableDescriptor(tableRef); if (ded == null) { throw new DbSqlBuilderException(\"Table reference not used in this query: \" + tableRef); } return ded; }. ### Assistant:", "ground_truth": "Lookups for table reference and throws an exception if table reference not found.", "predict": "Lookup the DbEntityDescriptor for the table referenced by the tableRef. If it doesn't exist, throw an exception. @param tableRef The table reference @return The DbEntityDescriptor for the table referenced by the tableRef."}
{"ID": 718, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void registerHint(final String hint) { if (hints == null) { hints = new ArrayList<>(hintCount); } hints.add(hint); }. ### Assistant:", "ground_truth": "Registers a hint.", "predict": "Registers a hint. @param hint The hint to register."}
{"ID": 719, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public final boolean serialize(final JsonContext jsonContext, final T value) { if (jsonContext.pushValue(value)) { // prevent circular dependencies return false; } serializeValue(jsonContext, value); jsonContext.popValue(); return true; }. ### Assistant:", "ground_truth": "Detects circular dependencies and pushes value as current\ntype context.", "predict": "Serialize the value. @param jsonContext the current JSON context @param value the value to serialize @return true if serialization was successful, false otherwise"}
{"ID": 720, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void injectAttributes(final HttpServletRequest servletRequest, final Targets targets) { final Enumeration<String> attributeNames = servletRequest.getAttributeNames(); while (attributeNames.hasMoreElements()) { final String attrName = attributeNames.nextElement(); targets.forEachTargetAndIn(this, (target, in) -> { final String name = in.matchedName(attrName); if (name != null) { final Object attrValue = servletRequest.getAttribute(attrName); target.writeValue(name, attrValue, true); } }); } }. ### Assistant:", "ground_truth": "Injects request attributes.", "predict": "Injects the attributes of the current request into the targets. @param servletRequest the current request @param targets the targets to inject into"}
{"ID": 721, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void injectParameters(final HttpServletRequest servletRequest, final Targets targets) { final boolean encode = encodeGetParams && servletRequest.getMethod().equals(\"GET\"); final Enumeration<String> paramNames = servletRequest.getParameterNames(); while (paramNames.hasMoreElements()) { final String paramName = paramNames.nextElement(); if (servletRequest.getAttribute(paramName) != null) { continue; } targets.forEachTargetAndIn(this, (target, in) -> { final String name = in.matchedName(paramName); if (name != null) { String[] paramValues = servletRequest.getParameterValues(paramName); paramValues = ServletUtil.prepareParameters( paramValues, treatEmptyParamsAsNull, ignoreEmptyRequestParams); if (paramValues != null) { if (encode) { for (int j = 0; j < paramValues.length; j++) { final String p = paramValues[j]; if (p != null) { final String encoding = madvocEncoding.getEncoding(); paramValues[j] = StringUtil.convertCharset(p, StringPool.ISO_8859_1, encoding); } } } final Object value = (paramValues.length != 1 ? paramValues : paramValues[0]); target.writeValue(name, value, true); } } }); } }. ### Assistant:", "ground_truth": "Inject request parameters.", "predict": "Injects the parameters of the incoming request into the targets. @param servletRequest the incoming request @param targets the targets to inject into"}
{"ID": 722, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void injectUploadedFiles(final HttpServletRequest servletRequest, final Targets targets) { if (!(servletRequest instanceof MultipartRequestWrapper)) { return; } final MultipartRequestWrapper multipartRequest = (MultipartRequestWrapper) servletRequest; if (!multipartRequest.isMultipart()) { return; } final Enumeration<String> paramNames = multipartRequest.getFileParameterNames(); while (paramNames.hasMoreElements()) { final String paramName = paramNames.nextElement(); if (servletRequest.getAttribute(paramName) != null) { continue; } targets.forEachTargetAndIn(this, (target, in) -> { final String name = in.matchedName(paramName); if (name != null) { final FileUpload[] paramValues = multipartRequest.getFiles(paramName); if (ignoreInvalidUploadFiles) { for (int j = 0; j < paramValues.length; j++) { final FileUpload paramValue = paramValues[j]; if ((!paramValue.isValid()) || (!paramValue.isUploaded())) { paramValues[j] = null; } } } final Object value = (paramValues.length == 1 ? paramValues[0] : paramValues); target.writeValue(name, value, true); } }); } }. ### Assistant:", "ground_truth": "Inject uploaded files from multipart request parameters.", "predict": "Inject uploaded files. @param servletRequest the servlet request @param targets the targets"}
{"ID": 723, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String convertPropertyNameToColumnName(final String propertyName) { StringBuilder tableName = new StringBuilder(propertyName.length() * 2); if (splitCamelCase) { String convertedTableName = Format.fromCamelCase(propertyName, separatorChar); tableName.append(convertedTableName); } else { tableName.append(propertyName); } if (!changeCase) { return tableName.toString(); } return uppercase ? toUppercase(tableName).toString() : toLowercase(tableName).toString(); }. ### Assistant:", "ground_truth": "Converts property name to column name.", "predict": "Convert the property name to a column name. @param propertyName the property name @return the column name"}
{"ID": 724, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String convertColumnNameToPropertyName(final String columnName) { StringBuilder propertyName = new StringBuilder(columnName.length()); int len = columnName.length(); if (splitCamelCase) { boolean toUpper = false; for (int i = 0; i < len; i++) { char c = columnName.charAt(i); if (c == separatorChar) { toUpper = true; continue; } if (toUpper) { propertyName.append(Character.toUpperCase(c)); toUpper = false; } else { propertyName.append(Character.toLowerCase(c)); } } return propertyName.toString(); } return columnName; }. ### Assistant:", "ground_truth": "Converts column name to property name.", "predict": "Convert column name to property name. @param columnName Column name. @return Property name."}
{"ID": 725, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String applyToColumnName(final String columnName) { String propertyName = convertColumnNameToPropertyName(columnName); return convertPropertyNameToColumnName(propertyName); }. ### Assistant:", "ground_truth": "Applies column naming strategy to given column name hint.\nReturns full column name.", "predict": "Applies the naming conventions to the columnName. @param columnName the columnName to apply the conventions to. @return the columnName with conventions applied."}
{"ID": 726, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void storeValue(final PreparedStatement st, final int index, final Object value, final int dbSqlType) throws SQLException { T t = TypeConverterManager.get().convertType(value, sqlType); set(st, index, t, dbSqlType); }. ### Assistant:", "ground_truth": "Stores value in database. Value is casted to sql type.", "predict": "Store value into prepared statement. @param st Prepared statement @param index Column index @param value Value @param dbSqlType DB SQL type @throws SQLException SQLException"}
{"ID": 727, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings({\"unchecked\"}) protected <E> E prepareGetValue(final T t, final Class<E> destinationType) { if (t == null) { return null; } if (destinationType == null) { return (E) t; } return TypeConverterManager.get().convertType(t, destinationType); }. ### Assistant:", "ground_truth": "Once when value is read from result set, prepare it to match destination type.\n@param t get value\n@param destinationType destination type", "predict": "Prepare the value for the getter. The value is converted if necessary. @param t the value @param destinationType the destination type @return the value or null if the value is null @since 1.0.0"}
{"ID": 728, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Set<T> getAll() { final Set<T> set = new HashSet<>(wrappers.size()); set.addAll(wrappers.values()); return set; }. ### Assistant:", "ground_truth": "Returns all action wrappers. Returns a copy in new set.", "predict": "Returns all the elements of the map."}
{"ID": 729, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public T resolve(final Class<? extends T> wrapperClass) { String wrapperClassName = wrapperClass.getName(); T wrapper = lookup(wrapperClassName); if (wrapper == null) { wrapper = createWrapper(wrapperClass); initializeWrapper(wrapper); wrappers.put(wrapperClassName, wrapper); } return wrapper; }. ### Assistant:", "ground_truth": "Resolves single wrapper. Creates new wrapper instance if not already registered.\nDoes not expand the wrappers.", "predict": "Resolve a wrapper class. @param wrapperClass the wrapper class @return the wrapper instance"}
{"ID": 730, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected <R extends T> R createWrapper(final Class<R> wrapperClass) { try { return ClassUtil.newInstance(wrapperClass); } catch (Exception ex) { throw new MadvocException(\"Invalid Madvoc wrapper: \" + wrapperClass, ex); } }. ### Assistant:", "ground_truth": "Creates new wrapper.", "predict": "Create a new instance of the specified wrapper class. @param wrapperClass the class of the wrapper to create. @return a new instance of the wrapper class. @throws MadvocException if the specified wrapper class is not a valid Madvoc wrapper."}
{"ID": 731, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String separatorsToSystem(final String path) { if (path == null) { return null; } if (SYSTEM_SEPARATOR == WINDOWS_SEPARATOR) { return separatorsToWindows(path); } else { return separatorsToUnix(path); } }. ### Assistant:", "ground_truth": "Converts all separators to the system separator.\n\n@param path  the path to be changed, null ignored\n@return the updated path", "predict": "Convert separators to system. @param path the path to convert @return the converted path"}
{"ID": 732, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static String doGetPath(final String filename, final int separatorAdd) { if (filename == null) { return null; } int prefix = getPrefixLength(filename); if (prefix < 0) { return null; } int index = indexOfLastSeparator(filename); int endIndex = index + separatorAdd; if (prefix >= filename.length() || index < 0 || prefix >= endIndex) { return StringPool.EMPTY; } return filename.substring(prefix, endIndex); }. ### Assistant:", "ground_truth": "Does the work of getting the path.\n\n@param filename  the filename\n@param separatorAdd  0 to omit the end separator, 1 to return it\n@return the path", "predict": "Get the path from a filename. The path is the part of the filename after the last separator. If there is no separator, the path is the entire filename. The separator is always a colon. If the filename is null, the method returns null. @param filename the filename to get the path from. @param separatorAdd the number of characters to add to the end of the filename to get the path. @return the path from the filename. Returns null if the filename is null."}
{"ID": 733, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String[] split(final String filename) { String prefix = getPrefix(filename); if (prefix == null) { prefix = StringPool.EMPTY; } int lastSeparatorIndex = indexOfLastSeparator(filename); int lastExtensionIndex = indexOfExtension(filename); String path; String baseName; String extension; if (lastSeparatorIndex == -1) { path = StringPool.EMPTY; if (lastExtensionIndex == -1) { baseName = filename.substring(prefix.length()); extension = StringPool.EMPTY; } else { baseName = filename.substring(prefix.length(), lastExtensionIndex); extension = filename.substring(lastExtensionIndex + 1); } } else { path = filename.substring(prefix.length(), lastSeparatorIndex + 1); if (lastExtensionIndex == -1) { baseName = filename.substring(prefix.length() + path.length()); extension = StringPool.EMPTY; } else { baseName = filename.substring(prefix.length() + path.length(), lastExtensionIndex); extension = filename.substring(lastExtensionIndex + 1); } } return new String[] {prefix, path, baseName, extension}; }. ### Assistant:", "ground_truth": "Splits filename into a array of four Strings containing prefix, path, basename and extension.\nPath will contain ending separator.", "predict": "Split a filename into its constituent parts. @param filename the filename to split @return the parts of the filename"}
{"ID": 734, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String relativePath(final String targetPath, final String basePath) { return new File(basePath).toPath().relativize(new File(targetPath).toPath()).toString(); }. ### Assistant:", "ground_truth": "Calculates relative path of target path on base path.", "predict": "Returns the relative path between two paths. The base path is considered to be the parent of the target path. @param targetPath The target path. @param basePath The base path. @return The relative path between the two paths."}
{"ID": 735, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public WebApp registerComponent(final Class<?> madvocComponent) { Objects.requireNonNull(madvocComponent); madvocComponents.add(ClassConsumer.of(madvocComponent)); return this; }. ### Assistant:", "ground_truth": "Registers additional Madvoc components after the registration of default components.", "predict": "Register a Madvoc component. The component will be automatically discovered and registered by the framework. @param madvocComponent The Madvoc component to register. @return The current WebApp instance."}
{"ID": 736, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <A extends ActionConfig> WebApp withActionConfig(final Class<A> actionConfigType, final Consumer<A> actionConfigConsumer) { withRegisteredComponent(ActionConfigManager.class, acm -> acm.with(actionConfigType, actionConfigConsumer)); return this; }. ### Assistant:", "ground_truth": "Configures the action configurations.", "predict": "Registers an action config consumer. @param actionConfigType the type of action config to register. @param actionConfigConsumer the consumer to register. @param <A> the type of action config. @return this webapp."}
{"ID": 737, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public WebApp start() { log = LoggerFactory.getLogger(WebApp.class); log.debug(\"Initializing Madvoc WebApp\"); //// params & props for (final Map<String, Object> params : paramsList) { madvocContainer.defineParams(params); } for (final Props props : propsList) { madvocContainer.defineParams(props); } propsList = null; //// components registerMadvocComponents(); madvocComponents.forEach( madvocComponent -> madvocContainer.registerComponent(madvocComponent.type(), madvocComponent.consumer())); madvocComponents = null; madvocComponentInstances.forEach(madvocContainer::registerComponentInstance); madvocComponentInstances = null; configureDefaults(); //// listeners madvocContainer.fireEvent(Init.class); //// component configuration componentConfigs.accept(madvocContainer); componentConfigs = null; initialized(); madvocContainer.fireEvent(Start.class); if (!madvocRouterConsumers.isEmpty()) { final MadvocRouter madvocRouter = MadvocRouter.create(); madvocContainer.registerComponentInstance(madvocRouter); madvocRouterConsumers.accept(madvocRouter); } madvocRouterConsumers = null; started(); madvocContainer.fireEvent(Ready.class); ready(); return this; }. ### Assistant:", "ground_truth": "Initializes and starts web application.", "predict": "Start the Madvoc WebApp. @return The Madvoc WebApp instance."}
{"ID": 738, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void configureDefaults() { final ActionConfigManager actionConfigManager = madvocContainer.lookupComponent(ActionConfigManager.class); actionConfigManager.registerAnnotation(Action.class); actionConfigManager.registerAnnotation(RestAction.class); }. ### Assistant:", "ground_truth": "Configure defaults.", "predict": "Registers default annotations for actions and REST actions."}
{"ID": 739, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void registerMadvocComponents() { if (madvocContainer == null) { throw new MadvocException(\"Madvoc WebApp not initialized.\"); } log.debug(\"Registering Madvoc WebApp components\"); madvocContainer.registerComponent(MadvocEncoding.class); madvocContainer.registerComponentInstance(new ServletContextProvider(servletContext)); madvocContainer.registerComponent(ActionConfigManager.class); madvocContainer.registerComponent(ActionMethodParamNameResolver.class); madvocContainer.registerComponent(ActionMethodParser.class); madvocContainer.registerComponent(ActionPathRewriter.class); madvocContainer.registerComponent(ActionsManager.class); madvocContainer.registerComponent(ContextInjectorComponent.class); madvocContainer.registerComponent(InterceptorsManager.class); madvocContainer.registerComponent(FiltersManager.class); madvocContainer.registerComponent(MadvocController.class); madvocContainer.registerComponent(RootPackages.class); madvocContainer.registerComponent(ResultsManager.class); madvocContainer.registerComponent(ResultMapper.class); madvocContainer.registerComponent(ScopeResolver.class); madvocContainer.registerComponent(ScopeDataInspector.class); madvocContainer.registerComponent(AsyncActionExecutor.class); madvocContainer.registerComponent(FileUploader.class); }. ### Assistant:", "ground_truth": "Registers default Madvoc components.", "predict": "Registers the Madvoc components."}
{"ID": 740, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ClassScanner excludeJars(final String... excludedJars) { for (final String excludedJar : excludedJars) { rulesJars.exclude(excludedJar); } return this; }. ### Assistant:", "ground_truth": "Specify excluded jars.", "predict": "Exclude the specified jars from scanning. @param excludedJars the jars to exclude @return this scanner"}
{"ID": 741, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ClassScanner includeJars(final String... includedJars) { for (final String includedJar : includedJars) { rulesJars.include(includedJar); } return this; }. ### Assistant:", "ground_truth": "Specify included jars.", "predict": "Include the jar files listed in the argument array. @param includedJars the jar files to include @return this scanner"}
{"ID": 742, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ClassScanner includeEntries(final String... includedEntries) { for (final String includedEntry : includedEntries) { rulesEntries.include(includedEntry); } return this; }. ### Assistant:", "ground_truth": "Sets included set of names that will be considered during configuration.\n@see InExRules", "predict": "Include the entries in the rulesEntries. @param includedEntries the entries to include. @return the ClassScanner instance."}
{"ID": 743, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ClassScanner excludeEntries(final String... excludedEntries) { for (final String excludedEntry : excludedEntries) { rulesEntries.exclude(excludedEntry); } return this; }. ### Assistant:", "ground_truth": "Sets excluded names that narrows included set of packages.\n@see InExRules", "predict": "Exclude the specified entries from scanning. @param excludedEntries the excluded entries @return the ClassScanner instance"}
{"ID": 744, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void scanJarFile(final File file) { final ZipFile zipFile; try { zipFile = new ZipFile(file); } catch (IOException ioex) { if (!ignoreException) { throw new FindFileException(\"Invalid zip: \" + file.getName(), ioex); } return; } final Enumeration entries = zipFile.entries(); while (entries.hasMoreElements()) { final ZipEntry zipEntry = (ZipEntry) entries.nextElement(); final String zipEntryName = zipEntry.getName(); try { if (StringUtil.endsWithIgnoreCase(zipEntryName, CLASS_FILE_EXT)) { final String entryName = prepareEntryName(zipEntryName, true); final ClassPathEntry classPathEntry = new ClassPathEntry(entryName, zipFile, zipEntry); try { scanEntry(classPathEntry); } finally { classPathEntry.closeInputStream(); } } else if (includeResources) { final String entryName = prepareEntryName(zipEntryName, false); final ClassPathEntry classPathEntry = new ClassPathEntry(entryName, zipFile, zipEntry); try { scanEntry(classPathEntry); } finally { classPathEntry.closeInputStream(); } } } catch (RuntimeException rex) { if (!ignoreException) { ZipUtil.close(zipFile); throw rex; } } } ZipUtil.close(zipFile); }. ### Assistant:", "ground_truth": "Scans classes inside single JAR archive. Archive is scanned as a zip file.\n@see #onEntry(ClassPathEntry)", "predict": "Scans the jar file for classpath entries. @param file the jar file to scan."}
{"ID": 745, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void scanClassPath(final File root) { String rootPath = root.getAbsolutePath(); if (!rootPath.endsWith(File.separator)) { rootPath += File.separatorChar; } final FindFile ff = FindFile.create().includeDirs(false).recursive(true).searchPath(rootPath); File file; while ((file = ff.nextFile()) != null) { final String filePath = file.getAbsolutePath(); try { if (StringUtil.endsWithIgnoreCase(filePath, CLASS_FILE_EXT)) { scanClassFile(filePath, rootPath, file, true); } else if (includeResources) { scanClassFile(filePath, rootPath, file, false); } } catch (RuntimeException rex) { if (!ignoreException) { throw rex; } } } }. ### Assistant:", "ground_truth": "Scans single classpath directory.\n@see #onEntry(ClassPathEntry)", "predict": "Scans the classpath for class files. @param root The root directory of the classpath."}
{"ID": 746, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static byte[] bytecodeSignatureOfType(final Class type) { final String name = 'L' + type.getName().replace('.', '/') + ';'; return name.getBytes(); }. ### Assistant:", "ground_truth": "Returns type signature bytes used for searching in class file.", "predict": "Returns the bytecode signature of the class. @param type the class to get the bytecode signature of. @return the bytecode signature of the class."}
{"ID": 747, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ClassScanner scan(final String... paths) { for (final String path : paths) { filesToScan.add(new File(path)); } return this; }. ### Assistant:", "ground_truth": "Scans provided paths.", "predict": "Scan all the files in the given paths. @param paths the paths to scan. @return the scanner."}
{"ID": 748, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void start() { if (detectEntriesMode) { rulesEntries.detectMode(); } filesToScan.forEach(file -> { final String path = file.getAbsolutePath(); if (StringUtil.endsWithIgnoreCase(path, JAR_FILE_EXT)) { if (!acceptJar(file)) { return; } scanJarFile(file); } else if (file.isDirectory()) { scanClassPath(file); } }); }. ### Assistant:", "ground_truth": "Starts with the scanner.", "predict": "Start the scanner."}
{"ID": 749, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override protected JtxTransaction createNewTransaction(final JtxTransactionMode tm, final Object scope, final boolean active) { return new DbJtxTransaction(this, tm, scope, active); }. ### Assistant:", "ground_truth": "Builds new transaction instance.", "predict": "Create a new JtxTransaction. @param tm JtxTransactionMode @param scope Object @param active boolean @return JtxTransaction"}
{"ID": 750, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") public <S extends MadvocScope> S defaultOrScopeType(final Class<S> scopeClass) { if (scopeClass == null) { return (S) getOrInitScope(RequestScope.class); } return (S) getOrInitScope(scopeClass); }. ### Assistant:", "ground_truth": "Lookups the scope instance of given scope annotation.\nIf instance does not exist, it will be created, cached and returned.", "predict": "Get the default scope or the scope of the given class. @param scopeClass The scope class. @return The scope."}
{"ID": 751, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected MadvocScope getOrInitScope(final Class<? extends MadvocScope> madvocScopeType) { for (final MadvocScope s : allScopes) { if (s.getClass().equals(madvocScopeType)) { return s; } } // new scope detected final MadvocScope newScope; try { newScope = madpc.createBean(madvocScopeType); } catch (Exception ex) { throw new MadvocException(\"Unable to create scope: \" + madvocScopeType, ex); } allScopes.add(newScope); return newScope; }. ### Assistant:", "ground_truth": "Performs search for the scope class and returns it's instance.", "predict": "Get or create a MadvocScope. If the scope is already created, it will be returned. If not, a new scope will be created and added to the list of scopes. @param madvocScopeType the MadvocScope type to create or get. @return the MadvocScope."}
{"ID": 752, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void forScope(final Class<? extends MadvocScope> scopeType, final Consumer<MadvocScope> madvocScopeConsumer) { final MadvocScope scope = getOrInitScope(scopeType); madvocScopeConsumer.accept(scope); }. ### Assistant:", "ground_truth": "Finds a given scope and consumes it.", "predict": "ForScope is used to initialize a MadvocScope object. The MadvocScope object is typically used to define the scope of the Madvoc application. This is typically done in the MadvocApplication class. The MadvocScope object is typically created by the MadvocApplication class. The MadvocScope object is typically created by the MadvocApplication class. This method is typically used to initialize the MadvocScope object. This method is typically used to initialize the MadvocScope object. This method is typically used to initialize the MadvocScope object. This method is typically used to initialize the MadvocScope object. This method is typically used to initialize the MadvocScope object. This method is typically used to initialize the MadvocScope object. This method is typically used to initialize the MadvocScope object. This method is typically used to initialize the MadvocScope object. This method is typically used to initialize the MadvocScope object. This method is typically used to initialize the Madvoc"}
{"ID": 753, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static byte[] decode(final char[] arr) { int length = arr.length; if (length == 0) { return new byte[0]; } int sndx = 0, endx = length - 1; int pad = arr[endx] == '=' ? (arr[endx - 1] == '=' ? 2 : 1) : 0; int cnt = endx - sndx + 1; int sepCnt = length > 76 ? (arr[76] == '\\r' ? cnt / 78 : 0) << 1 : 0; int len = ((cnt - sepCnt) * 6 >> 3) - pad; byte[] dest = new byte[len]; int d = 0; for (int cc = 0, eLen = (len / 3) * 3; d < eLen;) { int i = INV[arr[sndx++]] << 18 | INV[arr[sndx++]] << 12 | INV[arr[sndx++]] << 6 | INV[arr[sndx++]]; dest[d++] = (byte) (i >> 16); dest[d++] = (byte) (i >> 8); dest[d++] = (byte) i; if (sepCnt > 0 && ++cc == 19) { sndx += 2; cc = 0; } } if (d < len) { int i = 0; for (int j = 0; sndx <= endx - pad; j++) { i |= INV[arr[sndx++]] << (18 - j * 6); } for (int r = 16; d < len; r -= 8) { dest[d++] = (byte) (i >> r); } } return dest; }. ### Assistant:", "ground_truth": "Decodes a BASE64 encoded char array.", "predict": "Decodes a DER encoded byte array. @param arr the encoded data. @return the decoded data. @since 1.5"}
{"ID": 754, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings({\"unchecked\"}) public static String prepareCsrfToken(final HttpSession session, final int timeToLive) { Set<Token> tokenSet = (Set<Token>) session.getAttribute(CSRF_TOKEN_SET); if (tokenSet == null) { tokenSet = new HashSet<>(); session.setAttribute(CSRF_TOKEN_SET, tokenSet); } String value; boolean unique; do { value = RandomString.get().randomAlphaNumeric(32); assureSize(tokenSet); unique = tokenSet.add(new Token(value, timeToLive)); } while (!unique); return value; }. ### Assistant:", "ground_truth": "Generates new CSRF token and puts it in the session. Returns generated token value.", "predict": "Generate a new csrf token. This method is thread-safe. @param session The HttpSession to use. @param timeToLive The time to live for the generated token. @return The generated token."}
{"ID": 755, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected static void assureSize(final Set<Token> tokenSet) { if (tokenSet.size() < maxTokensPerSession) { return; } long validUntilMin = Long.MAX_VALUE; Token tokenToRemove = null; Iterator<Token> iterator = tokenSet.iterator(); while (iterator.hasNext()) { Token token = iterator.next(); if (token.isExpired()) { iterator.remove(); continue; } if (token.validUntil < validUntilMin) { validUntilMin = token.validUntil; tokenToRemove = token; } } if ((tokenToRemove != null) && (tokenSet.size() >= maxTokensPerSession)) { tokenSet.remove(tokenToRemove); } }. ### Assistant:", "ground_truth": "Removes expired tokens if token set is full.\n@see #setMaxTokensPerSession(int)", "predict": "Ensures that the size of the tokenSet is not greater than maxTokensPerSession. If it is, removes the oldest token."}
{"ID": 756, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings({\"unchecked\"}) public static boolean checkCsrfToken(final HttpSession session, final String tokenValue) { Set<Token> tokenSet = (Set<Token>) session.getAttribute(CSRF_TOKEN_SET); if ((tokenSet == null) && (tokenValue == null)) { return true; } if ((tokenSet == null) || (tokenValue == null)) { return false; } boolean found = false; Iterator<Token> it = tokenSet.iterator(); while (it.hasNext()) { Token t = it.next(); if (t.isExpired()) { it.remove(); continue; } if (t.getValue().equals(tokenValue)) { it.remove(); found = true; } } return found; }. ### Assistant:", "ground_truth": "Checks token value.\nC", "predict": "Checks if the CSRF token is valid. If the token is not found, it is assumed that the token is valid. @param session The session to check the CSRF token in. @param tokenValue The value of the CSRF token to check. @return True if the CSRF token is valid, false otherwise."}
{"ID": 757, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static BeanCopy from(final Object source) { BeanCopy beanCopy = new BeanCopy(source); beanCopy.isSourceMap = source instanceof Map; return beanCopy; }. ### Assistant:", "ground_truth": "Defines source, detects a map.", "predict": "Create a new BeanCopy from the given source. The source can be a Map, a BeanInfo, or any other Java object that can be converted to a BeanCopy. @param source the source object @return a BeanCopy object"}
{"ID": 758, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void copy() { beanUtil = new BeanUtilBean() .declared(declared) .forced(forced) .silent(true); visit(); }. ### Assistant:", "ground_truth": "Performs the copying.", "predict": "Copies the current bean utilities."}
{"ID": 759, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override protected boolean visitProperty(String name, final Object value) { if (isTargetMap) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET; } beanUtil.setProperty(destination, name, value); return true; }. ### Assistant:", "ground_truth": "Copies single property to the destination.\nExceptions are ignored, so copying continues if\ndestination does not have some of the sources properties.", "predict": "Visit a property. @param name the property name @param value the property value @return true if the property was visited"}
{"ID": 760, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void init(final TemplateData templateData) { super.init(templateData); if (entity != null) { ded = lookupType(entity); } else { Object object = templateData.getObjectReference(entityName); if (object != null) { ded = lookupType(resolveClass(object)); } else { ded = lookupName(entityName); } } String tableReference = this.tableReference; if (tableReference == null) { tableReference = tableAlias; } if (tableReference == null) { tableReference = entityName; } if (tableReference == null) { tableReference = ded.getEntityName(); } templateData.registerTableReference(tableReference, ded, tableAlias); }. ### Assistant:", "ground_truth": "Resolves and registers table references.", "predict": "Initializes the deductive entity. @param templateData the template data"}
{"ID": 761, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") public <S extends Scope> S resolveScope(final Class<S> scopeType) { S scope = (S) scopes.get(scopeType); if (scope == null) { try { scope = newInternalInstance(scopeType, (PetiteContainer) this); } catch (Exception ex) { throw new PetiteException(\"Invalid Petite scope: \" + scopeType.getName(), ex); } registerScope(scopeType, scope); scopes.put(scopeType, scope); } return scope; }. ### Assistant:", "ground_truth": "Resolves and registers scope from a scope type.", "predict": "Resolve a scope by its type. @param scopeType The type of the scope to resolve. @param <S> The type of the scope. @return The scope."}
{"ID": 762, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <T> BeanDefinition<T> registerPetiteBean( final Class<T> type, String name, Class<? extends Scope> scopeType, WiringMode wiringMode, final boolean define, final Consumer<T> consumer ) { if (name == null) { name = resolveBeanName(type); } if (wiringMode == null) { wiringMode = annotationResolver.resolveBeanWiringMode(type); } if (wiringMode == WiringMode.DEFAULT) { wiringMode = petiteConfig.getDefaultWiringMode(); } if (scopeType == null) { scopeType = annotationResolver.resolveBeanScopeType(type); } if (scopeType == null) { scopeType = SingletonScope.class; } // remove existing bean BeanDefinition existing = removeBean(name); if (existing != null) { if (petiteConfig.getDetectDuplicatedBeanNames()) { throw new PetiteException( \"Duplicated bean name detected while registering class '\" + type.getName() + \"'. Petite bean class '\" + existing.type.getName() + \"' is already registered with the name: \" + name); } } // check if type is valid if (type.isInterface()) { throw new PetiteException(\"PetiteBean can not be an interface: \" + type.getName()); } // registration if (log.isDebugEnabled()) { log.info(\"Petite bean: [\" + name + \"] --> \" + type.getName() + \" @ \" + scopeType.getSimpleName() + \":\" + wiringMode.toString()); } // register Scope scope = resolveScope(scopeType); BeanDefinition<T> beanDefinition = createBeanDefinitionForRegistration(name, type, scope, wiringMode, consumer); registerBean(name, beanDefinition); // providers ProviderDefinition[] providerDefinitions = petiteResolvers.resolveProviderDefinitions(type, name); if (providerDefinitions != null) { for (ProviderDefinition providerDefinition : providerDefinitions) { providers.put(providerDefinition.name, providerDefinition); } } // define if (define) { beanDefinition.ctor = petiteResolvers.resolveCtorInjectionPoint(beanDefinition.type()); beanDefinition.properties = PropertyInjectionPoint.EMPTY; beanDefinition.methods = MethodInjectionPoint.EMPTY; beanDefinition.initMethods = InitMethodPoint.EMPTY; beanDefinition.destroyMethods = DestroyMethodPoint.EMPTY; } // return return beanDefinition; }. ### Assistant:", "ground_truth": "Registers or defines a bean.\n\n@param type bean type, must be specified\n@param name bean name, if <code>null</code> it will be resolved from the class (name or annotation)\n@param scopeType bean scope, if <code>null</code> it will be resolved from the class (annotation or default one)\n@param wiringMode wiring mode, if <code>null</code> it will be resolved from the class (annotation or default one)\n@param define when set to <code>true</code> bean will be defined - all injection points will be set to none", "predict": "Register petite bean. @param type Petite bean class @param name Petite bean name @param scopeType Petite bean scope type @param wiringMode Petite bean wiring mode @param define Petite bean definition flag @param consumer Petite bean consumer @return Petite bean definition"}
{"ID": 763, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void registerBean(final String name, final BeanDefinition beanDefinition) { beans.put(name, beanDefinition); if (!petiteConfig.isUseAltBeanNames()) { return; } Class type = beanDefinition.type(); if (annotationResolver.beanHasAnnotationName(type)) { return; } Class[] interfaces = ClassUtil.resolveAllInterfaces(type); for (Class anInterface : interfaces) { String altName = annotationResolver.resolveBeanName(anInterface, petiteConfig.getUseFullTypeNames()); if (name.equals(altName)) { continue; } if (beans.containsKey(altName)) { continue; } if (beansAlt.containsKey(altName)) { BeanDefinition existing = beansAlt.get(altName); if (existing != null) { beansAlt.put(altName, null); // store null as value to mark that alt name is duplicate } } else { beansAlt.put(altName, beanDefinition); } } }. ### Assistant:", "ground_truth": "Registers bean definition by putting it in the beans map. If bean does\nnot have petite name explicitly defined, alternative bean names\nwill be registered.", "predict": "Register bean definition. @param name Bean name. @param beanDefinition Bean definition."}
{"ID": 764, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void removeBean(final Class type) { // collect bean names Set<String> beanNames = new HashSet<>(); for (BeanDefinition def : beans.values()) { if (def.type.equals(type)) { beanNames.add(def.name); } } // remove collected bean names for (String beanName : beanNames) { removeBean(beanName); } }. ### Assistant:", "ground_truth": "Removes all petite beans of provided type. Bean name is not resolved from a type!\nInstead, all beans are iterated and only beans with equal types are removed.\n@see #removeBean(String)", "predict": "Remove all beans of the given type."}
{"ID": 765, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String[] resolveBeanNamesForType(final Class type) { String[] beanNames = beanCollections.get(type); if (beanNames != null) { return beanNames; } ArrayList<String> list = new ArrayList<>(); for (Map.Entry<String, BeanDefinition> entry : beans.entrySet()) { BeanDefinition beanDefinition = entry.getValue(); if (ClassUtil.isTypeOf(beanDefinition.type, type)) { String beanName = entry.getKey(); list.add(beanName); } } if (list.isEmpty()) { beanNames = StringPool.EMPTY_ARRAY; } else { beanNames = list.toArray(new String[0]); } beanCollections.put(type, beanNames); return beanNames; }. ### Assistant:", "ground_truth": "Resolves bean names for give type.", "predict": "Resolves the bean names for the given type. @param type the type to resolve the bean names for. @return the bean names for the given type."}
{"ID": 766, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void registerPetiteCtorInjectionPoint(final String beanName, final Class[] paramTypes, final String[] references) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); Constructor constructor = null; if (paramTypes == null) { CtorDescriptor[] ctors = cd.getAllCtorDescriptors(); if (ctors != null && ctors.length > 0) { if (ctors.length > 1) { throw new PetiteException(ctors.length + \" suitable constructor found as injection point for: \" + beanDefinition.type.getName()); } constructor = ctors[0].getConstructor(); } } else { CtorDescriptor ctorDescriptor = cd.getCtorDescriptor(paramTypes, true); if (ctorDescriptor != null) { constructor = ctorDescriptor.getConstructor(); } } if (constructor == null) { throw new PetiteException(\"Constructor not found: \" + beanDefinition.type.getName()); } BeanReferences[] ref = referencesResolver.resolveReferenceFromValues(constructor, references); beanDefinition.ctor = new CtorInjectionPoint(constructor, ref); }. ### Assistant:", "ground_truth": "Registers constructor injection point.\n\n@param beanName bean name\n@param paramTypes constructor parameter types, may be <code>null</code>\n@param references references for arguments", "predict": "Registers a petite constructor injection point. The injection point is registered as a BeanDefinition for the given beanName. The constructor is registered as an injection point. The references are resolved and added to the injection point. @param beanName The name of the bean. @param paramTypes The types of the constructor parameters. @param references The references to resolve. @throws PetiteException If the injection point cannot be registered."}
{"ID": 767, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void registerPetitePropertyInjectionPoint(final String beanName, final String property, final String reference) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); PropertyDescriptor propertyDescriptor = cd.getPropertyDescriptor(property, true); if (propertyDescriptor == null) { throw new PetiteException(\"Property not found: \" + beanDefinition.type.getName() + '#' + property); } BeanReferences ref = referencesResolver.resolveReferenceFromValue(propertyDescriptor, reference); PropertyInjectionPoint pip = new PropertyInjectionPoint(propertyDescriptor, ref); beanDefinition.addPropertyInjectionPoint(pip); }. ### Assistant:", "ground_truth": "Registers property injection point.\n\n@param beanName bean name\n@param property property name\n@param reference explicit injection reference, may be <code>null</code>", "predict": "Registers a petite property injection point. @param beanName The name of the bean. @param property The property name. @param reference The reference name."}
{"ID": 768, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void registerPetiteSetInjectionPoint(final String beanName, final String property) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); PropertyDescriptor propertyDescriptor = cd.getPropertyDescriptor(property, true); if (propertyDescriptor == null) { throw new PetiteException(\"Property not found: \" + beanDefinition.type.getName() + '#' + property); } SetInjectionPoint sip = new SetInjectionPoint(propertyDescriptor); beanDefinition.addSetInjectionPoint(sip); }. ### Assistant:", "ground_truth": "Registers set injection point.\n\n@param beanName bean name\n@param property set property name", "predict": "Registers a petite set injection point for the given beanName and property. @param beanName the name of the bean to register the injection point for. @param property the name of the property to register the injection point for."}
{"ID": 769, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void registerPetiteMethodInjectionPoint(final String beanName, final String methodName, final Class[] arguments, final String[] references) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); Method method = null; if (arguments == null) { MethodDescriptor[] methods = cd.getAllMethodDescriptors(methodName); if (methods != null && methods.length > 0) { if (methods.length > 1) { throw new PetiteException(methods.length + \" suitable methods found as injection points for: \" + beanDefinition.type.getName() + '#' + methodName); } method = methods[0].getMethod(); } } else { MethodDescriptor md = cd.getMethodDescriptor(methodName, arguments, true); if (md != null) { method = md.getMethod(); } } if (method == null) { throw new PetiteException(\"Method not found: \" + beanDefinition.type.getName() + '#' + methodName); } BeanReferences[] ref = referencesResolver.resolveReferenceFromValues(method, references); MethodInjectionPoint mip = new MethodInjectionPoint(method, ref); beanDefinition.addMethodInjectionPoint(mip); }. ### Assistant:", "ground_truth": "Registers method injection point.\n\n@param beanName bean name\n@param methodName method name\n@param arguments method arguments, may be <code>null</code>\n@param references injection references", "predict": "Registers a petite method injection point. The method injection point is registered as a BeanDefinition object. The method injection point is registered as a BeanDefinition object. The method injection point is registered as a BeanDefinition object. The method injection point is registered as a BeanDefinition object. The method injection point is registered as a BeanDefinition object. The method injection point is registered as a BeanDefinition object. The method injection point is registered as a BeanDefinition object. The method injection point is registered as a BeanDefinition object. The method injection point is registered as a BeanDefinition object. The method injection point is registered as a BeanDefinition object. The method injection point is registered as a BeanDefinition object. The method injection point is registered as a BeanDefinition object. The method injection point is registered as a BeanDefinition object. The method injection point is registered as a BeanDefinition object. The method injection point is registered as a BeanDefinition object. The method injection point is registered as a BeanDefinition object."}
{"ID": 770, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void registerPetiteInitMethods(final String beanName, final InitMethodInvocationStrategy invocationStrategy, String... initMethodNames) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); if (initMethodNames == null) { initMethodNames = StringPool.EMPTY_ARRAY; } int total = initMethodNames.length; InitMethodPoint[] initMethodPoints = new InitMethodPoint[total]; int i; for (i = 0; i < initMethodNames.length; i++) { MethodDescriptor md = cd.getMethodDescriptor(initMethodNames[i], ClassUtil.EMPTY_CLASS_ARRAY, true); if (md == null) { throw new PetiteException(\"Init method not found: \" + beanDefinition.type.getName() + '#' + initMethodNames[i]); } initMethodPoints[i] = new InitMethodPoint(md.getMethod(), i, invocationStrategy); } beanDefinition.addInitMethodPoints(initMethodPoints); }. ### Assistant:", "ground_truth": "Registers init method.\n\n@param beanName bean name\n@param invocationStrategy moment of invocation\n@param initMethodNames init method names", "predict": "Register petite init methods. @param beanName the bean name @param invocationStrategy the invocation strategy @param initMethodNames the init method names"}
{"ID": 771, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void registerPetiteDestroyMethods(final String beanName, String... destroyMethodNames) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); if (destroyMethodNames == null) { destroyMethodNames = StringPool.EMPTY_ARRAY; } int total = destroyMethodNames.length; DestroyMethodPoint[] destroyMethodPoints = new DestroyMethodPoint[total]; int i; for (i = 0; i < destroyMethodNames.length; i++) { MethodDescriptor md = cd.getMethodDescriptor(destroyMethodNames[i], ClassUtil.EMPTY_CLASS_ARRAY, true); if (md == null) { throw new PetiteException(\"Destroy method not found: \" + beanDefinition.type.getName() + '#' + destroyMethodNames[i]); } destroyMethodPoints[i] = new DestroyMethodPoint(md.getMethod()); } beanDefinition.addDestroyMethodPoints(destroyMethodPoints); }. ### Assistant:", "ground_truth": "Registers destroy method.\n\n@param beanName bean name\n@param destroyMethodNames destroy method names", "predict": "Registers destroy methods for a bean. Destroy methods are registered in the order they are specified. If no methods are specified, all destroy methods are registered. If a method is already registered, it is not registered again. @param beanName the name of the bean to register destroy methods for. @param destroyMethodNames the names of the destroy methods to register."}
{"ID": 772, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void registerPetiteProvider(final String providerName, final String beanName, final String methodName, final Class[] arguments) { BeanDefinition beanDefinition = lookupBeanDefinition(beanName); if (beanDefinition == null) { throw new PetiteException(\"Bean not found: \" + beanName); } Class beanType = beanDefinition.type; ClassDescriptor cd = ClassIntrospector.get().lookup(beanType); MethodDescriptor md = cd.getMethodDescriptor(methodName, arguments, true); if (md == null) { throw new PetiteException(\"Provider method not found: \" + methodName); } ProviderDefinition providerDefinition = new ProviderDefinition(providerName, beanName, md.getMethod()); providers.put(providerName, providerDefinition); }. ### Assistant:", "ground_truth": "Registers instance method provider.\n\n@param providerName provider name\n@param beanName bean name\n@param methodName instance method name\n@param arguments method argument types", "predict": "Register a petite provider. @param providerName the provider name. @param beanName the bean name. @param methodName the method name. @param arguments the arguments."}
{"ID": 773, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void registerPetiteProvider(final String providerName, final Class type, final String staticMethodName, final Class[] arguments) { ClassDescriptor cd = ClassIntrospector.get().lookup(type); MethodDescriptor md = cd.getMethodDescriptor(staticMethodName, arguments, true); if (md == null) { throw new PetiteException(\"Provider method not found: \" + staticMethodName); } ProviderDefinition providerDefinition = new ProviderDefinition(providerName, md.getMethod()); providers.put(providerName, providerDefinition); }. ### Assistant:", "ground_truth": "Registers static method provider.\n\n@param providerName provider name\n@param type class type\n@param staticMethodName static method name\n@param arguments method argument types", "predict": "Register a Petite provider. The provider is registered under the given providerName. The providerMethodName is the name of the static method that Petite will call to register the provider. The arguments are the arguments passed to the providerMethodName. @param providerName the name of the provider. @param type the type of the provider. @param staticMethodName the name of the static method that Petite will call to register the provider. @param arguments the arguments passed to the providerMethodName."}
{"ID": 774, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void forEachBeanType(final Class type, final Consumer<String> beanNameConsumer) { forEachBean(bd -> { if (ClassUtil.isTypeOf(bd.type, type)) { beanNameConsumer.accept(bd.name); } }); }. ### Assistant:", "ground_truth": "Iterates all beans that are of given type.", "predict": "Iterate over all beans of the given type and call the consumer for each bean. @param type the type of the beans to iterate over. @param beanNameConsumer the consumer to call for each bean."}
{"ID": 775, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void defineParameters(final Map<?, ?> properties) { for (Map.Entry<?, ?> entry : properties.entrySet()) { defineParameter(entry.getKey().toString(), entry.getValue()); } }. ### Assistant:", "ground_truth": "Defines many parameters at once.", "predict": "Define the parameters of the query. @param properties the properties map."}
{"ID": 776, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public Object intercept(final ActionRequest actionRequest) throws Exception { printBefore(actionRequest); long startTime = System.currentTimeMillis(); Object result = null; try { result = actionRequest.invoke(); } catch (Exception ex) { result = \"<exception>\"; throw ex; } catch (Throwable th) { result = \"<throwable>\"; throw new Exception(th); } finally { long executionTime = System.currentTimeMillis() - startTime; printAfter(actionRequest, executionTime, result); } return result; }. ### Assistant:", "ground_truth": "Measure action invocation time.", "predict": "Intercept the action request and perform logging. @param actionRequest the action request @return the result of the action request @throws Exception if any exception occurs during the execution of the action request"}
{"ID": 777, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int resolveJavaVersion(final int version) { final int javaVersionNumber = SystemUtil.info().getJavaVersionNumber(); final int platformVersion = javaVersionNumber - 8 + 52; return version > platformVersion ? version : platformVersion; }. ### Assistant:", "ground_truth": "Resolves Java version from current version.", "predict": "Resolves the Java version number to the platform version. @param version The version to resolve. @return The resolved version."}
{"ID": 778, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void pushInt(final MethodVisitor mv, final int value) { if (value <= 5) { mv.visitInsn(ICONST_0 + value); } else if (value <= Byte.MAX_VALUE) { mv.visitIntInsn(BIPUSH, value); } else { mv.visitIntInsn(SIPUSH, value); } }. ### Assistant:", "ground_truth": "Pushes int value in an optimal way.", "predict": "Push an int value. @param mv the mv to use @param value the value to push"}
{"ID": 779, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void checkArgumentIndex(final MethodInfo methodInfo, final int argIndex) { if ((argIndex < 1) || (argIndex > methodInfo.getArgumentsCount())) { throw new ProxettaException(\"Invalid argument index: \" + argIndex); } }. ### Assistant:", "ground_truth": "Validates argument index.", "predict": "Checks if the given argument index is valid for the given method. @param methodInfo The method to check. @param argIndex The index of the argument to check."}
{"ID": 780, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String adviceFieldName(final String name, final int index) { return ProxettaNames.fieldPrefix + name + ProxettaNames.fieldDivider + index; }. ### Assistant:", "ground_truth": "Builds advice field name.", "predict": "Generates the advice field name for a given field name and index. @param name the name of the field. @param index the index of the field. @return the advice field name."}
{"ID": 781, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String adviceMethodName(final String name, final int index) { return ProxettaNames.methodPrefix + name + ProxettaNames.methodDivider + index; }. ### Assistant:", "ground_truth": "Builds advice method name.", "predict": "Returns the advice method name. @param name the advice method name @param index the advice method index @return the advice method name"}
{"ID": 782, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void loadSpecialMethodArguments(final MethodVisitor mv, final MethodInfo methodInfo) { mv.visitVarInsn(ALOAD, 0); for (int i = 1; i <= methodInfo.getArgumentsCount(); i++) { loadMethodArgument(mv, methodInfo, i); } }. ### Assistant:", "ground_truth": "Loads all method arguments before INVOKESPECIAL call.", "predict": "Load the special method arguments. @param mv the method visitor @param methodInfo the method info"}
{"ID": 783, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void loadStaticMethodArguments(final MethodVisitor mv, final MethodInfo methodInfo) { for (int i = 0; i < methodInfo.getArgumentsCount(); i++) { loadMethodArgument(mv, methodInfo, i); } }. ### Assistant:", "ground_truth": "Loads all method arguments before INVOKESTATIC call.", "predict": "Load the arguments of a static method. @param mv the MethodVisitor to use. @param methodInfo the MethodInfo of the static method."}
{"ID": 784, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void loadVirtualMethodArguments(final MethodVisitor mv, final MethodInfo methodInfo) { for (int i = 1; i <= methodInfo.getArgumentsCount(); i++) { loadMethodArgument(mv, methodInfo, i); } }. ### Assistant:", "ground_truth": "Loads all method arguments before INVOKEVIRTUAL call.", "predict": "Load virtual method arguments. @param mv the method visitor @param methodInfo the method info"}
{"ID": 785, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void loadMethodArgument(final MethodVisitor mv, final MethodInfo methodInfo, final int index) { int offset = methodInfo.getArgumentOffset(index); int type = methodInfo.getArgument(index).getOpcode(); switch (type) { case 'V': break; case 'B': case 'C': case 'S': case 'I': case 'Z': mv.visitVarInsn(ILOAD, offset); break; case 'J': mv.visitVarInsn(LLOAD, offset); break; case 'F': mv.visitVarInsn(FLOAD, offset); break; case 'D': mv.visitVarInsn(DLOAD, offset); break; default: mv.visitVarInsn(ALOAD, offset); } }. ### Assistant:", "ground_truth": "Loads one argument. Index is 1-based. No conversion occurs.", "predict": "Load the argument at the specified index. @param mv the method visitor @param methodInfo the method info @param index the index of the argument to load."}
{"ID": 786, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void storeMethodArgument(final MethodVisitor mv, final MethodInfo methodInfo, final int index) { int offset = methodInfo.getArgumentOffset(index); int type = methodInfo.getArgument(index).getOpcode(); switch (type) { case 'V': break; case 'B': case 'C': case 'S': case 'I': case 'Z': mv.visitVarInsn(ISTORE, offset); break; case 'J': mv.visitVarInsn(LSTORE, offset); break; case 'F': mv.visitVarInsn(FSTORE, offset); break; case 'D': mv.visitVarInsn(DSTORE, offset); break; default: mv.visitVarInsn(ASTORE, offset); } }. ### Assistant:", "ground_truth": "Stores one argument. Index is 1-based. No conversion occurs.", "predict": "Stores the argument value of the method. The instruction is chosen based on the type of the argument. @param mv the method visitor @param methodInfo the method information @param index the index of the argument"}
{"ID": 787, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void prepareReturnValue(final MethodVisitor mv, final MethodInfo methodInfo, int varOffset) { varOffset += methodInfo.getAllArgumentsSize(); switch (methodInfo.getReturnType().getOpcode()) { case 'V': mv.visitInsn(ACONST_NULL); break; case 'B': AsmUtil.valueOfByte(mv); break; case 'C': AsmUtil.valueOfCharacter(mv); break; case 'S': AsmUtil.valueOfShort(mv); break; case 'I': AsmUtil.valueOfInteger(mv); break; case 'Z': AsmUtil.valueOfBoolean(mv); break; case 'J': AsmUtil.valueOfLong(mv); break; case 'F': AsmUtil.valueOfFloat(mv); break; case 'D': AsmUtil.valueOfDouble(mv); break; } }. ### Assistant:", "ground_truth": "Prepares return value.", "predict": "Prepare the return value instruction @param mv the mv to use @param methodInfo the method info @param varOffset the offset of the variable in the stack"}
{"ID": 788, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String createMethodSignaturesKey(final int access, final String methodName, final String description, final String className) { return new StringBand(7) .append(access) .append(COLON) .append(description) .append(StringPool.UNDERSCORE) .append(className) .append(StringPool.HASH) .append(methodName) .toString(); }. ### Assistant:", "ground_truth": "Creates unique key for method signatures map.", "predict": "Create a key for storing method signatures. The key is composed of the accessibility level, the method name, the description, the class name and the method name. @param access the accessibility level of the method @param methodName the name of the method @param description a description of the method @param className the name of the class @return the key for storing the method signature"}
{"ID": 789, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void newArray(final MethodVisitor mv, final Class componentType) { if (componentType == int.class) { mv.visitIntInsn(NEWARRAY, T_INT); return; } if (componentType == long.class) { mv.visitIntInsn(NEWARRAY, T_LONG); return; } if (componentType == float.class) { mv.visitIntInsn(NEWARRAY, T_FLOAT); return; } if (componentType == double.class) { mv.visitIntInsn(NEWARRAY, T_DOUBLE); return; } if (componentType == byte.class) { mv.visitIntInsn(NEWARRAY, T_BYTE); return; } if (componentType == short.class) { mv.visitIntInsn(NEWARRAY, T_SHORT); return; } if (componentType == boolean.class) { mv.visitIntInsn(NEWARRAY, T_BOOLEAN); return; } if (componentType == char.class) { mv.visitIntInsn(NEWARRAY, T_CHAR); return; } mv.visitTypeInsn(ANEWARRAY, AsmUtil.typeToSignature(componentType)); }. ### Assistant:", "ground_truth": "Creates new array.", "predict": "Create a new array of the specified component type. @param mv the method visitor to use @param componentType the component type of the array to create"}
{"ID": 790, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void storeIntoArray(final MethodVisitor mv, final Class componentType) { if (componentType == int.class) { mv.visitInsn(IASTORE); return; } if (componentType == long.class) { mv.visitInsn(LASTORE); return; } if (componentType == float.class) { mv.visitInsn(FASTORE); return; } if (componentType == double.class) { mv.visitInsn(DASTORE); return; } if (componentType == byte.class) { mv.visitInsn(BASTORE); return; } if (componentType == short.class) { mv.visitInsn(SASTORE); return; } if (componentType == boolean.class) { mv.visitInsn(BASTORE); return; } if (componentType == char.class) { mv.visitInsn(CASTORE); return; } mv.visitInsn(AASTORE); }. ### Assistant:", "ground_truth": "Stores element on stack into an array.", "predict": "Store the value into the array component. @param mv the method visitor. @param componentType the component type."}
{"ID": 791, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String extractEncoding(final String contentType, String defaultEncoding) { String encoding = extractEncoding(contentType); if (encoding == null) { if (defaultEncoding == null) { defaultEncoding = JoddCore.encoding; } encoding = defaultEncoding; } return encoding; }. ### Assistant:", "ground_truth": "Extracts encoding from a given content type.\n\n@param contentType     content type.\n@param defaultEncoding Default encoding to be used if extract returns {@code null}.\nIf defaultEncoding is {@code null}, {@link JoddCore#encoding} will be used.\n@return Encoding from the content type.\n@see #extractEncoding(String)", "predict": "Extract encoding from content type. @return encoding or default encoding if not found."}
{"ID": 792, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean isEmptyFlags(Flags flags) { if (flags == null) return true; Flags.Flag[] systemFlags = flags.getSystemFlags(); if (systemFlags != null && systemFlags.length > 0) { return false; } String[] userFlags = flags.getUserFlags(); if (userFlags != null && userFlags.length > 0) { return false; } return true; }. ### Assistant:", "ground_truth": "Check whether flags is a empty flags\n@param flags a flags of message to check\n@return whether the flags is empty", "predict": "Check if the flags are empty. @param flags Flags to check. @return True if the flags are empty."}
{"ID": 793, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String resolveAuthBearerToken(final HttpServletRequest request) { String header = request.getHeader(HEADER_AUTHORIZATION); if (header == null) { return null; } int ndx = header.indexOf(\"Bearer \"); if (ndx == -1) { return null; } return header.substring(ndx + 7).trim(); }. ### Assistant:", "ground_truth": "Returns Bearer token.", "predict": "Resolve the bearer token from the Authorization header. @param request the incoming request @return the bearer token or null if none found"}
{"ID": 794, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void requireAuthentication(final HttpServletResponse resp, final String realm) throws IOException { resp.setHeader(WWW_AUTHENTICATE, \"Basic realm=\\\"\" + realm + '\\\"'); resp.sendError(HttpServletResponse.SC_UNAUTHORIZED); }. ### Assistant:", "ground_truth": "Sends correct headers to require basic authentication for the given realm.", "predict": "Sends a 401 response with the specified realm. @param resp the response to send the 401 to @param realm the realm to include in the response @throws IOException if an I/O error occurs while writing the response @since 1.0"}
{"ID": 795, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void prepareDownload(final HttpServletResponse response, final File file, final String mimeType) { if (!file.exists()) { throw new IllegalArgumentException(\"File not found: \" + file); } if (file.length() > Integer.MAX_VALUE) { throw new IllegalArgumentException(\"File too big: \" + file); } prepareResponse(response, file.getAbsolutePath(), mimeType, (int) file.length()); }. ### Assistant:", "ground_truth": "Prepares response for file download with provided mime type.", "predict": "Prepare the response for downloading a file. @param response the response to prepare @param file the file to download @param mimeType the mime type of the file"}
{"ID": 796, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void prepareResponse(final HttpServletResponse response, final String fileName, String mimeType, final int fileSize) { if ((mimeType == null) && (fileName != null)) { String extension = FileNameUtil.getExtension(fileName); mimeType = MimeTypes.getMimeType(extension); } if (mimeType != null) { response.setContentType(mimeType); } if (fileSize >= 0) { response.setContentLength(fileSize); } // support internationalization // See https://tools.ietf.org/html/rfc6266#section-5 for more information. if (fileName != null) { String name = FileNameUtil.getName(fileName); String encodedFileName = URLCoder.encode(name); response.setHeader(CONTENT_DISPOSITION, \"attachment;filename=\\\"\" + name + \"\\\";filename*=utf8''\" + encodedFileName); } }. ### Assistant:", "ground_truth": "Prepares response for various provided data.\n\n@param response http response\n@param fileName file name, if full path then file name will be stripped, if null, will be ignored.\n@param mimeType mime type with optional charset, may be <code>null</code>\n@param fileSize if less then 0 it will be ignored", "predict": "Prepare response for file download. @param fileName file name @param mimeType mime type of file @param fileSize file size"}
{"ID": 797, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Cookie[] getAllCookies(final HttpServletRequest request, final String cookieName) { Cookie[] cookies = request.getCookies(); if (cookies == null) { return null; } ArrayList<Cookie> list = new ArrayList<>(cookies.length); for (Cookie cookie : cookies) { if (cookie.getName().equals(cookieName)) { list.add(cookie); } } if (list.isEmpty()) { return null; } return list.toArray(new Cookie[0]); }. ### Assistant:", "ground_truth": "Returns all cookies from client that matches provided name.\n@see #getCookie(javax.servlet.http.HttpServletRequest, String)", "predict": "Get all cookies by name. @param request HttpServletRequest @param cookieName Cookie name @return Cookies or null if no cookies found."}
{"ID": 798, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String readRequestBodyFromReader(final HttpServletRequest request) throws IOException { BufferedReader buff = request.getReader(); StringWriter out = new StringWriter(); StreamUtil.copy(buff, out); return out.toString(); }. ### Assistant:", "ground_truth": "Reads HTTP request body using the request reader. Once body is read,\nit cannot be read again!", "predict": "Read request body from reader. @param request the request @return the string @throws IOException the i/o exception"}
{"ID": 799, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String readRequestBodyFromStream(final HttpServletRequest request) throws IOException { String charEncoding = request.getCharacterEncoding(); if (charEncoding == null) { charEncoding = JoddCore.encoding; } CharArrayWriter charArrayWriter = new CharArrayWriter(); BufferedReader bufferedReader = null; try { InputStream inputStream = request.getInputStream(); if (inputStream != null) { bufferedReader = new BufferedReader(new InputStreamReader(inputStream, charEncoding)); StreamUtil.copy(bufferedReader, charArrayWriter); } else { return StringPool.EMPTY; } } finally { StreamUtil.close(bufferedReader); } return charArrayWriter.toString(); }. ### Assistant:", "ground_truth": "Reads HTTP request body using the request stream. Once body is read,\nit cannot be read again!", "predict": "Read request body from stream. @param request @return @throws IOException"}
{"ID": 800, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void storeContextPath(final PageContext pageContext, final String contextPathVariableName) { String ctxPath = getContextPath(pageContext); HttpServletRequest request = (HttpServletRequest) pageContext.getRequest(); request.setAttribute(contextPathVariableName, ctxPath); ServletContext servletContext = pageContext.getServletContext(); servletContext.setAttribute(contextPathVariableName, ctxPath); }. ### Assistant:", "ground_truth": "Stores context path in server context and request scope.", "predict": "Store the context path in the request and servlet context attributes. @param pageContext the page context @param contextPathVariableName the variable name to store the context path in the request and servlet context attributes."}
{"ID": 801, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void storeContextPath(final ServletContext servletContext, final String contextPathVariableName) { String ctxPath = getContextPath(servletContext); servletContext.setAttribute(contextPathVariableName, ctxPath); }. ### Assistant:", "ground_truth": "Stores context path in page context and request scope.", "predict": "Stores the context path of the servletContext as a variable in the ServletContext. @param servletContext The ServletContext to store the context path in. @param contextPathVariableName The variable name to store the context path in."}
{"ID": 802, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean isGetParameter(final HttpServletRequest request, String name) { name = URLCoder.encodeQueryParam(name) + '='; String query = request.getQueryString(); String[] nameValuePairs = StringUtil.splitc(query, '&'); for (String nameValuePair : nameValuePairs) { if (nameValuePair.startsWith(name)) { return true; } } return false; }. ### Assistant:", "ground_truth": "Checks if some parameter is in GET parameters.", "predict": "Returns true if the parameter is present in the query string. @param request the request @param name the parameter name @return true if the parameter is present in the query string."}
{"ID": 803, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String[] prepareParameters( final String[] paramValues, final boolean treatEmptyParamsAsNull, final boolean ignoreEmptyRequestParams) { if (treatEmptyParamsAsNull || ignoreEmptyRequestParams) { int emptyCount = 0; int total = paramValues.length; for (int i = 0; i < paramValues.length; i++) { String paramValue = paramValues[i]; if (paramValue == null) { emptyCount++; continue; } if (paramValue.length() == 0) { emptyCount++; if (treatEmptyParamsAsNull) { paramValue = null; } } paramValues[i] = paramValue; } if ((ignoreEmptyRequestParams) && (emptyCount == total)) { return null; } } return paramValues; }. ### Assistant:", "ground_truth": "Prepares parameters for further processing.\n@param paramValues\tstring array of param values\n@param treatEmptyParamsAsNull\tempty parameters should be treated as <code>null</code>\n@param ignoreEmptyRequestParams\tif all parameters are empty, return <code>null</code>", "predict": "Prepare the parameters by removing empty values and treating empty values as null. @param paramValues the parameter values @param treatEmptyParamsAsNull whether empty params should be treated as null @param ignoreEmptyRequestParams whether empty request params should be ignored @return the prepared parameters"}
{"ID": 804, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void copyParamsToAttributes( final HttpServletRequest servletRequest, final boolean treatEmptyParamsAsNull, final boolean ignoreEmptyRequestParams) { Enumeration paramNames = servletRequest.getParameterNames(); while (paramNames.hasMoreElements()) { String paramName = (String) paramNames.nextElement(); if (servletRequest.getAttribute(paramName) != null) { continue; } String[] paramValues = servletRequest.getParameterValues(paramName); paramValues = prepareParameters(paramValues, treatEmptyParamsAsNull, ignoreEmptyRequestParams); if (paramValues == null) { continue; } servletRequest.setAttribute(paramName, paramValues.length == 1 ? paramValues[0] : paramValues); } // multipart if (!(servletRequest instanceof MultipartRequestWrapper)) { return; } MultipartRequestWrapper multipartRequest = (MultipartRequestWrapper) servletRequest; if (!multipartRequest.isMultipart()) { return; } paramNames = multipartRequest.getFileParameterNames(); while (paramNames.hasMoreElements()) { String paramName = (String) paramNames.nextElement(); if (servletRequest.getAttribute(paramName) != null) { continue; } FileUpload[] paramValues = multipartRequest.getFiles(paramName); servletRequest.setAttribute(paramName, paramValues.length == 1 ? paramValues[0] : paramValues); } }. ### Assistant:", "ground_truth": "Copies all request parameters to attributes.", "predict": "Copy parameters to attributes. @param servletRequest the servlet request @param treatEmptyParamsAsNull the treat empty params as null @param ignoreEmptyRequestParams the ignore empty request params"}
{"ID": 805, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void invokeBody(final JspFragment body) throws JspException { if (body == null) { return; } try { body.invoke(null); } catch (IOException ioex) { throw new JspException(\"Tag body failed\", ioex); } }. ### Assistant:", "ground_truth": "Invokes tag body.", "predict": "Invokes the body of a JspFragment. @param body the JspFragment body @throws JspException if the body failed to execute"}
{"ID": 806, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static char[] renderBody(final JspFragment body) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter(); invokeBody(body, writer); return writer.toCharArray(); }. ### Assistant:", "ground_truth": "Renders tag body to char array.", "predict": "Render the body of a JspFragment. @param body the JspFragment @return the rendered HTML @throws JspException if an exception is thrown during rendering"}
{"ID": 807, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String renderBodyToString(final JspFragment body) throws JspException { char[] result = renderBody(body); return new String(result); }. ### Assistant:", "ground_truth": "Renders tag body to string.\n@see #renderBody(javax.servlet.jsp.tagext.JspFragment)", "predict": "Renders the body of a JspFragment to a string. @param body the body of the JspFragment @return the rendered body as a string @throws JspException if an error occurred while rendering the body"}
{"ID": 808, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void invokeInitMethods(final InitMethodInvocationStrategy invocationStrategy) { for (final InitMethodPoint initMethod : beanDefinition.initMethodPoints()) { if (invocationStrategy != initMethod.invocationStrategy) { continue; } try { initMethod.method.invoke(bean); } catch (Exception ex) { throw new PetiteException(\"Invalid init method: \" + initMethod, ex); } } }. ### Assistant:", "ground_truth": "Invokes init methods.", "predict": "Invoke all the init methods. @param invocationStrategy Invocation strategy."}
{"ID": 809, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void callDestroyMethods() { for (final DestroyMethodPoint destroyMethodPoint : beanDefinition.destroyMethodPoints()) { try { destroyMethodPoint.method.invoke(bean); } catch (Exception ex) { throw new PetiteException(\"Invalid destroy method: \" + destroyMethodPoint.method, ex); } } }. ### Assistant:", "ground_truth": "Calls destroy methods on given BeanData. Destroy methods are called\nwithout any order.", "predict": "Call all destroy methods defined in the bean."}
{"ID": 810, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Object newBeanInstance() { if (beanDefinition.ctor == CtorInjectionPoint.EMPTY) { throw new PetiteException(\"No constructor (annotated, single or default) founded as injection point for: \" + beanDefinition.type.getName()); } int paramNo = beanDefinition.ctor.references.length; Object[] args = new Object[paramNo]; // wiring if (beanDefinition.wiringMode != WiringMode.NONE) { for (int i = 0; i < paramNo; i++) { args[i] = pc.getBean(beanDefinition.ctor.references[i]); if (args[i] == null) { if ((beanDefinition.wiringMode == WiringMode.STRICT)) { throw new PetiteException( \"Wiring constructor failed. References '\" + beanDefinition.ctor.references[i] + \"' not found for constructor: \" + beanDefinition.ctor.constructor); } } } } // create instance final Object bean; try { bean = beanDefinition.ctor.constructor.newInstance(args); } catch (Exception ex) { throw new PetiteException(\"Failed to create new bean instance '\" + beanDefinition.type.getName() + \"' using constructor: \" + beanDefinition.ctor.constructor, ex); } return bean; }. ### Assistant:", "ground_truth": "Creates a new instance.", "predict": "Create a new instance of the bean. @return The new instance of the bean."}
{"ID": 811, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void injectParams(final ParamManager paramManager, final boolean implicitParamInjection) { if (beanDefinition.name == null) { return; } if (implicitParamInjection) { // implicit final int len = beanDefinition.name.length() + 1; for (final String param : beanDefinition.params) { final Object value = paramManager.get(param); final String destination = param.substring(len); try { BeanUtil.declared.setProperty(bean, destination, value); } catch (Exception ex) { throw new PetiteException(\"Unable to set parameter: '\" + param + \"' to bean: \" + beanDefinition.name, ex); } } } // explicit for (final ValueInjectionPoint pip : beanDefinition.values) { final String value = paramManager.parseKeyTemplate(pip.valueTemplate); try { BeanUtil.declared.setProperty(bean, pip.property, value); } catch (Exception ex) { throw new PetiteException(\"Unable to set value for: '\" + pip.valueTemplate + \"' to bean: \" + beanDefinition.name, ex); } } }. ### Assistant:", "ground_truth": "Injects all parameters.", "predict": "Injects the parameters from the ParamManager into the Bean. @param paramManager The ParamManager to use for injection. @param implicitParamInjection Whether to inject implicit parameters."}
{"ID": 812, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings({\"UnusedDeclaration\"}) public String rewrite(final HttpServletRequest servletRequest, final String actionPath, final String httpMethod) { return actionPath; }. ### Assistant:", "ground_truth": "Rewrites action path.", "predict": "Rewrite the action path. @param servletRequest the servlet request @param actionPath the action path @param httpMethod the http method @return the action path"}
{"ID": 813, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void addHeader(final String name, final String value) { List<String> valuesList = super.getAll(name); if (valuesList.isEmpty()) { super.add(name, value); return; } super.remove(name); valuesList.add(value); super.addAll(name, valuesList); }. ### Assistant:", "ground_truth": "Adds new header value. If existing value exist, it will be removed\nso the store the new key value.", "predict": "Adds a header to the headers collection. If the header already exists, it will be replaced. @param name the name of the header @param value the value of the header"}
{"ID": 814, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void put(final String profile, final Map<String, PropsEntry> map, final String key, final String value, final boolean append) { String realValue = value; if (append || appendDuplicateProps) { PropsEntry pv = map.get(key); if (pv != null) { realValue = pv.value + APPEND_SEPARATOR + realValue; } } PropsEntry propsEntry = new PropsEntry(key, realValue, profile, this); // update position pointers if (first == null) { first = propsEntry; } else { last.next = propsEntry; } last = propsEntry; // add to the map map.put(key, propsEntry); }. ### Assistant:", "ground_truth": "Puts key-value pair into the map, with respect of appending duplicate properties", "predict": "Adds a new value to the map. If append is true, the value is appended to the existing value. If append is false, the value is prepended to the existing value. If appendDuplicateProps is true, the value is appended to the existing value. If appendDuplicateProps is false, the value is prepended to the existing value. If the key is already in the map, the value is concatenated to the existing value. If append is true, the value is prepended to the existing value. If append is false, the value is concatenated to the existing value. If appendDuplicateProps is true, the value is appended to the existing value. If appendDuplicateProps is false, the value is prepended to the existing value. If the key is already in the map, the value is concatenated to the existing value. If append is true, the value is prepended to the existing value. If append is false, the value is concatenated to the existing value. If appendD"}
{"ID": 815, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void putBaseProperty(final String key, final String value, final boolean append) { put(null, baseProperties, key, value, append); }. ### Assistant:", "ground_truth": "Adds base property.", "predict": "Put a base property. @param key the property key @param value the property value @param append whether to append the value or overwrite it."}
{"ID": 816, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void putProfileProperty(final String key, final String value, final String profile, final boolean append) { Map<String, PropsEntry> map = profileProperties.computeIfAbsent(profile, k -> new HashMap<>()); put(profile, map, key, value, append); }. ### Assistant:", "ground_truth": "Adds profile property.", "predict": "Put a property in a specific profile. The profile is used to identify the properties of a specific user or application. @param key the property key @param value the property value @param profile the profile name @param append if the property should be appended or not"}
{"ID": 817, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public PropsEntry getProfileProperty(final String profile, final String key) { final Map<String, PropsEntry> profileMap = profileProperties.get(profile); if (profileMap == null) { return null; } return profileMap.get(key); }. ### Assistant:", "ground_truth": "Returns profile property.", "predict": "Returns the value of a property in a specific profile. @param profile the profile name @param key the property name @return the property value or null if not found"}
{"ID": 818, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String resolveMacros(String value, final String... profiles) { // create string template parser that will be used internally StringTemplateParser stringTemplateParser = new StringTemplateParser(); stringTemplateParser.setResolveEscapes(false); if (!ignoreMissingMacros) { stringTemplateParser.setReplaceMissingKey(false); } else { stringTemplateParser.setReplaceMissingKey(true); stringTemplateParser.setMissingKeyReplacement(StringPool.EMPTY); } final Function<String, String> macroResolver = macroName -> { String[] lookupProfiles = profiles; int leftIndex = macroName.indexOf('<'); if (leftIndex != -1) { int rightIndex = macroName.indexOf('>'); String profiles1 = macroName.substring(leftIndex + 1, rightIndex); macroName = macroName.substring(0, leftIndex).concat(macroName.substring(rightIndex + 1)); lookupProfiles = StringUtil.splitc(profiles1, ','); StringUtil.trimAll(lookupProfiles); } return lookupValue(macroName, lookupProfiles); }; // start parsing int loopCount = 0; while (loopCount++ < MAX_INNER_MACROS) { final String newValue = stringTemplateParser.parse(value, macroResolver); if (newValue.equals(value)) { break; } if (skipEmptyProps) { if (newValue.length() == 0) { return null; } } value = newValue; } return value; }. ### Assistant:", "ground_truth": "Resolves all macros in this props set. Called on property lookup.", "predict": "Resolve macros in a string. Macros are resolved using the profiles specified in the given profiles array. If profiles is null, macros are resolved using the profiles in the default profile set. @param value the string to be resolved @param profiles the profiles to use when resolving macros. If null, macros are resolved using the default profile set. @return the resolved string or null if the input string is null."}
{"ID": 819, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Map extract(Map target, final String[] profiles, final String[] wildcardPatterns, String prefix) { if (target == null) { target = new HashMap(); } // make sure prefix ends with a dot if (prefix != null) { if (!StringUtil.endsWithChar(prefix, '.')) { prefix += StringPool.DOT; } } if (profiles != null) { for (String profile : profiles) { while (true) { final Map<String, PropsEntry> map = this.profileProperties.get(profile); if (map != null) { extractMap(target, map, profiles, wildcardPatterns, prefix); } final int ndx = profile.lastIndexOf('.'); if (ndx == -1) { break; } profile = profile.substring(0, ndx); } } } extractMap(target, this.baseProperties, profiles, wildcardPatterns, prefix); return target; }. ### Assistant:", "ground_truth": "Extracts props to target map. This is all-in-one method, that does many things at once.", "predict": "Extract properties from profiles and base properties. @param target the target map @param profiles the profiles to extract properties from @param wildcardPatterns the wildcard patterns to extract properties from @param prefix the prefix for extracted properties @return the target map"}
{"ID": 820, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static int streamtoword(byte[] data, int[] offp) { int i; int word = 0; int off = offp[0]; for (i = 0; i < 4; i++) { word = (word << 8) | (data[off] & 0xff); off = (off + 1) % data.length; } offp[0] = off; return word; }. ### Assistant:", "ground_truth": "Cycically extract a word of key material.\n\n@param data the string to extract the data from\n@param offp a \"pointer\" (as a one-entry array) to the\ncurrent offset into data\n@return the next word of material from data", "predict": "Read 4 bytes from the stream and convert to a word."}
{"ID": 821, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String hashpw(String password, String salt) { BCrypt B; String real_salt; byte[] passwordb, saltb, hashed; char minor = (char) 0; int rounds, off; StringBuffer rs = new StringBuffer(); if (salt.charAt(0) != '$' || salt.charAt(1) != '2') { throw new IllegalArgumentException(\"Invalid salt version\"); } if (salt.charAt(2) == '$') { off = 3; } else { minor = salt.charAt(2); if (minor != 'a' || salt.charAt(3) != '$') { throw new IllegalArgumentException(\"Invalid salt revision\"); } off = 4; } // Extract number of rounds if (salt.charAt(off + 2) > '$') { throw new IllegalArgumentException(\"Missing salt rounds\"); } rounds = Integer.parseInt(salt.substring(off, off + 2)); real_salt = salt.substring(off + 3, off + 25); try { passwordb = (password + (minor >= 'a' ? \"\\000\" : \"\")).getBytes(\"UTF-8\"); } catch (UnsupportedEncodingException uee) { throw new AssertionError(\"UTF-8 is not supported\"); } saltb = decode_base64(real_salt, BCRYPT_SALT_LEN); B = new BCrypt(); hashed = B.crypt_raw(passwordb, saltb, rounds, (int[]) bf_crypt_ciphertext.clone()); rs.append(\"$2\"); if (minor >= 'a') { rs.append(minor); } rs.append('$'); if (rounds < 10) { rs.append('0'); } if (rounds > 30) { throw new IllegalArgumentException( \"rounds exceeds maximum (30)\"); } rs.append(rounds) .append('$') .append(encode_base64(saltb, saltb.length)) .append(encode_base64(hashed, bf_crypt_ciphertext.length * 4 - 1)); return rs.toString(); }. ### Assistant:", "ground_truth": "Hash a password using the OpenBSD bcrypt scheme.\n\n@param password the password to hash\n@param salt the salt to hash with (perhaps generated\nusing BCrypt.gensalt)\n@return the hashed password", "predict": "Generates a password hash from a password and salt. @param password password to hash @param salt salt to use @return hashed password"}
{"ID": 822, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean checkpw(String plaintext, String hashed) { byte[] hashed_bytes; byte[] try_bytes; try { String try_pw = hashpw(plaintext, hashed); hashed_bytes = hashed.getBytes(\"UTF-8\"); try_bytes = try_pw.getBytes(\"UTF-8\"); } catch (UnsupportedEncodingException uee) { return false; } if (hashed_bytes.length != try_bytes.length) { return false; } byte ret = 0; for (int i = 0; i < try_bytes.length; i++) { ret |= hashed_bytes[i] ^ try_bytes[i]; } return ret == 0; }. ### Assistant:", "ground_truth": "Check that a plaintext password matches a previously hashed\none.\n\n@param plaintext the plaintext password to verify\n@param hashed the previously-hashed password\n@return true if the passwords match, false otherwise", "predict": "Check if the plaintext password matches the hashed password. @param plaintext plaintext password @param hashed hashed password @return true if plaintext matches hashed password, false otherwise."}
{"ID": 823, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public int copyAll(final OutputStream out) throws IOException { int count = 0; while (true) { byte b = readByte(); if (isBoundary(b)) { break; } out.write(b); count++; } return count; }. ### Assistant:", "ground_truth": "Copies bytes from this stream to some output until boundary is\nreached. Returns number of copied bytes. It will throw an exception\nfor any irregular behaviour.", "predict": "Copies all bytes from the stream to the output stream. @param out the output stream to copy to. @return the number of bytes copied. @throws IOException if an I/O error occurs."}
{"ID": 824, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public int copyMax(final OutputStream out, final int maxBytes) throws IOException { int count = 0; while (true) { byte b = readByte(); if (isBoundary(b)) { break; } out.write(b); count++; if (count == maxBytes) { return count; } } return count; }. ### Assistant:", "ground_truth": "Copies max or less number of bytes to output stream. Useful for determining\nif uploaded file is larger then expected.", "predict": "Reads the remaining bytes of the stream and copies them to the output stream. The method returns the number of bytes copied. If the stream is exhausted before the maximum number of bytes is reached, the method returns the number of bytes copied. If the stream is exhausted before the maximum number of bytes is reached, the method returns the number of bytes copied. If the stream is exhausted before the maximum number of bytes is reached, the method returns the number of bytes copied. If the stream is exhausted before the maximum number of bytes is reached, the method returns the number of bytes copied. If the stream is exhausted before the maximum number of bytes is reached, the method returns the number of bytes copied. If the stream is exhausted before the maximum number of bytes is reached, the method returns the number of bytes copied. If the stream is exhausted before the maximum number of bytes is reached, the method returns the number of bytes copied. If the stream is exhausted before the maximum number of bytes is reached, the method returns the number of bytes copied"}
{"ID": 825, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ActionRuntime parse(final Class<?> actionClass, final Method actionMethod, ActionDefinition actionDefinition) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues(actionMethod); final ActionConfig actionConfig = resolveActionConfig(annotationValues); // interceptors ActionInterceptor[] actionInterceptors = parseActionInterceptors(actionClass, actionMethod, actionConfig); // filters ActionFilter[] actionFilters = parseActionFilters(actionClass, actionMethod, actionConfig); // build action definition when not provided if (actionDefinition == null) { actionDefinition = parseActionDefinition(actionClass, actionMethod); } detectAndRegisterAlias(annotationValues, actionDefinition); final boolean async = parseMethodAsyncFlag(actionMethod); final boolean auth = parseMethodAuthFlag(actionMethod); final Class<? extends ActionResult> actionResult = parseActionResult(actionMethod); final Class<? extends ActionResult> defaultActionResult = actionConfig.getActionResult(); return createActionRuntime( null, actionClass, actionMethod, actionResult, defaultActionResult, actionFilters, actionInterceptors, actionDefinition, async, auth); }. ### Assistant:", "ground_truth": "Parses java action method annotation and returns its action runtime.\n\n@param actionClass action class\n@param actionMethod action method\n@param actionDefinition optional action def, usually <code>null</code> so to be parsed", "predict": "Parse the action method and create the ActionRuntime. @param actionClass the class of the action @param actionMethod the method of the action @param actionDefinition the action definition @return the ActionRuntime"}
{"ID": 826, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected ActionConfig resolveActionConfig(final ActionAnnotationValues annotationValues) { final Class<? extends Annotation> annotationType; if (annotationValues == null) { annotationType = Action.class; } else { annotationType = annotationValues.annotationType(); } return actionConfigManager.lookup(annotationType); }. ### Assistant:", "ground_truth": "Resolves action config.", "predict": "Resolve the action config for the given annotation values. @param annotationValues AnnotationValues object representing the annotation @return ActionConfig object representing the action"}
{"ID": 827, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void detectAndRegisterAlias(final ActionAnnotationValues annotationValues, final ActionDefinition actionDefinition) { final String alias = parseMethodAlias(annotationValues); if (alias != null) { String aliasPath = StringUtil.cutToIndexOf(actionDefinition.actionPath(), StringPool.HASH); actionsManager.registerPathAlias(alias, aliasPath); } }. ### Assistant:", "ground_truth": "Detects if alias is defined in annotation and registers it if so.", "predict": "Register alias for the action. @param annotationValues @param actionDefinition"}
{"ID": 828, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Class<? extends ActionInterceptor>[] readActionInterceptors(final AnnotatedElement actionClassOrMethod) { Class<? extends ActionInterceptor>[] result = null; InterceptedBy interceptedBy = actionClassOrMethod.getAnnotation(InterceptedBy.class); if (interceptedBy != null) { result = interceptedBy.value(); if (result.length == 0) { result = null; } } return result; }. ### Assistant:", "ground_truth": "Reads class or method annotation for action interceptors.", "predict": "Reads the interceptors that are defined on the action class or method. @param actionClassOrMethod the action class or method that is being analyzed. @return the interceptors that are defined on the action class or method."}
{"ID": 829, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Class<? extends ActionFilter>[] readActionFilters(final AnnotatedElement actionClassOrMethod) { Class<? extends ActionFilter>[] result = null; FilteredBy filteredBy = actionClassOrMethod.getAnnotation(FilteredBy.class); if (filteredBy != null) { result = filteredBy.value(); if (result.length == 0) { result = null; } } return result; }. ### Assistant:", "ground_truth": "Reads class or method annotation for action filters.", "predict": "Reads the action filters from the given annotated element. @param actionClassOrMethod the annotated element @return the action filters or null if none were found"}
{"ID": 830, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String[] readPackageActionPath(final Class actionClass) { Package actionPackage = actionClass.getPackage(); final String actionPackageName = actionPackage.getName(); // 1 - read annotations first String packageActionPathFromAnnotation; mainloop: while (true) { MadvocAction madvocActionAnnotation = actionPackage.getAnnotation(MadvocAction.class); packageActionPathFromAnnotation = madvocActionAnnotation != null ? madvocActionAnnotation.value().trim() : null; if (StringUtil.isEmpty(packageActionPathFromAnnotation)) { packageActionPathFromAnnotation = null; } if (packageActionPathFromAnnotation == null) { // next package String newPackage = actionPackage.getName(); actionPackage = null; while (actionPackage == null) { final int ndx = newPackage.lastIndexOf('.'); if (ndx == -1) { // end of hierarchy, nothing found break mainloop; } newPackage = newPackage.substring(0, ndx); actionPackage = Packages.of(actionClass.getClassLoader(), newPackage); } } else { // annotation found, register root rootPackages.addRootPackage(actionPackage.getName(), packageActionPathFromAnnotation); break; } } // 2 - read root package String packagePath = rootPackages.findPackagePathForActionPackage(actionPackageName); if (packagePath == null) { return ArraysUtil.array(null, null); } return ArraysUtil.array( StringUtil.stripChar(packagePath, '/'), StringUtil.surround(packagePath, StringPool.SLASH) ); }. ### Assistant:", "ground_truth": "Reads action path for package.\nIf annotation is not set on package-level, class package will be used for\npackage action path part.", "predict": "Read the package action path from the action class. @param actionClass the action class @return the package action path"}
{"ID": 831, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String[] readMethodActionPath(final String methodName, final ActionAnnotationValues annotationValues, final ActionConfig actionConfig) { // read annotation String methodActionPath = annotationValues != null ? annotationValues.value() : null; if (methodActionPath == null) { methodActionPath = methodName; } else { if (methodActionPath.equals(Action.NONE)) { return ArraysUtil.array(null, null); } } // check for defaults for (String path : actionConfig.getActionMethodNames()) { if (methodActionPath.equals(path)) { methodActionPath = null; break; } } return ArraysUtil.array(methodName, methodActionPath); }. ### Assistant:", "ground_truth": "Reads action path from the action method.", "predict": "Read the method action path from the annotation. If the method is annotated with a non-null value, it will be used. If not, the method name will be used. If the method is annotated with the value \"none\", the method will not be used. @param methodName the name of the method to be used. @param annotationValues the annotation values. @param actionConfig the action configuration. @return the method action path."}
{"ID": 832, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String parseMethodAlias(final ActionAnnotationValues annotationValues) { String alias = null; if (annotationValues != null) { alias = annotationValues.alias(); } return alias; }. ### Assistant:", "ground_truth": "Reads method's alias value.", "predict": "Parse the alias from the annotation values. @param annotationValues the annotation values @return the alias"}
{"ID": 833, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ActionRuntime createActionRuntime( final ActionHandler actionHandler, final Class actionClass, final Method actionClassMethod, final Class<? extends ActionResult> actionResult, final Class<? extends ActionResult> defaultActionResult, final ActionFilter[] filters, final ActionInterceptor[] interceptors, final ActionDefinition actionDefinition, final boolean async, final boolean auth) { if (actionHandler != null) { return new ActionRuntime( actionHandler, actionClass, actionClassMethod, filters, interceptors, actionDefinition, NoneActionResult.class, NoneActionResult.class, async, auth, null, null); } final ScopeData scopeData = scopeDataInspector.inspectClassScopes(actionClass); // find ins and outs final Class[] paramTypes = actionClassMethod.getParameterTypes(); final MethodParam[] params = new MethodParam[paramTypes.length]; final Annotation[][] paramAnns = actionClassMethod.getParameterAnnotations(); String[] methodParamNames = null; // for all elements: action and method arguments... for (int ndx = 0; ndx < paramTypes.length; ndx++) { Class paramType = paramTypes[ndx]; // lazy init to postpone bytecode usage, when method has no arguments if (methodParamNames == null) { methodParamNames = actionMethodParamNameResolver.resolveParamNames(actionClassMethod); } final String paramName = methodParamNames[ndx]; final Annotation[] parameterAnnotations = paramAnns[ndx]; final ScopeData paramsScopeData = scopeDataInspector.inspectMethodParameterScopes(paramName, paramType, parameterAnnotations); MapperFunction mapperFunction = null; for (final Annotation annotation : parameterAnnotations) { if (annotation instanceof Mapper) { mapperFunction = MapperFunctionInstances.get().lookup(((Mapper) annotation).value()); break; } } params[ndx] = new MethodParam( paramTypes[ndx], paramName, scopeDataInspector.detectAnnotationType(parameterAnnotations), paramsScopeData, mapperFunction ); } return new ActionRuntime( null, actionClass, actionClassMethod, filters, interceptors, actionDefinition, actionResult, defaultActionResult, async, auth, scopeData, params); }. ### Assistant:", "ground_truth": "Creates new instance of action runtime configuration.\nInitialize caches.", "predict": "Create ActionRuntime from ActionHandler, ActionClass, ActionMethod, ActionResult, ActionDefinition, filters, interceptors, and ActionDefinition. @param actionHandler ActionHandler @param actionClass ActionClass @param actionClassMethod ActionMethod @param actionResult ActionResult @param defaultActionResult ActionResult @param actionDefinition ActionDefinition @param async async @param auth auth @return ActionRuntime"}
{"ID": 834, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override protected void preResponseCommit() { long lastModified = lastModifiedData.getLastModified(); long ifModifiedSince = request.getDateHeader(\"If-Modified-Since\"); if (lastModified > -1 && !response.containsHeader(\"Last-Modified\")) { if (ifModifiedSince < (lastModified / 1000 * 1000)) { response.setDateHeader(\"Last-Modified\", lastModified); } else { response.reset(); response.setStatus(HttpServletResponse.SC_NOT_MODIFIED); } } }. ### Assistant:", "ground_truth": "todo move to BufferResponseWrapper ?", "predict": "Pre-response commit logic."}
{"ID": 835, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <T> T applyAdvice(final Class<T> targetClass) { Class adviceClass = cache.get(targetClass); if (adviceClass == null) { // advice not yet created adviceClass = PROXY_PROXETTA.proxy().setTarget(targetClass).define(); cache.put(targetClass, adviceClass); } // create new advice instance and injects target instance to it try { Object advice = ClassUtil.newInstance(adviceClass); Field field = adviceClass.getField(\"$___target$0\"); field.set(advice, targetClass); return (T) advice; } catch (Exception ex) { throw new ProxettaException(ex); } }. ### Assistant:", "ground_truth": "Applies advice on given target class and returns proxy instance.", "predict": "Applies advice to the target class. @param targetClass target class @return advice instance"}
{"ID": 836, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void injectTargetIntoProxy(final Object proxy, final Object target) { Class proxyClass = proxy.getClass(); try { Field field = proxyClass.getField(\"$___target$0\"); field.set(proxy, target); } catch (Exception ex) { throw new ProxettaException(ex); } }. ### Assistant:", "ground_truth": "Injects target into proxy.", "predict": "Injects the target object into the proxy object. The target object is injected into the \"$___target$0\" field of the proxy class. This is a special field that is used to store the target object of the proxy. This method is used to update the target object of the proxy. @param proxy the proxy object @param target the target object"}
{"ID": 837, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) { if (fv != null) { return fv.visitAnnotation(descriptor, visible); } return null; }. ### Assistant:", "ground_truth": "Visits an annotation of the field.\n\n@param descriptor the class descriptor of the annotation class.\n@param visible {@literal true} if the annotation is visible at runtime.\n@return a visitor to visit the annotation values, or {@literal null} if this visitor is not\ninterested in visiting this annotation.", "predict": "Visits an annotation of the class file. @param descriptor the type descriptor of the annotation. @param visible whether the annotation is visible to the code that parses it."}
{"ID": 838, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String resolveRealName(final String jsonName) { if (jsonNames == null) { return jsonName; } int jsonIndex = ArraysUtil.indexOf(jsonNames, jsonName); if (jsonIndex == -1) { return jsonName; } return realNames[jsonIndex]; }. ### Assistant:", "ground_truth": "Resolves real name from JSON name.", "predict": "Resolve real name from jsonName. @param jsonName jsonName @return real name"}
{"ID": 839, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String resolveJsonName(final String realName) { if (realNames == null) { return realName; } int realIndex = ArraysUtil.indexOf(realNames, realName); if (realIndex == -1) { return realName; } return jsonNames[realIndex]; }. ### Assistant:", "ground_truth": "Resolves JSON name from real name.", "predict": "Resolves the given name to the corresponding JSON name. If the name is not found in the realNames, it is returned as is. @param realName the name to resolve. @return the resolved JSON name."}
{"ID": 840, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public TypeData lookupTypeData(final Class type) { TypeData typeData = typeDataMap.get(type); if (typeData == null) { if (serializationSubclassAware) { typeData = findSubclassTypeData(type); } if (typeData == null) { typeData = scanClassForAnnotations(type); typeDataMap.put(type, typeData); } } return typeData; }. ### Assistant:", "ground_truth": "Returns all includes for given type. Returns an empty array\nwhen no includes are defined.", "predict": "Finds the TypeData for a given class. If the class is not found, it will search for a subclass of the class. If the class is not found, it will search for annotations on the class. @param type the class @return the TypeData for the class or its subclass"}
{"ID": 841, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected TypeData _lookupTypeData(final Class type) { TypeData typeData = typeDataMap.get(type); if (typeData == null) { typeData = scanClassForAnnotations(type); typeDataMap.put(type, typeData); } return typeData; }. ### Assistant:", "ground_truth": "Lookups type data and creates one if missing.", "predict": "Find the TypeData for the given class. If it doesn't exist, create it. @param type the class to find the TypeData for. @return the TypeData for the given class."}
{"ID": 842, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected TypeData findSubclassTypeData(final Class type) { final Class<? extends Annotation> defaultAnnotation = jsonAnnotation; if (type.getAnnotation(defaultAnnotation) != null) { // current type has annotation, don't find anything, let type data be created return null; } ClassDescriptor cd = ClassIntrospector.get().lookup(type); // lookup superclasses Class[] superClasses = cd.getAllSuperclasses(); for (Class superClass : superClasses) { if (superClass.getAnnotation(defaultAnnotation) != null) { // annotated subclass founded! return _lookupTypeData(superClass); } } Class[] interfaces = cd.getAllInterfaces(); for (Class interfaze : interfaces) { if (interfaze.getAnnotation(defaultAnnotation) != null) { // annotated subclass founded! return _lookupTypeData(interfaze); } } return null; }. ### Assistant:", "ground_truth": "Finds type data of first annotated superclass or interface.", "predict": "Finds a subclass of the given type that has the default annotation. If no such subclass is found, returns null."}
{"ID": 843, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String resolveJsonName(final Class type, final String name) { TypeData typeData = lookupTypeData(type); return typeData.resolveJsonName(name); }. ### Assistant:", "ground_truth": "Returns different name of a property if set by annotation.", "predict": "Resolve a JSON name for a given class. The name is resolved based on the conventions defined in the TypeData. @param type the class to resolve the name for. @param name the name to resolve. @return the resolved name."}
{"ID": 844, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String resolveRealName(final Class type, final String jsonName) { TypeData typeData = lookupTypeData(type); return typeData.resolveRealName(jsonName); }. ### Assistant:", "ground_truth": "Returns real property name for given JSON property.", "predict": "Resolve the real name of a property based on the type and the jsonName. The real name is the name that should be used when accessing the property. The real name is not necessarily the same as the jsonName. The real name is determined by the conventions of the type. @param type the type of the property @param jsonName the jsonName of the property @return the real name of the property"}
{"ID": 845, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public byte[] getFileContent() throws IOException { if (data != null) { return data; } if (tempFile != null) { return FileUtil.readBytes(tempFile); } return null; }. ### Assistant:", "ground_truth": "Returns the content of file upload item.", "predict": "Get the file content. @return the file content @throws IOException if failed to read the file content"}
{"ID": 846, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void copyBootstrapMethods(final ClassReader classReader, final char[] charBuffer) { // Find attributOffset of the 'bootstrap_methods' array. byte[] inputBytes = classReader.b; int currentAttributeOffset = classReader.getFirstAttributeOffset(); for (int i = classReader.readUnsignedShort(currentAttributeOffset - 2); i > 0; --i) { String attributeName = classReader.readUTF8(currentAttributeOffset, charBuffer); if (Constants.BOOTSTRAP_METHODS.equals(attributeName)) { bootstrapMethodCount = classReader.readUnsignedShort(currentAttributeOffset + 6); break; } currentAttributeOffset += 6 + classReader.readInt(currentAttributeOffset + 2); } if (bootstrapMethodCount > 0) { // Compute the offset and the length of the BootstrapMethods 'bootstrap_methods' array. int bootstrapMethodsOffset = currentAttributeOffset + 8; int bootstrapMethodsLength = classReader.readInt(currentAttributeOffset + 2) - 2; bootstrapMethods = new ByteVector(bootstrapMethodsLength); bootstrapMethods.putByteArray(inputBytes, bootstrapMethodsOffset, bootstrapMethodsLength); // Add each bootstrap method in the symbol table entries. int currentOffset = bootstrapMethodsOffset; for (int i = 0; i < bootstrapMethodCount; i++) { int offset = currentOffset - bootstrapMethodsOffset; int bootstrapMethodRef = classReader.readUnsignedShort(currentOffset); currentOffset += 2; int numBootstrapArguments = classReader.readUnsignedShort(currentOffset); currentOffset += 2; int hashCode = classReader.readConst(bootstrapMethodRef, charBuffer).hashCode(); while (numBootstrapArguments-- > 0) { int bootstrapArgument = classReader.readUnsignedShort(currentOffset); currentOffset += 2; hashCode ^= classReader.readConst(bootstrapArgument, charBuffer).hashCode(); } add(new Entry(i, Symbol.BOOTSTRAP_METHOD_TAG, offset, hashCode & 0x7FFFFFFF)); } } }. ### Assistant:", "ground_truth": "Read the BootstrapMethods 'bootstrap_methods' array binary content and add them as entries of\nthe SymbolTable.\n\n@param classReader the ClassReader whose bootstrap methods must be copied to initialize the\nSymbolTable.\n@param charBuffer a buffer used to read strings in the constant pool.", "predict": "Copies the bootstrap methods of the given class to the symbol table."}
{"ID": 847, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: int setMajorVersionAndClassName(final int majorVersion, final String className) { this.majorVersion = majorVersion; this.className = className; return addConstantClass(className).index; }. ### Assistant:", "ground_truth": "Sets the major version and the name of the class to which this symbol table belongs. Also adds\nthe class name to the constant pool.\n\n@param majorVersion a major ClassFile version number.\n@param className an internal class name.\n@return the constant pool index of a new or already existing Symbol with the given class name.", "predict": "Sets the major version and class name of the constant pool. @param majorVersion the major version of the constant pool. @param className the name of the class. @return the index of the constant pool item that was added."}
{"ID": 848, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: void putConstantPool(final ByteVector output) { output.putShort(constantPoolCount).putByteArray(constantPool.data, 0, constantPool.length); }. ### Assistant:", "ground_truth": "Puts this symbol table's constant_pool array in the given ByteVector, preceded by the\nconstant_pool_count value.\n\n@param output where the JVMS ClassFile's constant_pool array must be put.", "predict": "Puts the constant pool data into the constant pool section of the output code. @param output the byte vector to put the constant pool data into."}
{"ID": 849, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: void putBootstrapMethods(final ByteVector output) { if (bootstrapMethods != null) { output .putShort(addConstantUtf8(Constants.BOOTSTRAP_METHODS)) .putInt(bootstrapMethods.length + 2) .putShort(bootstrapMethodCount) .putByteArray(bootstrapMethods.data, 0, bootstrapMethods.length); } }. ### Assistant:", "ground_truth": "Puts this symbol table's BootstrapMethods attribute in the given ByteVector. This includes the\n6 attribute header bytes and the num_bootstrap_methods value.\n\n@param output where the JVMS BootstrapMethods attribute must be put.", "predict": "Put the bootstrap methods in the given output. @param output the output to write to."}
{"ID": 850, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: Symbol addConstantFieldref(final String owner, final String name, final String descriptor) { return addConstantMemberReference(Symbol.CONSTANT_FIELDREF_TAG, owner, name, descriptor); }. ### Assistant:", "ground_truth": "Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table. Does nothing if the\nconstant pool already contains a similar item.\n\n@param owner the internal name of a class.\n@param name a field name.\n@param descriptor a field descriptor.\n@return a new or already existing Symbol with the given value.", "predict": "Adds a constant field reference. @param owner the owner of the constant field reference. @param name the name of the constant field reference. @param descriptor the descriptor of the constant field reference. @return the newly created constant field reference."}
{"ID": 851, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: Symbol addConstantMethodref( final String owner, final String name, final String descriptor, final boolean isInterface) { int tag = isInterface ? Symbol.CONSTANT_INTERFACE_METHODREF_TAG : Symbol.CONSTANT_METHODREF_TAG; return addConstantMemberReference(tag, owner, name, descriptor); }. ### Assistant:", "ground_truth": "Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this\nsymbol table. Does nothing if the constant pool already contains a similar item.\n\n@param owner the internal name of a class.\n@param name a method name.\n@param descriptor a method descriptor.\n@param isInterface whether owner is an interface or not.\n@return a new or already existing Symbol with the given value.", "predict": "Create a constant method reference. @param owner the owner of the reference. @param name the name of the method. @param descriptor the descriptor of the method. @param isInterface whether the owner is an interface. @return the constant method reference."}
{"ID": 852, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private Entry addConstantMemberReference( final int tag, final String owner, final String name, final String descriptor) { int hashCode = hash(tag, owner, name, descriptor); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.owner.equals(owner) && entry.name.equals(name) && entry.value.equals(descriptor)) { return entry; } entry = entry.next; } constantPool.put122( tag, addConstantClass(owner).index, addConstantNameAndType(name, descriptor)); return put(new Entry(constantPoolCount++, tag, owner, name, descriptor, 0, hashCode)); }. ### Assistant:", "ground_truth": "Adds a CONSTANT_Fieldref_info, CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to\nthe constant pool of this symbol table. Does nothing if the constant pool already contains a\nsimilar item.\n\n@param tag one of {@link Symbol#CONSTANT_FIELDREF_TAG}, {@link Symbol#CONSTANT_METHODREF_TAG}\nor {@link Symbol#CONSTANT_INTERFACE_METHODREF_TAG}.\n@param owner the internal name of a class.\n@param name a field or method name.\n@param descriptor a field or method descriptor.\n@return a new or already existing Symbol with the given value.", "predict": "Add a constant member reference. @param tag the tag of the constant member reference. @param owner the owner of the constant member reference. @param name the name of the constant member reference. @param descriptor the descriptor of the constant member reference. @return the constant member reference."}
{"ID": 853, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void addConstantMemberReference( final int index, final int tag, final String owner, final String name, final String descriptor) { add(new Entry(index, tag, owner, name, descriptor, 0, hash(tag, owner, name, descriptor))); }. ### Assistant:", "ground_truth": "Adds a new CONSTANT_Fieldref_info, CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info\nto the constant pool of this symbol table.\n\n@param index the constant pool index of the new Symbol.\n@param tag one of {@link Symbol#CONSTANT_FIELDREF_TAG}, {@link Symbol#CONSTANT_METHODREF_TAG}\nor {@link Symbol#CONSTANT_INTERFACE_METHODREF_TAG}.\n@param owner the internal name of a class.\n@param name a field or method name.\n@param descriptor a field or method descriptor.", "predict": "Add a constant member reference. @param index index of the entry in the table. @param tag the tag of the member. @param owner the owner of the member. @param name the name of the member. @param descriptor the descriptor of the member."}
{"ID": 854, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private Symbol addConstantIntegerOrFloat(final int tag, final int value) { int hashCode = hash(tag, value); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.data == value) { return entry; } entry = entry.next; } constantPool.putByte(tag).putInt(value); return put(new Entry(constantPoolCount++, tag, value, hashCode)); }. ### Assistant:", "ground_truth": "Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table.\nDoes nothing if the constant pool already contains a similar item.\n\n@param tag one of {@link Symbol#CONSTANT_INTEGER_TAG} or {@link Symbol#CONSTANT_FLOAT_TAG}.\n@param value an int or float.\n@return a constant pool constant with the given tag and primitive values.", "predict": "Adds a constant integer or float to the constant pool. @param tag the tag of the constant. Must be a {@link Opcodes#PUTFIELD}, {@link Opcodes#PUTSTATIC}, {@link Opcodes#PUSHFIELD}, {@link Opcodes#PUSHSTATIC}, {@link Opcodes#NEWARRAY}, {@link Opcodes#ANEWARRAY}, {@link Opcodes#ARRAYLENGTH} or {@link Opcodes#ARRAYLENGTH_OBJECT} constant pool tag. @param value the value of the constant. @return the added constant."}
{"ID": 855, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void addConstantIntegerOrFloat(final int index, final int tag, final int value) { add(new Entry(index, tag, value, hash(tag, value))); }. ### Assistant:", "ground_truth": "Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol\ntable.\n\n@param index the constant pool index of the new Symbol.\n@param tag one of {@link Symbol#CONSTANT_INTEGER_TAG} or {@link Symbol#CONSTANT_FLOAT_TAG}.\n@param value an int or float.", "predict": "Adds a constant integer or float value to the Bloom filter. @param index index of the value @param tag tag of the value @param value value of the value"}
{"ID": 856, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private Symbol addConstantLongOrDouble(final int tag, final long value) { int hashCode = hash(tag, value); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.data == value) { return entry; } entry = entry.next; } int index = constantPoolCount; constantPool.putByte(tag).putLong(value); constantPoolCount += 2; return put(new Entry(index, tag, value, hashCode)); }. ### Assistant:", "ground_truth": "Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table.\nDoes nothing if the constant pool already contains a similar item.\n\n@param tag one of {@link Symbol#CONSTANT_LONG_TAG} or {@link Symbol#CONSTANT_DOUBLE_TAG}.\n@param value a long or double.\n@return a constant pool constant with the given tag and primitive values.", "predict": "Add a constant long or double to the constant pool. @param tag the tag of the constant. @param value the value of the constant. @return the Symbol corresponding to the constant."}
{"ID": 857, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void addConstantLongOrDouble(final int index, final int tag, final long value) { add(new Entry(index, tag, value, hash(tag, value))); }. ### Assistant:", "ground_truth": "Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol\ntable.\n\n@param index the constant pool index of the new Symbol.\n@param tag one of {@link Symbol#CONSTANT_LONG_TAG} or {@link Symbol#CONSTANT_DOUBLE_TAG}.\n@param value a long or double.", "predict": "Adds a constant long or double value to the Bloom filter. The value is hashed before being added. @param index the index of the value @param tag the tag of the value @param value the value to add"}
{"ID": 858, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: int addConstantNameAndType(final String name, final String descriptor) { final int tag = Symbol.CONSTANT_NAME_AND_TYPE_TAG; int hashCode = hash(tag, name, descriptor); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.name.equals(name) && entry.value.equals(descriptor)) { return entry.index; } entry = entry.next; } constantPool.put122(tag, addConstantUtf8(name), addConstantUtf8(descriptor)); return put(new Entry(constantPoolCount++, tag, name, descriptor, hashCode)).index; }. ### Assistant:", "ground_truth": "Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table. Does nothing if the\nconstant pool already contains a similar item.\n\n@param name a field or method name.\n@param descriptor a field or method descriptor.\n@return a new or already existing Symbol with the given value.", "predict": "Adds a constant name and type to the constant pool. @param name the name of the constant. @param descriptor the descriptor of the constant. @return the index of the constant in the constant pool."}
{"ID": 859, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void addConstantNameAndType(final int index, final String name, final String descriptor) { final int tag = Symbol.CONSTANT_NAME_AND_TYPE_TAG; add(new Entry(index, tag, name, descriptor, hash(tag, name, descriptor))); }. ### Assistant:", "ground_truth": "Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table.\n\n@param index the constant pool index of the new Symbol.\n@param name a field or method name.\n@param descriptor a field or method descriptor.", "predict": "Add a constant name and type to the constant pool. @param index the index of the constant pool entry to be added. @param name the name of the constant. @param descriptor the descriptor of the constant."}
{"ID": 860, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: int addConstantUtf8(final String value) { int hashCode = hash(Symbol.CONSTANT_UTF8_TAG, value); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == Symbol.CONSTANT_UTF8_TAG && entry.hashCode == hashCode && entry.value.equals(value)) { return entry.index; } entry = entry.next; } constantPool.putByte(Symbol.CONSTANT_UTF8_TAG).putUTF8(value); return put(new Entry(constantPoolCount++, Symbol.CONSTANT_UTF8_TAG, value, hashCode)).index; }. ### Assistant:", "ground_truth": "Adds a CONSTANT_Utf8_info to the constant pool of this symbol table. Does nothing if the\nconstant pool already contains a similar item.\n\n@param value a string.\n@return a new or already existing Symbol with the given value.", "predict": "Adds a constant UTF8 to the constant pool. @param value the value of the constant. @return the index of the constant in the constant pool."}
{"ID": 861, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void addConstantUtf8(final int index, final String value) { add(new Entry(index, Symbol.CONSTANT_UTF8_TAG, value, hash(Symbol.CONSTANT_UTF8_TAG, value))); }. ### Assistant:", "ground_truth": "Adds a new CONSTANT_String_info to the constant pool of this symbol table.\n\n@param index the constant pool index of the new Symbol.\n@param value a string.", "predict": "Adds a constant UTF8 entry. This is used to encode literals."}
{"ID": 862, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: Symbol addConstantMethodHandle( final int referenceKind, final String owner, final String name, final String descriptor, final boolean isInterface) { final int tag = Symbol.CONSTANT_METHOD_HANDLE_TAG; // Note that we don't need to include isInterface in the hash computation, because it is // redundant with owner (we can't have the same owner with different isInterface values). int hashCode = hash(tag, owner, name, descriptor, referenceKind); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.data == referenceKind && entry.owner.equals(owner) && entry.name.equals(name) && entry.value.equals(descriptor)) { return entry; } entry = entry.next; } if (referenceKind <= Opcodes.H_PUTSTATIC) { constantPool.put112(tag, referenceKind, addConstantFieldref(owner, name, descriptor).index); } else { constantPool.put112( tag, referenceKind, addConstantMethodref(owner, name, descriptor, isInterface).index); } return put( new Entry(constantPoolCount++, tag, owner, name, descriptor, referenceKind, hashCode)); }. ### Assistant:", "ground_truth": "Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table. Does nothing if\nthe constant pool already contains a similar item.\n\n@param referenceKind one of {@link Opcodes#H_GETFIELD}, {@link Opcodes#H_GETSTATIC}, {@link\nOpcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL}, {@link\nOpcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL}, {@link\nOpcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}.\n@param owner the internal name of a class of interface.\n@param name a field or method name.\n@param descriptor a field or method descriptor.\n@param isInterface whether owner is an interface or not.\n@return a new or already existing Symbol with the given value.", "predict": "Allocate a new constant method handle. The constant method handle is represented by a 4-byte tag, followed by a 2-byte reference kind, followed by the owner's name and descriptor, followed by the constant pool index of the referenced field or method. The constant pool index is computed by adding the constant pool index of the referenced field or method to the constant pool index of the constant pool entry that represents the constant pool index of the referenced field or method. The constant pool index of the referenced field or method is computed by adding the constant pool index of the referenced field or method to the constant pool index of the constant pool entry that represents the constant pool index of the referenced field or method. The constant pool index of the referenced field or method is computed by adding the constant pool index of the referenced field or method to the constant pool index of the constant pool entry that represents the constant pool index of the referenced field or method. The constant pool index of the referenced field or method is computed by adding the constant pool index of the referenced field or method"}
{"ID": 863, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void addConstantMethodHandle( final int index, final int referenceKind, final String owner, final String name, final String descriptor) { final int tag = Symbol.CONSTANT_METHOD_HANDLE_TAG; int hashCode = hash(tag, owner, name, descriptor, referenceKind); add(new Entry(index, tag, owner, name, descriptor, referenceKind, hashCode)); }. ### Assistant:", "ground_truth": "Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table.\n\n@param index the constant pool index of the new Symbol.\n@param referenceKind one of {@link Opcodes#H_GETFIELD}, {@link Opcodes#H_GETSTATIC}, {@link\nOpcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL}, {@link\nOpcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL}, {@link\nOpcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}.\n@param owner the internal name of a class of interface.\n@param name a field or method name.\n@param descriptor a field or method descriptor.", "predict": "Adds a constant method handle to the table. @param index the index of the entry to add. @param referenceKind the reference kind of the method handle. @param owner the owner of the method handle. @param name the name of the method handle. @param descriptor the descriptor of the method handle."}
{"ID": 864, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: Symbol addConstantDynamic( final String name, final String descriptor, final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) { Symbol bootstrapMethod = addBootstrapMethod(bootstrapMethodHandle, bootstrapMethodArguments); return addConstantDynamicOrInvokeDynamicReference( Symbol.CONSTANT_DYNAMIC_TAG, name, descriptor, bootstrapMethod.index); }. ### Assistant:", "ground_truth": "Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table. Also adds the related\nbootstrap method to the BootstrapMethods of this symbol table. Does nothing if the constant\npool already contains a similar item.\n\n@param name a method name.\n@param descriptor a field descriptor.\n@param bootstrapMethodHandle a bootstrap method handle.\n@param bootstrapMethodArguments the bootstrap method arguments.\n@return a new or already existing Symbol with the given value.", "predict": "Create a constant dynamic symbol. @param name the name of the symbol. @param descriptor the descriptor of the symbol. @param bootstrapMethodHandle the bootstrap method handle. @param bootstrapMethodArguments the bootstrap arguments. @return the symbol."}
{"ID": 865, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: Symbol addConstantInvokeDynamic( final String name, final String descriptor, final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) { Symbol bootstrapMethod = addBootstrapMethod(bootstrapMethodHandle, bootstrapMethodArguments); return addConstantDynamicOrInvokeDynamicReference( Symbol.CONSTANT_INVOKE_DYNAMIC_TAG, name, descriptor, bootstrapMethod.index); }. ### Assistant:", "ground_truth": "Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table. Also adds the\nrelated bootstrap method to the BootstrapMethods of this symbol table. Does nothing if the\nconstant pool already contains a similar item.\n\n@param name a method name.\n@param descriptor a method descriptor.\n@param bootstrapMethodHandle a bootstrap method handle.\n@param bootstrapMethodArguments the bootstrap method arguments.\n@return a new or already existing Symbol with the given value.", "predict": "Create a constant invoke dynamic symbol."}
{"ID": 866, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private Symbol addConstantDynamicOrInvokeDynamicReference( final int tag, final String name, final String descriptor, final int bootstrapMethodIndex) { int hashCode = hash(tag, name, descriptor, bootstrapMethodIndex); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.data == bootstrapMethodIndex && entry.name.equals(name) && entry.value.equals(descriptor)) { return entry; } entry = entry.next; } constantPool.put122(tag, bootstrapMethodIndex, addConstantNameAndType(name, descriptor)); return put( new Entry( constantPoolCount++, tag, null, name, descriptor, bootstrapMethodIndex, hashCode)); }. ### Assistant:", "ground_truth": "Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol\ntable. Does nothing if the constant pool already contains a similar item.\n\n@param tag one of {@link Symbol#CONSTANT_DYNAMIC_TAG} or {@link\nSymbol#CONSTANT_INVOKE_DYNAMIC_TAG}.\n@param name a method name.\n@param descriptor a field descriptor for CONSTANT_DYNAMIC_TAG) or a method descriptor for\nCONSTANT_INVOKE_DYNAMIC_TAG.\n@param bootstrapMethodIndex the index of a bootstrap method in the BootstrapMethods attribute.\n@return a new or already existing Symbol with the given value.", "predict": "Add a constant dynamic or invoke dynamic reference. @param tag the bootstrap method tag. @param name the bootstrap method name. @param descriptor the bootstrap method descriptor. @param bootstrapMethodIndex the bootstrap method index. @return the constant dynamic or invoke dynamic reference."}
{"ID": 867, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void addConstantDynamicOrInvokeDynamicReference( final int tag, final int index, final String name, final String descriptor, final int bootstrapMethodIndex) { int hashCode = hash(tag, name, descriptor, bootstrapMethodIndex); add(new Entry(index, tag, null, name, descriptor, bootstrapMethodIndex, hashCode)); }. ### Assistant:", "ground_truth": "Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this\nsymbol table.\n\n@param tag one of {@link Symbol#CONSTANT_DYNAMIC_TAG} or {@link\nSymbol#CONSTANT_INVOKE_DYNAMIC_TAG}.\n@param index the constant pool index of the new Symbol.\n@param name a method name.\n@param descriptor a field descriptor for CONSTANT_DYNAMIC_TAG or a method descriptor for\nCONSTANT_INVOKE_DYNAMIC_TAG.\n@param bootstrapMethodIndex the index of a bootstrap method in the BootstrapMethods attribute.", "predict": "Adds a constant dynamic or invoke dynamic reference. @param tag The tag of the reference. @param index The index of the reference. @param name The name of the reference. @param descriptor The descriptor of the reference. @param bootstrapMethodIndex The bootstrap method index of the reference."}
{"ID": 868, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private Symbol addConstantUtf8Reference(final int tag, final String value) { int hashCode = hash(tag, value); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.value.equals(value)) { return entry; } entry = entry.next; } constantPool.put12(tag, addConstantUtf8(value)); return put(new Entry(constantPoolCount++, tag, value, hashCode)); }. ### Assistant:", "ground_truth": "Adds a CONSTANT_Class_info, CONSTANT_String_info, CONSTANT_MethodType_info,\nCONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table. Does\nnothing if the constant pool already contains a similar item.\n\n@param tag one of {@link Symbol#CONSTANT_CLASS_TAG}, {@link Symbol#CONSTANT_STRING_TAG}, {@link\nSymbol#CONSTANT_METHOD_TYPE_TAG}, {@link Symbol#CONSTANT_MODULE_TAG} or {@link\nSymbol#CONSTANT_PACKAGE_TAG}.\n@param value an internal class name, an arbitrary string, a method descriptor, a module or a\npackage name, depending on tag.\n@return a new or already existing Symbol with the given value.", "predict": "Add a constant UTF8 reference to the constant pool. @param tag the tag for the constant value. @param value the constant value. @return the Symbol for the constant value."}
{"ID": 869, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void addConstantUtf8Reference(final int index, final int tag, final String value) { add(new Entry(index, tag, value, hash(tag, value))); }. ### Assistant:", "ground_truth": "Adds a new CONSTANT_Class_info, CONSTANT_String_info, CONSTANT_MethodType_info,\nCONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table.\n\n@param index the constant pool index of the new Symbol.\n@param tag one of {@link Symbol#CONSTANT_CLASS_TAG}, {@link Symbol#CONSTANT_STRING_TAG}, {@link\nSymbol#CONSTANT_METHOD_TYPE_TAG}, {@link Symbol#CONSTANT_MODULE_TAG} or {@link\nSymbol#CONSTANT_PACKAGE_TAG}.\n@param value an internal class name, an arbitrary string, a method descriptor, a module or a\npackage name, depending on tag.", "predict": "Adds a constant utf8 reference to the table. The tag is used to determine the hash value. The value is not hashed. @param index the index of the new entry @param tag the tag of the new entry @param value the value of the new entry"}
{"ID": 870, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: Symbol addBootstrapMethod( final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) { ByteVector bootstrapMethodsAttribute = bootstrapMethods; if (bootstrapMethodsAttribute == null) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector(); } // The bootstrap method arguments can be Constant_Dynamic values, which reference other // bootstrap methods. We must therefore add the bootstrap method arguments to the constant pool // and BootstrapMethods attribute first, so that the BootstrapMethods attribute is not modified // while adding the given bootstrap method to it, in the rest of this method. for (Object bootstrapMethodArgument : bootstrapMethodArguments) { addConstant(bootstrapMethodArgument); } // Write the bootstrap method in the BootstrapMethods table. This is necessary to be able to // compare it with existing ones, and will be reverted below if there is already a similar // bootstrap method. int bootstrapMethodOffset = bootstrapMethodsAttribute.length; bootstrapMethodsAttribute.putShort( addConstantMethodHandle( bootstrapMethodHandle.getTag(), bootstrapMethodHandle.getOwner(), bootstrapMethodHandle.getName(), bootstrapMethodHandle.getDesc(), bootstrapMethodHandle.isInterface()) .index); int numBootstrapArguments = bootstrapMethodArguments.length; bootstrapMethodsAttribute.putShort(numBootstrapArguments); for (Object bootstrapMethodArgument : bootstrapMethodArguments) { bootstrapMethodsAttribute.putShort(addConstant(bootstrapMethodArgument).index); } // Compute the length and the hash code of the bootstrap method. int bootstrapMethodlength = bootstrapMethodsAttribute.length - bootstrapMethodOffset; int hashCode = bootstrapMethodHandle.hashCode(); for (Object bootstrapMethodArgument : bootstrapMethodArguments) { hashCode ^= bootstrapMethodArgument.hashCode(); } hashCode &= 0x7FFFFFFF; // Add the bootstrap method to the symbol table or revert the above changes. return addBootstrapMethod(bootstrapMethodOffset, bootstrapMethodlength, hashCode); }. ### Assistant:", "ground_truth": "Adds a bootstrap method to the BootstrapMethods attribute of this symbol table. Does nothing if\nthe BootstrapMethods already contains a similar bootstrap method.\n\n@param bootstrapMethodHandle a bootstrap method handle.\n@param bootstrapMethodArguments the bootstrap method arguments.\n@return a new or already existing Symbol with the given value.", "predict": "Add a bootstrap method to the symbol table. The bootstrap method is a method that is not part of the original program, but is used to bootstrap the execution of the program. The bootstrap method is typically used to load classes, but it can also be used to load other types of data. The bootstrap method is typically implemented as a bridge between the bootstrap data and the original program. The bootstrap method is typically implemented as a bridge between the bootstrap data and the original program. The bootstrap method is typically implemented as a bridge between the bootstrap data and the original program. The bootstrap method is typically implemented as a bridge between the bootstrap data and the original program. The bootstrap method is typically implemented as a bridge between the bootstrap data and the original program. The bootstrap method is typically implemented as a bridge between the bootstrap data and the original program. The bootstrap method is typically implemented as a bridge between the bootstrap data and the original program. The bootstrap method is typically implemented as a bridge between the bootstrap data and the original program. The bootstrap method is typically implemented as a bridge between the bootstrap data and"}
{"ID": 871, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: int addMergedType(final int typeTableIndex1, final int typeTableIndex2) { // TODO sort the arguments? The merge result should be independent of their order. long data = typeTableIndex1 | (((long) typeTableIndex2) << 32); int hashCode = hash(Symbol.MERGED_TYPE_TAG, typeTableIndex1 + typeTableIndex2); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == Symbol.MERGED_TYPE_TAG && entry.hashCode == hashCode && entry.data == data) { return entry.info; } entry = entry.next; } String type1 = typeTable[typeTableIndex1].value; String type2 = typeTable[typeTableIndex2].value; int commonSuperTypeIndex = addType(classWriter.getCommonSuperClass(type1, type2)); put(new Entry(typeCount, Symbol.MERGED_TYPE_TAG, data, hashCode)).info = commonSuperTypeIndex; return commonSuperTypeIndex; }. ### Assistant:", "ground_truth": "Adds a merged type in the type table of this symbol table. Does nothing if the type table\nalready contains a similar type.\n\n@param typeTableIndex1 a {@link Symbol#TYPE_TAG} type, specified by its index in the type\ntable.\n@param typeTableIndex2 another {@link Symbol#TYPE_TAG} type, specified by its index in the type\ntable.\n@return the index of a new or already existing {@link Symbol#TYPE_TAG} type Symbol,\ncorresponding to the common super class of the given types.", "predict": "Merge two types. The first type is specified by the first argument, the second by the second. The resulting merged type is returned. @param typeTableIndex1 index of the first type in the type table. @param typeTableIndex2 index of the second type in the type table. @return the merged type."}
{"ID": 872, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private int hash(final String name) { int h = 0; for (int i = name.length() - 1; i >= 0; i--) { char c = name.charAt(i); if (!caseSensitive) { if (c >= 'A' && c <= 'Z') { c += 32; } } h = 31 * h + c; } if (h > 0) { return h; } if (h == Integer.MIN_VALUE) { return Integer.MAX_VALUE; } return -h; }. ### Assistant:", "ground_truth": "Calculates hash value of the input string.", "predict": "Compute the hash value for a given name. @param name the name to compute the hash value for. @return the computed hash value."}
{"ID": 873, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public HttpMultiMap<V> clear() { for (int i = 0; i < entries.length; i++) { entries[i] = null; } head.before = head.after = head; return this; }. ### Assistant:", "ground_truth": "Clears the map.", "predict": "Clear all entries. @return this map."}
{"ID": 874, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public List<V> getAll(final String name) { LinkedList<V> values = new LinkedList<>(); int h = hash(name); int i = index(h); MapEntry<V> e = entries[i]; while (e != null) { if (e.hash == h && eq(name, e.key)) { values.addFirst(e.getValue()); } e = e.next; } return values; }. ### Assistant:", "ground_truth": "Returns all values associated with the name.", "predict": "Returns all values associated with the given name. @param name the name of the values to retrieve @return the values associated with the given name"}
{"ID": 875, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public Iterator<Map.Entry<String, V>> iterator() { final MapEntry[] e = {head.after}; return new Iterator<Map.Entry<String, V>>() { @Override public boolean hasNext() { return e[0] != head; } @Override @SuppressWarnings(\"unchecked\") public Map.Entry<String, V> next() { if (!hasNext()) { throw new NoSuchElementException(\"No next() entry in the iteration\"); } MapEntry<V> next = e[0]; e[0] = e[0].after; return next; } @Override public void remove() { throw new UnsupportedOperationException(); } }; }. ### Assistant:", "ground_truth": "Returns iterator of all entries.", "predict": "Provides an iterator over the elements of this linked list. The iterator is implemented as a doubly-linked list iterator. The first element in the list is the head, and the last element is the tail. The head is guaranteed to be the first element in the list, and the tail is guaranteed to be the last element in the list. The elements in the list are accessed in ascending order. @return An iterator over the elements of this linked list."}
{"ID": 876, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public List<Map.Entry<String, V>> entries() { List<Map.Entry<String, V>> all = new LinkedList<>(); MapEntry<V> e = head.after; while (e != head) { all.add(e); e = e.after; } return all; }. ### Assistant:", "ground_truth": "Returns all the entries of this map. Case sensitivity does not influence\nthe returned list, it always contains all of the values.", "predict": "Returns the list of entries in the queue."}
{"ID": 877, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void grow(final int minCapacity) { final int oldCapacity = buffer.length; int newCapacity = oldCapacity << 1; if (newCapacity - minCapacity < 0) { // special case, min capacity is larger then a grow newCapacity = minCapacity + 512; } buffer = Arrays.copyOf(buffer, newCapacity); }. ### Assistant:", "ground_truth": "Grows the buffer.", "predict": "Grows the buffer by doubling its size. The buffer will be reallocated if it is too small. @param minCapacity minimum capacity of the buffer"}
{"ID": 878, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public FastCharBuffer append(final CharSequence csq, final int start, final int end) { for (int i = start; i < end; i++) { append(csq.charAt(i)); } return this; }. ### Assistant:", "ground_truth": "Appends character sequence to buffer.", "predict": "Append characters from a CharSequence. @param csq the CharSequence to append. @param start the start index. @param end the end index. @return this buffer."}
{"ID": 879, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public AnnotationVisitor visitAnnotation(final String desc, final boolean visible) { AnnotationVisitor destAnn = methodVisitor.visitAnnotation(desc, visible); // [A4] return new AnnotationVisitorAdapter(destAnn); }. ### Assistant:", "ground_truth": "Copies target method annotations.", "predict": "Visits an annotation of the method. @param desc class descriptor if the annotation. @param visible whether the annotation is visible to the compiler. @return the visitor to be used for the visit of the annotation."}
{"ID": 880, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void visitEnd() { createFirstChainDelegate_Continue(tmd); for (int p = 0; p < tmd.proxyData.length; p++) { tmd.selectCurrentProxy(p); createProxyMethod(tmd); } }. ### Assistant:", "ground_truth": "Finally, builds proxy methods if applied to current method.", "predict": "Create the first chain delegate and the proxies."}
{"ID": 881, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void createFirstChainDelegate_Start() { // check invalid access flags int access = msign.getAccessFlags(); if (!wd.allowFinalMethods) { if ((access & AsmUtil.ACC_FINAL) != 0) { // detect final throw new ProxettaException( \"Unable to create proxy for final method: \" + msign + \". Remove final modifier or change the pointcut definition.\"); } } // create proxy methods tmd = new TargetMethodData(msign, aspectList); access &= ~ACC_NATIVE; access &= ~ACC_ABSTRACT; methodVisitor = wd.dest.visitMethod( access, tmd.msign.getMethodName(), tmd.msign.getDescription(), tmd.msign.getAsmMethodSignature(), null); }. ### Assistant:", "ground_truth": "Starts creation of first chain delegate.", "predict": "Create the first chain delegate."}
{"ID": 882, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void createFirstChainDelegate_Continue(final TargetMethodData tmd) { methodVisitor.visitCode(); if (tmd.msign.isStatic) { loadStaticMethodArguments(methodVisitor, tmd.msign); methodVisitor.visitMethodInsn( INVOKESTATIC, wd.thisReference, tmd.firstMethodName(), tmd.msign.getDescription(), false); } else { loadSpecialMethodArguments(methodVisitor, tmd.msign); methodVisitor.visitMethodInsn( INVOKESPECIAL, wd.thisReference, tmd.firstMethodName(), tmd.msign.getDescription(), false); } visitReturn(methodVisitor, tmd.msign, false); methodVisitor.visitMaxs(0, 0); methodVisitor.visitEnd(); }. ### Assistant:", "ground_truth": "Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method.\nThis method mirrors the target method.", "predict": "Create the first chain delegate. @param tmd TargetMethodData"}
{"ID": 883, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Path parse(final String path) { return path == null ? new Path() : new Path(StringUtil.splitc(path, '.')); }. ### Assistant:", "ground_truth": "Parses input dot-separated string that represents a path.", "predict": "Parse a path. @param path the path to parse. @return the parsed path."}
{"ID": 884, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Path push(final CharSequence field) { _push(field); if (altPath != null) { altPath.push(field); } return this; }. ### Assistant:", "ground_truth": "Push element to the path.", "predict": "Pushes a field to the path. If the path is already alt, altPath is pushed too. @param field the field to push @return the updated path"}
{"ID": 885, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void configureServletContext(final ServletContext servletContext) { servletContext.addListener(jodd.servlet.RequestContextListener.class); if (decoraEnabled) { final FilterRegistration filter = servletContext.addFilter(\"decora\", jodd.decora.DecoraServletFilter.class); filter.addMappingForUrlPatterns(null, true, contextPath); } final FilterRegistration filter = servletContext.addFilter(\"madvoc\", jodd.madvoc.MadvocServletFilter.class); filter.addMappingForUrlPatterns(madvocDispatcherTypes, true, contextPath); }. ### Assistant:", "ground_truth": "Configures servlet context.", "predict": "Configure the servlet context. This is done in the servlet context listener. @param servletContext servlet context"}
{"ID": 886, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Object execute() { String methodName = targetMethodName(); Class returnType = returnType(); Object next = pathref.continueWith(this, methodName, returnType); return ProxyTarget.returnValue(next); }. ### Assistant:", "ground_truth": "Reads method name and appends it. Creates object for next call and\nreturns that value. If next object is unsupported, it will return null;", "predict": "Execute the method. @return the result of the method execution."}
{"ID": 887, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public FieldDescriptor[] getAllFieldDescriptors() { if (allFields == null) { FieldDescriptor[] allFields = new FieldDescriptor[fieldsMap.size()]; int index = 0; for (FieldDescriptor fieldDescriptor : fieldsMap.values()) { allFields[index] = fieldDescriptor; index++; } Arrays.sort(allFields, Comparator.comparing(fd -> fd.getField().getName())); this.allFields = allFields; } return allFields; }. ### Assistant:", "ground_truth": "Returns all fields of this collection. Returns empty array\nif no fields exist. Initialized lazy.", "predict": "Returns all the FieldDescriptors in this message. The order is the order of the fields in the message."}
{"ID": 888, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") @Override protected <T> BeanDefinition<T> createBeanDefinitionForRegistration( final String name, Class<T> type, final Scope scope, final WiringMode wiringMode, final Consumer<T> consumer) { if (proxetta != null) { final Class originalType = type; final ProxettaFactory builder = proxetta.proxy(); builder.setTarget(type); type = builder.define(); return new ProxettaBeanDefinition( name, type, scope, wiringMode, originalType, proxetta.getAspects(new ProxyAspect[0]), consumer); } return super.createBeanDefinitionForRegistration(name, type, scope, wiringMode, consumer); }. ### Assistant:", "ground_truth": "Applies proxetta on bean class before bean registration.", "predict": "Create a bean definition for registration."}
{"ID": 889, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static DbTransactionMode convertToDbMode(final JtxTransactionMode txMode) { final int isolation; switch (txMode.getIsolationLevel()) { case ISOLATION_DEFAULT: isolation = DbTransactionMode.ISOLATION_DEFAULT; break; case ISOLATION_NONE: isolation = DbTransactionMode.ISOLATION_NONE; break; case ISOLATION_READ_COMMITTED: isolation = DbTransactionMode.ISOLATION_READ_COMMITTED; break; case ISOLATION_READ_UNCOMMITTED: isolation = DbTransactionMode.ISOLATION_READ_UNCOMMITTED; break; case ISOLATION_REPEATABLE_READ: isolation = DbTransactionMode.ISOLATION_REPEATABLE_READ; break; case ISOLATION_SERIALIZABLE: isolation = DbTransactionMode.ISOLATION_SERIALIZABLE; break; default: throw new IllegalArgumentException(); } return new DbTransactionMode(isolation, txMode.isReadOnly()); }. ### Assistant:", "ground_truth": "Converter JTX transaction mode to DB transaction mode.", "predict": "Convert JtxTransactionMode to DbTransactionMode. @param txMode JtxTransactionMode @return DbTransactionMode"}
{"ID": 890, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private Object readProperty(final Object source, final PropertyDescriptor propertyDescriptor) { Getter getter = propertyDescriptor.getGetter(declared); if (getter != null) { try { return getter.invokeGetter(source); } catch (Exception ex) { throw new JsonException(ex); } } return null; }. ### Assistant:", "ground_truth": "Reads property using property descriptor.", "predict": "Read a property from the source object. @param source the source object @param propertyDescriptor the property descriptor @return the value of the property or null if the property is not found"}
{"ID": 891, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void putAll(final Map t) { for (Object o : t.entrySet()) { Map.Entry e = (Map.Entry) o; put(e.getKey(), e.getValue()); } }. ### Assistant:", "ground_truth": "Copies all of the mappings from the specified map to this one.\nThese mappings replace any mappings that this map had for any of the\nkeys currently in the specified Map.\n\n@param t Mappings to be stored in this map.", "predict": "Put all mappings from another map into this map. @param t another map"}
{"ID": 892, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Buffer append(final Buffer buffer) { if (buffer.list.isEmpty()) { // nothing to append return buffer; } list.addAll(buffer.list); last = buffer.last; size += buffer.size; return this; }. ### Assistant:", "ground_truth": "Appends other buffer to this one.", "predict": "Append another buffer to this one. The resulting buffer will have twice the size of the original buffer. @param buffer the buffer to append @return this buffer"}
{"ID": 893, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void writeTo(final Writer writer) throws IOException { for (Object o : list) { if (o instanceof FastByteBuffer) { FastByteBuffer fastByteBuffer = (FastByteBuffer) o; byte[] array = fastByteBuffer.toArray(); writer.write(new String(array, StringPool.ISO_8859_1)); } else if (o instanceof Uploadable) { Uploadable uploadable = (Uploadable) o; InputStream inputStream = uploadable.openInputStream(); try { StreamUtil.copy(inputStream, writer, StringPool.ISO_8859_1); } finally { StreamUtil.close(inputStream); } } } }. ### Assistant:", "ground_truth": "Writes content to the writer.", "predict": "Write the contents of the list to the writer. @param writer the writer to write to. @throws IOException if an IOException occurs."}
{"ID": 894, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void writeTo(final OutputStream out) throws IOException { for (Object o : list) { if (o instanceof FastByteBuffer) { FastByteBuffer fastByteBuffer = (FastByteBuffer) o; out.write(fastByteBuffer.toArray()); } else if (o instanceof Uploadable) { Uploadable uploadable = (Uploadable) o; InputStream inputStream = uploadable.openInputStream(); try { StreamUtil.copy(inputStream, out); } finally { StreamUtil.close(inputStream); } } } }. ### Assistant:", "ground_truth": "Writes content to the output stream.", "predict": "Write the contents of the list to the output stream. @param out the output stream to write to. @throws IOException if an I/O error occurs."}
{"ID": 895, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void writeTo(final OutputStream out, final HttpProgressListener progressListener) throws IOException { // start final int size = size(); final int callbackSize = progressListener.callbackSize(size); int count = 0; // total count int step = 0; // step is offset in current chunk progressListener.transferred(count); // loop for (Object o : list) { if (o instanceof FastByteBuffer) { FastByteBuffer fastByteBuffer = (FastByteBuffer) o; byte[] bytes = fastByteBuffer.toArray(); int offset = 0; while (offset < bytes.length) { // calc the remaining sending chunk size int chunk = callbackSize - step; // check if this chunk size fits the bytes array if (offset + chunk > bytes.length) { chunk = bytes.length - offset; } // writes the chunk out.write(bytes, offset, chunk); offset += chunk; step += chunk; count += chunk; // listener if (step >= callbackSize) { progressListener.transferred(count); step -= callbackSize; } } } else if (o instanceof Uploadable) { Uploadable uploadable = (Uploadable) o; InputStream inputStream = uploadable.openInputStream(); int remaining = uploadable.getSize(); try { while (remaining > 0) { // calc the remaining sending chunk size int chunk = callbackSize - step; // check if this chunk size fits the remaining size if (chunk > remaining) { chunk = remaining; } // writes remaining chunk StreamUtil.copy(inputStream, out, chunk); remaining -= chunk; step += chunk; count += chunk; // listener if (step >= callbackSize) { progressListener.transferred(count); step -= callbackSize; } } } finally { StreamUtil.close(inputStream); } } } // end if (step != 0) { progressListener.transferred(count); } }. ### Assistant:", "ground_truth": "Writes content to the output stream, using progress listener to track the sending progress.", "predict": "Writes the uploaded data to the OutputStream. @param out OutputStream to write to. @param progressListener ProgressListener to report progress."}
{"ID": 896, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String getString(final String key) { CharSequence cs = (CharSequence) map.get(key); return cs == null ? null : cs.toString(); }. ### Assistant:", "ground_truth": "Returns the string value with the specified key.", "predict": "Returns a string value from the map. If the value is not found, it returns null. @param key the key of the value @return the value or null if the value is not found"}
{"ID": 897, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Integer getInteger(final String key) { Number number = (Number) map.get(key); if (number == null) { return null; } if (number instanceof Integer) { return (Integer) number; } return number.intValue(); }. ### Assistant:", "ground_truth": "returns the integer value with the specified key.", "predict": "Returns the integer value of the specified key. If the key is not found, returns null. @param key the key @return the integer value of the specified key. If the key is not found, returns null."}
{"ID": 898, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Long getLong(final String key) { Number number = (Number) map.get(key); if (number == null) { return null; } if (number instanceof Long) { return (Long) number; } return number.longValue(); }. ### Assistant:", "ground_truth": "Returns the long value with the specified key.", "predict": "Get a Long value from the map. If the value is not present, it returns null. If the value is a Long, it returns it. If the value is not a Long, it converts it to a Long. @param key the key of the value to retrieve. @return the value associated with the key, or null if the value is not present."}
{"ID": 899, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Double getDouble(final String key) { Number number = (Number) map.get(key); if (number == null) { return null; } if (number instanceof Double) { return (Double) number; } return number.doubleValue(); }. ### Assistant:", "ground_truth": "Returns the double value with the specified key.", "predict": "Get the value of the given key as a double. If the value is not a double, it will be converted to a double. If the value is null, it will return null. @param key the key of the value to retrieve @return the value of the given key as a double, or null if the value is null"}
{"ID": 900, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Float getFloat(final String key) { Number number = (Number) map.get(key); if (number == null) { return null; } if (number instanceof Float) { return (Float) number; } return number.floatValue(); }. ### Assistant:", "ground_truth": "Returns the float value with the specified key.", "predict": "Returns the float value associated with the specified key, or null if there is no mapping for the key. @param key key @return float value associated with the specified key, or null if there is no mapping for the key."}
{"ID": 901, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") public <T> T getValue(final String key) { T val = (T) map.get(key); if (val instanceof Map) { return (T) new JsonObject((Map) val); } if (val instanceof List) { return (T) new JsonArray((List) val); } return val; }. ### Assistant:", "ground_truth": "Returns the value with the specified key, as an object.", "predict": "Get the value of the key. If the value is a map, it will be unwrapped and returned as a JsonObject. If the value is a list, it will be unwrapped and returned as a JsonArray. If the value is not a map or a list, it will be returned as is. @param key the key to get the value for. @param <T> the type of the value. @return the value of the key."}
{"ID": 902, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public JsonObject put(final String key, final String value) { Objects.requireNonNull(key); map.put(key, value); return this; }. ### Assistant:", "ground_truth": "Puts a string into the JSON object with the specified key.", "predict": "Put a value under a key. @param key Key @param value Value @return This object"}
{"ID": 903, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void useFolder(final String folderName) { closeFolderIfOpened(folder); try { this.folderName = folderName; this.folder = getService().getFolder(folderName); try { folder.open(Folder.READ_WRITE); } catch (final MailException ignore) { folder.open(Folder.READ_ONLY); } } catch (final MessagingException msgexc) { throw new MailException(\"Failed to connect to folder: \" + folderName, msgexc); } }. ### Assistant:", "ground_truth": "Opens new folder and closes previously opened folder.\n\n@param folderName Folder to open", "predict": "Opens the folder with the given name. The folder is opened in READ-WRITE mode. If the folder does not exist, it will be created. If the folder is already opened, it will be closed and reopened. @param folderName the name of the folder to open."}
{"ID": 904, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: ReceivedEmail[] receiveMessages( final EmailFilter filter, final Flags flagsToSet, final Flags flagsToUnset, final boolean envelope, final Consumer<Message[]> processedMessageConsumer) { useAndOpenFolderIfNotSet(); final Message[] messages; try { if (filter == null) { messages = folder.getMessages(); } else { messages = folder.search(filter.getSearchTerm()); } if (messages.length == 0) { return ReceivedEmail.EMPTY_ARRAY; } if (envelope) { final FetchProfile fetchProfile = new FetchProfile(); fetchProfile.add(FetchProfile.Item.ENVELOPE); fetchProfile.add(FetchProfile.Item.FLAGS); folder.fetch(messages, fetchProfile); } // process messages final ReceivedEmail[] emails = new ReceivedEmail[messages.length]; for (int i = 0; i < messages.length; i++) { final Message msg = messages[i]; // we need to parse message BEFORE flags are set! emails[i] = new ReceivedEmail(msg, envelope, attachmentStorage); if (!EmailUtil.isEmptyFlags(flagsToSet)) { emails[i].flags(flagsToSet); msg.setFlags(flagsToSet, true); } if (!EmailUtil.isEmptyFlags(flagsToUnset)) { emails[i].flags().remove(flagsToUnset); msg.setFlags(flagsToUnset, false); } if (EmailUtil.isEmptyFlags(flagsToSet) && !emails[i].isSeen()) { msg.setFlag(Flags.Flag.SEEN, false); } } if (processedMessageConsumer != null) { processedMessageConsumer.accept(messages); } // if messages were marked to be deleted, we need to expunge the folder if (!EmailUtil.isEmptyFlags(flagsToSet)) { if (flagsToSet.contains(Flags.Flag.DELETED)) { folder.expunge(); } } return emails; } catch (final MessagingException msgexc) { throw new MailException(\"Failed to fetch messages\", msgexc); } }. ### Assistant:", "ground_truth": "The main email receiving method.", "predict": "Receive messages from the mailbox. @param filter email filter to apply to the messages. @param flagsToSet flags to set on the messages. @param flagsToUnset flags to unset on the messages. @param envelope true if the envelope should be fetched. @param processedMessageConsumer consumer to handle processed messages. @return received emails."}
{"ID": 905, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void updateEmailFlags(final ReceivedEmail receivedEmail) { useAndOpenFolderIfNotSet(); try { folder.setFlags(new int[] {receivedEmail.messageNumber()}, receivedEmail.flags(),true); } catch (MessagingException mex) { throw new MailException(\"Failed to fetch messages\", mex); } }. ### Assistant:", "ground_truth": "Updates the email flags on the server.", "predict": "Update the flags on the email. This is a convenience method for setting the flags on the email. It does not open the email. @param receivedEmail Received email object."}
{"ID": 906, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void closeFolderIfOpened(final Folder folder) { if (folder != null) { try { folder.close(true); } catch (final MessagingException ignore) { } } }. ### Assistant:", "ground_truth": "Closes folder if opened and expunge deleted messages.", "predict": "Close folder if opened. @param folder folder to close."}
{"ID": 907, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: DbQueryNamedParameter lookupNamedParameter(final String name) { DbQueryNamedParameter p = rootNP; while (p != null) { if (p.equalsName(name)) { return p; } p = p.next; } return null; }. ### Assistant:", "ground_truth": "Lookup for named parameter.", "predict": "Find the named parameter by name. @param name the name of the named parameter @return the named parameter or null if not found"}
{"ID": 908, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String alias(final String target) { return StringPool.LEFT_CHEV.concat(target).concat(StringPool.RIGHT_CHEV); }. ### Assistant:", "ground_truth": "Creates alias.", "predict": "Alias the given target. @param target the target to alias. @return the aliased target."}
{"ID": 909, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected boolean validateAction(final String... profiles) { prepareValidator(); vtor.useProfiles(profiles); vtor.validate(this); vtor.resetProfiles(); List<Violation> violations = vtor.getViolations(); return violations == null; }. ### Assistant:", "ground_truth": "Validates action. Profiles are reset after the invocation.\n@return <code>true</code> if validation is successful, otherwise returns <code>false</code>", "predict": "Validates the action. @param profiles profiles to use for validation @return true if the validation was successful, false otherwise"}
{"ID": 910, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void addViolation(final String name, final Object invalidValue) { prepareValidator(); vtor.addViolation(new Violation(name, this, invalidValue)); }. ### Assistant:", "ground_truth": "Adds action violation.", "predict": "Adds a violation to the current object. @param name the name of the violation @param invalidValue the invalid value"}
{"ID": 911, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public RawData as(final String mimeOrExtension) { if (mimeOrExtension.contains(StringPool.SLASH)) { this.mimeType = mimeOrExtension; } else { this.mimeType = MimeTypes.getMimeType(mimeOrExtension); } return this; }. ### Assistant:", "ground_truth": "Defines mime type by providing real mime type or just extension!", "predict": "Set the mimeType based on the extension. If the extension contains a slash, it will be used as the mimeType. Otherwise, the extension will be used as the mimeType. @param mimeOrExtension the mimeType or extension to use. @return this RawData object."}
{"ID": 912, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public RawData downloadableAs(final String downloadFileName) { this.downloadFileName = downloadFileName; this.mimeType = MimeTypes.getMimeType(FileNameUtil.getExtension(downloadFileName)); return this; }. ### Assistant:", "ground_truth": "Defines download file name and mime type from the name extension.", "predict": "Specify download file name. @param downloadFileName download file name. @return this object."}
{"ID": 913, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected T setTarget(final InputStream target) { assertTargetIsNotDefined(); targetInputStream = target; targetClass = null; targetClassName = null; return _this(); }. ### Assistant:", "ground_truth": "Defines class input stream as a target.", "predict": "Sets the target of the deserialization. The target is an InputStream. The targetInputStream is closed after the deserialization. The targetInputStream is closed after the deserialization. The targetInputStream is closed after the deserialization. The targetInputStream is closed after the deserialization. The targetInputStream is closed after the deserialization. The targetInputStream is closed after the deserialization. The targetInputStream is closed after the deserialization. The targetInputStream is closed after the deserialization. The targetInputStream is closed after the deserialization. The targetInputStream is closed after the deserialization. The targetInputStream is closed after the deserialization. The targetInputStream is closed after the deserialization. The targetInputStream is closed after the deserialization. The targetInputStream is closed after the deserialization. The targetInputStream is closed after the deserialization. The targetInputStream is closed after the deserialization. The targetInputStream is closed after the deserialization. The targetInputStream is closed after the deserialization. The"}
{"ID": 914, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected T setTarget(final String targetName) { assertTargetIsNotDefined(); try { targetInputStream = ClassLoaderUtil.getClassAsStream(targetName); if (targetInputStream == null) { throw new ProxettaException(\"Target class not found: \" + targetName); } targetClassName = targetName; targetClass = null; } catch (IOException ioex) { StreamUtil.close(targetInputStream); throw new ProxettaException(\"Unable to get stream class name: \" + targetName, ioex); } return _this(); }. ### Assistant:", "ground_truth": "Defines class name as a target.\nClass will not be loaded by classloader!", "predict": "Set the target class name. @param targetName the target class name. @return the current instance."}
{"ID": 915, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public T setTarget(final Class target) { assertTargetIsNotDefined(); try { targetInputStream = ClassLoaderUtil.getClassAsStream(target); if (targetInputStream == null) { throw new ProxettaException(\"Target class not found: \" + target.getName()); } targetClass = target; targetClassName = target.getName(); } catch (IOException ioex) { StreamUtil.close(targetInputStream); throw new ProxettaException(\"Unable to stream class: \" + target.getName(), ioex); } return _this(); }. ### Assistant:", "ground_truth": "Defines class as a target.", "predict": "Set the target class. @param target the target class @return the current instance of the proxy"}
{"ID": 916, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void process() { if (targetInputStream == null) { throw new ProxettaException(\"Target missing: \" + targetClassName); } // create class reader final ClassReader classReader; try { classReader = new ClassReader(targetInputStream); } catch (IOException ioex) { throw new ProxettaException(\"Error reading class input stream\", ioex); } // reads information final TargetClassInfoReader targetClassInfoReader = new TargetClassInfoReader(proxetta.getClassLoader()); classReader.accept(targetClassInfoReader, 0); this.destClassWriter = new ClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES); // create proxy if (log.isDebugEnabled()) { log.debug(\"processing: \" + classReader.getClassName()); } WorkData wd = process(classReader, targetClassInfoReader); // store important data proxyApplied = wd.proxyApplied; proxyClassName = wd.thisReference.replace('/', '.'); }. ### Assistant:", "ground_truth": "Reads the target and creates destination class.", "predict": "Process the class."}
{"ID": 917, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public byte[] create() { process(); byte[] result = toByteArray(); dumpClassInDebugFolder(result); if ((!proxetta.isForced()) && (!isProxyApplied())) { if (log.isDebugEnabled()) { log.debug(\"Proxy not applied: \" + StringUtil.toSafeString(targetClassName)); } return null; } if (log.isDebugEnabled()) { log.debug(\"Proxy created \" + StringUtil.toSafeString(targetClassName)); } return result; }. ### Assistant:", "ground_truth": "Returns byte array of created class.", "predict": "Create the proxy. @return The byte array representing the proxy."}
{"ID": 918, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Class define() { process(); if ((!proxetta.isForced()) && (!isProxyApplied())) { if (log.isDebugEnabled()) { log.debug(\"Proxy not applied: \" + StringUtil.toSafeString(targetClassName)); } if (targetClass != null) { return targetClass; } if (targetClassName != null) { try { return ClassLoaderUtil.loadClass(targetClassName); } catch (ClassNotFoundException cnfex) { throw new ProxettaException(cnfex); } } } if (log.isDebugEnabled()) { log.debug(\"Proxy created: \" + StringUtil.toSafeString(targetClassName)); } try { ClassLoader classLoader = proxetta.getClassLoader(); if (classLoader == null) { classLoader = ClassLoaderUtil.getDefaultClassLoader(); if ((classLoader == null) && (targetClass != null)) { classLoader = targetClass.getClassLoader(); } } final byte[] bytes = toByteArray(); dumpClassInDebugFolder(bytes); return DefineClass.of(getProxyClassName(), bytes, classLoader); } catch (Exception ex) { throw new ProxettaException(\"Class definition failed\", ex); } }. ### Assistant:", "ground_truth": "Defines class.", "predict": "Define the class. @return the class"}
{"ID": 919, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Object newInstance() { Class type = define(); try { return ClassUtil.newInstance(type); } catch (Exception ex) { throw new ProxettaException(\"Invalid Proxetta class\", ex); } }. ### Assistant:", "ground_truth": "Creates new instance of created class.\nAssumes default no-arg constructor.", "predict": "Create a new instance of the proxetta class. @return the new instance of the proxetta class."}
{"ID": 920, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void dumpClassInDebugFolder(final byte[] bytes) { File debugFolder = proxetta.getDebugFolder(); if (debugFolder == null) { return; } if (!debugFolder.exists() || !debugFolder.isDirectory()) { log.warn(\"Invalid debug folder: \" + debugFolder); } String fileName = proxyClassName; if (fileName == null) { fileName = \"proxetta-\" + System.currentTimeMillis(); } fileName += \".class\"; File file = new File(debugFolder, fileName); try { FileUtil.writeBytes(file, bytes); } catch (IOException ioex) { log.warn(\"Error writing class as \" + file, ioex); } }. ### Assistant:", "ground_truth": "Writes created class content to output folder for debugging purposes.", "predict": "Dump the bytecode of the class to a file in the debug folder. @param bytes the bytecode of the class."}
{"ID": 921, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public T from(final String personalName, final String from) { return from(new EmailAddress(personalName, from)); }. ### Assistant:", "ground_truth": "Sets the FROM address by providing personal name and address.\n\n@param personalName personal name.\n@param from         email address.\n@return this\n@see #from(EmailAddress)", "predict": "Create a new EmailAddress from a personalName and a from. @param personalName the personalName @param from the from @return the T"}
{"ID": 922, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public T to(final EmailAddress to) { this.to = ArraysUtil.append(this.to, to); return _this(); }. ### Assistant:", "ground_truth": "Appends TO address.\n\n@param to {@link EmailAddress} to add.\n@return this", "predict": "Adds an email address to the recipients. @param to Email address to add. @return The builder."}
{"ID": 923, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public T to(final String personalName, final String to) { return to(new EmailAddress(personalName, to)); }. ### Assistant:", "ground_truth": "Appends TO address by personal name and email address.\n\n@param personalName personal name.\n@param to           email address.\n@return this\n@see #to(EmailAddress)", "predict": "Create a new EmailAddress instance from the given personalName and to fields. @param personalName the personal name of the email address @param to the email address to @return the created EmailAddress instance"}
{"ID": 924, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public T replyTo(final EmailAddress... replyTo) { this.replyTo = ArraysUtil.join(this.replyTo, valueOrEmptyArray(replyTo)); return _this(); }. ### Assistant:", "ground_truth": "Appends REPLY-TO addresses.\n\n@param replyTo vararg of {@link EmailAddress}es to set.\n@return this", "predict": "Reply-to email addresses. @param replyTo Email addresses to reply to. @return This builder."}
{"ID": 925, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public T cc(final EmailAddress... ccs) { this.cc = ArraysUtil.join(this.cc, valueOrEmptyArray(ccs)); return _this(); }. ### Assistant:", "ground_truth": "Appends CC addresses.\n\n@param ccs vararg of {@link EmailAddress}es to set.\n@return this", "predict": "Adds one or more recipients to the carbon copy (cc) field. @param ccs The email addresses to add to the cc field. @return The builder object."}
{"ID": 926, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public T textMessage(final String text, final String encoding) { return message(new EmailMessage(text, MimeTypes.MIME_TEXT_PLAIN, encoding)); }. ### Assistant:", "ground_truth": "Adds plain message text.\n\n@param text     The text to add as a {@link String}.\n@param encoding The encoding as a {@link String}.\n@return this\n@see #message(EmailMessage)", "predict": "Send a plain text message. @param text the plain text message @param encoding the encoding of the plain text message @return the message object"}
{"ID": 927, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public T htmlMessage(final String html, final String encoding) { return message(new EmailMessage(html, MimeTypes.MIME_TEXT_HTML, encoding)); }. ### Assistant:", "ground_truth": "Adds HTML message.\n\n@param html     The HTML to add as a {@link String}.\n@param encoding The encoding as a {@link String}.\n@return this\n@see #message(EmailMessage)", "predict": "Send an HTML message. @param html The HTML content of the message. @param encoding The encoding of the HTML content. @return The created email message."}
{"ID": 928, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public T header(final String name, final String value) { headers.put(name, value); return _this(); }. ### Assistant:", "ground_truth": "Sets header value.\n\n@param name  The name of the header.\n@param value The value of the header.\n@return this", "predict": "Adds a header to the response. @param name the header name @param value the header value @return the builder instance @since 0.9.0"}
{"ID": 929, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String get(final String name, final String defaultValue) { Objects.requireNonNull(name); String value = null; try { if (System.getSecurityManager() == null) { value = System.getProperty(name); } else { value = AccessController.doPrivileged((PrivilegedAction<String>) () -> System.getProperty(name)); } } catch (Exception ignore) { } if (value == null) { return defaultValue; } return value; }. ### Assistant:", "ground_truth": "Returns system property. If key is not available, returns the default value.", "predict": "Get the value of a system property. If the property is not found, the default value is returned. @param name the name of the property @param defaultValue the default value to return if the property is not found @return the property value or the default value if the property is not found"}
{"ID": 930, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean getBoolean(final String name, final boolean defaultValue) { String value = get(name); if (value == null) { return defaultValue; } value = value.trim().toLowerCase(); switch (value) { case \"true\" : case \"yes\" : case \"1\" : case \"on\" : return true; case \"false\": case \"no\" : case \"0\" : case \"off\" : return false; default: return defaultValue; } }. ### Assistant:", "ground_truth": "Returns system property as boolean.", "predict": "Get boolean value from properties. @param name property name @param defaultValue default value @return boolean value"}
{"ID": 931, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static long getInt(final String name, final int defaultValue) { String value = get(name); if (value == null) { return defaultValue; } value = value.trim().toLowerCase(); try { return Integer.parseInt(value); } catch (NumberFormatException nfex) { return defaultValue; } }. ### Assistant:", "ground_truth": "Returns system property as an int.", "predict": "Get an int value from the properties file. If the property is not found, the default value is returned. @param name the property name @param defaultValue the default value @return the value of the property or the default value if the property is not found"}
{"ID": 932, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static long getLong(final String name, final long defaultValue) { String value = get(name); if (value == null) { return defaultValue; } value = value.trim().toLowerCase(); try { return Long.parseLong(value); } catch (NumberFormatException nfex) { return defaultValue; } }. ### Assistant:", "ground_truth": "Returns system property as a long.", "predict": "Get a long value from a configuration. If the value is not found, it defaults to the given default value. @param name the configuration name @param defaultValue the default value to return if the configuration is not found @return the value or the default value if the configuration is not found"}
{"ID": 933, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: MethodParameter[] getResolvedParameters() { if (paramExtractor == null) { return MethodParameter.EMPTY_ARRAY; } if (!paramExtractor.debugInfoPresent) { throw new ParamoException(\"Parameter names not available for method: \" + declaringClass.getName() + '#' + methodName); } return paramExtractor.getMethodParameters(); }. ### Assistant:", "ground_truth": "Returns method parameters once when method is parsed.\nIf method has no parameters, an empty array is returned.", "predict": "Returns the resolved parameters."}
{"ID": 934, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected int serializeKeyValue(final JsonContext jsonContext, final Path currentPath, final Object key, final Object value, int count) { if ((value == null) && jsonContext.isExcludeNulls()) { return count; } if (key != null) { currentPath.push(key.toString()); } else { currentPath.push(StringPool.NULL); } // check if we should include the field boolean include = true; if (value != null) { // + all collections are not serialized by default include = jsonContext.matchIgnoredPropertyTypes(value.getClass(), false, include); // + path queries: excludes/includes include = jsonContext.matchPathToQueries(include); } // done if (!include) { currentPath.pop(); return count; } if (key == null) { jsonContext.pushName(null, count > 0); } else { jsonContext.pushName(key.toString(), count > 0); } jsonContext.serialize(value); if (jsonContext.isNamePopped()) { count++; } currentPath.pop(); return count; }. ### Assistant:", "ground_truth": "Serializes key and a value.", "predict": "Serializes the key value pair. @param jsonContext the json context @param currentPath the current path @param key the key @param value the value @param count the count @return the serialized count"}
{"ID": 935, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String lookupAlias(final String alias) { String value = actionsManager.lookupPathAlias(alias); if (value == null) { ActionRuntime cfg = actionsManager.lookup(alias); if (cfg != null) { value = cfg.getActionPath(); } } return value; }. ### Assistant:", "ground_truth": "Lookups value as an alias and, if not found, as a default alias.", "predict": "Lookup the alias to its corresponding path. @param alias the alias to lookup @return the corresponding path"}
{"ID": 936, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String resolveAlias(final String value) { final StringBuilder result = new StringBuilder(value.length()); int i = 0; int len = value.length(); while (i < len) { int ndx = value.indexOf('<', i); if (ndx == -1) { // alias markers not found if (i == 0) { // try whole string as an alias String alias = lookupAlias(value); return (alias != null ? alias : value); } else { result.append(value.substring(i)); } break; } // alias marked found result.append(value.substring(i, ndx)); ndx++; int ndx2 = value.indexOf('>', ndx); String aliasName = (ndx2 == -1 ? value.substring(ndx) : value.substring(ndx, ndx2)); // process alias String alias = lookupAlias(aliasName); if (alias != null) { result.append(alias); } else { // alias not found if (log.isWarnEnabled()) { log.warn(\"Alias not found: \" + aliasName); } } i = ndx2 + 1; } // fix prefix '//' - may happened when aliases are used i = 0; len = result.length(); while (i < len) { if (result.charAt(i) != '/') { break; } i++; } if (i > 1) { return result.substring(i - 1, len); } return result.toString(); }. ### Assistant:", "ground_truth": "Returns resolved alias result value or passed on, if alias doesn't exist.", "predict": "Resolve alias. @param value the value @return the string"}
{"ID": 937, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ResultPath resolveResultPath(String path, String value) { boolean absolutePath = false; if (value != null) { // [*] resolve alias in value value = resolveAlias(value); // [*] absolute paths if (StringUtil.startsWithChar(value, '/')) { absolutePath = true; int dotNdx = value.indexOf(\"..\"); if (dotNdx != -1) { path = value.substring(0, dotNdx); value = value.substring(dotNdx + 2); } else { path = value; value = null; } } else { // [*] resolve # in value and path int i = 0; while (i < value.length()) { if (value.charAt(i) != '#') { break; } int dotNdx = MadvocUtil.lastIndexOfSlashDot(path); if (dotNdx != -1) { // dot found path = path.substring(0, dotNdx); } i++; } if (i > 0) { // remove # from value value = value.substring(i); // [*] update path and value if (StringUtil.startsWithChar(value, '.')) { value = value.substring(1); } else { int dotNdx = value.indexOf(\"..\"); if (dotNdx != -1) { path += '.' + value.substring(0, dotNdx); value = value.substring(dotNdx + 2); } else { if (value.length() > 0) { if (StringUtil.endsWithChar(path, '/')) { path += value; } else { path += '.' + value; } } value = null; } } } } } if (!absolutePath) { if (resultPathPrefix != null) { path = resultPathPrefix + path; } } return new ResultPath(path, value); }. ### Assistant:", "ground_truth": "Resolves result path.", "predict": "Resolve the given path and value. The path is resolved relative to the resultPathPrefix. The value is resolved relative to the path. If the path is absolute, it is returned as-is. If the path is relative, it is resolved relative to the resultPathPrefix. If the value is absolute, it is returned as-is. If the value is relative, it is resolved relative to the path. If the path is ambiguous (e.g. two paths have the same name), the first one is returned. If the value is ambiguous, the first one is returned. If the path is ambiguous and the value is ambiguous, the first one is returned. If the path is ambiguous and the value is ambiguous, the first one is returned. If the path is ambiguous and the value is ambiguous, the first one is returned. If the path is ambiguous and the value is ambiguous, the first one is returned. If the path is ambiguous and the value is ambiguous, the first one is returned."}
{"ID": 938, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String resolveResultPathString(final String path, final String value) { final ResultPath resultPath = resolveResultPath(path, value); final String result = resultPath.pathValue(); return resolveAlias(result); }. ### Assistant:", "ground_truth": "Resolves result path as a string, when parts are not important\nand when only full string matters. Additional alias resolving\non full path is done.", "predict": "Resolve the given path to a string. @param path the path to resolve. @param value the value to resolve the path against. @return the resolved path."}
{"ID": 939, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int lastIndexOfSlashDot(final String str) { int slashNdx = str.lastIndexOf('/'); int dotNdx = StringUtil.lastIndexOf(str, '.', str.length(), slashNdx); if (dotNdx == -1) { if (slashNdx == -1) { return -1; } slashNdx++; if (slashNdx < str.length() - 1) { dotNdx = slashNdx; } else { dotNdx = -1; } } return dotNdx; }. ### Assistant:", "ground_truth": "Locates last dot after the last slash or just slash.", "predict": "Finds the last dot in the string. If there is no dot, returns -1. @param str the string to search in @return the last dot in the string, or -1 if there is none"}
{"ID": 940, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int lastIndexOfDotAfterSlash(final String str) { int slashNdx = str.lastIndexOf('/'); slashNdx++; return StringUtil.lastIndexOf(str, '.', str.length(), slashNdx); }. ### Assistant:", "ground_truth": "Locates last index of dot after the optional last slash.", "predict": "Finds the last dot after slash in a string. @param str the string to search in @return the index of the last dot after slash in the string, or -1 if not found"}
{"ID": 941, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int indexOfDotAfterSlash(final String str) { int slashNdx = str.lastIndexOf('/'); if (slashNdx == -1) { slashNdx = 0; } return str.indexOf('.', slashNdx); }. ### Assistant:", "ground_truth": "Locates first dot after the last slash.", "predict": "Finds index of dot after slash. @param str string to search @return dot index after slash or -1 if not found"}
{"ID": 942, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String stripLastCamelWord(String name) { int ndx = name.length() - 1; while (ndx >= 0) { if (CharUtil.isUppercaseAlpha(name.charAt(ndx))) { break; } ndx--; } if (ndx >= 0) { name = name.substring(0, ndx); } return name; }. ### Assistant:", "ground_truth": "Removes last CamelWord", "predict": "Strip last camel word from string. @param name original string @return camelized string"}
{"ID": 943, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String resolveSchemaName(final Class<?> type, final String defaultSchemaName) { String schemaName = null; final DbTable dbTable = type.getAnnotation(DbTable.class); if (dbTable != null) { schemaName = dbTable.schema().trim(); } if ((schemaName == null) || (schemaName.length() == 0)) { schemaName = defaultSchemaName; } return schemaName; }. ### Assistant:", "ground_truth": "Resolves schema name from a type. Uses default schema name if not specified.", "predict": "Resolve the schema name from the annotations of the class. If no schema is specified, use the default schema. @param type the class to inspect @param defaultSchemaName the default schema name @return the resolved schema name"}
{"ID": 944, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static DbEntityColumnDescriptor resolveColumnDescriptors( final DbEntityDescriptor dbEntityDescriptor, final PropertyDescriptor property, final boolean isAnnotated, final ColumnNamingStrategy columnNamingStrategy) { String columnName = null; boolean isId = false; Class<? extends SqlType> sqlTypeClass = null; // read ID annotation DbId dbId = null; if (property.getFieldDescriptor() != null) { dbId = property.getFieldDescriptor().getField().getAnnotation(DbId.class); } if (dbId == null && property.getReadMethodDescriptor() != null) { dbId = property.getReadMethodDescriptor().getMethod().getAnnotation(DbId.class); } if (dbId == null && property.getWriteMethodDescriptor() != null) { dbId = property.getWriteMethodDescriptor().getMethod().getAnnotation(DbId.class); } if (dbId != null) { columnName = dbId.value().trim(); sqlTypeClass = dbId.sqlType(); isId = true; } else { DbColumn dbColumn = null; if (property.getFieldDescriptor() != null) { dbColumn = property.getFieldDescriptor().getField().getAnnotation(DbColumn.class); } if (dbColumn == null && property.getReadMethodDescriptor() != null) { dbColumn = property.getReadMethodDescriptor().getMethod().getAnnotation(DbColumn.class); } if (dbColumn == null && property.getWriteMethodDescriptor() != null) { dbColumn = property.getWriteMethodDescriptor().getMethod().getAnnotation(DbColumn.class); } if (dbColumn != null) { columnName = dbColumn.value().trim(); sqlTypeClass = dbColumn.sqlType(); } else { if (isAnnotated) { return null; } } } if (StringUtil.isEmpty(columnName)) { // default annotation value columnName = columnNamingStrategy.convertPropertyNameToColumnName(property.getName()); } else { if (!columnNamingStrategy.isStrictAnnotationNames()) { columnName = columnNamingStrategy.applyToColumnName(columnName); } } if (sqlTypeClass == SqlType.class) { sqlTypeClass = null; } return new DbEntityColumnDescriptor( dbEntityDescriptor, quoteIfRequired(columnName, columnNamingStrategy.isAlwaysQuoteNames(), columnNamingStrategy.getQuoteChar()), property.getName(), property.getType(), isId, sqlTypeClass); }. ### Assistant:", "ground_truth": "Resolves column descriptor from property. If property is annotated value will be read\nfrom annotation. If property is not annotated, then property will be ignored\nif entity is annotated. Otherwise, column name is generated from the property name.", "predict": "Resolve column descriptors for a given property. @param dbEntityDescriptor Entity descriptor @param property Property descriptor @param isAnnotated Whether the property is annotated with DbId @param columnNamingStrategy Column naming strategy @return Column descriptor or null if no column descriptor can be resolved"}
{"ID": 945, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void init(final long[] key, final long[] tweak) { final int newNw = key.length; // only create new arrays if the value of N{w} changes (different key size) if (nw != newNw) { nw = newNw; switch (nw) { case WORDS_4: pi = PI4; rpi = RPI4; r = R4; break; case WORDS_8: pi = PI8; rpi = RPI8; r = R8; break; case WORDS_16: pi = PI16; rpi = RPI16; r = R16; break; default: throw new RuntimeException(\"Invalid threefish key\"); } this.k = new long[nw + 1]; // instantiation of these fields here for performance reasons vd = new long[nw]; // v is the intermediate value v{d} at round d ed = new long[nw]; // ed is the value of e{d} at round d fd = new long[nw]; // fd is the value of f{d} at round d ksd = new long[nw]; // ksd is the value of k{s} at round d } System.arraycopy(key, 0, this.k, 0, key.length); long knw = EXTENDED_KEY_SCHEDULE_CONST; for (int i = 0; i < nw; i++) { knw ^= this.k[i]; } this.k[nw] = knw; // set tweak values t[0] = tweak[0]; t[1] = tweak[1]; t[2] = t[0] ^ t[1]; }. ### Assistant:", "ground_truth": "Initialize the cipher using the key and the tweak value.\n\n@param key the Threefish key to use\n@param tweak the tweak values to use", "predict": "Initialization of the Threefish algorithm @param key the key array @param tweak the tweak array"}
{"ID": 946, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void mix(final int j, final int d) { y[0] = x[0] + x[1]; final long rotl = r[d % DEPTH_OF_D_IN_R][j]; // java left rotation for a long y[1] = (x[1] << rotl) | (x[1] >>> (Long.SIZE - rotl)); y[1] ^= y[0]; }. ### Assistant:", "ground_truth": "Implementation of the MIX function.\n\n@param j the index in the rotation constants\n@param d the round", "predict": "Mix two values in the state. @param j index of the first value @param d index of the second value"}
{"ID": 947, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void demix(final int j, final int d) { y[1] ^= y[0]; final long rotr = r[d % DEPTH_OF_D_IN_R][j]; // NOTE performance: darn, creation on stack! // right shift x[1] = (y[1] << (Long.SIZE - rotr)) | (y[1] >>> rotr); x[0] = y[0] - x[1]; }. ### Assistant:", "ground_truth": "Implementation of the un-MIX function.", "predict": "Demix operation."}
{"ID": 948, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void keySchedule(final int s) { for (int i = 0; i < nw; i++) { // just put in the main key first ksd[i] = k[(s + i) % (nw + 1)]; // don't add anything for i = 0,...,Nw - 4 if (i == nw - 3) { // second to last ksd[i] += t[s % TWEAK_VALUES]; } else if (i == nw - 2) { // first to last ksd[i] += t[(s + 1) % TWEAK_VALUES]; } else if (i == nw - 1) { // last ksd[i] += s; } } }. ### Assistant:", "ground_truth": "Creates the subkeys.\n\n@param s the value of the round devided by 4", "predict": "Compute the key schedule for the given permutation."}
{"ID": 949, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void init(final String keyMessage, final long tweak1, final long tweak2) { long[] tweak = new long[] {tweak1, tweak2}; byte[] key = new byte[blockSize / Byte.SIZE]; byte[] keyData = StringUtil.getBytes(keyMessage); System.arraycopy(keyData, 0, key, 0, key.length < keyData.length ? key.length : keyData.length); init(bytesToLongs(key), tweak); }. ### Assistant:", "ground_truth": "Initializes cipher in a simple way.", "predict": "Initialize the cipher with a key message and tweaks. The key message is assumed to be a hexadecimal string. The tweaks are assumed to be longs. @param keyMessage the key message @param tweak1 the tweak1 @param tweak2 the tweak2"}
{"ID": 950, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public byte[] encryptBlock(final byte[] content, final int offset) { long[] contentBlock = bytesToLongs(content, offset, blockSizeInBytes); long[] encryptedBlock = new long[blockSize / Long.SIZE]; blockEncrypt(contentBlock, encryptedBlock); return longsToBytes(encryptedBlock); }. ### Assistant:", "ground_truth": "Encrypts a block.", "predict": "Encrypt the given block of data. @param content the data to encrypt. @param offset the offset of the data in the array. @return the encrypted data."}
{"ID": 951, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected static long[] bytesToLongs(final byte[] ba, final int offset, final int size) { long[] result = new long[size >> 3]; int i8 = offset; for (int i = 0; i < result.length; i++) { result[i] = Bits.getLong(ba, i8); i8 += 8; } return result; }. ### Assistant:", "ground_truth": "Converts segment of byte array into long array.", "predict": "Convert a byte array to a long array. The byte array is assumed to be little-endian. @param ba the byte array @param offset the offset @param size the size @return the long array"}
{"ID": 952, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static String removeAnyBounding(final char s, final char e, final String str) { if (str == null || str.length() < 2) { return str; } if (str.startsWith(String.valueOf(s)) && str.endsWith(String.valueOf(e))) { return str.substring(1, str.length() - 1); } return str; }. ### Assistant:", "ground_truth": "If the string starts and ends with start and end char, remove them,\notherwise return the string as it was passed in.", "predict": "Remove any bounding characters. @param s the first character @param e the last character @param str the string @return the modified string"}
{"ID": 953, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String path() { if (methref != null) { final String methodName = methref.ref(); return target.getName() + '#' + methodName; } return path; }. ### Assistant:", "ground_truth": "Returns path value.", "predict": "The path of the method reference. @return the path of the method reference."}
{"ID": 954, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static File zlib(final File file) throws IOException { if (file.isDirectory()) { throw new IOException(\"Can't zlib folder\"); } FileInputStream fis = new FileInputStream(file); Deflater deflater = new Deflater(Deflater.BEST_COMPRESSION); String zlibFileName = file.getAbsolutePath() + ZLIB_EXT; DeflaterOutputStream dos = new DeflaterOutputStream(new FileOutputStream(zlibFileName), deflater); try { StreamUtil.copy(fis, dos); } finally { StreamUtil.close(dos); StreamUtil.close(fis); } return new File(zlibFileName); }. ### Assistant:", "ground_truth": "Compresses a file into zlib archive.", "predict": "Zlib compress file. @param file File to compress. @return Compressed file. @throws IOException If failed to compress file."}
{"ID": 955, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static File gzip(final File file) throws IOException { if (file.isDirectory()) { throw new IOException(\"Can't gzip folder\"); } FileInputStream fis = new FileInputStream(file); String gzipName = file.getAbsolutePath() + GZIP_EXT; GZIPOutputStream gzos = new GZIPOutputStream(new FileOutputStream(gzipName)); try { StreamUtil.copy(fis, gzos); } finally { StreamUtil.close(gzos); StreamUtil.close(fis); } return new File(gzipName); }. ### Assistant:", "ground_truth": "Compresses a file into gzip archive.", "predict": "Gzip a file. @param file the file to gzip. @return the gzipped file. @throws IOException if an error occurs."}
{"ID": 956, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static File ungzip(final File file) throws IOException { String outFileName = FileNameUtil.removeExtension(file.getAbsolutePath()); File out = new File(outFileName); out.createNewFile(); FileOutputStream fos = new FileOutputStream(out); GZIPInputStream gzis = new GZIPInputStream(new FileInputStream(file)); try { StreamUtil.copy(gzis, fos); } finally { StreamUtil.close(fos); StreamUtil.close(gzis); } return out; }. ### Assistant:", "ground_truth": "Decompress gzip archive.", "predict": "ungzip a file. @param file the file to ungzip. @return the ungzipped file. @throws IOException if an error occurs."}
{"ID": 957, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static List<String> listZip(final File zipFile) throws IOException { List<String> entries = new ArrayList<>(); ZipFile zip = new ZipFile(zipFile); Enumeration zipEntries = zip.entries(); while (zipEntries.hasMoreElements()) { ZipEntry entry = (ZipEntry) zipEntries.nextElement(); String entryName = entry.getName(); entries.add(entryName); } return Collections.unmodifiableList(entries); }. ### Assistant:", "ground_truth": "Lists zip content.", "predict": "Returns a list of the entries in a zip file. @param zipFile the zip file to list the entries from @return a list of the entries in the zip file @throws IOException if the zip file cannot be opened or read"}
{"ID": 958, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void unzip(final String zipFile, final String destDir, final String... patterns) throws IOException { unzip(new File(zipFile), new File(destDir), patterns); }. ### Assistant:", "ground_truth": "Extracts zip file content to the target directory.\n@see #unzip(java.io.File, java.io.File, String...)", "predict": "Unzips a zip file into a directory. The zip file is assumed to be located in the classpath. The patterns are used to select which files to unzip. The files are assumed to be located in the zip file. @param zipFile The zip file to unzip. @param destDir The directory where the files should be unzipped. @param patterns The patterns to select which files to unzip. @throws IOException If an error occurs while unzipping."}
{"ID": 959, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void addToZip(final ZipOutputStream zos, final File file, String path, final String comment, final boolean recursive) throws IOException { if (!file.exists()) { throw new FileNotFoundException(file.toString()); } if (path == null) { path = file.getName(); } while (path.length() != 0 && path.charAt(0) == '/') { path = path.substring(1); } boolean isDir = file.isDirectory(); if (isDir) { // add folder record if (!StringUtil.endsWithChar(path, '/')) { path += '/'; } } ZipEntry zipEntry = new ZipEntry(path); zipEntry.setTime(file.lastModified()); if (comment != null) { zipEntry.setComment(comment); } if (isDir) { zipEntry.setSize(0); zipEntry.setCrc(0); } zos.putNextEntry(zipEntry); if (!isDir) { InputStream is = new FileInputStream(file); try { StreamUtil.copy(is, zos); } finally { StreamUtil.close(is); } } zos.closeEntry(); // continue adding if (recursive && file.isDirectory()) { boolean noRelativePath = StringUtil.isEmpty(path); final File[] children = file.listFiles(); if (children != null && children.length != 0) { for (File child : children) { String childRelativePath = (noRelativePath ? StringPool.EMPTY : path) + child.getName(); addToZip(zos, child, childRelativePath, comment, recursive); } } } }. ### Assistant:", "ground_truth": "Adds single entry to ZIP output stream.\n\n@param zos zip output stream\n@param file file or folder to add\n@param path relative path of file entry; if <code>null</code> files name will be used instead\n@param comment optional comment\n@param recursive when set to <code>true</code> content of added folders will be added, too", "predict": "Add file to zip. @param zos zip output stream @param file file to zip @param path path of file in zip @param comment comment of file in zip @param recursive whether zip file recursively @throws IOException if failed to zip file"}
{"ID": 960, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void addToZip(final ZipOutputStream zos, final byte[] content, String path, final String comment) throws IOException { while (path.length() != 0 && path.charAt(0) == '/') { path = path.substring(1); } if (StringUtil.endsWithChar(path, '/')) { path = path.substring(0, path.length() - 1); } ZipEntry zipEntry = new ZipEntry(path); zipEntry.setTime(System.currentTimeMillis()); if (comment != null) { zipEntry.setComment(comment); } zos.putNextEntry(zipEntry); InputStream is = new ByteArrayInputStream(content); try { StreamUtil.copy(is, zos); } finally { StreamUtil.close(is); } zos.closeEntry(); }. ### Assistant:", "ground_truth": "Adds byte content into the zip as a file.", "predict": "Add a file to zip. @param zos ZipOutputStream to write to. @param content File content. @param path Path of the file. @param comment Comment of the file. @throws IOException If failed to write."}
{"ID": 961, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public FieldDescriptor getFieldDescriptor(final String name, final boolean declared) { final FieldDescriptor fieldDescriptor = getFields().getFieldDescriptor(name); if (fieldDescriptor != null) { if (!fieldDescriptor.matchDeclared(declared)) { return null; } } return fieldDescriptor; }. ### Assistant:", "ground_truth": "Returns field descriptor.", "predict": "Returns the FieldDescriptor for the given name. Returns null if the FieldDescriptor is not found."}
{"ID": 962, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public PropertyDescriptor getPropertyDescriptor(final String name, final boolean declared) { PropertyDescriptor propertyDescriptor = getProperties().getPropertyDescriptor(name); if ((propertyDescriptor != null) && propertyDescriptor.matchDeclared(declared)) { return propertyDescriptor; } return null; }. ### Assistant:", "ground_truth": "Returns property descriptor. Declared flag is matched on both read and write\nmethods.", "predict": "Find a PropertyDescriptor for the given name. If declared is true, only consider declared properties. If declared is false, consider both declared and non-declared properties. @param name the name of the property @param declared whether to consider declared properties only @return the PropertyDescriptor for the given name, or null if none found"}
{"ID": 963, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void setRequestBundleName(final ServletRequest request, final String bundleName) { if (log.isDebugEnabled()) { log.debug(\"Bundle name for this request: \" + bundleName); } request.setAttribute(REQUEST_BUNDLE_NAME_ATTR, bundleName); }. ### Assistant:", "ground_truth": "Sets bundle name for provided servlet request.", "predict": "Sets the bundle name for this request. This is used to identify the bundle that should be used to resolve the request. @param request the request @param bundleName the bundle name"}
{"ID": 964, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void setSessionLocale(final HttpSession session, final String localeCode) { if (log.isDebugEnabled()) { log.debug(\"Locale stored to session: \" + localeCode); } Locale locale = Locale.forLanguageTag(localeCode); session.setAttribute(SESSION_LOCALE_ATTR, locale); }. ### Assistant:", "ground_truth": "Saves Locale to HTTP session.", "predict": "Sets the locale for the current session. The locale is stored in the session under the key SESSION\\_LOCALE\\_ATTR. @param session HttpSession @param localeCode Locale code (e.g. \"en\", \"fr\", \"de_DE\", etc.)"}
{"ID": 965, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Locale getSessionLocale(final HttpSession session) { Locale locale = (Locale) session.getAttribute(SESSION_LOCALE_ATTR); return locale == null ? MESSAGE_RESOLVER.getFallbackLocale() : locale; }. ### Assistant:", "ground_truth": "Returns current locale from session.\ns", "predict": "Returns the Locale of the current session. If no Locale is set, the fallback locale is returned. @param session the HttpSession @return the Locale of the current session."}
{"ID": 966, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String[] filterParametersForBeanName(String beanName, final boolean resolveReferenceParams) { beanName = beanName + '.'; List<String> list = new ArrayList<>(); for (Map.Entry<String, Object> entry : params.entrySet()) { String key = entry.getKey(); if (!key.startsWith(beanName)) { continue; } list.add(key); if (!resolveReferenceParams) { continue; } // resolve all references String value = PropertiesUtil.resolveProperty(params, key); entry.setValue(value); } if (list.isEmpty()) { return StringPool.EMPTY_ARRAY; } else { return list.toArray(new String[0]); } }. ### Assistant:", "ground_truth": "Returns an array of param keys that belongs to provided bean.\nOptionally resolves the value of returned parameters.", "predict": "Filters parameters for a bean name. @param beanName the bean name to filter for. @param resolveReferenceParams whether to resolve references in the parameters. @return the filtered parameters."}
{"ID": 967, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public PropsEntries profile(final String... profiles) { if (profiles == null) { return this; } for (String profile : profiles) { addProfiles(profile); } return this; }. ### Assistant:", "ground_truth": "Enables profiles to iterate.", "predict": "Adds the profiles to the PropsEntries. @param profiles the profiles to add. @return the updated PropsEntries."}
{"ID": 968, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static long getLongLittleEndian(final byte[] buf, final int offset) { return ((long) buf[offset + 7] << 56) // no mask needed | ((buf[offset + 6] & 0xffL) << 48) | ((buf[offset + 5] & 0xffL) << 40) | ((buf[offset + 4] & 0xffL) << 32) | ((buf[offset + 3] & 0xffL) << 24) | ((buf[offset + 2] & 0xffL) << 16) | ((buf[offset + 1] & 0xffL) << 8) | ((buf[offset] & 0xffL)); // no shift needed }. ### Assistant:", "ground_truth": "Gets a long from a byte buffer in little endian byte order.", "predict": "Get the little-endian long value from the given byte array. @param buf the buffer to read from @param offset the offset to start reading from @return the little-endian long value"}
{"ID": 969, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static byte[] readStream(final InputStream inputStream, final boolean close) throws IOException { if (inputStream == null) { throw new IOException(\"Class not found\"); } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); byte[] data = new byte[INPUT_STREAM_DATA_CHUNK_SIZE]; int bytesRead; while ((bytesRead = inputStream.read(data, 0, data.length)) != -1) { outputStream.write(data, 0, bytesRead); } outputStream.flush(); return outputStream.toByteArray(); } finally { if (close) { inputStream.close(); } } }. ### Assistant:", "ground_truth": "Reads the given input stream and returns its content as a byte array.\n\n@param inputStream an input stream.\n@param close true to close the input stream after reading.\n@return the content of the given input stream.\n@throws IOException if a problem occurs during reading.", "predict": "Reads the stream and returns the data as a byte array. The stream is closed after the data has been read. @param inputStream the stream to read from @param close whether the stream should be closed after reading @return the data as a byte array @throws IOException if an error occurs while reading the stream"}
{"ID": 970, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Label readLabel(final int bytecodeOffset, final Label[] labels) { if (labels[bytecodeOffset] == null) { labels[bytecodeOffset] = new Label(); } return labels[bytecodeOffset]; }. ### Assistant:", "ground_truth": "Returns the label corresponding to the given bytecode offset. The default implementation of\nthis method creates a label for the given offset if it has not been already created.\n\n@param bytecodeOffset a bytecode offset in a method.\n@param labels the already created labels, indexed by their offset. If a label already exists\nfor bytecodeOffset this method must not create a new one. Otherwise it must store the new\nlabel in this array.\n@return a non null Label, which must be equal to labels[bytecodeOffset].", "predict": "Reads a label from the bytecode at the given offset. @param bytecodeOffset index of the instruction in the bytecode. @param labels labels of the method. @return the label corresponding to the given offset."}
{"ID": 971, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private int getTypeAnnotationBytecodeOffset( final int[] typeAnnotationOffsets, final int typeAnnotationIndex) { if (typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets.length || readByte(typeAnnotationOffsets[typeAnnotationIndex]) < TypeReference.INSTANCEOF) { return -1; } return readUnsignedShort(typeAnnotationOffsets[typeAnnotationIndex] + 1); }. ### Assistant:", "ground_truth": "Returns the bytecode offset corresponding to the specified JVMS 'type_annotation' structure, or\n-1 if there is no such type_annotation of if it does not have a bytecode offset.\n\n@param typeAnnotationOffsets the offset of each 'type_annotation' entry in a\nRuntime[In]VisibleTypeAnnotations attribute, or null.\n@param typeAnnotationIndex the index a 'type_annotation' entry in typeAnnotationOffsets.\n@return bytecode offset corresponding to the specified JVMS 'type_annotation' structure, or -1\nif there is no such type_annotation of if it does not have a bytecode offset.", "predict": "Reads the bytecode offset of a type annotation. @param typeAnnotationOffsets the start offset of the type annotations in the class file. @param typeAnnotationIndex the index of the type annotation to be read. @return the bytecode offset of the type annotation or -1 if it does not exist."}
{"ID": 972, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private int readElementValues( final AnnotationVisitor annotationVisitor, final int annotationOffset, final boolean named, final char[] charBuffer) { int currentOffset = annotationOffset; // Read the num_element_value_pairs field (or num_values field for an array_value). int numElementValuePairs = readUnsignedShort(currentOffset); currentOffset += 2; if (named) { // Parse the element_value_pairs array. while (numElementValuePairs-- > 0) { String elementName = readUTF8(currentOffset, charBuffer); currentOffset = readElementValue(annotationVisitor, currentOffset + 2, elementName, charBuffer); } } else { // Parse the array_value array. while (numElementValuePairs-- > 0) { currentOffset = readElementValue(annotationVisitor, currentOffset, /* named = */ null, charBuffer); } } if (annotationVisitor != null) { annotationVisitor.visitEnd(); } return currentOffset; }. ### Assistant:", "ground_truth": "Reads the element values of a JVMS 'annotation' structure and makes the given visitor visit\nthem. This method can also be used to read the values of the JVMS 'array_value' field of an\nannotation's 'element_value'.\n\n@param annotationVisitor the visitor that must visit the values.\n@param annotationOffset the start offset of an 'annotation' structure (excluding its type_index\nfield) or of an 'array_value' structure.\n@param named if the annotation values are named or not. This should be true to parse the values\nof a JVMS 'annotation' structure, and false to parse the JVMS 'array_value' of an\nannotation's element_value.\n@param charBuffer the buffer used to read strings in the constant pool.\n@return the end offset of the JVMS 'annotation' or 'array_value' structure.", "predict": "Reads the element values of an annotation. @param annotationVisitor the visitor to visit the elements to. @param annotationOffset the offset of the annotation in the constant pool. @param named whether the annotation is named or not. @param charBuffer a buffer to store the characters read from the constant pool. @return the offset of the first byte following the element values."}
{"ID": 973, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private int readVerificationTypeInfo( final int verificationTypeInfoOffset, final Object[] frame, final int index, final char[] charBuffer, final Label[] labels) { int currentOffset = verificationTypeInfoOffset; int tag = b[currentOffset++] & 0xFF; switch (tag) { case Frame.ITEM_TOP: frame[index] = Opcodes.TOP; break; case Frame.ITEM_INTEGER: frame[index] = Opcodes.INTEGER; break; case Frame.ITEM_FLOAT: frame[index] = Opcodes.FLOAT; break; case Frame.ITEM_DOUBLE: frame[index] = Opcodes.DOUBLE; break; case Frame.ITEM_LONG: frame[index] = Opcodes.LONG; break; case Frame.ITEM_NULL: frame[index] = Opcodes.NULL; break; case Frame.ITEM_UNINITIALIZED_THIS: frame[index] = Opcodes.UNINITIALIZED_THIS; break; case Frame.ITEM_OBJECT: frame[index] = readClass(currentOffset, charBuffer); currentOffset += 2; break; case Frame.ITEM_UNINITIALIZED: frame[index] = createLabel(readUnsignedShort(currentOffset), labels); currentOffset += 2; break; default: throw new IllegalArgumentException(); } return currentOffset; }. ### Assistant:", "ground_truth": "Reads a JVMS 'verification_type_info' structure and stores it at the given index in the given\narray.\n\n@param verificationTypeInfoOffset the start offset of the 'verification_type_info' structure to\nread.\n@param frame the array where the parsed type must be stored.\n@param index the index in 'frame' where the parsed type must be stored.\n@param charBuffer the buffer used to read strings in the constant pool.\n@param labels the labels of the method currently being parsed, indexed by their offset. If the\nparsed type is an ITEM_Uninitialized, a new label for the corresponding NEW instruction is\nstored in this array if it does not already exist.\n@return the end offset of the JVMS 'verification_type_info' structure.", "predict": "Reads a verification type information. @param verificationTypeInfoOffset the offset of the verification type information. @param frame the operand frame. @param index the index of the item. @param charBuffer a char buffer to store the item. @param labels the labels. @return the offset of the next instruction."}
{"ID": 974, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private int[] readBootstrapMethodsAttribute(final int maxStringLength) { char[] charBuffer = new char[maxStringLength]; int currentAttributeOffset = getFirstAttributeOffset(); int[] currentBootstrapMethodOffsets = null; for (int i = readUnsignedShort(currentAttributeOffset - 2); i > 0; --i) { // Read the attribute_info's attribute_name and attribute_length fields. String attributeName = readUTF8(currentAttributeOffset, charBuffer); int attributeLength = readInt(currentAttributeOffset + 2); currentAttributeOffset += 6; if (Constants.BOOTSTRAP_METHODS.equals(attributeName)) { // Read the num_bootstrap_methods field and create an array of this size. currentBootstrapMethodOffsets = new int[readUnsignedShort(currentAttributeOffset)]; // Compute and store the offset of each 'bootstrap_methods' array field entry. int currentBootstrapMethodOffset = currentAttributeOffset + 2; for (int j = 0; j < currentBootstrapMethodOffsets.length; ++j) { currentBootstrapMethodOffsets[j] = currentBootstrapMethodOffset; // Skip the bootstrap_method_ref and num_bootstrap_arguments fields (2 bytes each), // as well as the bootstrap_arguments array field (of size num_bootstrap_arguments * 2). currentBootstrapMethodOffset += 4 + readUnsignedShort(currentBootstrapMethodOffset + 2) * 2; } return currentBootstrapMethodOffsets; } currentAttributeOffset += attributeLength; } return null; }. ### Assistant:", "ground_truth": "Reads the BootstrapMethods attribute to compute the offset of each bootstrap method.\n\n@param maxStringLength a conservative estimate of the maximum length of the strings contained\nin the constant pool of the class.\n@return the offsets of the bootstrap methods or null.", "predict": "Read the bootstrap_methods attribute. @param maxStringLength the maximum length of the attribute string. @return the bootstrap_methods attribute."}
{"ID": 975, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected CtorDescriptor[] inspectConstructors() { Class type = classDescriptor.getType(); Constructor[] ctors = type.getDeclaredConstructors(); CtorDescriptor[] allCtors = new CtorDescriptor[ctors.length]; for (int i = 0; i < ctors.length; i++) { Constructor ctor = ctors[i]; CtorDescriptor ctorDescriptor = createCtorDescriptor(ctor); allCtors[i] = ctorDescriptor; if (ctorDescriptor.isDefault()) { defaultCtor = ctorDescriptor; } } return allCtors; }. ### Assistant:", "ground_truth": "Inspects all declared constructors of a target type.", "predict": "Inspect constructors of the class. @return array of constructors descriptors."}
{"ID": 976, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public CtorDescriptor getCtorDescriptor(final Class... args) { ctors: for (CtorDescriptor ctorDescriptor : allCtors) { Class[] arg = ctorDescriptor.getParameters(); if (arg.length != args.length) { continue; } for (int j = 0; j < arg.length; j++) { if (arg[j] != args[j]) { continue ctors; } } return ctorDescriptor; } return null; }. ### Assistant:", "ground_truth": "Finds constructor description that matches given argument types.", "predict": "Find the constructor that matches the given arguments. @param args the constructor arguments. @return the constructor descriptor or null if none found."}
{"ID": 977, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") protected Map<String, TransientBeanData> getRequestMap(final HttpServletRequest servletRequest) { return (Map<String, TransientBeanData>) servletRequest.getAttribute(ATTR_NAME); }. ### Assistant:", "ground_truth": "Returns instance map from http request.", "predict": "Get the request map. @param servletRequest the servlet request @return the request map"}
{"ID": 978, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Map<String, TransientBeanData> createRequestMap(final HttpServletRequest servletRequest) { Map<String, TransientBeanData> map = new HashMap<>(); servletRequest.setAttribute(ATTR_NAME, map); return map; }. ### Assistant:", "ground_truth": "Creates instance map and stores it in the request.", "predict": "Create a map of TransientBeanData objects from the HttpServletRequest. @param servletRequest the HttpServletRequest @return the map of TransientBeanData objects"}
{"ID": 979, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected long[] convertArrayToArray(final Object value) { final Class valueComponentType = value.getClass().getComponentType(); final long[] result; if (valueComponentType.isPrimitive()) { result = convertPrimitiveArrayToArray(value, valueComponentType); } else { // convert object array to target array final Object[] array = (Object[]) value; result = new long[array.length]; for (int i = 0; i < array.length; i++) { result[i] = convertType(array[i]); } } return result; }. ### Assistant:", "ground_truth": "Converts array value to array.", "predict": "Convert an array to an array of longs. The array can be primitive or object. The primitive array will be converted to a long array, while the object array will be converted to an array of objects. The resulting array will have the same length as the original array. @param value the array to convert. @return the converted array."}
{"ID": 980, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void init(final FilterConfig filterConfig) throws ServletException { // final String decoraManagerClass = filterConfig.getInitParameter(PARAM_DECORA_MANAGER); if (decoraManagerClass != null) { try { final Class decoraManagerType = ClassLoaderUtil.loadClass(decoraManagerClass); decoraManager = (DecoraManager) ClassUtil.newInstance(decoraManagerType); } catch (Exception ex) { log.error(\"Unable to load Decora manager class: \" + decoraManagerClass, ex); throw new ServletException(ex); } } else { decoraManager = createDecoraManager(); } // final String decoraParserClass = filterConfig.getInitParameter(PARAM_DECORA_PARSER); if (decoraParserClass != null) { try { final Class decoraParserType = ClassLoaderUtil.loadClass(decoraParserClass); decoraParser = (DecoraParser) ClassUtil.newInstance(decoraParserType); } catch (Exception ex) { log.error(\"Unable to load Decora parser class: \" + decoraParserClass, ex); throw new ServletException(ex); } } else { decoraParser = createDecoraParser(); } // final String decoraCache = filterConfig.getInitParameter(PARAM_DECORA_CACHE); if (decoraCache != null) { cached = Converter.get().toBoolean(decoraCache, false); } }. ### Assistant:", "ground_truth": "Initializes Decora filter. Loads manager and parser from init parameters.", "predict": "Initialize the DecoraManager and DecoraParser instances. @param filterConfig FilterConfig object @throws ServletException ServletException"}
{"ID": 981, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public FindFile onFile(final Consumer<File> fileConsumer) { if (consumers == null) { consumers = Consumers.of(fileConsumer); } else { consumers.add(fileConsumer); } return this; }. ### Assistant:", "ground_truth": "Registers file consumer", "predict": "Add a consumer that will be called for each file found. @param fileConsumer consumer that will be called for each file found. @return this instance."}
{"ID": 982, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public FindFile searchPath(final URI searchPath) { File file; try { file = new File(searchPath); } catch (Exception ex) { throw new FindFileException(\"URI error: \" + searchPath, ex); } addPath(file); return this; }. ### Assistant:", "ground_truth": "Specifies the search path. Throws an exception if URI is invalid.", "predict": "Add a search path to the search path list. @param searchPath the search path to add. @return this."}
{"ID": 983, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public FindFile searchPath(final URL searchPath) { File file = FileUtil.toContainerFile(searchPath); if (file == null) { throw new FindFileException(\"URL error: \" + searchPath); } addPath(file); return this; }. ### Assistant:", "ground_truth": "Specifies the search path. Throws an exception if URL is invalid.", "predict": "Add a search path to the search path list. The search path is a URL. The search path is relative to the current working directory. The search path is relative to the current working directory. If the search path is not a valid URL, the method throws an exception. @param searchPath the search path. @return the current instance. @throws FindFileException if the search path is not a valid URL."}
{"ID": 984, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public FindFile include(final String... patterns) { for (String pattern : patterns) { rules.include(pattern); } return this; }. ### Assistant:", "ground_truth": "Defines include patterns.", "predict": "Adds one or more patterns to the search criteria. @param patterns The patterns to include in the search criteria. @return This instance."}
{"ID": 985, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public FindFile exclude(final String... patterns) { for (String pattern : patterns) { rules.exclude(pattern); } return this; }. ### Assistant:", "ground_truth": "Defines exclude patterns.", "predict": "Exclude files matching any of the given patterns. @param patterns the patterns to exclude @return this instance"}
{"ID": 986, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void addPath(final File path) { if (!path.exists()) { return; } if (pathList == null) { pathList = new LinkedList<>(); } pathList.add(path); }. ### Assistant:", "ground_truth": "Adds existing search path to the file list.\nNon existing files are ignored.\nIf path is a folder, it will be scanned for all files.", "predict": "Add a path to the list of paths to be scanned. @param path The path to be scanned."}
{"ID": 987, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public List<File> findAll() { List<File> allFiles = new ArrayList<>(); File file; while ((file = nextFile()) != null) { allFiles.add(file); } return allFiles; }. ### Assistant:", "ground_truth": "Finds all files and returns list of founded files.", "predict": "Find all files in the directory tree. @return List of all files found."}
{"ID": 988, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void init() { rules.detectMode(); todoFiles = new LinkedList<>(); todoFolders = new LinkedList<>(); if (pathList == null) { pathList = new LinkedList<>(); return; } if (pathListOriginal == null) { pathListOriginal = (LinkedList<File>) pathList.clone(); } String[] files = new String[pathList.size()]; int index = 0; Iterator<File> iterator = pathList.iterator(); while (iterator.hasNext()) { File file = iterator.next(); if (file.isFile()) { files[index++] = file.getAbsolutePath(); iterator.remove(); } } if (index != 0) { FilesIterator filesIterator = new FilesIterator(files); todoFiles.add(filesIterator); } }. ### Assistant:", "ground_truth": "Initializes file walking.\nSeparates input files and folders.", "predict": "Initialize the todo files and folders."}
{"ID": 989, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public Iterator<File> iterator() { return new Iterator<File>() { private File nextFile; @Override public boolean hasNext() { nextFile = nextFile(); return nextFile != null; } @Override public File next() { if (nextFile == null) { throw new NoSuchElementException(); } return nextFile; } @Override public void remove() { throw new UnsupportedOperationException(); } }; }. ### Assistant:", "ground_truth": "Returns file walking iterator.", "predict": "Returns an iterator over the files in the directory. The iterator is not guaranteed to be exhaustive. @return an iterator over the files in the directory."}
{"ID": 990, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public WiringMode resolveBeanWiringMode(final Class type) { PetiteBean petiteBean = ((Class<?>) type).getAnnotation(PetiteBean.class); return petiteBean != null ? petiteBean.wiring() : WiringMode.DEFAULT; }. ### Assistant:", "ground_truth": "Resolves bean's auto-wire flag from the annotation. Returns default auto-wire if annotation doesn't exist.", "predict": "Resolve the wiring mode for a PetiteBean. @param type the type of the PetiteBean @return the wiring mode for the PetiteBean"}
{"ID": 991, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String resolveBeanName(final Class type, final boolean useLongTypeName) { PetiteBean petiteBean = ((Class<?>)type).getAnnotation(PetiteBean.class); String name = null; if (petiteBean != null) { name = petiteBean.value().trim(); } if ((name == null) || (name.length() == 0)) { if (useLongTypeName) { name = type.getName(); } else { name = StringUtil.uncapitalize(type.getSimpleName()); } } return name; }. ### Assistant:", "ground_truth": "Resolves bean's name from bean annotation or type name. May be used for resolving bean name\nof base type during registration of bean subclass.", "predict": "Resolve the bean name based on the PetiteBean annotation. @param type the class to resolve the bean name for. @param useLongTypeName whether to use the long type name or the simple name. @return the resolved bean name."}
{"ID": 992, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public PrintWriter getWriter() { if (outWriter == null) { if (outStream != null) { throw new IllegalStateException(\"Can't call getWriter() after getOutputStream()\"); } bufferedWriter = new FastCharArrayWriter(); outWriter = new PrintWriter(bufferedWriter) { @Override public void close() { // do not close the print writer after rendering // since it will remove reference to bufferedWriter } }; } return outWriter; }. ### Assistant:", "ground_truth": "Returns a writer.", "predict": "Returns the PrintWriter used to write the HTML. This is a convenience method for getting the PrintWriter associated with the OutputStream. @return the PrintWriter used to write the HTML."}
{"ID": 993, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ServletOutputStream getOutputStream() { if (outStream == null) { if (outWriter != null) { throw new IllegalStateException(\"Can't call getOutputStream() after getWriter()\"); } bufferOutputStream = new FastByteArrayServletOutputStream(); outStream = bufferOutputStream; } return outStream; }. ### Assistant:", "ground_truth": "Returns a servlet output stream.", "predict": "Returns ServletOutputStream for writing response data. @return ServletOutputStream for writing response data."}
{"ID": 994, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String getClassName() { switch (sort) { case VOID: return \"void\"; case BOOLEAN: return \"boolean\"; case CHAR: return \"char\"; case BYTE: return \"byte\"; case SHORT: return \"short\"; case INT: return \"int\"; case FLOAT: return \"float\"; case LONG: return \"long\"; case DOUBLE: return \"double\"; case ARRAY: StringBuilder stringBuilder = new StringBuilder(getElementType().getClassName()); for (int i = getDimensions(); i > 0; --i) { stringBuilder.append(\"[]\"); } return stringBuilder.toString(); case OBJECT: case INTERNAL: return valueBuffer.substring(valueBegin, valueEnd).replace('/', '.'); default: throw new AssertionError(); } }. ### Assistant:", "ground_truth": "Returns the binary name of the class corresponding to this type. This method must not be used\non method types.\n\n@return the binary name of the class corresponding to this type.", "predict": "Returns the class name of the value."}
{"ID": 995, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String getConstructorDescriptor(final Constructor<?> constructor) { StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append('('); Class<?>[] parameters = constructor.getParameterTypes(); for (Class<?> parameter : parameters) { appendDescriptor(parameter, stringBuilder); } return stringBuilder.append(\")V\").toString(); }. ### Assistant:", "ground_truth": "Returns the descriptor corresponding to the given constructor.\n\n@param constructor a {@link Constructor} object.\n@return the descriptor of the given constructor.", "predict": "Returns the descriptor of a constructor. @param constructor the constructor to get the descriptor of @return the descriptor of the constructor"}
{"ID": 996, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String getMethodDescriptor(final Type returnType, final Type... argumentTypes) { StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append('('); for (Type argumentType : argumentTypes) { argumentType.appendDescriptor(stringBuilder); } stringBuilder.append(')'); returnType.appendDescriptor(stringBuilder); return stringBuilder.toString(); }. ### Assistant:", "ground_truth": "Returns the descriptor corresponding to the given argument and return types.\n\n@param returnType the return type of the method.\n@param argumentTypes the argument types of the method.\n@return the descriptor corresponding to the given argument and return types.", "predict": "Returns the method descriptor for the given method signature. The method descriptor is a string that describes the method signature in terms of its parameters and return type. The method descriptor is a sequence of characters that describes the method signature in terms of its parameters and return type. The method descriptor is a sequence of characters that describes the method signature in terms of its parameters and return type. The method descriptor is a sequence of characters that describes the method signature in terms of its parameters and return type. The method descriptor is a sequence of characters that describes the method signature in terms of its parameters and return type. The method descriptor is a sequence of characters that describes the method signature in terms of its parameters and return type. The method descriptor is a sequence of characters that describes the method signature in terms of its parameters and return type. The method descriptor is a sequence of characters that describes the method signature in terms of its parameters and return type. The method descriptor is a sequence of characters that describes the method signature in terms of its parameters and return type."}
{"ID": 997, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String getMethodDescriptor(final Method method) { StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append('('); Class<?>[] parameters = method.getParameterTypes(); for (Class<?> parameter : parameters) { appendDescriptor(parameter, stringBuilder); } stringBuilder.append(')'); appendDescriptor(method.getReturnType(), stringBuilder); return stringBuilder.toString(); }. ### Assistant:", "ground_truth": "Returns the descriptor corresponding to the given method.\n\n@param method a {@link Method} object.\n@return the descriptor of the given method.", "predict": "Returns a string representation of the method descriptor. The string representation is in the form of a Java method signature. The method signature includes the return type and the parameter types. @param method the method to get the descriptor for @return the method descriptor"}
{"ID": 998, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void appendDescriptor(final StringBuilder stringBuilder) { if (sort == OBJECT) { stringBuilder.append(valueBuffer, valueBegin - 1, valueEnd + 1); } else if (sort == INTERNAL) { stringBuilder.append('L').append(valueBuffer, valueBegin, valueEnd).append(';'); } else { stringBuilder.append(valueBuffer, valueBegin, valueEnd); } }. ### Assistant:", "ground_truth": "Appends the descriptor corresponding to this type to the given string buffer.\n\n@param stringBuilder the string builder to which the descriptor must be appended.", "predict": "Append the descriptor of the value. The descriptor is composed of the type of the value and the value itself. The type is represented by the first character of the value buffer. @param stringBuilder StringBuilder to append the descriptor to."}
{"ID": 999, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public int getSize() { switch (sort) { case VOID: return 0; case BOOLEAN: case CHAR: case BYTE: case SHORT: case INT: case FLOAT: case ARRAY: case OBJECT: case INTERNAL: return 1; case LONG: case DOUBLE: return 2; default: throw new AssertionError(); } }. ### Assistant:", "ground_truth": "Returns the size of values of this type. This method must not be used for method types.\n\n@return the size of values of this type, i.e., 2 for {@code long} and {@code double}, 0 for\n{@code void} and 1 otherwise.", "predict": "Returns the size of the value."}
{"ID": 1000, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int getArgumentsAndReturnSizes(final String methodDescriptor) { int argumentsSize = 1; // Skip the first character, which is always a '('. int currentOffset = 1; int currentChar = methodDescriptor.charAt(currentOffset); // Parse the argument types and compute their size, one at a each loop iteration. while (currentChar != ')') { if (currentChar == 'J' || currentChar == 'D') { currentOffset++; argumentsSize += 2; } else { while (methodDescriptor.charAt(currentOffset) == '[') { currentOffset++; } if (methodDescriptor.charAt(currentOffset++) == 'L') { // Skip the argument descriptor content. currentOffset = methodDescriptor.indexOf(';', currentOffset) + 1; } argumentsSize += 1; } currentChar = methodDescriptor.charAt(currentOffset); } currentChar = methodDescriptor.charAt(currentOffset + 1); if (currentChar == 'V') { return argumentsSize << 2; } else { int returnSize = (currentChar == 'J' || currentChar == 'D') ? 2 : 1; return argumentsSize << 2 | returnSize; } }. ### Assistant:", "ground_truth": "Computes the size of the arguments and of the return value of a method.\n\n@param methodDescriptor a method descriptor.\n@return the size of the arguments of the method (plus one for the implicit this argument),\nargumentsSize, and the size of its return value, returnSize, packed into a single int i =\n{@code (argumentsSize &lt;&lt; 2) | returnSize} (argumentsSize is therefore equal to {@code\ni &gt;&gt; 2}, and returnSize to {@code i &amp; 0x03}).", "predict": "Compute the size of the arguments and return types. @param methodDescriptor the method descriptor @return the size of the arguments and return types"}
{"ID": 1001, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void setRollbackOnly(final Throwable th) { if (!isNoTransaction()) { if ((status != STATUS_MARKED_ROLLBACK) && (status != STATUS_ACTIVE)) { throw new JtxException(\"TNo active TX that can be marked as rollback only\"); } } rollbackCause = th; status = STATUS_MARKED_ROLLBACK; }. ### Assistant:", "ground_truth": "Modify the transaction associated with the target object such that the only possible outcome\nof the transaction is to roll back the transaction.", "predict": "Mark this transaction as rollback only. This is useful when you want to rollback a transaction that was not started in a transaction. @param th the Throwable that caused the rollback."}
{"ID": 1002, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void commitOrRollback(boolean doCommit) { if (log.isDebugEnabled()) { if (doCommit) { log.debug(\"Commit JTX\"); } else { log.debug(\"Rollback JTX\"); } } boolean forcedRollback = false; if (!isNoTransaction()) { if (isRollbackOnly()) { if (doCommit) { doCommit = false; forcedRollback = true; } } else if (!isActive()) { if (isCompleted()) { throw new JtxException(\"TX is already completed, commit or rollback should be called once per TX\"); } throw new JtxException(\"No active TX to \" + (doCommit ? \"commit\" : \"rollback\")); } } if (doCommit) { commitAllResources(); } else { rollbackAllResources(forcedRollback); } }. ### Assistant:", "ground_truth": "Performs either commit or rollback on all transaction resources.", "predict": "Commit or rollback the resources. @param doCommit whether to commit or rollback the resources."}
{"ID": 1003, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void rollbackAllResources(final boolean wasForced) { status = STATUS_ROLLING_BACK; Exception lastException = null; Iterator<JtxResource> it = resources.iterator(); while (it.hasNext()) { JtxResource resource = it.next(); try { resource.rollbackTransaction(); } catch (Exception ex) { lastException = ex; } finally { it.remove(); } } txManager.removeTransaction(this); status = STATUS_ROLLEDBACK; if (lastException != null) { status = STATUS_UNKNOWN; throw new JtxException(\"Rollback failed: one or more TX resources couldn't rollback a TX\", lastException); } if (wasForced) { throw new JtxException(\"TX rolled back because it has been marked as rollback-only\", rollbackCause); } }. ### Assistant:", "ground_truth": "Rollbacks all attached resources. Resource will be closed. and detached from this transaction.\nIf exception occurs, it will be rethrown at the end.", "predict": "Rollback all resources. @param wasForced Whether the rollback was forced by the rollback-only flag."}
{"ID": 1004, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <E> E requestResource(final Class<E> resourceType) { if (isCompleted()) { throw new JtxException(\"TX is already completed, resource are not available after commit or rollback\"); } if (isRollbackOnly()) { throw new JtxException(\"TX is marked as rollback only, resource are not available\", rollbackCause); } if (!isNoTransaction() && !isActive()) { throw new JtxException(\"Resources are not available since TX is not active\"); } checkTimeout(); E resource = lookupResource(resourceType); if (resource == null) { int maxResources = txManager.getMaxResourcesPerTransaction(); if ((maxResources != -1) && (resources.size() >= maxResources)) { throw new JtxException(\"TX already has attached max. number of resources\"); } JtxResourceManager<E> resourceManager = txManager.lookupResourceManager(resourceType); resource = resourceManager.beginTransaction(mode, isActive()); resources.add(new JtxResource<>(this, resourceManager, resource)); } return resource; }. ### Assistant:", "ground_truth": "Requests a resource. If resource is not found, it will be created and new transaction will be started on it.", "predict": "Request a resource from the TX Manager. The resource is managed by the TX Manager and will be automatically closed after the TX is completed. @param resourceType the resource type to request. @param <E> the resource type. @return the requested resource. @throws JtxException if the TX is already completed, marked as rollback only, or not active. @throws IllegalStateException if the TX is already marked as rollback only. @throws IllegalStateException if the TX is already completed."}
{"ID": 1005, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void popName() { if (isPushed) { if (pushedComma) { writeComma(); } String name = pushedName; pushedName = null; isPushed = false; writeName(name); } }. ### Assistant:", "ground_truth": "Writes stored name to JSON string. Cleans storage.", "predict": "Pop the name from the stack."}
{"ID": 1006, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void writeString(final String value) { popName(); write(StringPool.QUOTE); int len = value.length(); for (int i = 0; i < len; i++) { char c = value.charAt(i); switch (c) { case '\"': write(\"\\\\\\\"\"); break; case '\\\\': write(\"\\\\\\\\\"); break; case '/': if (strictStringEncoding) { write(\"\\\\/\"); } else { write(c); } break; case '\\b': write(\"\\\\b\"); break; case '\\f': write(\"\\\\f\"); break; case '\\n': write(\"\\\\n\"); break; case '\\r': write(\"\\\\r\"); break; case '\\t': write(\"\\\\t\"); break; default: if (Character.isISOControl(c)) { unicode(c); } else { write(c); } } } write(StringPool.QUOTE); }. ### Assistant:", "ground_truth": "Write a quoted and escaped value to the output.", "predict": "Write a string literal. The string is quoted with double quotes. Characters that are not legal in a string are escaped."}
{"ID": 1007, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void unicode(final char c) { write(\"\\\\u\"); int n = c; for (int i = 0; i < 4; ++i) { int digit = (n & 0xf000) >> 12; char hex = CharUtil.int2hex(digit); write(hex); n <<= 4; } }. ### Assistant:", "ground_truth": "Writes unicode representation of a character.", "predict": "Write unicode escape character. @param c character to write"}
{"ID": 1008, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void write(final CharSequence charSequence) { popName(); try { out.append(charSequence); } catch (IOException ioex) { throw new JsonException(ioex); } }. ### Assistant:", "ground_truth": "Appends char sequence to the buffer. Used for numbers, nulls, booleans, etc.", "predict": "Write a character sequence to the output. The name of the current JSON object is popped before writing. @param charSequence the character sequence to write."}
{"ID": 1009, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public LagartoDomBuilderConfig setParsingErrorLogLevelName(String logLevel) { logLevel = logLevel.trim().toUpperCase(); parsingErrorLogLevel = Logger.Level.valueOf(logLevel); return this; }. ### Assistant:", "ground_truth": "Sets parsing error log level as a name.", "predict": "Set the log level for parsing errors. @param logLevel log level name (e.g. \"ERROR\", \"WARNING\", \"INFO\", \"DEBUG\", \"TRACE\") @return this object"}
{"ID": 1010, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void startRegion(final int start, final int tagLen, final int deepLevel) { this.regionStart = start + tagLen; this.regionLength = 0; this.regionTagStart = start; this.deepLevel = deepLevel; }. ### Assistant:", "ground_truth": "Starts defining region by setting the start index and reset region length to zero.", "predict": "Start region. @param start start position of region tag @param tagLen length of tag @param deepLevel deep level of region tag"}
{"ID": 1011, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean isContaining(final String include) { if (value == null) { return false; } if (splits == null) { splits = StringUtil.splitc(value, ' '); } for (String s: splits) { if (s.equals(include)) { return true; } } return false; }. ### Assistant:", "ground_truth": "Returns true if attribute is containing some value.", "predict": "Is this value containing the specified string? @param include The string to check for @return True if the value contains the specified string, otherwise false"}
{"ID": 1012, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void registerPseudoFunction(final Class<? extends PseudoFunction> pseudoFunctionType) { PseudoFunction pseudoFunction; try { pseudoFunction = ClassUtil.newInstance(pseudoFunctionType); } catch (Exception ex) { throw new CSSellyException(ex); } PSEUDO_FUNCTION_MAP.put(pseudoFunction.getPseudoFunctionName(), pseudoFunction); }. ### Assistant:", "ground_truth": "Registers pseudo function.", "predict": "Registers a PseudoFunction. @param pseudoFunctionType The PseudoFunction Type."}
{"ID": 1013, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static PseudoFunction<?> lookupPseudoFunction(final String pseudoFunctionName) { PseudoFunction pseudoFunction = PSEUDO_FUNCTION_MAP.get(pseudoFunctionName); if (pseudoFunction == null) { throw new CSSellyException(\"Unsupported pseudo function: \" + pseudoFunctionName); } return pseudoFunction; }. ### Assistant:", "ground_truth": "Lookups pseudo function for given pseudo function name.", "predict": "Lookup PseudoFunction by name. @param pseudoFunctionName PseudoFunction name @return PseudoFunction"}
{"ID": 1014, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void visit(final int version, int access, final String name, final String signature, final String superName, final String[] interfaces) { wd.init(name, superName, this.suffix, this.reqProxyClassName); // change access of destination access &= ~AsmUtil.ACC_ABSTRACT; // write destination class final int v = ProxettaAsmUtil.resolveJavaVersion(version); wd.dest.visit(v, access, wd.thisReference, signature, wd.superName, null); wd.proxyAspects = new ProxyAspectData[aspects.length]; for (int i = 0; i < aspects.length; i++) { wd.proxyAspects[i] = new ProxyAspectData(wd, aspects[i], i); } }. ### Assistant:", "ground_truth": "Creates destination subclass header from current target class. Destination name is created from targets by\nadding a suffix and, optionally, a number. Destination extends the target.", "predict": "Visit the class. @param version the version of the class. @param access the accessibility of the class. @param name the name of the class. @param signature the signature of the class. @param superName the name of the super class. @param interfaces the interfaces of the class."}
{"ID": 1015, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public AnnotationVisitor visitAnnotation(final String desc, final boolean visible) { AnnotationVisitor destAnn = wd.dest.visitAnnotation(desc, visible); // [A3] return new AnnotationVisitorAdapter(destAnn); }. ### Assistant:", "ground_truth": "Copies all destination type annotations to the target.", "predict": "Visits an annotation of the class file. @param desc the type descriptor of the annotation. @param visible whether the annotation is visible to the class files. @return an AnnotationVisitor to visit the annotation."}
{"ID": 1016, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void makeStaticInitBlock() { if (wd.adviceClinits != null) { MethodVisitor mv = wd.dest.visitMethod(AsmUtil.ACC_STATIC, CLINIT, DESC_VOID, null, null); mv.visitCode(); for (String name : wd.adviceClinits) { mv.visitMethodInsn( INVOKESTATIC, wd.thisReference, name, DESC_VOID, false); } mv.visitInsn(RETURN); mv.visitMaxs(0, 0); mv.visitEnd(); } }. ### Assistant:", "ground_truth": "Creates static initialization block that simply calls all\nadvice static init methods in correct order.", "predict": "Make static init block."}
{"ID": 1017, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void makeProxyConstructor() { MethodVisitor mv = wd.dest.visitMethod(AsmUtil.ACC_PRIVATE | AsmUtil.ACC_FINAL, ProxettaNames.initMethodName, DESC_VOID, null, null); mv.visitCode(); if (wd.adviceInits != null) { for (String name : wd.adviceInits) { mv.visitVarInsn(ALOAD, 0); mv.visitMethodInsn (INVOKESPECIAL, wd.thisReference, name, DESC_VOID, false); } } mv.visitInsn(RETURN); mv.visitMaxs(0, 0); mv.visitEnd(); }. ### Assistant:", "ground_truth": "Creates init method that simply calls all advice constructor methods in correct order.\nThis created init method is called from each destination's constructor.", "predict": "Create the constructor of the proxy class."}
{"ID": 1018, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void processSuperMethods() { for (ClassReader cr : targetClassInfo.superClassReaders) { cr.accept(new EmptyClassVisitor() { String declaredClassName; @Override public void visit(final int version, final int access, final String name, final String signature, final String superName, final String[] interfaces) { declaredClassName = name; } @Override public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) { if (name.equals(INIT) || name.equals(CLINIT)) { return null; } MethodSignatureVisitor msign = targetClassInfo.lookupMethodSignatureVisitor(access, name, desc, declaredClassName); if (msign == null) { return null; } return applyProxy(msign); } }, 0); } }. ### Assistant:", "ground_truth": "Checks for all public super methods that are not overridden.", "predict": "Process the super classes of the target class."}
{"ID": 1019, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public int findLast(int low, int high) { int ndx = -1; while (low <= high) { int mid = (low + high) >>> 1; int delta = compare(mid); if (delta > 0) { high = mid - 1; } else { if (delta == 0) { ndx = mid; } low = mid + 1; } } if (ndx == -1) { return -(low + 1); } return ndx; }. ### Assistant:", "ground_truth": "Finds very last index of given element in inclusive index range. Returns negative\nvalue if element is not found.", "predict": "Find the last index where the element is greater than or equal to the specified value. @param low the lower bound of the range to search. @param high the upper bound of the range to search. @return the index of the last element in the range that is greater than or equal to the specified value, or -(low + 1) if the range is empty."}
{"ID": 1020, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String on(final String string) { if (!enabled) { return string; } final StringBuilder sb = new StringBuilder(); if (prefix != null) { sb.append(prefix).append(\"m\"); } sb.append(string); if (suffix != null) { sb.append(suffix).append(\"m\"); } return sb.toString(); }. ### Assistant:", "ground_truth": "Returns chalked string.", "predict": "Apply the custom formatting to the given string. @param string the string to apply the formatting to. @return the formatted string."}
{"ID": 1021, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private byte[] replaceAsmInstructions(final byte[] classFile, final boolean hasFrames) { final Attribute[] attributes = getAttributePrototypes(); firstField = null; lastField = null; firstMethod = null; lastMethod = null; lastRuntimeVisibleAnnotation = null; lastRuntimeInvisibleAnnotation = null; lastRuntimeVisibleTypeAnnotation = null; lastRuntimeInvisibleTypeAnnotation = null; moduleWriter = null; nestHostClassIndex = 0; numberOfNestMemberClasses = 0; nestMemberClasses = null; firstAttribute = null; compute = hasFrames ? MethodWriter.COMPUTE_INSERTED_FRAMES : MethodWriter.COMPUTE_NOTHING; new ClassReader(classFile, 0, /* checkClassVersion = */ false) .accept( this, attributes, (hasFrames ? ClassReader.EXPAND_FRAMES : 0) | ClassReader.EXPAND_ASM_INSNS); return toByteArray(); }. ### Assistant:", "ground_truth": "Returns the equivalent of the given class file, with the ASM specific instructions replaced\nwith standard ones. This is done with a ClassReader -&gt; ClassWriter round trip.\n\n@param classFile a class file containing ASM specific instructions, generated by this\nClassWriter.\n@param hasFrames whether there is at least one stack map frames in 'classFile'.\n@return an equivalent of 'classFile', with the ASM specific instructions replaced with standard\nones.", "predict": "Rewrites the class file to eliminate the ASM instructions. This is a simple rewriting that replaces the instructions with their original bytecode equivalents. It does not expand the instructions. @param classFile the class file to rewrite @param hasFrames whether frames are present @return the rewritten class file"}
{"ID": 1022, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private Attribute[] getAttributePrototypes() { Attribute.Set attributePrototypes = new Attribute.Set(); attributePrototypes.addAttributes(firstAttribute); FieldWriter fieldWriter = firstField; while (fieldWriter != null) { fieldWriter.collectAttributePrototypes(attributePrototypes); fieldWriter = (FieldWriter) fieldWriter.fv; } MethodWriter methodWriter = firstMethod; while (methodWriter != null) { methodWriter.collectAttributePrototypes(attributePrototypes); methodWriter = (MethodWriter) methodWriter.mv; } return attributePrototypes.toArray(); }. ### Assistant:", "ground_truth": "Returns the prototypes of the attributes used by this class, its fields and its methods.\n\n@return the prototypes of the attributes used by this class, its fields and its methods.", "predict": "Returns the attribute prototypes for the class. The returned array contains the prototypes for each attribute in the class. The prototype is a reference to the first occurrence of the attribute in the class. @return the attribute prototypes for the class."}
{"ID": 1023, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void registerDefaults() { register(Integer.class, IntegerSqlType.class); register(int.class, IntegerSqlType.class); register(MutableInteger.class, IntegerSqlType.class); register(Float.class, FloatSqlType.class); register(float.class, FloatSqlType.class); register(MutableFloat.class, FloatSqlType.class); register(Double.class, DoubleSqlType.class); register(double.class, DoubleSqlType.class); register(MutableDouble.class, DoubleSqlType.class); register(Byte.class, ByteSqlType.class); register(byte.class, ByteSqlType.class); register(MutableByte.class, ByteSqlType.class); register(Boolean.class, BooleanSqlType.class); register(boolean.class, BooleanSqlType.class); register(MutableBoolean.class, BooleanSqlType.class); register(Long.class, LongSqlType.class); register(long.class, LongSqlType.class); register(MutableLong.class, LongSqlType.class); register(Short.class, ShortSqlType.class); register(short.class, ShortSqlType.class); register(MutableShort.class, ShortSqlType.class); register(Character.class, CharacterSqlType.class); register(char.class, CharacterSqlType.class); register(BigDecimal.class, BigDecimalSqlType.class); register(BigInteger.class, BigIntegerSqlType.class); register(String.class, StringSqlType.class); register(LocalDateTime.class, LocalDateTimeSqlType.class); register(LocalDate.class, LocalDateSqlType.class); register(LocalTime.class, LocalTimeSqlType.class); register(Date.class, SqlDateSqlType.class); register(Timestamp.class, TimestampSqlType.class); register(Time.class, TimeSqlType.class); register(java.util.Date.class, DateSqlType.class); register(JulianDate.class, JulianDateSqlType.class); register(byte[].class, ByteArraySqlType.class); register(URL.class, URLSqlType.class); register(Blob.class, BlobSqlType.class); register(Clob.class, ClobSqlType.class); register(Array.class, SqlArraySqlType.class); register(Ref.class, SqlRefSqlType.class); }. ### Assistant:", "ground_truth": "Registers default set of SQL types.", "predict": "Registers the default SQL types for all primitive types."}
{"ID": 1024, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void register(final Class type, final Class<? extends SqlType> sqlTypeClass) { types.put(type, lookupSqlType(sqlTypeClass)); }. ### Assistant:", "ground_truth": "Registers sql type for provided type.", "predict": "Register a SQL type for a given Java type."}
{"ID": 1025, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public SqlType lookup(final Class clazz) { SqlType sqlType; for (Class x = clazz; x != null; x = x.getSuperclass()) { sqlType = types.get(clazz); if (sqlType != null) { return sqlType; } Class[] interfaces = x.getInterfaces(); for (Class i : interfaces) { sqlType = types.get(i); if (sqlType != null) { return sqlType; } } } return null; }. ### Assistant:", "ground_truth": "Retrieves SQL type for provided type. All subclasses and interfaces are examined\nfor matching sql type.", "predict": "Find the SqlType for a given class. If the class is not found, returns null."}
{"ID": 1026, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public SqlType lookupSqlType(final Class<? extends SqlType> sqlTypeClass) { SqlType sqlType = sqlTypes.get(sqlTypeClass); if (sqlType == null) { try { sqlType = ClassUtil.newInstance(sqlTypeClass); } catch (Exception ex) { throw new DbSqlException(\"SQL type not found: \" + sqlTypeClass.getSimpleName(), ex); } sqlTypes.put(sqlTypeClass, sqlType); } return sqlType; }. ### Assistant:", "ground_truth": "Returns sql type instance. Instances are stored for better performances.", "predict": "Find a SQL type by its class. @param sqlTypeClass SQL type class @return SQL type instance"}
{"ID": 1027, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static ProxyInfo socks4Proxy(final String proxyAddress, final int proxyPort, final String proxyUser) { return new ProxyInfo(ProxyType.SOCKS4, proxyAddress, proxyPort, proxyUser, null); }. ### Assistant:", "ground_truth": "Creates SOCKS4 proxy.", "predict": "Create a new ProxyInfo object for SOCKS4 proxy. @param proxyAddress the address of the proxy server. @param proxyPort the port of the proxy server. @param proxyUser the username of the proxy server. @return the ProxyInfo object."}
{"ID": 1028, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static ProxyInfo socks5Proxy(final String proxyAddress, final int proxyPort, final String proxyUser, final String proxyPassword) { return new ProxyInfo(ProxyType.SOCKS5, proxyAddress, proxyPort, proxyUser, proxyPassword); }. ### Assistant:", "ground_truth": "Creates SOCKS5 proxy.", "predict": "Create a new proxy info object for SOCKS5 proxy. @param proxyAddress the address of the proxy @param proxyPort the port of the proxy @param proxyUser the username of the proxy @param proxyPassword the password of the proxy @return the proxy info object"}
{"ID": 1029, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static ProxyInfo httpProxy(final String proxyAddress, final int proxyPort, final String proxyUser, final String proxyPassword) { return new ProxyInfo(ProxyType.HTTP, proxyAddress, proxyPort, proxyUser, proxyPassword); }. ### Assistant:", "ground_truth": "Creates HTTP proxy.", "predict": "Create a new ProxyInfo object with HTTP Proxy. @param proxyAddress the address of the proxy server @param proxyPort the port of the proxy server @param proxyUser the username of the proxy server @param proxyPassword the password of the proxy server @return the ProxyInfo object"}
{"ID": 1030, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public int totalThreadTransactions() { ArrayList<JtxTransaction> txList = txStack.get(); if (txList == null) { return 0; } return txList.size(); }. ### Assistant:", "ground_truth": "Returns total number of transactions associated with current thread.", "predict": "Returns the total number of transactions in the current thread's transaction stack. @return the total number of transactions in the current thread's transaction stack."}
{"ID": 1031, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public int totalThreadTransactionsWithStatus(final JtxStatus status) { ArrayList<JtxTransaction> txlist = txStack.get(); if (txlist == null) { return 0; } int count = 0; for (JtxTransaction tx : txlist) { if (tx.getStatus() == status) { count++; } } return count; }. ### Assistant:", "ground_truth": "Returns total number of transactions of the specified status associated with current thread.", "predict": "Returns the total number of transactions in the stack that have the given status. @param status the status of the transactions to count. @return the total number of transactions in the stack that have the given status."}
{"ID": 1032, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void associateTransaction(final JtxTransaction tx) { totalTransactions++; ArrayList<JtxTransaction> txList = txStack.get(); if (txList == null) { txList = new ArrayList<>(); txStack.set(txList); } txList.add(tx); // add last }. ### Assistant:", "ground_truth": "Associate transaction to current thread.", "predict": "Associate a transaction to the current thread @param tx"}
{"ID": 1033, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void continueTx(final JtxTransaction sourceTx, final JtxTransactionMode destMode) { if (!validateExistingTransaction) { return; } JtxTransactionMode sourceMode = sourceTx.getTransactionMode(); JtxIsolationLevel destIsolationLevel = destMode.getIsolationLevel(); if (destIsolationLevel != ISOLATION_DEFAULT) { JtxIsolationLevel currentIsolationLevel = sourceMode.getIsolationLevel(); if (currentIsolationLevel != destIsolationLevel) { throw new JtxException(\"Participating TX specifies isolation level: \" + destIsolationLevel + \" which is incompatible with existing TX: \" + currentIsolationLevel); } } if ((!destMode.isReadOnly()) && (sourceMode.isReadOnly())) { throw new JtxException(\"Participating TX is not marked as read-only, but existing TX is\"); } }. ### Assistant:", "ground_truth": "Check if propagation of a transaction is possible, due to source and destination transaction modes.\n@see #setValidateExistingTransaction(boolean)", "predict": "Verify that the participating transaction is compatible with the existing transaction. @param sourceTx The source transaction. @param destMode The destination transaction mode."}
{"ID": 1034, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected <E> JtxResourceManager<E> lookupResourceManager(final Class<E> resourceType) { //noinspection unchecked JtxResourceManager<E> resourceManager = this.resourceManagers.get(resourceType); if (resourceManager == null) { throw new JtxException(\"No registered resource manager for resource type: \" + resourceType.getSimpleName()); } return resourceManager; }. ### Assistant:", "ground_truth": "Lookups resource manager for provided type. Throws an exception if provider doesn't exists.", "predict": "Lookup resource manager for given resource type. @param resourceType Resource type. @param <E> Resource type. @return Resource manager for given resource type."}
{"ID": 1035, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected C createProxyObject(Class<C> target) { target = ProxettaUtil.resolveTargetClass(target); Class proxyClass = cache.get(target); if (proxyClass == null) { proxyClass = proxetta.defineProxy(target); cache.put(target, proxyClass); } C proxy; try { proxy = (C) ClassUtil.newInstance(proxyClass); } catch (Exception ex) { throw new PathrefException(ex); } return proxy; }. ### Assistant:", "ground_truth": "Creates proxy object.", "predict": "Create a proxy object for the target class. The proxy is created using the Proxetta framework. @param target the target class @return the proxy object"}
{"ID": 1036, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void append(final String methodName) { if (path.length() != 0) { path += StringPool.DOT; } if (methodName.startsWith(StringPool.LEFT_SQ_BRACKET)) { path = StringUtil.substring(path, 0, -1); } path += methodName; }. ### Assistant:", "ground_truth": "Appends method name to existing path.", "predict": "Append the method name to the path. If the path is empty, add a dot. If the method name starts with a left square bracket, remove it. @param methodName the method name to append."}
{"ID": 1037, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String alignLeftAndPad(final String text, final int size) { int textLength = text.length(); if (textLength > size) { return text.substring(0, size); } final StringBuilder sb = new StringBuilder(size); sb.append(text); while (textLength++ < size) { sb.append(' '); } return sb.toString(); }. ### Assistant:", "ground_truth": "Puts the text to the left and pads with spaces until the size is reached.", "predict": "Aligns the text to the left and pads it with spaces to reach the specified size. @param text the text to align and pad. @param size the size of the text. @return the aligned and padded text."}
{"ID": 1038, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String toPrettyString(final Object value) { if (value == null) { return StringPool.NULL; } final Class<?> type = value.getClass(); if (type.isArray()) { final Class componentType = type.getComponentType(); if (componentType.isPrimitive()) { final StringBuilder sb = new StringBuilder(); sb.append('['); if (componentType == int.class) { sb.append(ArraysUtil.toString((int[]) value)); } else if (componentType == long.class) { sb.append(ArraysUtil.toString((long[]) value)); } else if (componentType == double.class) { sb.append(ArraysUtil.toString((double[]) value)); } else if (componentType == float.class) { sb.append(ArraysUtil.toString((float[]) value)); } else if (componentType == boolean.class) { sb.append(ArraysUtil.toString((boolean[]) value)); } else if (componentType == short.class) { sb.append(ArraysUtil.toString((short[]) value)); } else if (componentType == byte.class) { sb.append(ArraysUtil.toString((byte[]) value)); } else { throw new IllegalArgumentException(); } sb.append(']'); return sb.toString(); } else { final StringBuilder sb = new StringBuilder(); sb.append('['); final Object[] array = (Object[]) value; for (int i = 0; i < array.length; i++) { if (i > 0) { sb.append(','); } sb.append(toPrettyString(array[i])); } sb.append(']'); return sb.toString(); } } else if (value instanceof Iterable) { final Iterable iterable = (Iterable) value; final StringBuilder sb = new StringBuilder(); sb.append('{'); int i = 0; for (final Object o : iterable) { if (i > 0) { sb.append(','); } sb.append(toPrettyString(o)); i++; } sb.append('}'); return sb.toString(); } return value.toString(); }. ### Assistant:", "ground_truth": "Converts object into pretty string. All arrays are iterated.", "predict": "Returns a pretty string representation of the given value. @param value the value to convert to a string. @return a pretty string representation of the given value."}
{"ID": 1039, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String toCamelCase(final String input, final boolean firstCharUppercase, final char separator) { final int length = input.length(); final StringBuilder sb = new StringBuilder(length); boolean upperCase = firstCharUppercase; for (int i = 0; i < length; i++) { final char ch = input.charAt(i); if (ch == separator) { upperCase = true; } else if (upperCase) { sb.append(Character.toUpperCase(ch)); upperCase = false; } else { sb.append(ch); } } return sb.toString(); }. ### Assistant:", "ground_truth": "Converts separated string value to CamelCase.", "predict": "Convert a string to camelCase. If the first character is uppercase, it will be converted to lowercase. If the first character is lowercase, it will be converted to uppercase. If the first character is not uppercase, it will be converted to lowercase. The separator character will be converted to uppercase. @param input the input string. @param firstCharUppercase whether the first character should be uppercase. @param separator the separator character. @return the camelCase string."}
{"ID": 1040, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String formatParagraph(final String src, final int len, final boolean breakOnWhitespace) { StringBuilder str = new StringBuilder(); int total = src.length(); int from = 0; while (from < total) { int to = from + len; if (to >= total) { to = total; } else if (breakOnWhitespace) { int ndx = StringUtil.lastIndexOfWhitespace(src, to - 1, from); if (ndx != -1) { to = ndx + 1; } } int cutFrom = StringUtil.indexOfNonWhitespace(src, from, to); if (cutFrom != -1) { int cutTo = StringUtil.lastIndexOfNonWhitespace(src, to - 1, from) + 1; str.append(src, cutFrom, cutTo); } str.append('\\n'); from = to; } return str.toString(); }. ### Assistant:", "ground_truth": "Formats provided string as paragraph.", "predict": "Format paragraph. @param src source text @param len paragraph length @param breakOnWhitespace break on whitespaces @return formatted paragraph"}
{"ID": 1041, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String convertTabsToSpaces(final String line, final int tabWidth) { int tab_index, tab_size; int last_tab_index = 0; int added_chars = 0; if (tabWidth == 0) { return StringUtil.remove(line, '\\t'); } StringBuilder result = new StringBuilder(); while ((tab_index = line.indexOf('\\t', last_tab_index)) != -1) { tab_size = tabWidth - ((tab_index + added_chars) % tabWidth); if (tab_size == 0) { tab_size = tabWidth; } added_chars += tab_size - 1; result.append(line, last_tab_index, tab_index); result.append(StringUtil.repeat(' ', tab_size)); last_tab_index = tab_index+1; } if (last_tab_index == 0) { return line; } result.append(line.substring(last_tab_index)); return result.toString(); }. ### Assistant:", "ground_truth": "Converts all tabs on a line to spaces according to the provided tab width.\nThis is not a simple tab to spaces replacement, since the resulting\nindentation remains the same.", "predict": "Convert tabs to spaces in a string. @param line the line to convert @param tabWidth tab width to use @return the converted string"}
{"ID": 1042, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String escapeJava(final String string) { int strLen = string.length(); StringBuilder sb = new StringBuilder(strLen); for (int i = 0; i < strLen; i++) { char c = string.charAt(i); switch (c) { case '\\b' : sb.append(\"\\\\b\"); break; case '\\t' : sb.append(\"\\\\t\"); break; case '\\n' : sb.append(\"\\\\n\"); break; case '\\f' : sb.append(\"\\\\f\"); break; case '\\r' : sb.append(\"\\\\r\"); break; case '\\\"' : sb.append(\"\\\\\\\"\"); break; case '\\\\' : sb.append(\"\\\\\\\\\"); break; default: if ((c < 32) || (c > 127)) { String hex = Integer.toHexString(c); sb.append(\"\\\\u\"); for (int k = hex.length(); k < 4; k++) { sb.append('0'); } sb.append(hex); } else { sb.append(c); } } } return sb.toString(); }. ### Assistant:", "ground_truth": "Escapes a string using java rules.", "predict": "Escape Java characters in a string. @param string the string to escape @return the escaped string"}
{"ID": 1043, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String unescapeJava(final String str) { char[] chars = str.toCharArray(); StringBuilder sb = new StringBuilder(str.length()); for (int i = 0; i < chars.length; i++) { char c = chars[i]; if (c != '\\\\') { sb.append(c); continue; } i++; c = chars[i]; switch (c) { case 'b': sb.append('\\b'); break; case 't': sb.append('\\t'); break; case 'n': sb.append('\\n'); break; case 'f': sb.append('\\f'); break; case 'r': sb.append('\\r'); break; case '\"': sb.append('\\\"'); break; case '\\\\': sb.append('\\\\'); break; case 'u' : char hex = (char) Integer.parseInt(new String(chars, i + 1, 4), 16); sb.append(hex); i += 4; break; default: throw new IllegalArgumentException(\"Invalid escaping character: \" + c); } } return sb.toString(); }. ### Assistant:", "ground_truth": "Unescapes a string using java rules.", "predict": "Unescape Java-style escape characters in a string. @param str the string to escape @return the escaped string"}
{"ID": 1044, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings({\"unchecked\"}) public <T> T getBean(final Class<T> type) { String name = resolveBeanName(type); return (T) getBean(name); }. ### Assistant:", "ground_truth": "Returns Petite bean instance. Bean name will be resolved from provided type.", "predict": "Get a bean by its type. If the bean is not found, it will be created. @param type the type of the bean to be returned. @return the bean of the given type. @throws BeansException if the bean could not be created. @throws IllegalArgumentException if the bean name is not valid."}
{"ID": 1045, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <T> T getBean(final String name) { // Lookup for registered bean definition. BeanDefinition def = lookupBeanDefinition(name); if (def == null) { // try provider ProviderDefinition providerDefinition = providers.get(name); if (providerDefinition != null) { return (T) invokeProvider(providerDefinition); } return null; } // Find the bean in its scope Object bean = def.scopeLookup(); if (bean == null) { // Create new bean in the scope initBeanDefinition(def); final BeanData beanData = new BeanData(this, def); registerBeanAndWireAndInjectParamsAndInvokeInitMethods(beanData); bean = beanData.bean(); } return (T) bean; }. ### Assistant:", "ground_truth": "Returns Petite bean instance.\nPetite container will find the bean in corresponding scope and all its dependencies,\neither by constructor or property injection. When using constructor injection, cyclic dependencies\ncan not be prevented, but at least they are detected.\n\n@see PetiteContainer#createBean(Class)", "predict": "Finds and returns a bean of the given name. If the bean is not found, it will be created and initialized. If the bean is found, it will be injected with any dependencies it requires. @param name the name of the bean to be found @param <T> the type of the bean to be returned @return the bean of the given name, or null if it was not found."}
{"ID": 1046, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void initBeanDefinition(final BeanDefinition def) { // init methods if (def.initMethods == null) { def.initMethods = petiteResolvers.resolveInitMethodPoint(def.type); } // destroy methods if (def.destroyMethods == null) { def.destroyMethods = petiteResolvers.resolveDestroyMethodPoint(def.type); } // properties if (def.properties == null) { def.properties = petiteResolvers.resolvePropertyInjectionPoint(def.type, def.wiringMode == WiringMode.AUTOWIRE); } // methods if (def.methods == null) { def.methods = petiteResolvers.resolveMethodInjectionPoint(def.type); } // ctors if (def.ctor == null) { def.ctor = petiteResolvers.resolveCtorInjectionPoint(def.type); } // values if (def.values == null) { def.values = paramManager.resolveParamInjectionPoints(def.type); } // sets if (def.sets == null) { def.sets = petiteResolvers.resolveSetInjectionPoint(def.type, def.wiringMode == WiringMode.AUTOWIRE); } // params if (def.params == null) { def.params = paramManager.filterParametersForBeanName(def.name, petiteConfig.getResolveReferenceParameters()); } }. ### Assistant:", "ground_truth": "Resolves and initializes bean definition. May be called multiple times.", "predict": "Inject all the necessary information into the BeanDefinition. @param def the BeanDefinition to be populated"}
{"ID": 1047, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Object invokeProvider(final ProviderDefinition provider) { if (provider.method != null) { final Object bean; if (provider.beanName != null) { // instance factory method bean = getBean(provider.beanName); } else { // static factory method bean = null; } try { return provider.method.invoke(bean); } catch (Exception ex) { throw new PetiteException(\"Invalid provider method: \" + provider.method.getName(), ex); } } throw new PetiteException(\"Invalid provider\"); }. ### Assistant:", "ground_truth": "Invokes provider to get a bean.", "predict": "Invokes the provider method. @param provider the provider @return the result of the provider method"}
{"ID": 1048, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void addBean(final String name, final Object bean, WiringMode wiringMode) { wiringMode = petiteConfig.resolveWiringMode(wiringMode); registerPetiteBean(bean.getClass(), name, SingletonScope.class, wiringMode, false, null); BeanDefinition def = lookupExistingBeanDefinition(name); registerBeanAndWireAndInjectParamsAndInvokeInitMethods(new BeanData(this, def, bean)); }. ### Assistant:", "ground_truth": "Adds object instance to the container as singleton bean.", "predict": "Registers a PetiteBean with the PetiteContainer. The bean is registered under the name specified by the user. The bean is instantiated using the provided object and injected with any dependencies it has. The PetiteBean is also wired according to the specified wiringMode. The PetiteBean is also initialized according to the specified initMethod. @param name the name of the PetiteBean @param bean the bean to register @param wiringMode the wiringMode to use when registering the bean"}
{"ID": 1049, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void setBeanProperty(final String name, final Object value) { Object bean = null; int ndx = name.length(); while (true) { ndx = name.lastIndexOf('.', ndx); if (ndx == -1) { break; } String beanName = name.substring(0, ndx); bean = getBean(beanName); if (bean != null) { break; } ndx--; } if (bean == null) { throw new PetiteException(\"Invalid bean property: \" + name); } try { BeanUtil.declared.setProperty(bean, name.substring(ndx + 1), value); } catch (Exception ex) { throw new PetiteException(\"Invalid bean property: \" + name, ex); } }. ### Assistant:", "ground_truth": "Sets petite bean property.", "predict": "Set a bean property. @param name the property name. @param value the property value."}
{"ID": 1050, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Object getBeanProperty(final String name) { int ndx = name.indexOf('.'); if (ndx == -1) { throw new PetiteException(\"Only bean name is specified, missing property name: \" + name); } String beanName = name.substring(0, ndx); Object bean = getBean(beanName); if (bean == null) { throw new PetiteException(\"Bean doesn't exist: \" + name); } try { return BeanUtil.declared.getProperty(bean, name.substring(ndx + 1)); } catch (Exception ex) { throw new PetiteException(\"Invalid bean property: \" + name, ex); } }. ### Assistant:", "ground_truth": "Returns petite bean property value.", "predict": "Get the property value of the specified bean. @param name the name of the property to get. @return the property value. @throws PetiteException if the property is invalid."}
{"ID": 1051, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void shutdown() { scopes.forEachValue(Scope::shutdown); externalsCache.clear(); beans.clear(); beansAlt.clear(); scopes.clear(); providers.clear(); beanCollections.clear(); }. ### Assistant:", "ground_truth": "Shutdowns container. After container is down, it can't be used anymore.", "predict": "Shutdown all resources."}
{"ID": 1052, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static MethodParameter[] resolveParameters(final AccessibleObject methodOrCtor) { Class[] paramTypes; Class declaringClass; String name; if (methodOrCtor instanceof Method) { Method method = (Method) methodOrCtor; paramTypes = method.getParameterTypes(); name = method.getName(); declaringClass = method.getDeclaringClass(); } else { Constructor constructor = (Constructor) methodOrCtor; paramTypes = constructor.getParameterTypes(); declaringClass = constructor.getDeclaringClass(); name = CTOR_METHOD; } if (paramTypes.length == 0) { return MethodParameter.EMPTY_ARRAY; } InputStream stream; try { stream = ClassLoaderUtil.getClassAsStream(declaringClass); } catch (IOException ioex) { throw new ParamoException(\"Failed to read class bytes: \" + declaringClass.getName(), ioex); } if (stream == null) { throw new ParamoException(\"Class not found: \" + declaringClass); } try { ClassReader reader = new ClassReader(stream); MethodFinder visitor = new MethodFinder(declaringClass, name, paramTypes); reader.accept(visitor, 0); return visitor.getResolvedParameters(); } catch (IOException ioex) { throw new ParamoException(ioex); } finally { StreamUtil.close(stream); } }. ### Assistant:", "ground_truth": "Resolves method parameters from a method or constructor.\nReturns an empty array when target does not contain any parameter.\nNo caching is involved in this process, i.e. class bytecode\nis examined every time this method is called.", "predict": "Resolves the parameters of a method or constructor. The method or constructor must be accessible. @param methodOrCtor the method or constructor to resolve @return the resolved parameters of the method or constructor"}
{"ID": 1053, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public int doAfterBody() throws JspException { BodyContent body = getBodyContent(); JspWriter out = body.getEnclosingWriter(); String bodytext = populateForm(body.getString(), name -> value(name, pageContext)); try { out.print(bodytext); } catch (IOException ioex) { throw new JspException(ioex); } return SKIP_BODY; }. ### Assistant:", "ground_truth": "Performs smart form population.", "predict": "This method is called after the body has been written. It is used to add any additional content that needs to be added. @return SKIP_BODY if the body has already been written, otherwise the value of the SKIP_BODY constant."}
{"ID": 1054, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String getValue(final String... profiles) { if (hasMacro) { return propsData.resolveMacros(value, profiles); } return value; }. ### Assistant:", "ground_truth": "Returns the property value, with replaced macros.", "predict": "Returns the value of the property. If there is a macro defined, it will be expanded. If the macro is not defined, the value will be returned as is. @param profiles a list of profiles to use to resolve macros. @return the value of the property."}
{"ID": 1055, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void end() { if (parentNode != rootNode) { Node thisNode = parentNode; while (thisNode != rootNode) { if (domBuilder.config.isImpliedEndTags()) { if (implRules.implicitlyCloseTagOnEOF(thisNode.getNodeName())) { thisNode = thisNode.getParentNode(); continue; } } error(\"Unclosed tag closed: <\" + thisNode.getNodeName() + \">\"); thisNode = thisNode.getParentNode(); } } // remove whitespaces if (domBuilder.config.isIgnoreWhitespacesBetweenTags()) { removeLastChildNodeIfEmptyText(parentNode, true); } // foster if (domBuilder.config.isUseFosterRules()) { HtmlFosterRules fosterRules = new HtmlFosterRules(); fosterRules.fixFosterElements(rootNode); } // elapsed rootNode.end(); if (log.isDebugEnabled()) { log.debug(\"LagartoDom tree created in \" + rootNode.getElapsedTime() + \" ms\"); } }. ### Assistant:", "ground_truth": "Finishes the tree building. Closes unclosed tags.", "predict": "End the parsing process."}
{"ID": 1056, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Element createElementNode(final Tag tag) { boolean hasVoidTags = htmlVoidRules != null; boolean isVoid = false; boolean selfClosed = false; if (hasVoidTags) { isVoid = htmlVoidRules.isVoidTag(tag.getName()); // HTML and XHTML if (isVoid) { // it's void tag, lookup the flag selfClosed = domBuilder.config.isSelfCloseVoidTags(); } } else { // XML, no voids, lookup the flag selfClosed = domBuilder.config.isSelfCloseVoidTags(); } return new Element(rootNode, tag, isVoid, selfClosed); }. ### Assistant:", "ground_truth": "Creates new element with correct configuration.", "predict": "Create an Element node."}
{"ID": 1057, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void tag(final Tag tag) { if (!enabled) { return; } TagType tagType = tag.getType(); Element node; switch (tagType) { case START: if (domBuilder.config.isIgnoreWhitespacesBetweenTags()) { removeLastChildNodeIfEmptyText(parentNode, false); } node = createElementNode(tag); if (domBuilder.config.isImpliedEndTags()) { while (true) { String parentNodeName = parentNode.getNodeName(); if (!implRules.implicitlyCloseParentTagOnNewTag(parentNodeName, node.getNodeName())) { break; } parentNode = parentNode.getParentNode(); if (log.isDebugEnabled()) { log.debug(\"Implicitly closed tag <\" + node.getNodeName() + \"> \"); } } } parentNode.addChild(node); if (!node.isVoidElement()) { parentNode = node; } break; case END: if (domBuilder.config.isIgnoreWhitespacesBetweenTags()) { removeLastChildNodeIfEmptyText(parentNode, true); } String tagName = tag.getName().toString(); Node matchingParent = findMatchingParentOpenTag(tagName); if (matchingParent == parentNode) { // regular situation parentNode = parentNode.getParentNode(); break; } if (matchingParent == null) { // matching open tag not found, remove it error(\"Orphan closed tag ignored: </\" + tagName + \"> \" + tag.getTagPosition()); break; } // try to close it implicitly if (domBuilder.config.isImpliedEndTags()) { boolean fixed = false; while (implRules.implicitlyCloseParentTagOnTagEnd(parentNode.getNodeName(), tagName)) { parentNode = parentNode.getParentNode(); if (log.isDebugEnabled()) { log.debug(\"Implicitly closed tag <\" + tagName + \">\"); } if (parentNode == matchingParent) { parentNode = matchingParent.parentNode; fixed = true; break; } } if (fixed) { break; } } // matching tag found, but it is not a regular situation // therefore close all unclosed tags in between fixUnclosedTagsUpToMatchingParent(tag, matchingParent); break; case SELF_CLOSING: if (domBuilder.config.isIgnoreWhitespacesBetweenTags()) { removeLastChildNodeIfEmptyText(parentNode, false); } node = createElementNode(tag); parentNode.addChild(node); break; } }. ### Assistant:", "ground_truth": "Visits tags.", "predict": "Tagging a node. @param tag tag to be tagged."}
{"ID": 1058, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void removeLastChildNodeIfEmptyText(final Node parentNode, final boolean closedTag) { if (parentNode == null) { return; } Node lastChild = parentNode.getLastChild(); if (lastChild == null) { return; } if (lastChild.getNodeType() != Node.NodeType.TEXT) { return; } if (closedTag) { if (parentNode.getChildNodesCount() == 1) { return; } } Text text = (Text) lastChild; if (text.isBlank()) { lastChild.detachFromParent(); } }. ### Assistant:", "ground_truth": "Removes last child node if contains just empty text.", "predict": "Remove last child node if it is empty text. @param parentNode parent node @param closedTag closed tag flag"}
{"ID": 1059, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String getQueryString() { if (sqlTemplate == null) { return toString(); } if (parameterValues == null) { return sqlTemplate; } final StringBuilder sb = new StringBuilder(); int qMarkCount = 0; final StringTokenizer tok = new StringTokenizer(sqlTemplate + ' ', \"?\"); while (tok.hasMoreTokens()) { final String oneChunk = tok.nextToken(); sb.append(oneChunk); try { Object value = null; if (parameterValues.size() > 1 + qMarkCount) { value = parameterValues.get(1 + qMarkCount); qMarkCount++; } else { if (!tok.hasMoreTokens()) { value = \"\"; } } if (value == null) { value = \"?\"; } sb.append(value); } catch (Throwable th) { sb.append(\"--- Building query failed: \").append(th.toString()); } } return sb.toString().trim(); }. ### Assistant:", "ground_truth": "Returns the query string.", "predict": "Returns the SQL query string that would be generated by this object. If parameter values have been set, they will be included in the query string. If parameter values have not been set, the SQL template will be returned. @return the SQL query string that would be generated by this object."}
{"ID": 1060, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String getActionClassName(final Object action) { Class clazz = action.getClass(); clazz = ProxettaUtil.resolveTargetClass(clazz); return clazz.getName(); }. ### Assistant:", "ground_truth": "Returns correct action class name. Detects Proxetta classes.", "predict": "Get the classname of the action. This method is overridden to allow for dynamic loading of actions. @param action the action @return the classname of the action."}
{"ID": 1061, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected int calculateTo(final int from, final int count, final int size) { int to = size; if (count != -1) { to = from + count; if (to > size) { to = size; } } return to; }. ### Assistant:", "ground_truth": "Calculates 'TO'.", "predict": "Calculates the index of the element that should be inserted at the given index. The index is inclusive. If the count is not specified, the index is calculated as the sum of the current index and the count. If the count is negative, the index is calculated as the sum of the current index and the count. @param from the index of the element that should be inserted. @param count the number of elements that should be inserted. @param size the size of the array. @return the index of the element that should be inserted."}
{"ID": 1062, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void iterateCollection(final Collection collection, final int from, final int count, final PageContext pageContext) throws JspException { JspFragment body = getJspBody(); Iterator iter = collection.iterator(); int i = 0; int to = calculateTo(from, count, collection.size()); while (i < to) { Object item = iter.next(); if (i >= from) { if (status != null) { iteratorStatus.next(!iter.hasNext()); } TagUtil.setScopeAttribute(var, item, scope, pageContext); TagUtil.invokeBody(body); } i++; } }. ### Assistant:", "ground_truth": "Iterates collection.", "predict": "Iterate through the collection and render each item. @param collection the collection to iterate through. @param from the index of the first item to render. @param count the number of items to render. @param pageContext the page context. @throws JspException if there is an error rendering the page."}
{"ID": 1063, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void iterateArray(final Object[] array, final int from, final int count, final PageContext pageContext) throws JspException { JspFragment body = getJspBody(); int len = array.length; int to = calculateTo(from, count, len); int last = to - 1; for (int i = from; i < to; i++) { Object item = array[i]; if (status != null) { iteratorStatus.next(i == last); } TagUtil.setScopeAttribute(var, item, scope, pageContext); TagUtil.invokeBody(body); } }. ### Assistant:", "ground_truth": "Iterates arrays.", "predict": "Iterate through the array and render each item. @param array the array to iterate through. @param from the starting index of the array to iterate through. @param count the number of items to iterate through. @param pageContext the page context. @throws JspException if there is an error."}
{"ID": 1064, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String replace(final String s, final String sub, final String with) { if (sub.isEmpty()) { return s; } int c = 0; int i = s.indexOf(sub, c); if (i == -1) { return s; } int length = s.length(); StringBuilder sb = new StringBuilder(length + with.length()); do { sb.append(s, c, i); sb.append(with); c = i + sub.length(); } while ((i = s.indexOf(sub, c)) != -1); if (c < length) { sb.append(s, c, length); } return sb.toString(); }. ### Assistant:", "ground_truth": "Replaces all occurrences of a certain pattern in a string with a\nreplacement string. This is the fastest replace function known to author.\n\n@param s      string to be inspected\n@param sub    string pattern to be replaced\n@param with   string that should go where the pattern was", "predict": "Replace all occurrences of a substring in a string with another. @param s a string @param sub a substring @param with a replacement string @return the modified string"}
{"ID": 1065, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String replaceChar(final String s, final char sub, final char with) { int startIndex = s.indexOf(sub); if (startIndex == -1) { return s; } char[] str = s.toCharArray(); for (int i = startIndex; i < str.length; i++) { if (str[i] == sub) { str[i] = with; } } return new String(str); }. ### Assistant:", "ground_truth": "Replaces all occurrences of a character in a string.\n\n@param s      input string\n@param sub    character to replace\n@param with   character to replace with", "predict": "Replace a character in a string. @param s The string to replace. @param sub The character to replace. @param with The replacement character. @return The modified string."}
{"ID": 1066, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String replaceChars(final String s, final char[] sub, final char[] with) { char[] str = s.toCharArray(); for (int i = 0; i < str.length; i++) { char c = str[i]; for (int j = 0; j < sub.length; j++) { if (c == sub[j]) { str[i] = with[j]; break; } } } return new String(str); }. ### Assistant:", "ground_truth": "Replaces all occurrences of a characters in a string.\n\n@param s      input string\n@param sub    characters to replace\n@param with   characters to replace with", "predict": "Replace characters in a string. @param s The string to replace characters in. @param sub The characters to replace. @param with The characters to replace with. @return The modified string."}
{"ID": 1067, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String replaceFirst(final String s, final String sub, final String with) { int i = s.indexOf(sub); if (i == -1) { return s; } return s.substring(0, i) + with + s.substring(i + sub.length()); }. ### Assistant:", "ground_truth": "Replaces the very first occurrence of a substring with supplied string.\n\n@param s      source string\n@param sub    substring to replace\n@param with   substring to replace with", "predict": "Replace the first occurrence of the given substring with the given replacement string. @param s the original string @param sub the substring to replace @param with the replacement string @return the modified string"}
{"ID": 1068, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String replaceFirst(final String s, final char sub, final char with) { int index = s.indexOf(sub); if (index == -1) { return s; } char[] str = s.toCharArray(); str[index] = with; return new String(str); }. ### Assistant:", "ground_truth": "Replaces the very first occurrence of a character in a string.\n\n@param s      string\n@param sub    char to replace\n@param with   char to replace with", "predict": "Replace the first occurrence of a character with another character. @param s The string to replace. @param sub The character to replace. @param with The replacement character. @return The modified string."}
{"ID": 1069, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String replaceLast(final String s, final String sub, final String with) { int i = s.lastIndexOf(sub); if (i == -1) { return s; } return s.substring(0, i) + with + s.substring(i + sub.length()); }. ### Assistant:", "ground_truth": "Replaces the very last occurrence of a substring with supplied string.\n\n@param s      source string\n@param sub    substring to replace\n@param with   substring to replace with", "predict": "Replace the last occurrence of a substring with another. @param s the string to replace @param sub the substring to replace @param with the replacement string @return the modified string"}
{"ID": 1070, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String replaceLast(final String s, final char sub, final char with) { int index = s.lastIndexOf(sub); if (index == -1) { return s; } char[] str = s.toCharArray(); str[index] = with; return new String(str); }. ### Assistant:", "ground_truth": "Replaces the very last occurrence of a character in a string.\n\n@param s      string\n@param sub    char to replace\n@param with   char to replace with", "predict": "Replace last character with new character. @param s String to replace last character. @param sub Character to replace last character. @param with Character to replace last character. @return String with last character replaced."}
{"ID": 1071, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String remove(final String s, final String sub) { int c = 0; int sublen = sub.length(); if (sublen == 0) { return s; } int i = s.indexOf(sub, c); if (i == -1) { return s; } StringBuilder sb = new StringBuilder(s.length()); do { sb.append(s, c, i); c = i + sublen; } while ((i = s.indexOf(sub, c)) != -1); if (c < s.length()) { sb.append(s, c, s.length()); } return sb.toString(); }. ### Assistant:", "ground_truth": "Removes all substring occurrences from the string.\n\n@param s      source string\n@param sub    substring to remove", "predict": "Remove all occurrences of the specified substring from the beginning of the string. @param s the string to remove from. @param sub the substring to remove. @return the modified string."}
{"ID": 1072, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String remove(final String string, final char ch) { int stringLen = string.length(); char[] result = new char[stringLen]; int offset = 0; for (int i = 0; i < stringLen; i++) { char c = string.charAt(i); if (c == ch) { continue; } result[offset] = c; offset++; } if (offset == stringLen) { return string; // no changes } return new String(result, 0, offset); }. ### Assistant:", "ground_truth": "Removes a single character from string.\n\n@param string    source string\n@param ch  character to remove", "predict": "Remove all occurrences of a character from a string. @param string The string to remove from. @param ch The character to remove. @return The modified string."}
{"ID": 1073, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean isAllEmpty(final String... strings) { for (String string : strings) { if (!isEmpty(string)) { return false; } } return true; }. ### Assistant:", "ground_truth": "Determines if string array contains empty strings.\n@see #isEmpty(CharSequence)", "predict": "Check if all strings are empty. @param strings the strings to check. @return true if all strings are empty."}
{"ID": 1074, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean isAllBlank(final String... strings) { for (String string : strings) { if (!isBlank(string)) { return false; } } return true; }. ### Assistant:", "ground_truth": "Determines if string array contains just blank strings.", "predict": "Returns true if all strings are blank. @param strings the strings to check @return true if all strings are blank, false otherwise"}
{"ID": 1075, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String[] toStringArray(final Object value) { if (value == null) { return new String[0]; } Class<?> type = value.getClass(); if (!type.isArray()) { return new String[] {value.toString()}; } Class componentType = type.getComponentType(); if (componentType.isPrimitive()) { if (componentType == int.class) { return ArraysUtil.toStringArray((int[]) value); } else if (componentType == long.class) { return ArraysUtil.toStringArray((long[]) value); } else if (componentType == double.class) { return ArraysUtil.toStringArray((double[]) value); } else if (componentType == float.class) { return ArraysUtil.toStringArray((float[]) value); } else if (componentType == boolean.class) { return ArraysUtil.toStringArray((boolean[]) value); } else if (componentType == short.class) { return ArraysUtil.toStringArray((short[]) value); } else if (componentType == byte.class) { return ArraysUtil.toStringArray((byte[]) value); } else { throw new IllegalArgumentException(); } } else { return ArraysUtil.toStringArray((Object[]) value); } }. ### Assistant:", "ground_truth": "Converts an array object to array of strings, where every element\nof input array is converted to a string. If input is not an array,\nthe result will still be an array with one element.", "predict": "Convert the given value to a string array. If the value is null, returns an empty array. If the value is an array, returns the array itself. If the value is not an array, throws an exception. @param value the value to convert to a string array. @return the string array."}
{"ID": 1076, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static String changeFirstCharacterCase(final boolean capitalize, final String string) { int strLen = string.length(); if (strLen == 0) { return string; } char ch = string.charAt(0); char modifiedCh; if (capitalize) { modifiedCh = Character.toUpperCase(ch); } else { modifiedCh = Character.toLowerCase(ch); } if (modifiedCh == ch) { // no change, return unchanged string return string; } char[] chars = string.toCharArray(); chars[0] = modifiedCh; return new String(chars); }. ### Assistant:", "ground_truth": "Internal method for changing the first character case.", "predict": "Capitalize the first character of a string. If the first character is already capitalized, no change is made. @param capitalize Whether the first character should be capitalized. @param string The string to capitalize. @return The modified string."}
{"ID": 1077, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String title(final String string) { char[] chars = string.toCharArray(); boolean wasWhitespace = true; for (int i = 0; i < chars.length; i++) { char c = chars[i]; if (CharUtil.isWhitespace(c)) { wasWhitespace = true; } else { if (wasWhitespace) { chars[i] = Character.toUpperCase(c); } else { chars[i] = Character.toLowerCase(c); } wasWhitespace = false; } } return new String(chars); }. ### Assistant:", "ground_truth": "Makes a title-cased string from given input.", "predict": "Capitalizes all characters in the input string. @param string the input string @return the capitalized string"}
{"ID": 1078, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String compressChars(final String s, final char c) { int len = s.length(); StringBuilder sb = new StringBuilder(len); boolean wasChar = false; for (int i = 0; i < len; i++) { char c1 = s.charAt(i); if (c1 == c) { if (wasChar) { continue; } wasChar = true; } else { wasChar = false; } sb.append(c1); } if (sb.length() == len) { return s; } return sb.toString(); }. ### Assistant:", "ground_truth": "Compress multiple occurrences of given char into one appearance.", "predict": "Compresses a string by replacing consecutive whitespaces with a single space. @param s The string to compress. @param c The character to replace whitespaces with. @return The compressed string."}
{"ID": 1079, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean startsWithIgnoreCase(final String src, final String subS, final int startIndex) { String sub = subS.toLowerCase(); int sublen = sub.length(); if (startIndex + sublen > src.length()) { return false; } int j = 0; int i = startIndex; while (j < sublen) { char source = Character.toLowerCase(src.charAt(i)); if (sub.charAt(j) != source) { return false; } j++; i++; } return true; }. ### Assistant:", "ground_truth": "Tests if this string starts with the specified prefix with ignored case\nand with the specified prefix beginning a specified index.\n\n@param src        source string to test\n@param subS       starting substring\n@param startIndex index from where to test\n\n@return <code>true</code> if the character sequence represented by the argument is\na prefix of the character sequence represented by this string;\n<code>false</code> otherwise.", "predict": "Returns true if the first characters of src are equal to the first characters of subS ignoring case. @param src the source string @param subS the substring to compare against @param startIndex the start index of the substring to compare @return true if the first characters of src are equal to the first characters of subS ignoring case."}
{"ID": 1080, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean endsWithChar(final String s, final char c) { if (s.length() == 0) { return false; } return s.charAt(s.length() - 1) == c; }. ### Assistant:", "ground_truth": "Returns if string ends with provided character.", "predict": "Returns true if the given string ends with the given character. @param s the string to check @param c the character to check for @return true if the string ends with the character, false otherwise"}
{"ID": 1081, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int countIgnoreCase(final String source, final String sub) { int count = 0; int j = 0; int sublen = sub.length(); if (sublen == 0) { return 0; } while (true) { int i = indexOfIgnoreCase(source, sub, j); if (i == -1) { break; } count++; j = i + sublen; } return count; }. ### Assistant:", "ground_truth": "Count substring occurrences in a source string, ignoring case.\n\n@param source\tsource string\n@param sub\t\tsubstring to count\n@return\t\t\tnumber of substring occurrences", "predict": "Counts the number of occurrences of a substring in a string, ignoring case. @param source the input string @param sub the substring to search for @return the number of occurrences of the substring in the input string"}
{"ID": 1082, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean equalsIgnoreCase(final String[] as, final String[] as1) { if (as.length != as1.length) { return false; } for (int i = 0; i < as.length; i++) { if (!as[i].equalsIgnoreCase(as1[i])) { return false; } } return true; }. ### Assistant:", "ground_truth": "Compares two string arrays.\n\n@param as     first string array\n@param as1    second string array\n\n@return true if all array elements matches", "predict": "Compare two arrays ignoring case. @param as the first array @param as1 the second array @return true if the arrays are equal ignoring case, false otherwise"}
{"ID": 1083, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int indexOfWhitespace(final String string, final int startindex, final int endindex) { for (int i = startindex; i < endindex; i++) { if (CharUtil.isWhitespace(string.charAt(i))) { return i; } } return -1; }. ### Assistant:", "ground_truth": "Returns first index of a whitespace character, starting from specified index offset.", "predict": "Find the index of the first whitespace character after the given startindex. @param string the string to search in. @param startindex the index to start the search at. @param endindex the index to stop the search at. @return the index of the first whitespace character after the given startindex. Returns -1 if no whitespace is found."}
{"ID": 1084, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String stripLeadingChar(final String string, final char c) { if (string.length() > 0) { if (string.charAt(0) == c) { return string.substring(1); } } return string; }. ### Assistant:", "ground_truth": "Strips leading char if string starts with one.", "predict": "Strip leading character from string. @param string String to strip leading character from. @param c Character to strip leading character from. @return String with leading character removed."}
{"ID": 1085, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String stripTrailingChar(final String string, final char c) { if (string.length() > 0) { if (string.charAt(string.length() - 1) == c) { return string.substring(0, string.length() - 1); } } return string; }. ### Assistant:", "ground_truth": "Strips trailing char if string ends with one.", "predict": "Strip a trailing character from a string. @param string The string to strip. @param c The character to strip. @return The string without the trailing character."}
{"ID": 1086, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String stripChar(final String string, final char c) { if (string.length() == 0) { return string; } if (string.length() == 1) { if (string.charAt(0) == c) { return StringPool.EMPTY; } return string; } int left = 0; int right = string.length(); if (string.charAt(left) == c) { left++; } if (string.charAt(right - 1) == c) { right--; } return string.substring(left, right); }. ### Assistant:", "ground_truth": "Strips leading and trailing char from given string.", "predict": "Strip a character from a string. @param string The string to strip. @param c The character to strip. @return The substring without the character."}
{"ID": 1087, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String stripToChar(final String string, final char c) { int ndx = string.indexOf(c); if (ndx == -1) { return string; } return string.substring(ndx); }. ### Assistant:", "ground_truth": "Strips everything up to the first appearance of given char.\nCharacter IS included in the returned string.", "predict": "Strip to char. @param string the string @param c the c @return the string"}
{"ID": 1088, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String stripFromChar(final String string, final char c) { int ndx = string.indexOf(c); if (ndx == -1) { return string; } return string.substring(0, ndx); }. ### Assistant:", "ground_truth": "Strips everything from the first appearance of given char.\nCharacter IS NOT included in the returned string.", "predict": "Remove a character from a string. @param string the string to remove from @param c the character to remove @return the string without the character"}
{"ID": 1089, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void cropAll(final String... strings) { for (int i = 0; i < strings.length; i++) { String string = strings[i]; if (string != null) { string = crop(strings[i]); } strings[i] = string; } }. ### Assistant:", "ground_truth": "Crops all elements of string array.", "predict": "Crops all the given strings."}
{"ID": 1090, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String trimLeft(final String src) { int len = src.length(); int st = 0; while ((st < len) && (CharUtil.isWhitespace(src.charAt(st)))) { st++; } return st > 0 ? src.substring(st) : src; }. ### Assistant:", "ground_truth": "Trim whitespaces from the left.", "predict": "Trims whitespaces from the beginning of the string. @param src the string to be trimmed. @return the trimmed string."}
{"ID": 1091, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String trimRight(final String src) { int len = src.length(); int count = len; while ((len > 0) && (CharUtil.isWhitespace(src.charAt(len - 1)))) { len--; } return (len < count) ? src.substring(0, len) : src; }. ### Assistant:", "ground_truth": "Trim whitespaces from the right.", "predict": "Trim the last whitespaces from the input string. @param src the input string. @return the trimmed string."}
{"ID": 1092, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int[] indexOfRegion(final String string, final String leftBoundary, final String rightBoundary, final int offset) { int ndx = offset; int[] res = new int[4]; ndx = string.indexOf(leftBoundary, ndx); if (ndx == -1) { return null; } res[0] = ndx; ndx += leftBoundary.length(); res[1] = ndx; ndx = string.indexOf(rightBoundary, ndx); if (ndx == -1) { return null; } res[2] = ndx; res[3] = ndx + rightBoundary.length(); return res; }. ### Assistant:", "ground_truth": "Returns indexes of the first region without escaping character.\n@see #indexOfRegion(String, String, String, char, int)", "predict": "Finds the indices of a region in a string. The region is defined by two boundaries. The boundaries are inclusive. The offset is used to determine the starting position of the search. If the boundaries are not found, the method returns null. The boundaries are not included in the returned indices. @param string the string to search. @param leftBoundary the left boundary of the region. @param rightBoundary the right boundary of the region. @param offset the starting position of the search. @return the indices of the region or null if the region is not found."}
{"ID": 1093, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String join(final Collection collection, final char separator) { if (collection == null) { return null; } if (collection.size() == 0) { return StringPool.EMPTY; } final StringBuilder sb = new StringBuilder(collection.size() * 16); final Iterator it = collection.iterator(); for (int i = 0; i < collection.size(); i++) { if (i > 0) { sb.append(separator); } sb.append(it.next()); } return sb.toString(); }. ### Assistant:", "ground_truth": "Joins an collection of objects into one string with separator.", "predict": "Join the elements of a collection into a single string separated by the specified separator. @param collection the collection to join @param separator the separator to use @return the joined string"}
{"ID": 1094, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String join(final Object[] array, final String separator) { if (array == null) { return null; } if (array.length == 0) { return StringPool.EMPTY; } if (array.length == 1) { return String.valueOf(array[0]); } final StringBuilder sb = new StringBuilder(array.length * 16); for (int i = 0; i < array.length; i++) { if (i > 0) { sb.append(separator); } sb.append(array[i]); } return sb.toString(); }. ### Assistant:", "ground_truth": "Joins an array of objects into one string with separator.", "predict": "Join an array of objects with a separator. @param array the array of objects to join. @param separator the separator to use. @return the joined array."}
{"ID": 1095, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String convertCharset(final String source, final String srcCharsetName, final String newCharsetName) { if (srcCharsetName.equals(newCharsetName)) { return source; } return StringUtil.newString(StringUtil.getBytes(source, srcCharsetName), newCharsetName); }. ### Assistant:", "ground_truth": "Converts string charset. If charset names are the same, the same string is returned.", "predict": "Convert the string from srcCharsetName to newCharsetName. If the srcCharsetName is the same as the newCharsetName, no conversion is done. Otherwise, the string is converted to bytes using srcCharsetName and then converted back to the newCharsetName. @param source the string to convert. @param srcCharsetName the source charset. @param newCharsetName the destination charset. @return the converted string."}
{"ID": 1096, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean isCharAtEqual(final String string, final int index, final char charToCompare) { if ((index < 0) || (index >= string.length())) { return false; } return string.charAt(index) == charToCompare; }. ### Assistant:", "ground_truth": "Safely compares provided char with char on given location.", "predict": "Check if the character at the specified index is equal to the specified character. @param string the string to check. @param index the index of the character to check. @param charToCompare the character to compare. @return true if the character at the specified index is equal to the specified character. @throws IllegalArgumentException if the index is out of range."}
{"ID": 1097, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String surround(String string, final String prefix, final String suffix) { if (!string.startsWith(prefix)) { string = prefix + string; } if (!string.endsWith(suffix)) { string += suffix; } return string; }. ### Assistant:", "ground_truth": "Surrounds the string with provided prefix and suffix if such missing from string.", "predict": "Surround a string with prefix and suffix. If the string doesn't start with prefix, it will be prepended. If the string doesn't end with suffix, it will be appended. @param string the string to surround @param prefix the prefix to prepend @param suffix the suffix to append @return the surrounded string"}
{"ID": 1098, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String prefix(String string, final String prefix) { if (!string.startsWith(prefix)) { string = prefix + string; } return string; }. ### Assistant:", "ground_truth": "Inserts prefix if doesn't exist.", "predict": "Prefix a string with a prefix. If the prefix is already present, it is not modified. @param string The string to prefix. @param prefix The prefix to add. @return The prefixed string."}
{"ID": 1099, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String suffix(String string, final String suffix) { if (!string.endsWith(suffix)) { string += suffix; } return string; }. ### Assistant:", "ground_truth": "Appends suffix if doesn't exist.", "predict": "Adds the suffix to the end of the string. If the string already ends with the suffix, nothing is done. @param string the string to append the suffix to @param suffix the suffix to append @return the original string with the suffix appended"}
{"ID": 1100, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String cutToIndexOf(String string, final String substring) { int i = string.indexOf(substring); if (i != -1) { string = string.substring(0, i); } return string; }. ### Assistant:", "ground_truth": "Cuts the string from beginning to the first index of provided substring.", "predict": "Cut a string to the index of a substring. @param string The string to cut. @param substring The substring to cut to. @return The cut string."}
{"ID": 1101, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String cutFromIndexOf(String string, final String substring) { int i = string.indexOf(substring); if (i != -1) { string = string.substring(i); } return string; }. ### Assistant:", "ground_truth": "Cuts the string from the first index of provided substring to the end.", "predict": "Cuts a substring from a string. @param string The string to cut from. @param substring The substring to cut. @return The substring without the first occurrence of the substring."}
{"ID": 1102, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String cutPrefix(String string, final String prefix) { if (string.startsWith(prefix)) { string = string.substring(prefix.length()); } return string; }. ### Assistant:", "ground_truth": "Cuts prefix if exists.", "predict": "Cut prefix from string. @param string the string @param prefix the prefix @return the string"}
{"ID": 1103, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String cutSuffix(String string, final String suffix) { if (string.endsWith(suffix)) { string = string.substring(0, string.length() - suffix.length()); } return string; }. ### Assistant:", "ground_truth": "Cuts sufix if exists.", "predict": "Cut suffix from string. @param string the string @param suffix suffix to cut @return the string"}
{"ID": 1104, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String cutSurrounding(final String string, final String prefix, final String suffix) { int start = 0; int end = string.length(); if (string.startsWith(prefix)) { start = prefix.length(); } if (string.endsWith(suffix)) { end -= suffix.length(); } if (end <= start) { return StringPool.EMPTY; } return string.substring(start, end); }. ### Assistant:", "ground_truth": "Removes surrounding prefix and suffixes.", "predict": "Cut surrounding whitespaces. @param string The string to cut surrounding whitespaces. @param prefix The prefix whitespaces. @param suffix The suffix whitespaces. @return The cut string."}
{"ID": 1105, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String insert(final String src, final String insert, int offset) { if (offset < 0) { offset = 0; } if (offset > src.length()) { offset = src.length(); } StringBuilder sb = new StringBuilder(src); sb.insert(offset, insert); return sb.toString(); }. ### Assistant:", "ground_truth": "Inserts a string on provided offset.", "predict": "Insert a string into a string at a specific offset. @param src The source string. @param insert The string to insert. @param offset The offset to insert at. @return The modified string."}
{"ID": 1106, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String repeat(final String source, int count) { StringBand result = new StringBand(count); while (count > 0) { result.append(source); count--; } return result.toString(); }. ### Assistant:", "ground_truth": "Creates a new string that contains the provided string a number of times.", "predict": "Repeat a string a specified number of times. @param source The string to repeat. @param count The number of times to repeat the string. @return The repeated string."}
{"ID": 1107, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String reverse(final String s) { StringBuilder result = new StringBuilder(s.length()); for (int i = s.length() -1; i >= 0; i--) { result.append(s.charAt(i)); } return result.toString(); }. ### Assistant:", "ground_truth": "Reverse a string.", "predict": "Reverse a string. @param s the string to reverse @return the reversed string"}
{"ID": 1108, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String maxCommonPrefix(final String one, final String two) { final int minLength = Math.min(one.length(), two.length()); final StringBuilder sb = new StringBuilder(minLength); for (int pos = 0; pos < minLength; pos++) { final char currentChar = one.charAt(pos); if (currentChar != two.charAt(pos)) { break; } sb.append(currentChar); } return sb.toString(); }. ### Assistant:", "ground_truth": "Returns max common prefix of two strings.", "predict": "Find the longest common prefix between two strings. @param one the first string @param two the second string @return the longest common prefix between the two strings, or null if they are not equal"}
{"ID": 1109, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String findCommonPrefix(final String... strings) { StringBuilder prefix = new StringBuilder(); int index = 0; char c = 0; loop: while (true) { for (int i = 0; i < strings.length; i++) { String s = strings[i]; if (index == s.length()) { break loop; } if (i == 0) { c = s.charAt(index); } else { if (s.charAt(index) != c) { break loop; } } } index++; prefix.append(c); } return prefix.length() == 0 ? StringPool.EMPTY : prefix.toString(); }. ### Assistant:", "ground_truth": "Finds common prefix for several strings. Returns an empty string if\narguments do not have a common prefix.", "predict": "Find the common prefix of a list of strings. @param strings the strings to find the common prefix of. @return the common prefix of the strings."}
{"ID": 1110, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String shorten(String s, int length, final String suffix) { length -= suffix.length(); if (s.length() > length) { for (int j = length; j >= 0; j--) { if (CharUtil.isWhitespace(s.charAt(j))) { length = j; break; } } String temp = s.substring(0, length); s = temp.concat(suffix); } return s; }. ### Assistant:", "ground_truth": "Shorten string to given length.", "predict": "Shorten a string by a given length, taking into account a suffix. The suffix is optional, but if it's provided, it will be prepended to the shortened string. @param s the string to shorten @param length the desired length of the shortened string @param suffix the suffix to prepend to the shortened string @return the shortened string"}
{"ID": 1111, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String toUpperCase(final String s, Locale locale) { if (s == null) { return null; } StringBuilder sb = null; for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); if (c > 127) { // found non-ascii char, fallback to the slow unicode detection if (locale == null) { locale = Locale.getDefault(); } return s.toUpperCase(locale); } if ((c >= 'a') && (c <= 'z')) { if (sb == null) { sb = new StringBuilder(s); } sb.setCharAt(i, (char)(c - 32)); } } if (sb == null) { return s; } return sb.toString(); }. ### Assistant:", "ground_truth": "Converts all of the characters in the string to upper case, based on the\nlocale.\n\n@param  s the string to convert\n@param  locale apply this locale's rules\n@return the string, converted to upper case, or <code>null</code> if the\nstring is <code>null</code>", "predict": "Converts the given string to uppercase. The locale is used to determine the correct casing rules. If no locale is specified, the default locale is used. If the input string is null, the method returns null. @param s the string to convert. @param locale the locale to use for determining casing rules. @return the converted string."}
{"ID": 1112, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String removeQuotes(final String string) { if ( (startsWithChar(string, '\\'') && endsWithChar(string, '\\'')) || (startsWithChar(string, '\"') && endsWithChar(string, '\"')) || (startsWithChar(string, '`') && endsWithChar(string, '`')) ) { return substring(string, 1, -1); } return string; }. ### Assistant:", "ground_truth": "Removes starting and ending single or double quotes.", "predict": "Remove any opening or closing quotes from a string. @param string the string to remove quotes from. @return the string without quotes."}
{"ID": 1113, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String toHexString(final byte[] bytes) { char[] chars = new char[bytes.length * 2]; int i = 0; for (byte b : bytes) { chars[i++] = CharUtil.int2hex((b & 0xF0) >> 4); chars[i++] = CharUtil.int2hex(b & 0x0F); } return new String(chars); }. ### Assistant:", "ground_truth": "Converts bytes to hex string.", "predict": "Convert a byte array to a hexadecimal string. @param bytes the bytes to convert @return the hexadecimal string"}
{"ID": 1114, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static byte[] getBytes(final String string) { try { return string.getBytes(JoddCore.encoding); } catch (UnsupportedEncodingException e) { throw new RuntimeException(e); } }. ### Assistant:", "ground_truth": "Returns String bytes using Jodds default encoding.", "predict": "Get bytes from string. @return bytes @throws RuntimeException if encoding is not supported"}
{"ID": 1115, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static char detectQuoteChar(final String str) { if (str.length() < 2) { return 0; } final char c = str.charAt(0); if (c != str.charAt(str.length() - 1)) { return 0; } if (c == '\\'' || c == '\"' || c == '`') { return c; } return 0; }. ### Assistant:", "ground_truth": "Detects quote character or return 0.", "predict": "Detect the quote character in a string. @param str The string to check. @return The quote character or 0 if none found."}
{"ID": 1116, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void visit(final String name, final Object value) { if (av != null) { av.visit(name, value); } }. ### Assistant:", "ground_truth": "Visits a primitive value of the annotation.\n\n@param name the value name.\n@param value the actual value, whose type must be {@link Byte}, {@link Boolean}, {@link\nCharacter}, {@link Short}, {@link Integer} , {@link Long}, {@link Float}, {@link Double},\n{@link String} or {@link Type} of {@link Type#OBJECT} or {@link Type#ARRAY} sort. This\nvalue can also be an array of byte, boolean, short, char, int, long, float or double values\n(this is equivalent to using {@link #visitArray} and visiting each array element in turn,\nbut is more convenient).", "predict": "Visit the given value."}
{"ID": 1117, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void visitEnum(final String name, final String descriptor, final String value) { if (av != null) { av.visitEnum(name, descriptor, value); } }. ### Assistant:", "ground_truth": "Visits an enumeration value of the annotation.\n\n@param name the value name.\n@param descriptor the class descriptor of the enumeration class.\n@param value the actual enumeration value.", "predict": "Visits an enum. @param name the name of the enum. @param descriptor the descriptor of the enum. @param value the value of the enum."}
{"ID": 1118, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public AnnotationVisitor visitAnnotation(final String name, final String descriptor) { if (av != null) { return av.visitAnnotation(name, descriptor); } return null; }. ### Assistant:", "ground_truth": "Visits a nested annotation value of the annotation.\n\n@param name the value name.\n@param descriptor the class descriptor of the nested annotation class.\n@return a visitor to visit the actual nested annotation value, or {@literal null} if this\nvisitor is not interested in visiting this nested annotation. <i>The nested annotation\nvalue must be fully visited before calling other methods on this annotation visitor</i>.", "predict": "Visits an annotation of the class file. @param name the type of the annotation. @param descriptor the class descriptor of the annotation. @return an AnnotationVisitor to visit the annotation. @see AnnotationVisitor@see ClassVisitor#visitAnnotation"}
{"ID": 1119, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <E> DbEntityDescriptor<E> registerType(final Class<E> type) { DbEntityDescriptor<E> ded = createDbEntityDescriptor(type); DbEntityDescriptor<E> existing = descriptorsMap.put(type, ded); if (log.isDebugEnabled()) { log.debug(\"Register \" + type.getName() + \" as \" + ded.getTableName()); } if (existing != null) { if (ded.getType() == type) { return ded; } throw new DbOomException(\"Type already registered: \" + existing.getType()); } existing = entityNamesMap.put(ded.getEntityName(), ded); if (existing != null) { throw new DbOomException(\"Name '\" + ded.getEntityName() + \"' already mapped to an entity: \" + existing.getType()); } return ded; }. ### Assistant:", "ground_truth": "Registers just type and entity names. Enough for most usages.", "predict": "Register a type. @param type The type to register. @return The registered descriptor."}
{"ID": 1120, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <E> DbEntityDescriptor<E> registerEntity(final Class<E> type, final boolean force) { if (force) { removeEntity(type); } return registerEntity(type); }. ### Assistant:", "ground_truth": "Registers entity. Existing entity will be removed if exist, so no exception will be thrown.", "predict": "Register an entity. If the entity already exists, it will not be registered again. @param type Entity type @param force If true, the entity will be registered again, even if it already exists. @return DbEntityDescriptor for the entity."}
{"ID": 1121, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <E> DbEntityDescriptor<E> removeEntity(final Class<E> type) { DbEntityDescriptor<E> ded = descriptorsMap.remove(type); if (ded == null) { ded = createDbEntityDescriptor(type); } entityNamesMap.remove(ded.getEntityName()); tableNamesMap.remove(ded.getTableName()); return ded; }. ### Assistant:", "ground_truth": "Removes entity and returns removed descriptor.", "predict": "Remove the entity descriptor for the given entity type. @param type the entity type @return the removed entity descriptor"}
{"ID": 1122, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <E> E createEntityInstance(final Class<E> type) { try { return ClassUtil.newInstance(type); } catch (Exception ex) { throw new DbOomException(ex); } }. ### Assistant:", "ground_truth": "Creates new entity instances.", "predict": "Creates a new instance of the given entity class. If the class is not found, a DbOomException is thrown. @param type the entity class @param <E> the entity type @return the entity instance"}
{"ID": 1123, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public WrapperProxettaFactory setTargetInterface(final Class targetInterface) { if (!targetInterface.isInterface()) { throw new ProxettaException(\"Not an interface: \" + targetInterface.getName()); } this.targetInterface = targetInterface; return this; }. ### Assistant:", "ground_truth": "Defines the interface of the resulting class.", "predict": "Set the target interface. @param targetInterface the target interface @return the WrapperProxettaFactory instance @throws ProxettaException if the target interface is not an interface"}
{"ID": 1124, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void injectTargetIntoWrapper(final Object target, final Object wrapper) { ProxettaUtil.injectTargetIntoWrapper(target, wrapper, targetFieldName); }. ### Assistant:", "ground_truth": "Injects target into wrapper.", "predict": "Inject target into wrapper. @param target the target object @param wrapper the wrapper object"}
{"ID": 1125, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected PropertyDescriptor[] lookupAnnotatedProperties(final Class type) { PropertyDescriptor[] properties = annotatedProperties.get(type); if (properties != null) { return properties; } ClassDescriptor cd = ClassIntrospector.get().lookup(type); PropertyDescriptor[] allProperties = cd.getAllPropertyDescriptors(); List<PropertyDescriptor> list = new ArrayList<>(); for (PropertyDescriptor propertyDescriptor : allProperties) { Annotation ann = null; if (propertyDescriptor.getFieldDescriptor() != null) { ann = propertyDescriptor.getFieldDescriptor().getField().getAnnotation(annotations); } if (ann == null && propertyDescriptor.getWriteMethodDescriptor() != null) { ann = propertyDescriptor.getWriteMethodDescriptor().getMethod().getAnnotation(annotations); } if (ann == null && propertyDescriptor.getReadMethodDescriptor() != null) { ann = propertyDescriptor.getReadMethodDescriptor().getMethod().getAnnotation(annotations); } if (ann != null) { list.add(propertyDescriptor); } } if (list.isEmpty()) { properties = EMPTY; } else { properties = list.toArray(new PropertyDescriptor[0]); } annotatedProperties.put(type, properties); return properties; }. ### Assistant:", "ground_truth": "Lookups for annotated properties. Caches all annotated properties on the first\naction class scan.", "predict": "Finds annotated properties for a given class. @param type The class to inspect @return The annotated properties for the class or an empty array if none found"}
{"ID": 1126, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public DbServer detectDatabaseAndConfigureDbOom( final ConnectionProvider cp, final DbOomConfig dbOomConfig) { cp.init(); final Connection connection = cp.getConnection(); final DbServer dbServer = detectDatabase(connection); cp.closeConnection(connection); dbServer.accept(dbOomConfig); return dbServer; }. ### Assistant:", "ground_truth": "Detects database and configure DbOom engine.", "predict": "Detect the database and configure the DbOomConfig. @param cp ConnectionProvider @param dbOomConfig DbOomConfig @return DbServer"}
{"ID": 1127, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void close() throws IOException { if (closed) { return; } if (gzipstream != null) { flushToGZip(); gzipstream.close(); gzipstream = null; } else { if (bufferCount > 0) { output.write(buffer, 0, bufferCount); bufferCount = 0; } } output.close(); closed = true; }. ### Assistant:", "ground_truth": "Closes this output stream, causing any buffered data to be flushed and any\nfurther output data to throw an IOException.", "predict": "Closes the underlying output stream."}
{"ID": 1128, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void write(final int b) throws IOException { if (closed) { throw new IOException(\"Cannot write to a closed output stream\"); } if (bufferCount >= buffer.length) { flushToGZip(); } buffer[bufferCount++] = (byte) b; }. ### Assistant:", "ground_truth": "Writes the specified byte to our output stream.", "predict": "Write a single byte to the output stream."}
{"ID": 1129, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void doFilter(final ServletRequest request, final ServletResponse response, final FilterChain chain) throws IOException, ServletException { HttpServletRequest httpRequest = (HttpServletRequest) request; HttpServletResponse httpResponse = (HttpServletResponse) response; if (isRequestedSessionIdFromURL(httpRequest)) { HttpSession session = httpRequest.getSession(false); if (session != null) { session.invalidate(); // clear session if session id in URL } } // wrap response to remove URL encoding HttpServletResponseWrapper wrappedResponse = new HttpServletResponseWrapper(httpResponse) { @Override public String encodeRedirectUrl(final String url) { return url; } @Override public String encodeRedirectURL(final String url) { return url; } @Override public String encodeUrl(final String url) { return url; } @Override public String encodeURL(final String url) { return url; } }; chain.doFilter(request, wrappedResponse); }. ### Assistant:", "ground_truth": "Filters requests to remove URL-based session identifiers.", "predict": "Invalidate the session if the session id is present in the URL."}
{"ID": 1130, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String getEncodedName() { if (name == null) { return null; } try { return MimeUtility.encodeText(name); } catch (final UnsupportedEncodingException ueex) { throw new MailException(ueex); } }. ### Assistant:", "ground_truth": "Returns encoded attachment name.\n\n@return encoded attachment name. Value may be {@code null}.", "predict": "Returns the encoded name of the message. This is used to ensure that the name is properly encoded for transmission. @return the encoded name of the message."}
{"ID": 1131, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public byte[] toByteArray() { final FastByteArrayOutputStream out; if (size != -1) { out = new FastByteArrayOutputStream(size); } else { out = new FastByteArrayOutputStream(); } writeToStream(out); return out.toByteArray(); }. ### Assistant:", "ground_truth": "Returns byte content of the attachment.\n\n@return byte array with content of the attachment.", "predict": "Returns the serialized form of this object. @return the serialized form of this object."}
{"ID": 1132, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void writeToFile(final File destination) { InputStream input = null; final OutputStream output; try { input = getDataSource().getInputStream(); output = new FileOutputStream(destination); StreamUtil.copy(input, output); } catch (final IOException ioex) { throw new MailException(ioex); } finally { StreamUtil.close(input); } }. ### Assistant:", "ground_truth": "Saves attachment to a file.\n\n@param destination The destination file to be written.", "predict": "Write the contents of the mail to a file. @param destination the file to write the contents to."}
{"ID": 1133, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void writeToStream(final OutputStream out) { InputStream input = null; try { input = getDataSource().getInputStream(); StreamUtil.copy(input, out); } catch (final IOException ioex) { throw new MailException(ioex); } finally { StreamUtil.close(input); } }. ### Assistant:", "ground_truth": "Saves attachment to the output stream.\n\n@param out OutputStream where attachment should be copied to.", "predict": "Write the contents of this mail message to the specified output stream. @param out the output stream to write to."}
{"ID": 1134, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected static String appendArgument(final String desc, final String type) { int ndx = desc.indexOf(')'); return desc.substring(0, ndx) + type + desc.substring(ndx); }. ### Assistant:", "ground_truth": "Appends argument to the existing description.", "predict": "Append argument to description. @param desc Description @param type Type of argument @return Modified description"}
{"ID": 1135, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected static String prependArgument(final String desc, final String type) { int ndx = desc.indexOf('('); ndx++; return desc.substring(0, ndx) + type + desc.substring(ndx); }. ### Assistant:", "ground_truth": "Prepends argument to the existing description.", "predict": "Prepend argument to description. @param desc Description @param type Type of argument @return Prepended description"}
{"ID": 1136, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected static String changeReturnType(final String desc, final String type) { int ndx = desc.indexOf(')'); return desc.substring(0, ndx + 1) + type; }. ### Assistant:", "ground_truth": "Changes return type.", "predict": "Change the return type of the given description. @param desc Description @param type New return type @return Original description with changed return type"}
{"ID": 1137, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void text(final CharSequence text) { if (!strip) { super.text(text); return; } int textLength = text.length(); char[] dest = new char[textLength]; int ndx = 0; boolean regularChar = true; for (int i = 0; i < textLength; i++) { char c = text.charAt(i); if (CharUtil.isWhitespace(c)) { if (regularChar) { regularChar = false; c = ' '; } else { continue; } } else { regularChar = true; } dest[ndx] = c; ndx++; } if (regularChar || (ndx != 1)) { super.text(CharBuffer.wrap(dest, 0, ndx)); strippedCharsCount += textLength - ndx; } else { strippedCharsCount += textLength; } }. ### Assistant:", "ground_truth": "Cleans unnecessary whitespaces.", "predict": "Strips whitespaces from text. @param text text to be processed."}
{"ID": 1138, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <T> void register(final Class<T> type, final TypeConverter<T> typeConverter) { converters.put(type, typeConverter); }. ### Assistant:", "ground_truth": "Registers a converter for specified type.\nUser must register converter for all super-classes as well.\n\n@param type\t\tclass that converter is for\n@param typeConverter\tconverter for provided class", "predict": "Register a type converter for a specific type. @param type The type to register @param typeConverter The type converter to register"}
{"ID": 1139, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <T> TypeConverter<T> lookup(final Class<T> type) { return converters.get(type); }. ### Assistant:", "ground_truth": "Retrieves converter for provided type. Only registered types are matched,\ntherefore subclasses must be also registered.\n\n@return founded converter or <code>null</code>", "predict": "Lookup a type converter by its class. @param type The class of the type to look up. @return The type converter for the given class. @throws IllegalArgumentException If the class is not registered."}
{"ID": 1140, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public List<Node> select(final String query) { Collection<List<CssSelector>> selectorsCollection = CSSelly.parse(query); return select(selectorsCollection); }. ### Assistant:", "ground_truth": "Selects nodes using CSS3 selector query.", "predict": "Selectors collection is a list of selectors, separated by commas."}
{"ID": 1141, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public List<Node> select(final Collection<List<CssSelector>> selectorsCollection) { List<Node> results = new ArrayList<>(); for (List<CssSelector> selectors : selectorsCollection) { processSelectors(results, selectors); } return results; }. ### Assistant:", "ground_truth": "Selected nodes using pre-parsed CSS selectors. Take in consideration\ncollection type for results grouping order.", "predict": "Selects nodes based on the given selectors. @param selectorsCollection the selectors collection @return the selected nodes"}
{"ID": 1142, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void processSelectors(final List<Node> results, final List<CssSelector> selectors) { List<Node> selectedNodes = select(rootNode, selectors); for (Node selectedNode : selectedNodes) { if (!results.contains(selectedNode)) { results.add(selectedNode); } } }. ### Assistant:", "ground_truth": "Process selectors and keep adding results.", "predict": "Process the selectors and add the selected nodes to the results list."}
{"ID": 1143, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Node selectFirst(final String query) { List<Node> selectedNodes = select(query); if (selectedNodes.isEmpty()) { return null; } return selectedNodes.get(0); }. ### Assistant:", "ground_truth": "Selects nodes using CSS3 selector query and returns the very first one.", "predict": "Select the first node that matches the query. @param query the query to match against the nodes. @return the first node that matches the query or null if none match."}
{"ID": 1144, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void walkDescendantsIteratively(final LinkedList<Node> nodes, final CssSelector cssSelector, final List<Node> result) { while (!nodes.isEmpty()) { Node node = nodes.removeFirst(); selectAndAdd(node, cssSelector, result); // append children in walking order to be processed right after this node int childCount = node.getChildNodesCount(); for (int i = childCount - 1; i >= 0; i--) { nodes.addFirst(node.getChild(i)); } } }. ### Assistant:", "ground_truth": "Walks over the child notes, maintaining the tree order and not using recursion.", "predict": "Walks descendants of the given node iteratively, applying the given cssSelector to each node found. The traversal order is the same as the order of nodes in the LinkedList. The traversal order is the same as the order of nodes in the LinkedList. The traversal order is the same as the order of nodes in the LinkedList. The traversal order is the same as the order of nodes in the LinkedList. The traversal order is the same as the order of nodes in the LinkedList. The traversal order is the same as the order of nodes in the LinkedList. The traversal order is the same as the order of nodes in the LinkedList. The traversal order is the same as the order of nodes in the LinkedList. The traversal order is the same as the order of nodes in the LinkedList. The traversal order is the same as the order of nodes in the LinkedList. The traversal order is the same as the order of nodes in the LinkedList. The traversal order is the same as"}
{"ID": 1145, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void walk(final Node rootNode, final CssSelector cssSelector, final List<Node> result) { // previous combinator determines the behavior CssSelector previousCssSelector = cssSelector.getPrevCssSelector(); Combinator combinator = previousCssSelector != null ? previousCssSelector.getCombinator() : Combinator.DESCENDANT; switch (combinator) { case DESCENDANT: LinkedList<Node> nodes = new LinkedList<>(); int childCount = rootNode.getChildNodesCount(); for (int i = 0; i < childCount; i++) { nodes.add(rootNode.getChild(i)); // recursive // selectAndAdd(node, cssSelector, result); // walk(node, cssSelector, result); } walkDescendantsIteratively(nodes, cssSelector, result); break; case CHILD: childCount = rootNode.getChildNodesCount(); for (int i = 0; i < childCount; i++) { Node node = rootNode.getChild(i); selectAndAdd(node, cssSelector, result); } break; case ADJACENT_SIBLING: Node node = rootNode.getNextSiblingElement(); if (node != null) { selectAndAdd(node, cssSelector, result); } break; case GENERAL_SIBLING: node = rootNode; while (true) { node = node.getNextSiblingElement(); if (node == null) { break; } selectAndAdd(node, cssSelector, result); } break; } }. ### Assistant:", "ground_truth": "Finds nodes in the tree that matches single selector.", "predict": "Walks the tree and adds nodes to the result list. The traversal order is the same as the order of the CSS selectors. @param rootNode the root node of the tree to traverse. @param cssSelector the CSS selector to apply to the nodes. @param result the list to add the selected nodes to."}
{"ID": 1146, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void selectAndAdd(final Node node, final CssSelector cssSelector, final List<Node> result) { // ignore all nodes that are not elements if (node.getNodeType() != Node.NodeType.ELEMENT) { return; } boolean matched = cssSelector.accept(node); if (matched) { // check for duplicates if (result.contains(node)) { return; } // no duplicate found, add it to the results result.add(node); } }. ### Assistant:", "ground_truth": "Selects single node for single selector and appends it to the results.", "predict": "Selects and adds the first node that matches the given CSS selector. The node is added to the result list. If the node is already in the list, it is skipped. @param node The node to select and add. @param cssSelector The CSS selector to use for selecting the node. @param result The list to add the selected node to."}
{"ID": 1147, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected boolean filter(final List<Node> currentResults, final Node node, final CssSelector cssSelector, final int index) { return cssSelector.accept(currentResults, node, index); }. ### Assistant:", "ground_truth": "Filter nodes.", "predict": "Filter the results based on the given cssSelector. The cssSelector is applied to the node and its children recursively. @param currentResults The current results. @param node The node to apply the cssSelector to. @param cssSelector The cssSelector to apply. @param index The index of the node in the results. @return True if the cssSelector matches, false otherwise."}
{"ID": 1148, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static char [] zzUnpackCMap(final String packed) { char [] map = new char[0x110000]; int i = 0; /* index in packed string */ int j = 0; /* index in unpacked array */ while (i < 128) { int count = packed.charAt(i++); char value = packed.charAt(i++); do map[j++] = value; while (--count > 0); } return map; }. ### Assistant:", "ground_truth": "Unpacks the compressed character translation table.\n\n@param packed   the packed character translation table\n@return         the unpacked character translation table", "predict": "unpack a CMAP char array from a packed string. @return an array of characters."}
{"ID": 1149, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private boolean zzRefill() { if (zzBuffer == null) { zzBuffer = zzChars; zzEndRead += zzChars.length; return false; } return true; }. ### Assistant:", "ground_truth": "Refills the input buffer.\n\n@return      <code>false</code>, iff there was new input.", "predict": "Fill the input buffer with a new input token. This method does not return the current state of the parser and does not reset the input."}
{"ID": 1150, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected <T> PageData<T> page(String sql, final Map params, final int page, final int pageSize, final String sortColumnName, final boolean ascending, final Class[] target) { if (sortColumnName != null) { sql = buildOrderSql(sql, sortColumnName, ascending); } int from = (page - 1) * pageSize; String pageSql = buildPageSql(sql, from, pageSize); DbSqlBuilder dbsql = sql(pageSql); DbOomQuery query = query(dbsql); query.setMaxRows(pageSize); query.setFetchSize(pageSize); query.setMap(params); List<T> list = query.list(pageSize, target); query.close(); String countSql = buildCountSql(sql); dbsql = sql(countSql); query = query(dbsql); query.setMap(params); long count = query.executeCount(); query.close(); return new PageData<>(page, (int) count, pageSize, list); }. ### Assistant:", "ground_truth": "Pages given page.\n\n@param sql sql query that lists <b>all</b> items\n@param params map of SQL parameters\n@param page current page to show\n@param pageSize number of items to show\n@param sortColumnName name of sorting column, <code>null</code> for no sorting\n@param ascending <code>true</code> for ascending order\n@param target db entities for mapping (sa usual in DbOom)", "predict": "Execute pagination sql. @param sql sql @param params params @param page page number @param pageSize page size @param sortColumnName sort column name @param ascending ascending @param target target clazz @return page data"}
{"ID": 1151, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String removeSelect(String sql) { int ndx = StringUtil.indexOfIgnoreCase(sql, \"select\"); if (ndx != -1) { sql = sql.substring(ndx + 6); // select.length() } return sql; }. ### Assistant:", "ground_truth": "Removes the first 'select' from the sql query.", "predict": "Remove select statement from sql. @param sql sql @return sql without select statement"}
{"ID": 1152, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String removeToFrom(String sql) { int from = 0; int fromCount = 1; int selectCount = 0; int lastNdx = 0; while (true) { int ndx = StringUtil.indexOfIgnoreCase(sql, \"from\", from); if (ndx == -1) { break; } // count selects in left part String left = sql.substring(lastNdx, ndx); selectCount += StringUtil.countIgnoreCase(left, \"select\"); if (fromCount >= selectCount) { sql = sql.substring(ndx); break; } // find next 'from' lastNdx = ndx; from = ndx + 4; fromCount++; } return sql; }. ### Assistant:", "ground_truth": "Removes the first part of the sql up to the relevant 'from'.\nTries to detect sub-queries in the 'select' part.", "predict": "Remove 'from' and 'to' from SQL query. @param sql SQL query @return SQL query without 'from' and 'to'"}
{"ID": 1153, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String removeLastOrderBy(String sql) { int ndx = StringUtil.lastIndexOfIgnoreCase(sql, \"order by\"); if (ndx != -1) { int ndx2 = sql.lastIndexOf(sql, ')'); if (ndx > ndx2) { sql = sql.substring(0, ndx); } } return sql; }. ### Assistant:", "ground_truth": "Removes everything from last \"order by\".", "predict": "Remove last order by. @param sql sql @return sql"}
{"ID": 1154, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String decode(final String html) { int ndx = html.indexOf('&'); if (ndx == -1) { return html; } StringBuilder result = new StringBuilder(html.length()); int lastIndex = 0; int len = html.length(); mainloop: while (ndx != -1) { result.append(html.substring(lastIndex, ndx)); lastIndex = ndx; while (html.charAt(lastIndex) != ';') { lastIndex++; if (lastIndex == len) { lastIndex = ndx; break mainloop; } } if (html.charAt(ndx + 1) == '#') { // decimal/hex char c = html.charAt(ndx + 2); int radix; if ((c == 'x') || (c == 'X')) { radix = 16; ndx += 3; } else { radix = 10; ndx += 2; } String number = html.substring(ndx, lastIndex); int i = Integer.parseInt(number, radix); result.append((char) i); lastIndex++; } else { // token String encodeToken = html.substring(ndx + 1, lastIndex); char[] replacement = ENTITY_MAP.get(encodeToken); if (replacement == null) { result.append('&'); lastIndex = ndx + 1; } else { result.append(replacement); lastIndex++; } } ndx = html.indexOf('&', lastIndex); } result.append(html.substring(lastIndex)); return result.toString(); }. ### Assistant:", "ground_truth": "Decodes HTML text. Assumes that all character references are properly closed with semi-colon.", "predict": "Decode HTML entities. @param html HTML to decode. @return Decoded HTML."}
{"ID": 1155, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String detectName(final char[] input, int ndx) { final Ptr ptr = new Ptr(); int firstIndex = 0; int lastIndex = ENTITY_NAMES.length - 1; int len = input.length; char[] lastName = null; final BinarySearchBase binarySearch = new BinarySearchBase() { @Override protected int compare(final int index) { char[] name = ENTITY_NAMES[index]; if (ptr.offset >= name.length) { return -1; } return name[ptr.offset] - ptr.c; } }; while (true) { ptr.c = input[ndx]; if (!CharUtil.isAlphaOrDigit(ptr.c)) { return lastName != null ? new String(lastName) : null; } firstIndex = binarySearch.findFirst(firstIndex, lastIndex); if (firstIndex < 0) { return lastName != null ? new String(lastName) : null; } char[] element = ENTITY_NAMES[firstIndex]; if (element.length == ptr.offset + 1) { // total match, remember position, continue for finding the longer name lastName = ENTITY_NAMES[firstIndex]; } lastIndex = binarySearch.findLast(firstIndex, lastIndex); if (firstIndex == lastIndex) { // only one element found, check the rest for (int i = ptr.offset; i < element.length; i++) { if (element[i] != input[ndx]) { return lastName != null ? new String(lastName) : null; } ndx++; } return new String(element); } ptr.offset++; ndx++; if (ndx == len) { return lastName != null ? new String(lastName) : null; } } }. ### Assistant:", "ground_truth": "Detects the longest character reference name on given position in char array.", "predict": "Find the longest entity name starting from the given index. The name is returned as a string. If no name is found, null is returned. @param input the input characters @param ndx the index of the first character of the name to find @return the name found or null if none was found"}
{"ID": 1156, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override protected String buildOrderSql(String sql, final String column, final boolean ascending) { sql += \" order by \" + column; if (!ascending) { sql += \" desc\"; } return sql; }. ### Assistant:", "ground_truth": "Appends ORDER BY keyword.", "predict": "Build SQL for ordering by a column."}
{"ID": 1157, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override protected String buildPageSql(String sql, final int from, final int pageSize) { sql = removeSelect(sql); return \"select LIMIT \" + from + ' ' + pageSize + sql; }. ### Assistant:", "ground_truth": "Builds page sql using LIMIT keyword after the SELECT.", "predict": "Build SQL for pagination."}
{"ID": 1158, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void resolveColumnsAndProperties(final Class type) { PropertyDescriptor[] allProperties = ClassIntrospector.get().lookup(type).getAllPropertyDescriptors(); List<DbEntityColumnDescriptor> decList = new ArrayList<>(allProperties.length); int idcount = 0; HashSet<String> names = new HashSet<>(allProperties.length); for (PropertyDescriptor propertyDescriptor : allProperties) { DbEntityColumnDescriptor dec = DbMetaUtil.resolveColumnDescriptors(this, propertyDescriptor, isAnnotated, columnNamingStrategy); if (dec != null) { if (!names.add(dec.getColumnName())) { throw new DbOomException(\"Duplicate column name: \" + dec.getColumnName()); } decList.add(dec); if (dec.isId) { idcount++; } } } if (decList.isEmpty()) { throw new DbOomException(\"No column mappings in entity: \" + type); } columnDescriptors = decList.toArray(new DbEntityColumnDescriptor[0]); Arrays.sort(columnDescriptors); // extract ids from sorted list if (idcount > 0) { idColumnDescriptors = new DbEntityColumnDescriptor[idcount]; idcount = 0; for (DbEntityColumnDescriptor dec : columnDescriptors) { if (dec.isId) { idColumnDescriptors[idcount++] = dec; } } } }. ### Assistant:", "ground_truth": "Resolves list of all columns and properties.", "predict": "Resolve columns and properties. @param type the type of entity to inspect"}
{"ID": 1159, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public DbEntityColumnDescriptor findByColumnName(final String columnName) { if (columnName == null) { return null; } init(); for (DbEntityColumnDescriptor columnDescriptor : columnDescriptors) { if (columnDescriptor.columnName.equalsIgnoreCase(columnName)) { return columnDescriptor; } } return null; }. ### Assistant:", "ground_truth": "Finds column descriptor by column name. Case is ignored.", "predict": "Find column descriptor by column name. @param columnName column name @return column descriptor or null if not found."}
{"ID": 1160, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public DbEntityColumnDescriptor findByPropertyName(final String propertyName) { if (propertyName == null) { return null; } init(); for (DbEntityColumnDescriptor columnDescriptor : columnDescriptors) { if (columnDescriptor.propertyName.equals(propertyName)) { return columnDescriptor; } } return null; }. ### Assistant:", "ground_truth": "Finds column descriptor by property name.", "predict": "Find a column descriptor by its property name. @param propertyName the property name of the column descriptor to find. @return the column descriptor with the matching property name, or null if none found."}
{"ID": 1161, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String getPropertyName(final String columnName) { DbEntityColumnDescriptor dec = findByColumnName(columnName); return dec == null ? null : dec.propertyName; }. ### Assistant:", "ground_truth": "Returns property name for specified column name.", "predict": "Get the property name of the column. @param columnName the column name @return the property name of the column"}
{"ID": 1162, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String getColumnName(final String propertyName) { DbEntityColumnDescriptor dec = findByPropertyName(propertyName); return dec == null ? null : dec.columnName; }. ### Assistant:", "ground_truth": "Returns column name for specified property name..", "predict": "Returns column name for given property name. @param propertyName the property name @return column name for given property name"}
{"ID": 1163, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Object getIdValue(final E object) { final String propertyName = getIdPropertyName(); return BeanUtil.declared.getProperty(object, propertyName); }. ### Assistant:", "ground_truth": "Returns ID value for given entity instance.", "predict": "Returns the id value of the given object. @param object the object to get the id value from. @return the id value of the given object."}
{"ID": 1164, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void setIdValue(final E object, final Object value) { final String propertyName = getIdPropertyName(); BeanUtil.declared.setProperty(object, propertyName, value); }. ### Assistant:", "ground_truth": "Sets ID value for given entity.", "predict": "Set the value of the id property of the object. The property name is determined by the getIdPropertyName() method. @param object The object to set the value for. @param value The value to set."}
{"ID": 1165, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String getKeyValue(final E object) { Object idValue = getIdValue(object); String idValueString = idValue == null ? StringPool.NULL : idValue.toString(); return type.getName().concat(StringPool.COLON).concat(idValueString); }. ### Assistant:", "ground_truth": "Returns unique key for this entity. Returned key\nis built from entity class and id value.", "predict": "Returns the key value for the given object. The key value is composed of the type name and the id value. @param object the object to get the key value for. @return the key value for the given object."}
{"ID": 1166, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public StringBand append(String s) { if (s == null) { s = StringPool.NULL; } if (index >= array.length) { expandCapacity(); } array[index++] = s; length += s.length(); return this; }. ### Assistant:", "ground_truth": "Appends a string.", "predict": "Appends the specified string to the end of the band. The capacity of the band is increased if necessary. @param s the string to append. @return this band."}
{"ID": 1167, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void setIndex(final int newIndex) { if (newIndex < 0) { throw new ArrayIndexOutOfBoundsException(newIndex); } if (newIndex > array.length) { String[] newArray = new String[newIndex]; System.arraycopy(array, 0, newArray, 0, index); array = newArray; } if (newIndex > index) { for (int i = index; i < newIndex; i++) { array[i] = StringPool.EMPTY; } } else if (newIndex < index) { for (int i = newIndex; i < index; i++) { array[i] = null; } } index = newIndex; length = calculateLength(); }. ### Assistant:", "ground_truth": "Specifies the new index.", "predict": "Sets the index of the current element. The index is a 0-based index. If the index is greater than the current length, the length will be adjusted accordingly. If the index is less than the current length, the elements from the new index to the end will be set to null. @param newIndex the new index of the element."}
{"ID": 1168, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void expandCapacity() { String[] newArray = new String[array.length << 1]; System.arraycopy(array, 0, newArray, 0, index); array = newArray; }. ### Assistant:", "ground_truth": "Expands internal string array by multiplying its size by 2.", "predict": "Expands the capacity of the array by doubling it."}
{"ID": 1169, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected int calculateLength() { int len = 0; for (int i = 0; i < index; i++) { len += array[i].length(); } return len; }. ### Assistant:", "ground_truth": "Calculates string length.", "predict": "Calculates the length of the array."}
{"ID": 1170, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String createMixingMessage(final BeanDefinition targetBeanDefinition, final BeanDefinition refBeanDefinition) { return \"Scopes mixing detected: \" + refBeanDefinition.name + \"@\" + refBeanDefinition.scope.getClass().getSimpleName() + \" -> \" + targetBeanDefinition.name + \"@\" + targetBeanDefinition.scope.getClass().getSimpleName(); }. ### Assistant:", "ground_truth": "Creates mixed scope message.", "predict": "Create a MixingMessage for the given BeanDefinition. @param targetBeanDefinition the target bean definition @param refBeanDefinition the reference bean definition @return the MixingMessage"}
{"ID": 1171, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Object createScopedProxyBean(final PetiteContainer petiteContainer, final BeanDefinition refBeanDefinition) { Class beanType = refBeanDefinition.type; Class proxyClass = proxyClasses.get(beanType); if (proxyClass == null) { // create proxy class only once if (refBeanDefinition instanceof ProxettaBeanDefinition) { // special case, double proxy! ProxettaBeanDefinition pbd = (ProxettaBeanDefinition) refBeanDefinition; ProxyProxetta proxetta = Proxetta.proxyProxetta().withAspects(ArraysUtil.insert(pbd.proxyAspects, aspect, 0)); proxetta.setClassNameSuffix(\"$ScopedProxy\"); proxetta.setVariableClassName(true); ProxyProxettaFactory builder = proxetta.proxy().setTarget(pbd.originalTarget); proxyClass = builder.define(); proxyClasses.put(beanType, proxyClass); } else { ProxyProxetta proxetta = Proxetta.proxyProxetta().withAspect(aspect); proxetta.setClassNameSuffix(\"$ScopedProxy\"); proxetta.setVariableClassName(true); ProxyProxettaFactory builder = proxetta.proxy().setTarget(beanType); proxyClass = builder.define(); proxyClasses.put(beanType, proxyClass); } } Object proxy; try { proxy = ClassUtil.newInstance(proxyClass); Field field = proxyClass.getField(\"$__petiteContainer$0\"); field.set(proxy, petiteContainer); field = proxyClass.getField(\"$__name$0\"); field.set(proxy, refBeanDefinition.name); } catch (Exception ex) { throw new PetiteException(ex); } return proxy; }. ### Assistant:", "ground_truth": "Creates scoped proxy bean for given bean definition.", "predict": "Create a scoped proxy bean. @param petiteContainer petite container @param refBeanDefinition bean definition @return the proxy bean"}
{"ID": 1172, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void loopBody() throws JspException { JspFragment body = getJspBody(); if (body == null) { return; } LoopIterator loopIterator = new LoopIterator(start, end, step, modulus); if (status != null) { getJspContext().setAttribute(status, loopIterator); } while (loopIterator.next()) { TagUtil.invokeBody(body); } if (status != null) { getJspContext().removeAttribute(status); } }. ### Assistant:", "ground_truth": "Loops body.", "predict": "Loop through the body of the loop. @throws JspException if a JSP exception has occurred"}
{"ID": 1173, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void init() { File[] filesArray = dir.listFiles(); filesCount = 0; if (filesArray != null) { filesCount = filesArray.length; for (File file : filesArray) { if (!acceptFile(file)) { continue; } map.put(file, new MutableLong(file.lastModified())); } } }. ### Assistant:", "ground_truth": "Initializes dir watcher by reading all files\nfrom watched folder.", "predict": "Initialize the cache."}
{"ID": 1174, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected boolean acceptFile(final File file) { if (!file.isFile()) { return false; // ignore non-files } String fileName = file.getName(); if (ignoreDotFiles) { if (fileName.startsWith(StringPool.DOT)) { return false; // ignore hidden files } } if (patterns == null) { return true; } return Wildcard.matchOne(fileName, patterns) != -1; }. ### Assistant:", "ground_truth": "Accepts if a file is going to be watched.", "predict": "Determines whether the file should be accepted. @param file the file to check. @return true if the file should be accepted, false otherwise."}
{"ID": 1175, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public DirWatcher useWatchFile(final String name) { watchFile = new File(dir, name); if (!watchFile.isFile() || !watchFile.exists()) { try { FileUtil.touch(watchFile); } catch (IOException ioex) { throw new DirWatcherException(\"Invalid watch file: \" + name, ioex); } } watchFileLastAccessTime = watchFile.lastModified(); return this; }. ### Assistant:", "ground_truth": "Enables usage of provided watch file.", "predict": "Watch file. @param name Watch file name. @return DirWatcher instance."}
{"ID": 1176, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void start(final long pollingInterval) { if (timer == null) { if (!startBlank) { init(); } timer = new Timer(true); timer.schedule(new WatchTask(), 0, pollingInterval); } }. ### Assistant:", "ground_truth": "Starts the watcher.", "predict": "Start the watchdog. The timer will be started with the given polling interval. @param pollingInterval Polling interval in milliseconds."}
{"ID": 1177, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void onChange(final DirWatcherEvent.Type type, final File file) { listeners.accept(new DirWatcherEvent(type, file)); }. ### Assistant:", "ground_truth": "Triggers listeners on file change.", "predict": "Notify all registered listeners about a change in the watched directory. @param type the type of event that occured. @param file the file that changed."}
{"ID": 1178, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void add(final Enumeration<T> enumeration) { if (allEnumerations.contains(enumeration)) { throw new IllegalArgumentException(\"Duplicate enumeration\"); } allEnumerations.add(enumeration); }. ### Assistant:", "ground_truth": "Adds an enumeration to this composite.", "predict": "Adds an enumeration to the list of enumerations. If the enumeration is already present, an exception is thrown. @param enumeration enumeration to add"}
{"ID": 1179, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: int computeFieldInfoSize() { // The access_flags, name_index, descriptor_index and attributes_count fields use 8 bytes. int size = 8; // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS. if (constantValueIndex != 0) { // ConstantValue attributes always use 8 bytes. symbolTable.addConstantUtf8(Constants.CONSTANT_VALUE); size += 8; } // Before Java 1.5, synthetic fields are represented with a Synthetic attribute. if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && symbolTable.getMajorVersion() < Opcodes.V1_5) { // Synthetic attributes always use 6 bytes. symbolTable.addConstantUtf8(Constants.SYNTHETIC); size += 6; } if (signatureIndex != 0) { // Signature attributes always use 8 bytes. symbolTable.addConstantUtf8(Constants.SIGNATURE); size += 8; } // ACC_DEPRECATED is ASM specific, the ClassFile format uses a Deprecated attribute instead. if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) { // Deprecated attributes always use 6 bytes. symbolTable.addConstantUtf8(Constants.DEPRECATED); size += 6; } if (lastRuntimeVisibleAnnotation != null) { size += lastRuntimeVisibleAnnotation.computeAnnotationsSize( Constants.RUNTIME_VISIBLE_ANNOTATIONS); } if (lastRuntimeInvisibleAnnotation != null) { size += lastRuntimeInvisibleAnnotation.computeAnnotationsSize( Constants.RUNTIME_INVISIBLE_ANNOTATIONS); } if (lastRuntimeVisibleTypeAnnotation != null) { size += lastRuntimeVisibleTypeAnnotation.computeAnnotationsSize( Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS); } if (lastRuntimeInvisibleTypeAnnotation != null) { size += lastRuntimeInvisibleTypeAnnotation.computeAnnotationsSize( Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS); } if (firstAttribute != null) { size += firstAttribute.computeAttributesSize(symbolTable); } return size; }. ### Assistant:", "ground_truth": "Returns the size of the field_info JVMS structure generated by this FieldWriter. Also adds the\nnames of the attributes of this field in the constant pool.\n\n@return the size in bytes of the field_info JVMS structure.", "predict": "Compute the size of the attribute table. @return the size of the attribute table."}
{"ID": 1180, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: void putFieldInfo(final ByteVector output) { boolean useSyntheticAttribute = symbolTable.getMajorVersion() < Opcodes.V1_5; // Put the access_flags, name_index and descriptor_index fields. int mask = useSyntheticAttribute ? Opcodes.ACC_SYNTHETIC : 0; output.putShort(accessFlags & ~mask).putShort(nameIndex).putShort(descriptorIndex); // Compute and put the attributes_count field. // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS. int attributesCount = 0; if (constantValueIndex != 0) { ++attributesCount; } if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && useSyntheticAttribute) { ++attributesCount; } if (signatureIndex != 0) { ++attributesCount; } if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) { ++attributesCount; } if (lastRuntimeVisibleAnnotation != null) { ++attributesCount; } if (lastRuntimeInvisibleAnnotation != null) { ++attributesCount; } if (lastRuntimeVisibleTypeAnnotation != null) { ++attributesCount; } if (lastRuntimeInvisibleTypeAnnotation != null) { ++attributesCount; } if (firstAttribute != null) { attributesCount += firstAttribute.getAttributeCount(); } output.putShort(attributesCount); // Put the field_info attributes. // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS. if (constantValueIndex != 0) { output .putShort(symbolTable.addConstantUtf8(Constants.CONSTANT_VALUE)) .putInt(2) .putShort(constantValueIndex); } if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && useSyntheticAttribute) { output.putShort(symbolTable.addConstantUtf8(Constants.SYNTHETIC)).putInt(0); } if (signatureIndex != 0) { output .putShort(symbolTable.addConstantUtf8(Constants.SIGNATURE)) .putInt(2) .putShort(signatureIndex); } if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) { output.putShort(symbolTable.addConstantUtf8(Constants.DEPRECATED)).putInt(0); } if (lastRuntimeVisibleAnnotation != null) { lastRuntimeVisibleAnnotation.putAnnotations( symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_ANNOTATIONS), output); } if (lastRuntimeInvisibleAnnotation != null) { lastRuntimeInvisibleAnnotation.putAnnotations( symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_ANNOTATIONS), output); } if (lastRuntimeVisibleTypeAnnotation != null) { lastRuntimeVisibleTypeAnnotation.putAnnotations( symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS), output); } if (lastRuntimeInvisibleTypeAnnotation != null) { lastRuntimeInvisibleTypeAnnotation.putAnnotations( symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS), output); } if (firstAttribute != null) { firstAttribute.putAttributes(symbolTable, output); } }. ### Assistant:", "ground_truth": "Puts the content of the field_info JVMS structure generated by this FieldWriter into the given\nByteVector.\n\n@param output where the field_info structure must be put.", "predict": "Put the attribute information into the constant pool."}
{"ID": 1181, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Target ofValue(final Object value, final ScopeData scopeData) { return new Target(value, null, scopeData, null, VALUE_INSTANCE_CREATOR); }. ### Assistant:", "ground_truth": "Creates a common target over a value, with known scope data.", "predict": "Create a Target of a value. @param value the value to create a Target for @param scopeData the scope data @return the Target"}
{"ID": 1182, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void writeValue(final InjectionPoint injectionPoint, final Object propertyValue, final boolean silent) { writeValue(injectionPoint.targetName(), propertyValue, silent); }. ### Assistant:", "ground_truth": "Writes value to this target. Depending on a flag, writing the value can be\ncompletely silent, when no exception is thrown and with top performances.\nOtherwise, an exception is thrown on a failure.", "predict": "Writes the value of a property to the target. @param injectionPoint The injection point @param propertyValue The value to write @param silent Whether to suppress the error if the property does not exist"}
{"ID": 1183, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void decorate(final Writer writer, final char[] pageContent, final char[] decoraContent) throws IOException { DecoraTag[] decoraTags = parseDecorator(decoraContent); parsePage(pageContent, decoraTags); writeDecoratedPage(writer, decoraContent, pageContent, decoraTags); }. ### Assistant:", "ground_truth": "Decorates page content with decorator template and outputs the result.", "predict": "Decorate the page with the given content. The decorated page is written to the writer. @param writer the writer to write the decorated page to. @param pageContent the content of the page. @param decoraContent the content of the decorations. @throws IOException if an I/O error occurs."}
{"ID": 1184, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void parsePage(final char[] pageContent, final DecoraTag[] decoraTags) { LagartoParser lagartoParser = new LagartoParser(pageContent); PageRegionExtractor writer = new PageRegionExtractor(decoraTags); lagartoParser.parse(writer); }. ### Assistant:", "ground_truth": "Parses target page and extracts Decora regions for replacements.", "predict": "Parse the HTML page. @param pageContent the HTML content of the page. @param decoraTags the decorations of the page."}
{"ID": 1185, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void writeDecoratedPage(final Writer out, final char[] decoratorContent, final char[] pageContent, final DecoraTag[] decoraTags) throws IOException { int ndx = 0; for (DecoraTag decoraTag : decoraTags) { // [1] just copy content before the Decora tag int decoratorLen = decoraTag.getStartIndex() - ndx; if (decoratorLen <= 0) { continue; } out.write(decoratorContent, ndx, decoratorLen); ndx = decoraTag.getEndIndex(); // [2] now write region at the place of Decora tag int regionLen = decoraTag.getRegionLength(); if (regionLen == 0) { if (decoraTag.hasDefaultValue()) { out.write(decoratorContent, decoraTag.getDefaultValueStart(), decoraTag.getDefaultValueLength()); } } else { writeRegion(out, pageContent, decoraTag, decoraTags); } } // write remaining content out.write(decoratorContent, ndx, decoratorContent.length - ndx); }. ### Assistant:", "ground_truth": "Writes decorated content.", "predict": "Write decorated page. @param out the writer @param decoratorContent the decorator content @param pageContent the page content @param decoraTags the decorator tags @throws IOException if an I/O error occurs @see #writeRegion(Writer, char[], DecoraTag, DecoraTag[])"}
{"ID": 1186, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void writeRegion(final Writer out, final char[] pageContent, final DecoraTag decoraTag, final DecoraTag[] decoraTags) throws IOException { int regionStart = decoraTag.getRegionStart(); int regionLen = decoraTag.getRegionLength(); int regionEnd = regionStart + regionLen; for (DecoraTag innerDecoraTag : decoraTags) { if (decoraTag == innerDecoraTag) { continue; } if (decoraTag.isRegionUndefined()) { continue; } if (innerDecoraTag.isInsideOtherTagRegion(decoraTag)) { // write everything from region start to the inner Decora tag out.write(pageContent, regionStart, innerDecoraTag.getRegionTagStart() - regionStart); regionStart = innerDecoraTag.getRegionTagEnd(); } } // write remaining content of the region out.write(pageContent, regionStart, regionEnd - regionStart); }. ### Assistant:", "ground_truth": "Writes region to output, but extracts all inner regions.", "predict": "Write the region from the given pageContent. The region is defined by the given decoraTag. The decoraTags are the inner tags that are inside the region. If the decoraTag is not inside another region, the region is written out as is. If the decoraTag is inside another region, the region is skipped. @param out the writer to write the region to. @param pageContent the content of the page. @param decoraTag the decoraTag that defines the region. @param decoraTags the inner tags that are inside the region. @throws IOException if an error occurs while writing the region."}
{"ID": 1187, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void start() throws IOException { serverSocket = new ServerSocket(listenPort, socketBacklog); serverSocket.setReuseAddress(true); executorService = Executors.newFixedThreadPool(threadPoolSize); running = true; while (running) { Socket socket = serverSocket.accept(); socket.setKeepAlive(false); executorService.execute(onSocketConnection(socket)); } executorService.shutdown(); }. ### Assistant:", "ground_truth": "Starts HTTP tunnel. Method ends when the tunnel is stopped.", "predict": "Starts the server. @throws IOException if the server fails to start"}
{"ID": 1188, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static ProcessResult run(final Process process) throws InterruptedException { final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final StreamGobbler outputGobbler = new StreamGobbler(process.getInputStream(), baos, OUTPUT_PREFIX); final StreamGobbler errorGobbler = new StreamGobbler(process.getErrorStream(), baos, ERROR_PREFIX); outputGobbler.start(); errorGobbler.start(); final int result = process.waitFor(); outputGobbler.waitFor(); errorGobbler.waitFor(); return new ProcessResult(result, baos.toString()); }. ### Assistant:", "ground_truth": "Executes a process and returns the process output and exit code.", "predict": "Runs a process and waits for it to complete. @param process the process to run @return the result of the process @throws InterruptedException if interrupted while waiting for the process to complete"}
{"ID": 1189, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override protected IMAPSSLStore getStore(final Session session) { SimpleAuthenticator simpleAuthenticator = (SimpleAuthenticator) authenticator; final URLName url; if (simpleAuthenticator == null) { url = new URLName( PROTOCOL_IMAP, host, port, StringPool.EMPTY, null, null); } else { final PasswordAuthentication pa = simpleAuthenticator.getPasswordAuthentication(); url = new URLName( PROTOCOL_IMAP, host, port, StringPool.EMPTY, pa.getUserName(), pa.getPassword()); } return new IMAPSSLStore(session, url); }. ### Assistant:", "ground_truth": "Returns email store.\n\n@param session {@link Session}\n@return {@link com.sun.mail.imap.IMAPSSLStore}", "predict": "Returns the SSL Store for the IMAPSSLSession. @param session the IMAPSSLSession @return the SSL Store for the IMAPSSLSession"}
{"ID": 1190, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ServletOutputStream createOutputStream() throws IOException { GzipResponseStream gzstream = new GzipResponseStream(origResponse); gzstream.setBuffer(threshold); return gzstream; }. ### Assistant:", "ground_truth": "Creates and returns a ServletOutputStream to write the content associated\nwith this Response.", "predict": "Create a new GzipResponseStream that wraps the original response stream. The stream is buffered with a threshold of 8KB. @return a new GzipResponseStream @throws IOException if an I/O error occurs while creating the stream."}
{"ID": 1191, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void init(final TemplateData templateData) { super.init(templateData); if (hint != null) { templateData.incrementHintsCount(); } }. ### Assistant:", "ground_truth": "Counts actual real hints.", "predict": "Increment hints count when hint is set. @param templateData TemplateData object."}
{"ID": 1192, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void appendAlias(final StringBuilder query, final DbEntityDescriptor ded, final DbEntityColumnDescriptor dec) { final ColumnAliasType columnAliasType = templateData.getColumnAliasType(); if (columnAliasType == null || columnAliasType == ColumnAliasType.TABLE_REFERENCE) { final String tableName = ded.getTableName(); final String columnName = dec.getColumnNameForQuery(); templateData.registerColumnDataForTableRef(tableRef, tableName); query.append(tableRef).append(columnAliasSeparator).append(columnName); } else if (columnAliasType == ColumnAliasType.COLUMN_CODE) { final String tableName = ded.getTableName(); final String columnName = dec.getColumnName(); final String code = templateData.registerColumnDataForColumnCode(tableName, columnName); query.append(code); } else if (columnAliasType == ColumnAliasType.TABLE_NAME) { final String tableName = ded.getTableNameForQuery(); final String columnName = dec.getColumnNameForQuery(); query.append(tableName).append(columnAliasSeparator).append(columnName); } }. ### Assistant:", "ground_truth": "Appends alias.", "predict": "Append the column alias to the query. @param query The query to append the alias to. @param ded The DbEntityDescriptor. @param dec The DbEntityColumnDescriptor."}
{"ID": 1193, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void appendColumnName(final StringBuilder query, final DbEntityDescriptor ded, final DbEntityColumnDescriptor dec) { query.append(resolveTable(tableRef, ded)).append('.').append(dec.getColumnName()); if (templateData.getColumnAliasType() != null) { // create column aliases query.append(AS); switch (templateData.getColumnAliasType()) { case TABLE_NAME: { final String tableName = ded.getTableNameForQuery(); query.append(tableName).append(columnAliasSeparator).append(dec.getColumnNameForQuery()); break; } case TABLE_REFERENCE: { final String tableName = ded.getTableName(); templateData.registerColumnDataForTableRef(tableRef, tableName); query.append(tableRef).append(columnAliasSeparator).append(dec.getColumnNameForQuery()); break; } case COLUMN_CODE: { final String tableName = ded.getTableName(); final String code = templateData.registerColumnDataForColumnCode(tableName, dec.getColumnName()); query.append(code); break; } } } }. ### Assistant:", "ground_truth": "Simply appends column name with optional table reference and alias.", "predict": "Append column name to the SQL query. @param query SQL query @param ded DbEntityDescriptor @param dec DbEntityColumnDescriptor"}
{"ID": 1194, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void addRule(final D ruleDefinition, final boolean include) { if (rules == null) { rules = new ArrayList<>(); } if (include) { includesCount++; } else { excludesCount++; } Rule<R> newRule = new Rule<>(makeRule(ruleDefinition), include); if (rules.contains(newRule)) { return; } rules.add(newRule); }. ### Assistant:", "ground_truth": "Adds a rule. Duplicates are not allowed and will be ignored.", "predict": "Adds a rule to the ruleset. @param ruleDefinition The rule definition. @param include Whether the rule should be included in the ruleset."}
{"ID": 1195, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean apply(final V value, final boolean blacklist, boolean flag) { if (rules == null) { return flag; } if (blacklist) { flag = processExcludes(value, flag); flag = processIncludes(value, flag); } else { flag = processIncludes(value, flag); flag = processExcludes(value, flag); } return flag; }. ### Assistant:", "ground_truth": "Applies rules on given flag. Flag is only changed if at least one rule\nmatched. Otherwise, the same value is returned. This way you can\nchain several rules and have the rule engine change the flag\nonly when a rule is matched.", "predict": "Apply the rules to the value. @param value the value to apply the rules to @param blacklist whether to blacklist or whitelist the value @param flag whether the value should be flagged as good or bad @return true if the value should be flagged as good, false otherwise"}
{"ID": 1196, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected boolean processIncludes(final V value, boolean include) { if (includesCount > 0) { if (!include) { for (Rule<R> rule : rules) { if (!rule.include) { continue; } if (inExRuleMatcher.accept(value, rule.value, true)) { include = true; break; } } } } return include; }. ### Assistant:", "ground_truth": "Process includes rules.", "predict": "Processes the includes. @param value the value @param include whether the include should be processed @return whether the include should be processed"}
{"ID": 1197, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected boolean processExcludes(final V value, boolean include) { if (excludesCount > 0) { if (include) { for (Rule<R> rule : rules) { if (rule.include) { continue; } if (inExRuleMatcher.accept(value, rule.value, false)) { include = false; break; } } } } return include; }. ### Assistant:", "ground_truth": "Process excludes rules.", "predict": "Process excludes. @param value the value @param include the include @return the boolean"}
{"ID": 1198, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String getPseudoClassName() { String name = getClass().getSimpleName().toLowerCase(); name = name.replace('_', '-'); return name; }. ### Assistant:", "ground_truth": "Returns pseudo-class name from simple class name.", "predict": "Generates a pseudo-classname for this class. The pseudo-classname is generated by replacing underscores with dashes and converting the classname to lowercase. @return Pseudo-classname for this class."}
{"ID": 1199, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public boolean addAll(final Collection<? extends E> c) { Iterator<? extends E> i = c.iterator(); boolean changed = false; while (i.hasNext()) { boolean ret = add(i.next()); if (!changed) { changed = ret; } } return changed; }. ### Assistant:", "ground_truth": "Add all of the elements in the given collection to this list.", "predict": "Adds all elements from another collection to this collection. @param c the collection to add elements from. @return true if this collection changed as a result of the call."}
{"ID": 1200, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected int findInsertionPoint(final E o, int low, int high) { while (low <= high) { int mid = (low + high) >>> 1; int delta = compare(get(mid), o); if (delta > 0) { high = mid - 1; } else { low = mid + 1; } } return low; }. ### Assistant:", "ground_truth": "Conducts a binary search to find the index where Object\nshould be inserted.", "predict": "Finds the insertion point of the given object in the array. The insertion point is the index of the first element in the array that is greater than the given object. The search is performed in ascending order. The search is performed using binary search. @param o Object to search for @param low Lowest possible index of the object @param high Highest possible index of the object @return Index of the first element in the array that is greater than the given object."}
{"ID": 1201, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void bindAnnotationConfig(final Class<? extends Annotation> annotationType, final Class<? extends ActionConfig> actionConfigClass) { final ActionConfig actionConfig = registerNewActionConfiguration(actionConfigClass); actionConfigs.put(annotationType, actionConfig); for (final AnnotationParser annotationParser : annotationParsers) { if (annotationType.equals(annotationParser.getAnnotationType())) { // parser already exists return; } } annotationParsers = ArraysUtil.append(annotationParsers, new AnnotationParser(annotationType, Action.class)); }. ### Assistant:", "ground_truth": "Binds action annotation and the action config. This can overwrite the default annotation\nconfiguration of an annotation.", "predict": "Registers a new action configuration class for the given annotation type. @param annotationType The annotation type. @param actionConfigClass The action configuration class."}
{"ID": 1202, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected ActionConfig registerNewActionConfiguration(final Class<? extends ActionConfig> actionConfigClass) { final ActionConfig newActionConfig = createActionConfig(actionConfigClass); actionConfigs.put(actionConfigClass, newActionConfig); return newActionConfig; }. ### Assistant:", "ground_truth": "Registers action configuration for given type.", "predict": "Registers a new ActionConfig. @param actionConfigClass the ActionConfig class to register. @return the newly registered ActionConfig."}
{"ID": 1203, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ActionConfig lookup(final Class actionTypeOrAnnotationType) { final ActionConfig actionConfig = actionConfigs.get(actionTypeOrAnnotationType); if (actionConfig == null) { throw new MadvocException(\"ActionConfiguration not registered:\" + actionTypeOrAnnotationType.getName()); } return actionConfig; }. ### Assistant:", "ground_truth": "Lookup for the action configuration. Typically, the input argument is either the action type or annotation type.", "predict": "Find the ActionConfig associated with the given action type or annotation type. @param actionTypeOrAnnotationType the type of the action or annotation @return the ActionConfig associated with the given action type or annotation type @throws MadvocException if the action type or annotation type is not registered"}
{"ID": 1204, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <T extends ActionConfig> void with(final Class<T> actionConfigType, final Consumer<T> actionConfigConsumer) { final T actionConfig = (T) lookup(actionConfigType); actionConfigConsumer.accept(actionConfig); }. ### Assistant:", "ground_truth": "Fetch some action config and consumes it.", "predict": "Registers an action config consumer. @param actionConfigType the type of action config to register. @param actionConfigConsumer the consumer to register."}
{"ID": 1205, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected static void setupSystemMailProperties() { System.setProperty(\"mail.mime.encodefilename\", Boolean.valueOf(Defaults.mailMimeEncodefilename).toString()); System.setProperty(\"mail.mime.decodefilename\", Boolean.valueOf(Defaults.mailMimeDecodefilename).toString()); }. ### Assistant:", "ground_truth": "Setups the system email properties.", "predict": "Sets up the mail properties for the system. @see #mailMimeEncodefilename @see #mailMimeDecodefilename"}
{"ID": 1206, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void validateWithin(final ValidationContext vctx, final Object value) { vtor.validate(vctx, value, name); }. ### Assistant:", "ground_truth": "Validates provided context and value withing this constraint content.", "predict": "Validates the value within the given validation context. @param vctx the validation context @param value the value to validate @since 2.0.0"}
{"ID": 1207, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Element findLastTable(final Node node) { Node tableNode = node; while (tableNode != null) { if (tableNode.getNodeType() == Node.NodeType.ELEMENT) { String tableNodeName = tableNode.getNodeName().toLowerCase(); if (tableNodeName.equals(\"table\")) { break; } } tableNode = tableNode.getParentNode(); } return (Element) tableNode; }. ### Assistant:", "ground_truth": "Finds the last table in stack of open elements.", "predict": "Finds the last table element in the given node. @param node the node to search in @return the last table element in the given node"}
{"ID": 1208, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void fixElements() { for (Element fosterElement : fosterElements) { // find parent table Element lastTable = findLastTable(fosterElement); Node fosterElementParent = fosterElement.getParentNode(); // filter our foster element Node[] fosterChilds = fosterElement.getChildNodes(); for (Node fosterChild : fosterChilds) { if (fosterChild.getNodeType() == Node.NodeType.ELEMENT) { if (isOneOfTableElements((Element) fosterChild)) { // move all child table elements outside // the foster element fosterChild.detachFromParent(); fosterElementParent.insertBefore(fosterChild, fosterElement); } } } // finally, move foster element above the table fosterElement.detachFromParent(); lastTable.getParentNode().insertBefore(fosterElement, lastTable); } }. ### Assistant:", "ground_truth": "Performs the fix for elements.", "predict": "Fix the foster elements."}
{"ID": 1209, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Map<String, BeanData> registerSessionBeans(final HttpSession httpSession) { SessionBeans sessionBeans = new SessionBeans(); httpSession.setAttribute(SESSION_BEANS_NAME, sessionBeans); return sessionBeans.getBeanMap(); }. ### Assistant:", "ground_truth": "Registers new session destroy callback if not already registered.", "predict": "Registers the session beans. @param httpSession the HttpSession @return the Map<String, BeanData>"}
{"ID": 1210, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") protected Map<String, BeanData> getSessionMap(final HttpSession session) { SessionBeans sessionBeans = (SessionBeans) session.getAttribute(SESSION_BEANS_NAME); if (sessionBeans == null) { return null; } return sessionBeans.getBeanMap(); }. ### Assistant:", "ground_truth": "Returns instance map from http session.", "predict": "Get the BeanMap from the HttpSession. @param session the HttpSession @return the BeanMap from the HttpSession."}
{"ID": 1211, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void init(String name, final String superName, final String suffix, final String reqProxyClassName) { int lastSlash = name.lastIndexOf('/'); this.targetPackage = lastSlash == -1 ? StringPool.EMPTY : name.substring(0, lastSlash).replace('/', '.'); this.targetClassname = name.substring(lastSlash + 1); this.nextSupername = superName; this.superName = name; // create proxy name if (reqProxyClassName != null) { if (reqProxyClassName.startsWith(DOT)) { name = name.substring(0, lastSlash) + '/' + reqProxyClassName.substring(1); } else if (reqProxyClassName.endsWith(DOT)) { name = reqProxyClassName.replace('.', '/') + this.targetClassname; } else { name = reqProxyClassName.replace('.', '/'); } } // add optional suffix if (suffix != null) { name += suffix; } this.thisReference = name; this.superReference = this.superName; }. ### Assistant:", "ground_truth": "Work data initialization.", "predict": "Initializes the proxy name. @param name the name of the target class. @param superName the name of the superclass. @param suffix the optional suffix. @param reqProxyClassName the name of the requested proxy class."}
{"ID": 1212, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: void addAdviceInitMethod(final String name) { if (adviceInits == null) { adviceInits = new ArrayList<>(); } adviceInits.add(name); }. ### Assistant:", "ground_truth": "Saves used constructors of advices.", "predict": "Add advice initialization method to the advice-inits list. @param name advice initialization method name."}
{"ID": 1213, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void end() { if (newAction) { bundleId = bundlesManager.registerBundle(contextPath, actionPath, bundleId, bundleContentType, sources); } }. ### Assistant:", "ground_truth": "Called on end of parsing.", "predict": "End the execution of the Action."}
{"ID": 1214, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void add( final String section, final String key, final StringBuilder value, final boolean trim, final Operator operator) { // ignore lines without : or = if (key == null) { return; } String fullKey = key; if (section != null) { if (fullKey.length() != 0) { fullKey = section + '.' + fullKey; } else { fullKey = section; } } String v = value.toString(); if (trim) { if (valueTrimLeft && valueTrimRight) { v = v.trim(); } else if (valueTrimLeft) { v = StringUtil.trimLeft(v); } else { v = StringUtil.trimRight(v); } } if (v.length() == 0 && skipEmptyProps) { return; } extractProfilesAndAdd(fullKey, v, operator); }. ### Assistant:", "ground_truth": "Adds accumulated value to key and current section.", "predict": "Adds a value to the section. If the value is an empty string, it will be skipped. If the value is a comment, it will be ignored. If the value is a boolean, it will be converted to a string. If the value is a number, it will be converted to a string. If the value is a string, it will be added as is. If the value is a list, it will be added as a comma separated string. If the value is a map, it will be added as a string. If the value is a boolean, it will be converted to a string. If the value is a number, it will be converted to a string. If the value is a string, it will be added as is. If the value is a list, it will be added as a comma separated string. If the value is a map, it will be added as a string. If the value is a boolean, it will be converted to a string. If the value is a number, it will be converted to a string."}
{"ID": 1215, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void extractProfilesAndAdd(final String key, final String value, final Operator operator) { String fullKey = key; int ndx = fullKey.indexOf(PROFILE_LEFT); if (ndx == -1) { justAdd(fullKey, value, null, operator); return; } // extract profiles ArrayList<String> keyProfiles = new ArrayList<>(); while (true) { ndx = fullKey.indexOf(PROFILE_LEFT); if (ndx == -1) { break; } final int len = fullKey.length(); int ndx2 = fullKey.indexOf(PROFILE_RIGHT, ndx + 1); if (ndx2 == -1) { ndx2 = len; } // remember profile final String profile = fullKey.substring(ndx + 1, ndx2); keyProfiles.add(profile); // extract profile from key ndx2++; final String right = (ndx2 == len) ? StringPool.EMPTY : fullKey.substring(ndx2); fullKey = fullKey.substring(0, ndx) + right; } if (fullKey.startsWith(StringPool.DOT)) { // check for special case when only profile is defined in section fullKey = fullKey.substring(1); } // add value to extracted profiles justAdd(fullKey, value, keyProfiles, operator); }. ### Assistant:", "ground_truth": "Extracts profiles from the key name and adds key-value to them.", "predict": "Extract profiles and add. @param key the key @param value the value @param operator the operator"}
{"ID": 1216, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void justAdd(final String key, final String value, final ArrayList<String> keyProfiles, final Operator operator) { if (operator == Operator.COPY) { HashMap<String,Object> target = new HashMap<>(); String[] profiles = null; if (keyProfiles != null) { profiles = keyProfiles.toArray(new String[0]); } String[] sources = StringUtil.splitc(value, ','); for (String source : sources) { source = source.trim(); // try to extract profile for parsing String[] lookupProfiles = profiles; String lookupProfilesString = null; int leftIndex = source.indexOf('<'); if (leftIndex != -1) { int rightIndex = source.indexOf('>'); lookupProfilesString = source.substring(leftIndex + 1, rightIndex); source = source.substring(0, leftIndex).concat(source.substring(rightIndex + 1)); lookupProfiles = StringUtil.splitc(lookupProfilesString, ','); StringUtil.trimAll(lookupProfiles); } String[] wildcards = new String[] {source + \".*\"}; propsData.extract(target, lookupProfiles, wildcards, null); for (Map.Entry<String, Object> entry : target.entrySet()) { String entryKey = entry.getKey(); String suffix = entryKey.substring(source.length()); String newKey = key + suffix; String newValue = \"${\" + entryKey; if (lookupProfilesString != null) { newValue += \"<\" + lookupProfilesString + \">\"; } newValue += \"}\"; if (profiles == null) { propsData.putBaseProperty(newKey, newValue, false); } else { for (final String p : profiles) { propsData.putProfileProperty(newKey, newValue, p, false); } } } } return; } boolean append = operator == Operator.QUICK_APPEND; if (keyProfiles == null) { propsData.putBaseProperty(key, value, append); return; } for (final String p : keyProfiles) { propsData.putProfileProperty(key, value, p, append); } }. ### Assistant:", "ground_truth": "Core key-value addition.", "predict": "Adds a property to the properties data structure. @param key the property key @param value the property value @param keyProfiles the profiles for the property @param operator the operator for the property addition"}
{"ID": 1217, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String typedesc2ClassName(final String desc) { String className = desc; switch (desc.charAt(0)) { case 'B': case 'C': case 'D': case 'F': case 'I': case 'J': case 'S': case 'Z': case 'V': if (desc.length() != 1) { throw new IllegalArgumentException(INVALID_BASE_TYPE + desc); } break; case 'L': className = className.substring(1, className.length() - 1); break; case '[': // uses less-known feature of class loaders for loading array types // using bytecode-like signatures. className = className.replace('/', '.'); break; default: throw new IllegalArgumentException(INVALID_TYPE_DESCRIPTION + desc); } return className; }. ### Assistant:", "ground_truth": "Converts bytecode-like description to java class name that can be loaded\nwith a classloader. Uses less-known feature of class loaders for loading\narray classes.\n\n@see #typedescToSignature(String, jodd.mutable.MutableInteger)", "predict": "Convert a type descriptor to a class name. @param desc the type descriptor @return the class name"}
{"ID": 1218, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String typeref2Name(final String desc) { if (desc.charAt(0) != TYPE_REFERENCE) { throw new IllegalArgumentException(INVALID_TYPE_DESCRIPTION + desc); } String name = desc.substring(1, desc.length() - 1); return name.replace('/', '.'); }. ### Assistant:", "ground_truth": "Converts type reference to java-name.", "predict": "Extract the name from a TypeReference description. @param desc the TypeReference description @return the name extracted from the description"}
{"ID": 1219, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String typedescToSignature(final String desc, final MutableInteger from) { int fromIndex = from.get(); from.value++; // default usage for most cases switch (desc.charAt(fromIndex)) { case 'B': return \"byte\"; case 'C': return \"char\"; case 'D': return \"double\"; case 'F': return \"float\"; case 'I': return \"int\"; case 'J': return \"long\"; case 'S': return \"short\"; case 'Z': return \"boolean\"; case 'V': return \"void\"; case 'L': int index = desc.indexOf(';', fromIndex); if (index < 0) { throw new IllegalArgumentException(INVALID_TYPE_DESCRIPTION + desc); } from.set(index + 1); String str = desc.substring(fromIndex + 1, index); return str.replace('/', '.'); case 'T': return desc.substring(from.value); case '[': StringBuilder brackets = new StringBuilder(); int n = fromIndex; while (desc.charAt(n) == '[') { // count opening brackets brackets.append(\"[]\"); n++; } from.value = n; String type = typedescToSignature(desc, from); // the rest of the string denotes a `<field_type>' return type + brackets; default: if (from.value == 0) { throw new IllegalArgumentException(INVALID_TYPE_DESCRIPTION + desc); } // generics! return desc.substring(from.value); } }. ### Assistant:", "ground_truth": "Returns java-like signature of a bytecode-like description.\nOnly first description is parsed.\n\nThe field signature represents the value of an argument to a function or\nthe value of a variable. It is a series of bytes generated by the\nfollowing grammar:\n\n<PRE>{@code\n<field_signature> ::= <field_type>\n<field_type>      ::= <base_type>|<object_type>|<array_type>\n<base_type>       ::= B|C|D|F|I|J|S|Z\n<object_type>     ::= L<fullclassname>;\n<array_type>      ::= [<field_type>\n\nThe meaning of the base types is as follows:\nB byte signed byte\nC char character\nD double double precision IEEE float\nF float single precision IEEE float\nI int integer\nJ long long integer\nL<fullclassname>; ... an object of the given class\nS short signed short\nZ boolean true or false\n[<field sig> ... array\n}</PRE>\n\nThis method converts this string into a Java type declaration such as\n<code>String[]</code>.", "predict": "Convert a TypeDescriptor to a Java signature. @param desc the TypeDescriptor to convert @param from the index of the first character in the signature @return the Java signature"}
{"ID": 1220, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String typeToTyperef(final Class type) { if (!type.isArray()) { if (!type.isPrimitive()) { return 'L' + typeToSignature(type) + ';'; } if (type == int.class) { return \"I\"; } if (type == long.class) { return \"J\"; } if (type == boolean.class) { return \"Z\"; } if (type == double.class) { return \"D\"; } if (type == float.class) { return \"F\"; } if (type == short.class) { return \"S\"; } if (type == void.class) { return \"V\"; } if (type == byte.class) { return \"B\"; } if (type == char.class) { return \"C\"; } } return type.getName(); }. ### Assistant:", "ground_truth": "Converts type to byteccode type ref.", "predict": "Convert a class to its TypeRef equivalent. This is used to generate TypeRefs for classes that are not yet in the TypeRef hierarchy."}
{"ID": 1221, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Consumers<T> addAll(final Consumer<T>... consumers) { Collections.addAll(consumerList, consumers); return this; }. ### Assistant:", "ground_truth": "Registers additional consumers.", "predict": "Adds the consumers to the list of consumers. @param consumers The consumers to add. @return This consumers object."}
{"ID": 1222, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") protected Collection<T> createCollection(final int length) { if (collectionType.isInterface()) { if (collectionType == List.class) { if (length > 0) { return new ArrayList<>(length); } else { return new ArrayList<>(); } } if (collectionType == Set.class) { if (length > 0) { return new HashSet<>(length); } else { return new HashSet<>(); } } throw new TypeConversionException(\"Unknown collection: \" + collectionType.getName()); } if (length > 0) { try { Constructor<Collection<T>> ctor = (Constructor<Collection<T>>) collectionType.getConstructor(int.class); return ctor.newInstance(Integer.valueOf(length)); } catch (Exception ex) { // ignore exception } } try { return collectionType.getDeclaredConstructor().newInstance(); } catch (Exception ex) { throw new TypeConversionException(ex); } }. ### Assistant:", "ground_truth": "Creates new collection of target component type.\nDefault implementation uses reflection to create\nan collection of target type. Override it for better performances.", "predict": "Create a collection of the specified length. @param length Length of the collection. @return Collection of the specified length."}
{"ID": 1223, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Collection<T> convertToSingleElementCollection(final Object value) { Collection<T> collection = createCollection(0); //noinspection unchecked collection.add((T) value); return collection; }. ### Assistant:", "ground_truth": "Creates a collection with single element.", "predict": "Converts a single value into a collection. @param value the value to convert @return the collection"}
{"ID": 1224, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Collection<T> convertValueToCollection(Object value) { if (value instanceof Iterable) { Iterable iterable = (Iterable) value; Collection<T> collection = createCollection(0); for (Object element : iterable) { collection.add(convertType(element)); } return collection; } if (value instanceof CharSequence) { value = CsvUtil.toStringArray(value.toString()); } Class type = value.getClass(); if (type.isArray()) { // convert arrays Class componentType = type.getComponentType(); if (componentType.isPrimitive()) { return convertPrimitiveArrayToCollection(value, componentType); } else { Object[] array = (Object[]) value; Collection<T> result = createCollection(array.length); for (Object a : array) { result.add(convertType(a)); } return result; } } // everything else: return convertToSingleElementCollection(value); }. ### Assistant:", "ground_truth": "Converts non-collection value to collection.", "predict": "Convert the value to a collection. @param value the value to convert @return the converted value"}
{"ID": 1225, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Collection<T> convertCollectionToCollection(final Collection value) { Collection<T> collection = createCollection(value.size()); for (Object v : value) { collection.add(convertType(v)); } return collection; }. ### Assistant:", "ground_truth": "Converts collection value to target collection.\nEach element is converted to target component type.", "predict": "Converts a collection to a collection of the correct type. The collection size is preserved. @param value the collection to convert @return the converted collection"}
{"ID": 1226, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"AutoBoxing\") protected Collection<T> convertPrimitiveArrayToCollection(final Object value, final Class primitiveComponentType) { Collection<T> result = null; if (primitiveComponentType == int.class) { int[] array = (int[]) value; result = createCollection(array.length); for (int a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == long.class) { long[] array = (long[]) value; result = createCollection(array.length); for (long a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == float.class) { float[] array = (float[]) value; result = createCollection(array.length); for (float a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == double.class) { double[] array = (double[]) value; result = createCollection(array.length); for (double a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == short.class) { short[] array = (short[]) value; result = createCollection(array.length); for (short a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == byte.class) { byte[] array = (byte[]) value; result = createCollection(array.length); for (byte a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == char.class) { char[] array = (char[]) value; result = createCollection(array.length); for (char a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == boolean.class) { boolean[] array = (boolean[]) value; result = createCollection(array.length); for (boolean a : array) { result.add(convertType(a)); } } return result; }. ### Assistant:", "ground_truth": "Converts primitive array to target collection.", "predict": "Convert primitive array to collection. @param value primitive array @param primitiveComponentType primitive component type @return collection"}
{"ID": 1227, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: final void addLineNumber(final int lineNumber) { if (this.lineNumber == 0) { this.lineNumber = (short) lineNumber; } else { if (otherLineNumbers == null) { otherLineNumbers = new int[LINE_NUMBERS_CAPACITY_INCREMENT]; } int otherLineNumberIndex = ++otherLineNumbers[0]; if (otherLineNumberIndex >= otherLineNumbers.length) { int[] newLineNumbers = new int[otherLineNumbers.length + LINE_NUMBERS_CAPACITY_INCREMENT]; System.arraycopy(otherLineNumbers, 0, newLineNumbers, 0, otherLineNumbers.length); otherLineNumbers = newLineNumbers; } otherLineNumbers[otherLineNumberIndex] = lineNumber; } }. ### Assistant:", "ground_truth": "Adds a source line number corresponding to this label.\n\n@param lineNumber a source line number (which should be strictly positive).", "predict": "Adds a line number to the list of line numbers. If the list is already full, it doubles in size. @param lineNumber The line number to add."}
{"ID": 1228, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: final void accept(final MethodVisitor methodVisitor, final boolean visitLineNumbers) { methodVisitor.visitLabel(this); if (visitLineNumbers && lineNumber != 0) { methodVisitor.visitLineNumber(lineNumber & 0xFFFF, this); if (otherLineNumbers != null) { for (int i = 1; i <= otherLineNumbers[0]; ++i) { methodVisitor.visitLineNumber(otherLineNumbers[i], this); } } } }. ### Assistant:", "ground_truth": "Makes the given visitor visit this label and its source line numbers, if applicable.\n\n@param methodVisitor a method visitor.\n@param visitLineNumbers whether to visit of the label's source line numbers, if any.", "predict": "Accepts this instruction. @param methodVisitor the method visitor to which this instruction must be visited. @param visitLineNumbers indicates whether the line numbers must be visited."}
{"ID": 1229, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: final void put( final ByteVector code, final int sourceInsnBytecodeOffset, final boolean wideReference) { if ((flags & FLAG_RESOLVED) == 0) { if (wideReference) { addForwardReference(sourceInsnBytecodeOffset, FORWARD_REFERENCE_TYPE_WIDE, code.length); code.putInt(-1); } else { addForwardReference(sourceInsnBytecodeOffset, FORWARD_REFERENCE_TYPE_SHORT, code.length); code.putShort(-1); } } else { if (wideReference) { code.putInt(bytecodeOffset - sourceInsnBytecodeOffset); } else { code.putShort(bytecodeOffset - sourceInsnBytecodeOffset); } } }. ### Assistant:", "ground_truth": "Puts a reference to this label in the bytecode of a method. If the bytecode offset of the label\nis known, the relative bytecode offset between the label and the instruction referencing it is\ncomputed and written directly. Otherwise, a null relative offset is written and a new forward\nreference is declared for this label.\n\n@param code the bytecode of the method. This is where the reference is appended.\n@param sourceInsnBytecodeOffset the bytecode offset of the instruction that contains the\nreference to be appended.\n@param wideReference whether the reference must be stored in 4 bytes (instead of 2 bytes).", "predict": "Puts a forward reference to a wide or short instruction. @param code the bytecode to put the reference in. @param sourceInsnBytecodeOffset the bytecode offset of the instruction that generated this forward reference. @param wideReference true if the instruction is a wide instruction."}
{"ID": 1230, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void addForwardReference( final int sourceInsnBytecodeOffset, final int referenceType, final int referenceHandle) { if (forwardReferences == null) { forwardReferences = new int[FORWARD_REFERENCES_CAPACITY_INCREMENT]; } int lastElementIndex = forwardReferences[0]; if (lastElementIndex + 2 >= forwardReferences.length) { int[] newValues = new int[forwardReferences.length + FORWARD_REFERENCES_CAPACITY_INCREMENT]; System.arraycopy(forwardReferences, 0, newValues, 0, forwardReferences.length); forwardReferences = newValues; } forwardReferences[++lastElementIndex] = sourceInsnBytecodeOffset; forwardReferences[++lastElementIndex] = referenceType | referenceHandle; forwardReferences[0] = lastElementIndex; }. ### Assistant:", "ground_truth": "Adds a forward reference to this label. This method must be called only for a true forward\nreference, i.e. only if this label is not resolved yet. For backward references, the relative\nbytecode offset of the reference can be, and must be, computed and stored directly.\n\n@param sourceInsnBytecodeOffset the bytecode offset of the instruction that contains the\nreference stored at referenceHandle.\n@param referenceType either {@link #FORWARD_REFERENCE_TYPE_SHORT} or {@link\n#FORWARD_REFERENCE_TYPE_WIDE}.\n@param referenceHandle the offset in the bytecode where the forward reference value must be\nstored.", "predict": "Add a forward reference instruction. @param sourceInsnBytecodeOffset the bytecode offset of the instruction that generates the reference. @param referenceType the type of the instruction that generates the reference. @param referenceHandle the handle of the instruction that generates the reference."}
{"ID": 1231, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: final boolean resolve(final byte[] code, final int bytecodeOffset) { this.flags |= FLAG_RESOLVED; this.bytecodeOffset = bytecodeOffset; if (forwardReferences == null) { return false; } boolean hasAsmInstructions = false; for (int i = forwardReferences[0]; i > 0; i -= 2) { final int sourceInsnBytecodeOffset = forwardReferences[i - 1]; final int reference = forwardReferences[i]; final int relativeOffset = bytecodeOffset - sourceInsnBytecodeOffset; int handle = reference & FORWARD_REFERENCE_HANDLE_MASK; if ((reference & FORWARD_REFERENCE_TYPE_MASK) == FORWARD_REFERENCE_TYPE_SHORT) { if (relativeOffset < Short.MIN_VALUE || relativeOffset > Short.MAX_VALUE) { // Change the opcode of the jump instruction, in order to be able to find it later in // ClassReader. These ASM specific opcodes are similar to jump instruction opcodes, except // that the 2 bytes offset is unsigned (and can therefore represent values from 0 to // 65535, which is sufficient since the size of a method is limited to 65535 bytes). int opcode = code[sourceInsnBytecodeOffset] & 0xFF; if (opcode < Opcodes.IFNULL) { // Change IFEQ ... JSR to ASM_IFEQ ... ASM_JSR. code[sourceInsnBytecodeOffset] = (byte) (opcode + Constants.ASM_OPCODE_DELTA); } else { // Change IFNULL and IFNONNULL to ASM_IFNULL and ASM_IFNONNULL. code[sourceInsnBytecodeOffset] = (byte) (opcode + Constants.ASM_IFNULL_OPCODE_DELTA); } hasAsmInstructions = true; } code[handle++] = (byte) (relativeOffset >>> 8); code[handle] = (byte) relativeOffset; } else { code[handle++] = (byte) (relativeOffset >>> 24); code[handle++] = (byte) (relativeOffset >>> 16); code[handle++] = (byte) (relativeOffset >>> 8); code[handle] = (byte) relativeOffset; } } return hasAsmInstructions; }. ### Assistant:", "ground_truth": "Sets the bytecode offset of this label to the given value and resolves the forward references\nto this label, if any. This method must be called when this label is added to the bytecode of\nthe method, i.e. when its bytecode offset becomes known. This method fills in the blanks that\nwhere left in the bytecode by each forward reference previously added to this label.\n\n@param code the bytecode of the method.\n@param bytecodeOffset the bytecode offset of this label.\n@return {@literal true} if a blank that was left for this label was too small to store the\noffset. In such a case the corresponding jump instruction is replaced with an equivalent\nASM specific instruction using an unsigned two bytes offset. These ASM specific\ninstructions are later replaced with standard bytecode instructions with wider offsets (4\nbytes instead of 2), in ClassReader.", "predict": "Resolve the forward references. @param code the bytecode of the method. @param bytecodeOffset the bytecode offset of the instruction that contains the forward reference. @return true if the forward reference was resolved."}
{"ID": 1232, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: final void markSubroutine(final short subroutineId) { // Data flow algorithm: put this basic block in a list of blocks to process (which are blocks // belonging to subroutine subroutineId) and, while there are blocks to process, remove one from // the list, mark it as belonging to the subroutine, and add its successor basic blocks in the // control flow graph to the list of blocks to process (if not already done). Label listOfBlocksToProcess = this; listOfBlocksToProcess.nextListElement = EMPTY_LIST; while (listOfBlocksToProcess != EMPTY_LIST) { // Remove a basic block from the list of blocks to process. Label basicBlock = listOfBlocksToProcess; listOfBlocksToProcess = listOfBlocksToProcess.nextListElement; basicBlock.nextListElement = null; // If it is not already marked as belonging to a subroutine, mark it as belonging to // subroutineId and add its successors to the list of blocks to process (unless already done). if (basicBlock.subroutineId == 0) { basicBlock.subroutineId = subroutineId; listOfBlocksToProcess = basicBlock.pushSuccessors(listOfBlocksToProcess); } } }. ### Assistant:", "ground_truth": "Finds the basic blocks that belong to the subroutine starting with the basic block\ncorresponding to this label, and marks these blocks as belonging to this subroutine. This\nmethod follows the control flow graph to find all the blocks that are reachable from the\ncurrent basic block WITHOUT following any jsr target.\n\n<p>Note: a precondition and postcondition of this method is that all labels must have a null\n{@link #nextListElement}.\n\n@param subroutineId the id of the subroutine starting with the basic block corresponding to\nthis label.", "predict": "Marks a subroutine. @param subroutineId The ID of the subroutine."}
{"ID": 1233, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: final void addSubroutineRetSuccessors(final Label subroutineCaller) { // Data flow algorithm: put this basic block in a list blocks to process (which are blocks // belonging to a subroutine starting with this label) and, while there are blocks to process, // remove one from the list, put it in a list of blocks that have been processed, add a return // edge to the successor of subroutineCaller if applicable, and add its successor basic blocks // in the control flow graph to the list of blocks to process (if not already done). Label listOfProcessedBlocks = EMPTY_LIST; Label listOfBlocksToProcess = this; listOfBlocksToProcess.nextListElement = EMPTY_LIST; while (listOfBlocksToProcess != EMPTY_LIST) { // Move a basic block from the list of blocks to process to the list of processed blocks. Label basicBlock = listOfBlocksToProcess; listOfBlocksToProcess = basicBlock.nextListElement; basicBlock.nextListElement = listOfProcessedBlocks; listOfProcessedBlocks = basicBlock; // Add an edge from this block to the successor of the caller basic block, if this block is // the end of a subroutine and if this block and subroutineCaller do not belong to the same // subroutine. if ((basicBlock.flags & FLAG_SUBROUTINE_END) != 0 && basicBlock.subroutineId != subroutineCaller.subroutineId) { basicBlock.outgoingEdges = new Edge( basicBlock.outputStackSize, // By construction, the first outgoing edge of a basic block that ends with a jsr // instruction leads to the jsr continuation block, i.e. where execution continues // when ret is called (see {@link #FLAG_SUBROUTINE_CALLER}). subroutineCaller.outgoingEdges.successor, basicBlock.outgoingEdges); } // Add its successors to the list of blocks to process. Note that {@link #pushSuccessors} does // not push basic blocks which are already in a list. Here this means either in the list of // blocks to process, or in the list of already processed blocks. This second list is // important to make sure we don't reprocess an already processed block. listOfBlocksToProcess = basicBlock.pushSuccessors(listOfBlocksToProcess); } // Reset the {@link #nextListElement} of all the basic blocks that have been processed to null, // so that this method can be called again with a different subroutine or subroutine caller. while (listOfProcessedBlocks != EMPTY_LIST) { Label newListOfProcessedBlocks = listOfProcessedBlocks.nextListElement; listOfProcessedBlocks.nextListElement = null; listOfProcessedBlocks = newListOfProcessedBlocks; } }. ### Assistant:", "ground_truth": "Finds the basic blocks that end a subroutine starting with the basic block corresponding to\nthis label and, for each one of them, adds an outgoing edge to the basic block following the\ngiven subroutine call. In other words, completes the control flow graph by adding the edges\ncorresponding to the return from this subroutine, when called from the given caller basic\nblock.\n\n<p>Note: a precondition and postcondition of this method is that all labels must have a null\n{@link #nextListElement}.\n\n@param subroutineCaller a basic block that ends with a jsr to the basic block corresponding to\nthis label. This label is supposed to correspond to the start of a subroutine.", "predict": "Adds the successors of this block to the list of blocks to process. This is done in order to compute the control flow graph. The successor of a subroutine caller is added to the list of blocks to process only if it is not already in the list of processed blocks. @param subroutineCaller The subroutine caller."}
{"ID": 1234, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected int[] compareDigits(final String str1, int ndx1, final String str2, int ndx2) { // iterate all digits in the first string int zeroCount1 = 0; while (charAt(str1, ndx1) == '0') { zeroCount1++; ndx1++; } int len1 = 0; while (true) { final char char1 = charAt(str1, ndx1); final boolean isDigitChar1 = CharUtil.isDigit(char1); if (!isDigitChar1) { break; } len1++; ndx1++; } // iterate all digits in the second string and compare with the first int zeroCount2 = 0; while (charAt(str2, ndx2) == '0') { zeroCount2++; ndx2++; } int len2 = 0; int ndx1_new = ndx1 - len1; int equalNumbers = 0; while (true) { final char char2 = charAt(str2, ndx2); final boolean isDigitChar2 = CharUtil.isDigit(char2); if (!isDigitChar2) { break; } if (equalNumbers == 0 && (ndx1_new < ndx1)) { equalNumbers = charAt(str1, ndx1_new++) - char2; } len2++; ndx2++; } // compare if (len1 != len2) { // numbers are not equals size return new int[] {len1 - len2}; } if (equalNumbers != 0) { return new int[] {equalNumbers}; } // numbers are equal, but number of zeros is different return new int[] {0, zeroCount1 - zeroCount2, ndx1, ndx2}; }. ### Assistant:", "ground_truth": "Compare digits at certain position in two strings.\nThe longest run of digits wins. That aside, the greatest\nvalue wins.\n@return if numbers are different, only 1 element is returned.", "predict": "Compare digits in two strings. @param str1 first string @param ndx1 index of the first digit in the first string @param str2 second string @param ndx2 index of the first digit in the second string @return array of integers, where 0 is the number of digits in the first string, 1 is the difference of number of zeros in the strings, 2 is the index of the first digit in the first string, 3 is the index of the first digit in the second string. If the strings are not equals, the array will contain 0, otherwise it will contain the difference of number of zeros in the strings."}
{"ID": 1235, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private char fixAccent(final char c) { for (int i = 0; i < ACCENT_CHARS.length; i+=2) { final char accentChar = ACCENT_CHARS[i]; if (accentChar == c) { return ACCENT_CHARS[i + 1]; } } return c; }. ### Assistant:", "ground_truth": "Fixes accent char.", "predict": "Fix accent characters. @param c accent character @return accent character"}
{"ID": 1236, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ByteVector putByte(final int byteValue) { int currentLength = length; if (currentLength + 1 > data.length) { enlarge(1); } data[currentLength++] = (byte) byteValue; length = currentLength; return this; }. ### Assistant:", "ground_truth": "Puts a byte into this byte vector. The byte vector is automatically enlarged if necessary.\n\n@param byteValue a byte.\n@return this byte vector.", "predict": "Put a single byte value into the stream. The length of the stream is increased by one byte. @param byteValue the byte value to be put into the stream. @return this ByteVector object."}
{"ID": 1237, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: final ByteVector put11(final int byteValue1, final int byteValue2) { int currentLength = length; if (currentLength + 2 > data.length) { enlarge(2); } byte[] currentData = data; currentData[currentLength++] = (byte) byteValue1; currentData[currentLength++] = (byte) byteValue2; length = currentLength; return this; }. ### Assistant:", "ground_truth": "Puts two bytes into this byte vector. The byte vector is automatically enlarged if necessary.\n\n@param byteValue1 a byte.\n@param byteValue2 another byte.\n@return this byte vector.", "predict": "Put two bytes into the byte vector. The first byte is put at the current position, the second byte is put at the next position. The length of the byte vector is increased by 2. @param byteValue1 the first byte to put @param byteValue2 the second byte to put @return this byte vector"}
{"ID": 1238, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ByteVector putShort(final int shortValue) { int currentLength = length; if (currentLength + 2 > data.length) { enlarge(2); } byte[] currentData = data; currentData[currentLength++] = (byte) (shortValue >>> 8); currentData[currentLength++] = (byte) shortValue; length = currentLength; return this; }. ### Assistant:", "ground_truth": "Puts a short into this byte vector. The byte vector is automatically enlarged if necessary.\n\n@param shortValue a short.\n@return this byte vector.", "predict": "Put a 2-byte short value. @param shortValue the short value @return this ByteVector object"}
{"ID": 1239, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: final ByteVector put12(final int byteValue, final int shortValue) { int currentLength = length; if (currentLength + 3 > data.length) { enlarge(3); } byte[] currentData = data; currentData[currentLength++] = (byte) byteValue; currentData[currentLength++] = (byte) (shortValue >>> 8); currentData[currentLength++] = (byte) shortValue; length = currentLength; return this; }. ### Assistant:", "ground_truth": "Puts a byte and a short into this byte vector. The byte vector is automatically enlarged if\nnecessary.\n\n@param byteValue a byte.\n@param shortValue a short.\n@return this byte vector.", "predict": "Put a 12-bit signed integer value. @param byteValue the byte value @param shortValue the short value @return this ByteVector object"}
{"ID": 1240, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: final ByteVector put112(final int byteValue1, final int byteValue2, final int shortValue) { int currentLength = length; if (currentLength + 4 > data.length) { enlarge(4); } byte[] currentData = data; currentData[currentLength++] = (byte) byteValue1; currentData[currentLength++] = (byte) byteValue2; currentData[currentLength++] = (byte) (shortValue >>> 8); currentData[currentLength++] = (byte) shortValue; length = currentLength; return this; }. ### Assistant:", "ground_truth": "Puts two bytes and a short into this byte vector. The byte vector is automatically enlarged if\nnecessary.\n\n@param byteValue1 a byte.\n@param byteValue2 another byte.\n@param shortValue a short.\n@return this byte vector.", "predict": "Put a 112-bit value into the vector. The value is in big-endian byte order. @param byteValue1 the first byte of the value @param byteValue2 the second byte of the value @param shortValue the third and fourth bytes of the value @return this vector"}
{"ID": 1241, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ByteVector putInt(final int intValue) { int currentLength = length; if (currentLength + 4 > data.length) { enlarge(4); } byte[] currentData = data; currentData[currentLength++] = (byte) (intValue >>> 24); currentData[currentLength++] = (byte) (intValue >>> 16); currentData[currentLength++] = (byte) (intValue >>> 8); currentData[currentLength++] = (byte) intValue; length = currentLength; return this; }. ### Assistant:", "ground_truth": "Puts an int into this byte vector. The byte vector is automatically enlarged if necessary.\n\n@param intValue an int.\n@return this byte vector.", "predict": "Put an int value into the buffer. The value is stored in big-endian byte order. The length of the buffer is increased by 4 bytes."}
{"ID": 1242, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: final ByteVector put122(final int byteValue, final int shortValue1, final int shortValue2) { int currentLength = length; if (currentLength + 5 > data.length) { enlarge(5); } byte[] currentData = data; currentData[currentLength++] = (byte) byteValue; currentData[currentLength++] = (byte) (shortValue1 >>> 8); currentData[currentLength++] = (byte) shortValue1; currentData[currentLength++] = (byte) (shortValue2 >>> 8); currentData[currentLength++] = (byte) shortValue2; length = currentLength; return this; }. ### Assistant:", "ground_truth": "Puts one byte and two shorts into this byte vector. The byte vector is automatically enlarged\nif necessary.\n\n@param byteValue a byte.\n@param shortValue1 a short.\n@param shortValue2 another short.\n@return this byte vector.", "predict": "Put a 122-bit value into the vector. The value is a 122-bit binary number, where the first 54 bits are the low-order 54 bits of the number, and the remaining 68 bits are the high-order 68 bits of the number. The numbers are stored in little-endian byte order. @param byteValue The low-order 54 bits of the number. @param shortValue1 The high-order 16 bits of the number. @param shortValue2 The high-order 16 bits of the number. @return This vector."}
{"ID": 1243, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ByteVector putLong(final long longValue) { int currentLength = length; if (currentLength + 8 > data.length) { enlarge(8); } byte[] currentData = data; int intValue = (int) (longValue >>> 32); currentData[currentLength++] = (byte) (intValue >>> 24); currentData[currentLength++] = (byte) (intValue >>> 16); currentData[currentLength++] = (byte) (intValue >>> 8); currentData[currentLength++] = (byte) intValue; intValue = (int) longValue; currentData[currentLength++] = (byte) (intValue >>> 24); currentData[currentLength++] = (byte) (intValue >>> 16); currentData[currentLength++] = (byte) (intValue >>> 8); currentData[currentLength++] = (byte) intValue; length = currentLength; return this; }. ### Assistant:", "ground_truth": "Puts a long into this byte vector. The byte vector is automatically enlarged if necessary.\n\n@param longValue a long.\n@return this byte vector.", "predict": "Put a long value into the BigInteger. The long value is stored in two 32-bit words. The first word is the lower 32 bits of the long value, the second word is the upper 32 bits. The sign of the long value is lost. @param longValue the long value to be stored in the BigInteger. @return this BigInteger."}
{"ID": 1244, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ByteVector putByteArray( final byte[] byteArrayValue, final int byteOffset, final int byteLength) { if (length + byteLength > data.length) { enlarge(byteLength); } if (byteArrayValue != null) { System.arraycopy(byteArrayValue, byteOffset, data, length, byteLength); } length += byteLength; return this; }. ### Assistant:", "ground_truth": "Puts an array of bytes into this byte vector. The byte vector is automatically enlarged if\nnecessary.\n\n@param byteArrayValue an array of bytes. May be {@literal null} to put {@code byteLength} null\nbytes into this byte vector.\n@param byteOffset index of the first byte of byteArrayValue that must be copied.\n@param byteLength number of bytes of byteArrayValue that must be copied.\n@return this byte vector.", "predict": "Puts a byte array into this vector. The byte array is repeated until the capacity is reached. @param byteArrayValue the byte array to be put into this vector. @param byteOffset offset of first byte of the byte array @param byteLength length of the byte array @return this vector"}
{"ID": 1245, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void enlarge(final int size) { int doubleCapacity = 2 * data.length; int minimalCapacity = length + size; byte[] newData = new byte[doubleCapacity > minimalCapacity ? doubleCapacity : minimalCapacity]; System.arraycopy(data, 0, newData, 0, length); data = newData; }. ### Assistant:", "ground_truth": "Enlarges this byte vector so that it can receive 'size' more bytes.\n\n@param size number of additional bytes that this byte vector should be able to receive.", "predict": "Double the size of the buffer."}
{"ID": 1246, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected T authenticateUserViaHttpSession(final ActionRequest actionRequest) { final HttpServletRequest servletRequest = actionRequest.getHttpServletRequest(); final UserSession<T> userSession = UserSession.get(servletRequest); if (userSession == null) { return null; } final T authToken = userSession.getAuthToken(); if (authToken == null) { return null; } // granted final T newAuthToken = userAuth().rotateToken(authToken); if (newAuthToken != authToken) { final UserSession<T> newUserSesion = new UserSession<>(newAuthToken, userAuth().tokenValue(newAuthToken)); newUserSesion.start(servletRequest, actionRequest.getHttpServletResponse()); } return newAuthToken; }. ### Assistant:", "ground_truth": "Tries to authenticate user via HTTP session. Returns the token if user is authenticated.\nReturned token may be rotated.", "predict": "Rotate the auth token in the session and return it. @param actionRequest the action request @return the rotated auth token"}
{"ID": 1247, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected T authenticateUserViaToken(final ActionRequest actionRequest) { final HttpServletRequest servletRequest = actionRequest.getHttpServletRequest(); // then try the auth token final String token = ServletUtil.resolveAuthBearerToken(servletRequest); if (token == null) { return null; } final T authToken = userAuth().validateToken(token); if (authToken == null) { return null; } // granted final T newAuthToken = userAuth().rotateToken(authToken); actionRequest.getHttpServletResponse().setHeader(\"Authentication\", \"Bearer: \" + userAuth().tokenValue(newAuthToken)); return newAuthToken; }. ### Assistant:", "ground_truth": "Tries to authenticate user via token. Returns the token if user is authenticated.\nReturned token may be rotated.", "predict": "Authenticate the user via token. @param actionRequest the incoming request @return the authenticated user token or null if the token is not present or is invalid."}
{"ID": 1248, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected T authenticateUserViaBasicAuth(final ActionRequest actionRequest) { final HttpServletRequest servletRequest = actionRequest.getHttpServletRequest(); final String username = ServletUtil.resolveAuthUsername(servletRequest); if (username == null) { return null; } final String password = ServletUtil.resolveAuthPassword(servletRequest); final T authToken = userAuth().login(username, password); if (authToken == null) { return null; } return authToken; }. ### Assistant:", "ground_truth": "Tires to authenticate user via the basic authentication. Returns the token if user is authenticated.", "predict": "Authenticate user via basic auth. @param actionRequest the action request @return the authenticated user or null if authentication failed"}
{"ID": 1249, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String findDefaultMessage(final Locale locale, final String key) { String indexedKey = calcIndexKey(key); String msg = getMessage(fallbackBundlename, locale, key, indexedKey); if (msg != null) { return msg; } for (String bname : defaultBundles) { msg = getMessage(bname, locale, key, indexedKey); if (msg != null) { return msg; } } return null; }. ### Assistant:", "ground_truth": "Finds message in default bundles only, starting from fallback bundlename.", "predict": "Finds the default message for the given key in the bundles. If not found, falls back to the fallbackBundlename. If still not found, returns null."}
{"ID": 1250, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected ResourceBundle getBundle(final String bundleName, final Locale locale, final ClassLoader classLoader) { return ResourceBundle.getBundle(bundleName, locale, classLoader); }. ### Assistant:", "ground_truth": "Returns specified bundle. Invoked every time if cache is disabled.\nInput arguments are always valid.", "predict": "Get the resource bundle for the given name and locale. The classLoader is used to load the resource bundle. @param bundleName the name of the resource bundle @param locale the locale for the resource bundle @param classLoader the class loader to use to load the resource bundle @return the resource bundle"}
{"ID": 1251, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected K get(final K[] array, final int index) { return (K) Array.get(array, index); }. ### Assistant:", "ground_truth": "Returns array's element at given index.", "predict": "Get the element at the specified index. @param array the array to get the element from. @param index the index of the element to get. @return the element at the specified index."}
{"ID": 1252, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected <E, ID> void setEntityId(final DbEntityDescriptor<E> ded, final E entity, final ID newIdValue) { ded.setIdValue(entity, newIdValue); }. ### Assistant:", "ground_truth": "Sets new ID value for entity.", "predict": "Set the id value of an entity. The method is called by the EntityManager when an entity is inserted or updated. The method is called by the EntityManager when an entity is inserted or updated. The method is called by the EntityManager when an entity is inserted or updated. The method is called by the EntityManager when an entity is inserted or updated. The method is called by the EntityManager when an entity is inserted or updated. The method is called by the EntityManager when an entity is inserted or updated. The method is called by the EntityManager when an entity is inserted or updated. The method is called by the EntityManager when an entity is inserted or updated. The method is called by the EntityManager when an entity is inserted or updated. The method is called by the EntityManager when an entity is inserted or updated. The method is called by the EntityManager when an entity is inserted or updated. The method is called by the EntityManager when an entity is inserted or updated. The method is called by the EntityManager when an entity is inserted or updated."}
{"ID": 1253, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void save(final Object entity) { final DbQuery q = query(dbOom.entities().insert(entity)); q.autoClose().executeUpdate(); }. ### Assistant:", "ground_truth": "Simply inserts object into the database.", "predict": "Save the given entity to the database. @param entity The entity to save."}
{"ID": 1254, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void update(final Object entity) { query(dbOom.entities().updateAll(entity)).autoClose().executeUpdate(); }. ### Assistant:", "ground_truth": "Updates single entity.", "predict": "Update an entity in the database. @param entity the entity to update."}
{"ID": 1255, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <E> E updateProperty(final E entity, final String name, final Object newValue) { query(dbOom.entities().updateColumn(entity, name, newValue)).autoClose().executeUpdate(); BeanUtil.declared.setProperty(entity, name, newValue); return entity; }. ### Assistant:", "ground_truth": "Updates single property in database and in the bean.", "predict": "Update a property of an entity. The property is updated in the database. The entity itself is returned. @param <E> Entity type. @param entity Entity to update. @param name Name of the property. @param newValue New value of the property. @return Updated entity."}
{"ID": 1256, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <E> E updateProperty(final E entity, final String name) { Object value = BeanUtil.declared.getProperty(entity, name); query(dbOom.entities().updateColumn(entity, name, value)).autoClose().executeUpdate(); return entity; }. ### Assistant:", "ground_truth": "Updates property in the database by storing the current property value.", "predict": "Update a property of an entity. @param <E> Entity type. @param entity Entity to update. @param name Name of the property to update. @return Updated entity."}
{"ID": 1257, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <E, ID> E findById(final Class<E> entityType, final ID id) { return query(dbOom.entities().findById(entityType, id)).autoClose().find(entityType); }. ### Assistant:", "ground_truth": "Finds single entity by its id.", "predict": "Find an entity by ID. @param entityType The type of the entity to find. @param id The ID of the entity to find. @param <E> The type of the entity. @param <ID> The type of the ID. @return The entity with the matching ID."}
{"ID": 1258, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <E> E findOneByProperty(final Class<E> entityType, final String name, final Object value) { return query(dbOom.entities().findByColumn(entityType, name, value)).autoClose().find(entityType); }. ### Assistant:", "ground_truth": "Finds single entity by matching property.", "predict": "Finds an entity by a specific property. The property must exist in the entity. @param entityType the entity type @param name the property name @param value the value of the property @return the entity found or null if none found"}
{"ID": 1259, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings({\"unchecked\"}) public <E> E findOne(final Object criteria) { return (E) query(dbOom.entities().find(criteria)).autoClose().find(criteria.getClass()); }. ### Assistant:", "ground_truth": "Finds one entity for given criteria.", "predict": "Finds the first entity that matches the criteria. @param criteria the criteria to match @param <E> the type of the entity to return @return the first entity that matches the criteria"}
{"ID": 1260, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <ID> void deleteById(final Class entityType, final ID id) { query(dbOom.entities().deleteById(entityType, id)).autoClose().executeUpdate(); }. ### Assistant:", "ground_truth": "Deleted single entity by its id.", "predict": "Deletes an entity by id. @param <ID> the type of the id @param entityType the type of the entity @param id the id of the entity to delete"}
{"ID": 1261, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void deleteById(final Object entity) { if (entity != null) { int result = query(dbOom.entities().deleteById(entity)).autoClose().executeUpdate(); if (result != 0) { // now reset the ID value Class type = entity.getClass(); DbEntityDescriptor ded = dbOom.entityManager().lookupType(type); setEntityId(ded, entity, 0); } } }. ### Assistant:", "ground_truth": "Delete single object by its id. Resets ID value.", "predict": "Delete the entity by its primary key. @param entity"}
{"ID": 1262, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public long count(final Class entityType) { return query(dbOom.entities().count(entityType)).autoClose().executeCount(); }. ### Assistant:", "ground_truth": "Counts number of all entities.", "predict": "Counts the number of entities of the given type in the database. @param entityType the type of the entities to count. @return the number of entities of the given type in the database."}
{"ID": 1263, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <ID> void increaseProperty(final Class entityType, final ID id, final String name, final Number delta) { query(dbOom.entities().increaseColumn(entityType, id, name, delta, true)).autoClose().executeUpdate(); }. ### Assistant:", "ground_truth": "Increases a property.", "predict": "Increase the value of a property of an entity by delta. @param <ID> the type of the id @param entityType the type of the entity @param id the id of the entity @param name the name of the property @param delta the delta to increase the value by"}
{"ID": 1264, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <ID> void decreaseProperty(final Class entityType, final ID id, final String name, final Number delta) { query(dbOom.entities().increaseColumn(entityType, id, name, delta, false)).autoClose().executeUpdate(); }. ### Assistant:", "ground_truth": "Decreases a property.", "predict": "Decrease the value of a property of an entity. @param <ID> the type of the primary key of the entity. @param entityType the type of the entity. @param id the primary key of the entity. @param name the name of the property. @param delta the delta of the value of the property."}
{"ID": 1265, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <E> List<E> findRelated(final Class<E> target, final Object source) { return query(dbOom.entities().findForeign(target, source)).autoClose().list(target); }. ### Assistant:", "ground_truth": "Finds related entity.", "predict": "Find all entities of the target class related to the source entity. @param target the target class @param source the source entity @param <E> the target class @return the list of entities related to the source entity"}
{"ID": 1266, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <E> List<E> listAll(final Class<E> target) { return query(dbOom.entities().from(target)).autoClose().list(target); }. ### Assistant:", "ground_truth": "List all entities.", "predict": "Returns all entities of the given type. @param target the type of the entities to return. @return a list of entities of the given type."}
{"ID": 1267, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void clear() { entries = null; Iterator<String> keys = getAttributeNames(); while (keys.hasNext()) { removeAttribute(keys.next()); } }. ### Assistant:", "ground_truth": "Removes all attributes from the request as well as clears entries in this map.", "predict": "Clear all attributes."}
{"ID": 1268, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public Set<Entry<String, Object>> entrySet() { if (entries == null) { entries = new HashSet<>(); Iterator<String> iterator = getAttributeNames(); while (iterator.hasNext()) { final String key = iterator.next(); final Object value = getAttribute(key); entries.add(new Entry<String, Object>() { @Override public boolean equals(final Object obj) { if (obj == null) { return false; } if (this.getClass() != obj.getClass()) { return false; } Entry entry = (Entry) obj; return ((key == null) ? (entry.getKey() == null) : key.equals(entry.getKey())) && ((value == null) ? (entry.getValue() == null) : value.equals(entry.getValue())); } @Override public int hashCode() { return ((key == null) ? 0 : key.hashCode()) ^ ((value == null) ? 0 : value.hashCode()); } @Override public String getKey() { return key; } @Override public Object getValue() { return value; } @Override public Object setValue(final Object obj) { setAttribute(key, obj); return value; } }); } } return entries; }. ### Assistant:", "ground_truth": "Returns a Set of attributes from the http request.", "predict": "Returns the set of all entries in the attributes. @return the set of all entries in the attributes."}
{"ID": 1269, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public Object put(final String key, final Object value) { entries = null; Object previous = get(key); setAttribute(key, value); return previous; }. ### Assistant:", "ground_truth": "Saves an attribute in the request.", "predict": "Put an object into the cache. If the key is already present, the previous value is replaced. The previous value is returned. @param key the key of the object to be put @param value the object to be put @return the previous value of the key, or null if the key was not previously present in the cache."}
{"ID": 1270, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public Object remove(final Object key) { entries = null; Object value = get(key); removeAttribute(key.toString()); return value; }. ### Assistant:", "ground_truth": "Removes the specified request attribute.", "predict": "Remove the value associated with the specified key. The key is converted to a string before it is used as an attribute. The returned value is the value that was previously associated with the key."}
{"ID": 1271, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings({\"ThrowCaughtLocally\"}) public static StackTraceElement[] getCurrentStackTrace() { StackTraceElement[] ste = new Exception().getStackTrace(); if (ste.length > 1) { StackTraceElement[] result = new StackTraceElement[ste.length - 1]; System.arraycopy(ste, 1, result, 0, ste.length - 1); return result; } else { return ste; } }. ### Assistant:", "ground_truth": "Returns current stack trace in form of array of stack trace elements.\nFirst stack trace element is removed.\nSince an exception is thrown internally, this method is slow.", "predict": "Get the current stack trace. @return the stack trace."}
{"ID": 1272, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static StackTraceElement[] getStackTrace(final Throwable t, final String[] allow, final String[] deny) { StackTraceElement[] st = t.getStackTrace(); ArrayList<StackTraceElement> result = new ArrayList<>(st.length); elementLoop: for (StackTraceElement element : st) { String className = element.getClassName(); if (allow != null) { boolean validElemenet = false; for (String filter : allow) { if (className.contains(filter)) { validElemenet = true; break; } } if (!validElemenet) { continue; } } if (deny != null) { for (String filter : deny) { if (className.contains(filter)) { continue elementLoop; } } } result.add(element); } st = new StackTraceElement[result.size()]; return result.toArray(st); }. ### Assistant:", "ground_truth": "Returns stack trace filtered by class names.", "predict": "Get the stack trace elements that match the allow and deny patterns. @param t the throwable to get the stack trace from @param allow the allow patterns @param deny the deny patterns @return the stack trace elements that match the allow and deny patterns."}
{"ID": 1273, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static StackTraceElement[][] getStackTraceChain(Throwable t, final String[] allow, final String[] deny) { ArrayList<StackTraceElement[]> result = new ArrayList<>(); while (t != null) { StackTraceElement[] stack = getStackTrace(t, allow, deny); result.add(stack); t = t.getCause(); } StackTraceElement[][] allStacks = new StackTraceElement[result.size()][]; for (int i = 0; i < allStacks.length; i++) { allStacks[i] = result.get(i); } return allStacks; }. ### Assistant:", "ground_truth": "Returns stack trace chain filtered by class names.", "predict": "Get the complete stack trace chain of the given throwable. The stack trace chain is represented as an array of arrays, where each inner array represents the stack trace chain of a single nested exception. The outermost array represents the stack trace chain of the original exception. The stack trace chain is returned as a flat array. The stack trace chain can be used to reconstruct the original exception and its nested exceptions. @param t the throwable to get the stack trace chain of. @param allow the allowed stack trace elements. @param deny the disallowed stack trace elements. @return the stack trace chain of the given throwable."}
{"ID": 1274, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Throwable[] getExceptionChain(Throwable throwable) { ArrayList<Throwable> list = new ArrayList<>(); list.add(throwable); while ((throwable = throwable.getCause()) != null) { list.add(throwable); } Throwable[] result = new Throwable[list.size()]; return list.toArray(result); }. ### Assistant:", "ground_truth": "Returns exception chain starting from top up to root cause.", "predict": "Get the exception chain from a Throwable. The chain is represented as an ArrayList of Throwables. The first Throwable is the root cause, and each subsequent Throwable is the cause of the previous Throwable. @param throwable the Throwable to get the exception chain from. @return the exception chain."}
{"ID": 1275, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String exceptionStackTraceToString(final Throwable t) { StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw, true); t.printStackTrace(pw); StreamUtil.close(pw); StreamUtil.close(sw); return sw.toString(); }. ### Assistant:", "ground_truth": "Prints stack trace into a String.", "predict": "Convert Throwable to String. @param t Throwable object. @return StackTrace as String."}
{"ID": 1276, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String exceptionChainToString(Throwable t) { StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw, true); while (t != null) { t.printStackTrace(pw); t = t.getCause(); } StreamUtil.close(pw); StreamUtil.close(sw); return sw.toString(); }. ### Assistant:", "ground_truth": "Prints full exception stack trace, from top to root cause, into a String.", "predict": "Print the exception chain in a readable format. @param t the throwable object @return the string representation of the exception chain"}
{"ID": 1277, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String buildMessage(final String message, Throwable cause) { if (cause != null) { cause = getRootCause(cause); StringBuilder buf = new StringBuilder(); if (message != null) { buf.append(message).append(\"; \"); } buf.append(\"<--- \").append(cause); return buf.toString(); } else { return message; } }. ### Assistant:", "ground_truth": "Build a message for the given base message and its cause.", "predict": "Build a message describing the cause of an exception. The message will include the original message, the root cause and the stack trace. @param message the original message @param cause the root cause of the exception @return a message describing the cause of the exception"}
{"ID": 1278, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Throwable unwrapThrowable(final Throwable wrappedThrowable) { Throwable unwrapped = wrappedThrowable; while (true) { if (unwrapped instanceof InvocationTargetException) { unwrapped = ((InvocationTargetException) unwrapped).getTargetException(); } else if (unwrapped instanceof UndeclaredThrowableException) { unwrapped = ((UndeclaredThrowableException) unwrapped).getUndeclaredThrowable(); } else { return unwrapped; } } }. ### Assistant:", "ground_truth": "Unwraps invocation and undeclared exceptions to real cause.", "predict": "Unwraps a Throwable, following the chain of nested InvocationTargetExceptions and UndeclaredThrowableExceptions. @param wrappedThrowable the Throwable to be unwrapped. @return the unwrapped Throwable."}
{"ID": 1279, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void registerAsConsumer(final ClassScanner classScanner) { classScanner.registerEntryConsumer(classPathEntry -> { final String entryName = classPathEntry.name(); if (entryName.endsWith(actionClassSuffix)) { try { acceptActionClass(classPathEntry.loadClass()); } catch (Exception ex) { log.debug(\"Invalid Madvoc action, ignoring: \" + entryName); } } else if (classPathEntry.isTypeSignatureInUse(MADVOC_COMPONENT_ANNOTATION)) { try { acceptMadvocComponentClass(classPathEntry.loadClass()); } catch (Exception ex) { log.debug(\"Invalid Madvoc component ignoring: {}\" + entryName); } } }); }. ### Assistant:", "ground_truth": "Parses class name that matches madvoc-related names.", "predict": "Registers the class scanner as consumer of the classpath entries. This means that the class scanner will be informed about new classes that are added to the classpath. @param classScanner the class scanner to register as consumer of the classpath entries."}
{"ID": 1280, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void acceptMadvocComponentClass(final Class componentClass) { if (componentClass == null) { return; } if (!checkClass(componentClass)) { return; } madvocComponents.add(() -> madvocContainer.registerComponent(componentClass)); }. ### Assistant:", "ground_truth": "Registers new Madvoc component.", "predict": "Accepts a Madvoc component class. @param componentClass the Madvoc component class to accept."}
{"ID": 1281, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static ClassLoader getSystemClassLoader() { if (System.getSecurityManager() == null) { return ClassLoader.getSystemClassLoader(); } else { return AccessController.doPrivileged( (PrivilegedAction<ClassLoader>) ClassLoader::getSystemClassLoader); } }. ### Assistant:", "ground_truth": "Returns system class loader.", "predict": "Returns the system classloader. @return the system classloader."}
{"ID": 1282, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static InputStream getResourceAsStream(final String resourceName, final ClassLoader callingClass) throws IOException { URL url = getResourceUrl(resourceName, callingClass); if (url != null) { return url.openStream(); } return null; }. ### Assistant:", "ground_truth": "Opens a resource of the specified name for reading.\n@see #getResourceUrl(String, ClassLoader)", "predict": "Get the InputStream for a resource. @param resourceName The name of the resource to get. @param callingClass The class of the calling code. @return The InputStream for the resource. @throws IOException If the resource cannot be found."}
{"ID": 1283, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static InputStream getResourceAsStream(final String resourceName, final ClassLoader callingClass, final boolean useCache) throws IOException { URL url = getResourceUrl(resourceName, callingClass); if (url != null) { URLConnection urlConnection = url.openConnection(); urlConnection.setUseCaches(useCache); return urlConnection.getInputStream(); } return null; }. ### Assistant:", "ground_truth": "Opens a resource of the specified name for reading. Controls caching,\nthat is important when the same jar is reloaded using custom classloader.", "predict": "Get a resource as an InputStream. If the resource is not found, it will be searched recursively in the calling class's classloader. If the resource is found, it will be cached for future use. @param resourceName The name of the resource to be loaded. @param callingClass The class of the calling code. @param useCache Whether or not to use the cache. @return The InputStream for the resource. @throws IOException If the resource cannot be loaded."}
{"ID": 1284, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static InputStream getClassAsStream(final Class clazz) throws IOException { return getResourceAsStream(ClassUtil.convertClassNameToFileName(clazz), clazz.getClassLoader()); }. ### Assistant:", "ground_truth": "Opens a class of the specified name for reading using class classloader.\n@see #getResourceAsStream(String, ClassLoader)", "predict": "Get a class as stream. @param clazz the class to get as stream. @return the class as stream. @throws IOException if the class could not be found or the stream could not be opened."}
{"ID": 1285, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static InputStream getClassAsStream(final String className, final ClassLoader classLoader) throws IOException { return getResourceAsStream(ClassUtil.convertClassNameToFileName(className), classLoader); }. ### Assistant:", "ground_truth": "Opens a class of the specified name for reading using provided class loader.", "predict": "Get the class as stream. @param className the className @param classLoader the class loader @return the class as stream @throws IOException the io exception"}
{"ID": 1286, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public RouteChunk add(final String newValue) { RouteChunk routeChunk = new RouteChunk(routes, this, newValue); if (children == null) { children = new RouteChunk[] {routeChunk}; } else { children = ArraysUtil.append(children, routeChunk); } return routeChunk; }. ### Assistant:", "ground_truth": "Adds a new child to the tree.", "predict": "Add a new route chunk to this route chunk. The new route chunk will be added to the end of the children array. @param newValue The new route chunk to add. @return The new route chunk."}
{"ID": 1287, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public RouteChunk findOrCreateChild(final String value) { if (children != null) { for (RouteChunk child : children) { if (child.get().equals(value)) { return child; } } } return add(value); }. ### Assistant:", "ground_truth": "Finds existing chunk or creates a new one if does not exist.", "predict": "Finds or creates a child route chunk. If the child is already present, it is returned. Otherwise, it is added to the children list. @param value the value of the child @return the child route chunk"}
{"ID": 1288, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void parseRequest() throws IOException { if (ServletUtil.isMultipartRequest(request)) { parseRequestStream(request.getInputStream(), characterEncoding); } else { Enumeration names = request.getParameterNames(); while (names.hasMoreElements()) { String paramName = (String) names.nextElement(); String[] values = request.getParameterValues(paramName); putParameters(paramName, values); } } }. ### Assistant:", "ground_truth": "Checks if request if multi-part and parse it. If request is not multi-part it\ncopies all parameters, to make usage the same in both cases.\n\n@see MultipartRequestWrapper", "predict": "Parse incoming request. @throws IOException if failed to parse request."}
{"ID": 1289, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") protected Object convertToCollection(final Object value, final Class destinationType, final Class componentType) { return typeConverterManager.convertToCollection(value, destinationType, componentType); }. ### Assistant:", "ground_truth": "Converter to collection.", "predict": "Converts the value to a collection. @param value the value to convert @param destinationType the destination type @param componentType the component type @return the converted value"}
{"ID": 1290, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Object invokeSetter(final Setter setter, final BeanProperty bp, Object value) { try { final MapperFunction setterMapperFunction = setter.getMapperFunction(); if (setterMapperFunction != null) { value = setterMapperFunction.apply(value); } final Class type = setter.getSetterRawType(); if (ClassUtil.isTypeOf(type, Collection.class)) { Class componentType = setter.getSetterRawComponentType(); value = convertToCollection(value, type, componentType); } else { // no collections value = convertType(value, type); } setter.invokeSetter(bp.bean, value); } catch (Exception ex) { if (isSilent) { return null; } throw new BeanException(\"Setter failed: \" + setter, ex); } return value; }. ### Assistant:", "ground_truth": "Invokes setter, but first converts type to match the setter type.", "predict": "Invokes the setter. @param setter the setter to invoke. @param bp the bean property. @param value the value to set. @return the value that was set."}
{"ID": 1291, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void arrayForcedSet(final BeanProperty bp, Object array, final int index, Object value) { Class componentType = array.getClass().getComponentType(); array = ensureArraySize(bp, array, componentType, index); value = convertType(value, componentType); Array.set(array, index, value); }. ### Assistant:", "ground_truth": "Sets the array element forced. If index is greater then arrays length, array will be expanded to the index.\nIf speed is critical, it is better to allocate an array with proper size before using this method.", "predict": "Force the array to grow to the specified size. @param bp the property @param array the array @param index the index @param value the value to set"}
{"ID": 1292, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Object createBeanProperty(final BeanProperty bp) { Setter setter = bp.getSetter(true); if (setter == null) { return null; } Class type = setter.getSetterRawType(); Object newInstance; try { newInstance = ClassUtil.newInstance(type); } catch (Exception ex) { if (isSilent) { return null; } throw new BeanException(\"Invalid property: \" + bp.name, bp, ex); } newInstance = invokeSetter(setter, bp, newInstance); return newInstance; }. ### Assistant:", "ground_truth": "Creates new instance for current property name through its setter.\nIt uses default constructor!", "predict": "Create a new instance of the property's class and invoke the setter. @param bp BeanProperty @return New instance of the property's class"}
{"ID": 1293, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Class extractType(final BeanProperty bp) { Getter getter = bp.getGetter(isDeclared); if (getter != null) { if (bp.index != null) { Class type = getter.getGetterRawComponentType(); return type == null ? Object.class : type; } return getter.getGetterRawType(); } return null; // this should not happens }. ### Assistant:", "ground_truth": "Extracts type of current property.", "predict": "Extract the type of the property. The property is declared or not. If declared, the type of the property is extracted. If not declared, the type of the property is inferred. The type of the property is extracted from the getter. The getter is searched in the class hierarchy. The getter is searched in the class hierarchy. If the getter is not found, the type of the property is inferred. If the getter is found, the type of the property is extracted from the getter. The type of the property is extracted from the getter. The type of the property is extracted from the getter. If the getter is found, the type of the property is extracted from the getter. If the getter is found, the type of the property is extracted from the getter. If the getter is found, the type of the property is extracted from the getter. If the getter is found, the type of the property is extracted from the getter. If the getter is found, the type"}
{"ID": 1294, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void stop(final HttpServletRequest servletRequest, final HttpServletResponse servletResponse) { final HttpSession httpSession = servletRequest.getSession(false); if (httpSession != null) { httpSession.removeAttribute(AUTH_SESSION_NAME); } final Cookie cookie = ServletUtil.getCookie(servletRequest, AUTH_COOKIE_NAME); if (cookie == null) { return; } cookie.setMaxAge(0); cookie.setPath(\"/\"); servletResponse.addCookie(cookie); }. ### Assistant:", "ground_truth": "Stops the user session by removing it from the http session and invalidating the cookie.", "predict": "Stop the authentication process. @param servletRequest The request. @param servletResponse The response."}
{"ID": 1295, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void start(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) { final HttpSession httpSession = httpServletRequest.getSession(true); httpSession.setAttribute(AUTH_SESSION_NAME, this); final Cookie cookie = new Cookie(AUTH_COOKIE_NAME, authTokenValue); //cookie.setDomain(SSORealm.SSO_DOMAIN); cookie.setMaxAge(cookieMaxAge); cookie.setPath(\"/\"); httpServletResponse.addCookie(cookie); }. ### Assistant:", "ground_truth": "Starts new user session.", "predict": "Start the session. @param httpServletRequest the incoming request @param httpServletResponse the response"}
{"ID": 1296, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Date toDate(final LocalDate localDate) { return Date.from(localDate.atStartOfDay(ZoneId.systemDefault()).toInstant()); }. ### Assistant:", "ground_truth": "Converts local date to Date.", "predict": "Convert a LocalDate to a Date. The resulting Date will be the start of the day for the LocalDate. @param localDate the LocalDate to convert to a Date. @return the converted Date."}
{"ID": 1297, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Calendar toCalendar(final LocalDateTime localDateTime) { return GregorianCalendar.from(ZonedDateTime.of(localDateTime, ZoneId.systemDefault())); }. ### Assistant:", "ground_truth": "Converts local date time to Calendar.", "predict": "Convert a LocalDateTime to a Calendar. @param localDateTime the LocalDateTime to convert @return the Calendar object"}
{"ID": 1298, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Class defineProxy(final Class target) { ProxyProxettaFactory builder = proxetta.proxy(); builder.setTarget(target); return builder.define(); }. ### Assistant:", "ground_truth": "Generates new class.", "predict": "Define a proxy for the given target class. The proxy will be defined using the ProxyProxettaFactory. @param target the target class for the proxy. @return the proxy class."}
{"ID": 1299, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void add(final Check check) { String name = check.getName(); List<Check> list = map.computeIfAbsent(name, k -> new ArrayList<>()); list.add(check); }. ### Assistant:", "ground_truth": "Adds validation checks.", "predict": "Add check to the map. @param check Check to add."}
{"ID": 1300, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static ValidationContext resolveFor(final Class<?> target) { ValidationContext vc = new ValidationContext(); vc.addClassChecks(target); return vc; }. ### Assistant:", "ground_truth": "Resolve validation context for provided target class.\n@see #addClassChecks(Class)", "predict": "Creates a new ValidationContext that is scoped to the given class. @param target the class to scope the ValidationContext to @return a ValidationContext scoped to the given class"}
{"ID": 1301, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void addClassChecks(final Class target) { final List<Check> list = cache.get(target, () -> { final List<Check> newList = new ArrayList<>(); final ClassDescriptor cd = ClassIntrospector.get().lookup(target); final PropertyDescriptor[] allProperties = cd.getAllPropertyDescriptors(); for (PropertyDescriptor propertyDescriptor : allProperties) { collectPropertyAnnotationChecks(newList, propertyDescriptor); } return newList; }); addAll(list); }. ### Assistant:", "ground_truth": "Parses class annotations and adds all checks.\n@see #resolveFor(Class)", "predict": "Add checks for all annotations on the class. @param target the class to check"}
{"ID": 1302, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void collectPropertyAnnotationChecks(final List<Check> annChecks, final PropertyDescriptor propertyDescriptor) { FieldDescriptor fd = propertyDescriptor.getFieldDescriptor(); if (fd != null) { Annotation[] annotations = fd.getField().getAnnotations(); collectAnnotationChecks(annChecks, propertyDescriptor.getType(), propertyDescriptor.getName(), annotations); } MethodDescriptor md = propertyDescriptor.getReadMethodDescriptor(); if (md != null) { Annotation[] annotations = md.getMethod().getAnnotations(); collectAnnotationChecks(annChecks, propertyDescriptor.getType(), propertyDescriptor.getName(), annotations); } md = propertyDescriptor.getWriteMethodDescriptor(); if (md != null) { Annotation[] annotations = md.getMethod().getAnnotations(); collectAnnotationChecks(annChecks, propertyDescriptor.getType(), propertyDescriptor.getName(), annotations); } }. ### Assistant:", "ground_truth": "Process all annotations of provided properties.", "predict": "Collects checks for annotations on the property descriptor."}
{"ID": 1303, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings({\"unchecked\"}) protected void collectAnnotationChecks(final List<Check> annChecks, final Class targetType, final String targetName, final Annotation[] annotations) { for (Annotation annotation : annotations) { Constraint c = annotation.annotationType().getAnnotation(Constraint.class); Class<? extends ValidationConstraint> constraintClass; if (c == null) { // if constraint is not available, try lookup String constraintClassName = annotation.annotationType().getName() + \"Constraint\"; try { constraintClass = ClassLoaderUtil.loadClass(constraintClassName, this.getClass().getClassLoader()); } catch (ClassNotFoundException ingore) { continue; } } else { constraintClass = c.value(); } ValidationConstraint vc; try { vc = newConstraint(constraintClass, targetType); } catch (Exception ex) { throw new VtorException(\"Invalid constraint: \" + constraintClass.getClass().getName(), ex); } vc.configure(annotation); Check check = new Check(targetName, vc); copyDefaultCheckProperties(check, annotation); annChecks.add(check); } }. ### Assistant:", "ground_truth": "Collect annotations for some target.", "predict": "Collect checks from annotations. @param annChecks the list of checks to add @param targetType the target type @param targetName the target name @param annotations the annotations to collect checks from"}
{"ID": 1304, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void copyDefaultCheckProperties(final Check destCheck, final Annotation annotation) { Integer severity = (Integer) ClassUtil.readAnnotationValue(annotation, ANN_SEVERITY); destCheck.setSeverity(severity.intValue()); String[] profiles = (String[]) ClassUtil.readAnnotationValue(annotation, ANN_PROFILES); destCheck.setProfiles(profiles); String message = (String) ClassUtil.readAnnotationValue(annotation, ANN_MESSAGE); destCheck.setMessage(message); }. ### Assistant:", "ground_truth": "Copies default properties from annotation to the check.", "predict": "Copy default check properties from an annotation to a Check object. @param destCheck The Check object to copy the properties to. @param annotation The annotation to copy the properties from."}
{"ID": 1305, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static String encodeUriComponent(final String source, final String encoding, final URIPart uriPart) { if (source == null) { return null; } byte[] bytes = encodeBytes(StringUtil.getBytes(source, encoding), uriPart); char[] chars = new char[bytes.length]; for (int i = 0; i < bytes.length; i++) { chars[i] = (char) bytes[i]; } return new String(chars); }. ### Assistant:", "ground_truth": "Encodes single URI component.", "predict": "Encode the given string using the given encoding and URIPart. @param source the string to encode. @param encoding the encoding to use. @param uriPart the URIPart to use. @return the encoded string."}
{"ID": 1306, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String encode(final String string, final String encoding) { return encodeUriComponent(string, encoding, URIPart.UNRESERVED); }. ### Assistant:", "ground_truth": "Encodes string using default RFCP rules.", "predict": "Encode the given string using the given encoding. The resulting string is a valid URI component. @param string the string to encode @param encoding the encoding to use @return the encoded string"}
{"ID": 1307, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String encodeScheme(final String scheme, final String encoding) { return encodeUriComponent(scheme, encoding, URIPart.SCHEME); }. ### Assistant:", "ground_truth": "Encodes the given URI scheme with the given encoding.", "predict": "Encode the scheme part of a URI. @param scheme the scheme to encode @param encoding the encoding to use @return the encoded scheme"}
{"ID": 1308, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String encodeHost(final String host, final String encoding) { return encodeUriComponent(host, encoding, URIPart.HOST); }. ### Assistant:", "ground_truth": "Encodes the given URI host with the given encoding.", "predict": "Encode the host of a URI. @param host the host of the URI. @param encoding the character encoding of the URI. @return the encoded host."}
{"ID": 1309, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String encodePort(final String port, final String encoding) { return encodeUriComponent(port, encoding, URIPart.PORT); }. ### Assistant:", "ground_truth": "Encodes the given URI port with the given encoding.", "predict": "Encode port in a string. @param port the port to encode. @param encoding the encoding to use. @return the encoded port."}
{"ID": 1310, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String encodePath(final String path, final String encoding) { return encodeUriComponent(path, encoding, URIPart.PATH); }. ### Assistant:", "ground_truth": "Encodes the given URI path with the given encoding.", "predict": "Encode the path part of a URI. @param path the path to encode @param encoding the encoding to use @return the encoded path"}
{"ID": 1311, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String encodeQuery(final String query, final String encoding) { return encodeUriComponent(query, encoding, URIPart.QUERY); }. ### Assistant:", "ground_truth": "Encodes the given URI query with the given encoding.", "predict": "Encode the given query string using the given encoding. The encoding is used to replace special characters in the query string. The resulting string is a valid URI component. @param query the query string to encode @param encoding the encoding to use @return the encoded query string"}
{"ID": 1312, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String encodeQueryParam(final String queryParam, final String encoding) { return encodeUriComponent(queryParam, encoding, URIPart.QUERY_PARAM); }. ### Assistant:", "ground_truth": "Encodes the given URI query parameter with the given encoding.", "predict": "Encode a query parameter. @param queryParam the query parameter to encode. @param encoding the encoding to use. @return the encoded query parameter."}
{"ID": 1313, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String encodeFragment(final String fragment, final String encoding) { return encodeUriComponent(fragment, encoding, URIPart.FRAGMENT); }. ### Assistant:", "ground_truth": "Encodes the given URI fragment with the given encoding.", "predict": "Encode a fragment. @param fragment the fragment to encode @param encoding the encoding to use @return the encoded fragment"}
{"ID": 1314, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected HashMap<String, PropertyDescriptor> inspectProperties() { boolean scanAccessible = classDescriptor.isScanAccessible(); Class type = classDescriptor.getType(); HashMap<String, PropertyDescriptor> map = new HashMap<>(); Method[] methods = scanAccessible ? ClassUtil.getAccessibleMethods(type) : ClassUtil.getSupportedMethods(type); for (int iteration = 0; iteration < 2; iteration++) { // first find the getters, and then the setters! for (Method method : methods) { if (Modifier.isStatic(method.getModifiers())) { continue; // ignore static methods } boolean add = false; boolean issetter = false; String propertyName; if (iteration == 0) { propertyName = ClassUtil.getBeanPropertyGetterName(method); if (propertyName != null) { add = true; issetter = false; } } else { propertyName = ClassUtil.getBeanPropertySetterName(method); if (propertyName != null) { add = true; issetter = true; } } if (add) { MethodDescriptor methodDescriptor = classDescriptor.getMethodDescriptor(method.getName(), method.getParameterTypes(), true); addProperty(map, propertyName, methodDescriptor, issetter); } } } if (classDescriptor.isIncludeFieldsAsProperties()) { FieldDescriptor[] fieldDescriptors = classDescriptor.getAllFieldDescriptors(); String[] prefix = classDescriptor.getPropertyFieldPrefix(); for (FieldDescriptor fieldDescriptor : fieldDescriptors) { Field field = fieldDescriptor.getField(); if (Modifier.isStatic(field.getModifiers())) { continue; // ignore static fields } String name = field.getName(); if (prefix != null) { for (String p : prefix) { if (!name.startsWith(p)) { continue; } name = name.substring(p.length()); break; } } if (!map.containsKey(name)) { // add missing field as a potential property map.put(name, createPropertyDescriptor(name, fieldDescriptor)); } } } return map; }. ### Assistant:", "ground_truth": "Inspects all properties of target type.", "predict": "Inspect the class to find all properties. This includes both public and private properties. @return HashMap of all properties found."}
{"ID": 1315, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public PropertyDescriptor[] getAllPropertyDescriptors() { if (allProperties == null) { PropertyDescriptor[] allProperties = new PropertyDescriptor[propertyDescriptors.size()]; int index = 0; for (PropertyDescriptor propertyDescriptor : propertyDescriptors.values()) { allProperties[index] = propertyDescriptor; index++; } Arrays.sort(allProperties, new Comparator<PropertyDescriptor>() { @Override public int compare(final PropertyDescriptor pd1, final PropertyDescriptor pd2) { return pd1.getName().compareTo(pd2.getName()); } }); this.allProperties = allProperties; } return allProperties; }. ### Assistant:", "ground_truth": "Returns all property descriptors.\nProperties are sorted by name.", "predict": "Returns the sorted list of all property descriptors. The order is alphabetical."}
{"ID": 1316, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Cookie[] cookies() { List<String> newCookies = headers(\"set-cookie\"); if (newCookies == null) { return new Cookie[0]; } List<Cookie> cookieList = new ArrayList<>(newCookies.size()); for (String cookieValue : newCookies) { try { Cookie cookie = new Cookie(cookieValue); cookieList.add(cookie); } catch (Exception ex) { // ignore } } return cookieList.toArray(new Cookie[0]); }. ### Assistant:", "ground_truth": "Returns list of valid cookies sent from server.\nIf no cookie found, returns an empty array. Invalid cookies are ignored.", "predict": "Returns cookies from the headers. @return Cookies from the headers."}
{"ID": 1317, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public HttpResponse unzip() { String contentEncoding = contentEncoding(); if (contentEncoding != null && contentEncoding().equals(\"gzip\")) { if (body != null) { headerRemove(HEADER_CONTENT_ENCODING); try { ByteArrayInputStream in = new ByteArrayInputStream(body.getBytes(StringPool.ISO_8859_1)); GZIPInputStream gzipInputStream = new GZIPInputStream(in); ByteArrayOutputStream out = new ByteArrayOutputStream(); StreamUtil.copy(gzipInputStream, out); body(out.toString(StringPool.ISO_8859_1)); } catch (IOException ioex) { throw new HttpException(ioex); } } } return this; }. ### Assistant:", "ground_truth": "Unzips GZip-ed body content, removes the content-encoding header\nand sets the new content-length value.", "predict": "Unzips the response body if it is compressed. @return The response object."}
{"ID": 1318, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public HttpResponse close() { HttpConnection httpConnection = httpRequest.httpConnection; if (httpConnection != null) { httpConnection.close(); httpRequest.httpConnection = null; } return this; }. ### Assistant:", "ground_truth": "Closes requests connection if it was open.\nShould be called when using keep-alive connections.\nOtherwise, connection will be already closed.", "predict": "Close the connection. @return the response object."}
{"ID": 1319, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public boolean accept(final Scope referenceScope) { Class<? extends Scope> refScopeType = referenceScope.getClass(); if (refScopeType == ProtoScope.class) { return true; } if (refScopeType == SingletonScope.class) { return true; } if (refScopeType == ThreadLocalScope.class) { return true; } return false; }. ### Assistant:", "ground_truth": "Defines allowed referenced scopes that can be injected into the\nthread-local scoped bean.", "predict": "Accepts any scope that is not a ProtoScope, SingletonScope, or ThreadLocalScope."}
{"ID": 1320, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void printRoutes(final int width) { final ActionsManager actionsManager = webApp.madvocContainer().lookupComponent(ActionsManager.class); final List<ActionRuntime> actions = actionsManager.getAllActionRuntimes(); final Map<String, String> aliases = actionsManager.getAllAliases(); if (actions.isEmpty()) { return; } final Print print = new Print(); print.line(\"Routes\", width); actions.stream() .sorted(Comparator.comparing( actionRuntime -> actionRuntime.getActionPath() + ' ' + actionRuntime.getActionMethod())) .forEach(ar -> { final String actionMethod = ar.getActionMethod(); print.out(Chalk256.chalk().yellow(), actionMethod == null ? \"*\" : actionMethod, 7); print.space(); final String signature = ClassUtil.getShortClassName( ProxettaUtil.resolveTargetClass(ar.getActionClass()), 2) + '#' + ar.getActionClassMethod().getName(); print.outLeftRightNewLine( Chalk256.chalk().green(), ar.getActionPath(), Chalk256.chalk().blue(), signature, width - 7 - 1 ); }); if (!aliases.isEmpty()) { print.line(\"Aliases\", width); actions.stream() .sorted(Comparator.comparing( actionRuntime -> actionRuntime.getActionPath() + ' ' + actionRuntime.getActionMethod())) .forEach(ar -> { final String actionPath = ar.getActionPath(); for (final Map.Entry<String, String> entry : aliases.entrySet()) { if (entry.getValue().equals(actionPath)) { print.space(8); print.outLeftRightNewLine( Chalk256.chalk().green(), entry.getValue(), Chalk256.chalk().blue(), entry.getKey(), width - 8 ); } } }); } print.line(width); }. ### Assistant:", "ground_truth": "Prints routes to console.", "predict": "Print the routes. @param width width of the output."}
{"ID": 1321, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public byte[] encrypt(final byte[] content) { FastByteBuffer fbb = new FastByteBuffer(); int length = content.length + 1; int blockCount = length / blockSizeInBytes; int remaining = length; int offset = 0; for (int i = 0; i < blockCount; i++) { if (remaining == blockSizeInBytes) { break; } byte[] encrypted = encryptBlock(content, offset); fbb.append(encrypted); offset += blockSizeInBytes; remaining -= blockSizeInBytes; } if (remaining != 0) { // process remaining bytes byte[] block = new byte[blockSizeInBytes]; System.arraycopy(content, offset, block, 0, remaining - 1); block[remaining - 1] = TERMINATOR; byte[] encrypted = encryptBlock(block, 0); fbb.append(encrypted); } return fbb.toArray(); }. ### Assistant:", "ground_truth": "Encrypts complete content, block by block.", "predict": "Encrypts the given plaintext using the symmetric encryption algorithm. @param content the plaintext to encrypt. @return the encrypted ciphertext."}
{"ID": 1322, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public byte[] decrypt(final byte[] encryptedContent) { FastByteBuffer fbb = new FastByteBuffer(); int length = encryptedContent.length; int blockCount = length / blockSizeInBytes; int offset = 0; for (int i = 0; i < blockCount - 1; i++) { byte[] decrypted = decryptBlock(encryptedContent, offset); fbb.append(decrypted); offset += blockSizeInBytes; } // process last block byte[] decrypted = decryptBlock(encryptedContent, offset); // find terminator int ndx = blockSizeInBytes - 1; while (ndx >= 0) { if (decrypted[ndx] == TERMINATOR) { break; } ndx--; } fbb.append(decrypted, 0, ndx); return fbb.toArray(); }. ### Assistant:", "ground_truth": "Decrypts the whole content, block by block.", "predict": "Decrypts the given encrypted content. @param encryptedContent The encrypted content to decrypt. @return The decrypted content."}
{"ID": 1323, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Object map2bean(final Map map, Class targetType) { Object target = null; // create targets type String className = (String) map.get(classMetadataName); if (className == null) { if (targetType == null) { // nothing to do, no information about target type found target = map; } } else { checkClassName(jsonParser.classnameWhitelist, className); try { targetType = ClassLoaderUtil.loadClass(className); } catch (ClassNotFoundException cnfex) { throw new JsonException(cnfex); } } if (target == null) { target = jsonParser.newObjectInstance(targetType); } ClassDescriptor cd = ClassIntrospector.get().lookup(target.getClass()); boolean targetIsMap = target instanceof Map; for (Object key : map.keySet()) { String keyName = key.toString(); if (classMetadataName != null) { if (keyName.equals(classMetadataName)) { continue; } } PropertyDescriptor pd = cd.getPropertyDescriptor(keyName, declared); if (!targetIsMap && pd == null) { // target property does not exist, continue continue; } // value is one of JSON basic types, like Number, Map, List... Object value = map.get(key); Class propertyType = pd == null ? null : pd.getType(); Class componentType = pd == null ? null : pd.resolveComponentType(true); if (value != null) { if (value instanceof List) { if (componentType != null && componentType != String.class) { value = generifyList((List) value, componentType); } } else if (value instanceof Map) { // if the value we want to inject is a Map... if (!ClassUtil.isTypeOf(propertyType, Map.class)) { // ... and if target is NOT a map value = map2bean((Map) value, propertyType); } else { // target is also a Map, but we might need to generify it Class keyType = pd == null ? null : pd.resolveKeyType(true); if (keyType != String.class || componentType != String.class) { // generify value = generifyMap((Map) value, keyType, componentType); } } } } if (targetIsMap) { ((Map)target).put(keyName, value); } else { try { setValue(target, pd, value); } catch (Exception ignore) { ignore.printStackTrace(); } } } return target; }. ### Assistant:", "ground_truth": "Converts map to target type.", "predict": "Maps are special, as they can contain nested maps, so we need to recursively call ourselves to handle them. @param map JSON map @param targetType target class @return target object"}
{"ID": 1324, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private Object generifyList(final List list, final Class componentType) { for (int i = 0; i < list.size(); i++) { Object element = list.get(i); if (element != null) { if (element instanceof Map) { Object bean = map2bean((Map) element, componentType); list.set(i, bean); } else { Object value = convert(element, componentType); list.set(i, value); } } } return list; }. ### Assistant:", "ground_truth": "Converts type of all list elements to match the component type.", "predict": "Generify the list using the componentType. @param list the list to be modified. @param componentType the component type. @return the modified list."}
{"ID": 1325, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void setValue(final Object target, final PropertyDescriptor pd, Object value) throws InvocationTargetException, IllegalAccessException { Class propertyType; Setter setter = pd.getSetter(true); if (setter != null) { if (value != null) { propertyType = setter.getSetterRawType(); value = jsonParser.convertType(value, propertyType); } setter.invokeSetter(target, value); } }. ### Assistant:", "ground_truth": "Sets the property value.", "predict": "Set the value of the property on the target object. @param target the object to set the value on. @param pd the property descriptor. @param value the value to set. @throws InvocationTargetException if the setter throws an exception. @throws IllegalAccessException if the setter is not accessible."}
{"ID": 1326, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected <K,V> Map<K, V> generifyMap(final Map<Object, Object> map, final Class<K> keyType, final Class<V> valueType) { if (keyType == String.class) { // only value type is changed, we can make value replacements for (Map.Entry<Object, Object> entry : map.entrySet()) { Object value = entry.getValue(); Object newValue = convert(value, valueType); if (value != newValue) { entry.setValue(newValue); } } return (Map<K, V>) map; } // key is changed too, we need a new map Map<K, V> newMap = new HashMap<>(map.size()); for (Map.Entry<Object, Object> entry : map.entrySet()) { Object key = entry.getKey(); Object newKey = convert(key, keyType); Object value = entry.getValue(); Object newValue = convert(value, valueType); newMap.put((K)newKey, (V)newValue); } return newMap; }. ### Assistant:", "ground_truth": "Change map elements to match key and value types.", "predict": "Generify the map, changing the key type and value type. The old map is returned as well."}
{"ID": 1327, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public int compareTo(final Object o) { DbEntityColumnDescriptor that = (DbEntityColumnDescriptor) o; if (this.isId != that.isId) { return this.isId ? -1 : 1; // IDs should be the first in the array } return this.columnName.compareTo(that.columnName); }. ### Assistant:", "ground_truth": "Compares two column descriptors. Identity columns should be the first on the list.\nEach group then will be sorted by column name.", "predict": "Compare two DbEntityColumnDescriptors."}
{"ID": 1328, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public HttpBrowser setDefaultHeader(final String name, final String value) { defaultHeaders.addHeader(name, value); return this; }. ### Assistant:", "ground_truth": "Adds default header to all requests.", "predict": "Adds a default header to the headers sent by this browser. @param name the header name @param value the header value @return this browser instance"}
{"ID": 1329, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public HttpResponse sendRequest(HttpRequest httpRequest) { elapsedTime = System.currentTimeMillis(); // send request httpRequest.followRedirects(false); while (true) { this.httpRequest = httpRequest; HttpResponse previousResponse = this.httpResponse; this.httpResponse = null; addDefaultHeaders(httpRequest); addCookies(httpRequest); // send request if (catchTransportExceptions) { try { this.httpResponse = _sendRequest(httpRequest, previousResponse); } catch (HttpException httpException) { httpResponse = new HttpResponse(); httpResponse.assignHttpRequest(httpRequest); httpResponse.statusCode(503); httpResponse.statusPhrase(\"Service unavailable. \" + ExceptionUtil.message(httpException)); } } else { this.httpResponse =_sendRequest(httpRequest, previousResponse); } readCookies(httpResponse); int statusCode = httpResponse.statusCode(); // 301: moved permanently if (statusCode == 301) { String newPath = httpResponse.location(); if (newPath == null) { break; } httpRequest = HttpRequest.get(newPath); continue; } // 302: redirect, 303: see other if (statusCode == 302 || statusCode == 303) { String newPath = httpResponse.location(); if (newPath == null) { break; } httpRequest = HttpRequest.get(newPath); continue; } // 307: temporary redirect, 308: permanent redirect if (statusCode == 307 || statusCode == 308) { String newPath = httpResponse.location(); if (newPath == null) { break; } String originalMethod = httpRequest.method(); httpRequest = new HttpRequest() .method(originalMethod) .set(newPath); continue; } break; } elapsedTime = System.currentTimeMillis() - elapsedTime; return this.httpResponse; }. ### Assistant:", "ground_truth": "Sends new request as a browser. Before sending,\nall browser cookies are added to the request.\nAfter sending, the cookies are read from the response.\nMoreover, status codes 301 and 302 are automatically\nhandled. Returns very last response.", "predict": "Send the request and follow redirects. @param httpRequest the request to send. @return the response."}
{"ID": 1330, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected HttpResponse _sendRequest(final HttpRequest httpRequest, final HttpResponse previouseResponse) { if (!keepAlive) { httpRequest.open(httpConnectionProvider); } else { // keeping alive if (previouseResponse == null) { httpRequest.open(httpConnectionProvider).connectionKeepAlive(true); } else { httpRequest.keepAlive(previouseResponse, true); } } return httpRequest.send(); }. ### Assistant:", "ground_truth": "Opens connection and sends a response.", "predict": "Send request. @param httpRequest the http request @param previouseResponse the previouse response @return the http response"}
{"ID": 1331, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void addDefaultHeaders(final HttpRequest httpRequest) { for (Map.Entry<String, String> entry : defaultHeaders.entries()) { String name = entry.getKey(); if (!httpRequest.headers.contains(name)) { httpRequest.headers.add(name, entry.getValue()); } } }. ### Assistant:", "ground_truth": "Add default headers to the request. If request already has a header set,\ndefault header will be ignored.", "predict": "Adds default headers to the request. @param httpRequest The request to add headers to."}
{"ID": 1332, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void readCookies(final HttpResponse httpResponse) { Cookie[] newCookies = httpResponse.cookies(); for (Cookie cookie : newCookies) { cookies.add(cookie.getName(), cookie); } }. ### Assistant:", "ground_truth": "Reads cookies from response and adds to cookies list.", "predict": "Read cookies from the response. @param httpResponse the response to read cookies from."}
{"ID": 1333, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void addCookies(final HttpRequest httpRequest) { // prepare all cookies List<Cookie> cookiesList = new ArrayList<>(); if (!cookies.isEmpty()) { for (Map.Entry<String, Cookie> cookieEntry : cookies) { cookiesList.add(cookieEntry.getValue()); } httpRequest.cookies(cookiesList.toArray(new Cookie[0])); } }. ### Assistant:", "ground_truth": "Add cookies to the request.", "predict": "Add cookies to the request. @param httpRequest HttpRequest object to add cookies to."}
{"ID": 1334, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String sendMail(final Email email) { try { final MimeMessage msg = createMessage(email); getService().sendMessage(msg, msg.getAllRecipients()); return msg.getMessageID(); } catch (final MessagingException msgexc) { throw new MailException(\"Failed to send email: \" + email, msgexc); } }. ### Assistant:", "ground_truth": "Prepares message and sends it. Returns Message ID of sent email.\n\n@param email {@link Email} to send.\n@return String representing message ID.", "predict": "Send email using the default mail service. @param email email to send @return email message id"}
{"ID": 1335, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void setSubject(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { if (emailWithData.subjectEncoding() != null) { msgToSet.setSubject(emailWithData.subject(), emailWithData.subjectEncoding()); } else { msgToSet.setSubject(emailWithData.subject()); } }. ### Assistant:", "ground_truth": "Sets subject in msgToSet from subject in emailWithData.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure", "predict": "Set the subject of the email message. If the subject is encoded, it will be decoded before it is set. If the subject is not encoded, it will be set as is."}
{"ID": 1336, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void setSentDate(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { Date date = emailWithData.sentDate(); if (date == null) { date = new Date(); } msgToSet.setSentDate(date); }. ### Assistant:", "ground_truth": "Sets sent date in msgToSet with sent date from emailWithData.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure", "predict": "Set the sent date on the message. If the sent date is not set, it will be set to the current date. @param emailWithData The email object with the sent date. @param msgToSet The message to set the sent date on. @throws MessagingException If there was an error setting the sent date."}
{"ID": 1337, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void setHeaders(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { final Map<String, String> headers = emailWithData.headers(); if (headers != null) { for (final Map.Entry<String, String> entry : headers.entrySet()) { msgToSet.setHeader(entry.getKey(), entry.getValue()); } } }. ### Assistant:", "ground_truth": "Sets headers in msgToSet with headers from emailWithData.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure", "predict": "Set headers of the email message. @param emailWithData Email message with headers. @param msgToSet Message to set headers. @throws MessagingException If there was an error setting headers."}
{"ID": 1338, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void setPeople(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { msgToSet.setFrom(emailWithData.from().toInternetAddress()); msgToSet.setReplyTo(EmailAddress.convert(emailWithData.replyTo())); setRecipients(emailWithData, msgToSet); }. ### Assistant:", "ground_truth": "Sets FROM, REPLY-TO and recipients.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure", "predict": "Set the email's people fields. @param emailWithData the email to set the people fields from. @param msgToSet the message to set the people fields on. @throws MessagingException if there's an error setting the people fields."}
{"ID": 1339, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void setRecipients(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { // TO final InternetAddress[] to = EmailAddress.convert(emailWithData.to()); if (to.length > 0) { msgToSet.setRecipients(RecipientType.TO, to); } // CC final InternetAddress[] cc = EmailAddress.convert(emailWithData.cc()); if (cc.length > 0) { msgToSet.setRecipients(RecipientType.CC, cc); } // BCC final InternetAddress[] bcc = EmailAddress.convert(emailWithData.bcc()); if (bcc.length > 0) { msgToSet.setRecipients(RecipientType.BCC, bcc); } }. ### Assistant:", "ground_truth": "Sets TO, CC and BCC in msgToSet with TO, CC and BCC from emailWithData.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure.", "predict": "Sets the recipients of the email message. @param emailWithData the email data @param msgToSet the message to set the recipients on @throws MessagingException if there is an error setting the recipients"}
{"ID": 1340, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void addBodyData(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { final List<EmailMessage> messages = emailWithData.messages(); final int totalMessages = messages.size(); // Need to use new list since filterEmbeddedAttachments(List) removes attachments from the source List final List<EmailAttachment<? extends DataSource>> attachments = new ArrayList<>(emailWithData.attachments()); if (attachments.isEmpty() && totalMessages == 1) { // special case: no attachments and just one content setContent(messages.get(0), msgToSet); } else { final MimeMultipart multipart = new MimeMultipart(); final MimeMultipart msgMultipart = new MimeMultipart(ALTERNATIVE); multipart.addBodyPart(getBaseBodyPart(msgMultipart)); for (final EmailMessage emailMessage : messages) { msgMultipart.addBodyPart(getBodyPart(emailMessage, attachments)); } addAnyAttachments(attachments, multipart); msgToSet.setContent(multipart); } }. ### Assistant:", "ground_truth": "Adds message data and attachments.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure.", "predict": "Adds the email's body data to the MimeMessage. This method assumes that the email has already been parsed and that the email's messages have been extracted. @param emailWithData The email to add the body data to. @param msgToSet The MimeMessage to add the body data to. @throws MessagingException If there was a problem adding the email's body data to the MimeMessage."}
{"ID": 1341, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void setContent(final EmailMessage emailWithData, final Part partToSet) throws MessagingException { partToSet.setContent(emailWithData.getContent(), emailWithData.getMimeType() + CHARSET + emailWithData.getEncoding()); }. ### Assistant:", "ground_truth": "Sets emailWithData content into msgToSet.\n\n@param emailWithData {@link EmailMessage} with data.\n@param partToSet     {@link Part} to set data into.\n@throws MessagingException if there is a failure.", "predict": "Sets the content of the email message. The encoding is taken from the email message. @param emailWithData the email message @param partToSet the part to set @throws MessagingException if there was an error setting the content"}
{"ID": 1342, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected MimeBodyPart createAttachmentBodyPart(final EmailAttachment<? extends DataSource> attachment) throws MessagingException { final MimeBodyPart part = new MimeBodyPart(); final String attachmentName = attachment.getEncodedName(); if (attachmentName != null) { part.setFileName(attachmentName); } part.setDataHandler(new DataHandler(attachment.getDataSource())); if (attachment.getContentId() != null) { part.setContentID(StringPool.LEFT_CHEV + attachment.getContentId() + StringPool.RIGHT_CHEV); } if (attachment.isInline()) { part.setDisposition(INLINE); } return part; }. ### Assistant:", "ground_truth": "Creates attachment body part. Handles regular and inline attachments.\n\n@param attachment Body part {@link EmailAttachment}.\n@return {@link MimeBodyPart} which represents body part attachment.\n@throws MessagingException if there is a failure.", "predict": "Create a MimeBodyPart for an EmailAttachment. @param attachment The attachment to create a BodyPart for. @return The created BodyPart. @throws MessagingException If there was a problem creating the BodyPart."}
{"ID": 1343, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private String getContentType(final String dataHeader) { String token = \"Content-Type:\"; int start = dataHeader.indexOf(token); if (start == -1) { return StringPool.EMPTY; } start += token.length(); return dataHeader.substring(start).trim(); }. ### Assistant:", "ground_truth": "Strips content type information from requests data header.\n@param dataHeader data header string\n@return content type or an empty string if no content type defined", "predict": "Get the content type from the data header. @param dataHeader the data header @return the content type"}
{"ID": 1344, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void saveResultSet(final ResultSet rs) { if (resultSets == null) { resultSets = new HashSet<>(); } resultSets.add(rs); }. ### Assistant:", "ground_truth": "Stores result set.", "predict": "Save the result set. @param rs ResultSet to save."}
{"ID": 1345, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Q closeAllResultSets() { final SQLException sex = closeQueryResultSets(); if (sex != null) { throw new DbSqlException(\"Close associated ResultSets error\", sex); } return _this(); }. ### Assistant:", "ground_truth": "Closes all result sets created by this query. Query remains active.", "predict": "Close all associated ResultSets. @return self"}
{"ID": 1346, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected SQLException closeQuery() { SQLException sqlException = closeQueryResultSets(); if (statement != null) { try { statement.close(); } catch (SQLException sex) { if (sqlException == null) { sqlException = sex; } else { sqlException.setNextException(sex); } } statement = null; } query = null; queryState = CLOSED; return sqlException; }. ### Assistant:", "ground_truth": "Closes all assigned result sets and then closes the query. Query becomes closed.", "predict": "Close the query."}
{"ID": 1347, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override @SuppressWarnings({\"ClassReferencesSubclass\"}) public void close() { final SQLException sqlException = closeQuery(); connection = null; if (this.session != null) { this.session.detachQuery(this); } if (sqlException != null) { throw new DbSqlException(\"Close query error\", sqlException); } }. ### Assistant:", "ground_truth": "Closes the query and all created results sets and detaches itself from the session.", "predict": "Close this query. @throws SQLException if an error occurs while closing the query."}
{"ID": 1348, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Q setFetchSize(final int rows) { checkNotClosed(); this.fetchSize = rows; if (statement != null) { try { statement.setFetchSize(fetchSize); } catch (SQLException sex) { throw new DbSqlException(this, \"Unable to set fetch size: \" + fetchSize, sex); } } return _this(); }. ### Assistant:", "ground_truth": "Gives the JDBC driver a hint as to the number of rows that should be fetched from the database when\nmore rows are needed. The number of rows specified affects only result sets created using this statement.\nIf the value specified is zero, then the hint is ignored. The default value is zero.\n@see Statement#setFetchSize(int)", "predict": "Set the maximum number of rows to fetch per call. This is a hint to the database driver and is not guaranteed to be honored. The default is 100. @param rows the maximum number of rows to fetch per call. @return this object."}
{"ID": 1349, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Q setMaxRows(final int maxRows) { checkNotClosed(); this.maxRows = maxRows; if (statement != null) { try { statement.setMaxRows(maxRows); } catch (SQLException sex) { throw new DbSqlException(this, \"Unable to set max rows: \" + maxRows, sex); } } return _this(); }. ### Assistant:", "ground_truth": "Sets the limit for the maximum number of rows that any ResultSet object can contain to the given number.\nIf the limit is exceeded, the excess rows are silently dropped. Zero means there is no limit.\n@see Statement#setMaxRows(int)", "predict": "Sets the maximum number of rows to fetch from the database for a single query. @param maxRows the maximum number of rows to fetch @return this object for chaining"}
{"ID": 1350, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected int executeUpdate(final boolean closeQuery) { start = System.currentTimeMillis(); init(); final int result; if (log.isDebugEnabled()) { log.debug(\"Executing update: \" + getQueryString()); } try { if (preparedStatement == null) { if (generatedColumns != null) { if (generatedColumns.length == 0) { result = statement.executeUpdate(query.sql, Statement.RETURN_GENERATED_KEYS); } else { result = statement.executeUpdate(query.sql, generatedColumns); } } else { result = statement.executeUpdate(query.sql); } } else { result = preparedStatement.executeUpdate(); } } catch (SQLException sex) { throw new DbSqlException(this, \"Query execution failed\", sex); } if (closeQuery) { close(); } elapsed = System.currentTimeMillis() - start; if (log.isDebugEnabled()) { log.debug(\"execution time: \" + elapsed + \"ms\"); } return result; }. ### Assistant:", "ground_truth": "Executes UPDATE, INSERT or DELETE queries and optionally closes the query.\n@see Statement#executeUpdate(String)", "predict": "Execute the update statement. @param closeQuery whether to close the query after execution. @return the number of rows affected."}
{"ID": 1351, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected long executeCount(final boolean close) { start = System.currentTimeMillis(); init(); ResultSet rs = null; if (log.isDebugEnabled()) { log.debug(\"Executing prepared count: \" + getQueryString()); } try { if (preparedStatement == null) { rs = statement.executeQuery(query.sql); } else { rs = preparedStatement.executeQuery(); } final long firstLong = DbUtil.getFirstLong(rs); elapsed = System.currentTimeMillis() - start; if (log.isDebugEnabled()) { log.debug(\"execution time: \" + elapsed + \"ms\"); } return firstLong; } catch (SQLException sex) { throw new DbSqlException(this, \"Count query failed\", sex); } finally { DbUtil.close(rs); if (close) { close(); } } }. ### Assistant:", "ground_truth": "Executes count queries and optionally closes query afterwards.", "predict": "Execute the count query. @param close whether to close the connection @return the count value"}
{"ID": 1352, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ResultSet getGeneratedColumns() { checkInitialized(); if (generatedColumns == null) { throw new DbSqlException(this, \"No column is specified as auto-generated\"); } final ResultSet rs; try { rs = statement.getGeneratedKeys(); } catch (SQLException sex) { throw new DbSqlException(this, \"No generated keys\", sex); } saveResultSet(rs); totalOpenResultSetCount++; return rs; }. ### Assistant:", "ground_truth": "Returns generated columns.", "predict": "Returns a ResultSet containing the auto-generated columns in the table. @return a ResultSet containing the auto-generated columns in the table. @exception DbSqlException if the auto-generated columns are not present in the table."}
{"ID": 1353, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String getQueryString() { if (debug) { if ((callableStatement != null)) { if (preparedStatement instanceof LoggableCallableStatement) { return ((LoggableCallableStatement) callableStatement).getQueryString(); } } if (preparedStatement != null) { if (preparedStatement instanceof LoggablePreparedStatement) { return ((LoggablePreparedStatement) preparedStatement).getQueryString(); } } } if (query != null) { return query.sql; } return sqlString; }. ### Assistant:", "ground_truth": "Returns query SQL string. For prepared statements, returned sql string with quick-and-dirty replaced values.", "predict": "Returns the SQL query string. This is the concatenation of the SQL query string and any bind variables. @return the SQL query string"}
{"ID": 1354, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") public static <T> T proxyOf(final T target, final Class<? extends Aspect> aspectClass) { final Aspect aspect; try { aspect = ClassUtil.newInstance(aspectClass, target); } catch (Exception e) { throw new IllegalArgumentException(\"Can't create new instance of aspect class\", e); } return (T) newProxyInstance(target.getClass().getClassLoader(), aspect, target.getClass().getInterfaces()); }. ### Assistant:", "ground_truth": "Creates a proxy of given target and the aspect.", "predict": "Creates a proxy of the given target object, that implements the given aspect class. The aspect class is used to intercept method calls and perform additional checks. If the aspect class is not found, an exception is thrown. @param target the target object @param aspectClass the aspect class to implement @param <T> the type of the target object @return the proxy object"}
{"ID": 1355, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <T> Collection<T> collectionOf(final Iterator<? extends T> iterator) { final List<T> list = new ArrayList<>(); while (iterator.hasNext()) { list.add(iterator.next()); } return list; }. ### Assistant:", "ground_truth": "Returns a collection containing all elements of the iterator.", "predict": "Create a collection from an iterator. @param iterator the iterator to use. @param <T> the type of elements in the collection. @return the collection."}
{"ID": 1356, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <T> Stream<T> streamOf(final Iterator<T> iterator) { return StreamSupport.stream(((Iterable<T>) () -> iterator).spliterator(), false); }. ### Assistant:", "ground_truth": "Converts iterator to a stream.", "predict": "Create a stream from an iterator. The stream will be unbuffered."}
{"ID": 1357, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public int compare(final T o1, final T o2) { for (Comparator<T> comparator : comparators) { int result = comparator.compare(o1, o2); if (result != 0) { return result; } } return 0; }. ### Assistant:", "ground_truth": "Compares two objects starting with first comparator; if they are equals\nproceeds to the next comparator and so on.", "predict": "Compare two objects using the specified comparators."}
{"ID": 1358, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public PetiteConfig setDefaultWiringMode(final WiringMode defaultWiringMode) { if ((defaultWiringMode == null) || (defaultWiringMode == WiringMode.DEFAULT)) { throw new PetiteException(\"Invalid default wiring mode: \" + defaultWiringMode); } this.defaultWiringMode = defaultWiringMode; return this; }. ### Assistant:", "ground_truth": "Specifies default wiring mode.", "predict": "Set the default wiring mode for Petite objects. @param defaultWiringMode the default wiring mode for Petite objects. @return this PetiteConfig object. @throws PetiteException if the default wiring mode is invalid."}
{"ID": 1359, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void print(final Level level, final String message, final Throwable throwable) { if (!isEnabled(level)) { return; } StringBuilder msg = new StringBuilder() .append(slf.getElapsedTime()).append(' ').append('[') .append(level).append(']').append(' ') .append(getCallerClass()).append(' ').append('-') .append(' ').append(message); System.out.println(msg.toString()); if (throwable != null) { throwable.printStackTrace(System.out); } }. ### Assistant:", "ground_truth": "Prints error message if level is enabled.", "predict": "Print the message. @param level the level of the message @param message the message @param throwable the throwable"}
{"ID": 1360, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String getCallerClass() { Exception exception = new Exception(); StackTraceElement[] stackTrace = exception.getStackTrace(); for (StackTraceElement stackTraceElement : stackTrace) { String className = stackTraceElement.getClassName(); if (className.equals(SimpleLoggerProvider.class.getName())) { continue; } if (className.equals(SimpleLogger.class.getName())) { continue; } if (className.equals(Logger.class.getName())) { continue; } return shortenClassName(className) + '.' + stackTraceElement.getMethodName() + ':' + stackTraceElement.getLineNumber(); } return \"N/A\"; }. ### Assistant:", "ground_truth": "Returns called class.", "predict": "Get the caller class. @return the caller class"}
{"ID": 1361, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String shortenClassName(final String className) { int lastDotIndex = className.lastIndexOf('.'); if (lastDotIndex == -1) { return className; } StringBuilder shortClassName = new StringBuilder(className.length()); int start = 0; while(true) { shortClassName.append(className.charAt(start)); int next = className.indexOf('.', start); if (next == lastDotIndex) { break; } start = next + 1; shortClassName.append('.'); } shortClassName.append(className.substring(lastDotIndex)); return shortClassName.toString(); }. ### Assistant:", "ground_truth": "Returns shorten class name.", "predict": "Shorten the class name to remove the package name. @param className the class name to shorten. @return the shortened class name."}
{"ID": 1362, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public JsonSerializer excludeTypes(final Class... types) { if (excludedTypes == null) { excludedTypes = types; } else { excludedTypes = ArraysUtil.join(excludedTypes, types); } return this; }. ### Assistant:", "ground_truth": "Excludes types. Supports interfaces and subclasses as well.", "predict": "Exclude serialization of these types. @param types types to exclude @return this"}
{"ID": 1363, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void serialize(final Object source, final Appendable target) { JsonContext jsonContext = createJsonContext(target); jsonContext.serialize(source); }. ### Assistant:", "ground_truth": "Serializes object into provided appendable.", "predict": "Serialize the given object to the given appendable. @param source the object to serialize @param target the appendable to serialize to"}
{"ID": 1364, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String serialize(final Object source) { FastCharBuffer fastCharBuffer = new FastCharBuffer(); serialize(source, fastCharBuffer); return fastCharBuffer.toString(); }. ### Assistant:", "ground_truth": "Serializes object into source.", "predict": "Serialize the object into a string. @param source Object to serialize. @return String representation of the object."}
{"ID": 1365, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <T extends Serializable> T cloneViaSerialization(final T obj) throws IOException, ClassNotFoundException { FastByteArrayOutputStream bos = new FastByteArrayOutputStream(); ObjectOutputStream out = null; ObjectInputStream in = null; Object objCopy = null; try { out = new ObjectOutputStream(bos); out.writeObject(obj); out.flush(); byte[] bytes = bos.toByteArray(); in = new ObjectInputStream(new ByteArrayInputStream(bytes)); objCopy = in.readObject(); } finally { StreamUtil.close(out); StreamUtil.close(in); } return (T) objCopy; }. ### Assistant:", "ground_truth": "Create object copy using serialization mechanism.", "predict": "Clone an object via serialization. @param obj Object to clone. @return Cloned object. @throws IOException @throws ClassNotFoundException"}
{"ID": 1366, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void writeObject(final File dest, final Object object) throws IOException { FileOutputStream fos = null; BufferedOutputStream bos = null; ObjectOutputStream oos = null; try { fos = new FileOutputStream(dest); bos = new BufferedOutputStream(fos); oos = new ObjectOutputStream(bos); oos.writeObject(object); } finally { StreamUtil.close(oos); StreamUtil.close(bos); StreamUtil.close(fos); } }. ### Assistant:", "ground_truth": "Writes serializable object to a file. Existing file will be overwritten.", "predict": "Write an object to a file. @param dest the destination file @param object the object to write @throws IOException if an error occurs during the write operation"}
{"ID": 1367, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Object readObject(final File source) throws IOException, ClassNotFoundException { Object result = null; FileInputStream fis = null; BufferedInputStream bis = null; ObjectInputStream ois = null; try { fis = new FileInputStream(source); bis = new BufferedInputStream(fis); ois = new ObjectInputStream(bis); result = ois.readObject(); } finally { StreamUtil.close(ois); StreamUtil.close(bis); StreamUtil.close(fis); } return result; }. ### Assistant:", "ground_truth": "Reads serialized object from the file.", "predict": "Read an object from a file. @param source the file to read from. @return the object read from the file. @throws IOException if there is a problem reading the file. @throws ClassNotFoundException if the object is not found."}
{"ID": 1368, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static byte[] objectToByteArray(final Object obj) throws IOException { FastByteArrayOutputStream bos = new FastByteArrayOutputStream(); ObjectOutputStream oos = null; try { oos = new ObjectOutputStream(bos); oos.writeObject(obj); } finally { StreamUtil.close(oos); } return bos.toByteArray(); }. ### Assistant:", "ground_truth": "Serialize an object to byte array.", "predict": "Convert an object to a byte array. @param obj Object to convert to a byte array. @return Byte array representation of the object. @throws IOException If an error occurs during serialization."}
{"ID": 1369, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Object byteArrayToObject(final byte[] data) throws IOException, ClassNotFoundException { Object retObj = null; ByteArrayInputStream bais = new ByteArrayInputStream(data); ObjectInputStream ois = null; try { ois = new ObjectInputStream(bais); retObj = ois.readObject(); } finally { StreamUtil.close(ois); } return retObj; }. ### Assistant:", "ground_truth": "De-serialize an object from byte array.", "predict": "Convert a byte array to an object. @param data the byte array to convert @return the object @throws IOException if the input stream is closed @throws ClassNotFoundException if the class cannot be found"}
{"ID": 1370, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String[][] resolveMappedTypesTableNames(final Class[] types) { if (cachedMappedNames == null) { String[][] names = new String[types.length][]; for (int i = 0; i < types.length; i++) { Class type = types[i]; if (type != null) { DbEntityDescriptor ded = cachedDbEntityDescriptors[i]; if (ded != null) { Class[] mappedTypes = ded.getMappedTypes(); if (mappedTypes != null) { names[i] = createTypesTableNames(mappedTypes); } } } } cachedMappedNames = names; } return cachedMappedNames; }. ### Assistant:", "ground_truth": "Resolved mapped type names for each type.", "predict": "Resolves the names of the tables that correspond to the given types. @param types the types to resolve the names for. @return the names of the tables that correspond to the given types."}
{"ID": 1371, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String[] createTypesTableNames(final Class[] types) { String[] names = new String[types.length]; for (int i = 0; i < types.length; i++) { if (types[i] == null) { names[i] = null; continue; } DbEntityDescriptor ded = dbEntityManager.lookupType(types[i]); if (ded != null) { String tableName = ded.getTableName(); tableName = tableName.toUpperCase(); names[i] = tableName; } } return names; }. ### Assistant:", "ground_truth": "Creates table names for given types.", "predict": "Create table names for the given types. @param types the types to create the table names for. @return the table names."}
{"ID": 1372, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings({\"unchecked\"}) protected Object readColumnValue(final int colNdx, final Class destinationType, final Class<? extends SqlType> sqlTypeClass, final int columnDbSqlType) { if (colNdx != cachedColumnNdx) { try { SqlType sqlType; if (sqlTypeClass != null) { sqlType = SqlTypeManager.get().lookupSqlType(sqlTypeClass); } else { sqlType = SqlTypeManager.get().lookup(destinationType); } if (sqlType != null) { cachedColumnValue = sqlType.readValue(resultSet, colNdx + 1, destinationType, columnDbSqlType); } else { cachedColumnValue = resultSet.getObject(colNdx + 1); cachedColumnValue = TypeConverterManager.get().convertType(cachedColumnValue, destinationType); } } catch (SQLException sex) { throw new DbOomException(dbOomQuery, \"Invalid value for column #\" + (colNdx + 1), sex); } cachedColumnNdx = colNdx; } return cachedColumnValue; }. ### Assistant:", "ground_truth": "Reads column value from result set. Since this method may be called more then once for\nthe same column, it caches column values.", "predict": "Read column value. @param colNdx Column index. @param destinationType Destination type. @param sqlTypeClass SQL type class. @param columnDbSqlType Column database SQL type. @return Column value."}
{"ID": 1373, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void cacheResultSetEntities(final Object[] result) { if (entitiesCache == null) { entitiesCache = new HashMap<>(); } for (int i = 0; i < result.length; i++) { Object object = result[i]; if (object == null) { continue; } DbEntityDescriptor ded = cachedDbEntityDescriptors[i]; if (ded == null) { // not a type, continue continue; } // calculate key Object key; if (ded.hasIdColumn()) { //noinspection unchecked key = ded.getKeyValue(object); } else { key = object; } Object cachedObject = entitiesCache.get(key); if (cachedObject == null) { // object is not in the cache, add it entitiesCache.put(key, object); } else { // object is in the cache, replace it result[i] = cachedObject; } } }. ### Assistant:", "ground_truth": "Caches returned entities. Replaces new instances with existing ones.", "predict": "Caches the result set entities in the cache. @param result the result set."}
{"ID": 1374, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ProviderDefinition[] resolve(final Class type, final String name) { ClassDescriptor cd = ClassIntrospector.get().lookup(type); MethodDescriptor[] methods = cd.getAllMethodDescriptors(); List<ProviderDefinition> list = new ArrayList<>(); for (MethodDescriptor methodDescriptor : methods) { Method method = methodDescriptor.getMethod(); PetiteProvider petiteProvider = method.getAnnotation(PetiteProvider.class); if (petiteProvider == null) { continue; } String providerName = petiteProvider.value(); if (StringUtil.isBlank(providerName)) { // default provider name providerName = method.getName(); if (providerName.endsWith(\"Provider\")) { providerName = StringUtil.substring(providerName, 0, -8); } } ProviderDefinition providerDefinition; if (Modifier.isStatic(method.getModifiers())) { providerDefinition = new ProviderDefinition(providerName, method); } else { providerDefinition = new ProviderDefinition(providerName, name, method); } list.add(providerDefinition); } ProviderDefinition[] providers; if (list.isEmpty()) { providers = ProviderDefinition.EMPTY; } else { providers = list.toArray(new ProviderDefinition[0]); } return providers; }. ### Assistant:", "ground_truth": "Resolves all providers in the class", "predict": "Resolve providers for the given class. @param type the class to introspect @param name the name of the provider @return the providers found in the class"}
{"ID": 1375, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String applyToTableName(final String tableName) { String entityName = convertTableNameToEntityName(tableName); return convertEntityNameToTableName(entityName); }. ### Assistant:", "ground_truth": "Applies table naming strategy to given table name hint.\nReturns full table name.", "predict": "Apply the entity name to the table name. @param tableName the original table name @return the table name with the entity name applied"}
{"ID": 1376, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private boolean isConnectionValid(final ConnectionData connectionData, final long now) { if (!validateConnection) { return true; } if (now < connectionData.lastUsed + validationTimeout) { return true; } Connection conn = connectionData.connection; if (validationQuery == null) { try { return !conn.isClosed(); } catch (SQLException sex) { return false; } } boolean valid = true; Statement st = null; try { st = conn.createStatement(); st.execute(validationQuery); } catch (SQLException sex) { valid = false; } finally { if (st != null) { try { st.close(); } catch (SQLException ignore) { } } } return valid; }. ### Assistant:", "ground_truth": "Checks if existing connection is valid and available. It may happens\nthat if connection is not used for a while it becomes inactive,\nalthough not technically closed.", "predict": "Check if the connection is still valid. If the connection is closed, it will be closed here. If the validation query fails, the connection will be closed. If the validation query succeeds, the connection will be closed. If the connection is still valid, it will be closed after the timeout. If the connection is not closed, it will be closed after the timeout. If the connection is closed, it will be closed after the timeout. If the connection is still valid, it will be closed after the timeout. If the connection is not closed, it will be closed after the timeout. If the connection is closed, it will be closed after the timeout. If the connection is still valid, it will be closed after the timeout. If the connection is not closed, it will be closed after the timeout. If the connection is closed, it will be closed after the timeout. If the connection is still valid, it will be closed after the timeout. If the connection is not closed, it will be closed after the timeout. If the connection is closed, it will be"}
{"ID": 1377, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override protected void renderView(final ActionRequest actionRequest, final String target) throws Exception { HttpServletRequest request = actionRequest.getHttpServletRequest(); HttpServletResponse response = actionRequest.getHttpServletResponse(); RequestDispatcher dispatcher = request.getRequestDispatcher(target); if (dispatcher == null) { response.sendError(SC_NOT_FOUND, \"Result not found: \" + target); // should never happened return; } // If we're included, then include the view, otherwise do forward. // This allow the page to, for example, set content type. if (DispatcherUtil.isPageIncluded(request, response)) { dispatcher.include(request, response); } else { dispatcher.forward(request, response); } }. ### Assistant:", "ground_truth": "Renders the view by dispatching to the target JSP.", "predict": "Render the view."}
{"ID": 1378, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override protected String locateTarget(final ActionRequest actionRequest, String path) { String target; if (path.endsWith(StringPool.SLASH)) { path = path + defaultViewPageName; } for (final String ext : defaultViewExtensions) { target = path + ext; if (targetExists(actionRequest, target)) { return target; } } return null; }. ### Assistant:", "ground_truth": "Locates target using path with various extensions appended.", "predict": "Locate the target page for the given path. If the path ends with a slash, the slash is removed and the default view page name is added. Otherwise, the path is used as the target page. If the path does not match any of the extensions, the method returns null. @param actionRequest the action request @param path the path @return the target page"}
{"ID": 1379, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public PrintWriter getWriter() throws IOException { preResponseCommit(); if (buffer == null) { return getResponse().getWriter(); } return buffer.getWriter(); }. ### Assistant:", "ground_truth": "Returns buffered writer if buffering is enabled,\notherwise returns the original writer.", "predict": "Get the PrintWriter for the response. If the response has not yet been committed, it will be committed before returning the PrintWriter. @return the PrintWriter for the response. @throws IOException if an I/O error occurs while getting the PrintWriter."}
{"ID": 1380, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public ServletOutputStream getOutputStream() throws IOException { preResponseCommit(); if (buffer == null) { return getResponse().getOutputStream(); } return buffer.getOutputStream(); }. ### Assistant:", "ground_truth": "Returns buffered output stream if buffering is enabled,\notherwise returns the original stream.", "predict": "Returns the ServletOutputStream for this response. This is the same outputstream that was used to write the response body. If the response body was not yet written, this method will delegate to the superclass's implementation. @return the ServletOutputStream for this response. @throws IOException if an IOException occurs while writing the response body. @see javax.servlet.http.HttpServletResponse#getOutputStream()"}
{"ID": 1381, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void writeContentToResponse(final char[] content) throws IOException { if (buffer == null) { return; } if (buffer.isUsingStream()) { ServletOutputStream outputStream = getResponse().getOutputStream(); String encoding = getContentTypeEncoding(); if (encoding == null) { outputStream.write(CharUtil.toByteArray(content)); } else { outputStream.write(CharUtil.toByteArray(content, encoding)); } outputStream.flush(); } else { Writer out = getResponse().getWriter(); out.write(content); out.flush(); } }. ### Assistant:", "ground_truth": "Writes content to original output stream, using either output stream or writer, depending\non how the content was buffered. It is assumed that provided content is a modified\nwrapped content.", "predict": "Write the content to the response. @param content the content to write. @throws IOException if an I/O error occurs."}
{"ID": 1382, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void setContentType(final String type) { super.setContentType(type); contentTypeResolver = new ContentTypeHeaderResolver(type); if (bufferContentType(type, contentTypeResolver.getMimeType(), contentTypeResolver.getEncoding())) { enableBuffering(); } else { disableBuffering(); } }. ### Assistant:", "ground_truth": "Sets the content type and enables or disables buffering.", "predict": "Set the content type of the response. If the content type is not supported, the buffering is disabled. @param type the content type of the response."}
{"ID": 1383, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void print(final String string) throws IOException { if (isBufferStreamBased()) { String encoding = getContentTypeEncoding(); byte[] bytes; if (encoding == null) { bytes = string.getBytes(); } else { bytes = string.getBytes(encoding); } buffer.getOutputStream().write(bytes); return; } // make sure at least writer is initialized buffer.getWriter().write(string); }. ### Assistant:", "ground_truth": "Appends string to the buffer.", "predict": "Prints the given string to the output stream. @param string the string to print. @throws IOException if an I/O error occurs."}
{"ID": 1384, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected JsonResult login() { T authToken; authToken = loginViaBasicAuth(servletRequest); if (authToken == null) { authToken = loginViaRequestParams(servletRequest); } if (authToken == null) { log.warn(\"Login failed.\"); return JsonResult.of(HttpStatus.error401().unauthorized(\"Login failed.\")); } log.info(\"login OK!\"); final UserSession<T> userSession = new UserSession<>(authToken, userAuth.tokenValue(authToken)); userSession.start(servletRequest, servletResponse); // return token return tokenAsJson(authToken); }. ### Assistant:", "ground_truth": "Authenticate user and start user session.", "predict": "Login user. @return token as json"}
{"ID": 1385, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected JsonResult tokenAsJson(final T authToken) { final JsonObject jsonObject = new JsonObject(); jsonObject.put(\"token\", userAuth.tokenValue(authToken)); return JsonResult.of(jsonObject); }. ### Assistant:", "ground_truth": "Prepares the JSON payload that carries on the token value.", "predict": "Convert a token to a JSON object. @param authToken the token to convert @return the converted token as a JSON object"}
{"ID": 1386, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected T loginViaBasicAuth(final HttpServletRequest servletRequest) { final String username = ServletUtil.resolveAuthUsername(servletRequest); if (username == null) { return null; } final String password = ServletUtil.resolveAuthPassword(servletRequest); return userAuth.login(username, password); }. ### Assistant:", "ground_truth": "Tries to login user with basic authentication.", "predict": "Login via basic auth. @param servletRequest the servlet request @return the authenticated user or null if authentication failed"}
{"ID": 1387, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected JsonResult logout() { log.debug(\"logout user\"); UserSession.stop(servletRequest, servletResponse); return JsonResult.of(HttpStatus.ok()); }. ### Assistant:", "ground_truth": "Logout hook.", "predict": "Logout user. @return JsonResult of 204 HTTP status code."}
{"ID": 1388, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static File toContainerFile(final URL url) { String protocol = url.getProtocol(); if (protocol.equals(FILE_PROTOCOL)) { return toFile(url); } String path = url.getPath(); return new File(URI.create( path.substring(ZERO, path.lastIndexOf(\"!/\")))); }. ### Assistant:", "ground_truth": "Returns a file of either a folder or a containing archive.", "predict": "Converts a URL to a File. The File is created using the protocol of the URL. If the protocol is FILE, the File is created using the URL. If the protocol is not FILE, the File is created using the protocol and the path of the URL. @param url The URL to convert. @return The converted File."}
{"ID": 1389, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static File mkdirs(final File dirs) throws IOException { if (dirs.exists()) { checkIsDirectory(dirs); return dirs; } return checkCreateDirectory(dirs); }. ### Assistant:", "ground_truth": "Creates all directories at once.\n\n@param dirs Directories to make.\n@throws IOException if cannot create directory.", "predict": "Create a directory recursively. If the directory already exists, it is checked that it is indeed a directory. If it is not, an IOException is thrown. @param dirs Directory to create @return The created directory @throws IOException If the directory already exists and is not a directory @since 1.0.0"}
{"ID": 1390, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static File mkdir(final File dir) throws IOException { if (dir.exists()) { checkIsDirectory(dir); return dir; } return checkCreateDirectory(dir); }. ### Assistant:", "ground_truth": "Creates single directory.\n\n@throws IOException if cannot create directory.", "predict": "Create a directory. If the directory already exists, it is checked if it is indeed a directory. If it is not, an IOException is thrown. If the directory does not exist, it is created. @param dir the directory to create @return the created directory @throws IOException if the directory could not be created"}
{"ID": 1391, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static void _copyFile(final File srcFile, final File destFile) throws IOException { if (destFile.exists()) { if (destFile.isDirectory()) { throw new IOException(\"Destination '\" + destFile + \"' is a directory\"); } } // do copy file FileInputStream input = null; FileOutputStream output = null; try { input = new FileInputStream(srcFile); output = new FileOutputStream(destFile, false); StreamUtil.copy(input, output); } finally { StreamUtil.close(output); StreamUtil.close(input); } // done if (srcFile.length() != destFile.length()) { throw new IOException(\"Copy file failed of '\" + srcFile + \"' to '\" + destFile + \"' due to different sizes\"); } destFile.setLastModified(srcFile.lastModified()); }. ### Assistant:", "ground_truth": "Internal file copy when most of the pre-checking has passed.\n\n@param srcFile  Source {@link File}.\n@param destFile Destination {@link File}.\n@throws IOException if cannot copy", "predict": "Copy file. @param srcFile source file @param destFile destination file @throws IOException if failed to copy file"}
{"ID": 1392, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void copyDir(final File srcDir, final File destDir) throws IOException { checkDirCopy(srcDir, destDir); _copyDirectory(srcDir, destDir); }. ### Assistant:", "ground_truth": "Copies directory with specified copy params.\n\n@see #_copyDirectory(File, File)", "predict": "Copy directory recursively. @param srcDir source directory @param destDir destination directory @throws IOException if failed to copy directory"}
{"ID": 1393, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static File moveFileToDir(final File srcFile, final File destDir) throws IOException { checkExistsAndDirectory(destDir); return moveFile(srcFile, file(destDir, srcFile.getName())); }. ### Assistant:", "ground_truth": "Moves a file to a directory.\n\n@param srcFile Source {@link File}.\n@param destDir Destination directory.\n@throws IOException if there is an error during move.", "predict": "Move a file to a directory. The destination directory must exist and be a directory. @param srcFile the file to move @param destDir the directory to move the file to @return the file that was moved @throws IOException if the destination directory does not exist or is not a directory @throws IOException if the file cannot be moved"}
{"ID": 1394, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static void _moveDirectory(final File srcDest, File destDir) throws IOException { if (destDir.exists()) { checkIsDirectory(destDir); destDir = file(destDir, destDir.getName()); destDir.mkdir(); } final boolean rename = srcDest.renameTo(destDir); if (!rename) { _copyDirectory(srcDest, destDir); deleteDir(srcDest); } }. ### Assistant:", "ground_truth": "Moves a directory.\n\n@param srcDest Source directory\n@param destDir Destination directory.\n@throws IOException if there is an error during move.", "predict": "Move a directory. If the destination directory already exists, it will be renamed. If the destination directory does not exist, it will be created. If the move fails, the directory will be copied."}
{"ID": 1395, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void cleanDir(final File destDir) throws IOException { checkExists(destDir); checkIsDirectory(destDir); File[] files = destDir.listFiles(); if (files == null) { throw new IOException(\"Failed to list contents of: \" + destDir); } IOException exception = null; for (File file : files) { try { if (file.isDirectory()) { deleteDir(file); } else { file.delete(); } } catch (IOException ioex) { exception = ioex; continue; } } if (exception != null) { throw exception; } }. ### Assistant:", "ground_truth": "Cleans a directory without deleting it.\n\n@param destDir destination to clean.\n@throws IOException if something went wrong.", "predict": "Clean the specified directory recursively. @param destDir Directory to clean. @throws IOException If the directory is not found or cannot be cleaned."}
{"ID": 1396, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static char[] readUTFChars(final File file) throws IOException { checkExists(file); checkIsFile(file); UnicodeInputStream in = unicodeInputStreamOf(file); try { return StreamUtil.readChars(in, detectEncoding(in)); } finally { StreamUtil.close(in); } }. ### Assistant:", "ground_truth": "Reads UTF file content as char array.\n\n@param file {@link File} to read.\n@return array of characters.\n@throws IOException if something went wrong.", "predict": "Reads the contents of a file as a sequence of Unicode characters. The file must be a regular file. @param file the file to read @return the contents of the file as a sequence of Unicode characters @throws IOException if an I/O error occurs while reading the file"}
{"ID": 1397, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static char[] readChars(final File file, final String encoding) throws IOException { checkExists(file); checkIsFile(file); InputStream in = streamOf(file, encoding); try { return StreamUtil.readChars(in, encoding); } finally { StreamUtil.close(in); } }. ### Assistant:", "ground_truth": "Reads file content as char array.\n\n@param file     {@link File} to read.\n@param encoding Encoding to use.\n@return array of characters.\n@throws IOException if something went wrong.", "predict": "Reads the characters from a file, assuming the file exists and is a regular file. The file's encoding is determined from the file's name. If the file's encoding is not recognized, the default encoding is used. @param file the file to read @param encoding the encoding to use @return the characters read from the file @throws IOException if the file cannot be read"}
{"ID": 1398, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void writeChars(final File dest, final char[] data, final String encoding) throws IOException { outChars(dest, data, encoding, false); }. ### Assistant:", "ground_truth": "Write characters. append = false\n\n@see #outChars(File, char[], String, boolean)", "predict": "Writes the given characters to the specified file. The characters are written in the specified encoding. If the file does not exist, it is created. If the file already exists, it is truncated. If the file is a directory, it is not truncated. @param dest the file to write to @param data the characters to write @param encoding the encoding of the characters @throws IOException if an I/O error occurs"}
{"ID": 1399, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void writeString(final File dest, final String data, final String encoding) throws IOException { outString(dest, data, encoding, false); }. ### Assistant:", "ground_truth": "Writes String. append = false\n\n@see #outString(File, String, String, boolean)", "predict": "Writes a string to a file. The string is written as a single line. The encoding is used to determine the character set to use when writing the string. If the encoding is not specified, the default encoding of the platform is used. @param dest the destination file @param data the string to write @param encoding the encoding to use when writing the string @throws IOException if an error occurs while writing the string"}
{"ID": 1400, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void appendString(final File dest, final String data, final String encoding) throws IOException { outString(dest, data, encoding, true); }. ### Assistant:", "ground_truth": "Appends String. append = true\n\n@see #outString(File, String, String, boolean)", "predict": "Append a string to a file. @param dest the destination file. @param data the data to append. @param encoding the encoding of the data. @throws IOException if an error occurs."}
{"ID": 1401, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static byte[] readBytes(final File file, final int count) throws IOException { checkExists(file); checkIsFile(file); long numToRead = file.length(); if (numToRead >= Integer.MAX_VALUE) { throw new IOException(\"File is larger then max array size\"); } if (count > NEGATIVE_ONE && count < numToRead) { numToRead = count; } byte[] bytes = new byte[(int) numToRead]; RandomAccessFile randomAccessFile = new RandomAccessFile(file, \"r\"); randomAccessFile.readFully(bytes); randomAccessFile.close(); return bytes; }. ### Assistant:", "ground_truth": "Read file and returns byte array with contents.\n\n@param file  {@link File} to read\n@param count number of bytes to read\n@return byte array from {@link File} contents.\n@throws IOException if not a {@link File} or {@link File} does not exist or file size is\nlarger than {@link Integer#MAX_VALUE}.", "predict": "Reads a specified number of bytes from a file. @param file The file to read from. @param count The number of bytes to read. @return The read bytes. @throws IOException If the file does not exist or cannot be read."}
{"ID": 1402, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void writeBytes(final File dest, final byte[] data, final int off, final int len) throws IOException { outBytes(dest, data, off, len, false); }. ### Assistant:", "ground_truth": "Write bytes. append = false\n\n@see #outBytes(File, byte[], int, int, boolean)", "predict": "Writes the specified data to the specified file. The data is written starting at the specified offset. @param dest the file to write to. @param data the data to write. @param off the offset to start writing at. @param len the number of bytes to write. @throws IOException if an I/O error occurs."}
{"ID": 1403, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void appendBytes(final File dest, final byte[] data, final int off, final int len) throws IOException { outBytes(dest, data, off, len, true); }. ### Assistant:", "ground_truth": "Appends bytes. append = true\n\n@see #outBytes(File, byte[], int, int, boolean)", "predict": "Append the given data to the end of the file. @param dest the file to append to. @param data the data to append. @param off the offset into the data array to start writing. @param len the number of bytes to write. @throws IOException if an I/O error occurs."}
{"ID": 1404, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void copy(final File src, final File dest) throws IOException { if (src.isDirectory()) { copyDir(src, dest); return; } if (dest.isDirectory()) { copyFileToDir(src, dest); return; } copyFile(src, dest); }. ### Assistant:", "ground_truth": "Smart copy. If source is a directory, copy it to destination.\nOtherwise, if destination is directory, copy source file to it.\nOtherwise, try to copy source file to destination file.\n\n@param src  source {@link File}\n@param dest destination {@link File}\n@throws IOException if there is an error copying.\n@see #copyDir(File, File)\n@see #copyFileToDir(File, File)\n@see #copyFile(File, File)", "predict": "Copy a file to a destination file. If the destination is a directory, it will be created if it does not exist. If the source is a directory, it will be copied recursively. If the source is a file, it will be copied to the destination. If the destination is a directory, it will be created if it does not exist. If the destination is a file, it will be deleted before being overwritten. If the destination does not exist, it will be created. If the destination is a directory, it will be created if it does not exist. If the destination is a file, it will be deleted before being overwritten. If the destination does not exist, it will be created. If the destination is a directory, it will be created if it does not exist. If the destination is a file, it will be deleted before being overwritten. If the destination does not exist, it will be created. If the destination is a directory, it will be created if it does not exist. If the destination is a file, it will be"}
{"ID": 1405, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void delete(final File dest) throws IOException { if (dest.isDirectory()) { deleteDir(dest); return; } deleteFile(dest); }. ### Assistant:", "ground_truth": "Smart delete of destination file or directory.\n\n@throws IOException if there is an issue deleting the file/directory.\n@see #deleteFile(File)\n@see #deleteDir(File)", "predict": "Delete a file. @param dest the file to delete. @throws IOException if an error occurs while deleting the file."}
{"ID": 1406, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static File createTempDirectory(final String prefix, final String suffix, final File tempDir) throws IOException { File file = createTempFile(prefix, suffix, tempDir); file.delete(); file.mkdir(); return file; }. ### Assistant:", "ground_truth": "Creates temporary directory.\n\n@see #createTempFile(String, String, File)", "predict": "Create a temporary directory with the given prefix and suffix. The directory is deleted after use. @param prefix the prefix of the directory @param suffix the suffix of the directory @param tempDir the directory where the temporary directory is created @return the temporary directory @throws IOException if the directory cannot be created"}
{"ID": 1407, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean isBinary(final File file) throws IOException { byte[] bytes = readBytes(file, 128); for (byte b : bytes) { if (b < 32 && b != 9 && b != 10 && b != 13) { return true; } } return false; }. ### Assistant:", "ground_truth": "Checks the start of the file for ASCII control characters\n\n@param file {@link File}\n@return true if the the start of the {@link File} is ASCII control characters.", "predict": "Determines if a file is binary. @param file the file to check @return true if the file is binary, false otherwise @throws IOException if an error occurs while reading the file"}
{"ID": 1408, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static void checkDirCopy(final File srcDir, final File destDir) throws IOException { checkExists(srcDir); checkIsDirectory(srcDir); if (equals(srcDir, destDir)) { throw new IOException(\"Source '\" + srcDir + \"' and destination '\" + destDir + \"' are equal\"); } }. ### Assistant:", "ground_truth": "Checks that srcDir exists, that it is a directory and if srcDir and destDir are not equal.\n\n@param srcDir  Source directory\n@param destDir Destination directory\n@throws IOException if any of the above conditions are not true.", "predict": "Checks that the source and destination directories are not equal. @param srcDir source directory @param destDir destination directory @throws IOException if the directories are equal"}
{"ID": 1409, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static void checkFileCopy(final File srcFile, final File destFile) throws IOException { checkExists(srcFile); checkIsFile(srcFile); if (equals(srcFile, destFile)) { throw new IOException(\"Files '\" + srcFile + \"' and '\" + destFile + \"' are equal\"); } File destParent = destFile.getParentFile(); if (destParent != null && !destParent.exists()) { checkCreateDirectory(destParent); } }. ### Assistant:", "ground_truth": "Checks that file copy can occur.\n\n@param srcFile  Source {@link File}\n@param destFile Destination {@link File}\n@throws IOException if srcFile does not exist or is not a file or\nsrcFile and destFile are equal or cannot create ancestor directories.", "predict": "Checks if the files are equal and if the destination file exists and is a file. If the destination file is not a file, throws an IOException. If the destination file is equal to the source file, throws an IOException. @param srcFile the source file @param destFile the destination file @throws IOException if the files are equal or if the destination file does not exist or is not a file"}
{"ID": 1410, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void printUsage(final String commandName) { final StringBuilder usage = new StringBuilder(commandName); for (final Option option : options) { if (option.shortName != null) { usage.append(\" [-\").append(option.shortName).append(\"]\"); } else if (option.longName != null) { usage.append(\" [--\").append(option.longName).append(\"]\"); } } for (final Param param : params) { usage.append(\" \").append(param.label); } System.out.println(usage); }. ### Assistant:", "ground_truth": "Prints the usage line.", "predict": "Prints usage information for the command. @param commandName The name of the command."}
{"ID": 1411, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Method resolveActionMethod(final Class<?> actionClass, final String methodName) { MethodDescriptor methodDescriptor = ClassIntrospector.get().lookup(actionClass).getMethodDescriptor(methodName, false); if (methodDescriptor == null) { throw new MadvocException(\"Public method not found: \" + actionClass.getSimpleName() + \"#\" + methodName); } return methodDescriptor.getMethod(); }. ### Assistant:", "ground_truth": "Resolves action method for given action class ane method name.", "predict": "Find the public method in the action class that corresponds to the given method name. @param actionClass The action class. @param methodName The name of the method. @return The method."}
{"ID": 1412, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ActionRuntime registerAction(final Class actionClass, final String actionMethodName, final ActionDefinition actionDefinition) { Method actionMethod = resolveActionMethod(actionClass, actionMethodName); return registerAction(actionClass, actionMethod, actionDefinition); }. ### Assistant:", "ground_truth": "Registers action with provided action class and method name.\n@see #registerAction(Class, Method, ActionDefinition)", "predict": "Registers an action with the specified actionClass and actionMethodName. The actionDefinition is used to determine the action's behavior. @param actionClass the class of the action @param actionMethodName the name of the action method @param actionDefinition the ActionDefinition of the action @return the ActionRuntime of the registered action"}
{"ID": 1413, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void registerPathAlias(final String alias, final String path) { final String existing = pathAliases.put(alias, path); if (existing != null) { throw new MadvocException(\"Duplicated alias detected: [\" + alias + \"] for paths: \" + path + \", \" + existing); } }. ### Assistant:", "ground_truth": "Registers new path alias.", "predict": "Registers a path alias. The alias is a string that represents a URL path. The path is a string that represents a URL path. The alias is used to map a URL path to a concrete URL path. The path is used to map a URL path to a concrete URL path. @param alias The alias to register. @param path The path to register."}
{"ID": 1414, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean next() { if (!looping) { return false; } if (last) { return false; } if (count == 0) { value = start; first = true; } else { value += step; first = false; } count++; last = isLastIteration(value + step); return true; }. ### Assistant:", "ground_truth": "Iterates to next value at the beginning of the loop.", "predict": "Advances the value of the iterator by one step. If the step is zero, the value is incremented by one. If the step is negative, the value is decremented by one. If looping is disabled, the method returns false. If looping is disabled and the last iteration has been reached, the method returns false. If looping is disabled and the step is zero, the method returns false. If looping is disabled and the step is negative, the method returns false. If looping is disabled and the step is zero, the method returns false. If looping is disabled and the step is negative, the method returns false. If looping is disabled and the step is zero, the method returns false. If looping is disabled and the step is negative, the method returns false. If looping is disabled and the step is zero, the method returns false. If looping is disabled and the step is negative, the method returns false. If looping is disabled and the step is zero, the method returns false. If looping is disabled and the step is negative, the method returns false"}
{"ID": 1415, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static CharArraySequence from(final char[] value, final int offset, final int len) { final char[] buffer = new char[value.length]; System.arraycopy(value, offset, buffer, 0, len); return new CharArraySequence(buffer); }. ### Assistant:", "ground_truth": "Static constructor that creates a char sequence by making a copy of provided char array.", "predict": "Create a CharArraySequence from a char array. The offset and length parameters are used to create a substring from the given char array. @param value the source char array @param offset the offset of the substring @param len the length of the substring @return a CharArraySequence representing the substring"}
{"ID": 1416, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Object execute() throws Exception { String methodName = ProxyTarget.targetMethodName(); Class[] argTypes = ProxyTarget.createArgumentsClassArray(); Object[] args = ProxyTarget.createArgumentsArray(); // lookup method on target object class (and not #targetClass!() Class type = _target.getClass(); Method method = type.getMethod(methodName, argTypes); // remember context classloader ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader(); Object result; try { // change class loader Thread.currentThread().setContextClassLoader(type.getClassLoader()); // invoke result = method.invoke(_target, args); } finally { // return context classloader Thread.currentThread().setContextClassLoader(contextClassLoader); } return ProxyTarget.returnValue(result); }. ### Assistant:", "ground_truth": "Looks up for method in target object and invokes it using reflection.", "predict": "Execute the method on the target object."}
{"ID": 1417, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public final boolean matchUpperCase(final char[] uppercaseTarget) { if (ndx + uppercaseTarget.length > total) { return false; } int j = ndx; for (int i = 0; i < uppercaseTarget.length; i++, j++) { final char c = CharUtil.toUpperAscii(input[j]); if (c != uppercaseTarget[i]) { return false; } } return true; }. ### Assistant:", "ground_truth": "Matches char buffer given in uppercase with content at current location, that will\nbe converted to upper case to make case-insensitive matching.", "predict": "Match uppercase characters. @param uppercaseTarget uppercase characters to match @return true if uppercase characters match"}
{"ID": 1418, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected final CharSequence charSequence(final int from, final int to) { if (from == to) { return CharArraySequence.EMPTY; } return CharArraySequence.of(input, from, to - from); }. ### Assistant:", "ground_truth": "Creates char sub-sequence from the input.", "predict": "Returns a CharSequence containing the specified range of characters from the input. If the range is empty, returns an empty CharSequence."}
{"ID": 1419, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static URL[] of(ClassLoader classLoader, Class clazz) { if (clazz == null) { clazz = ClassPathURLs.class; } if (classLoader == null) { classLoader = clazz.getClassLoader(); } final Set<URL> urls = new LinkedHashSet<>(); while (classLoader != null) { if (classLoader instanceof URLClassLoader) { URLClassLoader urlClassLoader = (URLClassLoader) classLoader; URL[] allURLS = urlClassLoader.getURLs(); Collections.addAll(urls, allURLS); break; } URL classUrl = classModuleUrl(classLoader, clazz); if (classUrl != null) { urls.add(classUrl); } classUrl = classModuleUrl(classLoader, ClassPathURLs.class); if (classUrl != null) { urls.add(classUrl); } ModuleDescriptor moduleDescriptor = clazz.getModule().getDescriptor(); if (moduleDescriptor != null) { moduleDescriptor.requires().forEach(req -> { ModuleLayer.boot() .findModule(req.name()) .ifPresent(mod -> { ClassLoader moduleClassLoader = mod.getClassLoader(); if (moduleClassLoader != null) { URL url = moduleClassLoader.getResource(MANIFEST); if (url != null) { url = fixManifestUrl(url); urls.add(url); } } }); }); } classLoader = classLoader.getParent(); } return urls.toArray(new URL[0]); }. ### Assistant:", "ground_truth": "Returns urls for the classloader.\n\n@param classLoader classloader in which to find urls\n@return list of urls or {@code null} if not found", "predict": "Find all the URLs of the classpath. @param classLoader The classloader to start with. @param clazz The class to find the URLs for. @return The URLs found."}
{"ID": 1420, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Email bcc(final EmailAddress... bccs) { this.bcc = ArraysUtil.join(this.bcc, valueOrEmptyArray(bccs)); return _this(); }. ### Assistant:", "ground_truth": "Appends one or more BCC addresses.\n\n@param bccs vararg of {@link EmailAddress}es to set.\n@return this", "predict": "Adds one or more email addresses to the BCC field. The BCC field is used to send emails blind carbon copy, i.e. the recipient will not see the email addresses of the other recipients. The BCC field is optional and the email will be sent blind carbon copy if it is present. The BCC field is ignored if it is empty. The BCC field is also ignored if the email is sent as plain text. The BCC field is also ignored if the email is sent as HTML. The BCC field is also ignored if the email is sent as multipart. The BCC field is also ignored if the email is sent as a raw email. The BCC field is also ignored if the email is sent as a raw email. The BCC field is also ignored if the email is sent as a raw email. The BCC field is also ignored if the email is sent as a raw email. The BCC field is also ignored if the email is sent as a raw email. The BCC field is also ignored if"}
{"ID": 1421, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void register(final Class type, final TypeJsonSerializer typeJsonSerializer) { map.put(type, typeJsonSerializer); cache.clear(); }. ### Assistant:", "ground_truth": "Registers new serializer.", "predict": "Register a type with its json serializer. @param type the type to register @param typeJsonSerializer the json serializer for the type"}
{"ID": 1422, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected TypeJsonSerializer lookupSerializer(final Class type) { TypeJsonSerializer tjs = map.get(type); if (tjs == null) { if (defaultSerializerMap != null) { tjs = defaultSerializerMap.map.get(type); } } return tjs; }. ### Assistant:", "ground_truth": "Get type serializer from map. First the current map is used.\nIf element is missing, default map will be used, if exist.", "predict": "Lookup the TypeJsonSerializer for the given type. @param type The type to lookup. @return The TypeJsonSerializer for the given type."}
{"ID": 1423, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void parseRequestStream(final InputStream inputStream, final String encoding) throws IOException { setParsed(); MultipartRequestInputStream input = new MultipartRequestInputStream(inputStream); input.readBoundary(); while (true) { FileUploadHeader header = input.readDataHeader(encoding); if (header == null) { break; } if (header.isFile) { String fileName = header.fileName; if (fileName.length() > 0) { if (header.contentType.indexOf(\"application/x-macbinary\") > 0) { input.skipBytes(128); } } FileUpload newFile = fileUploadFactory.create(input); newFile.processStream(); if (fileName.length() == 0) { // file was specified, but no name was provided, therefore it was not uploaded if (newFile.getSize() == 0) { newFile.size = -1; } } putFile(header.formFieldName, newFile); } else { // no file, therefore it is regular form parameter. FastByteArrayOutputStream fbos = new FastByteArrayOutputStream(); input.copyAll(fbos); String value = encoding != null ? new String(fbos.toByteArray(), encoding) : new String(fbos.toByteArray()); putParameter(header.formFieldName, value); } input.skipBytes(1); input.mark(1); // read byte, but may be end of stream int nextByte = input.read(); if (nextByte == -1 || nextByte == '-') { input.reset(); break; } input.reset(); } }. ### Assistant:", "ground_truth": "Extracts uploaded files and parameters from the request data.", "predict": "Parses the request stream and uploads the files. @param inputStream the input stream to read from @param encoding the encoding to use for the file names @throws IOException if an error occurs while reading the input stream"}
{"ID": 1424, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String getParameter(final String paramName) { if (requestParameters == null) { return null; } String[] values = requestParameters.get(paramName); if ((values != null) && (values.length > 0)) { return values[0]; } return null; }. ### Assistant:", "ground_truth": "Returns single value of a parameter. If parameter name is used for\nmore then one parameter, only the first one will be returned.\n\n@return parameter value, or <code>null</code> if not found", "predict": "Get the value of a parameter from the request. @param paramName The name of the parameter. @return The value of the parameter."}
{"ID": 1425, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String[] getParameterValues(final String paramName) { if (requestParameters == null) { return null; } return requestParameters.get(paramName); }. ### Assistant:", "ground_truth": "Returns all values all of the values the given request parameter has.", "predict": "Returns the values of a parameter. @param paramName The name of the parameter. @return The values of the parameter."}
{"ID": 1426, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public FileUpload getFile(final String paramName) { if (requestFiles == null) { return null; } FileUpload[] values = requestFiles.get(paramName); if ((values != null) && (values.length > 0)) { return values[0]; } return null; }. ### Assistant:", "ground_truth": "Returns uploaded file.\n@param paramName parameter name of the uploaded file\n@return uploaded file or <code>null</code> if parameter name not found", "predict": "Get the first file uploaded for the specified parameter. If no files were uploaded, returns null. @param paramName the name of the parameter. @return the first uploaded file."}
{"ID": 1427, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public FileUpload[] getFiles(final String paramName) { if (requestFiles == null) { return null; } return requestFiles.get(paramName); }. ### Assistant:", "ground_truth": "Returns all uploaded files the given request parameter has.", "predict": "Get the uploaded files. @param paramName the parameter name. @return the uploaded files."}
{"ID": 1428, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void init(final FilterConfig filterConfig) { this.filterConfig = filterConfig; this.encoding = filterConfig.getInitParameter(\"encoding\"); if (this.encoding == null) { this.encoding = JoddCore.encoding; } this.ignore = Converter.get().toBooleanValue(filterConfig.getInitParameter(\"ignore\"), true); }. ### Assistant:", "ground_truth": "Place this filter into service.\n\n@param filterConfig The filter configuration object", "predict": "Initialize the servlet. @param filterConfig FilterConfig instance."}
{"ID": 1429, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void parse(final DbSqlBuilder sqlBuilder, final String template) { int length = template.length(); int last = 0; while (true) { int mark = template.indexOf('$', last); if (mark == -1) { if (last < length) { sqlBuilder.appendRaw(template.substring(last)); } break; } int escapesCount = countEscapes(template, mark); // check if escaped if (escapesCount > 0) { boolean isEscaped = escapesCount % 2 != 0; int escapesToAdd = escapesCount >> 1; sqlBuilder.appendRaw(template.substring(last, mark - escapesCount + escapesToAdd) + '$'); if (isEscaped) { last = mark + 1; continue; } } else { sqlBuilder.appendRaw(template.substring(last, mark)); } int end; if (template.startsWith(MACRO_TABLE, mark)) { mark += MACRO_TABLE.length(); end = findMacroEnd(template, mark); onTable(sqlBuilder, template.substring(mark, end)); } else if (template.startsWith(MACRO_COLUMN, mark)) { mark += MACRO_COLUMN.length(); end = findMacroEnd(template, mark); onColumn(sqlBuilder, template.substring(mark, end)); } else if (template.startsWith(MACRO_MATCH, mark)) { mark += MACRO_MATCH.length(); end = findMacroEnd(template, mark); onMatch(sqlBuilder, template.substring(mark, end)); } else if (template.startsWith(MACRO_VALUE, mark)) { mark += MACRO_VALUE.length(); end = findMacroEnd(template, mark); onValue(sqlBuilder, template.substring(mark, end)); } else { mark++; // reference found end = mark; // find macro end while (end < length) { if (!isReferenceChar(template, end)) { break; } end++; } onReference(sqlBuilder, template.substring(mark, end)); end--; } end++; last = end; } }. ### Assistant:", "ground_truth": "Parses template and returns generated sql builder.", "predict": "Parse template string into SQL. @param sqlBuilder sql builder @param template template string"}
{"ID": 1430, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected int findMacroEnd(final String template, final int fromIndex) { int endIndex = template.indexOf('}', fromIndex); if (endIndex == -1) { throw new DbSqlBuilderException(\"Template syntax error, some macros are not closed. Error at: '...\" + template.substring(fromIndex)); } return endIndex; }. ### Assistant:", "ground_truth": "Finds macros end.", "predict": "Find macro end. @param template template. @param fromIndex start index. @return macro end."}
{"ID": 1431, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected int countEscapes(final String template, int macroIndex) { macroIndex--; int escapeCount = 0; while (macroIndex >= 0) { if (template.charAt(macroIndex) != ESCAPE_CHARACTER) { break; } escapeCount++; macroIndex--; } return escapeCount; }. ### Assistant:", "ground_truth": "Count escapes to the left.", "predict": "Count the number of escape characters in the template. @param template the template to analyze. @param macroIndex the index of the macro that starts the escape sequence. @return the number of escape characters in the template."}
{"ID": 1432, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String buildQuery(final HttpMultiMap<?> queryMap, final String encoding) { if (queryMap.isEmpty()) { return StringPool.EMPTY; } int queryMapSize = queryMap.size(); StringBand query = new StringBand(queryMapSize * 4); int count = 0; for (Map.Entry<String, ?> entry : queryMap) { String key = entry.getKey(); key = URLCoder.encodeQueryParam(key, encoding); Object value = entry.getValue(); if (value == null) { if (count != 0) { query.append('&'); } query.append(key); count++; } else { if (count != 0) { query.append('&'); } query.append(key); count++; query.append('='); String valueString = URLCoder.encodeQueryParam(value.toString(), encoding); query.append(valueString); } } return query.toString(); }. ### Assistant:", "ground_truth": "Builds a query string from given query map.", "predict": "Build a query string from a multi-map. @param queryMap the query map @param encoding the encoding @return the query string"}
{"ID": 1433, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static HttpMultiMap<String> parseQuery(final String query, final boolean decode) { final HttpMultiMap<String> queryMap = HttpMultiMap.newCaseInsensitiveMap(); if (StringUtil.isBlank(query)) { return queryMap; } int lastNdx = 0; while (lastNdx < query.length()) { int ndx = query.indexOf('&', lastNdx); if (ndx == -1) { ndx = query.length(); } final String paramAndValue = query.substring(lastNdx, ndx); ndx = paramAndValue.indexOf('='); if (ndx == -1) { queryMap.add(paramAndValue, null); } else { String name = paramAndValue.substring(0, ndx); if (decode) { name = URLDecoder.decodeQuery(name); } String value = paramAndValue.substring(ndx + 1); if (decode) { value = URLDecoder.decodeQuery(value); } queryMap.add(name, value); } lastNdx += paramAndValue.length() + 1; } return queryMap; }. ### Assistant:", "ground_truth": "Parses query from give query string. Values are optionally decoded.", "predict": "Parses a query string into a multi-map. @param query the query string to parse. @param decode whether to decode the query string. @return the parsed query map."}
{"ID": 1434, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String prepareHeaderParameterName(final String headerName) { // special cases if (headerName.equals(\"etag\")) { return HttpBase.HEADER_ETAG; } if (headerName.equals(\"www-authenticate\")) { return \"WWW-Authenticate\"; } char[] name = headerName.toCharArray(); boolean capitalize = true; for (int i = 0; i < name.length; i++) { char c = name[i]; if (c == '-') { capitalize = true; continue; } if (capitalize) { name[i] = Character.toUpperCase(c); capitalize = false; } else { name[i] = Character.toLowerCase(c); } } return new String(name); }. ### Assistant:", "ground_truth": "Makes nice header names.", "predict": "Capitalize the first letter of the headerName. @param headerName the headerName to capitalize @return the capitalized headerName"}
{"ID": 1435, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String extractMediaType(final String contentType) { int index = contentType.indexOf(';'); if (index == -1) { return contentType; } return contentType.substring(0, index); }. ### Assistant:", "ground_truth": "Extracts media-type from value of \"Content Type\" header.", "predict": "Extracts the media type from a content type string. @param contentType the content type string @return the media type extracted from the content type string"}
{"ID": 1436, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String toHtml(final Node node, final Appendable appendable) { NodeVisitor renderer = createRenderer(appendable); node.visit(renderer); return appendable.toString(); }. ### Assistant:", "ground_truth": "Renders node to appendable.", "predict": "Render the given node to HTML. The resulting HTML is written to the given appendable. @param node the node to render @param appendable the appendable to write the HTML to @return the HTML rendered from the node."}
{"ID": 1437, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String toInnerHtml(final Node node, final Appendable appendable) { NodeVisitor renderer = createRenderer(appendable); node.visitChildren(renderer); return appendable.toString(); }. ### Assistant:", "ground_truth": "Renders node children to appendable.", "predict": "Render the given node to an HTML string. @param node the node to render @param appendable the appendable to render to @return the rendered HTML string"}
{"ID": 1438, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void configureWith(final ServletContext servletContext) { webAppClassName = servletContext.getInitParameter(PARAM_MADVOC_WEBAPP); paramsFiles = Converter.get().toStringArray(servletContext.getInitParameter(PARAM_MADVOC_PARAMS)); madvocConfiguratorClassName = servletContext.getInitParameter(PARAM_MADVOC_CONFIGURATOR); }. ### Assistant:", "ground_truth": "Configures Madvoc by reading context init parameters.", "predict": "Configure the MadvocRunner with the ServletContext. @param servletContext the ServletContext to configure from."}
{"ID": 1439, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void reset() { this.ndx = 0; this.textLen = 0; this.path = new Path(); this.notFirstObject = false; if (useAltPaths) { path.altPath = new Path(); } if (classMetadataName != null) { mapToBean = createMapToBean(classMetadataName); } }. ### Assistant:", "ground_truth": "Resets JSON parser, so it can be reused.", "predict": "Reset the state of the reader."}
{"ID": 1440, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public JsonParser lazy(final boolean lazy) { this.lazy = lazy; this.mapSupplier = lazy ? LAZYMAP_SUPPLIER : HASHMAP_SUPPLIER; this.listSupplier = lazy ? LAZYLIST_SUPPLIER : ARRAYLIST_SUPPLIER; return this; }. ### Assistant:", "ground_truth": "Defines how JSON parser works. In non-lazy mode, the whole JSON is parsed as it is.\nIn the lazy mode, not everything is parsed, but some things are left lazy.\nThis way we gain performance, especially on partial usage of the whole JSON.\nHowever, be aware that parser holds the input memory until the returned\nobjects are disposed.", "predict": "Specifies whether the map and list should be lazily created. @param lazy Whether the map and list should be lazily created. @return The parser with the specified setting."}
{"ID": 1441, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Class replaceWithMappedTypeForPath(final Class target) { if (mappings == null) { return target; } Class newType; // first try alt paths Path altPath = path.getAltPath(); if (altPath != null) { if (!altPath.equals(path)) { newType = mappings.get(altPath); if (newType != null) { return newType; } } } // now check regular paths newType = mappings.get(path); if (newType != null) { return newType; } return target; }. ### Assistant:", "ground_truth": "Replaces type with mapped type for current path.", "predict": "Try to replace the class with a mapped class. If no mapped class is found, return the original class. @param target the class to replace @return the replacement class or the original class"}
{"ID": 1442, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <T> List<T> parseAsList(final String string, final Class<T> componentType) { return new JsonParser() .map(JsonParser.VALUES, componentType) .parse(string); }. ### Assistant:", "ground_truth": "Parses input JSON to a list with specified component type.", "predict": "Parses a string as a list of elements of the specified type. The resulting list will have the same size as the original string. @param string the string to parse @param componentType the type of the elements in the resulting list @return the parsed list"}
{"ID": 1443, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <K, V> Map<K, V> parseAsMap( final String string, final Class<K> keyType, final Class<V> valueType) { return new JsonParser() .map(JsonParser.KEYS, keyType) .map(JsonParser.VALUES, valueType) .parse(string); }. ### Assistant:", "ground_truth": "Parses input JSON to a list with specified key and value types.", "predict": "Parse a JSON string into a map. The keys and values are of the specified types. @param string the JSON string to parse. @param keyType the type of keys. @param valueType the type of values. @return the parsed map. @throws IllegalArgumentException if the types are not supported."}
{"ID": 1444, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private Object resolveLazyValue(Object value) { if (value instanceof Supplier) { value = ((Supplier)value).get(); } return value; }. ### Assistant:", "ground_truth": "Resolves lazy value during the parsing runtime.", "predict": "Resolve the value of a lazy property. If the value is a supplier, it will be executed and the result will be returned. @param value the value to resolve @return the resolved value"}
{"ID": 1445, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void skipObject() { int bracketCount = 1; boolean insideString = false; while (ndx < total) { final char c = input[ndx]; if (insideString) { if (c == '\\\"' && notPrecededByEvenNumberOfBackslashes()) { insideString = false; } } else if (c == '\\\"') { insideString = true; } else if (c == '{') { bracketCount++; } else if (c == '}') { bracketCount--; if (bracketCount == 0) { ndx++; return; } } ndx++; } }. ### Assistant:", "ground_truth": "Skips over complete object. It is not parsed, just skipped. It will be\nparsed later, but only if required.", "predict": "Skips over object."}
{"ID": 1446, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String parseString() { char quote = '\\\"'; if (looseMode) { quote = consumeOneOf('\\\"', '\\''); if (quote == 0) { return parseUnquotedStringContent(); } } else { consume(quote); } return parseStringContent(quote); }. ### Assistant:", "ground_truth": "Parses a string.", "predict": "Consume and parse a string."}
{"ID": 1447, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String parseStringContent(final char quote) { final int startNdx = ndx; // roll-out until the end of the string or the escape char while (true) { final char c = input[ndx]; if (c == quote) { // no escapes found, just use existing string ndx++; return new String(input, startNdx, ndx - 1 - startNdx); } if (c == '\\\\') { break; } ndx++; } // escapes found, proceed differently textLen = ndx - startNdx; growEmpty(); // for (int i = startNdx, j = 0; j < textLen; i++, j++) { // text[j] = input[i]; // } System.arraycopy(input, startNdx, text, 0, textLen); // escape char, process everything until the end while (true) { char c = input[ndx]; if (c == quote) { // done ndx++; final String str = new String(text, 0, textLen); textLen = 0; return str; } if (c == '\\\\') { // escape char found ndx++; c = input[ndx]; switch (c) { case '\\\"' : c = '\\\"'; break; case '\\\\' : c = '\\\\'; break; case '/' : c = '/'; break; case 'b' : c = '\\b'; break; case 'f' : c = '\\f'; break; case 'n' : c = '\\n'; break; case 'r' : c = '\\r'; break; case 't' : c = '\\t'; break; case 'u' : ndx++; c = parseUnicode(); break; default: if (looseMode) { if (c != '\\'') { c = '\\\\'; ndx--; } } else { syntaxError(\"Invalid escape char: \" + c); } } } text[textLen] = c; textLen++; growAndCopy(); ndx++; } }. ### Assistant:", "ground_truth": "Parses string content, once when starting quote has been consumed.", "predict": "Parse string content. @param quote the closing quote character @return the string value"}
{"ID": 1448, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected char parseUnicode() { int i0 = CharUtil.hex2int(input[ndx++]); int i1 = CharUtil.hex2int(input[ndx++]); int i2 = CharUtil.hex2int(input[ndx++]); int i3 = CharUtil.hex2int(input[ndx]); return (char) ((i0 << 12) + (i1 << 8) + (i2 << 4) + i3); }. ### Assistant:", "ground_truth": "Parses 4 characters and returns unicode character.", "predict": "Parse a Unicode character."}
{"ID": 1449, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String parseUnquotedStringContent() { final int startNdx = ndx; while (true) { final char c = input[ndx]; if (c <= ' ' || CharUtil.equalsOne(c, UNQUOTED_DELIMETERS)) { final int currentNdx = ndx; // done skipWhiteSpaces(); return new String(input, startNdx, currentNdx - startNdx); } ndx++; } }. ### Assistant:", "ground_truth": "Parses un-quoted string content.", "predict": "Parses unquoted string content. @return the string value"}
{"ID": 1450, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Number parseNumber() { final int startIndex = ndx; char c = input[ndx]; boolean isDouble = false; boolean isExp = false; if (c == '-') { ndx++; } while (true) { if (isEOF()) { break; } c = input[ndx]; if (c >= '0' && c <= '9') { ndx++; continue; } if (c <= 32) { // white space break; } if (c == ',' || c == '}' || c == ']') { // delimiter break; } if (c == '.') { isDouble = true; } else if (c == 'e' || c == 'E') { isExp = true; } ndx++; } final String value = new String(input, startIndex, ndx - startIndex); if (isDouble) { return Double.valueOf(value); } long longNumber; if (isExp) { longNumber = Double.valueOf(value).longValue(); } else { if (value.length() >= 19) { // if string is 19 chars and longer, it can be over the limit BigInteger bigInteger = new BigInteger(value); if (isGreaterThanLong(bigInteger)) { return bigInteger; } longNumber = bigInteger.longValue(); } else { longNumber = Long.parseLong(value); } } if ((longNumber >= Integer.MIN_VALUE) && (longNumber <= Integer.MAX_VALUE)) { return (int) longNumber; } return longNumber; }. ### Assistant:", "ground_truth": "Parses JSON numbers.", "predict": "Parses a number. @return the parsed number."}
{"ID": 1451, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Object parseArrayContent(Class targetType, Class componentType) { // detect special case if (targetType == Object.class) { targetType = List.class; } // continue targetType = replaceWithMappedTypeForPath(targetType); if (componentType == null && targetType != null && targetType.isArray()) { componentType = targetType.getComponentType(); } path.push(VALUES); componentType = replaceWithMappedTypeForPath(componentType); Collection<Object> target = newArrayInstance(targetType); boolean koma = false; mainloop: while (true) { skipWhiteSpaces(); char c = input[ndx]; if (c == ']') { if (koma) { syntaxError(\"Trailing comma\"); } ndx++; path.pop(); return target; } Object value = parseValue(componentType, null, null); target.add(value); skipWhiteSpaces(); c = input[ndx]; switch (c) { case ']': ndx++; break mainloop; case ',': ndx++; koma = true; break; default: syntaxError(\"Invalid char: expected ] or ,\"); } } path.pop(); if (targetType != null) { return convertType(target, targetType); } return target; }. ### Assistant:", "ground_truth": "Parses arrays, once when open bracket has been consumed.", "predict": "Parse the array content. @param targetType the target type @param componentType the component type @return the parsed content"}
{"ID": 1452, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void createEmptyCtor() { final MethodVisitor mv = wd.dest.visitMethod(AsmUtil.ACC_PUBLIC, INIT, \"()V\", null, null); mv.visitCode(); mv.visitVarInsn(Opcodes.ALOAD, 0); mv.visitMethodInsn( Opcodes.INVOKESPECIAL, AsmUtil.SIGNATURE_JAVA_LANG_OBJECT, INIT, \"()V\", false); mv.visitInsn(Opcodes.RETURN); mv.visitMaxs(1, 1); mv.visitEnd(); }. ### Assistant:", "ground_truth": "Created empty default constructor.", "predict": "Create the empty constructor."}
{"ID": 1453, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void createSimpleMethodWrapper(final MethodSignatureVisitor msign) { int access = msign.getAccessFlags(); access &= ~ACC_ABSTRACT; access &= ~ACC_NATIVE; MethodVisitor mv = wd.dest.visitMethod( access, msign.getMethodName(), msign.getDescription(), msign.getAsmMethodSignature(), msign.getExceptions()); mv.visitCode(); mv.visitVarInsn(ALOAD, 0); mv.visitFieldInsn(GETFIELD, wd.thisReference, wd.wrapperRef, wd.wrapperType); loadVirtualMethodArguments(mv, msign); if (wd.wrapInterface) { mv.visitMethodInsn( INVOKEINTERFACE, wd.wrapperType.substring(1, wd.wrapperType.length() - 1), msign.getMethodName(), msign.getDescription(), true); } else { mv.visitMethodInsn( INVOKEVIRTUAL, wd.wrapperType.substring(1, wd.wrapperType.length() - 1), msign.getMethodName(), msign.getDescription(), false); } ProxettaAsmUtil.prepareReturnValue(mv, msign, 0); visitReturn(mv, msign, true); mv.visitMaxs(0, 0); mv.visitEnd(); }. ### Assistant:", "ground_truth": "Creates simple method wrapper without proxy.", "predict": "Create a simple method wrapper. @param msign MethodSignatureVisitor to visit."}
{"ID": 1454, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private String resolveRawTypeName(String typeName) { if (typeName == null) { return null; } boolean isArray = typeName.startsWith(StringPool.LEFT_SQ_BRACKET); if (isArray) { typeName = typeName.substring(1); } String rawTypeName; if (generics.containsKey(typeName)) { rawTypeName = generics.get(typeName); } else { rawTypeName = declaredTypeGeneric.getOrDefault(typeName, typeName); } if (isArray) { rawTypeName = '[' + rawTypeName; } return rawTypeName; }. ### Assistant:", "ground_truth": "Resolves raw type name using the generics information from the class\nor method information.", "predict": "Resolves the raw type name of a type. @param typeName the type name @return the resolved raw type name"}
{"ID": 1455, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public BeanReferences resolveReferenceFromValue(final PropertyDescriptor propertyDescriptor, final String refName) { BeanReferences references; if (refName == null || refName.isEmpty()) { references = buildDefaultReference(propertyDescriptor); } else { references = BeanReferences.of(refName); } references = references.removeDuplicateNames(); return references; }. ### Assistant:", "ground_truth": "Resolves reference from given values. Returns bean reference of given value or defaults\nif given name is blank.", "predict": "Resolve the reference from the value. @param propertyDescriptor Property descriptor @param refName The reference name @return The resolved BeanReferences"}
{"ID": 1456, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public BeanReferences[] resolveReferenceFromValues(final Executable methodOrCtor, final String... parameterReferences) { BeanReferences[] references = convertRefToReferences(parameterReferences); if (references == null || references.length == 0) { references = buildDefaultReferences(methodOrCtor); } if (methodOrCtor.getParameterTypes().length != references.length) { throw new PetiteException(\"Different number of method parameters and references for: \" + methodOrCtor.getDeclaringClass().getName() + '#' + methodOrCtor.getName()); } removeAllDuplicateNames(references); return references; }. ### Assistant:", "ground_truth": "Takes given parameters references and returns reference set for given method or constructor.", "predict": "Resolves references from values. @param methodOrCtor Method or Ctor. @param parameterReferences References. @return BeanReferences array."}
{"ID": 1457, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public BeanReferences[] readAllReferencesFromAnnotation(final Executable methodOrCtor) { PetiteInject petiteInject = methodOrCtor.getAnnotation(PetiteInject.class); final Parameter[] parameters = methodOrCtor.getParameters(); BeanReferences[] references; final boolean hasAnnotationOnMethodOrCtor; if (petiteInject != null) { references = convertAnnValueToReferences(petiteInject.value()); hasAnnotationOnMethodOrCtor = true; } else { references = new BeanReferences[parameters.length]; hasAnnotationOnMethodOrCtor = false; } int parametersWithAnnotationCount = 0; for (int i = 0; i < parameters.length; i++) { Parameter parameter = parameters[i]; petiteInject = parameter.getAnnotation(PetiteInject.class); if (petiteInject == null) { // no annotation on argument continue; } // there is annotation on argument, override values String annotationValue = readAnnotationValue(petiteInject); if (annotationValue != null) { references[i] = BeanReferences.of(annotationValue); } parametersWithAnnotationCount++; } if (!hasAnnotationOnMethodOrCtor) { if (parametersWithAnnotationCount == 0) { return null; } if (parametersWithAnnotationCount != parameters.length) { throw new PetiteException(\"All arguments must be annotated with PetiteInject\"); } } references = updateReferencesWithDefaultsIfNeeded(methodOrCtor, references); removeAllDuplicateNames(references); return references; }. ### Assistant:", "ground_truth": "Extracts references from method or constructor annotation.", "predict": "Read all references from annotation PetiteInject on method or constructor. @param methodOrCtor Method or constructor. @return BeanReferences[] array of references."}
{"ID": 1458, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private BeanReferences[] buildDefaultReferences(final Executable methodOrCtor) { final boolean useParamo = petiteConfig.getUseParamo(); final PetiteReferenceType[] lookupReferences = petiteConfig.getLookupReferences(); MethodParameter[] methodParameters = null; if (useParamo) { methodParameters = Paramo.resolveParameters(methodOrCtor); } final Class[] paramTypes = methodOrCtor.getParameterTypes(); final BeanReferences[] references = new BeanReferences[paramTypes.length]; for (int j = 0; j < paramTypes.length; j++) { String[] ref = new String[lookupReferences.length]; references[j] = BeanReferences.of(ref); for (int i = 0; i < ref.length; i++) { switch (lookupReferences[i]) { case NAME: ref[i] = methodParameters != null ? methodParameters[j].getName() : null; break; case TYPE_SHORT_NAME: ref[i] = StringUtil.uncapitalize(paramTypes[j].getSimpleName()); break; case TYPE_FULL_NAME: ref[i] = paramTypes[j].getName(); break; } } } return references; }. ### Assistant:", "ground_truth": "Builds default method references.", "predict": "Build the default references for a method or constructor. @param methodOrCtor the method or constructor to analyze. @return the references."}
{"ID": 1459, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public BeanReferences buildDefaultReference(final PropertyDescriptor propertyDescriptor) { final PetiteReferenceType[] lookupReferences = petiteConfig.getLookupReferences(); final String[] references = new String[lookupReferences.length]; for (int i = 0; i < references.length; i++) { switch (lookupReferences[i]) { case NAME: references[i] = propertyDescriptor.getName(); break; case TYPE_SHORT_NAME: references[i] = StringUtil.uncapitalize(propertyDescriptor.getType().getSimpleName()); break; case TYPE_FULL_NAME: references[i] = propertyDescriptor.getType().getName(); break; } } return BeanReferences.of(references); }. ### Assistant:", "ground_truth": "Builds default field references.", "predict": "Build the default reference for a property descriptor. @param propertyDescriptor the property descriptor @return the reference"}
{"ID": 1460, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void removeAllDuplicateNames(final BeanReferences[] allBeanReferences) { for (int i = 0; i < allBeanReferences.length; i++) { BeanReferences references = allBeanReferences[i]; allBeanReferences[i] = references.removeDuplicateNames(); } }. ### Assistant:", "ground_truth": "Removes duplicate names from bean references.", "predict": "Remove all duplicate names from the BeanReferences array."}
{"ID": 1461, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private BeanReferences[] convertRefToReferences(final String[] references) { if (references == null) { return null; } BeanReferences[] ref = new BeanReferences[references.length]; for (int i = 0; i < references.length; i++) { ref[i] = BeanReferences.of(references[i]); } return ref; }. ### Assistant:", "ground_truth": "Converts single string array to an array of bean references.", "predict": "Converts a list of references to a list of BeanReferences. @param references the references to convert @return the converted references"}
{"ID": 1462, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private BeanReferences[] convertAnnValueToReferences(String value) { if (value == null) { return null; } value = value.trim(); if (value.length() == 0) { return null; } String[] refNames = Converter.get().toStringArray(value); BeanReferences[] references = new BeanReferences[refNames.length]; for (int i = 0; i < refNames.length; i++) { references[i] = BeanReferences.of(refNames[i].trim()); } return references; }. ### Assistant:", "ground_truth": "Converts comma-separated string into array of Bean references.", "predict": "Convert a comma-separated list of names to BeanReferences. @param value the value to convert @return the converted BeanReferences array, or null if the value is null or empty"}
{"ID": 1463, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void runJoy(final Consumer<JoddJoyRuntime> consumer) { final JoddJoy joddJoy = new JoddJoy(); final JoddJoyRuntime joyRuntime = joddJoy.startOnlyBackend(); joddJoy.withDb(joyDb -> setJtxManager(joyRuntime.getJtxManager())); final JtxTransaction tx = startRwTx(); final Print print = new Print(); try { print.line(\"START\", 80); print.newLine(); consumer.accept(joyRuntime); print.newLine(); print.line(\"END\", 80); if (tx != null) { tx.commit(); } } catch (Throwable throwable) { throwable.printStackTrace(); if (tx != null) { tx.rollback(); } } joddJoy.stop(); }. ### Assistant:", "ground_truth": "Runs JOY in standalone mode, with only backend.", "predict": "Run Joy with JtxManager. @param consumer Joy consumer"}
{"ID": 1464, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Method findMethod(final Class c, final String methodName) { return findDeclaredMethod(c, methodName, true); }. ### Assistant:", "ground_truth": "Returns method from an object, matched by name. This may be considered as\na slow operation, since methods are matched one by one.\nReturns only accessible methods.\nOnly first method is matched.\n\n@param c          class to examine\n@param methodName Full name of the method.\n@return null if method not found", "predict": "Finds a method by name in the class hierarchy. The method is searched recursively. @param c The class to search in. @param methodName The name of the method to find. @return The method, or null if not found."}
{"ID": 1465, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <T> Constructor<T> findConstructor(final Class<T> clazz, final Class<?>... parameterTypes) { final Constructor<?>[] constructors = clazz.getConstructors(); Class<?>[] pts; for (Constructor<?> constructor : constructors) { pts = constructor.getParameterTypes(); if (isAllAssignableFrom(pts, parameterTypes)) { return (Constructor<T>) constructor; } } return null; }. ### Assistant:", "ground_truth": "Finds constructor with given parameter types. First matched ctor is returned.", "predict": "Find a constructor that takes the given parameter types. @param clazz the class to find a constructor for @param parameterTypes the types of the constructor's parameters @return the constructor or null if none found"}
{"ID": 1466, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Class[] resolveAllInterfaces(final Class type) { Set<Class> bag = new LinkedHashSet<>(); _resolveAllInterfaces(type, bag); return bag.toArray(new Class[0]); }. ### Assistant:", "ground_truth": "Resolves all interfaces of a type. No duplicates are returned.\nDirect interfaces are prior the interfaces of subclasses in\nthe returned array.", "predict": "Resolve all interfaces of a class. @param type the class to resolve interfaces of @return the interfaces of the class"}
{"ID": 1467, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean compareParameters(final Class[] first, final Class[] second) { if (first.length != second.length) { return false; } for (int i = 0; i < first.length; i++) { if (first[i] != second[i]) { return false; } } return true; }. ### Assistant:", "ground_truth": "Compares classes, usually method or ctor parameters.", "predict": "Compare two arrays of classes. The comparison is done by comparing the class names. If the class names are different, the comparison fails. @param first First array of classes. @param second Second array of classes. @return True if the arrays are equal, false otherwise."}
{"ID": 1468, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void forceAccess(final AccessibleObject accObject) { try { if (System.getSecurityManager() == null) accObject.setAccessible(true); else { AccessController.doPrivileged((PrivilegedAction) () -> { accObject.setAccessible(true); return null; }); } } catch (SecurityException sex) { // ignore } }. ### Assistant:", "ground_truth": "Suppress access check against a reflection object. SecurityException is silently ignored.\nChecks first if the object is already accessible.", "predict": "Forces the accessibility of an object. This is useful for testing purposes. @param accObject the object to make accessible."}
{"ID": 1469, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") public static <T> T newInstance(final Class<T> clazz, final Object... params) throws InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException { if (params.length == 0) { return newInstance(clazz); } final Class<?>[] paramTypes = getClasses(params); final Constructor<?> constructor = findConstructor(clazz, paramTypes); if (constructor == null) { throw new InstantiationException(\"No constructor matched parameter types.\"); } return (T) constructor.newInstance(params); }. ### Assistant:", "ground_truth": "Creates new instance of given class with given optional arguments.", "predict": "Creates a new instance of the given class, using the given constructor arguments. If no constructor matches the given arguments, an exception is thrown. If the class has no constructors, an exception is thrown. @param clazz the class to instantiate @param params the constructor arguments @return a new instance of the given class @throws InstantiationException if no constructor matches the given arguments @throws IllegalAccessException if a constructor cannot be accessed @throws InvocationTargetException if a constructor cannot be invoked @throws NoSuchMethodException if a constructor cannot be found"}
{"ID": 1470, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Class[] getSuperclasses(final Class type) { int i = 0; for (Class x = type.getSuperclass(); x != null; x = x.getSuperclass()) { i++; } Class[] result = new Class[i]; i = 0; for (Class x = type.getSuperclass(); x != null; x = x.getSuperclass()) { result[i] = x; i++; } return result; }. ### Assistant:", "ground_truth": "Returns all superclasses.", "predict": "Returns the superclasses of the given class. @param type the class to get the superclasses of @return the superclasses of the given class"}
{"ID": 1471, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Class<?> childClassOf(final Class<?> parentClass, final Object instance) { if (instance == null || instance == Object.class) { return null; } if (parentClass != null) { if (parentClass.isInterface()) { return null; } } Class<?> childClass = instance.getClass(); while (true) { Class<?> parent = childClass.getSuperclass(); if (parent == parentClass) { return childClass; } if (parent == null) { return null; } childClass = parent; } }. ### Assistant:", "ground_truth": "Returns the class of the immediate subclass of the given parent class for\nthe given object instance; or null if such immediate subclass cannot be\nuniquely identified for the given object instance.", "predict": "Finds the child class of a parent class. If the parent class is an interface, returns null. If the parent class is null, returns null. If the parent class is Object, returns null. If the parent class is not an interface, returns the child class. If the parent class is Object, returns the child class. If the parent class is an interface, returns the child class. If the parent class is not an interface, returns the child class. If the parent class is not an interface, returns the child class. If the parent class is not an interface, returns the child class. If the parent class is not an interface, returns the child class. If the parent class is not an interface, returns the child class. If the parent class is not an interface, returns the child class. If the parent class is not an interface, returns the child class. If the parent class is not an interface, returns the child class. If the parent class is not an interface, returns the child class. If the parent class is not an interface, returns"}
{"ID": 1472, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static JarFile jarFileOf(final Class<?> klass) { URL url = klass.getResource( \"/\" + klass.getName().replace('.', '/') + \".class\"); if (url == null) { return null; } String s = url.getFile(); int beginIndex = s.indexOf(\"file:\") + \"file:\".length(); int endIndex = s.indexOf(\".jar!\"); if (endIndex == -1) { return null; } endIndex += \".jar\".length(); String f = s.substring(beginIndex, endIndex); // decode URL string - it may contain encoded chars (e.g. whitespaces) which are not supported for file-instances f = URLDecoder.decode(f, \"UTF-8\"); File file = new File(f); try { return file.exists() ? new JarFile(file) : null; } catch (IOException e) { throw new IllegalStateException(e); } }. ### Assistant:", "ground_truth": "Returns the jar file from which the given class is loaded; or null\nif no such jar file can be located.", "predict": "Create a JarFile from a classpath resource. The classpath resource is assumed to be a JAR file. @param klass the class whose classpath resource should be used to create the JarFile @return the JarFile, or null if the resource could not be found"}
{"ID": 1473, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void sleep(final long ms) { try { Thread.sleep(ms); } catch (InterruptedException iex) { Thread.currentThread().interrupt(); } }. ### Assistant:", "ground_truth": "Puts a thread to sleep, without throwing an InterruptedException.\n\n@param ms     the length of time to sleep in milliseconds", "predict": "Sleep for a given number of milliseconds. @param ms Milliseconds to sleep."}
{"ID": 1474, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void sleep() { try { Thread.sleep(Long.MAX_VALUE); } catch (InterruptedException iex) { Thread.currentThread().interrupt(); } }. ### Assistant:", "ground_truth": "Puts a thread to sleep forever.", "predict": "Sleep for an indeterminate amount of time. This is useful for waiting for a long running task to complete."}
{"ID": 1475, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void wait(final Object obj) { synchronized (obj) { try { obj.wait(); } catch (InterruptedException inex) { Thread.currentThread().interrupt(); } } }. ### Assistant:", "ground_truth": "Waits for a object for synchronization purposes.", "predict": "Waits for the object to become available. @param obj Object to wait for."}
{"ID": 1476, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static ThreadFactory daemonThreadFactory(final String name, final int priority) { return new ThreadFactory() { private AtomicInteger count = new AtomicInteger(); @Override public Thread newThread(final Runnable r) { Thread thread = new Thread(r); thread.setName(name + '-' + count.incrementAndGet()); thread.setDaemon(true); thread.setPriority(priority); return thread; } }; }. ### Assistant:", "ground_truth": "Creates new daemon thread factory.", "predict": "Creates a daemon thread factory with the given name. The factory creates threads with priority 0. @param name the name of the factory. @param priority the priority of the threads. @return the thread factory."}
{"ID": 1477, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public T get() { if (!initialized) { synchronized (this) { if (!initialized) { final T t = supplier.get(); value = t; initialized = true; supplier = null; return t; } } } return value; }. ### Assistant:", "ground_truth": "Returns the value. Value will be computed on first call.", "predict": "Get the value from the supplier. If the supplier is not yet initialized, it will be done by acquiring the lock. @return the value from the supplier."}
{"ID": 1478, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void visitParameter(final String name, final int access) { if (api < Opcodes.ASM5) { throw new UnsupportedOperationException(REQUIRES_ASM5); } if (mv != null) { mv.visitParameter(name, access); } }. ### Assistant:", "ground_truth": "Visits a parameter of this method.\n\n@param name parameter name or null if none is provided.\n@param access the parameter's access flags, only {@code ACC_FINAL}, {@code ACC_SYNTHETIC}\nor/and {@code ACC_MANDATED} are allowed (see {@link Opcodes}).", "predict": "Visits a parameter. @param name the name of the parameter. @param access the access level of the parameter."}
{"ID": 1479, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) { if (mv != null) { return mv.visitAnnotation(descriptor, visible); } return null; }. ### Assistant:", "ground_truth": "Visits an annotation of this method.\n\n@param descriptor the class descriptor of the annotation class.\n@param visible {@literal true} if the annotation is visible at runtime.\n@return a visitor to visit the annotation values, or {@literal null} if this visitor is not\ninterested in visiting this annotation.", "predict": "Visits an annotation of the class file. @param descriptor the type descriptor of the annotation. @param visible whether the annotation is visible to the compiler."}
{"ID": 1480, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public AnnotationVisitor visitTypeAnnotation( final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) { if (api < Opcodes.ASM5) { throw new UnsupportedOperationException(REQUIRES_ASM5); } if (mv != null) { return mv.visitTypeAnnotation(typeRef, typePath, descriptor, visible); } return null; }. ### Assistant:", "ground_truth": "Visits an annotation on a type in the method signature.\n\n@param typeRef a reference to the annotated type. The sort of this type reference must be\n{@link TypeReference#METHOD_TYPE_PARAMETER}, {@link\nTypeReference#METHOD_TYPE_PARAMETER_BOUND}, {@link TypeReference#METHOD_RETURN}, {@link\nTypeReference#METHOD_RECEIVER}, {@link TypeReference#METHOD_FORMAL_PARAMETER} or {@link\nTypeReference#THROWS}. See {@link TypeReference}.\n@param typePath the path to the annotated type argument, wildcard bound, array element type, or\nstatic inner type within 'typeRef'. May be {@literal null} if the annotation targets\n'typeRef' as a whole.\n@param descriptor the class descriptor of the annotation class.\n@param visible {@literal true} if the annotation is visible at runtime.\n@return a visitor to visit the annotation values, or {@literal null} if this visitor is not\ninterested in visiting this annotation.", "predict": "Visits a type annotation. @param typeRef a reference to the annotated type. @param typePath the path to the annotated type. @param descriptor the type annotation's descriptor. @param visible whether the type annotation is visible or not. @return an annotation visitor to which the visited type annotation must be visited."}
{"ID": 1481, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public AnnotationVisitor visitParameterAnnotation( final int parameter, final String descriptor, final boolean visible) { if (mv != null) { return mv.visitParameterAnnotation(parameter, descriptor, visible); } return null; }. ### Assistant:", "ground_truth": "Visits an annotation of a parameter this method.\n\n@param parameter the parameter index. This index must be strictly smaller than the number of\nparameters in the method descriptor, and strictly smaller than the parameter count\nspecified in {@link #visitAnnotableParameterCount}. Important note: <i>a parameter index i\nis not required to correspond to the i'th parameter descriptor in the method\ndescriptor</i>, in particular in case of synthetic parameters (see\nhttps://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.18).\n@param descriptor the class descriptor of the annotation class.\n@param visible {@literal true} if the annotation is visible at runtime.\n@return a visitor to visit the annotation values, or {@literal null} if this visitor is not\ninterested in visiting this annotation.", "predict": "Visits a parameter of an annotation. @param parameter index of the parameter. @param descriptor descriptor of the annotation. @param visible if visible. @return the visitor to be used for the visit of the next element."}
{"ID": 1482, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void visitFieldInsn( final int opcode, final String owner, final String name, final String descriptor) { if (mv != null) { mv.visitFieldInsn(opcode, owner, name, descriptor); } }. ### Assistant:", "ground_truth": "Visits a field instruction. A field instruction is an instruction that loads or stores the\nvalue of a field of an object.\n\n@param opcode the opcode of the type instruction to be visited. This opcode is either\nGETSTATIC, PUTSTATIC, GETFIELD or PUTFIELD.\n@param owner the internal name of the field's owner class (see {@link Type#getInternalName()}).\n@param name the field's name.\n@param descriptor the field's descriptor (see {@link Type}).", "predict": "Visits a field instruction. @param opcode the opcode of the type instruction. @param owner the internal name of the field\u2019s owner class. @param name the name of the field. @param descriptor the descriptor of the field\u2019s type."}
{"ID": 1483, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void visitMethodInsn( final int opcode, final String owner, final String name, final String descriptor, final boolean isInterface) { if (api < Opcodes.ASM5) { if (isInterface != (opcode == Opcodes.INVOKEINTERFACE)) { throw new IllegalArgumentException(\"INVOKESPECIAL/STATIC on interfaces requires ASM5\"); } visitMethodInsn(opcode, owner, name, descriptor); return; } if (mv != null) { mv.visitMethodInsn(opcode, owner, name, descriptor, isInterface); } }. ### Assistant:", "ground_truth": "Visits a method instruction. A method instruction is an instruction that invokes a method.\n\n@param opcode the opcode of the type instruction to be visited. This opcode is either\nINVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or INVOKEINTERFACE.\n@param owner the internal name of the method's owner class (see {@link\nType#getInternalName()}).\n@param name the method's name.\n@param descriptor the method's descriptor (see {@link Type}).\n@param isInterface if the method's owner class is an interface.", "predict": "Visits a MethodInsn instruction. @param opcode the opcode of the instruction. @param owner the internal name of the owner of the method being invoked. @param name the name of the method being invoked. @param descriptor the descriptor of the method being invoked. @param isInterface a boolean value indicating if the method being invoked is an interface method."}
{"ID": 1484, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void visitInvokeDynamicInsn( final String name, final String descriptor, final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) { if (api < Opcodes.ASM5) { throw new UnsupportedOperationException(REQUIRES_ASM5); } if (mv != null) { mv.visitInvokeDynamicInsn(name, descriptor, bootstrapMethodHandle, bootstrapMethodArguments); } }. ### Assistant:", "ground_truth": "Visits an invokedynamic instruction.\n\n@param name the method's name.\n@param descriptor the method's descriptor (see {@link Type}).\n@param bootstrapMethodHandle the bootstrap method.\n@param bootstrapMethodArguments the bootstrap method constant arguments. Each argument must be\nan {@link Integer}, {@link Float}, {@link Long}, {@link Double}, {@link String}, {@link\nType}, {@link Handle} or {@link ConstantDynamic} value. This method is allowed to modify\nthe content of the array so a caller should expect that this array may change.", "predict": "Visits an invoke dynamic instruction. @param name the name of the bootstrap method. @param descriptor the descriptor of the bootstrap method. @param bootstrapMethodHandle the bootstrap method handle. @param bootstrapMethodArguments the bootstrap method arguments."}
{"ID": 1485, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void visitJumpInsn(final int opcode, final Label label) { if (mv != null) { mv.visitJumpInsn(opcode, label); } }. ### Assistant:", "ground_truth": "Visits a jump instruction. A jump instruction is an instruction that may jump to another\ninstruction.\n\n@param opcode the opcode of the type instruction to be visited. This opcode is either IFEQ,\nIFNE, IFLT, IFGE, IFGT, IFLE, IF_ICMPEQ, IF_ICMPNE, IF_ICMPLT, IF_ICMPGE, IF_ICMPGT,\nIF_ICMPLE, IF_ACMPEQ, IF_ACMPNE, GOTO, JSR, IFNULL or IFNONNULL.\n@param label the operand of the instruction to be visited. This operand is a label that\ndesignates the instruction to which the jump instruction may jump.", "predict": "Visits a jump instruction. @param opcode the opcode of the instruction. @param label a Label object that represents the operand of the instruction."}
{"ID": 1486, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void visitMultiANewArrayInsn(final String descriptor, final int numDimensions) { if (mv != null) { mv.visitMultiANewArrayInsn(descriptor, numDimensions); } }. ### Assistant:", "ground_truth": "Visits a MULTIANEWARRAY instruction.\n\n@param descriptor an array type descriptor (see {@link Type}).\n@param numDimensions the number of dimensions of the array to allocate.", "predict": "Visits a new array instruction. @param descriptor the descriptor of the type to allocate. @param numDimensions the number of dimensions of the array to allocate."}
{"ID": 1487, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void visitTryCatchBlock( final Label start, final Label end, final Label handler, final String type) { if (mv != null) { mv.visitTryCatchBlock(start, end, handler, type); } }. ### Assistant:", "ground_truth": "Visits a try catch block.\n\n@param start the beginning of the exception handler's scope (inclusive).\n@param end the end of the exception handler's scope (exclusive).\n@param handler the beginning of the exception handler's code.\n@param type the internal name of the type of exceptions handled by the handler, or {@literal\nnull} to catch any exceptions (for \"finally\" blocks).\n@throws IllegalArgumentException if one of the labels has already been visited by this visitor\n(by the {@link #visitLabel} method).", "predict": "Visits a try-catch block. @param start the start label of the try block @param end the end label of the try block @param handler the exception handler label @param type the type of the exception caught"}
{"ID": 1488, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public AnnotationVisitor visitLocalVariableAnnotation( final int typeRef, final TypePath typePath, final Label[] start, final Label[] end, final int[] index, final String descriptor, final boolean visible) { if (api < Opcodes.ASM5) { throw new UnsupportedOperationException(REQUIRES_ASM5); } if (mv != null) { return mv.visitLocalVariableAnnotation( typeRef, typePath, start, end, index, descriptor, visible); } return null; }. ### Assistant:", "ground_truth": "Visits an annotation on a local variable type.\n\n@param typeRef a reference to the annotated type. The sort of this type reference must be\n{@link TypeReference#LOCAL_VARIABLE} or {@link TypeReference#RESOURCE_VARIABLE}. See {@link\nTypeReference}.\n@param typePath the path to the annotated type argument, wildcard bound, array element type, or\nstatic inner type within 'typeRef'. May be {@literal null} if the annotation targets\n'typeRef' as a whole.\n@param start the fist instructions corresponding to the continuous ranges that make the scope\nof this local variable (inclusive).\n@param end the last instructions corresponding to the continuous ranges that make the scope of\nthis local variable (exclusive). This array must have the same size as the 'start' array.\n@param index the local variable's index in each range. This array must have the same size as\nthe 'start' array.\n@param descriptor the class descriptor of the annotation class.\n@param visible {@literal true} if the annotation is visible at runtime.\n@return a visitor to visit the annotation values, or {@literal null} if this visitor is not\ninterested in visiting this annotation.", "predict": "Visits a local variable annotation. @param typeRef a reference to the annotated type. @param typePath the path to the annotated type. @param start the start of the annotation. @param end the end of the annotation. @param index the index of the local variable. @param descriptor the descriptor of the annotation. @param visible whether the annotation is visible from the current code. @return a visitor to visit the annotation children."}
{"ID": 1489, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: void convertToWriter(final Writer writer, final Properties properties, final Map<String, Properties> profiles) throws IOException { final BufferedWriter bw = getBufferedWriter(writer); writeBaseAndProfileProperties(bw, properties, profiles); writeProfilePropertiesThatAreNotInTheBase(bw, properties, profiles); bw.flush(); }. ### Assistant:", "ground_truth": "Convert Java Properties to Jodd Props format\n\n@param writer     Writer to write Props formatted file content to\n@param properties Properties to convert to Props format\n@param profiles   Properties per profile to convert and add to the Props format\n@throws IOException On any I/O error when writing to the writer", "predict": "Converts the properties to a writer. @param writer the writer to write the properties to. @param properties the properties to convert. @param profiles the profiles to convert. @throws IOException if an error occurs during conversion."}
{"ID": 1490, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void processStream() throws IOException { FastByteArrayOutputStream out = new FastByteArrayOutputStream(); size = 0; if (maxFileSize == -1) { size += input.copyAll(out); } else { size += input.copyMax(out, maxFileSize + 1); // one more byte to detect larger files if (size > maxFileSize) { fileTooBig = true; valid = false; input.skipToBoundary(); return; } } data = out.toByteArray(); size = data.length; valid = true; }. ### Assistant:", "ground_truth": "Reads data from input stream into byte array and stores file size.", "predict": "Reads the entire file into memory and checks whether it is too big."}
{"ID": 1491, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public T next() { if (hasNext == null) { hasNext = Boolean.valueOf(moveToNext()); } if (hasNext == false) { throw new NoSuchElementException(); } if (!entityAwareMode) { hasNext = null; return newElement; } count++; T result = previousElement; previousElement = newElement; hasNext = null; return result; }. ### Assistant:", "ground_truth": "Returns next mapped object.", "predict": "Returns the next element of the iterator. If the end of the sequence is reached, a NoSuchElementException is thrown. @return the next element of the sequence."}
{"ID": 1492, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private boolean moveToNext() { if (last) { // last has been set to true, so no more rows to iterate - close everything if (closeOnEnd) { query.close(); } else { query.closeResultSet(resultSetMapper.getResultSet()); } return false; } while (true) { if (!resultSetMapper.next()) { // no more rows, no more parsing, previousElement is the last one to iterate last = true; return entityAwareMode; } // parse row Object[] objects = resultSetMapper.parseObjects(types); Object row = query.resolveRowResults(objects); newElement = (T) row; if (entityAwareMode) { if (count == 0 && previousElement == null) { previousElement = newElement; continue; } if (previousElement != null && newElement != null) { boolean equals; if (newElement.getClass().isArray()) { equals = Arrays.equals((Object[]) previousElement, (Object[]) newElement); } else { equals = previousElement.equals(newElement); } if (equals) { continue; } } } break; } return true; }. ### Assistant:", "ground_truth": "Moves to next element.", "predict": "Move to the next row. @return true if there is more rows to iterate, false if there is no more rows to iterate."}
{"ID": 1493, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings({\"unchecked\"}) public static <T> T[] join(T[]... arrays) { Class<T> componentType = (Class<T>) arrays.getClass().getComponentType().getComponentType(); return join(componentType, arrays); }. ### Assistant:", "ground_truth": "Joins arrays. Component type is resolved from the array argument.", "predict": "Join arrays. @param arrays the arrays to join @return the joined array"}
{"ID": 1494, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings({\"unchecked\"}) public static <T> T[] join(Class<T> componentType, T[][] arrays) { if (arrays.length == 1) { return arrays[0]; } int length = 0; for (T[] array : arrays) { length += array.length; } T[] result = (T[]) Array.newInstance(componentType, length); length = 0; for (T[] array : arrays) { System.arraycopy(array, 0, result, length, array.length); length += array.length; } return result; }. ### Assistant:", "ground_truth": "Joins arrays using provided component type.", "predict": "Join two arrays into a single array. The arrays must have the same component type. The resulting array will have twice the length of the longest array. @param componentType the type of the array elements @param arrays the arrays to join @return the joined array"}
{"ID": 1495, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <T> T[] resize(T[] buffer, int newSize) { Class<T> componentType = (Class<T>) buffer.getClass().getComponentType(); T[] temp = (T[]) Array.newInstance(componentType, newSize); System.arraycopy(buffer, 0, temp, 0, buffer.length >= newSize ? newSize : buffer.length); return temp; }. ### Assistant:", "ground_truth": "Resizes an array.", "predict": "Resize an array. @param buffer the array to resize. @param newSize the new size of the array. @param <T> the type of the array. @return the resized array."}
{"ID": 1496, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <T> T[] append(T[] buffer, T newElement) { T[] t = resize(buffer, buffer.length + 1); t[buffer.length] = newElement; return t; }. ### Assistant:", "ground_truth": "Appends an element to array.", "predict": "Append a new element to the end of an array. If the array is too small, it will be resized. @param buffer the array to append to. @param newElement the element to append. @return the new array with the new element appended."}
{"ID": 1497, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings({\"unchecked\"}) public static <T> T[] remove(T[] buffer, int offset, int length, Class<T> componentType) { int len2 = buffer.length - length; T[] temp = (T[]) Array.newInstance(componentType, len2); System.arraycopy(buffer, 0, temp, 0, offset); System.arraycopy(buffer, offset + length, temp, offset, len2 - offset); return temp; }. ### Assistant:", "ground_truth": "Removes sub-array.", "predict": "Remove elements from the beginning of the buffer. @param buffer the buffer to remove elements from. @param offset the offset to start removing elements from. @param length the number of elements to remove. @param componentType the type of the elements in the buffer. @return the modified buffer."}
{"ID": 1498, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int indexOf(char[] array, char value) { for (int i = 0; i < array.length; i++) { if (array[i] == value) { return i; } } return -1; }. ### Assistant:", "ground_truth": "Finds the first occurrence of an element in an array.", "predict": "Find the index of a character in an array. @param array The array to search in. @param value The value to search for. @return The index of the character in the array, or -1 if not found."}
{"ID": 1499, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int indexOf(Object[] array, Object value) { for (int i = 0; i < array.length; i++) { if (array[i].equals(value)) { return i; } } return -1; }. ### Assistant:", "ground_truth": "Finds the first occurrence in an array.", "predict": "Finds the index of the first occurrence of the specified object in the specified array. Returns -1 if the object is not found. @param array the array to search. @param value the object to search for. @return the index of the first occurrence of the specified object in the specified array, or -1 if the object is not found."}
{"ID": 1500, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int indexOf(byte[] array, byte[] sub, int startIndex) { return indexOf(array, sub, startIndex, array.length); }. ### Assistant:", "ground_truth": "Finds the first occurrence in an array from specified given position.", "predict": "Finds the index of the first occurrence of the specified subarray within the specified range of the original array. The original array must be greater than or equal to the starting index and less than the ending index. If the original array is smaller than the ending index, the method will return a negative value. The original array must be a valid array with a non-negative length. If the specified subarray is not present in the original array, the method returns a negative value. @param array the original array. @param sub the subarray to search for. @param startIndex the starting index of the original array. @return the index of the first occurrence of the specified subarray within the specified range of the original array, or a negative value if the original array is smaller than the ending index. @throws IllegalArgumentException if the original array is invalid or the specified subarray is not present in the original array."}
{"ID": 1501, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public LagartoDOMBuilder enableXhtmlMode() { config.ignoreWhitespacesBetweenTags = false; // collect all whitespaces config.setCaseSensitive(true); // XHTML is case sensitive config.setEnableRawTextModes(false); // all tags are parsed in the same way config.enabledVoidTags = true; // list of void tags config.selfCloseVoidTags = true; // self close void tags config.impliedEndTags = false; // no implied tag ends config.setEnableConditionalComments(false); // don't enable IE conditional comments config.setParseXmlTags(false); // enable XML mode in parsing return this; }. ### Assistant:", "ground_truth": "Enables XHTML mode.", "predict": "Enable XHTML mode. This mode is used when the document is served as XHTML. In this mode, the document is parsed as XML, and whitespaces are ignored. This mode is not compatible with HTML5, and it is not recommended to use it in practice. @return this builder instance."}
{"ID": 1502, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public Document parse(final char[] content) { LagartoParser lagartoParser = new LagartoParser(content); return doParse(lagartoParser); }. ### Assistant:", "ground_truth": "Creates DOM tree from provided content.", "predict": "Parse the content using the Lagarto engine. @param content the content to parse. @return the parsed document."}
{"ID": 1503, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Document doParse(final LagartoParser lagartoParser) { lagartoParser.setConfig(config); LagartoDOMBuilderTagVisitor domBuilderTagVisitor = new LagartoDOMBuilderTagVisitor(this); lagartoParser.parse(domBuilderTagVisitor); return domBuilderTagVisitor.getDocument(); }. ### Assistant:", "ground_truth": "Parses the content using provided lagarto parser.", "predict": "Parse the HTML content using the Lagarto parser. The document returned is a DOM document. @param lagartoParser the parser to use. @return the resulting DOM document."}
{"ID": 1504, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void endCurrentBasicBlockWithNoSuccessor() { if (compute == COMPUTE_ALL_FRAMES) { Label nextBasicBlock = new Label(); nextBasicBlock.frame = new Frame(nextBasicBlock); nextBasicBlock.resolve(code.data, code.length); lastBasicBlock.nextBasicBlock = nextBasicBlock; lastBasicBlock = nextBasicBlock; currentBasicBlock = null; } else if (compute == COMPUTE_MAX_STACK_AND_LOCAL) { currentBasicBlock.outputStackMax = (short) maxRelativeStackSize; currentBasicBlock = null; } }. ### Assistant:", "ground_truth": "Ends the current basic block. This method must be used in the case where the current basic\nblock does not have any successor.\n\n<p>WARNING: this method must be called after the currently visited instruction has been put in\n{@link #code} (if frames are computed, this method inserts a new Label to start a new basic\nblock after the current instruction).", "predict": "End current basic block with no successor."}
{"ID": 1505, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: final void collectAttributePrototypes(final Attribute.Set attributePrototypes) { attributePrototypes.addAttributes(firstAttribute); attributePrototypes.addAttributes(firstCodeAttribute); }. ### Assistant:", "ground_truth": "Collects the attributes of this method into the given set of attribute prototypes.\n\n@param attributePrototypes a set of attribute prototypes.", "predict": "Collect the attribute prototypes. @param attributePrototypes the attribute prototypes to collect"}
{"ID": 1506, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void injectContext(final Object targetObject) { final Class targetType = targetObject.getClass(); final ScopeData scopeData = scopeDataInspector.inspectClassScopesWithCache(targetType); final Targets targets = new Targets(targetObject, scopeData); // inject no context scopeResolver.forEachScope(madvocScope -> madvocScope.inject(targets)); // inject special case scopeResolver.forScope(ParamsScope.class, scope -> scope.inject(targets)); // inject servlet context final ServletContext servletContext = madvocController.getApplicationContext(); if (servletContext != null) { scopeResolver.forEachScope(madvocScope -> madvocScope.inject(servletContext, targets)); } }. ### Assistant:", "ground_truth": "Inject context into target.", "predict": "Injects the context into the target object. The context is injected into the target object using the scope resolver. The context is injected into the following scopes: - the application context (if available) - the request scope - the session scope - the application scope (if available) The context is injected into the following scopes: - the application context (if available) - the request scope - the session scope - the application scope (if available) @param targetObject the target object to inject the context into."}
{"ID": 1507, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void registerPseudoClass(final Class<? extends PseudoClass> pseudoClassType) { PseudoClass pseudoClass; try { pseudoClass = ClassUtil.newInstance(pseudoClassType); } catch (Exception ex) { throw new CSSellyException(ex); } PSEUDO_CLASS_MAP.put(pseudoClass.getPseudoClassName(), pseudoClass); }. ### Assistant:", "ground_truth": "Registers pseudo class.", "predict": "Registers a PseudoClass with its class. @param pseudoClassType the PseudoClass class to register."}
{"ID": 1508, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static PseudoClass lookupPseudoClass(final String pseudoClassName) { PseudoClass pseudoClass = PSEUDO_CLASS_MAP.get(pseudoClassName); if (pseudoClass == null) { throw new CSSellyException(\"Unsupported pseudo class: \" + pseudoClassName); } return pseudoClass; }. ### Assistant:", "ground_truth": "Lookups pseudo class for given pseudo class name.", "predict": "Lookup a PseudoClass by its name. If it's not found, throw an exception. @param pseudoClassName the PseudoClass name @return the PseudoClass"}
{"ID": 1509, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void invoke(final ActionRequest actionRequest) { if (executorService == null) { throw new MadvocException(\"No action is marked as async!\"); } final HttpServletRequest servletRequest = actionRequest.getHttpServletRequest(); log.debug(() -> \"Async call to: \" + actionRequest); final AsyncContext asyncContext = servletRequest.startAsync(); executorService.submit(() -> { try { actionRequest.invoke(); } catch (Exception ex) { log.error(\"Invoking async action path failed: \" , ExceptionUtil.unwrapThrowable(ex)); } finally { asyncContext.complete(); } }); }. ### Assistant:", "ground_truth": "Invokes an action asynchronously by submitting it to the thread pool.", "predict": "Invokes the action asynchronously. @param actionRequest the action request to invoke."}
{"ID": 1510, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String[] getAllBeanPropertyNames(final Class type, final boolean declared) { ClassDescriptor classDescriptor = ClassIntrospector.get().lookup(type); PropertyDescriptor[] propertyDescriptors = classDescriptor.getAllPropertyDescriptors(); ArrayList<String> names = new ArrayList<>(propertyDescriptors.length); for (PropertyDescriptor propertyDescriptor : propertyDescriptors) { MethodDescriptor getter = propertyDescriptor.getReadMethodDescriptor(); if (getter != null) { if (getter.matchDeclared(declared)) { names.add(propertyDescriptor.getName()); } } else if (includeFields) { FieldDescriptor field = propertyDescriptor.getFieldDescriptor(); if (field != null) { if (field.matchDeclared(declared)) { names.add(field.getName()); } } } } return names.toArray(new String[0]); }. ### Assistant:", "ground_truth": "Returns all bean property names.", "predict": "Get all property names of the given class. @param type the class to introspect @param declared whether the property should be declared or not @return the property names"}
{"ID": 1511, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void visit() { String[] properties = resolveProperties(source, declared); for (String name : properties) { if (name == null) { continue; } if (!rules.match(name, blacklist)) { continue; } Object value; String propertyName = name; if (isSourceMap) { propertyName = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET; } if (declared) { value = BeanUtil.declared.getProperty(source, propertyName); } else { value = BeanUtil.pojo.getProperty(source, propertyName); } if (value == null && ignoreNullValues) { continue; } if (value instanceof String && StringUtil.isEmpty((String) value)) { continue; } visitProperty(name, value); } }. ### Assistant:", "ground_truth": "Starts visiting properties.", "predict": "Visit all properties in the source object."}
{"ID": 1512, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public boolean accept(final String propertyName, final String rule, final boolean include) { return propertyName.equals(rule); }. ### Assistant:", "ground_truth": "Compares property name to the rules.", "predict": "Accepts rules. @param propertyName the property name @param rule the rule @param include whether to include the rule or not @return true if the rule is accepted"}
{"ID": 1513, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public MethodInjectionPoint[] resolve(final Class type) { // lookup methods ClassDescriptor cd = ClassIntrospector.get().lookup(type); List<MethodInjectionPoint> list = new ArrayList<>(); MethodDescriptor[] allMethods = cd.getAllMethodDescriptors(); for (MethodDescriptor methodDescriptor : allMethods) { Method method = methodDescriptor.getMethod(); if (ClassUtil.isBeanPropertySetter(method)) { // ignore setters continue; } if (method.getParameterTypes().length == 0) { // ignore methods with no argument continue; } BeanReferences[] references = referencesResolver.readAllReferencesFromAnnotation(method); if (references != null) { MethodInjectionPoint methodInjectionPoint = new MethodInjectionPoint(method, references); list.add(methodInjectionPoint); } } final MethodInjectionPoint[] methodInjectionPoints; if (list.isEmpty()) { methodInjectionPoints = MethodInjectionPoint.EMPTY; } else { methodInjectionPoints = list.toArray(new MethodInjectionPoint[0]); } return methodInjectionPoints; }. ### Assistant:", "ground_truth": "Resolve method injection points in given class.", "predict": "Resolves all method injection points for the given class. @param type the class to inspect @return the method injection points for the given class"}
{"ID": 1514, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void readFilterConfigParameters(final FilterConfig filterConfig, final Object target, final String... parameters) { for (String parameter : parameters) { String value = filterConfig.getInitParameter(parameter); if (value != null) { BeanUtil.declared.setProperty(target, parameter, value); } } }. ### Assistant:", "ground_truth": "Reads filter config parameters and set into destination target.", "predict": "Reads the filter configuration parameters and sets them on the target object. @param filterConfig the filter configuration @param target the target object @param parameters the parameters to read"}
{"ID": 1515, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void sendBundleFile(final HttpServletResponse resp, final File bundleFile) throws IOException { OutputStream out = resp.getOutputStream(); FileInputStream fileInputStream = new FileInputStream(bundleFile); try { StreamUtil.copy(fileInputStream, out); } finally { StreamUtil.close(fileInputStream); } }. ### Assistant:", "ground_truth": "Outputs bundle file to the response.", "predict": "Send a bundle file to the response. @param resp the response object @param bundleFile the bundle file to send @throws IOException if there is a problem sending the file"}
{"ID": 1516, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public File lookupBundleFile(String bundleId) { if ((mirrors != null) && (!mirrors.isEmpty())) { String realBundleId = mirrors.remove(bundleId); if (realBundleId != null) { bundleId = realBundleId; } } return createBundleFile(bundleId); }. ### Assistant:", "ground_truth": "Lookups for bundle file.", "predict": "Find the bundle file for the given bundleId. If the bundleId is not found, it is added to the mirrors list. @param bundleId the bundleId to look up @return the bundle file for the given bundleId"}
{"ID": 1517, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public File lookupGzipBundleFile(final File file) throws IOException { String path = file.getPath() + ZipUtil.GZIP_EXT; File gzipFile = new File(path); if (!gzipFile.exists()) { if (log.isDebugEnabled()) { log.debug(\"gzip bundle to \" + path); } ZipUtil.gzip(file); } return gzipFile; }. ### Assistant:", "ground_truth": "Locates gzipped version of bundle file. If gzip file\ndoes not exist, it will be created.", "predict": "Lookup the gzip bundle file. If the file does not exist, it will be created. @param file the file to be gzipped @return the gzipped file @throws IOException if an error occurs while creating the gzipped file"}
{"ID": 1518, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public synchronized String registerBundle(final String contextPath, final String actionPath, final String tempBundleId, final String bundleContentType, final List<String> sources) { if (tempBundleId == null || sources.isEmpty()) { if (strategy == Strategy.ACTION_MANAGED) { // page does not include any resource source file actionBundles.put(actionPath, StringPool.EMPTY); } return null; } // create unique digest from the collected sources String[] sourcesArray = sources.toArray(new String[0]); for (int i = 0, sourcesArrayLength = sourcesArray.length; i < sourcesArrayLength; i++) { sourcesArray[i] = sourcesArray[i].trim().toLowerCase(); } if (sortResources) { Arrays.sort(sourcesArray); } StringBand sb = new StringBand(sourcesArray.length); for (String src : sourcesArray) { sb.append(src); } String sourcesString = sb.toString(); String bundleId = createDigest(sourcesString); bundleId += '.' + bundleContentType; // bundle appears for the first time, create the bundle if (strategy == Strategy.ACTION_MANAGED) { actionBundles.put(actionPath, bundleId); mirrors.put(tempBundleId, bundleId); } try { createBundle(contextPath, actionPath, bundleId, sources); } catch (IOException ioex) { throw new HtmlStaplerException(\"Can't create bundle\", ioex); } return bundleId; }. ### Assistant:", "ground_truth": "Registers new bundle that consist of provided list of source paths.\nReturns the real bundle id, as provided one is just a temporary bundle id.", "predict": "Registers a bundle. @param contextPath the context path of the page @param actionPath the action path of the page @param tempBundleId the temporary bundle id @param bundleContentType the content type of the bundle @param sources the sources of the bundle @return the bundle id or null if the bundle was not registered"}
{"ID": 1519, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String createDigest(final String source) { final DigestEngine digestEngine = DigestEngine.sha256(); final byte[] bytes = digestEngine.digest(CharUtil.toSimpleByteArray(source)); String digest = Base32.encode(bytes); if (uniqueDigestKey != null) { digest += uniqueDigestKey; } return digest; }. ### Assistant:", "ground_truth": "Creates digest i.e. bundle id from given string.\nReturned digest must be filename safe, for all platforms.", "predict": "Create a digest of the given source. The digest is Base32 encoded and unique for each source. @param source the source to create a digest for @return the digest of the source"}
{"ID": 1520, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void createBundle(final String contextPath, final String actionPath, final String bundleId, final List<String>sources) throws IOException { final File bundleFile = createBundleFile(bundleId); if (bundleFile.exists()) { return; } StringBand sb = new StringBand(sources.size() * 2); for (String src : sources) { if (sb.length() != 0) { sb.append(StringPool.NEWLINE); } String content; if (isExternalResource(src)) { content = downloadString(src); } else { if (!downloadLocal) { // load local resource from file system String localFile = webRoot; if (src.startsWith(contextPath + '/')) { src = src.substring(contextPath.length()); } if (src.startsWith(StringPool.SLASH)) { // absolute path localFile += src; } else { // relative path localFile += '/' + FileNameUtil.getPathNoEndSeparator(actionPath) + '/' + src; } // trim link parameters, if any int qmndx = localFile.indexOf('?'); if (qmndx != -1) { localFile = localFile.substring(0, qmndx); } try { content = FileUtil.readString(localFile); } catch (IOException ioex) { if (notFoundExceptionEnabled) { throw ioex; } if (log.isWarnEnabled()) { log.warn(ioex.getMessage()); } content = null; } } else { // download local resource String localUrl = localAddressAndPort; if (src.startsWith(StringPool.SLASH)) { localUrl += contextPath + src; } else { localUrl += contextPath + FileNameUtil.getPath(actionPath) + '/' + src; } content = downloadString(localUrl); } if (content != null) { if (isCssResource(src)) { content = fixCssRelativeUrls(content, src); } } } if (content != null) { content = onResourceContent(content); sb.append(content); } } FileUtil.writeString(bundleFile, sb.toString()); if (log.isInfoEnabled()) { log.info(\"Bundle created: \" + bundleId); } }. ### Assistant:", "ground_truth": "Creates bundle file by loading resource files content. If bundle file already\nexist it will not be recreated!", "predict": "Create a bundle file. @param contextPath the context path @param actionPath the action path @param bundleId the bundle id @param sources the sources @throws IOException if failed to create the bundle file"}
{"ID": 1521, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public synchronized void reset() { if (strategy == Strategy.ACTION_MANAGED) { actionBundles.clear(); mirrors.clear(); } final FindFile ff = new FindFile(); ff.includeDirs(false); ff.searchPath(new File(bundleFolder, staplerPath)); File f; int count = 0; while ((f = ff.nextFile()) != null) { f.delete(); count++; } if (log.isInfoEnabled()) { log.info(\"reset: \" + count + \" bundle files deleted.\"); } }. ### Assistant:", "ground_truth": "Clears all settings and removes all created bundle files from file system.", "predict": "Reset the finder. This will delete all the files found by the finder."}
{"ID": 1522, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String fixCssRelativeUrls(final String content, final String src) { final String path = FileNameUtil.getPath(src); final Matcher matcher = CSS_URL_PATTERN.matcher(content); final StringBuilder sb = new StringBuilder(content.length()); int start = 0; while (matcher.find()) { sb.append(content, start, matcher.start()); final String matchedUrl = StringUtil.removeChars(matcher.group(1), \"'\\\"\"); final String url; if (matchedUrl.startsWith(\"https://\") || matchedUrl.startsWith(\"http://\") || matchedUrl.startsWith(\"data:\")) { url = \"url('\" + matchedUrl + \"')\"; } else { url = fixRelativeUrl(matchedUrl, path); } sb.append(url); start = matcher.end(); } sb.append(content.substring(start)); return sb.toString(); }. ### Assistant:", "ground_truth": "Returns the content with all relative URLs fixed.", "predict": "Fixes CSS relative URLs. @param content CSS content. @param src CSS source file path. @return CSS content with fixed URLs."}
{"ID": 1523, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public DbSqlBuilder updateColumn(final Object entity, final String columnRef) { final Object value = BeanUtil.pojo.getProperty(entity, columnRef); return updateColumn(entity, columnRef, value); }. ### Assistant:", "ground_truth": "Reads property value and updates the DB.", "predict": "Update column. @param entity the entity @param columnRef the column ref @return the db sql builder"}
{"ID": 1524, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected static String createTableRefName(final Object entity) { Class type = entity.getClass(); type = (type == Class.class ? (Class) entity : type); return (type.getSimpleName() + '_'); }. ### Assistant:", "ground_truth": "Creates table reference name from entity type.\nAlways appends an underscore to reference name in order\nto circumvent SQL compatibility issues when entity class name\nequals to a reserved word.", "predict": "Create a table reference name. @param entity Entity. @return Table reference name."}
{"ID": 1525, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public DbSession getDbSession() { log.debug(\"Requesting db TX manager session\"); final DbJtxTransaction jtx = (DbJtxTransaction) jtxTxManager.getTransaction(); if (jtx == null) { throw new DbSqlException( \"No transaction is in progress and DbSession can't be provided. \" + \"It seems that transaction manager is not used to begin a transaction.\"); } return jtx.requestResource(); }. ### Assistant:", "ground_truth": "Returns session from JTX transaction manager and started transaction.", "predict": "Get the DbSession associated with the current transaction. @return DbSession associated with the current transaction."}
{"ID": 1526, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected T[] convertToSingleElementArray(final Object value) { T[] singleElementArray = createArray(1); singleElementArray[0] = convertType(value); return singleElementArray; }. ### Assistant:", "ground_truth": "Creates an array with single element.", "predict": "Converts the given value to an array of a single element. The type of the element is inferred from the value. @param value the value to convert @return the converted value"}
{"ID": 1527, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Map<String, String> parseSignatureForGenerics(final String signature, final boolean isInterface) { if (signature == null) { return Collections.emptyMap(); } final Map<String, String> genericsMap = new HashMap<>(); SignatureReader sr = new SignatureReader(signature); StringBuilder sb = new StringBuilder(); TraceSignatureVisitor v = new TraceSignatureVisitor(sb, isInterface) { String genericName; @Override public void visitFormalTypeParameter(final String name) { genericName = name; super.visitFormalTypeParameter(name); } @Override public void visitClassType(final String name) { if (genericName != null) { genericsMap.put(genericName, 'L' + name + ';'); genericName = null; } super.visitClassType(name); } }; sr.accept(v); return genericsMap; }. ### Assistant:", "ground_truth": "Parses signature for generic information and returns a map where key is generic name\nand value is raw type. Returns an empty map if signature does not define any generics.", "predict": "Parse the signature for generics. @param signature the signature to parse. @param isInterface true if the signature is for an interface. @return the generics map."}
{"ID": 1528, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public SetInjectionPoint[] resolve(final Class type, final boolean autowire) { ClassDescriptor cd = ClassIntrospector.get().lookup(type); List<SetInjectionPoint> list = new ArrayList<>(); PropertyDescriptor[] allProperties = cd.getAllPropertyDescriptors(); for (PropertyDescriptor propertyDescriptor : allProperties) { if (propertyDescriptor.isGetterOnly()) { continue; } Class propertyType = propertyDescriptor.getType(); if (!ClassUtil.isTypeOf(propertyType, Collection.class)) { continue; } MethodDescriptor writeMethodDescriptor = propertyDescriptor.getWriteMethodDescriptor(); FieldDescriptor fieldDescriptor = propertyDescriptor.getFieldDescriptor(); PetiteInject ref = null; if (writeMethodDescriptor != null) { ref = writeMethodDescriptor.getMethod().getAnnotation(PetiteInject.class); } if (ref == null && fieldDescriptor != null) { ref = fieldDescriptor.getField().getAnnotation(PetiteInject.class); } if ((!autowire) && (ref == null)) { continue; } list.add(new SetInjectionPoint(propertyDescriptor)); } SetInjectionPoint[] fields; if (list.isEmpty()) { fields = SetInjectionPoint.EMPTY; } else { fields = list.toArray(new SetInjectionPoint[0]); } return fields; }. ### Assistant:", "ground_truth": "Resolves all collections for given type.", "predict": "Find all Set injection points in the class. @param type the class to inspect @param autowire whether or not to autowire the class @return the Set injection points found in the class"}
{"ID": 1529, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean matchIgnoredPropertyTypes(final Class propertyType, final boolean excludeMaps, final boolean include) { if (!include) { return false; } if (propertyType != null) { if (!jsonSerializer.deep) { ClassDescriptor propertyTypeClassDescriptor = ClassIntrospector.get().lookup(propertyType); if (propertyTypeClassDescriptor.isArray()) { return false; } if (propertyTypeClassDescriptor.isCollection()) { return false; } if (excludeMaps) { if (propertyTypeClassDescriptor.isMap()) { return false; } } } // still not excluded, continue with excluded types and type names // + excluded types if (jsonSerializer.excludedTypes != null) { for (Class excludedType : jsonSerializer.excludedTypes) { if (ClassUtil.isTypeOf(propertyType, excludedType)) { return false; } } } // + exclude type names final String propertyTypeName = propertyType.getName(); if (jsonSerializer.excludedTypeNames != null) { for (String excludedTypeName : jsonSerializer.excludedTypeNames) { if (Wildcard.match(propertyTypeName, excludedTypeName)) { return false; } } } } return true; }. ### Assistant:", "ground_truth": "Matches property types that are ignored by default.", "predict": "Determines whether the given property type should be ignored during serialization. @param propertyType the property type to check @param excludeMaps exclude maps from being serialized @param include whether the property type should be included @return true if the property type should be ignored, false otherwise"}
{"ID": 1530, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void openConnectionForQuery() { if (connection == null) { connection = connectionProvider.getConnection(); txActive = false; // txAction should already be false try { connection.setAutoCommit(true); } catch (SQLException sex) { throw new DbSqlException(\"Failed to open non-TX connection\", sex); } } }. ### Assistant:", "ground_truth": "Opens connection in auto-commit mode, if already not opened.", "predict": "Opens a connection for a query. The connection is opened in autocommit mode."}
{"ID": 1531, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void openTx() { if (connection == null) { connection = connectionProvider.getConnection(); } txActive = true; try { connection.setAutoCommit(false); if (txMode.getIsolation() != DbTransactionMode.ISOLATION_DEFAULT) { connection.setTransactionIsolation(txMode.getIsolation()); } connection.setReadOnly(txMode.isReadOnly()); } catch (SQLException sex) { throw new DbSqlException(\"Open TX failed\", sex); } }. ### Assistant:", "ground_truth": "Opens a transaction.", "predict": "Opens a new transaction."}
{"ID": 1532, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void closeTx() { txActive = false; try { connection.setAutoCommit(true); } catch (SQLException sex) { throw new DbSqlException(\"Close TX failed\", sex); } }. ### Assistant:", "ground_truth": "Closes current transaction.", "predict": "Close the transaction."}
{"ID": 1533, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void commitTransaction() { log.debug(\"Committing transaction\"); assertTxIsActive(); try { connection.commit(); } catch (SQLException sex) { throw new DbSqlException(\"Commit TX failed\", sex); } finally { closeTx(); } }. ### Assistant:", "ground_truth": "Commit the current transaction, writing any unflushed changes to the database.\nTransaction mode is closed.", "predict": "Commit the current transaction."}
{"ID": 1534, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void rollbackTransaction() { log.debug(\"Rolling-back transaction\"); assertTxIsActive(); try { connection.rollback(); } catch (SQLException sex) { throw new DbSqlException(\"Rollback TX failed\", sex); } finally { closeTx(); } }. ### Assistant:", "ground_truth": "Roll back the current transaction. Transaction mode is closed.", "predict": "Rollback the current transaction."}
{"ID": 1535, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Properties createFromFile(final File file) throws IOException { Properties prop = new Properties(); loadFromFile(prop, file); return prop; }. ### Assistant:", "ground_truth": "Create properties from the file.\n\n@param file properties file to load", "predict": "Load properties from a file. @param file the file to load properties from @return the loaded properties @throws IOException if the file cannot be read"}
{"ID": 1536, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Properties createFromString(final String data) throws IOException { Properties p = new Properties(); loadFromString(p, data); return p; }. ### Assistant:", "ground_truth": "Creates properties from string.", "predict": "Create a Properties object from a string. The string is assumed to be a valid Properties string. @param data the data to create the Properties object from. @return a Properties object. @throws IOException if the data is not a valid Properties string."}
{"ID": 1537, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void loadFromString(final Properties p, final String data) throws IOException { try (ByteArrayInputStream is = new ByteArrayInputStream(data.getBytes(StringPool.ISO_8859_1))) { p.load(is); } }. ### Assistant:", "ground_truth": "Loads properties from string.", "predict": "Load a properties file from a string representation. The string must be encoded in ISO-8859-1 charset. @param p the properties to load @param data the string representation of the properties @throws IOException if the data cannot be read @since 1.0.0"}
{"ID": 1538, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Properties subset(final Properties p, String prefix, final boolean stripPrefix) { if (StringUtil.isBlank(prefix)) { return p; } if (!prefix.endsWith(StringPool.DOT)) { prefix += '.'; } Properties result = new Properties(); int baseLen = prefix.length(); for (Object o : p.keySet()) { String key = (String) o; if (key.startsWith(prefix)) { result.setProperty(stripPrefix ? key.substring(baseLen) : key, p.getProperty(key)); } } return result; }. ### Assistant:", "ground_truth": "Creates new Properties object from the original one, by copying\nthose properties that have specified first part of the key name.\nPrefix may be optionally stripped during this process.\n\n@param p         source properties, from which new object will be created\n@param prefix    key names prefix\n\n@return subset properties", "predict": "Returns a subset of properties from a given properties. The properties are filtered by prefix. @param p the properties to subset. @param prefix the prefix to filter. @param stripPrefix whether to strip the prefix from the key. @return the subset of properties."}
{"ID": 1539, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Properties createFromClasspath(final String... rootTemplate) { Properties p = new Properties(); return loadFromClasspath(p, rootTemplate); }. ### Assistant:", "ground_truth": "Creates properties from classpath.", "predict": "Load properties from classpath. @param rootTemplate Roots of the classpath @return Properties"}
{"ID": 1540, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String getProperty(final Map map, final String key, final String defaultValue) { Object val = map.get(key); return (val instanceof String) ? (String) val : defaultValue; }. ### Assistant:", "ground_truth": "Returns String property from a map.\n@see #getProperty(java.util.Map, String)", "predict": "Get a property from a map. If the property is not found, the default value is returned. @param map Map to search in @param key Key to search for @param defaultValue Default value to return if the property is not found @return Property value or defaultValue if the property is not found"}
{"ID": 1541, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void resolveAllVariables(final Properties prop) { for (Object o : prop.keySet()) { String key = (String) o; String value = resolveProperty(prop, key); prop.setProperty(key, value); } }. ### Assistant:", "ground_truth": "Resolves all variables.", "predict": "Resolve all variables in the given properties. @param prop Properties to resolve."}
{"ID": 1542, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String resolveProperty(final Map map, final String key) { String value = getProperty(map, key); if (value == null) { return null; } value = stp.parse(value, macroName -> getProperty(map, macroName)); return value; }. ### Assistant:", "ground_truth": "Returns property with resolved variables.", "predict": "Resolve a property from a map. If the property is not found, it returns null. @param map the map to search in. @param key the property key. @return the property value or null if not found."}
{"ID": 1543, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String resolveScope(final Class type, final String methodName) { if (scopePattern == null) { return null; } String ctx = scopePattern; ctx = StringUtil.replace(ctx, JTXCTX_PATTERN_CLASS, type.getName()); ctx = StringUtil.replace(ctx, JTXCTX_PATTERN_METHOD, methodName); return ctx; }. ### Assistant:", "ground_truth": "Resolves tx scope from scope pattern.", "predict": "Resolves the scope pattern for a given method name in a given class. @param type the class @param methodName the method name @return the scope pattern"}
{"ID": 1544, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public synchronized JtxTransactionMode getTxMode(final Class type, final String methodName, final Class[] methodArgTypes, final String unique) { String signature = type.getName() + '#' + methodName + '%' + unique; JtxTransactionMode txMode = txmap.get(signature); if (txMode == null) { if (!txmap.containsKey(signature)) { final Method m; try { m = type.getMethod(methodName, methodArgTypes); } catch (NoSuchMethodException nsmex) { throw new ProxettaException(nsmex); } final TransactionAnnotationValues txAnn = readTransactionAnnotation(m); if (txAnn != null) { txMode = new JtxTransactionMode( txAnn.propagation(), txAnn.isolation(), txAnn.readOnly(), txAnn.timeout() ); } else { txMode = defaultTransactionMode; } txmap.put(signature, txMode); } } return txMode; }. ### Assistant:", "ground_truth": "Reads transaction mode from method annotation. Annotations are cached for better performances.\n@param type target class\n@param methodName target method name over which the transaction should be wrapped\n@param methodArgTypes types of arguments, used to find the method\n@param unique unique method fingerprint that contains return and arguments type information", "predict": "Get the transaction mode for the given method signature. @param type the class of the method signature. @param methodName the name of the method signature. @param methodArgTypes the types of the method arguments. @param unique a unique identifier for the method signature. @return the transaction mode for the given method signature. @throws ProxettaException if the method signature is not found."}
{"ID": 1545, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings( {\"unchecked\"}) public void registerAnnotations(final Class<? extends Annotation>[] annotations) { this.annotations = annotations; this.annotationParsers = new AnnotationParser[annotations.length]; for (int i = 0; i < annotations.length; i++) { annotationParsers[i] = TransactionAnnotationValues.parserFor(annotations[i]); } }. ### Assistant:", "ground_truth": "Registers new TX annotations.", "predict": "Registers the specified annotations. @param annotations the annotations to register."}
{"ID": 1546, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected TransactionAnnotationValues readTransactionAnnotation(final Method method) { for (AnnotationParser annotationParser : annotationParsers) { TransactionAnnotationValues tad = TransactionAnnotationValues.of(annotationParser, method); if (tad != null) { return tad; } } return null; }. ### Assistant:", "ground_truth": "Finds TX annotation.", "predict": "Reads the transaction annotation values from the method. @param method the method @return the transaction annotation values or null if none found"}
{"ID": 1547, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public boolean accept(final Node node) { // match element name with node name if (!matchElement(node)) { return false; } // match attributes int totalSelectors = selectorsCount(); for (int i = 0; i < totalSelectors; i++) { Selector selector = getSelector(i); // just attr name existence switch (selector.getType()) { case ATTRIBUTE: if (!((AttributeSelector) selector).accept(node)) { return false; } break; case PSEUDO_CLASS: if (!((PseudoClassSelector) selector).accept(node)) { return false; } break; case PSEUDO_FUNCTION: if (!((PseudoFunctionSelector) selector).accept(node)) { return false; } break; } } return true; }. ### Assistant:", "ground_truth": "Accepts single node.", "predict": "Accept the node if it matches the element name and all the selectors."}
{"ID": 1548, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected boolean matchElement(final Node node) { if (node.getNodeType() != Node.NodeType.ELEMENT) { return false; } String element = getElement(); String nodeName = node.getNodeName(); return element.equals(StringPool.STAR) || element.equals(nodeName); }. ### Assistant:", "ground_truth": "Matches element to css selector. All non-element types are ignored.", "predict": "Matches an element based on its name or wildcard. @param node the node to match @return true if the node matches the element"}
{"ID": 1549, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean accept(final List<Node> currentResults, final Node node, final int index) { // match attributes int totalSelectors = selectorsCount(); for (int i = 0; i < totalSelectors; i++) { Selector selector = getSelector(i); // just attr name existence switch (selector.getType()) { case PSEUDO_FUNCTION: if (!((PseudoFunctionSelector) selector).accept(currentResults, node, index)) { return false; } break; case PSEUDO_CLASS: if (!((PseudoClassSelector) selector).accept(currentResults, node, index)) { return false; } break; default: } } return true; }. ### Assistant:", "ground_truth": "Accepts node within current results.", "predict": "Accepts a node and its attributes. @param currentResults the current results. @param node the node. @param index the index of the node. @return true if the node is accepted."}
{"ID": 1550, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String unescape(final String value) { if (value.indexOf('\\\\') == -1) { return value; } return StringUtil.remove(value, '\\\\'); }. ### Assistant:", "ground_truth": "Unescapes CSS string by removing all backslash characters from it.", "predict": "Unescape the given string. @param value the string to unescape @return the unescaped string"}
{"ID": 1551, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private String[] buildJrePackages(final int javaVersionNumber) { final ArrayList<String> packages = new ArrayList<>(); switch (javaVersionNumber) { case 9: case 8: case 7: case 6: case 5: // in Java1.5, the apache stuff moved packages.add(\"com.sun.org.apache\"); // fall through... case 4: if (javaVersionNumber == 4) { packages.add(\"org.apache.crimson\"); packages.add(\"org.apache.xalan\"); packages.add(\"org.apache.xml\"); packages.add(\"org.apache.xpath\"); } packages.add(\"org.ietf.jgss\"); packages.add(\"org.w3c.dom\"); packages.add(\"org.xml.sax\"); // fall through... case 3: packages.add(\"org.omg\"); packages.add(\"com.sun.corba\"); packages.add(\"com.sun.jndi\"); packages.add(\"com.sun.media\"); packages.add(\"com.sun.naming\"); packages.add(\"com.sun.org.omg\"); packages.add(\"com.sun.rmi\"); packages.add(\"sunw.io\"); packages.add(\"sunw.util\"); // fall through... case 2: packages.add(\"com.sun.java\"); packages.add(\"com.sun.image\"); // fall through... case 1: default: // core stuff packages.add(\"sun\"); packages.add(\"java\"); packages.add(\"javax\"); break; } return packages.toArray(new String[0]); }. ### Assistant:", "ground_truth": "Builds a set of java core packages.", "predict": "Build a list of packages that should be included in the JRE distribution. This is used for the Sun JRE distribution. @param javaVersionNumber The version of Java being packaged. @return The list of packages to include in the distribution."}
{"ID": 1552, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected <T extends Node> T cloneTo(final T dest) { // dest.nodeValue = nodeValue; // already in clone implementations! dest.parentNode = parentNode; if (attributes != null) { dest.attributes = new ArrayList<>(attributes.size()); for (int i = 0, attributesSize = attributes.size(); i < attributesSize; i++) { Attribute attr = attributes.get(i); dest.attributes.add(attr.clone()); } } if (childNodes != null) { dest.childNodes = new ArrayList<>(childNodes.size()); for (int i = 0, childNodesSize = childNodes.size(); i < childNodesSize; i++) { Node child = childNodes.get(i); Node childClone = child.clone(); childClone.parentNode = dest; // fix parent! dest.childNodes.add(childClone); } } return dest; }. ### Assistant:", "ground_truth": "Copies all non-final values to the empty cloned object.\nCache-related values are not copied.", "predict": "Clones the node and moves it to the specified destination node. The destination node is responsible for the correct placement of the cloned node. @param dest The destination node. @param <T> The type of the destination node. @return The cloned node."}
{"ID": 1553, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void detachFromParent() { if (parentNode == null) { return; } if (parentNode.childNodes != null) { parentNode.childNodes.remove(siblingIndex); parentNode.reindexChildren(); } parentNode = null; }. ### Assistant:", "ground_truth": "Removes this node from DOM tree.", "predict": "Detach from parent."}
{"ID": 1554, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void addChild(final Node... nodes) { if (nodes.length == 0) { return; // nothing to add } for (Node node : nodes) { node.detachFromParent(); node.parentNode = this; initChildNodes(node); childNodes.add(node); } reindexChildrenOnAdd(nodes.length); }. ### Assistant:", "ground_truth": "Appends several child nodes at once.\nReindex is done only once, after all children are added.", "predict": "Adds the given nodes as children to this node. The nodes are detached from their current parent before being added to this node. The nodes are added to the childNodes list and reindexed. @param nodes the nodes to add as children to this node."}
{"ID": 1555, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void insertChild(final Node node, final int index) { node.detachFromParent(); node.parentNode = this; try { initChildNodes(node); childNodes.add(index, node); } catch (IndexOutOfBoundsException ignore) { throw new LagartoDOMException(\"Invalid node index: \" + index); } reindexChildren(); }. ### Assistant:", "ground_truth": "Inserts node at given index.", "predict": "Insert a child node at a specific position. @param node the node to insert @param index the position to insert the node at"}
{"ID": 1556, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void insertBefore(final Node newChild, final Node refChild) { int siblingIndex = refChild.getSiblingIndex(); refChild.parentNode.insertChild(newChild, siblingIndex); }. ### Assistant:", "ground_truth": "Inserts node before provided node.", "predict": "Insert the newChild before refChild. @param newChild the new child to insert @param refChild the child to insert before"}
{"ID": 1557, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void insertBefore(final Node[] newChilds, final Node refChild) { if (newChilds.length == 0) { return; } int siblingIndex = refChild.getSiblingIndex(); refChild.parentNode.insertChild(newChilds, siblingIndex); }. ### Assistant:", "ground_truth": "Inserts several child nodes before provided node.", "predict": "Insert the newChilds before refChild. If refChild is the last child of its parent, it will be inserted at the end. If refChild is not the last child, it will be inserted before refChild. @param newChilds the new children to insert. @param refChild the child to insert before."}
{"ID": 1558, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void insertAfter(final Node newChild, final Node refChild) { int siblingIndex = refChild.getSiblingIndex() + 1; if (siblingIndex == refChild.parentNode.getChildNodesCount()) { refChild.parentNode.addChild(newChild); } else { refChild.parentNode.insertChild(newChild, siblingIndex); } }. ### Assistant:", "ground_truth": "Inserts node after provided node.", "predict": "Insert newChild after refChild. If refChild is the last child of its parent, insert it at the end. Otherwise insert it after refChild. @param newChild new child to insert. @param refChild reference child."}
{"ID": 1559, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void insertAfter(final Node[] newChilds, final Node refChild) { if (newChilds.length == 0) { return; } int siblingIndex = refChild.getSiblingIndex() + 1; if (siblingIndex == refChild.parentNode.getChildNodesCount()) { refChild.parentNode.addChild(newChilds); } else { refChild.parentNode.insertChild(newChilds, siblingIndex); } }. ### Assistant:", "ground_truth": "Inserts several child nodes after referent node.", "predict": "Insert the new children after the refChild. The refChild is not included in the new children. @param newChilds the new children. @param refChild the refChild."}
{"ID": 1560, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void removeAllChilds() { List<Node> removedNodes = childNodes; childNodes = null; childElementNodes = null; childElementNodesCount = 0; if (removedNodes != null) { for (int i = 0, removedNodesSize = removedNodes.size(); i < removedNodesSize; i++) { Node removedNode = removedNodes.get(i); removedNode.detachFromParent(); } } }. ### Assistant:", "ground_truth": "Removes all child nodes. Each child node will be detached from this parent.", "predict": "Remove all childs from this node."}
{"ID": 1561, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Node findChildNodeWithName(final String name) { if (childNodes == null) { return null; } for (final Node childNode : childNodes) { if (childNode.getNodeName().equals(name)) { return childNode; } } return null; }. ### Assistant:", "ground_truth": "Finds the first child node with given node name.", "predict": "Finds a child node with a specific name. @param name the name of the child node to find. @return the child node with the specified name, or null if none was found."}
{"ID": 1562, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Node[] filterChildNodes(final Predicate<Node> nodePredicate) { if (childNodes == null) { return new Node[0]; } return childNodes.stream() .filter(nodePredicate) .toArray(Node[]::new); }. ### Assistant:", "ground_truth": "Filters child nodes.", "predict": "Filters the child nodes of this node. The child nodes are filtered using the given predicate. If the child nodes are empty, an empty array is returned. If the child nodes are not empty, the filtered child nodes are returned. @param nodePredicate the predicate to filter the child nodes. @return the filtered child nodes."}
{"ID": 1563, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean check() { if (childNodes == null) { return true; } // children int siblingElementIndex = 0; for (int i = 0, childNodesSize = childNodes.size(); i < childNodesSize; i++) { Node childNode = childNodes.get(i); if (childNode.siblingIndex != i) { return false; } if (childNode.getNodeType() == NodeType.ELEMENT) { if (childNode.siblingElementIndex != siblingElementIndex) { return false; } siblingElementIndex++; } } if (childElementNodesCount != siblingElementIndex) { return false; } // child element nodes if (childElementNodes != null) { if (childElementNodes.length != childElementNodesCount) { return false; } int childCount = getChildNodesCount(); for (int i = 0; i < childCount; i++) { Node child = getChild(i); if (child.siblingElementIndex >= 0) { if (childElementNodes[child.siblingElementIndex] != child) { return false; } } } } // sibling names if (siblingNameIndex != -1) { List<Node> siblings = parentNode.childNodes; int index = 0; for (int i = 0, siblingsSize = siblings.size(); i < siblingsSize; i++) { Node sibling = siblings.get(i); if (sibling.siblingNameIndex == -1 && nodeType == NodeType.ELEMENT && nodeName.equals(sibling.getNodeName())) { if (sibling.siblingNameIndex != index++) { return false; } } } } // process children for (Node childNode : childNodes) { if (!childNode.check()) { return false; } } return true; }. ### Assistant:", "ground_truth": "Checks the health of child nodes. Useful during complex tree manipulation,\nto check if everything is OK. Not optimized for speed, should be used just\nfor testing purposes.", "predict": "Checks if all child nodes and siblings are correct. @return true if all child nodes and siblings are correct, otherwise false."}
{"ID": 1564, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void initChildElementNodes() { if (childElementNodes == null) { childElementNodes = new Element[childElementNodesCount]; int childCount = getChildNodesCount(); for (int i = 0; i < childCount; i++) { Node child = getChild(i); if (child.siblingElementIndex >= 0) { childElementNodes[child.siblingElementIndex] = (Element) child; } } } }. ### Assistant:", "ground_truth": "Initializes list of child elements.", "predict": "Initialize child element nodes."}
{"ID": 1565, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void initSiblingNames() { if (siblingNameIndex == -1) { List<Node> siblings = parentNode.childNodes; int index = 0; for (int i = 0, siblingsSize = siblings.size(); i < siblingsSize; i++) { Node sibling = siblings.get(i); if (sibling.siblingNameIndex == -1 && nodeType == NodeType.ELEMENT && nodeName.equals(sibling.getNodeName())) { sibling.siblingNameIndex = index++; } } } }. ### Assistant:", "ground_truth": "Initializes siblings elements of the same name.", "predict": "Initializes the sibling names."}
{"ID": 1566, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void initChildNodes(final Node newNode) { if (childNodes == null) { childNodes = new ArrayList<>(); } if (ownerDocument != null) { if (newNode.ownerDocument != ownerDocument) { changeOwnerDocument(newNode, ownerDocument); } } }. ### Assistant:", "ground_truth": "Initializes child nodes list when needed.\nAlso fix owner document for new node, if needed.", "predict": "Initializes the childNodes of the newNode. If the childNodes are not yet initialized, they are initialized with a new ArrayList. If the ownerDocument of the newNode is different from the ownerDocument of this node, the ownerDocument of the newNode is changed to the same as this node. @param newNode the new node to initialize the childNodes of."}
{"ID": 1567, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void changeOwnerDocument(final Node node, final Document ownerDocument) { node.ownerDocument = ownerDocument; int childCount = node.getChildNodesCount(); for (int i = 0; i < childCount; i++) { Node child = node.getChild(i); changeOwnerDocument(child, ownerDocument); } }. ### Assistant:", "ground_truth": "Changes owner document for given node and all its children.", "predict": "Changes the ownerDocument of the node and recursively all its children. @param node the node whose ownerDocument should be changed. @param ownerDocument the ownerDocument of the node."}
{"ID": 1568, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Node getPreviousSiblingName() { if (nodeName == null) { return null; } initSiblingNames(); int index = siblingNameIndex -1; for (int i = siblingIndex; i >= 0; i--) { Node sibling = parentNode.childNodes.get(i); if ((index == sibling.siblingNameIndex) && nodeName.equals(sibling.getNodeName())) { return sibling; } } return null; }. ### Assistant:", "ground_truth": "Returns this node's previous sibling element with the same name.", "predict": "Returns the previous sibling of this node, or null if this node is the first child of its parent. @return the previous sibling of this node, or null if this node is the first child of its parent."}
{"ID": 1569, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String getTextContent() { StringBuilder sb = new StringBuilder(getChildNodesCount() + 1); appendTextContent(sb); return sb.toString(); }. ### Assistant:", "ground_truth": "Returns the text content of this node and its descendants.\n@see #appendTextContent(Appendable)", "predict": "Returns the text content of the element. The text content is a concatenation of all child nodes, including text and comment nodes. @return the text content of the element."}
{"ID": 1570, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String getHtml() { LagartoDomBuilderConfig lagartoDomBuilderConfig; if (ownerDocument == null) { lagartoDomBuilderConfig = ((Document) this).getConfig(); } else { lagartoDomBuilderConfig = ownerDocument.getConfig(); } LagartoHtmlRenderer lagartoHtmlRenderer = lagartoDomBuilderConfig.getLagartoHtmlRenderer(); return lagartoHtmlRenderer.toHtml(this, new StringBuilder()); }. ### Assistant:", "ground_truth": "Generates HTML.", "predict": "Get HTML representation of this builder. @return HTML representation of this builder."}
{"ID": 1571, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String getInnerHtml() { LagartoDomBuilderConfig lagartoDomBuilderConfig; if (ownerDocument == null) { lagartoDomBuilderConfig = ((Document) this).getConfig(); } else { lagartoDomBuilderConfig = ownerDocument.getConfig(); } LagartoHtmlRenderer lagartoHtmlRenderer = lagartoDomBuilderConfig.getLagartoHtmlRenderer(); return lagartoHtmlRenderer.toInnerHtml(this, new StringBuilder()); }. ### Assistant:", "ground_truth": "Generates inner HTML.", "predict": "Returns the HTML representation of this element. The HTML representation includes all child elements, but not their attributes. The HTML representation is not escaped. @return the HTML representation of this element."}
{"ID": 1572, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void visitChildren(final NodeVisitor nodeVisitor) { if (childNodes != null) { for (int i = 0, childNodesSize = childNodes.size(); i < childNodesSize; i++) { Node childNode = childNodes.get(i); childNode.visit(nodeVisitor); } } }. ### Assistant:", "ground_truth": "Visits children nodes.", "predict": "Visit all children of this node. @param nodeVisitor the visitor to visit children."}
{"ID": 1573, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String getCssPath() { StringBuilder path = new StringBuilder(); Node node = this; while (node != null) { String nodeName = node.getNodeName(); if (nodeName != null) { StringBuilder sb = new StringBuilder(); sb.append(' ').append(nodeName); String id = node.getAttribute(\"id\"); if (id != null) { sb.append('#').append(id); } path.insert(0, sb); } node = node.getParentNode(); } if (path.charAt(0) == ' ') { return path.substring(1); } return path.toString(); }. ### Assistant:", "ground_truth": "Returns CSS path to this node from document root.", "predict": "Returns the path to the CSS file that contains the styles for this node. The path is relative to the root of the document. If the node has an id attribute, it is included in the path. @return the CSS path for this node."}
{"ID": 1574, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void onDecoraTag(final Tag tag) { String tagName = tag.getName().toString(); if (tag.getType() == TagType.SELF_CLOSING) { checkNestedDecoraTags(); decoraTagName = tagName.substring(7); decoraTagStart = tag.getTagPosition(); decoraTagEnd = tag.getTagPosition() + tag.getTagLength(); defineDecoraTag(); return; } if (tag.getType() == TagType.START) { checkNestedDecoraTags(); decoraTagName = tagName.substring(7); decoraTagStart = tag.getTagPosition(); decoraTagDefaultValueStart = tag.getTagPosition() + tag.getTagLength(); return; } // closed tag type decoraTagEnd = tag.getTagPosition() + tag.getTagLength(); decoraTagDefaultValueEnd = tag.getTagPosition(); defineDecoraTag(); }. ### Assistant:", "ground_truth": "Handle Decora tags.", "predict": "On decora tag. @param tag the tag"}
{"ID": 1575, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void onIdAttrStart(final Tag tag) { String id = tag.getId().toString().substring(7); String tagName; String idName; int dashIndex = id.indexOf('-'); if (dashIndex == -1) { tagName = id; idName = null; } else { tagName = id.substring(0, dashIndex); idName = id.substring(dashIndex + 1); } if (tag.getType() == TagType.SELF_CLOSING) { checkNestedDecoraTags(); decoraTagName = tagName; decoraIdName = idName; decoraTagStart = tag.getTagPosition(); decoraTagEnd = tag.getTagPosition() + tag.getTagLength(); defineDecoraTag(); return; } if (tag.getType() == TagType.START) { checkNestedDecoraTags(); decoraTagName = tagName; decoraIdName = idName; decoraTagStart = tag.getTagPosition(); decoraTagDefaultValueStart = tag.getTagPosition() + tag.getTagLength(); closingTagName = tag.getName().toString(); closingTagDeepLevel = tag.getDeepLevel(); } }. ### Assistant:", "ground_truth": "Handle open and empty ID attribute tags.", "predict": "On id attr start. @param tag the tag"}
{"ID": 1576, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void defineDecoraTag() { DecoraTag decoraTag = decoraTagDefaultValueStart == 0 ? new DecoraTag(decoraTagName, decoraIdName, decoraTagStart, decoraTagEnd) : new DecoraTag( decoraTagName, decoraIdName, decoraTagStart, decoraTagEnd, decoraTagDefaultValueStart, decoraTagDefaultValueEnd - decoraTagDefaultValueStart); decoraTags.add(decoraTag); decoraTagName = null; decoraIdName = null; closingTagName = null; decoraTagDefaultValueStart = 0; }. ### Assistant:", "ground_truth": "Defines Decora tag position inside decorator content.\nResets current Decora tag tracking.", "predict": "Define the decoration tag."}
{"ID": 1577, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public JoyProxetta addProxyAspect(final ProxyAspect proxyAspect) { requireNotStarted(proxetta); this.proxyAspects.add(proxyAspect); return this; }. ### Assistant:", "ground_truth": "Adds a proxy aspect.", "predict": "Add a proxy aspect to the JoyProxetta. @param proxyAspect the proxy aspect to add. @return this JoyProxetta."}
{"ID": 1578, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void addRootPackage(final String rootPackage, String mapping) { if (packages == null) { packages = new String[0]; } if (mappings == null) { mappings = new String[0]; } // fix mapping if (mapping.length() > 0) { // mapping must start with the slash if (!mapping.startsWith(StringPool.SLASH)) { mapping = StringPool.SLASH + mapping; } // mapping must NOT end with the slash if (mapping.endsWith(StringPool.SLASH)) { mapping = StringUtil.substring(mapping, 0, -1); } } // detect duplicates for (int i = 0; i < packages.length; i++) { if (packages[i].equals(rootPackage)) { if (mappings[i].equals(mapping)) { // both package and the mappings are the same return; } throw new MadvocException(\"Different mappings for the same root package: \" + rootPackage); } } packages = ArraysUtil.append(packages, rootPackage); mappings = ArraysUtil.append(mappings, mapping); }. ### Assistant:", "ground_truth": "Adds root package and its path mapping. Duplicate root packages\nare ignored, if mapping path is equals, otherwise exception is thrown.", "predict": "Add a root package and its mapping. If the root package already exists, the mapping will be ignored. If the mapping is already defined, it will be overwritten. @param rootPackage the root package to add. @param mapping the mapping to add."}
{"ID": 1579, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void addRootPackageOf(final Class actionClass, final String mapping) { addRootPackage(actionClass.getPackage().getName(), mapping); }. ### Assistant:", "ground_truth": "Sets root package to package of given class.", "predict": "Adds the root package of the given action class to the mapping. @param actionClass The action class. @param mapping The mapping."}
{"ID": 1580, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String findRootPackageForActionPath(final String actionPath) { if (mappings == null) { return null; } int ndx = -1; int delta = Integer.MAX_VALUE; for (int i = 0; i < mappings.length; i++) { String mapping = mappings[i]; boolean found = false; if (actionPath.equals(mapping)) { found = true; } else { mapping += StringPool.SLASH; if (actionPath.startsWith(mapping)) { found = true; } } if (found) { int distance = actionPath.length() - mapping.length(); if (distance < delta) { ndx = i; delta = distance; } } } if (ndx == -1) { return null; } return packages[ndx]; }. ### Assistant:", "ground_truth": "Finds closest root package for the given action path.", "predict": "Find the root package for the given action path. @param actionPath the action path @return the root package for the given action path, or null if no mapping was found."}
{"ID": 1581, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String resolveValidationMessage(final HttpServletRequest request, final Violation violation) { ValidationConstraint vc = violation.getConstraint(); String key = vc != null ? vc.getClass().getName() : violation.getName(); String msg = LocalizationUtil.findMessage(request, key); if (msg != null) { return beanTemplateParser.parseWithBean(msg, violation); } return null; }. ### Assistant:", "ground_truth": "Prepares validation messages.\nKey is either validation constraint class name or violation name.", "predict": "Resolve validation message for given violation. If message is not found, returns null. @param request @param violation @return"}
{"ID": 1582, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public BeanReferences removeDuplicateNames() { if (names.length < 2) { return this; } int nullCount = 0; for (int i = 1; i < names.length; i++) { String thisRef = names[i]; if (thisRef == null) { nullCount++; continue; } for (int j = 0; j < i; j++) { if (names[j] == null) { continue; } if (thisRef.equals(names[j])) { names[i] = null; break; } } } if (nullCount == 0) { return this; } String[] newRefs = new String[names.length - nullCount]; int ndx = 0; for (String name : names) { if (name == null) { continue; } newRefs[ndx] = name; ndx++; } return new BeanReferences(newRefs); }. ### Assistant:", "ground_truth": "Removes later duplicated references in an array.\nReturns new instance of BeanReferences if there was changes,\notherwise returns the same instance.", "predict": "Remove any duplicate names. @return the updated BeanReferences object."}
{"ID": 1583, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public JoyProps addPropsFile(final String namePattern) { requireNotStarted(props); this.propsNamePatterns.add(namePattern); return this; }. ### Assistant:", "ground_truth": "Adds props files or patterns.", "predict": "Add a props file to be loaded. The props file will be loaded after the default props file. The props file will be searched in the order they were added. @param namePattern the pattern to match the props file. @return JoyProps instance."}
{"ID": 1584, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void forEachTarget(final Consumer<Target> targetConsumer) { for (final Target target : targets) { targetConsumer.accept(target); } }. ### Assistant:", "ground_truth": "Iterates all targets.", "predict": "Iterate over all targets. @param targetConsumer Consumer for each target."}
{"ID": 1585, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void forEachTargetAndIn(final MadvocScope scope, final BiConsumer<Target, InjectionPoint> biConsumer) { for (final Target target : targets) { final ScopeData scopeData = target.scopeData(); if (scopeData.in() == null) { continue; } for (final InjectionPoint in : scopeData.in()) { if (in.scope() != scope) { continue; } biConsumer.accept(target, in); } } }. ### Assistant:", "ground_truth": "Iterates all targets and for each target iterates all IN injection points of given scope.", "predict": "Iterate over all targets and their injections points in the specified scope. @param scope the scope to iterate over @param biConsumer the consumer to apply to each target and injection point"}
{"ID": 1586, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void forEachTargetAndOut(final MadvocScope scope, final BiConsumer<Target, InjectionPoint> biConsumer) { for (final Target target : targets) { final ScopeData scopeData = target.scopeData(); if (scopeData.out() == null) { continue; } for (final InjectionPoint out : scopeData.out()) { if (out.scope() != scope) { continue; } biConsumer.accept(target, out); } } }. ### Assistant:", "ground_truth": "Iterates all targets and for each target iterates all OUT injection points of given scope.", "predict": "Iterate through all targets and their outgoing dependencies in the given scope. @param scope the scope to iterate through @param biConsumer the consumer to use for each pair of target and outgoing dependency"}
{"ID": 1587, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Object[] extractParametersValues() { final Object[] values = new Object[targets.length - 1]; for (int i = 1; i < targets.length; i++) { values[i - 1] = targets[i].value(); } return values; }. ### Assistant:", "ground_truth": "Collects all parameters from target into an array.", "predict": "Extracts the values of the parameters from the targets. @return the values of the parameters extracted from the targets."}
{"ID": 1588, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Target[] makeTargets(final Target actionTarget, final MethodParam[] methodParams) { if (methodParams == null) { // action does not have method parameters, so there is just one target return new Target[]{actionTarget}; } // action has method arguments, so there is more then one target final Target[] target = new Target[methodParams.length + 1]; target[0] = actionTarget; final Object action = actionTarget.value(); for (int i = 0; i < methodParams.length; i++) { final MethodParam methodParam = methodParams[i]; final Class paramType = methodParam.type(); final Target paramTarget; if (methodParam.annotationType() == null) { // parameter is NOT annotated, create new value for the target // the class itself will be a base class, and should be scanned final ScopeData newScopeData = methodParam.scopeData().inspector().inspectClassScopesWithCache(paramType); paramTarget = Target.ofValue(createActionMethodArgument(paramType, action), newScopeData); } else if (methodParam.annotationType() == Out.class) { // parameter is annotated with *only* OUT annotation // create the output value now AND to save the type paramTarget = Target.ofMethodParam(methodParam, createActionMethodArgument(paramType, action)); } else { // parameter is annotated with any IN annotation // create target with NO value, as the value will be created later paramTarget = Target.ofMethodParam(methodParam, type -> createActionMethodArgument(type, action)); } target[i + 1] = paramTarget; } return target; }. ### Assistant:", "ground_truth": "Joins action and parameters into one single array of Targets.", "predict": "Make the targets for the method parameters. @param actionTarget the action target @param methodParams the method parameters @return the targets for the method parameters"}
{"ID": 1589, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings({\"unchecked\", \"NullArgumentToVariableArgMethod\"}) protected Object createActionMethodArgument(final Class type, final Object action) { try { if (type.getEnclosingClass() == null || Modifier.isStatic(type.getModifiers())) { // regular or static class return ClassUtil.newInstance(type); } else { // member class Constructor ctor = type.getDeclaredConstructor(type.getDeclaringClass()); ctor.setAccessible(true); return ctor.newInstance(action); } } catch (Exception ex) { throw new MadvocException(ex); } }. ### Assistant:", "ground_truth": "Creates action method arguments.", "predict": "Create an instance of the action method argument class."}
{"ID": 1590, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void sessionCreated(final HttpSessionEvent httpSessionEvent) { HttpSession session = httpSessionEvent.getSession(); sessionMap.putIfAbsent(session.getId(), session); for (HttpSessionListener listener : listeners) { listener.sessionCreated(httpSessionEvent); } }. ### Assistant:", "ground_truth": "Stores session in map and broadcasts event to registered listeners.", "predict": "Invoked when a new HttpSession is created. @param httpSessionEvent the HttpSessionEvent object containing the session information."}
{"ID": 1591, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void sessionDestroyed(final HttpSessionEvent httpSessionEvent) { HttpSession session = httpSessionEvent.getSession(); sessionMap.remove(session.getId()); for (HttpSessionListener listener : listeners) { listener.sessionDestroyed(httpSessionEvent); } }. ### Assistant:", "ground_truth": "Removes session from a map and broadcasts event to registered listeners.", "predict": "Invoked when a session is destroyed. @param httpSessionEvent the event that describes the session destruction."}
{"ID": 1592, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public JsonArray add(Object value) { Objects.requireNonNull(value); value = JsonObject.resolveValue(value); list.add(value); return this; }. ### Assistant:", "ground_truth": "Adds an object to the JSON array.", "predict": "Adds a value to the list. The value is converted to a JsonObject before being added. @param value The value to add. @return This list."}
{"ID": 1593, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public JsonArray addAll(final JsonArray array) { Objects.requireNonNull(array); list.addAll(array.list); return this; }. ### Assistant:", "ground_truth": "Appends all of the elements in the specified array to the end of this JSON array.", "predict": "Adds all elements from another array to this array. @param array The array to add elements from. @return This array."}
{"ID": 1594, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Object remove(final int pos) { Object removed = list.remove(pos); if (removed instanceof Map) { return new JsonObject((Map) removed); } if (removed instanceof ArrayList) { return new JsonArray((List) removed); } return removed; }. ### Assistant:", "ground_truth": "Removes the value at the specified position in the JSON array.", "predict": "Remove element from the list. If element is a map, it will be converted to a JsonObject. If element is an ArrayList, it will be converted to a JsonArray. @param pos position of element to remove @return removed element or null if element was not found"}
{"ID": 1595, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String resolveTarget(final ActionRequest actionRequest, final String resultValue) { String resultBasePath = actionRequest.getActionRuntime().getResultBasePath(); ResultPath resultPath = resultMapper.resolveResultPath(resultBasePath, resultValue); String actionPath = resultPath.path(); String path = actionPath; String value = resultPath.value(); if (StringUtil.isEmpty(value)) { value = null; } String target; while (true) { // variant #1: with value if (value != null) { if (path == null) { // only value remains int lastSlashNdx = actionPath.lastIndexOf('/'); if (lastSlashNdx != -1) { target = actionPath.substring(0, lastSlashNdx + 1) + value; } else { target = '/' + value; } } else { target = path + '.' + value; } target = locateTarget(actionRequest, target); if (target != null) { break; } } if (path != null) { // variant #2: without value target = locateTarget(actionRequest, path); if (target != null) { break; } } // continue if (path == null) { // path not found return null; } int dotNdx = MadvocUtil.lastIndexOfDotAfterSlash(path); if (dotNdx == -1) { path = null; } else { path = path.substring(0, dotNdx); } } return target; }. ### Assistant:", "ground_truth": "Locates the target file from action path and the result value.", "predict": "Resolve the target for the given result value. The target is determined by the result path. If the result path is not found, the target is determined by the path of the action request. @param actionRequest the action request @param resultValue the result value @return the resolved target"}
{"ID": 1596, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void targetNotFound(final ActionRequest actionRequest, final String actionAndResultPath) throws IOException { final HttpServletResponse response = actionRequest.getHttpServletResponse(); if (!response.isCommitted()) { response.sendError(SC_NOT_FOUND, \"Result not found: \" + actionAndResultPath); } }. ### Assistant:", "ground_truth": "Called when target not found. By default sends 404 to the response.", "predict": "Send a 404 error if the target is not found. @param actionRequest the action request @param actionAndResultPath the path to the target @throws IOException if the response was already committed"}
{"ID": 1597, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String valueToString(final String name, final Object valueObject) { if (!valueObject.getClass().isArray()) { return valueObject.toString(); } // array String[] array = (String[]) valueObject; if (valueNameIndexes == null) { valueNameIndexes = new HashMap<>(); } MutableInteger index = valueNameIndexes.get(name); if (index == null) { index = new MutableInteger(0); valueNameIndexes.put(name, index); } if (index.value >= array.length) { return null; } String result = array[index.value]; index.value++; return result; }. ### Assistant:", "ground_truth": "Converts value to a string.", "predict": "Convert a value object to a string. The value object is assumed to be an array of Strings. If the value object is not an array, it is converted to a string using the toString method. The conversion is done using the valueNameIndexes map. @param name the name of the value @param valueObject the value object to convert @return the converted value object as a string"}
{"ID": 1598, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") public <T extends ActionFilter> MadvocRouter filter(final Class<T> actionFilterClass) { filtersManager.resolve(actionFilterClass); return this; }. ### Assistant:", "ground_truth": "Returns action filter instance for further configuration.", "predict": "Adds a new action filter to the router. @param actionFilterClass the action filter class. @return the router instance."}
{"ID": 1599, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String getPseudoFunctionName() { String name = getClass().getSimpleName().toLowerCase(); name = name.replace('_', '-'); return name; }. ### Assistant:", "ground_truth": "Returns pseudo-function name.", "predict": "Get the pseudo function name. The pseudo function name is the lowercase version of the class name with underscores replaced by dashes. @return the pseudo function name"}
{"ID": 1600, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public PropertyInjectionPoint[] resolve(Class type, final boolean autowire) { final List<PropertyInjectionPoint> list = new ArrayList<>(); final Set<String> usedPropertyNames = new HashSet<>(); // lookup fields while (type != Object.class) { final ClassDescriptor cd = ClassIntrospector.get().lookup(type); final PropertyDescriptor[] allPropertyDescriptors = cd.getAllPropertyDescriptors(); for (PropertyDescriptor propertyDescriptor : allPropertyDescriptors) { if (propertyDescriptor.isGetterOnly()) { continue; } if (usedPropertyNames.contains(propertyDescriptor.getName())) { continue; } Class propertyType = propertyDescriptor.getType(); if (ClassUtil.isTypeOf(propertyType, Collection.class)) { continue; } BeanReferences reference = referencesResolver.readReferenceFromAnnotation(propertyDescriptor); if (reference == null) { if (!autowire) { continue; } else { reference = referencesResolver.buildDefaultReference(propertyDescriptor); } } list.add(new PropertyInjectionPoint(propertyDescriptor, reference)); usedPropertyNames.add(propertyDescriptor.getName()); } // go to the supertype type = type.getSuperclass(); } final PropertyInjectionPoint[] fields; if (list.isEmpty()) { fields = PropertyInjectionPoint.EMPTY; } else { fields = list.toArray(new PropertyInjectionPoint[0]); } return fields; }. ### Assistant:", "ground_truth": "Resolves all properties for given type.", "predict": "Resolves the injection points for a given class. @param type the class to inspect @param autowire whether the injection points should be autowired or not @return the injection points found in the class and its superclasses"}
{"ID": 1601, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private Socket createSocks4ProxySocket(final String host, final int port) { Socket socket = null; final String proxyHost = proxy.getProxyAddress(); final int proxyPort = proxy.getProxyPort(); final String user = proxy.getProxyUsername(); try { socket = Sockets.connect(proxyHost, proxyPort, connectionTimeout); final InputStream in = socket.getInputStream(); final OutputStream out = socket.getOutputStream(); socket.setTcpNoDelay(true); byte[] buf = new byte[1024]; // 1) CONNECT int index = 0; buf[index++] = 4; buf[index++] = 1; buf[index++] = (byte) (port >>> 8); buf[index++] = (byte) (port & 0xff); InetAddress addr = InetAddress.getByName(host); byte[] byteAddress = addr.getAddress(); for (byte byteAddres : byteAddress) { buf[index++] = byteAddres; } if (user != null) { System.arraycopy(user.getBytes(), 0, buf, index, user.length()); index += user.length(); } buf[index++] = 0; out.write(buf, 0, index); // 2) RESPONSE int len = 6; int s = 0; while (s < len) { int i = in.read(buf, s, len - s); if (i <= 0) { throw new HttpException(ProxyInfo.ProxyType.SOCKS4, \"stream is closed\"); } s += i; } if (buf[0] != 0) { throw new HttpException(ProxyInfo.ProxyType.SOCKS4, \"proxy returned VN \" + buf[0]); } if (buf[1] != 90) { try { socket.close(); } catch (Exception ignore) { } throw new HttpException(ProxyInfo.ProxyType.SOCKS4, \"proxy returned CD \" + buf[1]); } byte[] temp = new byte[2]; in.read(temp, 0, 2); return socket; } catch (RuntimeException rtex) { closeSocket(socket); throw rtex; } catch (Exception ex) { closeSocket(socket); throw new HttpException(ProxyInfo.ProxyType.SOCKS4, ex.toString(), ex); } }. ### Assistant:", "ground_truth": "Connects to the SOCKS4 proxy and returns proxified socket.", "predict": "Create a new socket for a SOCKS4 proxy. @param host the hostname of the server @param port the port of the server @return a new socket for a SOCKS4 proxy."}
{"ID": 1602, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: final int getAttributeCount() { int count = 0; Attribute attribute = this; while (attribute != null) { count += 1; attribute = attribute.nextAttribute; } return count; }. ### Assistant:", "ground_truth": "Returns the number of attributes of the attribute list that begins with this attribute.\n\n@return the number of attributes of the attribute list that begins with this attribute.", "predict": "Returns the number of attributes in this element. This method is used to iterate through the attributes in a tree structure. @return the number of attributes in this element."}
{"ID": 1603, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Set<ActionResult> getAllActionResults() { final Set<ActionResult> set = new HashSet<>(allResults.size()); allResults.forEachValue(set::add); return set; }. ### Assistant:", "ground_truth": "Returns all action results as new set.", "predict": "Returns all ActionResults. @return All ActionResults."}
{"ID": 1604, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean equalsOne(final char c, final CharSequence match) { for (int i = 0; i < match.length(); i++) { char aMatch = match.charAt(i); if (c == aMatch) { return true; } } return false; }. ### Assistant:", "ground_truth": "Match if one character equals to any of the given character.\n\n@return <code>true</code> if characters match any character from given array,\notherwise <code>false</code>", "predict": "Determines whether the given character is present in the given sequence. @param c the character to check for @param match the sequence to check against @return true if the character is present in the sequence, false otherwise"}
{"ID": 1605, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int findFirstEqual(final CharSequence source, final int index, final CharSequence match) { for (int i = index; i < source.length(); i++) { if (equalsOne(source.charAt(i), match)) { return i; } } return -1; }. ### Assistant:", "ground_truth": "Finds index of the first character in given charsequence the matches any from the\ngiven set of characters.\n\n@return index of matched character or -1", "predict": "Find the first occurrence of a character in a string. @param source The source string. @param index The index to start searching from. @param match The character to search for. @return The index of the first occurrence of the character, or -1 if not found."}
{"ID": 1606, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int findFirstEqual(final char[] source, final int index, final char match) { for (int i = index; i < source.length; i++) { if (source[i] == match) { return i; } } return -1; }. ### Assistant:", "ground_truth": "Finds index of the first character in given array the matches any from the\ngiven set of characters.\n\n@return index of matched character or -1", "predict": "Finds the first occurrence of a character in a string. @param source the source string @param index the index to start searching from @param match the character to search for @return the index of the first occurrence of the character or -1 if not found"}
{"ID": 1607, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public CommandLine args(final String... arguments) { if (arguments != null && arguments.length > 0) { Collections.addAll(cmdLine, arguments); } return this; }. ### Assistant:", "ground_truth": "Adds several arguments.", "predict": "Additional arguments to pass to the command. @param arguments the arguments to add to the command line. @return this instance of the command."}
{"ID": 1608, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public CommandLine env(final String key, final String value) { if (env == null) { env = new HashMap<>(); } env.put(key, value); return this; }. ### Assistant:", "ground_truth": "Sets environment variable.", "predict": "Adds an environment variable to the command line. @param key the variable name @param value the variable value @return this instance for chaining"}
{"ID": 1609, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ProcessRunner.ProcessResult run() { ByteArrayOutputStream baos = new ByteArrayOutputStream(); out = err = baos; try { baos.write(StringUtil.join(cmdLine, ' ').getBytes()); baos.write(StringPool.BYTES_NEW_LINE); } catch (IOException ignore) { } ProcessBuilder processBuilder = new ProcessBuilder(); processBuilder.command(cmdLine); if (cleanEnvironment) { processBuilder.environment().clear(); } if (env != null) { processBuilder.environment().putAll(env); } processBuilder.directory(workingDirectory); Process process = null; try { process = processBuilder.start(); } catch (IOException ioex) { return writeException(baos, ioex); } StreamGobbler outputGobbler = new StreamGobbler(process.getInputStream(), out, outPrefix); StreamGobbler errorGobbler = new StreamGobbler(process.getErrorStream(), err, errPrefix); outputGobbler.start(); errorGobbler.start(); int result; try { result = process.waitFor(); } catch (InterruptedException iex) { return writeException(baos, iex); } outputGobbler.waitFor(); errorGobbler.waitFor(); return new ProcessRunner.ProcessResult(result, baos.toString()); }. ### Assistant:", "ground_truth": "Runs command and returns process result.", "predict": "Runs the command line. @return ProcessResult with exit code and output."}
{"ID": 1610, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void invoke(final Object listener, final Class listenerType) { if (listenerType == Init.class) { ((Init) listener).init(); return; } if (listenerType == Start.class) { ((Start) listener).start(); return; } if (listenerType == Ready.class) { ((Ready) listener).ready(); return; } if (listenerType == Stop.class) { ((Stop) listener).stop(); return; } throw new MadvocException(\"Invalid listener\"); }. ### Assistant:", "ground_truth": "Invoke the listener based on type.\nNot very OOP, but works.", "predict": "Invokes the appropriate MadvocListener method. @param listener MadvocListener to invoke. @param listenerType Class of listener."}
{"ID": 1611, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: final void copyFrom(final Frame frame) { inputLocals = frame.inputLocals; inputStack = frame.inputStack; outputStackStart = 0; outputLocals = frame.outputLocals; outputStack = frame.outputStack; outputStackTop = frame.outputStackTop; initializationCount = frame.initializationCount; initializations = frame.initializations; }. ### Assistant:", "ground_truth": "Sets this frame to the value of the given frame.\n\n<p>WARNING: after this method is called the two frames share the same data structures. It is\nrecommended to discard the given frame to avoid unexpected side effects.\n\n@param frame The new frame value.", "predict": "Copy the state from another frame."}
{"ID": 1612, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: static int getAbstractTypeFromApiFormat(final SymbolTable symbolTable, final Object type) { if (type instanceof Integer) { return CONSTANT_KIND | ((Integer) type).intValue(); } else if (type instanceof String) { String descriptor = Type.getObjectType((String) type).getDescriptor(); return getAbstractTypeFromDescriptor(symbolTable, descriptor, 0); } else { return UNINITIALIZED_KIND | symbolTable.addUninitializedType(\"\", ((Label) type).bytecodeOffset); } }. ### Assistant:", "ground_truth": "Returns the abstract type corresponding to the given public API frame element type.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param type a frame element type described using the same format as in {@link\nMethodVisitor#visitFrame}, i.e. either {@link Opcodes#TOP}, {@link Opcodes#INTEGER}, {@link\nOpcodes#FLOAT}, {@link Opcodes#LONG}, {@link Opcodes#DOUBLE}, {@link Opcodes#NULL}, or\n{@link Opcodes#UNINITIALIZED_THIS}, or the internal name of a class, or a Label designating\na NEW instruction (for uninitialized types).\n@return the abstract type corresponding to the given frame element type.", "predict": "Get the abstract type from the API format. @param symbolTable the symbol table. @param type the type. @return the abstract type."}
{"ID": 1613, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static int getAbstractTypeFromDescriptor( final SymbolTable symbolTable, final String buffer, final int offset) { String internalName; switch (buffer.charAt(offset)) { case 'V': return 0; case 'Z': case 'C': case 'B': case 'S': case 'I': return INTEGER; case 'F': return FLOAT; case 'J': return LONG; case 'D': return DOUBLE; case 'L': internalName = buffer.substring(offset + 1, buffer.length() - 1); return REFERENCE_KIND | symbolTable.addType(internalName); case '[': int elementDescriptorOffset = offset + 1; while (buffer.charAt(elementDescriptorOffset) == '[') { ++elementDescriptorOffset; } int typeValue; switch (buffer.charAt(elementDescriptorOffset)) { case 'Z': typeValue = BOOLEAN; break; case 'C': typeValue = CHAR; break; case 'B': typeValue = BYTE; break; case 'S': typeValue = SHORT; break; case 'I': typeValue = INTEGER; break; case 'F': typeValue = FLOAT; break; case 'J': typeValue = LONG; break; case 'D': typeValue = DOUBLE; break; case 'L': internalName = buffer.substring(elementDescriptorOffset + 1, buffer.length() - 1); typeValue = REFERENCE_KIND | symbolTable.addType(internalName); break; default: throw new IllegalArgumentException(); } return ((elementDescriptorOffset - offset) << DIM_SHIFT) | typeValue; default: throw new IllegalArgumentException(); } }. ### Assistant:", "ground_truth": "Returns the abstract type corresponding to the given type descriptor.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param buffer a string ending with a type descriptor.\n@param offset the start offset of the type descriptor in buffer.\n@return the abstract type corresponding to the given type descriptor.", "predict": "Get the abstract type from the descriptor. @param symbolTable the symbol table @param buffer the buffer @param offset the offset @return the abstract type"}
{"ID": 1614, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: final void setInputFrameFromApiFormat( final SymbolTable symbolTable, final int numLocal, final Object[] local, final int numStack, final Object[] stack) { int inputLocalIndex = 0; for (int i = 0; i < numLocal; ++i) { inputLocals[inputLocalIndex++] = getAbstractTypeFromApiFormat(symbolTable, local[i]); if (local[i] == Opcodes.LONG || local[i] == Opcodes.DOUBLE) { inputLocals[inputLocalIndex++] = TOP; } } while (inputLocalIndex < inputLocals.length) { inputLocals[inputLocalIndex++] = TOP; } int numStackTop = 0; for (int i = 0; i < numStack; ++i) { if (stack[i] == Opcodes.LONG || stack[i] == Opcodes.DOUBLE) { ++numStackTop; } } inputStack = new int[numStack + numStackTop]; int inputStackIndex = 0; for (int i = 0; i < numStack; ++i) { inputStack[inputStackIndex++] = getAbstractTypeFromApiFormat(symbolTable, stack[i]); if (stack[i] == Opcodes.LONG || stack[i] == Opcodes.DOUBLE) { inputStack[inputStackIndex++] = TOP; } } outputStackTop = 0; initializationCount = 0; }. ### Assistant:", "ground_truth": "Sets the input frame from the given public API frame description.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param numLocal the number of local variables.\n@param local the local variable types, described using the same format as in {@link\nMethodVisitor#visitFrame}.\n@param numStack the number of operand stack elements.\n@param stack the operand stack types, described using the same format as in {@link\nMethodVisitor#visitFrame}.", "predict": "This method is used to convert the input and output stack and local variables from the format used by the Java compiler to the format used by the JVM. The input stack is assumed to be empty, and the output stack is assumed to be non-empty. The input stack is assumed to be a sequence of doubles and longs, with each double or long being pushed onto the stack followed by a TOP instruction. The output stack is assumed to be a sequence of doubles and longs, with each double or long being popped from the stack followed by a POP instruction. The input local variables are assumed to be a sequence of doubles and longs, with each double or long being pushed onto the stack followed by a TOP instruction. The output local variables are assumed to be a sequence of doubles and longs, with each double or long being popped from the stack followed by a POP instruction."}
{"ID": 1615, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private int getLocal(final int localIndex) { if (outputLocals == null || localIndex >= outputLocals.length) { // If this local has never been assigned in this basic block, it is still equal to its value // in the input frame. return LOCAL_KIND | localIndex; } else { int abstractType = outputLocals[localIndex]; if (abstractType == 0) { // If this local has never been assigned in this basic block, so it is still equal to its // value in the input frame. abstractType = outputLocals[localIndex] = LOCAL_KIND | localIndex; } return abstractType; } }. ### Assistant:", "ground_truth": "Returns the abstract type stored at the given local variable index in the output frame.\n\n@param localIndex the index of the local variable whose value must be returned.\n@return the abstract type stored at the given local variable index in the output frame.", "predict": "Compute the local kind for a given local."}
{"ID": 1616, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void setLocal(final int localIndex, final int abstractType) { // Create and/or resize the output local variables array if necessary. if (outputLocals == null) { outputLocals = new int[10]; } int outputLocalsLength = outputLocals.length; if (localIndex >= outputLocalsLength) { int[] newOutputLocals = new int[Math.max(localIndex + 1, 2 * outputLocalsLength)]; System.arraycopy(outputLocals, 0, newOutputLocals, 0, outputLocalsLength); outputLocals = newOutputLocals; } // Set the local variable. outputLocals[localIndex] = abstractType; }. ### Assistant:", "ground_truth": "Replaces the abstract type stored at the given local variable index in the output frame.\n\n@param localIndex the index of the output frame local variable that must be set.\n@param abstractType the value that must be set.", "predict": "Sets the abstract type of the local variable at the specified index. The local variable is added to the output if it does not already exist. @param localIndex The index of the local variable. @param abstractType The abstract type of the local variable."}
{"ID": 1617, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void push(final int abstractType) { // Create and/or resize the output stack array if necessary. if (outputStack == null) { outputStack = new int[10]; } int outputStackLength = outputStack.length; if (outputStackTop >= outputStackLength) { int[] newOutputStack = new int[Math.max(outputStackTop + 1, 2 * outputStackLength)]; System.arraycopy(outputStack, 0, newOutputStack, 0, outputStackLength); outputStack = newOutputStack; } // Pushes the abstract type on the output stack. outputStack[outputStackTop++] = abstractType; // Updates the maximum size reached by the output stack, if needed (note that this size is // relative to the input stack size, which is not known yet). short outputStackSize = (short) (outputStackStart + outputStackTop); if (outputStackSize > owner.outputStackMax) { owner.outputStackMax = outputStackSize; } }. ### Assistant:", "ground_truth": "Pushes the given abstract type on the output frame stack.\n\n@param abstractType an abstract type.", "predict": "Pushes the abstract type on the output stack. @param abstractType the abstract type to push."}
{"ID": 1618, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void push(final SymbolTable symbolTable, final String descriptor) { int typeDescriptorOffset = descriptor.charAt(0) == '(' ? descriptor.indexOf(')') + 1 : 0; int abstractType = getAbstractTypeFromDescriptor(symbolTable, descriptor, typeDescriptorOffset); if (abstractType != 0) { push(abstractType); if (abstractType == LONG || abstractType == DOUBLE) { push(TOP); } } }. ### Assistant:", "ground_truth": "Pushes the abstract type corresponding to the given descriptor on the output frame stack.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param descriptor a type or method descriptor (in which case its return type is pushed).", "predict": "Push the abstract type onto the stack. If the descriptor starts with an opening parenthesis, then the type descriptor is an abstract type. In this case, the abstract type is pushed onto the stack. If the descriptor starts with a closing parenthesis, then the type descriptor is an array type. In this case, the type descriptor is pushed onto the stack, followed by the number of dimensions. If the descriptor is neither an abstract type nor an array type, then the descriptor is treated as a primitive type. In this case, the descriptor is pushed onto the stack, followed by the TOP instruction. @param symbolTable The symbol table to use. @param descriptor The descriptor to push onto the stack."}
{"ID": 1619, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void pop(final int elements) { if (outputStackTop >= elements) { outputStackTop -= elements; } else { // If the number of elements to be popped is greater than the number of elements in the output // stack, clear it, and pop the remaining elements from the input stack. outputStackStart -= elements - outputStackTop; outputStackTop = 0; } }. ### Assistant:", "ground_truth": "Pops the given number of abstract types from the output frame stack.\n\n@param elements the number of abstract types that must be popped.", "predict": "Pops elements from the output stack. The number of elements to pop is determined by the number of elements remaining in the input stack. If the number of elements remaining in the input stack is greater than the number of elements to be popped, the input stack is cleared, and the remaining elements are popped from the input stack."}
{"ID": 1620, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void pop(final String descriptor) { char firstDescriptorChar = descriptor.charAt(0); if (firstDescriptorChar == '(') { pop((Type.getArgumentsAndReturnSizes(descriptor) >> 2) - 1); } else if (firstDescriptorChar == 'J' || firstDescriptorChar == 'D') { pop(2); } else { pop(1); } }. ### Assistant:", "ground_truth": "Pops as many abstract types from the output frame stack as described by the given descriptor.\n\n@param descriptor a type or method descriptor (in which case its argument types are popped).", "predict": "Pop a descriptor from the stack. The descriptor is popped from the stack, and the size of the popped descriptor is pushed onto the stack. If the popped descriptor is a function signature, the number of arguments and the size of the return value is pushed onto the stack. If the popped descriptor is a data descriptor, the size of the popped descriptor is pushed onto the stack. If the popped descriptor is a primitive type, the size of the popped descriptor is pushed onto the stack. If the popped descriptor is a composite type, the size of the popped descriptor is pushed onto the stack. If the popped descriptor is a reference type, the size of the popped descriptor is pushed onto the stack. If the popped descriptor is a method signature, the number of arguments and the size of the return value is pushed onto the stack. If the popped descriptor is a field signature, the size of the popped descriptor is pushed onto the stack. If"}
{"ID": 1621, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void addInitializedType(final int abstractType) { // Create and/or resize the initializations array if necessary. if (initializations == null) { initializations = new int[2]; } int initializationsLength = initializations.length; if (initializationCount >= initializationsLength) { int[] newInitializations = new int[Math.max(initializationCount + 1, 2 * initializationsLength)]; System.arraycopy(initializations, 0, newInitializations, 0, initializationsLength); initializations = newInitializations; } // Store the abstract type. initializations[initializationCount++] = abstractType; }. ### Assistant:", "ground_truth": "Adds an abstract type to the list of types on which a constructor is invoked in the basic\nblock.\n\n@param abstractType an abstract type on a which a constructor is invoked.", "predict": "Add an initialized type to the list. @param abstractType The abstract type to add."}
{"ID": 1622, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private int getInitializedType(final SymbolTable symbolTable, final int abstractType) { if (abstractType == UNINITIALIZED_THIS || (abstractType & (DIM_MASK | KIND_MASK)) == UNINITIALIZED_KIND) { for (int i = 0; i < initializationCount; ++i) { int initializedType = initializations[i]; int dim = initializedType & DIM_MASK; int kind = initializedType & KIND_MASK; int value = initializedType & VALUE_MASK; if (kind == LOCAL_KIND) { initializedType = dim + inputLocals[value]; } else if (kind == STACK_KIND) { initializedType = dim + inputStack[inputStack.length - value]; } if (abstractType == initializedType) { if (abstractType == UNINITIALIZED_THIS) { return REFERENCE_KIND | symbolTable.addType(symbolTable.getClassName()); } else { return REFERENCE_KIND | symbolTable.addType(symbolTable.getType(abstractType & VALUE_MASK).value); } } } } return abstractType; }. ### Assistant:", "ground_truth": "Returns the \"initialized\" abstract type corresponding to the given abstract type.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param abstractType an abstract type.\n@return the REFERENCE_KIND abstract type corresponding to abstractType if it is\nUNINITIALIZED_THIS or an UNINITIALIZED_KIND abstract type for one of the types on which a\nconstructor is invoked in the basic block. Otherwise returns abstractType.", "predict": "Returns the initialized type of the given abstract type. The abstract type is considered initialized if it has been assigned a value. The value is either a local variable, a stack slot or a reference to a class. The returned type is the same as the abstract type, except for the reference kind. The reference kind is set to REFERENCE_KIND. @param symbolTable the symbol table @param abstractType the abstract type @return the initialized type of the abstract type"}
{"ID": 1623, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: static void putAbstractType( final SymbolTable symbolTable, final int abstractType, final ByteVector output) { int arrayDimensions = (abstractType & Frame.DIM_MASK) >> DIM_SHIFT; if (arrayDimensions == 0) { int typeValue = abstractType & VALUE_MASK; switch (abstractType & KIND_MASK) { case CONSTANT_KIND: output.putByte(typeValue); break; case REFERENCE_KIND: output .putByte(ITEM_OBJECT) .putShort(symbolTable.addConstantClass(symbolTable.getType(typeValue).value).index); break; case UNINITIALIZED_KIND: output.putByte(ITEM_UNINITIALIZED).putShort((int) symbolTable.getType(typeValue).data); break; default: throw new AssertionError(); } } else { // Case of an array type, we need to build its descriptor first. StringBuilder typeDescriptor = new StringBuilder(); while (arrayDimensions-- > 0) { typeDescriptor.append('['); } if ((abstractType & KIND_MASK) == REFERENCE_KIND) { typeDescriptor .append('L') .append(symbolTable.getType(abstractType & VALUE_MASK).value) .append(';'); } else { switch (abstractType & VALUE_MASK) { case Frame.ITEM_ASM_BOOLEAN: typeDescriptor.append('Z'); break; case Frame.ITEM_ASM_BYTE: typeDescriptor.append('B'); break; case Frame.ITEM_ASM_CHAR: typeDescriptor.append('C'); break; case Frame.ITEM_ASM_SHORT: typeDescriptor.append('S'); break; case Frame.ITEM_INTEGER: typeDescriptor.append('I'); break; case Frame.ITEM_FLOAT: typeDescriptor.append('F'); break; case Frame.ITEM_LONG: typeDescriptor.append('J'); break; case Frame.ITEM_DOUBLE: typeDescriptor.append('D'); break; default: throw new AssertionError(); } } output .putByte(ITEM_OBJECT) .putShort(symbolTable.addConstantClass(typeDescriptor.toString()).index); } }. ### Assistant:", "ground_truth": "Put the given abstract type in the given ByteVector, using the JVMS verification_type_info\nformat used in StackMapTable attributes.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param abstractType an abstract type, restricted to {@link Frame#CONSTANT_KIND}, {@link\nFrame#REFERENCE_KIND} or {@link Frame#UNINITIALIZED_KIND} types.\n@param output where the abstract type must be put.\n@see <a href=\"https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.4\">JVMS\n4.7.4</a>", "predict": "Put the abstract type in the output vector. @param symbolTable the symbol table. @param abstractType the abstract type. @param output the output vector."}
{"ID": 1624, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override protected int pruneCache() { int count = 0; Iterator<CacheObject<K,V>> values = cacheMap.values().iterator(); while (values.hasNext()) { CacheObject co = values.next(); if (co.isExpired()) { values.remove(); count++; } } return count; }. ### Assistant:", "ground_truth": "Prunes expired elements from the cache. Returns the number of removed objects.", "predict": "Removes expired cache objects."}
{"ID": 1625, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void schedulePrune(final long delay) { if (pruneTimer != null) { pruneTimer.cancel(); } pruneTimer = new Timer(); pruneTimer.schedule( new TimerTask() { @Override public void run() { prune(); } }, delay, delay ); }. ### Assistant:", "ground_truth": "Schedules prune.", "predict": "Schedule a prune operation to run after the specified delay. @param delay delay before prune operation is run."}
{"ID": 1626, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ModuleVisitor visitModule(final String name, final int access, final String version) { if (api < Opcodes.ASM6) { throw new UnsupportedOperationException(\"This feature requires ASM6\"); } if (cv != null) { return cv.visitModule(name, access, version); } return null; }. ### Assistant:", "ground_truth": "Visit the module corresponding to the class.\n\n@param name the fully qualified name (using dots) of the module.\n@param access the module access flags, among {@code ACC_OPEN}, {@code ACC_SYNTHETIC} and {@code\nACC_MANDATED}.\n@param version the module version, or {@literal null}.\n@return a visitor to visit the module values, or {@literal null} if this visitor is not\ninterested in visiting this module.", "predict": "Visits a module. @param name the name of the module. @param access the access level of the module. @param version the version of the module. @return a visitor to visit the module."}
{"ID": 1627, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void visitNestHost(final String nestHost) { if (api < Opcodes.ASM7) { throw new UnsupportedOperationException(\"This feature requires ASM7\"); } if (cv != null) { cv.visitNestHost(nestHost); } }. ### Assistant:", "ground_truth": "Visits the nest host class of the class. A nest is a set of classes of the same package that\nshare access to their private members. One of these classes, called the host, lists the other\nmembers of the nest, which in turn should link to the host of their nest. This method must be\ncalled only once and only if the visited class is a non-host member of a nest. A class is\nimplicitly its own nest, so it's invalid to call this method with the visited class name as\nargument.\n\n@param nestHost the internal name of the host class of the nest.", "predict": "Visits a nest host instruction. @param nestHost the nest host instruction."}
{"ID": 1628, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void visitOuterClass(final String owner, final String name, final String descriptor) { if (cv != null) { cv.visitOuterClass(owner, name, descriptor); } }. ### Assistant:", "ground_truth": "Visits the enclosing class of the class. This method must be called only if the class has an\nenclosing class.\n\n@param owner internal name of the enclosing class of the class.\n@param name the name of the method that contains the class, or {@literal null} if the class is\nnot enclosed in a method of its enclosing class.\n@param descriptor the descriptor of the method that contains the class, or {@literal null} if\nthe class is not enclosed in a method of its enclosing class.", "predict": "Visits an outer class. @param owner the outer class's owner class's name @param name the outer class's name @param descriptor the outer class's descriptor"}
{"ID": 1629, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) { if (cv != null) { return cv.visitAnnotation(descriptor, visible); } return null; }. ### Assistant:", "ground_truth": "Visits an annotation of the class.\n\n@param descriptor the class descriptor of the annotation class.\n@param visible {@literal true} if the annotation is visible at runtime.\n@return a visitor to visit the annotation values, or {@literal null} if this visitor is not\ninterested in visiting this annotation.", "predict": "Visits an annotation of the method. @param descriptor the type descriptor of the annotation. @param visible whether the annotation is visible or not. @return an AnnotationVisitor to visit the annotation."}
{"ID": 1630, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void visitNestMember(final String nestMember) { if (api < Opcodes.ASM7) { throw new UnsupportedOperationException(\"This feature requires ASM7\"); } if (cv != null) { cv.visitNestMember(nestMember); } }. ### Assistant:", "ground_truth": "Visits a member of the nest. A nest is a set of classes of the same package that share access\nto their private members. One of these classes, called the host, lists the other members of the\nnest, which in turn should link to the host of their nest. This method must be called only if\nthe visited class is the host of a nest. A nest host is implicitly a member of its own nest, so\nit's invalid to call this method with the visited class name as argument.\n\n@param nestMember the internal name of a nest member.", "predict": "Visits a nest Member. @param nestMember the nest Member to visit."}
{"ID": 1631, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void visitInnerClass( final String name, final String outerName, final String innerName, final int access) { if (cv != null) { cv.visitInnerClass(name, outerName, innerName, access); } }. ### Assistant:", "ground_truth": "Visits information about an inner class. This inner class is not necessarily a member of the\nclass being visited.\n\n@param name the internal name of an inner class (see {@link Type#getInternalName()}).\n@param outerName the internal name of the class to which the inner class belongs (see {@link\nType#getInternalName()}). May be {@literal null} for not member classes.\n@param innerName the (simple) name of the inner class inside its enclosing class. May be\n{@literal null} for anonymous inner classes.\n@param access the access flags of the inner class as originally declared in the enclosing\nclass.", "predict": "Visits an inner class. @param name the internal name of the class. @param outerName the internal name of the outer class. @param innerName the internal name of the inner class. @param access the access flags of the inner class."}
{"ID": 1632, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public FieldVisitor visitField( final int access, final String name, final String descriptor, final String signature, final Object value) { if (cv != null) { return cv.visitField(access, name, descriptor, signature, value); } return null; }. ### Assistant:", "ground_truth": "Visits a field of the class.\n\n@param access the field's access flags (see {@link Opcodes}). This parameter also indicates if\nthe field is synthetic and/or deprecated.\n@param name the field's name.\n@param descriptor the field's descriptor (see {@link Type}).\n@param signature the field's signature. May be {@literal null} if the field's type does not use\ngeneric types.\n@param value the field's initial value. This parameter, which may be {@literal null} if the\nfield does not have an initial value, must be an {@link Integer}, a {@link Float}, a {@link\nLong}, a {@link Double} or a {@link String} (for {@code int}, {@code float}, {@code long}\nor {@code String} fields respectively). <i>This parameter is only used for static\nfields</i>. Its value is ignored for non static fields, which must be initialized through\nbytecode instructions in constructors or methods.\n@return a visitor to visit field annotations and attributes, or {@literal null} if this class\nvisitor is not interested in visiting these annotations and attributes.", "predict": "Visits a field. @param access the access flags of the field. @param name the name of the field. @param descriptor the descriptor of the field. @param signature the signature of the field. @param value the initial value of the field. @return a FieldVisitor to visit the field."}
{"ID": 1633, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static DbThreadSession getThreadSession() { DbThreadSession session = (DbThreadSession) ThreadDbSessionHolder.get(); if (session == null) { session = new DbThreadSession(); } return session; }. ### Assistant:", "ground_truth": "Returns existing thread session, or new one if already not exist. If session doesn't exist, it will be created\nusing default connection provider.", "predict": "Get the DbThreadSession. @return DbThreadSession"}
{"ID": 1634, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void closeThreadSession() { DbThreadSession session = (DbThreadSession) ThreadDbSessionHolder.get(); if (session != null) { session.closeSession(); } }. ### Assistant:", "ground_truth": "Closes thread session.", "predict": "Close the current thread session."}
{"ID": 1635, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected ActionWrapper[] createExecutionArray() { int totalInterceptors = (this.actionRuntime.getInterceptors() != null ? this.actionRuntime.getInterceptors().length : 0); int totalFilters = (this.actionRuntime.getFilters() != null ? this.actionRuntime.getFilters().length : 0); ActionWrapper[] executionArray = new ActionWrapper[totalFilters + 1 + totalInterceptors + 1]; // filters int index = 0; if (totalFilters > 0) { System.arraycopy(actionRuntime.getFilters(), 0, executionArray, index, totalFilters); index += totalFilters; } // result is executed AFTER the action AND interceptors executionArray[index++] = actionRequest -> { Object actionResult = actionRequest.invoke(); ActionRequest.this.madvocController.render(ActionRequest.this, actionResult); return actionResult; }; // interceptors if (totalInterceptors > 0) { System.arraycopy(actionRuntime.getInterceptors(), 0, executionArray, index, totalInterceptors); index += totalInterceptors; } // action executionArray[index] = actionRequest -> { actionResult = invokeActionMethod(); return actionResult; }; return executionArray; }. ### Assistant:", "ground_truth": "Creates execution array that will invoke all filters, actions and results\nin correct order.", "predict": "Create the execution array. @return the action array."}
{"ID": 1636, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Object invokeActionMethod() throws Exception { if (actionRuntime.isActionHandlerDefined()) { actionRuntime.getActionHandler().handle(this); return null; } final Object[] params = targets.extractParametersValues(); try { return actionRuntime.getActionClassMethod().invoke(action, params); } catch(InvocationTargetException itex) { throw wrapToException(unwrapThrowable(itex)); } }. ### Assistant:", "ground_truth": "Invokes action method after starting all interceptors.\nAfter method invocation, all interceptors will finish, in opposite order.", "predict": "Invokes the action method. @return the result of the action method. @throws Exception if the action method throws an exception."}
{"ID": 1637, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String readRequestBody() { if (requestBody == null) { try { requestBody = ServletUtil.readRequestBodyFromStream(getHttpServletRequest()); } catch (IOException ioex) { requestBody = StringPool.EMPTY; } } return requestBody; }. ### Assistant:", "ground_truth": "Reads request body only once and returns it to user.", "predict": "Reads the request body. @return the request body"}
{"ID": 1638, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int calcFirstItemIndexOfPage(int page, final int pageSize, final int total) { if (total == 0) { return 0; } if (page < 1) { page = 1; } int first = (page - 1) * pageSize; if (first >= total) { first = ((total - 1) / pageSize) * pageSize; // first item on the last page } return first; }. ### Assistant:", "ground_truth": "Calculates the first item index of requested page.", "predict": "Calculate the index of the first item of the page. @param page The page number. @param pageSize The page size. @param total The total number of items. @return The index of the first item of the page."}
{"ID": 1639, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int calcFirstItemIndexOfPage(final PageRequest pageRequest, final int total) { return calcFirstItemIndexOfPage(pageRequest.getPage(), pageRequest.getSize(), total); }. ### Assistant:", "ground_truth": "Calculates first item index of the page.", "predict": "Calculates the first item index of the page. @param pageRequest page request @param total total items count @return first item index of the page"}
{"ID": 1640, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean match(final int value) { if (a == 0) { return value == b; } if (a > 0) { if (value < b) { return false; } return (value - b) % a == 0; } if (value > b) { return false; } return (b - value) % (-a) == 0; }. ### Assistant:", "ground_truth": "Matches expression with the value.", "predict": "Determines if the given value is a valid value for this BigInteger. @param value the value to test @return true if the value is a valid value, false otherwise"}
{"ID": 1641, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static byte[] toRawByteArray(final char[] carr) { byte[] barr = new byte[carr.length << 1]; for (int i = 0, bpos = 0; i < carr.length; i++) { char c = carr[i]; barr[bpos++] = (byte) ((c & 0xFF00) >> 8); barr[bpos++] = (byte) (c & 0x00FF); } return barr; }. ### Assistant:", "ground_truth": "Converts char array into byte array by replacing each character with two bytes.", "predict": "Convert a char array to a byte array. @param carr the char array to convert @return the byte array"}
{"ID": 1642, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int findFirstDiff(final char[] source, final int index, final char[] match) { for (int i = index; i < source.length; i++) { if (!equalsOne(source[i], match)) { return i; } } return -1; }. ### Assistant:", "ground_truth": "Finds index of the first character in given array the differs from the\ngiven set of characters.\n\n@return index of matched character or -1", "predict": "Finds the first difference between the characters in the source and match arrays. If the characters are equal, the method returns -1. @param source the source characters @param index the index of the first character in the source array @param match the match characters @return the index of the first difference or -1 if the characters are equal"}
{"ID": 1643, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String resolveNodeName(final Node node) { switch (tagCase) { case DEFAULT: return node.getNodeName(); case RAW: return node.getNodeRawName(); case LOWERCASE: return node.getNodeRawName().toLowerCase(); case UPPERCASE: return node.getNodeRawName().toUpperCase(); } return null; }. ### Assistant:", "ground_truth": "Renders node name.", "predict": "Resolve node name. @param node Node @return Node name"}
{"ID": 1644, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String resolveAttributeName(final Node node, final Attribute attribute) { switch (attributeCase) { case DEFAULT: return attribute.getName(); case RAW: return attribute.getRawName(); case LOWERCASE: return attribute.getRawName().toLowerCase(); case UPPERCASE: return attribute.getRawName().toUpperCase(); } return null; }. ### Assistant:", "ground_truth": "Renders attribute name.", "predict": "Resolve the attribute name. @param node the node @param attribute the attribute @return the attribute name"}
{"ID": 1645, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void renderAttribute(final Node node, final Attribute attribute, final Appendable appendable) throws IOException { String name = resolveAttributeName(node, attribute); String value = attribute.getValue(); appendable.append(name); if (value != null) { appendable.append('='); appendable.append('\\\"'); appendable.append(HtmlEncoder.attributeDoubleQuoted(value)); appendable.append('\\\"'); } }. ### Assistant:", "ground_truth": "Renders attribute.", "predict": "Render an HTML attribute. @param node the node to render @param attribute the attribute to render @param appendable the appendable to render to @throws IOException if an error occurs while rendering the attribute"}
{"ID": 1646, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Props load(final File file) throws IOException { final String extension = FileNameUtil.getExtension(file.getAbsolutePath()); final String data; if (extension.equalsIgnoreCase(\"properties\")) { data = FileUtil.readString(file, StringPool.ISO_8859_1); } else { data = FileUtil.readString(file); } parse(data); return this; }. ### Assistant:", "ground_truth": "Loads props from the file. Assumes UTF8 encoding unless\nthe file ends with '.properties', than it uses ISO 8859-1.", "predict": "Load properties from file. @param file File to load from. @return Properties loaded from file. @throws IOException If failed to read file."}
{"ID": 1647, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Props load(final File file, final String encoding) throws IOException { parse(FileUtil.readString(file, encoding)); return this; }. ### Assistant:", "ground_truth": "Loads properties from the file in provided encoding.", "predict": "Load props from a file. @param file the file to load from @param encoding the encoding of the file @return the loaded props @throws IOException if the file cannot be read"}
{"ID": 1648, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Props load(final InputStream in) throws IOException { final Writer out = new FastCharArrayWriter(); StreamUtil.copy(in, out); parse(out.toString()); return this; }. ### Assistant:", "ground_truth": "Loads properties from input stream. Stream is not closed at the end.", "predict": "Load props from an InputStream. The props are read from the stream and then parsed. @param in InputStream to read from @return Props @throws IOException if the stream fails to read properly"}
{"ID": 1649, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Props load(final Map<?, ?> p) { for (final Map.Entry<?, ?> entry : p.entrySet()) { final String name = entry.getKey().toString(); final Object value = entry.getValue(); if (value == null) { continue; } data.putBaseProperty(name, value.toString(), false); } return this; }. ### Assistant:", "ground_truth": "Loads base properties from the provided java properties.\nNull values are ignored.", "predict": "Load properties from a map. @param p Map of properties to load. @return This props object."}
{"ID": 1650, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") public Props load(final Map<?, ?> map, final String prefix) { String realPrefix = prefix; realPrefix += '.'; for (final Map.Entry entry : map.entrySet()) { final String name = entry.getKey().toString(); final Object value = entry.getValue(); if (value == null) { continue; } data.putBaseProperty(realPrefix + name, value.toString(), false); } return this; }. ### Assistant:", "ground_truth": "Loads base properties from java Map using provided prefix.\nNull values are ignored.", "predict": "Load properties from a map. The prefix is prepended to the property names. @param map Map of properties to load. @param prefix Prefix to prepend to the property names. @return This props object."}
{"ID": 1651, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Props loadFromClasspath(final String... patterns) { ClassScanner.create() .registerEntryConsumer(entryData -> { String usedEncoding = JoddCore.encoding; if (StringUtil.endsWithIgnoreCase(entryData.name(), \".properties\")) { usedEncoding = StringPool.ISO_8859_1; } final String encoding = usedEncoding; UncheckedException.runAndWrapException(() -> load(entryData.openInputStream(), encoding)); }) .includeResources(true) .ignoreException(true) .excludeCommonJars() .excludeAllEntries(true) .includeEntries(patterns) .scanDefaultClasspath() .start(); return this; }. ### Assistant:", "ground_truth": "Loads props and properties from the classpath.", "predict": "Load all properties files from classpath. @param patterns patterns to load @return props @throws IOException"}
{"ID": 1652, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String getValueOrDefault(final String key, final String defaultValue) { initialize(); final String value = data.lookupValue(key, activeProfiles); if (value == null) { return defaultValue; } return value; }. ### Assistant:", "ground_truth": "Returns value of property, using active profiles or default value if not found.", "predict": "Returns the value associated with the specified key, or the default value if the key is not found. @param key the key to look up @param defaultValue the default value to return if the key is not found @return the value associated with the specified key, or the default value if the key is not found"}
{"ID": 1653, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void setValue(final String key, final String value, final String profile) { if (profile == null) { data.putBaseProperty(key, value, false); } else { data.putProfileProperty(key, value, profile, false); } initialized = false; }. ### Assistant:", "ground_truth": "Sets value on some profile.", "predict": "Set a value for a property. The property is either added to the base properties or to the profile properties depending on the value of the profile parameter. The profile parameter is optional. If it is not present, the property is added to the base properties. If it is present, the property is added to the profile properties. The profile parameter is optional. If it is not present, the property is added to the base properties. If it is present, the property is added to the profile properties. @param key the property key @param value the property value @param profile the profile name"}
{"ID": 1654, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void extractProps(final Map target) { initialize(); data.extract(target, activeProfiles, null, null); }. ### Assistant:", "ground_truth": "Extracts props belonging to active profiles.", "predict": "Extract properties from the configuration. @param target the target map where the properties will be stored."}
{"ID": 1655, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void extractProps(final Map target, final String... profiles) { initialize(); data.extract(target, profiles, null, null); }. ### Assistant:", "ground_truth": "Extract props of given profiles.", "predict": "Extract properties from the configuration file into the target map. The profiles are used to select the configuration file to be loaded. If no profiles are specified, the default profile is used. @param target the target map @param profiles the profiles to use for selecting the configuration file."}
{"ID": 1656, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void extractSubProps(final Map target, final String... wildcardPatterns) { initialize(); data.extract(target, activeProfiles, wildcardPatterns, null); }. ### Assistant:", "ground_truth": "Extracts subset of properties that matches given wildcards.", "predict": "Extracts all sub-properties from the specified profiles. The wildcard patterns are used to match the sub-properties. The wildcard patterns are case-sensitive. The wildcard patterns are applied recursively. The wildcard patterns are applied to the profiles specified in the active profiles. The wildcard patterns are applied to all profiles. The wildcard patterns are applied to the profiles specified in the profiles. The wildcard patterns are applied to all profiles. The wildcard patterns are applied to the profiles specified in the profiles. The wildcard patterns are applied to all profiles. The wildcard patterns are applied to the profiles specified in the profiles. The wildcard patterns are applied to all profiles. The wildcard patterns are applied to the profiles specified in the profiles. The wildcard patterns are applied to all profiles. The wildcard patterns are applied to the profiles specified in the profiles. The wildcard patterns are applied to all profiles. The wildcard patterns are applied to the profiles specified in the profiles. The wildcard patterns are applied to all profiles. The wildcard"}
{"ID": 1657, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") public Map<String, Object> innerMap(final String prefix) { initialize(); return data.extract(null, activeProfiles, null, prefix); }. ### Assistant:", "ground_truth": "Returns inner map from the props with given prefix. Keys in returned map\nwill not have the prefix.", "predict": "Returns a map containing all the inner maps of the current JSON tree. The keys of the returned map are the keys of the inner maps, and the values are the values of the inner maps. The prefix parameter is used to filter the keys of the returned map. If the prefix is not found, the key is returned as is. @param prefix the prefix to filter the keys of the returned map. @return the map containing all the inner maps of the current JSON tree."}
{"ID": 1658, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void addInnerMap(String prefix, final Map<?, ?> map, final String profile) { if (!StringUtil.endsWithChar(prefix, '.')) { prefix += StringPool.DOT; } for (Map.Entry<?, ?> entry : map.entrySet()) { String key = entry.getKey().toString(); key = prefix + key; setValue(key, entry.getValue().toString(), profile); } }. ### Assistant:", "ground_truth": "Adds child map to the props on given prefix.", "predict": "Add inner map. @param prefix prefix. @param map map. @param profile profile."}
{"ID": 1659, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void resolveActiveProfiles() { if (activeProfilesProp == null) { activeProfiles = null; return; } final PropsEntry pv = data.getBaseProperty(activeProfilesProp); if (pv == null) { // no active profile set as the property, exit return; } final String value = pv.getValue(); if (StringUtil.isBlank(value)) { activeProfiles = null; return; } activeProfiles = StringUtil.splitc(value, ','); StringUtil.trimAll(activeProfiles); }. ### Assistant:", "ground_truth": "Resolves active profiles from special property.\nThis property can be only a base property!\nIf default active property is not defined, nothing happens.\nOtherwise, it will replace currently active profiles.", "predict": "Resolves the active profiles."}
{"ID": 1660, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String[] getAllProfiles() { String[] profiles = new String[data.profileProperties.size()]; int index = 0; for (String profileName : data.profileProperties.keySet()) { profiles[index] = profileName; index++; } return profiles; }. ### Assistant:", "ground_truth": "Returns all profiles names.", "predict": "Returns all profiles defined in the configuration. @return all profiles defined in the configuration."}
{"ID": 1661, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String[] getProfilesFor(final String propKeyNameWildcard) { HashSet<String> profiles = new HashSet<>(); profile: for (Map.Entry<String, Map<String, PropsEntry>> entries : data.profileProperties.entrySet()) { String profileName = entries.getKey(); Map<String, PropsEntry> value = entries.getValue(); for (String propKeyName : value.keySet()) { if (Wildcard.equalsOrMatch(propKeyName, propKeyNameWildcard)) { profiles.add(profileName); continue profile; } } } return profiles.toArray(new String[0]); }. ### Assistant:", "ground_truth": "Returns all the profiles that define certain prop's key name.\nKey name is given as a wildcard, or it can be matched fully.", "predict": "Returns the profiles that match the wildcard. @param propKeyNameWildcard Wildcard for the property name. @return The profiles that match the wildcard."}
{"ID": 1662, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void addPropertyInjectionPoint(final PropertyInjectionPoint pip) { if (properties == null) { properties = new PropertyInjectionPoint[1]; properties[0] = pip; } else { properties = ArraysUtil.append(properties, pip); } }. ### Assistant:", "ground_truth": "Adds property injection point.", "predict": "Adds a PropertyInjectionPoint to the list of PropertyInjectionPoints. If the list is already non-empty, the new PropertyInjectionPoint is added to the end. Otherwise, the new PropertyInjectionPoint is prepended to the list. @param pip the PropertyInjectionPoint to add."}
{"ID": 1663, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void addSetInjectionPoint(final SetInjectionPoint sip) { if (sets == null) { sets = new SetInjectionPoint[1]; sets[0] = sip; } else { sets = ArraysUtil.append(sets, sip); } }. ### Assistant:", "ground_truth": "Adds set injection point.", "predict": "Add a set injection point. @param sip Set injection point."}
{"ID": 1664, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void addMethodInjectionPoint(final MethodInjectionPoint mip) { if (methods == null) { methods = new MethodInjectionPoint[1]; methods[0] = mip; } else { methods = ArraysUtil.append(methods, mip); } }. ### Assistant:", "ground_truth": "Adds method injection point.", "predict": "Adds a method injection point to the list of method injection points. The method injection point is added to the end of the list. @param mip the method injection point to add."}
{"ID": 1665, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void addInitMethodPoints(final InitMethodPoint[] methods) { if (initMethods == null) { initMethods = methods; } else { initMethods = ArraysUtil.join(initMethods, methods); } }. ### Assistant:", "ground_truth": "Adds init methods.", "predict": "Adds the method points to the list of method points. @param methods the method points to add."}
{"ID": 1666, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void addDestroyMethodPoints(final DestroyMethodPoint[] methods) { if (destroyMethods == null) { destroyMethods = methods; } else { destroyMethods = ArraysUtil.join(destroyMethods, methods); } }. ### Assistant:", "ground_truth": "Adds destroy methods.", "predict": "Add destroy method points. @param methods destroy method points."}
{"ID": 1667, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Class resolveTargetClass(final Class proxy) { final String name = proxy.getName(); if (name.endsWith(ProxettaNames.proxyClassNameSuffix)) { return proxy.getSuperclass(); } if (name.endsWith(ProxettaNames.wrapperClassNameSuffix)) { return getTargetWrapperType(proxy); } return proxy; }. ### Assistant:", "ground_truth": "Returns target class if proxetta applied on given class.\nIf not, returns given class as result.", "predict": "Resolve the target class of a given proxy. @param proxy the proxy instance @return the target class of the proxy, or the proxy itself if it's not a proxy."}
{"ID": 1668, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void injectTargetIntoWrapper(final Object target, final Object wrapper) { injectTargetIntoWrapper(target, wrapper, ProxettaNames.wrapperTargetFieldName); }. ### Assistant:", "ground_truth": "Injects target instance into proxy using default target field name.\n@see #injectTargetIntoWrapper(Object, Object, String)", "predict": "Injects the target object into the wrapper object. The target object is injected into the wrapper object's target field. The target field is named \"target\" by convention, but can be customized by providing a custom field name. @param target the target object @param wrapper the wrapper object"}
{"ID": 1669, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Class getTargetWrapperType(final Class wrapperClass) { try { final Field field = wrapperClass.getDeclaredField(ProxettaNames.wrapperTargetFieldName); return field.getType(); } catch (NoSuchFieldException nsfex) { throw new ProxettaException(nsfex); } }. ### Assistant:", "ground_truth": "Returns wrapper target type.", "predict": "Get the target class of the given wrapper class. @param wrapperClass the wrapper class @return the target class of the given wrapper class."}
{"ID": 1670, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected FieldDescriptor findField(final String fieldName) { FieldDescriptor fieldDescriptor = classDescriptor.getFieldDescriptor(fieldName, true); if (fieldDescriptor != null) { return fieldDescriptor; } // field descriptor not found in this class // try to locate it in the superclasses Class[] superclasses = classDescriptor.getAllSuperclasses(); for (Class superclass : superclasses) { ClassDescriptor classDescriptor = ClassIntrospector.get().lookup(superclass); fieldDescriptor = classDescriptor.getFieldDescriptor(fieldName, true); if (fieldDescriptor != null) { return fieldDescriptor; } } // nothing found return null; }. ### Assistant:", "ground_truth": "Locates property field. Field is being searched also in all\nsuperclasses of current class.", "predict": "Finds a FieldDescriptor for the given fieldName. If the fieldName is not found in this class, it searches recursively in the superclasses. If the fieldName is found in a superclass, the FieldDescriptor is returned. If the fieldName is not found in any superclass, null is returned."}
{"ID": 1671, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Class getType() { if (type == null) { if (fieldDescriptor != null) { type = fieldDescriptor.getRawType(); } else if (readMethodDescriptor != null) { type = getGetter(true).getGetterRawType(); //type = readMethodDescriptor.getGetterRawType(); } else if (writeMethodDescriptor != null) { type = getSetter(true).getSetterRawType(); //type = writeMethodDescriptor.getSetterRawType(); } } return type; }. ### Assistant:", "ground_truth": "Returns property type. Raw types are detected.", "predict": "Returns the type of the field."}
{"ID": 1672, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Class resolveKeyType(final boolean declared) { Class keyType = null; Getter getter = getGetter(declared); if (getter != null) { keyType = getter.getGetterRawKeyComponentType(); } if (keyType == null) { FieldDescriptor fieldDescriptor = getFieldDescriptor(); if (fieldDescriptor != null) { keyType = fieldDescriptor.getRawKeyComponentType(); } } return keyType; }. ### Assistant:", "ground_truth": "Resolves key type for given property descriptor.", "predict": "Resolves the type of the key component. If the key component is declared in the message, it is resolved using the getter. If not, it is resolved using the field descriptor."}
{"ID": 1673, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Class resolveComponentType(final boolean declared) { Class componentType = null; Getter getter = getGetter(declared); if (getter != null) { componentType = getter.getGetterRawComponentType(); } if (componentType == null) { FieldDescriptor fieldDescriptor = getFieldDescriptor(); if (fieldDescriptor != null) { componentType = fieldDescriptor.getRawComponentType(); } } return componentType; }. ### Assistant:", "ground_truth": "Resolves component type for given property descriptor.", "predict": "Returns the component type of the getter or field descriptor. If the component type is not yet known, it is resolved by calling the getter or field descriptor."}
{"ID": 1674, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static JsonResult of(final Object object) { final String json = JsonSerializer.create().deep(true).serialize(object); return new JsonResult(json); }. ### Assistant:", "ground_truth": "Creates JSON result from given object. The object will be serialized to JSON.", "predict": "Serialize an object to JSON. @param object Object to serialize. @return JsonResult with the serialized JSON."}
{"ID": 1675, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static JsonResult of(final Exception exception) { final HashMap<String, Object> errorMap = new HashMap<>(); errorMap.put(\"message\", ExceptionUtil.message(exception)); errorMap.put(\"error\", exception.getClass().getName()); errorMap.put(\"cause\", exception.getCause() != null ? exception.getCause().getClass().getName() : null); final ArrayList<String> details = new ArrayList<>(); final StackTraceElement[] ste = ExceptionUtil.getStackTrace(exception, null, null); for (StackTraceElement stackTraceElement : ste) { details.add(stackTraceElement.toString()); } errorMap.put(\"details\", details); final String json = JsonSerializer.create().deep(true).serialize(errorMap); return new JsonResult(json).status(HttpStatus.error500().internalError()); }. ### Assistant:", "ground_truth": "Creates a JSON response from an exception. Response body will have information about the\nexception and response status will be set to 500.", "predict": "Convert exception to json result. @param exception exception to convert @return json result"}
{"ID": 1676, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String resolveHttpMethodFromMethodName(final String methodName) { int i = 0; while (i < methodName.length()) { if (CharUtil.isUppercaseAlpha(methodName.charAt(i))) { break; } i++; } final String name = methodName.substring(0, i).toUpperCase(); for (final HttpMethod httpMethod : HttpMethod.values()) { if (httpMethod.equalsName(name)) { return httpMethod.name(); } } return null; }. ### Assistant:", "ground_truth": "Resolves HTTP method name from method name.\nIf method name or first camel-case word of a method equals to\na HTTP method, it will be used as that HTTP methods.", "predict": "Determines the HTTP method from the method name. @param methodName the method name @return the HTTP method"}
{"ID": 1677, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static boolean match(final CharSequence string, final CharSequence pattern, int sNdx, int pNdx) { int pLen = pattern.length(); if (pLen == 1) { if (pattern.charAt(0) == '*') { // speed-up return true; } } int sLen = string.length(); boolean nextIsNotWildcard = false; while (true) { // check if end of string and/or pattern occurred if ((sNdx >= sLen)) { // end of string still may have pending '*' in pattern while ((pNdx < pLen) && (pattern.charAt(pNdx) == '*')) { pNdx++; } return pNdx >= pLen; } if (pNdx >= pLen) { // end of pattern, but not end of the string return false; } char p = pattern.charAt(pNdx); // pattern char // perform logic if (!nextIsNotWildcard) { if (p == '\\\\') { pNdx++; nextIsNotWildcard = true; continue; } if (p == '?') { sNdx++; pNdx++; continue; } if (p == '*') { char pNext = 0; // next pattern char if (pNdx + 1 < pLen) { pNext = pattern.charAt(pNdx + 1); } if (pNext == '*') { // double '*' have the same effect as one '*' pNdx++; continue; } int i; pNdx++; // find recursively if there is any substring from the end of the // line that matches the rest of the pattern !!! for (i = string.length(); i >= sNdx; i--) { if (match(string, pattern, i, pNdx)) { return true; } } return false; } } else { nextIsNotWildcard = false; } // check if pattern char and string char are equals if (p != string.charAt(sNdx)) { return false; } // everything matches for now, continue sNdx++; pNdx++; } }. ### Assistant:", "ground_truth": "Internal matching recursive function.", "predict": "Match the given string against the given pattern. The matching is done character by character. The matching is done recursively. The method returns true if the entire string matches the pattern, false otherwise."}
{"ID": 1678, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Loading resolveLoading(final boolean parentFirstStrategy, final String className) { boolean withParent = true; boolean withLoader = true; if (parentFirstStrategy) { if (isMatchingRules(className, loaderOnlyRules)) { withParent = false; } else if (isMatchingRules(className, parentOnlyRules)) { withLoader = false; } } else { if (isMatchingRules(className, parentOnlyRules)) { withLoader = false; } else if (isMatchingRules(className, loaderOnlyRules)) { withParent = false; } } return new Loading(withParent, withLoader); }. ### Assistant:", "ground_truth": "Resolves loading rules.", "predict": "Resolve loading strategy. @param parentFirstStrategy Parent first strategy. @param className The className. @return The loading strategy."}
{"ID": 1679, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Loading resolveResourceLoading(final boolean parentFirstStrategy, String resourceName) { if (matchResourcesAsPackages) { resourceName = StringUtil.replaceChar(resourceName, '/', '.'); } return resolveLoading(parentFirstStrategy, resourceName); }. ### Assistant:", "ground_truth": "Resolves resources.", "predict": "Resolve resource loading strategy. @param parentFirstStrategy parent first strategy @param resourceName resource name @return loading strategy"}
{"ID": 1680, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override protected synchronized Class<?> loadClass(final String className, final boolean resolve) throws ClassNotFoundException { // check first if the class has already been loaded Class<?> c = findLoadedClass(className); if (c != null) { if (resolve) { resolveClass(c); } return c; } // class not loaded yet Loading loading = resolveLoading(parentFirst, className); if (parentFirst) { // PARENT FIRST if (loading.withParent) { try { c = parentClassLoader.loadClass(className); } catch (ClassNotFoundException ignore) { } } if (c == null) { if (loading.withLoader) { c = this.findClass(className); } else { throw new ClassNotFoundException(\"Class not found: \" + className); } } } else { // THIS FIRST if (loading.withLoader) { try { c = this.findClass(className); } catch (ClassNotFoundException ignore) { } } if (c == null) { if (loading.withParent) { c = parentClassLoader.loadClass(className); } else { throw new ClassNotFoundException(\"Class not found: \" + className); } } } if (resolve) { resolveClass(c); } return c; }. ### Assistant:", "ground_truth": "Loads class using parent-first or parent-last strategy.", "predict": "Load the class. If the class is already loaded, resolve it. If the class is not already loaded, load it. @param className the name of the class to load. @param resolve whether to resolve the class. @return the loaded class. @throws ClassNotFoundException if the class is not found."}
{"ID": 1681, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public URL getResource(final String resourceName) { URL url = null; Loading loading = resolveResourceLoading(parentFirst, resourceName); if (parentFirst) { // PARENT FIRST if (loading.withParent) { url = parentClassLoader.getResource(resourceName); } if (url == null) { if (loading.withLoader) { url = this.findResource(resourceName); } } } else { // THIS FIRST if (loading.withLoader) { url = this.findResource(resourceName); } if (url == null) { if (loading.withParent) { url = parentClassLoader.getResource(resourceName); } } } return url; }. ### Assistant:", "ground_truth": "Returns a resource using parent-first or parent-last strategy.", "predict": "Finds a resource by name. If the resource is not found, the parent classloader is searched for it. If it is still not found, the classloader of the application is searched for it. @param resourceName the name of the resource to find. @return the URL of the resource or null if it was not found."}
{"ID": 1682, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void waitFor() { try { synchronized (lock) { if (!end) { lock.wait(); } } } catch (InterruptedException ignore) { Thread.currentThread().interrupt(); } }. ### Assistant:", "ground_truth": "Waits for gobbler to end.", "predict": "Waits until the end of the simulation."}
{"ID": 1683, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Class<? extends Annotation> detectAnnotationType(final Annotation[] annotations) { for (final Annotation annotation : annotations) { if (annotation instanceof In) { return annotation.annotationType(); } else if (annotation instanceof Out) { return annotation.annotationType(); } } return null; }. ### Assistant:", "ground_truth": "Scans annotation and returns type of Madvoc annotations.", "predict": "Detect the type of the annotations. @param annotations the annotations to detect @return the type of the annotations"}
{"ID": 1684, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected InjectionPoint buildInjectionPoint( final String annotationValue, final String propertyName, final Class propertyType, final Class<? extends MadvocScope> scope) { final String value = annotationValue.trim(); final String name, targetName; if (StringUtil.isNotBlank(value)) { name = value; targetName = propertyName; } else { name = propertyName; targetName = null; } return new InjectionPoint(propertyType, name, targetName, scopeResolver.defaultOrScopeType(scope)); }. ### Assistant:", "ground_truth": "Builds injection point.", "predict": "Builds an InjectionPoint from the given annotation value. The targetName is inferred from the propertyName if the annotation value is blank. @param annotationValue the value of the MadvocScope annotation @param propertyName the name of the property @param propertyType the type of the property @param scope the scope of the property @return the InjectionPoint"}
{"ID": 1685, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void visit() { ClassDescriptor classDescriptor = ClassIntrospector.get().lookup(type); if (classMetadataName != null) { // process first 'meta' fields 'class' onProperty(classMetadataName, null, false); } PropertyDescriptor[] propertyDescriptors = classDescriptor.getAllPropertyDescriptors(); for (PropertyDescriptor propertyDescriptor : propertyDescriptors) { Getter getter = propertyDescriptor.getGetter(declared); if (getter != null) { String propertyName = propertyDescriptor.getName(); boolean isTransient = false; // check for transient flag FieldDescriptor fieldDescriptor = propertyDescriptor.getFieldDescriptor(); if (fieldDescriptor != null) { isTransient = Modifier.isTransient(fieldDescriptor.getField().getModifiers()); } onProperty(propertyName, propertyDescriptor, isTransient); } } }. ### Assistant:", "ground_truth": "Visits a type.", "predict": "Visit the class and its properties."}
{"ID": 1686, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static URL[] of(ClassLoader classLoader, Class clazz) { if (clazz == null) { clazz = ClassPathURLs.class; } if (classLoader == null) { classLoader = clazz.getClassLoader(); } final Set<URL> urls = new LinkedHashSet<>(); while (classLoader != null) { if (classLoader instanceof URLClassLoader) { final URLClassLoader urlClassLoader = (URLClassLoader) classLoader; return urlClassLoader.getURLs(); } final URL url = classModuleUrl(classLoader, clazz); if (url != null) { urls.add(url); } classLoader = classLoader.getParent(); } return urls.toArray(new URL[0]); }. ### Assistant:", "ground_truth": "Returns urls for the classloader\n\n@param classLoader classloader in which to find urls\n@return list of urls or {@code null} if not found", "predict": "Find all URLs of the classpath that are reachable via the given classloader. The classloader is searched recursively. If the classloader is a URLClassLoader, it's URL's are returned. If the classloader is not a URLClassLoader, the classloader's parent is searched recursively. The classpath is searched recursively as well. The classpath is searched recursively as well. @param classLoader The classloader to start searching with. @param clazz The class to search for. @return The URLs of the classpath that are reachable via the given classloader."}
{"ID": 1687, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void setBean(final Object bean) { this.bean = bean; this.cd = (bean == null ? null : introspector.lookup(bean.getClass())); this.first = false; this.updateProperty = true; }. ### Assistant:", "ground_truth": "Sets new bean instance.", "predict": "Sets the bean for this visitor."}
{"ID": 1688, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void updateBean(final Object bean) { this.setBean(bean); if (this.cd != null && this.cd.isSupplier()) { final Object newBean = ((Supplier)this.bean).get(); setBean(newBean); } }. ### Assistant:", "ground_truth": "Updates the bean. Detects special case of suppliers.", "predict": "Update bean. @param bean the bean"}
{"ID": 1689, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void loadPropertyDescriptor() { if (updateProperty) { if (cd == null) { propertyDescriptor = null; } else { propertyDescriptor = cd.getPropertyDescriptor(name, true); } updateProperty = false; } }. ### Assistant:", "ground_truth": "Loads property descriptor, if property was updated.", "predict": "Load the PropertyDescriptor for the current control."}
{"ID": 1690, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Getter getGetter(final boolean declared) { loadPropertyDescriptor(); return propertyDescriptor != null ? propertyDescriptor.getGetter(declared) : null; }. ### Assistant:", "ground_truth": "Returns getter.", "predict": "Getter for the property. @param declared whether the property is declared in the class or not. @return the getter for the property."}
{"ID": 1691, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Setter getSetter(final boolean declared) { loadPropertyDescriptor(); return propertyDescriptor != null ? propertyDescriptor.getSetter(declared) : null; }. ### Assistant:", "ground_truth": "Returns setter.", "predict": "Returns the setter method for the property. @param declared whether the property is declared as a boolean property. @return the setter method for the property."}
{"ID": 1692, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public DbOom connect() { connectionProvider.init(); final DbDetector dbDetector = new DbDetector(); dbDetector.detectDatabaseAndConfigureDbOom(connectionProvider, dbOomConfig); return this; }. ### Assistant:", "ground_truth": "Initializes the DbOom by connecting to the database. Database will be detected\nand DbOom will be configured to match it.", "predict": "Connect to the database. This method is responsible for connecting to the database and configuring the DbOom instance. @return DbOom instance"}
{"ID": 1693, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void add(final Iterator<T> iterator) { if (allIterators.contains(iterator)) { throw new IllegalArgumentException(\"Duplicate iterator\"); } allIterators.add(iterator); }. ### Assistant:", "ground_truth": "Adds an iterator to this composite.", "predict": "Adds an iterator to the list of iterators. If the iterator is already in the list, an exception is thrown."}
{"ID": 1694, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void printLogo() { System.out.println(Chalk256.chalk().yellow().on(Jodd.JODD)); }. ### Assistant:", "ground_truth": "Prints a logo.", "predict": "Print Jodd logo."}
{"ID": 1695, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void stop() { joyProps.stop(); try { joyDb.stop(); joyPetite.stop(); } catch (Exception ignore) { } if (log != null) { log.info(\"Joy is down. Bye, bye!\"); } }. ### Assistant:", "ground_truth": "Stops the Joy.", "predict": "Stop the joy."}
{"ID": 1696, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Socket createSocket(final String host, final int port, final int connectionTimeout) throws IOException { final SocketFactory socketFactory = getSocketFactory(proxy, false, false, connectionTimeout); if (connectionTimeout < 0) { return socketFactory.createSocket(host, port); } else { // creates unconnected socket Socket socket = socketFactory.createSocket(); socket.connect(new InetSocketAddress(host, port), connectionTimeout); return socket; } }. ### Assistant:", "ground_truth": "Creates a socket using socket factory.", "predict": "Create a socket. This method is overridden to create a socket with a timeout. @param host the host address @param port the port number @param connectionTimeout the timeout @return the socket @throws IOException if an I/O error occurs while creating the socket"}
{"ID": 1697, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected SSLSocket createSSLSocket( final String host, final int port, final int connectionTimeout, final boolean trustAll, final boolean verifyHttpsHost) throws IOException { final SocketFactory socketFactory = getSocketFactory(proxy, true, trustAll, connectionTimeout); final Socket socket; if (connectionTimeout < 0) { socket = socketFactory.createSocket(host, port); } else { // creates unconnected socket // unfortunately, this does not work always // sslSocket = (SSLSocket) socketFactory.createSocket(); // sslSocket.connect(new InetSocketAddress(host, port), connectionTimeout); // // Note: SSLSocketFactory has several create() methods. // Those that take arguments all connect immediately // and have no options for specifying a connection timeout. // // So, we have to create a socket and connect it (with a // connection timeout), then have the SSLSocketFactory wrap // the already-connected socket. // socket = Sockets.connect(host, port, connectionTimeout); //sock.setSoTimeout(readTimeout); //socket.connect(new InetSocketAddress(host, port), connectionTimeout); // continue to wrap this plain socket with ssl socket... } // wrap plain socket in an SSL socket SSLSocket sslSocket; if (socket instanceof SSLSocket) { sslSocket = (SSLSocket) socket; } else { if (socketFactory instanceof SSLSocketFactory) { sslSocket = (SSLSocket) ((SSLSocketFactory)socketFactory).createSocket(socket, host, port, true); } else { sslSocket = (SSLSocket) (getDefaultSSLSocketFactory(trustAll)).createSocket(socket, host, port, true); } } // sslSocket is now ready if (secureEnabledProtocols != null) { final String[] values = StringUtil.splitc(secureEnabledProtocols, ','); StringUtil.trimAll(values); sslSocket.setEnabledProtocols(values); } // set SSL parameters to allow host name verifier if (verifyHttpsHost) { final SSLParameters sslParams = new SSLParameters(); sslParams.setEndpointIdentificationAlgorithm(\"HTTPS\"); sslSocket.setSSLParameters(sslParams); } return sslSocket; }. ### Assistant:", "ground_truth": "Creates a SSL socket. Enables default secure enabled protocols if specified.", "predict": "Creates a SSL socket. @param host the host to connect to @param port the port to connect to @param trustAll trust all SSL certificates @param verifyHttpsHost verify hostnames in SSL certificates @return the SSL socket @throws IOException if an I/O error occurs"}
{"ID": 1698, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected SSLSocketFactory getDefaultSSLSocketFactory(final boolean trustAllCertificates) throws IOException { if (trustAllCertificates) { try { SSLContext sc = SSLContext.getInstance(sslProtocol); sc.init(null, TrustManagers.TRUST_ALL_CERTS, new java.security.SecureRandom()); return sc.getSocketFactory(); } catch (NoSuchAlgorithmException | KeyManagementException e) { throw new IOException(e); } } else { return (SSLSocketFactory) SSLSocketFactory.getDefault(); } }. ### Assistant:", "ground_truth": "Returns default SSL socket factory allowing setting trust managers.", "predict": "Returns a trust-all SSLSocketFactory if trustAllCertificates is true, otherwise returns the default SSLSocketFactory. @param trustAllCertificates Whether trust all certificates. @return SSLSocketFactory @throws IOException If SSLContext initialization fails."}
{"ID": 1699, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected SocketFactory getSocketFactory( final ProxyInfo proxy, final boolean ssl, final boolean trustAllCertificates, final int connectionTimeout) throws IOException { switch (proxy.getProxyType()) { case NONE: if (ssl) { return getDefaultSSLSocketFactory(trustAllCertificates); } else { return SocketFactory.getDefault(); } case HTTP: return new HTTPProxySocketFactory(proxy, connectionTimeout); case SOCKS4: return new Socks4ProxySocketFactory(proxy, connectionTimeout); case SOCKS5: return new Socks5ProxySocketFactory(proxy, connectionTimeout); default: return null; } }. ### Assistant:", "ground_truth": "Returns socket factory based on proxy type and SSL requirements.", "predict": "Get the socket factory for the given proxy. @param proxy the proxy to use. @param ssl whether SSL is to be used. @param trustAllCertificates whether all certificates are trusted. @param connectionTimeout the timeout for the connection. @return the socket factory. @throws IOException if an error occurs while creating the socket factory."}
{"ID": 1700, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String random(int count, final char[] chars) { if (count == 0) { return StringPool.EMPTY; } final char[] result = new char[count]; while (count-- > 0) { result[count] = chars[rnd.nextInt(chars.length)]; } return new String(result); }. ### Assistant:", "ground_truth": "Creates random string whose length is the number of characters specified.\nCharacters are chosen from the set of characters specified.", "predict": "Generates a random string from the given characters. The length of the resulting string will be between 0 and count characters. If count is 0, a random empty string is returned. @param count the maximum length of the resulting string. @param chars the characters to use. @return a random string."}
{"ID": 1701, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String random(int count, final char start, final char end) { if (count == 0) { return StringPool.EMPTY; } final char[] result = new char[count]; final int len = end - start + 1; while (count-- > 0) { result[count] = (char) (rnd.nextInt(len) + start); } return new String(result); }. ### Assistant:", "ground_truth": "Creates random string whose length is the number of characters specified.\nCharacters are chosen from the provided range.", "predict": "Generates a random string of the given length, with the given characters as the start and end of the string. The characters are chosen randomly from the ASCII character set. The resulting string will not contain any duplicates. If the length is zero, the method returns an empty string. @param count the length of the random string @param start the character to start the string with @param end the character to end the string with @return a random string of the given length, with the given characters as the start and end of the string."}
{"ID": 1702, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String randomRanges(int count, final char... ranges) { if (count == 0) { return StringPool.EMPTY; } int i = 0; int len = 0; final int[] lens = new int[ranges.length]; while (i < ranges.length) { int gap = ranges[i + 1] - ranges[i] + 1; len += gap; lens[i] = len; i += 2; } final char[] result = new char[count]; while (count-- > 0) { char c = 0; int r = rnd.nextInt(len); for (i = 0; i < ranges.length; i += 2) { if (r < lens[i]) { r += ranges[i]; if (i != 0) { r -= lens[i - 2]; } c = (char) r; break; } } result[count] = c; } return new String(result); }. ### Assistant:", "ground_truth": "Creates random string whose length is the number of characters specified.\nCharacters are chosen from the multiple sets defined by range pairs.\nAll ranges must be in acceding order.", "predict": "Generates a random string of the specified length, using the specified character ranges. The character ranges are specified as a list of pairs, where the first element is the start of the range and the second element is the end of the range. The character range is a pair of integers, where the first integer is the Unicode code point of the first character in the range, and the second integer is the Unicode code point of the last character in the range. The character range is inclusive, so the first character in the range is included, but the last character in the range is not. The character range is also exclusive, so the first character in the range is not included, but the last character in the range is included. The character range is also non-overlapping, so the first character in one range is not included in any other range. The character range is also non-adjacent, so the first character in one range is not adjacent to the last character in another range. The character range is also non-repeating, so the same character range"}
{"ID": 1703, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") protected Collection<Object> newArrayInstance(final Class targetType) { if (targetType == null || targetType == List.class || targetType == Collection.class || targetType.isArray()) { return listSupplier.get(); } if (targetType == Set.class) { return new HashSet<>(); } try { return (Collection<Object>) targetType.getDeclaredConstructor().newInstance(); } catch (Exception e) { throw new JsonException(e); } }. ### Assistant:", "ground_truth": "Creates new type for JSON array objects.\nIt returns a collection.\nLater, the collection will be converted into the target type.", "predict": "Create a new array instance. @param targetType target type of the array. @return new array instance."}
{"ID": 1704, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void injectValueIntoObject(final Object target, final PropertyDescriptor pd, final Object value) { Object convertedValue = value; if (value != null) { Class targetClass = pd.getType(); convertedValue = convertType(value, targetClass); } try { Setter setter = pd.getSetter(true); if (setter != null) { setter.invokeSetter(target, convertedValue); } } catch (Exception ex) { throw new JsonException(ex); } }. ### Assistant:", "ground_truth": "Injects value into the targets property.", "predict": "Injects a value into an object. The value is converted to the correct type before being injected. The conversion is done using the conversion rules defined in the Jackson library. @param target The object to inject the value into. @param pd The PropertyDescriptor for the property being injected. @param value The value to inject."}
{"ID": 1705, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Object convertType(final Object value, final Class targetType) { final Class valueClass = value.getClass(); if (valueClass == targetType) { return value; } try { return TypeConverterManager.get().convertType(value, targetType); } catch (Exception ex) { if (!strictTypes) { return null; } throw new JsonException(\"Type conversion failed\", ex); } }. ### Assistant:", "ground_truth": "Converts type of the given value.", "predict": "Convert the value to the target type. @param value the value to convert. @param targetType the target type. @return the converted value."}
{"ID": 1706, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void visitProvide(final String service, final String... providers) { if (mv != null) { mv.visitProvide(service, providers); } }. ### Assistant:", "ground_truth": "Visit an implementation of a service.\n\n@param service the internal name of the service.\n@param providers the internal names of the implementations of the service (there is at least\none provider).", "predict": "Visits a PROVIDE instruction. @param service the service name. @param providers the providers."}
{"ID": 1707, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unchecked\") public static <A> TypeCache<A> createDefault() { return (TypeCache<A>)Defaults.implementation.get(); }. ### Assistant:", "ground_truth": "Creates default implementation of the type cache.", "predict": "Returns the default implementation of the TypeCache class. This is typically used for testing purposes. @param <A> the type of the elements in the cache @return the default implementation of the TypeCache class."}
{"ID": 1708, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public T put(final Class<?> type, final T value) { return map.put(type, value); }. ### Assistant:", "ground_truth": "Add values to the map.", "predict": "Put a value into the map. @param type the type of the value to add. @param value the value to add. @return the value that was added."}
{"ID": 1709, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public MethodDescriptor[] getAllMethodDescriptors() { if (allMethods == null) { final List<MethodDescriptor> allMethodsList = new ArrayList<>(); for (MethodDescriptor[] methodDescriptors : methodsMap.values()) { Collections.addAll(allMethodsList, methodDescriptors); } final MethodDescriptor[] allMethods = allMethodsList.toArray(new MethodDescriptor[0]); Arrays.sort(allMethods, Comparator.comparing(md -> md.getMethod().getName())); this.allMethods = allMethods; } return allMethods; }. ### Assistant:", "ground_truth": "Returns all methods. Cached. Lazy.", "predict": "Returns all MethodDescriptors. @return all MethodDescriptors"}
{"ID": 1710, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String resolveIpAddress(final String hostname) { try { InetAddress netAddress; if (hostname == null || hostname.equalsIgnoreCase(LOCAL_HOST)) { netAddress = InetAddress.getLocalHost(); } else { netAddress = Inet4Address.getByName(hostname); } return netAddress.getHostAddress(); } catch (UnknownHostException ignore) { return null; } }. ### Assistant:", "ground_truth": "Resolves IP address from a hostname.", "predict": "Resolves the IP address of the given hostname. If the hostname is null or LOCAL\\_HOST, the loopback address is returned. Otherwise, the IPv4 address is returned. @param hostname The hostname to resolve. @return The IP address of the hostname."}
{"ID": 1711, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int getIpAsInt(final String ipAddress) { int ipIntValue = 0; String[] tokens = StringUtil.splitc(ipAddress, '.'); for (String token : tokens) { if (ipIntValue > 0) { ipIntValue <<= 8; } ipIntValue += Integer.parseInt(token); } return ipIntValue; }. ### Assistant:", "ground_truth": "Returns IP address as integer.", "predict": "Convert a string representation of an IP address into an integer. The string representation is assumed to be in dotted decimal notation. @param ipAddress the IP address to convert @return the IP address as an integer"}
{"ID": 1712, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean validateAgaintIPAdressV4Format(final String input) { if (input == null) { return false; } int hitDots = 0; char[] data = input.toCharArray(); for (int i = 0; i < data.length; i++) { char c = data[i]; int b = 0; do { if (c < '0' || c > '9') { return false; } b = (b * 10 + c) - 48; if (++i >= data.length) { break; } c = data[i]; } while (c != '.'); if (b > 255) { return false; } hitDots++; } return hitDots == 4; }. ### Assistant:", "ground_truth": "Checks given string against IP address v4 format.\n\n@param input an ip address - may be null\n@return <tt>true</tt> if param has a valid ip v4 format <tt>false</tt> otherwise\n@see <a href=\"https://en.wikipedia.org/wiki/IP_address#IPv4_addresses\">ip address v4</a>", "predict": "Verify if the input is a IPv4 address in the format \"x.x.x.x\" @param input the input to validate @return true if the input is a IPv4 address in the format \"x.x.x.x\""}
{"ID": 1713, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String resolveHostName(final byte[] ip) { try { InetAddress address = InetAddress.getByAddress(ip); return address.getHostName(); } catch (UnknownHostException ignore) { return null; } }. ### Assistant:", "ground_truth": "Resolves host name from IP address bytes.", "predict": "Resolve the hostname from the given IP address. @param ip the IP address to resolve @return the hostname or null if the IP address is invalid"}
{"ID": 1714, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static byte[] downloadBytes(final String url) throws IOException { try (InputStream inputStream = new URL(url).openStream()) { return StreamUtil.readBytes(inputStream); } }. ### Assistant:", "ground_truth": "Downloads resource as byte array.", "predict": "Download bytes from url. @param url url of download target. @return downloaded bytes. @throws IOException if failed to download."}
{"ID": 1715, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String downloadString(final String url, final String encoding) throws IOException { try (InputStream inputStream = new URL(url).openStream()) { return new String(StreamUtil.readChars(inputStream, encoding)); } }. ### Assistant:", "ground_truth": "Downloads resource as String.", "predict": "Download a string from a url and return it as a string. @param url the url to download from @param encoding the encoding to use when converting the bytes to a string @return the downloaded string @throws IOException if an error occurs while reading the input stream"}
{"ID": 1716, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void downloadFile(final String url, final File file) throws IOException { try ( InputStream inputStream = new URL(url).openStream(); ReadableByteChannel rbc = Channels.newChannel(inputStream); FileChannel fileChannel = FileChannel.open( file.toPath(), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE) ) { fileChannel.transferFrom(rbc, 0, Long.MAX_VALUE); } }. ### Assistant:", "ground_truth": "Downloads resource to a file, potentially very efficiently.", "predict": "Download a file from a URL to a local file. @param url the URL of the file to download. @param file the file to download to. @throws IOException if the download fails."}
{"ID": 1717, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void inject(final ActionRequest actionRequest) { final Targets targets = actionRequest.getTargets(); final ServletContext servletContext = actionRequest.getHttpServletRequest().getServletContext(); scopeResolver.forEachScope(madvocScope -> madvocScope.inject(servletContext, targets)); scopeResolver.forEachScope(madvocScope -> madvocScope.inject(actionRequest, targets)); }. ### Assistant:", "ground_truth": "Performs injection.", "predict": "Injects all targets of the action request. @param actionRequest the action request to inject targets into."}
{"ID": 1718, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void outject(final ActionRequest actionRequest) { final Targets targets = actionRequest.getTargets(); scopeResolver.forEachScope(madvocScope -> madvocScope.outject(actionRequest, targets)); }. ### Assistant:", "ground_truth": "Performs outjection.", "predict": "Outjects the given action request to all scopes. @param actionRequest the action request to be outjected."}
{"ID": 1719, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Socket connect(final String hostname, final int port) throws IOException { final Socket socket = new Socket(); socket.connect(new InetSocketAddress(hostname, port)); return socket; }. ### Assistant:", "ground_truth": "Creates a socket.", "predict": "Connects to a host and port. @param hostname the hostname @param port the port @return the socket @throws IOException if the connection fails"}
{"ID": 1720, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Socket connect(final String hostname, final int port, final int connectionTimeout) throws IOException { final Socket socket = new Socket(); if (connectionTimeout <= 0) { socket.connect(new InetSocketAddress(hostname, port)); } else { socket.connect(new InetSocketAddress(hostname, port), connectionTimeout); } return socket; }. ### Assistant:", "ground_truth": "Creates a socket with a timeout.", "predict": "Connects to a host and port using the given timeout. If timeout is <= 0, the socket will be connected immediately. Otherwise, the socket will be connected after the timeout has elapsed. @param hostname the hostname to connect to @param port the port to connect to @param connectionTimeout the timeout in milliseconds @return the socket that was connected @throws IOException if an I/O error occurs while connecting"}
{"ID": 1721, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static int getPrimitiveClassNameIndex(final String className) { int dotIndex = className.indexOf('.'); if (dotIndex != -1) { return -1; } return Arrays.binarySearch(PRIMITIVE_TYPE_NAMES, className); }. ### Assistant:", "ground_truth": "Detects if provided class name is a primitive type.\nReturns >= 0 number if so.", "predict": "Finds the index of the primitive type name in the primitive type names array. Returns -1 if the className is not a primitive type name. @param className the name of the class @return the index of the primitive type name in the primitive type names array, or -1 if the className is not a primitive type name."}
{"ID": 1722, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public Class loadClass(final String className, final ClassLoader classLoader) throws ClassNotFoundException { String arrayClassName = prepareArrayClassnameForLoading(className); if ((className.indexOf('.') == -1) && (arrayClassName == null)) { // maybe a primitive int primitiveNdx = getPrimitiveClassNameIndex(className); if (primitiveNdx >= 0) { return PRIMITIVE_TYPES[primitiveNdx]; } } // try #1 - using provided class loader if (classLoader != null) { Class klass = loadClass(className, arrayClassName, classLoader); if (klass != null) { return klass; } } // try #2 - using thread class loader ClassLoader currentThreadClassLoader = Thread.currentThread().getContextClassLoader(); if ((currentThreadClassLoader != null) && (currentThreadClassLoader != classLoader)) { Class klass = loadClass(className, arrayClassName, currentThreadClassLoader); if (klass != null) { return klass; } } // try #3 - using caller classloader, similar as Class.forName() //Class callerClass = ReflectUtil.getCallerClass(2); Class callerClass = ClassUtil.getCallerClass(); ClassLoader callerClassLoader = callerClass.getClassLoader(); if ((callerClassLoader != classLoader) && (callerClassLoader != currentThreadClassLoader)) { Class klass = loadClass(className, arrayClassName, callerClassLoader); if (klass != null) { return klass; } } // try #4 - everything failed, try alternative array loader if (arrayClassName != null) { try { return loadArrayClassByComponentType(className, classLoader); } catch (ClassNotFoundException ignore) { } } throw new ClassNotFoundException(\"Class not found: \" + className); }. ### Assistant:", "ground_truth": "Loads class by name.", "predict": "Load a class from a classloader. The classloader is searched recursively. If the classloader is not found, the classloader of the calling class is searched. If the classloader of the calling class is not found, the classloader of the calling class's enclosing class is searched. If the classloader of the calling class's enclosing class is not found, the classloader of the calling class's enclosing class's enclosing class is searched. If the classloader of the calling class's enclosing class's enclosing class is not found, the classloader of the calling class's enclosing class's enclosing class's enclosing class is searched. If the classloader of the calling class's enclosing class's enclosing class's enclosing class's enclosing class is not found, the classloader of the calling class's enclosing class's enclosing class's enclosing class'"}
{"ID": 1723, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Class loadArrayClassByComponentType(final String className, final ClassLoader classLoader) throws ClassNotFoundException { int ndx = className.indexOf('['); int multi = StringUtil.count(className, '['); String componentTypeName = className.substring(0, ndx); Class componentType = loadClass(componentTypeName, classLoader); if (multi == 1) { return Array.newInstance(componentType, 0).getClass(); } int[] multiSizes; if (multi == 2) { multiSizes = new int[] {0, 0}; } else if (multi == 3) { multiSizes = new int[] {0, 0, 0}; } else { multiSizes = (int[]) Array.newInstance(int.class, multi); } return Array.newInstance(componentType, multiSizes).getClass(); }. ### Assistant:", "ground_truth": "Loads array class using component type.", "predict": "Load array class by component type. @param className array class name. @param classLoader class loader. @return array class. @throws ClassNotFoundException if failed to load class."}
{"ID": 1724, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void shutdown() { for (final BeanData beanData : instances.values()) { beanData.callDestroyMethods(); } instances.clear(); }. ### Assistant:", "ground_truth": "Iterate all beans and invokes registered destroy methods.", "predict": "Destroy all instances of BeanData."}
{"ID": 1725, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <T extends Comparable> BinarySearch<T> forArray(final T[] array) { return new BinarySearch<T>() { @Override @SuppressWarnings( {\"unchecked\"}) protected int compare(final int index, final T element) { return array[index].compareTo(element); } @Override protected int getLastIndex() { return array.length - 1; } }; }. ### Assistant:", "ground_truth": "Creates binary search wrapper over an array.", "predict": "Create a binary search for an array. The array is searched in ascending order. @param array The array to search in. @param <T> The type of elements in the array. @return A binary search for the array."}
{"ID": 1726, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static <T> BinarySearch<T> forArray(final T[] array, final Comparator<T> comparator) { return new BinarySearch<T>() { @Override @SuppressWarnings( {\"unchecked\"}) protected int compare(final int index, final T element) { return comparator.compare(array[index], element); } @Override protected int getLastIndex() { return array.length - 1; } }; }. ### Assistant:", "ground_truth": "Creates binary search wrapper over an array with given comparator.", "predict": "Binary search for an element in an array using the given comparator. The array is searched in ascending order. @param array The array to search in. @param comparator The comparator used to compare elements. @return The index of the searched element or -1 if not found. @throws IllegalArgumentException If the array is empty."}
{"ID": 1727, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public T exclude(final String... excludes) { for (String ex : excludes) { rules.exclude(ex); } return _this(); }. ### Assistant:", "ground_truth": "Defines excluded property names.", "predict": "Exclude rules for the given exclusions. @param excludes the exclusions to exclude. @return the updated rule object."}
{"ID": 1728, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public T include(final String... includes) { for (String in : includes) { rules.include(in); } return _this(); }. ### Assistant:", "ground_truth": "Defines included property names.", "predict": "Adds a set of rules to the existing rules. @param includes the rules to include. @return this instance."}
{"ID": 1729, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public T includeAs(final Class template) { blacklist = false; String[] properties = getAllBeanPropertyNames(template, false); include(properties); return _this(); }. ### Assistant:", "ground_truth": "Defines included property names as public properties\nof given template class. Sets to black list mode.", "predict": "Include all properties of the given class as properties of this class. @param template the class to include properties from. @return this instance."}
{"ID": 1730, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void start(final int startIndex) { this.tagStartIndex = startIndex; this.name = null; this.idNdx = -1; this.attributesCount = 0; this.tagLength = 0; this.modified = false; this.type = TagType.START; this.rawTag = false; }. ### Assistant:", "ground_truth": "Starts the tag with the index of first '<'.\nResets all tag data.", "predict": "Start tag. @param startIndex index of start tag in the input stream"}
{"ID": 1731, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <T> void registerComponent(final String name, final Class<T> component, final Consumer<T> consumer) { log.debug(() -> \"Madvoc WebApp component: [\" + name + \"] --> \" + component.getName()); madpc.removeBean(name); madpc.registerPetiteBean(component, name, null, null, false, consumer); }. ### Assistant:", "ground_truth": "Registers Madvoc component with given name.", "predict": "Register a PetiteBean component. @param name the component name @param component the component class @param consumer the consumer for the component"}
{"ID": 1732, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void resolveColumnDbSqlType(final Connection connection, final DbEntityColumnDescriptor dec) { if (dec.dbSqlType != SqlType.DB_SQLTYPE_UNKNOWN) { return; } ResultSet rs = null; DbEntityDescriptor ded = dec.getDbEntityDescriptor(); try { DatabaseMetaData dmd = connection.getMetaData(); rs = dmd.getColumns(null, ded.getSchemaName(), ded.getTableName(), dec.getColumnName()); if (rs.next()) { dec.dbSqlType = rs.getInt(\"DATA_TYPE\"); } else { dec.dbSqlType = SqlType.DB_SQLTYPE_NOT_AVAILABLE; if (log.isWarnEnabled()) { log.warn(\"Column SQL type not available: \" + ded.toString() + '.' + dec.getColumnName()); } } } catch (SQLException sex) { dec.dbSqlType = SqlType.DB_SQLTYPE_NOT_AVAILABLE; if (log.isWarnEnabled()) { log.warn(\"Column SQL type not resolved: \" + ded.toString() + '.' + dec.getColumnName(), sex); } } finally { DbUtil.close(rs); } }. ### Assistant:", "ground_truth": "Resolves column db sql type and populates it in column descriptor if missing.", "predict": "Resolves the DbSqlType of a column based on the database metadata. @param connection the database connection @param dec the DbEntityColumnDescriptor to resolve"}
{"ID": 1733, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String preprocessSql(String sqlString) { // detects callable statement if (sqlString.charAt(0) == '{') { return sqlString; } // quickly detect if SQL string is a key if (!CharUtil.isAlpha(sqlString.charAt(0))) { sqlString = sqlString.substring(1); } else if (sqlString.indexOf(' ') != -1) { return sqlString; } final String sqlFromMap = dbOom.queryMap().getQuery(sqlString); if (sqlFromMap != null) { sqlString = sqlFromMap.trim(); } return sqlString; }. ### Assistant:", "ground_truth": "Pre-process SQL before using it. If string starts with a non-ascii char\nor it has no spaces, it will be loaded from the query map.", "predict": "Preprocess SQL string. @param sqlString SQL string @return SQL string"}
{"ID": 1734, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected ResultSetMapper createResultSetMapper(final ResultSet resultSet) { final Map<String, ColumnData> columnAliases = sqlgen != null ? sqlgen.getColumnData() : null; return new DefaultResultSetMapper(dbOom, resultSet, columnAliases, cacheEntities, this); }. ### Assistant:", "ground_truth": "Factory for result sets mapper.", "predict": "Create a ResultSetMapper for the given ResultSet. @param resultSet the ResultSet to use @return the ResultSetMapper"}
{"ID": 1735, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public <T> T findGeneratedKey(final Class<T> type) { return find(new Class[] {type}, false, getGeneratedColumns()); }. ### Assistant:", "ground_truth": "Finds generated key column of given type.", "predict": "Find the primary key value of the table. @param type the type of the primary key @return the primary key value of the table."}
{"ID": 1736, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void populateGeneratedKeys(final Object entity) { final String[] generatedColumns = getGeneratedColumnNames(); if (generatedColumns == null) { return; } DbEntityDescriptor ded = dbOom.entityManager().lookupType(entity.getClass()); // prepare key types Class[] keyTypes = new Class[generatedColumns.length]; String[] properties = new String[generatedColumns.length]; for (int i = 0; i < generatedColumns.length; i++) { String column = generatedColumns[i]; DbEntityColumnDescriptor decd = ded.findByColumnName(column); if (decd != null) { keyTypes[i] = decd.getPropertyType(); properties[i] = decd.getPropertyName(); } } final Object keyValues = findGeneratedColumns(keyTypes); if (!keyValues.getClass().isArray()) { BeanUtil.declared.setProperty(entity, properties[0], keyValues); } else { for (int i = 0; i < properties.length; i++) { BeanUtil.declared.setProperty(entity, properties[i], ((Object[]) keyValues)[i]); } } }. ### Assistant:", "ground_truth": "Populates entity with generated column values from executed query.", "predict": "Populate generated keys. @param entity Entity to populate generated keys."}
{"ID": 1737, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override protected <R extends ActionInterceptor> R createWrapper(final Class<R> wrapperClass) { return petiteContainer.createBean(wrapperClass); }. ### Assistant:", "ground_truth": "Acquires interceptor from Petite container.", "predict": "Create a wrapper bean."}
{"ID": 1738, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Q setBean(final String beanName, final Object bean) { if (bean == null) { return _this(); } init(); final String beanNamePrefix = beanName + '.'; query.forEachNamedParameter(p -> { final String paramName = p.name; if (paramName.startsWith(beanNamePrefix)) { final String propertyName = paramName.substring(beanNamePrefix.length()); if (BeanUtil.declared.hasRootProperty(bean, propertyName)) { final Object value = BeanUtil.declared.getProperty(bean, propertyName); setObject(paramName, value); } } }); return _this(); }. ### Assistant:", "ground_truth": "Sets bean parameters from bean. Non-existing bean properties are ignored.", "predict": "Set the value of a named parameter using a bean. @param beanName The name of the bean. @param bean The bean. @return The Q object."}
{"ID": 1739, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Q setMap(final Map parameters) { if (parameters == null) { return _this(); } init(); query.forEachNamedParameter(p -> { final String paramName = p.name; setObject(paramName, parameters.get(paramName)); }); return _this(); }. ### Assistant:", "ground_truth": "Sets properties from the map.", "predict": "Set the named parameters of the query. @param parameters the named parameters of the query. @return the query."}
{"ID": 1740, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Q setObjects(final Object... objects) { int index = 1; for (final Object object : objects) { setObject(index++, object); } return _this(); }. ### Assistant:", "ground_truth": "Sets an array of objects parameters in given order.", "predict": "Set multiple objects at once. @param objects Objects to set. @return This instance."}
{"ID": 1741, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void insertChunkAfter(final SqlChunk previous) { SqlChunk next = previous.nextChunk; previous.nextChunk = this; this.previousChunk = previous; if (next != null) { next.previousChunk = this; this.nextChunk = next; } }. ### Assistant:", "ground_truth": "Appends chunk to previous one and maintains the double-linked list of the previous chunk.\nCurrent surrounding connections of this chunk will be cut-off.", "predict": "Insert this chunk after the specified previous chunk. @param previous the previous chunk to insert after."}
{"ID": 1742, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected DbEntityDescriptor lookupType(final Class entity) { final DbEntityDescriptor ded = dbEntityManager.lookupType(entity); if (ded == null) { throw new DbSqlBuilderException(\"Invalid or not-persistent entity: \" + entity.getName()); } return ded; }. ### Assistant:", "ground_truth": "Lookups for entity name and throws an exception if entity type is invalid.", "predict": "Lookup the DbEntityDescriptor for the given entity. If the entity is not persistent, throw an exception. @param entity the entity @return the DbEntityDescriptor for the entity"}
{"ID": 1743, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected DbEntityDescriptor findColumnRef(final String columnRef) { DbEntityDescriptor ded = templateData.findTableDescriptorByColumnRef(columnRef); if (ded == null) { throw new DbSqlBuilderException(\"Invalid column reference: [\" + columnRef + \"]\"); } return ded; }. ### Assistant:", "ground_truth": "Finds a table that contains given column.", "predict": "Find column reference in template data. @param columnRef Column reference @return DbEntityDescriptor DbEntityDescriptor"}
{"ID": 1744, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String resolveTable(final String tableRef, final DbEntityDescriptor ded) { String tableAlias = templateData.getTableAlias(tableRef); if (tableAlias != null) { return tableAlias; } return ded.getTableNameForQuery(); }. ### Assistant:", "ground_truth": "Resolves table name or alias that will be used in the query.", "predict": "Resolve table name from table alias or table name. @param tableRef table reference @param ded entity descriptor @return table name or alias"}
{"ID": 1745, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected static Class resolveClass(final Object object) { Class type = object.getClass(); return type == Class.class ? (Class) object : type; }. ### Assistant:", "ground_truth": "Resolves object to a class.", "predict": "Resolve the class of an object. If the object is already a class, return it. Otherwise, return the object itself."}
{"ID": 1746, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void appendMissingSpace(final StringBuilder out) { int len = out.length(); if (len == 0) { return; } len--; if (!CharUtil.isWhitespace(out.charAt(len))) { out.append(' '); } }. ### Assistant:", "ground_truth": "Appends missing space if the output doesn't end with whitespace.", "predict": "Append a space to the end of the StringBuilder if it is missing."}
{"ID": 1747, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Enumeration<String> getFileParameterNames() { if (mreq == null) { return null; } return Collections.enumeration(mreq.getFileParameterNames()); }. ### Assistant:", "ground_truth": "Get an enumeration of the parameter names for uploaded files", "predict": "Returns the names of the files in the message. @return The names of the files in the message."}
{"ID": 1748, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean include(final ServletRequest request, final ServletResponse response, final String page) throws IOException, ServletException { RequestDispatcher dispatcher = request.getRequestDispatcher(page); if (dispatcher != null) { dispatcher.include(request, response); return true; } return false; }. ### Assistant:", "ground_truth": "Include page which path is relative to the current HTTP request.", "predict": "Include a page in the response. @param request ServletRequest @param response ServletResponse @param page Page to include @return True if the page was included, false otherwise @throws IOException @throws ServletException"}
{"ID": 1749, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String getUrl(final HttpServletRequest request) { String servletPath = request.getServletPath(); String query = request.getQueryString(); if ((query != null) && (query.length() != 0)) { servletPath += '?' + query; } return servletPath; }. ### Assistant:", "ground_truth": "Returns url, without context path, convenient for request dispatcher.", "predict": "Get the URL of the request. @param request the request @return the url"}
{"ID": 1750, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String getRequestUri(final HttpServletRequest request) { String result = getIncludeRequestUri(request); if (result == null) { result = request.getRequestURI(); } return result; }. ### Assistant:", "ground_truth": "Get current request uri.", "predict": "Get the request uri. If the includeRequestUri is set to true, it will return the request uri. Otherwise, it will return the request uri without the context path. @param request the request object @return the request uri"}
{"ID": 1751, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String[] resolveParamNames(final Method actionClassMethod) { MethodParameter[] methodParameters = Paramo.resolveParameters(actionClassMethod); String[] names = new String[methodParameters.length]; for (int i = 0; i < methodParameters.length; i++) { names[i] = methodParameters[i].getName(); } return names; }. ### Assistant:", "ground_truth": "Returns method parameter names.", "predict": "Resolves the parameter names of the given actionClassMethod. @param actionClassMethod The method to resolve the parameter names of. @return The resolved parameter names."}
{"ID": 1752, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void start() { initLogger(); log.info(\"PETITE start ----------\"); petiteContainer = createPetiteContainer(); if (externalsCache) { petiteContainer.setExternalsCache(TypeCache.createDefault()); } log.info(\"Web application? \" + isWebApplication); if (!isWebApplication) { // make session scope to act as singleton scope // if this is not a web application (and http session is not available). petiteContainer.registerScope(SessionScope.class, new SingletonScope(petiteContainer)); } // load parameters from properties files petiteContainer.defineParameters(joyPropsSupplier.get().getProps()); // automagic configuration if (autoConfiguration) { final AutomagicPetiteConfigurator automagicPetiteConfigurator = new AutomagicPetiteConfigurator(petiteContainer); automagicPetiteConfigurator.registerAsConsumer(joyScannerSupplier.get().getClassScanner()); } petiteContainerConsumers.accept(this.petiteContainer); log.info(\"PETITE OK!\"); }. ### Assistant:", "ground_truth": "Creates and initializes Petite container.\nIt will be auto-magically configured by scanning the classpath.", "predict": "Start Petite Container."}
{"ID": 1753, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void stop() { if (log != null) { log.info(\"PETITE stop\"); } if (petiteContainer != null) { petiteContainer.shutdown(); } petiteContainer = null; }. ### Assistant:", "ground_truth": "Stops Petite container.", "predict": "Stop petite."}
{"ID": 1754, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public EmailFilter subject(final String subject) { final SearchTerm subjectTerm = new SubjectTerm(subject); concat(subjectTerm); return this; }. ### Assistant:", "ground_truth": "Defines filter for SUBJECT field.\n\n@param subject The SUBJECT.\n@return this", "predict": "Adds a new subject filter to the email filter. The subject is matched against the email's subject. @param subject the subject to match against @return the email filter"}
{"ID": 1755, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public EmailFilter messageId(final String messageId) { final SearchTerm msgIdTerm = new MessageIDTerm(messageId); concat(msgIdTerm); return this; }. ### Assistant:", "ground_truth": "Defines filter for message id.\n\n@param messageId The message ID.\n@return this", "predict": "Adds a message ID to the filter. @param messageId the message ID @return the email filter"}
{"ID": 1756, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public EmailFilter from(final String fromAddress) { final SearchTerm fromTerm = new FromStringTerm(fromAddress); concat(fromTerm); return this; }. ### Assistant:", "ground_truth": "Defines filter for FROM field.\n\n@param fromAddress The FROM address\n@return this", "predict": "Adds a filter for emails that have the specified sender address. @param fromAddress the sender address @return this email filter"}
{"ID": 1757, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public EmailFilter to(final String toAddress) { final SearchTerm toTerm = new RecipientStringTerm(RecipientType.TO, toAddress); concat(toTerm); return this; }. ### Assistant:", "ground_truth": "Defines filter for TO field.\n\n@param toAddress The TO address.\n@return this", "predict": "Adds a recipient to the email filter. @param toAddress the email address to filter for @return the email filter"}
{"ID": 1758, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public EmailFilter cc(final String ccAddress) { final SearchTerm toTerm = new RecipientStringTerm(RecipientType.CC, ccAddress); concat(toTerm); return this; }. ### Assistant:", "ground_truth": "Defines filter for CC field.\n\n@param ccAddress CC addreses.\n@return this", "predict": "Adds a recipient CC to the email filter. @param ccAddress the email address to add as a CC @return the email filter"}
{"ID": 1759, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public EmailFilter bcc(final String bccAddress) { final SearchTerm toTerm = new RecipientStringTerm(RecipientType.BCC, bccAddress); concat(toTerm); return this; }. ### Assistant:", "ground_truth": "Defines filter for BCC field.\n\n@param bccAddress BCC address.\n@return this", "predict": "Adds a BCC recipient to the email filter. @param bccAddress the BCC address @return the email filter"}
{"ID": 1760, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public EmailFilter flags(final Flags flags, final boolean value) { final SearchTerm flagTerm = new FlagTerm(flags, value); concat(flagTerm); return this; }. ### Assistant:", "ground_truth": "Defines filter for many flags at once.\n\n@param flags The {@link Flags} to filter on.\n@param value The {@link Flag} setting to check for.\n@return this", "predict": "Adds a flag to the email filter. The flag is added to the email filter. The value is ignored. The flag is added to the email filter. The value is ignored. @param flags the flags to add to the email filter. @param value ignored. @return the email filter. @see <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.10/search-aggregations-bucket-flags-aggregation.html\">Elasticsearch documentation</a>"}
{"ID": 1761, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public EmailFilter flag(final Flag flag, final boolean value) { final Flags flags = new Flags(); flags.add(flag); return flags(flags, value); }. ### Assistant:", "ground_truth": "Defines filter for single flag.\n\n@param flag  The flag to filter on.\n@param value The {@link Flag} setting to check for.\n@return this", "predict": "Adds a flag to the email. @param flag Flag to add. @param value Flag value. @return EmailFilter object."}
{"ID": 1762, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public EmailFilter receivedDate(final Operator operator, final long milliseconds) { final SearchTerm term = new ReceivedDateTerm(operator.value, new Date(milliseconds)); concat(term); return this; }. ### Assistant:", "ground_truth": "Defines filter for received date.\n\n@return this", "predict": "Adds a received date filter to the email filter. @param operator the operator to use @param milliseconds the milliseconds since January 1, 1970, 00:00:00 UTC @return this email filter"}
{"ID": 1763, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public EmailFilter sentDate(final Operator operator, final long milliseconds) { final SearchTerm term = new SentDateTerm(operator.value, new Date(milliseconds)); concat(term); return this; }. ### Assistant:", "ground_truth": "Defines filter for sent date.\n\n@param operator     {@link Operator} to use.\n@param milliseconds the milliseconds since January 1, 1970, 00:00:00 GMT.\n@return this", "predict": "Add a sent date filter to the query. @param operator the operator to use @param milliseconds the sent date in milliseconds @return this email filter object"}
{"ID": 1764, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public EmailFilter size(final Operator comparison, final int size) { final SearchTerm term = new SizeTerm(comparison.value, size); concat(term); return this; }. ### Assistant:", "ground_truth": "Defines filter for message size.\n\n@param comparison {@link Operator}.\n@param size       size of message.\n@return this", "predict": "Adds a size comparison to the email filter. @param comparison the comparison operator to use. @param size the size to compare to. @return this email filter."}
{"ID": 1765, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public EmailFilter and(final EmailFilter... emailFilters) { final SearchTerm[] searchTerms = new SearchTerm[emailFilters.length]; for (int i = 0; i < emailFilters.length; i++) { searchTerms[i] = emailFilters[i].searchTerm; } concat(new AndTerm(searchTerms)); return this; }. ### Assistant:", "ground_truth": "Defines AND group of filters.\n\n@param emailFilters array of {@link EmailFilter}s to AND.\n@return this", "predict": "Combine the email filters using the logical AND operator. @param emailFilters the email filters to combine. @return the combined email filter."}
{"ID": 1766, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public EmailFilter or(final EmailFilter... emailFilters) { final SearchTerm[] searchTerms = new SearchTerm[emailFilters.length]; for (int i = 0; i < emailFilters.length; i++) { searchTerms[i] = emailFilters[i].searchTerm; } concat(new OrTerm(searchTerms)); return this; }. ### Assistant:", "ground_truth": "Defines OR group of filters.\n\n@param emailFilters array of {@link EmailFilter}s to OR.\n@return this", "predict": "Combine the email filters using the OR operator. @param emailFilters the email filters to combine. @return the combined email filter."}
{"ID": 1767, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public EmailFilter not(final EmailFilter emailFilter) { final SearchTerm searchTerm = new NotTerm(emailFilter.searchTerm); concat(searchTerm); return this; }. ### Assistant:", "ground_truth": "Appends single filter as NOT.\n\n@param emailFilter {@link EmailFilter} to append.\n@return this", "predict": "Adds a NOT condition to the email filter. @param emailFilter email filter to negate @return this email filter"}
{"ID": 1768, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void concat(SearchTerm searchTerm) { if (nextIsNot) { searchTerm = new NotTerm(searchTerm); nextIsNot = false; } if (operatorAnd) { and(searchTerm); } else { or(searchTerm); } }. ### Assistant:", "ground_truth": "Concatenates last search term with new one.\n\n@param searchTerm searchTerm {@link SearchTerm} concatenate.\n@see #and(SearchTerm)\n@see #or(SearchTerm)", "predict": "Concatenate a search term onto the current search term. If the current search term is an \"OR\" operator, it will be replaced with the new search term. If the current search term is an \"NOT\", the new search term will be treated as a \"NOT\". If the current search term is an \"AND\", the new search term will be treated as an \"AND\"."}
{"ID": 1769, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String encode(final byte[] bytes) { StringBuilder base32 = new StringBuilder((bytes.length * 8 + 4) / 5); int currByte, digit, i = 0; while (i < bytes.length) { // STEP 0; insert new 5 bits, leave 3 bits currByte = bytes[i++] & 255; base32.append(CHARS[currByte >> 3]); digit = (currByte & 7) << 2; if (i >= bytes.length) { base32.append(CHARS[digit]); break; } // STEP 3: insert 2 new bits, then 5 bits, leave 1 bit currByte = bytes[i++] & 255; base32.append(CHARS[digit | (currByte >> 6)]); base32.append(CHARS[(currByte >> 1) & 31]); digit = (currByte & 1) << 4; if (i >= bytes.length) { base32.append(CHARS[digit]); break; } // STEP 1: insert 4 new bits, leave 4 bit currByte = bytes[i++] & 255; base32.append(CHARS[digit | (currByte >> 4)]); digit = (currByte & 15) << 1; if (i >= bytes.length) { base32.append(CHARS[digit]); break; } // STEP 4: insert 1 new bit, then 5 bits, leave 2 bits currByte = bytes[i++] & 255; base32.append(CHARS[digit | (currByte >> 7)]); base32.append(CHARS[(currByte >> 2) & 31]); digit = (currByte & 3) << 3; if (i >= bytes.length) { base32.append(CHARS[digit]); break; } // STEP 2: insert 3 new bits, then 5 bits, leave 0 bit currByte = bytes[i++] & 255; base32.append(CHARS[digit | (currByte >> 5)]); base32.append(CHARS[currByte & 31]); } return base32.toString(); }. ### Assistant:", "ground_truth": "Encode an array of binary bytes into a Base32 string.", "predict": "Encode a byte array into Base32 alphabet. @param bytes the byte array to encode @return the Base32 alphabet string"}
{"ID": 1770, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected byte[] convertValueToArray(final Object value) { if (value instanceof Blob) { final Blob blob = (Blob) value; try { final long length = blob.length(); if (length > Integer.MAX_VALUE) { throw new TypeConversionException(\"Blob is too big.\"); } return blob.getBytes(1, (int) length); } catch (SQLException sex) { throw new TypeConversionException(value, sex); } } if (value instanceof File) { try { return FileUtil.readBytes((File) value); } catch (IOException ioex) { throw new TypeConversionException(value, ioex); } } if (value instanceof Collection) { final Collection collection = (Collection) value; final byte[] target = new byte[collection.size()]; int i = 0; for (final Object element : collection) { target[i] = convertType(element); i++; } return target; } if (value instanceof Iterable) { final Iterable iterable = (Iterable) value; final ArrayList<Byte> byteArrayList = new ArrayList<>(); for (final Object element : iterable) { final byte convertedValue = convertType(element); byteArrayList.add(Byte.valueOf(convertedValue)); } final byte[] array = new byte[byteArrayList.size()]; for (int i = 0; i < byteArrayList.size(); i++) { final Byte b = byteArrayList.get(i); array[i] = b.byteValue(); } return array; } if (value instanceof CharSequence) { final String[] strings = StringUtil.splitc(value.toString(), ArrayConverter.NUMBER_DELIMITERS); return convertArrayToArray(strings); } // everything else: return convertToSingleElementArray(value); }. ### Assistant:", "ground_truth": "Converts non-array value to array. Detects various\ntypes and collections, iterates them to make conversion\nand to create target array.", "predict": "Convert the value to an array. @param value the value to convert. @return the converted value. @throws TypeConversionException if the conversion fails."}
{"ID": 1771, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected boolean isGzipEligible(final HttpServletRequest request) { // request parameter name if (requestParameterName.length() != 0) { String forceGzipString = request.getParameter(requestParameterName); if (forceGzipString != null) { return Converter.get().toBooleanValue(forceGzipString, false); } } // extract uri String uri = request.getRequestURI(); if (uri == null) { return false; } uri = uri.toLowerCase(); boolean result = false; // check uri if (matches == null) { // match == * if (extensions == null) { // extensions == * return true; } // extension String extension = FileNameUtil.getExtension(uri); if (extension.length() > 0) { extension = extension.toLowerCase(); if (StringUtil.equalsOne(extension, extensions) != -1) { result = true; } } } else { if (wildcards) { result = Wildcard.matchPathOne(uri, matches) != -1; } else { for (String match : matches) { if (uri.contains(match)) { result = true; break; } } } } if ((result) && (excludes != null)) { if (wildcards) { if (Wildcard.matchPathOne(uri, excludes) != -1) { result = false; } } else { for (String exclude : excludes) { if (uri.contains(exclude)) { result = false; // excludes founded break; } } } } return result; }. ### Assistant:", "ground_truth": "Determine if request is eligible for GZipping.", "predict": "Determine if the request should be served with gzip compression. @param request the incoming request @return true if the request should be served with gzip compression, false otherwise"}
{"ID": 1772, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public List<Violation> validate(final Object target) { return validate(ValidationContext.resolveFor(target.getClass()), target); }. ### Assistant:", "ground_truth": "Validate object using context from the annotations.", "predict": "Validates the object against the constraints defined in the schema. @param target the object to validate @return a list of violations found during validation @see #validate(ValidationContext, Object)"}
{"ID": 1773, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public List<Violation> validate(final ValidationContext ctx, final Object target, final String targetName) { for (Map.Entry<String, List<Check>> entry : ctx.map.entrySet()) { String name = entry.getKey(); Object value = BeanUtil.declaredSilent.getProperty(target, name); String valueName = targetName != null ? (targetName + '.' + name) : name; // move up ValidationConstraintContext vcc = new ValidationConstraintContext(this, target, valueName); for (Check check : entry.getValue()) { String[] checkProfiles = check.getProfiles(); if (!matchProfiles(checkProfiles)) { continue; } if (check.getSeverity() < severity) { continue; } ValidationConstraint constraint = check.getConstraint(); if (!constraint.isValid(vcc, value)) { addViolation(new Violation(valueName, target, value, check)); } } } return getViolations(); }. ### Assistant:", "ground_truth": "Performs validation of provided validation context and appends violations.", "predict": "Validates the target object against the constraints defined in the context. @param ctx the validation context @param target the target object @param targetName the name of the target object @return the list of violations found"}
{"ID": 1774, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void useProfile(final String profile) { if (profile == null) { return; } if (this.enabledProfiles == null) { this.enabledProfiles = new HashSet<>(); } this.enabledProfiles.add(profile); }. ### Assistant:", "ground_truth": "Enables single profile.", "predict": "Enable a specific profile. @param profile Profile to enable."}
{"ID": 1775, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void useProfiles(final String... enabledProfiles) { if (enabledProfiles == null) { return; } if (this.enabledProfiles == null) { this.enabledProfiles = new HashSet<>(); } Collections.addAll(this.enabledProfiles, enabledProfiles); }. ### Assistant:", "ground_truth": "Enables list of profiles.", "predict": "Enable the specified profiles. @param enabledProfiles the profiles to enable."}
{"ID": 1776, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected boolean matchProfiles(final String[] checkProfiles) { // test for all profiles if ((checkProfiles != null) && (checkProfiles.length == 1) && checkProfiles[0].equals(ALL_PROFILES)) { return true; } if (enabledProfiles == null || enabledProfiles.isEmpty()) { if (validateAllProfilesByDefault) { return true; // all profiles are considered as enabled } // only default profile is enabled if ((checkProfiles == null) || (checkProfiles.length == 0)) { return true; } for (String profile : checkProfiles) { if (StringUtil.isEmpty(profile)) { return true; // default profile } if (profile.equals(DEFAULT_PROFILE)) { return true; } } return false; } // there are enabled profiles if ((checkProfiles == null) || (checkProfiles.length == 0)) { return enabledProfiles.contains(DEFAULT_PROFILE); } boolean result = false; for (String profile : checkProfiles) { boolean b = true; boolean must = false; if (StringUtil.isEmpty(profile)) { profile = DEFAULT_PROFILE; } else if (profile.charAt(0) == '-') { profile = profile.substring(1); b = false; } else if (profile.charAt(0) == '+') { profile = profile.substring(1); must = true; } if (enabledProfiles.contains(profile)) { if (!b) { return false; } result = true; } else { if (must) { return false; } } } return result; }. ### Assistant:", "ground_truth": "Determine if any of checks profiles is among enabled profiles.", "predict": "Match profiles. @param checkProfiles the check profiles @return true, if successful"}
{"ID": 1777, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected Object parseRequestBody(final String body, final Class targetType) { return JsonParser.create().parse(body, targetType); }. ### Assistant:", "ground_truth": "Parses request body into the target type.", "predict": "Parses the request body as JSON. @param body the request body @param targetType the expected target type @return the parsed JSON object"}
{"ID": 1778, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public long toMilliseconds() { double then = (fraction - JD_1970.fraction) * MILLIS_IN_DAY; then += (integer - JD_1970.integer) * MILLIS_IN_DAY; then += then > 0 ? 1.0e-6 : -1.0e-6; return (long) then; }. ### Assistant:", "ground_truth": "Converts to milliseconds.", "predict": "Returns the Julian day number in milliseconds. @return Julian day number in milliseconds."}
{"ID": 1779, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public JulianDate add(final JulianDate jds) { int i = this.integer + jds.integer; double f = this.fraction + jds.fraction; return new JulianDate(i, f); }. ### Assistant:", "ground_truth": "Adds a JD to current instance.", "predict": "Add JulianDate objects. @param jds JulianDate object to add. @return JulianDate object resulting from the addition of this and jds."}
{"ID": 1780, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public JulianDate sub(final JulianDate jds) { int i = this.integer - jds.integer; double f = this.fraction -jds.fraction; return new JulianDate(i, f); }. ### Assistant:", "ground_truth": "Subtracts a JD from current instance.", "predict": "JulianDate subtract. @param jds JulianDate to subtract from this JulianDate object. @return JulianDate object resulting from subtracting jds from this JulianDate object."}
{"ID": 1781, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void set(final int i, double f) { integer = i; int fi = (int) f; f -= fi; integer += fi; if (f < 0) { f += 1; integer--; } this.fraction = f; }. ### Assistant:", "ground_truth": "Sets integer and fractional part with normalization.\nNormalization means that if double is out of range,\nvalues will be correctly fixed.", "predict": "Set the coefficient of the fraction. @param i the coefficient of the integer part of the fraction. @param f the coefficient of the fraction part of the number."}
{"ID": 1782, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override protected void initialize(final char[] input) { super.initialize(input); this.tag = new ParsedTag(); this.doctype = new ParsedDoctype(); this.text = new char[1024]; this.textLen = 0; this.parsingTime = -1; }. ### Assistant:", "ground_truth": "Initializes parser.", "predict": "Initialize the scanner."}
{"ID": 1783, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void emitComment(final int from, final int to) { if (config.enableConditionalComments) { // CC: downlevel-hidden starting if (match(CC_IF, from)) { int endBracketNdx = find(']', from + 3, to); CharSequence expression = charSequence(from + 1, endBracketNdx); ndx = endBracketNdx + 1; char c = input[ndx]; if (c != '>') { errorInvalidToken(); } visitor.condComment(expression, true, true, false); state = DATA_STATE; return; } if (to > CC_ENDIF2.length && match(CC_ENDIF2, to - CC_ENDIF2.length)) { // CC: downlevel-hidden ending visitor.condComment(_ENDIF, false, true, true); state = DATA_STATE; return; } } CharSequence comment = charSequence(from, to); visitor.comment(comment); commentStart = -1; }. ### Assistant:", "ground_truth": "Emits a comment. Also checks for conditional comments!", "predict": "Emit a comment."}
{"ID": 1784, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void _error(String message) { if (config.calculatePosition) { Position currentPosition = position(ndx); message = message .concat(StringPool.SPACE) .concat(currentPosition.toString()); } else { message = message .concat(\" [@\") .concat(Integer.toString(ndx)) .concat(StringPool.RIGHT_SQ_BRACKET); } visitor.error(message); }. ### Assistant:", "ground_truth": "Prepares error message and reports it to the visitor.", "predict": "Report an error to the visitor. The error message will be displayed in the console. @param message the error message to display."}
{"ID": 1785, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String createHash(final char[] password) { // Generate a random salt SecureRandom random = new SecureRandom(); byte[] salt = new byte[saltBytes]; random.nextBytes(salt); // Hash the password byte[] hash = pbkdf2(password, salt, pbkdf2Iterations, hashBytes); // format iterations:salt:hash return pbkdf2Iterations + \":\" + StringUtil.toHexString(salt) + \":\" + StringUtil.toHexString(hash); }. ### Assistant:", "ground_truth": "Returns a salted PBKDF2 hash of the password.\n\n@param password the password to hash\n@return a salted PBKDF2 hash of the password", "predict": "Create a password hash. @param password password to hash @return the hashed password"}
{"ID": 1786, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static byte[] pbkdf2(final char[] password, final byte[] salt, final int iterations, final int bytes) { PBEKeySpec spec = new PBEKeySpec(password, salt, iterations, bytes * 8); try { SecretKeyFactory skf = SecretKeyFactory.getInstance(PBKDF2_ALGORITHM); return skf.generateSecret(spec).getEncoded(); } catch (NoSuchAlgorithmException ignore) { return null; } catch (InvalidKeySpecException e) { throw new IllegalArgumentException(e); } }. ### Assistant:", "ground_truth": "Computes the PBKDF2 hash of a password.\n\n@param password the password to hash.\n@param salt the salt\n@param iterations the iteration count (slowness factor)\n@param bytes the length of the hash to compute in bytes\n@return the PBDKF2 hash of the password", "predict": "Derives a password-based key from a salt and password. The salt is used to derive a key that is then encrypted with the password. The resulting key is then encrypted with the password again to produce the final key. The password is hashed using SHA-256 before being encrypted. The salt is also hashed using SHA-256. The resulting encrypted key is then Base64-encoded. @param password the password to use @param salt the salt to use @param iterations the number of iterations to use @param bytes the number of bytes to derive @return the encrypted password-based key or null if the password is incorrect"}
{"ID": 1787, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static byte[] fromHex(final String hex) { final byte[] binary = new byte[hex.length() / 2]; for (int i = 0; i < binary.length; i++) { binary[i] = (byte) Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16); } return binary; }. ### Assistant:", "ground_truth": "Converts a string of hexadecimal characters into a byte array.\n\n@param hex the hex string\n@return the hex string decoded into a byte array", "predict": "Convert a hexadecimal string to a byte array. @param hex the hexadecimal string @return the byte array"}
{"ID": 1788, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ProviderDefinition[] resolveProviderDefinitions(final Class type, final String name) { return providerResolver.resolve(type, name); }. ### Assistant:", "ground_truth": "Resolves provider definition defined in a bean.", "predict": "Resolve provider definitions from the provider registry. @param type the type of the provider to resolve @param name the name of the provider to resolve @return the provider definitions that match the type and name."}
{"ID": 1789, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public EmailAttachmentBuilder name(final String name) { if (name != null && !name.trim().isEmpty()) { this.name = name; } return this; }. ### Assistant:", "ground_truth": "Sets file name.\n\n@param name File name to set.\n@return this", "predict": "Set the attachment name. @param name the attachment name @return the builder"}
{"ID": 1790, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected EmailAttachmentBuilder setContentIdFromNameIfMissing() { if (contentId == null) { if (name != null) { contentId(FileNameUtil.getName(name)); } else { contentId(NO_NAME); } } return this; }. ### Assistant:", "ground_truth": "Set content ID if it is missing.\n\n@return this\n@see #contentId(String)", "predict": "If the attachment name is not set, set the contentId from the attachment name. @return this builder"}
{"ID": 1791, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected String resolveContentType(final String contentType) { if (contentType != null) { return contentType; } if (name == null) { return MimeTypes.MIME_APPLICATION_OCTET_STREAM; } final String extension = FileNameUtil.getExtension(name); return MimeTypes.getMimeType(extension); }. ### Assistant:", "ground_truth": "Resolves content type from all data.\n\n@param contentType Content type if we know it. {@code null} is fine to use.\n@return content type", "predict": "Resolves the content type of the uploaded file. The content type is determined by the file extension. If the file extension is not recognized, the default content type is used."}
{"ID": 1792, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: int computeAttributesSize() { symbolTable.addConstantUtf8(Constants.MODULE); // 6 attribute header bytes, 6 bytes for name, flags and version, and 5 * 2 bytes for counts. int size = 22 + requires.length + exports.length + opens.length + usesIndex.length + provides.length; if (packageCount > 0) { symbolTable.addConstantUtf8(Constants.MODULE_PACKAGES); // 6 attribute header bytes, and 2 bytes for package_count. size += 8 + packageIndex.length; } if (mainClassIndex > 0) { symbolTable.addConstantUtf8(Constants.MODULE_MAIN_CLASS); // 6 attribute header bytes, and 2 bytes for main_class_index. size += 8; } return size; }. ### Assistant:", "ground_truth": "Returns the size of the Module, ModulePackages and ModuleMainClass attributes generated by this\nModuleWriter. Also add the names of these attributes in the constant pool.\n\n@return the size in bytes of the Module, ModulePackages and ModuleMainClass attributes.", "predict": "Compute the size of the attributes section."}
{"ID": 1793, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: void putAttributes(final ByteVector output) { // 6 bytes for name, flags and version, and 5 * 2 bytes for counts. int moduleAttributeLength = 16 + requires.length + exports.length + opens.length + usesIndex.length + provides.length; output .putShort(symbolTable.addConstantUtf8(Constants.MODULE)) .putInt(moduleAttributeLength) .putShort(moduleNameIndex) .putShort(moduleFlags) .putShort(moduleVersionIndex) .putShort(requiresCount) .putByteArray(requires.data, 0, requires.length) .putShort(exportsCount) .putByteArray(exports.data, 0, exports.length) .putShort(opensCount) .putByteArray(opens.data, 0, opens.length) .putShort(usesCount) .putByteArray(usesIndex.data, 0, usesIndex.length) .putShort(providesCount) .putByteArray(provides.data, 0, provides.length); if (packageCount > 0) { output .putShort(symbolTable.addConstantUtf8(Constants.MODULE_PACKAGES)) .putInt(2 + packageIndex.length) .putShort(packageCount) .putByteArray(packageIndex.data, 0, packageIndex.length); } if (mainClassIndex > 0) { output .putShort(symbolTable.addConstantUtf8(Constants.MODULE_MAIN_CLASS)) .putInt(2) .putShort(mainClassIndex); } }. ### Assistant:", "ground_truth": "Puts the Module, ModulePackages and ModuleMainClass attributes generated by this ModuleWriter\nin the given ByteVector.\n\n@param output where the attributes must be put.", "predict": "Output the attributes of the module. @param output the ByteVector where the attributes must be written."}
{"ID": 1794, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String decode(final String source, final String encoding) { return decode(source, encoding, false); }. ### Assistant:", "ground_truth": "Decodes URL elements. This method may be used for all\nparts of URL, except for the query parts, since it does\nnot decode the '+' character.\n@see #decodeQuery(String, String)", "predict": "Decodes the given string using the given encoding. If the encoding is not recognized, the string is returned unchanged. @param source the string to decode. @param encoding the encoding to use. @return the decoded string. @throws IllegalArgumentException if the encoding is not recognized."}
{"ID": 1795, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String decodeQuery(final String source, final String encoding) { return decode(source, encoding, true); }. ### Assistant:", "ground_truth": "Decodes query name or value.", "predict": "Decodes a URL query string. @param source the source string @param encoding the encoding to use @return the decoded string"}
{"ID": 1796, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override @SuppressWarnings(\"unchecked\") public void start() { initLogger(); if (!databaseEnabled) { log.info(\"DB not enabled.\"); return; } log.info(\"DB start ----------\"); final PetiteContainer petiteContainer = joyPetiteSupplier.get().getPetiteContainer(); // connection pool connectionProvider = createConnectionProviderIfNotSupplied(); petiteContainer.addBean(beanNamePrefix() + \"pool\", connectionProvider); if (connectionProvider instanceof CoreConnectionPool) { final CoreConnectionPool pool = (CoreConnectionPool) connectionProvider; if (pool.getDriver() == null) { databaseEnabled = false; log.warn(\"DB configuration not set (\" + beanNamePrefix() + \"pool.*). DB will be disabled.\"); return; } } connectionProvider.init(); checkConnectionProvider(); // transactions manager jtxManager = createJtxTransactionManager(connectionProvider); jtxManager.setValidateExistingTransaction(true); final AnnotationTxAdviceManager annTxAdviceManager = new AnnotationTxAdviceManager(new LeanJtxWorker(jtxManager), jtxScopePattern); AnnotationTxAdviceSupport.manager = annTxAdviceManager; // create proxy joyProxettaSupplier.get().getProxetta().withAspect(createTxProxyAspects(annTxAdviceManager.getAnnotations())); final DbSessionProvider sessionProvider = new DbJtxSessionProvider(jtxManager); // querymap final long startTime = System.currentTimeMillis(); final QueryMap queryMap = new DbPropsQueryMap(); log.debug(\"Queries loaded in \" + (System.currentTimeMillis() - startTime) + \"ms.\"); log.debug(\"Total queries: \" + queryMap.size()); // dboom dbOom = DbOom.create() .withConnectionProvider(connectionProvider) .withSessionProvider(sessionProvider) .withQueryMap(queryMap) .get(); dbOom.connect(); final DbEntityManager dbEntityManager = dbOom.entityManager(); dbEntityManager.reset(); petiteContainer.addBean(beanNamePrefix() + \"query\", dbOom.queryConfig()); petiteContainer.addBean(beanNamePrefix() + \"oom\", dbOom.config()); // automatic configuration if (autoConfiguration) { final AutomagicDbOomConfigurator automagicDbOomConfigurator = new AutomagicDbOomConfigurator(dbEntityManager, true); automagicDbOomConfigurator.registerAsConsumer( joyScannerSupplier.get().getClassScanner()); } dbEntityManagerConsumers.accept(dbEntityManager); log.info(\"DB OK!\"); }. ### Assistant:", "ground_truth": "Initializes database. First, creates connection pool.\nand transaction manager. Then, Jodds DbEntityManager is\nconfigured. It is also configured automagically, by scanning\nthe class path for entities.", "predict": "Start database connection pool."}
{"ID": 1797, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void checkConnectionProvider() { final Connection connection = connectionProvider.getConnection(); try { final DatabaseMetaData databaseMetaData = connection.getMetaData(); String name = databaseMetaData.getDatabaseProductName(); String version = databaseMetaData.getDatabaseProductVersion(); if (log.isInfoEnabled()) { log.info(\"Connected to database: \" + name + \" v\" + version); } } catch (SQLException sex) { log.error(\"DB connection failed: \", sex); } finally { connectionProvider.closeConnection(connection); } }. ### Assistant:", "ground_truth": "Checks if connection provider can return a connection.", "predict": "Check the connection provider."}
{"ID": 1798, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) { // if ((access & AsmUtil.ACC_FINAL) != 0) { // return null; // skip finals // } MethodSignatureVisitor msign = createMethodSignature(access, name, desc, signature, exceptions, thisReference, this.generics); String key = ProxettaAsmUtil.createMethodSignaturesKey(access, name, desc, thisReference); methodSignatures.put(key, msign); allMethodSignatures.add(msign.getCleanSignature()); return new MethodAnnotationReader(msign); }. ### Assistant:", "ground_truth": "Stores method signature for target method.", "predict": "Visits a Method instruction. @param access the access flags of the method. @param name the name of the method. @param desc the descriptor of the method. @param signature the signature of the method. @param exceptions the exceptions of the method. @return a MethodAnnotationReader to read the annotations of the method."}
{"ID": 1799, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void visitEnd() { // prepare class annotations if (classAnnotations != null) { annotations = classAnnotations.toArray(new AnnotationInfo[0]); classAnnotations = null; } List<String> superList = new ArrayList<>(); Set<String> allInterfaces = new HashSet<>(); if (nextInterfaces != null) { allInterfaces.addAll(nextInterfaces); } // check all public super methods that are not overridden in superclass while (nextSupername != null) { InputStream inputStream = null; ClassReader cr; try { inputStream = ClassLoaderUtil.getClassAsStream(nextSupername, classLoader); cr = new ClassReader(inputStream); } catch (IOException ioex) { throw new ProxettaException(\"Unable to inspect super class: \" + nextSupername, ioex); } finally { StreamUtil.close(inputStream); } superList.add(nextSupername); superClassReaders.add(cr); // remember the super class reader cr.accept(new SuperClassVisitor(), 0); if (cr.getInterfaces() != null) { Collections.addAll(allInterfaces, cr.getInterfaces()); } } superClasses = superList.toArray(new String[0]); // check all interface methods that are not overridden in super-interface Set<String> todoInterfaces = new HashSet<>(allInterfaces); Set<String> newCollectedInterfaces = new HashSet<>(); while (true) { for (String next : todoInterfaces) { InputStream inputStream = null; ClassReader cr; try { inputStream = ClassLoaderUtil.getClassAsStream(next, classLoader); cr = new ClassReader(inputStream); } catch (IOException ioex) { throw new ProxettaException(\"Unable to inspect super interface: \" + next, ioex); } finally { StreamUtil.close(inputStream); } superClassReaders.add(cr); // remember the super class reader cr.accept(new SuperClassVisitor(), 0); if (cr.getInterfaces() != null) { for (String newInterface : cr.getInterfaces()) { if (!allInterfaces.contains(newInterface) && !todoInterfaces.contains(newInterface)) { // new interface found newCollectedInterfaces.add(newInterface); } } } } // perform collection allInterfaces.addAll(todoInterfaces); if (newCollectedInterfaces.isEmpty()) { // no new interface found break; } todoInterfaces.clear(); todoInterfaces.addAll(newCollectedInterfaces); newCollectedInterfaces.clear(); } }. ### Assistant:", "ground_truth": "Stores signatures for all super public methods not already overridden by target class.\nAll this methods will be accepted for proxyfication.", "predict": "Visit the end of the class."}
{"ID": 1800, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected MethodSignatureVisitor createMethodSignature( final int access, final String methodName, final String description, final String signature, final String[] exceptions, final String classname, final Map<String, String> declaredTypeGenerics) { MethodSignatureVisitor v = new MethodSignatureVisitor(methodName, access, classname, description, exceptions, signature, declaredTypeGenerics, this); new SignatureReader(signature != null ? signature : description).accept(v); return v; }. ### Assistant:", "ground_truth": "Creates method signature from method name.", "predict": "Create a MethodSignatureVisitor to read the method signature. @param access the access flags of the method. @param methodName the name of the method. @param description the description of the method. @param signature the signature of the method. @param exceptions the exceptions of the method. @param classname the name of the class. @param declaredTypeGenerics the generics of the method. @return the MethodSignatureVisitor."}
{"ID": 1801, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String toCsvString(final Object... elements) { StringBuilder line = new StringBuilder(); int last = elements.length -1; for (int i = 0; i < elements.length; i++) { if (elements[i] == null) { if (i != last) { line.append(FIELD_SEPARATOR); } continue; } String field = elements[i].toString(); // check for special cases int ndx = field.indexOf(FIELD_SEPARATOR); if (ndx == -1) { ndx = field.indexOf(FIELD_QUOTE); } if (ndx == -1) { if (field.startsWith(StringPool.SPACE) || field.endsWith(StringPool.SPACE)) { ndx = 1; } } if (ndx == -1) { ndx = StringUtil.indexOfChars(field, SPECIAL_CHARS); } // add field if (ndx != -1) { line.append(FIELD_QUOTE); } field = StringUtil.replace(field, StringPool.QUOTE, DOUBLE_QUOTE); line.append(field); if (ndx != -1) { line.append(FIELD_QUOTE); } // last if (i != last) { line.append(FIELD_SEPARATOR); } } return line.toString(); }. ### Assistant:", "ground_truth": "Parse fields as csv string,", "predict": "Convert the given elements into a CSV string. The elements are assumed to be of the same type. @param elements the elements to convert. @return the CSV string."}
{"ID": 1802, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String[] toStringArray(final String line) { List<String> row = new ArrayList<>(); boolean inQuotedField = false; int fieldStart = 0; final int len = line.length(); for (int i = 0; i < len; i++) { char c = line.charAt(i); if (c == FIELD_SEPARATOR) { if (!inQuotedField) { // ignore we are quoting addField(row, line, fieldStart, i, inQuotedField); fieldStart = i + 1; } } else if (c == FIELD_QUOTE) { if (inQuotedField) { if (i + 1 == len || line.charAt(i + 1) == FIELD_SEPARATOR) { // we are already quoting - peek to see if this is the end of the field addField(row, line, fieldStart, i, inQuotedField); fieldStart = i + 2; i++; // and skip the comma inQuotedField = false; } } else if (fieldStart == i) { inQuotedField = true; // this is a beginning of a quote fieldStart++; // move field start } } } // add last field - but only if string was not empty if (len > 0 && fieldStart <= len) { addField(row, line, fieldStart, len, inQuotedField); } return row.toArray(new String[0]); }. ### Assistant:", "ground_truth": "Converts CSV line to string array.", "predict": "Convert a CSV string to an array of Strings. The input string is assumed to be a single line. @param line the input line @return the array of Strings"}
{"ID": 1803, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public CtorInjectionPoint resolve(final Class type, final boolean useAnnotation) { // lookup methods ClassDescriptor cd = ClassIntrospector.get().lookup(type); CtorDescriptor[] allCtors = cd.getAllCtorDescriptors(); Constructor foundedCtor = null; Constructor defaultCtor = null; BeanReferences[] references = null; for (CtorDescriptor ctorDescriptor : allCtors) { Constructor<?> ctor = ctorDescriptor.getConstructor(); Class<?>[] paramTypes = ctor.getParameterTypes(); if (paramTypes.length == 0) { defaultCtor = ctor; // detects default ctors } if (!useAnnotation) { continue; } BeanReferences[] ctorReferences = referencesResolver.readAllReferencesFromAnnotation(ctor); if (ctorReferences == null) { continue; } if (foundedCtor != null) { throw new PetiteException(\"Two or more constructors are annotated as injection points in the bean: \" + type.getName()); } foundedCtor = ctor; references = ctorReferences; } if (foundedCtor == null) { // there is no annotated constructor if (allCtors.length == 1) { foundedCtor = allCtors[0].getConstructor(); } else { foundedCtor = defaultCtor; } if (foundedCtor == null) { // no matching ctor found // still this is not an error if bean is already instantiated. return CtorInjectionPoint.EMPTY; } references = referencesResolver.readAllReferencesFromAnnotation(foundedCtor); if (references == null) { references = new BeanReferences[0]; } } return new CtorInjectionPoint(foundedCtor, references); }. ### Assistant:", "ground_truth": "Resolves constructor injection point from type. Looks for single annotated constructor.\nIf no annotated constructors found, the total number of constructors will be checked.\nIf there is only one constructor, that one will be used as injection point. If more\nconstructors exist, the default one will be used as injection point. Otherwise, exception\nis thrown.", "predict": "Resolves the injection point of a constructor. The constructor is searched among all constructors of the class. If there are several constructors annotated with the Petite annotation, only the first one is considered. If there is no such constructor, the default constructor is used. If there is no default constructor, the method returns CtorInjectionPoint.EMPTY. The injection point is resolved using the referencesResolver. If the injection point is not found, the method returns CtorInjectionPoint.EMPTY. @param type the class of the bean @param useAnnotation whether the injection point should be found among the constructors annotated with the Petite annotation @return the injection point of the constructor or CtorInjectionPoint.EMPTY if no injection point is found."}
{"ID": 1804, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private ClassReader createAdviceClassReader(final Class<? extends ProxyAdvice> advice) { InputStream inputStream = null; try { inputStream = ClassLoaderUtil.getClassAsStream(advice); return new ClassReader(inputStream); } catch (IOException ioex) { throw new ProxettaException(ioex); } finally { StreamUtil.close(inputStream); } }. ### Assistant:", "ground_truth": "Creates advice's class reader.", "predict": "Create a ClassReader for the advice class. @param advice advice class @return ClassReader for the advice class"}
{"ID": 1805, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private ClassReader getCachedAdviceClassReader(final Class<? extends ProxyAdvice> advice) { if (adviceClassReaderCache == null) { adviceClassReaderCache = TypeCache.createDefault(); } ClassReader adviceReader = adviceClassReaderCache.get(advice); if (adviceReader == null) { adviceReader = createAdviceClassReader(advice); adviceClassReaderCache.put(advice, adviceReader); } return adviceReader; }. ### Assistant:", "ground_truth": "Returns class reader for advice.", "predict": "Get the advice class reader from the cache. @param advice advice to get the class reader for. @return the advice class reader."}
{"ID": 1806, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String encrypt(final String str) { try { byte[] utf8 = StringUtil.getBytes(str); // encode the string into bytes using utf-8 byte[] enc = ecipher.doFinal(utf8); // encrypt return Base64.encodeToString(enc); // encode bytes to base64 to get a string } catch (Throwable ignore) { return null; } }. ### Assistant:", "ground_truth": "Symmetrically encrypts the string.", "predict": "Encrypt the given plaintext using the given key. @param str plaintext to encrypt @return encrypted plaintext"}
{"ID": 1807, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String decrypt(String str) { try { str = StringUtil.replaceChar(str, ' ', '+'); // replace spaces with chars. byte[] dec = Base64.decode(str); // decode base64 to get bytes byte[] utf8 = dcipher.doFinal(dec); // decrypt return new String(utf8, UTF_8); // decode using utf-8 } catch (Throwable ignore) { return null; } }. ### Assistant:", "ground_truth": "Symmetrically decrypts the string.", "predict": "Decrypt the given string. @param str the encrypted string to decrypt. @return the decrypted string."}
{"ID": 1808, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Logger getLogger(final String name) { if (loggers == null) { return loggerProvider.apply(name); } return loggers.computeIfAbsent(name, loggerProvider); }. ### Assistant:", "ground_truth": "Returns logger for given name. Repeated calls to this method with the\nsame argument should return the very same instance of the logger.", "predict": "Get logger by name. If logger not found, create logger by name. @param name logger name @return logger"}
{"ID": 1809, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void setName(final String name) { if (name.contains(\";\") || name.contains(\",\") || name.startsWith(\"$\")) { throw new IllegalArgumentException(\"Invalid cookie name:\" + name); } for (int n = 0; n < name.length(); n++) { char c = name.charAt(n); if (c <= 0x20 || c >= 0x7f) { throw new IllegalArgumentException(\"Invalid cookie name:\" + name); } } this.name = name; }. ### Assistant:", "ground_truth": "Sets the cookie name and checks for validity.", "predict": "Set cookie name. @param name cookie name"}
{"ID": 1810, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected ActionRequest createActionRequest( final String actionPath, final String[] actionPathChunks, final ActionRuntime actionRuntime, final Object action, final HttpServletRequest servletRequest, final HttpServletResponse servletResponse) { return new ActionRequest(this, actionPath, actionPathChunks, actionRuntime, action, servletRequest, servletResponse); }. ### Assistant:", "ground_truth": "Creates new action request.\n@param actionPath\t\taction path\n@param actionRuntime\t\taction runtime\n@param action\t\t\taction object\n@param servletRequest\thttp request\n@param servletResponse\thttp response\n@return action request", "predict": "Create an ActionRequest. @param actionPath the action path @param actionPathChunks the action path chunks @param actionRuntime the action runtime @param action the action @param servletRequest the servlet request @param servletResponse the servlet response @return the ActionRequest"}
{"ID": 1811, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override protected <R extends ActionFilter> R createWrapper(final Class<R> wrapperClass) { return petiteContainer.createBean(wrapperClass); }. ### Assistant:", "ground_truth": "Acquires filter from Petite container.", "predict": "Create a wrapper around the given class. @param wrapperClass the class to wrap around. @return the wrapper."}
{"ID": 1812, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: protected void destroyBean(final BeanData beanData) { if (destroyableBeans == null) { return; } if (!isBeanDestroyable(beanData)) { return; } if (destroyableBeans.remove(beanData)) { beanData.callDestroyMethods(); } }. ### Assistant:", "ground_truth": "Removes destroyable bean from the list and calls it destroy methods.\nIf bean is not destroyable, does nothing. Bean gets destroyed only once.", "predict": "Destroy bean. @param beanData BeanData object."}
{"ID": 1813, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void shutdown() { if (destroyableBeans == null) { return; } for (final BeanData destroyableBean : destroyableBeans) { destroyableBean.callDestroyMethods(); } destroyableBeans.clear(); }. ### Assistant:", "ground_truth": "Shutdowns the scope and calls all collected destroyable beans.", "predict": "Destroy all destroyable beans."}
{"ID": 1814, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ReceivedEmail[] get() { if (fromFolder != null) { session.useFolder(fromFolder); } return session.receiveMessages(filter, flagsToSet, flagsToUnset, envelopeOnly, messages -> { if (targetFolder != null) { try { session.folder.copyMessages(messages, session.getFolder(targetFolder)); } catch (MessagingException e) { throw new MailException(\"Copying messages failed\"); } } }); }. ### Assistant:", "ground_truth": "Receives the emails as specified by the builder.", "predict": "Receive emails from the specified folder. The emails will be copied to the target folder. @return The emails received. @throws MailException If there was an error while receiving emails."}
{"ID": 1815, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void main(final String[] args) { loadPropertiesFiles(args); try (ClusteredServiceContainer container = launch()) { container.context().shutdownSignalBarrier().await(); System.out.println(\"Shutdown ClusteredServiceContainer...\"); } }. ### Assistant:", "ground_truth": "Launch the clustered service container and await a shutdown signal.\n\n@param args command line argument which is a list for properties files as URLs or filenames.", "predict": "Main method. @param args command line arguments"}
{"ID": 1816, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void run() { do { LockSupport.parkNanos(parkNs); final long currentTotalMessages = totalMessages; final long currentTotalBytes = totalBytes; final long currentTimestamp = System.nanoTime(); final long timeSpanNs = currentTimestamp - lastTimestamp; final double messagesPerSec = ((currentTotalMessages - lastTotalMessages) * (double)reportIntervalNs) / (double)timeSpanNs; final double bytesPerSec = ((currentTotalBytes - lastTotalBytes) * (double)reportIntervalNs) / (double)timeSpanNs; reportingFunc.onReport(messagesPerSec, bytesPerSec, currentTotalMessages, currentTotalBytes); lastTotalBytes = currentTotalBytes; lastTotalMessages = currentTotalMessages; lastTimestamp = currentTimestamp; } while (!halt); }. ### Assistant:", "ground_truth": "Run loop for the rate reporter", "predict": "Continuously reports metrics while the program is running."}
{"ID": 1817, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @SuppressWarnings(\"unused\") public static void printError( final String channel, final int streamId, final int sessionId, final String message, final HeaderFlyweight cause) { System.out.println(message); }. ### Assistant:", "ground_truth": "Generic error handler that just prints message to stdout.\n\n@param channel   for the error\n@param streamId  for the error\n@param sessionId for the error, if source\n@param message   indicating what the error was\n@param cause     of the error", "predict": "Prints an error message to the console. @param channel The channel to print to. @param streamId The stream ID of the channel. @param sessionId The session ID of the channel. @param message The error message. @param cause The error cause."}
{"ID": 1818, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void printRate( final double messagesPerSec, final double bytesPerSec, final long totalMessages, final long totalBytes) { System.out.println(String.format( \"%.02g msgs/sec, %.02g payload bytes/sec, totals %d messages %d MB\", messagesPerSec, bytesPerSec, totalMessages, totalBytes / (1024 * 1024))); }. ### Assistant:", "ground_truth": "Print the rates to stdout\n\n@param messagesPerSec being reported\n@param bytesPerSec    being reported\n@param totalMessages  being reported\n@param totalBytes     being reported", "predict": "Print rate statistics. @param messagesPerSec Messages per second rate. @param bytesPerSec Payload bytes per second rate. @param totalMessages Total messages sent. @param totalBytes Total bytes sent."}
{"ID": 1819, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static MappedByteBuffer mapExistingFileReadOnly(final File location) { if (!location.exists()) { final String msg = \"file not found: \" + location.getAbsolutePath(); throw new IllegalStateException(msg); } MappedByteBuffer mappedByteBuffer = null; try (RandomAccessFile file = new RandomAccessFile(location, \"r\"); FileChannel channel = file.getChannel()) { mappedByteBuffer = channel.map(READ_ONLY, 0, channel.size()); } catch (final IOException ex) { LangUtil.rethrowUnchecked(ex); } return mappedByteBuffer; }. ### Assistant:", "ground_truth": "Map an existing file as a read only buffer.\n\n@param location of file to map.\n@return the mapped file.", "predict": "Maps an existing file read-only. @param location the file to map @return the mapped byte buffer"}
{"ID": 1820, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void close() { final State state = this.state; if (State.CLOSED != state) { if (isReplayActive) { isReplayActive = false; archive.stopReplay(replaySessionId); } if (State.MERGED != state) { subscription.removeDestination(replayDestination); } state(State.CLOSED); } }. ### Assistant:", "ground_truth": "Close the merge and stop any active replay. Will remove the replay destination from the subscription. Will\nNOT remove the live destination if it has been added.", "predict": "Close the replay session."}
{"ID": 1821, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public int doWork() { int workCount = 0; switch (state) { case AWAIT_INITIAL_RECORDING_POSITION: workCount += awaitInitialRecordingPosition(); break; case AWAIT_REPLAY: workCount += awaitReplay(); break; case AWAIT_CATCH_UP: workCount += awaitCatchUp(); break; case AWAIT_CURRENT_RECORDING_POSITION: workCount += awaitUpdatedRecordingPosition(); break; case AWAIT_STOP_REPLAY: workCount += awaitStopReplay(); break; } return workCount; }. ### Assistant:", "ground_truth": "Process the operation of the merge. Do not call the processing of fragments on the subscription.\n\n@return indication of work done processing the merge.", "predict": "Perform the work that is necessary to achieve the current state. @return The number of work units that have been performed."}
{"ID": 1822, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public long position() { if (isClosed) { return CLOSED; } final long rawTail = rawTailVolatile(logMetaDataBuffer); final int termOffset = termOffset(rawTail, termBufferLength); return computePosition(termId(rawTail), termOffset, positionBitsToShift, initialTermId); }. ### Assistant:", "ground_truth": "Get the current position to which the publication has advanced for this stream.\n\n@return the current position to which the publication has advanced for this stream or {@link #CLOSED}.", "predict": "Returns the current position of the log. This is an approximation and may differ from the actual position due to the fact that the log is not guaranteed to be in a consistent state. The returned value is guaranteed to be monotonically increasing."}
{"ID": 1823, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public long offer(final DirectBufferVector[] vectors, final ReservedValueSupplier reservedValueSupplier) { final int length = DirectBufferVector.validateAndComputeLength(vectors); long newPosition = CLOSED; if (!isClosed) { final long limit = positionLimit.getVolatile(); final ExclusiveTermAppender termAppender = termAppenders[activePartitionIndex]; final long position = termBeginPosition + termOffset; if (position < limit) { final int result; if (length <= maxPayloadLength) { result = termAppender.appendUnfragmentedMessage( termId, termOffset, headerWriter, vectors, length, reservedValueSupplier); } else { checkMaxMessageLength(length); result = termAppender.appendFragmentedMessage( termId, termOffset, headerWriter, vectors, length, maxPayloadLength, reservedValueSupplier); } newPosition = newPosition(result); } else { newPosition = backPressureStatus(position, length); } } return newPosition; }. ### Assistant:", "ground_truth": "Non-blocking publish by gathering buffer vectors into a message.\n\n@param vectors               which make up the message.\n@param reservedValueSupplier {@link ReservedValueSupplier} for the frame.\n@return The new stream position, otherwise a negative error value of {@link #NOT_CONNECTED},\n{@link #BACK_PRESSURED}, {@link #ADMIN_ACTION}, {@link #CLOSED}, or {@link #MAX_POSITION_EXCEEDED}.", "predict": "Offer the given DirectBufferVector array to the buffer. The length of the array is computed from the lengths of the individual vectors. The length is limited by the maximum payload length. If the length is greater than the maximum payload length, the message is fragmented. The fragmentation is limited by the maximum message length. The position is updated accordingly. The position is updated to the new position. The position is updated to the new position. The position is updated to the new position. The position is updated to the new position. The position is updated to the new position. The position is updated to the new position. The position is updated to the new position. The position is updated to the new position. The position is updated to the new position. The position is updated to the new position. The position is updated to the new position. The position is updated to the new position. The position is updated to the new position. The position is updated to the new position. The position is updated to the new position. The position is updated to the new position. The"}
{"ID": 1824, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public long appendPadding(final int length) { checkMaxMessageLength(length); long newPosition = CLOSED; if (!isClosed) { final long limit = positionLimit.getVolatile(); final ExclusiveTermAppender termAppender = termAppenders[activePartitionIndex]; final long position = termBeginPosition + termOffset; if (position < limit) { checkPositiveLength(length); final int result = termAppender.appendPadding(termId, termOffset, headerWriter, length); newPosition = newPosition(result); } else { newPosition = backPressureStatus(position, length); } } return newPosition; }. ### Assistant:", "ground_truth": "Append a padding record log of a given length to make up the log to a position.\n\n@param length of the range to claim, in bytes..\n@return The new stream position, otherwise a negative error value of {@link #NOT_CONNECTED},\n{@link #BACK_PRESSURED}, {@link #ADMIN_ACTION}, {@link #CLOSED}, or {@link #MAX_POSITION_EXCEEDED}.\n@throws IllegalArgumentException if the length is greater than {@link #maxMessageLength()}.", "predict": "Append padding to the message. The padding is added at the end of the message. The length of the padding is determined by the length of the message. The padding is added to the message in the same way as the message data. The padding is added to the message in the same way as the message data. The padding is added to the message in the same way as the message data. The padding is added to the message in the same way as the message data. The padding is added to the message in the same way as the message data. The padding is added to the message in the same way as the message data. The padding is added to the message in the same way as the message data. The padding is added to the message in the same way as the message data. The padding is added to the message in the same way as the message data. The padding is added to the message in the same way as the message data. The padding is added to the message in the same way as the message data. The padding is added to the message in the"}
{"ID": 1825, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void close() { lock.lock(); try { if (!isClosed) { isClosed = true; archiveProxy.closeSession(controlSessionId); if (!context.ownsAeronClient()) { CloseHelper.close(controlResponsePoller.subscription()); CloseHelper.close(archiveProxy.publication()); } context.close(); } } finally { lock.unlock(); } }. ### Assistant:", "ground_truth": "Notify the archive that this control session is closed so it can promptly release resources then close the\nlocal resources associated with the client.", "predict": "Close the connection to the control service. This will release any resources associated with the connection."}
{"ID": 1826, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String pollForErrorResponse() { lock.lock(); try { ensureOpen(); if (controlResponsePoller.poll() != 0 && controlResponsePoller.isPollComplete()) { if (controlResponsePoller.controlSessionId() == controlSessionId && controlResponsePoller.templateId() == ControlResponseDecoder.TEMPLATE_ID && controlResponsePoller.code() == ControlResponseCode.ERROR) { return controlResponsePoller.errorMessage(); } } return null; } finally { lock.unlock(); } }. ### Assistant:", "ground_truth": "Poll the response stream once for an error. If another message is present then it will be skipped over\nso only call when not expecting another response.\n\n@return the error String otherwise null if no error is found.", "predict": "Waits for an error response from the server. If one is received, it is returned. If no error response is received, null is returned. @return the error message received or null if none was received."}
{"ID": 1827, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void stopReplay(final long replaySessionId) { lock.lock(); try { ensureOpen(); final long correlationId = aeron.nextCorrelationId(); if (!archiveProxy.stopReplay(replaySessionId, correlationId, controlSessionId)) { throw new ArchiveException(\"failed to send stop replay request\"); } pollForResponse(correlationId); } finally { lock.unlock(); } }. ### Assistant:", "ground_truth": "Stop a replay session.\n\n@param replaySessionId to stop replay for.", "predict": "Stop replaying from the archive. The archive will continue to stream events to the control session. The control session will continue to receive events until it is closed. The archive will continue to stream events to the archive session. The archive session will continue to receive events until it is closed."}
{"ID": 1828, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void eventAvailableImage(final Image image) { final Subscription subscription = image.subscription(); System.out.format( \"new image on %s streamId %x sessionId %x from %s%n\", subscription.channel(), subscription.streamId(), image.sessionId(), image.sourceIdentity()); }. ### Assistant:", "ground_truth": "Print the information for an available image to stdout.\n\n@param image that has been created", "predict": "Logs that a new image has been received on the image stream."}
{"ID": 1829, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void eventUnavailableImage(final Image image) { final Subscription subscription = image.subscription(); System.out.format( \"inactive image on %s streamId %d sessionId %x%n\", subscription.channel(), subscription.streamId(), image.sessionId()); }. ### Assistant:", "ground_truth": "This handler is called when image is unavailable\n\n@param image that has gone inactive", "predict": "Logs that an image is no longer available for the given subscription. @param image the image that is no longer available"}
{"ID": 1830, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static StatusIndicatorReader sendChannelStatus(final CountersReader countersReader, final String channel) { StatusIndicatorReader statusReader = null; final MutableInteger id = new MutableInteger(-1); countersReader.forEach( (counterId, typeId, keyBuffer, label) -> { if (typeId == SendChannelStatus.SEND_CHANNEL_STATUS_TYPE_ID) { if (channel.startsWith(keyBuffer.getStringAscii(ChannelEndpointStatus.CHANNEL_OFFSET))) { id.value = counterId; } } }); if (Aeron.NULL_VALUE != id.value) { statusReader = new UnsafeBufferStatusIndicator(countersReader.valuesBuffer(), id.value); } return statusReader; }. ### Assistant:", "ground_truth": "Return the read-only status indicator for the given send channel URI.\n\n@param countersReader that holds the status indicator.\n@param channel        for the send channel.\n@return read-only status indicator that can be used to query the status of the send channel or null\n@see ChannelEndpointStatus for status values and indications.", "predict": "Find the channel status counters and create a status reader from them. @param countersReader the counters reader @param channel the channel name @return the status reader"}
{"ID": 1831, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static StatusIndicatorReader receiveChannelStatus(final CountersReader countersReader, final String channel) { StatusIndicatorReader statusReader = null; final MutableInteger id = new MutableInteger(-1); countersReader.forEach( (counterId, typeId, keyBuffer, label) -> { if (typeId == ReceiveChannelStatus.RECEIVE_CHANNEL_STATUS_TYPE_ID) { if (channel.startsWith(keyBuffer.getStringAscii(ChannelEndpointStatus.CHANNEL_OFFSET))) { id.value = counterId; } } }); if (Aeron.NULL_VALUE != id.value) { statusReader = new UnsafeBufferStatusIndicator(countersReader.valuesBuffer(), id.value); } return statusReader; }. ### Assistant:", "ground_truth": "Return the read-only status indicator for the given receive channel URI.\n\n@param countersReader that holds the status indicator.\n@param channel        for the receive channel.\n@return read-only status indicator that can be used to query the status of the receive channel or null.\n@see ChannelEndpointStatus for status values and indications.", "predict": "Find the status of a channel from counters. The channel is identified by a label that starts with the channel name. The label is extracted from the key buffer. The label is a hexadecimal string. The label is extracted from the key buffer. The label is extracted from the key buffer. The label is extracted from the key buffer. The label is extracted from the key buffer. The label is extracted from the key buffer. The label is extracted from the key buffer. The label is extracted from the key buffer. The label is extracted from the key buffer. The label is extracted from the key buffer. The label is extracted from the key buffer. The label is extracted from the key buffer. The label is extracted from the key buffer. The label is extracted from the key buffer. The label is extracted from the key buffer. The label is extracted from the key buffer. The label is extracted from the key buffer. The label is extracted from the key buffer. The label is extracted from the key buffer. The label is extracted from the key buffer. The label"}
{"ID": 1832, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void limit(final int limit) { if (limit < 0 || limit >= buffer.capacity()) { throw new IllegalArgumentException( \"limit outside range: capacity=\" + buffer.capacity() + \" limit=\" + limit); } this.limit = limit; }. ### Assistant:", "ground_truth": "Set this limit for this buffer as the position at which the next append operation will occur.\n\n@param limit to be the new value.", "predict": "Set the limit of the buffer. @param limit the limit of the buffer."}
{"ID": 1833, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public BufferBuilder append(final DirectBuffer srcBuffer, final int srcOffset, final int length) { ensureCapacity(length); buffer.putBytes(limit, srcBuffer, srcOffset, length); limit += length; return this; }. ### Assistant:", "ground_truth": "Append a source buffer to the end of the internal buffer, resizing the internal buffer as required.\n\n@param srcBuffer from which to copy.\n@param srcOffset in the source buffer from which to copy.\n@param length    in bytes to copy from the source buffer.\n@return the builder for fluent API usage.", "predict": "Append data from a DirectBuffer to the buffer. @param srcBuffer the buffer to read from @param srcOffset the offset in srcBuffer to start reading from @param length the number of bytes to read @return this buffer builder"}
{"ID": 1834, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public int poll() { controlSessionId = -1; correlationId = -1; relevantId = -1; templateId = -1; errorMessage = null; pollComplete = false; return subscription.controlledPoll(fragmentAssembler, fragmentLimit); }. ### Assistant:", "ground_truth": "Poll for control response events.\n\n@return the number of fragments read during the operation. Zero if no events are available.", "predict": "Poll for new subscriptions. This method is blocking and will wait until a new subscription is available. @return the subscription or null if no subscription is available."}
{"ID": 1835, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static MappedByteBuffer mapLossReport(final String aeronDirectoryName, final int reportFileLength) { return mapNewFile(file(aeronDirectoryName), reportFileLength, false); }. ### Assistant:", "ground_truth": "Map a new loss report in the Aeron directory for a given length.\n\n@param aeronDirectoryName in which to create the file.\n@param reportFileLength   for the file.\n@return the newly mapped buffer for the file.", "predict": "Maps the loss report file to a new file. The aeron directory name is used to determine the file name. The length of the loss report file is used to determine the size of the mapped buffer. The mapped buffer is guaranteed to be large enough to hold the entire loss report file. The aeron directory name is used to determine the file name. The length of the loss report file is used to determine the size of the mapped buffer. The mapped buffer is guaranteed to be large enough to hold the entire loss report file. The aeron directory name is used to determine the file name. The length of the loss report file is used to determine the size of the mapped buffer. The mapped buffer is guaranteed to be large enough to hold the entire loss report file. The aeron directory name is used to determine the file name. The length of the loss report file is used to determine the size of the mapped buffer. The mapped buffer is guaranteed to be large enough to hold the entire loss report file. The aeron directory name is used to determine the file name. The"}
{"ID": 1836, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Map<StreamCompositeKey, List<StreamPosition>> snapshot() { final Map<StreamCompositeKey, List<StreamPosition>> streams = new HashMap<>(); counters.forEach( (counterId, typeId, keyBuffer, label) -> { if ((typeId >= PUBLISHER_LIMIT_TYPE_ID && typeId <= RECEIVER_POS_TYPE_ID) || typeId == SENDER_LIMIT_TYPE_ID || typeId == PER_IMAGE_TYPE_ID || typeId == PUBLISHER_POS_TYPE_ID) { final StreamCompositeKey key = new StreamCompositeKey( keyBuffer.getInt(SESSION_ID_OFFSET), keyBuffer.getInt(STREAM_ID_OFFSET), keyBuffer.getStringAscii(CHANNEL_OFFSET)); final StreamPosition position = new StreamPosition( keyBuffer.getLong(REGISTRATION_ID_OFFSET), counters.getCounterValue(counterId), typeId); streams .computeIfAbsent(key, (ignore) -> new ArrayList<>()) .add(position); } }); return streams; }. ### Assistant:", "ground_truth": "Take a snapshot of all the counters and group them by streams.\n\n@return a snapshot of all the counters and group them by streams.", "predict": "Returns a snapshot of the counters and their positions. The snapshot is guaranteed to be consistent with the current state of the counters. @return a snapshot of the counters and their positions."}
{"ID": 1837, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static UnsafeBuffer createDefaultHeader(final int sessionId, final int streamId, final int termId) { final UnsafeBuffer buffer = new UnsafeBuffer( BufferUtil.allocateDirectAligned(HEADER_LENGTH, CACHE_LINE_LENGTH)); buffer.putByte(VERSION_FIELD_OFFSET, CURRENT_VERSION); buffer.putByte(FLAGS_FIELD_OFFSET, (byte)BEGIN_AND_END_FLAGS); buffer.putShort(TYPE_FIELD_OFFSET, (short)HDR_TYPE_DATA, LITTLE_ENDIAN); buffer.putInt(SESSION_ID_FIELD_OFFSET, sessionId, LITTLE_ENDIAN); buffer.putInt(STREAM_ID_FIELD_OFFSET, streamId, LITTLE_ENDIAN); buffer.putInt(TERM_ID_FIELD_OFFSET, termId, LITTLE_ENDIAN); buffer.putLong(RESERVED_VALUE_OFFSET, DEFAULT_RESERVE_VALUE); return buffer; }. ### Assistant:", "ground_truth": "Return an initialised default Data Frame Header.\n\n@param sessionId for the header\n@param streamId  for the header\n@param termId    for the header\n@return byte array containing the header", "predict": "Create a default header buffer. @param sessionId session id @param streamId stream id @param termId term id @return a new header buffer"}
{"ID": 1838, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public CounterMessageFlyweight keyBuffer(final DirectBuffer keyBuffer, final int keyOffset, final int keyLength) { buffer.putInt(KEY_LENGTH_OFFSET, keyLength); if (null != keyBuffer && keyLength > 0) { buffer.putBytes(keyBufferOffset(), keyBuffer, keyOffset, keyLength); } return this; }. ### Assistant:", "ground_truth": "Fill the key buffer.\n\n@param keyBuffer containing the optional key for the counter.\n@param keyOffset within the keyBuffer at which the key begins.\n@param keyLength of the key in the keyBuffer.\n@return flyweight", "predict": "Write the key buffer to the message. The key buffer is assumed to be a direct buffer. @param keyBuffer the key buffer to write. @param keyOffset the offset in the key buffer to start reading from. @param keyLength the length of the key to write. @return this flyweight."}
{"ID": 1839, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public CounterMessageFlyweight labelBuffer( final DirectBuffer labelBuffer, final int labelOffset, final int labelLength) { buffer.putInt(labelOffset(), labelLength); buffer.putBytes(labelBufferOffset(), labelBuffer, labelOffset, labelLength); return this; }. ### Assistant:", "ground_truth": "Fill the label buffer.\n\n@param labelBuffer containing the mandatory label for the counter.\n@param labelOffset within the labelBuffer at which the label begins.\n@param labelLength of the label in the labelBuffer.\n@return flyweight", "predict": "Label buffer. @param labelBuffer Label buffer. @param labelOffset Label offset. @param labelLength Label length. @return This flyweight."}
{"ID": 1840, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean connect(final String responseChannel, final int responseStreamId, final long correlationId) { connectRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .correlationId(correlationId) .responseStreamId(responseStreamId) .version(AeronArchive.Configuration.SEMANTIC_VERSION) .responseChannel(responseChannel); return offerWithTimeout(connectRequestEncoder.encodedLength(), null); }. ### Assistant:", "ground_truth": "Connect to an archive on its control interface providing the response stream details.\n\n@param responseChannel  for the control message responses.\n@param responseStreamId for the control message responses.\n@param correlationId    for this request.\n@return true if successfully offered otherwise false.", "predict": "Connect to the control channel. @param responseChannel Channel to send control response to. @param responseStreamId Stream ID of the control channel. @param correlationId Correlation ID to use for the control message. @return True if the connection was established. False if the connection was refused."}
{"ID": 1841, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean tryConnect(final String responseChannel, final int responseStreamId, final long correlationId) { connectRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .correlationId(correlationId) .responseStreamId(responseStreamId) .version(AeronArchive.Configuration.SEMANTIC_VERSION) .responseChannel(responseChannel); final int length = MessageHeaderEncoder.ENCODED_LENGTH + connectRequestEncoder.encodedLength(); return publication.offer(buffer, 0, length) > 0; }. ### Assistant:", "ground_truth": "Try Connect to an archive on its control interface providing the response stream details. Only one attempt will\nbe made to offer the request.\n\n@param responseChannel  for the control message responses.\n@param responseStreamId for the control message responses.\n@param correlationId    for this request.\n@return true if successfully offered otherwise false.", "predict": "Try to connect to the control channel. @param responseChannel Channel to send the response to. @param responseStreamId StreamId of the response channel. @param correlationId CorrelationId of the control message. @return True if the message was successfully sent. False if the buffer was not offered."}
{"ID": 1842, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean closeSession(final long controlSessionId) { closeSessionRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId); return offer(closeSessionRequestEncoder.encodedLength()); }. ### Assistant:", "ground_truth": "Close this control session with the archive.\n\n@param controlSessionId with the archive.\n@return true if successfully offered otherwise false.", "predict": "Close a session. @param controlSessionId the control session id @return true if the message was successfully sent"}
{"ID": 1843, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean startRecording( final String channel, final int streamId, final SourceLocation sourceLocation, final long correlationId, final long controlSessionId) { startRecordingRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .streamId(streamId) .sourceLocation(sourceLocation) .channel(channel); return offer(startRecordingRequestEncoder.encodedLength()); }. ### Assistant:", "ground_truth": "Start recording streams for a given channel and stream id pairing.\n\n@param channel          to be recorded.\n@param streamId         to be recorded.\n@param sourceLocation   of the publication to be recorded.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Start recording a stream. @param channel the channel to record the stream on. @param streamId the stream id to record the stream on. @param sourceLocation the source location of the request. @param correlationId the correlation id of the request. @param controlSessionId the control session id of the request. @return true if the request was offered, false otherwise."}
{"ID": 1844, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean stopRecording( final String channel, final int streamId, final long correlationId, final long controlSessionId) { stopRecordingRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .streamId(streamId) .channel(channel); return offer(stopRecordingRequestEncoder.encodedLength()); }. ### Assistant:", "ground_truth": "Stop an active recording.\n\n@param channel          to be stopped.\n@param streamId         to be stopped.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Stop recording a stream. @param channel Channel name @param streamId Stream ID @param correlationId Correlation ID @param controlSessionId Control session ID @return True if the message was sent successfully, false otherwise"}
{"ID": 1845, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean replay( final long recordingId, final long position, final long length, final String replayChannel, final int replayStreamId, final long correlationId, final long controlSessionId) { replayRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .recordingId(recordingId) .position(position) .length(length) .replayStreamId(replayStreamId) .replayChannel(replayChannel); return offer(replayRequestEncoder.encodedLength()); }. ### Assistant:", "ground_truth": "Replay a recording from a given position.\n\n@param recordingId      to be replayed.\n@param position         from which the replay should be started.\n@param length           of the stream to be replayed. Use {@link Long#MAX_VALUE} to follow a live stream.\n@param replayChannel    to which the replay should be sent.\n@param replayStreamId   to which the replay should be sent.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Replay a recorded media stream. @param recordingId The recording ID of the media stream to be replayed. @param position The starting position of the media stream to be replayed. @param length The length of the media stream to be replayed. @param replayChannel The channel to replay the media stream on. @param replayStreamId The stream ID of the media stream to be replayed. @param correlationId The correlation ID of the media stream to be replayed. @param controlSessionId The control session ID of the media stream to be replayed. @return True if the request was accepted, false otherwise."}
{"ID": 1846, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean stopReplay(final long replaySessionId, final long correlationId, final long controlSessionId) { stopReplayRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .replaySessionId(replaySessionId); return offer(replayRequestEncoder.encodedLength()); }. ### Assistant:", "ground_truth": "Stop an existing replay session.\n\n@param replaySessionId  that should be stopped.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Stop replay session. @param replaySessionId Replay session ID. @param correlationId Correlation ID. @param controlSessionId Control session ID. @return Whether the message was sent successfully."}
{"ID": 1847, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean listRecordings( final long fromRecordingId, final int recordCount, final long correlationId, final long controlSessionId) { listRecordingsRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .fromRecordingId(fromRecordingId) .recordCount(recordCount); return offer(listRecordingsRequestEncoder.encodedLength()); }. ### Assistant:", "ground_truth": "List a range of recording descriptors.\n\n@param fromRecordingId  at which to begin listing.\n@param recordCount      for the number of descriptors to be listed.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "List recordings from a specific recording ID to a specific recording ID. The control session ID is used to identify the control plane session. The correlation ID is used to identify the request. @param fromRecordingId the ID of the recording to start listing from @param recordCount the number of recordings to list @param correlationId the correlation ID of the request @param controlSessionId the ID of the control plane session @return true if the request was offered, false otherwise"}
{"ID": 1848, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean listRecordingsForUri( final long fromRecordingId, final int recordCount, final String channelFragment, final int streamId, final long correlationId, final long controlSessionId) { listRecordingsForUriRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .fromRecordingId(fromRecordingId) .recordCount(recordCount) .streamId(streamId) .channel(channelFragment); return offer(listRecordingsForUriRequestEncoder.encodedLength()); }. ### Assistant:", "ground_truth": "List a range of recording descriptors which match a channel URI fragment and stream id.\n\n@param fromRecordingId  at which to begin listing.\n@param recordCount      for the number of descriptors to be listed.\n@param channelFragment  to match recordings on from the original channel URI in the archive descriptor.\n@param streamId         to match recordings on.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Send a request to list the recordings for a URI. @param fromRecordingId the ID of the first recording to include in the list @param recordCount the maximum number of recordings to include in the list @param channelFragment the fragment of the channel URI to include in the list @param streamId the stream ID to include in the list @param correlationId the correlation ID to include in the list @param controlSessionId the control session ID to include in the list @return true if the message was successfully sent, false otherwise"}
{"ID": 1849, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean listRecording(final long recordingId, final long correlationId, final long controlSessionId) { listRecordingRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .recordingId(recordingId); return offer(listRecordingRequestEncoder.encodedLength()); }. ### Assistant:", "ground_truth": "List a recording descriptor for a given recording id.\n\n@param recordingId      at which to begin listing.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Send a request to list the recordings associated with a given correlationId. The correlationId is used to identify the recording session. The controlSessionId is used to identify the control session that initiated the request."}
{"ID": 1850, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean extendRecording( final String channel, final int streamId, final SourceLocation sourceLocation, final long recordingId, final long correlationId, final long controlSessionId) { extendRecordingRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .recordingId(recordingId) .streamId(streamId) .sourceLocation(sourceLocation) .channel(channel); return offer(extendRecordingRequestEncoder.encodedLength()); }. ### Assistant:", "ground_truth": "Extend an existing, non-active, recorded stream for a the same channel and stream id.\n\nThe channel must be configured for the initial position from which it will be extended. This can be done\nwith {@link ChannelUriStringBuilder#initialPosition(long, int, int)}. The details required to initialise can\nbe found by calling {@link #listRecording(long, long, long)}.\n\n@param channel          to be recorded.\n@param streamId         to be recorded.\n@param sourceLocation   of the publication to be recorded.\n@param recordingId      to be extended.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Send an extend recording request to the server. @param channel the channel to extend the recording on. @param streamId the stream id to extend the recording on. @param sourceLocation the source location of the request. @param recordingId the recording id to extend. @param correlationId the correlation id of the request. @param controlSessionId the control session id of the request. @return true if the request was sent successfully, false otherwise."}
{"ID": 1851, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean getRecordingPosition(final long recordingId, final long correlationId, final long controlSessionId) { recordingPositionRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .recordingId(recordingId); return offer(recordingPositionRequestEncoder.encodedLength()); }. ### Assistant:", "ground_truth": "Get the recorded position of an active recording.\n\n@param recordingId      of the active recording that the position is being requested for.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Send a recording position request to the server. @param recordingId The recording id of the recording. @param correlationId The correlation id of the request. @param controlSessionId The control session id of the control session. @return true if the message was successfully sent, false otherwise."}
{"ID": 1852, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean getStopPosition(final long recordingId, final long correlationId, final long controlSessionId) { stopPositionRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .recordingId(recordingId); return offer(stopPositionRequestEncoder.encodedLength()); }. ### Assistant:", "ground_truth": "Get the stop position of a recording.\n\n@param recordingId      of the recording that the stop position is being requested for.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Send a STOP_POSITION request to the server. @param recordingId The recordingId of the recording. @param correlationId The correlationId of the request. @param controlSessionId The controlSessionId of the control session. @return true if the message was successfully sent, false otherwise."}
{"ID": 1853, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean listRecordingSubscriptions( final int pseudoIndex, final int subscriptionCount, final String channelFragment, final int streamId, final boolean applyStreamId, final long correlationId, final long controlSessionId) { listRecordingSubscriptionsRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .pseudoIndex(pseudoIndex) .subscriptionCount(subscriptionCount) .applyStreamId(applyStreamId ? BooleanType.TRUE : BooleanType.FALSE) .streamId(streamId) .channel(channelFragment); return offer(listRecordingSubscriptionsRequestEncoder.encodedLength()); }. ### Assistant:", "ground_truth": "List registered subscriptions in the archive which have been used to record streams.\n\n@param pseudoIndex       in the list of active recording subscriptions.\n@param subscriptionCount for the number of descriptors to be listed.\n@param channelFragment   for a contains match on the stripped channel used with the registered subscription.\n@param streamId          for the subscription.\n@param applyStreamId     when matching.\n@param correlationId     for this request.\n@param controlSessionId  for this request.\n@return true if successfully offered otherwise false.", "predict": "List recording subscriptions. @param pseudoIndex The pseudo-index of the subscription to retrieve. @param subscriptionCount The number of subscriptions to retrieve. @param channelFragment The channel fragment of the subscription to retrieve. @param streamId The stream ID of the subscription to retrieve. @param applyStreamId Whether to apply the stream ID to the subscription. @param correlationId The correlation ID of the subscription to retrieve. @param controlSessionId The control session ID of the subscription to retrieve. @return The number of bytes written to the buffer."}
{"ID": 1854, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean matchesTag(final UdpChannel udpChannel) { if (!hasTag || !udpChannel.hasTag() || tag != udpChannel.tag()) { return false; } if (udpChannel.remoteData().getAddress().isAnyLocalAddress() && udpChannel.remoteData().getPort() == 0 && udpChannel.localData().getAddress().isAnyLocalAddress() && udpChannel.localData().getPort() == 0) { return true; } throw new IllegalArgumentException(\"matching tag has set endpoint or control address\"); }. ### Assistant:", "ground_truth": "Does this channel have a tag match to another channel including endpoints.\n\n@param udpChannel to match against.\n@return true if there is a match otherwise false.", "predict": "Matches tag. @param udpChannel the udp channel @return true, if successful"}
{"ID": 1855, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static InetSocketAddress destinationAddress(final ChannelUri uri) { try { validateConfiguration(uri); return getEndpointAddress(uri); } catch (final Exception ex) { throw new InvalidChannelException(ErrorCode.INVALID_CHANNEL, ex); } }. ### Assistant:", "ground_truth": "Get the endpoint address from the URI.\n\n@param uri to check\n@return endpoint address for URI", "predict": "Returns the destination address of the channel. @param uri the channel URI @return the destination address of the channel"}
{"ID": 1856, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String description() { final StringBuilder builder = new StringBuilder(\"UdpChannel - \"); if (null != localInterface) { builder .append(\"interface: \") .append(localInterface.getDisplayName()) .append(\", \"); } builder .append(\"localData: \").append(localData) .append(\", remoteData: \").append(remoteData) .append(\", ttl: \").append(multicastTtl); return builder.toString(); }. ### Assistant:", "ground_truth": "Used for debugging to get a human readable description of the channel.\n\n@return a human readable description of the channel.", "predict": "Get the channel description. @return Channel description."}
{"ID": 1857, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: void addDestination(final int transportIndex, final ReceiveDestinationUdpTransport transport) { imageConnections = ArrayUtil.ensureCapacity(imageConnections, transportIndex + 1); if (transport.isMulticast()) { imageConnections[transportIndex] = new ImageConnection( cachedNanoClock.nanoTime(), transport.udpChannel().remoteControl()); } else if (transport.hasExplicitControl()) { imageConnections[transportIndex] = new ImageConnection( cachedNanoClock.nanoTime(), transport.explicitControlAddress()); } }. ### Assistant:", "ground_truth": "Add a destination to this image so it can merge streams.\n\n@param transportIndex from which packets will arrive.\n@param transport      from which packets will arrive.", "predict": "Adds a transport to the image connections. The transport is responsible for sending packets to the remote peer. @param transport The transport to add. @throws IllegalArgumentException If the transport is not a valid transport."}
{"ID": 1858, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: int insertPacket( final int termId, final int termOffset, final UnsafeBuffer buffer, final int length, final int transportIndex, final InetSocketAddress srcAddress) { final boolean isHeartbeat = DataHeaderFlyweight.isHeartbeat(buffer, length); final long packetPosition = computePosition(termId, termOffset, positionBitsToShift, initialTermId); final long proposedPosition = isHeartbeat ? packetPosition : packetPosition + length; if (!isFlowControlUnderRun(packetPosition) && !isFlowControlOverRun(proposedPosition)) { trackConnection(transportIndex, srcAddress, lastPacketTimestampNs); if (isHeartbeat) { if (DataHeaderFlyweight.isEndOfStream(buffer) && !isEndOfStream && allEos(transportIndex)) { LogBufferDescriptor.endOfStreamPosition(rawLog.metaData(), proposedPosition); isEndOfStream = true; } heartbeatsReceived.incrementOrdered(); } else { final UnsafeBuffer termBuffer = termBuffers[indexByPosition(packetPosition, positionBitsToShift)]; TermRebuilder.insert(termBuffer, termOffset, buffer, length); } lastPacketTimestampNs = cachedNanoClock.nanoTime(); hwmPosition.proposeMaxOrdered(proposedPosition); } return length; }. ### Assistant:", "ground_truth": "Insert frame into term buffer.\n\n@param termId         for the data packet to insert into the appropriate term.\n@param termOffset     for the start of the packet in the term.\n@param buffer         for the data packet to insert into the appropriate term.\n@param length         of the data packet\n@param transportIndex which the packet came from.\n@param srcAddress     which the packet came from.\n@return number of bytes applied as a result of this insertion.", "predict": "Insert a packet into the log. This is the main insertion point for packets. The packet is inserted into the appropriate term buffer, and the position is updated accordingly. The position bits are shifted to account for the length of the packet. The position bits are also updated in the metadata. The timestamp of the packet is also recorded. The HWM position is updated to reflect the new position. The packet is also recorded in the heartbeatsReceived counter. The length of the packet is returned."}
{"ID": 1859, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static AtomicCounter findControlToggle(final CountersReader counters) { final AtomicBuffer buffer = counters.metaDataBuffer(); for (int i = 0, size = counters.maxCounterId(); i < size; i++) { final int recordOffset = CountersReader.metaDataOffset(i); if (counters.getCounterState(i) == RECORD_ALLOCATED && buffer.getInt(recordOffset + TYPE_ID_OFFSET) == CONTROL_TOGGLE_TYPE_ID) { return new AtomicCounter(counters.valuesBuffer(), i, null); } } return null; }. ### Assistant:", "ground_truth": "Find the control toggle counter or return null if not found.\n\n@param counters to search for the control toggle.\n@return the control toggle counter or return null if not found.", "predict": "Finds the control toggle counter in the counters. @param counters CountersReader @return AtomicCounter or null if not found."}
{"ID": 1860, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String put(final String key, final String value) { return params.put(key, value); }. ### Assistant:", "ground_truth": "Put a key and value pair in the map of params.\n\n@param key   of the param to be put.\n@param value of the param to be put.\n@return the existing value otherwise null.", "predict": "Put a value into the query parameters. @param key the parameter name @param value the value to be added @return the value added"}
{"ID": 1861, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String channelTag() { return (null != tags && tags.length > CHANNEL_TAG_INDEX) ? tags[CHANNEL_TAG_INDEX] : null; }. ### Assistant:", "ground_truth": "Get the channel tag, if it exists, that refers to an another channel.\n\n@return channel tag if it exists or null if not in this URI.\n@see CommonContext#TAGS_PARAM_NAME\n@see CommonContext#TAG_PREFIX", "predict": "The channel tag associated with this channel. @return Channel tag."}
{"ID": 1862, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String entityTag() { return (null != tags && tags.length > ENTITY_TAG_INDEX) ? tags[ENTITY_TAG_INDEX] : null; }. ### Assistant:", "ground_truth": "Get the entity tag, if it exists, that refers to an entity such as subscription or publication.\n\n@return entity tag if it exists or null if not in this URI.\n@see CommonContext#TAGS_PARAM_NAME\n@see CommonContext#TAG_PREFIX", "predict": "Returns the entity tag associated with this resource. @return the entity tag associated with this resource."}
{"ID": 1863, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String addSessionId(final String channel, final int sessionId) { final ChannelUri channelUri = ChannelUri.parse(channel); channelUri.put(CommonContext.SESSION_ID_PARAM_NAME, Integer.toString(sessionId)); return channelUri.toString(); }. ### Assistant:", "ground_truth": "Add a sessionId to a given channel.\n\n@param channel   to add sessionId to.\n@param sessionId to add to channel.\n@return new string that represents channel with sessionId added.", "predict": "Adds a session ID to a channel URI. @param channel Channel URI @param sessionId Session ID @return Modified channel URI"}
{"ID": 1864, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static long getTag(final String paramValue) { return isTagged(paramValue) ? AsciiEncoding.parseLongAscii(paramValue, 4, paramValue.length() - 4) : INVALID_TAG; }. ### Assistant:", "ground_truth": "Get the value of the tag from a given parameter value.\n\n@param paramValue to extract the tag value from.\n@return the value of the tag or {@link #INVALID_TAG} if not tagged.\n@see CommonContext#TAGS_PARAM_NAME\n@see CommonContext#TAG_PREFIX", "predict": "Get the tag from the given string. The string must contain four hexadecimal digits separated by hyphens. @param paramValue the string value to extract the tag from. @return the tag value. @throws IllegalArgumentException if the string is not a valid tag."}
{"ID": 1865, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public int appendPadding( final int termId, final int termOffset, final HeaderWriter header, final int length) { final int frameLength = length + HEADER_LENGTH; final int alignedLength = align(frameLength, FRAME_ALIGNMENT); final UnsafeBuffer termBuffer = this.termBuffer; final int termLength = termBuffer.capacity(); int resultingOffset = termOffset + alignedLength; putRawTailOrdered(termId, resultingOffset); if (resultingOffset > termLength) { resultingOffset = handleEndOfLogCondition(termBuffer, termOffset, header, termLength, termId); } else { header.write(termBuffer, termOffset, frameLength, termId); frameType(termBuffer, termOffset, PADDING_FRAME_TYPE); frameLengthOrdered(termBuffer, termOffset, frameLength); } return resultingOffset; }. ### Assistant:", "ground_truth": "Pad a length of the term buffer with a padding record.\n\n@param termId     for the current term.\n@param termOffset in the term at which to append.\n@param header     for writing the default header.\n@param length     of the padding to be written.\n@return the resulting offset of the term after success otherwise {@link #FAILED}.", "predict": "Append padding to the term buffer. The padding is added at the end of the term and is used to align the term to a multiple of the frame size. The padding is added as a separate frame."}
{"ID": 1866, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: final int updatePublisherLimit() { int workCount = 0; final long senderPosition = this.senderPosition.getVolatile(); if (hasReceivers || (spiesSimulateConnection && spyPositions.length > 0)) { long minConsumerPosition = senderPosition; for (final ReadablePosition spyPosition : spyPositions) { minConsumerPosition = Math.min(minConsumerPosition, spyPosition.getVolatile()); } final long proposedPublisherLimit = minConsumerPosition + termWindowLength; if (publisherLimit.proposeMaxOrdered(proposedPublisherLimit)) { cleanBuffer(proposedPublisherLimit); workCount = 1; } } else if (publisherLimit.get() > senderPosition) { publisherLimit.setOrdered(senderPosition); } return workCount; }. ### Assistant:", "ground_truth": "Update the publishers limit for flow control as part of the conductor duty cycle.\n\n@return 1 if the limit has been updated otherwise 0.", "predict": "Update the publisher limit based on the current positions of receivers and spies. The limit is set to the minimum position of any receiver or spy."}
{"ID": 1867, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static UnsafeBufferPosition allocate( final MutableDirectBuffer tempBuffer, final String name, final int typeId, final CountersManager countersManager, final long registrationId, final int sessionId, final int streamId, final String channel) { return new UnsafeBufferPosition( (UnsafeBuffer)countersManager.valuesBuffer(), allocateCounterId(tempBuffer, name, typeId, countersManager, registrationId, sessionId, streamId, channel), countersManager); }. ### Assistant:", "ground_truth": "Allocate a counter for tracking a position on a stream of messages.\n\n@param tempBuffer      to be used for labels and key.\n@param name            of the counter for the label.\n@param typeId          of the counter for classification.\n@param countersManager from which to allocated the underlying storage.\n@param registrationId  to be associated with the counter.\n@param sessionId       for the stream of messages.\n@param streamId        for the stream of messages.\n@param channel         for the stream of messages.\n@return a new {@link UnsafeBufferPosition} for tracking the stream.", "predict": "Allocate a buffer position. @param tempBuffer temporary buffer to use for the counter. @param name name of the counter. @param typeId type of the counter. @param countersManager counters manager. @param registrationId registration id. @param sessionId session id. @param streamId stream id. @param channel channel. @return the buffer position."}
{"ID": 1868, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String labelName(final int typeId) { switch (typeId) { case PublisherLimit.PUBLISHER_LIMIT_TYPE_ID: return PublisherLimit.NAME; case SenderPos.SENDER_POSITION_TYPE_ID: return SenderPos.NAME; case ReceiverHwm.RECEIVER_HWM_TYPE_ID: return ReceiverHwm.NAME; case SubscriberPos.SUBSCRIBER_POSITION_TYPE_ID: return SubscriberPos.NAME; case ReceiverPos.RECEIVER_POS_TYPE_ID: return ReceiverPos.NAME; case SenderLimit.SENDER_LIMIT_TYPE_ID: return SenderLimit.NAME; case PublisherPos.PUBLISHER_POS_TYPE_ID: return PublisherPos.NAME; case SenderBpe.SENDER_BPE_TYPE_ID: return SenderBpe.NAME; default: return \"<unknown>\"; } }. ### Assistant:", "ground_truth": "Return the label name for a counter type identifier.\n\n@param typeId of the counter.\n@return the label name as a String.", "predict": "Get the human-readable name of a type ID. @param typeId the type ID @return the human-readable name of the type ID"}
{"ID": 1869, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static long scanForAvailability(final UnsafeBuffer termBuffer, final int offset, final int maxLength) { final int limit = Math.min(maxLength, termBuffer.capacity() - offset); int available = 0; int padding = 0; do { final int termOffset = offset + available; final int frameLength = frameLengthVolatile(termBuffer, termOffset); if (frameLength <= 0) { break; } int alignedFrameLength = align(frameLength, FRAME_ALIGNMENT); if (isPaddingFrame(termBuffer, termOffset)) { padding = alignedFrameLength - HEADER_LENGTH; alignedFrameLength = HEADER_LENGTH; } available += alignedFrameLength; if (available > limit) { available -= alignedFrameLength; padding = 0; break; } } while (0 == padding && available < limit); return pack(padding, available); }. ### Assistant:", "ground_truth": "Scan the term buffer for availability of new message fragments from a given offset up to a maxLength of bytes.\n\n@param termBuffer to be scanned for new message fragments.\n@param offset     at which the scan should begin.\n@param maxLength  in bytes of how much should be scanned.\n@return resulting status of the scan which packs the available bytes and padding into a long.", "predict": "Scans the term buffer for the longest available term. The returned length is the length of the longest available term, or zero if no terms are available. The returned length is the length of the longest available term, or zero if no terms are available. The returned length is the length of the longest available term, or zero if no terms are available. The returned length is the length of the longest available term, or zero if no terms are available. The returned length is the length of the longest available term, or zero if no terms are available. The returned length is the length of the longest available term, or zero if no terms are available. The returned length is the length of the longest available term, or zero if no terms are available. The returned length is the length of the longest available term, or zero if no terms are available. The returned length is the length of the longest available term, or zero if no terms are available. The returned length is the length of the longest available term, or zero if no terms are available. The returned length is the"}
{"ID": 1870, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ChannelUriStringBuilder clear() { prefix = null; media = null; endpoint = null; networkInterface = null; controlEndpoint = null; controlMode = null; tags = null; alias = null; reliable = null; ttl = null; mtu = null; termLength = null; initialTermId = null; termId = null; termOffset = null; sessionId = null; linger = null; sparse = null; eos = null; tether = null; isSessionIdTagged = false; return this; }. ### Assistant:", "ground_truth": "Clear out all the values thus setting back to the initial state.\n\n@return this for a fluent API.", "predict": "Clear all fields."}
{"ID": 1871, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ChannelUriStringBuilder validate() { if (null == media) { throw new IllegalStateException(\"media type is mandatory\"); } if (CommonContext.UDP_MEDIA.equals(media) && (null == endpoint && null == controlEndpoint)) { throw new IllegalStateException(\"either 'endpoint' or 'control' must be specified for UDP.\"); } int count = 0; count += null == initialTermId ? 0 : 1; count += null == termId ? 0 : 1; count += null == termOffset ? 0 : 1; if (count > 0) { if (count < 3) { throw new IllegalStateException( \"if any of then a complete set of 'initialTermId', 'termId', and 'termOffset' must be provided\"); } if (termId - initialTermId < 0) // lgtm [java/dereferenced-value-may-be-null] { throw new IllegalStateException( \"difference greater than 2^31 - 1: termId=\" + termId + \" - initialTermId=\" + initialTermId); } if (null != termLength && termOffset > termLength) // lgtm [java/dereferenced-value-may-be-null] { throw new IllegalStateException(\"termOffset=\" + termOffset + \" > termLength=\" + termLength); } } return this; }. ### Assistant:", "ground_truth": "Validates that the collection of set parameters are valid together.\n\n@return this for a fluent API.\n@throws IllegalStateException if the combination of params is invalid.", "predict": "Validate the ChannelUriStringBuilder. Throws IllegalStateException if any required fields are missing."}
{"ID": 1872, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ChannelUriStringBuilder prefix(final String prefix) { if (null != prefix && !prefix.equals(\"\") && !prefix.equals(SPY_QUALIFIER)) { throw new IllegalArgumentException(\"invalid prefix: \" + prefix); } this.prefix = prefix; return this; }. ### Assistant:", "ground_truth": "Set the prefix for taking an addition action such as spying on an outgoing publication with \"aeron-spy\".\n\n@param prefix to be applied to the URI before the the scheme.\n@return this for a fluent API.\n@see ChannelUri#SPY_QUALIFIER", "predict": "Set the prefix for the channel URI. The prefix is prepended to the channel name. If the prefix is not set, the channel name is used as the prefix. The prefix is not used if the channel name is empty. The prefix is not used if the prefix is the spy qualifier. @param prefix the prefix for the channel URI. @return this ChannelUriStringBuilder instance. @throws IllegalArgumentException if the prefix is invalid."}
{"ID": 1873, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ChannelUriStringBuilder media(final String media) { switch (media) { case CommonContext.UDP_MEDIA: case CommonContext.IPC_MEDIA: break; default: throw new IllegalArgumentException(\"invalid media: \" + media); } this.media = media; return this; }. ### Assistant:", "ground_truth": "Set the media for this channel. Valid values are \"udp\" and \"ipc\".\n\n@param media for this channel.\n@return this for a fluent API.", "predict": "Set the media type of the channel. The media type is used to determine the transport protocol to use. The media type is case-sensitive. The media type is ignored if the channel is not secured. @param media the media type of the channel. @return this ChannelUriBuilder instance. @throws IllegalArgumentException if the media type is invalid."}
{"ID": 1874, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ChannelUriStringBuilder controlMode(final String controlMode) { if (null != controlMode && !controlMode.equals(CommonContext.MDC_CONTROL_MODE_MANUAL) && !controlMode.equals(CommonContext.MDC_CONTROL_MODE_DYNAMIC)) { throw new IllegalArgumentException(\"invalid control mode: \" + controlMode); } this.controlMode = controlMode; return this; }. ### Assistant:", "ground_truth": "Set the control mode for multi-destination-cast. Set to \"manual\" for allowing control from the publication API.\n\n@param controlMode for taking control of MDC.\n@return this for a fluent API.\n@see Publication#addDestination(String)\n@see Publication#removeDestination(String)\n@see CommonContext#MDC_CONTROL_MODE_PARAM_NAME\n@see CommonContext#MDC_CONTROL_MODE_MANUAL\n@see CommonContext#MDC_CONTROL_MODE_DYNAMIC", "predict": "Set the control mode for the channel URI. @param controlMode the control mode @return the ChannelUriStringBuilder instance for chaining"}
{"ID": 1875, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ChannelUriStringBuilder termLength(final Integer termLength) { if (null != termLength) { LogBufferDescriptor.checkTermLength(termLength); } this.termLength = termLength; return this; }. ### Assistant:", "ground_truth": "Set the length of buffer used for each term of the log. Valid values are powers of 2 in the 64K - 1G range.\n\n@param termLength of the buffer used for each term of the log.\n@return this for a fluent API.\n@see CommonContext#TERM_LENGTH_PARAM_NAME", "predict": "Set the term length. @param termLength the term length @return this ChannelUriStringBuilder instance @see #termLength()"}
{"ID": 1876, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ChannelUriStringBuilder termOffset(final Integer termOffset) { if (null != termOffset) { if ((termOffset < 0 || termOffset > LogBufferDescriptor.TERM_MAX_LENGTH)) { throw new IllegalArgumentException(\"term offset not in range 0-1g: \" + termOffset); } if (0 != (termOffset & (FRAME_ALIGNMENT - 1))) { throw new IllegalArgumentException(\"term offset not multiple of FRAME_ALIGNMENT: \" + termOffset); } } this.termOffset = termOffset; return this; }. ### Assistant:", "ground_truth": "Set the offset within a term at which a publication will start. This when combined with the term id can establish\na starting position.\n\n@param termOffset within a term at which a publication will start.\n@return this for a fluent API.\n@see CommonContext#TERM_OFFSET_PARAM_NAME", "predict": "Set the term offset. @param termOffset the term offset @return this"}
{"ID": 1877, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ChannelUriStringBuilder linger(final Long lingerNs) { if (null != lingerNs && lingerNs < 0) { throw new IllegalArgumentException(\"linger value cannot be negative: \" + lingerNs); } this.linger = lingerNs; return this; }. ### Assistant:", "ground_truth": "Set the time a network publication will linger in nanoseconds after being drained. This time is so that tail loss\ncan be recovered.\n\n@param lingerNs time for the publication after it is drained.\n@return this for a fluent API.\n@see CommonContext#LINGER_PARAM_NAME", "predict": "Set the amount of time to wait before closing the channel after sending data. @param lingerNs the amount of time to wait in nanoseconds. @return this ChannelUriStringBuilder instance. @throws IllegalArgumentException if lingerNs is negative."}
{"ID": 1878, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void openDatagramChannel(final AtomicCounter statusIndicator) { try { sendDatagramChannel = DatagramChannel.open(udpChannel.protocolFamily()); receiveDatagramChannel = sendDatagramChannel; if (udpChannel.isMulticast()) { if (null != connectAddress) { receiveDatagramChannel = DatagramChannel.open(udpChannel.protocolFamily()); } receiveDatagramChannel.setOption(StandardSocketOptions.SO_REUSEADDR, true); receiveDatagramChannel.bind(new InetSocketAddress(endPointAddress.getPort())); receiveDatagramChannel.join(endPointAddress.getAddress(), udpChannel.localInterface()); sendDatagramChannel.setOption(StandardSocketOptions.IP_MULTICAST_IF, udpChannel.localInterface()); if (udpChannel.isHasMulticastTtl()) { sendDatagramChannel.setOption(StandardSocketOptions.IP_MULTICAST_TTL, udpChannel.multicastTtl()); multicastTtl = sendDatagramChannel.getOption(StandardSocketOptions.IP_MULTICAST_TTL); } else if (context.socketMulticastTtl() != 0) { sendDatagramChannel.setOption(StandardSocketOptions.IP_MULTICAST_TTL, context.socketMulticastTtl()); multicastTtl = sendDatagramChannel.getOption(StandardSocketOptions.IP_MULTICAST_TTL); } } else { sendDatagramChannel.bind(bindAddress); } if (null != connectAddress) { sendDatagramChannel.connect(connectAddress); } if (0 != context.socketSndbufLength()) { sendDatagramChannel.setOption(SO_SNDBUF, context.socketSndbufLength()); } if (0 != context.socketRcvbufLength()) { receiveDatagramChannel.setOption(SO_RCVBUF, context.socketRcvbufLength()); } sendDatagramChannel.configureBlocking(false); receiveDatagramChannel.configureBlocking(false); } catch (final IOException ex) { if (null != statusIndicator) { statusIndicator.setOrdered(ChannelEndpointStatus.ERRORED); } CloseHelper.quietClose(sendDatagramChannel); if (receiveDatagramChannel != sendDatagramChannel) { CloseHelper.quietClose(receiveDatagramChannel); } sendDatagramChannel = null; receiveDatagramChannel = null; throw new AeronException( \"channel error - \" + ex.getMessage() + \" (at \" + ex.getStackTrace()[0].toString() + \"): \" + udpChannel.originalUriString(), ex); } }. ### Assistant:", "ground_truth": "Create the underlying channel for reading and writing.\n\n@param statusIndicator to set for error status", "predict": "Open datagram channels."}
{"ID": 1879, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void close() { if (!isClosed) { isClosed = true; try { if (null != selectionKey) { selectionKey.cancel(); } if (null != transportPoller) { transportPoller.cancelRead(this); transportPoller.selectNowWithoutProcessing(); } if (null != sendDatagramChannel) { sendDatagramChannel.close(); } if (receiveDatagramChannel != sendDatagramChannel && null != receiveDatagramChannel) { receiveDatagramChannel.close(); } if (null != transportPoller) { transportPoller.selectNowWithoutProcessing(); } } catch (final IOException ex) { errorLog.record(ex); } } }. ### Assistant:", "ground_truth": "Close transport, canceling any pending read operations and closing channel", "predict": "Close the datagram channel."}
{"ID": 1880, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean isValidFrame(final UnsafeBuffer buffer, final int length) { boolean isFrameValid = true; if (frameVersion(buffer, 0) != HeaderFlyweight.CURRENT_VERSION) { isFrameValid = false; invalidPackets.increment(); } else if (length < HeaderFlyweight.MIN_HEADER_LENGTH) { isFrameValid = false; invalidPackets.increment(); } return isFrameValid; }. ### Assistant:", "ground_truth": "Is the received frame valid. This method will do some basic checks on the header and can be\noverridden in a subclass for further validation.\n\n@param buffer containing the frame.\n@param length of the frame.\n@return true if the frame is believed valid otherwise false.", "predict": "Check if the buffer is a valid frame. @param buffer the buffer to check @param length the length of the buffer @return true if the buffer is a valid frame, false otherwise"}
{"ID": 1881, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public InetSocketAddress receive(final ByteBuffer buffer) { buffer.clear(); InetSocketAddress address = null; try { if (receiveDatagramChannel.isOpen()) { address = (InetSocketAddress)receiveDatagramChannel.receive(buffer); } } catch (final PortUnreachableException ignored) { } catch (final Exception ex) { LangUtil.rethrowUnchecked(ex); } return address; }. ### Assistant:", "ground_truth": "Receive a datagram from the media layer.\n\n@param buffer into which the datagram will be received.\n@return the source address of the datagram if one is available otherwise false.", "predict": "Receive a datagram from the socket. @param buffer the buffer to receive into. @return the address of the socket that received the datagram."}
{"ID": 1882, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void onNak( final int termId, final int termOffset, final int length, final int termLength, final RetransmitSender retransmitSender) { if (!isInvalid(termOffset, termLength)) { if (null == activeRetransmitsMap.get(termId, termOffset) && activeRetransmitsMap.size() < MAX_RETRANSMITS_DEFAULT) { final RetransmitAction action = assignRetransmitAction(); action.termId = termId; action.termOffset = termOffset; action.length = Math.min(length, termLength - termOffset); final long delay = delayGenerator.generateDelay(); if (0 == delay) { retransmitSender.resend(termId, termOffset, action.length); action.linger(lingerTimeoutGenerator.generateDelay(), nanoClock.nanoTime()); } else { action.delay(delay, nanoClock.nanoTime()); } activeRetransmitsMap.put(termId, termOffset, action); } } }. ### Assistant:", "ground_truth": "Called on reception of a NAK to start retransmits handling.\n\n@param termId           from the NAK and the term id of the buffer to retransmit from\n@param termOffset       from the NAK and the offset of the data to retransmit\n@param length           of the missing data\n@param termLength       of the term buffer.\n@param retransmitSender to call if an immediate retransmit is required", "predict": "Nak message received. @param termId Term ID. @param termOffset Term offset. @param length Term length. @param termLength Term length. @param retransmitSender Retransmit sender."}
{"ID": 1883, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void processTimeouts(final long nowNs, final RetransmitSender retransmitSender) { if (activeRetransmitsMap.size() > 0) { for (final RetransmitAction action : retransmitActionPool) { if (DELAYED == action.state && (action.expireNs - nowNs < 0)) { retransmitSender.resend(action.termId, action.termOffset, action.length); action.linger(lingerTimeoutGenerator.generateDelay(), nanoClock.nanoTime()); } else if (LINGERING == action.state && (action.expireNs - nowNs < 0)) { action.cancel(); activeRetransmitsMap.remove(action.termId, action.termOffset); } } } }. ### Assistant:", "ground_truth": "Called to process any outstanding timeouts.\n\n@param nowNs            time in nanoseconds\n@param retransmitSender to call on retransmissions", "predict": "Process timeouts for retransmits."}
{"ID": 1884, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String status(final long status) { if (INITIALIZING == status) { return \"INITIALIZING\"; } if (ERRORED == status) { return \"ERRORED\"; } if (ACTIVE == status) { return \"ACTIVE\"; } if (CLOSING == status) { return \"CLOSING\"; } return \"unknown id=\" + status; }. ### Assistant:", "ground_truth": "String representation of the channel status.\n\n@param status to be converted.\n@return representation of the channel status.", "predict": "Returns a string describing the status of a given id. @param status the status of the id @return a string describing the status of the id"}
{"ID": 1885, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static AtomicCounter allocate( final MutableDirectBuffer tempBuffer, final String name, final int typeId, final CountersManager countersManager, final String channel) { final int keyLength = tempBuffer.putStringWithoutLengthAscii( CHANNEL_OFFSET + SIZE_OF_INT, channel, 0, MAX_CHANNEL_LENGTH); tempBuffer.putInt(CHANNEL_OFFSET, keyLength); int labelLength = 0; labelLength += tempBuffer.putStringWithoutLengthAscii(keyLength + labelLength, name); labelLength += tempBuffer.putStringWithoutLengthAscii(keyLength + labelLength, \": \"); labelLength += tempBuffer.putStringWithoutLengthAscii( keyLength + labelLength, channel, 0, MAX_LABEL_LENGTH - labelLength); return countersManager.newCounter(typeId, tempBuffer, 0, keyLength, tempBuffer, keyLength, labelLength); }. ### Assistant:", "ground_truth": "Allocate an indicator for tracking the status of a channel endpoint.\n\n@param tempBuffer      to be used for labels and metadata.\n@param name            of the counter for the label.\n@param typeId          of the counter for classification.\n@param countersManager from which to allocated the underlying storage.\n@param channel         for the stream of messages.\n@return a new {@link AtomicCounter} for tracking the status.", "predict": "Allocate a new counter. @param tempBuffer The buffer to use for the counter. @param name The name of the counter. @param typeId The type of the counter. @param countersManager The counters manager. @param channel The channel of the counter. @return The newly created counter."}
{"ID": 1886, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public DirectBufferVector reset(final DirectBuffer buffer, final int offset, final int length) { this.buffer = buffer; this.offset = offset; this.length = length; return this; }. ### Assistant:", "ground_truth": "Reset the values.\n\n@param buffer which is the super set.\n@param offset at which the vector begins.\n@param length of the vector.\n@return this for a fluent API.", "predict": "Reset this vector to the given buffer, offset and length. @param buffer The buffer to reset to. @param offset The offset within the buffer to reset to. @param length The length of the reset region. @return This vector."}
{"ID": 1887, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public DirectBufferVector validate() { final int capacity = buffer.capacity(); if (offset < 0 || offset >= capacity) { throw new IllegalArgumentException(\"offset=\" + offset + \" capacity=\" + capacity); } if (length < 0 || length > (capacity - offset)) { throw new IllegalArgumentException(\"offset=\" + offset + \" capacity=\" + capacity + \" length=\" + length); } return this; }. ### Assistant:", "ground_truth": "Ensure the vector is valid for the buffer.\n\n@throws NullPointerException if the buffer is null.\n@throws IllegalArgumentException if the offset is out of range for the buffer.\n@throws IllegalArgumentException if the length is out of range for the buffer.\n@return this for a fluent API.", "predict": "Validate the buffer vector. @return the buffer vector"}
{"ID": 1888, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int validateAndComputeLength(final DirectBufferVector[] vectors) { int messageLength = 0; for (final DirectBufferVector vector : vectors) { vector.validate(); messageLength += vector.length; if (messageLength < 0) { throw new IllegalStateException(\"length overflow: \" + Arrays.toString(vectors)); } } return messageLength; }. ### Assistant:", "ground_truth": "Validate an array of vectors to make up a message and compute the total length.\n\n@param vectors to be validated summed.\n@return the sum of the vector lengths.", "predict": "Compute the total length of the messages stored in the vectors. The length is the sum of the lengths of the vectors. If the sum is greater than the maximum message length, an IllegalStateException is thrown."}
{"ID": 1889, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int producerWindowLength(final int termBufferLength, final int defaultTermWindowLength) { int termWindowLength = termBufferLength / 2; if (0 != defaultTermWindowLength) { termWindowLength = Math.min(defaultTermWindowLength, termWindowLength); } return termWindowLength; }. ### Assistant:", "ground_truth": "How far ahead a producer can get from a consumer position.\n\n@param termBufferLength        for when default is not set and considering an appropriate minimum.\n@param defaultTermWindowLength to take priority.\n@return the length to be used for the producer window.", "predict": "Calculate the window length for the producer. @param termBufferLength the buffer length for the term buffer @param defaultTermWindowLength the default window length @return the window length for the producer"}
{"ID": 1890, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void validateSocketBufferLengths(final MediaDriver.Context ctx) { try (DatagramChannel probe = DatagramChannel.open()) { final int defaultSoSndBuf = probe.getOption(StandardSocketOptions.SO_SNDBUF); probe.setOption(StandardSocketOptions.SO_SNDBUF, Integer.MAX_VALUE); final int maxSoSndBuf = probe.getOption(StandardSocketOptions.SO_SNDBUF); if (maxSoSndBuf < ctx.socketSndbufLength()) { System.err.format( \"WARNING: Could not get desired SO_SNDBUF, adjust OS to allow %s: attempted=%d, actual=%d%n\", SOCKET_SNDBUF_LENGTH_PROP_NAME, ctx.socketSndbufLength(), maxSoSndBuf); } probe.setOption(StandardSocketOptions.SO_RCVBUF, Integer.MAX_VALUE); final int maxSoRcvBuf = probe.getOption(StandardSocketOptions.SO_RCVBUF); if (maxSoRcvBuf < ctx.socketRcvbufLength()) { System.err.format( \"WARNING: Could not get desired SO_RCVBUF, adjust OS to allow %s: attempted=%d, actual=%d%n\", SOCKET_RCVBUF_LENGTH_PROP_NAME, ctx.socketRcvbufLength(), maxSoRcvBuf); } final int soSndBuf = 0 == ctx.socketSndbufLength() ? defaultSoSndBuf : ctx.socketSndbufLength(); if (ctx.mtuLength() > soSndBuf) { throw new ConfigurationException(String.format( \"MTU greater than socket SO_SNDBUF, adjust %s to match MTU: mtuLength=%d, SO_SNDBUF=%d\", SOCKET_SNDBUF_LENGTH_PROP_NAME, ctx.mtuLength(), soSndBuf)); } if (ctx.initialWindowLength() > maxSoRcvBuf) { throw new ConfigurationException(\"window length greater than socket SO_RCVBUF, increase '\" + Configuration.INITIAL_WINDOW_LENGTH_PROP_NAME + \"' to match window: windowLength=\" + ctx.initialWindowLength() + \", SO_RCVBUF=\" + maxSoRcvBuf); } } catch (final IOException ex) { throw new AeronException(\"probe socket: \" + ex.toString(), ex); } }. ### Assistant:", "ground_truth": "Validate that the socket buffer lengths are sufficient for the media driver configuration.\n\n@param ctx to be validated.", "predict": "Validate the lengths of the socket send and receive buffers. The lengths of these buffers are used to determine the MTU and window length of the socket. The lengths of the buffers are determined by the OS and are not guaranteed to be the same across different platforms. Therefore, it is important to validate the lengths of the buffers to ensure they are sufficient for the desired MTU and window length. @param ctx the media driver context"}
{"ID": 1891, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void validatePageSize(final int pageSize) { if (pageSize < PAGE_MIN_SIZE) { throw new ConfigurationException( \"page size less than min size of \" + PAGE_MIN_SIZE + \": \" + pageSize); } if (pageSize > PAGE_MAX_SIZE) { throw new ConfigurationException( \"page size greater than max size of \" + PAGE_MAX_SIZE + \": \" + pageSize); } if (!BitUtil.isPowerOfTwo(pageSize)) { throw new ConfigurationException(\"page size not a power of 2: \" + pageSize); } }. ### Assistant:", "ground_truth": "Validate that page size is valid and alignment is valid.\n\n@param pageSize to be checked.\n@throws ConfigurationException if the size is not as expected.", "predict": "Validates the page size. @param pageSize the page size to validate. @throws ConfigurationException if the page size is invalid."}
{"ID": 1892, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void validateSessionIdRange(final int low, final int high) { if (low > high) { throw new ConfigurationException(\"low session id value \" + low + \" must be <= high value \" + high); } if (Math.abs((long)high - low) > Integer.MAX_VALUE) { throw new ConfigurationException(\"reserved range to too large\"); } }. ### Assistant:", "ground_truth": "Validate the range of session ids based on a high and low value provided which accounts for the values wrapping.\n\n@param low  value in the range.\n@param high value in the range.\n@throws ConfigurationException if the values are not valid.", "predict": "Validates the range of session IDs. @param low the low value of the range @param high the high value of the range"}
{"ID": 1893, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void validateUnblockTimeout( final long publicationUnblockTimeoutNs, final long clientLivenessTimeoutNs, final long timerIntervalNs) { if (publicationUnblockTimeoutNs <= clientLivenessTimeoutNs) { throw new ConfigurationException( \"publicationUnblockTimeoutNs=\" + publicationUnblockTimeoutNs + \" <= clientLivenessTimeoutNs=\" + clientLivenessTimeoutNs); } if (clientLivenessTimeoutNs <= timerIntervalNs) { throw new ConfigurationException( \"clientLivenessTimeoutNs=\" + clientLivenessTimeoutNs + \" <= timerIntervalNs=\" + timerIntervalNs); } }. ### Assistant:", "ground_truth": "Validate that the timeouts for unblocking publications from a client are valid.\n\n@param publicationUnblockTimeoutNs after which an uncommitted publication will be unblocked.\n@param clientLivenessTimeoutNs     after which a client will be considered not alive.\n@param timerIntervalNs             interval at which the driver will check timeouts.\n@throws ConfigurationException if the values are not valid.", "predict": "Validates that the publicationUnblockTimeoutNs is greater than the clientLivenessTimeoutNs and the clientLivenessTimeoutNs is greater than the timerIntervalNs. @param publicationUnblockTimeoutNs the publication unblock timeout ns @param clientLivenessTimeoutNs the client liveness timeout ns @param timerIntervalNs the timer interval ns"}
{"ID": 1894, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ErrorResponseFlyweight errorCode(final ErrorCode code) { buffer.putInt(offset + ERROR_CODE_OFFSET, code.value()); return this; }. ### Assistant:", "ground_truth": "Set the error code for the command.\n\n@param code for the error\n@return flyweight", "predict": "Write the error code. @param code Error code to write. @return This flyweight."}
{"ID": 1895, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void reset() { isBallotSent = false; isLeader = false; hasRequestedJoin = false; hasSentTerminationAck = false; vote = null; candidateTermId = Aeron.NULL_VALUE; leadershipTermId = Aeron.NULL_VALUE; logPosition = NULL_POSITION; }. ### Assistant:", "ground_truth": "Reset the state of a cluster member so it can be canvassed and reestablished.", "predict": "Reset the state of the LeaderCandidate."}
{"ID": 1896, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static String encodeAsString(final ClusterMember[] clusterMembers) { final StringBuilder builder = new StringBuilder(); for (int i = 0, length = clusterMembers.length; i < length; i++) { final ClusterMember member = clusterMembers[i]; builder .append(member.id()) .append(',') .append(member.endpointsDetail()); if ((length - 1) != i) { builder.append('|'); } } return builder.toString(); }. ### Assistant:", "ground_truth": "Encode member details from a cluster members array to a string.\n\n@param clusterMembers to fill the details from\n@return String representation suitable for use with {@link ClusterMember#parse}", "predict": "Encode the cluster members as a comma separated string. @param clusterMembers the cluster members to encode. @return the encoded string."}
{"ID": 1897, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void addMemberStatusPublications( final ClusterMember[] members, final ClusterMember exclude, final ChannelUri channelUri, final int streamId, final Aeron aeron) { for (final ClusterMember member : members) { if (member != exclude) { channelUri.put(ENDPOINT_PARAM_NAME, member.memberFacingEndpoint()); member.publication = aeron.addExclusivePublication(channelUri.toString(), streamId); } } }. ### Assistant:", "ground_truth": "Add the publications for sending status messages to the other members of the cluster.\n\n@param members    of the cluster.\n@param exclude    this member when adding publications.\n@param channelUri for the publication.\n@param streamId   for the publication.\n@param aeron      to add the publications to.", "predict": "Add a publication to each member of the cluster that is not the exclude member. The publication is exclusive to the member. @param members members of the cluster @param exclude exclude member of the cluster @param channelUri channel URI for the publication @param aeron aeron instance"}
{"ID": 1898, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void closeMemberPublications(final ClusterMember[] clusterMembers) { for (final ClusterMember member : clusterMembers) { CloseHelper.close(member.publication); } }. ### Assistant:", "ground_truth": "Close the publications associated with members of the cluster.\n\n@param clusterMembers to close the publications for.", "predict": "Close all publications of the given members. @param clusterMembers the members to close publications for."}
{"ID": 1899, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean hasActiveQuorum( final ClusterMember[] clusterMembers, final long nowMs, final long timeoutMs) { int threshold = quorumThreshold(clusterMembers.length); for (final ClusterMember member : clusterMembers) { if (member.isLeader() || nowMs <= (member.timeOfLastAppendPositionMs() + timeoutMs)) { if (--threshold <= 0) { return true; } } } return false; }. ### Assistant:", "ground_truth": "Check if the cluster leader has an active quorum of cluster followers.\n\n@param clusterMembers for the current cluster.\n@param nowMs          for the current time.\n@param timeoutMs      after which a follower is not considered active.\n@return true if quorum of cluster members are considered active.", "predict": "Determines whether there is an active quorum of members. @param clusterMembers the cluster members to consider. @param nowMs the current time in milliseconds. @param timeoutMs the amount of time to wait for a response from a leader before considering it inactive. @return true if there is an active quorum of members, false otherwise."}
{"ID": 1900, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static long quorumPosition(final ClusterMember[] members, final long[] rankedPositions) { final int length = rankedPositions.length; for (int i = 0; i < length; i++) { rankedPositions[i] = 0; } for (final ClusterMember member : members) { long newPosition = member.logPosition; for (int i = 0; i < length; i++) { final long rankedPosition = rankedPositions[i]; if (newPosition > rankedPosition) { rankedPositions[i] = newPosition; newPosition = rankedPosition; } } } return rankedPositions[length - 1]; }. ### Assistant:", "ground_truth": "Calculate the position reached by a quorum of cluster members.\n\n@param members         of the cluster.\n@param rankedPositions temp array to be used for sorting the positions to avoid allocation.\n@return the position reached by a quorum of cluster members.", "predict": "Find the position of the highest ranked member. @param members the members in the cluster. @param rankedPositions the positions of the members. @return the position of the highest ranked member."}
{"ID": 1901, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void resetLogPositions(final ClusterMember[] clusterMembers, final long logPosition) { for (final ClusterMember member : clusterMembers) { member.logPosition(logPosition); } }. ### Assistant:", "ground_truth": "Reset the log position of all the members to the provided value.\n\n@param clusterMembers to be reset.\n@param logPosition    to set for them all.", "predict": "Reset the log positions of all cluster members to the given log position. @param clusterMembers The cluster members whose log positions should be reset. @param logPosition The log position to reset the members to."}
{"ID": 1902, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean haveVotersReachedPosition( final ClusterMember[] clusterMembers, final long position, final long leadershipTermId) { for (final ClusterMember member : clusterMembers) { if (member.vote != null && (member.logPosition < position || member.leadershipTermId != leadershipTermId)) { return false; } } return true; }. ### Assistant:", "ground_truth": "Has the members of the cluster the voted reached the provided position in their log.\n\n@param clusterMembers   to check.\n@param position         to compare the {@link #logPosition()} against.\n@param leadershipTermId expected of the members.\n@return true if all members have reached this position otherwise false.", "predict": "Check if all voters have reached the given position. @param clusterMembers the cluster members to check @param position the position to check @param leadershipTermId the leadership term id to check @return true if all voters have reached the given position, false otherwise"}
{"ID": 1903, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean hasWonVoteOnFullCount(final ClusterMember[] members, final long candidateTermId) { int votes = 0; for (final ClusterMember member : members) { if (null == member.vote || member.candidateTermId != candidateTermId) { return false; } votes += member.vote ? 1 : 0; } return votes >= ClusterMember.quorumThreshold(members.length); }. ### Assistant:", "ground_truth": "Has the candidate got unanimous support of the cluster?\n\n@param members         to check for votes.\n@param candidateTermId for the vote.\n@return false if any member has not voted for the candidate.", "predict": "Determines if a candidate has won the vote on a full count. @param members the members of the cluster @param candidateTermId the term id of the candidate @return true if the candidate has won the vote on a full count, false otherwise"}
{"ID": 1904, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean hasMajorityVote(final ClusterMember[] clusterMembers, final long candidateTermId) { int votes = 0; for (final ClusterMember member : clusterMembers) { if (Boolean.TRUE.equals(member.vote) && member.candidateTermId == candidateTermId) { ++votes; } } return votes >= ClusterMember.quorumThreshold(clusterMembers.length); }. ### Assistant:", "ground_truth": "Has sufficient votes being counted for a majority?\n\n@param clusterMembers  to check for votes.\n@param candidateTermId for the vote.\n@return true if a majority of positive votes.", "predict": "Determines if a majority of the cluster members have voted for a particular candidate term. @param clusterMembers the cluster members to consider for the vote @param candidateTermId the candidate term to consider for the vote @return true if a majority of the cluster members have voted for the candidate term, false otherwise"}
{"ID": 1905, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static ClusterMember determineMember( final ClusterMember[] clusterMembers, final int memberId, final String memberEndpoints) { ClusterMember member = NULL_VALUE != memberId ? ClusterMember.findMember(clusterMembers, memberId) : null; if ((null == clusterMembers || 0 == clusterMembers.length) && null == member) { member = ClusterMember.parseEndpoints(NULL_VALUE, memberEndpoints); } else { if (null == member) { throw new ClusterException(\"memberId=\" + memberId + \" not found in clusterMembers\"); } if (!\"\".equals(memberEndpoints)) { ClusterMember.validateMemberEndpoints(member, memberEndpoints); } } return member; }. ### Assistant:", "ground_truth": "Determine which member of a cluster this is and check endpoints.\n\n@param clusterMembers  for the current cluster which can be null.\n@param memberId        for this member.\n@param memberEndpoints for this member.\n@return the {@link ClusterMember} determined.", "predict": "Determine the member from the given memberId and memberEndpoints. If the memberId is not found, the member is determined from the given memberEndpoints. If the member is not found, NULL_VALUE is returned. @param clusterMembers The cluster members. @param memberId The memberId. @param memberEndpoints The memberEndpoints. @return The determined member."}
{"ID": 1906, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void validateMemberEndpoints(final ClusterMember member, final String memberEndpoints) { final ClusterMember endpointMember = ClusterMember.parseEndpoints(Aeron.NULL_VALUE, memberEndpoints); if (!areSameEndpoints(member, endpointMember)) { throw new ClusterException( \"clusterMembers and memberEndpoints differ: \" + member.endpointsDetail() + \" != \" + memberEndpoints); } }. ### Assistant:", "ground_truth": "Check the member with the memberEndpoints\n\n@param member          to check memberEndpoints against\n@param memberEndpoints to check member against\n@see ConsensusModule.Context#memberEndpoints()\n@see ConsensusModule.Context#clusterMembers()", "predict": "Validate the endpoints of a member against its endpoints in the cluster. @param member the member to validate @param memberEndpoints the endpoints of the member"}
{"ID": 1907, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean areSameEndpoints(final ClusterMember lhs, final ClusterMember rhs) { return lhs.clientFacingEndpoint().equals(rhs.clientFacingEndpoint()) && lhs.memberFacingEndpoint().equals(rhs.memberFacingEndpoint()) && lhs.logEndpoint().equals(rhs.logEndpoint()) && lhs.transferEndpoint().equals(rhs.transferEndpoint()) && lhs.archiveEndpoint().equals(rhs.archiveEndpoint()); }. ### Assistant:", "ground_truth": "Are two cluster members using the same endpoints?\n\n@param lhs to check\n@param rhs to check\n@return true if both are using the same endpoints or false if not.", "predict": "Determines whether two ClusterMember objects are the same endpoints. @param lhs the first ClusterMember to compare @param rhs the second ClusterMember to compare @return true if the endpoints match, false otherwise"}
{"ID": 1908, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean isUnanimousCandidate(final ClusterMember[] clusterMembers, final ClusterMember candidate) { for (final ClusterMember member : clusterMembers) { if (NULL_POSITION == member.logPosition || compareLog(candidate, member) < 0) { return false; } } return true; }. ### Assistant:", "ground_truth": "Has the member achieved a unanimous view to be a suitable candidate in an election.\n\n@param clusterMembers to compare the candidate against.\n@param candidate      for leadership.\n@return true if the candidate is suitable otherwise false.", "predict": "Check if the given candidate is unanimous among the cluster members. @param clusterMembers The cluster members to check. @param candidate The candidate to check. @return True if the candidate is unanimous among the cluster members."}
{"ID": 1909, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean isQuorumCandidate(final ClusterMember[] clusterMembers, final ClusterMember candidate) { int possibleVotes = 0; for (final ClusterMember member : clusterMembers) { if (NULL_POSITION == member.logPosition || compareLog(candidate, member) < 0) { continue; } ++possibleVotes; } return possibleVotes >= ClusterMember.quorumThreshold(clusterMembers.length); }. ### Assistant:", "ground_truth": "Has the member achieved a quorum view to be a suitable candidate in an election.\n\n@param clusterMembers to compare the candidate against.\n@param candidate      for leadership.\n@return true if the candidate is suitable otherwise false.", "predict": "Determines if a candidate is a quorum candidate based on the log positions of the cluster members. @param clusterMembers the cluster members to consider. @param candidate the candidate to evaluate. @return true if the candidate is a quorum candidate, false otherwise."}
{"ID": 1910, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean isNotDuplicateEndpoints(final ClusterMember[] members, final String memberEndpoints) { for (final ClusterMember member : members) { if (member.endpointsDetail().equals(memberEndpoints)) { return false; } } return true; }. ### Assistant:", "ground_truth": "Is the string of member endpoints not duplicated in the members.\n\n@param members         to check if the provided endpoints have a duplicate.\n@param memberEndpoints to check for duplicates.\n@return true if no duplicate is found otherwise false.", "predict": "Check if the endpoints of the member is not duplicated in the members array. @param members the members array. @param memberEndpoints the member endpoint. @return true if the endpoints is not duplicated in the members array."}
{"ID": 1911, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int findMemberIndex(final ClusterMember[] clusterMembers, final int memberId) { final int length = clusterMembers.length; int index = ArrayUtil.UNKNOWN_INDEX; for (int i = 0; i < length; i++) { if (clusterMembers[i].id() == memberId) { index = i; } } return index; }. ### Assistant:", "ground_truth": "Find the index at which a member id is present.\n\n@param clusterMembers to be searched.\n@param memberId       to search for.\n@return the index at which the member id is found otherwise {@link ArrayUtil#UNKNOWN_INDEX}.", "predict": "Finds the index of a member in the array of members. @param clusterMembers the members to search in. @param memberId the member to search for. @return the index of the member or UNKNOWN_INDEX if not found."}
{"ID": 1912, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static ClusterMember[] removeMember(final ClusterMember[] oldMembers, final int memberId) { return ArrayUtil.remove(oldMembers, findMemberIndex(oldMembers, memberId)); }. ### Assistant:", "ground_truth": "Remove a member from an array if found, otherwise return the array unmodified.\n\n@param oldMembers to remove a member from.\n@param memberId   of the member to remove.\n@return a new array with the member removed or the existing array if not found.", "predict": "Remove a member from the given array. @param oldMembers The array of members to remove from. @param memberId The member to remove. @return The removed member."}
{"ID": 1913, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int highMemberId(final ClusterMember[] clusterMembers) { int highId = Aeron.NULL_VALUE; for (final ClusterMember member : clusterMembers) { highId = Math.max(highId, member.id()); } return highId; }. ### Assistant:", "ground_truth": "Find the highest member id in an array of members.\n\n@param clusterMembers to search for the highest id.\n@return the highest id otherwise {@link Aeron#NULL_VALUE} if empty.", "predict": "Find the highest member ID in the cluster. The highest member ID is guaranteed to be greater than or equal to the sum of the IDs of all cluster members. @param clusterMembers the cluster members to consider @return the highest member ID in the cluster"}
{"ID": 1914, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public MappedByteBuffer mapExistingCncFile(final Consumer<String> logger) { final File cncFile = new File(aeronDirectory, CncFileDescriptor.CNC_FILE); if (cncFile.exists() && cncFile.length() > 0) { if (null != logger) { logger.accept(\"INFO: Aeron CnC file exists: \" + cncFile); } return IoUtil.mapExistingFile(cncFile, CncFileDescriptor.CNC_FILE); } return null; }. ### Assistant:", "ground_truth": "Map the CnC file if it exists.\n\n@param logger for feedback\n@return a new mapping for the file if it exists otherwise null;", "predict": "Maps the existing CnC file if it exists. @param logger a logger to log information messages @return a mapped byte buffer for the CnC file or null if none exists"}
{"ID": 1915, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean isDriverActive( final File directory, final long driverTimeoutMs, final Consumer<String> logger) { final File cncFile = new File(directory, CncFileDescriptor.CNC_FILE); if (cncFile.exists() && cncFile.length() > 0) { logger.accept(\"INFO: Aeron CnC file exists: \" + cncFile); final MappedByteBuffer cncByteBuffer = IoUtil.mapExistingFile(cncFile, \"CnC file\"); try { return isDriverActive(driverTimeoutMs, logger, cncByteBuffer); } finally { IoUtil.unmap(cncByteBuffer); } } return false; }. ### Assistant:", "ground_truth": "Is a media driver active in the given directory?\n\n@param directory       to check\n@param driverTimeoutMs for the driver liveness check.\n@param logger          for feedback as liveness checked.\n@return true if a driver is active or false if not.", "predict": "Verify the aeron CnC file is active and functional. The aeron CnC file is a binary file that is created by the aeron driver and contains information about the aeron driver and aeron cluster. The aeron CnC file is used to verify the aeron driver is active and functional. The aeron CnC file is typically located in the aeron driver's directory. @param directory Aeron driver's directory @param driverTimeoutMs Driver timeout in milliseconds @param logger Logger to log information @return True if aeron CnC file is active and functional"}
{"ID": 1916, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public boolean isDriverActive(final long driverTimeoutMs, final Consumer<String> logger) { final MappedByteBuffer cncByteBuffer = mapExistingCncFile(logger); try { return isDriverActive(driverTimeoutMs, logger, cncByteBuffer); } finally { IoUtil.unmap(cncByteBuffer); } }. ### Assistant:", "ground_truth": "Is a media driver active in the current Aeron directory?\n\n@param driverTimeoutMs for the driver liveness check.\n@param logger          for feedback as liveness checked.\n@return true if a driver is active or false if not.", "predict": "Check if the driver is active. @param driverTimeoutMs Timeout in milliseconds. @param logger Logger to log the result. @return True if the driver is active. False otherwise."}
{"ID": 1917, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean isDriverActive( final long driverTimeoutMs, final Consumer<String> logger, final ByteBuffer cncByteBuffer) { if (null == cncByteBuffer) { return false; } final UnsafeBuffer cncMetaDataBuffer = CncFileDescriptor.createMetaDataBuffer(cncByteBuffer); final long startTimeMs = System.currentTimeMillis(); int cncVersion; while (0 == (cncVersion = cncMetaDataBuffer.getIntVolatile(CncFileDescriptor.cncVersionOffset(0)))) { if (System.currentTimeMillis() > (startTimeMs + driverTimeoutMs)) { throw new DriverTimeoutException(\"CnC file is created but not initialised.\"); } sleep(1); } if (CNC_VERSION != cncVersion) { throw new AeronException( \"Aeron CnC version does not match: required=\" + CNC_VERSION + \" version=\" + cncVersion); } final ManyToOneRingBuffer toDriverBuffer = new ManyToOneRingBuffer( CncFileDescriptor.createToDriverBuffer(cncByteBuffer, cncMetaDataBuffer)); final long timestamp = toDriverBuffer.consumerHeartbeatTime(); final long now = System.currentTimeMillis(); final long timestampAge = now - timestamp; logger.accept(\"INFO: Aeron toDriver consumer heartbeat is (ms): \" + timestampAge); return timestampAge <= driverTimeoutMs; }. ### Assistant:", "ground_truth": "Is a media driver active in the current mapped CnC buffer? If the driver is mid start then it will wait for\nup to the driverTimeoutMs by checking for the cncVersion being set.\n\n@param driverTimeoutMs for the driver liveness check.\n@param logger          for feedback as liveness checked.\n@param cncByteBuffer   for the existing CnC file.\n@return true if a driver is active or false if not.", "predict": "Determine if the CnC file is active and has a valid toDriverBuffer. @param driverTimeoutMs the timeout in milliseconds for the driver to become active @param logger the logger to log the result @param cncByteBuffer the buffer containing the CnC file @return true if the CnC file is active and has a valid toDriverBuffer, false otherwise"}
{"ID": 1918, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean requestDriverTermination( final File directory, final DirectBuffer tokenBuffer, final int tokenOffset, final int tokenLength) { final File cncFile = new File(directory, CncFileDescriptor.CNC_FILE); if (cncFile.exists() && cncFile.length() > 0) { final MappedByteBuffer cncByteBuffer = IoUtil.mapExistingFile(cncFile, \"CnC file\"); try { final UnsafeBuffer cncMetaDataBuffer = CncFileDescriptor.createMetaDataBuffer(cncByteBuffer); final int cncVersion = cncMetaDataBuffer.getIntVolatile(cncVersionOffset(0)); if (CncFileDescriptor.CNC_VERSION != cncVersion) { throw new AeronException( \"Aeron CnC version does not match: required=\" + CNC_VERSION + \" version=\" + cncVersion); } final ManyToOneRingBuffer toDriverBuffer = new ManyToOneRingBuffer( CncFileDescriptor.createToDriverBuffer(cncByteBuffer, cncMetaDataBuffer)); final long clientId = toDriverBuffer.nextCorrelationId(); final DriverProxy driverProxy = new DriverProxy(toDriverBuffer, clientId); return driverProxy.terminateDriver(tokenBuffer, tokenOffset, tokenLength); } finally { IoUtil.unmap(cncByteBuffer); } } return false; }. ### Assistant:", "ground_truth": "Request a driver to run its termination hook.\n\n@param directory for the driver.\n@param tokenBuffer containing the optional token for the request.\n@param tokenOffset within the tokenBuffer at which the token begins.\n@param tokenLength of the token in the tokenBuffer.\n@return true if request was sent or false if request could not be sent.", "predict": "Request termination of the driver. The driver will be informed of the termination request and will gracefully shutdown. The driver will not respond to any further requests until it has completed its shutdown process. @param directory the directory where the CnC file is located. @param tokenBuffer the buffer containing the Aeron token. @param tokenOffset the offset of the Aeron token in the buffer. @param tokenLength the length of the Aeron token. @return true if the driver was terminated. False if the driver was already shutdown."}
{"ID": 1919, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int frameLengthVolatile(final UnsafeBuffer buffer, final int termOffset) { int frameLength = buffer.getIntVolatile(termOffset); if (ByteOrder.nativeOrder() != LITTLE_ENDIAN) { frameLength = Integer.reverseBytes(frameLength); } return frameLength; }. ### Assistant:", "ground_truth": "Get the length of a frame from the header as a volatile read.\n\n@param buffer     containing the frame.\n@param termOffset at which a frame begins.\n@return the value for the frame length.", "predict": "Read the length of the current frame from the buffer. @param buffer the buffer to read from @param termOffset offset to the term length field @return the length of the current frame"}
{"ID": 1920, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void frameLengthOrdered(final UnsafeBuffer buffer, final int termOffset, final int frameLength) { int length = frameLength; if (ByteOrder.nativeOrder() != LITTLE_ENDIAN) { length = Integer.reverseBytes(frameLength); } buffer.putIntOrdered(termOffset, length); }. ### Assistant:", "ground_truth": "Write the length header for a frame in a memory ordered fashion.\n\n@param buffer      containing the frame.\n@param termOffset  at which a frame begins.\n@param frameLength field to be set for the frame.", "predict": "Write the frame length in little-endian byte order. This is used to ensure that the frame length is consistent across all platforms."}
{"ID": 1921, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void frameType(final UnsafeBuffer buffer, final int termOffset, final int type) { buffer.putShort(typeOffset(termOffset), (short)type, LITTLE_ENDIAN); }. ### Assistant:", "ground_truth": "Write the type field for a frame.\n\n@param buffer     containing the frame.\n@param termOffset at which a frame begins.\n@param type       type value for the frame.", "predict": "Write the frame type of a term. The type is encoded as a 2-byte value."}
{"ID": 1922, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void frameFlags(final UnsafeBuffer buffer, final int termOffset, final byte flags) { buffer.putByte(flagsOffset(termOffset), flags); }. ### Assistant:", "ground_truth": "Write the flags field for a frame.\n\n@param buffer     containing the frame.\n@param termOffset at which a frame begins.\n@param flags      value for the frame.", "predict": "Write a frame flag into the buffer. @param buffer the buffer to write into. @param termOffset the offset of the term in the buffer. @param flags the value to write."}
{"ID": 1923, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void frameTermOffset(final UnsafeBuffer buffer, final int termOffset) { buffer.putInt(termOffsetOffset(termOffset), termOffset, LITTLE_ENDIAN); }. ### Assistant:", "ground_truth": "Write the term offset field for a frame.\n\n@param buffer     containing the frame.\n@param termOffset at which a frame begins.", "predict": "Write the term offset into the frame."}
{"ID": 1924, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void frameTermId(final UnsafeBuffer buffer, final int termOffset, final int termId) { buffer.putInt(termIdOffset(termOffset), termId, LITTLE_ENDIAN); }. ### Assistant:", "ground_truth": "Write the term id field for a frame.\n\n@param buffer     containing the frame.\n@param termOffset at which a frame begins.\n@param termId     value for the frame.", "predict": "Frame Term ID. @param buffer the buffer to write to @param termOffset the offset of the term in the buffer @param termId the term ID to write"}
{"ID": 1925, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int findCounterIdByRecording(final CountersReader countersReader, final long recordingId) { final DirectBuffer buffer = countersReader.metaDataBuffer(); for (int i = 0, size = countersReader.maxCounterId(); i < size; i++) { if (countersReader.getCounterState(i) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(i); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECORDING_POSITION_TYPE_ID && buffer.getLong(recordOffset + KEY_OFFSET + RECORDING_ID_OFFSET) == recordingId) { return i; } } } return NULL_COUNTER_ID; }. ### Assistant:", "ground_truth": "Find the active counter id for a stream based on the recording id.\n\n@param countersReader to search within.\n@param recordingId    for the active recording.\n@return the counter id if found otherwise {@link CountersReader#NULL_COUNTER_ID}.", "predict": "Find counter id by recording id. @param countersReader CountersReader @param recordingId RecordingId @return CounterId or NULL_COUNTER_ID if not found."}
{"ID": 1926, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int findCounterIdBySession(final CountersReader countersReader, final int sessionId) { final DirectBuffer buffer = countersReader.metaDataBuffer(); for (int i = 0, size = countersReader.maxCounterId(); i < size; i++) { if (countersReader.getCounterState(i) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(i); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECORDING_POSITION_TYPE_ID && buffer.getInt(recordOffset + KEY_OFFSET + SESSION_ID_OFFSET) == sessionId) { return i; } } } return NULL_COUNTER_ID; }. ### Assistant:", "ground_truth": "Find the active counter id for a stream based on the session id.\n\n@param countersReader to search within.\n@param sessionId      for the active recording.\n@return the counter id if found otherwise {@link CountersReader#NULL_COUNTER_ID}.", "predict": "Find the counter id of the session id. @param countersReader counters reader @param sessionId session id @return counter id or NULL_COUNTER_ID if not found"}
{"ID": 1927, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static long getRecordingId(final CountersReader countersReader, final int counterId) { final DirectBuffer buffer = countersReader.metaDataBuffer(); if (countersReader.getCounterState(counterId) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(counterId); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECORDING_POSITION_TYPE_ID) { return buffer.getLong(recordOffset + KEY_OFFSET + RECORDING_ID_OFFSET); } } return NULL_RECORDING_ID; }. ### Assistant:", "ground_truth": "Get the recording id for a given counter id.\n\n@param countersReader to search within.\n@param counterId      for the active recording.\n@return the counter id if found otherwise {@link #NULL_RECORDING_ID}.", "predict": "Get the recording id from the counters reader. @param countersReader The counters reader. @param counterId The counter id. @return The recording id."}
{"ID": 1928, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean isActive(final CountersReader countersReader, final int counterId, final long recordingId) { final DirectBuffer buffer = countersReader.metaDataBuffer(); if (countersReader.getCounterState(counterId) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(counterId); return buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECORDING_POSITION_TYPE_ID && buffer.getLong(recordOffset + KEY_OFFSET + RECORDING_ID_OFFSET) == recordingId; } return false; }. ### Assistant:", "ground_truth": "Is the recording counter still active.\n\n@param countersReader to search within.\n@param counterId      to search for.\n@param recordingId    to confirm it is still the same value.\n@return true if the counter is still active otherwise false.", "predict": "Check if the counter is still active. @param countersReader The counters reader. @param counterId The counter id. @param recordingId The recording id. @return True if the counter is still active."}
{"ID": 1929, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public StatusMessageFlyweight applicationSpecificFeedback(final byte[] source, final int offset, final int length) { frameLength(HEADER_LENGTH + length); putBytes(APP_SPECIFIC_FEEDBACK_FIELD_OFFSET, source, offset, length); return this; }. ### Assistant:", "ground_truth": "Set the Application Specific Feedback for the Status Message.\n\n@param source of the feedback to set\n@param offset of the feedback in the source\n@param length of the feedback in bytes\n@return flyweight", "predict": "Send APP_SPECIFIC_FEEDBACK frame. @param source source data @param offset offset in source data @param length length of source data @return flyweight object for easier chaining"}
{"ID": 1930, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void reload() { entries.clear(); indexByLeadershipTermIdMap.clear(); indexByLeadershipTermIdMap.compact(); nextEntryIndex = 0; byteBuffer.clear(); try { while (true) { final int bytes = fileChannel.read(byteBuffer); if (byteBuffer.remaining() == 0) { byteBuffer.flip(); captureEntriesFromBuffer(byteBuffer, buffer, entries); byteBuffer.clear(); } if (-1 == bytes) { if (byteBuffer.position() > 0) { byteBuffer.flip(); captureEntriesFromBuffer(byteBuffer, buffer, entries); byteBuffer.clear(); } break; } } } catch (final IOException ex) { LangUtil.rethrowUnchecked(ex); } }. ### Assistant:", "ground_truth": "Reload the log from disk.", "predict": "Reloads the cache from the file."}
{"ID": 1931, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Entry findLastTerm() { for (int i = entries.size() - 1; i >= 0; i--) { final Entry entry = entries.get(i); if (ENTRY_TYPE_TERM == entry.type) { return entry; } } return null; }. ### Assistant:", "ground_truth": "Find the last leadership term in the recording log.\n\n@return the last leadership term in the recording log.", "predict": "Find the last term in the list. @return The last term in the list or null if the list is empty."}
{"ID": 1932, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public RecoveryPlan createRecoveryPlan(final AeronArchive archive, final int serviceCount) { final ArrayList<Snapshot> snapshots = new ArrayList<>(); final ArrayList<Log> logs = new ArrayList<>(); planRecovery(snapshots, logs, entries, archive, serviceCount); long lastLeadershipTermId = NULL_VALUE; long lastTermBaseLogPosition = 0; long committedLogPosition = -1; long appendedLogPosition = 0; final int snapshotStepsSize = snapshots.size(); if (snapshotStepsSize > 0) { final Snapshot snapshot = snapshots.get(0); lastLeadershipTermId = snapshot.leadershipTermId; lastTermBaseLogPosition = snapshot.termBaseLogPosition; appendedLogPosition = snapshot.logPosition; committedLogPosition = snapshot.logPosition; } if (!logs.isEmpty()) { final Log log = logs.get(0); lastLeadershipTermId = log.leadershipTermId; lastTermBaseLogPosition = log.termBaseLogPosition; appendedLogPosition = log.stopPosition; committedLogPosition = log.logPosition; } return new RecoveryPlan( lastLeadershipTermId, lastTermBaseLogPosition, appendedLogPosition, committedLogPosition, snapshots, logs); }. ### Assistant:", "ground_truth": "Create a recovery plan for the cluster that when the steps are replayed will bring the cluster back to the\nlatest stable state.\n\n@param archive      to lookup recording descriptors.\n@param serviceCount of services that may have snapshots.\n@return a new {@link RecoveryPlan} for the cluster.", "predict": "Create recovery plan from snapshot and logs. @param archive archive of cluster state @param serviceCount number of services in cluster @return recovery plan"}
{"ID": 1933, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static RecoveryPlan createRecoveryPlan(final ArrayList<RecordingLog.Snapshot> snapshots) { long lastLeadershipTermId = NULL_VALUE; long lastTermBaseLogPosition = 0; long committedLogPosition = -1; long appendedLogPosition = 0; final int snapshotStepsSize = snapshots.size(); if (snapshotStepsSize > 0) { final Snapshot snapshot = snapshots.get(0); lastLeadershipTermId = snapshot.leadershipTermId; lastTermBaseLogPosition = snapshot.termBaseLogPosition; appendedLogPosition = snapshot.logPosition; committedLogPosition = snapshot.logPosition; } return new RecoveryPlan( lastLeadershipTermId, lastTermBaseLogPosition, appendedLogPosition, committedLogPosition, snapshots, new ArrayList<>()); }. ### Assistant:", "ground_truth": "Create a recovery plan that has only snapshots. Used for dynamicJoin snapshot load.\n\n@param snapshots to construct plan from\n@return a new {@link RecoveryPlan} for the cluster", "predict": "Create RecoveryPlan from snapshots. @param snapshots Snapshots of RecordingLog. @return RecoveryPlan."}
{"ID": 1934, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void appendTerm( final long recordingId, final long leadershipTermId, final long termBaseLogPosition, final long timestamp) { final int size = entries.size(); if (size > 0) { final Entry lastEntry = entries.get(size - 1); if (lastEntry.type != NULL_VALUE && lastEntry.leadershipTermId >= leadershipTermId) { throw new ClusterException(\"leadershipTermId out of sequence: previous \" + lastEntry.leadershipTermId + \" this \" + leadershipTermId); } } indexByLeadershipTermIdMap.put(leadershipTermId, nextEntryIndex); append( ENTRY_TYPE_TERM, recordingId, leadershipTermId, termBaseLogPosition, NULL_POSITION, timestamp, NULL_VALUE); }. ### Assistant:", "ground_truth": "Append a log entry for a leadership term.\n\n@param recordingId         of the log.\n@param leadershipTermId    for the current term.\n@param termBaseLogPosition reached at the beginning of the term.\n@param timestamp           at the beginning of the term.", "predict": "Append a new leadership term to the log. @param recordingId The recordingId of the leadership term. @param leadershipTermId The leadership term id of the leadership term. @param termBaseLogPosition The base log position of the leadership term. @param timestamp The timestamp of the leadership term."}
{"ID": 1935, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void appendSnapshot( final long recordingId, final long leadershipTermId, final long termBaseLogPosition, final long logPosition, final long timestamp, final int serviceId) { final int size = entries.size(); if (size > 0) { final Entry entry = entries.get(size - 1); if (entry.type == ENTRY_TYPE_TERM && entry.leadershipTermId != leadershipTermId) { throw new ClusterException(\"leadershipTermId out of sequence: previous \" + entry.leadershipTermId + \" this \" + leadershipTermId); } } append( ENTRY_TYPE_SNAPSHOT, recordingId, leadershipTermId, termBaseLogPosition, logPosition, timestamp, serviceId); }. ### Assistant:", "ground_truth": "Append a log entry for a snapshot.\n\n@param recordingId         in the archive for the snapshot.\n@param leadershipTermId    for the current term\n@param termBaseLogPosition at the beginning of the leadership term.\n@param logPosition         for the position in the current term or length so far for that term.\n@param timestamp           at which the snapshot was taken.\n@param serviceId           for which the snapshot is recorded.", "predict": "Append a snapshot entry to the log. The leadership term ID must match the previous term ID in the log. @param recordingId The recording ID of the snapshot. @param leadershipTermId The leadership term ID of the snapshot. @param termBaseLogPosition The base log position of the snapshot. @param logPosition The log position of the snapshot. @param timestamp The timestamp of the snapshot. @param serviceId The service ID of the snapshot."}
{"ID": 1936, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void commitLogPosition(final long leadershipTermId, final long logPosition) { final int index = getLeadershipTermEntryIndex(leadershipTermId); commitEntryValue(index, logPosition, LOG_POSITION_OFFSET); final Entry entry = entries.get(index); entries.set(index, new Entry( entry.recordingId, entry.leadershipTermId, entry.termBaseLogPosition, logPosition, entry.timestamp, entry.serviceId, entry.type, entry.entryIndex)); }. ### Assistant:", "ground_truth": "Commit the position reached in a leadership term before a clean shutdown.\n\n@param leadershipTermId for committing the term position reached.\n@param logPosition      reached in the leadership term.", "predict": "Commits the log position for a leadership term. @param leadershipTermId the leadership term id @param logPosition the log position for the leadership term"}
{"ID": 1937, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void tombstoneEntry(final long leadershipTermId, final int entryIndex) { int index = -1; for (int i = 0, size = entries.size(); i < size; i++) { final Entry entry = entries.get(i); if (entry.leadershipTermId == leadershipTermId && entry.entryIndex == entryIndex) { index = entry.entryIndex; if (ENTRY_TYPE_TERM == entry.type) { indexByLeadershipTermIdMap.remove(leadershipTermId); } break; } } if (-1 == index) { throw new ClusterException(\"unknown entry index: \" + entryIndex); } buffer.putInt(0, NULL_VALUE, LITTLE_ENDIAN); byteBuffer.limit(SIZE_OF_INT).position(0); final long filePosition = (index * (long)ENTRY_LENGTH) + ENTRY_TYPE_OFFSET; try { if (SIZE_OF_INT != fileChannel.write(byteBuffer, filePosition)) { throw new ClusterException(\"failed to write field atomically\"); } } catch (final Exception ex) { LangUtil.rethrowUnchecked(ex); } }. ### Assistant:", "ground_truth": "Tombstone an entry in the log so it is no longer valid.\n\n@param leadershipTermId to match for validation.\n@param entryIndex       reached in the leadership term.", "predict": "Mark an entry as tombstone. @param leadershipTermId leadership term id @param entryIndex entry index"}
{"ID": 1938, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void close() { if (null != publication && publication.isConnected()) { closeSession(); } if (!ctx.ownsAeronClient()) { CloseHelper.close(subscription); CloseHelper.close(publication); } ctx.close(); }. ### Assistant:", "ground_truth": "Close session and release associated resources.", "predict": "Close the aeron client and its aeron context."}
{"ID": 1939, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public long offer(final DirectBufferVector[] vectors) { if (headerVector != vectors[0]) { vectors[0] = headerVector; } return publication.offer(vectors, null); }. ### Assistant:", "ground_truth": "Non-blocking publish by gathering buffer vectors into a message. The first vector will be replaced by the cluster\ningress header so must be left unused.\n\n@param vectors which make up the message.\n@return the same as {@link Publication#offer(DirectBufferVector[])}.\n@see Publication#offer(DirectBufferVector[])", "predict": "Offer the publication space to the vectors. The header vector is updated accordingly. @param vectors the vectors to offer @return the number of bytes offered"}
{"ID": 1940, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean unblock( final UnsafeBuffer[] termBuffers, final UnsafeBuffer logMetaDataBuffer, final long blockedPosition, final int termLength) { final int positionBitsToShift = LogBufferDescriptor.positionBitsToShift(termLength); final int blockedTermCount = (int)(blockedPosition >> positionBitsToShift); final int blockedOffset = (int)blockedPosition & (termLength - 1); final int activeTermCount = activeTermCount(logMetaDataBuffer); if (activeTermCount == (blockedTermCount - 1) && blockedOffset == 0) { final int currentTermId = termId(rawTailVolatile(logMetaDataBuffer, indexByTermCount(activeTermCount))); return rotateLog(logMetaDataBuffer, activeTermCount, currentTermId); } final int blockedIndex = indexByTermCount(blockedTermCount); final long rawTail = rawTailVolatile(logMetaDataBuffer, blockedIndex); final int termId = termId(rawTail); final int tailOffset = termOffset(rawTail, termLength); final UnsafeBuffer termBuffer = termBuffers[blockedIndex]; switch (TermUnblocker.unblock(logMetaDataBuffer, termBuffer, blockedOffset, tailOffset, termId)) { case UNBLOCKED_TO_END: rotateLog(logMetaDataBuffer, blockedTermCount, termId); // fall through case UNBLOCKED: return true; } return false; }. ### Assistant:", "ground_truth": "Attempt to unblock a log buffer at given position\n\n@param termBuffers       for current blockedOffset\n@param logMetaDataBuffer for log buffer\n@param blockedPosition   to attempt to unblock\n@param termLength        of the buffer for each term in the log\n@return whether unblocked or not", "predict": "Unblock the log by rotating the tail of the blocked term buffer. If the tail of the blocked term buffer is already at the end, rotate the log. @param termBuffers the term buffers to unblock @param logMetaDataBuffer the log meta data buffer @param blockedPosition the position of the blocked term buffer @param termLength the length of the term @return true if the log was rotated, false otherwise"}
{"ID": 1941, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public String channel() { final int length = buffer.getInt(offset + CHANNEL_OFFSET); lengthOfChannel = SIZE_OF_INT + length; return buffer.getStringAscii(offset + CHANNEL_OFFSET, length); }. ### Assistant:", "ground_truth": "Get the channel field as ASCII\n\n@return channel field", "predict": "The channel name. @return Channel name."}
{"ID": 1942, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public ImageMessageFlyweight channel(final String channel) { lengthOfChannel = buffer.putStringAscii(offset + CHANNEL_OFFSET, channel); return this; }. ### Assistant:", "ground_truth": "Set the channel field as ASCII\n\n@param channel field value\n@return flyweight", "predict": "Channel name for this message. @param channel Channel name @return This flyweight instance"}
{"ID": 1943, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void checkTermLength(final int termLength) { if (termLength < TERM_MIN_LENGTH) { throw new IllegalStateException( \"Term length less than min length of \" + TERM_MIN_LENGTH + \": length=\" + termLength); } if (termLength > TERM_MAX_LENGTH) { throw new IllegalStateException( \"Term length more than max length of \" + TERM_MAX_LENGTH + \": length=\" + termLength); } if (!BitUtil.isPowerOfTwo(termLength)) { throw new IllegalStateException(\"Term length not a power of 2: length=\" + termLength); } }. ### Assistant:", "ground_truth": "Check that term length is valid and alignment is valid.\n\n@param termLength to be checked.\n@throws IllegalStateException if the length is not as expected.", "predict": "Ensures that the length of a term is within the valid range. @param termLength the length of the term to check @throws IllegalArgumentException if the length is invalid"}
{"ID": 1944, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void checkPageSize(final int pageSize) { if (pageSize < PAGE_MIN_SIZE) { throw new IllegalStateException( \"Page size less than min size of \" + PAGE_MIN_SIZE + \": page size=\" + pageSize); } if (pageSize > PAGE_MAX_SIZE) { throw new IllegalStateException( \"Page size more than max size of \" + PAGE_MAX_SIZE + \": page size=\" + pageSize); } if (!BitUtil.isPowerOfTwo(pageSize)) { throw new IllegalStateException(\"Page size not a power of 2: page size=\" + pageSize); } }. ### Assistant:", "ground_truth": "Check that page size is valid and alignment is valid.\n\n@param pageSize to be checked.\n@throws IllegalStateException if the size is not as expected.", "predict": "Checks that the page size is valid. @param pageSize the page size to check. @throws IllegalArgumentException if the page size is invalid."}
{"ID": 1945, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean casActiveTermCount( final UnsafeBuffer metadataBuffer, final int expectedTermCount, final int updateTermCount) { return metadataBuffer.compareAndSetInt(LOG_ACTIVE_TERM_COUNT_OFFSET, expectedTermCount, updateTermCount); }. ### Assistant:", "ground_truth": "Compare and set the value of the current active term count.\n\n@param metadataBuffer    containing the meta data.\n@param expectedTermCount value of the active term count expected in the log\n@param updateTermCount   value of the active term count to be updated in the log\n@return true if successful otherwise false.", "predict": "Cas the active term count. @param metadataBuffer the metadata buffer @param expectedTermCount the expected term count @param updateTermCount the new term count @return true if successful, false otherwise"}
{"ID": 1946, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static long computePosition( final int activeTermId, final int termOffset, final int positionBitsToShift, final int initialTermId) { final long termCount = activeTermId - initialTermId; // copes with negative activeTermId on rollover return (termCount << positionBitsToShift) + termOffset; }. ### Assistant:", "ground_truth": "Compute the current position in absolute number of bytes.\n\n@param activeTermId        active term id.\n@param termOffset          in the term.\n@param positionBitsToShift number of times to left shift the term count\n@param initialTermId       the initial term id that this stream started on\n@return the absolute position in bytes", "predict": "Compute the position of the given term offset in the active segment. The position is computed by shifting the offset bits into the position bits. The position bits are then added to the term offset. The position bits are shifted by the number of bits in the positionBitsToShift. @param activeTermId the ID of the active term @param termOffset the offset of the term @param positionBitsToShift the number of bits to shift the term offset into the position bits @param initialTermId the ID of the initial term @return the position of the term offset in the active segment"}
{"ID": 1947, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static long computeLogLength(final int termLength, final int filePageSize) { if (termLength < (1024 * 1024 * 1024)) { return align((termLength * PARTITION_COUNT) + LOG_META_DATA_LENGTH, filePageSize); } return (PARTITION_COUNT * (long)termLength) + align(LOG_META_DATA_LENGTH, filePageSize); }. ### Assistant:", "ground_truth": "Compute the total length of a log file given the term length.\n\nAssumes {@link #TERM_MAX_LENGTH} is 1GB and that filePageSize is 1GB or less and a power of 2.\n\n@param termLength   on which to base the calculation.\n@param filePageSize to use for log.\n@return the total length of the log file.", "predict": "Compute the log length for the given term length and file page size. The log length is the length of the log file metadata plus the length of each partition. The log length is rounded up to the nearest multiple of the file page size. @param termLength The length of the term in bytes. @param filePageSize The file page size in bytes. @return The log length in bytes."}
{"ID": 1948, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void storeDefaultFrameHeader(final UnsafeBuffer metadataBuffer, final DirectBuffer defaultHeader) { if (defaultHeader.capacity() != HEADER_LENGTH) { throw new IllegalArgumentException( \"Default header length not equal to HEADER_LENGTH: length=\" + defaultHeader.capacity()); } metadataBuffer.putInt(LOG_DEFAULT_FRAME_HEADER_LENGTH_OFFSET, HEADER_LENGTH); metadataBuffer.putBytes(LOG_DEFAULT_FRAME_HEADER_OFFSET, defaultHeader, 0, HEADER_LENGTH); }. ### Assistant:", "ground_truth": "Store the default frame header to the log meta data buffer.\n\n@param metadataBuffer into which the default headers should be stored.\n@param defaultHeader  to be stored.\n@throws IllegalArgumentException if the defaultHeader larger than {@link #LOG_DEFAULT_FRAME_HEADER_MAX_LENGTH}", "predict": "Store the default header in the metadata buffer. The default header is stored in the metadata buffer so that it can be used to verify the integrity of the log. The default header is stored in the metadata buffer so that it can be used to verify the integrity of the log. The default header is stored in the metadata buffer so that it can be used to verify the integrity of the log. The default header is stored in the metadata buffer so that it can be used to verify the integrity of the log. The default header is stored in the metadata buffer so that it can be used to verify the integrity of the log. The default header is stored in the metadata buffer so that it can be used to verify the integrity of the log. The default header is stored in the metadata buffer so that it can be used to verify the integrity of the log. The default header is stored in the metadata buffer so that it can be used to verify the integrity of the log. The default header is stored in the metadata buffer so that it can be used to verify the integrity of the log."}
{"ID": 1949, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void applyDefaultHeader( final UnsafeBuffer metadataBuffer, final UnsafeBuffer termBuffer, final int termOffset) { termBuffer.putBytes(termOffset, metadataBuffer, LOG_DEFAULT_FRAME_HEADER_OFFSET, HEADER_LENGTH); }. ### Assistant:", "ground_truth": "Apply the default header for a message in a term.\n\n@param metadataBuffer containing the default headers.\n@param termBuffer     to which the default header should be applied.\n@param termOffset     at which the default should be applied.", "predict": "Applies the default header to the term buffer. @param metadataBuffer the metadata buffer @param termBuffer the term buffer @param termOffset the offset into the term buffer where the header should be applied"}
{"ID": 1950, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean rotateLog(final UnsafeBuffer metadataBuffer, final int termCount, final int termId) { final int nextTermId = termId + 1; final int nextTermCount = termCount + 1; final int nextIndex = indexByTermCount(nextTermCount); final int expectedTermId = nextTermId - PARTITION_COUNT; long rawTail; do { rawTail = rawTail(metadataBuffer, nextIndex); if (expectedTermId != termId(rawTail)) { break; } } while (!casRawTail(metadataBuffer, nextIndex, rawTail, packTail(nextTermId, 0))); return casActiveTermCount(metadataBuffer, termCount, nextTermCount); }. ### Assistant:", "ground_truth": "Rotate the log and update the tail counter for the new term.\n\nThis method is safe for concurrent use.\n\n@param metadataBuffer for the log.\n@param termCount      from which to rotate.\n@param termId         to be used in the default headers.\n@return true if log was rotated.", "predict": "Rotate the active term count in the metadata buffer. This is used when the term count changes. The old active term count is invalidated. @param metadataBuffer the metadata buffer to rotate @param termCount the old active term count @param termId the new active term id @return true if successful, false if the buffer was invalidated"}
{"ID": 1951, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void initialiseTailWithTermId( final UnsafeBuffer metadataBuffer, final int partitionIndex, final int termId) { metadataBuffer.putLong(TERM_TAIL_COUNTERS_OFFSET + (partitionIndex * SIZE_OF_LONG), packTail(termId, 0)); }. ### Assistant:", "ground_truth": "Set the initial value for the termId in the upper bits of the tail counter.\n\n@param metadataBuffer contain the tail counter.\n@param partitionIndex to be initialised.\n@param termId         to be set.", "predict": "Initialise the tail counters for a partition. @param metadataBuffer the metadata buffer to write to @param partitionIndex the partition index @param termId the term id to write"}
{"ID": 1952, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int termOffset(final long rawTail, final long termLength) { final long tail = rawTail & 0xFFFF_FFFFL; return (int)Math.min(tail, termLength); }. ### Assistant:", "ground_truth": "Read the termOffset from a packed raw tail value.\n\n@param rawTail    containing the termOffset.\n@param termLength that the offset cannot exceed.\n@return the termOffset value.", "predict": "Returns the offset of the first byte of the term. The offset is inclusive. @param rawTail the tail of the index @param termLength the length of the term @return the offset of the first byte of the term"}
{"ID": 1953, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static long rawTailVolatile(final UnsafeBuffer metadataBuffer) { final int partitionIndex = indexByTermCount(activeTermCount(metadataBuffer)); return metadataBuffer.getLongVolatile(TERM_TAIL_COUNTERS_OFFSET + (SIZE_OF_LONG * partitionIndex)); }. ### Assistant:", "ground_truth": "Get the raw value of the tail for the current active partition.\n\n@param metadataBuffer containing the tail counters.\n@return the raw value of the tail for the current active partition.", "predict": "Read the tail of the current partition from volatile memory. @param metadataBuffer the metadata buffer @return the tail value"}
{"ID": 1954, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean casRawTail( final UnsafeBuffer metadataBuffer, final int partitionIndex, final long expectedRawTail, final long updateRawTail) { final int index = TERM_TAIL_COUNTERS_OFFSET + (SIZE_OF_LONG * partitionIndex); return metadataBuffer.compareAndSetLong(index, expectedRawTail, updateRawTail); }. ### Assistant:", "ground_truth": "Compare and set the raw value of the tail for the given partition.\n\n@param metadataBuffer  containing the tail counters.\n@param partitionIndex  for the tail counter.\n@param expectedRawTail expected current value.\n@param updateRawTail   to be applied.\n@return true if the update was successful otherwise false.", "predict": "Compare and set the raw tail value for a partition. @param metadataBuffer the metadata buffer @param partitionIndex the partition index @param expectedRawTail the expected value @param updateRawTail the new value @return true if successful, false if the value was not updated"}
{"ID": 1955, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public TerminateDriverFlyweight tokenBuffer( final DirectBuffer tokenBuffer, final int tokenOffset, final int tokenLength) { buffer.putInt(TOKEN_LENGTH_OFFSET, tokenLength); if (null != tokenBuffer && tokenLength > 0) { buffer.putBytes(tokenBufferOffset(), tokenBuffer, tokenOffset, tokenLength); } return this; }. ### Assistant:", "ground_truth": "Fill the token buffer.\n\n@param tokenBuffer containing the optional token for the request.\n@param tokenOffset within the tokenBuffer at which the token begins.\n@param tokenLength of the token in the tokenBuffer.\n@return flyweight", "predict": "Writes the token buffer to the wire. The token buffer is assumed to be a direct buffer. If the buffer is null, then the length is still written but no buffer is written. If the buffer is not a direct buffer, then an IllegalArgumentException is thrown. If the buffer is not large enough to hold the entire token, then the remaining bytes of the buffer are filled with zeros. @param tokenBuffer The buffer to write to the wire. @param tokenOffset The offset into the buffer to start writing. @param tokenLength The length of the token to write. @return This flyweight."}
{"ID": 1956, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Counter allocate( final Aeron aeron, final MutableDirectBuffer tempBuffer, final long leadershipTermId, final long logPosition, final long timestamp, final boolean hasReplay, final long... snapshotRecordingIds) { tempBuffer.putLong(LEADERSHIP_TERM_ID_OFFSET, leadershipTermId); tempBuffer.putLong(LOG_POSITION_OFFSET, logPosition); tempBuffer.putLong(TIMESTAMP_OFFSET, timestamp); tempBuffer.putInt(REPLAY_FLAG_OFFSET, hasReplay ? 1 : 0); final int serviceCount = snapshotRecordingIds.length; tempBuffer.putInt(SERVICE_COUNT_OFFSET, serviceCount); final int keyLength = SNAPSHOT_RECORDING_IDS_OFFSET + (serviceCount * SIZE_OF_LONG); if (keyLength > MAX_KEY_LENGTH) { throw new ClusterException(keyLength + \" exceeds max key length \" + MAX_KEY_LENGTH); } for (int i = 0; i < serviceCount; i++) { tempBuffer.putLong(SNAPSHOT_RECORDING_IDS_OFFSET + (i * SIZE_OF_LONG), snapshotRecordingIds[i]); } final int labelOffset = BitUtil.align(keyLength, SIZE_OF_INT); int labelLength = 0; labelLength += tempBuffer.putStringWithoutLengthAscii(labelOffset + labelLength, NAME); labelLength += tempBuffer.putLongAscii(keyLength + labelLength, leadershipTermId); labelLength += tempBuffer.putStringWithoutLengthAscii(labelOffset + labelLength, \" logPosition=\"); labelLength += tempBuffer.putLongAscii(labelOffset + labelLength, logPosition); labelLength += tempBuffer.putStringWithoutLengthAscii(labelOffset + labelLength, \" hasReplay=\" + hasReplay); return aeron.addCounter(RECOVERY_STATE_TYPE_ID, tempBuffer, 0, keyLength, tempBuffer, labelOffset, labelLength); }. ### Assistant:", "ground_truth": "Allocate a counter to represent the snapshot services should load on start.\n\n@param aeron                to allocate the counter.\n@param tempBuffer           to use for building the key and label without allocation.\n@param leadershipTermId     at which the snapshot was taken.\n@param logPosition          at which the snapshot was taken.\n@param timestamp            the snapshot was taken.\n@param hasReplay            flag is true if all or part of the log must be replayed.\n@param snapshotRecordingIds for the services to use during recovery indexed by service id.\n@return the {@link Counter} for the recovery state.", "predict": "Allocate a counter for recording the recovery state of a cluster. The counter will be assigned an ID by the aeron cluster. The leadership term ID, log position, timestamp and replay flag are recorded in the counter. The cluster IDs of the snapshot recording are recorded in the counter. The label is recorded as a string. @param aeron Aeron instance. @param tempBuffer buffer to use for recording the counter. @param leadershipTermId leadership term ID. @param logPosition log position. @param timestamp timestamp. @param hasReplay replay flag. @param snapshotRecordingIds the IDs of the snapshot recording. @return the allocated counter."}
{"ID": 1957, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int findCounterId(final CountersReader counters) { final DirectBuffer buffer = counters.metaDataBuffer(); for (int i = 0, size = counters.maxCounterId(); i < size; i++) { if (counters.getCounterState(i) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(i); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECOVERY_STATE_TYPE_ID) { return i; } } } return NULL_COUNTER_ID; }. ### Assistant:", "ground_truth": "Find the active counter id for recovery state.\n\n@param counters to search within.\n@return the counter id if found otherwise {@link CountersReader#NULL_COUNTER_ID}.", "predict": "Find the counter id that corresponds to the recovery state. @param counters CountersReader @return The counter id that corresponds to the recovery state. Returns NULL_COUNTER_ID if no recovery state is found."}
{"ID": 1958, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static boolean hasReplay(final CountersReader counters, final int counterId) { final DirectBuffer buffer = counters.metaDataBuffer(); if (counters.getCounterState(counterId) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(counterId); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECOVERY_STATE_TYPE_ID) { return buffer.getInt(recordOffset + KEY_OFFSET + REPLAY_FLAG_OFFSET) == 1; } } return false; }. ### Assistant:", "ground_truth": "Has the recovery process got a log to replay?\n\n@param counters  to search within.\n@param counterId for the active recovery counter.\n@return true if a replay is required.", "predict": "Returns true if the counter has been recorded with the REPLAY_FLAG set. @param countersReader CountersReader to read from. @param counterId ID of the counter to check. @return True if the counter has been recorded with the REPLAY_FLAG set."}
{"ID": 1959, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static long getSnapshotRecordingId(final CountersReader counters, final int counterId, final int serviceId) { final DirectBuffer buffer = counters.metaDataBuffer(); if (counters.getCounterState(counterId) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(counterId); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECOVERY_STATE_TYPE_ID) { final int serviceCount = buffer.getInt(recordOffset + KEY_OFFSET + SERVICE_COUNT_OFFSET); if (serviceId < 0 || serviceId >= serviceCount) { throw new ClusterException(\"invalid serviceId \" + serviceId + \" for count of \" + serviceCount); } return buffer.getLong( recordOffset + KEY_OFFSET + SNAPSHOT_RECORDING_IDS_OFFSET + (serviceId * SIZE_OF_LONG)); } } throw new ClusterException(\"Active counter not found \" + counterId); }. ### Assistant:", "ground_truth": "Get the recording id of the snapshot for a service.\n\n@param counters  to search within.\n@param counterId for the active recovery counter.\n@param serviceId for the snapshot required.\n@return the count of replay terms if found otherwise {@link Aeron#NULL_VALUE}.", "predict": "Get the snapshot recording id from the counters meta data. @param counters counters reader @param counterId counter id @param serviceId service id @return snapshot recording id"}
{"ID": 1960, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static char[] flagsToChars(final short flags) { final char[] chars = new char[]{ '0', '0', '0', '0', '0', '0', '0', '0' }; final int length = chars.length; short mask = (short)(1 << (length - 1)); for (int i = 0; i < length; i++) { if ((flags & mask) == mask) { chars[i] = '1'; } mask >>= 1; } return chars; }. ### Assistant:", "ground_truth": "Convert header flags to an array of chars to be human readable.\n\n@param flags to be converted.\n@return header flags converted to an array of chars to be human readable.", "predict": "Convert a bitmask to a string of characters. @param flags Bitmask to convert. @return String representation of the flags."}
{"ID": 1961, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public PublicationMessageFlyweight channel(final String channel) { lengthOfChannel = buffer.putStringAscii(offset + CHANNEL_OFFSET, channel); return this; }. ### Assistant:", "ground_truth": "Set the channel field in ASCII\n\n@param channel field value\n@return flyweight", "predict": "Channel name for the message. @param channel Channel name. @return This message flyweight."}
{"ID": 1962, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public long offer(final DirectBuffer buffer, final int offset, final int length) { return cluster.offer(id, responsePublication, buffer, offset, length); }. ### Assistant:", "ground_truth": "Non-blocking publish of a partial buffer containing a message to a cluster.\n\n@param buffer containing message.\n@param offset offset in the buffer at which the encoded message begins.\n@param length in bytes of the encoded message.\n@return the same as {@link Publication#offer(DirectBuffer, int, int)} when in {@link Cluster.Role#LEADER}\notherwise {@link #MOCKED_OFFER}.", "predict": "Offer the buffer to the cluster. The buffer will be added to the cluster and the offset will be set to the given offset. The length will be set to the given length. @param buffer the buffer to offer @param offset the offset to start writing @param length the length to write @return the offset where the buffer was added to the cluster."}
{"ID": 1963, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public final void wrap(final AtomicBuffer buffer, final int offset, final int length) { this.buffer.wrap(buffer, offset, length); }. ### Assistant:", "ground_truth": "Wrap a region of an underlying log buffer so can can represent a claimed space for use by a publisher.\n\n@param buffer to be wrapped.\n@param offset at which the claimed region begins including space for the header.\n@param length length of the underlying claimed region including space for the header.", "predict": "Wrap this buffer around another buffer. This method is used to create a new buffer that wraps around an existing buffer. The new buffer will have the same capacity as the original buffer. @param buffer the buffer to wrap around @param offset the offset of the new buffer @param length the length of the new buffer"}
{"ID": 1964, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public final void commit() { int frameLength = buffer.capacity(); if (ByteOrder.nativeOrder() != LITTLE_ENDIAN) { frameLength = Integer.reverseBytes(frameLength); } buffer.putIntOrdered(FRAME_LENGTH_FIELD_OFFSET, frameLength); }. ### Assistant:", "ground_truth": "Commit the message to the log buffer so that is it available to subscribers.", "predict": "Commits the current buffer to the underlying stream."}
{"ID": 1965, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public final void abort() { int frameLength = buffer.capacity(); if (ByteOrder.nativeOrder() != LITTLE_ENDIAN) { frameLength = Integer.reverseBytes(frameLength); } buffer.putShort(TYPE_FIELD_OFFSET, (short)HDR_TYPE_PAD, LITTLE_ENDIAN); buffer.putIntOrdered(FRAME_LENGTH_FIELD_OFFSET, frameLength); }. ### Assistant:", "ground_truth": "Abort a claim of the message space to the log buffer so that the log can progress by ignoring this claim.", "predict": "Abort the recording process."}
{"ID": 1966, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void main(final String[] args) { loadPropertiesFiles(args); final ShutdownSignalBarrier barrier = new ShutdownSignalBarrier(); final MediaDriver.Context ctx = new MediaDriver.Context(); ctx.terminationHook(barrier::signal); try (MediaDriver ignore = MediaDriver.launch(ctx)) { barrier.await(); System.out.println(\"Shutdown Driver...\"); } }. ### Assistant:", "ground_truth": "Start Media Driver as a stand-alone process.\n\n@param args command line arguments", "predict": "Demonstrates how to use the shutdown hook mechanism to gracefully shutdown the MediaDriver. @param args command line arguments"}
{"ID": 1967, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void close() { CloseHelper.close(sharedRunner); CloseHelper.close(sharedNetworkRunner); CloseHelper.close(receiverRunner); CloseHelper.close(senderRunner); CloseHelper.close(conductorRunner); CloseHelper.close(sharedInvoker); if (ctx.useWindowsHighResTimer() && SystemUtil.osName().startsWith(\"win\")) { if (!wasHighResTimerEnabled) { HighResolutionTimer.disable(); } } }. ### Assistant:", "ground_truth": "Shutdown the media driver by stopping all threads and freeing resources.", "predict": "Close all resources."}
{"ID": 1968, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public final long position() { final int resultingOffset = BitUtil.align(termOffset() + frameLength(), FRAME_ALIGNMENT); return computePosition(termId(), resultingOffset, positionBitsToShift, initialTermId); }. ### Assistant:", "ground_truth": "Get the current position to which the image has advanced on reading this message.\n\n@return the current position to which the image has advanced on reading this message.", "predict": "Returns the position of this term in the index. This is the offset of the term in the index's data file."}
{"ID": 1969, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static Counter allocate( final Aeron aeron, final MutableDirectBuffer tempBuffer, final int serviceId) { tempBuffer.putInt(SERVICE_ID_OFFSET, serviceId); final int labelOffset = BitUtil.align(KEY_LENGTH, SIZE_OF_INT); int labelLength = 0; labelLength += tempBuffer.putStringWithoutLengthAscii(labelOffset + labelLength, NAME); labelLength += tempBuffer.putIntAscii(labelOffset + labelLength, serviceId); return aeron.addCounter( SERVICE_HEARTBEAT_TYPE_ID, tempBuffer, 0, KEY_LENGTH, tempBuffer, labelOffset, labelLength); }. ### Assistant:", "ground_truth": "Allocate a counter to represent the heartbeat of a clustered service.\n\n@param aeron           to allocate the counter.\n@param tempBuffer      to use for building the key and label without allocation.\n@param serviceId       of the service heartbeat.\n@return the {@link Counter} for the commit position.", "predict": "Allocate a counter with the given serviceId and label. @param aeron Aeron instance. @param tempBuffer buffer to use for the counter. @param serviceId ServiceId to use for the counter. @return The allocated counter."}
{"ID": 1970, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static int findCounterId(final CountersReader counters, final int serviceId) { final DirectBuffer buffer = counters.metaDataBuffer(); for (int i = 0, size = counters.maxCounterId(); i < size; i++) { if (counters.getCounterState(i) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(i); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == SERVICE_HEARTBEAT_TYPE_ID && buffer.getInt(recordOffset + KEY_OFFSET + SERVICE_ID_OFFSET) == serviceId) { return i; } } } return NULL_COUNTER_ID; }. ### Assistant:", "ground_truth": "Find the active counter id for heartbeat of a given service id.\n\n@param counters  to search within.\n@param serviceId to search for.\n@return the counter id if found otherwise {@link CountersReader#NULL_COUNTER_ID}.", "predict": "Find the counter id for the given service id. @param counters CountersReader to search in. @param serviceId Service id to search for. @return The counter id for the given service id, or NULL_COUNTER_ID if not found."}
{"ID": 1971, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public Map<StreamCompositeKey, StreamBacklog> snapshot() { final Map<StreamCompositeKey, StreamBacklog> streams = new HashMap<>(); counters.forEach( (counterId, typeId, keyBuffer, label) -> { if ((typeId >= PUBLISHER_LIMIT_TYPE_ID && typeId <= RECEIVER_POS_TYPE_ID) || typeId == SENDER_LIMIT_TYPE_ID || typeId == PER_IMAGE_TYPE_ID || typeId == PUBLISHER_POS_TYPE_ID) { final StreamCompositeKey key = new StreamCompositeKey( keyBuffer.getInt(SESSION_ID_OFFSET), keyBuffer.getInt(STREAM_ID_OFFSET), keyBuffer.getStringAscii(CHANNEL_OFFSET)); final StreamBacklog streamBacklog = streams.computeIfAbsent(key, (ignore) -> new StreamBacklog()); final long registrationId = keyBuffer.getLong(REGISTRATION_ID_OFFSET); final long value = counters.getCounterValue(counterId); switch (typeId) { case PublisherLimit.PUBLISHER_LIMIT_TYPE_ID: streamBacklog.createPublisherIfAbsent().registrationId(registrationId); streamBacklog.createPublisherIfAbsent().limit(value); break; case PublisherPos.PUBLISHER_POS_TYPE_ID: streamBacklog.createPublisherIfAbsent().registrationId(registrationId); streamBacklog.createPublisherIfAbsent().position(value); break; case SenderPos.SENDER_POSITION_TYPE_ID: streamBacklog.createSenderIfAbsent().registrationId(registrationId); streamBacklog.createSenderIfAbsent().position(value); break; case SenderLimit.SENDER_LIMIT_TYPE_ID: streamBacklog.createSenderIfAbsent().registrationId(registrationId); streamBacklog.createSenderIfAbsent().limit(value); break; case ReceiverHwm.RECEIVER_HWM_TYPE_ID: streamBacklog.createReceiverIfAbsent().registrationId(registrationId); streamBacklog.createReceiverIfAbsent().highWaterMark(value); break; case ReceiverPos.RECEIVER_POS_TYPE_ID: streamBacklog.createReceiverIfAbsent().registrationId(registrationId); streamBacklog.createReceiverIfAbsent().position(value); break; case SubscriberPos.SUBSCRIBER_POSITION_TYPE_ID: streamBacklog.subscriberBacklogs().put(registrationId, new Subscriber(value)); break; } } }); return streams; }. ### Assistant:", "ground_truth": "Take a snapshot of all the backlog information and group by stream.\n\n@return a snapshot of all the backlog information and group by stream.", "predict": "Returns a snapshot of the counters. The snapshot is a map of counters grouped by their composite key. The composite key is a combination of the sessionId, streamId, and channelId. The counters are grouped by their composite key, and the counters are grouped by their composite key. The counters are grouped by their composite key, and the counters are grouped by their composite key. The counters are grouped by their composite key, and the counters are grouped by their composite key. The counters are grouped by their composite key, and the counters are grouped by their composite key. The counters are grouped by their composite key, and the counters are grouped by their composite key. The counters are grouped by their composite key, and the counters are grouped by their composite key. The counters are grouped by their composite key, and the counters are grouped by their composite key. The counters are grouped by their composite key, and the counters are grouped by their composite key. The counters are grouped by their composite"}
{"ID": 1972, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static AtomicCounter allocate( final MutableDirectBuffer tempBuffer, final String name, final int typeId, final CountersManager countersManager, final long registrationId) { return new AtomicCounter( countersManager.valuesBuffer(), allocateCounterId(tempBuffer, name, typeId, countersManager, registrationId), countersManager); }. ### Assistant:", "ground_truth": "Allocate a counter for tracking the last heartbeat of an entity.\n\n@param tempBuffer      to be used for labels and key.\n@param name            of the counter for the label.\n@param typeId          of the counter for classification.\n@param countersManager from which to allocated the underlying storage.\n@param registrationId  to be associated with the counter.\n@return a new {@link AtomicCounter} for tracking the last heartbeat.", "predict": "Allocate a new AtomicCounter. This method is thread-safe. @param tempBuffer temporary buffer to use for counter name. @param name name of the counter. @param typeId type of the counter. @param countersManager counters manager. @param registrationId registration id. @return atomic counter."}
{"ID": 1973, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void close() { final MappedByteBuffer cncByteBuffer = this.cncByteBuffer; this.cncByteBuffer = null; IoUtil.unmap(cncByteBuffer); super.close(); }. ### Assistant:", "ground_truth": "Clean up all resources that the client uses to communicate with the Media Driver.", "predict": "Closes the connection to the CNC. This method is called automatically when the connection is closed."}
{"ID": 1974, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static void dispatchDescriptor( final RecordingDescriptorDecoder decoder, final RecordingDescriptorConsumer consumer) { consumer.onRecordingDescriptor( decoder.controlSessionId(), decoder.correlationId(), decoder.recordingId(), decoder.startTimestamp(), decoder.stopTimestamp(), decoder.startPosition(), decoder.stopPosition(), decoder.initialTermId(), decoder.segmentFileLength(), decoder.termBufferLength(), decoder.mtuLength(), decoder.sessionId(), decoder.streamId(), decoder.strippedChannel(), decoder.originalChannel(), decoder.sourceIdentity()); }. ### Assistant:", "ground_truth": "Dispatch a descriptor message to a consumer by reading the fields in the correct order.\n\n@param decoder  which wraps the encoded message ready for reading.\n@param consumer to which the decoded fields should be passed.", "predict": "Dispatches the decoded descriptor to the consumer. @param decoder The decoded descriptor. @param consumer The consumer to dispatch the descriptor to."}
{"ID": 1975, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void addSlab(int minimumSize) { int nextSlabSize; if (bytesUsed == 0) { nextSlabSize = initialSlabSize; } else if (bytesUsed > maxCapacityHint / 5) { // to avoid an overhead of up to twice the needed size, we get linear when approaching target page size nextSlabSize = maxCapacityHint / 5; } else { // double the size every time nextSlabSize = bytesUsed; } if (nextSlabSize < minimumSize) { LOG.debug(\"slab size {} too small for value of size {}. Bumping up slab size\", nextSlabSize, minimumSize); nextSlabSize = minimumSize; } LOG.debug(\"used {} slabs, adding new slab of size {}\", slabs.size(), nextSlabSize); this.currentSlab = allocator.allocate(nextSlabSize); this.slabs.add(currentSlab); this.bytesAllocated += nextSlabSize; this.currentSlabIndex = 0; }. ### Assistant:", "ground_truth": "the new slab is guaranteed to be at least minimumSize\n@param minimumSize the size of the data we want to copy in the new slab", "predict": "Allocate a new slab."}
{"ID": 1976, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void setByte(long index, byte value) { checkArgument(index < bytesUsed, \"Index: \" + index + \" is >= the current size of: \" + bytesUsed); long seen = 0; for (int i = 0; i < slabs.size(); i++) { ByteBuffer slab = slabs.get(i); if (index < seen + slab.limit()) { // ok found index slab.put((int)(index-seen), value); break; } seen += slab.limit(); } }. ### Assistant:", "ground_truth": "Replace the byte stored at position index in this stream with value\n\n@param index which byte to replace\n@param value the value to replace it with", "predict": "Sets the value at the given index to the given byte. If the index is out of range, an IllegalArgumentException is thrown. @param index the index of the byte @param value the value to set at the given index"}
{"ID": 1977, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void add(Statistics<?> stats) { if (stats.hasNonNullValue()) { nullPages.add(false); Object min = stats.genericGetMin(); Object max = stats.genericGetMax(); addMinMax(min, max); pageIndexes.add(nextPageIndex); minMaxSize += sizeOf(min); minMaxSize += sizeOf(max); } else { nullPages.add(true); } nullCounts.add(stats.getNumNulls()); ++nextPageIndex; }. ### Assistant:", "ground_truth": "Adds the data from the specified statistics to this builder\n\n@param stats\nthe statistics to be added", "predict": "Adds a Statistics object to the Histogram. The Histogram will automatically adjust its size based on the size of the input object."}
{"ID": 1978, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public static RowRanges calculateRowRanges(FilterCompat.Filter filter, ColumnIndexStore columnIndexStore, Set<ColumnPath> paths, long rowCount) { return filter.accept(new FilterCompat.Visitor<RowRanges>() { @Override public RowRanges visit(FilterPredicateCompat filterPredicateCompat) { try { return filterPredicateCompat.getFilterPredicate() .accept(new ColumnIndexFilter(columnIndexStore, paths, rowCount)); } catch (MissingOffsetIndexException e) { LOGGER.info(e.getMessage()); return RowRanges.createSingle(rowCount); } } @Override public RowRanges visit(UnboundRecordFilterCompat unboundRecordFilterCompat) { return RowRanges.createSingle(rowCount); } @Override public RowRanges visit(NoOpFilter noOpFilter) { return RowRanges.createSingle(rowCount); } }); }. ### Assistant:", "ground_truth": "Calculates the row ranges containing the indexes of the rows might match the specified filter.\n\n@param filter\nto be used for filtering the rows\n@param columnIndexStore\nthe store for providing column/offset indexes\n@param paths\nthe paths of the columns used in the actual projection; a column not being part of the projection will be\nhandled as containing {@code null} values only even if the column has values written in the file\n@param rowCount\nthe total number of rows in the row-group\n@return the ranges of the possible matching row indexes; the returned ranges will contain all the rows if any of\nthe required offset index is missing", "predict": "Calculates the row ranges for a filter predicate. The filter predicate is evaluated for each row in the table. The resulting row ranges are returned. @param filter the filter predicate @param columnIndexStore the column index store @param paths the column paths @param rowCount the row count @return the row ranges"}
{"ID": 1979, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static GroupType convertArrayType(final String name, final ListTypeInfo typeInfo) { final TypeInfo subType = typeInfo.getListElementTypeInfo(); return listWrapper(name, listType(), new GroupType(Repetition.REPEATED, ParquetHiveSerDe.ARRAY.toString(), convertType(\"array_element\", subType))); }. ### Assistant:", "ground_truth": "1 anonymous element \"array_element\"", "predict": "Converts a list type to a Parquet array type."}
{"ID": 1980, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static GroupType convertStructType(final String name, final StructTypeInfo typeInfo) { final List<String> columnNames = typeInfo.getAllStructFieldNames(); final List<TypeInfo> columnTypes = typeInfo.getAllStructFieldTypeInfos(); return new GroupType(Repetition.OPTIONAL, name, convertTypes(columnNames, columnTypes)); }. ### Assistant:", "ground_truth": "An optional group containing multiple elements", "predict": "Convert a StructTypeInfo to a GroupTypeInfo. @param name the name of the resulting GroupTypeInfo @param typeInfo the StructTypeInfo to convert @return the GroupTypeInfo"}
{"ID": 1981, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private static String annotateMessage(String message, int pos) { StringBuilder sb = new StringBuilder(message); sb.append('\\n'); for (int i = 0; i < pos; i++) { sb.append('-'); } sb.append('^'); return sb.toString(); }. ### Assistant:", "ground_truth": "for pretty printing which character had the error", "predict": "Annotate the message with the position of the error. @param message The message to annotate. @param pos The position of the error. @return The annotated message."}
{"ID": 1982, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void endPreviousBitPackedRun() { if (bitPackedRunHeaderPointer == -1) { // we're not currently in a bit-packed-run return; } // create bit-packed-header, which needs to fit in 1 byte byte bitPackHeader = (byte) ((bitPackedGroupCount << 1) | 1); // update this byte baos.setByte(bitPackedRunHeaderPointer, bitPackHeader); // mark that this run is over bitPackedRunHeaderPointer = -1; // reset the number of groups bitPackedGroupCount = 0; }. ### Assistant:", "ground_truth": "If we are currently writing a bit-packed-run, update the\nbit-packed-header and consider this run to be over\n\ndoes nothing if we're not currently writing a bit-packed run", "predict": "End the previous bit-packed run."}
{"ID": 1983, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Override public void readOne(TProtocol in, TProtocol out) throws TException { readOneStruct(in, out); }. ### Assistant:", "ground_truth": "reads one record from in and writes it to out\nexceptions are not recoverable as record might be halfway written\n@param in input protocol\n@param out output protocol\n@throws TException if there is an error while reading or writing", "predict": "Reads a single value from the input protocol."}
{"ID": 1984, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Deprecated public static List<Footer> readFooters(Configuration configuration, FileStatus pathStatus) throws IOException { return readFooters(configuration, pathStatus, false); }. ### Assistant:", "ground_truth": "this always returns the row groups\n@param configuration a configuration\n@param pathStatus a file status to read footers from\n@return a list of footers\n@throws IOException if an exception is thrown while reading the footers\n@deprecated will be removed in 2.0.0;\nuse {@link ParquetFileReader#open(InputFile, ParquetReadOptions)}", "predict": "Read footer information from a directory. This is a deprecated method. Use the other methods in this class instead. @param configuration Configuration to use @param pathStatus Path status to use @return List of Footer objects @throws IOException if an error occurs while reading the footer information @deprecated Use the other methods in this class instead."}
{"ID": 1985, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Deprecated public static List<Footer> readSummaryFile(Configuration configuration, FileStatus summaryStatus) throws IOException { final Path parent = summaryStatus.getPath().getParent(); ParquetMetadata mergedFooters = readFooter(configuration, summaryStatus, filter(false)); return footersFromSummaryFile(parent, mergedFooters); }. ### Assistant:", "ground_truth": "Specifically reads a given summary file\n@param configuration a configuration\n@param summaryStatus file status for a summary file\n@return the metadata translated for each file\n@throws IOException if an exception is thrown while reading the summary file\n@deprecated metadata files are not recommended and will be removed in 2.0.0", "predict": "Read footer summary file. This is a deprecated method. Use the more general FooterSummaryReader instead. @param configuration Configuration @param summaryStatus FileStatus of summary file @return List of Footers @throws IOException if an error occurs while reading the summary file"}
{"ID": 1986, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: @Deprecated public static final ParquetMetadata readFooter(InputFile file, MetadataFilter filter) throws IOException { ParquetReadOptions options; if (file instanceof HadoopInputFile) { options = HadoopReadOptions.builder(((HadoopInputFile) file).getConfiguration()) .withMetadataFilter(filter).build(); } else { options = ParquetReadOptions.builder().withMetadataFilter(filter).build(); } try (SeekableInputStream in = file.newStream()) { return readFooter(file, options, in); } }. ### Assistant:", "ground_truth": "Reads the meta data block in the footer of the file using provided input stream\n@param file a {@link InputFile} to read\n@param filter the filter to apply to row groups\n@return the metadata blocks in the footer\n@throws IOException if an error occurs while reading the file\n@deprecated will be removed in 2.0.0;\nuse {@link ParquetFileReader#open(InputFile, ParquetReadOptions)}", "predict": "Read footer of a Parquet file. This is a deprecated method and will be removed in the future. @param file the file to read @param filter the filter to apply to the metadata @return the metadata @throws IOException if there is a problem reading the footer"}
{"ID": 1987, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public PageReadStore readNextRowGroup() throws IOException { if (currentBlock == blocks.size()) { return null; } BlockMetaData block = blocks.get(currentBlock); if (block.getRowCount() == 0) { throw new RuntimeException(\"Illegal row group of 0 rows\"); } this.currentRowGroup = new ColumnChunkPageReadStore(block.getRowCount()); // prepare the list of consecutive parts to read them in one scan List<ConsecutivePartList> allParts = new ArrayList<ConsecutivePartList>(); ConsecutivePartList currentParts = null; for (ColumnChunkMetaData mc : block.getColumns()) { ColumnPath pathKey = mc.getPath(); BenchmarkCounter.incrementTotalBytes(mc.getTotalSize()); ColumnDescriptor columnDescriptor = paths.get(pathKey); if (columnDescriptor != null) { long startingPos = mc.getStartingPos(); // first part or not consecutive => new list if (currentParts == null || currentParts.endPos() != startingPos) { currentParts = new ConsecutivePartList(startingPos); allParts.add(currentParts); } currentParts.addChunk(new ChunkDescriptor(columnDescriptor, mc, startingPos, (int)mc.getTotalSize())); } } // actually read all the chunks ChunkListBuilder builder = new ChunkListBuilder(); for (ConsecutivePartList consecutiveChunks : allParts) { consecutiveChunks.readAll(f, builder); } for (Chunk chunk : builder.build()) { currentRowGroup.addColumn(chunk.descriptor.col, chunk.readAllPages()); } // avoid re-reading bytes the dictionary reader is used after this call if (nextDictionaryReader != null) { nextDictionaryReader.setRowGroup(currentRowGroup); } advanceToNextBlock(); return currentRowGroup; }. ### Assistant:", "ground_truth": "Reads all the columns requested from the row group at the current file position.\n@throws IOException if an error occurs while reading\n@return the PageReadStore which can provide PageReaders for each column.", "predict": "Reads the next row group from the file. @return The next row group or null if the end of the file was reached. @throws IOException If an I/O error occurred while reading the file."}
{"ID": 1988, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public PageReadStore readNextFilteredRowGroup() throws IOException { if (currentBlock == blocks.size()) { return null; } if (!options.useColumnIndexFilter()) { return readNextRowGroup(); } BlockMetaData block = blocks.get(currentBlock); if (block.getRowCount() == 0) { throw new RuntimeException(\"Illegal row group of 0 rows\"); } ColumnIndexStore ciStore = getColumnIndexStore(currentBlock); RowRanges rowRanges = getRowRanges(currentBlock); long rowCount = rowRanges.rowCount(); if (rowCount == 0) { // There are no matching rows -> skipping this row-group advanceToNextBlock(); return readNextFilteredRowGroup(); } if (rowCount == block.getRowCount()) { // All rows are matching -> fall back to the non-filtering path return readNextRowGroup(); } this.currentRowGroup = new ColumnChunkPageReadStore(rowRanges); // prepare the list of consecutive parts to read them in one scan ChunkListBuilder builder = new ChunkListBuilder(); List<ConsecutivePartList> allParts = new ArrayList<ConsecutivePartList>(); ConsecutivePartList currentParts = null; for (ColumnChunkMetaData mc : block.getColumns()) { ColumnPath pathKey = mc.getPath(); ColumnDescriptor columnDescriptor = paths.get(pathKey); if (columnDescriptor != null) { OffsetIndex offsetIndex = ciStore.getOffsetIndex(mc.getPath()); OffsetIndex filteredOffsetIndex = filterOffsetIndex(offsetIndex, rowRanges, block.getRowCount()); for (OffsetRange range : calculateOffsetRanges(filteredOffsetIndex, mc, offsetIndex.getOffset(0))) { BenchmarkCounter.incrementTotalBytes(range.getLength()); long startingPos = range.getOffset(); // first part or not consecutive => new list if (currentParts == null || currentParts.endPos() != startingPos) { currentParts = new ConsecutivePartList(startingPos); allParts.add(currentParts); } ChunkDescriptor chunkDescriptor = new ChunkDescriptor(columnDescriptor, mc, startingPos, (int) range.getLength()); currentParts.addChunk(chunkDescriptor); builder.setOffsetIndex(chunkDescriptor, filteredOffsetIndex); } } } // actually read all the chunks for (ConsecutivePartList consecutiveChunks : allParts) { consecutiveChunks.readAll(f, builder); } for (Chunk chunk : builder.build()) { currentRowGroup.addColumn(chunk.descriptor.col, chunk.readAllPages()); } // avoid re-reading bytes the dictionary reader is used after this call if (nextDictionaryReader != null) { nextDictionaryReader.setRowGroup(currentRowGroup); } advanceToNextBlock(); return currentRowGroup; }. ### Assistant:", "ground_truth": "Reads all the columns requested from the row group at the current file position. It may skip specific pages based\non the column indexes according to the actual filter. As the rows are not aligned among the pages of the different\ncolumns row synchronization might be required. See the documentation of the class SynchronizingColumnReader for\ndetails.\n\n@return the PageReadStore which can provide PageReaders for each column\n@throws IOException\nif any I/O error occurs while reading", "predict": "Reads the next row group, skipping the ones that don't match the filter. @return the current row group, or null if the end of the file is reached. @throws IOException if an I/O error occurs while reading the row group."}
{"ID": 1989, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: DictionaryPage readDictionary(ColumnChunkMetaData meta) throws IOException { if (!meta.getEncodings().contains(Encoding.PLAIN_DICTIONARY) && !meta.getEncodings().contains(Encoding.RLE_DICTIONARY)) { return null; } // TODO: this should use getDictionaryPageOffset() but it isn't reliable. if (f.getPos() != meta.getStartingPos()) { f.seek(meta.getStartingPos()); } PageHeader pageHeader = Util.readPageHeader(f); if (!pageHeader.isSetDictionary_page_header()) { return null; // TODO: should this complain? } DictionaryPage compressedPage = readCompressedDictionary(pageHeader, f); BytesInputDecompressor decompressor = options.getCodecFactory().getDecompressor(meta.getCodec()); return new DictionaryPage( decompressor.decompress(compressedPage.getBytes(), compressedPage.getUncompressedSize()), compressedPage.getDictionarySize(), compressedPage.getEncoding()); }. ### Assistant:", "ground_truth": "Reads and decompresses a dictionary page for the given column chunk.\n\nReturns null if the given column chunk has no dictionary page.\n\n@param meta a column's ColumnChunkMetaData to read the dictionary from\n@return an uncompressed DictionaryPage or null\n@throws IOException if there is an error while reading the dictionary", "predict": "Reads a dictionary page."}
{"ID": 1990, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: synchronized void addWriter(InternalParquetRecordWriter writer, Long allocation) { Long oldValue = writerList.get(writer); if (oldValue == null) { writerList.put(writer, allocation); } else { throw new IllegalArgumentException(\"[BUG] The Parquet Memory Manager should not add an \" + \"instance of InternalParquetRecordWriter more than once. The Manager already contains \" + \"the writer: \" + writer); } updateAllocation(); }. ### Assistant:", "ground_truth": "Add a new writer and its memory allocation to the memory manager.\n@param writer the new created writer\n@param allocation the requested buffer size", "predict": "Add a writer to the list of writers. The writers are added in order of increasing allocation. If a writer is already in the list, it's allocation is updated."}
{"ID": 1991, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: synchronized void removeWriter(InternalParquetRecordWriter writer) { if (writerList.containsKey(writer)) { writerList.remove(writer); } if (!writerList.isEmpty()) { updateAllocation(); } }. ### Assistant:", "ground_truth": "Remove the given writer from the memory manager.\n@param writer the writer that has been closed", "predict": "Remove a writer from the list of writers. This is used when writers are added and removed during the course of writing a file."}
{"ID": 1992, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: private void updateAllocation() { long totalAllocations = 0; for (Long allocation : writerList.values()) { totalAllocations += allocation; } if (totalAllocations <= totalMemoryPool) { scale = 1.0; } else { scale = (double) totalMemoryPool / totalAllocations; LOG.warn(String.format( \"Total allocation exceeds %.2f%% (%,d bytes) of heap memory\\n\" + \"Scaling row group sizes to %.2f%% for %d writers\", 100*memoryPoolRatio, totalMemoryPool, 100*scale, writerList.size())); for (Runnable callBack : callBacks.values()) { // we do not really want to start a new thread here. callBack.run(); } } int maxColCount = 0; for (InternalParquetRecordWriter w : writerList.keySet()) { maxColCount = Math.max(w.getSchema().getColumns().size(), maxColCount); } for (Map.Entry<InternalParquetRecordWriter, Long> entry : writerList.entrySet()) { long newSize = (long) Math.floor(entry.getValue() * scale); if(scale < 1.0 && minMemoryAllocation > 0 && newSize < minMemoryAllocation) { throw new ParquetRuntimeException(String.format(\"New Memory allocation %d bytes\" + \" is smaller than the minimum allocation size of %d bytes.\", newSize, minMemoryAllocation)){}; } entry.getKey().setRowGroupSizeThreshold(newSize); LOG.debug(String.format(\"Adjust block size from %,d to %,d for writer: %s\", entry.getValue(), newSize, entry.getKey())); } }. ### Assistant:", "ground_truth": "Update the allocated size of each writer based on the current allocations and pool size.", "predict": "Adjusts the size of the row groups based on the current memory usage. This is done by dividing the total memory usage by the total number of writers and adjusting the size of each row group accordingly. The scaling factor is also adjusted accordingly."}
{"ID": 1993, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void registerScaleCallBack(String callBackName, Runnable callBack) { Preconditions.checkNotNull(callBackName, \"callBackName\"); Preconditions.checkNotNull(callBack, \"callBack\"); if (callBacks.containsKey(callBackName)) { throw new IllegalArgumentException(\"The callBackName \" + callBackName + \" is duplicated and has been registered already.\"); } else { callBacks.put(callBackName, callBack); } }. ### Assistant:", "ground_truth": "Register callback and deduplicate it if any.\n@param callBackName the name of callback. It should be identical.\n@param callBack the callback passed in from upper layer, such as Hive.", "predict": "Register a scale call back. @param callBackName The name of the scale call back. @param callBack The scale call back."}
{"ID": 1994, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void start() throws IOException { state = state.start(); LOG.debug(\"{}: start\", out.getPos()); out.write(MAGIC); }. ### Assistant:", "ground_truth": "start the file\n@throws IOException if there is an error while writing", "predict": "Start writing the output."}
{"ID": 1995, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void startBlock(long recordCount) throws IOException { state = state.startBlock(); LOG.debug(\"{}: start block\", out.getPos()); // out.write(MAGIC); // TODO: add a magic delimiter alignment.alignForRowGroup(out); currentBlock = new BlockMetaData(); currentRecordCount = recordCount; currentColumnIndexes = new ArrayList<>(); currentOffsetIndexes = new ArrayList<>(); }. ### Assistant:", "ground_truth": "start a block\n@param recordCount the record count in this block\n@throws IOException if there is an error while writing", "predict": "Start a new block. This is called when we encounter a new block in the input file."}
{"ID": 1996, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void startColumn(ColumnDescriptor descriptor, long valueCount, CompressionCodecName compressionCodecName) throws IOException { state = state.startColumn(); encodingStatsBuilder.clear(); currentEncodings = new HashSet<Encoding>(); currentChunkPath = ColumnPath.get(descriptor.getPath()); currentChunkType = descriptor.getPrimitiveType(); currentChunkCodec = compressionCodecName; currentChunkValueCount = valueCount; currentChunkFirstDataPage = out.getPos(); compressedLength = 0; uncompressedLength = 0; // The statistics will be copied from the first one added at writeDataPage(s) so we have the correct typed one currentStatistics = null; columnIndexBuilder = ColumnIndexBuilder.getBuilder(currentChunkType, columnIndexTruncateLength); offsetIndexBuilder = OffsetIndexBuilder.getBuilder(); firstPageOffset = -1; }. ### Assistant:", "ground_truth": "start a column inside a block\n@param descriptor the column descriptor\n@param valueCount the value count in this column\n@param compressionCodecName a compression codec name\n@throws IOException if there is an error while writing", "predict": "Start writing a new column. @param descriptor Column descriptor @param valueCount Value count of column @param compressionCodecName Compression codec name @throws IOException"}
{"ID": 1997, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void writeDictionaryPage(DictionaryPage dictionaryPage) throws IOException { state = state.write(); LOG.debug(\"{}: write dictionary page: {} values\", out.getPos(), dictionaryPage.getDictionarySize()); currentChunkDictionaryPageOffset = out.getPos(); int uncompressedSize = dictionaryPage.getUncompressedSize(); int compressedPageSize = (int)dictionaryPage.getBytes().size(); // TODO: fix casts metadataConverter.writeDictionaryPageHeader( uncompressedSize, compressedPageSize, dictionaryPage.getDictionarySize(), dictionaryPage.getEncoding(), out); long headerSize = out.getPos() - currentChunkDictionaryPageOffset; this.uncompressedLength += uncompressedSize + headerSize; this.compressedLength += compressedPageSize + headerSize; LOG.debug(\"{}: write dictionary page content {}\", out.getPos(), compressedPageSize); dictionaryPage.getBytes().writeAllTo(out); encodingStatsBuilder.addDictEncoding(dictionaryPage.getEncoding()); currentEncodings.add(dictionaryPage.getEncoding()); }. ### Assistant:", "ground_truth": "writes a dictionary page page\n@param dictionaryPage the dictionary page\n@throws IOException if there is an error while writing", "predict": "Write a dictionary page to the output stream. @param dictionaryPage dictionary page to write @throws IOException if an I/O error occurs"}
{"ID": 1998, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void writeDataPage( int valueCount, int uncompressedPageSize, BytesInput bytes, Statistics statistics, long rowCount, Encoding rlEncoding, Encoding dlEncoding, Encoding valuesEncoding) throws IOException { long beforeHeader = out.getPos(); innerWriteDataPage(valueCount, uncompressedPageSize, bytes, statistics, rlEncoding, dlEncoding, valuesEncoding); offsetIndexBuilder.add((int) (out.getPos() - beforeHeader), rowCount); }. ### Assistant:", "ground_truth": "Writes a single page\n@param valueCount count of values\n@param uncompressedPageSize the size of the data once uncompressed\n@param bytes the compressed data for the page without header\n@param statistics the statistics of the page\n@param rowCount the number of rows in the page\n@param rlEncoding encoding of the repetition level\n@param dlEncoding encoding of the definition level\n@param valuesEncoding encoding of values\n@throws IOException if any I/O error occurs during writing the file", "predict": "Write a data page. The page is written in a single shot, without any intermediate steps. This is the fastest way to write a page, but it is also the least flexible. @param valueCount the number of values in the page @param uncompressedPageSize the size of the page in bytes, not counting the header @param bytes the data page @param statistics the statistics of the page @param rowCount the number of rows in the page @param rlEncoding the row encoding @param dlEncoding the delimiter encoding @param valuesEncoding the value encoding @throws IOException if an error occurs while writing the page"}
{"ID": 1999, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: void writeColumnChunk(ColumnDescriptor descriptor, long valueCount, CompressionCodecName compressionCodecName, DictionaryPage dictionaryPage, BytesInput bytes, long uncompressedTotalPageSize, long compressedTotalPageSize, Statistics<?> totalStats, ColumnIndexBuilder columnIndexBuilder, OffsetIndexBuilder offsetIndexBuilder, Set<Encoding> rlEncodings, Set<Encoding> dlEncodings, List<Encoding> dataEncodings) throws IOException { startColumn(descriptor, valueCount, compressionCodecName); state = state.write(); if (dictionaryPage != null) { writeDictionaryPage(dictionaryPage); } LOG.debug(\"{}: write data pages\", out.getPos()); long headersSize = bytes.size() - compressedTotalPageSize; this.uncompressedLength += uncompressedTotalPageSize + headersSize; this.compressedLength += compressedTotalPageSize + headersSize; LOG.debug(\"{}: write data pages content\", out.getPos()); firstPageOffset = out.getPos(); bytes.writeAllTo(out); encodingStatsBuilder.addDataEncodings(dataEncodings); if (rlEncodings.isEmpty()) { encodingStatsBuilder.withV2Pages(); } currentEncodings.addAll(rlEncodings); currentEncodings.addAll(dlEncodings); currentEncodings.addAll(dataEncodings); currentStatistics = totalStats; this.columnIndexBuilder = columnIndexBuilder; this.offsetIndexBuilder = offsetIndexBuilder; endColumn(); }. ### Assistant:", "ground_truth": "Writes a column chunk at once\n@param descriptor the descriptor of the column\n@param valueCount the value count in this column\n@param compressionCodecName the name of the compression codec used for compressing the pages\n@param dictionaryPage the dictionary page for this column chunk (might be null)\n@param bytes the encoded pages including page headers to be written as is\n@param uncompressedTotalPageSize total uncompressed size (without page headers)\n@param compressedTotalPageSize total compressed size (without page headers)\n@param totalStats accumulated statistics for the column chunk\n@param columnIndexBuilder the builder object for the column index\n@param offsetIndexBuilder the builder object for the offset index\n@param rlEncodings the RL encodings used in this column chunk\n@param dlEncodings the DL encodings used in this column chunk\n@param dataEncodings the data encodings used in this column chunk\n@throws IOException if there is an error while writing", "predict": "Write a column chunk."}
{"ID": 2000, "prompt": "A chat between a curious user and an artificial intelligence assistant. ### User: Generate the method-level comment for the following java Code. Code: public void endBlock() throws IOException { state = state.endBlock(); LOG.debug(\"{}: end block\", out.getPos()); currentBlock.setRowCount(currentRecordCount); blocks.add(currentBlock); columnIndexes.add(currentColumnIndexes); offsetIndexes.add(currentOffsetIndexes); currentColumnIndexes = null; currentOffsetIndexes = null; currentBlock = null; }. ### Assistant:", "ground_truth": "ends a block once all column chunks have been written\n@throws IOException if there is an error while writing", "predict": "Ends the current block."}
