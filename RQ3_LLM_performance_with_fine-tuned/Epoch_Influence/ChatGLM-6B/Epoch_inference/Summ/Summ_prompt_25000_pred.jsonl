{"ID": 1, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected final void fastPathOrderedEmit(U value, boolean delayError, Disposable disposable) { final Observer<? super V> observer = downstream; final SimplePlainQueue<U> q = queue; if (wip.get() == 0 && wip.compareAndSet(0, 1)) { if (q.isEmpty()) { accept(observer, value); if (leave(-1) == 0) { return; } } else { q.offer(value); } } else { q.offer(value); if (!enter()) { return; } } QueueDrainHelper.drainLoop(q, observer, delayError, disposable, this); } \n### Response:", "ground_truth": "Makes sure the fast-path emits in order.\n@param value the value to emit or queue up\n@param delayError if true, errors are delayed until the source has terminated\n@param disposable the resource to dispose if the drain terminates", "predict": "Emits the value to the downstream observer.\n\n@param value the value to emit\n@param delayError if true, the value will be emitted after a delay\n@param disposable the disposable object to be used when the emit is complete"}
{"ID": 2, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @SchedulerSupport(SchedulerSupport.NONE) public static <T> Observable<T> wrap(ObservableSource<T> source) { ObjectHelper.requireNonNull(source, \"source is null\"); if (source instanceof Observable) { return RxJavaPlugins.onAssembly((Observable<T>)source); } return RxJavaPlugins.onAssembly(new ObservableFromUnsafeSource<T>(source)); } \n### Response:", "ground_truth": "Wraps an ObservableSource into an Observable if not already an Observable.\n\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code wrap} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n\n@param <T> the value type\n@param source the source ObservableSource instance\n@return the new Observable instance or the same as the source\n@throws NullPointerException if source is null", "predict": "Wrap an ObservableSource\n\n@param source the source\n@return the wrapped Observable"}
{"ID": 3, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @SchedulerSupport(SchedulerSupport.NONE) public final Observable<T> sorted(Comparator<? super T> sortFunction) { ObjectHelper.requireNonNull(sortFunction, \"sortFunction is null\"); return toList().toObservable().map(Functions.listSorter(sortFunction)).flatMapIterable(Functions.<List<T>>identity()); } \n### Response:", "ground_truth": "Returns an Observable that emits the events emitted by source ObservableSource, in a\nsorted order based on a specified comparison function.\n\n<p>Note that calling {@code sorted} with long, non-terminating or infinite sources\nmight cause {@link OutOfMemoryError}\n\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code sorted} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n\n@param sortFunction\na function that compares two items emitted by the source ObservableSource and returns an Integer\nthat indicates their sort order\n@return an Observable that emits the items emitted by the source ObservableSource in sorted order", "predict": "Sorts the list of items by the provided sort function.\n\n@param sortFunction the sort function\n@return the sorted Observable"}
{"ID": 4, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> ConnectableObservable<T> observeOn(final ConnectableObservable<T> co, final Scheduler scheduler) { final Observable<T> observable = co.observeOn(scheduler); return RxJavaPlugins.onAssembly(new Replay<T>(co, observable)); } \n### Response:", "ground_truth": "Child Observers will observe the events of the ConnectableObservable on the\nspecified scheduler.\n@param <T> the value type\n@param co the connectable observable instance\n@param scheduler the target scheduler\n@return the new ConnectableObservable instance", "predict": "Observes the given observable on the given scheduler.\n\n@param co the observable to observe\n@param scheduler the scheduler to use\n@return the observable that will be observed"}
{"ID": 5, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @NonNull public static <T> UnicastProcessor<T> create(int capacityHint) { return new UnicastProcessor<T>(capacityHint); } \n### Response:", "ground_truth": "Creates an UnicastProcessor with the given internal buffer capacity hint.\n@param <T> the value type\n@param capacityHint the hint to size the internal unbounded buffer\n@return an UnicastProcessor instance", "predict": "Creates a UnicastProcessor with the given capacity hint.\n\n@param capacityHint the capacity hint\n@return the UnicastProcessor\n@throws IllegalArgumentException if capacity is negative"}
{"ID": 6, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @NonNull public static <T> UnicastProcessor<T> create(int capacityHint, Runnable onCancelled) { ObjectHelper.requireNonNull(onCancelled, \"onTerminate\"); return new UnicastProcessor<T>(capacityHint, onCancelled); } \n### Response:", "ground_truth": "Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for\nthe case when the single Subscriber cancels its subscription.\n\n<p>The callback, if not null, is called exactly once and\nnon-overlapped with any active replay.\n\n@param <T> the value type\n@param capacityHint the hint to size the internal unbounded buffer\n@param onCancelled the non null callback\n@return an UnicastProcessor instance", "predict": "Creates a UnicastProcessor with the given capacity hint and a given handler.\n\n@param capacityHint The capacity hint for the UnicastProcessor.\n@param onCancelled The handler to be called when the processor is terminated.\n@return The UnicastProcessor."}
{"ID": 7, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public static <T, R> boolean tryScalarXMapSubscribe(Publisher<T> source, Subscriber<? super R> subscriber, Function<? super T, ? extends Publisher<? extends R>> mapper) { if (source instanceof Callable) { T t; try { t = ((Callable<T>)source).call(); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptySubscription.error(ex, subscriber); return true; } if (t == null) { EmptySubscription.complete(subscriber); return true; } Publisher<? extends R> r; try { r = ObjectHelper.requireNonNull(mapper.apply(t), \"The mapper returned a null Publisher\"); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptySubscription.error(ex, subscriber); return true; } if (r instanceof Callable) { R u; try { u = ((Callable<R>)r).call(); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptySubscription.error(ex, subscriber); return true; } if (u == null) { EmptySubscription.complete(subscriber); return true; } subscriber.onSubscribe(new ScalarSubscription<R>(subscriber, u)); } else { r.subscribe(subscriber); } return true; } return false; } \n### Response:", "ground_truth": "Tries to subscribe to a possibly Callable source's mapped Publisher.\n@param <T> the input value type\n@param <R> the output value type\n@param source the source Publisher\n@param subscriber the subscriber\n@param mapper the function mapping a scalar value into a Publisher\n@return true if successful, false if the caller should continue with the regular path.", "predict": "Subscription for a Scalar x Map.\n\n@param <T> the type of the Scalar\n@param <R> the type of the subscription\n@param source the Scalar source\n@param subscriber the subscriber\n@param mapper the mapper\n@return true if successful"}
{"ID": 8, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T, U> Flowable<U> scalarXMap(final T value, final Function<? super T, ? extends Publisher<? extends U>> mapper) { return RxJavaPlugins.onAssembly(new ScalarXMapFlowable<T, U>(value, mapper)); } \n### Response:", "ground_truth": "Maps a scalar value into a Publisher and emits its values.\n\n@param <T> the scalar value type\n@param <U> the output value type\n@param value the scalar value to map\n@param mapper the function that gets the scalar value and should return\na Publisher that gets streamed\n@return the new Flowable instance", "predict": "Creates a flowable that maps scalar values toPublishers.\n\n@param value the scalar value\n@param mapper the mapper function\n@return the flowable"}
{"ID": 9, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void reset() { setErrorHandler(null); setScheduleHandler(null); setComputationSchedulerHandler(null); setInitComputationSchedulerHandler(null); setIoSchedulerHandler(null); setInitIoSchedulerHandler(null); setSingleSchedulerHandler(null); setInitSingleSchedulerHandler(null); setNewThreadSchedulerHandler(null); setInitNewThreadSchedulerHandler(null); setOnFlowableAssembly(null); setOnFlowableSubscribe(null); setOnObservableAssembly(null); setOnObservableSubscribe(null); setOnSingleAssembly(null); setOnSingleSubscribe(null); setOnCompletableAssembly(null); setOnCompletableSubscribe(null); setOnConnectableFlowableAssembly(null); setOnConnectableObservableAssembly(null); setOnMaybeAssembly(null); setOnMaybeSubscribe(null); setOnParallelAssembly(null); setFailOnNonBlockingScheduler(false); setOnBeforeBlocking(null); } \n### Response:", "ground_truth": "Removes all handlers and resets to default behavior.", "predict": "Resets the handler."}
{"ID": 10, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @NonNull @SchedulerSupport(SchedulerSupport.NONE) public static <T> Maybe<T> fromCompletable(CompletableSource completableSource) { ObjectHelper.requireNonNull(completableSource, \"completableSource is null\"); return RxJavaPlugins.onAssembly(new MaybeFromCompletable<T>(completableSource)); } \n### Response:", "ground_truth": "Wraps a CompletableSource into a Maybe.\n\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code fromCompletable} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n@param <T> the target type\n@param completableSource the CompletableSource to convert from\n@return the new Maybe instance\n@throws NullPointerException if completable is null", "predict": "Creates a Maybe from a CompletableSource.\n\n@param <T> the type of the Maybe\n@param completableSource the CompletableSource to create the Maybe from\n@return the Maybe"}
{"ID": 11, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @NonNull @SchedulerSupport(SchedulerSupport.NONE) public static <T> Maybe<T> fromSingle(SingleSource<T> singleSource) { ObjectHelper.requireNonNull(singleSource, \"singleSource is null\"); return RxJavaPlugins.onAssembly(new MaybeFromSingle<T>(singleSource)); } \n### Response:", "ground_truth": "Wraps a SingleSource into a Maybe.\n\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code fromSingle} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n@param <T> the target type\n@param singleSource the SingleSource to convert from\n@return the new Maybe instance\n@throws NullPointerException if single is null", "predict": "Creates a Maybe from a single source.\n\n@param singleSource the source\n@return the Maybe"}
{"ID": 12, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @SchedulerSupport(SchedulerSupport.NONE) public final Maybe<T> retry(long times, Predicate<? super Throwable> predicate) { return toFlowable().retry(times, predicate).singleElement(); } \n### Response:", "ground_truth": "Retries at most times or until the predicate returns false, whichever happens first.\n\n<dl>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code retry} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n@param times the number of times to resubscribe if the current Maybe fails\n@param predicate the predicate called with the failure Throwable and should return true to trigger a retry.\n@return the new Maybe instance", "predict": "Retry the operation.\n\n@param times the number of times to retry\n@param predicate the predicate to check for errors\n@return the Maybe result"}
{"ID": 13, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> T requireNonNull(T object, String message) { if (object == null) { throw new NullPointerException(message); } return object; } \n### Response:", "ground_truth": "Verifies if the object is not null and returns it or throws a NullPointerException\nwith the given message.\n@param <T> the value type\n@param object the object to verify\n@param message the message to use with the NullPointerException\n@return the object itself\n@throws NullPointerException if object is null", "predict": "Throws a NullPointerException if the object is null."}
{"ID": 14, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public static <T> Function<T, T> identity() { return (Function<T, T>)IDENTITY; } \n### Response:", "ground_truth": "Returns an identity function that simply returns its argument.\n@param <T> the input and output value type\n@return the identity function", "predict": "Returns the identity function."}
{"ID": 15, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> Callable<T> justCallable(T value) { return new JustValue<Object, T>(value); } \n### Response:", "ground_truth": "Returns a Callable that returns the given value.\n@param <T> the value type\n@param value the value to return\n@return the new Callable instance", "predict": "Returns a value that can be invoked by the caller."}
{"ID": 16, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T, U> Function<T, U> justFunction(U value) { return new JustValue<T, U>(value); } \n### Response:", "ground_truth": "Returns a Function that ignores its parameter and returns the given value.\n@param <T> the function's input type\n@param <U> the value and return type of the function\n@param value the value to return\n@return the new Function instance", "predict": "Creates a function that takes a value and returns the value.\n\n@param value the value\n@return the function"}
{"ID": 17, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T, U> Function<T, U> castFunction(Class<U> target) { return new CastToClass<T, U>(target); } \n### Response:", "ground_truth": "Returns a function that cast the incoming values via a Class object.\n@param <T> the input value type\n@param <U> the output and target type\n@param target the target class\n@return the new Function instance", "predict": "Creates a function that takes a Class object and returns a Class object casted to the given type.\n\n@param target the Class to cast to\n@return the cast function"}
{"ID": 18, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @NonNull public static <T> UnicastSubject<T> create() { return new UnicastSubject<T>(bufferSize(), true); } \n### Response:", "ground_truth": "Creates an UnicastSubject with an internal buffer capacity hint 16.\n@param <T> the value type\n@return an UnicastSubject instance", "predict": "Creates a subject that is unicast to the specified address.\n\n@return the subject"}
{"ID": 19, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @NonNull public static <T> UnicastSubject<T> create(int capacityHint) { return new UnicastSubject<T>(capacityHint, true); } \n### Response:", "ground_truth": "Creates an UnicastSubject with the given internal buffer capacity hint.\n@param <T> the value type\n@param capacityHint the hint to size the internal unbounded buffer\n@return an UnicastSubject instance", "predict": "Creates a subject with a capacity hint.\n\n@param capacityHint the capacity hint\n@return the subject"}
{"ID": 20, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @NonNull public static <T> UnicastSubject<T> create(int capacityHint, Runnable onTerminate) { return new UnicastSubject<T>(capacityHint, onTerminate, true); } \n### Response:", "ground_truth": "Creates an UnicastSubject with the given internal buffer capacity hint and a callback for\nthe case when the single Subscriber cancels its subscription.\n\n<p>The callback, if not null, is called exactly once and\nnon-overlapped with any active replay.\n\n@param <T> the value type\n@param capacityHint the hint to size the internal unbounded buffer\n@param onTerminate the callback to run when the Subject is terminated or cancelled, null not allowed\n@return an UnicastSubject instance", "predict": "Creates a subject that will send messages to all connected clients.\n\n@param capacityHint the capacity hint for the subject\n@param onTerminate the handler to be invoked when the subject is terminated\n@return the subject"}
{"ID": 21, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @NonNull public static <T> UnicastSubject<T> create(boolean delayError) { return new UnicastSubject<T>(bufferSize(), delayError); } \n### Response:", "ground_truth": "Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag.\n\n<p>The callback, if not null, is called exactly once and\nnon-overlapped with any active replay.\n<p>History: 2.0.8 - experimental\n@param <T> the value type\n@param delayError deliver pending onNext events before onError\n@return an UnicastSubject instance\n@since 2.2", "predict": "Creates a subject that sends a message to all connected clients.\n\n@param delayError whether to send the message with a delay error.\n@return the subject."}
{"ID": 22, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Throwable blockingGetError() { if (getCount() != 0) { try { BlockingHelper.verifyNonBlocking(); await(); } catch (InterruptedException ex) { dispose(); return ex; } } return error; } \n### Response:", "ground_truth": "Block until the latch is counted down and return the error received or null if no\nerror happened.\n@return the error received or null", "predict": "Get the error that occurred while waiting for the task to complete.\n\n@return the error that occurred while waiting for the task to complete."}
{"ID": 23, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Throwable blockingGetError(long timeout, TimeUnit unit) { if (getCount() != 0) { try { BlockingHelper.verifyNonBlocking(); if (!await(timeout, unit)) { dispose(); throw ExceptionHelper.wrapOrThrow(new TimeoutException(timeoutMessage(timeout, unit))); } } catch (InterruptedException ex) { dispose(); throw ExceptionHelper.wrapOrThrow(ex); } } return error; } \n### Response:", "ground_truth": "Block until the latch is counted down and return the error received or\nwhen the wait is interrupted or times out, null otherwise.\n@param timeout the timeout value\n@param unit the time unit\n@return the error received or null", "predict": "Blocks until the error is found and returns it.\n\n@param timeout the timeout in milliseconds\n@param unit the unit of the timeout\n@return the error"}
{"ID": 24, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean blockingAwait(long timeout, TimeUnit unit) { if (getCount() != 0) { try { BlockingHelper.verifyNonBlocking(); if (!await(timeout, unit)) { dispose(); return false; } } catch (InterruptedException ex) { dispose(); throw ExceptionHelper.wrapOrThrow(ex); } } Throwable ex = error; if (ex != null) { throw ExceptionHelper.wrapOrThrow(ex); } return true; } \n### Response:", "ground_truth": "Block until the observer terminates and return true; return false if\nthe wait times out.\n@param timeout the timeout value\n@param unit the time unit\n@return true if the observer terminated in time, false otherwise", "predict": "Waits for the given timeout and throws an exception if the timeout is not reached.\n\n@param timeout the timeout to wait for\n@param unit the time unit of the timeout\n@return true if the timeout was reached, false otherwise"}
{"ID": 25, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T, U> void drainMaxLoop(SimplePlainQueue<T> q, Subscriber<? super U> a, boolean delayError, Disposable dispose, QueueDrain<T, U> qd) { int missed = 1; for (;;) { for (;;) { boolean d = qd.done(); T v = q.poll(); boolean empty = v == null; if (checkTerminated(d, empty, a, delayError, q, qd)) { if (dispose != null) { dispose.dispose(); } return; } if (empty) { break; } long r = qd.requested(); if (r != 0L) { if (qd.accept(a, v)) { if (r != Long.MAX_VALUE) { qd.produced(1); } } } else { q.clear(); if (dispose != null) { dispose.dispose(); } a.onError(new MissingBackpressureException(\"Could not emit value due to lack of requests.\")); return; } } missed = qd.leave(-missed); if (missed == 0) { break; } } } \n### Response:", "ground_truth": "Drain the queue but give up with an error if there aren't enough requests.\n@param <T> the queue value type\n@param <U> the emission value type\n@param q the queue\n@param a the subscriber\n@param delayError true if errors should be delayed after all normal items\n@param dispose the disposable to call when termination happens and cleanup is necessary\n@param qd the QueueDrain instance that gives status information to the drain logic", "predict": "Drains the queue and returns the first value that was produced.\n\n@param q the queue to drain\n@param a the subscriber to call on the queue\n@param delayError if true, the queue will be drained after a delay\n@param dispose the Disposable to dispose of the queue\n@param qd the queue drainer"}
{"ID": 26, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void request(Subscription s, int prefetch) { s.request(prefetch < 0 ? Long.MAX_VALUE : prefetch); } \n### Response:", "ground_truth": "Requests Long.MAX_VALUE if prefetch is negative or the exact\namount if prefetch is positive.\n@param s the Subscription to request from\n@param prefetch the prefetch value", "predict": "Request a prefetch of the specified number of bytes.\n\n@param s the subscription to request the prefetch from\n@param prefetch the number of bytes to request"}
{"ID": 27, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> void postComplete(Subscriber<? super T> actual, Queue<T> queue, AtomicLong state, BooleanSupplier isCancelled) { if (queue.isEmpty()) { actual.onComplete(); return; } if (postCompleteDrain(state.get(), actual, queue, state, isCancelled)) { return; } for (; ; ) { long r = state.get(); if ((r & COMPLETED_MASK) != 0L) { return; } long u = r | COMPLETED_MASK; // (active, r) -> (complete, r) transition if (state.compareAndSet(r, u)) { // if the requested amount was non-zero, drain the queue if (r != 0L) { postCompleteDrain(u, actual, queue, state, isCancelled); } return; } } } \n### Response:", "ground_truth": "Signals the completion of the main sequence and switches to post-completion replay mode.\n\n<p>\nDon't modify the queue after calling this method!\n\n<p>\nPost-completion backpressure handles the case when a source produces values based on\nrequests when it is active but more values are available even after its completion.\nIn this case, the onComplete() can't just emit the contents of the queue but has to\ncoordinate with the requested amounts. This requires two distinct modes: active and\ncompleted. In active mode, requests flow through and the queue is not accessed but\nin completed mode, requests no-longer reach the upstream but help in draining the queue.\n<p>\nThe algorithm utilizes the most significant bit (bit 63) of a long value (AtomicLong) since\nrequest amount only goes up to Long.MAX_VALUE (bits 0-62) and negative values aren't\nallowed.\n\n@param <T> the value type emitted\n@param actual the target Subscriber to send events to\n@param queue the queue to drain if in the post-complete state\n@param state holds the request amount and the post-completed flag\n@param isCancelled a supplier that returns true if the drain has been cancelled", "predict": "Recursively posts a completed message to the queue.\n\n@param actual the subscriber that completed the message\n@param queue the queue to drain the message from\n@param state the current state of the queue\n@param isCancelled the flag indicating whether the message was cancelled"}
{"ID": 28, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected final void complete(R n) { long p = produced; if (p != 0) { BackpressureHelper.produced(this, p); } for (;;) { long r = get(); if ((r & COMPLETE_MASK) != 0) { onDrop(n); return; } if ((r & REQUEST_MASK) != 0) { lazySet(COMPLETE_MASK + 1); downstream.onNext(n); downstream.onComplete(); return; } value = n; if (compareAndSet(0, COMPLETE_MASK)) { return; } value = null; } } \n### Response:", "ground_truth": "Signals the given value and an onComplete if the downstream is ready to receive the final value.\n@param n the value to emit", "predict": "Callback to notify downstream that the value is complete."}
{"ID": 29, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") @Nullable public T getValue() { Object o = value; if (o != null && !NotificationLite.isError(o)) { return (T)value; } return null; } \n### Response:", "ground_truth": "Returns the contained value if this notification is an onNext\nsignal, null otherwise.\n@return the value contained or null\n@see #isOnNext()", "predict": "Returns the value of the notification.\n\n@return the value of the notification"}
{"ID": 30, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Nullable public Throwable getError() { Object o = value; if (NotificationLite.isError(o)) { return NotificationLite.getError(o); } return null; } \n### Response:", "ground_truth": "Returns the container Throwable error if this notification is an onError\nsignal, null otherwise.\n@return the Throwable error contained or null\n@see #isOnError()", "predict": "Get the error object.\n\n@return the error object or null if not found"}
{"ID": 31, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean validate(Disposable upstream, Disposable next, Class<?> observer) { ObjectHelper.requireNonNull(next, \"next is null\"); if (upstream != null) { next.dispose(); if (upstream != DisposableHelper.DISPOSED) { reportDoubleSubscription(observer); } return false; } return true; } \n### Response:", "ground_truth": "Ensures that the upstream Disposable is null and returns true, otherwise\ndisposes the next Disposable and if the upstream is not the shared\ndisposed instance, reports a ProtocolViolationException due to\nmultiple subscribe attempts.\n@param upstream the upstream current value\n@param next the Disposable to check for nullness and dispose if necessary\n@param observer the class of the consumer to have a personalized\nerror message if the upstream already contains a non-cancelled Disposable.\n@return true if successful, false if the upstream was non null", "predict": "Validates the given upstream object and disposes it if it is not valid.\n\n@param upstream The upstream object to validate.\n@param next The object to validate next.\n@param observer The observer to notify.\n@return True if the object is valid, false otherwise."}
{"ID": 32, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean setOnce(AtomicReference<Disposable> upstream, Disposable next, Class<?> observer) { ObjectHelper.requireNonNull(next, \"next is null\"); if (!upstream.compareAndSet(null, next)) { next.dispose(); if (upstream.get() != DisposableHelper.DISPOSED) { reportDoubleSubscription(observer); } return false; } return true; } \n### Response:", "ground_truth": "Atomically updates the target upstream AtomicReference from null to the non-null\nnext Disposable, otherwise disposes next and reports a ProtocolViolationException\nif the AtomicReference doesn't contain the shared disposed indicator.\n@param upstream the target AtomicReference to update\n@param next the Disposable to set on it atomically\n@param observer the class of the consumer to have a personalized\nerror message if the upstream already contains a non-cancelled Disposable.\n@return true if successful, false if the content of the AtomicReference was non null", "predict": "Sets the upstream reference to the value of the given Disposable. If the value is already set,\nthe upstream reference is disposed.\n\n@param upstream the upstream reference\n@param next the value to set\n@param observer the observer to notify\n@return true if the upstream reference was set, false otherwise"}
{"ID": 33, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean validate(Subscription upstream, Subscription next, Class<?> subscriber) { ObjectHelper.requireNonNull(next, \"next is null\"); if (upstream != null) { next.cancel(); if (upstream != SubscriptionHelper.CANCELLED) { reportDoubleSubscription(subscriber); } return false; } return true; } \n### Response:", "ground_truth": "Ensures that the upstream Subscription is null and returns true, otherwise\ncancels the next Subscription and if the upstream is not the shared\ncancelled instance, reports a ProtocolViolationException due to\nmultiple subscribe attempts.\n@param upstream the upstream current value\n@param next the Subscription to check for nullness and cancel if necessary\n@param subscriber the class of the consumer to have a personalized\nerror message if the upstream already contains a non-cancelled Subscription.\n@return true if successful, false if the upstream was non null", "predict": "Validates the given subscription and cancels it if it is not valid.\n\n@param upstream The subscription to validate.\n@param next The next subscription to cancel.\n@param subscriber The subscriber to cancel.\n@return True if the subscription is valid, otherwise false."}
{"ID": 34, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean setOnce(AtomicReference<Subscription> upstream, Subscription next, Class<?> subscriber) { ObjectHelper.requireNonNull(next, \"next is null\"); if (!upstream.compareAndSet(null, next)) { next.cancel(); if (upstream.get() != SubscriptionHelper.CANCELLED) { reportDoubleSubscription(subscriber); } return false; } return true; } \n### Response:", "ground_truth": "Atomically updates the target upstream AtomicReference from null to the non-null\nnext Subscription, otherwise cancels next and reports a ProtocolViolationException\nif the AtomicReference doesn't contain the shared cancelled indicator.\n@param upstream the target AtomicReference to update\n@param next the Subscription to set on it atomically\n@param subscriber the class of the consumer to have a personalized\nerror message if the upstream already contains a non-cancelled Subscription.\n@return true if successful, false if the content of the AtomicReference was non null", "predict": "Cancels the given subscription and reports double subscription.\n\n@param upstream The upstream subscription.\n@param next The subscription to cancel.\n@param subscriber The subscriber.\n@return True if the subscription was cancelled, false otherwise."}
{"ID": 35, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long addCap(long a, long b) { long u = a + b; if (u < 0L) { return Long.MAX_VALUE; } return u; } \n### Response:", "ground_truth": "Adds two long values and caps the sum at Long.MAX_VALUE.\n@param a the first value\n@param b the second value\n@return the sum capped at Long.MAX_VALUE", "predict": "Adds two longs and returns the result. If the result is negative,\nit is returned as Long.MAX_VALUE.\n\n@param a first long\n@param b second long\n@return the result of the addition"}
{"ID": 36, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long multiplyCap(long a, long b) { long u = a * b; if (((a | b) >>> 31) != 0) { if (u / a != b) { return Long.MAX_VALUE; } } return u; } \n### Response:", "ground_truth": "Multiplies two long values and caps the product at Long.MAX_VALUE.\n@param a the first value\n@param b the second value\n@return the product capped at Long.MAX_VALUE", "predict": "Multiply two longs and return the result as a long.\n\n@param a first long\n@param b second long\n@return long"}
{"ID": 37, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long add(AtomicLong requested, long n) { for (;;) { long r = requested.get(); if (r == Long.MAX_VALUE) { return Long.MAX_VALUE; } long u = addCap(r, n); if (requested.compareAndSet(r, u)) { return r; } } } \n### Response:", "ground_truth": "Atomically adds the positive value n to the requested value in the AtomicLong and\ncaps the result at Long.MAX_VALUE and returns the previous value.\n@param requested the AtomicLong holding the current requested value\n@param n the value to add, must be positive (not verified)\n@return the original value before the add", "predict": "Adds n to the atomic long.\n\n@param requested the requested value\n@param n the value to add\n@return the new value"}
{"ID": 38, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static NullPointerException toNpe(Throwable ex) { NullPointerException npe = new NullPointerException(\"Actually not, but can't pass out an exception otherwise...\"); npe.initCause(ex); return npe; } \n### Response:", "ground_truth": "Creates a NullPointerException instance and sets the given Throwable as its initial cause.\n@param ex the Throwable instance to use as cause, not null (not verified)\n@return the created NullPointerException", "predict": "Converts a Throwable to a NullPointerException."}
{"ID": 39, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void add(Object o) { // if no value yet, create the first array if (size == 0) { head = new Object[capacityHint + 1]; tail = head; head[0] = o; indexInTail = 1; size = 1; } else // if the tail is full, create a new tail and link if (indexInTail == capacityHint) { Object[] t = new Object[capacityHint + 1]; t[0] = o; tail[capacityHint] = t; tail = t; indexInTail = 1; size++; } else { tail[indexInTail] = o; indexInTail++; size++; } } \n### Response:", "ground_truth": "Adds a new element to this list.\n@param o the object to add, nulls are accepted", "predict": "Adds an object to the array.\n\n@param o the object to add"}
{"ID": 40, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void shutdown() { ScheduledExecutorService exec = PURGE_THREAD.getAndSet(null); if (exec != null) { exec.shutdownNow(); } POOLS.clear(); } \n### Response:", "ground_truth": "Stops the purge thread.", "predict": "Shutdown the pool."}
{"ID": 41, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ScheduledExecutorService create(ThreadFactory factory) { final ScheduledExecutorService exec = Executors.newScheduledThreadPool(1, factory); tryPutIntoPool(PURGE_ENABLED, exec); return exec; } \n### Response:", "ground_truth": "Creates a ScheduledExecutorService with the given factory.\n@param factory the thread factory\n@return the ScheduledExecutorService", "predict": "Creates a new thread pool for scheduling tasks.\n\n@param factory the factory to create the thread pool\n@return the thread pool"}
{"ID": 42, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public final void setSubscription(Subscription s) { if (cancelled) { s.cancel(); return; } ObjectHelper.requireNonNull(s, \"s is null\"); if (get() == 0 && compareAndSet(0, 1)) { Subscription a = actual; if (a != null && cancelOnReplace) { a.cancel(); } actual = s; long r = requested; if (decrementAndGet() != 0) { drainLoop(); } if (r != 0L) { s.request(r); } return; } Subscription a = missedSubscription.getAndSet(s); if (a != null && cancelOnReplace) { a.cancel(); } drain(); } \n### Response:", "ground_truth": "Atomically sets a new subscription.\n@param s the subscription to set, not null (verified)", "predict": "Sets the subscription to be used.\n\n@param s The new subscription."}
{"ID": 43, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: void emitLoop() { for (;;) { AppendOnlyLinkedArrayList<Object> q; synchronized (this) { q = queue; if (q == null) { emitting = false; return; } queue = null; } q.forEachWhile(this); } } \n### Response:", "ground_truth": "Loops until all notifications in the queue has been processed.", "predict": "Loops through the queue of objects and emits each one."}
{"ID": 44, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static RuntimeException wrapOrThrow(Throwable error) { if (error instanceof Error) { throw (Error)error; } if (error instanceof RuntimeException) { return (RuntimeException)error; } return new RuntimeException(error); } \n### Response:", "ground_truth": "If the provided Throwable is an Error this method\nthrows it, otherwise returns a RuntimeException wrapping the error\nif that error is a checked exception.\n@param error the error to wrap or throw\n@return the (wrapped) error", "predict": "Wrap or throw a RuntimeException.\n\n@param error the error to wrap or throw\n@return the wrapped or throw error"}
{"ID": 45, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static List<Throwable> flatten(Throwable t) { List<Throwable> list = new ArrayList<Throwable>(); ArrayDeque<Throwable> deque = new ArrayDeque<Throwable>(); deque.offer(t); while (!deque.isEmpty()) { Throwable e = deque.removeFirst(); if (e instanceof CompositeException) { CompositeException ce = (CompositeException) e; List<Throwable> exceptions = ce.getExceptions(); for (int i = exceptions.size() - 1; i >= 0; i--) { deque.offerFirst(exceptions.get(i)); } } else { list.add(e); } } return list; } \n### Response:", "ground_truth": "Returns a flattened list of Throwables from tree-like CompositeException chain.\n@param t the starting throwable\n@return the list of Throwables flattened in a depth-first manner", "predict": "Flattens a CompositeException into a list of CompositeExceptions.\n\n@param t the CompositeException to flatten\n@return a list of CompositeExceptions"}
{"ID": 46, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public static <E extends Throwable> Exception throwIfThrowable(Throwable e) throws E { if (e instanceof Exception) { return (Exception)e; } throw (E)e; } \n### Response:", "ground_truth": "Workaround for Java 6 not supporting throwing a final Throwable from a catch block.\n@param <E> the generic exception type\n@param e the Throwable error to return or throw\n@return the Throwable e if it is a subclass of Exception\n@throws E the generic exception thrown", "predict": "Throw the given exception if it is not an exception.\n\n@param e the exception to check\n@return the exception if it is not an exception\n@throws E if the given exception is not an exception"}
{"ID": 47, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void clear() { if (disposed) { return; } OpenHashSet<Disposable> set; synchronized (this) { if (disposed) { return; } set = resources; resources = null; } dispose(set); } \n### Response:", "ground_truth": "Atomically clears the container, then disposes all the previously contained Disposables.", "predict": "Removes all resources from the set."}
{"ID": 48, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public int size() { if (disposed) { return 0; } synchronized (this) { if (disposed) { return 0; } OpenHashSet<Disposable> set = resources; return set != null ? set.size() : 0; } } \n### Response:", "ground_truth": "Returns the number of currently held Disposables.\n@return the number of currently held Disposables", "predict": "Returns the number of resources that are currently available.\n\n@return the number of resources that are currently available."}
{"ID": 49, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public static <T, R> boolean tryScalarXMapSubscribe(ObservableSource<T> source, Observer<? super R> observer, Function<? super T, ? extends ObservableSource<? extends R>> mapper) { if (source instanceof Callable) { T t; try { t = ((Callable<T>)source).call(); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptyDisposable.error(ex, observer); return true; } if (t == null) { EmptyDisposable.complete(observer); return true; } ObservableSource<? extends R> r; try { r = ObjectHelper.requireNonNull(mapper.apply(t), \"The mapper returned a null ObservableSource\"); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptyDisposable.error(ex, observer); return true; } if (r instanceof Callable) { R u; try { u = ((Callable<R>)r).call(); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptyDisposable.error(ex, observer); return true; } if (u == null) { EmptyDisposable.complete(observer); return true; } ScalarDisposable<R> sd = new ScalarDisposable<R>(observer, u); observer.onSubscribe(sd); sd.run(); } else { r.subscribe(observer); } return true; } return false; } \n### Response:", "ground_truth": "Tries to subscribe to a possibly Callable source's mapped ObservableSource.\n@param <T> the input value type\n@param <R> the output value type\n@param source the source ObservableSource\n@param observer the subscriber\n@param mapper the function mapping a scalar value into an ObservableSource\n@return true if successful, false if the caller should continue with the regular path.", "predict": "Helper method to try to map an ObservableSource to an ObservableSource using a lambda function.\n\n@param source the ObservableSource to map\n@param observer the Observer to subscribe to the result\n@param mapper the lambda function to map the ObservableSource to the ObservableSource\n@return true if the ObservableSource was successfully mapped, false otherwise"}
{"ID": 50, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T, U> Observable<U> scalarXMap(T value, Function<? super T, ? extends ObservableSource<? extends U>> mapper) { return RxJavaPlugins.onAssembly(new ScalarXMapObservable<T, U>(value, mapper)); } \n### Response:", "ground_truth": "Maps a scalar value into an Observable and emits its values.\n\n@param <T> the scalar value type\n@param <U> the output value type\n@param value the scalar value to map\n@param mapper the function that gets the scalar value and should return\nan ObservableSource that gets streamed\n@return the new Observable instance", "predict": "Creates an Observable that maps scalar values to values.\n\n@param value scalar value\n@param mapper function that maps scalar value to Observable value\n@return Observable that maps scalar value to Observable value"}
{"ID": 51, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <U> boolean accept(Subscriber<? super U> subscriber) { Object[] a = head; final int c = capacity; while (a != null) { for (int i = 0; i < c; i++) { Object o = a[i]; if (o == null) { break; } if (NotificationLite.acceptFull(o, subscriber)) { return true; } } a = (Object[])a[c]; } return false; } \n### Response:", "ground_truth": "Interprets the contents as NotificationLite objects and calls\nthe appropriate Subscriber method.\n\n@param <U> the target type\n@param subscriber the subscriber to emit the events to\n@return true if a terminal event has been reached", "predict": "Receives notifications from the specified subscriber.\n\n@param subscriber the subscriber to receive notifications from\n@return true if the notification was received, false otherwise"}
{"ID": 52, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <U> boolean accept(Observer<? super U> observer) { Object[] a = head; final int c = capacity; while (a != null) { for (int i = 0; i < c; i++) { Object o = a[i]; if (o == null) { break; } if (NotificationLite.acceptFull(o, observer)) { return true; } } a = (Object[])a[c]; } return false; } \n### Response:", "ground_truth": "Interprets the contents as NotificationLite objects and calls\nthe appropriate Observer method.\n\n@param <U> the target type\n@param observer the observer to emit the events to\n@return true if a terminal event has been reached", "predict": "Receive notifications from the specified observer.\n\n@param observer the observer to receive notifications from.\n@return true if the observer was accepted, false otherwise."}
{"ID": 53, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void start() { if (SubscriptionHelper.setOnce(upstream, EmptySubscription.INSTANCE)) { queue = new SpscArrayQueue<T>(bufferSize); } } \n### Response:", "ground_truth": "Initializes this Processor by setting an upstream Subscription that\nignores request amounts, uses a fixed buffer\nand allows using the onXXX and offer methods\nafterwards.", "predict": "Starts the Subscription."}
{"ID": 54, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void startUnbounded() { if (SubscriptionHelper.setOnce(upstream, EmptySubscription.INSTANCE)) { queue = new SpscLinkedArrayQueue<T>(bufferSize); } } \n### Response:", "ground_truth": "Initializes this Processor by setting an upstream Subscription that\nignores request amounts, uses an unbounded buffer\nand allows using the onXXX and offer methods\nafterwards.", "predict": "Starts the un bounded queue."}
{"ID": 55, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean offer(T t) { if (once.get()) { return false; } ObjectHelper.requireNonNull(t, \"offer called with null. Null values are generally not allowed in 2.x operators and sources.\"); if (fusionMode == QueueSubscription.NONE) { if (queue.offer(t)) { drain(); return true; } } return false; } \n### Response:", "ground_truth": "Tries to offer an item into the internal queue and returns false\nif the queue is full.\n@param t the item to offer, not null\n@return true if successful, false if the queue is full", "predict": "Adds the given item to the queue.\n\n@param t the item to add\n@return true if the item was successfully added, false otherwise"}
{"ID": 56, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Nullable public Disposable get() { Disposable d = resource.get(); if (d == DisposableHelper.DISPOSED) { return Disposables.disposed(); } return d; } \n### Response:", "ground_truth": "Returns the currently contained Disposable or null if this container is empty.\n@return the current Disposable, may be null", "predict": "Returns the resource, or null if it is disposed."}
{"ID": 57, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public final void complete(T value) { int state = get(); if ((state & (FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED)) != 0) { return; } Observer<? super T> a = downstream; if (state == FUSED_EMPTY) { this.value = value; lazySet(FUSED_READY); a.onNext(null); } else { lazySet(TERMINATED); a.onNext(value); } if (get() != DISPOSED) { a.onComplete(); } } \n### Response:", "ground_truth": "Complete the target with a single value or indicate there is a value available in\nfusion mode.\n@param value the value to signal, not null (not verified)", "predict": "Callback to notify the downstream observer that the value has been consumed.\n\n@param value the value that has been consumed"}
{"ID": 58, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public final void error(Throwable t) { int state = get(); if ((state & (FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED)) != 0) { RxJavaPlugins.onError(t); return; } lazySet(TERMINATED); downstream.onError(t); } \n### Response:", "ground_truth": "Complete the target with an error signal.\n@param t the Throwable to signal, not null (not verified)", "predict": "Notify downstream that an error occurred."}
{"ID": 59, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public final void complete() { int state = get(); if ((state & (FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED)) != 0) { return; } lazySet(TERMINATED); downstream.onComplete(); } \n### Response:", "ground_truth": "Complete the target without any value.", "predict": "Indicate that the downstream is complete."}
{"ID": 60, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @BackpressureSupport(BackpressureKind.FULL) @SchedulerSupport(SchedulerSupport.NONE) public final <R> Flowable<R> concatMapDelayError(Function<? super T, ? extends Publisher<? extends R>> mapper) { return concatMapDelayError(mapper, 2, true); } \n### Response:", "ground_truth": "Maps each of the items into a Publisher, subscribes to them one after the other,\none at a time and emits their values in order\nwhile delaying any error from either this or any of the inner Publishers\ntill all of them terminate.\n\n<dl>\n<dt><b>Backpressure:</b></dt>\n<dd>The operator honors backpressure from downstream. Both this and the inner {@code Publisher}s are\nexpected to honor backpressure as well. If the source {@code Publisher} violates the rule, the operator will\nsignal a {@code MissingBackpressureException}. If any of the inner {@code Publisher}s doesn't honor\nbackpressure, that <em>may</em> throw an {@code IllegalStateException} when that\n{@code Publisher} completes.</dd>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code concatMapDelayError} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n\n@param <R> the result value type\n@param mapper the function that maps the items of this Publisher into the inner Publishers.\n@return the new Publisher instance with the concatenation behavior", "predict": "Concat maps delay error flowable.\n\n@param <R> the type parameter\n@param mapper the mapper\n@return the flowable"}
{"ID": 61, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @BackpressureSupport(BackpressureKind.FULL) @SchedulerSupport(SchedulerSupport.NONE) public final <U> Flowable<U> concatMapIterable(Function<? super T, ? extends Iterable<? extends U>> mapper) { return concatMapIterable(mapper, 2); } \n### Response:", "ground_truth": "Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an\nIterable corresponding to that item that is generated by a selector.\n\n<dl>\n<dt><b>Backpressure:</b></dt>\n<dd>The operator honors backpressure from downstream. The source {@code Publisher}s is\nexpected to honor backpressure as well. If the source {@code Publisher} violates the rule, the operator will\nsignal a {@code MissingBackpressureException}.</dd>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code concatMapIterable} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n\n@param <U>\nthe type of item emitted by the resulting Publisher\n@param mapper\na function that returns an Iterable sequence of values for when given an item emitted by the\nsource Publisher\n@return a Flowable that emits the results of concatenating the items emitted by the source Publisher with\nthe values in the Iterables corresponding to those items, as generated by {@code collectionSelector}\n@see <a href=\"http://reactivex.io/documentation/operators/flatmap.html\">ReactiveX operators documentation: FlatMap</a>", "predict": "Concatenates two iterables using the provided mapper function.\n\n@param mapper the mapper function\n@return the flowable"}
{"ID": 62, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @NonNull @BackpressureSupport(BackpressureKind.FULL) @SchedulerSupport(SchedulerSupport.NONE) public final Flowable<T> sorted(Comparator<? super T> sortFunction) { ObjectHelper.requireNonNull(sortFunction, \"sortFunction\"); return toList().toFlowable().map(Functions.listSorter(sortFunction)).flatMapIterable(Functions.<List<T>>identity()); } \n### Response:", "ground_truth": "Returns a Flowable that emits the events emitted by source Publisher, in a\nsorted order based on a specified comparison function.\n\n<p>Note that calling {@code sorted} with long, non-terminating or infinite sources\nmight cause {@link OutOfMemoryError}\n\n<dl>\n<dt><b>Backpressure:</b></dt>\n<dd>The operator honors backpressure from downstream and consumes the source {@code Publisher} in an\nunbounded manner (i.e., without applying backpressure to it).</dd>\n<dt><b>Scheduler:</b></dt>\n<dd>{@code sorted} does not operate by default on a particular {@link Scheduler}.</dd>\n</dl>\n\n@param sortFunction\na function that compares two items emitted by the source Publisher and returns an Integer\nthat indicates their sort order\n@return a Flowable that emits the items emitted by the source Publisher in sorted order", "predict": "Sorts the list of items by the provided sort function.\n\n@param sortFunction the sort function\n@return the flowable"}
{"ID": 63, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public PerfAsyncConsumer await(int count) { if (count <= 1000) { while (getCount() != 0) { } } else { try { await(); } catch (InterruptedException ex) { throw new RuntimeException(ex); } } return this; } \n### Response:", "ground_truth": "Wait for the terminal signal.\n@param count if less than 1001, a spin-wait is used\n@return this", "predict": "Asynchronously wait for the specified number of milliseconds.\n\n@param count the number of milliseconds to wait\n@return the current PerfAsyncConsumer instance"}
{"ID": 64, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected final void request(long n) { Subscription s = this.upstream; if (s != null) { s.request(n); } } \n### Response:", "ground_truth": "Requests from the upstream Subscription.\n@param n the request amount, positive", "predict": "Requests a new operation.\n\n@param n the operation to request."}
{"ID": 65, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: boolean add(PublishDisposable<T> ps) { for (;;) { PublishDisposable<T>[] a = subscribers.get(); if (a == TERMINATED) { return false; } int n = a.length; @SuppressWarnings(\"unchecked\") PublishDisposable<T>[] b = new PublishDisposable[n + 1]; System.arraycopy(a, 0, b, 0, n); b[n] = ps; if (subscribers.compareAndSet(a, b)) { return true; } } } \n### Response:", "ground_truth": "Tries to add the given subscriber to the subscribers array atomically\nor returns false if the subject has terminated.\n@param ps the subscriber to add\n@return true if successful, false if the subject has terminated", "predict": "Add a subscriber to the list of subscribers.\n\n@param ps The subscriber to add.\n@return True if the subscriber was added successfully."}
{"ID": 66, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") void remove(PublishDisposable<T> ps) { for (;;) { PublishDisposable<T>[] a = subscribers.get(); if (a == TERMINATED || a == EMPTY) { return; } int n = a.length; int j = -1; for (int i = 0; i < n; i++) { if (a[i] == ps) { j = i; break; } } if (j < 0) { return; } PublishDisposable<T>[] b; if (n == 1) { b = EMPTY; } else { b = new PublishDisposable[n - 1]; System.arraycopy(a, 0, b, 0, j); System.arraycopy(a, j + 1, b, j, n - j - 1); } if (subscribers.compareAndSet(a, b)) { return; } } } \n### Response:", "ground_truth": "Atomically removes the given subscriber if it is subscribed to the subject.\n@param ps the subject to remove", "predict": "Removes a subscriber from the list of subscribers.\n\n@param ps the subscriber to remove"}
{"ID": 67, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> ConnectableFlowable<T> observeOn(final ConnectableFlowable<T> cf, final Scheduler scheduler) { final Flowable<T> flowable = cf.observeOn(scheduler); return RxJavaPlugins.onAssembly(new ConnectableFlowableReplay<T>(cf, flowable)); } \n### Response:", "ground_truth": "Child Subscribers will observe the events of the ConnectableObservable on the\nspecified scheduler.\n@param <T> the value type\n@param cf the ConnectableFlowable to wrap\n@param scheduler the target scheduler\n@return the new ConnectableObservable instance", "predict": "Observes the given ReactiveFlowable on the given scheduler.\n\n@param cf the ReactiveFlowable to observe\n@param scheduler the scheduler to use\n@return the observed flowable"}
{"ID": 68, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: static <ResponseT, ReturnT> HttpServiceMethod<ResponseT, ReturnT> parseAnnotations( Retrofit retrofit, Method method, RequestFactory requestFactory) { boolean isKotlinSuspendFunction = requestFactory.isKotlinSuspendFunction; boolean continuationWantsResponse = false; boolean continuationBodyNullable = false; Annotation[] annotations = method.getAnnotations(); Type adapterType; if (isKotlinSuspendFunction) { Type[] parameterTypes = method.getGenericParameterTypes(); Type responseType = Utils.getParameterLowerBound(0, (ParameterizedType) parameterTypes[parameterTypes.length - 1]); if (getRawType(responseType) == Response.class && responseType instanceof ParameterizedType) { // Unwrap the actual body type from Response<T>. responseType = Utils.getParameterUpperBound(0, (ParameterizedType) responseType); continuationWantsResponse = true; } else { // TODO figure out if type is nullable or not // Metadata metadata = method.getDeclaringClass().getAnnotation(Metadata.class) // Find the entry for method // Determine if return type is nullable or not } adapterType = new Utils.ParameterizedTypeImpl(null, Call.class, responseType); annotations = SkipCallbackExecutorImpl.ensurePresent(annotations); } else { adapterType = method.getGenericReturnType(); } CallAdapter<ResponseT, ReturnT> callAdapter = createCallAdapter(retrofit, method, adapterType, annotations); Type responseType = callAdapter.responseType(); if (responseType == okhttp3.Response.class) { throw methodError(method, \"'\" + getRawType(responseType).getName() + \"' is not a valid response body type. Did you mean ResponseBody?\"); } if (responseType == Response.class) { throw methodError(method, \"Response must include generic type (e.g., Response<String>)\"); } // TODO support Unit for Kotlin? if (requestFactory.httpMethod.equals(\"HEAD\") && !Void.class.equals(responseType)) { throw methodError(method, \"HEAD method must use Void as response type.\"); } Converter<ResponseBody, ResponseT> responseConverter = createResponseConverter(retrofit, method, responseType); okhttp3.Call.Factory callFactory = retrofit.callFactory; if (!isKotlinSuspendFunction) { return new CallAdapted<>(requestFactory, callFactory, responseConverter, callAdapter); } else if (continuationWantsResponse) { //noinspection unchecked Kotlin compiler guarantees ReturnT to be Object. return (HttpServiceMethod<ResponseT, ReturnT>) new SuspendForResponse<>(requestFactory, callFactory, responseConverter, (CallAdapter<ResponseT, Call<ResponseT>>) callAdapter); } else { //noinspection unchecked Kotlin compiler guarantees ReturnT to be Object. return (HttpServiceMethod<ResponseT, ReturnT>) new SuspendForBody<>(requestFactory, callFactory, responseConverter, (CallAdapter<ResponseT, Call<ResponseT>>) callAdapter, continuationBodyNullable); } } \n### Response:", "ground_truth": "Inspects the annotations on an interface method to construct a reusable service method that\nspeaks HTTP. This requires potentially-expensive reflection so it is best to build each service\nmethod only once and reuse it.", "predict": "Parse annotations for a method."}
{"ID": 69, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setDelay(long amount, TimeUnit unit) { if (amount < 0) { throw new IllegalArgumentException(\"Amount must be positive value.\"); } this.delayMs = unit.toMillis(amount); } \n### Response:", "ground_truth": "Set the network round trip delay.", "predict": "Sets the delay in milliseconds.\n\n@param amount the amount of delay in milliseconds\n@param unit the unit of the delay"}
{"ID": 70, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Response<?> createErrorResponse() { Response<?> call; try { call = errorFactory.call(); } catch (Exception e) { throw new IllegalStateException(\"Error factory threw an exception.\", e); } if (call == null) { throw new IllegalStateException(\"Error factory returned null.\"); } if (call.isSuccessful()) { throw new IllegalStateException(\"Error factory returned successful response.\"); } return call; } \n### Response:", "ground_truth": "The HTTP error to be used when an error is triggered.", "predict": "Creates a response object that represents an error response.\n\n@return the response object."}
{"ID": 71, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public long calculateDelay(TimeUnit unit) { float delta = variancePercent / 100f; // e.g., 20 / 100f == 0.2f float lowerBound = 1f - delta; // 0.2f --> 0.8f float upperBound = 1f + delta; // 0.2f --> 1.2f float bound = upperBound - lowerBound; // 1.2f - 0.8f == 0.4f float delayPercent = lowerBound + (random.nextFloat() * bound); // 0.8 + (rnd * 0.4) long callDelayMs = (long) (delayMs * delayPercent); return MILLISECONDS.convert(callDelayMs, unit); } \n### Response:", "ground_truth": "Get the delay that should be used for delaying a response in accordance with configured\nbehavior.", "predict": "Calculates the delay in milliseconds.\n\n@param unit the time unit\n@return the delay in milliseconds"}
{"ID": 72, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void createSampleData(String username, String password) { Assert.notNull(documentDao, \"DocumentDao required\"); Assert.hasText(username, \"Username required\"); Authentication auth = new UsernamePasswordAuthenticationToken(username, password); try { // Set the SecurityContextHolder ThreadLocal so any subclasses // automatically know which user is operating SecurityContextHolder.getContext().setAuthentication(auth); // Create the home directory first Directory home = new Directory(username, Directory.ROOT_DIRECTORY); documentDao.create(home); addPermission(documentDao, home, username, LEVEL_GRANT_ADMIN); addPermission(documentDao, home, \"ROLE_USER\", LEVEL_GRANT_READ); createFiles(documentDao, home); // Now create the confidential directory Directory confid = new Directory(\"confidential\", home); documentDao.create(confid); addPermission(documentDao, confid, \"ROLE_USER\", LEVEL_NEGATE_READ); createFiles(documentDao, confid); // Now create the shared directory Directory shared = new Directory(\"shared\", home); documentDao.create(shared); addPermission(documentDao, shared, \"ROLE_USER\", LEVEL_GRANT_READ); addPermission(documentDao, shared, \"ROLE_USER\", LEVEL_GRANT_WRITE); createFiles(documentDao, shared); } finally { // Clear the SecurityContextHolder ThreadLocal so future calls are // guaranteed to be clean SecurityContextHolder.clearContext(); } } \n### Response:", "ground_truth": "Creates a directory for the user, and a series of sub-directories. The root\ndirectory is the parent for the user directory. The sub-directories are\n\"confidential\" and \"shared\". The ROLE_USER will be given read and write access to\n\"shared\".", "predict": "Creates the document directory and the documentDao.\n\n@param username the username\n@param password the password"}
{"ID": 73, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static HttpMethod valueOf(String method) { try { return HttpMethod.valueOf(method); } catch (IllegalArgumentException e) { } return null; } \n### Response:", "ground_truth": "Provides a save way of obtaining the HttpMethod from a String. If the method is\ninvalid, returns null.\n\n@param method the HTTP method to use.\n\n@return the HttpMethod or null if method is invalid.", "predict": "Returns the HttpMethod corresponding to the given method name.\n\n@param method the method name\n@return the HttpMethod corresponding to the given method name"}
{"ID": 74, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public DirContextOperations searchForUser(String username) { if (logger.isDebugEnabled()) { logger.debug(\"Searching for user '\" + username + \"', with user search \" + this); } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate( contextSource); template.setSearchControls(searchControls); try { return template.searchForSingleEntry(searchBase, searchFilter, new String[] { username }); } catch (IncorrectResultSizeDataAccessException notFound) { if (notFound.getActualSize() == 0) { throw new UsernameNotFoundException(\"User \" + username + \" not found in directory.\"); } // Search should never return multiple results if properly configured, so just // rethrow throw notFound; } } \n### Response:", "ground_truth": "Return the LdapUserDetails containing the user's information\n\n@param username the username to search for.\n\n@return An LdapUserDetails object containing the details of the located user's\ndirectory entry\n\n@throws UsernameNotFoundException if no matching entry is found.", "predict": "Search for a user.\n\n@param username the user to search for\n@return the directory context operations for the given user"}
{"ID": 75, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String encode(CharSequence rawPassword) { String salt = PREFIX + this.saltGenerator.generateKey() + SUFFIX; return digest(salt, rawPassword); } \n### Response:", "ground_truth": "Encodes the rawPass using a MessageDigest. If a salt is specified it will be merged\nwith the password before encoding.\n\n@param rawPassword The plain text password\n@return Hex string of password digest (or base64 encoded string if\nencodeHashAsBase64 is enabled.", "predict": "Encode the given password using the salt and generate a digest.\n\n@param rawPassword the password to encode\n@return the encoded password"}
{"ID": 76, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean matches(CharSequence rawPassword, String encodedPassword) { String salt = extractSalt(encodedPassword); String rawPasswordEncoded = digest(salt, rawPassword); return PasswordEncoderUtils.equals(encodedPassword.toString(), rawPasswordEncoded); } \n### Response:", "ground_truth": "Takes a previously encoded password and compares it with a rawpassword after mixing\nin the salt and encoding that value\n\n@param rawPassword plain text password\n@param encodedPassword previously encoded password\n@return true or false", "predict": "Checks if the given password matches the given encoded password.\n\n@param rawPassword the raw password\n@param encodedPassword the encoded password\n@return true if the given password matches the given encoded password"}
{"ID": 77, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static void performVersionChecks(String minSpringVersion) { if (minSpringVersion == null) { return; } // Check Spring Compatibility String springVersion = SpringVersion.getVersion(); String version = getVersion(); if (disableChecks(springVersion, version)) { return; } logger.info(\"You are running with Spring Security Core \" + version); if (new ComparableVersion(springVersion) .compareTo(new ComparableVersion(minSpringVersion)) < 0) { logger.warn(\"**** You are advised to use Spring \" + minSpringVersion + \" or later with this version. You are running: \" + springVersion); } } \n### Response:", "ground_truth": "Perform version checks with specific min Spring Version\n\n@param minSpringVersion", "predict": "Checks the Spring version and reports the warning message if the version is lower than the given\nversion.\n\n@param minSpringVersion the minimum Spring version to check"}
{"ID": 78, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static boolean disableChecks(String springVersion, String springSecurityVersion) { if (springVersion == null || springVersion.equals(springSecurityVersion)) { return true; } return Boolean.getBoolean(DISABLE_CHECKS); } \n### Response:", "ground_truth": "Disable if springVersion and springSecurityVersion are the same to allow working\nwith Uber Jars.\n\n@param springVersion\n@param springSecurityVersion\n@return", "predict": "Checks if the given Spring version is the same as the Spring Security version.\n\n@param springVersion the Spring version\n@param springSecurityVersion the Spring Security version\n@return true if the given Spring version is the same as the Spring Security version"}
{"ID": 79, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static String getSpringVersion() { Properties properties = new Properties(); try { properties.load(SpringSecurityCoreVersion.class.getClassLoader().getResourceAsStream(\"META-INF/spring-security.versions\")); } catch (IOException | NullPointerException e) { return null; } return properties.getProperty(\"org.springframework:spring-core\"); } \n### Response:", "ground_truth": "Loads the spring version or null if it cannot be found.\n@return", "predict": "Get the version of the Spring Security core.\n\n@return Spring version"}
{"ID": 80, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public AttributeExchangeConfigurer attributeExchange(String identifierPattern) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer( identifierPattern); this.attributeExchangeConfigurers.add(attributeExchangeConfigurer); return attributeExchangeConfigurer; } \n### Response:", "ground_truth": "Sets up OpenID attribute exchange for OpenID's matching the specified pattern.\n\n@param identifierPattern the regular expression for matching on OpenID's (i.e.\n\"https://www.google.com/.*\", \".*yahoo.com.*\", etc)\n@return a {@link AttributeExchangeConfigurer} for further customizations of the\nattribute exchange", "predict": "Creates a new attribute exchange configurer for the given identifier pattern.\n\n@param identifierPattern the identifier pattern\n@return the attribute exchange configurer"}
{"ID": 81, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public OAuth2ClientConfigurer<HttpSecurity> oauth2Client() throws Exception { OAuth2ClientConfigurer<HttpSecurity> configurer = getOrApply(new OAuth2ClientConfigurer<>()); this.postProcess(configurer); return configurer; } \n### Response:", "ground_truth": "Configures OAuth 2.0 Client support.\n\n@since 5.1\n@see <a target=\"_blank\" href=\"https://tools.ietf.org/html/rfc6749#section-1.1\">OAuth 2.0 Authorization Framework</a>\n@return the {@link OAuth2ClientConfigurer} for further customizations\n@throws Exception", "predict": "Configures the OAuth2 client.\n\n@return the OAuth2 client\n@throws Exception the exception"}
{"ID": 82, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public OAuth2ResourceServerConfigurer<HttpSecurity> oauth2ResourceServer() throws Exception { OAuth2ResourceServerConfigurer<HttpSecurity> configurer = getOrApply(new OAuth2ResourceServerConfigurer<>(getContext())); this.postProcess(configurer); return configurer; } \n### Response:", "ground_truth": "Configures OAuth 2.0 Resource Server support.\n\n@since 5.1\n@see <a target=\"_blank\" href=\"https://tools.ietf.org/html/rfc6749#section-1.1\">OAuth 2.0 Authorization Framework</a>\n@return the {@link OAuth2ResourceServerConfigurer} for further customizations\n@throws Exception", "predict": "Returns the OAuth2ResourceServerConfigurer configured by this factory.\n\n@return the OAuth2ResourceServerConfigurer\n@throws Exception if an error occurs"}
{"ID": 83, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ChannelSecurityConfigurer<HttpSecurity>.ChannelRequestMatcherRegistry requiresChannel() throws Exception { ApplicationContext context = getContext(); return getOrApply(new ChannelSecurityConfigurer<>(context)) .getRegistry(); } \n### Response:", "ground_truth": "Configures channel security. In order for this configuration to be useful at least\none mapping to a required channel must be provided.\n\n<h2>Example Configuration</h2>\n\nThe example below demonstrates how to require HTTPs for every request. Only\nrequiring HTTPS for some requests is supported, but not recommended since an\napplication that allows for HTTP introduces many security vulnerabilities. For one\nsuch example, read about <a\nhref=\"https://en.wikipedia.org/wiki/Firesheep\">Firesheep</a>.\n\n<pre>\n&#064;Configuration\n&#064;EnableWebSecurity\npublic class ChannelSecurityConfig extends WebSecurityConfigurerAdapter {\n\n&#064;Override\nprotected void configure(HttpSecurity http) throws Exception {\nhttp.authorizeRequests().antMatchers(&quot;/**&quot;).hasRole(&quot;USER&quot;).and().formLogin()\n.and().requiresChannel().anyRequest().requiresSecure();\n}\n\n&#064;Override\nprotected void configure(AuthenticationManagerBuilder auth) throws Exception {\nauth.inMemoryAuthentication().withUser(&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;);\n}\n}\n</pre>\n\n\n@return the {@link ChannelSecurityConfigurer} for further customizations\n@throws Exception", "predict": "Returns the request matcher registry for the given channel.\n\n@return the request matcher registry for the given channel\n@throws Exception if the request matcher registry cannot be retrieved"}
{"ID": 84, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean compare(final String dn, final String attributeName, final Object value) { final String comparisonFilter = \"(\" + attributeName + \"={0})\"; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext(DirContext ctx) throws NamingException { SearchControls ctls = new SearchControls(); ctls.setReturningAttributes(NO_ATTRS); ctls.setSearchScope(SearchControls.OBJECT_SCOPE); NamingEnumeration<SearchResult> results = ctx.search(dn, comparisonFilter, new Object[] { value }, ctls); Boolean match = Boolean.valueOf(results.hasMore()); LdapUtils.closeEnumeration(results); return match; } } Boolean matches = (Boolean) executeReadOnly(new LdapCompareCallback()); return matches.booleanValue(); } \n### Response:", "ground_truth": "Performs an LDAP compare operation of the value of an attribute for a particular\ndirectory entry.\n\n@param dn the entry who's attribute is to be used\n@param attributeName the attribute who's value we want to compare\n@param value the value to be checked against the directory value\n\n@return true if the supplied value matches that in the directory", "predict": "Compares the given value with the given attribute name.\n\n@param dn\nthe dn\n@param attributeName\nthe attribute name\n@param value\nthe value\n@return true if the value matches the given attribute name, otherwise false\n@throws NamingException\nif an error occurs"}
{"ID": 85, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public DirContextOperations retrieveEntry(final String dn, final String[] attributesToRetrieve) { return (DirContextOperations) executeReadOnly(new ContextExecutor() { public Object executeWithContext(DirContext ctx) throws NamingException { Attributes attrs = ctx.getAttributes(dn, attributesToRetrieve); // Object object = ctx.lookup(LdapUtils.getRelativeName(dn, ctx)); return new DirContextAdapter(attrs, new DistinguishedName(dn), new DistinguishedName(ctx.getNameInNamespace())); } }); } \n### Response:", "ground_truth": "Composes an object from the attributes of the given DN.\n\n@param dn the directory entry which will be read\n@param attributesToRetrieve the named attributes which will be retrieved from the\ndirectory entry.\n\n@return the object created by the mapper", "predict": "Retrieves an entry from the LDAP.\n\n@param dn\nthe dn of the entry to retrieve\n@param attributesToRetrieve\nthe attributes to retrieve\n@return the DirContextOperations object\n@throws NamingException"}
{"ID": 86, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Set<String> searchForSingleAttributeValues(final String base, final String filter, final Object[] params, final String attributeName) { String[] attributeNames = new String[] { attributeName }; Set<Map<String, List<String>>> multipleAttributeValues = searchForMultipleAttributeValues( base, filter, params, attributeNames); Set<String> result = new HashSet<>(); for (Map<String, List<String>> map : multipleAttributeValues) { List<String> values = map.get(attributeName); if (values != null) { result.addAll(values); } } return result; } \n### Response:", "ground_truth": "Performs a search using the supplied filter and returns the union of the values of\nthe named attribute found in all entries matched by the search. Note that one\ndirectory entry may have several values for the attribute. Intended for role\nsearches and similar scenarios.\n\n@param base the DN to search in\n@param filter search filter to use\n@param params the parameters to substitute in the search filter\n@param attributeName the attribute who's values are to be retrieved.\n\n@return the set of String values for the attribute as a union of the values found\nin all the matching entries.", "predict": "Search for a set of values for a given attribute name.\n\n@param base\nbase URL\n@param filter\nfilter\n@param params\nparams\n@param attributeName\nattribute name\n@return set of values"}
{"ID": 87, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Set<Map<String, List<String>>> searchForMultipleAttributeValues( final String base, final String filter, final Object[] params, final String[] attributeNames) { // Escape the params acording to RFC2254 Object[] encodedParams = new String[params.length]; for (int i = 0; i < params.length; i++) { encodedParams[i] = LdapEncoder.filterEncode(params[i].toString()); } String formattedFilter = MessageFormat.format(filter, encodedParams); logger.debug(\"Using filter: \" + formattedFilter); final HashSet<Map<String, List<String>>> set = new HashSet<Map<String, List<String>>>(); ContextMapper roleMapper = new ContextMapper() { public Object mapFromContext(Object ctx) { DirContextAdapter adapter = (DirContextAdapter) ctx; Map<String, List<String>> record = new HashMap<String, List<String>>(); if (attributeNames == null || attributeNames.length == 0) { try { for (NamingEnumeration ae = adapter.getAttributes().getAll(); ae .hasMore();) { Attribute attr = (Attribute) ae.next(); extractStringAttributeValues(adapter, record, attr.getID()); } } catch (NamingException x) { org.springframework.ldap.support.LdapUtils .convertLdapException(x); } } else { for (String attributeName : attributeNames) { extractStringAttributeValues(adapter, record, attributeName); } } record.put(DN_KEY, Arrays.asList(getAdapterDN(adapter))); set.add(record); return null; } }; SearchControls ctls = new SearchControls(); ctls.setSearchScope(searchControls.getSearchScope()); ctls.setReturningAttributes(attributeNames != null && attributeNames.length > 0 ? attributeNames : null); search(base, formattedFilter, ctls, roleMapper); return set; } \n### Response:", "ground_truth": "Performs a search using the supplied filter and returns the values of each named\nattribute found in all entries matched by the search. Note that one directory entry\nmay have several values for the attribute. Intended for role searches and similar\nscenarios.\n\n@param base the DN to search in\n@param filter search filter to use\n@param params the parameters to substitute in the search filter\n@param attributeNames the attributes' values that are to be retrieved.\n\n@return the set of String values for each attribute found in all the matching\nentries. The attribute name is the key for each set of values. In addition each map\ncontains the DN as a String with the key predefined key {@link #DN_KEY}.", "predict": "Search for multiple attribute values.\n\n@param base\nthe base\n@param filter\nthe filter\n@param params\nthe params\n@param attributeNames\nthe attribute names\n@return the set"}
{"ID": 88, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static DirContextOperations searchForSingleEntryInternal(DirContext ctx, SearchControls searchControls, String base, String filter, Object[] params) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName( ctx.getNameInNamespace()); final DistinguishedName searchBaseDn = new DistinguishedName(base); final NamingEnumeration<SearchResult> resultsEnum = ctx.search(searchBaseDn, filter, params, buildControls(searchControls)); if (logger.isDebugEnabled()) { logger.debug(\"Searching for entry under DN '\" + ctxBaseDn + \"', base = '\" + searchBaseDn + \"', filter = '\" + filter + \"'\"); } Set<DirContextOperations> results = new HashSet<>(); try { while (resultsEnum.hasMore()) { SearchResult searchResult = resultsEnum.next(); DirContextAdapter dca = (DirContextAdapter) searchResult.getObject(); Assert.notNull(dca, \"No object returned by search, DirContext is not correctly configured\"); if (logger.isDebugEnabled()) { logger.debug(\"Found DN: \" + dca.getDn()); } results.add(dca); } } catch (PartialResultException e) { LdapUtils.closeEnumeration(resultsEnum); logger.info(\"Ignoring PartialResultException\"); } if (results.size() == 0) { throw new IncorrectResultSizeDataAccessException(1, 0); } if (results.size() > 1) { throw new IncorrectResultSizeDataAccessException(1, results.size()); } return results.iterator().next(); } \n### Response:", "ground_truth": "Internal method extracted to avoid code duplication in AD search.", "predict": "Search for single entry internal.\n\n@param ctx the ctx\n@param searchControls the search controls\n@param base the base\n@param filter the filter\n@param params the params\n@return the DirContextOperations\n@throws NamingException the naming exception"}
{"ID": 89, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static SearchControls buildControls(SearchControls originalControls) { return new SearchControls(originalControls.getSearchScope(), originalControls.getCountLimit(), originalControls.getTimeLimit(), originalControls.getReturningAttributes(), RETURN_OBJECT, originalControls.getDerefLinkFlag()); } \n### Response:", "ground_truth": "We need to make sure the search controls has the return object flag set to true, in\norder for the search to return DirContextAdapter instances.\n@param originalControls\n@return", "predict": "Builds the new SearchControls object.\n\n@param originalControls the original SearchControls\n@return the new SearchControls"}
{"ID": 90, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void lookupPrimaryKeys(final Map<Serializable, Acl> acls, final Set<Long> findNow, final List<Sid> sids) { Assert.notNull(acls, \"ACLs are required\"); Assert.notEmpty(findNow, \"Items to find now required\"); String sql = computeRepeatingSql(lookupPrimaryKeysWhereClause, findNow.size()); Set<Long> parentsToLookup = jdbcTemplate.query(sql, new PreparedStatementSetter() { public void setValues(PreparedStatement ps) throws SQLException { int i = 0; for (Long toFind : findNow) { i++; ps.setLong(i, toFind); } } }, new ProcessResultSet(acls, sids)); // Lookup the parents, now that our JdbcTemplate has released the database // connection (SEC-547) if (parentsToLookup.size() > 0) { lookupPrimaryKeys(acls, parentsToLookup, sids); } } \n### Response:", "ground_truth": "Locates the primary key IDs specified in \"findNow\", adding AclImpl instances with\nStubAclParents to the \"acls\" Map.\n\n@param acls the AclImpls (with StubAclParents)\n@param findNow Long-based primary keys to retrieve\n@param sids", "predict": "Lookup the primary keys for the given ACLs.\n\n@param acls the ACLs to lookup\n@param findNow the items to find now\n@param sids the sids to look up\n@throws SQLException on database error"}
{"ID": 91, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails buildDetails( HttpServletRequest context) { Collection<String> j2eeUserRoles = getUserRoles(context); Collection<? extends GrantedAuthority> userGas = j2eeUserRoles2GrantedAuthoritiesMapper .getGrantedAuthorities(j2eeUserRoles); if (logger.isDebugEnabled()) { logger.debug(\"J2EE roles [\" + j2eeUserRoles + \"] mapped to Granted Authorities: [\" + userGas + \"]\"); } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails( context, userGas); return result; } \n### Response:", "ground_truth": "Builds the authentication details object.\n\n@see org.springframework.security.authentication.AuthenticationDetailsSource#buildDetails(Object)", "predict": "Builds the authentication details for the given context.\n\n@param context the request context\n@return the authentication details"}
{"ID": 92, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private RootBeanDefinition createEmbeddedServer(Element element, ParserContext parserContext) { Object source = parserContext.extractSource(element); String suffix = element.getAttribute(ATT_ROOT_SUFFIX); if (!StringUtils.hasText(suffix)) { suffix = OPT_DEFAULT_ROOT_SUFFIX; } String port = element.getAttribute(ATT_PORT); if (!StringUtils.hasText(port)) { port = getDefaultPort(); if (logger.isDebugEnabled()) { logger.debug(\"Using default port of \" + port); } } String url = \"ldap://127.0.0.1:\" + port + \"/\" + suffix; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder .rootBeanDefinition(CONTEXT_SOURCE_CLASS); contextSource.addConstructorArgValue(url); contextSource.addPropertyValue(\"userDn\", \"uid=admin,ou=system\"); contextSource.addPropertyValue(\"password\", \"secret\"); RootBeanDefinition apacheContainer = new RootBeanDefinition( \"org.springframework.security.ldap.server.ApacheDSContainer\", null, null); apacheContainer.setSource(source); apacheContainer.getConstructorArgumentValues().addGenericArgumentValue(suffix); String ldifs = element.getAttribute(ATT_LDIF_FILE); if (!StringUtils.hasText(ldifs)) { ldifs = OPT_DEFAULT_LDIF_FILE; } apacheContainer.getConstructorArgumentValues().addGenericArgumentValue(ldifs); apacheContainer.getPropertyValues().addPropertyValue(\"port\", port); logger.info(\"Embedded LDAP server bean definition created for URL: \" + url); if (parserContext.getRegistry() .containsBeanDefinition(BeanIds.EMBEDDED_APACHE_DS)) { parserContext.getReaderContext().error( \"Only one embedded server bean is allowed per application context\", element); } parserContext.getRegistry().registerBeanDefinition(BeanIds.EMBEDDED_APACHE_DS, apacheContainer); return (RootBeanDefinition) contextSource.getBeanDefinition(); } \n### Response:", "ground_truth": "Will be called if no url attribute is supplied.\n\nRegisters beans to create an embedded apache directory server.\n\n@return the BeanDefinition for the ContextSource for the embedded server.\n\n@see ApacheDSContainer", "predict": "Create an embedded LDAP server bean definition.\n\n@param element\n@param parserContext\n@return"}
{"ID": 93, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void createServletApiFilter(BeanReference authenticationManager) { final String ATT_SERVLET_API_PROVISION = \"servlet-api-provision\"; final String DEF_SERVLET_API_PROVISION = \"true\"; String provideServletApi = httpElt.getAttribute(ATT_SERVLET_API_PROVISION); if (!StringUtils.hasText(provideServletApi)) { provideServletApi = DEF_SERVLET_API_PROVISION; } if (\"true\".equals(provideServletApi)) { servApiFilter = GrantedAuthorityDefaultsParserUtils.registerWithDefaultRolePrefix(pc, SecurityContextHolderAwareRequestFilterBeanFactory.class); servApiFilter.getPropertyValues().add(\"authenticationManager\", authenticationManager); } } \n### Response:", "ground_truth": "Adds the servlet-api integration filter if required", "predict": "Create the Servlet API filter.\n\n@param authenticationManager the authentication manager"}
{"ID": 94, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void createJaasApiFilter() { final String ATT_JAAS_API_PROVISION = \"jaas-api-provision\"; final String DEF_JAAS_API_PROVISION = \"false\"; String provideJaasApi = httpElt.getAttribute(ATT_JAAS_API_PROVISION); if (!StringUtils.hasText(provideJaasApi)) { provideJaasApi = DEF_JAAS_API_PROVISION; } if (\"true\".equals(provideJaasApi)) { jaasApiFilter = new RootBeanDefinition(JaasApiIntegrationFilter.class); } } \n### Response:", "ground_truth": "Adds the jaas-api integration filter if required", "predict": "Create the JaasApiFilter."}
{"ID": 95, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static TypeResolverBuilder<? extends TypeResolverBuilder> createWhitelistedDefaultTyping() { TypeResolverBuilder<? extends TypeResolverBuilder> result = new WhitelistTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); result = result.init(JsonTypeInfo.Id.CLASS, null); result = result.inclusion(JsonTypeInfo.As.PROPERTY); return result; } \n### Response:", "ground_truth": "Creates a TypeResolverBuilder that performs whitelisting.\n@return a TypeResolverBuilder that performs whitelisting.", "predict": "Creates a type resolver that only allows types that are annotated with the 'final' annotation."}
{"ID": 96, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void insertSpringSecurityFilterChain(ServletContext servletContext) { String filterName = DEFAULT_FILTER_NAME; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy( filterName); String contextAttribute = getWebApplicationContextAttribute(); if (contextAttribute != null) { springSecurityFilterChain.setContextAttribute(contextAttribute); } registerFilter(servletContext, true, filterName, springSecurityFilterChain); } \n### Response:", "ground_truth": "Registers the springSecurityFilterChain\n@param servletContext the {@link ServletContext}", "predict": "Insert the spring security filter chain.\n\n@param servletContext the servlet context"}
{"ID": 97, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public PersistentRememberMeToken getTokenForSeries(String seriesId) { try { return getJdbcTemplate().queryForObject(tokensBySeriesSql, new RowMapper<PersistentRememberMeToken>() { public PersistentRememberMeToken mapRow(ResultSet rs, int rowNum) throws SQLException { return new PersistentRememberMeToken(rs.getString(1), rs .getString(2), rs.getString(3), rs.getTimestamp(4)); } }, seriesId); } catch (EmptyResultDataAccessException zeroResults) { if (logger.isDebugEnabled()) { logger.debug(\"Querying token for series '\" + seriesId + \"' returned no results.\", zeroResults); } } catch (IncorrectResultSizeDataAccessException moreThanOne) { logger.error(\"Querying token for series '\" + seriesId + \"' returned more than one value. Series\" + \" should be unique\"); } catch (DataAccessException e) { logger.error(\"Failed to load token for series \" + seriesId, e); } return null; } \n### Response:", "ground_truth": "Loads the token data for the supplied series identifier.\n\nIf an error occurs, it will be reported and null will be returned (since the result\nshould just be a failed persistent login).\n\n@param seriesId\n@return the token matching the series, or null if no match found or an exception\noccurred.", "predict": "Get a token for a series\n\n@param seriesId\n@return"}
{"ID": 98, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<GrantedAuthority> getGrantedAuthorities(Collection<String> attributes) { List<GrantedAuthority> result = new ArrayList<>(attributes.size()); for (String attribute : attributes) { result.add(getGrantedAuthority(attribute)); } return result; } \n### Response:", "ground_truth": "Map the given list of string attributes one-to-one to Spring Security\nGrantedAuthorities.", "predict": "Returns a list of all the granted authorities for the given attributes.\n\n@param attributes\nThe attributes to get the authorities for.\n@return A list of all the granted authorities."}
{"ID": 99, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Cipher newCipher(String algorithm) { try { return Cipher.getInstance(algorithm); } catch (NoSuchAlgorithmException e) { throw new IllegalArgumentException(\"Not a valid encryption algorithm\", e); } catch (NoSuchPaddingException e) { throw new IllegalStateException(\"Should not happen\", e); } } \n### Response:", "ground_truth": "Constructs a new Cipher.", "predict": "Creates a new cipher.\n\n@param algorithm the algorithm to use\n@return the cipher"}
{"ID": 100, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void afterPropertiesSet() { try { super.afterPropertiesSet(); } catch (ServletException e) { // convert to RuntimeException for passivity on afterPropertiesSet signature throw new RuntimeException(e); } Assert.notNull(authenticationManager, \"An AuthenticationManager must be set\"); } \n### Response:", "ground_truth": "Check whether all required properties have been set.", "predict": "Asserts that the AuthenticationManager must be set."}
{"ID": 101, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { if (logger.isDebugEnabled()) { logger.debug(\"Checking secure context token: \" + SecurityContextHolder.getContext().getAuthentication()); } if (requiresAuthentication((HttpServletRequest) request)) { doAuthenticate((HttpServletRequest) request, (HttpServletResponse) response); } chain.doFilter(request, response); } \n### Response:", "ground_truth": "Try to authenticate a pre-authenticated user with Spring Security if the user has\nnot yet been authenticated.", "predict": "Performs the authentication process.\n\n@param request\n@param response\n@param chain\n@throws IOException\n@throws ServletException"}
{"ID": 102, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected boolean principalChanged(HttpServletRequest request, Authentication currentAuthentication) { Object principal = getPreAuthenticatedPrincipal(request); if ((principal instanceof String) && currentAuthentication.getName().equals(principal)) { return false; } if (principal != null && principal.equals(currentAuthentication.getPrincipal())) { return false; } if (logger.isDebugEnabled()) { logger.debug(\"Pre-authenticated principal has changed to \" + principal + \" and will be reauthenticated\"); } return true; } \n### Response:", "ground_truth": "Determines if the current principal has changed. The default implementation tries\n\n<ul>\n<li>If the {@link #getPreAuthenticatedPrincipal(HttpServletRequest)} is a String, the {@link Authentication#getName()} is compared against the pre authenticated principal</li>\n<li>Otherwise, the {@link #getPreAuthenticatedPrincipal(HttpServletRequest)} is compared against the {@link Authentication#getPrincipal()}\n</ul>\n\n<p>\nSubclasses can override this method to determine when a principal has changed.\n</p>\n\n@param request\n@param currentAuthentication\n@return true if the principal has changed, else false", "predict": "Checks if the principal has changed.\n\n@param request the request\n@param currentAuthentication the current authentication\n@return true if the principal has changed, false otherwise"}
{"ID": 103, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void doAuthenticate(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException { Authentication authResult; Object principal = getPreAuthenticatedPrincipal(request); Object credentials = getPreAuthenticatedCredentials(request); if (principal == null) { if (logger.isDebugEnabled()) { logger.debug(\"No pre-authenticated principal found in request\"); } return; } if (logger.isDebugEnabled()) { logger.debug(\"preAuthenticatedPrincipal = \" + principal + \", trying to authenticate\"); } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken( principal, credentials); authRequest.setDetails(authenticationDetailsSource.buildDetails(request)); authResult = authenticationManager.authenticate(authRequest); successfulAuthentication(request, response, authResult); } catch (AuthenticationException failed) { unsuccessfulAuthentication(request, response, failed); if (!continueFilterChainOnUnsuccessfulAuthentication) { throw failed; } } } \n### Response:", "ground_truth": "Do the actual authentication for a pre-authenticated user.", "predict": "Performs authentication.\n\n@param request the request\n@param response the response\n@throws IOException the i/o exception\n@throws ServletException the jsr/web/ServletException exception"}
{"ID": 104, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void checkContentLength(long contentLengthToWrite) { this.contentWritten += contentLengthToWrite; boolean isBodyFullyWritten = this.contentLength > 0 && this.contentWritten >= this.contentLength; int bufferSize = getBufferSize(); boolean requiresFlush = bufferSize > 0 && this.contentWritten >= bufferSize; if (isBodyFullyWritten || requiresFlush) { doOnResponseCommitted(); } } \n### Response:", "ground_truth": "Adds the contentLengthToWrite to the total contentWritten size and checks to see if\nthe response should be written.\n\n@param contentLengthToWrite the size of the content that is about to be written.", "predict": "Checks if the content length is greater than 0 and the content length is greater than the\nbuffer size. If so, it checks if the buffer needs to be flushed.\n\n@param contentLengthToWrite The content length to write."}
{"ID": 105, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Set<GrantedAuthority> mapAuthorities( Collection<? extends GrantedAuthority> authorities) { HashSet<GrantedAuthority> mapped = new HashSet<>( authorities.size()); for (GrantedAuthority authority : authorities) { mapped.add(mapAuthority(authority.getAuthority())); } if (defaultAuthority != null) { mapped.add(defaultAuthority); } return mapped; } \n### Response:", "ground_truth": "Creates a mapping of the supplied authorities based on the case-conversion and\nprefix settings. The mapping will be one-to-one unless duplicates are produced\nduring the conversion. If a default authority has been set, this will also be\nassigned to each mapping.\n\n@param authorities the original authorities\n\n@return the converted set of authorities", "predict": "Map the given authorities to the given authorities.\n\n@param authorities the authorities\n@return the mapped authorities"}
{"ID": 106, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public T loginProcessingUrl(String loginProcessingUrl) { this.loginProcessingUrl = loginProcessingUrl; authFilter .setRequiresAuthenticationRequestMatcher(createLoginProcessingUrlMatcher(loginProcessingUrl)); return getSelf(); } \n### Response:", "ground_truth": "Specifies the URL to validate the credentials.\n\n@param loginProcessingUrl the URL to validate username and password\n@return the {@link FormLoginConfigurer} for additional customization", "predict": "Sets the login processing url.\n\n@param loginProcessingUrl the login processing url\n@return the current object"}
{"ID": 107, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected final void updateAuthenticationDefaults() { if (loginProcessingUrl == null) { loginProcessingUrl(loginPage); } if (failureHandler == null) { failureUrl(loginPage + \"?error\"); } final LogoutConfigurer<B> logoutConfigurer = getBuilder().getConfigurer( LogoutConfigurer.class); if (logoutConfigurer != null && !logoutConfigurer.isCustomLogoutSuccess()) { logoutConfigurer.logoutSuccessUrl(loginPage + \"?logout\"); } } \n### Response:", "ground_truth": "Updates the default values for authentication.\n\n@throws Exception", "predict": "Update the default URL for the login page and the URL for the logout page."}
{"ID": 108, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected final void updateAccessDefaults(B http) { if (permitAll) { PermitAllSupport.permitAll(http, loginPage, loginProcessingUrl, failureUrl); } } \n### Response:", "ground_truth": "Updates the default values for access.", "predict": "Update the access defaults.\n\n@param http the http context"}
{"ID": 109, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String mapPassword(Object passwordValue) { if (!(passwordValue instanceof String)) { // Assume it's binary passwordValue = new String((byte[]) passwordValue); } return (String) passwordValue; } \n### Response:", "ground_truth": "Extension point to allow customized creation of the user's password from the\nattribute stored in the directory.\n\n@param passwordValue the value of the password attribute\n@return a String representation of the password.", "predict": "Converts the given password value to a string.\n\n@param passwordValue the password value\n@return the password value"}
{"ID": 110, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String extractRememberMeCookie(HttpServletRequest request) { Cookie[] cookies = request.getCookies(); if ((cookies == null) || (cookies.length == 0)) { return null; } for (Cookie cookie : cookies) { if (cookieName.equals(cookie.getName())) { return cookie.getValue(); } } return null; } \n### Response:", "ground_truth": "Locates the Spring Security remember me cookie in the request and returns its\nvalue. The cookie is searched for by name and also by matching the context path to\nthe cookie path.\n\n@param request the submitted request which is to be authenticated\n@return the cookie value (if present), null otherwise.", "predict": "Extract the remember me cookie from the request.\n\n@param request the request\n@return the cookie value or null if none"}
{"ID": 111, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String encodeCookie(String[] cookieTokens) { StringBuilder sb = new StringBuilder(); for (int i = 0; i < cookieTokens.length; i++) { try { sb.append(URLEncoder.encode(cookieTokens[i], StandardCharsets.UTF_8.toString())); } catch (UnsupportedEncodingException e) { logger.error(e.getMessage(), e); } if (i < cookieTokens.length - 1) { sb.append(DELIMITER); } } String value = sb.toString(); sb = new StringBuilder(new String(Base64.getEncoder().encode(value.getBytes()))); while (sb.charAt(sb.length() - 1) == '=') { sb.deleteCharAt(sb.length() - 1); } return sb.toString(); } \n### Response:", "ground_truth": "Inverse operation of decodeCookie.\n\n@param cookieTokens the tokens to be encoded.\n@return base64 encoding of the tokens concatenated with the \":\" delimiter.", "predict": "Encodes the cookie tokens into a base64 string.\n\n@param cookieTokens the cookie tokens\n@return the base64 string"}
{"ID": 112, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void setCookie(String[] tokens, int maxAge, HttpServletRequest request, HttpServletResponse response) { String cookieValue = encodeCookie(tokens); Cookie cookie = new Cookie(cookieName, cookieValue); cookie.setMaxAge(maxAge); cookie.setPath(getCookiePath(request)); if (cookieDomain != null) { cookie.setDomain(cookieDomain); } if (maxAge < 1) { cookie.setVersion(1); } if (useSecureCookie == null) { cookie.setSecure(request.isSecure()); } else { cookie.setSecure(useSecureCookie); } cookie.setHttpOnly(true); response.addCookie(cookie); } \n### Response:", "ground_truth": "Sets the cookie on the response.\n\nBy default a secure cookie will be used if the connection is secure. You can set\nthe {@code useSecureCookie} property to {@code false} to override this. If you set\nit to {@code true}, the cookie will always be flagged as secure. By default the cookie\nwill be marked as HttpOnly.\n\n@param tokens the tokens which will be encoded to make the cookie value.\n@param maxAge the value passed to {@link Cookie#setMaxAge(int)}\n@param request the request\n@param response the response to add the cookie to.", "predict": "Set a cookie with the given values.\n\n@param tokens\n@param maxAge\n@param request\n@param response"}
{"ID": 113, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Mono<Object> resolveArgument(MethodParameter parameter, BindingContext bindingContext, ServerWebExchange exchange) { ReactiveAdapter adapter = getAdapterRegistry().getAdapter(parameter.getParameterType()); Mono<SecurityContext> reactiveSecurityContext = ReactiveSecurityContextHolder.getContext(); if (reactiveSecurityContext == null) { return null; } return reactiveSecurityContext.flatMap( a -> { Object p = resolveSecurityContext(parameter, a); Mono<Object> o = Mono.justOrEmpty(p); return adapter == null ? o : Mono.just(adapter.fromPublisher(o)); }); } \n### Response:", "ground_truth": "resolve the argument to inject into the controller parameter.\n@param parameter the method parameter.\n@param bindingContext the binding context.\n@param exchange the server web exchange.\n@return the reactive mono object result.", "predict": "Resolves the security context for the given parameter.\n\n@param parameter the parameter\n@param bindingContext the binding context\n@param exchange the exchange\n@return the Mono"}
{"ID": 114, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private String getQueryString(final HttpServletRequest request, final Pattern artifactPattern) { final String query = request.getQueryString(); if (query == null) { return null; } final String result = artifactPattern.matcher(query).replaceFirst(\"\"); if (result.length() == 0) { return null; } // strip off the trailing & only if the artifact was the first query param return result.startsWith(\"&\") ? result.substring(1) : result; } \n### Response:", "ground_truth": "If present, removes the artifactParameterName and the corresponding value from the\nquery String.\n@param request\n@return the query String minus the artifactParameterName and the corresponding\nvalue.", "predict": "Get the query string from the request.\n\n@param request the request\n@param artifactPattern the artifact pattern\n@return the query string"}
{"ID": 115, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static int getServicePort(URL casServiceUrl) { int port = casServiceUrl.getPort(); if (port == -1) { port = casServiceUrl.getDefaultPort(); } return port; } \n### Response:", "ground_truth": "Gets the port from the casServiceURL ensuring to return the proper value if the\ndefault port is being used.\n@param casServiceUrl the casServerUrl to be used (i.e.\n\"https://example.com/context/login/cas\")\n@return the port that is configured for the casServerUrl", "predict": "Get the service port.\n\n@param casServiceUrl the cas service url\n@return the service port"}
{"ID": 116, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getPrincipal() { Authentication authentication = SecurityContextHolder.getContext() .getAuthentication(); if (authentication == null) { log.warn(\"No Authentication object set in SecurityContext - returning empty String as Principal\"); return \"\"; } Object principal = authentication.getPrincipal(); if (principal instanceof LdapUserDetails) { LdapUserDetails details = (LdapUserDetails) principal; return details.getDn(); } else if (authentication instanceof AnonymousAuthenticationToken) { if (log.isDebugEnabled()) { log.debug(\"Anonymous Authentication, returning empty String as Principal\"); } return \"\"; } else { throw new IllegalArgumentException( \"The principal property of the authentication object\" + \"needs to be an LdapUserDetails.\"); } } \n### Response:", "ground_truth": "Get the principals of the logged in user, in this case the distinguished name.\n\n@return the distinguished name of the logged in user.", "predict": "Returns the principal of the current authentication object.\n\n@return the principal of the current authentication object"}
{"ID": 117, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) { Assert.notNull(request, \"HttpServletRequest required\"); if (invalidateHttpSession) { HttpSession session = request.getSession(false); if (session != null) { logger.debug(\"Invalidating session: \" + session.getId()); session.invalidate(); } } if (clearAuthentication) { SecurityContext context = SecurityContextHolder.getContext(); context.setAuthentication(null); } SecurityContextHolder.clearContext(); } \n### Response:", "ground_truth": "Requires the request to be passed in.\n\n@param request from which to obtain a HTTP session (cannot be null)\n@param response not used (can be <code>null</code>)\n@param authentication not used (can be <code>null</code>)", "predict": "Logs out the current user from the current session.\n\n@param request the request\n@param response the response\n@param authentication the authentication"}
{"ID": 118, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Authentication authenticate(Authentication auth) throws AuthenticationException { if (!(auth instanceof UsernamePasswordAuthenticationToken)) { return null; } UsernamePasswordAuthenticationToken request = (UsernamePasswordAuthenticationToken) auth; Set<GrantedAuthority> authorities; try { // Create the LoginContext object, and pass our InternallCallbackHandler LoginContext loginContext = createLoginContext( new InternalCallbackHandler(auth)); // Attempt to login the user, the LoginContext will call our // InternalCallbackHandler at this point. loginContext.login(); // Create a set to hold the authorities, and add any that have already been // applied. authorities = new HashSet<>(); // Get the subject principals and pass them to each of the AuthorityGranters Set<Principal> principals = loginContext.getSubject().getPrincipals(); for (Principal principal : principals) { for (AuthorityGranter granter : this.authorityGranters) { Set<String> roles = granter.grant(principal); // If the granter doesn't wish to grant any authorities, it should // return null. if ((roles != null) && !roles.isEmpty()) { for (String role : roles) { authorities.add(new JaasGrantedAuthority(role, principal)); } } } } // Convert the authorities set back to an array and apply it to the token. JaasAuthenticationToken result = new JaasAuthenticationToken( request.getPrincipal(), request.getCredentials(), new ArrayList<>(authorities), loginContext); // Publish the success event publishSuccessEvent(result); // we're done, return the token. return result; } catch (LoginException loginException) { AuthenticationException ase = this.loginExceptionResolver .resolveException(loginException); publishFailureEvent(request, ase); throw ase; } } \n### Response:", "ground_truth": "Attempts to login the user given the Authentication objects principal and\ncredential\n\n@param auth The Authentication object to be authenticated.\n\n@return The authenticated Authentication object, with it's grantedAuthorities set.\n\n@throws AuthenticationException This implementation does not handle 'locked' or\n'disabled' accounts. This method only throws a AuthenticationServiceException, with\nthe message of the LoginException that will be thrown, should the\nloginContext.login() method fail.", "predict": "Authenticates the user.\n\n@param auth the authentication to be authenticated\n@return the authentication object\n@throws AuthenticationException if the authentication failed"}
{"ID": 119, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static String buildProviderUrl(List<String> urls, String baseDn) { Assert.notNull(baseDn, \"The Base DN for the LDAP server must not be null.\"); Assert.notEmpty(urls, \"At least one LDAP server URL must be provided.\"); String trimmedBaseDn = baseDn.trim(); StringBuilder providerUrl = new StringBuilder(); for (String serverUrl : urls) { String trimmedUrl = serverUrl.trim(); if (\"\".equals(trimmedUrl)) { continue; } providerUrl.append(trimmedUrl); if (!trimmedUrl.endsWith(\"/\")) { providerUrl.append(\"/\"); } providerUrl.append(trimmedBaseDn); providerUrl.append(\" \"); } return providerUrl.toString(); } \n### Response:", "ground_truth": "Builds a Spring LDAP-compliant Provider URL string, i.e. a space-separated list of\nLDAP servers with their base DNs. As the base DN must be identical for all servers,\nit needs to be supplied only once.\n\n@param urls A list of string values which are LDAP server URLs. An example would be\n\n<pre>\nldap://ldap.company.com:389\n</pre>\n\n. LDAPS URLs may be used as well, given that Spring Security is able to connect to\nthe server.\n@param baseDn The common Base DN for all provided servers, e.g.\n\n<pre>\ndc=company,dc=com\n</pre>\n\n.\n@return A Spring Security/Spring LDAP-compliant Provider URL string.", "predict": "Builds the LDAP provider URL.\n\n@param urls The list of LDAP server URLs.\n@param baseDn The base DN for the LDAP server.\n@return The LDAP provider URL."}
{"ID": 120, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setContextEnvironmentProperties(Map<String, Object> environment) { Assert.notEmpty(environment, \"environment must not be empty\"); this.contextEnvironmentProperties = new Hashtable<>(environment); } \n### Response:", "ground_truth": "Allows a custom environment properties to be used to create initial LDAP context.\n\n@param environment the additional environment parameters to use when creating the LDAP Context", "predict": "Sets the environment properties.\n\n@param environment the environment properties"}
{"ID": 121, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public String getRedirectUrl() { return UrlUtils.buildFullRequestUrl(scheme, serverName, serverPort, requestURI, queryString); } \n### Response:", "ground_truth": "Indicates the URL that the user agent used for this request.\n\n@return the full URL of this request", "predict": "Returns the URL to redirect to after the request is completed."}
{"ID": 122, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public int doEndTag() throws JspException { try { if (!authorized && TagLibConfig.isUiSecurityDisabled()) { pageContext.getOut().write(TagLibConfig.getSecuredUiSuffix()); } } catch (IOException e) { throw new JspException(e); } return EVAL_PAGE; } \n### Response:", "ground_truth": "Default processing of the end tag returning EVAL_PAGE.\n\n@return EVAL_PAGE\n@see Tag#doEndTag()", "predict": "End tag.\n\n@throws JspException if page processing fails"}
{"ID": 123, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected void initUserDetailsService() throws Exception { for (UserDetailsBuilder userBuilder : userBuilders) { getUserDetailsService().createUser(userBuilder.build()); } for (UserDetails userDetails : this.users) { getUserDetailsService().createUser(userDetails); } } \n### Response:", "ground_truth": "Populates the users that have been added.\n\n@throws Exception", "predict": "Initialize the user service.\n\n@throws Exception if an error occurs"}
{"ID": 124, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private UserDetailsService getUserDetailsService() { Map<String, ?> beans = getBeansOfType(CachingUserDetailsService.class); if (beans.size() == 0) { beans = getBeansOfType(UserDetailsService.class); } if (beans.size() == 0) { throw new ApplicationContextException(\"No UserDetailsService registered.\"); } else if (beans.size() > 1) { throw new ApplicationContextException( \"More than one UserDetailsService registered. Please \" + \"use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements.\"); } return (UserDetailsService) beans.values().toArray()[0]; } \n### Response:", "ground_truth": "Obtains a user details service for use in RememberMeServices etc. Will return a\ncaching version if available so should not be used for beans which need to separate\nthe two.", "predict": "Returns the UserDetailsService instance for the current application context."}
{"ID": 125, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addPkceParameters(Map<String, Object> attributes, Map<String, Object> additionalParameters) { String codeVerifier = this.codeVerifierGenerator.generateKey(); attributes.put(PkceParameterNames.CODE_VERIFIER, codeVerifier); try { String codeChallenge = createCodeChallenge(codeVerifier); additionalParameters.put(PkceParameterNames.CODE_CHALLENGE, codeChallenge); additionalParameters.put(PkceParameterNames.CODE_CHALLENGE_METHOD, \"S256\"); } catch (NoSuchAlgorithmException e) { additionalParameters.put(PkceParameterNames.CODE_CHALLENGE, codeVerifier); } } \n### Response:", "ground_truth": "Creates and adds additional PKCE parameters for use in the OAuth 2.0 Authorization and Access Token Requests\n\n@param attributes where {@link PkceParameterNames#CODE_VERIFIER} is stored for the token request\n@param additionalParameters where {@link PkceParameterNames#CODE_CHALLENGE} and, usually,\n{@link PkceParameterNames#CODE_CHALLENGE_METHOD} are added to be used in the authorization request.\n\n@since 5.2\n@see <a target=\"_blank\" href=\"https://tools.ietf.org/html/rfc7636#section-1.1\">1.1.  Protocol Flow</a>\n@see <a target=\"_blank\" href=\"https://tools.ietf.org/html/rfc7636#section-4.1\">4.1.  Client Creates a Code Verifier</a>\n@see <a target=\"_blank\" href=\"https://tools.ietf.org/html/rfc7636#section-4.2\">4.2.  Client Creates the Code Challenge</a>", "predict": "Adds the parameters for the pkce challenge.\n\n@param attributes\n@param additionalParameters"}
{"ID": 126, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected boolean requiresAuthentication(final HttpServletRequest request, final HttpServletResponse response) { final boolean serviceTicketRequest = serviceTicketRequest(request, response); final boolean result = serviceTicketRequest || proxyReceptorRequest(request) || (proxyTicketRequest(serviceTicketRequest, request)); if (logger.isDebugEnabled()) { logger.debug(\"requiresAuthentication = \" + result); } return result; } \n### Response:", "ground_truth": "Overridden to provide proxying capabilities.", "predict": "Checks if authentication is required for the given request.\n\n@param request the request\n@param response the response\n@return true if authentication is required"}
{"ID": 127, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean serviceTicketRequest(final HttpServletRequest request, final HttpServletResponse response) { boolean result = super.requiresAuthentication(request, response); if (logger.isDebugEnabled()) { logger.debug(\"serviceTicketRequest = \" + result); } return result; } \n### Response:", "ground_truth": "Indicates if the request is elgible to process a service ticket. This method exists\nfor readability.\n@param request\n@param response\n@return", "predict": "Checks if the request requires authentication.\n\n@param request the request\n@param response the response\n@return true if the request requires authentication"}
{"ID": 128, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean proxyTicketRequest(final boolean serviceTicketRequest, final HttpServletRequest request) { if (serviceTicketRequest) { return false; } final boolean result = authenticateAllArtifacts && obtainArtifact(request) != null && !authenticated(); if (logger.isDebugEnabled()) { logger.debug(\"proxyTicketRequest = \" + result); } return result; } \n### Response:", "ground_truth": "Indicates if the request is elgible to process a proxy ticket.\n@param request\n@return", "predict": "Proxy the request to the proxy server if the request is a ticket request.\n\n@param serviceTicketRequest true if the request is a ticket request\n@param request the request to proxy\n@return true if the request is a ticket request, false otherwise"}
{"ID": 129, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean authenticated() { Authentication authentication = SecurityContextHolder.getContext() .getAuthentication(); return authentication != null && authentication.isAuthenticated() && !(authentication instanceof AnonymousAuthenticationToken); } \n### Response:", "ground_truth": "Determines if a user is already authenticated.\n@return", "predict": "Returns whether the current user is authenticated.\n\n@return whether the current user is authenticated."}
{"ID": 130, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean proxyReceptorRequest(final HttpServletRequest request) { final boolean result = proxyReceptorConfigured() && proxyReceptorMatcher.matches(request); if (logger.isDebugEnabled()) { logger.debug(\"proxyReceptorRequest = \" + result); } return result; } \n### Response:", "ground_truth": "Indicates if the request is elgible to be processed as the proxy receptor.\n@param request\n@return", "predict": "Check if the request matches the configured interceptor.\n\n@param request the request\n@return true if the request matches the configured interceptor"}
{"ID": 131, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected MethodSecurityExpressionOperations createSecurityExpressionRoot( Authentication authentication, MethodInvocation invocation) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot( authentication); root.setThis(invocation.getThis()); root.setPermissionEvaluator(getPermissionEvaluator()); root.setTrustResolver(getTrustResolver()); root.setRoleHierarchy(getRoleHierarchy()); root.setDefaultRolePrefix(getDefaultRolePrefix()); return root; } \n### Response:", "ground_truth": "Creates the root object for expression evaluation.", "predict": "Creates a security expression root.\n\n@param authentication the authentication\n@param invocation the invocation\n@return the security expression root"}
{"ID": 132, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Mono<JWKSet> getJWKSet() { return this.webClient.get() .uri(this.jwkSetURL) .retrieve() .bodyToMono(String.class) .map(this::parse) .doOnNext(jwkSet -> this.cachedJWKSet.set(Mono.just(jwkSet))) .cache(); } \n### Response:", "ground_truth": "Updates the cached JWK set from the configured URL.\n\n@return The updated JWK set.\n\n@throws RemoteKeySourceException If JWK retrieval failed.", "predict": "Gets the JWK set.\n\n@return the jwk set"}
{"ID": 133, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private String utf8UrlEncode(String value) { try { return URLEncoder.encode(value, \"UTF-8\"); } catch (UnsupportedEncodingException e) { Error err = new AssertionError( \"The Java platform guarantees UTF-8 support, but it seemingly is not present.\"); err.initCause(e); throw err; } } \n### Response:", "ground_truth": "Performs URL encoding with UTF-8\n\n@param value the value to URL encode\n@return the encoded value", "predict": "Encodes the given string to UTF-8.\n\n@param value the string to encode\n@return the encoded string"}
{"ID": 134, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Collection<? extends GrantedAuthority> getWebSphereGroupsBasedGrantedAuthorities() { List<String> webSphereGroups = wasHelper.getGroupsForCurrentUser(); Collection<? extends GrantedAuthority> userGas = webSphereGroups2GrantedAuthoritiesMapper .getGrantedAuthorities(webSphereGroups); if (logger.isDebugEnabled()) { logger.debug(\"WebSphere groups: \" + webSphereGroups + \" mapped to Granted Authorities: \" + userGas); } return userGas; } \n### Response:", "ground_truth": "Get a list of Granted Authorities based on the current user's WebSphere groups.\n\n@return authorities mapped from the user's WebSphere groups.", "predict": "Get the Granted Authorities based on the WebSphere groups.\n\n@return The Granted Authorities."}
{"ID": 135, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected UserDetails loadUserByAssertion(final Assertion assertion) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken( assertion, \"\"); return this.authenticationUserDetailsService.loadUserDetails(token); } \n### Response:", "ground_truth": "Template method for retrieving the UserDetails based on the assertion. Default is\nto call configured userDetailsService and pass the username. Deployers can override\nthis method and retrieve the user based on any criteria they desire.\n\n@param assertion The CAS Assertion.\n@return the UserDetails.", "predict": "Load user by assertion user details.\n\n@param assertion the assertion\n@return the user details"}
{"ID": 136, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Object getPreAuthenticatedPrincipal(HttpServletRequest httpRequest) { Object principal = wasHelper.getCurrentUserName(); if (logger.isDebugEnabled()) { logger.debug(\"PreAuthenticated WebSphere principal: \" + principal); } return principal; } \n### Response:", "ground_truth": "Return the WebSphere user name.", "predict": "Get the current user principal.\n\n@param httpRequest the current http request\n@return the current user principal"}
{"ID": 137, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static byte[] concatenate(byte[]... arrays) { int length = 0; for (byte[] array : arrays) { length += array.length; } byte[] newArray = new byte[length]; int destPos = 0; for (byte[] array : arrays) { System.arraycopy(array, 0, newArray, destPos, array.length); destPos += array.length; } return newArray; } \n### Response:", "ground_truth": "Combine the individual byte arrays into one array.", "predict": "Concatenates the given arrays into a single byte array.\n\n@param arrays the arrays to concatenate\n@return the concatenated byte array"}
{"ID": 138, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static byte[] subArray(byte[] array, int beginIndex, int endIndex) { int length = endIndex - beginIndex; byte[] subarray = new byte[length]; System.arraycopy(array, beginIndex, subarray, 0, length); return subarray; } \n### Response:", "ground_truth": "Extract a sub array of bytes out of the byte array.\n@param array the byte array to extract from\n@param beginIndex the beginning index of the sub array, inclusive\n@param endIndex the ending index of the sub array, exclusive", "predict": "Returns a sub-array of the given array starting at the given index.\n\n@param array the array to be modified\n@param beginIndex the index of the first element to be returned\n@param endIndex the index of the last element to be returned\n@return the sub-array"}
{"ID": 139, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<GrantedAuthority> getGrantedAuthorities(Collection<String> attributes) { ArrayList<GrantedAuthority> gaList = new ArrayList<>(); for (String attribute : attributes) { Collection<GrantedAuthority> c = attributes2grantedAuthoritiesMap .get(attribute); if (c != null) { gaList.addAll(c); } } gaList.trimToSize(); return gaList; } \n### Response:", "ground_truth": "Map the given array of attributes to Spring Security GrantedAuthorities.", "predict": "Returns a list of granted authorities for the given attributes.\n\n@param attributes\n@return"}
{"ID": 140, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Map<String, Collection<GrantedAuthority>> preProcessMap(Map<?, ?> orgMap) { Map<String, Collection<GrantedAuthority>> result = new HashMap<String, Collection<GrantedAuthority>>( orgMap.size()); for (Map.Entry<?, ?> entry : orgMap.entrySet()) { Assert.isInstanceOf(String.class, entry.getKey(), \"attributes2grantedAuthoritiesMap contains non-String objects as keys\"); result.put((String) entry.getKey(), getGrantedAuthorityCollection(entry.getValue())); } return result; } \n### Response:", "ground_truth": "Preprocess the given map to convert all the values to GrantedAuthority collections\n\n@param orgMap The map to process\n@return the processed Map", "predict": "Pre-process the map to get the attributes to be added to the  granted authorities\n\n@param orgMap\n@return"}
{"ID": 141, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Collection<GrantedAuthority> getGrantedAuthorityCollection(Object value) { Collection<GrantedAuthority> result = new ArrayList<>(); addGrantedAuthorityCollection(result, value); return result; } \n### Response:", "ground_truth": "Convert the given value to a collection of Granted Authorities\n\n@param value The value to convert to a GrantedAuthority Collection\n@return Collection containing the GrantedAuthority Collection", "predict": "Returns a collection of granted authorities.\n\n@param value the value\n@return the collection"}
{"ID": 142, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addGrantedAuthorityCollection(Collection<GrantedAuthority> result, Object value) { if (value == null) { return; } if (value instanceof Collection<?>) { addGrantedAuthorityCollection(result, (Collection<?>) value); } else if (value instanceof Object[]) { addGrantedAuthorityCollection(result, (Object[]) value); } else if (value instanceof String) { addGrantedAuthorityCollection(result, (String) value); } else if (value instanceof GrantedAuthority) { result.add((GrantedAuthority) value); } else { throw new IllegalArgumentException(\"Invalid object type: \" + value.getClass().getName()); } } \n### Response:", "ground_truth": "Convert the given value to a collection of Granted Authorities, adding the result\nto the given result collection.\n\n@param value The value to convert to a GrantedAuthority Collection\n@return Collection containing the GrantedAuthority Collection", "predict": "Adds a granted authority collection to the result.\n\n@param result the result\n@param value the value"}
{"ID": 143, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Object getPreAuthenticatedPrincipal(HttpServletRequest httpRequest) { Object principal = httpRequest.getUserPrincipal() == null ? null : httpRequest .getUserPrincipal().getName(); if (logger.isDebugEnabled()) { logger.debug(\"PreAuthenticated J2EE principal: \" + principal); } return principal; } \n### Response:", "ground_truth": "Return the J2EE user name.", "predict": "Get the authentication principal from the request.\n\n@param httpRequest the request\n@return the authentication principal"}
{"ID": 144, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public <C> C getSharedObject(Class<C> sharedType) { return (C) this.sharedObjects.get(sharedType); } \n### Response:", "ground_truth": "Gets a shared Object. Note that object heirarchies are not considered.\n\n@param sharedType the type of the shared Object\n@return the shared Object or null if it is not found", "predict": "Returns the shared object for the given type.\n\n@param <C> the type of the shared object\n@param sharedType the type of the shared object\n@return the shared object"}
{"ID": 145, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String buildHttpsRedirectUrlForRequest(HttpServletRequest request) throws IOException, ServletException { int serverPort = portResolver.getServerPort(request); Integer httpsPort = portMapper.lookupHttpsPort(Integer.valueOf(serverPort)); if (httpsPort != null) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder(); urlBuilder.setScheme(\"https\"); urlBuilder.setServerName(request.getServerName()); urlBuilder.setPort(httpsPort.intValue()); urlBuilder.setContextPath(request.getContextPath()); urlBuilder.setServletPath(request.getServletPath()); urlBuilder.setPathInfo(request.getPathInfo()); urlBuilder.setQuery(request.getQueryString()); return urlBuilder.getUrl(); } // Fall through to server-side forward with warning message logger.warn(\"Unable to redirect to HTTPS as no port mapping found for HTTP port \" + serverPort); return null; } \n### Response:", "ground_truth": "Builds a URL to redirect the supplied request to HTTPS. Used to redirect the\ncurrent request to HTTPS, before doing a forward to the login page.", "predict": "Builds the redirect URL for the given request.\n\n@param request the request\n@return the redirect URL\n@throws IOException if an IOException occurs\n@throws ServletException if an ServletException occurs"}
{"ID": 146, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object invoke(JoinPoint jp, AspectJCallback advisorProceed) { InterceptorStatusToken token = super .beforeInvocation(new MethodInvocationAdapter(jp)); Object result; try { result = advisorProceed.proceedWithObject(); } finally { super.finallyInvocation(token); } return super.afterInvocation(token, result); } \n### Response:", "ground_truth": "Method that is suitable for user with traditional AspectJ-code aspects.\n\n@param jp The AspectJ joint point being invoked which requires a security decision\n@param advisorProceed the advice-defined anonymous class that implements\n{@code AspectJCallback} containing a simple {@code return proceed();} statement\n\n@return The returned value from the method invocation", "predict": "Invokes the aspect JpaAspect."}
{"ID": 147, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static String hasRole(String role) { Assert.isTrue( !role.startsWith(\"ROLE_\"), () -> role + \" should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead.\"); return \"ROLE_\" + role; } \n### Response:", "ground_truth": "Creates a String for specifying a user requires a role.\n\n@param role the role that should be required which is prepended with ROLE_\nautomatically (i.e. USER, ADMIN, etc). It should not start with ROLE_\n@return the {@link ConfigAttribute} expressed as a String", "predict": "Returns the role of the user.\n\n@param role the role of the user\n@return the role of the user"}
{"ID": 148, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static String[] hasAnyRole(String... roles) { for (int i = 0; i < roles.length; i++) { roles[i] = \"ROLE_\" + roles[i]; } return roles; } \n### Response:", "ground_truth": "Creates a String for specifying that a user requires one of many roles.\n\n@param roles the roles that the user should have at least one of (i.e. ADMIN, USER,\netc). Each role should not start with ROLE_ since it is automatically prepended\nalready.\n@return the {@link ConfigAttribute} expressed as a String", "predict": "Returns an array of roles that are present in the given list.\n\n@param roles\n@return"}
{"ID": 149, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected UserDetails processAutoLoginCookie(String[] cookieTokens, HttpServletRequest request, HttpServletResponse response) { if (cookieTokens.length != 2) { throw new InvalidCookieException(\"Cookie token did not contain \" + 2 + \" tokens, but contained '\" + Arrays.asList(cookieTokens) + \"'\"); } final String presentedSeries = cookieTokens[0]; final String presentedToken = cookieTokens[1]; PersistentRememberMeToken token = tokenRepository .getTokenForSeries(presentedSeries); if (token == null) { // No series match, so we can't authenticate using this cookie throw new RememberMeAuthenticationException( \"No persistent token found for series id: \" + presentedSeries); } // We have a match for this user/series combination if (!presentedToken.equals(token.getTokenValue())) { // Token doesn't match series value. Delete all logins for this user and throw // an exception to warn them. tokenRepository.removeUserTokens(token.getUsername()); throw new CookieTheftException( messages.getMessage( \"PersistentTokenBasedRememberMeServices.cookieStolen\", \"Invalid remember-me token (Series/token) mismatch. Implies previous cookie theft attack.\")); } if (token.getDate().getTime() + getTokenValiditySeconds() * 1000L < System .currentTimeMillis()) { throw new RememberMeAuthenticationException(\"Remember-me login has expired\"); } // Token also matches, so login is valid. Update the token value, keeping the // *same* series number. if (logger.isDebugEnabled()) { logger.debug(\"Refreshing persistent login token for user '\" + token.getUsername() + \"', series '\" + token.getSeries() + \"'\"); } PersistentRememberMeToken newToken = new PersistentRememberMeToken( token.getUsername(), token.getSeries(), generateTokenData(), new Date()); try { tokenRepository.updateToken(newToken.getSeries(), newToken.getTokenValue(), newToken.getDate()); addCookie(newToken, request, response); } catch (Exception e) { logger.error(\"Failed to update token: \", e); throw new RememberMeAuthenticationException( \"Autologin failed due to data access problem\"); } return getUserDetailsService().loadUserByUsername(token.getUsername()); } \n### Response:", "ground_truth": "Locates the presented cookie data in the token repository, using the series id. If\nthe data compares successfully with that in the persistent store, a new token is\ngenerated and stored with the same series. The corresponding cookie value is set on\nthe response.\n\n@param cookieTokens the series and token values\n\n@throws RememberMeAuthenticationException if there is no stored token corresponding\nto the submitted cookie, or if the token in the persistent store has expired.\n@throws InvalidCookieException if the cookie doesn't have two tokens as expected.\n@throws CookieTheftException if a presented series value is found, but the stored\ntoken is different from the one presented.", "predict": "Processes the auto-login cookie.\n\n@param cookieTokens\n@param request\n@param response\n@return"}
{"ID": 150, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void onLoginSuccess(HttpServletRequest request, HttpServletResponse response, Authentication successfulAuthentication) { String username = successfulAuthentication.getName(); logger.debug(\"Creating new persistent login for user \" + username); PersistentRememberMeToken persistentToken = new PersistentRememberMeToken( username, generateSeriesData(), generateTokenData(), new Date()); try { tokenRepository.createNewToken(persistentToken); addCookie(persistentToken, request, response); } catch (Exception e) { logger.error(\"Failed to save persistent token \", e); } } \n### Response:", "ground_truth": "Creates a new persistent login token with a new series number, stores the data in\nthe persistent token repository and adds the corresponding cookie to the response.", "predict": "Called when the user is successfully authenticated.\n\n@param request the request\n@param response the response\n@param successfulAuthentication the successful authentication"}
{"ID": 151, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Authentication attemptSwitchUser(HttpServletRequest request) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest; String username = request.getParameter(this.usernameParameter); if (username == null) { username = \"\"; } if (this.logger.isDebugEnabled()) { this.logger.debug(\"Attempt to switch to user [\" + username + \"]\"); } UserDetails targetUser = this.userDetailsService.loadUserByUsername(username); this.userDetailsChecker.check(targetUser); // OK, create the switch user token targetUserRequest = createSwitchUserToken(request, targetUser); if (this.logger.isDebugEnabled()) { this.logger.debug(\"Switch User Token [\" + targetUserRequest + \"]\"); } // publish event if (this.eventPublisher != null) { this.eventPublisher.publishEvent(new AuthenticationSwitchUserEvent( SecurityContextHolder.getContext().getAuthentication(), targetUser)); } return targetUserRequest; } \n### Response:", "ground_truth": "Attempt to switch to another user. If the user does not exist or is not active,\nreturn null.\n\n@return The new <code>Authentication</code> request if successfully switched to\nanother user, <code>null</code> otherwise.\n\n@throws UsernameNotFoundException If the target user is not found.\n@throws LockedException if the account is locked.\n@throws DisabledException If the target user is disabled.\n@throws AccountExpiredException If the target user account is expired.\n@throws CredentialsExpiredException If the target user credentials are expired.", "predict": "Attempt to switch to a new user.\n\n@param request the request\n@return the authentication request\n@throws AuthenticationException if the request is invalid"}
{"ID": 152, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Authentication attemptExitUser(HttpServletRequest request) throws AuthenticationCredentialsNotFoundException { // need to check to see if the current user has a SwitchUserGrantedAuthority Authentication current = SecurityContextHolder.getContext().getAuthentication(); if (null == current) { throw new AuthenticationCredentialsNotFoundException( this.messages.getMessage(\"SwitchUserFilter.noCurrentUser\", \"No current user associated with this request\")); } // check to see if the current user did actual switch to another user // if so, get the original source user so we can switch back Authentication original = getSourceAuthentication(current); if (original == null) { this.logger.debug(\"Could not find original user Authentication object!\"); throw new AuthenticationCredentialsNotFoundException( this.messages.getMessage(\"SwitchUserFilter.noOriginalAuthentication\", \"Could not find original Authentication object\")); } // get the source user details UserDetails originalUser = null; Object obj = original.getPrincipal(); if ((obj != null) && obj instanceof UserDetails) { originalUser = (UserDetails) obj; } // publish event if (this.eventPublisher != null) { this.eventPublisher.publishEvent( new AuthenticationSwitchUserEvent(current, originalUser)); } return original; } \n### Response:", "ground_truth": "Attempt to exit from an already switched user.\n\n@param request The http servlet request\n\n@return The original <code>Authentication</code> object or <code>null</code>\notherwise.\n\n@throws AuthenticationCredentialsNotFoundException If no\n<code>Authentication</code> associated with this request.", "predict": "Attempt to switch the user to another user.\n\n@param request the request\n@return the original user\n@throws AuthenticationCredentialsNotFoundException if the current user does not have a SwitchUserGrantedAuthority"}
{"ID": 153, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setExitUserUrl(String exitUserUrl) { Assert.isTrue(UrlUtils.isValidRedirectUrl(exitUserUrl), \"exitUserUrl cannot be empty and must be a valid redirect URL\"); this.exitUserMatcher = createMatcher(exitUserUrl); } \n### Response:", "ground_truth": "Set the URL to respond to exit user processing.\n\n@param exitUserUrl The exit user URL.", "predict": "Sets the exitUserUrl.\n\n@param exitUserUrl the exitUserUrl"}
{"ID": 154, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @RequestMapping(value = \"/hello.htm\", method = RequestMethod.GET) public ModelAndView displayPublicIndex() { Contact rnd = contactManager.getRandomContact(); return new ModelAndView(\"hello\", \"contact\", rnd); } \n### Response:", "ground_truth": "The public index page, used for unauthenticated users.", "predict": "Display a contact for the user\n\n@return a contact for the user"}
{"ID": 155, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Bean(name = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME) public Filter springSecurityFilterChain() throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && !webSecurityConfigurers.isEmpty(); if (!hasConfigurers) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor .postProcess(new WebSecurityConfigurerAdapter() { }); webSecurity.apply(adapter); } return webSecurity.build(); } \n### Response:", "ground_truth": "Creates the Spring Security Filter Chain\n@return the {@link Filter} that represents the security filter chain\n@throws Exception", "predict": "Spring security configuration.\n\n@return the spring security filter\n@throws Exception if the filter cannot be applied"}
{"ID": 156, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Jwt decode(String token) throws JwtException { JWT jwt = parse(token); if (jwt instanceof SignedJWT) { Jwt createdJwt = createJwt(token, jwt); return validateJwt(createdJwt); } throw new JwtException(\"Unsupported algorithm of \" + jwt.getHeader().getAlgorithm()); } \n### Response:", "ground_truth": "Decode and validate the JWT from its compact claims representation format\n\n@param token the JWT value\n@return a validated {@link Jwt}\n@throws JwtException", "predict": "Decodes a JWT.\n\n@param token the token to decode\n@return the decoded token\n@throws JwtException if the token is invalid"}
{"ID": 157, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean authorizeUsingAccessExpression() throws IOException { if (SecurityContextHolder.getContext().getAuthentication() == null) { return false; } SecurityExpressionHandler<FilterInvocation> handler = getExpressionHandler(); Expression accessExpression; try { accessExpression = handler.getExpressionParser().parseExpression(getAccess()); } catch (ParseException e) { IOException ioException = new IOException(); ioException.initCause(e); throw ioException; } return ExpressionUtils.evaluateAsBoolean(accessExpression, createExpressionEvaluationContext(handler)); } \n### Response:", "ground_truth": "Make an authorization decision based on a Spring EL expression. See the\n\"Expression-Based Access Control\" chapter in Spring Security for details on what\nexpressions can be used.\n\n@return the result of the authorization decision\n@throws IOException", "predict": "Authorizes the filter using the access expression.\n\n@return true if the filter is authorized, false otherwise\n@throws IOException"}
{"ID": 158, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean authorizeUsingUrlCheck() throws IOException { String contextPath = ((HttpServletRequest) getRequest()).getContextPath(); Authentication currentUser = SecurityContextHolder.getContext() .getAuthentication(); return getPrivilegeEvaluator().isAllowed(contextPath, getUrl(), getMethod(), currentUser); } \n### Response:", "ground_truth": "Make an authorization decision based on the URL and HTTP method attributes. True is\nreturned if the user is allowed to access the given URL as defined.\n\n@return the result of the authorization decision\n@throws IOException", "predict": "Checks if the current user is authorized to access the resource.\n\n@return true if the user is authorized, false otherwise\n@throws IOException if the request cannot be processed"}
{"ID": 159, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Collection<GrantedAuthority> convert(Jwt jwt) { return getScopes(jwt) .stream() .map(authority -> SCOPE_AUTHORITY_PREFIX + authority) .map(SimpleGrantedAuthority::new) .collect(Collectors.toList()); } \n### Response:", "ground_truth": "Extracts the authorities\n@param jwt The {@link Jwt} token\n@return The {@link GrantedAuthority authorities} read from the token scopes", "predict": "Converts the JWT scopes to the list of granted authorities.\n\n@param jwt the JWT\n@return the list of granted authorities"}
{"ID": 160, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public CsrfToken generateToken(HttpServletRequest request) { return wrap(request, this.delegate.generateToken(request)); } \n### Response:", "ground_truth": "Generates a new token\n@param request the {@link HttpServletRequest} to use. The\n{@link HttpServletRequest} must have the {@link HttpServletResponse} as an\nattribute with the name of <code>HttpServletResponse.class.getName()</code>", "predict": "Generates a token for the given request.\n\n@param request the request\n@return the token"}
{"ID": 161, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @RequestMapping(value = \"/secure/adminPermission.htm\", method = RequestMethod.GET) public ModelAndView displayAdminPage(@RequestParam(\"contactId\") int contactId) { Contact contact = contactManager.getById(Long.valueOf(contactId)); Acl acl = aclService.readAclById(new ObjectIdentityImpl(contact)); Map<String, Object> model = new HashMap<>(); model.put(\"contact\", contact); model.put(\"acl\", acl); return new ModelAndView(\"adminPermission\", \"model\", model); } \n### Response:", "ground_truth": "Displays the permission admin page for a particular contact.", "predict": "Displays the admin page for a contact.\n\n@param contactId contact id\n@return the model and view"}
{"ID": 162, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @RequestMapping(value = \"/secure/addPermission.htm\", method = RequestMethod.GET) public ModelAndView displayAddPermissionPageForContact( @RequestParam(\"contactId\") long contactId) { Contact contact = contactManager.getById(contactId); AddPermission addPermission = new AddPermission(); addPermission.setContact(contact); Map<String, Object> model = new HashMap<>(); model.put(\"addPermission\", addPermission); model.put(\"recipients\", listRecipients()); model.put(\"permissions\", listPermissions()); return new ModelAndView(\"addPermission\", model); } \n### Response:", "ground_truth": "Displays the \"add permission\" page for a contact.", "predict": "Displays a page to add a permission to a contact.\n\n@param contactId\n@return"}
{"ID": 163, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @RequestMapping(value = \"/secure/addPermission.htm\", method = RequestMethod.POST) public String addPermission(AddPermission addPermission, BindingResult result, ModelMap model) { addPermissionValidator.validate(addPermission, result); if (result.hasErrors()) { model.put(\"recipients\", listRecipients()); model.put(\"permissions\", listPermissions()); return \"addPermission\"; } PrincipalSid sid = new PrincipalSid(addPermission.getRecipient()); Permission permission = permissionFactory.buildFromMask(addPermission .getPermission()); try { contactManager.addPermission(addPermission.getContact(), sid, permission); } catch (DataAccessException existingPermission) { existingPermission.printStackTrace(); result.rejectValue(\"recipient\", \"err.recipientExistsForContact\", \"Addition failure.\"); model.put(\"recipients\", listRecipients()); model.put(\"permissions\", listPermissions()); return \"addPermission\"; } return \"redirect:/secure/index.htm\"; } \n### Response:", "ground_truth": "Handles submission of the \"add permission\" form.", "predict": "Adds a new permission to a contact.\n\n@param addPermission\n@param result\n@param model\n@return"}
{"ID": 164, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @RequestMapping(value = \"/secure/deletePermission.htm\") public ModelAndView deletePermission(@RequestParam(\"contactId\") long contactId, @RequestParam(\"sid\") String sid, @RequestParam(\"permission\") int mask) { Contact contact = contactManager.getById(contactId); Sid sidObject = new PrincipalSid(sid); Permission permission = permissionFactory.buildFromMask(mask); contactManager.deletePermission(contact, sidObject, permission); Map<String, Object> model = new HashMap<>(); model.put(\"contact\", contact); model.put(\"sid\", sidObject); model.put(\"permission\", permission); return new ModelAndView(\"deletePermission\", \"model\", model); } \n### Response:", "ground_truth": "Deletes a permission", "predict": "Deletes a permission.\n\n@param contactId contactId\n@param sid sid\n@param permission permission\n@return ModelAndView"}
{"ID": 165, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static String getRoleWithDefaultPrefix(String defaultRolePrefix, String role) { if (role == null) { return role; } if (defaultRolePrefix == null || defaultRolePrefix.length() == 0) { return role; } if (role.startsWith(defaultRolePrefix)) { return role; } return defaultRolePrefix + role; } \n### Response:", "ground_truth": "Prefixes role with defaultRolePrefix if defaultRolePrefix is non-null and if role\ndoes not already start with defaultRolePrefix.\n\n@param defaultRolePrefix\n@param role\n@return", "predict": "Returns the role with default prefix if it is not the same as the given one.\n\n@param defaultRolePrefix the default prefix\n@param role the role to get\n@return the role with default prefix if it is not the same as the given one."}
{"ID": 166, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static UserDetailsResourceFactoryBean fromString(String users) { InMemoryResource resource = new InMemoryResource(users); return fromResource(resource); } \n### Response:", "ground_truth": "Creates a UserDetailsResourceFactoryBean with a resource from the provided String\n\n@param users the string representing the users\n@return the UserDetailsResourceFactoryBean", "predict": "Creates a UserDetailsResourceFactoryBean from a string.\n\n@param users the string containing the user names\n@return the factory bean"}
{"ID": 167, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<String> getAttributeValues(String name) { List<String> result = null; if (attributes != null) { result = attributes.get(name); } if (result == null) { result = Collections.emptyList(); } return result; } \n### Response:", "ground_truth": "Returns the values for a specific attribute\n\n@param name the attribute name\n@return a String array, never null but may be zero length", "predict": "Returns the list of values for the given attribute.\n\n@param name The name of the attribute.\n@return The list of values for the given attribute."}
{"ID": 168, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getFirstAttributeValue(String name) { List<String> result = getAttributeValues(name); if (result.isEmpty()) { return null; } else { return result.get(0); } } \n### Response:", "ground_truth": "Returns the first attribute value for a specified attribute\n\n@param name\n@return the first attribute value for a specified attribute, may be null", "predict": "Returns the first attribute value for the given name.\n\n@param name The name of the attribute.\n@return The value of the first attribute for the given name."}
{"ID": 169, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static byte[] encode(CharSequence string) { try { ByteBuffer bytes = CHARSET.newEncoder().encode(CharBuffer.wrap(string)); byte[] bytesCopy = new byte[bytes.limit()]; System.arraycopy(bytes.array(), 0, bytesCopy, 0, bytes.limit()); return bytesCopy; } catch (CharacterCodingException e) { throw new IllegalArgumentException(\"Encoding failed\", e); } } \n### Response:", "ground_truth": "Get the bytes of the String in UTF-8 encoded form.", "predict": "Encodes the given string into a byte array.\n\n@param string the string to encode\n@return the encoded byte array"}
{"ID": 170, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String decode(byte[] bytes) { try { return CHARSET.newDecoder().decode(ByteBuffer.wrap(bytes)).toString(); } catch (CharacterCodingException e) { throw new IllegalArgumentException(\"Decoding failed\", e); } } \n### Response:", "ground_truth": "Decode the bytes in UTF-8 form into a String.", "predict": "Decodes a byte array into a String.\n\n@param bytes the byte array to decode\n@return the decoded String"}
{"ID": 171, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private <T extends AccessibleObject> String[] lookupParameterNames( ParameterNameFactory<T> parameterNameFactory, T t) { Annotation[][] parameterAnnotations = parameterNameFactory.findParameterAnnotations(t); int parameterCount = parameterAnnotations.length; String[] paramNames = new String[parameterCount]; boolean found = false; for (int i = 0; i < parameterCount; i++) { Annotation[] annotations = parameterAnnotations[i]; String parameterName = findParameterName(annotations); if (parameterName != null) { found = true; paramNames[i] = parameterName; } } return found ? paramNames : null; } \n### Response:", "ground_truth": "Gets the parameter names or null if not found.\n\n@param parameterNameFactory the {@link ParameterNameFactory} to use\n@param t the {@link AccessibleObject} to find the parameter names on (i.e. Method\nor Constructor)\n@return the parameter names or null", "predict": "Returns the parameter names for the given parameter type."}
{"ID": 172, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @RequestMapping(value = \"/secure/add.htm\", method = RequestMethod.POST) public String addContact(WebContact form, BindingResult result) { validator.validate(form, result); if (result.hasErrors()) { return \"add\"; } Contact contact = new Contact(form.getName(), form.getEmail()); contactManager.create(contact); return \"redirect:/secure/index.htm\"; } \n### Response:", "ground_truth": "Handles the submission of the contact form, creating a new instance if the username\nand email are valid.", "predict": "Add a contact to the system\n\n@param form the form\n@param result the result\n@return the URL to redirect to"}
{"ID": 173, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected Collection<ConfigAttribute> findAttributes(Method method, Class<?> targetClass) { if (targetClass == null) { return null; } return findAttributesSpecifiedAgainst(method, targetClass); } \n### Response:", "ground_truth": "Will walk the method inheritance tree to find the most specific declaration\napplicable.", "predict": "Returns the attributes specified for the given method and class.\n\n@param method the method\n@param targetClass the class\n@return the attributes"}
{"ID": 174, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addSecureMethod(RegisteredMethod method, List<ConfigAttribute> attr) { Assert.notNull(method, \"RegisteredMethod required\"); Assert.notNull(attr, \"Configuration attribute required\"); if (logger.isInfoEnabled()) { logger.info(\"Adding secure method [\" + method + \"] with attributes [\" + attr + \"]\"); } this.methodMap.put(method, attr); } \n### Response:", "ground_truth": "Add configuration attributes for a secure method.\n\n@param method the method to be secured\n@param attr required authorities associated with the method", "predict": "Adds a secure method to the configuration.\n\n@param method The method to add.\n@param attr The attributes to add."}
{"ID": 175, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Collection<ConfigAttribute> getAllConfigAttributes() { Set<ConfigAttribute> allAttributes = new HashSet<>(); for (List<ConfigAttribute> attributeList : methodMap.values()) { allAttributes.addAll(attributeList); } return allAttributes; } \n### Response:", "ground_truth": "Obtains the configuration attributes explicitly defined against this bean.\n\n@return the attributes explicitly defined against this bean", "predict": "Returns all the attributes that are defined in this class.\n\n@return all attributes"}
{"ID": 176, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean isMatch(String methodName, String mappedName) { return (mappedName.endsWith(\"*\") && methodName.startsWith(mappedName.substring(0, mappedName.length() - 1))) || (mappedName.startsWith(\"*\") && methodName.endsWith(mappedName .substring(1, mappedName.length()))); } \n### Response:", "ground_truth": "Return if the given method name matches the mapped name. The default implementation\nchecks for \"xxx\" and \"xxx\" matches.\n\n@param methodName the method name of the class\n@param mappedName the name in the descriptor\n\n@return if the names match", "predict": "Checks if the method name matches the mapped name.\n\n@param methodName method name\n@param mappedName mapped name\n@return true if the method name matches the mapped name"}
{"ID": 177, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public C anyRequest() { Assert.state(!this.anyRequestConfigured, \"Can't configure anyRequest after itself\"); C configurer = requestMatchers(ANY_REQUEST); this.anyRequestConfigured = true; return configurer; } \n### Response:", "ground_truth": "Maps any request.\n\n@return the object that is chained after creating the {@link RequestMatcher}", "predict": "Configures the anyRequest request matcher.\n\n@return the anyRequest request matcher"}
{"ID": 178, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void handleBindException(String userDn, String username, Throwable cause) { if (logger.isDebugEnabled()) { logger.debug(\"Failed to bind as \" + userDn + \": \" + cause); } } \n### Response:", "ground_truth": "Allows subclasses to inspect the exception thrown by an attempt to bind with a\nparticular DN. The default implementation just reports the failure to the debug\nlogger.", "predict": "Handle a bind exception.\n\n@param userDn\nthe user dnn\n@param username\nthe username\n@param cause\nthe cause"}
{"ID": 179, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Transactional(readOnly = true) public Contact getRandomContact() { logger.debug(\"Returning random contact\"); Random rnd = new Random(); List<Contact> contacts = contactDao.findAll(); int getNumber = rnd.nextInt(contacts.size()); return contacts.get(getNumber); } \n### Response:", "ground_truth": "This is a public method.", "predict": "Returns a random contact.\n\n@return a random contact"}
{"ID": 180, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected final void clearAuthenticationAttributes(HttpServletRequest request) { HttpSession session = request.getSession(false); if (session == null) { return; } session.removeAttribute(WebAttributes.AUTHENTICATION_EXCEPTION); } \n### Response:", "ground_truth": "Removes temporary authentication-related data which may have been stored in the\nsession during the authentication process.", "predict": "Clear authentication attributes.\n\n@param request the request"}
{"ID": 181, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Field getField(Class<?> clazz, String fieldName) throws IllegalStateException { Assert.notNull(clazz, \"Class required\"); Assert.hasText(fieldName, \"Field name required\"); try { return clazz.getDeclaredField(fieldName); } catch (NoSuchFieldException nsf) { // Try superclass if (clazz.getSuperclass() != null) { return getField(clazz.getSuperclass(), fieldName); } throw new IllegalStateException(\"Could not locate field '\" + fieldName + \"' on class \" + clazz); } } \n### Response:", "ground_truth": "Attempts to locate the specified field on the class.\n\n@param clazz the class definition containing the field\n@param fieldName the name of the field to locate\n\n@return the Field (never null)\n\n@throws IllegalStateException if field could not be found", "predict": "Returns the field with the given name.\n\n@param clazz class to search\n@param fieldName field name\n@return the field with the given name\n@throws IllegalStateException if the class is null or the field name is not found"}
{"ID": 182, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String createServiceUrl(final HttpServletRequest request, final HttpServletResponse response) { return CommonUtils.constructServiceUrl(null, response, this.serviceProperties.getService(), null, this.serviceProperties.getArtifactParameter(), this.encodeServiceUrlWithSessionId); } \n### Response:", "ground_truth": "Constructs a new Service Url. The default implementation relies on the CAS client\nto do the bulk of the work.\n@param request the HttpServletRequest\n@param response the HttpServlet Response\n@return the constructed service url. CANNOT be NULL.", "predict": "Constructs the service URL.\n\n@param request the request\n@param response the response\n@return the service URL"}
{"ID": 183, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String createRedirectUrl(final String serviceUrl) { return CommonUtils.constructRedirectUrl(this.loginUrl, this.serviceProperties.getServiceParameter(), serviceUrl, this.serviceProperties.isSendRenew(), false); } \n### Response:", "ground_truth": "Constructs the Url for Redirection to the CAS server. Default implementation relies\non the CAS client to do the bulk of the work.\n\n@param serviceUrl the service url that should be included.\n@return the redirect url. CANNOT be NULL.", "predict": "Create redirect url.\n\n@param serviceUrl the service url\n@return the string"}
{"ID": 184, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private String extractPrefix(String encPass) { if (!encPass.startsWith(\"{\")) { return null; } int secondBrace = encPass.lastIndexOf('}'); if (secondBrace < 0) { throw new IllegalArgumentException( \"Couldn't find closing brace for SHA prefix\"); } return encPass.substring(0, secondBrace + 1); } \n### Response:", "ground_truth": "Returns the hash prefix or null if there isn't one.", "predict": "Extracts the SHA prefix from the given string.\n\n@param encPass the input string\n@return the SHA prefix"}
{"ID": 185, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException arg2) throws IOException, ServletException { if (logger.isDebugEnabled()) { logger.debug(\"Pre-authenticated entry point called. Rejecting access\"); } response.sendError(HttpServletResponse.SC_FORBIDDEN, \"Access Denied\"); } \n### Response:", "ground_truth": "Always returns a 403 error code to the client.", "predict": "Invoked by the Servlet to start the authentication process.\n\n@param request the request being processed\n@param response the response being processed\n@param arg2 the exception being thrown\n@throws IOException if an IOException occurs\n@throws ServletException if an ServletException occurs"}
{"ID": 186, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void checkFilterStack(List<Filter> filters) { checkForDuplicates(SecurityContextPersistenceFilter.class, filters); checkForDuplicates(UsernamePasswordAuthenticationFilter.class, filters); checkForDuplicates(SessionManagementFilter.class, filters); checkForDuplicates(BasicAuthenticationFilter.class, filters); checkForDuplicates(SecurityContextHolderAwareRequestFilter.class, filters); checkForDuplicates(JaasApiIntegrationFilter.class, filters); checkForDuplicates(ExceptionTranslationFilter.class, filters); checkForDuplicates(FilterSecurityInterceptor.class, filters); } \n### Response:", "ground_truth": "Checks the filter list for possible errors and logs them", "predict": "Checks for duplicate filters in the stack.\n\n@param filters the filters to check"}
{"ID": 187, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") final Class<? extends Throwable>[] getRegisteredTypes() { Set<Class<? extends Throwable>> typeList = this.extractorMap.keySet(); return typeList.toArray(new Class[typeList.size()]); } \n### Response:", "ground_truth": "Returns an array containing the classes for which extractors are registered. The\norder of the classes is the order in which comparisons will occur for resolving a\nmatching extractor.\n\n@return the types for which extractors are registered", "predict": "Returns the list of registered types."}
{"ID": 188, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Throwable extractCause(Throwable throwable) { for (Map.Entry<Class<? extends Throwable>, ThrowableCauseExtractor> entry : extractorMap .entrySet()) { Class<? extends Throwable> throwableType = entry.getKey(); if (throwableType.isInstance(throwable)) { ThrowableCauseExtractor extractor = entry.getValue(); return extractor.extractCause(throwable); } } return null; } \n### Response:", "ground_truth": "Extracts the cause of the given throwable using an appropriate extractor.\n\n@param throwable the <code>Throwable</code> (not <code>null</code>\n@return the cause, may be <code>null</code> if none could be resolved", "predict": "Extracts the cause of the given throwable.\n\n@param throwable the throwable to extract the cause from\n@return the cause of the given throwable"}
{"ID": 189, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) private String registerAccessManager(ParserContext pc, boolean jsr250Enabled, BeanDefinition expressionVoter) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder .rootBeanDefinition(AffirmativeBased.class); ManagedList voters = new ManagedList(4); if (expressionVoter != null) { voters.add(expressionVoter); } voters.add(new RootBeanDefinition(RoleVoter.class)); voters.add(new RootBeanDefinition(AuthenticatedVoter.class)); if (jsr250Enabled) { voters.add(new RootBeanDefinition(Jsr250Voter.class)); } accessMgrBuilder.addConstructorArgValue(voters); BeanDefinition accessManager = accessMgrBuilder.getBeanDefinition(); String id = pc.getReaderContext().generateBeanName(accessManager); pc.registerBeanComponent(new BeanComponentDefinition(accessManager, id)); return id; } \n### Response:", "ground_truth": "Register the default AccessDecisionManager. Adds the special JSR 250 voter jsr-250\nis enabled and an expression voter if expression-based access control is enabled.\n@return", "predict": "Registers the access manager bean."}
{"ID": 190, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Set<String> authorityListToSet( Collection<? extends GrantedAuthority> userAuthorities) { Assert.notNull(userAuthorities, \"userAuthorities cannot be null\"); Set<String> set = new HashSet<>(userAuthorities.size()); for (GrantedAuthority authority : userAuthorities) { set.add(authority.getAuthority()); } return set; } \n### Response:", "ground_truth": "Converts an array of GrantedAuthority objects to a Set.\n@return a Set of the Strings obtained from each call to\nGrantedAuthority.getAuthority()", "predict": "Convert a collection of GrantedAuthority to a Set.\n\n@param user Authorities to convert\n@return Set of authorities\n@throws IllegalArgumentException if any authority is null"}
{"ID": 191, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean matches(byte[] expected, byte[] actual) { if (expected.length != actual.length) { return false; } int result = 0; for (int i = 0; i < expected.length; i++) { result |= expected[i] ^ actual[i]; } return result == 0; } \n### Response:", "ground_truth": "Constant time comparison to prevent against timing attacks.", "predict": "Checks if the byte array contains the same values.\n\n@param expected the expected values\n@param actual the actual values\n@return true if the values match"}
{"ID": 192, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setDefaultFailureUrl(String defaultFailureUrl) { Assert.isTrue(UrlUtils.isValidRedirectUrl(defaultFailureUrl), () -> \"'\" + defaultFailureUrl + \"' is not a valid redirect URL\"); this.defaultFailureUrl = defaultFailureUrl; } \n### Response:", "ground_truth": "The URL which will be used as the failure destination.\n\n@param defaultFailureUrl the failure URL, for example \"/loginFailed.jsp\".", "predict": "Sets the default failure URL.\n\n@param defaultFailureUrl the default failure URL"}
{"ID": 193, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setResolveHiddenInputs( Function<HttpServletRequest, Map<String, String>> resolveHiddenInputs) { Assert.notNull(resolveHiddenInputs, \"resolveHiddenInputs cannot be null\"); this.resolveHiddenInputs = resolveHiddenInputs; } \n### Response:", "ground_truth": "Sets a Function used to resolve a Map of the hidden inputs where the key is the\nname of the input and the value is the value of the input. Typically this is used\nto resolve the CSRF token.\n@param resolveHiddenInputs the function to resolve the inputs", "predict": "Sets the function that will resolve the hidden inputs.\n\n@param resolveHiddenInputs the function that will resolve the hidden inputs"}
{"ID": 194, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static String buildRequestUrl(String servletPath, String requestURI, String contextPath, String pathInfo, String queryString) { StringBuilder url = new StringBuilder(); if (servletPath != null) { url.append(servletPath); if (pathInfo != null) { url.append(pathInfo); } } else { url.append(requestURI.substring(contextPath.length())); } if (queryString != null) { url.append(\"?\").append(queryString); } return url.toString(); } \n### Response:", "ground_truth": "Obtains the web application-specific fragment of the URL.", "predict": "Build the request URL.\n\n@param servletPath\nthe servlet path\n@param requestURI\nthe request URI\n@param contextPath\nthe context path\n@param pathInfo\nthe path info\n@param queryString\nthe query string\n@return the request url"}
{"ID": 195, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isAbsoluteUrl(String url) { if (url == null) { return false; } final Pattern ABSOLUTE_URL = Pattern.compile(\"\\\\A[a-z0-9.+-]+://.*\", Pattern.CASE_INSENSITIVE); return ABSOLUTE_URL.matcher(url).matches(); } \n### Response:", "ground_truth": "Decides if a URL is absolute based on whether it contains a valid scheme name, as\ndefined in RFC 1738.", "predict": "Checks if the given URL is an absolute URL.\n\n@param url the URL to check\n@return true if the URL is an absolute URL, false otherwise"}
{"ID": 196, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<OpenIDAttribute> createAttributeList(String identifier) { for (Map.Entry<Pattern, List<OpenIDAttribute>> entry : idToAttributes.entrySet()) { if (entry.getKey().matcher(identifier).matches()) { return entry.getValue(); } } return Collections.emptyList(); } \n### Response:", "ground_truth": "Iterates through the patterns stored in the map and returns the list of attributes\ndefined for the first match. If no match is found, returns an empty list.", "predict": "Returns a list of OpenIDAttribute objects for the given identifier.\n\n@param identifier the identifier of the attributes to return\n@return a list of OpenIDAttribute objects"}
{"ID": 197, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: Serializable identifierFrom(Serializable identifier, ResultSet resultSet) throws SQLException { if (isString(identifier) && hasValidClassIdType(resultSet) && canConvertFromStringTo(classIdTypeFrom(resultSet))) { identifier = convertFromStringTo((String) identifier, classIdTypeFrom(resultSet)); } else { // Assume it should be a Long type identifier = convertToLong(identifier); } return identifier; } \n### Response:", "ground_truth": "Converts the raw type from the database into the right Java type. For most applications the 'raw type' will be Long, for some applications\nit could be String.\n@param identifier The identifier from the database\n@param resultSet  Result set of the query\n@return The identifier in the appropriate target Java type. Typically Long or UUID.\n@throws SQLException", "predict": "Converts a Serializable identifier to a Long.\n\n@param identifier\n@param resultSet\n@return\n@throws SQLException"}
{"ID": 198, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void createEntries(final MutableAcl acl) { if (acl.getEntries().isEmpty()) { return; } jdbcOperations.batchUpdate(insertEntry, new BatchPreparedStatementSetter() { public int getBatchSize() { return acl.getEntries().size(); } public void setValues(PreparedStatement stmt, int i) throws SQLException { AccessControlEntry entry_ = acl.getEntries().get(i); Assert.isTrue(entry_ instanceof AccessControlEntryImpl, \"Unknown ACE class\"); AccessControlEntryImpl entry = (AccessControlEntryImpl) entry_; stmt.setLong(1, ((Long) acl.getId()).longValue()); stmt.setInt(2, i); stmt.setLong(3, createOrRetrieveSidPrimaryKey(entry.getSid(), true) .longValue()); stmt.setInt(4, entry.getPermission().getMask()); stmt.setBoolean(5, entry.isGranting()); stmt.setBoolean(6, entry.isAuditSuccess()); stmt.setBoolean(7, entry.isAuditFailure()); } }); } \n### Response:", "ground_truth": "Creates a new row in acl_entry for every ACE defined in the passed MutableAcl\nobject.\n\n@param acl containing the ACEs to insert", "predict": "Creates the ACEs.\n\n@param acl the acl"}
{"ID": 199, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void createObjectIdentity(ObjectIdentity object, Sid owner) { Long sidId = createOrRetrieveSidPrimaryKey(owner, true); Long classId = createOrRetrieveClassPrimaryKey(object.getType(), true, object.getIdentifier().getClass()); jdbcOperations.update(insertObjectIdentity, classId, object.getIdentifier().toString(), sidId, Boolean.TRUE); } \n### Response:", "ground_truth": "Creates an entry in the acl_object_identity table for the passed ObjectIdentity.\nThe Sid is also necessary, as acl_object_identity has defined the sid column as\nnon-null.\n\n@param object to represent an acl_object_identity for\n@param owner for the SID column (will be created if there is no acl_sid entry for\nthis particular Sid already)", "predict": "Create object identity.\n\n@param object the object\n@param owner the owner"}
{"ID": 200, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void updateObjectIdentity(MutableAcl acl) { Long parentId = null; if (acl.getParentAcl() != null) { Assert.isInstanceOf(ObjectIdentityImpl.class, acl.getParentAcl() .getObjectIdentity(), \"Implementation only supports ObjectIdentityImpl\"); ObjectIdentityImpl oii = (ObjectIdentityImpl) acl.getParentAcl() .getObjectIdentity(); parentId = retrieveObjectIdentityPrimaryKey(oii); } Assert.notNull(acl.getOwner(), \"Owner is required in this implementation\"); Long ownerSid = createOrRetrieveSidPrimaryKey(acl.getOwner(), true); int count = jdbcOperations.update(updateObjectIdentity, parentId, ownerSid, Boolean.valueOf(acl.isEntriesInheriting()), acl.getId()); if (count != 1) { throw new NotFoundException(\"Unable to locate ACL to update\"); } } \n### Response:", "ground_truth": "Updates an existing acl_object_identity row, with new information presented in the\npassed MutableAcl object. Also will create an acl_sid entry if needed for the Sid\nthat owns the MutableAcl.\n\n@param acl to modify (a row must already exist in acl_object_identity)\n\n@throws NotFoundException if the ACL could not be found to update.", "predict": "Updates the object identity of the object in the given ACL.\n\n@param acl the object's ACL"}
{"ID": 201, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void saveRequest(HttpServletRequest request, HttpServletResponse response) { if (requestMatcher.matches(request)) { DefaultSavedRequest savedRequest = new DefaultSavedRequest(request, portResolver); if (createSessionAllowed || request.getSession(false) != null) { // Store the HTTP request itself. Used by // AbstractAuthenticationProcessingFilter // for redirection after successful authentication (SEC-29) request.getSession().setAttribute(this.sessionAttrName, savedRequest); logger.debug(\"DefaultSavedRequest added to Session: \" + savedRequest); } } else { logger.debug(\"Request not saved as configured RequestMatcher did not match\"); } } \n### Response:", "ground_truth": "Stores the current request, provided the configuration properties allow it.", "predict": "Save the request to the session.\n\n@param request the request\n@param response the response"}
{"ID": 202, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ServerWebExchangeMatcher pathMatchers(HttpMethod method, String... patterns) { List<ServerWebExchangeMatcher> matchers = new ArrayList<>(patterns.length); for (String pattern : patterns) { matchers.add(new PathPatternParserServerWebExchangeMatcher(pattern, method)); } return new OrServerWebExchangeMatcher(matchers); } \n### Response:", "ground_truth": "Creates a matcher that matches on the specific method and any of the provided patterns.\n@param method the method to match on. If null, any method will be matched\n@param patterns the patterns to match on\n@return the matcher to use", "predict": "Returns a matcher that matches either of the given path patterns.\n\n@param method the HTTP method\n@param patterns the path patterns\n@return a matcher that matches either of the given path patterns"}
{"ID": 203, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ServerWebExchangeMatcher anyExchange() { // we don't use a lambda to ensure a unique equals and hashcode // which otherwise can cause problems with adding multiple entries to an ordered LinkedHashMap return new ServerWebExchangeMatcher() { @Override public Mono<MatchResult> matches(ServerWebExchange exchange) { return ServerWebExchangeMatcher.MatchResult.match(); } }; } \n### Response:", "ground_truth": "Matches any exchange\n@return the matcher to use", "predict": "Returns a matcher that matches any exchange."}
{"ID": 204, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static TextEncryptor delux(CharSequence password, CharSequence salt) { return new HexEncodingTextEncryptor(stronger(password, salt)); } \n### Response:", "ground_truth": "Creates a text encryptor that uses \"stronger\" password-based encryption. Encrypted\ntext is hex-encoded.\n\n@param password the password used to generate the encryptor's secret key; should\nnot be shared\n@see Encryptors#stronger(CharSequence, CharSequence)", "predict": "Encrypts the given password using the De Luxe encryption algorithm.\n\n@param password the password to encrypt\n@param salt the salt to use for the encryption\n@return the encrypted password"}
{"ID": 205, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static TextEncryptor text(CharSequence password, CharSequence salt) { return new HexEncodingTextEncryptor(standard(password, salt)); } \n### Response:", "ground_truth": "Creates a text encryptor that uses \"standard\" password-based encryption. Encrypted\ntext is hex-encoded.\n\n@param password the password used to generate the encryptor's secret key; should\nnot be shared\n@see Encryptors#standard(CharSequence, CharSequence)", "predict": "Encrypts the given password using the given salt.\n\n@param password the password to encrypt\n@param salt the salt to use\n@return the encryptor"}
{"ID": 206, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static TextEncryptor queryableText(CharSequence password, CharSequence salt) { return new HexEncodingTextEncryptor(new AesBytesEncryptor(password.toString(), salt)); } \n### Response:", "ground_truth": "Creates an encryptor for queryable text strings that uses standard password-based\nencryption. Uses a 16-byte all-zero initialization vector so encrypting the same\ndata results in the same encryption result. This is done to allow encrypted data to\nbe queried against. Encrypted text is hex-encoded.\n\n@param password the password used to generate the encryptor's secret key; should\nnot be shared\n@param salt a hex-encoded, random, site-global salt value to use to generate the\nsecret key", "predict": "Encrypts a queryable text using the specified password and salt.\n\n@param password the password to encrypt\n@param salt the salt to use\n@return the text encryptor"}
{"ID": 207, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void writeHeaders(HttpServletRequest request, HttpServletResponse response) { if (XFrameOptionsMode.ALLOW_FROM.equals(frameOptionsMode)) { String allowFromValue = this.allowFromStrategy.getAllowFromValue(request); if (XFrameOptionsMode.DENY.getMode().equals(allowFromValue)) { if (!response.containsHeader(XFRAME_OPTIONS_HEADER)) { response.setHeader(XFRAME_OPTIONS_HEADER, XFrameOptionsMode.DENY.getMode()); } } else if (allowFromValue != null) { if (!response.containsHeader(XFRAME_OPTIONS_HEADER)) { response.setHeader(XFRAME_OPTIONS_HEADER, XFrameOptionsMode.ALLOW_FROM.getMode() + \" \" + allowFromValue); } } } else { response.setHeader(XFRAME_OPTIONS_HEADER, frameOptionsMode.getMode()); } } \n### Response:", "ground_truth": "Writes the X-Frame-Options header value, overwritting any previous value.\n\n@param request the servlet request\n@param response the servlet response", "predict": "Writes the X-Frame-Options header to the response.\n\n@param request the request\n@param response the response"}
{"ID": 208, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String determineTargetUrl(HttpServletRequest request, HttpServletResponse response, Authentication authentication) { return determineTargetUrl(request, response); } \n### Response:", "ground_truth": "Builds the target URL according to the logic defined in the main class Javadoc\n\n@since 5.2", "predict": "Determine the target URL for the request.\n\n@param request the request\n@param response the response\n@param authentication the authentication\n@return the target URL"}
{"ID": 209, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String determineTargetUrl(HttpServletRequest request, HttpServletResponse response) { if (isAlwaysUseDefaultTargetUrl()) { return defaultTargetUrl; } // Check for the parameter and use that if available String targetUrl = null; if (targetUrlParameter != null) { targetUrl = request.getParameter(targetUrlParameter); if (StringUtils.hasText(targetUrl)) { logger.debug(\"Found targetUrlParameter in request: \" + targetUrl); return targetUrl; } } if (useReferer && !StringUtils.hasLength(targetUrl)) { targetUrl = request.getHeader(\"Referer\"); logger.debug(\"Using Referer header: \" + targetUrl); } if (!StringUtils.hasText(targetUrl)) { targetUrl = defaultTargetUrl; logger.debug(\"Using default Url: \" + targetUrl); } return targetUrl; } \n### Response:", "ground_truth": "Builds the target URL according to the logic defined in the main class Javadoc.", "predict": "Determine the target URL based on the request parameters and the Referer header.\n\n@param request the request\n@param response the response\n@return the target URL"}
{"ID": 210, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setTargetUrlParameter(String targetUrlParameter) { if (targetUrlParameter != null) { Assert.hasText(targetUrlParameter, \"targetUrlParameter cannot be empty\"); } this.targetUrlParameter = targetUrlParameter; } \n### Response:", "ground_truth": "If this property is set, the current request will be checked for this a parameter\nwith this name and the value used as the target URL if present.\n\n@param targetUrlParameter the name of the parameter containing the encoded target\nURL. Defaults to null.", "predict": "Sets the target URL parameter.\n\n@param targetUrlParameter the target URL parameter"}
{"ID": 211, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Directory getDirectoryWithImmediateParentPopulated(final Long id) { return getJdbcTemplate().queryForObject(SELECT_FROM_DIRECTORY_SINGLE, new Object[] { id }, new RowMapper<Directory>() { public Directory mapRow(ResultSet rs, int rowNumber) throws SQLException { Long parentDirectoryId = new Long(rs .getLong(\"parent_directory_id\")); Directory parentDirectory = Directory.ROOT_DIRECTORY; if (parentDirectoryId != null && !parentDirectoryId.equals(new Long(-1))) { // Need to go and lookup the parent, so do that first parentDirectory = getDirectoryWithImmediateParentPopulated(parentDirectoryId); } Directory directory = new Directory(rs .getString(\"directory_name\"), parentDirectory); FieldUtils.setProtectedFieldValue(\"id\", directory, new Long(rs.getLong(\"id\"))); return directory; } }); } \n### Response:", "ground_truth": "Executes recursive SQL as needed to build a full Directory hierarchy of objects", "predict": "Get a directory with an immediate parent.\n\n@param id the id of the directory to get\n@return the directory\n@throws SQLException on database error"}
{"ID": 212, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public DistinguishedName buildDn(String username) { DistinguishedName dn = new DistinguishedName(userDnBase); dn.add(usernameAttribute, username); return dn; } \n### Response:", "ground_truth": "Assembles the Distinguished Name that should be used the given username.", "predict": "Build a DN from a username.\n\n@param username the username\n@return the DN"}
{"ID": 213, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Map<Class<? extends Object>, Object> createSharedObjects() { Map<Class<? extends Object>, Object> sharedObjects = new HashMap<Class<? extends Object>, Object>(); sharedObjects.putAll(localConfigureAuthenticationBldr.getSharedObjects()); sharedObjects.put(UserDetailsService.class, userDetailsService()); sharedObjects.put(ApplicationContext.class, context); sharedObjects.put(ContentNegotiationStrategy.class, contentNegotiationStrategy); sharedObjects.put(AuthenticationTrustResolver.class, trustResolver); return sharedObjects; } \n### Response:", "ground_truth": "Creates the shared objects\n\n@return the shared Objects", "predict": "Creates the shared objects.\n\n@return the shared objects"}
{"ID": 214, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void configureJaasUsingLoop() throws IOException { String loginConfigUrl = convertLoginConfigToUrl(); boolean alreadySet = false; int n = 1; final String prefix = \"login.config.url.\"; String existing; while ((existing = Security.getProperty(prefix + n)) != null) { alreadySet = existing.equals(loginConfigUrl); if (alreadySet) { break; } n++; } if (!alreadySet) { String key = prefix + n; log.debug(\"Setting security property [\" + key + \"] to: \" + loginConfigUrl); Security.setProperty(key, loginConfigUrl); } } \n### Response:", "ground_truth": "Loops through the login.config.url.1,login.config.url.2 properties looking for the\nlogin configuration. If it is not set, it will be set to the last available\nlogin.config.url.X property.", "predict": "Iterate through the properties and set the login config url.\n\n@throws IOException"}
{"ID": 215, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String getCurrentDate() { long now = System.currentTimeMillis(); if ((now - currentDateGenerated) > 1000) { synchronized (format) { if ((now - currentDateGenerated) > 1000) { currentDateGenerated = now; currentDate = format.format(new Date(now)); } } } return currentDate; } \n### Response:", "ground_truth": "Gets the current date in HTTP format.\n\n@return Current date in HTTP format", "predict": "Get the current date in the format \"yyyy-MM-dd\"\n\n@return the current date"}
{"ID": 216, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static Long internalParseDate(String value, DateFormat[] formats) { Date date = null; for (int i = 0; (date == null) && (i < formats.length); i++) { try { date = formats[i].parse(value); } catch (ParseException ignored) { } } if (date == null) { return null; } return new Long(date.getTime()); } \n### Response:", "ground_truth": "Parses date with given formatters.\n\n@param value The string to parse\n@param formats Array of formats to use\n\n@return Parsed date (or <code>null</code> if no formatter mached)", "predict": "Parse a date from a string.\n\n@param value the date to parse\n@param formats the formats to parse the date from\n@return the parsed date"}
{"ID": 217, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") private static void updateCache(HashMap cache, Object key, Object value) { if (value == null) { return; } if (cache.size() > 1000) { cache.clear(); } cache.put(key, value); } \n### Response:", "ground_truth": "Updates cache.\n\n@param cache Cache to be updated\n@param key Key to be updated\n@param value New value", "predict": "Update the cache.\n\n@param cache the cache\n@param key the key\n@param value the value"}
{"ID": 218, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void setDetails(HttpServletRequest request, UsernamePasswordAuthenticationToken authRequest) { authRequest.setDetails(authenticationDetailsSource.buildDetails(request)); } \n### Response:", "ground_truth": "Provided so that subclasses may configure what is put into the authentication\nrequest's details property.\n\n@param request that an authentication request is being created for\n@param authRequest the authentication request object that should have its details\nset", "predict": "Sets the authentication request details.\n\n@param request the request\n@param authRequest the authentication request"}
{"ID": 219, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static String getSecurityName(final Subject subject) { if (logger.isDebugEnabled()) { logger.debug(\"Determining Websphere security name for subject \" + subject); } String userSecurityName = null; if (subject != null) { // SEC-803 Object credential = subject.getPublicCredentials(getWSCredentialClass()) .iterator().next(); if (credential != null) { userSecurityName = (String) invokeMethod(getSecurityNameMethod(), credential); } } if (logger.isDebugEnabled()) { logger.debug(\"Websphere security name is \" + userSecurityName + \" for subject \" + subject); } return userSecurityName; } \n### Response:", "ground_truth": "Get the security name for the given subject.\n\n@param subject The subject for which to retrieve the security name\n@return String the security name for the given subject", "predict": "Get the security name for the given subject.\n\n@param subject the subject\n@return the security name"}
{"ID": 220, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") private static List<String> getWebSphereGroups(final String securityName) { Context ic = null; try { // TODO: Cache UserRegistry object ic = new InitialContext(); Object objRef = ic.lookup(USER_REGISTRY); Object userReg = invokeMethod(getNarrowMethod(), null , objRef, Class.forName(\"com.ibm.websphere.security.UserRegistry\")); if (logger.isDebugEnabled()) { logger.debug(\"Determining WebSphere groups for user \" + securityName + \" using WebSphere UserRegistry \" + userReg); } final Collection groups = (Collection) invokeMethod(getGroupsForUserMethod(), userReg, new Object[] { securityName }); if (logger.isDebugEnabled()) { logger.debug(\"Groups for user \" + securityName + \": \" + groups.toString()); } return new ArrayList(groups); } catch (Exception e) { logger.error(\"Exception occured while looking up groups for user\", e); throw new RuntimeException( \"Exception occured while looking up groups for user\", e); } finally { try { if (ic != null) { ic.close(); } } catch (NamingException e) { logger.debug(\"Exception occured while closing context\", e); } } } \n### Response:", "ground_truth": "Get the WebSphere group names for the given security name.\n\n@param securityName The security name for which to retrieve the WebSphere group\nnames\n@return the WebSphere group names for the given security name", "predict": "Returns a list of groups for a user.\n\n@param securityName\nThe user's security name.\n@return The list of groups for the user."}
{"ID": 221, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void changePassword(final String oldPassword, final String newPassword) { Authentication authentication = SecurityContextHolder.getContext() .getAuthentication(); Assert.notNull( authentication, \"No authentication object found in security context. Can't change current user's password!\"); String username = authentication.getName(); logger.debug(\"Changing password for user '\" + username); DistinguishedName userDn = usernameMapper.buildDn(username); if (usePasswordModifyExtensionOperation) { changePasswordUsingExtensionOperation(userDn, oldPassword, newPassword); } else { changePasswordUsingAttributeModification(userDn, oldPassword, newPassword); } } \n### Response:", "ground_truth": "Changes the password for the current user. The username is obtained from the\nsecurity context.\n\nThere are two supported strategies for modifying the user's password depending on\nthe capabilities of the corresponding LDAP server.\n\n<p>\nConfigured one way, this method will modify the user's password via the\n<a target=\"_blank\" href=\"https://tools.ietf.org/html/rfc3062\">\nLDAP Password Modify Extended Operation\n</a>.\n\nSee {@link LdapUserDetailsManager#setUsePasswordModifyExtensionOperation(boolean)} for details.\n</p>\n\n<p>\nBy default, though, if the old password is supplied, the update will be made by rebinding as the user,\nthus modifying the password using the user's permissions. If\n<code>oldPassword</code> is null, the update will be attempted using a standard\nread/write context supplied by the context source.\n</p>\n\n@param oldPassword the old password\n@param newPassword the new value of the password.", "predict": "Change password for the user.\n\n@param oldPassword old password\n@param newPassword new password"}
{"ID": 222, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected DistinguishedName buildGroupDn(String group) { DistinguishedName dn = new DistinguishedName(groupSearchBase); dn.add(groupRoleAttributeName, group.toLowerCase()); return dn; } \n### Response:", "ground_truth": "Creates a DN from a group name.\n\n@param group the name of the group\n@return the DN of the corresponding group, including the groupSearchBase", "predict": "Build the group DN.\n\n@param group the group name\n@return the DN"}
{"ID": 223, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void allowableSessionsExceeded(List<SessionInformation> sessions, int allowableSessions, SessionRegistry registry) throws SessionAuthenticationException { if (exceptionIfMaximumExceeded || (sessions == null)) { throw new SessionAuthenticationException(messages.getMessage( \"ConcurrentSessionControlAuthenticationStrategy.exceededAllowed\", new Object[] { Integer.valueOf(allowableSessions) }, \"Maximum sessions of {0} for this principal exceeded\")); } // Determine least recently used session, and mark it for invalidation SessionInformation leastRecentlyUsed = null; for (SessionInformation session : sessions) { if ((leastRecentlyUsed == null) || session.getLastRequest() .before(leastRecentlyUsed.getLastRequest())) { leastRecentlyUsed = session; } } leastRecentlyUsed.expireNow(); } \n### Response:", "ground_truth": "Allows subclasses to customise behaviour when too many sessions are detected.\n\n@param sessions either <code>null</code> or all unexpired sessions associated with\nthe principal\n@param allowableSessions the number of concurrent sessions the user is allowed to\nhave\n@param registry an instance of the <code>SessionRegistry</code> for subclass use", "predict": "Determines the least recently used sessions and expire them.\n\n@param sessions\n@param allowableSessions\n@param registry\n@throws SessionAuthenticationException"}
{"ID": 224, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void copyDetails(Authentication source, Authentication dest) { if ((dest instanceof AbstractAuthenticationToken) && (dest.getDetails() == null)) { AbstractAuthenticationToken token = (AbstractAuthenticationToken) dest; token.setDetails(source.getDetails()); } } \n### Response:", "ground_truth": "Copies the authentication details from a source Authentication object to a\ndestination one, provided the latter does not already have one set.\n\n@param source source authentication\n@param dest the destination authentication object", "predict": "Copies the source's details to the destination.\n\n@param source the source\n@param dest the destination"}
{"ID": 225, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private List<Filter> getFilters(HttpServletRequest request) { for (SecurityFilterChain chain : filterChains) { if (chain.matches(request)) { return chain.getFilters(); } } return null; } \n### Response:", "ground_truth": "Returns the first filter chain matching the supplied URL.\n\n@param request the request to match\n@return an ordered array of Filters defining the filter chain", "predict": "Returns the list of filters that match the request.\n\n@param request the request\n@return the list of filters"}
{"ID": 226, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<Filter> getFilters(String url) { return getFilters(firewall.getFirewalledRequest((new FilterInvocation(url, \"GET\") .getRequest()))); } \n### Response:", "ground_truth": "Convenience method, mainly for testing.\n\n@param url the URL\n@return matching filter list", "predict": "Returns the list of filters for the given URL.\n\n@param url The URL to filter\n@return The list of filters"}
{"ID": 227, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected ApplicationContext getContext(PageContext pageContext) { ServletContext servletContext = pageContext.getServletContext(); return SecurityWebApplicationContextUtils.findRequiredWebApplicationContext(servletContext); } \n### Response:", "ground_truth": "Allows test cases to override where application context obtained from.\n\n@param pageContext so the <code>ServletContext</code> can be accessed as required\nby Spring's <code>WebApplicationContextUtils</code>\n\n@return the Spring application context (never <code>null</code>)", "predict": "Get the context from the page context.\n\n@param pageContext the page context\n@return the context"}
{"ID": 228, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static DistinguishedName getFullDn(DistinguishedName dn, Context baseCtx) throws NamingException { DistinguishedName baseDn = new DistinguishedName(baseCtx.getNameInNamespace()); if (dn.contains(baseDn)) { return dn; } baseDn.append(dn); return baseDn; } \n### Response:", "ground_truth": "Gets the full dn of a name by prepending the name of the context it is relative to.\nIf the name already contains the base name, it is returned unaltered.", "predict": "Get the full DN of the given DN.\n\n@param dn the DN to get the full DN of\n@param baseCtx the context to use\n@return the full DN of the given DN\n@throws NamingException if the given DN is not a valid DN"}
{"ID": 229, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public MockMvcRequestSpecification sessionAttrs(Map<String, Object> sessionAttributes) { notNull(sessionAttributes, \"sessionAttributes\"); parameterUpdater.updateParameters(convert(cfg.getMockMvcParamConfig().sessionAttributesUpdateStrategy()), sessionAttributes, this.sessionAttributes); return this; } \n### Response:", "ground_truth": "Set session attributes.\n\n@param sessionAttributes the session attributes", "predict": "Sets the session attributes.\n\n@param sessionAttributes the session attributes\n@return the MockMvcRequestSpecification"}
{"ID": 230, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public AuthenticationScheme basic(String userName, String password) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme(); preemptiveBasicAuthScheme.setUserName(userName); preemptiveBasicAuthScheme.setPassword(password); return preemptiveBasicAuthScheme; } \n### Response:", "ground_truth": "Use preemptive http basic authentication. This means that the authentication details are sent in the request\nheader regardless if the server has challenged for authentication or not.\n\n@param userName The user name.\n@param password The password.\n\n@return The Request specification", "predict": "Creates a basic authentication scheme.\n\n@param userName the username\n@param password the password\n@return the authentication scheme"}
{"ID": 231, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void filters(List<Filter> filters) { Validate.notNull(filters, \"Filter list cannot be null\"); RestAssured.filters.addAll(filters); } \n### Response:", "ground_truth": "Add default filters that will be applied to each request.\n\n@param filters The filter list", "predict": "Adds a list of filters to the request.\n\n@param filters the list of filters to add"}
{"ID": 232, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void filters(Filter filter, Filter... additionalFilters) { Validate.notNull(filter, \"Filter cannot be null\"); RestAssured.filters.add(filter); if (additionalFilters != null) { Collections.addAll(RestAssured.filters, additionalFilters); } } \n### Response:", "ground_truth": "Add default filters to apply to each request.\n\n@param filter            The filter to add\n@param additionalFilters An optional array of additional filters to add", "predict": "Adds a filter to the RestAssured client.\n\n@param filter the filter to add\n@param additionalFilters the additional filters to add"}
{"ID": 233, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static AuthenticationScheme basic(String userName, String password) { final BasicAuthScheme scheme = new BasicAuthScheme(); scheme.setUserName(userName); scheme.setPassword(password); return scheme; } \n### Response:", "ground_truth": "Create a http basic authentication scheme.\n\n@param userName The user name.\n@param password The password.\n@return The authentication scheme", "predict": "Create a basic authentication scheme.\n\n@param userName the username\n@param password the password\n@return the authentication scheme"}
{"ID": 234, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static AuthenticationScheme ntlm(String userName, String password, String workstation, String domain) { final NTLMAuthScheme scheme = new NTLMAuthScheme(); scheme.setUserName(userName); scheme.setPassword(password); scheme.setWorkstation(workstation); scheme.setDomain(domain); return scheme; } \n### Response:", "ground_truth": "Create a NTLM authentication scheme.\n\n@param userName The user name.\n@param password The password.\n@param workstation The NTLM workstation.\n@param domain The NTLM workstation.\n@return The authentication scheme", "predict": "Create a NTLM authentication scheme.\n\n@param userName the username\n@param password the password\n@param workstation the workstation\n@param domain the domain\n@return the authentication scheme"}
{"ID": 235, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static AuthenticationScheme form(String userName, String password, FormAuthConfig config) { if (userName == null) { throw new IllegalArgumentException(\"Username cannot be null\"); } if (password == null) { throw new IllegalArgumentException(\"Password cannot be null\"); } final FormAuthScheme scheme = new FormAuthScheme(); scheme.setUserName(userName); scheme.setPassword(password); scheme.setConfig(config); return scheme; } \n### Response:", "ground_truth": "Use form authentication with the supplied configuration.\n\n@param userName The user name.\n@param password The password.\n@param config   The form authentication config\n@return The authentication scheme", "predict": "Create a new authentication scheme based on the given username and password.\n\n@param userName the username\n@param password the password\n@param config the configuration\n@return the authentication scheme"}
{"ID": 236, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void proxy(URI uri) { if (uri == null) { throw new IllegalArgumentException(\"Proxy URI cannot be null\"); } proxy(new ProxySpecification(uri.getHost(), uri.getPort(), uri.getScheme())); } \n### Response:", "ground_truth": "Instruct REST Assured to connect to a proxy using a URI.\n\n@param uri The URI of the proxy", "predict": "Proxy the specified URI to the specified proxy server.\n\n@param uri the URI to proxy\n@throws IllegalArgumentException if the URI is null"}
{"ID": 237, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String print(ResponseOptions responseOptions, ResponseBody responseBody, PrintStream stream, LogDetail logDetail, boolean shouldPrettyPrint) { final StringBuilder builder = new StringBuilder(); if (logDetail == ALL || logDetail == STATUS) { builder.append(responseOptions.statusLine()); } if (logDetail == ALL || logDetail == HEADERS) { final Headers headers = responseOptions.headers(); if (headers.exist()) { appendNewLineIfAll(logDetail, builder).append(toString(headers)); } } else if (logDetail == COOKIES) { final Cookies cookies = responseOptions.detailedCookies(); if (cookies.exist()) { appendNewLineIfAll(logDetail, builder).append(cookies.toString()); } } if (logDetail == ALL || logDetail == BODY) { String responseBodyToAppend; if (shouldPrettyPrint) { responseBodyToAppend = new Prettifier().getPrettifiedBodyIfPossible(responseOptions, responseBody); } else { responseBodyToAppend = responseBody.asString(); } if (logDetail == ALL && !isBlank(responseBodyToAppend)) { builder.append(SystemUtils.LINE_SEPARATOR).append(SystemUtils.LINE_SEPARATOR); } builder.append(responseBodyToAppend); } String response = builder.toString(); stream.println(response); return response; } \n### Response:", "ground_truth": "Prints the response to the print stream\n\n@return A string of representing the response", "predict": "Prints the response body to the stream.\n\n@param responseOptions\n@param responseBody\n@param stream\n@param logDetail\n@param shouldPrettyPrint\n@return"}
{"ID": 238, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public RestAssuredConfig redirect(RedirectConfig redirectConfig) { notNull(redirectConfig, \"Redirect config\"); return new RestAssuredConfig(redirectConfig, conf(HttpClientConfig.class), conf(LogConfig.class), conf(EncoderConfig.class), conf(DecoderConfig.class), conf(SessionConfig.class), conf(ObjectMapperConfig.class), conf(ConnectionConfig.class), conf(JsonConfig.class), conf(XmlConfig.class), conf(SSLConfig.class), conf(MatcherConfig.class), conf(HeaderConfig.class), conf(MultiPartConfig.class), conf(ParamConfig.class), conf(OAuthConfig.class), conf(FailureConfig.class)); } \n### Response:", "ground_truth": "Set the redirect config.\n\n@param redirectConfig The {@link RedirectConfig} to set\n@return An updated RestAssuredConfiguration", "predict": "Redirect configuration.\n\n@param redirectConfig the redirect config\n@return the rest ured config"}
{"ID": 239, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public EncoderConfig defaultQueryParameterCharset(String charset) { return new EncoderConfig(defaultContentCharset, charset, shouldAppendDefaultContentCharsetToContentTypeIfUndefined, contentEncoders, contentTypeToDefaultCharset, true); } \n### Response:", "ground_truth": "Specify the default charset for query parameters\n\n@param charset The charset to use.\n@return A new instance of {@link EncoderConfig}", "predict": "Sets the default query parameter charset.\n\n@param charset the charset to use\n@return the encoder config"}
{"ID": 240, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ObjectMapperConfig defaultObjectMapperType(ObjectMapperType defaultObjectMapperType) { return new ObjectMapperConfig(defaultObjectMapper, defaultObjectMapperType, gsonObjectMapperFactory, jackson1ObjectMapperFactory, jackson2ObjectMapperFactory, jaxbObjectMapperFactory, johnzonObjectMapperFactory, true); } \n### Response:", "ground_truth": "Creates an object mapper configuration that uses the specified object mapper as default.\n\n@param defaultObjectMapperType The object mapper to use. If <code>null</code> then classpath scanning will be used.", "predict": "Sets the default ObjectMapperType.\n\n@param defaultObjectMapperType the default ObjectMapperType\n@return the ObjectMapperConfig"}
{"ID": 241, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ObjectMapperConfig jaxbObjectMapperFactory(JAXBObjectMapperFactory jaxbObjectMapperFactory) { return new ObjectMapperConfig(defaultObjectMapper, defaultObjectMapperType, gsonObjectMapperFactory, jackson1ObjectMapperFactory, jackson2ObjectMapperFactory, jaxbObjectMapperFactory, johnzonObjectMapperFactory, true); } \n### Response:", "ground_truth": "Specify a custom JAXB object mapper factory.\n\n@param jaxbObjectMapperFactory The object mapper factory", "predict": "Sets the JAXB ObjectMapperFactory to use.\n\n@param jaxbObjectMapperFactory the JAXB ObjectMapperFactory to use\n@return the ObjectMapperConfig"}
{"ID": 242, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public RestAssuredMockMvcConfig logConfig(LogConfig logConfig) { notNull(logConfig, \"Log config\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); } \n### Response:", "ground_truth": "Set the Log config.\n\n@param logConfig The {@link LogConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Overrides the default mockMvcConfig to include the log configuration.\n\n@param logConfig the configuration to use for logging\n@return the configuration to use for logging"}
{"ID": 243, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public RestAssuredMockMvcConfig sessionConfig(SessionConfig sessionConfig) { notNull(sessionConfig, \"Session config\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); } \n### Response:", "ground_truth": "Set the session config.\n\n@param sessionConfig The {@link SessionConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Gets the session config.\n\n@param sessionConfig the session config\n@return the session config"}
{"ID": 244, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public RestAssuredMockMvcConfig objectMapperConfig(ObjectMapperConfig objectMapperConfig) { notNull(objectMapperConfig, \"Object mapper config\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); } \n### Response:", "ground_truth": "Set the object mapper config.\n\n@param objectMapperConfig The {@link ObjectMapperConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Gets object mapper config.\n\n@param objectMapperConfig the object mapper config\n@return the object mapper config"}
{"ID": 245, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public RestAssuredMockMvcConfig jsonConfig(JsonConfig jsonConfig) { notNull(jsonConfig, \"JsonConfig\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); } \n### Response:", "ground_truth": "Set the Json config.\n\n@param jsonConfig The {@link JsonConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Sets the JSON configuration for the mockMvc.\n\n@param jsonConfig the JSON configuration\n@return the RestAssuredMockMvcConfig"}
{"ID": 246, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public RestAssuredMockMvcConfig xmlConfig(XmlConfig xmlConfig) { notNull(xmlConfig, \"XmlConfig\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); } \n### Response:", "ground_truth": "Set the Xml config.\n\n@param xmlConfig The {@link XmlConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Sets the xml config.\n@param xmlConfig the xml config\n@return the rest asured mockMvc config"}
{"ID": 247, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public RestAssuredMockMvcConfig encoderConfig(EncoderConfig encoderConfig) { notNull(encoderConfig, \"EncoderConfig\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); } \n### Response:", "ground_truth": "Set the encoder config\n\n@param encoderConfig The {@link EncoderConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Gets the encoder config.\n\n@param encoderConfig the encoder config\n@return the encoder config"}
{"ID": 248, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public RestAssuredMockMvcConfig headerConfig(HeaderConfig headerConfig) { notNull(headerConfig, \"HeaderConfig\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); } \n### Response:", "ground_truth": "Set the header config\n\n@param headerConfig The {@link HeaderConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Gets the header configuration.\n\n@param headerConfig the header configuration\n@return the header configuration"}
{"ID": 249, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public RestAssuredMockMvcConfig asyncConfig(AsyncConfig asyncConfig) { notNull(asyncConfig, AsyncConfig.class); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); } \n### Response:", "ground_truth": "Set the async config\n\n@param asyncConfig The {@link AsyncConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Gets the async config.\n\n@param asyncConfig the async config\n@return the async config"}
{"ID": 250, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public RestAssuredMockMvcConfig mockMvcConfig(MockMvcConfig mockMvcConfig) { notNull(mockMvcConfig, MockMvcConfig.class); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); } \n### Response:", "ground_truth": "Set the MockMVC config\n\n@param mockMvcConfig The {@link MockMvcConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Gets the mockMvcConfig.\n\n@param mockMvcConfig the mockMvcConfig\n@return the mockMvcConfig"}
{"ID": 251, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public RestAssuredMockMvcConfig multiPartConfig(MultiPartConfig multiPartConfig) { notNull(multiPartConfig, MultiPartConfig.class); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); } \n### Response:", "ground_truth": "Set the multi-part config\n\n@param multiPartConfig The {@link MultiPartConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Sets the mockMvc configuration for the multi-part request.\n\n@param multiPartConfig the mockMvc configuration for the multi-part request\n@return the mockMvc configuration for the multi-part request"}
{"ID": 252, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public RestAssuredMockMvcConfig paramConfig(MockMvcParamConfig paramConfig) { notNull(paramConfig, MultiPartConfig.class); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); } \n### Response:", "ground_truth": "Set the parameter config\n\n@param paramConfig The {@link MockMvcParamConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Sets the mock param config.\n\n@param paramConfig the mock param config\n@return the rest asured mock config"}
{"ID": 253, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public RestAssuredMockMvcConfig matcherConfig(MatcherConfig matcherConfig) { notNull(matcherConfig, MatcherConfig.class); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); } \n### Response:", "ground_truth": "Set the matcher config\n\n@param matcherConfig The {@link MockMvcParamConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Gets the matcher configuration.\n\n@param matcherConfig the matcher configuration\n@return the matcher configuration"}
{"ID": 254, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public CertificateAuthSettings allowAllHostnames() { return new CertificateAuthSettings(keystoreType, trustStoreType, port, trustStore, keyStore, ALLOW_ALL_HOSTNAME_VERIFIER, sslSocketFactory); } \n### Response:", "ground_truth": "Configure the CertificateAuthSettings to allow all host names.\n\n@return A new CertificateAuthSettings instance\n@see org.apache.http.conn.ssl.SSLSocketFactory#ALLOW_ALL_HOSTNAME_VERIFIER", "predict": "Creates a settings object that allows all hostnames.\n\n@return the settings object"}
{"ID": 255, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public XmlPathConfig declareNamespaces(Map<String, String> namespacesToDeclare) { return new XmlPathConfig(jaxbObjectMapperFactory, defaultParserType, defaultDeserializer, charset, features, namespacesToDeclare, properties, validating, namespaceAware, allowDocTypeDeclaration); } \n### Response:", "ground_truth": "Specify declared namespaces that will be used when parsing XML.\n\n@param namespacesToDeclare A map containing features that will be used by the underlying {@link groovy.util.XmlSlurper}.\n@return A new instance of XmlPathConfig\n@see org.xml.sax.XMLReader#setFeature(java.lang.String, boolean)", "predict": "Declares the namespaces to be used in the XML path.\n\n@param namespacesToDeclare the namespaces to declare\n@return the XmlPathConfig"}
{"ID": 256, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public XmlPathConfig declaredNamespace(String prefix, String namespaceURI) { Validate.notEmpty(prefix, \"Prefix cannot be empty\"); Validate.notEmpty(namespaceURI, \"Namespace URI cannot be empty\"); Map<String, String> updatedNamespaces = new HashMap<String, String>(declaredNamespaces); updatedNamespaces.put(prefix, namespaceURI); return new XmlPathConfig(jaxbObjectMapperFactory, defaultParserType, defaultDeserializer, charset, features, updatedNamespaces, properties, validating, true, allowDocTypeDeclaration); } \n### Response:", "ground_truth": "Declares a namespace.\n\n@param prefix       The feature name, which is a fully-qualified URI.\n@param namespaceURI The requested value of the feature (true or false).\n@return A new XmlPathConfig instance\n@see org.xml.sax.XMLReader#setFeature(java.lang.String, boolean)", "predict": "Declares a new namespace.\n\n@param prefix the prefix\n@param namespaceURI the namespace URI\n@return the XmlPathConfig"}
{"ID": 257, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object request(String method, boolean hasBody, Closure configClosure) throws ClientProtocolException, IOException { return this.doRequest(this.defaultURI.toURI(), method, this.defaultContentType, hasBody, configClosure); } \n### Response:", "ground_truth": "Make an HTTP request to the default URI, and parse using the default\ncontent-type.\n\n@param method        {@link HttpRequestFactory HTTP method}\n@param configClosure request configuration options\n@return whatever value was returned by the executed response handler.\n@throws ClientProtocolException\n@throws IOException\n@see #request(Object, HttpRequestFactory, Object, Closure)", "predict": "Performs a request to the server.\n\n@param method the HTTP method to use\n@param hasBody true if the request has a body\n@param configClosure the request config closure\n@return the response object\n@throws ClientProtocolException if an error occurred during the request\n@throws IOException if an I/O error occurred"}
{"ID": 258, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setHeaders(Map<?, ?> headers) { this.defaultRequestHeaders.clear(); if (headers == null) return; for (Object key : headers.keySet()) { Object val = headers.get(key); if (val == null) continue; this.defaultRequestHeaders.put(key.toString(), val.toString()); } } \n### Response:", "ground_truth": "Set the default headers to add to all requests made by this builder\ninstance.  These values will replace any previously set default headers.\n\n@param headers map of header names & values.", "predict": "Sets the request headers.\n\n@param headers the headers"}
{"ID": 259, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setProxy(String host, int port, String scheme) { getClient().getParams().setParameter( ConnRoutePNames.DEFAULT_PROXY, new HttpHost(host, port, scheme)); } \n### Response:", "ground_truth": "Set the default HTTP proxy to be used for all requests.\n\n@param host   host name or IP\n@param port   port, or -1 for the default port\n@param scheme usually \"http\" or \"https,\" or <code>null</code> for the default\n@see HttpHost#HttpHost(String, int, String)", "predict": "Sets the proxy host, port and scheme.\n\n@param host\n@param port\n@param scheme"}
{"ID": 260, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public MultiPartSpecBuilder controlName(String controlName) { Validate.notEmpty(controlName, \"Control name cannot be empty\"); this.controlName = controlName; this.isControlNameExplicit = true; return this; } \n### Response:", "ground_truth": "Specify the control name of this multi-part.\n\n@param controlName The control name to use. Default is <code>file</code>.\n@return An instance of MultiPartSpecBuilder", "predict": "Sets the name of the control.\n\n@param controlName the name of the control\n@return the builder itself"}
{"ID": 261, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public MultiPartSpecBuilder header(String name, String value) { Validate.notEmpty(name, \"Header name cannot be empty\"); Validate.notEmpty(value, \"Header value cannot be empty\"); // Replace previous header if exists final Set<String> headerNames = headers.keySet(); final String trimmedName = name.trim(); for (String headerName : headerNames) { if (headerName.equalsIgnoreCase(trimmedName)) { headers.remove(headerName); } } // Put the name header in the header list headers.put(name, value); return this; } \n### Response:", "ground_truth": "Add a header to this multipart specification.\n\n@param name The name of the header\n@param value The value of the header\n@return An instance of MultiPartSpecBuilder", "predict": "Add a new header to the list of headers.\n\n@param name The name of the header.\n@param value The value of the header.\n@return This builder."}
{"ID": 262, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void basic(String host, int port, String user, String pass) { builder.getClient().getCredentialsProvider().setCredentials( new AuthScope(host, port), new UsernamePasswordCredentials(user, pass) ); } \n### Response:", "ground_truth": "Set authentication credentials to be used for the given host and port.\n\n@param host\n@param port\n@param user\n@param pass", "predict": "Basic authentication.\n\n@param host\n@param port\n@param user\n@param pass"}
{"ID": 263, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void ntlm(String host, int port, String user, String pass, String workstation, String domain) { builder.getClient().getCredentialsProvider().setCredentials( new AuthScope(host, port), new NTCredentials(user, pass, workstation, domain) ); } \n### Response:", "ground_truth": "Set NTLM authentication credentials to be used for the given host and port.\n\n@param host\n@param port\n@param user\n@param pass\n@param workstation\n@param domain", "predict": "Authenticates to the NTLM server.\n\n@param host\n@param port\n@param user\n@param pass\n@param workstation\n@param domain"}
{"ID": 264, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Headers headers(Header header, Header... additionalHeaders) { notNull(header, \"Header\"); final List<Header> headerList = new LinkedList<Header>(); headerList.add(header); if (additionalHeaders != null) { Collections.addAll(headerList, additionalHeaders); } return new Headers(headerList); } \n### Response:", "ground_truth": "An alternative way to create a Headers object from the constructor.\n\n@param header            The header to be included\n@param additionalHeaders Additional headers to be included (optional)\n@return A new headers object containing the specified headers", "predict": "Create a new Headers object with the given headers.\n\n@param header the header to add\n@param additionalHeaders the additional headers\n@return a new Headers object"}
{"ID": 265, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void reset() { mockMvcFactory = null; config = null; basePath = \"/\"; resultHandlers.clear(); requestPostProcessors.clear(); responseSpecification = null; requestSpecification = null; authentication = null; } \n### Response:", "ground_truth": "Reset all static configurations to their default values.", "predict": "Resets the mockMvc configuration."}
{"ID": 266, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ResponseBuilder setHeader(String name, String value) { notNull(name, \"Header name\"); notNull(value, \"Header value\"); List<Header> newHeaders = new ArrayList<Header>(restAssuredResponse.headers().asList()); newHeaders.add(new Header(name, value)); restAssuredResponse.setResponseHeaders(new Headers(newHeaders)); if (trim(name).equalsIgnoreCase(CONTENT_TYPE)) { restAssuredResponse.setContentType(value); } return this; } \n### Response:", "ground_truth": "Set a specific header\n\n@return The builder", "predict": "Sets a response header.\n\n@param name The header name (must not be null).\n@param value The header value (must not be null).\n@return This builder."}
{"ID": 267, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Response build() { final int statusCode = restAssuredResponse.statusCode(); if (statusCode < 100 || statusCode >= 600) { throw new IllegalArgumentException(format(\"Status code must be greater than 100 and less than 600, was %d.\", statusCode)); } if (StringUtils.isBlank(restAssuredResponse.statusLine())) { restAssuredResponse.setStatusLine(restAssuredResponse.statusCode()); } restAssuredResponse.setRpr(new ResponseParserRegistrar()); return restAssuredResponse; } \n### Response:", "ground_truth": "Build the actual response\n\n@return The response object", "predict": "Builds the response.\n\n@return the response"}
{"ID": 268, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public DetailedCookieMatcher value(Matcher<? super String> valueMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"value\", valueMatcher))); } \n### Response:", "ground_truth": "Verifies whether value of cookie satisfies specified matcher.\n@param valueMatcher value assertion\n@return A {@link DetailedCookieMatcher} instance with and-composed value property assertion", "predict": "Matches a cookie with a specific value.\n\n@param valueMatcher Matcher to match the value of the cookie.\n@return Matcher that matches a cookie with a specific value."}
{"ID": 269, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public DetailedCookieMatcher comment(Matcher<? super String> commentMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"comment\", commentMatcher))); } \n### Response:", "ground_truth": "Verifies whether comment of cookie satisfies specified matcher.\n@param commentMatcher comment assertion\n@return A {@link DetailedCookieMatcher} instance with and-composed comment property assertion", "predict": "Matches a comment in the cookie.\n\n@param commentMatcher the matcher to match the comment\n@return a detailed cookie matcher"}
{"ID": 270, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public DetailedCookieMatcher expiryDate(Matcher<? super Date> expiryDateMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"expiryDate\", expiryDateMatcher))); } \n### Response:", "ground_truth": "Verifies whether expiry date of cookie satisfies specified matcher.\n@param expiryDateMatcher expiry date assertion\n@return A {@link DetailedCookieMatcher} instance with and-composed expiry date property assertion", "predict": "Matches a cookie with a specific expiration date.\n\n@param expiryDateMatcher the matcher to match the expiration date of the cookie\n@return a detailed match matcher"}
{"ID": 271, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public DetailedCookieMatcher domain(Matcher<? super String> domainMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"domain\", domainMatcher))); } \n### Response:", "ground_truth": "Verifies whether domain of cookie satisfies specified matcher.\n@param domainMatcher assertion for domain property\n@return A {@link DetailedCookieMatcher} instance with and-composed domain property assertion", "predict": "Matches if the domain matches the specified matcher.\n\n@param domainMatcher the matcher to match the domain against\n@return a new {@link DetailedCookieMatcher} instance"}
{"ID": 272, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public DetailedCookieMatcher path(Matcher<? super String> pathMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"path\", pathMatcher))); } \n### Response:", "ground_truth": "Verifies whether path of cookie satisfies specified matcher.\n@param pathMatcher assertion for path property\n@return A {@link DetailedCookieMatcher} instance with and-composed path property assertion", "predict": "Matches a cookie with a path that matches the given path matcher.\n\n@param pathMatcher the path matcher\n@return the detailed cookie matcher"}
{"ID": 273, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public DetailedCookieMatcher secured(Matcher<? super Boolean> securedMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"secured\", securedMatcher))); } \n### Response:", "ground_truth": "Verifies whether secured property of cookie satisfies specified matcher.\n@param securedMatcher assertion for secured property\n@return A {@link DetailedCookieMatcher} instance with and-composed secured property assertion", "predict": "Matches if the cookie has the specified secure property.\n\n@param securedMatcher Matcher to match against the value of the secure property.\n@return Matcher that matches if the cookie has the specified secure property."}
{"ID": 274, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public DetailedCookieMatcher httpOnly(Matcher<? super Boolean> httpOnlyMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"httpOnly\", httpOnlyMatcher))); } \n### Response:", "ground_truth": "Verifies whether http-only property of cookie satisfies specified matcher.\n@param httpOnlyMatcher assertion for domain property\n@return A {@link DetailedCookieMatcher} instance with and-composed http-only property assertion", "predict": "Checks if the cookie has the httpOnly property.\n\n@param httpOnlyMatcher Matcher to check for the httpOnly property\n@return Matcher that matches a cookie with the httpOnly property"}
{"ID": 275, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public DetailedCookieMatcher version(Matcher<? super Integer> versionMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"version\", versionMatcher))); } \n### Response:", "ground_truth": "Verifies whether version of cookie satisfies specified matcher.\n@param versionMatcher assertion for version property\n@return A {@link DetailedCookieMatcher} instance with and-composed version property assertion", "predict": "Matches if the cookie has a version number.\n\n@param versionMatcher the matcher to use to check the version\n@return a detailed cookie matcher"}
{"ID": 276, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public DetailedCookieMatcher maxAge(Matcher<? super Integer> maxAgeMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"maxAge\", maxAgeMatcher))); } \n### Response:", "ground_truth": "Verifies whether max age of cookie satisfies specified matcher.\n@param maxAgeMatcher assertion for max age property\n@return A {@link DetailedCookieMatcher} instance with and-composed max age property assertion", "predict": "Matches if the cookie has a max age of greater than or equal to the provided value.\n\n@param maxAgeMatcher the matcher to use to check the max age of the cookie\n@return a matcher that matches if the cookie has a max age greater than or equal to the provided value"}
{"ID": 277, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ResponseSpecBuilder expectHeader(String headerName, Matcher<String> expectedValueMatcher) { spec.header(headerName, expectedValueMatcher); return this; } \n### Response:", "ground_truth": "Expect that a response header matches the supplied header name and hamcrest matcher.\n\n@param headerName           The name of the expected header\n@param expectedValueMatcher The Hamcrest matcher that must conform to the value\n@return The builder", "predict": "Matches a header value.\n\n@param headerName The header name.\n@param expectedValueMatcher The expected value matcher.\n@return The builder."}
{"ID": 278, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ResponseSpecBuilder expectHeader(String headerName, String expectedValue) { spec.header(headerName, expectedValue); return this; } \n### Response:", "ground_truth": "Expect that a response header matches the supplied name and value.\n\n@param headerName    The name of the expected header\n@param expectedValue The value of the expected header\n@return The builder", "predict": "Expects a specific header to be present in the response.\n\n@param headerName The name of the header to expect\n@param expectedValue The value of the header to expect\n@return The builder to be used for future calls"}
{"ID": 279, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ResponseSpecBuilder expectCookie(String cookieName, String expectedValue) { spec.cookie(cookieName, expectedValue); return this; } \n### Response:", "ground_truth": "Expect that a response cookie matches the supplied name and value.\n\n@param cookieName    The name of the expected cookie\n@param expectedValue The value of the expected cookie\n@return The builder", "predict": "Expects a cookie with the specified name and value.\n\n@param cookieName the name of the cookie\n@param expectedValue the value of the cookie\n@return the builder to use for future calls"}
{"ID": 280, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ProxySpecification withHost(String host) { return new ProxySpecification(host, port, scheme, username, password); } \n### Response:", "ground_truth": "Specify the hostname of the proxy.\n\n@param host The hostname of the proxy.\n@return A new ProxySpecification instance", "predict": "Convenience method to set the host for the Proxy specification.\n\n@param host the new host\n@return the new specification"}
{"ID": 281, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public JsonPathConfig numberReturnType(NumberReturnType numberReturnType) { return new JsonPathConfig(numberReturnType, defaultParserType, gsonObjectMapperFactory, jackson1ObjectMapperFactory, jackson2ObjectMapperFactory, johnzonObjectMapperFactory, defaultDeserializer, charset); } \n### Response:", "ground_truth": "Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers.\n\n@param numberReturnType The choice.\n@return A new instance of JsonPathConfig with the given configuration", "predict": "Creates a JsonPath that returns a number type.\n\n@param numberReturnType the number type\n@return the JsonPath configuration"}
{"ID": 282, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public JsonPathConfig defaultParserType(JsonParserType defaultParserType) { return new JsonPathConfig(numberReturnType, defaultParserType, gsonObjectMapperFactory, jackson1ObjectMapperFactory, jackson2ObjectMapperFactory, johnzonObjectMapperFactory, defaultDeserializer, charset); } \n### Response:", "ground_truth": "Creates an json path configuration that uses the specified parser type as default.\n\n@param defaultParserType The parser type to use. If <code>null</code> then classpath scanning will be used.", "predict": "Sets the default parser type for the JsonPath.\n\n@param defaultParserType the default parser type\n@return the JsonPathConfig"}
{"ID": 283, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public LogConfig defaultStream(PrintStream printStream) { return new LogConfig(printStream, true, logDetailIfValidationFails, urlEncodeRequestUri, true); } \n### Response:", "ground_truth": "Specify a new default stream to the print to.\n\n@param printStream The stream\n@return A new LogConfig instance", "predict": "Returns a new configuration with the default printStream."}
{"ID": 284, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public LogConfig enableLoggingOfRequestAndResponseIfValidationFails(LogDetail logDetail) { return new LogConfig(defaultPrintStream, prettyPrintingEnabled, logDetail, urlEncodeRequestUri, true); } \n### Response:", "ground_truth": "Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail\n\n@param logDetail The log detail to show in the log\n@return A new LogConfig instance", "predict": "Enables logging of the request and response.\n\n@param logDetail the log detail\n@return the log config"}
{"ID": 285, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: static HttpRequestBase createHttpRequest(URI uri, String httpMethod, boolean hasBody) { String method = notNull(upperCase(trimToNull(httpMethod)), \"Http method\"); Class<? extends HttpRequestBase> type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE.get(method); final HttpRequestBase httpRequest; // If we are sending HTTP method that does not allow body (like GET) then HTTP library prevents // us from including it, however we chose to allow deviations from standard if user wants so, // so it needs custom handling - hence the second condition below. // Otherwise we should use standard implementation found in the map if (type == null || (!(type.isInstance(HttpEntityEnclosingRequest.class)) && hasBody)) { httpRequest = new CustomHttpMethod(method, uri); } else { try { httpRequest = type.newInstance(); } catch (Exception e) { throw new RuntimeException(e); } httpRequest.setURI(uri); } return httpRequest; } \n### Response:", "ground_truth": "Get the HttpRequest class that represents this request type.\n\n@return a non-abstract class that implements {@link HttpRequest}", "predict": "Creates a request based on the given URI and HTTP method.\n\n@param uri The URI to use.\n@param httpMethod The HTTP method to use.\n@param hasBody Whether the request body is required.\n@return The request."}
{"ID": 286, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public MultiPartConfig defaultBoundary(String defaultBoundary) { return new MultiPartConfig(defaultControlName, defaultFileName, defaultSubtype, defaultBoundary, defaultCharset, true); } \n### Response:", "ground_truth": "Specify an explicit default multipart boundary to use when sending multi-part data.\n\n@param defaultBoundary The boundary to set\n@return An updated MultiPartConfig", "predict": "Sets the default boundary for the part."}
{"ID": 287, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public MockMvcRequestSpecBuilder addAttribute(String attributeName, Object attributeValue) { spec.attribute(attributeName, attributeValue); return this; } \n### Response:", "ground_truth": "Add request attribute\n\n@param attributeName  The attribute name\n@param attributeValue The attribute value\n@return The request specification builder", "predict": "Add an attribute to the request.\n\n@param attributeName the attribute name\n@param attributeValue the attribute value\n@return this request spec builder"}
{"ID": 288, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public MockMvcRequestSpecBuilder addHeader(String headerName, String headerValue) { spec.header(headerName, headerValue); return this; } \n### Response:", "ground_truth": "Add a header to be sent with the request\n\n@param headerName  The header name\n@param headerValue The header value\n@return The request specification builder", "predict": "Add a header to the request.\n\n@param headerName The name of the header.\n@param headerValue The value of the header.\n@return The request spec builder."}
{"ID": 289, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public MockMvcRequestSpecBuilder addMultiPart(String controlName, String contentBody, String mimeType) { spec.multiPart(controlName, mimeType); return this; } \n### Response:", "ground_truth": "Specify a string to send to the server using multi-part form data with a specific mime-type.\n\n@param controlName Defines the control name of the body part. In HTML this is the attribute name of the input tag.\n@param contentBody The string to send\n@param mimeType    The mime-type\n@return The request specification", "predict": "Adds a multi-part request body.\n\n@param controlName the name of the control\n@param contentBody the content of the request body\n@param mimeType the content type of the request body\n@return this request spec builder"}
{"ID": 290, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public MockMvcRequestSpecBuilder addResultHandlers(ResultHandler resultHandler, ResultHandler... additionalResultHandlers) { spec.resultHandlers(resultHandler, additionalResultHandlers); return this; } \n### Response:", "ground_truth": "Add a result handler\n\n@param resultHandler The result handler\n@return MockMvcRequestSpecBuilder", "predict": "Adds a set of ResultHandlers to the request spec.\n\n@param resultHandler the result handler\n@param additionalResultHandlers the additional result handlers\n@return the request spec builder"}
{"ID": 291, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> HttpClientConfig setParam(String parameterName, T parameterValue) { notNull(parameterName, \"Parameter name\"); final Map<String, Object> newParams = new HashMap<String, Object>(httpClientParams); newParams.put(parameterName, parameterValue); return new HttpClientConfig(httpClientFactory, newParams, httpMultipartMode, shouldReuseHttpClientInstance, NO_HTTP_CLIENT, true); } \n### Response:", "ground_truth": "Set a http client parameter.\n\n@param parameterName  The name of the parameter\n@param parameterValue The value of the parameter (may be null)\n@param <T>            The parameter type\n@return An updated HttpClientConfig", "predict": "Sets a parameter for the http client.\n\n@param parameterName the parameter name\n@param parameterValue the parameter value\n@return the http client config"}
{"ID": 292, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpClientConfig addParams(Map<String, ?> httpClientParams) { notNull(httpClientParams, \"httpClientParams\"); final Map<String, Object> newParams = new HashMap<String, Object>(this.httpClientParams); newParams.putAll(httpClientParams); return new HttpClientConfig(httpClientFactory, newParams, httpMultipartMode, shouldReuseHttpClientInstance, NO_HTTP_CLIENT, true); } \n### Response:", "ground_truth": "Add the given parameters to an already configured number of parameters.\n\n@param httpClientParams The parameters.\n@return An updated HttpClientConfig", "predict": "Adds the http client params.\n\n@param httpClientParams the http client params\n@return the http client config"}
{"ID": 293, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpClientConfig httpClientFactory(HttpClientFactory httpClientFactory) { return new HttpClientConfig(httpClientFactory, httpClientParams, httpMultipartMode, shouldReuseHttpClientInstance, NO_HTTP_CLIENT, true); } \n### Response:", "ground_truth": "Set the http client factory that Rest Assured should use when making request. For each request REST Assured will invoke the factory to get the a the HttpClient instance.\n\n@param httpClientFactory The http client factory to use.\n@return An updated HttpClientConfig", "predict": "Sets the factory for the http client."}
{"ID": 294, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpClientConfig httpMultipartMode(HttpMultipartMode httpMultipartMode) { return new HttpClientConfig(httpClientFactory, httpClientParams, httpMultipartMode, shouldReuseHttpClientInstance, httpClient, true); } \n### Response:", "ground_truth": "Specify the HTTP Multipart mode when sending multi-part data.\n\n@param httpMultipartMode The multi-part mode to set.\n@return An updated HttpClientConfig", "predict": "Sets the http multipart mode.\n\n@param httpMultipartMode the http multipart mode\n@return the http client config"}
{"ID": 295, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> T get(String path) { final JSONAssertion jsonAssertion = createJsonAssertion(path, params); final Object json = jsonParser.parseWith(createConfigurableJsonSlurper()); return (T) jsonAssertion.getResult(json, null); } \n### Response:", "ground_truth": "Get the result of an Object path expression as a boolean.\n\n@param path The Object path.\n@return The object matching the Object path. This may be any primitive type, a List or a Map.  A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "Retrieves the value of a given path.\n\n@param path the path\n@return the value"}
{"ID": 296, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public int getInt(String path) { //The type returned from Groovy depends on the input, so we need to handle different numerical types. Object value = get(path); if (value instanceof Integer) { return (Integer) value; } else if (value instanceof Short) { return ((Short) value).intValue(); } else if (value instanceof Long) { return ((Long) value).intValue(); } else { return ObjectConverter.convertObjectTo(value, Integer.class); } } \n### Response:", "ground_truth": "Get the result of an Object path expression as an int.\n\n@param path The Object path.\n@return The int matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "Get the int value from the given path.\n\n@param path the path\n@return the int value"}
{"ID": 297, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public byte getByte(String path) { //The type returned from Groovy depends on the input, so we need to handle different numerical types. Object value = get(path); if (value instanceof Byte) { return (Byte) value; } else if (value instanceof Long) { return ((Long) value).byteValue(); } else if (value instanceof Integer) { return ((Integer) value).byteValue(); } else { return ObjectConverter.convertObjectTo(value, Byte.class); } } \n### Response:", "ground_truth": "Get the result of an Object path expression as a byte.\n\n@param path The Object path.\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "Get a byte from the given path.\n\n@param path the path\n@return the byte"}
{"ID": 298, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public short getShort(String path) { //The type returned from Groovy depends on the input, so we need to handle different numerical types. Object value = get(path); if (value instanceof Short) { return (Short) value; } else if (value instanceof Long) { return ((Long) value).shortValue(); } else if (value instanceof Integer) { return ((Integer) value).shortValue(); } else { return ObjectConverter.convertObjectTo(value, Short.class); } } \n### Response:", "ground_truth": "Get the result of an Object path expression as a short.\n\n@param path The Object path.\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "Get a Short from the given path.\n\n@param path the path\n@return the Short"}
{"ID": 299, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public float getFloat(String path) { final Object value = get(path); //Groovy will always return a Double for floating point values. if (value instanceof Double) { return ((Double) value).floatValue(); } else { return ObjectConverter.convertObjectTo(value, Float.class); } } \n### Response:", "ground_truth": "Get the result of an Object path expression as a float.\n\n@param path The Object path.\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "Get a float from a path.\n\n@param path the path\n@return the float"}
{"ID": 300, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public double getDouble(String path) { final Object value = get(path); if (value instanceof Double) { return (Double) value; } return ObjectConverter.convertObjectTo(value, Double.class); } \n### Response:", "ground_truth": "Get the result of an Object path expression as a double.\n\n@param path The Object path.\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "Get double.\n\n@param path the path\n@return the double"}
{"ID": 301, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public long getLong(String path) { //The type returned from Groovy depends on the input, so we need to handle different numerical types. Object value = get(path); if (value instanceof Long) { return (Long) value; } else if (value instanceof Short) { return ((Short) value).longValue(); } else if (value instanceof Integer) { return ((Integer) value).longValue(); } else { return ObjectConverter.convertObjectTo(value, Long.class); } } \n### Response:", "ground_truth": "Get the result of an Object path expression as a long.\n\n@param path The Object path.\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "Get a long value from the given path.\n\n@param path the path\n@return the long value"}
{"ID": 302, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> List<T> getList(String path, Class<T> genericType) { if (genericType == null) { throw new IllegalArgumentException(\"Generic type cannot be null\"); } final List<T> original = get(path); final List<T> newList = new LinkedList<T>(); if (original != null) { for (T t : original) { T e; if (t instanceof Map && !genericType.isAssignableFrom(Map.class)) { // TODO Avoid double parsing String str = objectToString(t); //noinspection unchecked e = (T) jsonStringToObject(str, genericType); } else { e = ObjectConverter.convertObjectTo(t, genericType); } newList.add(e); } } return Collections.unmodifiableList(newList); } \n### Response:", "ground_truth": "Get the result of an Object path expression as a list.\n\n@param path        The Object path.\n@param genericType The generic list type\n@param <T>         The type\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "Returns a list of objects from the given path.\n\n@param path the path to the objects\n@param genericType the generic type of the objects\n@return a list of objects from the given path\n@throws IllegalArgumentException if the generic type is null"}
{"ID": 303, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <K, V> Map<K, V> getMap(String path) { return get(path); } \n### Response:", "ground_truth": "Get the result of an Object path expression as a map.\n\n@param path The Object path.\n@param <K>  The type of the expected key\n@param <V>  The type of the expected value\n@return The map matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "Returns the map with the specified path.\n\n@param <K> the type of key\n@param <V> the type of value\n@param path the path\n@return the map"}
{"ID": 304, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> T getObject(String path, Class<T> objectType) { Object object = getFromPath(path, false); return getObjectAsType(object, objectType); } \n### Response:", "ground_truth": "Get an XML document as a Java Object.\n\n@param objectType The type of the java object.\n@param <T>        The type of the java object\n@return A Java object representation of the XML document", "predict": "Returns an object from the given path.\n\n@param path the path\n@param objectType the type of the object\n@return the object"}
{"ID": 305, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public RequestSpecBuilder setBody(Object object, ObjectMapper mapper) { spec.body(object, mapper); return this; } \n### Response:", "ground_truth": "Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper.\nThis works for the POST, PATCH and PUT methods only. Trying to do this for the other http methods will cause an exception to be thrown.\n\n@param object The object to serialize and send with the request\n@param mapper The object mapper\n@return The request specification", "predict": "Sets the request body.\n\n@param object the object\n@param mapper the mapper\n@return the request spec builder"}
{"ID": 306, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public RequestSpecBuilder addCookie(String key, Object value, Object... cookieNameValuePairs) { spec.cookie(key, value, cookieNameValuePairs); return this; } \n### Response:", "ground_truth": "Add a cookie to be sent with the request.\n\n@param key                  The cookie key\n@param value                The cookie value\n@param cookieNameValuePairs Additional cookies values. This will actually create two cookies with the same name but with different values.\n@return The request specification builder", "predict": "Adds a cookie to the request.\n\n@param key the cookie name\n@param value the cookie value\n@param cookieNameValuePairs the cookie name value pairs\n@return this request spec builder"}
{"ID": 307, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public RequestSpecBuilder addParam(String parameterName, Object... parameterValues) { spec.param(parameterName, parameterValues); return this; } \n### Response:", "ground_truth": "Add a parameter to be sent with the request.\n\n@param parameterName   The parameter name\n@param parameterValues Zero to many parameter values for this parameter name.\n@return The request specification builder", "predict": "Adds a parameter to the request.\n\n@param parameterName the parameter name\n@param parameterValues the parameter values\n@return the request spec builder"}
{"ID": 308, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public RequestSpecBuilder addParam(String parameterName, Collection<?> parameterValues) { spec.param(parameterName, parameterValues); return this; } \n### Response:", "ground_truth": "Add a multi-value parameter to be sent with the request.\n\n@param parameterName   The parameter key\n@param parameterValues The parameter values\n@return The request specification builder", "predict": "Adds a parameter to the request.\n\n@param parameterName the parameter name\n@param parameterValues the parameter values\n@return the request spec builder"}
{"ID": 309, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public MockMvcParamConfig formParamsUpdateStrategy(UpdateStrategy updateStrategy) { return new MockMvcParamConfig(queryParamsUpdateStrategy, updateStrategy, requestParameterUpdateStrategy, attributeUpdateStrategy, sessionUpdateStrategy, true); } \n### Response:", "ground_truth": "Set form parameter update strategy to the given value.\n\n@param updateStrategy The update strategy to use for form parameters\n@return A new instance of {@link MockMvcParamConfig}", "predict": "Sets the update strategy for the mockMvcParamConfig.\n\n@param updateStrategy the update strategy\n@return the mockMvcParamConfig"}
{"ID": 310, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Filter logResponseToIfMatches(PrintStream stream, Matcher<Integer> matcher) { return new ResponseLoggingFilter(stream, matcher); } \n### Response:", "ground_truth": "Create a new logging filter without using the \"new\" operator.\nWill make the DSL look nicer.\n\n@param stream The print stream to log to\n@param matcher The matcher that must be fulfilled in order for logging to occur\n@return a new instance of the filter", "predict": "Returns a filter that will log the response if the given matcher is true.\n\n@param stream the stream to log the response to\n@param matcher the matcher to check for\n@return a filter that will log the response if the given matcher is true"}
{"ID": 311, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Cookies cookies(Cookie cookie, Cookie... additionalCookies) { AssertParameter.notNull(cookie, \"Cookie\"); final List<Cookie> cookieList = new LinkedList<Cookie>(); cookieList.add(cookie); Collections.addAll(cookieList, additionalCookies); return new Cookies(cookieList); } \n### Response:", "ground_truth": "An alternative way to create a Cookies object from the constructor.\n\n@param cookie            The cookie to be included\n@param additionalCookies Additional cookies to be included (optional)\n@return A new cookies object containing the specified cookies", "predict": "Creates a Cookies object with the specified cookies.\n\n@param cookie the cookie to add\n@param additionalCookies the additional cookies to add\n@return a Cookies object with the specified cookies"}
{"ID": 312, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void cleanUpForCollectedState(Set<KeyAndSource> keysAndSources) { synchronized (lock) { for (KeyAndSource keyAndSource : keysAndSources) { Multiset<Object> set = backingMap.get(keyAndSource.key); if (set != null) { set.remove(keyAndSource.source); if (set.isEmpty()) { backingMap.remove(keyAndSource.key); } } } } } \n### Response:", "ground_truth": "There may be multiple child injectors blacklisting a certain key so only remove the source\nthat's relevant.", "predict": "Removes all keys and sources from the backing map."}
{"ID": 313, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: void index() { for (Binding<?> binding : state.getExplicitBindingsThisLevel().values()) { bindingsMultimap.put(binding.getKey().getTypeLiteral(), binding); } } \n### Response:", "ground_truth": "Indexes bindings by type.", "predict": "Index the bindings in the bindings map."}
{"ID": 314, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: <T> BindingImpl<T> getBindingOrThrow(Key<T> key, Errors errors, JitLimitation jitType) throws ErrorsException { // Check explicit bindings, i.e. bindings created by modules. BindingImpl<T> binding = state.getExplicitBinding(key); if (binding != null) { return binding; } // Look for an on-demand binding. return getJustInTimeBinding(key, errors, jitType); } \n### Response:", "ground_truth": "Gets a binding implementation. First, it check to see if the parent has a binding. If the\nparent has a binding and the binding is scoped, it will use that binding. Otherwise, this\nchecks for an explicit binding. If no explicit binding is found, it looks for a just-in-time\nbinding.", "predict": "Returns a binding for the given key, or throws an exception if no such binding is found."}
{"ID": 315, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private <T> BindingImpl<T> convertConstantStringBinding(Key<T> key, Errors errors) throws ErrorsException { // Find a constant string binding. Key<String> stringKey = key.ofType(STRING_TYPE); BindingImpl<String> stringBinding = state.getExplicitBinding(stringKey); if (stringBinding == null || !stringBinding.isConstant()) { return null; } // We can't call getProvider().get() because this InstanceBinding may not have been inintialized // yet (because we may have been called during InternalInjectorCreator.initializeStatically and // instance binding validation hasn't happened yet.) @SuppressWarnings(\"unchecked\") String stringValue = ((InstanceBinding<String>) stringBinding).getInstance(); Object source = stringBinding.getSource(); // Find a matching type converter. TypeLiteral<T> type = key.getTypeLiteral(); TypeConverterBinding typeConverterBinding = state.getConverter(stringValue, type, errors, source); if (typeConverterBinding == null) { // No converter can handle the given type. return null; } // Try to convert the string. A failed conversion results in an error. try { @SuppressWarnings(\"unchecked\") // This cast is safe because we double check below. T converted = (T) typeConverterBinding.getTypeConverter().convert(stringValue, type); if (converted == null) { throw errors .converterReturnedNull(stringValue, source, type, typeConverterBinding) .toException(); } if (!type.getRawType().isInstance(converted)) { throw errors .conversionTypeError(stringValue, source, type, typeConverterBinding, converted) .toException(); } return new ConvertedConstantBindingImpl<T>( this, key, converted, stringBinding, typeConverterBinding); } catch (ErrorsException e) { throw e; } catch (RuntimeException e) { throw errors .conversionError(stringValue, source, type, typeConverterBinding, e) .toException(); } } \n### Response:", "ground_truth": "Converts a constant string binding to the required type.\n\n@return the binding if it could be resolved, or null if the binding doesn't exist\n@throws com.google.inject.internal.ErrorsException if there was an error resolving the binding", "predict": "Convert a string constant binding."}
{"ID": 316, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean cleanup(BindingImpl<?> binding, Set<Key> encountered) { boolean bindingFailed = false; Set<Dependency<?>> deps = getInternalDependencies(binding); for (Dependency dep : deps) { Key<?> depKey = dep.getKey(); InjectionPoint ip = dep.getInjectionPoint(); if (encountered.add(depKey)) { // only check if we haven't looked at this key yet BindingImpl depBinding = jitBindings.get(depKey); if (depBinding != null) { // if the binding still exists, validate boolean failed = cleanup(depBinding, encountered); // if children fail, we fail if (depBinding instanceof ConstructorBindingImpl) { ConstructorBindingImpl ctorBinding = (ConstructorBindingImpl) depBinding; ip = ctorBinding.getInternalConstructor(); if (!ctorBinding.isInitialized()) { failed = true; } } if (failed) { removeFailedJitBinding(depBinding, ip); bindingFailed = true; } } else if (state.getExplicitBinding(depKey) == null) { // ignore keys if they were explicitly bound, but if neither JIT // nor explicit, it's also invalid & should let parent know. bindingFailed = true; } } } return bindingFailed; } \n### Response:", "ground_truth": "Iterates through the binding's dependencies to clean up any stray bindings that were leftover\nfrom a failed JIT binding. This is required because the bindings are eagerly & optimistically\nadded to allow circular dependency support, so dependencies may pass where they should have\nfailed.", "predict": "Validates the given binding and removes any dependencies that are not\nvalid."}
{"ID": 317, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void removeFailedJitBinding(Binding<?> binding, InjectionPoint ip) { failedJitBindings.add(binding.getKey()); jitBindings.remove(binding.getKey()); membersInjectorStore.remove(binding.getKey().getTypeLiteral()); provisionListenerStore.remove(binding); if (ip != null) { constructors.remove(ip); } } \n### Response:", "ground_truth": "Cleans up any state that may have been cached when constructing the JIT binding.", "predict": "Removes the binding from the jit bindings and the injection point."}
{"ID": 318, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") private Set<Dependency<?>> getInternalDependencies(BindingImpl<?> binding) { if (binding instanceof ConstructorBindingImpl) { return ((ConstructorBindingImpl) binding).getInternalDependencies(); } else if (binding instanceof HasDependencies) { return ((HasDependencies) binding).getDependencies(); } else { return ImmutableSet.of(); } } \n### Response:", "ground_truth": "Safely gets the dependencies of possibly not initialized bindings.", "predict": "Returns the dependencies of the given binding."}
{"ID": 319, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: <T> BindingImpl<T> createUninitializedBinding( Key<T> key, Scoping scoping, Object source, Errors errors, boolean jitBinding) throws ErrorsException { Class<?> rawType = key.getTypeLiteral().getRawType(); ImplementedBy implementedBy = rawType.getAnnotation(ImplementedBy.class); // Don't try to inject arrays or enums annotated with @ImplementedBy. if (rawType.isArray() || (rawType.isEnum() && implementedBy != null)) { throw errors.missingImplementationWithHint(key, this).toException(); } // Handle TypeLiteral<T> by binding the inner type if (rawType == TypeLiteral.class) { @SuppressWarnings(\"unchecked\") // we have to fudge the inner type as Object BindingImpl<T> binding = (BindingImpl<T>) createTypeLiteralBinding((Key<TypeLiteral<Object>>) key, errors); return binding; } // Handle @ImplementedBy if (implementedBy != null) { Annotations.checkForMisplacedScopeAnnotations(rawType, source, errors); return createImplementedByBinding(key, scoping, implementedBy, errors); } // Handle @ProvidedBy. ProvidedBy providedBy = rawType.getAnnotation(ProvidedBy.class); if (providedBy != null) { Annotations.checkForMisplacedScopeAnnotations(rawType, source, errors); return createProvidedByBinding(key, scoping, providedBy, errors); } return ConstructorBindingImpl.create( this, key, null, /* use default constructor */ source, scoping, errors, jitBinding && options.jitDisabled, options.atInjectRequired); } \n### Response:", "ground_truth": "Creates a binding for an injectable type with the given scope. Looks for a scope on the type if\nnone is specified.", "predict": "Create a binding for the given key."}
{"ID": 320, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: static Object[] getAll(InternalContext context, SingleParameterInjector<?>[] parameterInjectors) throws InternalProvisionException { if (parameterInjectors == null) { return NO_ARGUMENTS; } int size = parameterInjectors.length; Object[] parameters = new Object[size]; // optimization: use manual for/each to save allocating an iterator here for (int i = 0; i < size; i++) { parameters[i] = parameterInjectors[i].inject(context); } return parameters; } \n### Response:", "ground_truth": "Returns an array of parameter values.", "predict": "Returns an array of parameters that are injected into the given context."}
{"ID": 321, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static void bindInjector(InjectorImpl injector) { Key<Injector> key = Key.get(Injector.class); InjectorFactory injectorFactory = new InjectorFactory(injector); injector.state.putBinding( key, new ProviderInstanceBindingImpl<Injector>( injector, key, SourceProvider.UNKNOWN_SOURCE, injectorFactory, Scoping.UNSCOPED, injectorFactory, ImmutableSet.<InjectionPoint>of())); } \n### Response:", "ground_truth": "The Injector is a special case because we allow both parent and child injectors to both have a\nbinding for that key.", "predict": "Binds the injector to the given provider."}
{"ID": 322, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static void bindLogger(InjectorImpl injector) { Key<Logger> key = Key.get(Logger.class); LoggerFactory loggerFactory = new LoggerFactory(); injector.state.putBinding( key, new ProviderInstanceBindingImpl<Logger>( injector, key, SourceProvider.UNKNOWN_SOURCE, loggerFactory, Scoping.UNSCOPED, loggerFactory, ImmutableSet.<InjectionPoint>of())); } \n### Response:", "ground_truth": "The Logger is a special case because it knows the injection point of the injected member. It's\nthe only binding that does this.", "predict": "Binds the logger to the injector."}
{"ID": 323, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static boolean checkForMisplacedBindingAnnotations(Member member, Errors errors) { Annotation misplacedBindingAnnotation = Annotations.findBindingAnnotation( errors, member, ((AnnotatedElement) member).getAnnotations()); if (misplacedBindingAnnotation == null) { return false; } // don't warn about misplaced binding annotations on methods when there's a field with the same // name. In Scala, fields always get accessor methods (that we need to ignore). See bug 242. if (member instanceof Method) { try { if (member.getDeclaringClass().getDeclaredField(member.getName()) != null) { return false; } } catch (NoSuchFieldException ignore) { } } errors.misplacedBindingAnnotation(member, misplacedBindingAnnotation); return true; } \n### Response:", "ground_truth": "Returns true if the binding annotation is in the wrong place.", "predict": "Checks if the given member has a misplaced annotation."}
{"ID": 324, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static boolean overrides(Method a, Method b) { // See JLS section 8.4.8.1 int modifiers = b.getModifiers(); if (Modifier.isPublic(modifiers) || Modifier.isProtected(modifiers)) { return true; } if (Modifier.isPrivate(modifiers)) { return false; } // b must be package-private return a.getDeclaringClass().getPackage().equals(b.getDeclaringClass().getPackage()); } \n### Response:", "ground_truth": "Returns true if a overrides b. Assumes signatures of a and b are the same and a's declaring\nclass is a subclass of b's declaring class.", "predict": "Determines if a method overrides b."}
{"ID": 325, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void initializeDelegate(MembersInjector<T> delegate) { checkState(this.delegate == null, \"delegate already initialized\"); this.delegate = checkNotNull(delegate, \"delegate\"); } \n### Response:", "ground_truth": "Sets the actual members injector.\n\n@throws IllegalStateException if the delegate is already set", "predict": "Initializes the delegate."}
{"ID": 326, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") final TypeLiteral<Provider<T>> providerType() { // This cast is safe and wouldn't generate a warning if Type had a type // parameter. return (TypeLiteral<Provider<T>>) get(Types.providerOf(getType())); } \n### Response:", "ground_truth": "Gets the type of this type's provider.", "predict": "Returns the type of the provider."}
{"ID": 327, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private List<TypeLiteral<?>> resolveAll(Type[] types) { TypeLiteral<?>[] result = new TypeLiteral<?>[types.length]; for (int t = 0; t < types.length; t++) { result[t] = resolve(types[t]); } return ImmutableList.copyOf(result); } \n### Response:", "ground_truth": "Returns an immutable list of the resolved types.", "predict": "Resolve all types in the given list."}
{"ID": 328, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> TypeLiteral<T> canonicalizeForKey(TypeLiteral<T> typeLiteral) { Type type = typeLiteral.getType(); if (!isFullySpecified(type)) { Errors errors = new Errors().keyNotFullySpecified(typeLiteral); throw new ConfigurationException(errors.getMessages()); } if (typeLiteral.getRawType() == javax.inject.Provider.class) { ParameterizedType parameterizedType = (ParameterizedType) type; // the following casts are generally unsafe, but com.google.inject.Provider extends // javax.inject.Provider and is covariant @SuppressWarnings(\"unchecked\") TypeLiteral<T> guiceProviderType = (TypeLiteral<T>) TypeLiteral.get(Types.providerOf(parameterizedType.getActualTypeArguments()[0])); return guiceProviderType; } @SuppressWarnings(\"unchecked\") TypeLiteral<T> wrappedPrimitives = (TypeLiteral<T>) PRIMITIVE_TO_WRAPPER.get(typeLiteral); if (wrappedPrimitives != null) { return wrappedPrimitives; } // If we know this isn't a subclass, return as-is. if (typeLiteral.getClass() == TypeLiteral.class) { return typeLiteral; } // recreate the TypeLiteral to avoid anonymous TypeLiterals from holding refs to their // surrounding classes. @SuppressWarnings(\"unchecked\") TypeLiteral<T> recreated = (TypeLiteral<T>) TypeLiteral.get(typeLiteral.getType()); return recreated; } \n### Response:", "ground_truth": "Returns an type that's appropriate for use in a key.\n\n<p>If the raw type of {@code typeLiteral} is a {@code javax.inject.Provider}, this returns a\n{@code com.google.inject.Provider} with the same type parameters.\n\n<p>If the type is a primitive, the corresponding wrapper type will be returned.\n\n@throws ConfigurationException if {@code type} contains a type variable", "predict": "Canonicalize a TypeLiteral to a type that is fully specified."}
{"ID": 329, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: static void prepareBuiltInConverters(InjectorImpl injector) { // Configure type converters. convertToPrimitiveType(injector, int.class, Integer.class); convertToPrimitiveType(injector, long.class, Long.class); convertToPrimitiveType(injector, boolean.class, Boolean.class); convertToPrimitiveType(injector, byte.class, Byte.class); convertToPrimitiveType(injector, short.class, Short.class); convertToPrimitiveType(injector, float.class, Float.class); convertToPrimitiveType(injector, double.class, Double.class); convertToClass( injector, Character.class, new TypeConverter() { @Override public Object convert(String value, TypeLiteral<?> toType) { value = value.trim(); if (value.length() != 1) { throw new RuntimeException(\"Length != 1.\"); } return value.charAt(0); } @Override public String toString() { return \"TypeConverter<Character>\"; } }); convertToClasses( injector, Matchers.subclassesOf(Enum.class), new TypeConverter() { @Override @SuppressWarnings(\"unchecked\") public Object convert(String value, TypeLiteral<?> toType) { return Enum.valueOf((Class) toType.getRawType(), value); } @Override public String toString() { return \"TypeConverter<E extends Enum<E>>\"; } }); internalConvertToTypes( injector, new AbstractMatcher<TypeLiteral<?>>() { @Override public boolean matches(TypeLiteral<?> typeLiteral) { return typeLiteral.getRawType() == Class.class; } @Override public String toString() { return \"Class<?>\"; } }, new TypeConverter() { @Override @SuppressWarnings(\"unchecked\") public Object convert(String value, TypeLiteral<?> toType) { try { return Class.forName(value); } catch (ClassNotFoundException e) { throw new RuntimeException(e.getMessage()); } } @Override public String toString() { return \"TypeConverter<Class<?>>\"; } }); } \n### Response:", "ground_truth": "Installs default converters for primitives, enums, and class literals.", "predict": "Configure the built-in type converters."}
{"ID": 330, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static ClassLoader canonicalize(ClassLoader classLoader) { return classLoader != null ? classLoader : SystemBridgeHolder.SYSTEM_BRIDGE.getParent(); } \n### Response:", "ground_truth": "Attempts to canonicalize null references to the system class loader. May return null if for\nsome reason the system loader is unavailable.", "predict": "Returns the parent class loader if the given class loader is null."}
{"ID": 331, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static boolean hasSameVersionOfCglib(ClassLoader classLoader) { Class<?> fc = net.sf.cglib.reflect.FastClass.class; try { return classLoader.loadClass(fc.getName()) == fc; } catch (ClassNotFoundException e) { return false; } } \n### Response:", "ground_truth": "Returns true if the types classloader has the same version of cglib that BytecodeGen has. This\nonly returns false in strange OSGI situations, but it prevents us from using FastClass for non\npublic members.", "predict": "Checks if the given class loader has the same version of Cglib.\n\n@param classLoader the class loader\n@return true if the given class loader has the same version of Cglib"}
{"ID": 332, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static boolean isPubliclyCallable(Member member) { if (!Modifier.isPublic(member.getModifiers())) { return false; } Class<?>[] parameterTypes; if (member instanceof Constructor) { parameterTypes = ((Constructor) member).getParameterTypes(); } else { Method method = (Method) member; if (!Modifier.isPublic(method.getReturnType().getModifiers())) { return false; } parameterTypes = method.getParameterTypes(); } for (Class<?> type : parameterTypes) { if (!Modifier.isPublic(type.getModifiers())) { return false; } } return true; } \n### Response:", "ground_truth": "Returns true if the member can be called by a fast class generated in a different classloader.", "predict": "Returns true if the given member is publicly visible and is a public method or constructor.\n\n@param member the member to check\n@return true if the given member is publicly visible and is a public method or constructor"}
{"ID": 333, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Key<?> fixAnnotations(Key<?> key) { return key.getAnnotation() == null ? key : Key.get(key.getTypeLiteral(), key.getAnnotation().annotationType()); } \n### Response:", "ground_truth": "Replace annotation instances with annotation types, this is only appropriate for testing if a\nkey is bound and not for injecting.\n\n<p>See Guice bug 125, https://github.com/google/guice/issues/125", "predict": "Resolves the annotation type of the given key.\n\n@param key the key\n@return the key with the given annotation type"}
{"ID": 334, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: <T> Initializable<T> requestInjection( InjectorImpl injector, T instance, Binding<T> binding, Object source, Set<InjectionPoint> injectionPoints) { checkNotNull(source); Preconditions.checkState( !validationStarted, \"Member injection could not be requested after validation is started\"); ProvisionListenerStackCallback<T> provisionCallback = binding == null ? null : injector.provisionListenerStore.get(binding); // short circuit if the object has no injections or listeners. if (instance == null || (injectionPoints.isEmpty() && !injector.membersInjectorStore.hasTypeListeners() && provisionCallback == null)) { return Initializables.of(instance); } if (initializablesCache.containsKey(instance)) { @SuppressWarnings(\"unchecked\") // Map from T to InjectableReference<T> Initializable<T> cached = (Initializable<T>) initializablesCache.get(instance); return cached; } InjectableReference<T> injectableReference = new InjectableReference<T>( injector, instance, binding == null ? null : binding.getKey(), provisionCallback, source, cycleDetectingLockFactory.create(instance.getClass())); initializablesCache.put(instance, injectableReference); pendingInjections.add(injectableReference); return injectableReference; } \n### Response:", "ground_truth": "Registers an instance for member injection when that step is performed.\n\n@param instance an instance that optionally has members to be injected (each annotated\nwith @Inject).\n@param binding the binding that caused this initializable to be created, if it exists.\n@param source the source location that this injection was requested", "predict": "Request injection for the given object.\n\n@param injector the injector to use for injection\n@param instance the object to inject\n@param binding the binding to use for injection\n@param source the source of the object to inject\n@param injectionPoints the injection points to inject\n@return the object that was injected"}
{"ID": 335, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: void validateOustandingInjections(Errors errors) { validationStarted = true; initializablesCache.clear(); for (InjectableReference<?> reference : pendingInjections) { try { reference.validate(errors); } catch (ErrorsException e) { errors.merge(e.getErrors()); } } } \n### Response:", "ground_truth": "Prepares member injectors for all injected instances. This prompts Guice to do static analysis\non the injected instances.", "predict": "Validates all the pending injections.\n\n@param errors the errors to be added to the errors list"}
{"ID": 336, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public T newInstance(Object[] args) throws Throwable { constructor.setAccessible(true); try { return constructor.newInstance(args); } catch (InvocationTargetException e) { throw e.getCause(); } } \n### Response:", "ground_truth": "Returns an instance of T, constructed using this constructor, with the supplied arguments.", "predict": "Convenience method to create a new instance of this class.\n\n@param args the arguments to pass to the constructor\n@return the new instance\n@throws Throwable if an exception occurs"}
{"ID": 337, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"JavaDoc\", \"deprecation\"}) private ServletRequest withDispatcher( ServletRequest servletRequest, final ManagedServletPipeline servletPipeline) { // don't wrap the request if there are no servlets mapped. This prevents us from inserting our // wrapper unless it's actually going to be used. This is necessary for compatibility for apps // that downcast their HttpServletRequests to a concrete implementation. if (!servletPipeline.hasServletsMapped()) { return servletRequest; } HttpServletRequest request = (HttpServletRequest) servletRequest; //noinspection OverlyComplexAnonymousInnerClass return new HttpServletRequestWrapper(request) { @Override public RequestDispatcher getRequestDispatcher(String path) { final RequestDispatcher dispatcher = servletPipeline.getRequestDispatcher(path); return (null != dispatcher) ? dispatcher : super.getRequestDispatcher(path); } }; } \n### Response:", "ground_truth": "Used to create an proxy that dispatches either to the guice-servlet pipeline or the regular\npipeline based on uri-path match. This proxy also provides minimal forwarding support.\n\n<p>We cannot forward from a web.xml Servlet/JSP to a guice-servlet (because the filter pipeline\nis not called again). However, we can wrap requests with our own dispatcher to forward the\n*other* way. web.xml Servlets/JSPs can forward to themselves as per normal.\n\n<p>This is not a problem cuz we intend for people to migrate from web.xml to guice-servlet,\nincrementally, but not the other way around (which, we should actively discourage).", "predict": "Wrap the given request with a requestDispatcher."}
{"ID": 338, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: static <T> InternalFactory<? extends T> scope( Key<T> key, InjectorImpl injector, InternalFactory<? extends T> creator, Object source, Scoping scoping) { if (scoping.isNoScope()) { return creator; } Scope scope = scoping.getScopeInstance(); // NOTE: SingletonScope relies on the fact that we are passing a // ProviderToInternalFactoryAdapter here. If you change the type make sure to update // SingletonScope as well. Provider<T> scoped = scope.scope(key, new ProviderToInternalFactoryAdapter<T>(injector, creator)); return new InternalFactoryToProviderAdapter<T>(scoped, source); } \n### Response:", "ground_truth": "Scopes an internal factory.", "predict": "Scopes the given factory to the given scope."}
{"ID": 339, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: static Scoping makeInjectable(Scoping scoping, InjectorImpl injector, Errors errors) { Class<? extends Annotation> scopeAnnotation = scoping.getScopeAnnotation(); if (scopeAnnotation == null) { return scoping; } ScopeBinding scope = injector.state.getScopeBinding(scopeAnnotation); if (scope != null) { return forInstance(scope.getScope()); } errors.scopeNotFound(scopeAnnotation); return UNSCOPED; } \n### Response:", "ground_truth": "Replaces annotation scopes with instance scopes using the Injector's annotation-to-instance\nmap. If the scope annotation has no corresponding instance, an error will be added and unscoped\nwill be retuned.", "predict": "Returns the scope of the given scoping, or the given scope if it is not\ndefined."}
{"ID": 340, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: static String normalizePath(String path) { StringBuilder sb = new StringBuilder(path.length()); int queryStart = path.indexOf('?'); String query = null; if (queryStart != -1) { query = path.substring(queryStart); path = path.substring(0, queryStart); } // Normalize the path. we need to decode path segments, normalize and rejoin in order to // 1. decode and normalize safe percent escaped characters. e.g. %70 -> 'p' // 2. decode and interpret dangerous character sequences. e.g. /%2E/ -> '/./' -> '/' // 3. preserve dangerous encoded characters. e.g. '/%2F/' -> '///' -> '/%2F' List<String> segments = new ArrayList<>(); for (String segment : SLASH_SPLITTER.split(path)) { // This decodes all non-special characters from the path segment. so if someone passes // /%2E/foo we will normalize it to /./foo and then /foo String normalized = UrlEscapers.urlPathSegmentEscaper().escape(lenientDecode(segment, UTF_8, false)); if (\".\".equals(normalized)) { // skip } else if (\"..\".equals(normalized)) { if (segments.size() > 1) { segments.remove(segments.size() - 1); } } else { segments.add(normalized); } } SLASH_JOINER.appendTo(sb, segments); if (query != null) { sb.append(query); } return sb.toString(); } \n### Response:", "ground_truth": "Normalizes a path by unescaping all safe, percent encoded characters.", "predict": "Normalizes a path.\n\n@param path the path to normalize\n@return the normalized path"}
{"ID": 341, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T extends Annotation> T generateAnnotation(Class<T> annotationType) { Preconditions.checkState( isAllDefaultMethods(annotationType), \"%s is not all default methods\", annotationType); return (T) cache.getUnchecked(annotationType); } \n### Response:", "ground_truth": "Generates an Annotation for the annotation class. Requires that the annotation is all\noptionals.", "predict": "Generates an annotation from its type.\n\n@param annotationType the annotation type\n@return the annotation"}
{"ID": 342, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isRetainedAtRuntime(Class<? extends Annotation> annotationType) { Retention retention = annotationType.getAnnotation(Retention.class); return retention != null && retention.value() == RetentionPolicy.RUNTIME; } \n### Response:", "ground_truth": "Returns true if the given annotation is retained at runtime.", "predict": "Checks if the annotation is retained at runtime.\n\n@param annotationType annotation type\n@return true if the annotation is retained at runtime"}
{"ID": 343, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Class<? extends Annotation> findScopeAnnotation( Errors errors, Annotation[] annotations) { Class<? extends Annotation> found = null; for (Annotation annotation : annotations) { Class<? extends Annotation> annotationType = annotation.annotationType(); if (isScopeAnnotation(annotationType)) { if (found != null) { errors.duplicateScopeAnnotations(found, annotationType); } else { found = annotationType; } } } return found; } \n### Response:", "ground_truth": "Returns the scoping annotation, or null if there isn't one.", "predict": "Finds the annotation that is a scope annotation.\n\n@param errors the errors\n@param annotations the annotations\n@return the annotation"}
{"ID": 344, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Key<?> getKey( TypeLiteral<?> type, Member member, Annotation[] annotations, Errors errors) throws ErrorsException { int numErrorsBefore = errors.size(); Annotation found = findBindingAnnotation(errors, member, annotations); errors.throwIfNewErrors(numErrorsBefore); return found == null ? Key.get(type) : Key.get(type, found); } \n### Response:", "ground_truth": "Gets a key for the given type, member and annotations.", "predict": "Returns the key for the given type and annotations.\n\n@param type the type to get the key for\n@param member the member to get the key for\n@param annotations the annotations to get the key for\n@param errors the errors to throw if the key could not be found\n@return the key for the given type and annotations\n@throws ErrorsException if the key could not be found"}
{"ID": 345, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String nameOf(Key<?> key) { Annotation annotation = key.getAnnotation(); Class<? extends Annotation> annotationType = key.getAnnotationType(); if (annotation != null && !isMarker(annotationType)) { return key.getAnnotation().toString(); } else if (key.getAnnotationType() != null) { return \"@\" + key.getAnnotationType().getName(); } else { return \"\"; } } \n### Response:", "ground_truth": "Returns the name the binding should use. This is based on the annotation. If the annotation has\nan instance and is not a marker annotation, we ask the annotation for its toString. If it was a\nmarker annotation or just an annotation type, we use the annotation's name. Otherwise, the name\nis the empty string.", "predict": "Returns the name of the annotation associated with the given key.\n\n@param key the key\n@return the name of the annotation"}
{"ID": 346, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void initializeDelegate(Provider<T> delegate) { checkState(this.delegate == null, \"delegate already initialized\"); this.delegate = checkNotNull(delegate, \"delegate\"); } \n### Response:", "ground_truth": "Sets the actual provider.\n\n@throws IllegalStateException if the delegate is already set", "predict": "Initializes the delegate.\n\n@param delegate the delegate to initialize"}
{"ID": 347, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addDirectTypeBinding(Binder binder) { binder .bind(bindingSelection.getDirectKey()) .toProvider(new RealDirectTypeProvider<T>(bindingSelection)); } \n### Response:", "ground_truth": "Adds a binding for T. Multiple calls to this are safe, and will be collapsed as duplicate\nbindings.", "predict": "Adds a direct type binding to the binder.\n\n@param binder the binder"}
{"ID": 348, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ConstructorInjector<?> get(InjectionPoint constructorInjector, Errors errors) throws ErrorsException { return cache.get(constructorInjector, errors); } \n### Response:", "ground_truth": "Returns a new complete constructor injector with injection listeners registered.", "predict": "Get the constructorInjector from the cache.\n\n@param constructorInjector the constructorInjector\n@param errors the errors\n@return the constructorInjector\n@throws ErrorsException the errors exception"}
{"ID": 349, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static boolean hasScope(Class<? extends Interceptor> interceptorClass) { for (Annotation annotation : interceptorClass.getAnnotations()) { if (Annotations.isScopeAnnotation(annotation.annotationType())) { return true; } } return false; } \n### Response:", "ground_truth": "Returns true if the given class has a scope annotation.", "predict": "Checks if the given interceptor class has a scope annotation.\n\n@param interceptorClass the interceptor class\n@return true if the given interceptor class has a scope annotation"}
{"ID": 350, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: static <K, V> RealMapBinder<K, V> newRealMapBinder( Binder binder, TypeLiteral<K> keyType, Key<V> valueTypeAndAnnotation) { binder = binder.skipSources(RealMapBinder.class); TypeLiteral<V> valueType = valueTypeAndAnnotation.getTypeLiteral(); return newRealMapBinder( binder, keyType, valueType, valueTypeAndAnnotation.ofType(mapOf(keyType, valueType)), RealMultibinder.newRealSetBinder( binder, valueTypeAndAnnotation.ofType(entryOfProviderOf(keyType, valueType)))); } \n### Response:", "ground_truth": "since it's an easy way to group a type and an optional annotation type or instance.", "predict": "Creates a map binder that will bind a key to a value using the given binder."}
{"ID": 351, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: Key<V> getKeyForNewValue(K key) { checkNotNull(key, \"key\"); checkConfiguration(!bindingSelection.isInitialized(), \"MapBinder was already initialized\"); RealMultibinder<Map.Entry<K, Provider<V>>> entrySetBinder = bindingSelection.getEntrySetBinder(); Key<V> valueKey = Key.get( bindingSelection.getValueType(), new RealElement( entrySetBinder.getSetName(), MAPBINDER, bindingSelection.getKeyType().toString())); entrySetBinder.addBinding().toProvider(new ProviderMapEntry<K, V>(key, valueKey)); return valueKey; } \n### Response:", "ground_truth": "Adds a binding to the map for the given key.", "predict": "Returns the key for the given value.\n\n@param key the key\n@return the key"}
{"ID": 352, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private T provision(InternalContext context, ConstructionContext<T> constructionContext) throws InternalProvisionException { try { T t; try { Object[] parameters = SingleParameterInjector.getAll(context, parameterInjectors); t = constructionProxy.newInstance(parameters); constructionContext.setProxyDelegates(t); } finally { constructionContext.finishConstruction(); } // Store reference. If an injector re-enters this factory, they'll get the same reference. constructionContext.setCurrentReference(t); MembersInjectorImpl<T> localMembersInjector = membersInjector; localMembersInjector.injectMembers(t, context, false); localMembersInjector.notifyListeners(t); return t; } catch (InvocationTargetException userException) { Throwable cause = userException.getCause() != null ? userException.getCause() : userException; throw InternalProvisionException.errorInjectingConstructor(cause) .addSource(constructionProxy.getInjectionPoint()); } finally { constructionContext.removeCurrentReference(); } } \n### Response:", "ground_truth": "Provisions a new T.", "predict": "Injects the constructor of the given type into the given construction context."}
{"ID": 353, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Object writeReplace() throws ObjectStreamException { Object[] sourcesAsStrings = sources.toArray(); for (int i = 0; i < sourcesAsStrings.length; i++) { sourcesAsStrings[i] = Errors.convert(sourcesAsStrings[i]).toString(); } return new Message(ImmutableList.copyOf(sourcesAsStrings), message, cause); } \n### Response:", "ground_truth": "When serialized, we eagerly convert sources to strings. This hurts our formatting, but it\nguarantees that the receiving end will be able to read the message.", "predict": "Writes the message with the given sources replaced."}
{"ID": 354, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: static Module forModule(Module module) { // avoid infinite recursion, since installing a module always installs itself if (module instanceof CheckedProviderMethodsModule) { return Modules.EMPTY_MODULE; } return new CheckedProviderMethodsModule(module); } \n### Response:", "ground_truth": "Returns a module which creates bindings for provider methods from the given module.", "predict": "Returns a module that implements the given module."}
{"ID": 355, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override @SuppressWarnings(\"unchecked\") public Collection<AssistedMethod> getAssistedMethods() { return (Collection<AssistedMethod>) (Collection<?>) assistDataByMethod.values(); } \n### Response:", "ground_truth": "the collection is immutable.", "predict": "Returns a collection of all the assist methods.\n\n@return a collection of all the assist methods"}
{"ID": 356, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean isTypeNotSpecified(TypeLiteral<?> typeLiteral, ConfigurationException ce) { Collection<Message> messages = ce.getErrorMessages(); if (messages.size() == 1) { Message msg = Iterables.getOnlyElement(new Errors().keyNotFullySpecified(typeLiteral).getMessages()); return msg.getMessage().equals(Iterables.getOnlyElement(messages).getMessage()); } else { return false; } } \n### Response:", "ground_truth": "Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully\nspecified.", "predict": "Checks if the type literal is not fully specified.\n\n@param typeLiteral the type literal\n@param ce the exception\n@return true if the type literal is not fully specified"}
{"ID": 357, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean constructorHasMatchingParams( TypeLiteral<?> type, Constructor<?> constructor, List<Key<?>> paramList, Errors errors) throws ErrorsException { List<TypeLiteral<?>> params = type.getParameterTypes(constructor); Annotation[][] paramAnnotations = constructor.getParameterAnnotations(); int p = 0; List<Key<?>> constructorKeys = Lists.newArrayList(); for (TypeLiteral<?> param : params) { Key<?> paramKey = Annotations.getKey(param, constructor, paramAnnotations[p++], errors); constructorKeys.add(paramKey); } // Require that every key exist in the constructor to match up exactly. for (Key<?> key : paramList) { // If it didn't exist in the constructor set, we can't use it. if (!constructorKeys.remove(key)) { return false; } } // If any keys remain and their annotation is Assisted, we can't use it. for (Key<?> key : constructorKeys) { if (key.getAnnotationType() == Assisted.class) { return false; } } // All @Assisted params match up to the method's parameters. return true; } \n### Response:", "ground_truth": "Matching logic for constructors annotated with AssistedInject. This returns true if and only if\nall @Assisted parameters in the constructor exactly match (in any order) all @Assisted\nparameters the method's parameter.", "predict": "Checks if the given constructor has all the required params."}
{"ID": 358, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Set<Dependency<?>> getDependencies( InjectionPoint ctorPoint, TypeLiteral<?> implementation) { ImmutableSet.Builder<Dependency<?>> builder = ImmutableSet.builder(); builder.addAll(ctorPoint.getDependencies()); if (!implementation.getRawType().isInterface()) { for (InjectionPoint ip : InjectionPoint.forInstanceMethodsAndFields(implementation)) { builder.addAll(ip.getDependencies()); } } return builder.build(); } \n### Response:", "ground_truth": "Calculates all dependencies required by the implementation and constructor.", "predict": "Returns a set of dependencies for the given ctor point and implementation type."}
{"ID": 359, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Set<Dependency<?>> removeAssistedDeps(Set<Dependency<?>> deps) { ImmutableSet.Builder<Dependency<?>> builder = ImmutableSet.builder(); for (Dependency<?> dep : deps) { Class<?> annotationType = dep.getKey().getAnnotationType(); if (annotationType == null || !annotationType.equals(Assisted.class)) { builder.add(dep); } } return builder.build(); } \n### Response:", "ground_truth": "Return all non-assisted dependencies.", "predict": "Removes all dependencies that are annotated with Assisted."}
{"ID": 360, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean isValidForOptimizedAssistedInject( Set<Dependency<?>> dependencies, Class<?> implementation, TypeLiteral<?> factoryType) { Set<Dependency<?>> badDeps = null; // optimization: create lazily for (Dependency<?> dep : dependencies) { if (isInjectorOrAssistedProvider(dep)) { if (badDeps == null) { badDeps = Sets.newHashSet(); } badDeps.add(dep); } } if (badDeps != null && !badDeps.isEmpty()) { logger.log( Level.WARNING, \"AssistedInject factory {0} will be slow \" + \"because {1} has assisted Provider dependencies or injects the Injector. \" + \"Stop injecting @Assisted Provider<T> (instead use @Assisted T) \" + \"or Injector to speed things up. (It will be a ~6500% speed bump!) \" + \"The exact offending deps are: {2}\", new Object[] {factoryType, implementation, badDeps}); return false; } return true; } \n### Response:", "ground_truth": "Returns true if all dependencies are suitable for the optimized version of AssistedInject. The\noptimized version caches the binding & uses a ThreadLocal Provider, so can only be applied if\nthe assisted bindings are immediately provided. This looks for hints that the values may be\nlazily retrieved, by looking for injections of Injector or a Provider for the assisted values.", "predict": "Checks if the dependencies are valid for the optimized assisted injection.\n\n@param dependencies dependencies to check\n@param implementation implementation to check\n@param factoryType factory type to check\n@return true if valid, false otherwise"}
{"ID": 361, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Binding<?> getBindingFromNewInjector( final Method method, final Object[] args, final AssistData data) { checkState( injector != null, \"Factories.create() factories cannot be used until they're initialized by Guice.\"); final Key<?> returnType = data.returnType; // We ignore any pre-existing binding annotation. final Key<?> returnKey = Key.get(returnType.getTypeLiteral(), RETURN_ANNOTATION); Module assistedModule = new AbstractModule() { @Override @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) // raw keys are necessary for the args array and return value protected void configure() { Binder binder = binder().withSource(method); int p = 0; if (!data.optimized) { for (Key<?> paramKey : data.paramTypes) { // Wrap in a Provider to cover null, and to prevent Guice from injecting the // parameter binder.bind((Key) paramKey).toProvider(Providers.of(args[p++])); } } else { for (Key<?> paramKey : data.paramTypes) { // Bind to our ThreadLocalProviders. binder.bind((Key) paramKey).toProvider(data.providers.get(p++)); } } Constructor constructor = data.constructor; // Constructor *should* always be non-null here, // but if it isn't, we'll end up throwing a fairly good error // message for the user. if (constructor != null) { binder .bind(returnKey) .toConstructor(constructor, (TypeLiteral) data.implementationType) .in(Scopes.NO_SCOPE); // make sure we erase any scope on the implementation type } } }; Injector forCreate = injector.createChildInjector(assistedModule); Binding<?> binding = forCreate.getBinding(returnKey); // If we have providers cached in data, cache the binding for future optimizations. if (data.optimized) { data.cachedBinding = binding; } return binding; } \n### Response:", "ground_truth": "Creates a child injector that binds the args, and returns the binding for the method's result.", "predict": "Returns a binding from the new injector."}
{"ID": 362, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Object invoke(Object proxy, final Method method, final Object[] args) throws Throwable { // If we setup a method handle earlier for this method, call it. // This is necessary for default methods that java8 creates, so we // can call the default method implementation (and not our proxied version of it). if (methodHandleByMethod.containsKey(method)) { return methodHandleByMethod.get(method).invokeWithArguments(args); } if (method.getDeclaringClass().equals(Object.class)) { if (\"equals\".equals(method.getName())) { return proxy == args[0]; } else if (\"hashCode\".equals(method.getName())) { return System.identityHashCode(proxy); } else { return method.invoke(this, args); } } AssistData data = assistDataByMethod.get(method); checkState(data != null, \"No data for method: %s\", method); Provider<?> provider; if (data.cachedBinding != null) { // Try to get optimized form... provider = data.cachedBinding.getProvider(); } else { provider = getBindingFromNewInjector(method, args, data).getProvider(); } try { int p = 0; for (ThreadLocalProvider tlp : data.providers) { tlp.set(args[p++]); } return provider.get(); } catch (ProvisionException e) { // if this is an exception declared by the factory method, throw it as-is if (e.getErrorMessages().size() == 1) { Message onlyError = getOnlyElement(e.getErrorMessages()); Throwable cause = onlyError.getCause(); if (cause != null && canRethrow(method, cause)) { throw cause; } } throw e; } finally { for (ThreadLocalProvider tlp : data.providers) { tlp.remove(); } } } \n### Response:", "ground_truth": "When a factory method is invoked, we create a child injector that binds all parameters, then\nuse that to get an instance of the return type.", "predict": "Invokes the given method on the proxy object."}
{"ID": 363, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: <T> Errors missingImplementationWithHint(Key<T> key, Injector injector) { StringBuilder sb = new StringBuilder(); sb.append(format(\"No implementation for %s was bound.\", key)); // Keys which have similar strings as the desired key List<String> possibleMatches = new ArrayList<>(); // Check for other keys that may have the same type, // but not the same annotation TypeLiteral<T> type = key.getTypeLiteral(); List<Binding<T>> sameTypes = injector.findBindingsByType(type); if (!sameTypes.isEmpty()) { sb.append(format(\"%n Did you mean?\")); int howMany = Math.min(sameTypes.size(), MAX_MATCHING_TYPES_REPORTED); for (int i = 0; i < howMany; ++i) { // TODO: Look into a better way to prioritize suggestions. For example, possbily // use levenshtein distance of the given annotation vs actual annotation. sb.append(format(\"%n * %s\", sameTypes.get(i).getKey())); } int remaining = sameTypes.size() - MAX_MATCHING_TYPES_REPORTED; if (remaining > 0) { String plural = (remaining == 1) ? \"\" : \"s\"; sb.append(format(\"%n %d more binding%s with other annotations.\", remaining, plural)); } } else { // For now, do a simple substring search for possibilities. This can help spot // issues when there are generics being used (such as a wrapper class) and the // user has forgotten they need to bind based on the wrapper, not the underlying // class. In the future, consider doing a strict in-depth type search. // TODO: Look into a better way to prioritize suggestions. For example, possbily // use levenshtein distance of the type literal strings. String want = type.toString(); Map<Key<?>, Binding<?>> bindingMap = injector.getAllBindings(); for (Key<?> bindingKey : bindingMap.keySet()) { String have = bindingKey.getTypeLiteral().toString(); if (have.contains(want) || want.contains(have)) { Formatter fmt = new Formatter(); Messages.formatSource(fmt, bindingMap.get(bindingKey).getSource()); String match = String.format(\"%s bound%s\", convert(bindingKey), fmt.toString()); possibleMatches.add(match); // TODO: Consider a check that if there are more than some number of results, // don't suggest any. if (possibleMatches.size() > MAX_RELATED_TYPES_REPORTED) { // Early exit if we have found more than we need. break; } } } if ((possibleMatches.size() > 0) && (possibleMatches.size() <= MAX_RELATED_TYPES_REPORTED)) { sb.append(format(\"%n Did you mean?\")); for (String possibleMatch : possibleMatches) { sb.append(format(\"%n %s\", possibleMatch)); } } } // If where are no possibilities to suggest, then handle the case of missing // annotations on simple types. This is usually a bad idea. if (sameTypes.isEmpty() && possibleMatches.isEmpty() && key.getAnnotation() == null && COMMON_AMBIGUOUS_TYPES.contains(key.getTypeLiteral().getRawType())) { // We don't recommend using such simple types without annotations. sb.append(format(\"%nThe key seems very generic, did you forget an annotation?\")); } return addMessage(sb.toString()); } \n### Response:", "ground_truth": "Within guice's core, allow for better missing binding messages", "predict": "Provides a message indicating that the given key was not bound.\n\n@param key the key to check\n@param injector the injector to use\n@return a message indicating the error"}
{"ID": 364, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> RealMultibinder<T> newRealSetBinder(Binder binder, Key<T> key) { binder = binder.skipSources(RealMultibinder.class); RealMultibinder<T> result = new RealMultibinder<>(binder, key); binder.install(result); return result; } \n### Response:", "ground_truth": "Implementation of newSetBinder.", "predict": "Creates a new multi binder that only supports the specified key."}
{"ID": 365, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: Key<T> getKeyForNewItem() { checkConfiguration(!bindingSelection.isInitialized(), \"Multibinder was already initialized\"); return Key.get( bindingSelection.getElementTypeLiteral(), new RealElement(bindingSelection.getSetName(), MULTIBINDER, \"\")); } \n### Response:", "ground_truth": "Adds a new entry to the set and returns the key for it.", "predict": "Returns the key for the new binding."}
{"ID": 366, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Filter findNextFilter(HttpServletRequest request) { while (++index < filterDefinitions.length) { Filter filter = filterDefinitions[index].getFilterIfMatching(request); if (filter != null) { return filter; } } return null; } \n### Response:", "ground_truth": "Iterates over the remaining filter definitions. Returns the first applicable filter, or null if\nnone apply.", "predict": "Finds the next filter that matches the request.\n\n@param request the request\n@return the next filter or null if none"}
{"ID": 367, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static boolean hasAtInject(Constructor cxtor) { return cxtor.isAnnotationPresent(Inject.class) || cxtor.isAnnotationPresent(javax.inject.Inject.class); } \n### Response:", "ground_truth": "Returns true if the inject annotation is on the constructor.", "predict": "Checks if the constructor has the annotation Inject.\n@param cxtor the constructor\n@return true if the annotation Inject is present"}
{"ID": 368, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: InjectionPoint getInternalConstructor() { if (factory.constructorInjector != null) { return factory.constructorInjector.getConstructionProxy().getInjectionPoint(); } else { return constructorInjectionPoint; } } \n### Response:", "ground_truth": "Returns an injection point that can be used to clean up the constructor store.", "predict": "Returns the constructor injection point."}
{"ID": 369, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: Set<Dependency<?>> getInternalDependencies() { ImmutableSet.Builder<InjectionPoint> builder = ImmutableSet.builder(); if (factory.constructorInjector == null) { builder.add(constructorInjectionPoint); // If the below throws, it's OK -- we just ignore those dependencies, because no one // could have used them anyway. try { builder.addAll( InjectionPoint.forInstanceMethodsAndFields( constructorInjectionPoint.getDeclaringType())); } catch (ConfigurationException ignored) { } } else { builder.add(getConstructor()).addAll(getInjectableMembers()); } return Dependency.forInjectionPoints(builder.build()); } \n### Response:", "ground_truth": "Returns a set of dependencies that can be iterated over to clean up stray JIT bindings.", "predict": "Returns a set of all the internal dependencies."}
{"ID": 370, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Module forModule(Object module, ModuleAnnotatedMethodScanner scanner) { return forObject(module, false, scanner); } \n### Response:", "ground_truth": "Returns a module which creates bindings methods in the module that match the scanner.", "predict": "Returns a Module instance for the given module.\n\n@param module the module to scan\n@param scanner the scanner to use\n@return the Module instance"}
{"ID": 371, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Annotation getAnnotation(Binder binder, Method method) { if (method.isBridge() || method.isSynthetic()) { return null; } Annotation annotation = null; for (Class<? extends Annotation> annotationClass : scanner.annotationClasses()) { Annotation foundAnnotation = method.getAnnotation(annotationClass); if (foundAnnotation != null) { if (annotation != null) { binder.addError( \"More than one annotation claimed by %s on method %s.\" + \" Methods can only have one annotation claimed per scanner.\", scanner, method); return null; } annotation = foundAnnotation; } } return annotation; } \n### Response:", "ground_truth": "Returns the annotation that is claimed by the scanner, or null if there is none.", "predict": "Returns the annotation associated with the given method.\n\n@param binder the binder\n@param method the method\n@return the annotation"}
{"ID": 372, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Integer getLineNumber(Member member) { Preconditions.checkArgument( type == member.getDeclaringClass(), \"Member %s belongs to %s, not %s\", member, member.getDeclaringClass(), type); return lines.get(memberKey(member)); } \n### Response:", "ground_truth": "Get the line number associated with the given member.\n\n@param member a field, constructor, or method belonging to the class used during construction\n@return the wrapped line number, or null if not available\n@throws IllegalArgumentException if the member does not belong to the class used during\nconstruction", "predict": "Returns the line number of the given member.\n\n@param member the member\n@return the line number"}
{"ID": 373, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: void initialize(Errors errors) { injector.lookups = injector; new LookupProcessor(errors).process(injector, lookups); } \n### Response:", "ground_truth": "Initialize the specified lookups, either immediately or when the injector is created.", "predict": "Initializes the injector."}
{"ID": 374, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Deprecated public static <T> Callable<T> continueRequest(Callable<T> callable, Map<Key<?>, Object> seedMap) { return wrap(callable, continueRequest(seedMap)); } \n### Response:", "ground_truth": "Wraps the given callable in a contextual callable that \"continues\" the HTTP request in another\nthread. This acts as a way of transporting request context data from the request processing\nthread to to worker threads.\n\n<p>There are some limitations:\n\n<ul>\n<li>Derived objects (i.e. anything marked @RequestScoped will not be transported.\n<li>State changes to the HttpServletRequest after this method is called will not be seen in the\ncontinued thread.\n<li>Only the HttpServletRequest, ServletContext and request parameter map are available in the\ncontinued thread. The response and session are not available.\n</ul>\n\n<p>The returned callable will throw a {@link ScopingException} when called if the HTTP request\nscope is still active on the current thread.\n\n@param callable code to be executed in another thread, which depends on the request scope.\n@param seedMap the initial set of scoped instances for Guice to seed the request scope with. To\nseed a key with null, use {@code null} as the value.\n@return a callable that will invoke the given callable, making the request context available to\nit.\n@throws OutOfScopeException if this method is called from a non-request thread, or if the\nrequest has completed.\n@since 3.0\n@deprecated You probably want to use {@code transferRequest} instead", "predict": "Wrap a callable and continue the request.\n\n@param callable the callable to wrap\n@param seedMap the map of keys and values to seed the request with\n@return the wrapped callable\n@deprecated Use {@link #wrap(Callable, Map)} instead"}
{"ID": 375, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> Callable<T> transferRequest(Callable<T> callable) { return wrap(callable, transferRequest()); } \n### Response:", "ground_truth": "Wraps the given callable in a contextual callable that \"transfers\" the request to another\nthread. This acts as a way of transporting request context data from the current thread to a\nfuture thread.\n\n<p>As opposed to {@link #continueRequest}, this method propagates all existing scoped objects.\nThe primary use case is in server implementations where you can detach the request processing\nthread while waiting for data, and reattach to a different thread to finish processing at a\nlater time.\n\n<p>Because request-scoped objects are not typically thread-safe, the callable returned by this\nmethod must not be run on a different thread until the current request scope has terminated.\nThe returned callable will block until the current thread has released the request scope.\n\n@param callable code to be executed in another thread, which depends on the request scope.\n@return a callable that will invoke the given callable, making the request context available to\nit.\n@throws OutOfScopeException if this method is called from a non-request thread, or if the\nrequest has completed.\n@since 4.0", "predict": "Wrap a callable to transfer the request to the remote server.\n\n@param callable the callable to wrap\n@return the wrapped callable"}
{"ID": 376, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static Object validateAndCanonicalizeValue(Key<?> key, Object object) { if (object == null || object == NullObject.INSTANCE) { return NullObject.INSTANCE; } if (!key.getTypeLiteral().getRawType().isInstance(object)) { throw new IllegalArgumentException( \"Value[\" + object + \"] of type[\" + object.getClass().getName() + \"] is not compatible with key[\" + key + \"]\"); } return object; } \n### Response:", "ground_truth": "Validates the key and object, ensuring the value matches the key type, and canonicalizing null\nobjects to the null sentinel.", "predict": "Validates and canonicalizes the given object.\n\n@param key the key\n@param object the object\n@return the object"}
{"ID": 377, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") // the MembersInjector type always agrees with the passed type public <T> MembersInjectorImpl<T> get(TypeLiteral<T> key, Errors errors) throws ErrorsException { return (MembersInjectorImpl<T>) cache.get(key, errors); } \n### Response:", "ground_truth": "Returns a new complete members injector with injection listeners registered.", "predict": "Returns the MembersInjectorImpl instance for the given type literal."}
{"ID": 378, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private <T> MembersInjectorImpl<T> createWithListeners(TypeLiteral<T> type, Errors errors) throws ErrorsException { int numErrorsBefore = errors.size(); Set<InjectionPoint> injectionPoints; try { injectionPoints = InjectionPoint.forInstanceMethodsAndFields(type); } catch (ConfigurationException e) { errors.merge(e.getErrorMessages()); injectionPoints = e.getPartialValue(); } ImmutableList<SingleMemberInjector> injectors = getInjectors(injectionPoints, errors); errors.throwIfNewErrors(numErrorsBefore); EncounterImpl<T> encounter = new EncounterImpl<>(errors, injector.lookups); Set<TypeListener> alreadySeenListeners = Sets.newHashSet(); for (TypeListenerBinding binding : typeListenerBindings) { TypeListener typeListener = binding.getListener(); if (!alreadySeenListeners.contains(typeListener) && binding.getTypeMatcher().matches(type)) { alreadySeenListeners.add(typeListener); try { typeListener.hear(type, encounter); } catch (RuntimeException e) { errors.errorNotifyingTypeListener(binding, type, e); } } } encounter.invalidate(); errors.throwIfNewErrors(numErrorsBefore); return new MembersInjectorImpl<T>(injector, type, encounter, injectors); } \n### Response:", "ground_truth": "Creates a new members injector and attaches both injection listeners and method aspects.", "predict": "Creates a new MembersInjectorImpl instance with the given type and errors."}
{"ID": 379, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: ImmutableList<SingleMemberInjector> getInjectors( Set<InjectionPoint> injectionPoints, Errors errors) { List<SingleMemberInjector> injectors = Lists.newArrayList(); for (InjectionPoint injectionPoint : injectionPoints) { try { Errors errorsForMember = injectionPoint.isOptional() ? new Errors(injectionPoint) : errors.withSource(injectionPoint); SingleMemberInjector injector = injectionPoint.getMember() instanceof Field ? new SingleFieldInjector(this.injector, injectionPoint, errorsForMember) : new SingleMethodInjector(this.injector, injectionPoint, errorsForMember); injectors.add(injector); } catch (ErrorsException ignoredForNow) { // ignored for now } } return ImmutableList.copyOf(injectors); } \n### Response:", "ground_truth": "Returns the injectors for the specified injection points.", "predict": "Returns a list of SingleMemberInjectors for the given injection points."}
{"ID": 380, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: static <T> Key<T> get(Class<T> type, AnnotationStrategy annotationStrategy) { return new Key<T>(type, annotationStrategy); } \n### Response:", "ground_truth": "Gets a key for an injection type and an annotation strategy.", "predict": "Returns a key for the given type and annotation strategy."}
{"ID": 381, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: static AnnotationStrategy strategyFor(Annotation annotation) { checkNotNull(annotation, \"annotation\"); Class<? extends Annotation> annotationType = annotation.annotationType(); ensureRetainedAtRuntime(annotationType); ensureIsBindingAnnotation(annotationType); if (Annotations.isMarker(annotationType)) { return new AnnotationTypeStrategy(annotationType, annotation); } return new AnnotationInstanceStrategy(Annotations.canonicalizeIfNamed(annotation)); } \n### Response:", "ground_truth": "Gets the strategy for an annotation.", "predict": "Returns the strategy for the given annotation."}
{"ID": 382, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: static AnnotationStrategy strategyFor(Class<? extends Annotation> annotationType) { annotationType = Annotations.canonicalizeIfNamed(annotationType); if (isAllDefaultMethods(annotationType)) { return strategyFor(generateAnnotation(annotationType)); } checkNotNull(annotationType, \"annotation type\"); ensureRetainedAtRuntime(annotationType); ensureIsBindingAnnotation(annotationType); return new AnnotationTypeStrategy(annotationType, null); } \n### Response:", "ground_truth": "Gets the strategy for an annotation type.", "predict": "Returns strategy for given annotation type."}
{"ID": 383, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void pruneStacktrace(Throwable throwable) { for (Throwable t = throwable; t != null; t = t.getCause()) { StackTraceElement[] stackTrace = t.getStackTrace(); List<StackTraceElement> pruned = Lists.newArrayList(); for (StackTraceElement element : stackTrace) { String className = element.getClassName(); if (!AOP_INTERNAL_CLASSES.contains(className) && !className.contains(\"$EnhancerByGuice$\")) { pruned.add(element); } } t.setStackTrace(pruned.toArray(new StackTraceElement[pruned.size()])); } } \n### Response:", "ground_truth": "Removes stacktrace elements related to AOP internal mechanics from the throwable's stack trace\nand any causes it may have.", "predict": "Removes all classes that are not part of the AOP internal classes."}
{"ID": 384, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getBindingSource() { if (source instanceof Class) { return StackTraceElements.forType((Class) source).toString(); } else if (source instanceof Member) { return StackTraceElements.forMember((Member) source).toString(); } else { return source.toString(); } } \n### Response:", "ground_truth": "Returns a string describing where this dependency was bound. If the binding was just-in-time,\nthere is no valid binding source, so this describes the class in question.", "predict": "Returns the source of the binding."}
{"ID": 385, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String formatMessages(String heading, Collection<Message> errorMessages) { Formatter fmt = new Formatter().format(heading).format(\":%n%n\"); int index = 1; boolean displayCauses = getOnlyCause(errorMessages) == null; Map<Equivalence.Wrapper<Throwable>, Integer> causes = Maps.newHashMap(); for (Message errorMessage : errorMessages) { int thisIdx = index++; fmt.format(\"%s) %s%n\", thisIdx, errorMessage.getMessage()); List<Object> dependencies = errorMessage.getSources(); for (int i = dependencies.size() - 1; i >= 0; i--) { Object source = dependencies.get(i); formatSource(fmt, source); } Throwable cause = errorMessage.getCause(); if (displayCauses && cause != null) { Equivalence.Wrapper<Throwable> causeEquivalence = ThrowableEquivalence.INSTANCE.wrap(cause); if (!causes.containsKey(causeEquivalence)) { causes.put(causeEquivalence, thisIdx); fmt.format(\"Caused by: %s\", Throwables.getStackTraceAsString(cause)); } else { int causeIdx = causes.get(causeEquivalence); fmt.format( \"Caused by: %s (same stack trace as error #%s)\", cause.getClass().getName(), causeIdx); } } fmt.format(\"%n\"); } if (errorMessages.size() == 1) { fmt.format(\"1 error\"); } else { fmt.format(\"%s errors\", errorMessages.size()); } return fmt.toString(); } \n### Response:", "ground_truth": "Returns the formatted message for an exception with the specified messages.", "predict": "Formats a collection of messages into a human-readable string.\n\n@param heading the heading of the output\n@param errorMessages the collection of messages to format\n@return the formatted string"}
{"ID": 386, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Message create(String messageFormat, Object... arguments) { return create(null, messageFormat, arguments); } \n### Response:", "ground_truth": "Creates a new Message without a cause.\n\n@param messageFormat Format string\n@param arguments format string arguments", "predict": "Creates a message with the given format and arguments.\n\n@param messageFormat the message format\n@param arguments the arguments\n@return the message"}
{"ID": 387, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Message create(Throwable cause, String messageFormat, Object... arguments) { return create(cause, ImmutableList.of(), messageFormat, arguments); } \n### Response:", "ground_truth": "Creates a new Message with the given cause.\n\n@param cause The exception that caused the error\n@param messageFormat Format string\n@param arguments format string arguments", "predict": "Creates a message with the given cause and message format.\n\n@param cause the cause\n@param messageFormat the message format\n@param arguments the arguments\n@return the message"}
{"ID": 388, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Message create( Throwable cause, List<Object> sources, String messageFormat, Object... arguments) { String message = format(messageFormat, arguments); return new Message(sources, message, cause); } \n### Response:", "ground_truth": "Creates a new Message with the given cause and a binding source stack.\n\n@param cause The exception that caused the error\n@param sources The binding sources for the source stack\n@param messageFormat Format string\n@param arguments format string arguments", "predict": "Creates a message with the given cause and sources.\n\n@param cause the cause\n@param sources the sources\n@param messageFormat the message format\n@param arguments the arguments\n@return the message"}
{"ID": 389, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: static Object convert(Object o) { ElementSource source = null; if (o instanceof ElementSource) { source = (ElementSource) o; o = source.getDeclaringSource(); } return convert(o, source); } \n### Response:", "ground_truth": "Formats an object in a user friendly way.", "predict": "Converts an element source to a target object.\n\n@param o\n@return"}
{"ID": 390, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean shouldBeSkipped(String className) { return (parent != null && parent.shouldBeSkipped(className)) || classNamesToSkip.contains(className); } \n### Response:", "ground_truth": "Returns true if the className should be skipped.", "predict": "Checks if a class is skipped.\n\n@param className the class name\n@return true if the class is skipped"}
{"ID": 391, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object getFromClassNames(List<String> moduleClassNames) { Preconditions.checkNotNull(moduleClassNames, \"The list of module class names cannot be null.\"); for (final String moduleClassName : moduleClassNames) { if (!shouldBeSkipped(moduleClassName)) { return new StackTraceElement(moduleClassName, \"configure\", null, -1); } } return UNKNOWN_SOURCE; } \n### Response:", "ground_truth": "Returns the non-skipped module class name.", "predict": "Get the source code for a given list of module class names.\n\n@param moduleClassNames the list of module class names\n@return the source code for a given list of module class names"}
{"ID": 392, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void main(String[] args) throws Exception { if (args.length != 1) { System.err.println( \"Usage: java -Dcom.sun.management.jmxremote \" + Manager.class.getName() + \" [module class name]\"); System.err.println(\"Then run 'jconsole' to connect.\"); System.exit(1); } Module module = (Module) Class.forName(args[0]).newInstance(); Injector injector = Guice.createInjector(module); manage(args[0], injector); System.out.println(\"Press Ctrl+C to exit...\"); // Sleep forever. Thread.sleep(Long.MAX_VALUE); } \n### Response:", "ground_truth": "Run with no arguments for usage instructions.", "predict": "Main entry point."}
{"ID": 393, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: Dependency<?> pushDependency(Dependency<?> dependency, Object source) { Dependency<?> previous = this.dependency; this.dependency = dependency; doPushState(dependency, source); return previous; } \n### Response:", "ground_truth": "Sets the new current dependency & adds it to the state.", "predict": "Convenience method to add a new dependency to the list.\n\n@param dependency the dependency to add\n@param source the source of the dependency\n@return the previous dependency"}
{"ID": 394, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: void pushState(com.google.inject.Key<?> key, Object source) { doPushState(key, source); } \n### Response:", "ground_truth": "Adds to the state without setting the dependency.", "predict": "Pushes the given state to the given key.\n\n@param key the key\n@param source the source"}
{"ID": 395, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: static <T> Initializable<T> of(final T instance) { return new Initializable<T>() { @Override public T get() { return instance; } @Override public String toString() { return String.valueOf(instance); } }; } \n### Response:", "ground_truth": "Returns an initializable for an instance that requires no initialization.", "predict": "Creates an instance of the given class.\n\n@param instance the class instance\n@return the instance"}
{"ID": 396, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected T provision( Provider<? extends T> provider, Dependency<?> dependency, ConstructionContext<T> constructionContext) throws InternalProvisionException { T t = provider.get(); if (t == null && !dependency.isNullable()) { InternalProvisionException.onNullInjectedIntoNonNullableDependency(source, dependency); } constructionContext.setProxyDelegates(t); return t; } \n### Response:", "ground_truth": "Provisions a new instance. Subclasses should override this to catch exceptions & rethrow as\nErrorsExceptions.", "predict": "Provides a new instance of the given provider, and sets the dependency to the provided\ninstance.\n\n@param provider the provider to be provisioned\n@param dependency the dependency to be injected into the provider\n@param constructionContext the construction context\n@return the provided instance of the provider\n@throws IllegalArgumentException if the provider is null or the dependency is null"}
{"ID": 397, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void onEvent(ConnectionEventType type, String remoteAddr, Connection conn) { List<ConnectionEventProcessor> processorList = this.processors.get(type); if (processorList != null) { for (ConnectionEventProcessor processor : processorList) { processor.onEvent(remoteAddr, conn); } } } \n### Response:", "ground_truth": "Dispatch events.\n\n@param type\n@param remoteAddr\n@param conn", "predict": "Invoked when a connection event is received.\n\n@param type the type of event\n@param remoteAddr the remote address of the connection\n@param conn the connection object"}
{"ID": 398, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void addConnectionEventProcessor(ConnectionEventType type, ConnectionEventProcessor processor) { List<ConnectionEventProcessor> processorList = this.processors.get(type); if (processorList == null) { this.processors.putIfAbsent(type, new ArrayList<ConnectionEventProcessor>(1)); processorList = this.processors.get(type); } processorList.add(processor); } \n### Response:", "ground_truth": "Add event processor.\n\n@param type\n@param processor", "predict": "Adds a connection event processor to the list of processors for the given type.\n\n@param type the type of the event processor to add\n@param processor the connection event processor to add"}
{"ID": 399, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> T getFutureTaskResult(RunStateRecordedFutureTask<T> task, Logger logger) { T t = null; if (null != task) { try { t = task.getAfterRun(); } catch (InterruptedException e) { logger.error(\"Future task interrupted!\", e); } catch (ExecutionException e) { logger.error(\"Future task execute failed!\", e); } catch (FutureTaskNotRunYetException e) { logger.error(\"Future task has not run yet!\", e); } catch (FutureTaskNotCompleted e) { logger.error(\"Future task has not completed!\", e); } } return t; } \n### Response:", "ground_truth": "get the result of a future task\n\nNotice: the run method of this task should have been called at first.\n\n@param task\n@param <T>\n@return", "predict": "Get the result of a task that is recorded by the given task.\n\n@param task the task to get the result of\n@param logger the logger to use\n@return the result of the task"}
{"ID": 400, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void launderThrowable(Throwable t) { if (t instanceof RuntimeException) { throw (RuntimeException) t; } else if (t instanceof Error) { throw (Error) t; } else { throw new IllegalStateException(\"Not unchecked!\", t); } } \n### Response:", "ground_truth": "launder the throwable\n\n@param t", "predict": "launders a throwable"}
{"ID": 401, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerProcessor(CommandCode cmdCode, RemotingProcessor<?> processor) { if (this.cmd2processors.containsKey(cmdCode)) { logger .warn( \"Processor for cmd={} is already registered, the processor is {}, and changed to {}\", cmdCode, cmd2processors.get(cmdCode).getClass().getName(), processor.getClass() .getName()); } this.cmd2processors.put(cmdCode, processor); } \n### Response:", "ground_truth": "Register processor to process command that has the command code of cmdCode.\n\n@param cmdCode\n@param processor", "predict": "Register a processor for a command code.\n\n@param cmdCode the command code\n@param processor the processor"}
{"ID": 402, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerDefaultProcessor(RemotingProcessor<?> processor) { if (this.defaultProcessor == null) { this.defaultProcessor = processor; } else { throw new IllegalStateException(\"The defaultProcessor has already been registered: \" + this.defaultProcessor.getClass()); } } \n### Response:", "ground_truth": "Register the default processor to process command with no specific processor registered.\n\n@param processor", "predict": "Register a new processor to be used as the default processor.\n\n@param processor the processor to be registered"}
{"ID": 403, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public RemotingProcessor<?> getProcessor(CommandCode cmdCode) { RemotingProcessor<?> processor = this.cmd2processors.get(cmdCode); if (processor != null) { return processor; } return this.defaultProcessor; } \n### Response:", "ground_truth": "Get the specific processor with command code of cmdCode if registered, otherwise the default processor is returned.\n\n@param cmdCode\n@return", "predict": "Get the processor for the given command code.\n\n@param cmdCode the command code\n@return the processor for the given command code"}
{"ID": 404, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Url tryGet(String url) { SoftReference<Url> softRef = Url.parsedUrls.get(url); return (null == softRef) ? null : softRef.get(); } \n### Response:", "ground_truth": "try get from cache\n\n@param url\n@return", "predict": "Returns the URL for the given URL. If the URL is not found, returns null."}
{"ID": 405, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected ProtocolCode decodeProtocolCode(ByteBuf in) { if (in.readableBytes() >= protocolCodeLength) { byte[] protocolCodeBytes = new byte[protocolCodeLength]; in.readBytes(protocolCodeBytes); return ProtocolCode.fromBytes(protocolCodeBytes); } return null; } \n### Response:", "ground_truth": "decode the protocol code\n\n@param in input byte buf\n@return an instance of ProtocolCode", "predict": "Decodes the protocol code from the given byte buffer.\n\n@param in the byte buffer containing the protocol code\n@return the decoded protocol code or null if the buffer is empty"}
{"ID": 406, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Map<String, List<Connection>> getAll() { Map<String, List<Connection>> allConnections = new HashMap<String, List<Connection>>(); Iterator<Map.Entry<String, RunStateRecordedFutureTask<ConnectionPool>>> iterator = this .getConnPools().entrySet().iterator(); while (iterator.hasNext()) { Map.Entry<String, RunStateRecordedFutureTask<ConnectionPool>> entry = iterator.next(); ConnectionPool pool = FutureTaskUtil.getFutureTaskResult(entry.getValue(), logger); if (null != pool) { allConnections.put(entry.getKey(), pool.getAll()); } } return allConnections; } \n### Response:", "ground_truth": "Get all connections of all poolKey.\n\n@return a map with poolKey as key and a list of connections in ConnectionPool as value", "predict": "Returns all connection pool.\n\n@return all connection pool"}
{"ID": 407, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void scan() { if (null != this.connTasks && !this.connTasks.isEmpty()) { Iterator<String> iter = this.connTasks.keySet().iterator(); while (iter.hasNext()) { String poolKey = iter.next(); ConnectionPool pool = this.getConnectionPool(this.connTasks.get(poolKey)); if (null != pool) { pool.scan(); if (pool.isEmpty()) { if ((System.currentTimeMillis() - pool.getLastAccessTimestamp()) > DEFAULT_EXPIRE_TIME) { iter.remove(); logger.warn(\"Remove expired pool task of poolKey {} which is empty.\", poolKey); } } } } } } \n### Response:", "ground_truth": "in case of cache pollution and connection leak, to do schedule scan\n\n@see com.alipay.remoting.Scannable#scan()", "predict": "Scan the pool."}
{"ID": 408, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Connection getAndCreateIfAbsent(Url url) throws InterruptedException, RemotingException { // get and create a connection pool with initialized connections. ConnectionPool pool = this.getConnectionPoolAndCreateIfAbsent(url.getUniqueKey(), new ConnectionPoolCall(url)); if (null != pool) { return pool.get(); } else { logger.error(\"[NOTIFYME] bug detected! pool here must not be null!\"); return null; } } \n### Response:", "ground_truth": "If no task cached, create one and initialize the connections.\n\n@see ConnectionManager#getAndCreateIfAbsent(Url)", "predict": "Returns a connection pool with initialized connections.\n\n@param url the url\n@return the connection pool\n@throws InterruptedException if the thread is interrupted\n@throws RemotingException if the connection pool is not created"}
{"ID": 409, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void createConnectionAndHealIfNeed(Url url) throws InterruptedException, RemotingException { // get and create a connection pool with initialized connections. ConnectionPool pool = this.getConnectionPoolAndCreateIfAbsent(url.getUniqueKey(), new ConnectionPoolCall(url)); if (null != pool) { healIfNeed(pool, url); } else { logger.error(\"[NOTIFYME] bug detected! pool here must not be null!\"); } } \n### Response:", "ground_truth": "If no task cached, create one and initialize the connections.\nIf task cached, check whether the number of connections adequate, if not then heal it.\n\n@param url\n@return\n@throws InterruptedException\n@throws RemotingException", "predict": "Create a connection pool and heal if needed.\n\n@param url the url to connect to\n@throws InterruptedException if the thread is interrupted\n@throws RemotingException if the connection pool is not created"}
{"ID": 410, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void removeTask(String poolKey) { RunStateRecordedFutureTask<ConnectionPool> task = this.connTasks.remove(poolKey); if (null != task) { ConnectionPool pool = FutureTaskUtil.getFutureTaskResult(task, logger); if (null != pool) { pool.removeAllAndTryClose(); } } } \n### Response:", "ground_truth": "remove task and remove all connections\n\n@param poolKey", "predict": "Removes a connection pool task.\n\n@param poolKey the pool key"}
{"ID": 411, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void healIfNeed(ConnectionPool pool, Url url) throws RemotingException, InterruptedException { String poolKey = url.getUniqueKey(); // only when async creating connections done // and the actual size of connections less than expected, the healing task can be run. if (pool.isAsyncCreationDone() && pool.size() < url.getConnNum()) { FutureTask<Integer> task = this.healTasks.get(poolKey); if (null == task) { task = new FutureTask<Integer>(new HealConnectionCall(url, pool)); task = this.healTasks.putIfAbsent(poolKey, task); if (null == task) { task = this.healTasks.get(poolKey); task.run(); } } try { int numAfterHeal = task.get(); if (logger.isDebugEnabled()) { logger.debug(\"[NOTIFYME] - conn num after heal {}, expected {}, warmup {}\", numAfterHeal, url.getConnNum(), url.isConnWarmup()); } } catch (InterruptedException e) { this.healTasks.remove(poolKey); throw e; } catch (ExecutionException e) { this.healTasks.remove(poolKey); Throwable cause = e.getCause(); if (cause instanceof RemotingException) { throw (RemotingException) cause; } else { FutureTaskUtil.launderThrowable(cause); } } // heal task is one-off, remove from cache directly after run this.healTasks.remove(poolKey); } } \n### Response:", "ground_truth": "execute heal connection tasks if the actual number of connections in pool is less than expected\n\n@param pool\n@param url", "predict": "only run if the pool size is less than the expected number of connections"}
{"ID": 412, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void doCreate(final Url url, final ConnectionPool pool, final String taskName, final int syncCreateNumWhenNotWarmup) throws RemotingException { final int actualNum = pool.size(); final int expectNum = url.getConnNum(); if (actualNum < expectNum) { if (logger.isDebugEnabled()) { logger.debug(\"actual num {}, expect num {}, task name {}\", actualNum, expectNum, taskName); } if (url.isConnWarmup()) { for (int i = actualNum; i < expectNum; ++i) { Connection connection = create(url); pool.add(connection); } } else { if (syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url.getConnNum()) { throw new IllegalArgumentException( \"sync create number when not warmup should be [0,\" + url.getConnNum() + \"]\"); } // create connection in sync way if (syncCreateNumWhenNotWarmup > 0) { for (int i = 0; i < syncCreateNumWhenNotWarmup; ++i) { Connection connection = create(url); pool.add(connection); } if (syncCreateNumWhenNotWarmup == url.getConnNum()) { return; } } // initialize executor in lazy way initializeExecutor(); pool.markAsyncCreationStart();// mark the start of async try { this.asyncCreateConnectionExecutor.execute(new Runnable() { @Override public void run() { try { for (int i = pool.size(); i < url.getConnNum(); ++i) { Connection conn = null; try { conn = create(url); } catch (RemotingException e) { logger .error( \"Exception occurred in async create connection thread for {}, taskName {}\", url.getUniqueKey(), taskName, e); } pool.add(conn); } } finally { pool.markAsyncCreationDone();// mark the end of async } } }); } catch (RejectedExecutionException e) { pool.markAsyncCreationDone();// mark the end of async when reject throw e; } } // end of NOT warm up } // end of if } \n### Response:", "ground_truth": "do create connections\n\n@param url\n@param pool\n@param taskName\n@param syncCreateNumWhenNotWarmup you can specify this param to ensure at least desired number of connections available in sync way\n@throws RemotingException", "predict": "Create connection pool.\n\n@param url\n@param pool\n@param taskName\n@param syncCreateNumWhenNotWarmup\n@throws RemotingException"}
{"ID": 413, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void closeConnection(String addr) { Url url = this.addressParser.parse(addr); this.connectionManager.remove(url.getUniqueKey()); } \n### Response:", "ground_truth": "Close all connections of a address\n\n@param addr", "predict": "Closes the connection.\n\n@param addr the address to close"}
{"ID": 414, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void onClose() { Iterator<Entry<Integer, InvokeFuture>> iter = invokeFutureMap.entrySet().iterator(); while (iter.hasNext()) { Entry<Integer, InvokeFuture> entry = iter.next(); iter.remove(); InvokeFuture future = entry.getValue(); if (future != null) { future.putResponse(future.createConnectionClosedResponse(this.getRemoteAddress())); future.cancelTimeout(); future.tryAsyncExecuteInvokeCallbackAbnormally(); } } } \n### Response:", "ground_truth": "Do something when closing.", "predict": "Invokes the callback to close the connection."}
{"ID": 415, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void close() { if (closed.compareAndSet(false, true)) { try { if (this.getChannel() != null) { this.getChannel().close().addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture future) throws Exception { if (logger.isInfoEnabled()) { logger .info( \"Close the connection to remote address={}, result={}, cause={}\", RemotingUtil.parseRemoteAddress(Connection.this .getChannel()), future.isSuccess(), future.cause()); } } }); } } catch (Exception e) { logger.warn(\"Exception caught when closing connection {}\", RemotingUtil.parseRemoteAddress(Connection.this.getChannel()), e); } } } \n### Response:", "ground_truth": "Close the connection.", "predict": "Closes the connection."}
{"ID": 416, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object setAttributeIfAbsent(String key, Object value) { return attributes.putIfAbsent(key, value); } \n### Response:", "ground_truth": "set attribute if key absent.\n\n@param key\n@param value\n@return", "predict": "Sets the value of the given key to the given value if it is not already present.\n\n@param key the key of the attribute to set\n@param value the value to set\n@return the value of the given key to set"}
{"ID": 417, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void registerUserProcessor(UserProcessor<?> processor, ConcurrentHashMap<String, UserProcessor<?>> userProcessors) { if (null == processor) { throw new RuntimeException(\"User processor should not be null!\"); } if (processor instanceof MultiInterestUserProcessor) { registerUserProcessor((MultiInterestUserProcessor) processor, userProcessors); } else { if (StringUtils.isBlank(processor.interest())) { throw new RuntimeException(\"Processor interest should not be blank!\"); } UserProcessor<?> preProcessor = userProcessors.putIfAbsent(processor.interest(), processor); if (preProcessor != null) { String errMsg = \"Processor with interest key [\" + processor.interest() + \"] has already been registered to rpc server, can not register again!\"; throw new RuntimeException(errMsg); } } } \n### Response:", "ground_truth": "Help register single-interest user processor.\n\n@param processor  the processor need to be registered\n@param userProcessors   the map of user processors", "predict": "Register a user processor.\n\n@param processor the user processor\n@param userProcessors the user processors"}
{"ID": 418, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static void registerUserProcessor(MultiInterestUserProcessor<?> processor, ConcurrentHashMap<String, UserProcessor<?>> userProcessors) { if (null == processor.multiInterest() || processor.multiInterest().isEmpty()) { throw new RuntimeException(\"Processor interest should not be blank!\"); } for (String interest : processor.multiInterest()) { UserProcessor<?> preProcessor = userProcessors.putIfAbsent(interest, processor); if (preProcessor != null) { String errMsg = \"Processor with interest key [\" + interest + \"] has already been registered to rpc server, can not register again!\"; throw new RuntimeException(errMsg); } } } \n### Response:", "ground_truth": "Help register multi-interest user processor.\n\n@param processor  the processor with multi-interest need to be registered\n@param userProcessors    the map of user processors", "predict": "Registers a user processor for the given interest key.\n\n@param processor\n@param userProcessors"}
{"ID": 419, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void dispatchToUserProcessor(RemotingContext ctx, RpcRequestCommand cmd) { final int id = cmd.getId(); final byte type = cmd.getType(); // processor here must not be null, for it have been checked before UserProcessor processor = ctx.getUserProcessor(cmd.getRequestClass()); if (processor instanceof AsyncUserProcessor) { try { processor.handleRequest(processor.preHandleRequest(ctx, cmd.getRequestObject()), new RpcAsyncContext(ctx, cmd, this), cmd.getRequestObject()); } catch (RejectedExecutionException e) { logger .warn(\"RejectedExecutionException occurred when do ASYNC process in RpcRequestProcessor\"); sendResponseIfNecessary(ctx, type, this.getCommandFactory() .createExceptionResponse(id, ResponseStatus.SERVER_THREADPOOL_BUSY)); } catch (Throwable t) { String errMsg = \"AYSNC process rpc request failed in RpcRequestProcessor, id=\" + id; logger.error(errMsg, t); sendResponseIfNecessary(ctx, type, this.getCommandFactory() .createExceptionResponse(id, t, errMsg)); } } else { try { Object responseObject = processor .handleRequest(processor.preHandleRequest(ctx, cmd.getRequestObject()), cmd.getRequestObject()); sendResponseIfNecessary(ctx, type, this.getCommandFactory().createResponse(responseObject, cmd)); } catch (RejectedExecutionException e) { logger .warn(\"RejectedExecutionException occurred when do SYNC process in RpcRequestProcessor\"); sendResponseIfNecessary(ctx, type, this.getCommandFactory() .createExceptionResponse(id, ResponseStatus.SERVER_THREADPOOL_BUSY)); } catch (Throwable t) { String errMsg = \"SYNC process rpc request failed in RpcRequestProcessor, id=\" + id; logger.error(errMsg, t); sendResponseIfNecessary(ctx, type, this.getCommandFactory() .createExceptionResponse(id, t, errMsg)); } } } \n### Response:", "ground_truth": "dispatch request command to user processor\n@param ctx remoting context\n@param cmd rpc request command", "predict": "Dispatches the request to the user processor.\n\n@param ctx\n@param cmd"}
{"ID": 420, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean deserializeRequestCommand(RemotingContext ctx, RpcRequestCommand cmd, int level) { boolean result; try { cmd.deserialize(level); result = true; } catch (DeserializationException e) { logger .error( \"DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}\", cmd.getId(), RpcDeserializeLevel.valueOf(level), e); sendResponseIfNecessary(ctx, cmd.getType(), this.getCommandFactory() .createExceptionResponse(cmd.getId(), ResponseStatus.SERVER_DESERIAL_EXCEPTION, e)); result = false; } catch (Throwable t) { String errMsg = \"Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=\" + cmd.getId() + \", deserializeLevel=\" + level; logger.error(errMsg, t); sendResponseIfNecessary(ctx, cmd.getType(), this.getCommandFactory() .createExceptionResponse(cmd.getId(), t, errMsg)); result = false; } return result; } \n### Response:", "ground_truth": "deserialize request command\n\n@return true if deserialize success; false if exception catched", "predict": "Deserializes the RpcRequestCommand object.\n\n@param ctx\n@param cmd\n@param level\n@return"}
{"ID": 421, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void preProcessRemotingContext(RemotingContext ctx, RpcRequestCommand cmd, long currentTimestamp) { ctx.setArriveTimestamp(cmd.getArriveTime()); ctx.setTimeout(cmd.getTimeout()); ctx.setRpcCommandType(cmd.getType()); ctx.getInvokeContext().putIfAbsent(InvokeContext.BOLT_PROCESS_WAIT_TIME, currentTimestamp - cmd.getArriveTime()); } \n### Response:", "ground_truth": "pre process remoting context, initial some useful infos and pass to biz\n\n@param ctx remoting context\n@param cmd rpc request command\n@param currentTimestamp current timestamp", "predict": "Pre-processing of RPC request context.\n\n@param ctx\n@param cmd\n@param currentTimestamp"}
{"ID": 422, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void timeoutLog(final RpcRequestCommand cmd, long currentTimestamp, RemotingContext ctx) { if (logger.isDebugEnabled()) { logger .debug( \"request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}].\", cmd.getId(), currentTimestamp, cmd.getArriveTime(), (currentTimestamp - cmd.getArriveTime()), cmd.getTimeout()); } String remoteAddr = \"UNKNOWN\"; if (null != ctx) { ChannelHandlerContext channelCtx = ctx.getChannelContext(); Channel channel = channelCtx.channel(); if (null != channel) { remoteAddr = RemotingUtil.parseRemoteAddress(channel); } } logger .warn( \"Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}].\", cmd.getId(), remoteAddr, (currentTimestamp - cmd.getArriveTime()), cmd.getTimeout()); } \n### Response:", "ground_truth": "print some log when request timeout and discarded in io thread.", "predict": "Logs a warning message indicating that the request has been timeout.\n\n@param cmd\n@param currentTimestamp\n@param ctx"}
{"ID": 423, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void debugLog(RemotingContext ctx, RpcRequestCommand cmd, long currentTimestamp) { if (logger.isDebugEnabled()) { logger.debug(\"Rpc request received! requestId={}, from {}\", cmd.getId(), RemotingUtil.parseRemoteAddress(ctx.getChannelContext().channel())); logger.debug( \"request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}.\", cmd.getId(), currentTimestamp, cmd.getArriveTime(), (currentTimestamp - cmd.getArriveTime()), cmd.getTimeout()); } } \n### Response:", "ground_truth": "print some debug log when receive request", "predict": "Logs the Rpc request.\n\n@param ctx\n@param cmd\n@param currentTimestamp"}
{"ID": 424, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void process(RemotingContext ctx, T msg, ExecutorService defaultExecutor) throws Exception { ProcessTask task = new ProcessTask(ctx, msg); if (this.getExecutor() != null) { this.getExecutor().execute(task); } else { defaultExecutor.execute(task); } } \n### Response:", "ground_truth": "Process the remoting command with its own executor or with the defaultExecutor if its own if null.\n\n@param ctx\n@param msg\n@param defaultExecutor\n@throws Exception", "predict": "Executes the given task."}
{"ID": 425, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void invokeWithCallback(final Connection conn, final RemotingCommand request, final InvokeCallback invokeCallback, final int timeoutMillis) { final InvokeFuture future = createInvokeFuture(conn, request, request.getInvokeContext(), invokeCallback); conn.addInvokeFuture(future); final int requestId = request.getId(); try { Timeout timeout = TimerHolder.getTimer().newTimeout(new TimerTask() { @Override public void run(Timeout timeout) throws Exception { InvokeFuture future = conn.removeInvokeFuture(requestId); if (future != null) { future.putResponse(commandFactory.createTimeoutResponse(conn .getRemoteAddress())); future.tryAsyncExecuteInvokeCallbackAbnormally(); } } }, timeoutMillis, TimeUnit.MILLISECONDS); future.addTimeout(timeout); conn.getChannel().writeAndFlush(request).addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture cf) throws Exception { if (!cf.isSuccess()) { InvokeFuture f = conn.removeInvokeFuture(requestId); if (f != null) { f.cancelTimeout(); f.putResponse(commandFactory.createSendFailedResponse( conn.getRemoteAddress(), cf.cause())); f.tryAsyncExecuteInvokeCallbackAbnormally(); } logger.error(\"Invoke send failed. The address is {}\", RemotingUtil.parseRemoteAddress(conn.getChannel()), cf.cause()); } } }); } catch (Exception e) { InvokeFuture f = conn.removeInvokeFuture(requestId); if (f != null) { f.cancelTimeout(); f.putResponse(commandFactory.createSendFailedResponse(conn.getRemoteAddress(), e)); f.tryAsyncExecuteInvokeCallbackAbnormally(); } logger.error(\"Exception caught when sending invocation. The address is {}\", RemotingUtil.parseRemoteAddress(conn.getChannel()), e); } } \n### Response:", "ground_truth": "Invocation with callback.\n\n@param conn\n@param request\n@param invokeCallback\n@param timeoutMillis\n@throws InterruptedException", "predict": "Invokes the remote request with the given callback.\n\n@param conn the remote connection\n@param request the remote request\n@param invokeCallback the callback to be invoked when the request is invoked\n@param timeoutMillis the timeout in milliseconds"}
{"ID": 426, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void oneway(final Connection conn, final RemotingCommand request) { try { conn.getChannel().writeAndFlush(request).addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture f) throws Exception { if (!f.isSuccess()) { logger.error(\"Invoke send failed. The address is {}\", RemotingUtil.parseRemoteAddress(conn.getChannel()), f.cause()); } } }); } catch (Exception e) { if (null == conn) { logger.error(\"Conn is null\"); } else { logger.error(\"Exception caught when sending invocation. The address is {}\", RemotingUtil.parseRemoteAddress(conn.getChannel()), e); } } } \n### Response:", "ground_truth": "Oneway invocation.\n\n@param conn\n@param request\n@throws InterruptedException", "predict": "Sends a one-way request to the remote server.\n\n@param conn the connection to the remote server\n@param request the request to send"}
{"ID": 427, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static byte toByte(BitSet bs) { int value = 0; for (int i = 0; i < bs.length(); ++i) { if (bs.get(i)) { value += 1 << i; } } if (bs.length() > 7) { throw new IllegalArgumentException(\"The byte value \" + value + \" generated according to bit set \" + bs + \" is out of range, should be limited between [\" + Byte.MIN_VALUE + \"] to [\" + Byte.MAX_VALUE + \"]\"); } return (byte) value; } \n### Response:", "ground_truth": "from bit set to byte\n@param bs\n@return byte represent the bit set", "predict": "Converts a bit set to a byte.\n\n@param bs The bit set to convert.\n@return The byte value."}
{"ID": 428, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static BitSet toBitSet(int value) { if (value > Byte.MAX_VALUE || value < Byte.MIN_VALUE) { throw new IllegalArgumentException( \"The value \" + value + \" is out of byte range, should be limited between [\" + Byte.MIN_VALUE + \"] to [\" + Byte.MAX_VALUE + \"]\"); } BitSet bs = new BitSet(); int index = 0; while (value != 0) { if (value % 2 != 0) { bs.set(index); } ++index; value = (byte) (value >> 1); } return bs; } \n### Response:", "ground_truth": "from byte to bit set\n@param value\n@return bit set represent the byte", "predict": "Converts an integer to a bit set.\n\n@param value the integer value\n@return the bit set"}
{"ID": 429, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void addReconnectTask(Url url) { ReconnectTask task = new ReconnectTask(); task.url = url; tasks.add(task); } \n### Response:", "ground_truth": "add reconnect task\n\n@param url", "predict": "Adds a task to be executed when the connection is reconnected.\n\n@param url the url to reconnect to"}
{"ID": 430, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void stop() { if (!this.started) { return; } this.started = false; healConnectionThreads.interrupt(); this.tasks.clear(); this.canceled.clear(); } \n### Response:", "ground_truth": "stop reconnect thread", "predict": "Stops the connection thread."}
{"ID": 431, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected RemotingCommand toRemotingCommand(Object request, Connection conn, InvokeContext invokeContext, int timeoutMillis) throws SerializationException { RpcRequestCommand command = this.getCommandFactory().createRequestCommand(request); if (null != invokeContext) { // set client custom serializer for request command if not null Object clientCustomSerializer = invokeContext.get(InvokeContext.BOLT_CUSTOM_SERIALIZER); if (null != clientCustomSerializer) { try { command.setSerializer((Byte) clientCustomSerializer); } catch (ClassCastException e) { throw new IllegalArgumentException( \"Illegal custom serializer [\" + clientCustomSerializer + \"], the type of value should be [byte], but now is [\" + clientCustomSerializer.getClass().getName() + \"].\"); } } // enable crc by default, user can disable by set invoke context `false` for key `InvokeContext.BOLT_CRC_SWITCH` Boolean crcSwitch = invokeContext.get(InvokeContext.BOLT_CRC_SWITCH, ProtocolSwitch.CRC_SWITCH_DEFAULT_VALUE); if (null != crcSwitch && crcSwitch) { command.setProtocolSwitch(ProtocolSwitch .create(new int[] { ProtocolSwitch.CRC_SWITCH_INDEX })); } } else { // enable crc by default, if there is no invoke context. command.setProtocolSwitch(ProtocolSwitch .create(new int[] { ProtocolSwitch.CRC_SWITCH_INDEX })); } command.setTimeout(timeoutMillis); command.setRequestClass(request.getClass().getName()); command.setInvokeContext(invokeContext); command.serialize(); logDebugInfo(command); return command; } \n### Response:", "ground_truth": "Convert application request object to remoting request command.\n\n@param request\n@param conn\n@param timeoutMillis\n@return\n@throws CodecException", "predict": "Create a request command for  Remoting.\n\n@param request\n@param conn\n@param invokeContext\n@param timeoutMillis\n@return\n@throws SerializationException"}
{"ID": 432, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Map<String, List<Connection>> filter(List<Connection> connections) { List<Connection> serviceOnConnections = new ArrayList<Connection>(); List<Connection> serviceOffConnections = new ArrayList<Connection>(); Map<String, List<Connection>> filteredConnections = new ConcurrentHashMap<String, List<Connection>>(); for (Connection connection : connections) { String serviceStatus = (String) connection.getAttribute(Configs.CONN_SERVICE_STATUS); if (serviceStatus != null) { if (connection.isInvokeFutureMapFinish() && !freshSelectConnections.containsValue(connection)) { serviceOffConnections.add(connection); } } else { serviceOnConnections.add(connection); } } filteredConnections.put(Configs.CONN_SERVICE_STATUS_ON, serviceOnConnections); filteredConnections.put(Configs.CONN_SERVICE_STATUS_OFF, serviceOffConnections); return filteredConnections; } \n### Response:", "ground_truth": "Filter connections to monitor\n\n@param connections", "predict": "Filter the connections based on the service status.\n\n@param connections the connections to filter\n@return the filtered connections"}
{"ID": 433, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void monitor(Map<String, RunStateRecordedFutureTask<ConnectionPool>> connPools) { try { if (null != connPools && !connPools.isEmpty()) { Iterator<Map.Entry<String, RunStateRecordedFutureTask<ConnectionPool>>> iter = connPools .entrySet().iterator(); while (iter.hasNext()) { Map.Entry<String, RunStateRecordedFutureTask<ConnectionPool>> entry = iter .next(); String poolKey = entry.getKey(); ConnectionPool pool = FutureTaskUtil.getFutureTaskResult(entry.getValue(), logger); List<Connection> connections = pool.getAll(); Map<String, List<Connection>> filteredConnectons = this.filter(connections); List<Connection> serviceOnConnections = filteredConnectons .get(Configs.CONN_SERVICE_STATUS_ON); List<Connection> serviceOffConnections = filteredConnectons .get(Configs.CONN_SERVICE_STATUS_OFF); if (serviceOnConnections.size() > CONNECTION_THRESHOLD) { Connection freshSelectConnect = serviceOnConnections.get(random .nextInt(serviceOnConnections.size())); freshSelectConnect.setAttribute(Configs.CONN_SERVICE_STATUS, Configs.CONN_SERVICE_STATUS_OFF); Connection lastSelectConnect = freshSelectConnections.remove(poolKey); freshSelectConnections.put(poolKey, freshSelectConnect); closeFreshSelectConnections(lastSelectConnect, serviceOffConnections); } else { if (freshSelectConnections.containsKey(poolKey)) { Connection lastSelectConnect = freshSelectConnections.remove(poolKey); closeFreshSelectConnections(lastSelectConnect, serviceOffConnections); } if (logger.isInfoEnabled()) { logger .info( \"the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}].\", serviceOnConnections.size(), CONNECTION_THRESHOLD); } } for (Connection offConn : serviceOffConnections) { if (offConn.isFine()) { offConn.close(); } } } } } catch (Exception e) { logger.error(\"ScheduledDisconnectStrategy monitor error\", e); } } \n### Response:", "ground_truth": "Monitor connections and close connections with status is off\n\n@param connPools", "predict": "Callback method to monitor the connection pool.\n\n@param connPools the conn pools"}
{"ID": 434, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void closeFreshSelectConnections(Connection lastSelectConnect, List<Connection> serviceOffConnections) throws InterruptedException { if (null != lastSelectConnect) { if (lastSelectConnect.isInvokeFutureMapFinish()) { serviceOffConnections.add(lastSelectConnect); } else { Thread.sleep(RETRY_DETECT_PERIOD); if (lastSelectConnect.isInvokeFutureMapFinish()) { serviceOffConnections.add(lastSelectConnect); } else { if (logger.isInfoEnabled()) { logger.info(\"Address={} won't close at this schedule turn\", RemotingUtil.parseRemoteAddress(lastSelectConnect.getChannel())); } } } } } \n### Response:", "ground_truth": "close the connection of the fresh select connections\n\n@param lastSelectConnect\n@param serviceOffConnections\n@throws InterruptedException", "predict": "Close all the connections that are not in the list of active connections.\n\n@param lastSelectConnect The connection that is not in the list of active connections.\n@param serviceOffConnections The list of active connections.\n@throws InterruptedException If the thread is interrupted."}
{"ID": 435, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean getBool(String key, String defaultValue) { return Boolean.parseBoolean(System.getProperty(key, defaultValue)); } \n### Response:", "ground_truth": "~~~ public helper methods to retrieve system property", "predict": "Get boolean value from system properties.\n\n@param key key to get value from\n@param defaultValue default value\n@return boolean value"}
{"ID": 436, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void infoLog(String format, String addr) { if (logger.isInfoEnabled()) { if (StringUtils.isNotEmpty(addr)) { logger.info(format, addr); } else { logger.info(format, \"UNKNOWN-ADDR\"); } } } \n### Response:", "ground_truth": "print info log\n@param format\n@param addr", "predict": "Logs info message to the specified logger.\n\n@param format message format\n@param addr address of the message source"}
{"ID": 437, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean isRequestTimeout() { if (this.timeout > 0 && (this.rpcCommandType != RpcCommandType.REQUEST_ONEWAY) && (System.currentTimeMillis() - this.arriveTimestamp) > this.timeout) { return true; } return false; } \n### Response:", "ground_truth": "whether this request already timeout\n\n@return", "predict": "Checks if the request timeout has occurred.\n\n@return true if the request timeout has occurred, false otherwise."}
{"ID": 438, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public UserProcessor<?> getUserProcessor(String className) { return StringUtils.isBlank(className) ? null : this.userProcessors.get(className); } \n### Response:", "ground_truth": "Get user processor for class name.\n\n@param className\n@return", "predict": "Gets the user processor.\n\n@param className the name of the class\n@return the user processor"}
{"ID": 439, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Connection randomGet(List<Connection> conns) { if (null == conns || conns.isEmpty()) { return null; } int size = conns.size(); int tries = 0; Connection result = null; while ((result == null || !result.isFine()) && tries++ < MAX_TIMES) { result = conns.get(this.random.nextInt(size)); } if (result != null && !result.isFine()) { result = null; } return result; } \n### Response:", "ground_truth": "get one connection randomly\n\n@param conns\n@return", "predict": "Randomly get a connection from the list\n\n@param conns\n@return"}
{"ID": 440, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public <T> T get(String key, T defaultIfNotFound) { return this.context.get(key) != null ? (T) this.context.get(key) : defaultIfNotFound; } \n### Response:", "ground_truth": "get and use default if not found\n\n@param key\n@param defaultIfNotFound\n@param <T>\n@return", "predict": "Returns the value of the given key, or the default value if the key is not found.\n\n@param key the key\n@param defaultIfNotFound the default value\n@return the value of the given key, or the default value if the key is not found"}
{"ID": 441, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getProperty(String key) { if (properties == null) { return null; } return properties.getProperty(key); } \n### Response:", "ground_truth": "Get property value according to property key\n\n@param key\n@return property value", "predict": "Get the property value for the given key.\n\n@param key the property key\n@return the property value"}
{"ID": 442, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Object resolveResponseObject(ResponseCommand responseCommand, String addr) throws RemotingException { preProcess(responseCommand, addr); if (responseCommand.getResponseStatus() == ResponseStatus.SUCCESS) { return toResponseObject(responseCommand); } else { String msg = String.format(\"Rpc invocation exception: %s, the address is %s, id=%s\", responseCommand.getResponseStatus(), addr, responseCommand.getId()); logger.warn(msg); if (responseCommand.getCause() != null) { throw new InvokeException(msg, responseCommand.getCause()); } else { throw new InvokeException(msg + \", please check the server log for more.\"); } } } \n### Response:", "ground_truth": "Analyze the response command and generate the response object.\n\n@param responseCommand response command\n@param addr response address\n@return response object", "predict": "Resolve response object.\n\n@param responseCommand the response command\n@param addr the address\n@return the object\n@throws RemotingException the moting exception"}
{"ID": 443, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static Object toResponseObject(ResponseCommand responseCommand) throws CodecException { RpcResponseCommand response = (RpcResponseCommand) responseCommand; response.deserialize(); return response.getResponseObject(); } \n### Response:", "ground_truth": "Convert remoting response command to application response object.", "predict": "Converts the response command to a response object.\n\n@param responseCommand the response command\n@return the response object\n@throws CodecException the CodecException"}
{"ID": 444, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static Throwable toThrowable(ResponseCommand responseCommand) throws CodecException { RpcResponseCommand resp = (RpcResponseCommand) responseCommand; resp.deserialize(); Object ex = resp.getResponseObject(); if (ex != null && ex instanceof Throwable) { return (Throwable) ex; } return null; } \n### Response:", "ground_truth": "Convert remoting response command to throwable if it is a throwable, otherwise return null.", "predict": "Converts the response object to a Throwable.\n\n@param responseCommand the response object\n@return the Throwable\n@throws CodecException if an error occurs"}
{"ID": 445, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static String detailErrMsg(String clientErrMsg, ResponseCommand responseCommand) { RpcResponseCommand resp = (RpcResponseCommand) responseCommand; if (StringUtils.isNotBlank(resp.getErrorMsg())) { return String.format(\"%s, ServerErrorMsg:%s\", clientErrMsg, resp.getErrorMsg()); } else { return String.format(\"%s, ServerErrorMsg:null\", clientErrMsg); } } \n### Response:", "ground_truth": "Detail your error msg with the error msg returned from response command", "predict": "Returns the detailed error message for the given error message.\n\n@param clientErrMsg the error message\n@param responseCommand the response command\n@return the detailed error message"}
{"ID": 446, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private RpcServerException createServerException(Throwable t, String errMsg) { String formattedErrMsg = String.format( \"[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s\", t.getClass().getName(), t.getMessage(), errMsg); RpcServerException e = new RpcServerException(formattedErrMsg); e.setStackTrace(t.getStackTrace()); return e; } \n### Response:", "ground_truth": "create server exception using error msg and fill the stack trace using the stack trace of throwable.\n\n@param t the origin throwable to fill the stack trace of rpc server exception\n@param errMsg additional error msg, <code>null</code> is allowed\n@return an instance of RpcServerException", "predict": "Creates a server exception with the given error message.\n\n@param t\n@param errMsg\n@return"}
{"ID": 447, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void printConnectionTraceLog(Logger logger, String traceId, InvokeContext invokeContext) { String sourceIp = invokeContext.get(InvokeContext.CLIENT_LOCAL_IP); Integer sourcePort = invokeContext.get(InvokeContext.CLIENT_LOCAL_PORT); String targetIp = invokeContext.get(InvokeContext.CLIENT_REMOTE_IP); Integer targetPort = invokeContext.get(InvokeContext.CLIENT_REMOTE_PORT); StringBuilder logMsg = new StringBuilder(); logMsg.append(traceId).append(\",\"); logMsg.append(sourceIp).append(\",\"); logMsg.append(sourcePort).append(\",\"); logMsg.append(targetIp).append(\",\"); logMsg.append(targetPort); if (logger.isInfoEnabled()) { logger.info(logMsg.toString()); } } \n### Response:", "ground_truth": "print trace log\n@param traceId\n@param invokeContext", "predict": "Prints the connection trace log.\n\n@param logger\nthe logger\n@param traceId\nthe trace id\n@param invokeContext\nthe invoke context"}
{"ID": 448, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static EventLoopGroup newEventLoopGroup(int nThreads, ThreadFactory threadFactory) { return epollEnabled ? new EpollEventLoopGroup(nThreads, threadFactory) : new NioEventLoopGroup(nThreads, threadFactory); } \n### Response:", "ground_truth": "Create the right event loop according to current platform and system property, fallback to NIO when epoll not enabled.\n\n@param nThreads\n@param threadFactory\n@return an EventLoopGroup suitable for the current platform", "predict": "Creates a new EventLoopGroup using the specified thread factory.\n\n@param nThreads the number of threads to create\n@param threadFactory the thread factory to use\n@return a new EventLoopGroup"}
{"ID": 449, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String parseRemoteAddress(final Channel channel) { if (null == channel) { return StringUtils.EMPTY; } final SocketAddress remote = channel.remoteAddress(); return doParse(remote != null ? remote.toString().trim() : StringUtils.EMPTY); } \n### Response:", "ground_truth": "Parse the remote address of the channel.\n\n@param channel\n@return", "predict": "Parse remote address.\n\n@param channel the channel\n@return the remote address"}
{"ID": 450, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String parseLocalAddress(final Channel channel) { if (null == channel) { return StringUtils.EMPTY; } final SocketAddress local = channel.localAddress(); return doParse(local != null ? local.toString().trim() : StringUtils.EMPTY); } \n### Response:", "ground_truth": "Parse the local address of the channel.\n\n@param channel\n@return", "predict": "Parses the local address of the channel.\n\n@param channel the channel\n@return the local address"}
{"ID": 451, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String parseRemoteIP(final Channel channel) { if (null == channel) { return StringUtils.EMPTY; } final InetSocketAddress remote = (InetSocketAddress) channel.remoteAddress(); if (remote != null) { return remote.getAddress().getHostAddress(); } return StringUtils.EMPTY; } \n### Response:", "ground_truth": "Parse the remote host ip of the channel.\n\n@param channel\n@return", "predict": "Returns the remote IP address.\n\n@param channel the channel\n@return the remote IP address"}
{"ID": 452, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String parseRemoteHostName(final Channel channel) { if (null == channel) { return StringUtils.EMPTY; } final InetSocketAddress remote = (InetSocketAddress) channel.remoteAddress(); if (remote != null) { return remote.getAddress().getHostName(); } return StringUtils.EMPTY; } \n### Response:", "ground_truth": "Parse the remote hostname of the channel.\n\nNote: take care to use this method, for a reverse name lookup takes uncertain time in {@link InetAddress#getHostName}.\n\n@param channel\n@return", "predict": "Returns the hostname of the remote host.\n\n@param channel the channel\n@return the hostname of the remote host"}
{"ID": 453, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String parseLocalIP(final Channel channel) { if (null == channel) { return StringUtils.EMPTY; } final InetSocketAddress local = (InetSocketAddress) channel.localAddress(); if (local != null) { return local.getAddress().getHostAddress(); } return StringUtils.EMPTY; } \n### Response:", "ground_truth": "Parse the local host ip of the channel.\n\n@param channel\n@return", "predict": "Returns the local IP address of the channel.\n\n@param channel the channel\n@return the local IP address"}
{"ID": 454, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int parseRemotePort(final Channel channel) { if (null == channel) { return -1; } final InetSocketAddress remote = (InetSocketAddress) channel.remoteAddress(); if (remote != null) { return remote.getPort(); } return -1; } \n### Response:", "ground_truth": "Parse the remote host port of the channel.\n\n@param channel\n@return int", "predict": "Returns the remote port.\n\n@param channel the channel\n@return the remote port"}
{"ID": 455, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int parseLocalPort(final Channel channel) { if (null == channel) { return -1; } final InetSocketAddress local = (InetSocketAddress) channel.localAddress(); if (local != null) { return local.getPort(); } return -1; } \n### Response:", "ground_truth": "Parse the local host port of the channel.\n\n@param channel\n@return int", "predict": "Returns the local port of the given channel.\n\n@param channel the channel\n@return the local port"}
{"ID": 456, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String parseSocketAddressToHostIp(SocketAddress socketAddress) { final InetSocketAddress addrs = (InetSocketAddress) socketAddress; if (addrs != null) { InetAddress addr = addrs.getAddress(); if (null != addr) { return addr.getHostAddress(); } } return StringUtils.EMPTY; } \n### Response:", "ground_truth": "Parse the host ip of socket address.\n\ne.g. /127.0.0.1:1234 -> 127.0.0.1\n\n@param socketAddress\n@return String", "predict": "Parse socket address to host IP.\n\n@param socketAddress socket address\n@return host IP"}
{"ID": 457, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void add(Connection connection) { markAccess(); if (null == connection) { return; } boolean res = this.conns.addIfAbsent(connection); if (res) { connection.increaseRef(); } } \n### Response:", "ground_truth": "add a connection\n\n@param connection", "predict": "Add a connection to the list of connections.\n\n@param connection the connection to add"}
{"ID": 458, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void removeAndTryClose(Connection connection) { if (null == connection) { return; } boolean res = this.conns.remove(connection); if (res) { connection.decreaseRef(); } if (connection.noRef()) { connection.close(); } } \n### Response:", "ground_truth": "removeAndTryClose a connection\n\n@param connection", "predict": "Removes the connection and closes it.\n\n@param connection the connection to remove"}
{"ID": 459, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Connection get() { markAccess(); if (null != this.conns) { List<Connection> snapshot = new ArrayList<Connection>(this.conns); if (snapshot.size() > 0) { return this.strategy.select(snapshot); } else { return null; } } else { return null; } } \n### Response:", "ground_truth": "get a connection\n\n@return", "predict": "Returns the current connection."}
{"ID": 460, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void registerCustomSerializer(String className, CustomSerializer serializer) { CustomSerializer prevSerializer = classCustomSerializer.putIfAbsent(className, serializer); if (prevSerializer != null) { throw new RuntimeException(\"CustomSerializer has been registered for class: \" + className + \", the custom serializer is: \" + prevSerializer.getClass().getName()); } } \n### Response:", "ground_truth": "Register custom serializer for class name.\n\n@param className\n@param serializer\n@return", "predict": "Register a custom serializer for a class.\n\n@param className the class to register the serializer for\n@param serializer the custom serializer to register"}
{"ID": 461, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static CustomSerializer getCustomSerializer(String className) { if (!classCustomSerializer.isEmpty()) { return classCustomSerializer.get(className); } return null; } \n### Response:", "ground_truth": "Get the custom serializer for class name.\n\n@param className\n@return", "predict": "Returns custom serializer for given class name.\n\n@param className class name\n@return custom serializer"}
{"ID": 462, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void registerCustomSerializer(CommandCode code, CustomSerializer serializer) { CustomSerializer prevSerializer = commandCustomSerializer.putIfAbsent(code, serializer); if (prevSerializer != null) { throw new RuntimeException(\"CustomSerializer has been registered for command code: \" + code + \", the custom serializer is: \" + prevSerializer.getClass().getName()); } } \n### Response:", "ground_truth": "Register custom serializer for command code.\n\n@param code\n@param serializer\n@return", "predict": "Register a custom serializer for the given command code.\n\n@param code the command code\n@param serializer the custom serializer"}
{"ID": 463, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static CustomSerializer getCustomSerializer(CommandCode code) { if (!commandCustomSerializer.isEmpty()) { return commandCustomSerializer.get(code); } return null; } \n### Response:", "ground_truth": "Get the custom serializer for command code.\n\n@param code\n@return", "predict": "Get custom serializer for given command code.\n\n@param code command code\n@return custom serializer"}
{"ID": 464, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void start() { /** initial delay to execute schedule task, unit: ms */ long initialDelay = ConfigManager.conn_monitor_initial_delay(); /** period of schedule task, unit: ms*/ long period = ConfigManager.conn_monitor_period(); this.executor = new ScheduledThreadPoolExecutor(1, new NamedThreadFactory( \"ConnectionMonitorThread\", true), new ThreadPoolExecutor.AbortPolicy()); MonitorTask monitorTask = new MonitorTask(); this.executor.scheduleAtFixedRate(monitorTask, initialDelay, period, TimeUnit.MILLISECONDS); } \n### Response:", "ground_truth": "Start schedule task", "predict": "Starts the connection monitor task."}
{"ID": 465, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean isConnected(String remoteAddr) { Url url = this.rpcRemoting.addressParser.parse(remoteAddr); return this.isConnected(url); } \n### Response:", "ground_truth": "check whether a client address connected\n\n@param remoteAddr\n@return", "predict": "Checks if the remote address is connected.\n\n@param remoteAddr the remote address\n@return true if the remote address is connected"}
{"ID": 466, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void initWriteBufferWaterMark() { int lowWaterMark = this.netty_buffer_low_watermark(); int highWaterMark = this.netty_buffer_high_watermark(); if (lowWaterMark > highWaterMark) { throw new IllegalArgumentException( String .format( \"[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)\", highWaterMark, lowWaterMark)); } else { logger.warn( \"[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes\", lowWaterMark, highWaterMark); } this.bootstrap.childOption(ChannelOption.WRITE_BUFFER_WATER_MARK, new WriteBufferWaterMark( lowWaterMark, highWaterMark)); } \n### Response:", "ground_truth": "init netty write buffer water mark", "predict": "Initializes the write buffer water mark."}
{"ID": 467, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static FramedataImpl1 get(Opcode opcode) { if (opcode== null) { throw new IllegalArgumentException(\"Supplied opcode cannot be null\"); } switch (opcode) { case PING: return new PingFrame(); case PONG: return new PongFrame(); case TEXT: return new TextFrame(); case BINARY: return new BinaryFrame(); case CLOSING: return new CloseFrame(); case CONTINUOUS: return new ContinuousFrame(); default: throw new IllegalArgumentException(\"Supplied opcode is invalid\"); } } \n### Response:", "ground_truth": "Get a frame with a specific opcode\n\n@param opcode the opcode representing the frame\n@return the frame with a specific opcode", "predict": "Returns a new instance of the specified FramedataImpl1 class.\n\n@param opcode the opcode to use to create the FramedataImpl1 instance\n@return a new instance of the specified FramedataImpl1 class"}
{"ID": 468, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean batch( WebSocketImpl ws, ByteChannel sockchannel ) throws IOException { if (ws == null) { return false; } ByteBuffer buffer = ws.outQueue.peek(); WrappedByteChannel c = null; if( buffer == null ) { if( sockchannel instanceof WrappedByteChannel ) { c = (WrappedByteChannel) sockchannel; if( c.isNeedWrite() ) { c.writeMore(); } } } else { do {// FIXME writing as much as possible is unfair!! /*int written = */sockchannel.write( buffer ); if( buffer.remaining() > 0 ) { return false; } else { ws.outQueue.poll(); // Buffer finished. Remove it. buffer = ws.outQueue.peek(); } } while ( buffer != null ); } if( ws.outQueue.isEmpty() && ws.isFlushAndClose() && ws.getDraft() != null && ws.getDraft().getRole() != null && ws.getDraft().getRole() == Role.SERVER ) {// ws.closeConnection(); } return c == null || !((WrappedByteChannel) sockchannel).isNeedWrite(); } \n### Response:", "ground_truth": "Returns whether the whole outQueue has been flushed\n@param ws The WebSocketImpl associated with the channels\n@param sockchannel The channel to write to\n@throws IOException May be thrown by {@link WrappedByteChannel#writeMore()}\n@return returns Whether there is more data to write", "predict": "Batches the output of the given WebSocketImpl into the given ByteChannel.\n@param ws The WebSocketImpl to write to.\n@param sockchannel The ByteChannel to write to.\n@return true if the output was written.\n@throws IOException if an I/O error occurs."}
{"ID": 469, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setCode(int code) { this.code = code; // CloseFrame.TLS_ERROR is not allowed to be transfered over the wire if (code == CloseFrame.TLS_ERROR) { this.code = CloseFrame.NOCODE; this.reason = \"\"; } updatePayload(); } \n### Response:", "ground_truth": "Set the close code for this close frame\n@param code the close code", "predict": "Sets the error code.\n\n@param code the error code"}
{"ID": 470, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void validateUtf8(ByteBuffer payload, int mark) throws InvalidDataException { try { payload.position( payload.position() + 2 ); reason = Charsetfunctions.stringUtf8( payload ); } catch ( IllegalArgumentException e ) { throw new InvalidDataException( CloseFrame.NO_UTF8 ); } finally { payload.position( mark ); } } \n### Response:", "ground_truth": "Validate the payload to valid utf8\n@param mark the current mark\n@param payload the current payload\n@throws InvalidDataException the current payload is not a valid utf8", "predict": "Validates the given byte buffer as UTF-8.\n\n@param payload the byte buffer to validate\n@param mark the mark to set to the byte buffer\n@throws InvalidDataException if the byte buffer is not valid UTF-8"}
{"ID": 471, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void updatePayload() { byte[] by = Charsetfunctions.utf8Bytes(reason); ByteBuffer buf = ByteBuffer.allocate(4); buf.putInt(code); buf.position(2); ByteBuffer pay = ByteBuffer.allocate(2 + by.length); pay.put(buf); pay.put(by); pay.rewind(); super.setPayload(pay); } \n### Response:", "ground_truth": "Update the payload to represent the close code and the reason", "predict": "Update the payload."}
{"ID": 472, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private HandshakeState containsRequestedProtocol(String requestedProtocol) { for( IProtocol knownProtocol : knownProtocols ) { if( knownProtocol.acceptProvidedProtocol( requestedProtocol ) ) { protocol = knownProtocol; log.trace(\"acceptHandshake - Matching protocol found: {}\", protocol); return HandshakeState.MATCHED; } } return HandshakeState.NOT_MATCHED; } \n### Response:", "ground_truth": "Check if the requested protocol is part of this draft\n@param requestedProtocol the requested protocol\n@return MATCHED if it is matched, otherwise NOT_MATCHED", "predict": "Checks if the requested protocol is present in the list of known protocols.\n\n@param requestedProtocol the requested protocol\n@return the state of the handshake"}
{"ID": 473, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void translateSingleFrameCheckLengthLimit(long length) throws LimitExceededException { if( length > Integer.MAX_VALUE ) { log.trace(\"Limit exedeed: Payloadsize is to big...\"); throw new LimitExceededException(\"Payloadsize is to big...\"); } if( length > maxFrameSize) { log.trace( \"Payload limit reached. Allowed: {} Current: {}\" , maxFrameSize, length); throw new LimitExceededException( \"Payload limit reached.\", maxFrameSize ); } if( length < 0 ) { log.trace(\"Limit underflow: Payloadsize is to little...\"); throw new LimitExceededException(\"Payloadsize is to little...\"); } } \n### Response:", "ground_truth": "Check if the frame size exceeds the allowed limit\n@param length the current payload length\n@throws LimitExceededException if the payload length is to big", "predict": "Checks if the length is within the limit.\n\n@param length the length\n@throws LimitExceededException if the length is beyond the limit"}
{"ID": 474, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void translateSingleFrameCheckPacketSize(int maxpacketsize, int realpacketsize) throws IncompleteException { if( maxpacketsize < realpacketsize ) { log.trace( \"Incomplete frame: maxpacketsize < realpacketsize\" ); throw new IncompleteException( realpacketsize ); } } \n### Response:", "ground_truth": "Check if the max packet size is smaller than the real packet size\n@param maxpacketsize the max packet size\n@param realpacketsize the real packet size\n@throws IncompleteException if the maxpacketsize is smaller than the realpackagesize", "predict": "Checks if the given packet size is greater than the real packet size.\n\n@param maxpacketsize\n@param realpacketsize\n@throws IncompleteException"}
{"ID": 475, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private String generateFinalKey( String in ) { String seckey = in.trim(); String acc = seckey + \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"; MessageDigest sh1; try { sh1 = MessageDigest.getInstance( \"SHA1\" ); } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException( e ); } return Base64.encodeBytes( sh1.digest( acc.getBytes() ) ); } \n### Response:", "ground_truth": "Generate a final key from a input string\n@param in the input string\n@return a final key", "predict": "Generates a Base64-encoded SHA1 hash of the input string.\n\n@param in the input string\n@return the Base64-encoded SHA1 hash of the input string"}
{"ID": 476, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void processFrameContinuousAndNonFin(WebSocketImpl webSocketImpl, Framedata frame, Opcode curop) throws InvalidDataException { if( curop != Opcode.CONTINUOUS ) { processFrameIsNotFin(frame); } else if( frame.isFin() ) { processFrameIsFin(webSocketImpl, frame); } else if( currentContinuousFrame == null ) { log.error( \"Protocol error: Continuous frame sequence was not started.\" ); throw new InvalidDataException( CloseFrame.PROTOCOL_ERROR, \"Continuous frame sequence was not started.\" ); } //Check if the whole payload is valid utf8, when the opcode indicates a text if( curop == Opcode.TEXT && !Charsetfunctions.isValidUTF8( frame.getPayloadData() ) ) { log.error( \"Protocol error: Payload is not UTF8\" ); throw new InvalidDataException( CloseFrame.NO_UTF8 ); } //Checking if the current continuous frame contains a correct payload with the other frames combined if( curop == Opcode.CONTINUOUS && currentContinuousFrame != null ) { addToBufferList(frame.getPayloadData()); } } \n### Response:", "ground_truth": "Process the frame if it is a continuous frame or the fin bit is not set\n@param webSocketImpl the websocket implementation to use\n@param frame the current frame\n@param curop the current Opcode\n@throws InvalidDataException if there is a protocol error", "predict": "Processes the current frame and checks if it is a continuous frame or not.\n\n@param webSocketImpl\n@param frame\n@param curop\n@throws InvalidDataException"}
{"ID": 477, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void processFrameBinary(WebSocketImpl webSocketImpl, Framedata frame) { try { webSocketImpl.getWebSocketListener().onWebsocketMessage( webSocketImpl, frame.getPayloadData() ); } catch ( RuntimeException e ) { logRuntimeException(webSocketImpl, e); } } \n### Response:", "ground_truth": "Process the frame if it is a binary frame\n@param webSocketImpl the websocket impl\n@param frame the frame", "predict": "Process the binary frame.\n\n@param webSocketImpl the web socketImpl\n@param frame the frame data"}
{"ID": 478, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void logRuntimeException(WebSocketImpl webSocketImpl, RuntimeException e) { log.error( \"Runtime exception during onWebsocketMessage\", e ); webSocketImpl.getWebSocketListener().onWebsocketError( webSocketImpl, e ); } \n### Response:", "ground_truth": "Log the runtime exception to the specific WebSocketImpl\n@param webSocketImpl the implementation of the websocket\n@param e the runtime exception", "predict": "Log a runtime exception.\n\n@param webSocketImpl the websocketImpl\n@param e the exception"}
{"ID": 479, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void processFrameText(WebSocketImpl webSocketImpl, Framedata frame) throws InvalidDataException { try { webSocketImpl.getWebSocketListener().onWebsocketMessage( webSocketImpl, Charsetfunctions.stringUtf8( frame.getPayloadData() ) ); } catch ( RuntimeException e ) { logRuntimeException(webSocketImpl, e); } } \n### Response:", "ground_truth": "Process the frame if it is a text frame\n@param webSocketImpl the websocket impl\n@param frame the frame", "predict": "Process the payload of the frame.\n\n@param webSocketImpl\n@param frame\n@throws InvalidDataException"}
{"ID": 480, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void processFrameIsFin(WebSocketImpl webSocketImpl, Framedata frame) throws InvalidDataException { if( currentContinuousFrame == null ) { log.trace( \"Protocol error: Previous continuous frame sequence not completed.\" ); throw new InvalidDataException( CloseFrame.PROTOCOL_ERROR, \"Continuous frame sequence was not started.\" ); } addToBufferList(frame.getPayloadData()); checkBufferLimit(); if( currentContinuousFrame.getOpcode() == Opcode.TEXT ) { ((FramedataImpl1) currentContinuousFrame).setPayload( getPayloadFromByteBufferList() ); ((FramedataImpl1) currentContinuousFrame).isValid(); try { webSocketImpl.getWebSocketListener().onWebsocketMessage( webSocketImpl, Charsetfunctions.stringUtf8( currentContinuousFrame.getPayloadData() ) ); } catch ( RuntimeException e ) { logRuntimeException(webSocketImpl, e); } } else if( currentContinuousFrame.getOpcode() == Opcode.BINARY ) { ((FramedataImpl1) currentContinuousFrame).setPayload( getPayloadFromByteBufferList() ); ((FramedataImpl1) currentContinuousFrame).isValid(); try { webSocketImpl.getWebSocketListener().onWebsocketMessage( webSocketImpl, currentContinuousFrame.getPayloadData() ); } catch ( RuntimeException e ) { logRuntimeException(webSocketImpl, e); } } currentContinuousFrame = null; clearBufferList(); } \n### Response:", "ground_truth": "Process the frame if it is the last frame\n@param webSocketImpl the websocket impl\n@param frame the frame\n@throws InvalidDataException if there is a protocol error", "predict": "Processes a frame that is the final frame of a WebSocket message.\n\n@param webSocketImpl\n@param frame\n@throws InvalidDataException"}
{"ID": 481, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void processFrameIsNotFin(Framedata frame) throws InvalidDataException { if( currentContinuousFrame != null ) { log.trace( \"Protocol error: Previous continuous frame sequence not completed.\" ); throw new InvalidDataException( CloseFrame.PROTOCOL_ERROR, \"Previous continuous frame sequence not completed.\" ); } currentContinuousFrame = frame; addToBufferList(frame.getPayloadData()); checkBufferLimit(); } \n### Response:", "ground_truth": "Process the frame if it is not the last frame\n@param frame the frame\n@throws InvalidDataException if there is a protocol error", "predict": "Processes a frame that is not the final frame.\n\n@param frame The frame to process.\n@throws InvalidDataException If the frame is not the final frame."}
{"ID": 482, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void processFrameClosing(WebSocketImpl webSocketImpl, Framedata frame) { int code = CloseFrame.NOCODE; String reason = \"\"; if( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame; code = cf.getCloseCode(); reason = cf.getMessage(); } if( webSocketImpl.getReadyState() == ReadyState.CLOSING ) { // complete the close handshake by disconnecting webSocketImpl.closeConnection( code, reason, true ); } else { // echo close handshake if( getCloseHandshakeType() == CloseHandshakeType.TWOWAY ) webSocketImpl.close( code, reason, true ); else webSocketImpl.flushAndClose( code, reason, false ); } } \n### Response:", "ground_truth": "Process the frame if it is a closing frame\n@param webSocketImpl the websocket impl\n@param frame the frame", "predict": "Process a closing frame.\n\n@param webSocketImpl the websocketImpl\n@param frame the frame data"}
{"ID": 483, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void checkBufferLimit() throws LimitExceededException { long totalSize = getByteBufferListSize(); if( totalSize > maxFrameSize ) { clearBufferList(); log.trace(\"Payload limit reached. Allowed: {} Current: {}\", maxFrameSize, totalSize); throw new LimitExceededException(maxFrameSize); } } \n### Response:", "ground_truth": "Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size\n@throws LimitExceededException if the current size is bigger than the allowed size", "predict": "Checks if the buffer limit is reached.\n\n@throws LimitExceededException if the buffer limit is reached"}
{"ID": 484, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private ByteBuffer getPayloadFromByteBufferList() throws LimitExceededException { long totalSize = 0; ByteBuffer resultingByteBuffer; synchronized (byteBufferList) { for (ByteBuffer buffer : byteBufferList) { totalSize += buffer.limit(); } checkBufferLimit(); resultingByteBuffer = ByteBuffer.allocate( (int) totalSize ); for (ByteBuffer buffer : byteBufferList) { resultingByteBuffer.put( buffer ); } } resultingByteBuffer.flip(); return resultingByteBuffer; } \n### Response:", "ground_truth": "Method to generate a full bytebuffer out of all the fragmented frame payload\n@return a bytebuffer containing all the data\n@throws LimitExceededException will be thrown when the totalSize is bigger then Integer.MAX_VALUE due to not being able to allocate more", "predict": "Get the payload from the byteBufferList.\n\n@return The payload.\n@throws LimitExceededException"}
{"ID": 485, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private long getByteBufferListSize() { long totalSize = 0; synchronized (byteBufferList) { for (ByteBuffer buffer : byteBufferList) { totalSize += buffer.limit(); } } return totalSize; } \n### Response:", "ground_truth": "Get the current size of the resulting bytebuffer in the bytebuffer list\n@return the size as long (to not get an integer overflow)", "predict": "Returns the size of the byteBufferList."}
{"ID": 486, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static HandshakeBuilder translateHandshakeHttpServer(String[] firstLineTokens, String line) throws InvalidHandshakeException { // translating/parsing the request from the CLIENT if (!\"GET\".equalsIgnoreCase(firstLineTokens[0])) { throw new InvalidHandshakeException( String.format(\"Invalid request method received: %s Status line: %s\", firstLineTokens[0],line)); } if (!\"HTTP/1.1\".equalsIgnoreCase(firstLineTokens[2])) { throw new InvalidHandshakeException( String.format(\"Invalid status line received: %s Status line: %s\", firstLineTokens[2], line)); } ClientHandshakeBuilder clienthandshake = new HandshakeImpl1Client(); clienthandshake.setResourceDescriptor( firstLineTokens[ 1 ] ); return clienthandshake; } \n### Response:", "ground_truth": "Checking the handshake for the role as server\n@return a handshake\n@param firstLineTokens the token of the first line split as as an string array\n@param line the whole line", "predict": "Translates the request from the client to the server.\n\n@param firstLineTokens\n@param line\n@return\n@throws InvalidHandshakeException"}
{"ID": 487, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static HandshakeBuilder translateHandshakeHttpClient(String[] firstLineTokens, String line) throws InvalidHandshakeException { // translating/parsing the response from the SERVER if (!\"101\".equals(firstLineTokens[1])) { throw new InvalidHandshakeException( String.format(\"Invalid status code received: %s Status line: %s\", firstLineTokens[1], line)); } if (!\"HTTP/1.1\".equalsIgnoreCase(firstLineTokens[0])) { throw new InvalidHandshakeException( String.format(\"Invalid status line received: %s Status line: %s\", firstLineTokens[0], line)); } HandshakeBuilder handshake = new HandshakeImpl1Server(); ServerHandshakeBuilder serverhandshake = (ServerHandshakeBuilder) handshake; serverhandshake.setHttpStatus( Short.parseShort( firstLineTokens[ 1 ] ) ); serverhandshake.setHttpStatusMessage( firstLineTokens[ 2 ] ); return handshake; } \n### Response:", "ground_truth": "Checking the handshake for the role as client\n@return a handshake\n@param firstLineTokens the token of the first line split as as an string array\n@param line the whole line", "predict": "Translates the handshake response from the HttpClient to the server-side handshake\n\n@param firstLineTokens\n@param line\n@return\n@throws InvalidHandshakeException"}
{"ID": 488, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void decode( ByteBuffer socketBuffer ) { assert ( socketBuffer.hasRemaining() ); log.trace( \"process({}): ({})\", socketBuffer.remaining(), ( socketBuffer.remaining() > 1000 ? \"too big to display\" : new String( socketBuffer.array(), socketBuffer.position(), socketBuffer.remaining() ) )); if( readyState != ReadyState.NOT_YET_CONNECTED ) { if( readyState == ReadyState.OPEN ) { decodeFrames( socketBuffer ); } } else { if( decodeHandshake( socketBuffer ) && (!isClosing() && !isClosed())) { assert ( tmpHandshakeBytes.hasRemaining() != socketBuffer.hasRemaining() || !socketBuffer.hasRemaining() ); // the buffers will never have remaining bytes at the same time if( socketBuffer.hasRemaining() ) { decodeFrames( socketBuffer ); } else if( tmpHandshakeBytes.hasRemaining() ) { decodeFrames( tmpHandshakeBytes ); } } } } \n### Response:", "ground_truth": "Method to decode the provided ByteBuffer\n\n@param socketBuffer the ByteBuffer to decode", "predict": "Decodes the socket buffer.\n\n@param socketBuffer the socket buffer to decode"}
{"ID": 489, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void closeConnectionDueToWrongHandshake( InvalidDataException exception ) { write( generateHttpResponseDueToError( 404 ) ); flushAndClose( exception.getCloseCode(), exception.getMessage(), false ); } \n### Response:", "ground_truth": "Close the connection if the received handshake was not correct\n\n@param exception the InvalidDataException causing this problem", "predict": "Closes the connection due to a wrong handshake.\n\n@param exception the exception"}
{"ID": 490, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void closeConnectionDueToInternalServerError( RuntimeException exception ) { write( generateHttpResponseDueToError( 500 ) ); flushAndClose( CloseFrame.NEVER_CONNECTED, exception.getMessage(), false ); } \n### Response:", "ground_truth": "Close the connection if there was a server error by a RuntimeException\n\n@param exception the RuntimeException causing this problem", "predict": "Closes the connection."}
{"ID": 491, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private ByteBuffer generateHttpResponseDueToError( int errorCode ) { String errorCodeDescription; switch(errorCode) { case 404: errorCodeDescription = \"404 WebSocket Upgrade Failure\"; break; case 500: default: errorCodeDescription = \"500 Internal Server Error\"; } return ByteBuffer.wrap( Charsetfunctions.asciiBytes( \"HTTP/1.1 \" + errorCodeDescription + \"\\r\\nContent-Type: text/html\\nServer: TooTallNate Java-WebSocket\\r\\nContent-Length: \" + ( 48 + errorCodeDescription.length() ) + \"\\r\\n\\r\\n<html><head></head><body><h1>\" + errorCodeDescription + \"</h1></body></html>\" ) ); } \n### Response:", "ground_truth": "Generate a simple response for the corresponding endpoint to indicate some error\n\n@param errorCode the http error code\n@return the complete response as ByteBuffer", "predict": "Generates the response to be sent to the client if the error code is 500 or 404.\n\n@param errorCode The error code\n@return The response"}
{"ID": 492, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void send( String text ) { if( text == null ) throw new IllegalArgumentException( \"Cannot send 'null' data to a WebSocketImpl.\" ); send( draft.createFrames( text, role == Role.CLIENT ) ); } \n### Response:", "ground_truth": "Send Text data to the other end.\n\n@throws WebsocketNotConnectedException websocket is not yet connected", "predict": "Sends a message to the server.\n\n@param text the message to send"}
{"ID": 493, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void reset() { Thread current = Thread.currentThread(); if (current == writeThread || current == connectReadThread) { throw new IllegalStateException(\"You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup.\"); } try { closeBlocking(); if( writeThread != null ) { this.writeThread.interrupt(); this.writeThread = null; } if( connectReadThread != null ) { this.connectReadThread.interrupt(); this.connectReadThread = null; } this.draft.reset(); if( this.socket != null ) { this.socket.close(); this.socket = null; } } catch ( Exception e ) { onError( e ); engine.closeConnection( CloseFrame.ABNORMAL_CLOSE, e.getMessage() ); return; } connectLatch = new CountDownLatch( 1 ); closeLatch = new CountDownLatch( 1 ); this.engine = new WebSocketImpl( this, this.draft ); } \n### Response:", "ground_truth": "Reset everything relevant to allow a reconnect\n@since 1.3.8", "predict": "Reset the connection to the websocket server."}
{"ID": 494, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void connect() { if( connectReadThread != null ) throw new IllegalStateException( \"WebSocketClient objects are not reuseable\" ); connectReadThread = new Thread( this ); connectReadThread.setName( \"WebSocketConnectReadThread-\" + connectReadThread.getId() ); connectReadThread.start(); } \n### Response:", "ground_truth": "Initiates the websocket connection. This method does not block.", "predict": "Starts the connection to the WebSocket server."}
{"ID": 495, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private int getPort() { int port = uri.getPort(); if( port == -1 ) { String scheme = uri.getScheme(); if( \"wss\".equals( scheme ) ) { return WebSocketImpl.DEFAULT_WSS_PORT; } else if( \"ws\".equals( scheme ) ) { return WebSocketImpl.DEFAULT_PORT; } else { throw new IllegalArgumentException( \"unknown scheme: \" + scheme ); } } return port; } \n### Response:", "ground_truth": "Extract the specified port\n@return the specified port or the default port for the specific scheme", "predict": "Get the port to use for the WebSocket connection.\n\n@return the port to use for the WebSocket connection."}
{"ID": 496, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void sendHandshake() throws InvalidHandshakeException { String path; String part1 = uri.getRawPath(); String part2 = uri.getRawQuery(); if( part1 == null || part1.length() == 0 ) path = \"/\"; else path = part1; if( part2 != null ) path += '?' + part2; int port = getPort(); String host = uri.getHost() + ( (port != WebSocketImpl.DEFAULT_PORT && port != WebSocketImpl.DEFAULT_WSS_PORT) ? \":\" + port : \"\" ); HandshakeImpl1Client handshake = new HandshakeImpl1Client(); handshake.setResourceDescriptor( path ); handshake.put( \"Host\", host ); if( headers != null ) { for( Map.Entry<String,String> kv : headers.entrySet() ) { handshake.put( kv.getKey(), kv.getValue() ); } } engine.startHandshake( handshake ); } \n### Response:", "ground_truth": "Create and send the handshake to the other endpoint\n@throws InvalidHandshakeException  a invalid handshake was created", "predict": "Sends the Handshake handshake message to the client.\n\n@throws InvalidHandshakeException Invalid handshake exception"}
{"ID": 497, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setConnectionLostTimeout( int connectionLostTimeout ) { synchronized (syncConnectionLost) { this.connectionLostTimeout = TimeUnit.SECONDS.toNanos(connectionLostTimeout); if (this.connectionLostTimeout <= 0) { log.trace(\"Connection lost timer stopped\"); cancelConnectionLostTimer(); return; } if (this.websocketRunning) { log.trace(\"Connection lost timer restarted\"); //Reset all the pings try { ArrayList<WebSocket> connections = new ArrayList<WebSocket>(getConnections()); WebSocketImpl webSocketImpl; for (WebSocket conn : connections) { if (conn instanceof WebSocketImpl) { webSocketImpl = (WebSocketImpl) conn; webSocketImpl.updateLastPong(); } } } catch (Exception e) { log.error(\"Exception during connection lost restart\", e); } restartConnectionLostTimer(); } } } \n### Response:", "ground_truth": "Setter for the interval checking for lost connections\nA value lower or equal 0 results in the check to be deactivated\n\n@param connectionLostTimeout the interval in seconds\n@since 1.3.4", "predict": "Sets the connection lost timeout.\n\n@param connectionLostTimeout the connection lost timeout"}
{"ID": 498, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void stopConnectionLostTimer() { synchronized (syncConnectionLost) { if (connectionLostCheckerService != null || connectionLostCheckerFuture != null) { this.websocketRunning = false; log.trace(\"Connection lost timer stopped\"); cancelConnectionLostTimer(); } } } \n### Response:", "ground_truth": "Stop the connection lost timer\n@since 1.3.4", "predict": "Stops the connection lost timer."}
{"ID": 499, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void startConnectionLostTimer() { synchronized (syncConnectionLost) { if (this.connectionLostTimeout <= 0) { log.trace(\"Connection lost timer deactivated\"); return; } log.trace(\"Connection lost timer started\"); this.websocketRunning = true; restartConnectionLostTimer(); } } \n### Response:", "ground_truth": "Start the connection lost timer\n@since 1.3.4", "predict": "Starts the connection lost timer."}
{"ID": 500, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void restartConnectionLostTimer() { cancelConnectionLostTimer(); connectionLostCheckerService = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory(\"connectionLostChecker\")); Runnable connectionLostChecker = new Runnable() { /** * Keep the connections in a separate list to not cause deadlocks */ private ArrayList<WebSocket> connections = new ArrayList<WebSocket>( ); @Override public void run() { connections.clear(); try { connections.addAll( getConnections() ); long minimumPongTime = (long) (System.nanoTime() - ( connectionLostTimeout * 1.5 )); for( WebSocket conn : connections ) { executeConnectionLostDetection(conn, minimumPongTime); } } catch ( Exception e ) { //Ignore this exception } connections.clear(); } }; connectionLostCheckerFuture = connectionLostCheckerService.scheduleAtFixedRate(connectionLostChecker, connectionLostTimeout, connectionLostTimeout, TimeUnit.NANOSECONDS); } \n### Response:", "ground_truth": "This methods allows the reset of the connection lost timer in case of a changed parameter\n@since 1.3.4", "predict": "Re-runs the connection lost timer."}
{"ID": 501, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void executeConnectionLostDetection(WebSocket webSocket, long minimumPongTime) { if (!(webSocket instanceof WebSocketImpl)) { return; } WebSocketImpl webSocketImpl = (WebSocketImpl) webSocket; if( webSocketImpl.getLastPong() < minimumPongTime ) { log.trace(\"Closing connection due to no pong received: {}\", webSocketImpl); webSocketImpl.closeConnection( CloseFrame.ABNORMAL_CLOSE, \"The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection\" ); } else { if( webSocketImpl.isOpen() ) { webSocketImpl.sendPing(); } else { log.trace(\"Trying to ping a non open connection: {}\", webSocketImpl); } } } \n### Response:", "ground_truth": "Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping\n@param webSocket the websocket instance\n@param minimumPongTime the lowest/oldest allowable last pong time (in nanoTime) before we consider the connection to be lost", "predict": "Detects if the connection was lost.\n\n@param webSocket the web socket\n@param minimumPongTime the minimum time to wait for a ping response"}
{"ID": 502, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void cancelConnectionLostTimer() { if( connectionLostCheckerService != null ) { connectionLostCheckerService.shutdownNow(); connectionLostCheckerService = null; } if( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture.cancel(false); connectionLostCheckerFuture = null; } } \n### Response:", "ground_truth": "Cancel any running timer for the connection lost detection\n@since 1.3.4", "predict": "Cancels the connection lost timer."}
{"ID": 503, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public ServerHandshakeBuilder onWebsocketHandshakeReceivedAsServer( WebSocket conn, Draft draft, ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server(); } \n### Response:", "ground_truth": "This default implementation does not do anything. Go ahead and overwrite it.\n\n@see org.java_websocket.WebSocketListener#onWebsocketHandshakeReceivedAsServer(WebSocket, Draft, ClientHandshake)", "predict": "Override to handle the websocket handshake response as server.\n\n@param conn the websocket connection\n@param draft the current draft\n@param request the client handshake request\n@return the server handshake response\n@throws InvalidDataException if the data is invalid"}
{"ID": 504, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void onWebsocketPing( WebSocket conn, Framedata f ) { conn.sendFrame( new PongFrame( (PingFrame)f ) ); } \n### Response:", "ground_truth": "This default implementation will send a pong in response to the received ping.\nThe pong frame will have the same payload as the ping frame.\n\n@see org.java_websocket.WebSocketListener#onWebsocketPing(WebSocket, Framedata)", "predict": "Sends a ping frame to the client.\n\n@param conn the WebSocket connection\n@param f the ping frame"}
{"ID": 505, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void stop( int timeout ) throws InterruptedException { if( !isclosed.compareAndSet( false, true ) ) { // this also makes sure that no further connections will be added to this.connections return; } List<WebSocket> socketsToClose; // copy the connections in a list (prevent callback deadlocks) synchronized ( connections ) { socketsToClose = new ArrayList<WebSocket>( connections ); } for( WebSocket ws : socketsToClose ) { ws.close( CloseFrame.GOING_AWAY ); } wsf.close(); synchronized ( this ) { if( selectorthread != null && selector != null) { selector.wakeup(); selectorthread.join( timeout ); } } } \n### Response:", "ground_truth": "Closes all connected clients sockets, then closes the underlying\nServerSocketChannel, effectively killing the server socket selectorthread,\nfreeing the port the server was bound to and stops all internal workerthreads.\n\nIf this method is called before the server is started it will never start.\n\n@param timeout\nSpecifies how many milliseconds the overall close handshaking may take altogether before the connections are closed without proper close handshaking.<br>\n\n@throws InterruptedException Interrupt", "predict": "Stops the connection."}
{"ID": 506, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public int getPort() { int port = getAddress().getPort(); if( port == 0 && server != null ) { port = server.socket().getLocalPort(); } return port; } \n### Response:", "ground_truth": "Gets the port number that this server listens on.\n\n@return The port number.", "predict": "Returns the port on which this server is listening.\n\n@return the port on which this server is listening"}
{"ID": 507, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void doAdditionalRead() throws InterruptedException, IOException { WebSocketImpl conn; while ( !iqueue.isEmpty() ) { conn = iqueue.remove( 0 ); WrappedByteChannel c = ( (WrappedByteChannel) conn.getChannel() ); ByteBuffer buf = takeBuffer(); try { if( SocketChannelIOHelper.readMore( buf, conn, c ) ) iqueue.add( conn ); if( buf.hasRemaining() ) { conn.inQueue.put( buf ); queue( conn ); } else { pushBuffer( buf ); } } catch ( IOException e ) { pushBuffer( buf ); throw e; } } } \n### Response:", "ground_truth": "Do an additional read\n@throws InterruptedException thrown by taking a buffer\n@throws IOException if an error happened during read", "predict": "Do additional reads.\n\n@throws InterruptedException InterruptedException\n@throws IOException IOException"}
{"ID": 508, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void doAccept(SelectionKey key, Iterator<SelectionKey> i) throws IOException, InterruptedException { if( !onConnect( key ) ) { key.cancel(); return; } SocketChannel channel = server.accept(); if(channel==null){ return; } channel.configureBlocking( false ); Socket socket = channel.socket(); socket.setTcpNoDelay( isTcpNoDelay() ); socket.setKeepAlive( true ); WebSocketImpl w = wsf.createWebSocket( this, drafts ); w.setSelectionKey(channel.register( selector, SelectionKey.OP_READ, w )); try { w.setChannel( wsf.wrapChannel( channel, w.getSelectionKey() )); i.remove(); allocateBuffers( w ); } catch (IOException ex) { if( w.getSelectionKey() != null ) w.getSelectionKey().cancel(); handleIOException( w.getSelectionKey(), null, ex ); } } \n### Response:", "ground_truth": "Execute a accept operation\n@param key the selectionkey to read off\n@param i the iterator for the selection keys\n@throws InterruptedException  thrown by taking a buffer\n@throws IOException if an error happened during accept", "predict": "Receive a new connection\n\n@param key\n@param i\n@throws IOException"}
{"ID": 509, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean doRead(SelectionKey key, Iterator<SelectionKey> i) throws InterruptedException, IOException { WebSocketImpl conn = (WebSocketImpl) key.attachment(); ByteBuffer buf = takeBuffer(); if(conn.getChannel() == null){ key.cancel(); handleIOException( key, conn, new IOException() ); return false; } try { if( SocketChannelIOHelper.read( buf, conn, conn.getChannel() ) ) { if( buf.hasRemaining() ) { conn.inQueue.put( buf ); queue( conn ); i.remove(); if( conn.getChannel() instanceof WrappedByteChannel && ( (WrappedByteChannel) conn.getChannel() ).isNeedRead() ) { iqueue.add( conn ); } } else { pushBuffer(buf); } } else { pushBuffer( buf ); } } catch ( IOException e ) { pushBuffer( buf ); throw e; } return true; } \n### Response:", "ground_truth": "Execute a read operation\n@param key the selectionkey to read off\n@param i the iterator for the selection keys\n@return true, if the read was successful, or false if there was an error\n@throws InterruptedException thrown by taking a buffer\n@throws IOException if an error happened during read", "predict": "Reads the next message from the connection.\n\n@param key the connection key\n@param i the iterator\n@return true if the message was read\n@throws InterruptedException if the thread is interrupted\n@throws IOException if an IOException occurs"}
{"ID": 510, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void doWrite(SelectionKey key) throws IOException { WebSocketImpl conn = (WebSocketImpl) key.attachment(); if( SocketChannelIOHelper.batch( conn, conn.getChannel() ) ) { if( key.isValid() ) { key.interestOps(SelectionKey.OP_READ); } } } \n### Response:", "ground_truth": "Execute a write operation\n@param key the selectionkey to write on\n@throws IOException if an error happened during batch", "predict": "Implement the write operation"}
{"ID": 511, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean doSetupSelectorAndServerThread() { selectorthread.setName( \"WebSocketSelector-\" + selectorthread.getId() ); try { server = ServerSocketChannel.open(); server.configureBlocking( false ); ServerSocket socket = server.socket(); socket.setReceiveBufferSize( WebSocketImpl.RCVBUF ); socket.setReuseAddress( isReuseAddr() ); socket.bind( address ); selector = Selector.open(); server.register( selector, server.validOps() ); startConnectionLostTimer(); for( WebSocketWorker ex : decoders ){ ex.start(); } onStart(); } catch ( IOException ex ) { handleFatal( null, ex ); return false; } return true; } \n### Response:", "ground_truth": "Setup the selector thread as well as basic server settings\n@return true, if everything was successful, false if some error happened", "predict": "Setup the selector and the server thread.\n\n@return true if everything is set up correctly"}
{"ID": 512, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean doEnsureSingleThread() { synchronized ( this ) { if( selectorthread != null ) throw new IllegalStateException( getClass().getName() + \" can only be started once.\" ); selectorthread = Thread.currentThread(); if( isclosed.get() ) { return false; } } return true; } \n### Response:", "ground_truth": "The websocket server can only be started once\n@return true, if the server can be started, false if already a thread is running", "predict": "Ensure that the selector thread is started only once."}
{"ID": 513, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void doServerShutdown() { stopConnectionLostTimer(); if( decoders != null ) { for( WebSocketWorker w : decoders ) { w.interrupt(); } } if( selector != null ) { try { selector.close(); } catch ( IOException e ) { log.error( \"IOException during selector.close\", e ); onError( null, e ); } } if( server != null ) { try { server.close(); } catch ( IOException e ) { log.error( \"IOException during server.close\", e ); onError( null, e ); } } } \n### Response:", "ground_truth": "Clean up everything after a shutdown", "predict": "Close all the WebSocket servers"}
{"ID": 514, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Socket getSocket( WebSocket conn ) { WebSocketImpl impl = (WebSocketImpl) conn; return ( (SocketChannel) impl.getSelectionKey().channel() ).socket(); } \n### Response:", "ground_truth": "Getter to return the socket used by this specific connection\n@param conn The specific connection\n@return The socket used by this connection", "predict": "Get the socket associated with the WebSocket connection.\n\n@param conn The WebSocket connection.\n@return The socket associated with the WebSocket connection."}
{"ID": 515, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void broadcast(byte[] data, Collection<WebSocket> clients) { if (data == null || clients == null) { throw new IllegalArgumentException(); } broadcast(ByteBuffer.wrap(data), clients); } \n### Response:", "ground_truth": "Send a byte array to a specific collection of websocket connections\n@param data the data to send to the endpoints\n@param clients a collection of endpoints to whom the text has to be send", "predict": "Broadcast data to all connected clients.\n\n@param data data to broadcast\n@param clients clients to broadcast to"}
{"ID": 516, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void broadcast(String text, Collection<WebSocket> clients) { if (text == null || clients == null) { throw new IllegalArgumentException(); } doBroadcast(text, clients); } \n### Response:", "ground_truth": "Send a text to a specific collection of websocket connections\n@param text the text to send to the endpoints\n@param clients a collection of endpoints to whom the text has to be send", "predict": "Broadcast a message to a collection of clients.\n\n@param text the message to broadcast\n@param clients the clients to broadcast to"}
{"ID": 517, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void doBroadcast(Object data, Collection<WebSocket> clients) { String sData = null; if (data instanceof String) { sData = (String)data; } ByteBuffer bData = null; if (data instanceof ByteBuffer) { bData = (ByteBuffer)data; } if (sData == null && bData == null) { return; } Map<Draft, List<Framedata>> draftFrames = new HashMap<Draft, List<Framedata>>(); for( WebSocket client : clients ) { if( client != null ) { Draft draft = client.getDraft(); fillFrames(draft, draftFrames, sData, bData); try { client.sendFrame( draftFrames.get( draft ) ); } catch ( WebsocketNotConnectedException e ) { //Ignore this exception in this case } } } } \n### Response:", "ground_truth": "Private method to cache all the frames to improve memory footprint and conversion time\n@param data the data to broadcast\n@param clients the clients to send the message to", "predict": "Sends a message to all clients connected to this websocket server.\n\n@param data\n@param clients"}
{"ID": 518, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void fillFrames(Draft draft, Map<Draft, List<Framedata>> draftFrames, String sData, ByteBuffer bData) { if( !draftFrames.containsKey( draft ) ) { List<Framedata> frames = null; if (sData != null) { frames = draft.createFrames( sData, false ); } if (bData != null) { frames = draft.createFrames( bData, false ); } if (frames != null) { draftFrames.put(draft, frames); } } } \n### Response:", "ground_truth": "Fills the draftFrames with new data for the broadcast\n@param draft The draft to use\n@param draftFrames The list of frames per draft to fill\n@param sData the string data, can be null\n@param bData the bytebuffer data, can be null", "predict": "Fill the frames.\n\n@param draft\nthe draft\n@param sData\nthe s data\n@param bData\nthe b data"}
{"ID": 519, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int transferByteBuffer( ByteBuffer source, ByteBuffer dest ) { if( source == null || dest == null ) { throw new IllegalArgumentException(); } int fremain = source.remaining(); int toremain = dest.remaining(); if( fremain > toremain ) { int limit = Math.min( fremain, toremain ); source.limit( limit ); dest.put( source ); return limit; } else { dest.put( source ); return fremain; } } \n### Response:", "ground_truth": "Transfer from one ByteBuffer to another ByteBuffer\n\n@param source the ByteBuffer to copy from\n@param dest   the ByteBuffer to copy to\n@return the number of transferred bytes", "predict": "Transfers the given ByteBuffer to the given destination ByteBuffer.\n\n@param source\n@param dest\n@return"}
{"ID": 520, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public JPAApi start() { jpaConfig .persistenceUnits() .forEach( persistenceUnit -> emfs.put( persistenceUnit.name, Persistence.createEntityManagerFactory(persistenceUnit.unitName))); return this; } \n### Response:", "ground_truth": "Initialise JPA entity manager factories.", "predict": "Starts the JPA API.\n\n@return the JPA API"}
{"ID": 521, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public EntityManager em(String name) { EntityManagerFactory emf = emfs.get(name); if (emf == null) { return null; } return emf.createEntityManager(); } \n### Response:", "ground_truth": "Get a newly created EntityManager for the specified persistence unit name.\n\n@param name The persistence unit name", "predict": "Returns the EntityManager for the given name.\n\n@param name the name of the EntityManager\n@return the EntityManager"}
{"ID": 522, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void withTransaction(Consumer<EntityManager> block) { withTransaction( em -> { block.accept(em); return null; }); } \n### Response:", "ground_truth": "Run a block of code with a newly created EntityManager for the default Persistence Unit.\n\n@param block Block of code to execute", "predict": "Wraps the given block in a transaction.\n\n@param block the block to wrap"}
{"ID": 523, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static Seq<Object> convertArgsToScalaBuffer(final Object... args) { return scala.collection.JavaConverters.asScalaBufferConverter(wrapArgsToListIfNeeded(args)) .asScala() .toList(); } \n### Response:", "ground_truth": "Converts the varargs to a scala buffer, takes care of wrapping varargs into a intermediate list\nif necessary\n\n@param args the message arguments\n@return scala type for message processing", "predict": "Converts the given arguments to a Scala buffer.\n\n@param args the arguments to convert\n@return the converted arguments"}
{"ID": 524, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SafeVarargs private static <T> List<T> wrapArgsToListIfNeeded(final T... args) { List<T> out; if (args != null && args.length == 1 && args[0] instanceof List) { out = (List<T>) args[0]; } else { out = Arrays.asList(args); } return out; } \n### Response:", "ground_truth": "Wraps arguments passed into a list if necessary.\n\n<p>Returns the first value as is if it is the only argument and a subtype of `java.util.List`\nOtherwise, it calls Arrays.asList on args\n\n@param args arguments as a List", "predict": "Wraps the given arguments in a list if needed.\n\n@param args the arguments to wrap\n@return the wrapped arguments"}
{"ID": 525, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String get(play.api.i18n.Lang lang, String key, Object... args) { Seq<Object> scalaArgs = convertArgsToScalaBuffer(args); return messages.apply(key, scalaArgs, lang); } \n### Response:", "ground_truth": "Translates a message.\n\n<p>Uses `java.text.MessageFormat` internally to format the message.\n\n@param lang the message lang\n@param key the message key\n@param args the message arguments\n@return the formatted message or a default rendering if the key wasn't defined", "predict": "Get message from key.\n\n@param lang the i18n.Lang\n@param key the message key\n@param args the message arguments\n@return the message"}
{"ID": 526, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String get(play.api.i18n.Lang lang, List<String> keys, Object... args) { Buffer<String> keyArgs = scala.collection.JavaConverters.asScalaBufferConverter(keys).asScala(); Seq<Object> scalaArgs = convertArgsToScalaBuffer(args); return messages.apply(keyArgs.toSeq(), scalaArgs, lang); } \n### Response:", "ground_truth": "Translates the first defined message.\n\n<p>Uses `java.text.MessageFormat` internally to format the message.\n\n@param lang the message lang\n@param keys the messages keys\n@param args the message arguments\n@return the formatted message or a default rendering if the key wasn't defined", "predict": "Get message with keys.\n\n@param lang the i18n.lang\n@param keys the keys\n@param args the args\n@return the string"}
{"ID": 527, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Boolean isDefinedAt(play.api.i18n.Lang lang, String key) { return messages.isDefinedAt(key, lang); } \n### Response:", "ground_truth": "Check if a message key is defined.\n\n@param lang the message lang\n@param key the message key\n@return a Boolean", "predict": "Checks if the message is defined for the given language.\n\n@param lang the language\n@param key the message key\n@return true if the message is defined for the given language"}
{"ID": 528, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Messages preferred(Collection<Lang> candidates) { Seq<Lang> cs = Scala.asScala(candidates); play.api.i18n.Messages msgs = messages.preferred((Seq) cs); return new MessagesImpl(new Lang(msgs.lang()), this); } \n### Response:", "ground_truth": "Get a messages context appropriate for the given candidates.\n\n<p>Will select a language from the candidates, based on the languages available, and fallback\nto the default language if none of the candidates are available.\n\n@param candidates the candidate languages\n@return the most appropriate Messages instance given the candidate languages", "predict": "Returns a Messages object with the preferred language."}
{"ID": 529, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Messages preferred(Http.RequestHeader request) { play.api.i18n.Messages msgs = messages.preferred(request); return new MessagesImpl(new Lang(msgs.lang()), this); } \n### Response:", "ground_truth": "Get a messages context appropriate for the given request.\n\n<p>Will select a language from the request, based on the languages available, and fallback to\nthe default language if none of the candidates are available.\n\n@param request the incoming request\n@return the preferred messages context for the request", "predict": "Returns the preferred messages for the given request.\n\n@param request the request\n@return the preferred messages"}
{"ID": 530, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Result setLang(Result result, Lang lang) { return messages.setLang(result.asScala(), lang).asJava(); } \n### Response:", "ground_truth": "Given a Result and a Lang, return a new Result with the lang cookie set to the given Lang.\n\n@param result the result where the lang will be set.\n@param lang the lang to set on the result\n@return a new result with the lang.", "predict": "Sets the language of the result.\n\n@param result the result\n@param lang the language\n@return the result with the new language"}
{"ID": 531, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public final Self bindings(GuiceableModule... modules) { return newBuilder(delegate.bindings(Scala.varargs(modules))); } \n### Response:", "ground_truth": "Add bindings from guiceable modules.\n\n@param modules the set of modules to bind\n@return a copy of this builder configured with those modules", "predict": "Builds the bindings for the given modules.\n\n@param modules the modules to bind\n@return the new builder"}
{"ID": 532, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public final Self bindings(play.api.inject.Module... modules) { return bindings(Guiceable.modules(modules)); } \n### Response:", "ground_truth": "Add bindings from Play modules.\n\n@param modules the set of Guice modules whose bindings to apply\n@return a copy of this builder configured with the provided bindings", "predict": "Injects the given modules into the module bindings.\n\n@param modules the modules to inject\n@return the bindings"}
{"ID": 533, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public final Self bindings(play.api.inject.Binding<?>... bindings) { return bindings(Guiceable.bindings(bindings)); } \n### Response:", "ground_truth": "Add Play bindings.\n\n@param bindings the set of play bindings to apply\n@return a copy of this builder configured with the provided bindings", "predict": "Binds bindings to the instance.\n\n@param bindings bindings to bind\n@return the bindings bound to the instance"}
{"ID": 534, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public final Self overrides(GuiceableModule... modules) { return newBuilder(delegate.overrides(Scala.varargs(modules))); } \n### Response:", "ground_truth": "Override bindings using guiceable modules.\n\n@param modules the set of Guice modules whose bindings override some previously configured ones\n@return a copy of this builder re-configured with the provided bindings", "predict": "Overrides the given modules."}
{"ID": 535, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public final Self overrides(play.api.inject.Module... modules) { return overrides(Guiceable.modules(modules)); } \n### Response:", "ground_truth": "Override bindings using Play modules.\n\n@param modules the set of Play modules whose bindings override some previously configured ones\n@return a copy of this builder re-configured with the provided bindings", "predict": "Returns a list of modules that overrides the provided modules.\n\n@param modules the modules to override\n@return the overrides"}
{"ID": 536, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public final Self overrides(play.api.inject.Binding<?>... bindings) { return overrides(Guiceable.bindings(bindings)); } \n### Response:", "ground_truth": "Override bindings using Play bindings.\n\n@param bindings a set of Play bindings that override some previously configured ones\n@return a copy of this builder re-configured with the provided bindings", "predict": "Returns a list of bindings that overrides the bindings specified in the\nconstructor.\n\n@param bindings the bindings to override\n@return the overrides"}
{"ID": 537, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public final Self disable(Class<?>... moduleClasses) { return newBuilder(delegate.disable(Scala.toSeq(moduleClasses))); } \n### Response:", "ground_truth": "Disable modules by class.\n\n@param moduleClasses the module classes whose bindings should be disabled\n@return a copy of this builder configured to ignore the provided module classes", "predict": "Disables the given modules.\n\n@param moduleClasses the modules to disable\n@return a new builder instance"}
{"ID": 538, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Deprecated // TODO: When you remove this method make call(Request) below abstract public CompletionStage<Result> call(Context ctx) { return call( ctx.args != null && !ctx.args.isEmpty() ? ctx.request().addAttr(CTX_ARGS, ctx.args) : ctx.request()); } \n### Response:", "ground_truth": "Executes this action with the given HTTP context and returns the result.\n\n@param ctx the http context in which to execute this action\n@return a promise to the action's result\n@deprecated Since 2.7.0. Use {@link #call(Request)} instead. Please see <a\nhref=\"https://www.playframework.com/documentation/latest/JavaHttpContextMigration27\">the\nmigration guide</a> for more details.", "predict": "Call the API with the provided arguments.\n\n@param ctx the context\n@return the result"}
{"ID": 539, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public CompletionStage<Result> call( Request req) { // TODO: Make this method abstract after removing call(Context) return Context.safeCurrent() .map( threadLocalCtx -> { // A previous action did explicitly set a context onto the thread local (via // Http.Context.current.set(...)) // Let's use that context so the user doesn't loose data he/she set onto that ctx // (args,...) Context newCtx = threadLocalCtx.withRequest(req.removeAttr(CTX_ARGS)); Context.setCurrent(newCtx); return call(newCtx); }) .orElseGet( () -> { // A previous action did not set a context explicitly, we simply create a new one to // pass on the request Context ctx = new Context(req.removeAttr(CTX_ARGS), contextComponents); ctx.args = req.attrs().getOptional(CTX_ARGS).orElse(new HashMap<>()); return call(ctx); }); } \n### Response:", "ground_truth": "Executes this action with the given HTTP request and returns the result.\n\n@param req the http request with which to execute this action\n@return a promise to the action's result", "predict": "Call the provided function with the provided context."}
{"ID": 540, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Optional<File> getExistingFile(String relativePath) { return OptionConverters.toJava(env.getExistingFile(relativePath)); } \n### Response:", "ground_truth": "Retrieves a file relative to the application root path. This method returns an Optional, using\nempty if the file was not found.\n\n@param relativePath relative path of the file to fetch\n@return an existing file", "predict": "Get the existing file with the given path.\n\n@param relativePath the relative path\n@return the existing file"}
{"ID": 541, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <A extends Annotation> Binding<T> in(final Class<A> scope) { return underlying.in(scope).asJava(); } \n### Response:", "ground_truth": "Configure the scope for this binding.", "predict": "Returns a binding that is defined in the given scope.\n\n@param <A> the type of the annotation\n@param scope the scope of the annotation\n@return the binding"}
{"ID": 542, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <A, B> Tuple<A, B> Tuple(A a, B b) { return new Tuple<A, B>(a, b); } \n### Response:", "ground_truth": "Constructs a tuple of A,B\n\n@param a The a value\n@param b The b value\n@param <A> a's type\n@param <B> b's type\n@return The tuple", "predict": "Creates a tuple from the specified elements.\n\n@param a the first element of the tuple\n@param b the second element of the tuple\n@return a tuple"}
{"ID": 543, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <A, B, C, D, E> Tuple5<A, B, C, D, E> Tuple5(A a, B b, C c, D d, E e) { return new Tuple5<A, B, C, D, E>(a, b, c, d, e); } \n### Response:", "ground_truth": "Constructs a tuple of A,B,C,D,E\n\n@param a The a value\n@param b The b value\n@param c The c value\n@param d The d value\n@param e The e value\n@param <A> a's type\n@param <B> b's type\n@param <C> c's type\n@param <D> d's type\n@param <E> e's type\n@return The tuple", "predict": "Create a tuple of type 5 from the arguments.\n\n@param <A> the type of the first element\n@param <B> the type of the second element\n@param <C> the type of the third element\n@param <D> the type of the fourth element\n@param <E> the type of the fifth element\n@param a the first element\n@param b the second element\n@param c the third element\n@param d the fourth element\n@param e the fifth element\n@return the tuple"}
{"ID": 544, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static Executor toExecutor(ExecutionContext ec) { ExecutionContext prepared = ec.prepare(); if (prepared instanceof Executor) { return (Executor) prepared; } else { return prepared::execute; } } \n### Response:", "ground_truth": "Converts the execution context to an executor, preparing it first.\n\n@param ec the execution context.\n@return the Java Executor.", "predict": "Converts the execution context to an Executor."}
{"ID": 545, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static JPAConfig of(String name, String unitName) { return new DefaultJPAConfig(new JPAConfig.PersistenceUnit(name, unitName)); } \n### Response:", "ground_truth": "Create a default JPA configuration with the given name and unit name.\n\n@param name the name for the entity manager factory\n@param unitName the persistence unit name as used in `persistence.xml`\n@return a default JPA configuration", "predict": "Creates a new JPAConfig instance with the given name and unit name.\n\n@param name the name of the JPA configuration\n@param unitName the name of the JPA configuration unit\n@return the JPA configuration instance"}
{"ID": 546, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static JPAConfig of(String n1, String u1, String n2, String u2) { return new DefaultJPAConfig( new JPAConfig.PersistenceUnit(n1, u1), new JPAConfig.PersistenceUnit(n2, u2)); } \n### Response:", "ground_truth": "Create a default JPA configuration with the given names and unit names.\n\n@param n1 Name of the first entity manager factory\n@param u1 Name of the first unit\n@param n2 Name of the second entity manager factory\n@param u2 Name of the second unit\n@return a default JPA configuration with the provided persistence units.", "predict": "Creates a JPAConfig instance with the given persistence units.\n\n@param n1 the name of the first persistence unit\n@param u1 the name of the first persistence unit\n@param n2 the name of the second persistence unit\n@param u2 the name of the second persistence unit\n@return a JPAConfig instance with the given persistence units"}
{"ID": 547, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static JPAConfig from(Map<String, String> map) { ImmutableSet.Builder<JPAConfig.PersistenceUnit> persistenceUnits = new ImmutableSet.Builder<JPAConfig.PersistenceUnit>(); for (Map.Entry<String, String> entry : map.entrySet()) { persistenceUnits.add(new JPAConfig.PersistenceUnit(entry.getKey(), entry.getValue())); } return new DefaultJPAConfig(persistenceUnits.build()); } \n### Response:", "ground_truth": "Create a default JPA configuration from a map of names to unit names.\n\n@param map Map of entity manager factory names to unit names\n@return a JPAConfig configured with the provided mapping", "predict": "Creates a JPAConfig from a map of persistence units.\n\n@param map map of persistence units\n@return JPAConfig"}
{"ID": 548, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Flow<String, ByteString, NotUsed> string(String callbackName) { return Flow.of(String.class) .map( str -> { return ByteString.fromString(\"'\" + StringEscapeUtils.escapeEcmaScript(str) + \"'\"); }) .via(flow(callbackName)); } \n### Response:", "ground_truth": "Produces a Flow of escaped ByteString from a series of String elements. Calls out to Comet.flow\ninternally.\n\n@param callbackName the javascript callback method.\n@return a flow of ByteString elements.", "predict": "Create a string flow.\n\n@param callbackName the name of the callback to call\n@return the flow"}
{"ID": 549, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Flow<JsonNode, ByteString, NotUsed> json(String callbackName) { return Flow.of(JsonNode.class) .map( json -> { return ByteString.fromString(Json.stringify(json)); }) .via(flow(callbackName)); } \n### Response:", "ground_truth": "Produces a flow of ByteString using `Json.stringify` from a Flow of JsonNode. Calls out to\nComet.flow internally.\n\n@param callbackName the javascript callback method.\n@return a flow of ByteString elements.", "predict": "Create a flow that transforms a JSON string into a JSON node.\n\n@param callbackName name of the callback to call\n@return flow that transforms a JSON string into a JSON node"}
{"ID": 550, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T extends ConstraintValidator<?, ?>> MappedConstraintValidatorFactory addConstraintValidator(Class<T> key, T constraintValidator) { validators.put(key, () -> constraintValidator); return this; } \n### Response:", "ground_truth": "Adds validator as a singleton.\n\n@param key the constraint validator type\n@param constraintValidator the constraint validator instance\n@param <T> the type of constraint validator implementation\n@return {@link MappedConstraintValidatorFactory} with the given constraint validator added.", "predict": "Add a constraint validator to the factory.\n\n@param <T>\n@param key\n@param constraintValidator\n@return"}
{"ID": 551, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private <T extends ConstraintValidator<?, ?>> T newInstance(Class<T> key) { try { return key.getDeclaredConstructor().newInstance(); } catch (InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex) { throw new RuntimeException(ex); } } \n### Response:", "ground_truth": "need to do so.", "predict": "Returns a new instance of the given constraint validator."}
{"ID": 552, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Method getMatchingAccessibleMethod( final Class<?> cls, final String methodName, final Class<?>... parameterTypes) { try { final Method method = cls.getMethod(methodName, parameterTypes); MemberUtils.setAccessibleWorkaround(method); return method; } catch (final NoSuchMethodException e) { // NOPMD - Swallow the exception } // search through all methods Method bestMatch = null; final Method[] methods = cls.getMethods(); for (final Method method : methods) { // compare name and parameters if (method.getName().equals(methodName) && MemberUtils.isMatchingMethod(method, parameterTypes)) { // get accessible version of method final Method accessibleMethod = getAccessibleMethod(method); if (accessibleMethod != null && (bestMatch == null || MemberUtils.compareMethodFit(accessibleMethod, bestMatch, parameterTypes) < 0)) { bestMatch = accessibleMethod; } } } if (bestMatch != null) { MemberUtils.setAccessibleWorkaround(bestMatch); } if (bestMatch != null && bestMatch.isVarArgs() && bestMatch.getParameterTypes().length > 0 && parameterTypes.length > 0) { final Class<?>[] methodParameterTypes = bestMatch.getParameterTypes(); final Class<?> methodParameterComponentType = methodParameterTypes[methodParameterTypes.length - 1].getComponentType(); final String methodParameterComponentTypeName = ClassUtils.primitiveToWrapper(methodParameterComponentType).getName(); final String parameterTypeName = parameterTypes[parameterTypes.length - 1].getName(); final String parameterTypeSuperClassName = parameterTypes[parameterTypes.length - 1].getSuperclass().getName(); if (!methodParameterComponentTypeName.equals(parameterTypeName) && !methodParameterComponentTypeName.equals(parameterTypeSuperClassName)) { return null; } } return bestMatch; } \n### Response:", "ground_truth": "Finds an accessible method that matches the given name and has compatible parameters.\nCompatible parameters mean that every method parameter is assignable from the given parameters.\nIn other words, it finds a method with the given name that will take the parameters given.\n\n<p>This method can match primitive parameter by passing in wrapper classes. For example, a\n{@code Boolean} will match a primitive {@code boolean} parameter.\n\n@param cls find method in this class\n@param methodName find method with this name\n@param parameterTypes find method with most compatible parameters\n@return The accessible method", "predict": "Returns the best accessible method with the given name and parameter types.\n\n@param cls the class to search\n@param methodName the method name\n@param parameterTypes the parameter types\n@return the best accessible method with the given name and parameter types"}
{"ID": 553, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public CompletionStage<Result> onClientError( RequestHeader request, int statusCode, String message) { if (statusCode == 400) { return onBadRequest(request, message); } else if (statusCode == 403) { return onForbidden(request, message); } else if (statusCode == 404) { return onNotFound(request, message); } else if (statusCode >= 400 && statusCode < 500) { return onOtherClientError(request, statusCode, message); } else { throw new IllegalArgumentException( \"onClientError invoked with non client error status code \" + statusCode + \": \" + message); } } \n### Response:", "ground_truth": "Invoked when a client error occurs, that is, an error in the 4xx series.\n\n<p>The base implementation calls onBadRequest, onForbidden, onNotFound, or onOtherClientError\ndepending on the HTTP status code.\n\n@param request The request that caused the client error.\n@param statusCode The error status code. Must be greater or equal to 400, and less than 500.\n@param message The error message.\n@return a CompletionStage containing the Result.", "predict": "Override to handle client error."}
{"ID": 554, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected CompletionStage<Result> onBadRequest(RequestHeader request, String message) { return CompletableFuture.completedFuture( Results.badRequest( views.html.defaultpages.badRequest.render( request.method(), request.uri(), message, request.asScala()))); } \n### Response:", "ground_truth": "Invoked when a client makes a bad request.\n\n<p>Returns Results.badRequest (400) with the included template from {@code\nviews.html.defaultpages.badRequest} as the content.\n\n@param request The request that was bad.\n@param message The error message.\n@return a CompletionStage containing the Result.", "predict": "Callback for bad request.\n\n@param request the request\n@param message the message\n@return the completion stage"}
{"ID": 555, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected CompletionStage<Result> onForbidden(RequestHeader request, String message) { return CompletableFuture.completedFuture( Results.forbidden(views.html.defaultpages.unauthorized.render(request.asScala()))); } \n### Response:", "ground_truth": "Invoked when a client makes a request that was forbidden.\n\n<p>Returns Results.forbidden (401) with the included template from {@code\nviews.html.defaultpages.unauthorized} as the content.\n\n@param request The forbidden request.\n@param message The error message.\n@return a CompletionStage containing the Result.", "predict": "Renders the given request as forbidden.\n\n@param request the request\n@param message the message\n@return the completion stage"}
{"ID": 556, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected CompletionStage<Result> onNotFound(RequestHeader request, String message) { if (environment.isProd()) { return CompletableFuture.completedFuture( Results.notFound( views.html.defaultpages.notFound.render( request.method(), request.uri(), request.asScala()))); } else { return CompletableFuture.completedFuture( Results.notFound( views.html.defaultpages.devNotFound.render( request.method(), request.uri(), Some.apply(routes.get()), request.asScala()))); } } \n### Response:", "ground_truth": "Invoked when a handler or resource is not found.\n\n<p>If the environment's mode is production, then returns Results.notFound (404) with the\nincluded template from `views.html.defaultpages.notFound` as the content.\n\n<p>Otherwise, Results.notFound (404) is rendered with {@code\nviews.html.defaultpages.devNotFound} template.\n\n@param request The request that no handler was found to handle.\n@param message A message, which is not used by the default implementation.\n@return a CompletionStage containing the Result.", "predict": "Callback for when a route is not found.\n\n@param request the request\n@param message the error message\n@return the completion stage"}
{"ID": 557, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public CompletionStage<Result> onServerError(RequestHeader request, Throwable exception) { try { UsefulException usefulException = throwableToUsefulException(exception); logServerError(request, usefulException); switch (environment.mode()) { case PROD: return onProdServerError(request, usefulException); default: return onDevServerError(request, usefulException); } } catch (Exception e) { logger.error(\"Error while handling error\", e); return CompletableFuture.completedFuture(Results.internalServerError()); } } \n### Response:", "ground_truth": "Invoked when a server error occurs.\n\n<p>By default, the implementation of this method delegates to [[onProdServerError()]] when in\nprod mode, and [[onDevServerError()]] in dev mode. It is recommended, if you want Play's debug\ninfo on the error page in dev mode, that you override [[onProdServerError()]] instead of this\nmethod.\n\n@param request The request that triggered the server error.\n@param exception The server error.\n@return a CompletionStage containing the Result.", "predict": "Override this method to handle the error differently.\n\n@param request the request header\n@param exception the exception\n@return the completion stage"}
{"ID": 558, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void logServerError(RequestHeader request, UsefulException usefulException) { logger.error( String.format( \"\\n\\n! @%s - Internal server error, for (%s) [%s] ->\\n\", usefulException.id, request.method(), request.uri()), usefulException); } \n### Response:", "ground_truth": "Responsible for logging server errors.\n\n<p>The base implementation uses a SLF4J Logger. If a special annotation is desired for internal\nserver errors, you may want to use SLF4J directly with the Marker API to distinguish server\nerrors from application errors.\n\n<p>This can also be overridden to add additional logging information, eg. the id of the\nauthenticated user.\n\n@param request The request that triggered the server error.\n@param usefulException The server error.", "predict": "Logs an error to the log.\n\n@param request the request\n@param usefulException the useful exception"}
{"ID": 559, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected final UsefulException throwableToUsefulException(final Throwable throwable) { return HttpErrorHandlerExceptions.throwableToUsefulException( sourceMapper.sourceMapper(), environment.isProd(), throwable); } \n### Response:", "ground_truth": "Convert the given exception to an exception that Play can report more information about.\n\n<p>This will generate an id for the exception, and in dev mode, will load the source code for\nthe code that threw the exception, making it possible to report on the location that the\nexception was thrown from.", "predict": "Converts a throwable to a useful exception.\n\n@param throwable the throwable\n@return the exception"}
{"ID": 560, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected CompletionStage<Result> onDevServerError( RequestHeader request, UsefulException exception) { return CompletableFuture.completedFuture( Results.internalServerError( views.html.defaultpages.devError.render(playEditor, exception, request.asScala()))); } \n### Response:", "ground_truth": "Invoked in dev mode when a server error occurs. Note that this method is where the URL set by\nplay.editor is used.\n\n<p>The base implementation returns {@code Results.internalServerError} with the content of\n{@code views.html.defaultpages.devError}.\n\n@param request The request that triggered the error.\n@param exception The exception.\n@return a CompletionStage containing the Result.", "predict": "Callback for server errors.\n\n@param request the request being processed\n@param exception the exception that occurred\n@return a future that will be completed when the request is processed"}
{"ID": 561, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected CompletionStage<Result> onProdServerError( RequestHeader request, UsefulException exception) { return CompletableFuture.completedFuture( Results.internalServerError( views.html.defaultpages.error.render(exception, request.asScala()))); } \n### Response:", "ground_truth": "Invoked in prod mode when a server error occurs.\n\n<p>The base implementation returns {@code Results.internalServerError} with the content of\n{@code views.html.defaultpages.error} template.\n\n<p>Override this rather than [[onServerError()]] if you don't want to change Play's debug\noutput when logging errors in dev mode.\n\n@param request The request that triggered the error.\n@param exception The exception.\n@return a CompletionStage containing the Result.", "predict": "Invoked when a server error occurs.\n\n@param request the request being processed\n@param exception the exception that occurred\n@return a CompletionStage that will be executed when the request is completed"}
{"ID": 562, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static BuildDocHandler fromResources(File[] files, String[] baseDirs) throws IOException { assert (files.length == baseDirs.length); FileRepository[] repositories = new FileRepository[files.length]; List<JarFile> jarFiles = new ArrayList<>(); for (int i = 0; i < files.length; i++) { File file = files[i]; String baseDir = baseDirs[i]; if (file.isDirectory()) { repositories[i] = new FilesystemRepository(file); } else { // Assume it's a jar file JarFile jarFile = new JarFile(file); jarFiles.add(jarFile); repositories[i] = new JarRepository(jarFile, Option.apply(baseDir)); } } return new DocumentationHandler( new AggregateFileRepository(repositories), () -> { for (JarFile jarFile : jarFiles) { jarFile.close(); } }); } \n### Response:", "ground_truth": "Create a BuildDocHandler that serves documentation from the given files, which could either be\ndirectories or jar files. The baseDir array must be the same length as the files array, and the\ncorresponding entry in there for jar files is used as a base directory to use resources from in\nthe jar.\n\n@param files The directories or jar files to serve documentation from.\n@param baseDirs The base directories for the jar files. Entries may be null.\n@return a BuildDocHandler.", "predict": "Create a handler from a list of files and directories.\n\n@param files\n@param baseDirs\n@return\n@throws IOException"}
{"ID": 563, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static BuildDocHandler fromDirectory(File directory) { FileRepository repo = new FilesystemRepository(directory); return new DocumentationHandler(repo); } \n### Response:", "ground_truth": "Create an BuildDocHandler that serves documentation from a given directory by wrapping a\nFilesystemRepository.\n\n@param directory The directory to serve the documentation from.", "predict": "Creates a new DocumentationHandler from a directory.\n\n@param directory the directory to create the handler from\n@return the DocumentationHandler"}
{"ID": 564, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static BuildDocHandler fromDirectoryAndJar(File directory, JarFile jarFile, String base) { return fromDirectoryAndJar(directory, jarFile, base, false); } \n### Response:", "ground_truth": "Create an BuildDocHandler that serves the manual from a given directory by wrapping a\nFilesystemRepository, and the API docs from a given JAR file by wrapping a JarRepository\n\n@param directory The directory to serve the documentation from.\n@param jarFile The JAR file to server the documentation from.\n@param base The directory within the JAR file to serve the documentation from, or null if the\ndocumentation should be served from the root of the JAR.", "predict": "Creates a new BuildDocHandler from a directory and jar file.\n\n@param directory the directory to be used as the base for the jar file.\n@param jarFile the jar file to be used as the base for the jar file.\n@param base the base directory to be used as the base for the jar file.\n@return the new BuildDocHandler."}
{"ID": 565, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static BuildDocHandler fromDirectoryAndJar( File directory, JarFile jarFile, String base, boolean fallbackToJar) { FileRepository fileRepo = new FilesystemRepository(directory); FileRepository jarRepo = new JarRepository(jarFile, Option.apply(base)); FileRepository manualRepo; if (fallbackToJar) { manualRepo = new AggregateFileRepository(new FileRepository[] {fileRepo, jarRepo}); } else { manualRepo = fileRepo; } return new DocumentationHandler(manualRepo, jarRepo); } \n### Response:", "ground_truth": "Create an BuildDocHandler that serves the manual from a given directory by wrapping a\nFilesystemRepository, and the API docs from a given JAR file by wrapping a JarRepository.\n\n@param directory The directory to serve the documentation from.\n@param jarFile The JAR file to server the documentation from.\n@param base The directory within the JAR file to serve the documentation from, or null if the\ndocumentation should be served from the root of the JAR.\n@param fallbackToJar Whether the doc handler should fall back to the jar repo for docs.", "predict": "Create a handler from a directory and jar file.\n\n@param directory the directory to be used as the base for the documentation.\n@param jarFile the jar file to be used as the documentation.\n@param base the base directory to be used as the documentation base.\n@param fallbackToJar if true, the documentation will be stored in the jar file.\n@return the documentation handler."}
{"ID": 566, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static BuildDocHandler fromJar(JarFile jarFile, String base) { FileRepository repo = new JarRepository(jarFile, Option.apply(base)); return new DocumentationHandler(repo); } \n### Response:", "ground_truth": "Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a\nJarRepository.\n\n@param jarFile The JAR file to server the documentation from.\n@param base The directory within the JAR file to serve the documentation from, or null if the\ndocumentation should be served from the root of the JAR.", "predict": "Creates a new handler from a jar file."}
{"ID": 567, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public CompletionStage<ByteString> consumeData(Materializer mat) { return dataStream().runFold(ByteString.empty(), ByteString::concat, mat); } \n### Response:", "ground_truth": "Consumes the data.\n\n<p>This method should be used carefully, since if the source represents an ephemeral stream,\nthen the entity may not be usable after this method is invoked.\n\n@param mat the application's materializer.\n@return a CompletionStage holding the data", "predict": "Consumes the given materializer and returns a completion stage for the resulting ByteString.\n\n@param mat materializer to consume\n@return completion stage for the resulting ByteString"}
{"ID": 568, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static final HttpEntity fromContent(Content content, String charset) { String body; if (content instanceof Xml) { // See https://github.com/playframework/playframework/issues/2770 body = content.body().trim(); } else { body = content.body(); } return new Strict( ByteString.fromString(body, charset), Optional.of(content.contentType() + \"; charset=\" + charset)); } \n### Response:", "ground_truth": "Create an entity from the given content.\n\n@param content The content.\n@param charset The charset.\n@return the HTTP entity.", "predict": "Creates a new entity from the given content.\n\n@param content the content\n@param charset the charset\n@return the entity"}
{"ID": 569, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static final HttpEntity fromString(String content, String charset) { return new Strict( ByteString.fromString(content, charset), Optional.of(\"text/plain; charset=\" + charset)); } \n### Response:", "ground_truth": "Create an entity from the given String.\n\n@param content The content.\n@param charset The charset.\n@return the HTTP entity.", "predict": "Constructs a new entity from a string.\n\n@param content the content\n@param charset the charset\n@return the entity"}
{"ID": 570, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static final HttpEntity chunked(Source<ByteString, ?> data, Optional<String> contentType) { return new Chunked(data.map(HttpChunk.Chunk::new), contentType); } \n### Response:", "ground_truth": "Convert the given source of ByteStrings to a chunked entity.\n\n@param data The source.\n@param contentType The optional content type.\n@return The ByteStrings.", "predict": "Creates a chunked entity.\n\n@param data the data\n@param contentType the content type\n@return the chunked entity"}
{"ID": 571, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Result status(int status, JsonNode content) { return status(status, content, JsonEncoding.UTF8); } \n### Response:", "ground_truth": "Generates a simple result with json content and UTF8 encoding.\n\n@param status the HTTP status for this result e.g. 200 (OK), 404 (NOT_FOUND)\n@param content the result's body content as a play-json object\n@return the result", "predict": "Returns a status code and content for a JSON response.\n\n@param status the status code\n@param content the content\n@return the result"}
{"ID": 572, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Result status(int status, JsonNode content, JsonEncoding encoding) { if (content == null) { throw new NullPointerException(\"Null content\"); } return status(status).sendJson(content, encoding); } \n### Response:", "ground_truth": "Generates a simple result with json content.\n\n@param status the HTTP status for this result e.g. 200 (OK), 404 (NOT_FOUND)\n@param content the result's body content, as a play-json object\n@param encoding the encoding into which the json should be encoded\n@return the result", "predict": "Sends a JSON response with the given status code and content.\n\n@param status The status code to send.\n@param content The content to send.\n@param encoding The encoding to use.\n@return The result."}
{"ID": 573, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Result status(int status, byte[] content) { if (content == null) { throw new NullPointerException(\"Null content\"); } return new Result( status, new HttpEntity.Strict(ByteString.fromArray(content), Optional.empty())); } \n### Response:", "ground_truth": "Generates a simple result with byte-array content.\n\n@param status the HTTP status for this result e.g. 200 (OK), 404 (NOT_FOUND)\n@param content the result's body content, as a byte array\n@return the result", "predict": "Returns a Result with the given status and content.\n\n@param status The status code\n@param content The content\n@return The result"}
{"ID": 574, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Result status(int status, InputStream content, long contentLength) { return status(status).sendInputStream(content, contentLength); } \n### Response:", "ground_truth": "Generates a chunked result.\n\n@param status the HTTP status for this result e.g. 200 (OK), 404 (NOT_FOUND)\n@param content the input stream containing data to chunk over\n@param contentLength the length of the provided content in bytes.\n@return the result", "predict": "Sends the given content to the client.\n\n@param status The HTTP status code to send.\n@param content The content to send.\n@param contentLength The content length.\n@return The response."}
{"ID": 575, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Result status(int status, File content) { return status(status, content, StaticFileMimeTypes.fileMimeTypes()); } \n### Response:", "ground_truth": "Generates a result with file contents.\n\n@param status the HTTP status for this result e.g. 200 (OK), 404 (NOT_FOUND)\n@param content the file to send\n@return the result", "predict": "Returns the status of the file.\n\n@param status the status of the file\n@param content the content of the file\n@return the result of the file"}
{"ID": 576, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private User findById(Long id) { if (id > 3) return null; User user = new User(); user.id = id; user.name = \"User \" + String.valueOf(id); return user; } \n### Response:", "ground_truth": "designed to be lightweight operation", "predict": "Finds a user by its id.\n\n@param id the id of the user to find\n@return the user with the given id or null if it is not found"}
{"ID": 577, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Lang preferred(Collection<Lang> candidates) { return new Lang( langs.preferred((scala.collection.immutable.Seq) Scala.asScala(candidates).toSeq())); } \n### Response:", "ground_truth": "Select a preferred language, given the list of candidates.\n\n<p>Will select the preferred language, based on what languages are available, or return the\ndefault language if none of the candidates are available.\n\n@param candidates The candidate languages\n@return The preferred language", "predict": "Returns a Lang that is preferred by the given collection of Langs."}
{"ID": 578, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Call unique() { return new play.api.mvc.Call(method(), this.uniquify(this.url()), fragment()); } \n### Response:", "ground_truth": "Append a unique identifier to the URL.\n\n@return a copy if this call with a unique identifier to this url", "predict": "Uniques the url.\n\n@return the unique url"}
{"ID": 579, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Call withFragment(String fragment) { return new play.api.mvc.Call(method(), url(), fragment); } \n### Response:", "ground_truth": "Returns a new Call with the given fragment.\n\n@param fragment the URL fragment\n@return a copy of this call that contains the fragment", "predict": "Add a fragment to the query string.\n\n@param fragment fragment to add\n@return Call instance to execute"}
{"ID": 580, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String absoluteURL(Http.Request request) { return absoluteURL(request.secure(), request.host()); } \n### Response:", "ground_truth": "Transform this call to an absolute URL.\n\n@param request used to identify the host and protocol that should base this absolute URL\n@return the absolute URL string", "predict": "Returns the absolute URL of the request.\n\n@param request the request\n@return the absolute URL"}
{"ID": 581, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String webSocketURL(Http.Request request) { return webSocketURL(request.secure(), request.host()); } \n### Response:", "ground_truth": "Transform this call to an WebSocket URL.\n\n@param request used as the base for forming the WS url\n@return the websocket url string", "predict": "Returns the socket URL for the given request.\n\n@param request the request\n@return the socket URL"}
{"ID": 582, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: AbstractFunction1<Connection, BoxedUnit> connectionFunction(final ConnectionRunnable block) { return new AbstractFunction1<Connection, BoxedUnit>() { public BoxedUnit apply(Connection connection) { try { block.run(connection); return BoxedUnit.UNIT; } catch (java.sql.SQLException e) { throw new RuntimeException(\"Connection runnable failed\", e); } } }; } \n### Response:", "ground_truth": "Create a Scala function wrapper for ConnectionRunnable.\n\n@param block a Java functional interface instance to wrap\n@return a scala function that wraps the given block", "predict": "Helper function to execute a connection runnable.\n\n@param block the connection runnable to execute\n@return the result of the connection runnable"}
{"ID": 583, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: <A> AbstractFunction1<Connection, A> connectionFunction(final ConnectionCallable<A> block) { return new AbstractFunction1<Connection, A>() { public A apply(Connection connection) { try { return block.call(connection); } catch (java.sql.SQLException e) { throw new RuntimeException(\"Connection callable failed\", e); } } }; } \n### Response:", "ground_truth": "Create a Scala function wrapper for ConnectionCallable.\n\n@param block a Java functional interface instance to wrap\n@param <A> the provided block's return type\n@return a scala function wrapping the given block", "predict": "Convenience function to call a connection callable.\n\n@param block the connection callable\n@return the result of the callable"}
{"ID": 584, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Server forRouter(Mode mode, int port, Function<BuiltInComponents, Router> block) { return new Builder().mode(mode).http(port).build(block); } \n### Response:", "ground_truth": "Create a server for the router returned by the given block.\n\n@param block The block which creates a router.\n@param mode The mode the server will run on.\n@param port The port the server will run on.\n@return The running server.", "predict": "Creates a router server.\n\n@param mode the mode of the server\n@param port the port to listen on\n@param block the block to use\n@return the router server"}
{"ID": 585, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static JsonNode toJson(final Object data) { try { return mapper().valueToTree(data); } catch (Exception e) { throw new RuntimeException(e); } } \n### Response:", "ground_truth": "Converts an object to JsonNode.\n\n@param data Value to convert in Json.\n@return the JSON node.", "predict": "Converts an object to a JsonNode.\n\n@param data the object to convert\n@return the JsonNode"}
{"ID": 586, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <A> A fromJson(JsonNode json, Class<A> clazz) { try { return mapper().treeToValue(json, clazz); } catch (Exception e) { throw new RuntimeException(e); } } \n### Response:", "ground_truth": "Converts a JsonNode to a Java value\n\n@param <A> the type of the return value.\n@param json Json value to convert.\n@param clazz Expected Java value type.\n@return the return value.", "predict": "Converts a JSON object to a Java object.\n\n@param json JSON object\n@param clazz Java class\n@return Java object"}
{"ID": 587, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static JsonNode parse(String src) { try { return mapper().readTree(src); } catch (Throwable t) { throw new RuntimeException(t); } } \n### Response:", "ground_truth": "Parses a String representing a json, and return it as a JsonNode.\n\n@param src the JSON string.\n@return the JSON node.", "predict": "Parses a JSON string into a JsonNode.\n\n@param src JSON string to parse\n@return parsed JsonNode"}
{"ID": 588, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static JsonNode parse(java.io.InputStream src) { try { return mapper().readTree(src); } catch (Throwable t) { throw new RuntimeException(t); } } \n### Response:", "ground_truth": "Parses a InputStream representing a json, and return it as a JsonNode.\n\n@param src the JSON input stream.\n@return the JSON node.", "predict": "Parses a JSON tree from an input stream.\n\n@param src the input stream\n@return the parsed JSON node"}
{"ID": 589, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String relative(String startPath, String targetPath) { // If the start and target path's are the same then link to the current directory if (startPath.equals(targetPath)) { return CURRENT_DIR; } String[] start = toSegments(canonical(startPath)); String[] target = toSegments(canonical(targetPath)); // If start path has no trailing separator (a \"file\" path), then drop file segment if (!startPath.endsWith(SEPARATOR)) start = Arrays.copyOfRange(start, 0, start.length - 1); // If target path has no trailing separator, then drop file segment, but keep a reference to add // it later String targetFile = \"\"; if (!targetPath.endsWith(SEPARATOR)) { targetFile = target[target.length - 1]; target = Arrays.copyOfRange(target, 0, target.length - 1); } // Work out how much of the filepath is shared by start and path. String[] common = commonPrefix(start, target); String[] parents = toParentDirs(start.length - common.length); int relativeStartIdx = common.length; String[] relativeDirs = Arrays.copyOfRange(target, relativeStartIdx, target.length); String[] relativePath = Arrays.copyOf(parents, parents.length + relativeDirs.length); System.arraycopy(relativeDirs, 0, relativePath, parents.length, relativeDirs.length); // If this is not a sibling reference append a trailing / to path String trailingSep = \"\"; if (relativePath.length > 0) trailingSep = SEPARATOR; return Arrays.stream(relativePath).collect(Collectors.joining(SEPARATOR)) + trailingSep + targetFile; } \n### Response:", "ground_truth": "Create a path to targetPath that's relative to the given startPath.", "predict": "Returns the relative path to the given target path."}
{"ID": 590, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String canonical(String url) { String[] urlPath = toSegments(url); Stack<String> canonical = new Stack<>(); for (String comp : urlPath) { if (comp.isEmpty() || comp.equals(CURRENT_DIR)) continue; if (!comp.equals(PARENT_DIR) || (!canonical.empty() && canonical.peek().equals(PARENT_DIR))) canonical.push(comp); else canonical.pop(); } String prefixSep = url.startsWith(SEPARATOR) ? SEPARATOR : \"\"; String trailingSep = url.endsWith(SEPARATOR) ? SEPARATOR : \"\"; return prefixSep + canonical.stream().collect(Collectors.joining(SEPARATOR)) + trailingSep; } \n### Response:", "ground_truth": "Create a canonical path that does not contain parent directories, current directories, or\nsuperfluous directory separators.", "predict": "Returns the canonical URL."}
{"ID": 591, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static List<Tuple<String, List<Object>>> displayableConstraint( Set<ConstraintDescriptor<?>> constraints) { return constraints .parallelStream() .filter(c -> c.getAnnotation().annotationType().isAnnotationPresent(Display.class)) .map(c -> displayableConstraint(c)) .collect(Collectors.toList()); } \n### Response:", "ground_truth": "Converts a set of constraints to human-readable values. Does not guarantee the order of the\nreturned constraints.\n\n<p>This method calls {@code displayableConstraint} under the hood.\n\n@param constraints the set of constraint descriptors.\n@return a list of pairs of tuples assembled from displayableConstraint.", "predict": "Returns a list of constraint annotations that are displayable.\n\n@param constraints the constraints to be filtered\n@return the list of displayable constraints"}
{"ID": 592, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Tuple<String, List<Object>> displayableConstraint( ConstraintDescriptor<?> constraint) { final Display displayAnnotation = constraint.getAnnotation().annotationType().getAnnotation(Display.class); return Tuple( displayAnnotation.name(), Collections.unmodifiableList( Stream.of(displayAnnotation.attributes()) .map(attr -> constraint.getAttributes().get(attr)) .collect(Collectors.toList()))); } \n### Response:", "ground_truth": "Converts a constraint to a human-readable value.\n\n@param constraint the constraint descriptor.\n@return A tuple containing the constraint's display name and the constraint attributes.", "predict": "Returns a tuple that represents a constraint that can be displayed.\n\n@param constraint the constraint\n@return the tuple"}
{"ID": 593, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public <A> CompletionStage<A> timeout( final CompletionStage<A> stage, final long amount, final TimeUnit unit) { requireNonNull(stage, \"Null stage\"); requireNonNull(unit, \"Null unit\"); FiniteDuration duration = FiniteDuration.apply(amount, unit); return toJava(delegate.timeout(duration, Scala.asScalaWithFuture(() -> stage))); } \n### Response:", "ground_truth": "Creates a CompletionStage that returns either the input stage, or a futures.\n\n<p>Note that timeout is not the same as cancellation. Even in case of futures, the given\ncompletion stage will still complete, even though that completed value is not returned.\n\n@param stage the input completion stage that may time out.\n@param amount The amount (expressed with the corresponding unit).\n@param unit The time Unit.\n@param <A> the completion's result type.\n@return either the completed future, or a completion stage that failed with futures.", "predict": "Timeout a stage.\n\n@param stage the stage to timeout\n@param amount the timeout amount\n@param unit the timeout unit\n@return the timeout result"}
{"ID": 594, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isAssignable( Class<?>[] classArray, Class<?>[] toClassArray, boolean autoboxing) { if (arrayGetLength(classArray) != arrayGetLength(toClassArray)) { return false; } if (classArray == null) { classArray = EMPTY_CLASS_ARRAY; } if (toClassArray == null) { toClassArray = EMPTY_CLASS_ARRAY; } for (int i = 0; i < classArray.length; i++) { if (isAssignable(classArray[i], toClassArray[i], autoboxing) == false) { return false; } } return true; } \n### Response:", "ground_truth": "Checks if an array of Classes can be assigned to another array of Classes.\n\n<p>This method calls {@link #isAssignable(Class, Class) isAssignable} for each Class pair in\nthe input arrays. It can be used to check if a set of arguments (the first parameter) are\nsuitably compatible with a set of method parameter types (the second parameter).\n\n<p>Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method, this method takes into\naccount widenings of primitive classes and {@code null}s.\n\n<p>Primitive widenings allow an int to be assigned to a {@code long}, {@code float} or {@code\ndouble}. This method returns the correct result for these cases.\n\n<p>{@code Null} may be assigned to any reference type. This method will return {@code true} if\n{@code null} is passed in and the toClass is non-primitive.\n\n<p>Specifically, this method tests whether the type represented by the specified {@code Class}\nparameter can be converted to the type represented by this {@code Class} object via an identity\nconversion widening primitive or widening reference conversion. See <em><a\nhref=\"http://java.sun.com/docs/books/jls/\">The Java Language Specification</a></em>, sections\n5.1.1, 5.1.2 and 5.1.4 for details.\n\n@param classArray the array of Classes to check, may be {@code null}\n@param toClassArray the array of Classes to try to assign into, may be {@code null}\n@param autoboxing whether to use implicit autoboxing/unboxing between primitives and wrappers\n@return {@code true} if assignment possible", "predict": "Returns true if the given class arrays are assignable to the given class arrays.\n\n@param classArray\n@param toClassArray\n@param autoboxing\n@return"}
{"ID": 595, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Date parseCRONExpression(String cron) { try { return new CronExpression(cron).getNextValidTimeAfter(new Date()); } catch (Exception e) { throw new IllegalArgumentException(\"Invalid CRON pattern : \" + cron, e); } } \n### Response:", "ground_truth": "Parses a CRON expression.\n\n@param cron the CRON String\n@return the next <code>Date</code> that satisfies the expression", "predict": "Parses a cron expression.\n\n@param cron cron expression\n@return parsed cron expression"}
{"ID": 596, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long cronInterval(String cron, Date date) { try { return new CronExpression(cron).getNextInterval(date); } catch (Exception e) { throw new IllegalArgumentException(\"Invalid CRON pattern : \" + cron, e); } } \n### Response:", "ground_truth": "Compute the number of milliseconds between the next valid date and the one after.\n\n@param cron the CRON String\n@param date the date to start search\n@return the number of milliseconds between the next valid date and the one after, with an\ninvalid interval between", "predict": "Returns the cron interval for the given cron expression.\n\n@param cron\n@param date\n@return"}
{"ID": 597, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static AhcWSClient create( AhcWSClientConfig config, AhcHttpCache cache, Materializer materializer) { final StandaloneAhcWSClient client = StandaloneAhcWSClient.create(config, cache, materializer); return new AhcWSClient(client, materializer); } \n### Response:", "ground_truth": "Creates WS client manually from configuration, internally creating a new instance of\nAsyncHttpClient and managing its own thread pool.\n\n<p>This client is not managed as part of Play's lifecycle, and <b>must</b> be closed by calling\nws.close(), otherwise you will run into memory leaks.\n\n@param config a config object, usually from AhcWSClientConfigFactory\n@param cache if not null, provides HTTP caching.\n@param materializer an Akka materializer\n@return a new instance of AhcWSClient.", "predict": "Creates a new instance of the AhcWSClient.\n\n@param config the configuration for the client\n@param cache the cache to use for caching requests\n@param materializer the materializer to use for caching responses\n@return the client"}
{"ID": 598, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public GuiceApplicationBuilder builder(ApplicationLoader.Context context) { return initialBuilder .in(context.environment()) .loadConfig(context.initialConfig()) .overrides(overrides(context)); } \n### Response:", "ground_truth": "Construct a builder to use for loading the given context.\n\n@param context the context the returned builder will load\n@return the builder", "predict": "Builds a new builder based on the given context."}
{"ID": 599, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Result TODO(Request request) { return status(NOT_IMPLEMENTED, views.html.defaultpages.todo.render(request.asScala())); } \n### Response:", "ground_truth": "Generates a 501 NOT_IMPLEMENTED simple result.", "predict": "Returns a status code indicating that the TODO request is not implemented.\n\n@param request the request being processed\n@return a response indicating that the TODO request is not implemented"}
{"ID": 600, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Deprecated public static void session(String key, String value) { session().put(key, value); } \n### Response:", "ground_truth": "Puts a new value into the current session.\n\n@param key the key to set into the session\n@param value the value to set for <code>key</code>\n@deprecated Deprecated as of 2.7.0. Use {@link Result} instead.", "predict": "Sets a value to the session.\n\n@param key the key\n@param value the value"}
{"ID": 601, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Deprecated public static void flash(String key, String value) { flash().put(key, value); } \n### Response:", "ground_truth": "Puts a new value into the flash scope.\n\n@param key the key to put into the flash scope\n@param value the value corresponding to <code>key</code>\n@deprecated Deprecated as of 2.7.0. Use {@link Result} instead.", "predict": "Flash a value to the cache.\n\n@deprecated Use {@link #setFlash(String, String)} instead."}
{"ID": 602, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <A extends Annotation> BindingKey<T> qualifiedWith(final A instance) { return underlying.qualifiedWith(instance).asJava(); } \n### Response:", "ground_truth": "Qualify this binding key with the given instance of an annotation.\n\n<p>This can be used to specify bindings with annotations that have particular values.", "predict": "Returns the binding key qualified with the given instance.\n\n@param instance the instance\n@return the binding key qualified with the given instance"}
{"ID": 603, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <A extends Annotation> BindingKey<T> qualifiedWith(final Class<A> annotation) { return underlying.qualifiedWith(annotation).asJava(); } \n### Response:", "ground_truth": "Qualify this binding key with the given annotation.\n\n<p>For example, you may have both a cached implementation, and a direct implementation of a\nservice. To differentiate between them, you may define a Cached annotation:\n\n<pre>{@code\nbindClass(Foo.class).qualifiedWith(Cached.class).to(FooCached.class),\nbindClass(Foo.class).to(FooImpl.class)\n\n...\n\nclass MyController {\n{@literal @}Inject\nMyController({@literal @}Cached Foo foo) {\n...\n}\n...\n}\n}</pre>\n\nIn the above example, the controller will get the cached {@code Foo} service.", "predict": "Returns the binding key qualified with the given annotation.\n\n@param annotation the annotation\n@return the binding key qualified with the given annotation"}
{"ID": 604, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Binding<T> to(final Class<? extends T> implementation) { return underlying.to(implementation).asJava(); } \n### Response:", "ground_truth": "Bind this binding key to the given implementation class.\n\n<p>This class will be instantiated and injected by the injection framework.", "predict": "Converts the underlying binding to the specified implementation.\n\n@param implementation the implementation to convert\n@return the converted binding"}
{"ID": 605, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Binding<T> to(final Provider<? extends T> provider) { return underlying.to(provider).asJava(); } \n### Response:", "ground_truth": "Bind this binding key to the given provider instance.\n\n<p>This provider instance will be invoked to obtain the implementation for the key.", "predict": "Converts the underlying binding to a provider binding.\n\n@param provider the provider to convert\n@return the converted binding"}
{"ID": 606, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <A extends T> Binding<T> to(final Supplier<A> instance) { return underlying.to(new FromJavaSupplier<>(instance)).asJava(); } \n### Response:", "ground_truth": "Bind this binding key to the given instance.", "predict": "Binds a supplier to the target type.\n\n@param instance the supplier\n@return the binding"}
{"ID": 607, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Binding<T> to(final BindingKey<? extends T> key) { return underlying.to(key.asScala()).asJava(); } \n### Response:", "ground_truth": "Bind this binding key to another binding key.", "predict": "Converts the given key to the underlying binding.\n\n@param key the key to convert\n@return the underlying binding"}
{"ID": 608, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <P extends Provider<? extends T>> Binding<T> toProvider(final Class<P> provider) { return underlying.toProvider(provider).asJava(); } \n### Response:", "ground_truth": "Bind this binding key to the given provider class.\n\n<p>The dependency injection framework will instantiate and inject this provider, and then\ninvoke its `get` method whenever an instance of the class is needed.", "predict": "Converts the binding to a provider.\n\n@param provider the provider class\n@return the binding"}
{"ID": 609, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static List<Lang> availables(Application app) { play.api.i18n.Langs langs = app.injector().instanceOf(play.api.i18n.Langs.class); List<play.api.i18n.Lang> availableLangs = Scala.asJava(langs.availables()); return availableLangs.stream().map(Lang::new).collect(toList()); } \n### Response:", "ground_truth": "Retrieve Lang availables from the application configuration.\n\n@param app the current application.\n@return the list of available Lang.", "predict": "Returns the available languages for the given application.\n\n@param app the application\n@return the available languages"}
{"ID": 610, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Lang preferred(Application app, List<Lang> availableLangs) { play.api.i18n.Langs langs = app.injector().instanceOf(play.api.i18n.Langs.class); Stream<Lang> stream = availableLangs.stream(); List<play.api.i18n.Lang> langSeq = stream.map(l -> new play.api.i18n.Lang(l.toLocale())).collect(toList()); return new Lang(langs.preferred(Scala.toSeq(langSeq))); } \n### Response:", "ground_truth": "Guess the preferred lang in the langs set passed as argument. The first Lang that matches an\navailable Lang wins, otherwise returns the first Lang available in this application.\n\n@param app the currept application\n@param availableLangs the set of langs from which to guess the preferred\n@return the preferred lang.", "predict": "Returns the preferred language for the given application."}
{"ID": 611, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static play.api.db.evolutions.EvolutionsReader fromMap( Map<String, List<Evolution>> evolutions) { return new SimpleEvolutionsReader(evolutions); } \n### Response:", "ground_truth": "Create an evolutions reader based on a simple map of database names to evolutions.\n\n@param evolutions The map of database names to evolutions.\n@return the evolutions reader.", "predict": "Create a reader that reads evolutions from a map.\n\n@param evolutions the evolutions\n@return the reader"}
{"ID": 612, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static play.api.db.evolutions.EvolutionsReader forDefault(Evolution... evolutions) { Map<String, List<Evolution>> map = new HashMap<String, List<Evolution>>(); map.put(\"default\", Arrays.asList(evolutions)); return fromMap(map); } \n### Response:", "ground_truth": "Create an evolutions reader for the default database from a list of evolutions.\n\n@param evolutions The list of evolutions.\n@return the evolutions reader.", "predict": "Returns a reader for the default evolutions.\n\n@param evolutions the evolutions\n@return the evolutions reader"}
{"ID": 613, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void cleanupEvolutions(Database database, boolean autocommit, String schema) { DatabaseEvolutions evolutions = new DatabaseEvolutions(database.asScala(), schema); evolutions.evolve(evolutions.resetScripts(), autocommit); } \n### Response:", "ground_truth": "Cleanup evolutions for the given database.\n\n<p>This will run the down scripts for all the applied evolutions.\n\n@param database The database to apply the evolutions to.\n@param autocommit Whether autocommit should be used.\n@param schema The schema where all the play evolution tables are saved in", "predict": "Evolves the database schema.\n\n@param database the database to evolve\n@param autocommit the autocommit mode\n@param schema the schema to evolve"}
{"ID": 614, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public GuiceApplicationBuilder withConfigLoader(Function<Environment, Config> load) { return newBuilder( delegate.loadConfig( func( (play.api.Environment env) -> new play.api.Configuration(load.apply(new Environment(env)))))); } \n### Response:", "ground_truth": "Set the initial configuration loader. Overrides the default or any previously configured\nvalues.\n\n@param load the configuration loader\n@return the configured application builder", "predict": "Overrides the configuration loading function to load the configuration from the environment."}
{"ID": 615, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public GuiceApplicationBuilder withModuleLoader( BiFunction<Environment, Config, List<GuiceableModule>> loader) { return newBuilder( delegate.load( func( (play.api.Environment env, play.api.Configuration conf) -> Scala.toSeq(loader.apply(new Environment(env), conf.underlying()))))); } \n### Response:", "ground_truth": "Set the module loader. Overrides the default or any previously configured values.\n\n@param loader the configuration\n@return the configured application builder", "predict": "Loader function to load modules."}
{"ID": 616, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public GuiceApplicationBuilder load(GuiceableModule... modules) { return newBuilder(delegate.load(Scala.varargs(modules))); } \n### Response:", "ground_truth": "Override the module loader with the given guiceable modules.\n\n@param modules the set of overriding modules\n@return an application builder that incorporates the overrides", "predict": "Loads the given modules."}
{"ID": 617, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public GuiceApplicationBuilder load(com.google.inject.Module... modules) { return load(Guiceable.modules(modules)); } \n### Response:", "ground_truth": "Override the module loader with the given Guice modules.\n\n@param modules the set of overriding modules\n@return an application builder that incorporates the overrides", "predict": "Loads the given modules."}
{"ID": 618, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public GuiceApplicationBuilder load(play.api.inject.Module... modules) { return load(Guiceable.modules(modules)); } \n### Response:", "ground_truth": "Override the module loader with the given Play modules.\n\n@param modules the set of overriding modules\n@return an application builder that incorporates the overrides", "predict": "Loads the given modules."}
{"ID": 619, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public GuiceApplicationBuilder load(play.api.inject.Binding<?>... bindings) { return load(Guiceable.bindings(bindings)); } \n### Response:", "ground_truth": "Override the module loader with the given Play bindings.\n\n@param bindings the set of binding override\n@return an application builder that incorporates the overrides", "predict": "Load bindings from the given bindings."}
{"ID": 620, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected GuiceApplicationBuilder newBuilder( play.api.inject.guice.GuiceApplicationBuilder builder) { return new GuiceApplicationBuilder(builder); } \n### Response:", "ground_truth": "Implementation of Self creation for GuiceBuilder.\n\n@return the application builder", "predict": "Returns a builder for creating a new Guice application."}
{"ID": 621, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String encode(Cookie cookie) { if (cookie == null) { throw new NullPointerException(\"cookie\"); } StringBuilder buf = new StringBuilder(); encode(buf, cookie); return stripTrailingSeparator(buf); } \n### Response:", "ground_truth": "Encodes the specified cookie into a Cookie header value.\n\n@param cookie specified the cookie\n@return a Rfc6265 style Cookie header value", "predict": "Encodes the given cookie into a string.\n\n@param cookie the cookie to encode\n@return the encoded cookie\n@throws NullPointerException if the given cookie is null"}
{"ID": 622, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public EntityManager em() { Deque<EntityManager> ems = this.emStack(true); if (ems.isEmpty()) { Http.Context.safeCurrent() .map( ctx -> { throw new RuntimeException( \"No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional\"); }) .orElseGet( () -> { throw new RuntimeException( \"No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread.\"); }); } return ems.peekFirst(); } \n### Response:", "ground_truth": "Get the default EntityManager for this thread.\n\n@throws RuntimeException if no EntityManager is bound to the current Http.Context or the\ncurrent Thread.\n@return the EntityManager", "predict": "Returns the EntityManager associated with this JpaRepository.\n\n@return the EntityManager associated with this JpaRepository."}
{"ID": 623, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public Deque<EntityManager> emStack(boolean threadLocalFallback) { return Http.Context.safeCurrent() .map( context -> { Object emsObject = context.args.get(CURRENT_ENTITY_MANAGER); if (emsObject != null) { return (Deque<EntityManager>) emsObject; } else { Deque<EntityManager> ems = new ArrayDeque<>(); context.args.put(CURRENT_ENTITY_MANAGER, ems); return ems; } }) .orElseGet( () -> { // Not a web request if (threadLocalFallback) { return this.get(); } else { throw new RuntimeException( \"No Http.Context is present. If you want to invoke this method outside of a HTTP request, you need to wrap the call with JPA.withTransaction instead.\"); } }); } \n### Response:", "ground_truth": "Get the EntityManager stack.\n\n@param threadLocalFallback if true, fall back to a ThreadLocal queue of entity managers if no\nHTTP.Context object is found.\n@return the queue of entity managers.", "predict": "Returns a deque of EntityManagers that can be used to manage the entity manager.\n\n@param threadLocalFallback If true, the EntityManagers will be returned in a thread-local\narray. If false, the EntityManagers will be returned in a thread-local array.\n@return A deque of EntityManagers that can be used to manage the entity manager."}
{"ID": 624, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: void pushOrPopEm(EntityManager em, boolean threadLocalFallback) { Deque<EntityManager> ems = this.emStack(threadLocalFallback); if (em != null) { ems.push(em); } else { if (ems.isEmpty()) { throw new IllegalStateException(\"Tried to remove the EntityManager, but none was set.\"); } ems.pop(); } } \n### Response:", "ground_truth": "Pushes or pops the EntityManager stack depending on the value of the em argument. If em is\nnull, then the current EntityManager is popped. If em is non-null, then em is pushed onto the\nstack and becomes the current EntityManager.\n\n@param em the entity manager to push, if null then will pop one off the stack.\n@param threadLocalFallback if true, fall back to a ThreadLocal queue of entity managers if no\nHTTP.Context object is found.", "predict": "Push or pop the EntityManager.\n\n@param em the EntityManager to push or pop\n@param threadLocalFallback if true, the EntityManager will be added to the thread local stack, otherwise, it will be removed"}
{"ID": 625, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <In, FlowIn, Out> Flow<In, Out, ?> bypassWith( Function<In, F.Either<FlowIn, Out>> splitter, Flow<FlowIn, Out, ?> flow) { return bypassWith( Flow.<In>create().map(splitter::apply), play.api.libs.streams.AkkaStreams.onlyFirstCanFinishMerge(2), flow); } \n### Response:", "ground_truth": "Bypass the given flow using the given splitter function.\n\n<p>If the splitter function returns Left, they will go through the flow. If it returns Right,\nthey will bypass the flow.\n\n<p>Uses onlyFirstCanFinishMerge(2) by default.\n\n@param <In> the In type parameter for Flow\n@param <FlowIn> the FlowIn type parameter for the left branch in Either.\n@param <Out> the Out type parameter for Flow\n@param flow the original flow\n@param splitter the splitter function to use\n@return the flow with a bypass.", "predict": "Merges the given flow with the given splitter.\n\n@param <In> the input type\n@param <FlowIn> the input flow\n@param <Out> the output flow\n@param splitter the splitter\n@param flow the flow\n@return the flow"}
{"ID": 626, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <In, FlowIn, Out> Flow<In, Out, ?> bypassWith( Flow<In, F.Either<FlowIn, Out>, ?> splitter, Graph<UniformFanInShape<Out, Out>, ?> mergeStrategy, Flow<FlowIn, Out, ?> flow) { return splitter.via( Flow.fromGraph( GraphDSL.<FlowShape<F.Either<FlowIn, Out>, Out>>create( builder -> { // Eager cancel must be true so that if the flow cancels, that will be propagated // upstream. // However, that means the bypasser must block cancel, since when this flow // finishes, the merge // will result in a cancel flowing up through the bypasser, which could lead to // dropped messages. // Using scaladsl here because of https://github.com/akka/akka/issues/18384 UniformFanOutShape<F.Either<FlowIn, Out>, F.Either<FlowIn, Out>> broadcast = builder.add(Broadcast.create(2, true)); UniformFanInShape<Out, Out> merge = builder.add(mergeStrategy); Flow<F.Either<FlowIn, Out>, FlowIn, ?> collectIn = Flow.<F.Either<FlowIn, Out>>create() .collect( Scala.partialFunction( x -> { if (x.left.isPresent()) { return x.left.get(); } else { throw Scala.noMatch(); } })); Flow<F.Either<FlowIn, Out>, Out, ?> collectOut = Flow.<F.Either<FlowIn, Out>>create() .collect( Scala.partialFunction( x -> { if (x.right.isPresent()) { return x.right.get(); } else { throw Scala.noMatch(); } })); Flow<F.Either<FlowIn, Out>, F.Either<FlowIn, Out>, ?> blockCancel = play.api.libs.streams.AkkaStreams .<F.Either<FlowIn, Out>>ignoreAfterCancellation() .asJava(); // Normal flow builder .from(broadcast.out(0)) .via(builder.add(collectIn)) .via(builder.add(flow)) .toInlet(merge.in(0)); // Bypass flow, need to ignore downstream finish builder .from(broadcast.out(1)) .via(builder.add(blockCancel)) .via(builder.add(collectOut)) .toInlet(merge.in(1)); return new FlowShape<>(broadcast.in(), merge.out()); }))); } \n### Response:", "ground_truth": "Using the given splitter flow, allow messages to bypass a flow.\n\n<p>If the splitter flow produces Left, they will be fed into the flow. If it produces Right,\nthey will bypass the flow.\n\n@param <In> the In type parameter for Flow\n@param <FlowIn> the FlowIn type parameter for the left branch in Either.\n@param <Out> the Out type parameter for Flow.\n@param flow the original flow.\n@param splitter the splitter function.\n@param mergeStrategy the merge strategy (onlyFirstCanFinishMerge, ignoreAfterFinish,\nignoreAfterCancellation)\n@return the flow with a bypass.", "predict": "Merges the flow with the flow that is passed in the splitter.\n\n@param splitter\n@param mergeStrategy\n@param flow\n@return"}
{"ID": 627, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <In, Out> Flow<In, Out, ?> actorRef( Function<ActorRef, Props> props, int bufferSize, OverflowStrategy overflowStrategy, ActorRefFactory factory, Materializer mat) { return play.api.libs.streams.ActorFlow.<In, Out>actorRef( new AbstractFunction1<ActorRef, Props>() { @Override public Props apply(ActorRef v1) { return props.apply(v1); } }, bufferSize, overflowStrategy, factory, mat) .asJava(); } \n### Response:", "ground_truth": "Create a flow that is handled by an actor.\n\n<p>Messages can be sent downstream by sending them to the actor passed into the props function.\nThis actor meets the contract of the actor returned by {@link\nakka.stream.javadsl.Source#actorRef}.\n\n<p>The props function should return the props for an actor to handle the flow. This actor will\nbe created using the passed in {@link akka.actor.ActorRefFactory}. Each message received will\nbe sent to the actor - there is no back pressure, if the actor is unable to process the\nmessages, they will queue up in the actors mailbox. The upstream can be cancelled by the actor\nterminating itself.\n\n@param <In> the In type parameter for a Flow\n@param <Out> the Out type parameter for a Flow\n@param props A function that creates the props for actor to handle the flow.\n@param bufferSize The maximum number of elements to buffer.\n@param overflowStrategy The strategy for how to handle a buffer overflow.\n@param factory The Actor Factory used to create the actor to handle the flow - for example, an\nActorSystem.\n@param mat The materializer to materialize the flow.\n@return the flow itself.", "predict": "actor flow for actor reference\n\n@param props actor flow props\n@param bufferSize buffer size\n@param overflowStrategy overflow strategy\n@param factory actor flow factory\n@param mat materializer\n@return flow"}
{"ID": 628, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private List<Object> convertErrorArguments(Object[] arguments) { if (arguments == null) { return Collections.emptyList(); } List<Object> converted = Arrays.stream(arguments) .filter( arg -> !(arg instanceof org.springframework.context.support.DefaultMessageSourceResolvable)) .collect(Collectors.toList()); return Collections.unmodifiableList(converted); } \n### Response:", "ground_truth": "Convert the error arguments.\n\n@param arguments The arguments to convert.\n@return The converted arguments.", "predict": "Helper method to convert the given arguments to a list of error arguments.\n\n@param arguments the arguments\n@return the list of arguments"}
{"ID": 629, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Form<T> fill(T value) { if (value == null) { throw new RuntimeException(\"Cannot fill a form with a null value\"); } return new Form<>( rootName, backedType, new HashMap<>(), new HashMap<>(), new ArrayList<>(), Optional.ofNullable(value), groups, messagesApi, formatters, validatorFactory, config, lang, directFieldAccess); } \n### Response:", "ground_truth": "Populates this form with an existing value, used for edit forms.\n\n@param value existing value of type <code>T</code> used to fill this form\n@return a copy of this form filled with the new data", "predict": "Fills the form with the given value.\n\n@param value the value to fill the form with\n@return the form with the given value filled"}
{"ID": 630, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<ValidationError> globalErrors() { return Collections.unmodifiableList( errors.stream().filter(error -> error.key().isEmpty()).collect(Collectors.toList())); } \n### Response:", "ground_truth": "Retrieve all global errors - errors without a key.\n\n@return All global errors.", "predict": "Returns a list of all errors that have been generated by the application.\n\n@return A list of all errors that have been generated by the application."}
{"ID": 631, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public JsonNode errorsAsJson(Lang lang) { Map<String, List<String>> allMessages = new HashMap<>(); errors.forEach( error -> { if (error != null) { final List<String> messages = new ArrayList<>(); if (messagesApi != null && lang != null) { final List<String> reversedMessages = new ArrayList<>(error.messages()); Collections.reverse(reversedMessages); messages.add( messagesApi.get( lang, reversedMessages, translateMsgArg(error.arguments(), messagesApi, lang))); } else { messages.add(error.message()); } allMessages.put(error.key(), messages); } }); return play.libs.Json.toJson(allMessages); } \n### Response:", "ground_truth": "Returns the form errors serialized as Json using the given Lang.\n\n@param lang the language to use.\n@return the JSON node containing the errors.", "predict": "Converts all errors to a JSON object.\n\n@param lang the language\n@return the JSON object"}
{"ID": 632, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Optional<Object> value(String key) { return super.value().map(v -> v.getData().get(asNormalKey(key))); } \n### Response:", "ground_truth": "Gets the concrete value\n\n@param key the string key.\n@return the value", "predict": "Get the value of a given key.\n\n@param key the key\n@return the value"}
{"ID": 633, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public DynamicForm fill(Map<String, Object> value) { Form<Dynamic> form = super.fill(new Dynamic(value)); return new DynamicForm( form.rawData(), form.files(), form.errors(), form.value(), messagesApi, formatters, validatorFactory, config, lang().orElse(null)); } \n### Response:", "ground_truth": "Fills the form with existing data.\n\n@param value the map of values to fill in the form.\n@return the modified form.", "predict": "Fills the form with the given values.\n\n@param value the values to fill the form with\n@return the form with the given values"}
{"ID": 634, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> T parse(String text, Class<T> clazz) { return conversion.convert(text, clazz); } \n### Response:", "ground_truth": "Parses this string as instance of the given class.\n\n@param text the text to parse\n@param clazz class representing the required type\n@param <T> the type to parse out of the text\n@return the parsed value", "predict": "Parses a string into a class.\n\n@param text the string to parse\n@param clazz the class to parse into\n@return the parsed class"}
{"ID": 635, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public <T> T parse(Field field, String text) { return (T) conversion.convert(text, new TypeDescriptor(field)); } \n### Response:", "ground_truth": "Parses this string as instance of a specific field\n\n@param field the related field (custom formatters are extracted from this field annotation)\n@param text the text to parse\n@param <T> the type to parse out of the text\n@return the parsed value", "predict": "Parses a string into a field value.\n\n@param field the field to parse\n@param text the text to parse\n@return the parsed value"}
{"ID": 636, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> String print(T t) { if (t == null) { return \"\"; } if (conversion.canConvert(t.getClass(), String.class)) { return conversion.convert(t, String.class); } else { return t.toString(); } } \n### Response:", "ground_truth": "Computes the display string for any value.\n\n@param t the value to print\n@param <T> the type to print\n@return the formatted string", "predict": "Prints the given object as a String.\n\n@param t the object to print\n@return the string representation of the object"}
{"ID": 637, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> String print(Field field, T t) { return print(new TypeDescriptor(field), t); } \n### Response:", "ground_truth": "Computes the display string for any value, for a specific field.\n\n@param field the related field - custom formatters are extracted from this field annotation\n@param t the value to print\n@param <T> the type to print\n@return the formatted string", "predict": "Prints the given field and its value."}
{"ID": 638, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> String print(TypeDescriptor desc, T t) { if (t == null) { return \"\"; } if (desc != null && conversion.canConvert(desc, TypeDescriptor.valueOf(String.class))) { return (String) conversion.convert(t, desc, TypeDescriptor.valueOf(String.class)); } else if (conversion.canConvert(t.getClass(), String.class)) { return conversion.convert(t, String.class); } else { return t.toString(); } } \n### Response:", "ground_truth": "Computes the display string for any value, for a specific type.\n\n@param desc the field descriptor - custom formatters are extracted from this descriptor.\n@param t the value to print\n@param <T> the type to print\n@return the formatted string", "predict": "Print a type to a string.\n\n@param desc the type descriptor\n@param t the type\n@return the string"}
{"ID": 639, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Formatters registerOptional() { conversion.addConverter( new GenericConverter() { public Object convert( Object source, TypeDescriptor sourceType, TypeDescriptor targetType) { if (sourceType.getObjectType().equals(String.class)) { // From String to Optional Object element = conversion.convert(source, sourceType, targetType.elementTypeDescriptor(source)); return Optional.ofNullable(element); } else if (targetType.getObjectType().equals(String.class)) { // From Optional to String if (source == null) return \"\"; Optional<?> opt = (Optional) source; return opt.map( o -> conversion.convert( source, sourceType.getElementTypeDescriptor(), targetType)) .orElse(\"\"); } return null; } public Set<GenericConverter.ConvertiblePair> getConvertibleTypes() { Set<ConvertiblePair> result = new HashSet<>(); result.add(new ConvertiblePair(Optional.class, String.class)); result.add(new ConvertiblePair(String.class, Optional.class)); return result; } }); return this; } \n### Response:", "ground_truth": "Converter for String -> Optional and Optional -> String", "predict": "Registers the conversion for converting an Optional to a String."}
{"ID": 640, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> Formatters register(final Class<T> clazz, final SimpleFormatter<T> formatter) { conversion.addFormatterForFieldType( clazz, new org.springframework.format.Formatter<T>() { public T parse(String text, Locale locale) throws java.text.ParseException { return formatter.parse(text, locale); } public String print(T t, Locale locale) { return formatter.print(t, locale); } public String toString() { return formatter.toString(); } }); return this; } \n### Response:", "ground_truth": "Registers a simple formatter.\n\n@param clazz class handled by this formatter\n@param <T> the type that this formatter will parse and print\n@param formatter the formatter to register\n@return the modified Formatters object.", "predict": "Register a formatter for a given type.\n\n@param clazz the type to register\n@param formatter the formatter to register\n@return the formatters"}
{"ID": 641, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public <A extends Annotation, T> Formatters register( final Class<T> clazz, final AnnotationFormatter<A, T> formatter) { final Class<? extends Annotation> annotationType = (Class<? extends Annotation>) GenericTypeResolver.resolveTypeArguments( formatter.getClass(), AnnotationFormatter.class)[0]; conversion.addConverter( new ConditionalGenericConverter() { public Set<GenericConverter.ConvertiblePair> getConvertibleTypes() { Set<GenericConverter.ConvertiblePair> types = new HashSet<>(); types.add(new GenericConverter.ConvertiblePair(clazz, String.class)); return types; } public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) { return (sourceType.getAnnotation(annotationType) != null); } public Object convert( Object source, TypeDescriptor sourceType, TypeDescriptor targetType) { final A a = (A) sourceType.getAnnotation(annotationType); Locale locale = LocaleContextHolder.getLocale(); try { return formatter.print(a, (T) source, locale); } catch (Exception ex) { throw new ConversionFailedException(sourceType, targetType, source, ex); } } public String toString() { return \"@\" + annotationType.getName() + \" \" + clazz.getName() + \" -> \" + String.class.getName() + \": \" + formatter; } }); conversion.addConverter( new ConditionalGenericConverter() { public Set<GenericConverter.ConvertiblePair> getConvertibleTypes() { Set<GenericConverter.ConvertiblePair> types = new HashSet<>(); types.add(new GenericConverter.ConvertiblePair(String.class, clazz)); return types; } public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) { return (targetType.getAnnotation(annotationType) != null); } public Object convert( Object source, TypeDescriptor sourceType, TypeDescriptor targetType) { final A a = (A) targetType.getAnnotation(annotationType); Locale locale = LocaleContextHolder.getLocale(); try { return formatter.parse(a, (String) source, locale); } catch (Exception ex) { throw new ConversionFailedException(sourceType, targetType, source, ex); } } public String toString() { return String.class.getName() + \" -> @\" + annotationType.getName() + \" \" + clazz.getName() + \": \" + formatter; } }); return this; } \n### Response:", "ground_truth": "Registers an annotation-based formatter.\n\n@param clazz class handled by this formatter\n@param formatter the formatter to register\n@param <A> the annotation type\n@param <T> the type that will be parsed or printed\n@return the modified Formatters object.", "predict": "Registers a formatter for a given annotation type.\n\n@param clazz the annotation type\n@param formatter the formatter\n@return the instance of the formatter"}
{"ID": 642, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String encode(Cookie cookie) { if (cookie == null) { throw new NullPointerException(\"cookie\"); } final String name = cookie.name(); final String value = cookie.value() != null ? cookie.value() : \"\"; validateCookie(name, value); StringBuilder buf = new StringBuilder(); if (cookie.wrap()) { addQuoted(buf, name, value); } else { add(buf, name, value); } if (cookie.maxAge() != Integer.MIN_VALUE) { add(buf, CookieHeaderNames.MAX_AGE, cookie.maxAge()); Date expires = cookie.maxAge() <= 0 ? new Date(0) // Set expires to the Unix epoch : new Date(cookie.maxAge() * 1000L + System.currentTimeMillis()); add(buf, CookieHeaderNames.EXPIRES, HttpHeaderDateFormat.get().format(expires)); } if (cookie.sameSite() != null) { add(buf, CookieHeaderNames.SAMESITE, cookie.sameSite()); } if (cookie.path() != null) { add(buf, CookieHeaderNames.PATH, cookie.path()); } if (cookie.domain() != null) { add(buf, CookieHeaderNames.DOMAIN, cookie.domain()); } if (cookie.isSecure()) { add(buf, CookieHeaderNames.SECURE); } if (cookie.isHttpOnly()) { add(buf, CookieHeaderNames.HTTPONLY); } return stripTrailingSeparator(buf); } \n### Response:", "ground_truth": "Encodes the specified cookie into a Set-Cookie header value.\n\n@param cookie the cookie\n@return a single Set-Cookie header value", "predict": "Encodes a cookie into a string.\n\n@param cookie the cookie to encode\n@return the encoded cookie"}
{"ID": 643, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static NodeList selectNodes(String path, Object node) { return selectNodes(path, node, null); } \n### Response:", "ground_truth": "Select all nodes that are selected by this XPath expression. If multiple nodes match, multiple\nnodes will be returned. Nodes will be returned in document-order,\n\n@param path the xpath expression\n@param node the starting node\n@return result of evaluating the xpath expression against node", "predict": "Returns a list of nodes that match the given path.\n\n@param path the path\n@param node the node\n@return the list of nodes"}
{"ID": 644, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> scala.collection.immutable.Seq<T> toSeq(java.util.List<T> list) { return scala.collection.JavaConverters.asScalaBufferConverter(list).asScala().toList(); } \n### Response:", "ground_truth": "Converts a Java List to Scala Seq.\n\n@param list    the java list.\n@return the converted Seq.\n@param <T> the element type.", "predict": "Converts a java.util.List to a scala.collection.immutable.Seq.\n\n@param list the java.util.List to convert\n@return the scala.collection.immutable.Seq"}
{"ID": 645, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> scala.collection.immutable.Seq<T> toSeq(T[] array) { return toSeq(java.util.Arrays.asList(array)); } \n### Response:", "ground_truth": "Converts a Java Array to Scala Seq.\n\n@param array    the java array.\n@return the converted Seq.\n@param <T> the element type.", "predict": "Converts an array to a Scala immutable sequence.\n\n@param array the array to convert\n@return the array as a sequence"}
{"ID": 646, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SafeVarargs public static <T> scala.collection.immutable.Seq<T> varargs(T... array) { return toSeq(array); } \n### Response:", "ground_truth": "Converts a Java varargs to Scala varargs.\n\n@param array    the java array.\n@return the Scala varargs\n@param <T> the element type.", "predict": "Returns a varargs sequence of the given array."}
{"ID": 647, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <In, Out> MappedWebSocketAcceptor<In, Out> json(Class<In> in) { return new MappedWebSocketAcceptor<>( Scala.partialFunction( message -> { try { if (message instanceof Message.Binary) { return F.Either.Left( play.libs.Json.mapper() .readValue( ((Message.Binary) message).data().iterator().asInputStream(), in)); } else if (message instanceof Message.Text) { return F.Either.Left( play.libs.Json.mapper().readValue(((Message.Text) message).data(), in)); } } catch (Exception e) { return F.Either.Right(new Message.Close(CloseCodes.Unacceptable(), e.getMessage())); } throw Scala.noMatch(); }), outMessage -> { try { return new Message.Text(play.libs.Json.mapper().writeValueAsString(outMessage)); } catch (Exception e) { throw new RuntimeException(e); } }); } \n### Response:", "ground_truth": "Acceptor for JSON WebSockets.\n\n@param in The class of the incoming messages, used to decode them from the JSON.\n@param <In> The websocket's input type (what it receives from clients)\n@param <Out> The websocket's output type (what it writes to clients)\n@return The WebSocket acceptor.", "predict": "Mapping json to json\n\n@param in\n@return"}
{"ID": 648, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static <In, Out> WebSocket acceptOrResult( PartialFunction<Message, F.Either<In, Message>> inMapper, Function<Http.RequestHeader, CompletionStage<F.Either<Result, Flow<In, Out, ?>>>> f, Function<Out, Message> outMapper) { return new WebSocket() { @Override public CompletionStage<F.Either<Result, Flow<Message, Message, ?>>> apply( Http.RequestHeader request) { return f.apply(request) .thenApply( resultOrFlow -> { if (resultOrFlow.left.isPresent()) { return F.Either.Left(resultOrFlow.left.get()); } else { Flow<Message, Message, ?> flow = AkkaStreams.bypassWith( Flow.<Message>create().collect(inMapper), play.api.libs.streams.AkkaStreams.onlyFirstCanFinishMerge(2), resultOrFlow.right.get().map(outMapper::apply)); return F.Either.Right(flow); } }); } }; } \n### Response:", "ground_truth": "Helper to create handlers for WebSockets.\n\n@param inMapper Function to map input messages. If it produces left, the message will be passed\nto the WebSocket flow, if it produces right, the message will be sent back out to the\nclient - this can be used to send errors directly to the client.\n@param f The function to handle the WebSocket.\n@param outMapper Function to map output messages.\n@return The WebSocket handler.", "predict": "Implement acceptOrResult to handle the case where the response is not available."}
{"ID": 649, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: static boolean setAccessibleWorkaround(final AccessibleObject o) { if (o == null || o.isAccessible()) { return false; } final Member m = (Member) o; if (!o.isAccessible() && Modifier.isPublic(m.getModifiers()) && isPackageAccess(m.getDeclaringClass().getModifiers())) { try { o.setAccessible(true); return true; } catch (final SecurityException e) { // NOPMD // ignore in favor of subsequent IllegalAccessException } } return false; } \n### Response:", "ground_truth": "XXX Default access superclass workaround.\n\n<p>When a {@code public} class has a default access superclass with {@code public} members,\nthese members are accessible. Calling them from compiled code works fine. Unfortunately, on\nsome JVMs, using reflection to invoke these members seems to (wrongly) prevent access even when\nthe modifier is {@code public}. Calling {@code setAccessible(true)} solves the problem but will\nonly work from sufficiently privileged code. Better workarounds would be gratefully accepted.\n\n@param o the AccessibleObject to set as accessible\n@return a boolean indicating whether the accessibility of the object was set to true.", "predict": "Helper method to check if the given object is accessible and if so, set it to public.\n\n@param o the object to check\n@return true if the object is accessible and if so, set it to public"}
{"ID": 650, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static float getPrimitivePromotionCost( final Class<?> srcClass, final Class<?> destClass) { float cost = 0.0f; Class<?> cls = srcClass; if (!cls.isPrimitive()) { // slight unwrapping penalty cost += 0.1f; cls = ClassUtils.wrapperToPrimitive(cls); } for (int i = 0; cls != destClass && i < ORDERED_PRIMITIVE_TYPES.length; i++) { if (cls == ORDERED_PRIMITIVE_TYPES[i]) { cost += 0.1f; if (i < ORDERED_PRIMITIVE_TYPES.length - 1) { cls = ORDERED_PRIMITIVE_TYPES[i + 1]; } } } return cost; } \n### Response:", "ground_truth": "Gets the number of steps required to promote a primitive number to another type.\n\n@param srcClass the (primitive) source class\n@param destClass the (primitive) destination class\n@return The cost of promoting the primitive", "predict": "Returns the cost of converting a primitive type to a primitive type."}
{"ID": 651, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static float getTotalTransformationCost( final Class<?>[] srcArgs, final Executable executable) { final Class<?>[] destArgs = executable.getParameterTypes(); final boolean isVarArgs = executable.isVarArgs(); // \"source\" and \"destination\" are the actual and declared args respectively. float totalCost = 0.0f; final long normalArgsLen = isVarArgs ? destArgs.length - 1 : destArgs.length; if (srcArgs.length < normalArgsLen) { return Float.MAX_VALUE; } for (int i = 0; i < normalArgsLen; i++) { totalCost += getObjectTransformationCost(srcArgs[i], destArgs[i]); } if (isVarArgs) { // When isVarArgs is true, srcArgs and dstArgs may differ in length. // There are two special cases to consider: final boolean noVarArgsPassed = srcArgs.length < destArgs.length; final boolean explicitArrayForVarags = srcArgs.length == destArgs.length && srcArgs[srcArgs.length - 1].isArray(); final float varArgsCost = 0.001f; final Class<?> destClass = destArgs[destArgs.length - 1].getComponentType(); if (noVarArgsPassed) { // When no varargs passed, the best match is the most generic matching type, not the most // specific. totalCost += getObjectTransformationCost(destClass, Object.class) + varArgsCost; } else if (explicitArrayForVarags) { final Class<?> sourceClass = srcArgs[srcArgs.length - 1].getComponentType(); totalCost += getObjectTransformationCost(sourceClass, destClass) + varArgsCost; } else { // This is typical varargs case. for (int i = destArgs.length - 1; i < srcArgs.length; i++) { final Class<?> srcClass = srcArgs[i]; totalCost += getObjectTransformationCost(srcClass, destClass) + varArgsCost; } } } return totalCost; } \n### Response:", "ground_truth": "Returns the sum of the object transformation cost for each class in the source argument list.\n\n@param srcArgs The source arguments\n@param executable The executable to calculate transformation costs for\n@return The total transformation cost", "predict": "Calculates the total transformation cost for the given arguments.\n\n@param srcArgs the arguments to use for the transformation.\n@param executable the executable to use.\n@return the total transformation cost."}
{"ID": 652, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static float getObjectTransformationCost(Class<?> srcClass, final Class<?> destClass) { if (destClass.isPrimitive()) { return getPrimitivePromotionCost(srcClass, destClass); } float cost = 0.0f; while (srcClass != null && !destClass.equals(srcClass)) { if (destClass.isInterface() && ClassUtils.isAssignable(srcClass, destClass)) { // slight penalty for interface match. // we still want an exact match to override an interface match, // but // an interface match should override anything where we have to // get a superclass. cost += 0.25f; break; } cost++; srcClass = srcClass.getSuperclass(); } /* * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if (srcClass == null) { cost += 1.5f; } return cost; } \n### Response:", "ground_truth": "Gets the number of steps required needed to turn the source class into the destination class.\nThis represents the number of steps in the object hierarchy graph.\n\n@param srcClass The source class\n@param destClass The destination class\n@return The cost of transforming an object", "predict": "Calculates the cost of transforming an Object to a destination Object.\n\n@param srcClass source class\n@param destClass destination class\n@return cost of transformation"}
{"ID": 653, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String at(String key, Object... args) { return messagesApi.get(lang, key, args); } \n### Response:", "ground_truth": "Get the message at the given key.\n\n<p>Uses `java.text.MessageFormat` internally to format the message.\n\n@param key the message key\n@param args the message arguments\n@return the formatted message or a default rendering if the key wasn't defined", "predict": "Get message at key.\n\n@param key message key\n@param args message arguments\n@return message at key"}
{"ID": 654, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String at(List<String> keys, Object... args) { return messagesApi.get(lang, keys, args); } \n### Response:", "ground_truth": "Get the message at the first defined key.\n\n<p>Uses `java.text.MessageFormat` internally to format the message.\n\n@param keys the messages keys\n@param args the message arguments\n@return the formatted message or a default rendering if the key wasn't defined", "predict": "Retrieves a message by its keys.\n\n@param keys the keys of the message\n@param args the arguments of the message\n@return the message"}
{"ID": 655, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Database createFrom( String driver, String url, Map<String, ? extends Object> config) { return createFrom(\"default\", driver, url, config); } \n### Response:", "ground_truth": "Create a pooled database named \"default\" with the given configuration.\n\n@param driver the database driver class\n@param url the database url\n@param config a map of extra database configuration\n@return a configured database", "predict": "Create a database instance from a configuration.\n\n@param driver driver name\n@param url url\n@param config config\n@return database instance"}
{"ID": 656, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ParallelSorter create(Object[] arrays) { Generator gen = new Generator(); gen.setArrays(arrays); return gen.create(); } \n### Response:", "ground_truth": "Create a new ParallelSorter object for a set of arrays. You may\nsort the arrays multiple times via the same ParallelSorter object.\n@param arrays An array of arrays to sort. The arrays may be a mix\nof primitive and non-primitive types, but should all be the same\nlength.\n@param loader ClassLoader for generated class, uses \"current\" if null", "predict": "Creates a parallel sorter for the given array of objects.\n\n@param arrays the array of objects to sort\n@return a parallel sorter for the given array of objects"}
{"ID": 657, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void quickSort(int index, int lo, int hi, Comparator cmp) { chooseComparer(index, cmp); super.quickSort(lo, hi - 1); } \n### Response:", "ground_truth": "Sort the arrays using the quicksort algorithm.\n@param index array (column) to sort by\n@param lo starting array index (row), inclusive\n@param hi ending array index (row), exclusive\n@param cmp Comparator to use if the specified column is non-primitive", "predict": "Quick sort implementation.\n\n@param index\n@param lo\n@param hi\n@param cmp"}
{"ID": 658, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void mergeSort(int index, int lo, int hi, Comparator cmp) { chooseComparer(index, cmp); super.mergeSort(lo, hi - 1); } \n### Response:", "ground_truth": "Sort the arrays using an in-place merge sort.\n@param index array (column) to sort by\n@param lo starting array index (row), inclusive\n@param hi ending array index (row), exclusive\n@param cmp Comparator to use if the specified column is non-primitive", "predict": "Merge sort algorithm.\n\n@param index\n@param lo\n@param hi\n@param cmp"}
{"ID": 659, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object invoke(Object obj, Object[] args) throws Throwable { try { init(); FastClassInfo fci = fastClassInfo; return fci.f1.invoke(fci.i1, obj, args); } catch (InvocationTargetException e) { throw e.getTargetException(); } catch (IllegalArgumentException e) { if (fastClassInfo.i1 < 0) throw new IllegalArgumentException(\"Protected method: \" + sig1); throw e; } } \n### Response:", "ground_truth": "Invoke the original method, on a different object of the same type.\n@param obj the compatible object; recursion will result if you use the object passed as the first\nargument to the MethodInterceptor (usually not what you want)\n@param args the arguments passed to the intercepted method; you may substitute a different\nargument array as long as the types are compatible\n@see MethodInterceptor#intercept\n@throws Throwable the bare exceptions thrown by the called method are passed through\nwithout wrapping in an <code>InvocationTargetException</code>", "predict": "Invokes the protected method.\n\n@param obj the object to invoke the method on\n@param args the arguments to pass to the method\n@return the result of the method\n@throws Throwable if an error occurs"}
{"ID": 660, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void cast_numeric(Type from, Type to) { if (from != to) { if (from == Type.DOUBLE_TYPE) { if (to == Type.FLOAT_TYPE) { mv.visitInsn(Constants.D2F); } else if (to == Type.LONG_TYPE) { mv.visitInsn(Constants.D2L); } else { mv.visitInsn(Constants.D2I); cast_numeric(Type.INT_TYPE, to); } } else if (from == Type.FLOAT_TYPE) { if (to == Type.DOUBLE_TYPE) { mv.visitInsn(Constants.F2D); } else if (to == Type.LONG_TYPE) { mv.visitInsn(Constants.F2L); } else { mv.visitInsn(Constants.F2I); cast_numeric(Type.INT_TYPE, to); } } else if (from == Type.LONG_TYPE) { if (to == Type.DOUBLE_TYPE) { mv.visitInsn(Constants.L2D); } else if (to == Type.FLOAT_TYPE) { mv.visitInsn(Constants.L2F); } else { mv.visitInsn(Constants.L2I); cast_numeric(Type.INT_TYPE, to); } } else { if (to == Type.BYTE_TYPE) { mv.visitInsn(Constants.I2B); } else if (to == Type.CHAR_TYPE) { mv.visitInsn(Constants.I2C); } else if (to == Type.DOUBLE_TYPE) { mv.visitInsn(Constants.I2D); } else if (to == Type.FLOAT_TYPE) { mv.visitInsn(Constants.I2F); } else if (to == Type.LONG_TYPE) { mv.visitInsn(Constants.I2L); } else if (to == Type.SHORT_TYPE) { mv.visitInsn(Constants.I2S); } } } } \n### Response:", "ground_truth": "Casts from one primitive numeric type to another", "predict": "Casts the given type to the given type.\n\n@param from the type to be casted\n@param to the type to be casted"}
{"ID": 661, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void load_arg(int index) { load_local(state.argumentTypes[index], state.localOffset + skipArgs(index)); } \n### Response:", "ground_truth": "Pushes the specified argument of the current method onto the stack.\n@param index the zero-based index into the argument list", "predict": "Loads the given argument."}
{"ID": 662, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: void emit_field(int opcode, Type ctype, String name, Type ftype) { mv.visitFieldInsn(opcode, ctype.getInternalName(), name, ftype.getDescriptor()); } \n### Response:", "ground_truth": "package-protected for EmitUtils, try to fix", "predict": "Emit a field instruction."}
{"ID": 663, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void zero_or_null(Type type) { if (TypeUtils.isPrimitive(type)) { switch (type.getSort()) { case Type.DOUBLE: push(0d); break; case Type.LONG: push(0L); break; case Type.FLOAT: push(0f); break; case Type.VOID: aconst_null(); default: push(0); } } else { aconst_null(); } } \n### Response:", "ground_truth": "Pushes a zero onto the stack if the argument is a primitive class, or a null otherwise.", "predict": "Helper method to add a null value for a given type."}
{"ID": 664, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void unbox_or_zero(Type type) { if (TypeUtils.isPrimitive(type)) { if (type != Type.VOID_TYPE) { Label nonNull = make_label(); Label end = make_label(); dup(); ifnonnull(nonNull); pop(); zero_or_null(type); goTo(end); mark(nonNull); unbox(type); mark(end); } } else { checkcast(type); } } \n### Response:", "ground_truth": "Unboxes the object on the top of the stack. If the object is null, the\nunboxed primitive value becomes zero.", "predict": "Unboxes the given type and marks it as non-null."}
{"ID": 665, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void process_array(CodeEmitter e, Type type, ProcessArrayCallback callback) { Type componentType = TypeUtils.getComponentType(type); Local array = e.make_local(); Local loopvar = e.make_local(Type.INT_TYPE); Label loopbody = e.make_label(); Label checkloop = e.make_label(); e.store_local(array); e.push(0); e.store_local(loopvar); e.goTo(checkloop); e.mark(loopbody); e.load_local(array); e.load_local(loopvar); e.array_load(componentType); callback.processElement(componentType); e.iinc(loopvar, 1); e.mark(checkloop); e.load_local(loopvar); e.load_local(array); e.arraylength(); e.if_icmp(e.LT, loopbody); } \n### Response:", "ground_truth": "Process an array on the stack. Assumes the top item on the stack\nis an array of the specified type. For each element in the array,\nputs the element on the stack and triggers the callback.\n@param type the type of the array (type.isArray() must be true)\n@param callback the callback triggered for each element", "predict": "Process an array.\n\n@param e the codeEmitter\n@param type the type\n@param callback the callback"}
{"ID": 666, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static void nullcmp(CodeEmitter e, Label oneNull, Label bothNull) { e.dup2(); Label nonNull = e.make_label(); Label oneNullHelper = e.make_label(); Label end = e.make_label(); e.ifnonnull(nonNull); e.ifnonnull(oneNullHelper); e.pop2(); e.goTo(bothNull); e.mark(nonNull); e.ifnull(oneNullHelper); e.goTo(end); e.mark(oneNullHelper); e.pop2(); e.goTo(oneNull); e.mark(end); } \n### Response:", "ground_truth": "If both objects on the top of the stack are non-null, does nothing.\nIf one is null, or both are null, both are popped off and execution\nbranches to the respective label.\n@param oneNull label to branch to if only one of the objects is null\n@param bothNull label to branch to if both of the objects are null", "predict": "Compares two labels for null."}
{"ID": 667, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Map/*<Signature, Signature>*/resolveAll() { Map resolved = new HashMap(); for (Iterator entryIter = declToBridge.entrySet().iterator(); entryIter.hasNext(); ) { Map.Entry entry = (Map.Entry) entryIter.next(); Class owner = (Class) entry.getKey(); Set bridges = (Set) entry.getValue(); try { InputStream is = classLoader.getResourceAsStream(owner.getName().replace('.', '/') + \".class\"); if (is == null) { return resolved; } try { new ClassReader(is) .accept(new BridgedFinder(bridges, resolved), ClassReader.SKIP_FRAMES | ClassReader.SKIP_DEBUG); } finally { is.close(); } } catch (IOException ignored) {} } return resolved; } \n### Response:", "ground_truth": "Finds all bridge methods that are being called with invokespecial &\nreturns them.", "predict": "Resolve all bridge classes."}
{"ID": 668, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void getMethods(Class superclass, Class[] interfaces, List methods) { getMethods(superclass, interfaces, methods, null, null); } \n### Response:", "ground_truth": "Finds all of the methods that will be extended by an\nEnhancer-generated class using the specified superclass and\ninterfaces. This can be useful in building a list of Callback\nobjects. The methods are added to the end of the given list.  Due\nto the subclassing nature of the classes generated by Enhancer,\nthe methods are guaranteed to be non-static, non-final, and\nnon-private. Each method signature will only occur once, even if\nit occurs in multiple classes.\n@param superclass the class that will be extended, or null\n@param interfaces the list of interfaces that will be implemented, or null\n@param methods the list into which to copy the applicable methods", "predict": "Get the methods of the specified interfaces.\n\n@param superclass the class to get methods for\n@param interfaces the interfaces to get methods for\n@param methods the list of methods to get"}
{"ID": 669, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void filterConstructors(Class sc, List constructors) { CollectionUtils.filter(constructors, new VisibilityPredicate(sc, true)); if (constructors.size() == 0) throw new IllegalArgumentException(\"No visible constructors in \" + sc); } \n### Response:", "ground_truth": "Filter the list of constructors from the superclass. The\nconstructors which remain will be included in the generated\nclass. The default implementation is to filter out all private\nconstructors, but subclasses may extend Enhancer to override this\nbehavior.\n@param sc the superclass\n@param constructors the list of all declared constructors from the superclass\n@throws IllegalArgumentException if there are no non-private constructors", "predict": "Filter the constructor list to only include visible constructors.\n\n@param sc the class to filter\n@param constructors the list of constructors to filter"}
{"ID": 670, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setSuperclass(Class superclass) { if (superclass != null && superclass.equals(Object.class)) { superclass = null; } this.superclass = superclass; } \n### Response:", "ground_truth": "Set the class which the generated class will extend. The class\nmust not be declared as final, and must have a non-private\nno-argument constructor.\n@param superclass class to extend, or null to extend Object", "predict": "Sets the superclass of this class.\n\n@param superclass the superclass of this class."}
{"ID": 671, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void getField(String[] names) throws Exception { final CodeEmitter e = begin_method(Constants.ACC_PUBLIC, PROVIDER_GET, null); e.load_this(); e.load_arg(0); EmitUtils.string_switch(e, names, Constants.SWITCH_STYLE_HASH, new ObjectSwitchCallback() { public void processCase(Object key, Label end) { Type type = (Type)fields.get(key); e.getfield((String)key); e.box(type); e.return_value(); } public void processDefault() { e.throw_exception(ILLEGAL_ARGUMENT_EXCEPTION, \"Unknown field name\"); } }); e.end_method(); } \n### Response:", "ground_truth": "to avoid JVM hashcode implementation incompatibilities", "predict": "Get a field.\n\n@param names the names of the fields to get.\n@exception Exception Thrown if an error occurs."}
{"ID": 672, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void add(Method method) { add(ReflectUtils.getSignature(method), ReflectUtils.getExceptionTypes(method)); } \n### Response:", "ground_truth": "Add a method signature to the interface. The method modifiers are ignored,\nsince interface methods are by definition abstract and public.\n@param method the method to add to the interface", "predict": "Add a method to the list of methods.\n\n@param method the method to add"}
{"ID": 673, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public int cardinality() { int w = value; int c = 0; while (w != 0) { c += T[w & 255]; w >>= 8; } return c; } \n### Response:", "ground_truth": "If bit 31 is set then this method results in an infinite loop.\n\n@return the number of bits set to <code>true</code> in this TinyBitSet.", "predict": "Returns the cardinality of this set.\n\n@return the cardinality of this set."}
{"ID": 674, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setNamingPolicy(NamingPolicy namingPolicy) { if (namingPolicy == null) namingPolicy = DefaultNamingPolicy.INSTANCE; this.namingPolicy = namingPolicy; } \n### Response:", "ground_truth": "Override the default naming policy.\n@see DefaultNamingPolicy\n@param namingPolicy the custom policy, or null to use the default", "predict": "Sets the naming policy.\n\n@param namingPolicy the naming policy"}
{"ID": 675, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Method[] findMethods(String[] namesAndDescriptors, Method[] methods) { Map map = new HashMap(); for (int i = 0; i < methods.length; i++) { Method method = methods[i]; map.put(method.getName() + Type.getMethodDescriptor(method), method); } Method[] result = new Method[namesAndDescriptors.length / 2]; for (int i = 0; i < result.length; i++) { result[i] = (Method)map.get(namesAndDescriptors[i * 2] + namesAndDescriptors[i * 2 + 1]); if (result[i] == null) { // TODO: error? } } return result; } \n### Response:", "ground_truth": "used by MethodInterceptorGenerated generated code", "predict": "Finds methods in the given namesAndDescriptors array.\n\n@param namesAndDescriptors the names and descriptor array\n@param methods the methods array\n@return the methods array"}
{"ID": 676, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Path resolve(final Path base, String child) { if (StringUtil.startsWithChar(child, File.separatorChar)) { child = child.substring(1); } return base.resolve(child); } \n### Response:", "ground_truth": "Resolves subpath in safer way. For some reason, if child starts with\na separator it gets resolved as a full path, ignoring the base.\nThis method acts different.", "predict": "Resolve a path relative to the base path.\n\n@param base the base path\n@param child the path to resolve\n@return the resolved path"}
{"ID": 677, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String readString(final Path path) throws IOException { try (BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) { StringWriter writer = new StringWriter(); // flush & close not needed for StringWriter-instance StreamUtil.copy(reader, writer); return writer.toString(); } } \n### Response:", "ground_truth": "Reads path content.", "predict": "Reads a string from a file.\n\n@param path the file path\n@return the string\n@throws IOException if the file cannot be read"}
{"ID": 678, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpRequest host(final String host) { this.host = host; if (headers.contains(HEADER_HOST)) { headerOverwrite(HEADER_HOST, host); } return this; } \n### Response:", "ground_truth": "Sets request host name.", "predict": "Sets the host of the request.\n\n@param host the host of the request\n@return the current request"}
{"ID": 679, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static HttpRequest create(final String method, final String destination) { return new HttpRequest() .method(method.toUpperCase()) .set(destination); } \n### Response:", "ground_truth": "Generic request builder, usually used when method is a variable.\nOtherwise, use one of the other static request builder methods.", "predict": "Creates a request with the given method and destination.\n\n@param method the HTTP method\n@param destination the HTTP destination\n@return the request"}
{"ID": 680, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static HttpRequest connect(final String destination) { return new HttpRequest() .method(HttpMethod.CONNECT) .set(destination); } \n### Response:", "ground_truth": "Builds a CONNECT request.", "predict": "Construct a HttpRequest to connect to a destination.\n\n@param destination the destination\n@return the HttpRequest"}
{"ID": 681, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static HttpRequest get(final String destination) { return new HttpRequest() .method(HttpMethod.GET) .set(destination); } \n### Response:", "ground_truth": "Builds a GET request.", "predict": "Construct a GET request with the specified destination.\n\n@param destination the destination URL\n@return a GET request"}
{"ID": 682, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static HttpRequest post(final String destination) { return new HttpRequest() .method(HttpMethod.POST) .set(destination); } \n### Response:", "ground_truth": "Builds a POST request.", "predict": "Construct a POST request.\n\n@param destination the destination of the request\n@return the request"}
{"ID": 683, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static HttpRequest put(final String destination) { return new HttpRequest() .method(HttpMethod.PUT) .set(destination); } \n### Response:", "ground_truth": "Builds a PUT request.", "predict": "Construct a PUT request.\n\n@param destination destination URL\n@return PUT request"}
{"ID": 684, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static HttpRequest patch(final String destination) { return new HttpRequest() .method(HttpMethod.PATCH) .set(destination); } \n### Response:", "ground_truth": "Builds a PATCH request.", "predict": "Construct a PATCH request.\n\n@param destination the destination URL\n@return a PATCH request"}
{"ID": 685, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static HttpRequest delete(final String destination) { return new HttpRequest() .method(HttpMethod.DELETE) .set(destination); } \n### Response:", "ground_truth": "Builds a DELETE request.", "predict": "Construct a DELETE request.\n\n@param destination destination URL\n@return DELETE request"}
{"ID": 686, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static HttpRequest head(final String destination) { return new HttpRequest() .method(HttpMethod.HEAD) .set(destination); } \n### Response:", "ground_truth": "Builds a HEAD request.", "predict": "Construct a HEAD request.\n\n@param destination destination URL\n@return a {@link HttpRequest}"}
{"ID": 687, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static HttpRequest trace(final String destination) { return new HttpRequest() .method(HttpMethod.TRACE) .set(destination); } \n### Response:", "ground_truth": "Builds a TRACE request.", "predict": "Create a trace request.\n\n@param destination the destination of the trace request\n@return the trace request"}
{"ID": 688, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static HttpRequest options(final String destination) { return new HttpRequest() .method(HttpMethod.OPTIONS) .set(destination); } \n### Response:", "ground_truth": "Builds an OPTIONS request.", "predict": "Construct a request to the specified destination.\n\n@param destination the destination\n@return the request"}
{"ID": 689, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpRequest path(String path) { // this must be the only place that sets the path if (!path.startsWith(StringPool.SLASH)) { path = StringPool.SLASH + path; } int ndx = path.indexOf('?'); if (ndx != -1) { String queryString = path.substring(ndx + 1); path = path.substring(0, ndx); query = HttpUtil.parseQuery(queryString, true); } else { query = HttpMultiMap.newCaseInsensitiveMap(); } this.path = path; return this; } \n### Response:", "ground_truth": "Sets request path. Query string is allowed.\nAdds a slash if path doesn't start with one.\nQuery will be stripped out from the path.\nPrevious query is discarded.\n@see #query()", "predict": "Sets the request path.\n\n@param path the path to set\n@return this"}
{"ID": 690, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpRequest cookies(final Cookie... cookies) { if (cookies.length == 0) { return this; } StringBuilder cookieString = new StringBuilder(); boolean first = true; for (Cookie cookie : cookies) { Integer maxAge = cookie.getMaxAge(); if (maxAge != null && maxAge.intValue() == 0) { continue; } if (!first) { cookieString.append(\"; \"); } first = false; cookieString.append(cookie.getName()); cookieString.append('='); cookieString.append(cookie.getValue()); } headerOverwrite(\"cookie\", cookieString.toString()); return this; } \n### Response:", "ground_truth": "Sets cookies to the request.", "predict": "Set the cookies for this request.\n\n@param cookies the cookies to set\n@return this request"}
{"ID": 691, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpRequest query(final String name1, final Object value1, final Object... parameters) { query(name1, value1 == null ? null : value1.toString()); for (int i = 0; i < parameters.length; i += 2) { String name = parameters[i].toString(); String value = parameters[i + 1].toString(); query.add(name, value); } return this; } \n### Response:", "ground_truth": "Adds many query parameters at once. Although it accepts objects,\neach value will be converted to string.", "predict": "Adds a query parameter.\n\n@param name1\n@param value1\n@param parameters\n@return"}
{"ID": 692, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpRequest query(final Map<String, String> queryMap) { for (Map.Entry<String, String> entry : queryMap.entrySet()) { query.add(entry.getKey(), entry.getValue()); } return this; } \n### Response:", "ground_truth": "Adds all parameters from the provided map.", "predict": "Adds a query to the request.\n\n@param queryMap query to add\n@return the current request"}
{"ID": 693, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpRequest queryString(final String queryString, final boolean decode) { this.query = HttpUtil.parseQuery(queryString, decode); return this; } \n### Response:", "ground_truth": "Sets query from provided query string. Previous query values\nare discarded.", "predict": "Parse the query string.\n\n@param queryString the query string\n@param decode    if true, the query string will be decoded\n@return the current instance of this request"}
{"ID": 694, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String queryString() { if (query == null) { return StringPool.EMPTY; } return HttpUtil.buildQuery(query, queryEncoding); } \n### Response:", "ground_truth": "Generates query string. All values are URL encoded.", "predict": "Returns the query string.\n\n@return the query string"}
{"ID": 695, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String hostUrl() { StringBand url = new StringBand(8); if (protocol != null) { url.append(protocol); url.append(\"://\"); } if (host != null) { url.append(host); } if (port != Defaults.DEFAULT_PORT) { url.append(':'); url.append(port); } return url.toString(); } \n### Response:", "ground_truth": "Returns just host url, without path and query.", "predict": "Returns the URL to the host.\n\n@return the URL to the host"}
{"ID": 696, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpRequest basicAuthentication(final String username, final String password) { if (username != null && password != null) { String data = username.concat(StringPool.COLON).concat(password); String base64 = Base64.encodeToString(data); headerOverwrite(HEADER_AUTHORIZATION, \"Basic \" + base64); } return this; } \n### Response:", "ground_truth": "Enables basic authentication by adding required header.", "predict": "Adds basic authentication header.\n\n@param username username\n@param password password\n@return this"}
{"ID": 697, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpRequest setHostHeader() { String hostPort = this.host; if (port != Defaults.DEFAULT_PORT) { hostPort += StringPool.COLON + port; } headerOverwrite(HEADER_HOST, hostPort); return this; } \n### Response:", "ground_truth": "Sets 'Host' header from current host and port.", "predict": "Sets the host header.\n\n@return the current instance of HttpRequest"}
{"ID": 698, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected Buffer buffer(final boolean fullRequest) { // INITIALIZATION // host port if (header(HEADER_HOST) == null) { setHostHeader(); } // form Buffer formBuffer = formBuffer(); // query string String queryString = queryString(); // user-agent if (header(\"User-Agent\") == null) { header(\"User-Agent\", Defaults.userAgent); } // POST method requires Content-Type to be set if (method.equals(\"POST\") && (contentLength() == null)) { contentLength(0); } // BUILD OUT Buffer request = new Buffer(); request.append(method) .append(SPACE) .append(path); if (query != null && !query.isEmpty()) { request.append('?'); request.append(queryString); } request.append(SPACE) .append(httpVersion) .append(CRLF); populateHeaderAndBody(request, formBuffer, fullRequest); return request; } \n### Response:", "ground_truth": "Prepares the request buffer.", "predict": "Builds the request body.\n\n@param fullRequest true if the request should be sent with a full request body.\n@return the request body."}
{"ID": 699, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <R> R sendAndReceive(final Function<HttpResponse, R> responseHandler) { return responseHandler.apply(send()); } \n### Response:", "ground_truth": "Syntax sugar.", "predict": "Sends the request and receives the response.\n\n@param responseHandler the function that will be called to handle the response\n@return the response"}
{"ID": 700, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: static Handler removeRange(final Handler firstHandler, final Label start, final Label end) { if (firstHandler == null) { return null; } else { firstHandler.nextHandler = removeRange(firstHandler.nextHandler, start, end); } int handlerStart = firstHandler.startPc.bytecodeOffset; int handlerEnd = firstHandler.endPc.bytecodeOffset; int rangeStart = start.bytecodeOffset; int rangeEnd = end == null ? Integer.MAX_VALUE : end.bytecodeOffset; // Return early if [handlerStart,handlerEnd[ and [rangeStart,rangeEnd[ don't intersect. if (rangeStart >= handlerEnd || rangeEnd <= handlerStart) { return firstHandler; } if (rangeStart <= handlerStart) { if (rangeEnd >= handlerEnd) { // If [handlerStart,handlerEnd[ is included in [rangeStart,rangeEnd[, remove firstHandler. return firstHandler.nextHandler; } else { // [handlerStart,handlerEnd[ - [rangeStart,rangeEnd[ = [rangeEnd,handlerEnd[ return new Handler(firstHandler, end, firstHandler.endPc); } } else if (rangeEnd >= handlerEnd) { // [handlerStart,handlerEnd[ - [rangeStart,rangeEnd[ = [handlerStart,rangeStart[ return new Handler(firstHandler, firstHandler.startPc, start); } else { // [handlerStart,handlerEnd[ - [rangeStart,rangeEnd[ = // [handlerStart,rangeStart[ + [rangeEnd,handerEnd[ firstHandler.nextHandler = new Handler(firstHandler, end, firstHandler.endPc); return new Handler(firstHandler, firstHandler.startPc, start); } } \n### Response:", "ground_truth": "Removes the range between start and end from the Handler list that begins with the given\nelement.\n\n@param firstHandler the beginning of a Handler list. May be {@literal null}.\n@param start the start of the range to be removed.\n@param end the end of the range to be removed. Maybe {@literal null}.\n@return the exception handler list with the start-end range removed.", "predict": "Removes a range of handlers from the given handler.\n\n@param firstHandler the handler to be removed.\n@param start the start of the range to be removed.\n@param end the end of the range to be removed.\n@return the removed handler."}
{"ID": 701, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: static int getExceptionTableLength(final Handler firstHandler) { int length = 0; Handler handler = firstHandler; while (handler != null) { length++; handler = handler.nextHandler; } return length; } \n### Response:", "ground_truth": "Returns the number of elements of the Handler list that begins with the given element.\n\n@param firstHandler the beginning of a Handler list. May be {@literal null}.\n@return the number of elements of the Handler list that begins with 'handler'.", "predict": "Returns the length of the exception table.\n\n@param firstHandler the first handler\n@return the length of the exception table"}
{"ID": 702, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void collectActionInterceptors() { final Collection<? extends ActionInterceptor> interceptorValues = interceptorsManager.getAllInterceptors(); interceptors = new ArrayList<>(); interceptors.addAll(interceptorValues); interceptors.sort(Comparator.comparing(a -> a.getClass().getSimpleName())); } \n### Response:", "ground_truth": "Collects all interceptors.", "predict": "Collect all action interceptors."}
{"ID": 703, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void collectActionFilters() { final Collection<? extends ActionFilter> filterValues = filtersManager.getAllFilters(); filters = new ArrayList<>(); filters.addAll(filterValues); filters.sort(Comparator.comparing(a -> a.getClass().getSimpleName())); } \n### Response:", "ground_truth": "Collects all filters.", "predict": "Collects all the action filters."}
{"ID": 704, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void collectActionResults() { final Collection<ActionResult> resultsValues = resultsManager.getAllActionResults(); results = new ArrayList<>(); results.addAll(resultsValues); results.sort(Comparator.comparing(a -> a.getClass().getSimpleName())); } \n### Response:", "ground_truth": "Collects all action results.", "predict": "Collects the results of the actions."}
{"ID": 705, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void collectActionRuntimes() { actions = actionsManager.getAllActionRuntimes(); actions.sort(Comparator.comparing(ActionRuntime::getActionPath)); } \n### Response:", "ground_truth": "Collects all action runtime configurations.", "predict": "Collects all the action runtimes."}
{"ID": 706, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"unchecked\"}) protected void setSimpleProperty(final BeanProperty bp, final Object value) { Setter setter = bp.getSetter(isDeclared); // try: setter if (setter != null) { invokeSetter(setter, bp, value); return; } // try: put(\"property\", value) if (bp.isMap()) { ((Map) bp.bean).put(bp.name, value); return; } if (isSilent) { return; } throw new BeanException(\"Simple property not found: \" + bp.name, bp); } \n### Response:", "ground_truth": "Sets a value of simple property.", "predict": "Sets a simple property.\n\n@param bp the property\n@param value the value"}
{"ID": 707, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public <T> T getProperty(final Object bean, final String name) { BeanProperty beanProperty = new BeanProperty(this, bean, name); if (!isSilent) { resolveNestedProperties(beanProperty); return (T) getIndexProperty(beanProperty); } else { try { resolveNestedProperties(beanProperty); return (T) getIndexProperty(beanProperty); } catch (Exception ignore) { return null; } } } \n### Response:", "ground_truth": "Returns value of bean's property.", "predict": "Returns the property with the given name.\n\n@param bean the bean\n@param name the name\n@return the property"}
{"ID": 708, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public String extractThisReference(final String propertyName) { int ndx = StringUtil.indexOfChars(propertyName, INDEX_CHARS); if (ndx == -1) { return propertyName; } return propertyName.substring(0, ndx); } \n### Response:", "ground_truth": "Extract the first name of this reference.", "predict": "Returns the name of the property that is being accessed.\n\n@param propertyName the name of the property being accessed\n@return the name of the property being accessed"}
{"ID": 709, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public PrintWriter getWriter() { if (writer == null) { writer = new FastCharArrayWriter(); printWriter = new PrintWriter(writer); } return printWriter; } \n### Response:", "ground_truth": "Returns buffered writer. Buffer will be created if not already used.", "predict": "Returns the writer to write to."}
{"ID": 710, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setObjectReference(final String name, final Object object) { if (objectRefs == null) { objectRefs = new HashMap<>(); } objectRefs.put(name, object); } \n### Response:", "ground_truth": "Saves object reference.", "predict": "Sets the object reference for the given name.\n\n@param name the name of the object reference\n@param object the object reference"}
{"ID": 711, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object getObjectReference(final String name) { if (objectRefs == null) { return null; } return objectRefs.get(name); } \n### Response:", "ground_truth": "Returns object reference.", "predict": "Returns the object reference for the given name.\n\n@param name the name of the object reference\n@return the object reference"}
{"ID": 712, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object lookupObject(final String ref) { Object value = getObjectReference(ref); if (value == null) { throw new DbSqlBuilderException(\"Invalid object reference: \" + ref); } return value; } \n### Response:", "ground_truth": "Lookups for object reference and throws an exception if reference doesn't exist.", "predict": "Lookup an object reference.\n\n@param ref the reference\n@return the object reference"}
{"ID": 713, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public DbEntityDescriptor getTableDescriptor(final String tableRef) { if (tableRefs == null) { return null; } TableRefData t = tableRefs.get(tableRef); return t == null ? null : t.desc; } \n### Response:", "ground_truth": "Returns entity descriptor for provided table reference.", "predict": "Get the descriptor for the table.\n\n@param tableRef\n@return table descriptor"}
{"ID": 714, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public DbEntityDescriptor findTableDescriptorByColumnRef(final String columnRef) { for (Map.Entry<String, TableRefData> entry : tableRefs.entrySet()) { DbEntityDescriptor ded = entry.getValue().desc; if (ded.findByPropertyName(columnRef) != null) { return ded; } } return null; } \n### Response:", "ground_truth": "Finds entity descriptor of a table that contains provided column reference.", "predict": "Finds the table descriptor by column reference.\n\n@param columnRef the column reference\n@return the table descriptor"}
{"ID": 715, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getTableAlias(final String tableRef) { if (tableRefs == null) { return null; } TableRefData t = tableRefs.get(tableRef); return t == null ? null : t.alias; } \n### Response:", "ground_truth": "Returns table alias for provided table reference.", "predict": "Get table alias.\n\n@param tableRef table reference\n@return table alias"}
{"ID": 716, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerTableReference(final String tableReference, final DbEntityDescriptor ded, final String tableAlias) { if (tableRefs == null) { tableRefs = new HashMap<>(); } TableRefData t = new TableRefData(ded, tableAlias); if (tableRefs.put(tableReference, t) != null) { throw new DbSqlBuilderException(\"Duplicated table reference: \" + tableReference); } } \n### Response:", "ground_truth": "Registers table reference for provided entity.", "predict": "Register a table reference.\n\n@param tableReference\nthe table reference\n@param ded\nthe ded\n@param tableAlias\nthe table alias"}
{"ID": 717, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected DbEntityDescriptor lookupTableRef(final String tableRef) { DbEntityDescriptor ded = getTableDescriptor(tableRef); if (ded == null) { throw new DbSqlBuilderException(\"Table reference not used in this query: \" + tableRef); } return ded; } \n### Response:", "ground_truth": "Lookups for table reference and throws an exception if table reference not found.", "predict": "Lookup the table reference.\n\n@param tableRef the table reference\n@return the table reference"}
{"ID": 718, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerHint(final String hint) { if (hints == null) { hints = new ArrayList<>(hintCount); } hints.add(hint); } \n### Response:", "ground_truth": "Registers a hint.", "predict": "Register a hint for the query.\n\n@param hint the hint to register"}
{"ID": 719, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public final boolean serialize(final JsonContext jsonContext, final T value) { if (jsonContext.pushValue(value)) { // prevent circular dependencies return false; } serializeValue(jsonContext, value); jsonContext.popValue(); return true; } \n### Response:", "ground_truth": "Detects circular dependencies and pushes value as current\ntype context.", "predict": "Serializes the given value into the given json context.\n\n@param jsonContext the json context\n@param value the value to serialize\n@return true if the value was successfully serialized"}
{"ID": 720, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void injectAttributes(final HttpServletRequest servletRequest, final Targets targets) { final Enumeration<String> attributeNames = servletRequest.getAttributeNames(); while (attributeNames.hasMoreElements()) { final String attrName = attributeNames.nextElement(); targets.forEachTargetAndIn(this, (target, in) -> { final String name = in.matchedName(attrName); if (name != null) { final Object attrValue = servletRequest.getAttribute(attrName); target.writeValue(name, attrValue, true); } }); } } \n### Response:", "ground_truth": "Injects request attributes.", "predict": "Injects the attributes from the servlet request into the targets.\n\n@param servletRequest the servlet request\n@param targets the targets"}
{"ID": 721, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void injectParameters(final HttpServletRequest servletRequest, final Targets targets) { final boolean encode = encodeGetParams && servletRequest.getMethod().equals(\"GET\"); final Enumeration<String> paramNames = servletRequest.getParameterNames(); while (paramNames.hasMoreElements()) { final String paramName = paramNames.nextElement(); if (servletRequest.getAttribute(paramName) != null) { continue; } targets.forEachTargetAndIn(this, (target, in) -> { final String name = in.matchedName(paramName); if (name != null) { String[] paramValues = servletRequest.getParameterValues(paramName); paramValues = ServletUtil.prepareParameters( paramValues, treatEmptyParamsAsNull, ignoreEmptyRequestParams); if (paramValues != null) { if (encode) { for (int j = 0; j < paramValues.length; j++) { final String p = paramValues[j]; if (p != null) { final String encoding = madvocEncoding.getEncoding(); paramValues[j] = StringUtil.convertCharset(p, StringPool.ISO_8859_1, encoding); } } } final Object value = (paramValues.length != 1 ? paramValues : paramValues[0]); target.writeValue(name, value, true); } } }); } } \n### Response:", "ground_truth": "Inject request parameters.", "predict": "Injects the parameters from the request into the targets.\n\n@param servletRequest the request\n@param targets the targets"}
{"ID": 722, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void injectUploadedFiles(final HttpServletRequest servletRequest, final Targets targets) { if (!(servletRequest instanceof MultipartRequestWrapper)) { return; } final MultipartRequestWrapper multipartRequest = (MultipartRequestWrapper) servletRequest; if (!multipartRequest.isMultipart()) { return; } final Enumeration<String> paramNames = multipartRequest.getFileParameterNames(); while (paramNames.hasMoreElements()) { final String paramName = paramNames.nextElement(); if (servletRequest.getAttribute(paramName) != null) { continue; } targets.forEachTargetAndIn(this, (target, in) -> { final String name = in.matchedName(paramName); if (name != null) { final FileUpload[] paramValues = multipartRequest.getFiles(paramName); if (ignoreInvalidUploadFiles) { for (int j = 0; j < paramValues.length; j++) { final FileUpload paramValue = paramValues[j]; if ((!paramValue.isValid()) || (!paramValue.isUploaded())) { paramValues[j] = null; } } } final Object value = (paramValues.length == 1 ? paramValues[0] : paramValues); target.writeValue(name, value, true); } }); } } \n### Response:", "ground_truth": "Inject uploaded files from multipart request parameters.", "predict": "Inject uploaded files.\n\n@param servletRequest the servlet request\n@param targets the targets"}
{"ID": 723, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String convertPropertyNameToColumnName(final String propertyName) { StringBuilder tableName = new StringBuilder(propertyName.length() * 2); if (splitCamelCase) { String convertedTableName = Format.fromCamelCase(propertyName, separatorChar); tableName.append(convertedTableName); } else { tableName.append(propertyName); } if (!changeCase) { return tableName.toString(); } return uppercase ? toUppercase(tableName).toString() : toLowercase(tableName).toString(); } \n### Response:", "ground_truth": "Converts property name to column name.", "predict": "Convert property name to column name.\n\n@param propertyName property name\n@return column name"}
{"ID": 724, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String convertColumnNameToPropertyName(final String columnName) { StringBuilder propertyName = new StringBuilder(columnName.length()); int len = columnName.length(); if (splitCamelCase) { boolean toUpper = false; for (int i = 0; i < len; i++) { char c = columnName.charAt(i); if (c == separatorChar) { toUpper = true; continue; } if (toUpper) { propertyName.append(Character.toUpperCase(c)); toUpper = false; } else { propertyName.append(Character.toLowerCase(c)); } } return propertyName.toString(); } return columnName; } \n### Response:", "ground_truth": "Converts column name to property name.", "predict": "Convert column name to property name.\n\n@param columnName column name\n@return property name"}
{"ID": 725, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String applyToColumnName(final String columnName) { String propertyName = convertColumnNameToPropertyName(columnName); return convertPropertyNameToColumnName(propertyName); } \n### Response:", "ground_truth": "Applies column naming strategy to given column name hint.\nReturns full column name.", "predict": "Converts the column name to a property name.\n\n@param columnName the column name\n@return the property name"}
{"ID": 726, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void storeValue(final PreparedStatement st, final int index, final Object value, final int dbSqlType) throws SQLException { T t = TypeConverterManager.get().convertType(value, sqlType); set(st, index, t, dbSqlType); } \n### Response:", "ground_truth": "Stores value in database. Value is casted to sql type.", "predict": "Store a value into the given index of the prepared statement.\n\n@param st\n@param index\n@param value\n@param dbSqlType\n@throws SQLException"}
{"ID": 727, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"unchecked\"}) protected <E> E prepareGetValue(final T t, final Class<E> destinationType) { if (t == null) { return null; } if (destinationType == null) { return (E) t; } return TypeConverterManager.get().convertType(t, destinationType); } \n### Response:", "ground_truth": "Once when value is read from result set, prepare it to match destination type.\n@param t get value\n@param destinationType destination type", "predict": "Prepares the value to be converted to the given destination type.\n\n@param t the value to convert\n@param destinationType the destination type\n@return the value"}
{"ID": 728, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Set<T> getAll() { final Set<T> set = new HashSet<>(wrappers.size()); set.addAll(wrappers.values()); return set; } \n### Response:", "ground_truth": "Returns all action wrappers. Returns a copy in new set.", "predict": "Returns a set of all the wrappers.\n\n@return a set of all the wrappers"}
{"ID": 729, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public T resolve(final Class<? extends T> wrapperClass) { String wrapperClassName = wrapperClass.getName(); T wrapper = lookup(wrapperClassName); if (wrapper == null) { wrapper = createWrapper(wrapperClass); initializeWrapper(wrapper); wrappers.put(wrapperClassName, wrapper); } return wrapper; } \n### Response:", "ground_truth": "Resolves single wrapper. Creates new wrapper instance if not already registered.\nDoes not expand the wrappers.", "predict": "Resolves the given wrapper class and returns it.\n\n@param wrapperClass the wrapper class to resolve\n@return the resolved wrapper class"}
{"ID": 730, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected <R extends T> R createWrapper(final Class<R> wrapperClass) { try { return ClassUtil.newInstance(wrapperClass); } catch (Exception ex) { throw new MadvocException(\"Invalid Madvoc wrapper: \" + wrapperClass, ex); } } \n### Response:", "ground_truth": "Creates new wrapper.", "predict": "Create a wrapper class for the given class.\n\n@param wrapperClass the wrapper class\n@return the wrapper class"}
{"ID": 731, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String separatorsToSystem(final String path) { if (path == null) { return null; } if (SYSTEM_SEPARATOR == WINDOWS_SEPARATOR) { return separatorsToWindows(path); } else { return separatorsToUnix(path); } } \n### Response:", "ground_truth": "Converts all separators to the system separator.\n\n@param path  the path to be changed, null ignored\n@return the updated path", "predict": "Convert separators to system.\n\n@param path the path\n@return the string"}
{"ID": 732, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static String doGetPath(final String filename, final int separatorAdd) { if (filename == null) { return null; } int prefix = getPrefixLength(filename); if (prefix < 0) { return null; } int index = indexOfLastSeparator(filename); int endIndex = index + separatorAdd; if (prefix >= filename.length() || index < 0 || prefix >= endIndex) { return StringPool.EMPTY; } return filename.substring(prefix, endIndex); } \n### Response:", "ground_truth": "Does the work of getting the path.\n\n@param filename  the filename\n@param separatorAdd  0 to omit the end separator, 1 to return it\n@return the path", "predict": "Get the path from the given filename.\n\n@param filename the filename\n@param separatorAdd the separator to add\n@return the path"}
{"ID": 733, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String[] split(final String filename) { String prefix = getPrefix(filename); if (prefix == null) { prefix = StringPool.EMPTY; } int lastSeparatorIndex = indexOfLastSeparator(filename); int lastExtensionIndex = indexOfExtension(filename); String path; String baseName; String extension; if (lastSeparatorIndex == -1) { path = StringPool.EMPTY; if (lastExtensionIndex == -1) { baseName = filename.substring(prefix.length()); extension = StringPool.EMPTY; } else { baseName = filename.substring(prefix.length(), lastExtensionIndex); extension = filename.substring(lastExtensionIndex + 1); } } else { path = filename.substring(prefix.length(), lastSeparatorIndex + 1); if (lastExtensionIndex == -1) { baseName = filename.substring(prefix.length() + path.length()); extension = StringPool.EMPTY; } else { baseName = filename.substring(prefix.length() + path.length(), lastExtensionIndex); extension = filename.substring(lastExtensionIndex + 1); } } return new String[] {prefix, path, baseName, extension}; } \n### Response:", "ground_truth": "Splits filename into a array of four Strings containing prefix, path, basename and extension.\nPath will contain ending separator.", "predict": "Splits a filename into a path, base name and extension.\n\n@param filename the filename to split\n@return the path, base name and extension"}
{"ID": 734, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String relativePath(final String targetPath, final String basePath) { return new File(basePath).toPath().relativize(new File(targetPath).toPath()).toString(); } \n### Response:", "ground_truth": "Calculates relative path of target path on base path.", "predict": "Returns the relative path of the given path relative to the given base path.\n\n@param targetPath the path to be relative to the given base path\n@param basePath the base path\n@return the relative path"}
{"ID": 735, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public WebApp registerComponent(final Class<?> madvocComponent) { Objects.requireNonNull(madvocComponent); madvocComponents.add(ClassConsumer.of(madvocComponent)); return this; } \n### Response:", "ground_truth": "Registers additional Madvoc components after the registration of default components.", "predict": "Register a component.\n\n@param madvocComponent the component to register\n@return the webapp"}
{"ID": 736, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <A extends ActionConfig> WebApp withActionConfig(final Class<A> actionConfigType, final Consumer<A> actionConfigConsumer) { withRegisteredComponent(ActionConfigManager.class, acm -> acm.with(actionConfigType, actionConfigConsumer)); return this; } \n### Response:", "ground_truth": "Configures the action configurations.", "predict": "Wraps the action config consumer with the webapp.\n\n@param actionConfigType the action config type\n@param actionConfigConsumer the action config consumer\n@return the webapp"}
{"ID": 737, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public WebApp start() { log = LoggerFactory.getLogger(WebApp.class); log.debug(\"Initializing Madvoc WebApp\"); //// params & props for (final Map<String, Object> params : paramsList) { madvocContainer.defineParams(params); } for (final Props props : propsList) { madvocContainer.defineParams(props); } propsList = null; //// components registerMadvocComponents(); madvocComponents.forEach( madvocComponent -> madvocContainer.registerComponent(madvocComponent.type(), madvocComponent.consumer())); madvocComponents = null; madvocComponentInstances.forEach(madvocContainer::registerComponentInstance); madvocComponentInstances = null; configureDefaults(); //// listeners madvocContainer.fireEvent(Init.class); //// component configuration componentConfigs.accept(madvocContainer); componentConfigs = null; initialized(); madvocContainer.fireEvent(Start.class); if (!madvocRouterConsumers.isEmpty()) { final MadvocRouter madvocRouter = MadvocRouter.create(); madvocContainer.registerComponentInstance(madvocRouter); madvocRouterConsumers.accept(madvocRouter); } madvocRouterConsumers = null; started(); madvocContainer.fireEvent(Ready.class); ready(); return this; } \n### Response:", "ground_truth": "Initializes and starts web application.", "predict": "Starts the WebApp."}
{"ID": 738, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void configureDefaults() { final ActionConfigManager actionConfigManager = madvocContainer.lookupComponent(ActionConfigManager.class); actionConfigManager.registerAnnotation(Action.class); actionConfigManager.registerAnnotation(RestAction.class); } \n### Response:", "ground_truth": "Configure defaults.", "predict": "Configure the action configuration."}
{"ID": 739, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void registerMadvocComponents() { if (madvocContainer == null) { throw new MadvocException(\"Madvoc WebApp not initialized.\"); } log.debug(\"Registering Madvoc WebApp components\"); madvocContainer.registerComponent(MadvocEncoding.class); madvocContainer.registerComponentInstance(new ServletContextProvider(servletContext)); madvocContainer.registerComponent(ActionConfigManager.class); madvocContainer.registerComponent(ActionMethodParamNameResolver.class); madvocContainer.registerComponent(ActionMethodParser.class); madvocContainer.registerComponent(ActionPathRewriter.class); madvocContainer.registerComponent(ActionsManager.class); madvocContainer.registerComponent(ContextInjectorComponent.class); madvocContainer.registerComponent(InterceptorsManager.class); madvocContainer.registerComponent(FiltersManager.class); madvocContainer.registerComponent(MadvocController.class); madvocContainer.registerComponent(RootPackages.class); madvocContainer.registerComponent(ResultsManager.class); madvocContainer.registerComponent(ResultMapper.class); madvocContainer.registerComponent(ScopeResolver.class); madvocContainer.registerComponent(ScopeDataInspector.class); madvocContainer.registerComponent(AsyncActionExecutor.class); madvocContainer.registerComponent(FileUploader.class); } \n### Response:", "ground_truth": "Registers default Madvoc components.", "predict": "Registers the Madvoc components."}
{"ID": 740, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ClassScanner excludeJars(final String... excludedJars) { for (final String excludedJar : excludedJars) { rulesJars.exclude(excludedJar); } return this; } \n### Response:", "ground_truth": "Specify excluded jars.", "predict": "Excludes a list of jar files from scanning.\n\n@param excludedJars the jar files to exclude\n@return the Scanner instance"}
{"ID": 741, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ClassScanner includeJars(final String... includedJars) { for (final String includedJar : includedJars) { rulesJars.include(includedJar); } return this; } \n### Response:", "ground_truth": "Specify included jars.", "predict": "Adds the specified Jars to the scan.\n\n@param includedJars the Jars to include\n@return the Scanner instance"}
{"ID": 742, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ClassScanner includeEntries(final String... includedEntries) { for (final String includedEntry : includedEntries) { rulesEntries.include(includedEntry); } return this; } \n### Response:", "ground_truth": "Sets included set of names that will be considered during configuration.\n@see InExRules", "predict": "Include entries from the given list of entries.\n\n@param includedEntries the entries to include\n@return the scanner"}
{"ID": 743, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ClassScanner excludeEntries(final String... excludedEntries) { for (final String excludedEntry : excludedEntries) { rulesEntries.exclude(excludedEntry); } return this; } \n### Response:", "ground_truth": "Sets excluded names that narrows included set of packages.\n@see InExRules", "predict": "Excludes entries from scanning.\n\n@param excludedEntries the entries to exclude\n@return the scanner"}
{"ID": 744, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void scanJarFile(final File file) { final ZipFile zipFile; try { zipFile = new ZipFile(file); } catch (IOException ioex) { if (!ignoreException) { throw new FindFileException(\"Invalid zip: \" + file.getName(), ioex); } return; } final Enumeration entries = zipFile.entries(); while (entries.hasMoreElements()) { final ZipEntry zipEntry = (ZipEntry) entries.nextElement(); final String zipEntryName = zipEntry.getName(); try { if (StringUtil.endsWithIgnoreCase(zipEntryName, CLASS_FILE_EXT)) { final String entryName = prepareEntryName(zipEntryName, true); final ClassPathEntry classPathEntry = new ClassPathEntry(entryName, zipFile, zipEntry); try { scanEntry(classPathEntry); } finally { classPathEntry.closeInputStream(); } } else if (includeResources) { final String entryName = prepareEntryName(zipEntryName, false); final ClassPathEntry classPathEntry = new ClassPathEntry(entryName, zipFile, zipEntry); try { scanEntry(classPathEntry); } finally { classPathEntry.closeInputStream(); } } } catch (RuntimeException rex) { if (!ignoreException) { ZipUtil.close(zipFile); throw rex; } } } ZipUtil.close(zipFile); } \n### Response:", "ground_truth": "Scans classes inside single JAR archive. Archive is scanned as a zip file.\n@see #onEntry(ClassPathEntry)", "predict": "Scans a jar file and returns the class path entries.\n\n@param file the jar file to scan"}
{"ID": 745, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void scanClassPath(final File root) { String rootPath = root.getAbsolutePath(); if (!rootPath.endsWith(File.separator)) { rootPath += File.separatorChar; } final FindFile ff = FindFile.create().includeDirs(false).recursive(true).searchPath(rootPath); File file; while ((file = ff.nextFile()) != null) { final String filePath = file.getAbsolutePath(); try { if (StringUtil.endsWithIgnoreCase(filePath, CLASS_FILE_EXT)) { scanClassFile(filePath, rootPath, file, true); } else if (includeResources) { scanClassFile(filePath, rootPath, file, false); } } catch (RuntimeException rex) { if (!ignoreException) { throw rex; } } } } \n### Response:", "ground_truth": "Scans single classpath directory.\n@see #onEntry(ClassPathEntry)", "predict": "Scans the class path and returns the class name.\n\n@param root the root directory to scan"}
{"ID": 746, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static byte[] bytecodeSignatureOfType(final Class type) { final String name = 'L' + type.getName().replace('.', '/') + ';'; return name.getBytes(); } \n### Response:", "ground_truth": "Returns type signature bytes used for searching in class file.", "predict": "Returns the bytecode signature for the given type.\n\n@param type the type\n@return the bytecode signature"}
{"ID": 747, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ClassScanner scan(final String... paths) { for (final String path : paths) { filesToScan.add(new File(path)); } return this; } \n### Response:", "ground_truth": "Scans provided paths.", "predict": "Scans the specified paths.\n\n@param paths the paths to scan\n@return the Scanner instance"}
{"ID": 748, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void start() { if (detectEntriesMode) { rulesEntries.detectMode(); } filesToScan.forEach(file -> { final String path = file.getAbsolutePath(); if (StringUtil.endsWithIgnoreCase(path, JAR_FILE_EXT)) { if (!acceptJar(file)) { return; } scanJarFile(file); } else if (file.isDirectory()) { scanClassPath(file); } }); } \n### Response:", "ground_truth": "Starts with the scanner.", "predict": "Start scanning the classpath."}
{"ID": 749, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected JtxTransaction createNewTransaction(final JtxTransactionMode tm, final Object scope, final boolean active) { return new DbJtxTransaction(this, tm, scope, active); } \n### Response:", "ground_truth": "Builds new transaction instance.", "predict": "Create a new transaction.\n\n@param tm transaction mode\n@param scope transaction scope\n@param active active\n@return new transaction"}
{"ID": 750, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public <S extends MadvocScope> S defaultOrScopeType(final Class<S> scopeClass) { if (scopeClass == null) { return (S) getOrInitScope(RequestScope.class); } return (S) getOrInitScope(scopeClass); } \n### Response:", "ground_truth": "Lookups the scope instance of given scope annotation.\nIf instance does not exist, it will be created, cached and returned.", "predict": "Get or initialize the scope type.\n\n@param scopeClass the scope type\n@return the scope type"}
{"ID": 751, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected MadvocScope getOrInitScope(final Class<? extends MadvocScope> madvocScopeType) { for (final MadvocScope s : allScopes) { if (s.getClass().equals(madvocScopeType)) { return s; } } // new scope detected final MadvocScope newScope; try { newScope = madpc.createBean(madvocScopeType); } catch (Exception ex) { throw new MadvocException(\"Unable to create scope: \" + madvocScopeType, ex); } allScopes.add(newScope); return newScope; } \n### Response:", "ground_truth": "Performs search for the scope class and returns it's instance.", "predict": "Returns the scope of the given type. If no scope is found, a new scope is\ncreated.\n\n@param madvocScopeType the type of the scope to get\n@return the scope of the given type"}
{"ID": 752, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void forScope(final Class<? extends MadvocScope> scopeType, final Consumer<MadvocScope> madvocScopeConsumer) { final MadvocScope scope = getOrInitScope(scopeType); madvocScopeConsumer.accept(scope); } \n### Response:", "ground_truth": "Finds a given scope and consumes it.", "predict": "Obtains a MadvocScope instance for a given scope type.\n\n@param scopeType the scope type\n@param madvocScopeConsumer the consumer to be invoked when the scope is created"}
{"ID": 753, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static byte[] decode(final char[] arr) { int length = arr.length; if (length == 0) { return new byte[0]; } int sndx = 0, endx = length - 1; int pad = arr[endx] == '=' ? (arr[endx - 1] == '=' ? 2 : 1) : 0; int cnt = endx - sndx + 1; int sepCnt = length > 76 ? (arr[76] == '\\r' ? cnt / 78 : 0) << 1 : 0; int len = ((cnt - sepCnt) * 6 >> 3) - pad; byte[] dest = new byte[len]; int d = 0; for (int cc = 0, eLen = (len / 3) * 3; d < eLen;) { int i = INV[arr[sndx++]] << 18 | INV[arr[sndx++]] << 12 | INV[arr[sndx++]] << 6 | INV[arr[sndx++]]; dest[d++] = (byte) (i >> 16); dest[d++] = (byte) (i >> 8); dest[d++] = (byte) i; if (sepCnt > 0 && ++cc == 19) { sndx += 2; cc = 0; } } if (d < len) { int i = 0; for (int j = 0; sndx <= endx - pad; j++) { i |= INV[arr[sndx++]] << (18 - j * 6); } for (int r = 16; d < len; r -= 8) { dest[d++] = (byte) (i >> r); } } return dest; } \n### Response:", "ground_truth": "Decodes a BASE64 encoded char array.", "predict": "Decodes a character array into a byte array.\n\n@param arr the character array\n@return the byte array"}
{"ID": 754, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"unchecked\"}) public static String prepareCsrfToken(final HttpSession session, final int timeToLive) { Set<Token> tokenSet = (Set<Token>) session.getAttribute(CSRF_TOKEN_SET); if (tokenSet == null) { tokenSet = new HashSet<>(); session.setAttribute(CSRF_TOKEN_SET, tokenSet); } String value; boolean unique; do { value = RandomString.get().randomAlphaNumeric(32); assureSize(tokenSet); unique = tokenSet.add(new Token(value, timeToLive)); } while (!unique); return value; } \n### Response:", "ground_truth": "Generates new CSRF token and puts it in the session. Returns generated token value.", "predict": "Prepare a CSRF token.\n\n@param session the session\n@param timeToLive the time to live\n@return the token"}
{"ID": 755, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected static void assureSize(final Set<Token> tokenSet) { if (tokenSet.size() < maxTokensPerSession) { return; } long validUntilMin = Long.MAX_VALUE; Token tokenToRemove = null; Iterator<Token> iterator = tokenSet.iterator(); while (iterator.hasNext()) { Token token = iterator.next(); if (token.isExpired()) { iterator.remove(); continue; } if (token.validUntil < validUntilMin) { validUntilMin = token.validUntil; tokenToRemove = token; } } if ((tokenToRemove != null) && (tokenSet.size() >= maxTokensPerSession)) { tokenSet.remove(tokenToRemove); } } \n### Response:", "ground_truth": "Removes expired tokens if token set is full.\n@see #setMaxTokensPerSession(int)", "predict": "Remove expired tokens from the set.\n\n@param tokenSet the set of tokens to remove"}
{"ID": 756, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"unchecked\"}) public static boolean checkCsrfToken(final HttpSession session, final String tokenValue) { Set<Token> tokenSet = (Set<Token>) session.getAttribute(CSRF_TOKEN_SET); if ((tokenSet == null) && (tokenValue == null)) { return true; } if ((tokenSet == null) || (tokenValue == null)) { return false; } boolean found = false; Iterator<Token> it = tokenSet.iterator(); while (it.hasNext()) { Token t = it.next(); if (t.isExpired()) { it.remove(); continue; } if (t.getValue().equals(tokenValue)) { it.remove(); found = true; } } return found; } \n### Response:", "ground_truth": "Checks token value.\nC", "predict": "Checks if a CSRF token is present in the given session.\n\n@param session the session\n@param tokenValue the token value\n@return true if the token is present, false otherwise"}
{"ID": 757, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static BeanCopy from(final Object source) { BeanCopy beanCopy = new BeanCopy(source); beanCopy.isSourceMap = source instanceof Map; return beanCopy; } \n### Response:", "ground_truth": "Defines source, detects a map.", "predict": "Create a bean copy from the given source object.\n\n@param source the source object\n@return a bean copy"}
{"ID": 758, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void copy() { beanUtil = new BeanUtilBean() .declared(declared) .forced(forced) .silent(true); visit(); } \n### Response:", "ground_truth": "Performs the copying.", "predict": "Creates a copy of this bean."}
{"ID": 759, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected boolean visitProperty(String name, final Object value) { if (isTargetMap) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET; } beanUtil.setProperty(destination, name, value); return true; } \n### Response:", "ground_truth": "Copies single property to the destination.\nExceptions are ignored, so copying continues if\ndestination does not have some of the sources properties.", "predict": "Visits a property.\n\n@param name the name of the property\n@param value the value of the property\n@return true, if successful"}
{"ID": 760, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void init(final TemplateData templateData) { super.init(templateData); if (entity != null) { ded = lookupType(entity); } else { Object object = templateData.getObjectReference(entityName); if (object != null) { ded = lookupType(resolveClass(object)); } else { ded = lookupName(entityName); } } String tableReference = this.tableReference; if (tableReference == null) { tableReference = tableAlias; } if (tableReference == null) { tableReference = entityName; } if (tableReference == null) { tableReference = ded.getEntityName(); } templateData.registerTableReference(tableReference, ded, tableAlias); } \n### Response:", "ground_truth": "Resolves and registers table references.", "predict": "Initializes the template.\n\n@param templateData the template data"}
{"ID": 761, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public <S extends Scope> S resolveScope(final Class<S> scopeType) { S scope = (S) scopes.get(scopeType); if (scope == null) { try { scope = newInternalInstance(scopeType, (PetiteContainer) this); } catch (Exception ex) { throw new PetiteException(\"Invalid Petite scope: \" + scopeType.getName(), ex); } registerScope(scopeType, scope); scopes.put(scopeType, scope); } return scope; } \n### Response:", "ground_truth": "Resolves and registers scope from a scope type.", "predict": "Resolves a scope type.\n\n@param <S> scope type\n@param scopeType scope type\n@return resolved scope"}
{"ID": 762, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> BeanDefinition<T> registerPetiteBean( final Class<T> type, String name, Class<? extends Scope> scopeType, WiringMode wiringMode, final boolean define, final Consumer<T> consumer ) { if (name == null) { name = resolveBeanName(type); } if (wiringMode == null) { wiringMode = annotationResolver.resolveBeanWiringMode(type); } if (wiringMode == WiringMode.DEFAULT) { wiringMode = petiteConfig.getDefaultWiringMode(); } if (scopeType == null) { scopeType = annotationResolver.resolveBeanScopeType(type); } if (scopeType == null) { scopeType = SingletonScope.class; } // remove existing bean BeanDefinition existing = removeBean(name); if (existing != null) { if (petiteConfig.getDetectDuplicatedBeanNames()) { throw new PetiteException( \"Duplicated bean name detected while registering class '\" + type.getName() + \"'. Petite bean class '\" + existing.type.getName() + \"' is already registered with the name: \" + name); } } // check if type is valid if (type.isInterface()) { throw new PetiteException(\"PetiteBean can not be an interface: \" + type.getName()); } // registration if (log.isDebugEnabled()) { log.info(\"Petite bean: [\" + name + \"] --> \" + type.getName() + \" @ \" + scopeType.getSimpleName() + \":\" + wiringMode.toString()); } // register Scope scope = resolveScope(scopeType); BeanDefinition<T> beanDefinition = createBeanDefinitionForRegistration(name, type, scope, wiringMode, consumer); registerBean(name, beanDefinition); // providers ProviderDefinition[] providerDefinitions = petiteResolvers.resolveProviderDefinitions(type, name); if (providerDefinitions != null) { for (ProviderDefinition providerDefinition : providerDefinitions) { providers.put(providerDefinition.name, providerDefinition); } } // define if (define) { beanDefinition.ctor = petiteResolvers.resolveCtorInjectionPoint(beanDefinition.type()); beanDefinition.properties = PropertyInjectionPoint.EMPTY; beanDefinition.methods = MethodInjectionPoint.EMPTY; beanDefinition.initMethods = InitMethodPoint.EMPTY; beanDefinition.destroyMethods = DestroyMethodPoint.EMPTY; } // return return beanDefinition; } \n### Response:", "ground_truth": "Registers or defines a bean.\n\n@param type bean type, must be specified\n@param name bean name, if <code>null</code> it will be resolved from the class (name or annotation)\n@param scopeType bean scope, if <code>null</code> it will be resolved from the class (annotation or default one)\n@param wiringMode wiring mode, if <code>null</code> it will be resolved from the class (annotation or default one)\n@param define when set to <code>true</code> bean will be defined - all injection points will be set to none", "predict": "Registers a bean definition for PetiteBean.\n\n@param type the bean type\n@param name the bean name\n@param scopeType the scope type\n@param wiringMode the wiring mode\n@param define the define\n@param consumer the consumer\n@return the bean definition"}
{"ID": 763, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void registerBean(final String name, final BeanDefinition beanDefinition) { beans.put(name, beanDefinition); if (!petiteConfig.isUseAltBeanNames()) { return; } Class type = beanDefinition.type(); if (annotationResolver.beanHasAnnotationName(type)) { return; } Class[] interfaces = ClassUtil.resolveAllInterfaces(type); for (Class anInterface : interfaces) { String altName = annotationResolver.resolveBeanName(anInterface, petiteConfig.getUseFullTypeNames()); if (name.equals(altName)) { continue; } if (beans.containsKey(altName)) { continue; } if (beansAlt.containsKey(altName)) { BeanDefinition existing = beansAlt.get(altName); if (existing != null) { beansAlt.put(altName, null); // store null as value to mark that alt name is duplicate } } else { beansAlt.put(altName, beanDefinition); } } } \n### Response:", "ground_truth": "Registers bean definition by putting it in the beans map. If bean does\nnot have petite name explicitly defined, alternative bean names\nwill be registered.", "predict": "Registers a bean definition for the given name.\n\n@param name the name of the bean\n@param beanDefinition the bean definition"}
{"ID": 764, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void removeBean(final Class type) { // collect bean names Set<String> beanNames = new HashSet<>(); for (BeanDefinition def : beans.values()) { if (def.type.equals(type)) { beanNames.add(def.name); } } // remove collected bean names for (String beanName : beanNames) { removeBean(beanName); } } \n### Response:", "ground_truth": "Removes all petite beans of provided type. Bean name is not resolved from a type!\nInstead, all beans are iterated and only beans with equal types are removed.\n@see #removeBean(String)", "predict": "Removes a bean definition from the list of beans.\n\n@param type the type of the bean to remove"}
{"ID": 765, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String[] resolveBeanNamesForType(final Class type) { String[] beanNames = beanCollections.get(type); if (beanNames != null) { return beanNames; } ArrayList<String> list = new ArrayList<>(); for (Map.Entry<String, BeanDefinition> entry : beans.entrySet()) { BeanDefinition beanDefinition = entry.getValue(); if (ClassUtil.isTypeOf(beanDefinition.type, type)) { String beanName = entry.getKey(); list.add(beanName); } } if (list.isEmpty()) { beanNames = StringPool.EMPTY_ARRAY; } else { beanNames = list.toArray(new String[0]); } beanCollections.put(type, beanNames); return beanNames; } \n### Response:", "ground_truth": "Resolves bean names for give type.", "predict": "Resolve bean names for type.\n\n@param type the type\n@return the string array"}
{"ID": 766, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerPetiteCtorInjectionPoint(final String beanName, final Class[] paramTypes, final String[] references) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); Constructor constructor = null; if (paramTypes == null) { CtorDescriptor[] ctors = cd.getAllCtorDescriptors(); if (ctors != null && ctors.length > 0) { if (ctors.length > 1) { throw new PetiteException(ctors.length + \" suitable constructor found as injection point for: \" + beanDefinition.type.getName()); } constructor = ctors[0].getConstructor(); } } else { CtorDescriptor ctorDescriptor = cd.getCtorDescriptor(paramTypes, true); if (ctorDescriptor != null) { constructor = ctorDescriptor.getConstructor(); } } if (constructor == null) { throw new PetiteException(\"Constructor not found: \" + beanDefinition.type.getName()); } BeanReferences[] ref = referencesResolver.resolveReferenceFromValues(constructor, references); beanDefinition.ctor = new CtorInjectionPoint(constructor, ref); } \n### Response:", "ground_truth": "Registers constructor injection point.\n\n@param beanName bean name\n@param paramTypes constructor parameter types, may be <code>null</code>\n@param references references for arguments", "predict": "Register a constructor as a PetiteCtorInjectionPoint.\n\n@param beanName the bean name\n@param paramTypes the parameter types\n@param references the references"}
{"ID": 767, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerPetitePropertyInjectionPoint(final String beanName, final String property, final String reference) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); PropertyDescriptor propertyDescriptor = cd.getPropertyDescriptor(property, true); if (propertyDescriptor == null) { throw new PetiteException(\"Property not found: \" + beanDefinition.type.getName() + '#' + property); } BeanReferences ref = referencesResolver.resolveReferenceFromValue(propertyDescriptor, reference); PropertyInjectionPoint pip = new PropertyInjectionPoint(propertyDescriptor, ref); beanDefinition.addPropertyInjectionPoint(pip); } \n### Response:", "ground_truth": "Registers property injection point.\n\n@param beanName bean name\n@param property property name\n@param reference explicit injection reference, may be <code>null</code>", "predict": "Register a new PetitePropertyInjectionPoint.\n\n@param beanName the bean name\n@param property the property\n@param reference the reference"}
{"ID": 768, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerPetiteSetInjectionPoint(final String beanName, final String property) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); PropertyDescriptor propertyDescriptor = cd.getPropertyDescriptor(property, true); if (propertyDescriptor == null) { throw new PetiteException(\"Property not found: \" + beanDefinition.type.getName() + '#' + property); } SetInjectionPoint sip = new SetInjectionPoint(propertyDescriptor); beanDefinition.addSetInjectionPoint(sip); } \n### Response:", "ground_truth": "Registers set injection point.\n\n@param beanName bean name\n@param property set property name", "predict": "Register a set injection point for a bean.\n\n@param beanName the bean name\n@param property the property"}
{"ID": 769, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerPetiteMethodInjectionPoint(final String beanName, final String methodName, final Class[] arguments, final String[] references) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); Method method = null; if (arguments == null) { MethodDescriptor[] methods = cd.getAllMethodDescriptors(methodName); if (methods != null && methods.length > 0) { if (methods.length > 1) { throw new PetiteException(methods.length + \" suitable methods found as injection points for: \" + beanDefinition.type.getName() + '#' + methodName); } method = methods[0].getMethod(); } } else { MethodDescriptor md = cd.getMethodDescriptor(methodName, arguments, true); if (md != null) { method = md.getMethod(); } } if (method == null) { throw new PetiteException(\"Method not found: \" + beanDefinition.type.getName() + '#' + methodName); } BeanReferences[] ref = referencesResolver.resolveReferenceFromValues(method, references); MethodInjectionPoint mip = new MethodInjectionPoint(method, ref); beanDefinition.addMethodInjectionPoint(mip); } \n### Response:", "ground_truth": "Registers method injection point.\n\n@param beanName bean name\n@param methodName method name\n@param arguments method arguments, may be <code>null</code>\n@param references injection references", "predict": "Register a method injection point for the given bean name and method name.\n\n@param beanName the bean name\n@param methodName the method name\n@param arguments the method arguments\n@param references the method references"}
{"ID": 770, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerPetiteInitMethods(final String beanName, final InitMethodInvocationStrategy invocationStrategy, String... initMethodNames) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); if (initMethodNames == null) { initMethodNames = StringPool.EMPTY_ARRAY; } int total = initMethodNames.length; InitMethodPoint[] initMethodPoints = new InitMethodPoint[total]; int i; for (i = 0; i < initMethodNames.length; i++) { MethodDescriptor md = cd.getMethodDescriptor(initMethodNames[i], ClassUtil.EMPTY_CLASS_ARRAY, true); if (md == null) { throw new PetiteException(\"Init method not found: \" + beanDefinition.type.getName() + '#' + initMethodNames[i]); } initMethodPoints[i] = new InitMethodPoint(md.getMethod(), i, invocationStrategy); } beanDefinition.addInitMethodPoints(initMethodPoints); } \n### Response:", "ground_truth": "Registers init method.\n\n@param beanName bean name\n@param invocationStrategy moment of invocation\n@param initMethodNames init method names", "predict": "Registers the given init method names for the given bean name.\n\n@param beanName the bean name\n@param invocationStrategy the invocation strategy\n@param initMethodNames the init method names"}
{"ID": 771, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerPetiteDestroyMethods(final String beanName, String... destroyMethodNames) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); if (destroyMethodNames == null) { destroyMethodNames = StringPool.EMPTY_ARRAY; } int total = destroyMethodNames.length; DestroyMethodPoint[] destroyMethodPoints = new DestroyMethodPoint[total]; int i; for (i = 0; i < destroyMethodNames.length; i++) { MethodDescriptor md = cd.getMethodDescriptor(destroyMethodNames[i], ClassUtil.EMPTY_CLASS_ARRAY, true); if (md == null) { throw new PetiteException(\"Destroy method not found: \" + beanDefinition.type.getName() + '#' + destroyMethodNames[i]); } destroyMethodPoints[i] = new DestroyMethodPoint(md.getMethod()); } beanDefinition.addDestroyMethodPoints(destroyMethodPoints); } \n### Response:", "ground_truth": "Registers destroy method.\n\n@param beanName bean name\n@param destroyMethodNames destroy method names", "predict": "Registers the destroy method names for the given bean.\n\n@param beanName the bean name\n@param destroyMethodNames the destroy method names"}
{"ID": 772, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerPetiteProvider(final String providerName, final String beanName, final String methodName, final Class[] arguments) { BeanDefinition beanDefinition = lookupBeanDefinition(beanName); if (beanDefinition == null) { throw new PetiteException(\"Bean not found: \" + beanName); } Class beanType = beanDefinition.type; ClassDescriptor cd = ClassIntrospector.get().lookup(beanType); MethodDescriptor md = cd.getMethodDescriptor(methodName, arguments, true); if (md == null) { throw new PetiteException(\"Provider method not found: \" + methodName); } ProviderDefinition providerDefinition = new ProviderDefinition(providerName, beanName, md.getMethod()); providers.put(providerName, providerDefinition); } \n### Response:", "ground_truth": "Registers instance method provider.\n\n@param providerName provider name\n@param beanName bean name\n@param methodName instance method name\n@param arguments method argument types", "predict": "Register a provider.\n\n@param providerName the name of the provider\n@param beanName the name of the bean\n@param methodName the name of the method\n@param arguments the arguments"}
{"ID": 773, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerPetiteProvider(final String providerName, final Class type, final String staticMethodName, final Class[] arguments) { ClassDescriptor cd = ClassIntrospector.get().lookup(type); MethodDescriptor md = cd.getMethodDescriptor(staticMethodName, arguments, true); if (md == null) { throw new PetiteException(\"Provider method not found: \" + staticMethodName); } ProviderDefinition providerDefinition = new ProviderDefinition(providerName, md.getMethod()); providers.put(providerName, providerDefinition); } \n### Response:", "ground_truth": "Registers static method provider.\n\n@param providerName provider name\n@param type class type\n@param staticMethodName static method name\n@param arguments method argument types", "predict": "Register a provider.\n\n@param providerName the name of the provider\n@param type the type of the provider\n@param staticMethodName the name of the static method\n@param arguments the arguments of the method"}
{"ID": 774, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void forEachBeanType(final Class type, final Consumer<String> beanNameConsumer) { forEachBean(bd -> { if (ClassUtil.isTypeOf(bd.type, type)) { beanNameConsumer.accept(bd.name); } }); } \n### Response:", "ground_truth": "Iterates all beans that are of given type.", "predict": "Iterates over all bean types and calls the given consumer for each type.\n\n@param type the type to iterate over\n@param beanNameConsumer the consumer to call for each bean type"}
{"ID": 775, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void defineParameters(final Map<?, ?> properties) { for (Map.Entry<?, ?> entry : properties.entrySet()) { defineParameter(entry.getKey().toString(), entry.getValue()); } } \n### Response:", "ground_truth": "Defines many parameters at once.", "predict": "Defines the parameters for the request.\n\n@param properties the parameters"}
{"ID": 776, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Object intercept(final ActionRequest actionRequest) throws Exception { printBefore(actionRequest); long startTime = System.currentTimeMillis(); Object result = null; try { result = actionRequest.invoke(); } catch (Exception ex) { result = \"<exception>\"; throw ex; } catch (Throwable th) { result = \"<throwable>\"; throw new Exception(th); } finally { long executionTime = System.currentTimeMillis() - startTime; printAfter(actionRequest, executionTime, result); } return result; } \n### Response:", "ground_truth": "Measure action invocation time.", "predict": "Intercepts the given request and returns the result.\n\n@param actionRequest the request to intercept\n@return the result of the request\n@throws Exception if the request fails"}
{"ID": 777, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int resolveJavaVersion(final int version) { final int javaVersionNumber = SystemUtil.info().getJavaVersionNumber(); final int platformVersion = javaVersionNumber - 8 + 52; return version > platformVersion ? version : platformVersion; } \n### Response:", "ground_truth": "Resolves Java version from current version.", "predict": "Resolve Java version.\n\n@param version the version\n@return the int"}
{"ID": 778, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void pushInt(final MethodVisitor mv, final int value) { if (value <= 5) { mv.visitInsn(ICONST_0 + value); } else if (value <= Byte.MAX_VALUE) { mv.visitIntInsn(BIPUSH, value); } else { mv.visitIntInsn(SIPUSH, value); } } \n### Response:", "ground_truth": "Pushes int value in an optimal way.", "predict": "Push an integer onto the stack.\n\n@param mv the method visitor to be visited\n@param value the value to be pushed"}
{"ID": 779, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void checkArgumentIndex(final MethodInfo methodInfo, final int argIndex) { if ((argIndex < 1) || (argIndex > methodInfo.getArgumentsCount())) { throw new ProxettaException(\"Invalid argument index: \" + argIndex); } } \n### Response:", "ground_truth": "Validates argument index.", "predict": "Checks the given argument index.\n\n@param methodInfo the method info\n@param argIndex the argument index"}
{"ID": 780, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String adviceFieldName(final String name, final int index) { return ProxettaNames.fieldPrefix + name + ProxettaNames.fieldDivider + index; } \n### Response:", "ground_truth": "Builds advice field name.", "predict": "Returns the advice field name for the given index.\n\n@param name the name of the field\n@param index the index of the field\n@return the advice field name"}
{"ID": 781, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String adviceMethodName(final String name, final int index) { return ProxettaNames.methodPrefix + name + ProxettaNames.methodDivider + index; } \n### Response:", "ground_truth": "Builds advice method name.", "predict": "Returns the advice method name.\n\n@param name the name of the method\n@param index the index of the method\n@return the advice method name"}
{"ID": 782, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void loadSpecialMethodArguments(final MethodVisitor mv, final MethodInfo methodInfo) { mv.visitVarInsn(ALOAD, 0); for (int i = 1; i <= methodInfo.getArgumentsCount(); i++) { loadMethodArgument(mv, methodInfo, i); } } \n### Response:", "ground_truth": "Loads all method arguments before INVOKESPECIAL call.", "predict": "Loads the special arguments for a method.\n\n@param mv the visitor to apply the transformation to\n@param methodInfo the method info to apply the transformation to"}
{"ID": 783, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void loadStaticMethodArguments(final MethodVisitor mv, final MethodInfo methodInfo) { for (int i = 0; i < methodInfo.getArgumentsCount(); i++) { loadMethodArgument(mv, methodInfo, i); } } \n### Response:", "ground_truth": "Loads all method arguments before INVOKESTATIC call.", "predict": "Load static method arguments.\n\n@param mv      the mv\n@param methodInfo the method info"}
{"ID": 784, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void loadVirtualMethodArguments(final MethodVisitor mv, final MethodInfo methodInfo) { for (int i = 1; i <= methodInfo.getArgumentsCount(); i++) { loadMethodArgument(mv, methodInfo, i); } } \n### Response:", "ground_truth": "Loads all method arguments before INVOKEVIRTUAL call.", "predict": "Load virtual method arguments.\n\n@param mv      the mv\n@param methodInfo the method info"}
{"ID": 785, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void loadMethodArgument(final MethodVisitor mv, final MethodInfo methodInfo, final int index) { int offset = methodInfo.getArgumentOffset(index); int type = methodInfo.getArgument(index).getOpcode(); switch (type) { case 'V': break; case 'B': case 'C': case 'S': case 'I': case 'Z': mv.visitVarInsn(ILOAD, offset); break; case 'J': mv.visitVarInsn(LLOAD, offset); break; case 'F': mv.visitVarInsn(FLOAD, offset); break; case 'D': mv.visitVarInsn(DLOAD, offset); break; default: mv.visitVarInsn(ALOAD, offset); } } \n### Response:", "ground_truth": "Loads one argument. Index is 1-based. No conversion occurs.", "predict": "Loads the given method argument.\n\n@param mv the visitor to use.\n@param methodInfo the method info.\n@param index the index of the argument."}
{"ID": 786, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void storeMethodArgument(final MethodVisitor mv, final MethodInfo methodInfo, final int index) { int offset = methodInfo.getArgumentOffset(index); int type = methodInfo.getArgument(index).getOpcode(); switch (type) { case 'V': break; case 'B': case 'C': case 'S': case 'I': case 'Z': mv.visitVarInsn(ISTORE, offset); break; case 'J': mv.visitVarInsn(LSTORE, offset); break; case 'F': mv.visitVarInsn(FSTORE, offset); break; case 'D': mv.visitVarInsn(DSTORE, offset); break; default: mv.visitVarInsn(ASTORE, offset); } } \n### Response:", "ground_truth": "Stores one argument. Index is 1-based. No conversion occurs.", "predict": "Store a method argument.\n\n@param mv the visitor to be called\n@param methodInfo the method info\n@param index the index of the argument"}
{"ID": 787, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void prepareReturnValue(final MethodVisitor mv, final MethodInfo methodInfo, int varOffset) { varOffset += methodInfo.getAllArgumentsSize(); switch (methodInfo.getReturnType().getOpcode()) { case 'V': mv.visitInsn(ACONST_NULL); break; case 'B': AsmUtil.valueOfByte(mv); break; case 'C': AsmUtil.valueOfCharacter(mv); break; case 'S': AsmUtil.valueOfShort(mv); break; case 'I': AsmUtil.valueOfInteger(mv); break; case 'Z': AsmUtil.valueOfBoolean(mv); break; case 'J': AsmUtil.valueOfLong(mv); break; case 'F': AsmUtil.valueOfFloat(mv); break; case 'D': AsmUtil.valueOfDouble(mv); break; } } \n### Response:", "ground_truth": "Prepares return value.", "predict": "Prepares the return value.\n\n@param mv the method visitor.\n@param methodInfo the method info.\n@param varOffset the var offset."}
{"ID": 788, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String createMethodSignaturesKey(final int access, final String methodName, final String description, final String className) { return new StringBand(7) .append(access) .append(COLON) .append(description) .append(StringPool.UNDERSCORE) .append(className) .append(StringPool.HASH) .append(methodName) .toString(); } \n### Response:", "ground_truth": "Creates unique key for method signatures map.", "predict": "Create a key for the method signature.\n\n@param access the access\n@param methodName the name of the method\n@param description the description of the method\n@param className the class name of the method\n@return the key"}
{"ID": 789, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void newArray(final MethodVisitor mv, final Class componentType) { if (componentType == int.class) { mv.visitIntInsn(NEWARRAY, T_INT); return; } if (componentType == long.class) { mv.visitIntInsn(NEWARRAY, T_LONG); return; } if (componentType == float.class) { mv.visitIntInsn(NEWARRAY, T_FLOAT); return; } if (componentType == double.class) { mv.visitIntInsn(NEWARRAY, T_DOUBLE); return; } if (componentType == byte.class) { mv.visitIntInsn(NEWARRAY, T_BYTE); return; } if (componentType == short.class) { mv.visitIntInsn(NEWARRAY, T_SHORT); return; } if (componentType == boolean.class) { mv.visitIntInsn(NEWARRAY, T_BOOLEAN); return; } if (componentType == char.class) { mv.visitIntInsn(NEWARRAY, T_CHAR); return; } mv.visitTypeInsn(ANEWARRAY, AsmUtil.typeToSignature(componentType)); } \n### Response:", "ground_truth": "Creates new array.", "predict": "Allocates a new array of the given type.\n\n@param mv the visitor to use.\n@param componentType the type of the array."}
{"ID": 790, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void storeIntoArray(final MethodVisitor mv, final Class componentType) { if (componentType == int.class) { mv.visitInsn(IASTORE); return; } if (componentType == long.class) { mv.visitInsn(LASTORE); return; } if (componentType == float.class) { mv.visitInsn(FASTORE); return; } if (componentType == double.class) { mv.visitInsn(DASTORE); return; } if (componentType == byte.class) { mv.visitInsn(BASTORE); return; } if (componentType == short.class) { mv.visitInsn(SASTORE); return; } if (componentType == boolean.class) { mv.visitInsn(BASTORE); return; } if (componentType == char.class) { mv.visitInsn(CASTORE); return; } mv.visitInsn(AASTORE); } \n### Response:", "ground_truth": "Stores element on stack into an array.", "predict": "Stores the given component type into the given array.\n\n@param mv the method visitor to be used\n@param componentType the type to be stored"}
{"ID": 791, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String extractEncoding(final String contentType, String defaultEncoding) { String encoding = extractEncoding(contentType); if (encoding == null) { if (defaultEncoding == null) { defaultEncoding = JoddCore.encoding; } encoding = defaultEncoding; } return encoding; } \n### Response:", "ground_truth": "Extracts encoding from a given content type.\n\n@param contentType     content type.\n@param defaultEncoding Default encoding to be used if extract returns {@code null}.\nIf defaultEncoding is {@code null}, {@link JoddCore#encoding} will be used.\n@return Encoding from the content type.\n@see #extractEncoding(String)", "predict": "Extract the encoding from the content type.\n\n@param contentType the content type\n@param defaultEncoding the default encoding\n@return the encoding"}
{"ID": 792, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isEmptyFlags(Flags flags) { if (flags == null) return true; Flags.Flag[] systemFlags = flags.getSystemFlags(); if (systemFlags != null && systemFlags.length > 0) { return false; } String[] userFlags = flags.getUserFlags(); if (userFlags != null && userFlags.length > 0) { return false; } return true; } \n### Response:", "ground_truth": "Check whether flags is a empty flags\n@param flags a flags of message to check\n@return whether the flags is empty", "predict": "Returns true if the given flags are empty.\n\n@param flags the flags to check\n@return true if the given flags are empty"}
{"ID": 793, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String resolveAuthBearerToken(final HttpServletRequest request) { String header = request.getHeader(HEADER_AUTHORIZATION); if (header == null) { return null; } int ndx = header.indexOf(\"Bearer \"); if (ndx == -1) { return null; } return header.substring(ndx + 7).trim(); } \n### Response:", "ground_truth": "Returns Bearer token.", "predict": "Resolve the auth token from the request header.\n\n@param request the request\n@return the auth token"}
{"ID": 794, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void requireAuthentication(final HttpServletResponse resp, final String realm) throws IOException { resp.setHeader(WWW_AUTHENTICATE, \"Basic realm=\\\"\" + realm + '\\\"'); resp.sendError(HttpServletResponse.SC_UNAUTHORIZED); } \n### Response:", "ground_truth": "Sends correct headers to require basic authentication for the given realm.", "predict": "Require authentication for the request.\n\n@param resp the response\n@param realm the realm\n@throws IOException unexpected error"}
{"ID": 795, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void prepareDownload(final HttpServletResponse response, final File file, final String mimeType) { if (!file.exists()) { throw new IllegalArgumentException(\"File not found: \" + file); } if (file.length() > Integer.MAX_VALUE) { throw new IllegalArgumentException(\"File too big: \" + file); } prepareResponse(response, file.getAbsolutePath(), mimeType, (int) file.length()); } \n### Response:", "ground_truth": "Prepares response for file download with provided mime type.", "predict": "Prepares a response for a download.\n\n@param response the http response\n@param file the file to download\n@param mimeType the mimeType of the file"}
{"ID": 796, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void prepareResponse(final HttpServletResponse response, final String fileName, String mimeType, final int fileSize) { if ((mimeType == null) && (fileName != null)) { String extension = FileNameUtil.getExtension(fileName); mimeType = MimeTypes.getMimeType(extension); } if (mimeType != null) { response.setContentType(mimeType); } if (fileSize >= 0) { response.setContentLength(fileSize); } // support internationalization // See https://tools.ietf.org/html/rfc6266#section-5 for more information. if (fileName != null) { String name = FileNameUtil.getName(fileName); String encodedFileName = URLCoder.encode(name); response.setHeader(CONTENT_DISPOSITION, \"attachment;filename=\\\"\" + name + \"\\\";filename*=utf8''\" + encodedFileName); } } \n### Response:", "ground_truth": "Prepares response for various provided data.\n\n@param response http response\n@param fileName file name, if full path then file name will be stripped, if null, will be ignored.\n@param mimeType mime type with optional charset, may be <code>null</code>\n@param fileSize if less then 0 it will be ignored", "predict": "Prepares the response for an attachment.\n\n@param response the response to be modified\n@param fileName the name of the attachment\n@param mimeType the mime type of the attachment\n@param fileSize the size of the attachment"}
{"ID": 797, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Cookie[] getAllCookies(final HttpServletRequest request, final String cookieName) { Cookie[] cookies = request.getCookies(); if (cookies == null) { return null; } ArrayList<Cookie> list = new ArrayList<>(cookies.length); for (Cookie cookie : cookies) { if (cookie.getName().equals(cookieName)) { list.add(cookie); } } if (list.isEmpty()) { return null; } return list.toArray(new Cookie[0]); } \n### Response:", "ground_truth": "Returns all cookies from client that matches provided name.\n@see #getCookie(javax.servlet.http.HttpServletRequest, String)", "predict": "Returns all cookies with the given name.\n\n@param request the request\n@param cookieName the cookie name\n@return the cookies"}
{"ID": 798, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String readRequestBodyFromReader(final HttpServletRequest request) throws IOException { BufferedReader buff = request.getReader(); StringWriter out = new StringWriter(); StreamUtil.copy(buff, out); return out.toString(); } \n### Response:", "ground_truth": "Reads HTTP request body using the request reader. Once body is read,\nit cannot be read again!", "predict": "Read the body of the request from the request reader.\n\n@param request the request\n@return the body of the request\n@throws IOException unexpected error"}
{"ID": 799, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String readRequestBodyFromStream(final HttpServletRequest request) throws IOException { String charEncoding = request.getCharacterEncoding(); if (charEncoding == null) { charEncoding = JoddCore.encoding; } CharArrayWriter charArrayWriter = new CharArrayWriter(); BufferedReader bufferedReader = null; try { InputStream inputStream = request.getInputStream(); if (inputStream != null) { bufferedReader = new BufferedReader(new InputStreamReader(inputStream, charEncoding)); StreamUtil.copy(bufferedReader, charArrayWriter); } else { return StringPool.EMPTY; } } finally { StreamUtil.close(bufferedReader); } return charArrayWriter.toString(); } \n### Response:", "ground_truth": "Reads HTTP request body using the request stream. Once body is read,\nit cannot be read again!", "predict": "Read the request body from the request stream.\n\n@param request the request\n@return the request body\n@throws IOException if an I/O error occurs"}
{"ID": 800, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void storeContextPath(final PageContext pageContext, final String contextPathVariableName) { String ctxPath = getContextPath(pageContext); HttpServletRequest request = (HttpServletRequest) pageContext.getRequest(); request.setAttribute(contextPathVariableName, ctxPath); ServletContext servletContext = pageContext.getServletContext(); servletContext.setAttribute(contextPathVariableName, ctxPath); } \n### Response:", "ground_truth": "Stores context path in server context and request scope.", "predict": "Store the context path in the request and the servlet context.\n\n@param pageContext the page context\n@param contextPathVariableName the variable name"}
{"ID": 801, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void storeContextPath(final ServletContext servletContext, final String contextPathVariableName) { String ctxPath = getContextPath(servletContext); servletContext.setAttribute(contextPathVariableName, ctxPath); } \n### Response:", "ground_truth": "Stores context path in page context and request scope.", "predict": "Store the context path in the servlet context.\n\n@param servletContext the servlet context\n@param contextPathVariableName the variable name"}
{"ID": 802, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean isGetParameter(final HttpServletRequest request, String name) { name = URLCoder.encodeQueryParam(name) + '='; String query = request.getQueryString(); String[] nameValuePairs = StringUtil.splitc(query, '&'); for (String nameValuePair : nameValuePairs) { if (nameValuePair.startsWith(name)) { return true; } } return false; } \n### Response:", "ground_truth": "Checks if some parameter is in GET parameters.", "predict": "Checks if the parameter is a GET parameter.\n\n@param request the request\n@param name the name of the parameter\n@return true if the parameter is a GET parameter, false otherwise"}
{"ID": 803, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String[] prepareParameters( final String[] paramValues, final boolean treatEmptyParamsAsNull, final boolean ignoreEmptyRequestParams) { if (treatEmptyParamsAsNull || ignoreEmptyRequestParams) { int emptyCount = 0; int total = paramValues.length; for (int i = 0; i < paramValues.length; i++) { String paramValue = paramValues[i]; if (paramValue == null) { emptyCount++; continue; } if (paramValue.length() == 0) { emptyCount++; if (treatEmptyParamsAsNull) { paramValue = null; } } paramValues[i] = paramValue; } if ((ignoreEmptyRequestParams) && (emptyCount == total)) { return null; } } return paramValues; } \n### Response:", "ground_truth": "Prepares parameters for further processing.\n@param paramValues\tstring array of param values\n@param treatEmptyParamsAsNull\tempty parameters should be treated as <code>null</code>\n@param ignoreEmptyRequestParams\tif all parameters are empty, return <code>null</code>", "predict": "Prepares the parameters for the request.\n\n@param paramValues the parameters\n@param treatEmptyParamsAsNull treat empty parameters as null\n@param ignoreEmptyRequestParams ignore empty request parameters\n@return the parameters"}
{"ID": 804, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void copyParamsToAttributes( final HttpServletRequest servletRequest, final boolean treatEmptyParamsAsNull, final boolean ignoreEmptyRequestParams) { Enumeration paramNames = servletRequest.getParameterNames(); while (paramNames.hasMoreElements()) { String paramName = (String) paramNames.nextElement(); if (servletRequest.getAttribute(paramName) != null) { continue; } String[] paramValues = servletRequest.getParameterValues(paramName); paramValues = prepareParameters(paramValues, treatEmptyParamsAsNull, ignoreEmptyRequestParams); if (paramValues == null) { continue; } servletRequest.setAttribute(paramName, paramValues.length == 1 ? paramValues[0] : paramValues); } // multipart if (!(servletRequest instanceof MultipartRequestWrapper)) { return; } MultipartRequestWrapper multipartRequest = (MultipartRequestWrapper) servletRequest; if (!multipartRequest.isMultipart()) { return; } paramNames = multipartRequest.getFileParameterNames(); while (paramNames.hasMoreElements()) { String paramName = (String) paramNames.nextElement(); if (servletRequest.getAttribute(paramName) != null) { continue; } FileUpload[] paramValues = multipartRequest.getFiles(paramName); servletRequest.setAttribute(paramName, paramValues.length == 1 ? paramValues[0] : paramValues); } } \n### Response:", "ground_truth": "Copies all request parameters to attributes.", "predict": "Copy the request parameters to the attributes of the servletRequest.\n\n@param servletRequest the servletRequest\n@param treatEmptyParamsAsNull true if the parameters are to be treated as null\n@param ignoreEmptyRequestParams true if the parameters are to be ignored"}
{"ID": 805, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void invokeBody(final JspFragment body) throws JspException { if (body == null) { return; } try { body.invoke(null); } catch (IOException ioex) { throw new JspException(\"Tag body failed\", ioex); } } \n### Response:", "ground_truth": "Invokes tag body.", "predict": "Invokes the body of the JspFragment.\n\n@param body the body of the JspFragment\n@throws JspException if the body of the JspFragment failed"}
{"ID": 806, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static char[] renderBody(final JspFragment body) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter(); invokeBody(body, writer); return writer.toCharArray(); } \n### Response:", "ground_truth": "Renders tag body to char array.", "predict": "Renders the given JspFragment as a char array.\n\n@param body the JspFragment to render\n@return the rendered char array\n@throws JspException if an error occurs"}
{"ID": 807, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String renderBodyToString(final JspFragment body) throws JspException { char[] result = renderBody(body); return new String(result); } \n### Response:", "ground_truth": "Renders tag body to string.\n@see #renderBody(javax.servlet.jsp.tagext.JspFragment)", "predict": "Renders the body of the fragment to a string.\n\n@param body the body of the fragment\n@return the rendered body\n@throws JspException if a JSP exception has occurred"}
{"ID": 808, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void invokeInitMethods(final InitMethodInvocationStrategy invocationStrategy) { for (final InitMethodPoint initMethod : beanDefinition.initMethodPoints()) { if (invocationStrategy != initMethod.invocationStrategy) { continue; } try { initMethod.method.invoke(bean); } catch (Exception ex) { throw new PetiteException(\"Invalid init method: \" + initMethod, ex); } } } \n### Response:", "ground_truth": "Invokes init methods.", "predict": "Invokes all init methods.\n\n@param invocationStrategy the invocation strategy"}
{"ID": 809, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void callDestroyMethods() { for (final DestroyMethodPoint destroyMethodPoint : beanDefinition.destroyMethodPoints()) { try { destroyMethodPoint.method.invoke(bean); } catch (Exception ex) { throw new PetiteException(\"Invalid destroy method: \" + destroyMethodPoint.method, ex); } } } \n### Response:", "ground_truth": "Calls destroy methods on given BeanData. Destroy methods are called\nwithout any order.", "predict": "Call all destroy methods defined in the bean definition."}
{"ID": 810, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object newBeanInstance() { if (beanDefinition.ctor == CtorInjectionPoint.EMPTY) { throw new PetiteException(\"No constructor (annotated, single or default) founded as injection point for: \" + beanDefinition.type.getName()); } int paramNo = beanDefinition.ctor.references.length; Object[] args = new Object[paramNo]; // wiring if (beanDefinition.wiringMode != WiringMode.NONE) { for (int i = 0; i < paramNo; i++) { args[i] = pc.getBean(beanDefinition.ctor.references[i]); if (args[i] == null) { if ((beanDefinition.wiringMode == WiringMode.STRICT)) { throw new PetiteException( \"Wiring constructor failed. References '\" + beanDefinition.ctor.references[i] + \"' not found for constructor: \" + beanDefinition.ctor.constructor); } } } } // create instance final Object bean; try { bean = beanDefinition.ctor.constructor.newInstance(args); } catch (Exception ex) { throw new PetiteException(\"Failed to create new bean instance '\" + beanDefinition.type.getName() + \"' using constructor: \" + beanDefinition.ctor.constructor, ex); } return bean; } \n### Response:", "ground_truth": "Creates a new instance.", "predict": "Create a new bean instance.\n\n@return the bean instance"}
{"ID": 811, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void injectParams(final ParamManager paramManager, final boolean implicitParamInjection) { if (beanDefinition.name == null) { return; } if (implicitParamInjection) { // implicit final int len = beanDefinition.name.length() + 1; for (final String param : beanDefinition.params) { final Object value = paramManager.get(param); final String destination = param.substring(len); try { BeanUtil.declared.setProperty(bean, destination, value); } catch (Exception ex) { throw new PetiteException(\"Unable to set parameter: '\" + param + \"' to bean: \" + beanDefinition.name, ex); } } } // explicit for (final ValueInjectionPoint pip : beanDefinition.values) { final String value = paramManager.parseKeyTemplate(pip.valueTemplate); try { BeanUtil.declared.setProperty(bean, pip.property, value); } catch (Exception ex) { throw new PetiteException(\"Unable to set value for: '\" + pip.valueTemplate + \"' to bean: \" + beanDefinition.name, ex); } } } \n### Response:", "ground_truth": "Injects all parameters.", "predict": "Injects the values of the given parameters into the given bean.\n\n@param paramManager the param manager\n@param implicitParamInjection true if the parameters are set by the bean definition"}
{"ID": 812, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"UnusedDeclaration\"}) public String rewrite(final HttpServletRequest servletRequest, final String actionPath, final String httpMethod) { return actionPath; } \n### Response:", "ground_truth": "Rewrites action path.", "predict": "Rewrite the request path.\n\n@param servletRequest the servlet request\n@param actionPath the action path\n@param httpMethod the http method\n@return the action path"}
{"ID": 813, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void addHeader(final String name, final String value) { List<String> valuesList = super.getAll(name); if (valuesList.isEmpty()) { super.add(name, value); return; } super.remove(name); valuesList.add(value); super.addAll(name, valuesList); } \n### Response:", "ground_truth": "Adds new header value. If existing value exist, it will be removed\nso the store the new key value.", "predict": "Adds a header to the response.\n\n@param name\nthe name of the header\n@param value\nthe value of the header"}
{"ID": 814, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void put(final String profile, final Map<String, PropsEntry> map, final String key, final String value, final boolean append) { String realValue = value; if (append || appendDuplicateProps) { PropsEntry pv = map.get(key); if (pv != null) { realValue = pv.value + APPEND_SEPARATOR + realValue; } } PropsEntry propsEntry = new PropsEntry(key, realValue, profile, this); // update position pointers if (first == null) { first = propsEntry; } else { last.next = propsEntry; } last = propsEntry; // add to the map map.put(key, propsEntry); } \n### Response:", "ground_truth": "Puts key-value pair into the map, with respect of appending duplicate properties", "predict": "Adds a new entry to the map.\n\n@param profile the profile\n@param map the map\n@param key the key\n@param value the value\n@param append the append"}
{"ID": 815, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void putBaseProperty(final String key, final String value, final boolean append) { put(null, baseProperties, key, value, append); } \n### Response:", "ground_truth": "Adds base property.", "predict": "Put a property in the base properties map.\n\n@param key\n@param value\n@param append"}
{"ID": 816, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void putProfileProperty(final String key, final String value, final String profile, final boolean append) { Map<String, PropsEntry> map = profileProperties.computeIfAbsent(profile, k -> new HashMap<>()); put(profile, map, key, value, append); } \n### Response:", "ground_truth": "Adds profile property.", "predict": "Put a profile property.\n\n@param key the property key\n@param value the property value\n@param profile the profile name\n@param append whether to append the property to the profile"}
{"ID": 817, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public PropsEntry getProfileProperty(final String profile, final String key) { final Map<String, PropsEntry> profileMap = profileProperties.get(profile); if (profileMap == null) { return null; } return profileMap.get(key); } \n### Response:", "ground_truth": "Returns profile property.", "predict": "Gets the profile property.\n\n@param profile the profile\n@param key the key\n@return the profile property"}
{"ID": 818, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String resolveMacros(String value, final String... profiles) { // create string template parser that will be used internally StringTemplateParser stringTemplateParser = new StringTemplateParser(); stringTemplateParser.setResolveEscapes(false); if (!ignoreMissingMacros) { stringTemplateParser.setReplaceMissingKey(false); } else { stringTemplateParser.setReplaceMissingKey(true); stringTemplateParser.setMissingKeyReplacement(StringPool.EMPTY); } final Function<String, String> macroResolver = macroName -> { String[] lookupProfiles = profiles; int leftIndex = macroName.indexOf('<'); if (leftIndex != -1) { int rightIndex = macroName.indexOf('>'); String profiles1 = macroName.substring(leftIndex + 1, rightIndex); macroName = macroName.substring(0, leftIndex).concat(macroName.substring(rightIndex + 1)); lookupProfiles = StringUtil.splitc(profiles1, ','); StringUtil.trimAll(lookupProfiles); } return lookupValue(macroName, lookupProfiles); }; // start parsing int loopCount = 0; while (loopCount++ < MAX_INNER_MACROS) { final String newValue = stringTemplateParser.parse(value, macroResolver); if (newValue.equals(value)) { break; } if (skipEmptyProps) { if (newValue.length() == 0) { return null; } } value = newValue; } return value; } \n### Response:", "ground_truth": "Resolves all macros in this props set. Called on property lookup.", "predict": "Resolves macros.\n\n@param value the value\n@param profiles the profiles\n@return the string"}
{"ID": 819, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Map extract(Map target, final String[] profiles, final String[] wildcardPatterns, String prefix) { if (target == null) { target = new HashMap(); } // make sure prefix ends with a dot if (prefix != null) { if (!StringUtil.endsWithChar(prefix, '.')) { prefix += StringPool.DOT; } } if (profiles != null) { for (String profile : profiles) { while (true) { final Map<String, PropsEntry> map = this.profileProperties.get(profile); if (map != null) { extractMap(target, map, profiles, wildcardPatterns, prefix); } final int ndx = profile.lastIndexOf('.'); if (ndx == -1) { break; } profile = profile.substring(0, ndx); } } } extractMap(target, this.baseProperties, profiles, wildcardPatterns, prefix); return target; } \n### Response:", "ground_truth": "Extracts props to target map. This is all-in-one method, that does many things at once.", "predict": "Extracts properties from the given target map, using the given profiles and wildcard patterns.\n\n@param target the target map\n@param profiles the profiles\n@param wildcardPatterns the wildcard patterns\n@param prefix the prefix\n@return the target map"}
{"ID": 820, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static int streamtoword(byte[] data, int[] offp) { int i; int word = 0; int off = offp[0]; for (i = 0; i < 4; i++) { word = (word << 8) | (data[off] & 0xff); off = (off + 1) % data.length; } offp[0] = off; return word; } \n### Response:", "ground_truth": "Cycically extract a word of key material.\n\n@param data the string to extract the data from\n@param offp a \"pointer\" (as a one-entry array) to the\ncurrent offset into data\n@return the next word of material from data", "predict": "Converts a byte array to a word.\n\n@param data the byte array\n@param offp the offp\n@return the word"}
{"ID": 821, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String hashpw(String password, String salt) { BCrypt B; String real_salt; byte[] passwordb, saltb, hashed; char minor = (char) 0; int rounds, off; StringBuffer rs = new StringBuffer(); if (salt.charAt(0) != '$' || salt.charAt(1) != '2') { throw new IllegalArgumentException(\"Invalid salt version\"); } if (salt.charAt(2) == '$') { off = 3; } else { minor = salt.charAt(2); if (minor != 'a' || salt.charAt(3) != '$') { throw new IllegalArgumentException(\"Invalid salt revision\"); } off = 4; } // Extract number of rounds if (salt.charAt(off + 2) > '$') { throw new IllegalArgumentException(\"Missing salt rounds\"); } rounds = Integer.parseInt(salt.substring(off, off + 2)); real_salt = salt.substring(off + 3, off + 25); try { passwordb = (password + (minor >= 'a' ? \"\\000\" : \"\")).getBytes(\"UTF-8\"); } catch (UnsupportedEncodingException uee) { throw new AssertionError(\"UTF-8 is not supported\"); } saltb = decode_base64(real_salt, BCRYPT_SALT_LEN); B = new BCrypt(); hashed = B.crypt_raw(passwordb, saltb, rounds, (int[]) bf_crypt_ciphertext.clone()); rs.append(\"$2\"); if (minor >= 'a') { rs.append(minor); } rs.append('$'); if (rounds < 10) { rs.append('0'); } if (rounds > 30) { throw new IllegalArgumentException( \"rounds exceeds maximum (30)\"); } rs.append(rounds) .append('$') .append(encode_base64(saltb, saltb.length)) .append(encode_base64(hashed, bf_crypt_ciphertext.length * 4 - 1)); return rs.toString(); } \n### Response:", "ground_truth": "Hash a password using the OpenBSD bcrypt scheme.\n\n@param password the password to hash\n@param salt the salt to hash with (perhaps generated\nusing BCrypt.gensalt)\n@return the hashed password", "predict": "Hashes a password using bcrypt.\n\n@param password the password to hash\n@param salt the salt to use\n@return the hashed password"}
{"ID": 822, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean checkpw(String plaintext, String hashed) { byte[] hashed_bytes; byte[] try_bytes; try { String try_pw = hashpw(plaintext, hashed); hashed_bytes = hashed.getBytes(\"UTF-8\"); try_bytes = try_pw.getBytes(\"UTF-8\"); } catch (UnsupportedEncodingException uee) { return false; } if (hashed_bytes.length != try_bytes.length) { return false; } byte ret = 0; for (int i = 0; i < try_bytes.length; i++) { ret |= hashed_bytes[i] ^ try_bytes[i]; } return ret == 0; } \n### Response:", "ground_truth": "Check that a plaintext password matches a previously hashed\none.\n\n@param plaintext the plaintext password to verify\n@param hashed the previously-hashed password\n@return true if the passwords match, false otherwise", "predict": "Checks the password.\n\n@param plaintext the plaintext\n@param hashed the hashed\n@return true if the password is correct"}
{"ID": 823, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public int copyAll(final OutputStream out) throws IOException { int count = 0; while (true) { byte b = readByte(); if (isBoundary(b)) { break; } out.write(b); count++; } return count; } \n### Response:", "ground_truth": "Copies bytes from this stream to some output until boundary is\nreached. Returns number of copied bytes. It will throw an exception\nfor any irregular behaviour.", "predict": "Copies all bytes from the input stream to the output stream.\n\n@param out the output stream\n@return the number of bytes copied\n@throws IOException if an IOException occurs"}
{"ID": 824, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public int copyMax(final OutputStream out, final int maxBytes) throws IOException { int count = 0; while (true) { byte b = readByte(); if (isBoundary(b)) { break; } out.write(b); count++; if (count == maxBytes) { return count; } } return count; } \n### Response:", "ground_truth": "Copies max or less number of bytes to output stream. Useful for determining\nif uploaded file is larger then expected.", "predict": "Copy the given number of bytes to the output stream.\n\n@param out the output stream to write to\n@param maxBytes the maximum number of bytes to copy\n@return the number of bytes copied\n@throws IOException if an IOException occurs"}
{"ID": 825, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ActionRuntime parse(final Class<?> actionClass, final Method actionMethod, ActionDefinition actionDefinition) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues(actionMethod); final ActionConfig actionConfig = resolveActionConfig(annotationValues); // interceptors ActionInterceptor[] actionInterceptors = parseActionInterceptors(actionClass, actionMethod, actionConfig); // filters ActionFilter[] actionFilters = parseActionFilters(actionClass, actionMethod, actionConfig); // build action definition when not provided if (actionDefinition == null) { actionDefinition = parseActionDefinition(actionClass, actionMethod); } detectAndRegisterAlias(annotationValues, actionDefinition); final boolean async = parseMethodAsyncFlag(actionMethod); final boolean auth = parseMethodAuthFlag(actionMethod); final Class<? extends ActionResult> actionResult = parseActionResult(actionMethod); final Class<? extends ActionResult> defaultActionResult = actionConfig.getActionResult(); return createActionRuntime( null, actionClass, actionMethod, actionResult, defaultActionResult, actionFilters, actionInterceptors, actionDefinition, async, auth); } \n### Response:", "ground_truth": "Parses java action method annotation and returns its action runtime.\n\n@param actionClass action class\n@param actionMethod action method\n@param actionDefinition optional action def, usually <code>null</code> so to be parsed", "predict": "Parses the given action class, method and action definition.\n\n@param actionClass the action class\n@param actionMethod the action method\n@param actionDefinition the action definition\n@return the parsed action runtime"}
{"ID": 826, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected ActionConfig resolveActionConfig(final ActionAnnotationValues annotationValues) { final Class<? extends Annotation> annotationType; if (annotationValues == null) { annotationType = Action.class; } else { annotationType = annotationValues.annotationType(); } return actionConfigManager.lookup(annotationType); } \n### Response:", "ground_truth": "Resolves action config.", "predict": "Resolve the annotation type of the given annotation values.\n\n@param annotationValues the annotation values\n@return the annotation type"}
{"ID": 827, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void detectAndRegisterAlias(final ActionAnnotationValues annotationValues, final ActionDefinition actionDefinition) { final String alias = parseMethodAlias(annotationValues); if (alias != null) { String aliasPath = StringUtil.cutToIndexOf(actionDefinition.actionPath(), StringPool.HASH); actionsManager.registerPathAlias(alias, aliasPath); } } \n### Response:", "ground_truth": "Detects if alias is defined in annotation and registers it if so.", "predict": "Detect and register alias.\n\n@param annotationValues the annotation values\n@param actionDefinition the action definition"}
{"ID": 828, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Class<? extends ActionInterceptor>[] readActionInterceptors(final AnnotatedElement actionClassOrMethod) { Class<? extends ActionInterceptor>[] result = null; InterceptedBy interceptedBy = actionClassOrMethod.getAnnotation(InterceptedBy.class); if (interceptedBy != null) { result = interceptedBy.value(); if (result.length == 0) { result = null; } } return result; } \n### Response:", "ground_truth": "Reads class or method annotation for action interceptors.", "predict": "Read action interceptors.\n\n@param actionClassOrMethod the action class or method\n@return the action interceptors"}
{"ID": 829, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Class<? extends ActionFilter>[] readActionFilters(final AnnotatedElement actionClassOrMethod) { Class<? extends ActionFilter>[] result = null; FilteredBy filteredBy = actionClassOrMethod.getAnnotation(FilteredBy.class); if (filteredBy != null) { result = filteredBy.value(); if (result.length == 0) { result = null; } } return result; } \n### Response:", "ground_truth": "Reads class or method annotation for action filters.", "predict": "Read action filters.\n\n@param actionClassOrMethod the action class or method\n@return the action filters"}
{"ID": 830, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String[] readPackageActionPath(final Class actionClass) { Package actionPackage = actionClass.getPackage(); final String actionPackageName = actionPackage.getName(); // 1 - read annotations first String packageActionPathFromAnnotation; mainloop: while (true) { MadvocAction madvocActionAnnotation = actionPackage.getAnnotation(MadvocAction.class); packageActionPathFromAnnotation = madvocActionAnnotation != null ? madvocActionAnnotation.value().trim() : null; if (StringUtil.isEmpty(packageActionPathFromAnnotation)) { packageActionPathFromAnnotation = null; } if (packageActionPathFromAnnotation == null) { // next package String newPackage = actionPackage.getName(); actionPackage = null; while (actionPackage == null) { final int ndx = newPackage.lastIndexOf('.'); if (ndx == -1) { // end of hierarchy, nothing found break mainloop; } newPackage = newPackage.substring(0, ndx); actionPackage = Packages.of(actionClass.getClassLoader(), newPackage); } } else { // annotation found, register root rootPackages.addRootPackage(actionPackage.getName(), packageActionPathFromAnnotation); break; } } // 2 - read root package String packagePath = rootPackages.findPackagePathForActionPackage(actionPackageName); if (packagePath == null) { return ArraysUtil.array(null, null); } return ArraysUtil.array( StringUtil.stripChar(packagePath, '/'), StringUtil.surround(packagePath, StringPool.SLASH) ); } \n### Response:", "ground_truth": "Reads action path for package.\nIf annotation is not set on package-level, class package will be used for\npackage action path part.", "predict": "Read package action path.\n\n@param actionClass the action class\n@return the package action path"}
{"ID": 831, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String[] readMethodActionPath(final String methodName, final ActionAnnotationValues annotationValues, final ActionConfig actionConfig) { // read annotation String methodActionPath = annotationValues != null ? annotationValues.value() : null; if (methodActionPath == null) { methodActionPath = methodName; } else { if (methodActionPath.equals(Action.NONE)) { return ArraysUtil.array(null, null); } } // check for defaults for (String path : actionConfig.getActionMethodNames()) { if (methodActionPath.equals(path)) { methodActionPath = null; break; } } return ArraysUtil.array(methodName, methodActionPath); } \n### Response:", "ground_truth": "Reads action path from the action method.", "predict": "Read the action method path.\n\n@param methodName the method name\n@param annotationValues the annotation values\n@param actionConfig the action config\n@return the action method path"}
{"ID": 832, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String parseMethodAlias(final ActionAnnotationValues annotationValues) { String alias = null; if (annotationValues != null) { alias = annotationValues.alias(); } return alias; } \n### Response:", "ground_truth": "Reads method's alias value.", "predict": "Parse method alias.\n\n@param annotationValues the annotation values\n@return the alias"}
{"ID": 833, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ActionRuntime createActionRuntime( final ActionHandler actionHandler, final Class actionClass, final Method actionClassMethod, final Class<? extends ActionResult> actionResult, final Class<? extends ActionResult> defaultActionResult, final ActionFilter[] filters, final ActionInterceptor[] interceptors, final ActionDefinition actionDefinition, final boolean async, final boolean auth) { if (actionHandler != null) { return new ActionRuntime( actionHandler, actionClass, actionClassMethod, filters, interceptors, actionDefinition, NoneActionResult.class, NoneActionResult.class, async, auth, null, null); } final ScopeData scopeData = scopeDataInspector.inspectClassScopes(actionClass); // find ins and outs final Class[] paramTypes = actionClassMethod.getParameterTypes(); final MethodParam[] params = new MethodParam[paramTypes.length]; final Annotation[][] paramAnns = actionClassMethod.getParameterAnnotations(); String[] methodParamNames = null; // for all elements: action and method arguments... for (int ndx = 0; ndx < paramTypes.length; ndx++) { Class paramType = paramTypes[ndx]; // lazy init to postpone bytecode usage, when method has no arguments if (methodParamNames == null) { methodParamNames = actionMethodParamNameResolver.resolveParamNames(actionClassMethod); } final String paramName = methodParamNames[ndx]; final Annotation[] parameterAnnotations = paramAnns[ndx]; final ScopeData paramsScopeData = scopeDataInspector.inspectMethodParameterScopes(paramName, paramType, parameterAnnotations); MapperFunction mapperFunction = null; for (final Annotation annotation : parameterAnnotations) { if (annotation instanceof Mapper) { mapperFunction = MapperFunctionInstances.get().lookup(((Mapper) annotation).value()); break; } } params[ndx] = new MethodParam( paramTypes[ndx], paramName, scopeDataInspector.detectAnnotationType(parameterAnnotations), paramsScopeData, mapperFunction ); } return new ActionRuntime( null, actionClass, actionClassMethod, filters, interceptors, actionDefinition, actionResult, defaultActionResult, async, auth, scopeData, params); } \n### Response:", "ground_truth": "Creates new instance of action runtime configuration.\nInitialize caches.", "predict": "Create an ActionRuntime for the given action class, method, action result and default action result.\n\n@param actionHandler the action handler\n@param actionClass the action class\n@param actionClassMethod the action class method\n@param actionResult the action result\n@param defaultActionResult the default action result\n@param filters the filters\n@param interceptors the interceptors\n@param actionDefinition the action definition\n@param async the async\n@param auth the auth\n@return the action runtime"}
{"ID": 834, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected void preResponseCommit() { long lastModified = lastModifiedData.getLastModified(); long ifModifiedSince = request.getDateHeader(\"If-Modified-Since\"); if (lastModified > -1 && !response.containsHeader(\"Last-Modified\")) { if (ifModifiedSince < (lastModified / 1000 * 1000)) { response.setDateHeader(\"Last-Modified\", lastModified); } else { response.reset(); response.setStatus(HttpServletResponse.SC_NOT_MODIFIED); } } } \n### Response:", "ground_truth": "todo move to BufferResponseWrapper ?", "predict": "Set the response status code to 204 if the response is not modified."}
{"ID": 835, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> T applyAdvice(final Class<T> targetClass) { Class adviceClass = cache.get(targetClass); if (adviceClass == null) { // advice not yet created adviceClass = PROXY_PROXETTA.proxy().setTarget(targetClass).define(); cache.put(targetClass, adviceClass); } // create new advice instance and injects target instance to it try { Object advice = ClassUtil.newInstance(adviceClass); Field field = adviceClass.getField(\"$___target$0\"); field.set(advice, targetClass); return (T) advice; } catch (Exception ex) { throw new ProxettaException(ex); } } \n### Response:", "ground_truth": "Applies advice on given target class and returns proxy instance.", "predict": "Injects the target class into the advice.\n\n@param targetClass the target class\n@return the advice instance"}
{"ID": 836, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void injectTargetIntoProxy(final Object proxy, final Object target) { Class proxyClass = proxy.getClass(); try { Field field = proxyClass.getField(\"$___target$0\"); field.set(proxy, target); } catch (Exception ex) { throw new ProxettaException(ex); } } \n### Response:", "ground_truth": "Injects target into proxy.", "predict": "Injects the target object into the proxy object.\n\n@param proxy the proxy object\n@param target the target object"}
{"ID": 837, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) { if (fv != null) { return fv.visitAnnotation(descriptor, visible); } return null; } \n### Response:", "ground_truth": "Visits an annotation of the field.\n\n@param descriptor the class descriptor of the annotation class.\n@param visible {@literal true} if the annotation is visible at runtime.\n@return a visitor to visit the annotation values, or {@literal null} if this visitor is not\ninterested in visiting this annotation.", "predict": "Visit an annotation.\n\n@param descriptor the annotation descriptor\n@param visible the visibility of the annotation\n@return the visitor"}
{"ID": 838, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String resolveRealName(final String jsonName) { if (jsonNames == null) { return jsonName; } int jsonIndex = ArraysUtil.indexOf(jsonNames, jsonName); if (jsonIndex == -1) { return jsonName; } return realNames[jsonIndex]; } \n### Response:", "ground_truth": "Resolves real name from JSON name.", "predict": "Resolves the given json name to a real name.\n\n@param jsonName the json name\n@return the real name"}
{"ID": 839, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String resolveJsonName(final String realName) { if (realNames == null) { return realName; } int realIndex = ArraysUtil.indexOf(realNames, realName); if (realIndex == -1) { return realName; } return jsonNames[realIndex]; } \n### Response:", "ground_truth": "Resolves JSON name from real name.", "predict": "Resolve json name.\n\n@param realName the real name\n@return the string"}
{"ID": 840, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public TypeData lookupTypeData(final Class type) { TypeData typeData = typeDataMap.get(type); if (typeData == null) { if (serializationSubclassAware) { typeData = findSubclassTypeData(type); } if (typeData == null) { typeData = scanClassForAnnotations(type); typeDataMap.put(type, typeData); } } return typeData; } \n### Response:", "ground_truth": "Returns all includes for given type. Returns an empty array\nwhen no includes are defined.", "predict": "Lookup the type data for the given type.\n\n@param type the type to lookup\n@return the type data"}
{"ID": 841, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected TypeData _lookupTypeData(final Class type) { TypeData typeData = typeDataMap.get(type); if (typeData == null) { typeData = scanClassForAnnotations(type); typeDataMap.put(type, typeData); } return typeData; } \n### Response:", "ground_truth": "Lookups type data and creates one if missing.", "predict": "Returns the TypeData for the given class.\n\n@param type the class to lookup the type data for\n@return the TypeData for the given class"}
{"ID": 842, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected TypeData findSubclassTypeData(final Class type) { final Class<? extends Annotation> defaultAnnotation = jsonAnnotation; if (type.getAnnotation(defaultAnnotation) != null) { // current type has annotation, don't find anything, let type data be created return null; } ClassDescriptor cd = ClassIntrospector.get().lookup(type); // lookup superclasses Class[] superClasses = cd.getAllSuperclasses(); for (Class superClass : superClasses) { if (superClass.getAnnotation(defaultAnnotation) != null) { // annotated subclass founded! return _lookupTypeData(superClass); } } Class[] interfaces = cd.getAllInterfaces(); for (Class interfaze : interfaces) { if (interfaze.getAnnotation(defaultAnnotation) != null) { // annotated subclass founded! return _lookupTypeData(interfaze); } } return null; } \n### Response:", "ground_truth": "Finds type data of first annotated superclass or interface.", "predict": "Finds the type data for a given type.\n\n@param type the type to look up type data for\n@return the type data for the given type or null if no type data is found"}
{"ID": 843, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String resolveJsonName(final Class type, final String name) { TypeData typeData = lookupTypeData(type); return typeData.resolveJsonName(name); } \n### Response:", "ground_truth": "Returns different name of a property if set by annotation.", "predict": "Resolve json name.\n\n@param type the type\n@param name the name\n@return the json name"}
{"ID": 844, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String resolveRealName(final Class type, final String jsonName) { TypeData typeData = lookupTypeData(type); return typeData.resolveRealName(jsonName); } \n### Response:", "ground_truth": "Returns real property name for given JSON property.", "predict": "Resolves the given json name to the given class name.\n\n@param type the class to resolve\n@param jsonName the json name\n@return the resolved name"}
{"ID": 845, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public byte[] getFileContent() throws IOException { if (data != null) { return data; } if (tempFile != null) { return FileUtil.readBytes(tempFile); } return null; } \n### Response:", "ground_truth": "Returns the content of file upload item.", "predict": "Returns the contents of the file.\n\n@return the contents of the file.\n@throws IOException if the file cannot be read."}
{"ID": 846, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void copyBootstrapMethods(final ClassReader classReader, final char[] charBuffer) { // Find attributOffset of the 'bootstrap_methods' array. byte[] inputBytes = classReader.b; int currentAttributeOffset = classReader.getFirstAttributeOffset(); for (int i = classReader.readUnsignedShort(currentAttributeOffset - 2); i > 0; --i) { String attributeName = classReader.readUTF8(currentAttributeOffset, charBuffer); if (Constants.BOOTSTRAP_METHODS.equals(attributeName)) { bootstrapMethodCount = classReader.readUnsignedShort(currentAttributeOffset + 6); break; } currentAttributeOffset += 6 + classReader.readInt(currentAttributeOffset + 2); } if (bootstrapMethodCount > 0) { // Compute the offset and the length of the BootstrapMethods 'bootstrap_methods' array. int bootstrapMethodsOffset = currentAttributeOffset + 8; int bootstrapMethodsLength = classReader.readInt(currentAttributeOffset + 2) - 2; bootstrapMethods = new ByteVector(bootstrapMethodsLength); bootstrapMethods.putByteArray(inputBytes, bootstrapMethodsOffset, bootstrapMethodsLength); // Add each bootstrap method in the symbol table entries. int currentOffset = bootstrapMethodsOffset; for (int i = 0; i < bootstrapMethodCount; i++) { int offset = currentOffset - bootstrapMethodsOffset; int bootstrapMethodRef = classReader.readUnsignedShort(currentOffset); currentOffset += 2; int numBootstrapArguments = classReader.readUnsignedShort(currentOffset); currentOffset += 2; int hashCode = classReader.readConst(bootstrapMethodRef, charBuffer).hashCode(); while (numBootstrapArguments-- > 0) { int bootstrapArgument = classReader.readUnsignedShort(currentOffset); currentOffset += 2; hashCode ^= classReader.readConst(bootstrapArgument, charBuffer).hashCode(); } add(new Entry(i, Symbol.BOOTSTRAP_METHOD_TAG, offset, hashCode & 0x7FFFFFFF)); } } } \n### Response:", "ground_truth": "Read the BootstrapMethods 'bootstrap_methods' array binary content and add them as entries of\nthe SymbolTable.\n\n@param classReader the ClassReader whose bootstrap methods must be copied to initialize the\nSymbolTable.\n@param charBuffer a buffer used to read strings in the constant pool.", "predict": "Copy the bootstrap methods to the symbol table.\n\n@param classReader the class reader\n@param charBuffer the char buffer"}
{"ID": 847, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: int setMajorVersionAndClassName(final int majorVersion, final String className) { this.majorVersion = majorVersion; this.className = className; return addConstantClass(className).index; } \n### Response:", "ground_truth": "Sets the major version and the name of the class to which this symbol table belongs. Also adds\nthe class name to the constant pool.\n\n@param majorVersion a major ClassFile version number.\n@param className an internal class name.\n@return the constant pool index of a new or already existing Symbol with the given class name.", "predict": "Sets the major version and class name.\n\n@param majorVersion the major version\n@param className the class name\n@return the major version and class name"}
{"ID": 848, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: void putConstantPool(final ByteVector output) { output.putShort(constantPoolCount).putByteArray(constantPool.data, 0, constantPool.length); } \n### Response:", "ground_truth": "Puts this symbol table's constant_pool array in the given ByteVector, preceded by the\nconstant_pool_count value.\n\n@param output where the JVMS ClassFile's constant_pool array must be put.", "predict": "Puts the constant pool data into the output byte vector.\n\n@param output the output byte vector"}
{"ID": 849, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: void putBootstrapMethods(final ByteVector output) { if (bootstrapMethods != null) { output .putShort(addConstantUtf8(Constants.BOOTSTRAP_METHODS)) .putInt(bootstrapMethods.length + 2) .putShort(bootstrapMethodCount) .putByteArray(bootstrapMethods.data, 0, bootstrapMethods.length); } } \n### Response:", "ground_truth": "Puts this symbol table's BootstrapMethods attribute in the given ByteVector. This includes the\n6 attribute header bytes and the num_bootstrap_methods value.\n\n@param output where the JVMS BootstrapMethods attribute must be put.", "predict": "Put the bootstrap methods.\n\n@param output the output"}
{"ID": 850, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: Symbol addConstantFieldref(final String owner, final String name, final String descriptor) { return addConstantMemberReference(Symbol.CONSTANT_FIELDREF_TAG, owner, name, descriptor); } \n### Response:", "ground_truth": "Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table. Does nothing if the\nconstant pool already contains a similar item.\n\n@param owner the internal name of a class.\n@param name a field name.\n@param descriptor a field descriptor.\n@return a new or already existing Symbol with the given value.", "predict": "Add a constant field reference.\n\n@param owner the owner of the constant field reference\n@param name the name of the constant field reference\n@param descriptor the descriptor of the constant field reference\n@return the constant field reference"}
{"ID": 851, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: Symbol addConstantMethodref( final String owner, final String name, final String descriptor, final boolean isInterface) { int tag = isInterface ? Symbol.CONSTANT_INTERFACE_METHODREF_TAG : Symbol.CONSTANT_METHODREF_TAG; return addConstantMemberReference(tag, owner, name, descriptor); } \n### Response:", "ground_truth": "Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this\nsymbol table. Does nothing if the constant pool already contains a similar item.\n\n@param owner the internal name of a class.\n@param name a method name.\n@param descriptor a method descriptor.\n@param isInterface whether owner is an interface or not.\n@return a new or already existing Symbol with the given value.", "predict": "Add a constant methodref to the symbol.\n\n@param owner the symbol owner\n@param name the name of the constant methodref\n@param descriptor the constant methodref descriptor\n@param isInterface the constant methodref is an interface methodref\n@return the symbol"}
{"ID": 852, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Entry addConstantMemberReference( final int tag, final String owner, final String name, final String descriptor) { int hashCode = hash(tag, owner, name, descriptor); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.owner.equals(owner) && entry.name.equals(name) && entry.value.equals(descriptor)) { return entry; } entry = entry.next; } constantPool.put122( tag, addConstantClass(owner).index, addConstantNameAndType(name, descriptor)); return put(new Entry(constantPoolCount++, tag, owner, name, descriptor, 0, hashCode)); } \n### Response:", "ground_truth": "Adds a CONSTANT_Fieldref_info, CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to\nthe constant pool of this symbol table. Does nothing if the constant pool already contains a\nsimilar item.\n\n@param tag one of {@link Symbol#CONSTANT_FIELDREF_TAG}, {@link Symbol#CONSTANT_METHODREF_TAG}\nor {@link Symbol#CONSTANT_INTERFACE_METHODREF_TAG}.\n@param owner the internal name of a class.\n@param name a field or method name.\n@param descriptor a field or method descriptor.\n@return a new or already existing Symbol with the given value.", "predict": "Adds a constant reference to the constant pool.\n\n@param tag constant tag\n@param owner constant owner\n@param name constant name\n@param descriptor constant descriptor\n@return constant reference entry"}
{"ID": 853, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addConstantMemberReference( final int index, final int tag, final String owner, final String name, final String descriptor) { add(new Entry(index, tag, owner, name, descriptor, 0, hash(tag, owner, name, descriptor))); } \n### Response:", "ground_truth": "Adds a new CONSTANT_Fieldref_info, CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info\nto the constant pool of this symbol table.\n\n@param index the constant pool index of the new Symbol.\n@param tag one of {@link Symbol#CONSTANT_FIELDREF_TAG}, {@link Symbol#CONSTANT_METHODREF_TAG}\nor {@link Symbol#CONSTANT_INTERFACE_METHODREF_TAG}.\n@param owner the internal name of a class.\n@param name a field or method name.\n@param descriptor a field or method descriptor.", "predict": "Adds a constant member reference to the map.\n\n@param index the constant member index\n@param tag the constant member tag\n@param owner the constant member owner\n@param name the constant member name\n@param descriptor the constant member descriptor"}
{"ID": 854, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Symbol addConstantIntegerOrFloat(final int tag, final int value) { int hashCode = hash(tag, value); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.data == value) { return entry; } entry = entry.next; } constantPool.putByte(tag).putInt(value); return put(new Entry(constantPoolCount++, tag, value, hashCode)); } \n### Response:", "ground_truth": "Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table.\nDoes nothing if the constant pool already contains a similar item.\n\n@param tag one of {@link Symbol#CONSTANT_INTEGER_TAG} or {@link Symbol#CONSTANT_FLOAT_TAG}.\n@param value an int or float.\n@return a constant pool constant with the given tag and primitive values.", "predict": "Adds a constant integer or float to the symbol table.\n\n@param tag the tag of the constant\n@param value the value of the constant\n@return the symbol"}
{"ID": 855, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addConstantIntegerOrFloat(final int index, final int tag, final int value) { add(new Entry(index, tag, value, hash(tag, value))); } \n### Response:", "ground_truth": "Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol\ntable.\n\n@param index the constant pool index of the new Symbol.\n@param tag one of {@link Symbol#CONSTANT_INTEGER_TAG} or {@link Symbol#CONSTANT_FLOAT_TAG}.\n@param value an int or float.", "predict": "Adds a constant integer or float entry to the hash table.\n\n@param index the index of the entry\n@param tag the tag of the entry\n@param value the value of the entry"}
{"ID": 856, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Symbol addConstantLongOrDouble(final int tag, final long value) { int hashCode = hash(tag, value); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.data == value) { return entry; } entry = entry.next; } int index = constantPoolCount; constantPool.putByte(tag).putLong(value); constantPoolCount += 2; return put(new Entry(index, tag, value, hashCode)); } \n### Response:", "ground_truth": "Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table.\nDoes nothing if the constant pool already contains a similar item.\n\n@param tag one of {@link Symbol#CONSTANT_LONG_TAG} or {@link Symbol#CONSTANT_DOUBLE_TAG}.\n@param value a long or double.\n@return a constant pool constant with the given tag and primitive values.", "predict": "Adds a constant long or double to the symbol table.\n\n@param tag the constant tag\n@param value the constant value\n@return the symbol"}
{"ID": 857, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addConstantLongOrDouble(final int index, final int tag, final long value) { add(new Entry(index, tag, value, hash(tag, value))); } \n### Response:", "ground_truth": "Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol\ntable.\n\n@param index the constant pool index of the new Symbol.\n@param tag one of {@link Symbol#CONSTANT_LONG_TAG} or {@link Symbol#CONSTANT_DOUBLE_TAG}.\n@param value a long or double.", "predict": "Adds a constant long or double to the hash map.\n\n@param index the index of the entry\n@param tag the tag of the entry\n@param value the value of the entry"}
{"ID": 858, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: int addConstantNameAndType(final String name, final String descriptor) { final int tag = Symbol.CONSTANT_NAME_AND_TYPE_TAG; int hashCode = hash(tag, name, descriptor); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.name.equals(name) && entry.value.equals(descriptor)) { return entry.index; } entry = entry.next; } constantPool.put122(tag, addConstantUtf8(name), addConstantUtf8(descriptor)); return put(new Entry(constantPoolCount++, tag, name, descriptor, hashCode)).index; } \n### Response:", "ground_truth": "Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table. Does nothing if the\nconstant pool already contains a similar item.\n\n@param name a field or method name.\n@param descriptor a field or method descriptor.\n@return a new or already existing Symbol with the given value.", "predict": "Adds a constant name and type to the symbol table.\n\n@param name the constant name\n@param descriptor the constant descriptor\n@return the constant index"}
{"ID": 859, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addConstantNameAndType(final int index, final String name, final String descriptor) { final int tag = Symbol.CONSTANT_NAME_AND_TYPE_TAG; add(new Entry(index, tag, name, descriptor, hash(tag, name, descriptor))); } \n### Response:", "ground_truth": "Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table.\n\n@param index the constant pool index of the new Symbol.\n@param name a field or method name.\n@param descriptor a field or method descriptor.", "predict": "Adds a constant name and type to the symbol table.\n\n@param index the index of the constant\n@param name the name of the constant\n@param descriptor the descriptor of the constant"}
{"ID": 860, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: int addConstantUtf8(final String value) { int hashCode = hash(Symbol.CONSTANT_UTF8_TAG, value); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == Symbol.CONSTANT_UTF8_TAG && entry.hashCode == hashCode && entry.value.equals(value)) { return entry.index; } entry = entry.next; } constantPool.putByte(Symbol.CONSTANT_UTF8_TAG).putUTF8(value); return put(new Entry(constantPoolCount++, Symbol.CONSTANT_UTF8_TAG, value, hashCode)).index; } \n### Response:", "ground_truth": "Adds a CONSTANT_Utf8_info to the constant pool of this symbol table. Does nothing if the\nconstant pool already contains a similar item.\n\n@param value a string.\n@return a new or already existing Symbol with the given value.", "predict": "Adds a constant UTF-8 value to the constant pool.\n\n@param value the constant UTF-8 value\n@return the constant UTF-8 entry's index in the constant pool"}
{"ID": 861, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addConstantUtf8(final int index, final String value) { add(new Entry(index, Symbol.CONSTANT_UTF8_TAG, value, hash(Symbol.CONSTANT_UTF8_TAG, value))); } \n### Response:", "ground_truth": "Adds a new CONSTANT_String_info to the constant pool of this symbol table.\n\n@param index the constant pool index of the new Symbol.\n@param value a string.", "predict": "Adds a constant UTF-8 value to the symbol table.\n\n@param index the index of the constant UTF-8 value\n@param value the constant UTF-8 value"}
{"ID": 862, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: Symbol addConstantMethodHandle( final int referenceKind, final String owner, final String name, final String descriptor, final boolean isInterface) { final int tag = Symbol.CONSTANT_METHOD_HANDLE_TAG; // Note that we don't need to include isInterface in the hash computation, because it is // redundant with owner (we can't have the same owner with different isInterface values). int hashCode = hash(tag, owner, name, descriptor, referenceKind); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.data == referenceKind && entry.owner.equals(owner) && entry.name.equals(name) && entry.value.equals(descriptor)) { return entry; } entry = entry.next; } if (referenceKind <= Opcodes.H_PUTSTATIC) { constantPool.put112(tag, referenceKind, addConstantFieldref(owner, name, descriptor).index); } else { constantPool.put112( tag, referenceKind, addConstantMethodref(owner, name, descriptor, isInterface).index); } return put( new Entry(constantPoolCount++, tag, owner, name, descriptor, referenceKind, hashCode)); } \n### Response:", "ground_truth": "Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table. Does nothing if\nthe constant pool already contains a similar item.\n\n@param referenceKind one of {@link Opcodes#H_GETFIELD}, {@link Opcodes#H_GETSTATIC}, {@link\nOpcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL}, {@link\nOpcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL}, {@link\nOpcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}.\n@param owner the internal name of a class of interface.\n@param name a field or method name.\n@param descriptor a field or method descriptor.\n@param isInterface whether owner is an interface or not.\n@return a new or already existing Symbol with the given value.", "predict": "Adds a constant method handle to the symbol table."}
{"ID": 863, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addConstantMethodHandle( final int index, final int referenceKind, final String owner, final String name, final String descriptor) { final int tag = Symbol.CONSTANT_METHOD_HANDLE_TAG; int hashCode = hash(tag, owner, name, descriptor, referenceKind); add(new Entry(index, tag, owner, name, descriptor, referenceKind, hashCode)); } \n### Response:", "ground_truth": "Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table.\n\n@param index the constant pool index of the new Symbol.\n@param referenceKind one of {@link Opcodes#H_GETFIELD}, {@link Opcodes#H_GETSTATIC}, {@link\nOpcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL}, {@link\nOpcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL}, {@link\nOpcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}.\n@param owner the internal name of a class of interface.\n@param name a field or method name.\n@param descriptor a field or method descriptor.", "predict": "Adds a constant method handle to the symbol table.\n\n@param index the index of the constant method handle\n@param referenceKind the referenceKind of the constant method handle\n@param owner the owner of the constant method handle\n@param name the name of the constant method handle\n@param descriptor the descriptor of the constant method handle"}
{"ID": 864, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: Symbol addConstantDynamic( final String name, final String descriptor, final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) { Symbol bootstrapMethod = addBootstrapMethod(bootstrapMethodHandle, bootstrapMethodArguments); return addConstantDynamicOrInvokeDynamicReference( Symbol.CONSTANT_DYNAMIC_TAG, name, descriptor, bootstrapMethod.index); } \n### Response:", "ground_truth": "Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table. Also adds the related\nbootstrap method to the BootstrapMethods of this symbol table. Does nothing if the constant\npool already contains a similar item.\n\n@param name a method name.\n@param descriptor a field descriptor.\n@param bootstrapMethodHandle a bootstrap method handle.\n@param bootstrapMethodArguments the bootstrap method arguments.\n@return a new or already existing Symbol with the given value.", "predict": "Add a dynamic constant."}
{"ID": 865, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: Symbol addConstantInvokeDynamic( final String name, final String descriptor, final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) { Symbol bootstrapMethod = addBootstrapMethod(bootstrapMethodHandle, bootstrapMethodArguments); return addConstantDynamicOrInvokeDynamicReference( Symbol.CONSTANT_INVOKE_DYNAMIC_TAG, name, descriptor, bootstrapMethod.index); } \n### Response:", "ground_truth": "Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table. Also adds the\nrelated bootstrap method to the BootstrapMethods of this symbol table. Does nothing if the\nconstant pool already contains a similar item.\n\n@param name a method name.\n@param descriptor a method descriptor.\n@param bootstrapMethodHandle a bootstrap method handle.\n@param bootstrapMethodArguments the bootstrap method arguments.\n@return a new or already existing Symbol with the given value.", "predict": "Add a constant invoke dynamic symbol.\n\n@param name the name of the symbol\n@param descriptor the descriptor of the symbol\n@param bootstrapMethodHandle the bootstrap method handle\n@param bootstrapMethodArguments the bootstrap method arguments\n@return the symbol"}
{"ID": 866, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Symbol addConstantDynamicOrInvokeDynamicReference( final int tag, final String name, final String descriptor, final int bootstrapMethodIndex) { int hashCode = hash(tag, name, descriptor, bootstrapMethodIndex); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.data == bootstrapMethodIndex && entry.name.equals(name) && entry.value.equals(descriptor)) { return entry; } entry = entry.next; } constantPool.put122(tag, bootstrapMethodIndex, addConstantNameAndType(name, descriptor)); return put( new Entry( constantPoolCount++, tag, null, name, descriptor, bootstrapMethodIndex, hashCode)); } \n### Response:", "ground_truth": "Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol\ntable. Does nothing if the constant pool already contains a similar item.\n\n@param tag one of {@link Symbol#CONSTANT_DYNAMIC_TAG} or {@link\nSymbol#CONSTANT_INVOKE_DYNAMIC_TAG}.\n@param name a method name.\n@param descriptor a field descriptor for CONSTANT_DYNAMIC_TAG) or a method descriptor for\nCONSTANT_INVOKE_DYNAMIC_TAG.\n@param bootstrapMethodIndex the index of a bootstrap method in the BootstrapMethods attribute.\n@return a new or already existing Symbol with the given value.", "predict": "Add a symbol to the symbol table.\n\n@param tag the tag of the symbol\n@param name the name of the symbol\n@param descriptor the symbol's descriptor\n@param bootstrapMethodIndex the index of the bootstrap method\n@return the symbol"}
{"ID": 867, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addConstantDynamicOrInvokeDynamicReference( final int tag, final int index, final String name, final String descriptor, final int bootstrapMethodIndex) { int hashCode = hash(tag, name, descriptor, bootstrapMethodIndex); add(new Entry(index, tag, null, name, descriptor, bootstrapMethodIndex, hashCode)); } \n### Response:", "ground_truth": "Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this\nsymbol table.\n\n@param tag one of {@link Symbol#CONSTANT_DYNAMIC_TAG} or {@link\nSymbol#CONSTANT_INVOKE_DYNAMIC_TAG}.\n@param index the constant pool index of the new Symbol.\n@param name a method name.\n@param descriptor a field descriptor for CONSTANT_DYNAMIC_TAG or a method descriptor for\nCONSTANT_INVOKE_DYNAMIC_TAG.\n@param bootstrapMethodIndex the index of a bootstrap method in the BootstrapMethods attribute.", "predict": "Adds a constant or invoke dynamic reference entry to the map.\n\n@param tag\nthe tag\n@param index\nthe index\n@param name\nthe name\n@param descriptor\nthe descriptor\n@param bootstrapMethodIndex\nthe bootstrap method index"}
{"ID": 868, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Symbol addConstantUtf8Reference(final int tag, final String value) { int hashCode = hash(tag, value); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.value.equals(value)) { return entry; } entry = entry.next; } constantPool.put12(tag, addConstantUtf8(value)); return put(new Entry(constantPoolCount++, tag, value, hashCode)); } \n### Response:", "ground_truth": "Adds a CONSTANT_Class_info, CONSTANT_String_info, CONSTANT_MethodType_info,\nCONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table. Does\nnothing if the constant pool already contains a similar item.\n\n@param tag one of {@link Symbol#CONSTANT_CLASS_TAG}, {@link Symbol#CONSTANT_STRING_TAG}, {@link\nSymbol#CONSTANT_METHOD_TYPE_TAG}, {@link Symbol#CONSTANT_MODULE_TAG} or {@link\nSymbol#CONSTANT_PACKAGE_TAG}.\n@param value an internal class name, an arbitrary string, a method descriptor, a module or a\npackage name, depending on tag.\n@return a new or already existing Symbol with the given value.", "predict": "Add a constant Utf8 reference.\n\n@param tag the constant tag\n@param value the constant value\n@return the symbol"}
{"ID": 869, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addConstantUtf8Reference(final int index, final int tag, final String value) { add(new Entry(index, tag, value, hash(tag, value))); } \n### Response:", "ground_truth": "Adds a new CONSTANT_Class_info, CONSTANT_String_info, CONSTANT_MethodType_info,\nCONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table.\n\n@param index the constant pool index of the new Symbol.\n@param tag one of {@link Symbol#CONSTANT_CLASS_TAG}, {@link Symbol#CONSTANT_STRING_TAG}, {@link\nSymbol#CONSTANT_METHOD_TYPE_TAG}, {@link Symbol#CONSTANT_MODULE_TAG} or {@link\nSymbol#CONSTANT_PACKAGE_TAG}.\n@param value an internal class name, an arbitrary string, a method descriptor, a module or a\npackage name, depending on tag.", "predict": "Adds a constant UTF-8 reference to the map.\n\n@param index the index of the constant UTF-8 reference\n@param tag the constant UTF-8 tag\n@param value the constant UTF-8 value"}
{"ID": 870, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: Symbol addBootstrapMethod( final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) { ByteVector bootstrapMethodsAttribute = bootstrapMethods; if (bootstrapMethodsAttribute == null) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector(); } // The bootstrap method arguments can be Constant_Dynamic values, which reference other // bootstrap methods. We must therefore add the bootstrap method arguments to the constant pool // and BootstrapMethods attribute first, so that the BootstrapMethods attribute is not modified // while adding the given bootstrap method to it, in the rest of this method. for (Object bootstrapMethodArgument : bootstrapMethodArguments) { addConstant(bootstrapMethodArgument); } // Write the bootstrap method in the BootstrapMethods table. This is necessary to be able to // compare it with existing ones, and will be reverted below if there is already a similar // bootstrap method. int bootstrapMethodOffset = bootstrapMethodsAttribute.length; bootstrapMethodsAttribute.putShort( addConstantMethodHandle( bootstrapMethodHandle.getTag(), bootstrapMethodHandle.getOwner(), bootstrapMethodHandle.getName(), bootstrapMethodHandle.getDesc(), bootstrapMethodHandle.isInterface()) .index); int numBootstrapArguments = bootstrapMethodArguments.length; bootstrapMethodsAttribute.putShort(numBootstrapArguments); for (Object bootstrapMethodArgument : bootstrapMethodArguments) { bootstrapMethodsAttribute.putShort(addConstant(bootstrapMethodArgument).index); } // Compute the length and the hash code of the bootstrap method. int bootstrapMethodlength = bootstrapMethodsAttribute.length - bootstrapMethodOffset; int hashCode = bootstrapMethodHandle.hashCode(); for (Object bootstrapMethodArgument : bootstrapMethodArguments) { hashCode ^= bootstrapMethodArgument.hashCode(); } hashCode &= 0x7FFFFFFF; // Add the bootstrap method to the symbol table or revert the above changes. return addBootstrapMethod(bootstrapMethodOffset, bootstrapMethodlength, hashCode); } \n### Response:", "ground_truth": "Adds a bootstrap method to the BootstrapMethods attribute of this symbol table. Does nothing if\nthe BootstrapMethods already contains a similar bootstrap method.\n\n@param bootstrapMethodHandle a bootstrap method handle.\n@param bootstrapMethodArguments the bootstrap method arguments.\n@return a new or already existing Symbol with the given value.", "predict": "Add a bootstrap method to the symbol table.\n\n@param bootstrapMethodHandle the bootstrap method handle\n@param bootstrapMethodArguments the bootstrap method arguments\n@return the symbol"}
{"ID": 871, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: int addMergedType(final int typeTableIndex1, final int typeTableIndex2) { // TODO sort the arguments? The merge result should be independent of their order. long data = typeTableIndex1 | (((long) typeTableIndex2) << 32); int hashCode = hash(Symbol.MERGED_TYPE_TAG, typeTableIndex1 + typeTableIndex2); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == Symbol.MERGED_TYPE_TAG && entry.hashCode == hashCode && entry.data == data) { return entry.info; } entry = entry.next; } String type1 = typeTable[typeTableIndex1].value; String type2 = typeTable[typeTableIndex2].value; int commonSuperTypeIndex = addType(classWriter.getCommonSuperClass(type1, type2)); put(new Entry(typeCount, Symbol.MERGED_TYPE_TAG, data, hashCode)).info = commonSuperTypeIndex; return commonSuperTypeIndex; } \n### Response:", "ground_truth": "Adds a merged type in the type table of this symbol table. Does nothing if the type table\nalready contains a similar type.\n\n@param typeTableIndex1 a {@link Symbol#TYPE_TAG} type, specified by its index in the type\ntable.\n@param typeTableIndex2 another {@link Symbol#TYPE_TAG} type, specified by its index in the type\ntable.\n@return the index of a new or already existing {@link Symbol#TYPE_TAG} type Symbol,\ncorresponding to the common super class of the given types.", "predict": "Adds a merged type to the symbol table.\n\n@param typeTableIndex1 the first type index\n@param typeTableIndex2 the second type index\n@return the common super type index"}
{"ID": 872, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private int hash(final String name) { int h = 0; for (int i = name.length() - 1; i >= 0; i--) { char c = name.charAt(i); if (!caseSensitive) { if (c >= 'A' && c <= 'Z') { c += 32; } } h = 31 * h + c; } if (h > 0) { return h; } if (h == Integer.MIN_VALUE) { return Integer.MAX_VALUE; } return -h; } \n### Response:", "ground_truth": "Calculates hash value of the input string.", "predict": "Computes a hash for a string.\n\n@param name the name\n@return the hash"}
{"ID": 873, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpMultiMap<V> clear() { for (int i = 0; i < entries.length; i++) { entries[i] = null; } head.before = head.after = head; return this; } \n### Response:", "ground_truth": "Clears the map.", "predict": "Clears all the entries in this map."}
{"ID": 874, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<V> getAll(final String name) { LinkedList<V> values = new LinkedList<>(); int h = hash(name); int i = index(h); MapEntry<V> e = entries[i]; while (e != null) { if (e.hash == h && eq(name, e.key)) { values.addFirst(e.getValue()); } e = e.next; } return values; } \n### Response:", "ground_truth": "Returns all values associated with the name.", "predict": "Returns all values for the given name.\n\n@param name the name of the values\n@return the list of values"}
{"ID": 875, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Iterator<Map.Entry<String, V>> iterator() { final MapEntry[] e = {head.after}; return new Iterator<Map.Entry<String, V>>() { @Override public boolean hasNext() { return e[0] != head; } @Override @SuppressWarnings(\"unchecked\") public Map.Entry<String, V> next() { if (!hasNext()) { throw new NoSuchElementException(\"No next() entry in the iteration\"); } MapEntry<V> next = e[0]; e[0] = e[0].after; return next; } @Override public void remove() { throw new UnsupportedOperationException(); } }; } \n### Response:", "ground_truth": "Returns iterator of all entries.", "predict": "Returns an iterator over the entries in this map.\n\n@return an iterator over the entries in this map."}
{"ID": 876, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<Map.Entry<String, V>> entries() { List<Map.Entry<String, V>> all = new LinkedList<>(); MapEntry<V> e = head.after; while (e != head) { all.add(e); e = e.after; } return all; } \n### Response:", "ground_truth": "Returns all the entries of this map. Case sensitivity does not influence\nthe returned list, it always contains all of the values.", "predict": "Returns all the entries in this list."}
{"ID": 877, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void grow(final int minCapacity) { final int oldCapacity = buffer.length; int newCapacity = oldCapacity << 1; if (newCapacity - minCapacity < 0) { // special case, min capacity is larger then a grow newCapacity = minCapacity + 512; } buffer = Arrays.copyOf(buffer, newCapacity); } \n### Response:", "ground_truth": "Grows the buffer.", "predict": "Grow the buffer to the given capacity.\n\n@param minCapacity the minimum capacity to grow to"}
{"ID": 878, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public FastCharBuffer append(final CharSequence csq, final int start, final int end) { for (int i = start; i < end; i++) { append(csq.charAt(i)); } return this; } \n### Response:", "ground_truth": "Appends character sequence to buffer.", "predict": "Appends a character to the end of the buffer.\n\n@param csq the character to append\n@param start the index of the first character to append\n@param end the index of the last character to append\n@return the current buffer"}
{"ID": 879, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public AnnotationVisitor visitAnnotation(final String desc, final boolean visible) { AnnotationVisitor destAnn = methodVisitor.visitAnnotation(desc, visible); // [A4] return new AnnotationVisitorAdapter(destAnn); } \n### Response:", "ground_truth": "Copies target method annotations.", "predict": "Visit an annotation.\n\n@param desc the annotation description\n@param visible the visibility of the annotation\n@return the visitor instance"}
{"ID": 880, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void visitEnd() { createFirstChainDelegate_Continue(tmd); for (int p = 0; p < tmd.proxyData.length; p++) { tmd.selectCurrentProxy(p); createProxyMethod(tmd); } } \n### Response:", "ground_truth": "Finally, builds proxy methods if applied to current method.", "predict": "Override to create the proxy methods."}
{"ID": 881, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void createFirstChainDelegate_Start() { // check invalid access flags int access = msign.getAccessFlags(); if (!wd.allowFinalMethods) { if ((access & AsmUtil.ACC_FINAL) != 0) { // detect final throw new ProxettaException( \"Unable to create proxy for final method: \" + msign + \". Remove final modifier or change the pointcut definition.\"); } } // create proxy methods tmd = new TargetMethodData(msign, aspectList); access &= ~ACC_NATIVE; access &= ~ACC_ABSTRACT; methodVisitor = wd.dest.visitMethod( access, tmd.msign.getMethodName(), tmd.msign.getDescription(), tmd.msign.getAsmMethodSignature(), null); } \n### Response:", "ground_truth": "Starts creation of first chain delegate.", "predict": "Create the first proxy method."}
{"ID": 882, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void createFirstChainDelegate_Continue(final TargetMethodData tmd) { methodVisitor.visitCode(); if (tmd.msign.isStatic) { loadStaticMethodArguments(methodVisitor, tmd.msign); methodVisitor.visitMethodInsn( INVOKESTATIC, wd.thisReference, tmd.firstMethodName(), tmd.msign.getDescription(), false); } else { loadSpecialMethodArguments(methodVisitor, tmd.msign); methodVisitor.visitMethodInsn( INVOKESPECIAL, wd.thisReference, tmd.firstMethodName(), tmd.msign.getDescription(), false); } visitReturn(methodVisitor, tmd.msign, false); methodVisitor.visitMaxs(0, 0); methodVisitor.visitEnd(); } \n### Response:", "ground_truth": "Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method.\nThis method mirrors the target method.", "predict": "Create the first method signature that is a \"continue\" method.\n\n@param tmd the target method data"}
{"ID": 883, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Path parse(final String path) { return path == null ? new Path() : new Path(StringUtil.splitc(path, '.')); } \n### Response:", "ground_truth": "Parses input dot-separated string that represents a path.", "predict": "Parse a path.\n\n@param path the path\n@return the path"}
{"ID": 884, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Path push(final CharSequence field) { _push(field); if (altPath != null) { altPath.push(field); } return this; } \n### Response:", "ground_truth": "Push element to the path.", "predict": "Adds a field to the path.\n\n@param field the field to add\n@return the current path"}
{"ID": 885, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void configureServletContext(final ServletContext servletContext) { servletContext.addListener(jodd.servlet.RequestContextListener.class); if (decoraEnabled) { final FilterRegistration filter = servletContext.addFilter(\"decora\", jodd.decora.DecoraServletFilter.class); filter.addMappingForUrlPatterns(null, true, contextPath); } final FilterRegistration filter = servletContext.addFilter(\"madvoc\", jodd.madvoc.MadvocServletFilter.class); filter.addMappingForUrlPatterns(madvocDispatcherTypes, true, contextPath); } \n### Response:", "ground_truth": "Configures servlet context.", "predict": "Configure the servlet context.\n\n@param servletContext the servlet context"}
{"ID": 886, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object execute() { String methodName = targetMethodName(); Class returnType = returnType(); Object next = pathref.continueWith(this, methodName, returnType); return ProxyTarget.returnValue(next); } \n### Response:", "ground_truth": "Reads method name and appends it. Creates object for next call and\nreturns that value. If next object is unsupported, it will return null;", "predict": "Executes the target method."}
{"ID": 887, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public FieldDescriptor[] getAllFieldDescriptors() { if (allFields == null) { FieldDescriptor[] allFields = new FieldDescriptor[fieldsMap.size()]; int index = 0; for (FieldDescriptor fieldDescriptor : fieldsMap.values()) { allFields[index] = fieldDescriptor; index++; } Arrays.sort(allFields, Comparator.comparing(fd -> fd.getField().getName())); this.allFields = allFields; } return allFields; } \n### Response:", "ground_truth": "Returns all fields of this collection. Returns empty array\nif no fields exist. Initialized lazy.", "predict": "Returns an array of FieldDescriptors that describe all the fields in this\nobject."}
{"ID": 888, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") @Override protected <T> BeanDefinition<T> createBeanDefinitionForRegistration( final String name, Class<T> type, final Scope scope, final WiringMode wiringMode, final Consumer<T> consumer) { if (proxetta != null) { final Class originalType = type; final ProxettaFactory builder = proxetta.proxy(); builder.setTarget(type); type = builder.define(); return new ProxettaBeanDefinition( name, type, scope, wiringMode, originalType, proxetta.getAspects(new ProxyAspect[0]), consumer); } return super.createBeanDefinitionForRegistration(name, type, scope, wiringMode, consumer); } \n### Response:", "ground_truth": "Applies proxetta on bean class before bean registration.", "predict": "Create a bean definition for registration.\n\n@param name the name of the bean definition\n@param type the type of the bean definition\n@param scope the scope of the bean definition\n@param wiringMode the wiring mode\n@param consumer the consumer\n@return the bean definition"}
{"ID": 889, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static DbTransactionMode convertToDbMode(final JtxTransactionMode txMode) { final int isolation; switch (txMode.getIsolationLevel()) { case ISOLATION_DEFAULT: isolation = DbTransactionMode.ISOLATION_DEFAULT; break; case ISOLATION_NONE: isolation = DbTransactionMode.ISOLATION_NONE; break; case ISOLATION_READ_COMMITTED: isolation = DbTransactionMode.ISOLATION_READ_COMMITTED; break; case ISOLATION_READ_UNCOMMITTED: isolation = DbTransactionMode.ISOLATION_READ_UNCOMMITTED; break; case ISOLATION_REPEATABLE_READ: isolation = DbTransactionMode.ISOLATION_REPEATABLE_READ; break; case ISOLATION_SERIALIZABLE: isolation = DbTransactionMode.ISOLATION_SERIALIZABLE; break; default: throw new IllegalArgumentException(); } return new DbTransactionMode(isolation, txMode.isReadOnly()); } \n### Response:", "ground_truth": "Converter JTX transaction mode to DB transaction mode.", "predict": "Convert JtxTransactionMode to DbTransactionMode.\n\n@param txMode JtxTransactionMode\n@return DbTransactionMode"}
{"ID": 890, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Object readProperty(final Object source, final PropertyDescriptor propertyDescriptor) { Getter getter = propertyDescriptor.getGetter(declared); if (getter != null) { try { return getter.invokeGetter(source); } catch (Exception ex) { throw new JsonException(ex); } } return null; } \n### Response:", "ground_truth": "Reads property using property descriptor.", "predict": "Reads a property from the source object.\n\n@param source the source object\n@param propertyDescriptor the property descriptor\n@return the value of the property"}
{"ID": 891, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void putAll(final Map t) { for (Object o : t.entrySet()) { Map.Entry e = (Map.Entry) o; put(e.getKey(), e.getValue()); } } \n### Response:", "ground_truth": "Copies all of the mappings from the specified map to this one.\nThese mappings replace any mappings that this map had for any of the\nkeys currently in the specified Map.\n\n@param t Mappings to be stored in this map.", "predict": "Puts all the values in the given map.\n\n@param t the map to put the values in"}
{"ID": 892, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Buffer append(final Buffer buffer) { if (buffer.list.isEmpty()) { // nothing to append return buffer; } list.addAll(buffer.list); last = buffer.last; size += buffer.size; return this; } \n### Response:", "ground_truth": "Appends other buffer to this one.", "predict": "Appends the given buffer to this buffer.\n\n@param buffer the buffer to append\n@return this"}
{"ID": 893, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void writeTo(final Writer writer) throws IOException { for (Object o : list) { if (o instanceof FastByteBuffer) { FastByteBuffer fastByteBuffer = (FastByteBuffer) o; byte[] array = fastByteBuffer.toArray(); writer.write(new String(array, StringPool.ISO_8859_1)); } else if (o instanceof Uploadable) { Uploadable uploadable = (Uploadable) o; InputStream inputStream = uploadable.openInputStream(); try { StreamUtil.copy(inputStream, writer, StringPool.ISO_8859_1); } finally { StreamUtil.close(inputStream); } } } } \n### Response:", "ground_truth": "Writes content to the writer.", "predict": "Writes the contents of the given writer to the given writer.\n\n@param writer the writer to write to\n@throws IOException if an I/O error occurs"}
{"ID": 894, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void writeTo(final OutputStream out) throws IOException { for (Object o : list) { if (o instanceof FastByteBuffer) { FastByteBuffer fastByteBuffer = (FastByteBuffer) o; out.write(fastByteBuffer.toArray()); } else if (o instanceof Uploadable) { Uploadable uploadable = (Uploadable) o; InputStream inputStream = uploadable.openInputStream(); try { StreamUtil.copy(inputStream, out); } finally { StreamUtil.close(inputStream); } } } } \n### Response:", "ground_truth": "Writes content to the output stream.", "predict": "Writes the contents of the given list to the given output stream.\n\n@param out the output stream to write to\n@throws IOException if an I/O error occurs"}
{"ID": 895, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void writeTo(final OutputStream out, final HttpProgressListener progressListener) throws IOException { // start final int size = size(); final int callbackSize = progressListener.callbackSize(size); int count = 0; // total count int step = 0; // step is offset in current chunk progressListener.transferred(count); // loop for (Object o : list) { if (o instanceof FastByteBuffer) { FastByteBuffer fastByteBuffer = (FastByteBuffer) o; byte[] bytes = fastByteBuffer.toArray(); int offset = 0; while (offset < bytes.length) { // calc the remaining sending chunk size int chunk = callbackSize - step; // check if this chunk size fits the bytes array if (offset + chunk > bytes.length) { chunk = bytes.length - offset; } // writes the chunk out.write(bytes, offset, chunk); offset += chunk; step += chunk; count += chunk; // listener if (step >= callbackSize) { progressListener.transferred(count); step -= callbackSize; } } } else if (o instanceof Uploadable) { Uploadable uploadable = (Uploadable) o; InputStream inputStream = uploadable.openInputStream(); int remaining = uploadable.getSize(); try { while (remaining > 0) { // calc the remaining sending chunk size int chunk = callbackSize - step; // check if this chunk size fits the remaining size if (chunk > remaining) { chunk = remaining; } // writes remaining chunk StreamUtil.copy(inputStream, out, chunk); remaining -= chunk; step += chunk; count += chunk; // listener if (step >= callbackSize) { progressListener.transferred(count); step -= callbackSize; } } } finally { StreamUtil.close(inputStream); } } } // end if (step != 0) { progressListener.transferred(count); } } \n### Response:", "ground_truth": "Writes content to the output stream, using progress listener to track the sending progress.", "predict": "Writes the data to the given output stream.\n\n@param out the output stream to write to\n@param progressListener the listener to notify of progress\n@throws IOException if an IOException occurs"}
{"ID": 896, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getString(final String key) { CharSequence cs = (CharSequence) map.get(key); return cs == null ? null : cs.toString(); } \n### Response:", "ground_truth": "Returns the string value with the specified key.", "predict": "Returns the value of the given key in the map.\n\n@param key the key\n@return the value"}
{"ID": 897, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Integer getInteger(final String key) { Number number = (Number) map.get(key); if (number == null) { return null; } if (number instanceof Integer) { return (Integer) number; } return number.intValue(); } \n### Response:", "ground_truth": "returns the integer value with the specified key.", "predict": "Get the integer value for the given key.\n\n@param key the key\n@return the integer value"}
{"ID": 898, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Long getLong(final String key) { Number number = (Number) map.get(key); if (number == null) { return null; } if (number instanceof Long) { return (Long) number; } return number.longValue(); } \n### Response:", "ground_truth": "Returns the long value with the specified key.", "predict": "Get the long value for the given key.\n\n@param key the key\n@return the long value"}
{"ID": 899, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Double getDouble(final String key) { Number number = (Number) map.get(key); if (number == null) { return null; } if (number instanceof Double) { return (Double) number; } return number.doubleValue(); } \n### Response:", "ground_truth": "Returns the double value with the specified key.", "predict": "Get the double value for the given key.\n\n@param key the key\n@return the double value"}
{"ID": 900, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Float getFloat(final String key) { Number number = (Number) map.get(key); if (number == null) { return null; } if (number instanceof Float) { return (Float) number; } return number.floatValue(); } \n### Response:", "ground_truth": "Returns the float value with the specified key.", "predict": "Returns the float value for the given key.\n\n@param key the key\n@return the float value for the given key"}
{"ID": 901, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public <T> T getValue(final String key) { T val = (T) map.get(key); if (val instanceof Map) { return (T) new JsonObject((Map) val); } if (val instanceof List) { return (T) new JsonArray((List) val); } return val; } \n### Response:", "ground_truth": "Returns the value with the specified key, as an object.", "predict": "Get the value of a key\n\n@param key\n@return"}
{"ID": 902, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public JsonObject put(final String key, final String value) { Objects.requireNonNull(key); map.put(key, value); return this; } \n### Response:", "ground_truth": "Puts a string into the JSON object with the specified key.", "predict": "Adds a new value to the map.\n\n@param key the key\n@param value the value\n@return the object"}
{"ID": 903, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void useFolder(final String folderName) { closeFolderIfOpened(folder); try { this.folderName = folderName; this.folder = getService().getFolder(folderName); try { folder.open(Folder.READ_WRITE); } catch (final MailException ignore) { folder.open(Folder.READ_ONLY); } } catch (final MessagingException msgexc) { throw new MailException(\"Failed to connect to folder: \" + folderName, msgexc); } } \n### Response:", "ground_truth": "Opens new folder and closes previously opened folder.\n\n@param folderName Folder to open", "predict": "Uses the given folder name.\n\n@param folderName the folder name"}
{"ID": 904, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: ReceivedEmail[] receiveMessages( final EmailFilter filter, final Flags flagsToSet, final Flags flagsToUnset, final boolean envelope, final Consumer<Message[]> processedMessageConsumer) { useAndOpenFolderIfNotSet(); final Message[] messages; try { if (filter == null) { messages = folder.getMessages(); } else { messages = folder.search(filter.getSearchTerm()); } if (messages.length == 0) { return ReceivedEmail.EMPTY_ARRAY; } if (envelope) { final FetchProfile fetchProfile = new FetchProfile(); fetchProfile.add(FetchProfile.Item.ENVELOPE); fetchProfile.add(FetchProfile.Item.FLAGS); folder.fetch(messages, fetchProfile); } // process messages final ReceivedEmail[] emails = new ReceivedEmail[messages.length]; for (int i = 0; i < messages.length; i++) { final Message msg = messages[i]; // we need to parse message BEFORE flags are set! emails[i] = new ReceivedEmail(msg, envelope, attachmentStorage); if (!EmailUtil.isEmptyFlags(flagsToSet)) { emails[i].flags(flagsToSet); msg.setFlags(flagsToSet, true); } if (!EmailUtil.isEmptyFlags(flagsToUnset)) { emails[i].flags().remove(flagsToUnset); msg.setFlags(flagsToUnset, false); } if (EmailUtil.isEmptyFlags(flagsToSet) && !emails[i].isSeen()) { msg.setFlag(Flags.Flag.SEEN, false); } } if (processedMessageConsumer != null) { processedMessageConsumer.accept(messages); } // if messages were marked to be deleted, we need to expunge the folder if (!EmailUtil.isEmptyFlags(flagsToSet)) { if (flagsToSet.contains(Flags.Flag.DELETED)) { folder.expunge(); } } return emails; } catch (final MessagingException msgexc) { throw new MailException(\"Failed to fetch messages\", msgexc); } } \n### Response:", "ground_truth": "The main email receiving method.", "predict": "Receives all messages in the folder.\n\n@param filter\n@param flagsToSet\n@param flagsToUnset\n@param envelope\n@param processedMessageConsumer\n@return"}
{"ID": 905, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void updateEmailFlags(final ReceivedEmail receivedEmail) { useAndOpenFolderIfNotSet(); try { folder.setFlags(new int[] {receivedEmail.messageNumber()}, receivedEmail.flags(),true); } catch (MessagingException mex) { throw new MailException(\"Failed to fetch messages\", mex); } } \n### Response:", "ground_truth": "Updates the email flags on the server.", "predict": "Update the flags of the email.\n\n@param receivedEmail\nthe email to update"}
{"ID": 906, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void closeFolderIfOpened(final Folder folder) { if (folder != null) { try { folder.close(true); } catch (final MessagingException ignore) { } } } \n### Response:", "ground_truth": "Closes folder if opened and expunge deleted messages.", "predict": "Closes the given folder if it is open.\n\n@param folder the folder to close"}
{"ID": 907, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: DbQueryNamedParameter lookupNamedParameter(final String name) { DbQueryNamedParameter p = rootNP; while (p != null) { if (p.equalsName(name)) { return p; } p = p.next; } return null; } \n### Response:", "ground_truth": "Lookup for named parameter.", "predict": "Lookup a named parameter.\n\n@param name the name of the parameter\n@return the named parameter or null if not found"}
{"ID": 908, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String alias(final String target) { return StringPool.LEFT_CHEV.concat(target).concat(StringPool.RIGHT_CHEV); } \n### Response:", "ground_truth": "Creates alias.", "predict": "Returns the alias for the given target.\n\n@param target the target\n@return the alias"}
{"ID": 909, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected boolean validateAction(final String... profiles) { prepareValidator(); vtor.useProfiles(profiles); vtor.validate(this); vtor.resetProfiles(); List<Violation> violations = vtor.getViolations(); return violations == null; } \n### Response:", "ground_truth": "Validates action. Profiles are reset after the invocation.\n@return <code>true</code> if validation is successful, otherwise returns <code>false</code>", "predict": "Validates the action.\n\n@param profiles the profiles\n@return true if the action is valid"}
{"ID": 910, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void addViolation(final String name, final Object invalidValue) { prepareValidator(); vtor.addViolation(new Violation(name, this, invalidValue)); } \n### Response:", "ground_truth": "Adds action violation.", "predict": "Adds a violation to the validation.\n\n@param name the name of the violation\n@param invalidValue the value of the violation"}
{"ID": 911, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public RawData as(final String mimeOrExtension) { if (mimeOrExtension.contains(StringPool.SLASH)) { this.mimeType = mimeOrExtension; } else { this.mimeType = MimeTypes.getMimeType(mimeOrExtension); } return this; } \n### Response:", "ground_truth": "Defines mime type by providing real mime type or just extension!", "predict": "Get the mime type of the data.\n\n@param mimeOrExtension the mime type of the data\n@return the data"}
{"ID": 912, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public RawData downloadableAs(final String downloadFileName) { this.downloadFileName = downloadFileName; this.mimeType = MimeTypes.getMimeType(FileNameUtil.getExtension(downloadFileName)); return this; } \n### Response:", "ground_truth": "Defines download file name and mime type from the name extension.", "predict": "Sets the download file name.\n\n@param downloadFileName the download file name\n@return the current instance"}
{"ID": 913, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected T setTarget(final InputStream target) { assertTargetIsNotDefined(); targetInputStream = target; targetClass = null; targetClassName = null; return _this(); } \n### Response:", "ground_truth": "Defines class input stream as a target.", "predict": "Sets the target.\n\n@param target the target\n@return the current instance"}
{"ID": 914, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected T setTarget(final String targetName) { assertTargetIsNotDefined(); try { targetInputStream = ClassLoaderUtil.getClassAsStream(targetName); if (targetInputStream == null) { throw new ProxettaException(\"Target class not found: \" + targetName); } targetClassName = targetName; targetClass = null; } catch (IOException ioex) { StreamUtil.close(targetInputStream); throw new ProxettaException(\"Unable to get stream class name: \" + targetName, ioex); } return _this(); } \n### Response:", "ground_truth": "Defines class name as a target.\nClass will not be loaded by classloader!", "predict": "Sets the target class name.\n\n@param targetName the target class name\n@return the current instance"}
{"ID": 915, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public T setTarget(final Class target) { assertTargetIsNotDefined(); try { targetInputStream = ClassLoaderUtil.getClassAsStream(target); if (targetInputStream == null) { throw new ProxettaException(\"Target class not found: \" + target.getName()); } targetClass = target; targetClassName = target.getName(); } catch (IOException ioex) { StreamUtil.close(targetInputStream); throw new ProxettaException(\"Unable to stream class: \" + target.getName(), ioex); } return _this(); } \n### Response:", "ground_truth": "Defines class as a target.", "predict": "Sets the target class.\n\n@param target the target class\n@return the current instance"}
{"ID": 916, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void process() { if (targetInputStream == null) { throw new ProxettaException(\"Target missing: \" + targetClassName); } // create class reader final ClassReader classReader; try { classReader = new ClassReader(targetInputStream); } catch (IOException ioex) { throw new ProxettaException(\"Error reading class input stream\", ioex); } // reads information final TargetClassInfoReader targetClassInfoReader = new TargetClassInfoReader(proxetta.getClassLoader()); classReader.accept(targetClassInfoReader, 0); this.destClassWriter = new ClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES); // create proxy if (log.isDebugEnabled()) { log.debug(\"processing: \" + classReader.getClassName()); } WorkData wd = process(classReader, targetClassInfoReader); // store important data proxyApplied = wd.proxyApplied; proxyClassName = wd.thisReference.replace('/', '.'); } \n### Response:", "ground_truth": "Reads the target and creates destination class.", "predict": "Process the target class."}
{"ID": 917, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public byte[] create() { process(); byte[] result = toByteArray(); dumpClassInDebugFolder(result); if ((!proxetta.isForced()) && (!isProxyApplied())) { if (log.isDebugEnabled()) { log.debug(\"Proxy not applied: \" + StringUtil.toSafeString(targetClassName)); } return null; } if (log.isDebugEnabled()) { log.debug(\"Proxy created \" + StringUtil.toSafeString(targetClassName)); } return result; } \n### Response:", "ground_truth": "Returns byte array of created class.", "predict": "Creates the proxy class.\n\n@return the byte array containing the proxy class"}
{"ID": 918, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Class define() { process(); if ((!proxetta.isForced()) && (!isProxyApplied())) { if (log.isDebugEnabled()) { log.debug(\"Proxy not applied: \" + StringUtil.toSafeString(targetClassName)); } if (targetClass != null) { return targetClass; } if (targetClassName != null) { try { return ClassLoaderUtil.loadClass(targetClassName); } catch (ClassNotFoundException cnfex) { throw new ProxettaException(cnfex); } } } if (log.isDebugEnabled()) { log.debug(\"Proxy created: \" + StringUtil.toSafeString(targetClassName)); } try { ClassLoader classLoader = proxetta.getClassLoader(); if (classLoader == null) { classLoader = ClassLoaderUtil.getDefaultClassLoader(); if ((classLoader == null) && (targetClass != null)) { classLoader = targetClass.getClassLoader(); } } final byte[] bytes = toByteArray(); dumpClassInDebugFolder(bytes); return DefineClass.of(getProxyClassName(), bytes, classLoader); } catch (Exception ex) { throw new ProxettaException(\"Class definition failed\", ex); } } \n### Response:", "ground_truth": "Defines class.", "predict": "Helper method to define the proxy class.\n\n@return the proxy class"}
{"ID": 919, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object newInstance() { Class type = define(); try { return ClassUtil.newInstance(type); } catch (Exception ex) { throw new ProxettaException(\"Invalid Proxetta class\", ex); } } \n### Response:", "ground_truth": "Creates new instance of created class.\nAssumes default no-arg constructor.", "predict": "Create a new instance of the class defined in this class definition.\n\n@return a new instance of the class defined in this class definition."}
{"ID": 920, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void dumpClassInDebugFolder(final byte[] bytes) { File debugFolder = proxetta.getDebugFolder(); if (debugFolder == null) { return; } if (!debugFolder.exists() || !debugFolder.isDirectory()) { log.warn(\"Invalid debug folder: \" + debugFolder); } String fileName = proxyClassName; if (fileName == null) { fileName = \"proxetta-\" + System.currentTimeMillis(); } fileName += \".class\"; File file = new File(debugFolder, fileName); try { FileUtil.writeBytes(file, bytes); } catch (IOException ioex) { log.warn(\"Error writing class as \" + file, ioex); } } \n### Response:", "ground_truth": "Writes created class content to output folder for debugging purposes.", "predict": "Dump the proxy class to the debug folder.\n\n@param bytes the byte array containing the proxy class"}
{"ID": 921, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public T from(final String personalName, final String from) { return from(new EmailAddress(personalName, from)); } \n### Response:", "ground_truth": "Sets the FROM address by providing personal name and address.\n\n@param personalName personal name.\n@param from         email address.\n@return this\n@see #from(EmailAddress)", "predict": "Convenience method to create a new instance of this class from an email address.\n\n@param personalName the email address to use\n@param from the email address to use\n@return the new instance of this class"}
{"ID": 922, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public T to(final EmailAddress to) { this.to = ArraysUtil.append(this.to, to); return _this(); } \n### Response:", "ground_truth": "Appends TO address.\n\n@param to {@link EmailAddress} to add.\n@return this", "predict": "Sets the email address to send the response to.\n\n@param to the email address to send the response to\n@return the current instance of the {@link EmailAddress}"}
{"ID": 923, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public T to(final String personalName, final String to) { return to(new EmailAddress(personalName, to)); } \n### Response:", "ground_truth": "Appends TO address by personal name and email address.\n\n@param personalName personal name.\n@param to           email address.\n@return this\n@see #to(EmailAddress)", "predict": "Convenience method to create an email address with the given name and to\naddress.\n\n@param personalName the name of the email address\n@param to the email address to send to\n@return the email address"}
{"ID": 924, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public T replyTo(final EmailAddress... replyTo) { this.replyTo = ArraysUtil.join(this.replyTo, valueOrEmptyArray(replyTo)); return _this(); } \n### Response:", "ground_truth": "Appends REPLY-TO addresses.\n\n@param replyTo vararg of {@link EmailAddress}es to set.\n@return this", "predict": "Set replyTo email addresses.\n\n@param replyTo replyTo email addresses\n@return this"}
{"ID": 925, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public T cc(final EmailAddress... ccs) { this.cc = ArraysUtil.join(this.cc, valueOrEmptyArray(ccs)); return _this(); } \n### Response:", "ground_truth": "Appends CC addresses.\n\n@param ccs vararg of {@link EmailAddress}es to set.\n@return this", "predict": "Adds the email addresses to the list of EmailAddress.\n\n@param ccs the email addresses to add\n@return this"}
{"ID": 926, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public T textMessage(final String text, final String encoding) { return message(new EmailMessage(text, MimeTypes.MIME_TEXT_PLAIN, encoding)); } \n### Response:", "ground_truth": "Adds plain message text.\n\n@param text     The text to add as a {@link String}.\n@param encoding The encoding as a {@link String}.\n@return this\n@see #message(EmailMessage)", "predict": "Create a text message.\n\n@param text the text to send\n@param encoding the encoding to use\n@return the message"}
{"ID": 927, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public T htmlMessage(final String html, final String encoding) { return message(new EmailMessage(html, MimeTypes.MIME_TEXT_HTML, encoding)); } \n### Response:", "ground_truth": "Adds HTML message.\n\n@param html     The HTML to add as a {@link String}.\n@param encoding The encoding as a {@link String}.\n@return this\n@see #message(EmailMessage)", "predict": "Construct an HTML email message.\n\n@param html the HTML content\n@param encoding the encoding\n@return the email message"}
{"ID": 928, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public T header(final String name, final String value) { headers.put(name, value); return _this(); } \n### Response:", "ground_truth": "Sets header value.\n\n@param name  The name of the header.\n@param value The value of the header.\n@return this", "predict": "Sets a header.\n\n@param name the name of the header\n@param value the value of the header\n@return the current instance of this request handler"}
{"ID": 929, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String get(final String name, final String defaultValue) { Objects.requireNonNull(name); String value = null; try { if (System.getSecurityManager() == null) { value = System.getProperty(name); } else { value = AccessController.doPrivileged((PrivilegedAction<String>) () -> System.getProperty(name)); } } catch (Exception ignore) { } if (value == null) { return defaultValue; } return value; } \n### Response:", "ground_truth": "Returns system property. If key is not available, returns the default value.", "predict": "Get a property value.\n\n@param name the property name\n@param defaultValue the default value\n@return the property value"}
{"ID": 930, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean getBoolean(final String name, final boolean defaultValue) { String value = get(name); if (value == null) { return defaultValue; } value = value.trim().toLowerCase(); switch (value) { case \"true\" : case \"yes\" : case \"1\" : case \"on\" : return true; case \"false\": case \"no\" : case \"0\" : case \"off\" : return false; default: return defaultValue; } } \n### Response:", "ground_truth": "Returns system property as boolean.", "predict": "Returns the boolean value of the given name.\n\n@param name the name of the boolean\n@param defaultValue the default value\n@return the boolean value"}
{"ID": 931, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long getInt(final String name, final int defaultValue) { String value = get(name); if (value == null) { return defaultValue; } value = value.trim().toLowerCase(); try { return Integer.parseInt(value); } catch (NumberFormatException nfex) { return defaultValue; } } \n### Response:", "ground_truth": "Returns system property as an int.", "predict": "Returns the value of a named property as a long.\n\n@param name the name of the property\n@param defaultValue the default value\n@return the value of the named property as a long"}
{"ID": 932, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long getLong(final String name, final long defaultValue) { String value = get(name); if (value == null) { return defaultValue; } value = value.trim().toLowerCase(); try { return Long.parseLong(value); } catch (NumberFormatException nfex) { return defaultValue; } } \n### Response:", "ground_truth": "Returns system property as a long.", "predict": "Returns a long value for the given name.\n\n@param name the name of the value\n@param defaultValue the default value\n@return the value"}
{"ID": 933, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: MethodParameter[] getResolvedParameters() { if (paramExtractor == null) { return MethodParameter.EMPTY_ARRAY; } if (!paramExtractor.debugInfoPresent) { throw new ParamoException(\"Parameter names not available for method: \" + declaringClass.getName() + '#' + methodName); } return paramExtractor.getMethodParameters(); } \n### Response:", "ground_truth": "Returns method parameters once when method is parsed.\nIf method has no parameters, an empty array is returned.", "predict": "Returns the resolved parameters for the method.\n\n@return the resolved parameters for the method"}
{"ID": 934, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected int serializeKeyValue(final JsonContext jsonContext, final Path currentPath, final Object key, final Object value, int count) { if ((value == null) && jsonContext.isExcludeNulls()) { return count; } if (key != null) { currentPath.push(key.toString()); } else { currentPath.push(StringPool.NULL); } // check if we should include the field boolean include = true; if (value != null) { // + all collections are not serialized by default include = jsonContext.matchIgnoredPropertyTypes(value.getClass(), false, include); // + path queries: excludes/includes include = jsonContext.matchPathToQueries(include); } // done if (!include) { currentPath.pop(); return count; } if (key == null) { jsonContext.pushName(null, count > 0); } else { jsonContext.pushName(key.toString(), count > 0); } jsonContext.serialize(value); if (jsonContext.isNamePopped()) { count++; } currentPath.pop(); return count; } \n### Response:", "ground_truth": "Serializes key and a value.", "predict": "Serializes a key value pair.\n\n@param jsonContext the json context\n@param currentPath the current path\n@param key the key\n@param value the value\n@param count the count\n@return the count"}
{"ID": 935, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String lookupAlias(final String alias) { String value = actionsManager.lookupPathAlias(alias); if (value == null) { ActionRuntime cfg = actionsManager.lookup(alias); if (cfg != null) { value = cfg.getActionPath(); } } return value; } \n### Response:", "ground_truth": "Lookups value as an alias and, if not found, as a default alias.", "predict": "Lookup alias.\n\n@param alias the alias\n@return the alias"}
{"ID": 936, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String resolveAlias(final String value) { final StringBuilder result = new StringBuilder(value.length()); int i = 0; int len = value.length(); while (i < len) { int ndx = value.indexOf('<', i); if (ndx == -1) { // alias markers not found if (i == 0) { // try whole string as an alias String alias = lookupAlias(value); return (alias != null ? alias : value); } else { result.append(value.substring(i)); } break; } // alias marked found result.append(value.substring(i, ndx)); ndx++; int ndx2 = value.indexOf('>', ndx); String aliasName = (ndx2 == -1 ? value.substring(ndx) : value.substring(ndx, ndx2)); // process alias String alias = lookupAlias(aliasName); if (alias != null) { result.append(alias); } else { // alias not found if (log.isWarnEnabled()) { log.warn(\"Alias not found: \" + aliasName); } } i = ndx2 + 1; } // fix prefix '//' - may happened when aliases are used i = 0; len = result.length(); while (i < len) { if (result.charAt(i) != '/') { break; } i++; } if (i > 1) { return result.substring(i - 1, len); } return result.toString(); } \n### Response:", "ground_truth": "Returns resolved alias result value or passed on, if alias doesn't exist.", "predict": "Resolve an alias.\n\n@param value the value\n@return the string"}
{"ID": 937, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ResultPath resolveResultPath(String path, String value) { boolean absolutePath = false; if (value != null) { // [*] resolve alias in value value = resolveAlias(value); // [*] absolute paths if (StringUtil.startsWithChar(value, '/')) { absolutePath = true; int dotNdx = value.indexOf(\"..\"); if (dotNdx != -1) { path = value.substring(0, dotNdx); value = value.substring(dotNdx + 2); } else { path = value; value = null; } } else { // [*] resolve # in value and path int i = 0; while (i < value.length()) { if (value.charAt(i) != '#') { break; } int dotNdx = MadvocUtil.lastIndexOfSlashDot(path); if (dotNdx != -1) { // dot found path = path.substring(0, dotNdx); } i++; } if (i > 0) { // remove # from value value = value.substring(i); // [*] update path and value if (StringUtil.startsWithChar(value, '.')) { value = value.substring(1); } else { int dotNdx = value.indexOf(\"..\"); if (dotNdx != -1) { path += '.' + value.substring(0, dotNdx); value = value.substring(dotNdx + 2); } else { if (value.length() > 0) { if (StringUtil.endsWithChar(path, '/')) { path += value; } else { path += '.' + value; } } value = null; } } } } } if (!absolutePath) { if (resultPathPrefix != null) { path = resultPathPrefix + path; } } return new ResultPath(path, value); } \n### Response:", "ground_truth": "Resolves result path.", "predict": "Resolve the path to a ResultPath object.\n\n@param path the path to be resolved\n@param value the value to be used in the path\n@return the resolved path"}
{"ID": 938, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String resolveResultPathString(final String path, final String value) { final ResultPath resultPath = resolveResultPath(path, value); final String result = resultPath.pathValue(); return resolveAlias(result); } \n### Response:", "ground_truth": "Resolves result path as a string, when parts are not important\nand when only full string matters. Additional alias resolving\non full path is done.", "predict": "Resolve a path to a result path.\n\n@param path the path\n@param value the value\n@return the result path"}
{"ID": 939, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int lastIndexOfSlashDot(final String str) { int slashNdx = str.lastIndexOf('/'); int dotNdx = StringUtil.lastIndexOf(str, '.', str.length(), slashNdx); if (dotNdx == -1) { if (slashNdx == -1) { return -1; } slashNdx++; if (slashNdx < str.length() - 1) { dotNdx = slashNdx; } else { dotNdx = -1; } } return dotNdx; } \n### Response:", "ground_truth": "Locates last dot after the last slash or just slash.", "predict": "Returns the last position of the dot in the given string.\n\n@param str the string to search\n@return the position of the dot in the string"}
{"ID": 940, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int lastIndexOfDotAfterSlash(final String str) { int slashNdx = str.lastIndexOf('/'); slashNdx++; return StringUtil.lastIndexOf(str, '.', str.length(), slashNdx); } \n### Response:", "ground_truth": "Locates last index of dot after the optional last slash.", "predict": "Returns the last dot after the last slash in the given string.\n\n@param str the string to search\n@return the index of the last dot after the last slash"}
{"ID": 941, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int indexOfDotAfterSlash(final String str) { int slashNdx = str.lastIndexOf('/'); if (slashNdx == -1) { slashNdx = 0; } return str.indexOf('.', slashNdx); } \n### Response:", "ground_truth": "Locates first dot after the last slash.", "predict": "Returns the index of the dot after the last slash in the given string.\n\n@param str the string to search\n@return the index of the dot after the last slash in the given string"}
{"ID": 942, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String stripLastCamelWord(String name) { int ndx = name.length() - 1; while (ndx >= 0) { if (CharUtil.isUppercaseAlpha(name.charAt(ndx))) { break; } ndx--; } if (ndx >= 0) { name = name.substring(0, ndx); } return name; } \n### Response:", "ground_truth": "Removes last CamelWord", "predict": "Removes the last camel case word from the given name.\n\n@param name the name to remove the last camel case word from\n@return the modified name"}
{"ID": 943, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String resolveSchemaName(final Class<?> type, final String defaultSchemaName) { String schemaName = null; final DbTable dbTable = type.getAnnotation(DbTable.class); if (dbTable != null) { schemaName = dbTable.schema().trim(); } if ((schemaName == null) || (schemaName.length() == 0)) { schemaName = defaultSchemaName; } return schemaName; } \n### Response:", "ground_truth": "Resolves schema name from a type. Uses default schema name if not specified.", "predict": "Resolves the schema name for a given type.\n\n@param type the type to resolve\n@param defaultSchemaName the default schema name\n@return the schema name"}
{"ID": 944, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static DbEntityColumnDescriptor resolveColumnDescriptors( final DbEntityDescriptor dbEntityDescriptor, final PropertyDescriptor property, final boolean isAnnotated, final ColumnNamingStrategy columnNamingStrategy) { String columnName = null; boolean isId = false; Class<? extends SqlType> sqlTypeClass = null; // read ID annotation DbId dbId = null; if (property.getFieldDescriptor() != null) { dbId = property.getFieldDescriptor().getField().getAnnotation(DbId.class); } if (dbId == null && property.getReadMethodDescriptor() != null) { dbId = property.getReadMethodDescriptor().getMethod().getAnnotation(DbId.class); } if (dbId == null && property.getWriteMethodDescriptor() != null) { dbId = property.getWriteMethodDescriptor().getMethod().getAnnotation(DbId.class); } if (dbId != null) { columnName = dbId.value().trim(); sqlTypeClass = dbId.sqlType(); isId = true; } else { DbColumn dbColumn = null; if (property.getFieldDescriptor() != null) { dbColumn = property.getFieldDescriptor().getField().getAnnotation(DbColumn.class); } if (dbColumn == null && property.getReadMethodDescriptor() != null) { dbColumn = property.getReadMethodDescriptor().getMethod().getAnnotation(DbColumn.class); } if (dbColumn == null && property.getWriteMethodDescriptor() != null) { dbColumn = property.getWriteMethodDescriptor().getMethod().getAnnotation(DbColumn.class); } if (dbColumn != null) { columnName = dbColumn.value().trim(); sqlTypeClass = dbColumn.sqlType(); } else { if (isAnnotated) { return null; } } } if (StringUtil.isEmpty(columnName)) { // default annotation value columnName = columnNamingStrategy.convertPropertyNameToColumnName(property.getName()); } else { if (!columnNamingStrategy.isStrictAnnotationNames()) { columnName = columnNamingStrategy.applyToColumnName(columnName); } } if (sqlTypeClass == SqlType.class) { sqlTypeClass = null; } return new DbEntityColumnDescriptor( dbEntityDescriptor, quoteIfRequired(columnName, columnNamingStrategy.isAlwaysQuoteNames(), columnNamingStrategy.getQuoteChar()), property.getName(), property.getType(), isId, sqlTypeClass); } \n### Response:", "ground_truth": "Resolves column descriptor from property. If property is annotated value will be read\nfrom annotation. If property is not annotated, then property will be ignored\nif entity is annotated. Otherwise, column name is generated from the property name.", "predict": "Resolve the column descriptor for the given property.\n\n@param dbEntityDescriptor\nthe db entity descriptor\n@param property\nthe property\n@param isAnnotated\nthe is annotated\n@param columnNamingStrategy\nthe column naming strategy\n@return the DbEntityColumnDescriptor"}
{"ID": 945, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void init(final long[] key, final long[] tweak) { final int newNw = key.length; // only create new arrays if the value of N{w} changes (different key size) if (nw != newNw) { nw = newNw; switch (nw) { case WORDS_4: pi = PI4; rpi = RPI4; r = R4; break; case WORDS_8: pi = PI8; rpi = RPI8; r = R8; break; case WORDS_16: pi = PI16; rpi = RPI16; r = R16; break; default: throw new RuntimeException(\"Invalid threefish key\"); } this.k = new long[nw + 1]; // instantiation of these fields here for performance reasons vd = new long[nw]; // v is the intermediate value v{d} at round d ed = new long[nw]; // ed is the value of e{d} at round d fd = new long[nw]; // fd is the value of f{d} at round d ksd = new long[nw]; // ksd is the value of k{s} at round d } System.arraycopy(key, 0, this.k, 0, key.length); long knw = EXTENDED_KEY_SCHEDULE_CONST; for (int i = 0; i < nw; i++) { knw ^= this.k[i]; } this.k[nw] = knw; // set tweak values t[0] = tweak[0]; t[1] = tweak[1]; t[2] = t[0] ^ t[1]; } \n### Response:", "ground_truth": "Initialize the cipher using the key and the tweak value.\n\n@param key the Threefish key to use\n@param tweak the tweak values to use", "predict": "Initialize the threefish key schedule\n\n@param key\n@param tweak"}
{"ID": 946, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void mix(final int j, final int d) { y[0] = x[0] + x[1]; final long rotl = r[d % DEPTH_OF_D_IN_R][j]; // java left rotation for a long y[1] = (x[1] << rotl) | (x[1] >>> (Long.SIZE - rotl)); y[1] ^= y[0]; } \n### Response:", "ground_truth": "Implementation of the MIX function.\n\n@param j the index in the rotation constants\n@param d the round", "predict": "Mix the two values.\n\n@param j the value to mix\n@param d the value to mix"}
{"ID": 947, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void demix(final int j, final int d) { y[1] ^= y[0]; final long rotr = r[d % DEPTH_OF_D_IN_R][j]; // NOTE performance: darn, creation on stack! // right shift x[1] = (y[1] << (Long.SIZE - rotr)) | (y[1] >>> rotr); x[0] = y[0] - x[1]; } \n### Response:", "ground_truth": "Implementation of the un-MIX function.", "predict": "Demix the two elements of the matrix.\n\n@param j\nThe index of the element to mix.\n@param d\nThe index of the element to mix."}
{"ID": 948, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void keySchedule(final int s) { for (int i = 0; i < nw; i++) { // just put in the main key first ksd[i] = k[(s + i) % (nw + 1)]; // don't add anything for i = 0,...,Nw - 4 if (i == nw - 3) { // second to last ksd[i] += t[s % TWEAK_VALUES]; } else if (i == nw - 2) { // first to last ksd[i] += t[(s + 1) % TWEAK_VALUES]; } else if (i == nw - 1) { // last ksd[i] += s; } } } \n### Response:", "ground_truth": "Creates the subkeys.\n\n@param s the value of the round devided by 4", "predict": "Calculate the schedule for the key.\n\n@param s the index of the key"}
{"ID": 949, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void init(final String keyMessage, final long tweak1, final long tweak2) { long[] tweak = new long[] {tweak1, tweak2}; byte[] key = new byte[blockSize / Byte.SIZE]; byte[] keyData = StringUtil.getBytes(keyMessage); System.arraycopy(keyData, 0, key, 0, key.length < keyData.length ? key.length : keyData.length); init(bytesToLongs(key), tweak); } \n### Response:", "ground_truth": "Initializes cipher in a simple way.", "predict": "Initializes the key with the given tweak values.\n\n@param keyMessage the key message\n@param tweak1 the tweak value 1\n@param tweak2 the tweak value 2"}
{"ID": 950, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public byte[] encryptBlock(final byte[] content, final int offset) { long[] contentBlock = bytesToLongs(content, offset, blockSizeInBytes); long[] encryptedBlock = new long[blockSize / Long.SIZE]; blockEncrypt(contentBlock, encryptedBlock); return longsToBytes(encryptedBlock); } \n### Response:", "ground_truth": "Encrypts a block.", "predict": "Encrypts a block of data.\n\n@param content the data to encrypt\n@param offset the offset of the data to encrypt\n@return the encrypted data"}
{"ID": 951, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected static long[] bytesToLongs(final byte[] ba, final int offset, final int size) { long[] result = new long[size >> 3]; int i8 = offset; for (int i = 0; i < result.length; i++) { result[i] = Bits.getLong(ba, i8); i8 += 8; } return result; } \n### Response:", "ground_truth": "Converts segment of byte array into long array.", "predict": "Converts a byte array to a long array.\n\n@param ba\nthe byte array\n@param offset\nthe offset\n@param size\nthe size\n@return the long array"}
{"ID": 952, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static String removeAnyBounding(final char s, final char e, final String str) { if (str == null || str.length() < 2) { return str; } if (str.startsWith(String.valueOf(s)) && str.endsWith(String.valueOf(e))) { return str.substring(1, str.length() - 1); } return str; } \n### Response:", "ground_truth": "If the string starts and ends with start and end char, remove them,\notherwise return the string as it was passed in.", "predict": "Removes any bounding characters from the given string.\n\n@param s\n@param e\n@param str\n@return"}
{"ID": 953, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String path() { if (methref != null) { final String methodName = methref.ref(); return target.getName() + '#' + methodName; } return path; } \n### Response:", "ground_truth": "Returns path value.", "predict": "Returns the path to this method.\n\n@return the path to this method"}
{"ID": 954, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static File zlib(final File file) throws IOException { if (file.isDirectory()) { throw new IOException(\"Can't zlib folder\"); } FileInputStream fis = new FileInputStream(file); Deflater deflater = new Deflater(Deflater.BEST_COMPRESSION); String zlibFileName = file.getAbsolutePath() + ZLIB_EXT; DeflaterOutputStream dos = new DeflaterOutputStream(new FileOutputStream(zlibFileName), deflater); try { StreamUtil.copy(fis, dos); } finally { StreamUtil.close(dos); StreamUtil.close(fis); } return new File(zlibFileName); } \n### Response:", "ground_truth": "Compresses a file into zlib archive.", "predict": "Compress a file using zlib compression.\n\n@param file the file to compress\n@return the compressed file\n@throws IOException if the compression fails"}
{"ID": 955, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static File gzip(final File file) throws IOException { if (file.isDirectory()) { throw new IOException(\"Can't gzip folder\"); } FileInputStream fis = new FileInputStream(file); String gzipName = file.getAbsolutePath() + GZIP_EXT; GZIPOutputStream gzos = new GZIPOutputStream(new FileOutputStream(gzipName)); try { StreamUtil.copy(fis, gzos); } finally { StreamUtil.close(gzos); StreamUtil.close(fis); } return new File(gzipName); } \n### Response:", "ground_truth": "Compresses a file into gzip archive.", "predict": "GZips a file.\n\n@param file the file to gzip\n@return the gzip file\n@throws IOException if gzip fails"}
{"ID": 956, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static File ungzip(final File file) throws IOException { String outFileName = FileNameUtil.removeExtension(file.getAbsolutePath()); File out = new File(outFileName); out.createNewFile(); FileOutputStream fos = new FileOutputStream(out); GZIPInputStream gzis = new GZIPInputStream(new FileInputStream(file)); try { StreamUtil.copy(gzis, fos); } finally { StreamUtil.close(fos); StreamUtil.close(gzis); } return out; } \n### Response:", "ground_truth": "Decompress gzip archive.", "predict": "Ungzips a file.\n\n@param file the file to ungzip\n@return the ungziped file\n@throws IOException if an IOException occurs"}
{"ID": 957, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static List<String> listZip(final File zipFile) throws IOException { List<String> entries = new ArrayList<>(); ZipFile zip = new ZipFile(zipFile); Enumeration zipEntries = zip.entries(); while (zipEntries.hasMoreElements()) { ZipEntry entry = (ZipEntry) zipEntries.nextElement(); String entryName = entry.getName(); entries.add(entryName); } return Collections.unmodifiableList(entries); } \n### Response:", "ground_truth": "Lists zip content.", "predict": "Returns a list of all the entries in a zip file.\n\n@param zipFile the zip file\n@return the list of entries\n@throws IOException if the zip file cannot be read"}
{"ID": 958, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void unzip(final String zipFile, final String destDir, final String... patterns) throws IOException { unzip(new File(zipFile), new File(destDir), patterns); } \n### Response:", "ground_truth": "Extracts zip file content to the target directory.\n@see #unzip(java.io.File, java.io.File, String...)", "predict": "Unzip a zip file.\n\n@param zipFile the zip file\n@param destDir the destination directory\n@param patterns the patterns to unzip\n@throws IOException if an error occurs"}
{"ID": 959, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void addToZip(final ZipOutputStream zos, final File file, String path, final String comment, final boolean recursive) throws IOException { if (!file.exists()) { throw new FileNotFoundException(file.toString()); } if (path == null) { path = file.getName(); } while (path.length() != 0 && path.charAt(0) == '/') { path = path.substring(1); } boolean isDir = file.isDirectory(); if (isDir) { // add folder record if (!StringUtil.endsWithChar(path, '/')) { path += '/'; } } ZipEntry zipEntry = new ZipEntry(path); zipEntry.setTime(file.lastModified()); if (comment != null) { zipEntry.setComment(comment); } if (isDir) { zipEntry.setSize(0); zipEntry.setCrc(0); } zos.putNextEntry(zipEntry); if (!isDir) { InputStream is = new FileInputStream(file); try { StreamUtil.copy(is, zos); } finally { StreamUtil.close(is); } } zos.closeEntry(); // continue adding if (recursive && file.isDirectory()) { boolean noRelativePath = StringUtil.isEmpty(path); final File[] children = file.listFiles(); if (children != null && children.length != 0) { for (File child : children) { String childRelativePath = (noRelativePath ? StringPool.EMPTY : path) + child.getName(); addToZip(zos, child, childRelativePath, comment, recursive); } } } } \n### Response:", "ground_truth": "Adds single entry to ZIP output stream.\n\n@param zos zip output stream\n@param file file or folder to add\n@param path relative path of file entry; if <code>null</code> files name will be used instead\n@param comment optional comment\n@param recursive when set to <code>true</code> content of added folders will be added, too", "predict": "Adds a file to the zip.\n\n@param zos\n@param file\n@param path\n@param comment\n@param recursive\n@throws IOException"}
{"ID": 960, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void addToZip(final ZipOutputStream zos, final byte[] content, String path, final String comment) throws IOException { while (path.length() != 0 && path.charAt(0) == '/') { path = path.substring(1); } if (StringUtil.endsWithChar(path, '/')) { path = path.substring(0, path.length() - 1); } ZipEntry zipEntry = new ZipEntry(path); zipEntry.setTime(System.currentTimeMillis()); if (comment != null) { zipEntry.setComment(comment); } zos.putNextEntry(zipEntry); InputStream is = new ByteArrayInputStream(content); try { StreamUtil.copy(is, zos); } finally { StreamUtil.close(is); } zos.closeEntry(); } \n### Response:", "ground_truth": "Adds byte content into the zip as a file.", "predict": "Adds a new entry to the zip file.\n\n@param zos\n@param content\n@param path\n@param comment\n@throws IOException"}
{"ID": 961, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public FieldDescriptor getFieldDescriptor(final String name, final boolean declared) { final FieldDescriptor fieldDescriptor = getFields().getFieldDescriptor(name); if (fieldDescriptor != null) { if (!fieldDescriptor.matchDeclared(declared)) { return null; } } return fieldDescriptor; } \n### Response:", "ground_truth": "Returns field descriptor.", "predict": "Returns the field descriptor for the given name, or null if the field does not exist.\n\n@param name the name of the field\n@param declared if true, the field is declared, otherwise null\n@return the field descriptor"}
{"ID": 962, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public PropertyDescriptor getPropertyDescriptor(final String name, final boolean declared) { PropertyDescriptor propertyDescriptor = getProperties().getPropertyDescriptor(name); if ((propertyDescriptor != null) && propertyDescriptor.matchDeclared(declared)) { return propertyDescriptor; } return null; } \n### Response:", "ground_truth": "Returns property descriptor. Declared flag is matched on both read and write\nmethods.", "predict": "Returns the property descriptor for the given name.\n\n@param name\nthe name\n@param declared\nthe declared\n@return the property descriptor"}
{"ID": 963, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void setRequestBundleName(final ServletRequest request, final String bundleName) { if (log.isDebugEnabled()) { log.debug(\"Bundle name for this request: \" + bundleName); } request.setAttribute(REQUEST_BUNDLE_NAME_ATTR, bundleName); } \n### Response:", "ground_truth": "Sets bundle name for provided servlet request.", "predict": "Sets the bundle name for the request.\n\n@param request the request\n@param bundleName the bundle name"}
{"ID": 964, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void setSessionLocale(final HttpSession session, final String localeCode) { if (log.isDebugEnabled()) { log.debug(\"Locale stored to session: \" + localeCode); } Locale locale = Locale.forLanguageTag(localeCode); session.setAttribute(SESSION_LOCALE_ATTR, locale); } \n### Response:", "ground_truth": "Saves Locale to HTTP session.", "predict": "Sets the locale for the session.\n\n@param session the session\n@param localeCode the locale code"}
{"ID": 965, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Locale getSessionLocale(final HttpSession session) { Locale locale = (Locale) session.getAttribute(SESSION_LOCALE_ATTR); return locale == null ? MESSAGE_RESOLVER.getFallbackLocale() : locale; } \n### Response:", "ground_truth": "Returns current locale from session.\ns", "predict": "Gets the locale of the session.\n\n@param session the session\n@return the locale of the session"}
{"ID": 966, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String[] filterParametersForBeanName(String beanName, final boolean resolveReferenceParams) { beanName = beanName + '.'; List<String> list = new ArrayList<>(); for (Map.Entry<String, Object> entry : params.entrySet()) { String key = entry.getKey(); if (!key.startsWith(beanName)) { continue; } list.add(key); if (!resolveReferenceParams) { continue; } // resolve all references String value = PropertiesUtil.resolveProperty(params, key); entry.setValue(value); } if (list.isEmpty()) { return StringPool.EMPTY_ARRAY; } else { return list.toArray(new String[0]); } } \n### Response:", "ground_truth": "Returns an array of param keys that belongs to provided bean.\nOptionally resolves the value of returned parameters.", "predict": "Filters the parameters for a given bean name.\n\n@param beanName the bean name\n@param resolveReferenceParams if true, resolve the parameters for the given bean name\n@return the filtered parameters"}
{"ID": 967, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public PropsEntries profile(final String... profiles) { if (profiles == null) { return this; } for (String profile : profiles) { addProfiles(profile); } return this; } \n### Response:", "ground_truth": "Enables profiles to iterate.", "predict": "Add profiles to the PropsEntries.\n\n@param profiles the profiles to add\n@return the PropsEntries"}
{"ID": 968, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long getLongLittleEndian(final byte[] buf, final int offset) { return ((long) buf[offset + 7] << 56) // no mask needed | ((buf[offset + 6] & 0xffL) << 48) | ((buf[offset + 5] & 0xffL) << 40) | ((buf[offset + 4] & 0xffL) << 32) | ((buf[offset + 3] & 0xffL) << 24) | ((buf[offset + 2] & 0xffL) << 16) | ((buf[offset + 1] & 0xffL) << 8) | ((buf[offset] & 0xffL)); // no shift needed } \n### Response:", "ground_truth": "Gets a long from a byte buffer in little endian byte order.", "predict": "Convert a byte array to a long.\n\n@param buf the byte array\n@param offset the offset\n@return the long"}
{"ID": 969, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static byte[] readStream(final InputStream inputStream, final boolean close) throws IOException { if (inputStream == null) { throw new IOException(\"Class not found\"); } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); byte[] data = new byte[INPUT_STREAM_DATA_CHUNK_SIZE]; int bytesRead; while ((bytesRead = inputStream.read(data, 0, data.length)) != -1) { outputStream.write(data, 0, bytesRead); } outputStream.flush(); return outputStream.toByteArray(); } finally { if (close) { inputStream.close(); } } } \n### Response:", "ground_truth": "Reads the given input stream and returns its content as a byte array.\n\n@param inputStream an input stream.\n@param close true to close the input stream after reading.\n@return the content of the given input stream.\n@throws IOException if a problem occurs during reading.", "predict": "Reads the input stream and returns the bytes.\n\n@param inputStream The input stream to read from.\n@param close If true, the stream is closed after reading.\n@return The bytes read from the input stream.\n@throws IOException If an IOException occurs."}
{"ID": 970, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Label readLabel(final int bytecodeOffset, final Label[] labels) { if (labels[bytecodeOffset] == null) { labels[bytecodeOffset] = new Label(); } return labels[bytecodeOffset]; } \n### Response:", "ground_truth": "Returns the label corresponding to the given bytecode offset. The default implementation of\nthis method creates a label for the given offset if it has not been already created.\n\n@param bytecodeOffset a bytecode offset in a method.\n@param labels the already created labels, indexed by their offset. If a label already exists\nfor bytecodeOffset this method must not create a new one. Otherwise it must store the new\nlabel in this array.\n@return a non null Label, which must be equal to labels[bytecodeOffset].", "predict": "Reads a label from the bytecode at the given offset.\n\n@param bytecodeOffset the offset of the bytecode\n@param labels the array of labels\n@return the label"}
{"ID": 971, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private int getTypeAnnotationBytecodeOffset( final int[] typeAnnotationOffsets, final int typeAnnotationIndex) { if (typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets.length || readByte(typeAnnotationOffsets[typeAnnotationIndex]) < TypeReference.INSTANCEOF) { return -1; } return readUnsignedShort(typeAnnotationOffsets[typeAnnotationIndex] + 1); } \n### Response:", "ground_truth": "Returns the bytecode offset corresponding to the specified JVMS 'type_annotation' structure, or\n-1 if there is no such type_annotation of if it does not have a bytecode offset.\n\n@param typeAnnotationOffsets the offset of each 'type_annotation' entry in a\nRuntime[In]VisibleTypeAnnotations attribute, or null.\n@param typeAnnotationIndex the index a 'type_annotation' entry in typeAnnotationOffsets.\n@return bytecode offset corresponding to the specified JVMS 'type_annotation' structure, or -1\nif there is no such type_annotation of if it does not have a bytecode offset.", "predict": "Returns the bytecode offset of the given annotation."}
{"ID": 972, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private int readElementValues( final AnnotationVisitor annotationVisitor, final int annotationOffset, final boolean named, final char[] charBuffer) { int currentOffset = annotationOffset; // Read the num_element_value_pairs field (or num_values field for an array_value). int numElementValuePairs = readUnsignedShort(currentOffset); currentOffset += 2; if (named) { // Parse the element_value_pairs array. while (numElementValuePairs-- > 0) { String elementName = readUTF8(currentOffset, charBuffer); currentOffset = readElementValue(annotationVisitor, currentOffset + 2, elementName, charBuffer); } } else { // Parse the array_value array. while (numElementValuePairs-- > 0) { currentOffset = readElementValue(annotationVisitor, currentOffset, /* named = */ null, charBuffer); } } if (annotationVisitor != null) { annotationVisitor.visitEnd(); } return currentOffset; } \n### Response:", "ground_truth": "Reads the element values of a JVMS 'annotation' structure and makes the given visitor visit\nthem. This method can also be used to read the values of the JVMS 'array_value' field of an\nannotation's 'element_value'.\n\n@param annotationVisitor the visitor that must visit the values.\n@param annotationOffset the start offset of an 'annotation' structure (excluding its type_index\nfield) or of an 'array_value' structure.\n@param named if the annotation values are named or not. This should be true to parse the values\nof a JVMS 'annotation' structure, and false to parse the JVMS 'array_value' of an\nannotation's element_value.\n@param charBuffer the buffer used to read strings in the constant pool.\n@return the end offset of the JVMS 'annotation' or 'array_value' structure.", "predict": "Reads the values of an annotation element.\n\n@param annotationVisitor the annotation visitor to use.\n@param annotationOffset the current offset in the annotation.\n@param named      if true, the element name is also read.\n@param charBuffer the char buffer to read from.\n@return the current offset in the annotation."}
{"ID": 973, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private int readVerificationTypeInfo( final int verificationTypeInfoOffset, final Object[] frame, final int index, final char[] charBuffer, final Label[] labels) { int currentOffset = verificationTypeInfoOffset; int tag = b[currentOffset++] & 0xFF; switch (tag) { case Frame.ITEM_TOP: frame[index] = Opcodes.TOP; break; case Frame.ITEM_INTEGER: frame[index] = Opcodes.INTEGER; break; case Frame.ITEM_FLOAT: frame[index] = Opcodes.FLOAT; break; case Frame.ITEM_DOUBLE: frame[index] = Opcodes.DOUBLE; break; case Frame.ITEM_LONG: frame[index] = Opcodes.LONG; break; case Frame.ITEM_NULL: frame[index] = Opcodes.NULL; break; case Frame.ITEM_UNINITIALIZED_THIS: frame[index] = Opcodes.UNINITIALIZED_THIS; break; case Frame.ITEM_OBJECT: frame[index] = readClass(currentOffset, charBuffer); currentOffset += 2; break; case Frame.ITEM_UNINITIALIZED: frame[index] = createLabel(readUnsignedShort(currentOffset), labels); currentOffset += 2; break; default: throw new IllegalArgumentException(); } return currentOffset; } \n### Response:", "ground_truth": "Reads a JVMS 'verification_type_info' structure and stores it at the given index in the given\narray.\n\n@param verificationTypeInfoOffset the start offset of the 'verification_type_info' structure to\nread.\n@param frame the array where the parsed type must be stored.\n@param index the index in 'frame' where the parsed type must be stored.\n@param charBuffer the buffer used to read strings in the constant pool.\n@param labels the labels of the method currently being parsed, indexed by their offset. If the\nparsed type is an ITEM_Uninitialized, a new label for the corresponding NEW instruction is\nstored in this array if it does not already exist.\n@return the end offset of the JVMS 'verification_type_info' structure.", "predict": "Reads the type info for a frame.\n\n@param verificationTypeInfoOffset The offset into the frame\n@param frame The frame to read\n@param index The index of the type info\n@param charBuffer The char buffer\n@param labels The labels\n@return The offset into the frame"}
{"ID": 974, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private int[] readBootstrapMethodsAttribute(final int maxStringLength) { char[] charBuffer = new char[maxStringLength]; int currentAttributeOffset = getFirstAttributeOffset(); int[] currentBootstrapMethodOffsets = null; for (int i = readUnsignedShort(currentAttributeOffset - 2); i > 0; --i) { // Read the attribute_info's attribute_name and attribute_length fields. String attributeName = readUTF8(currentAttributeOffset, charBuffer); int attributeLength = readInt(currentAttributeOffset + 2); currentAttributeOffset += 6; if (Constants.BOOTSTRAP_METHODS.equals(attributeName)) { // Read the num_bootstrap_methods field and create an array of this size. currentBootstrapMethodOffsets = new int[readUnsignedShort(currentAttributeOffset)]; // Compute and store the offset of each 'bootstrap_methods' array field entry. int currentBootstrapMethodOffset = currentAttributeOffset + 2; for (int j = 0; j < currentBootstrapMethodOffsets.length; ++j) { currentBootstrapMethodOffsets[j] = currentBootstrapMethodOffset; // Skip the bootstrap_method_ref and num_bootstrap_arguments fields (2 bytes each), // as well as the bootstrap_arguments array field (of size num_bootstrap_arguments * 2). currentBootstrapMethodOffset += 4 + readUnsignedShort(currentBootstrapMethodOffset + 2) * 2; } return currentBootstrapMethodOffsets; } currentAttributeOffset += attributeLength; } return null; } \n### Response:", "ground_truth": "Reads the BootstrapMethods attribute to compute the offset of each bootstrap method.\n\n@param maxStringLength a conservative estimate of the maximum length of the strings contained\nin the constant pool of the class.\n@return the offsets of the bootstrap methods or null.", "predict": "Read the bootstrap methods attribute.\n\n@param maxStringLength the maximum length of the string to read\n@return the bootstrap methods offset array"}
{"ID": 975, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected CtorDescriptor[] inspectConstructors() { Class type = classDescriptor.getType(); Constructor[] ctors = type.getDeclaredConstructors(); CtorDescriptor[] allCtors = new CtorDescriptor[ctors.length]; for (int i = 0; i < ctors.length; i++) { Constructor ctor = ctors[i]; CtorDescriptor ctorDescriptor = createCtorDescriptor(ctor); allCtors[i] = ctorDescriptor; if (ctorDescriptor.isDefault()) { defaultCtor = ctorDescriptor; } } return allCtors; } \n### Response:", "ground_truth": "Inspects all declared constructors of a target type.", "predict": "Returns an array of CtorDescriptor objects that describe the\nconstructors of the class."}
{"ID": 976, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public CtorDescriptor getCtorDescriptor(final Class... args) { ctors: for (CtorDescriptor ctorDescriptor : allCtors) { Class[] arg = ctorDescriptor.getParameters(); if (arg.length != args.length) { continue; } for (int j = 0; j < arg.length; j++) { if (arg[j] != args[j]) { continue ctors; } } return ctorDescriptor; } return null; } \n### Response:", "ground_truth": "Finds constructor description that matches given argument types.", "predict": "Returns the CtorDescriptor for the given arguments.\n\n@param args the arguments\n@return the CtorDescriptor"}
{"ID": 977, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") protected Map<String, TransientBeanData> getRequestMap(final HttpServletRequest servletRequest) { return (Map<String, TransientBeanData>) servletRequest.getAttribute(ATTR_NAME); } \n### Response:", "ground_truth": "Returns instance map from http request.", "predict": "Gets the request map.\n\n@param servletRequest the servlet request\n@return the request map"}
{"ID": 978, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Map<String, TransientBeanData> createRequestMap(final HttpServletRequest servletRequest) { Map<String, TransientBeanData> map = new HashMap<>(); servletRequest.setAttribute(ATTR_NAME, map); return map; } \n### Response:", "ground_truth": "Creates instance map and stores it in the request.", "predict": "Create request map.\n\n@param servletRequest the servlet request\n@return the map"}
{"ID": 979, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected long[] convertArrayToArray(final Object value) { final Class valueComponentType = value.getClass().getComponentType(); final long[] result; if (valueComponentType.isPrimitive()) { result = convertPrimitiveArrayToArray(value, valueComponentType); } else { // convert object array to target array final Object[] array = (Object[]) value; result = new long[array.length]; for (int i = 0; i < array.length; i++) { result[i] = convertType(array[i]); } } return result; } \n### Response:", "ground_truth": "Converts array value to array.", "predict": "Converts an array to a long array.\n\n@param value the value\n@return the long array"}
{"ID": 980, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void init(final FilterConfig filterConfig) throws ServletException { // final String decoraManagerClass = filterConfig.getInitParameter(PARAM_DECORA_MANAGER); if (decoraManagerClass != null) { try { final Class decoraManagerType = ClassLoaderUtil.loadClass(decoraManagerClass); decoraManager = (DecoraManager) ClassUtil.newInstance(decoraManagerType); } catch (Exception ex) { log.error(\"Unable to load Decora manager class: \" + decoraManagerClass, ex); throw new ServletException(ex); } } else { decoraManager = createDecoraManager(); } // final String decoraParserClass = filterConfig.getInitParameter(PARAM_DECORA_PARSER); if (decoraParserClass != null) { try { final Class decoraParserType = ClassLoaderUtil.loadClass(decoraParserClass); decoraParser = (DecoraParser) ClassUtil.newInstance(decoraParserType); } catch (Exception ex) { log.error(\"Unable to load Decora parser class: \" + decoraParserClass, ex); throw new ServletException(ex); } } else { decoraParser = createDecoraParser(); } // final String decoraCache = filterConfig.getInitParameter(PARAM_DECORA_CACHE); if (decoraCache != null) { cached = Converter.get().toBoolean(decoraCache, false); } } \n### Response:", "ground_truth": "Initializes Decora filter. Loads manager and parser from init parameters.", "predict": "Initialize the DecoraManager and DecoraParser.\n\n@param filterConfig the filter config\n@throws ServletException if an error occurs"}
{"ID": 981, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public FindFile onFile(final Consumer<File> fileConsumer) { if (consumers == null) { consumers = Consumers.of(fileConsumer); } else { consumers.add(fileConsumer); } return this; } \n### Response:", "ground_truth": "Registers file consumer", "predict": "Add a consumer to the consumer group for the file.\n\n@param fileConsumer consumer to add to the consumer group\n@return the current consumer group"}
{"ID": 982, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public FindFile searchPath(final URI searchPath) { File file; try { file = new File(searchPath); } catch (Exception ex) { throw new FindFileException(\"URI error: \" + searchPath, ex); } addPath(file); return this; } \n### Response:", "ground_truth": "Specifies the search path. Throws an exception if URI is invalid.", "predict": "Searches the given path and returns the file.\n\n@param searchPath the path to search\n@return the FindFile instance"}
{"ID": 983, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public FindFile searchPath(final URL searchPath) { File file = FileUtil.toContainerFile(searchPath); if (file == null) { throw new FindFileException(\"URL error: \" + searchPath); } addPath(file); return this; } \n### Response:", "ground_truth": "Specifies the search path. Throws an exception if URL is invalid.", "predict": "Search for a file in the given path.\n\n@param searchPath the path to search for\n@return the FindFile instance\n@throws FindFileException if the given path is invalid"}
{"ID": 984, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public FindFile include(final String... patterns) { for (String pattern : patterns) { rules.include(pattern); } return this; } \n### Response:", "ground_truth": "Defines include patterns.", "predict": "Adds a set of patterns to the search.\n\n@param patterns the patterns to include\n@return the FindFile instance"}
{"ID": 985, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public FindFile exclude(final String... patterns) { for (String pattern : patterns) { rules.exclude(pattern); } return this; } \n### Response:", "ground_truth": "Defines exclude patterns.", "predict": "Excludes the given patterns from the search.\n\n@param patterns the patterns to exclude\n@return the FindFile instance"}
{"ID": 986, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void addPath(final File path) { if (!path.exists()) { return; } if (pathList == null) { pathList = new LinkedList<>(); } pathList.add(path); } \n### Response:", "ground_truth": "Adds existing search path to the file list.\nNon existing files are ignored.\nIf path is a folder, it will be scanned for all files.", "predict": "Adds a path to the list of paths.\n\n@param path the path to add"}
{"ID": 987, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<File> findAll() { List<File> allFiles = new ArrayList<>(); File file; while ((file = nextFile()) != null) { allFiles.add(file); } return allFiles; } \n### Response:", "ground_truth": "Finds all files and returns list of founded files.", "predict": "Returns all files in the directory.\n\n@return all files in the directory"}
{"ID": 988, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void init() { rules.detectMode(); todoFiles = new LinkedList<>(); todoFolders = new LinkedList<>(); if (pathList == null) { pathList = new LinkedList<>(); return; } if (pathListOriginal == null) { pathListOriginal = (LinkedList<File>) pathList.clone(); } String[] files = new String[pathList.size()]; int index = 0; Iterator<File> iterator = pathList.iterator(); while (iterator.hasNext()) { File file = iterator.next(); if (file.isFile()) { files[index++] = file.getAbsolutePath(); iterator.remove(); } } if (index != 0) { FilesIterator filesIterator = new FilesIterator(files); todoFiles.add(filesIterator); } } \n### Response:", "ground_truth": "Initializes file walking.\nSeparates input files and folders.", "predict": "Initializes the list of files to be added to the todo list."}
{"ID": 989, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Iterator<File> iterator() { return new Iterator<File>() { private File nextFile; @Override public boolean hasNext() { nextFile = nextFile(); return nextFile != null; } @Override public File next() { if (nextFile == null) { throw new NoSuchElementException(); } return nextFile; } @Override public void remove() { throw new UnsupportedOperationException(); } }; } \n### Response:", "ground_truth": "Returns file walking iterator.", "predict": "Returns an iterator over the files in this directory.\n\n@return an iterator over the files in this directory."}
{"ID": 990, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public WiringMode resolveBeanWiringMode(final Class type) { PetiteBean petiteBean = ((Class<?>) type).getAnnotation(PetiteBean.class); return petiteBean != null ? petiteBean.wiring() : WiringMode.DEFAULT; } \n### Response:", "ground_truth": "Resolves bean's auto-wire flag from the annotation. Returns default auto-wire if annotation doesn't exist.", "predict": "Resolves the WiringMode for the given type.\n\n@param type the type to resolve\n@return the WiringMode for the given type"}
{"ID": 991, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String resolveBeanName(final Class type, final boolean useLongTypeName) { PetiteBean petiteBean = ((Class<?>)type).getAnnotation(PetiteBean.class); String name = null; if (petiteBean != null) { name = petiteBean.value().trim(); } if ((name == null) || (name.length() == 0)) { if (useLongTypeName) { name = type.getName(); } else { name = StringUtil.uncapitalize(type.getSimpleName()); } } return name; } \n### Response:", "ground_truth": "Resolves bean's name from bean annotation or type name. May be used for resolving bean name\nof base type during registration of bean subclass.", "predict": "Resolves the name of the bean.\n\n@param type the bean type\n@param useLongTypeName if true, the name is the long name of the type\n@return the name of the bean"}
{"ID": 992, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public PrintWriter getWriter() { if (outWriter == null) { if (outStream != null) { throw new IllegalStateException(\"Can't call getWriter() after getOutputStream()\"); } bufferedWriter = new FastCharArrayWriter(); outWriter = new PrintWriter(bufferedWriter) { @Override public void close() { // do not close the print writer after rendering // since it will remove reference to bufferedWriter } }; } return outWriter; } \n### Response:", "ground_truth": "Returns a writer.", "predict": "Returns the output writer."}
{"ID": 993, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ServletOutputStream getOutputStream() { if (outStream == null) { if (outWriter != null) { throw new IllegalStateException(\"Can't call getOutputStream() after getWriter()\"); } bufferOutputStream = new FastByteArrayServletOutputStream(); outStream = bufferOutputStream; } return outStream; } \n### Response:", "ground_truth": "Returns a servlet output stream.", "predict": "Returns the output stream for the response.\n\n@return the output stream for the response."}
{"ID": 994, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getClassName() { switch (sort) { case VOID: return \"void\"; case BOOLEAN: return \"boolean\"; case CHAR: return \"char\"; case BYTE: return \"byte\"; case SHORT: return \"short\"; case INT: return \"int\"; case FLOAT: return \"float\"; case LONG: return \"long\"; case DOUBLE: return \"double\"; case ARRAY: StringBuilder stringBuilder = new StringBuilder(getElementType().getClassName()); for (int i = getDimensions(); i > 0; --i) { stringBuilder.append(\"[]\"); } return stringBuilder.toString(); case OBJECT: case INTERNAL: return valueBuffer.substring(valueBegin, valueEnd).replace('/', '.'); default: throw new AssertionError(); } } \n### Response:", "ground_truth": "Returns the binary name of the class corresponding to this type. This method must not be used\non method types.\n\n@return the binary name of the class corresponding to this type.", "predict": "Returns the class name of the type."}
{"ID": 995, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String getConstructorDescriptor(final Constructor<?> constructor) { StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append('('); Class<?>[] parameters = constructor.getParameterTypes(); for (Class<?> parameter : parameters) { appendDescriptor(parameter, stringBuilder); } return stringBuilder.append(\")V\").toString(); } \n### Response:", "ground_truth": "Returns the descriptor corresponding to the given constructor.\n\n@param constructor a {@link Constructor} object.\n@return the descriptor of the given constructor.", "predict": "Returns the descriptor for the given constructor.\n\n@param constructor the constructor\n@return the descriptor"}
{"ID": 996, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String getMethodDescriptor(final Type returnType, final Type... argumentTypes) { StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append('('); for (Type argumentType : argumentTypes) { argumentType.appendDescriptor(stringBuilder); } stringBuilder.append(')'); returnType.appendDescriptor(stringBuilder); return stringBuilder.toString(); } \n### Response:", "ground_truth": "Returns the descriptor corresponding to the given argument and return types.\n\n@param returnType the return type of the method.\n@param argumentTypes the argument types of the method.\n@return the descriptor corresponding to the given argument and return types.", "predict": "Returns the method descriptor for the given return type and argument types.\n\n@param returnType the return type\n@param argumentTypes the argument types\n@return the method descriptor"}
{"ID": 997, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String getMethodDescriptor(final Method method) { StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append('('); Class<?>[] parameters = method.getParameterTypes(); for (Class<?> parameter : parameters) { appendDescriptor(parameter, stringBuilder); } stringBuilder.append(')'); appendDescriptor(method.getReturnType(), stringBuilder); return stringBuilder.toString(); } \n### Response:", "ground_truth": "Returns the descriptor corresponding to the given method.\n\n@param method a {@link Method} object.\n@return the descriptor of the given method.", "predict": "Returns the method descriptor for the given method.\n\n@param method the method\n@return the method descriptor"}
{"ID": 998, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void appendDescriptor(final StringBuilder stringBuilder) { if (sort == OBJECT) { stringBuilder.append(valueBuffer, valueBegin - 1, valueEnd + 1); } else if (sort == INTERNAL) { stringBuilder.append('L').append(valueBuffer, valueBegin, valueEnd).append(';'); } else { stringBuilder.append(valueBuffer, valueBegin, valueEnd); } } \n### Response:", "ground_truth": "Appends the descriptor corresponding to this type to the given string buffer.\n\n@param stringBuilder the string builder to which the descriptor must be appended.", "predict": "Appends the descriptor to the string.\n\n@param stringBuilder the string builder to append the descriptor to"}
{"ID": 999, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public int getSize() { switch (sort) { case VOID: return 0; case BOOLEAN: case CHAR: case BYTE: case SHORT: case INT: case FLOAT: case ARRAY: case OBJECT: case INTERNAL: return 1; case LONG: case DOUBLE: return 2; default: throw new AssertionError(); } } \n### Response:", "ground_truth": "Returns the size of values of this type. This method must not be used for method types.\n\n@return the size of values of this type, i.e., 2 for {@code long} and {@code double}, 0 for\n{@code void} and 1 otherwise.", "predict": "Returns the number of elements in the array."}
{"ID": 1000, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int getArgumentsAndReturnSizes(final String methodDescriptor) { int argumentsSize = 1; // Skip the first character, which is always a '('. int currentOffset = 1; int currentChar = methodDescriptor.charAt(currentOffset); // Parse the argument types and compute their size, one at a each loop iteration. while (currentChar != ')') { if (currentChar == 'J' || currentChar == 'D') { currentOffset++; argumentsSize += 2; } else { while (methodDescriptor.charAt(currentOffset) == '[') { currentOffset++; } if (methodDescriptor.charAt(currentOffset++) == 'L') { // Skip the argument descriptor content. currentOffset = methodDescriptor.indexOf(';', currentOffset) + 1; } argumentsSize += 1; } currentChar = methodDescriptor.charAt(currentOffset); } currentChar = methodDescriptor.charAt(currentOffset + 1); if (currentChar == 'V') { return argumentsSize << 2; } else { int returnSize = (currentChar == 'J' || currentChar == 'D') ? 2 : 1; return argumentsSize << 2 | returnSize; } } \n### Response:", "ground_truth": "Computes the size of the arguments and of the return value of a method.\n\n@param methodDescriptor a method descriptor.\n@return the size of the arguments of the method (plus one for the implicit this argument),\nargumentsSize, and the size of its return value, returnSize, packed into a single int i =\n{@code (argumentsSize &lt;&lt; 2) | returnSize} (argumentsSize is therefore equal to {@code\ni &gt;&gt; 2}, and returnSize to {@code i &amp; 0x03}).", "predict": "Returns the argument and return sizes of a method descriptor.\n\n@param methodDescriptor the method descriptor\n@return the argument and return sizes"}
{"ID": 1001, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setRollbackOnly(final Throwable th) { if (!isNoTransaction()) { if ((status != STATUS_MARKED_ROLLBACK) && (status != STATUS_ACTIVE)) { throw new JtxException(\"TNo active TX that can be marked as rollback only\"); } } rollbackCause = th; status = STATUS_MARKED_ROLLBACK; } \n### Response:", "ground_truth": "Modify the transaction associated with the target object such that the only possible outcome\nof the transaction is to roll back the transaction.", "predict": "Sets the rollback only flag.\n\n@param th the exception to set as rollback only"}
{"ID": 1002, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void commitOrRollback(boolean doCommit) { if (log.isDebugEnabled()) { if (doCommit) { log.debug(\"Commit JTX\"); } else { log.debug(\"Rollback JTX\"); } } boolean forcedRollback = false; if (!isNoTransaction()) { if (isRollbackOnly()) { if (doCommit) { doCommit = false; forcedRollback = true; } } else if (!isActive()) { if (isCompleted()) { throw new JtxException(\"TX is already completed, commit or rollback should be called once per TX\"); } throw new JtxException(\"No active TX to \" + (doCommit ? \"commit\" : \"rollback\")); } } if (doCommit) { commitAllResources(); } else { rollbackAllResources(forcedRollback); } } \n### Response:", "ground_truth": "Performs either commit or rollback on all transaction resources.", "predict": "Commit or rollback the transaction.\n\n@param doCommit\nif true, commit the transaction"}
{"ID": 1003, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void rollbackAllResources(final boolean wasForced) { status = STATUS_ROLLING_BACK; Exception lastException = null; Iterator<JtxResource> it = resources.iterator(); while (it.hasNext()) { JtxResource resource = it.next(); try { resource.rollbackTransaction(); } catch (Exception ex) { lastException = ex; } finally { it.remove(); } } txManager.removeTransaction(this); status = STATUS_ROLLEDBACK; if (lastException != null) { status = STATUS_UNKNOWN; throw new JtxException(\"Rollback failed: one or more TX resources couldn't rollback a TX\", lastException); } if (wasForced) { throw new JtxException(\"TX rolled back because it has been marked as rollback-only\", rollbackCause); } } \n### Response:", "ground_truth": "Rollbacks all attached resources. Resource will be closed. and detached from this transaction.\nIf exception occurs, it will be rethrown at the end.", "predict": "Roll back all resources.\n\n@param wasForced\ntrue if the resources were forced to be rolled back"}
{"ID": 1004, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <E> E requestResource(final Class<E> resourceType) { if (isCompleted()) { throw new JtxException(\"TX is already completed, resource are not available after commit or rollback\"); } if (isRollbackOnly()) { throw new JtxException(\"TX is marked as rollback only, resource are not available\", rollbackCause); } if (!isNoTransaction() && !isActive()) { throw new JtxException(\"Resources are not available since TX is not active\"); } checkTimeout(); E resource = lookupResource(resourceType); if (resource == null) { int maxResources = txManager.getMaxResourcesPerTransaction(); if ((maxResources != -1) && (resources.size() >= maxResources)) { throw new JtxException(\"TX already has attached max. number of resources\"); } JtxResourceManager<E> resourceManager = txManager.lookupResourceManager(resourceType); resource = resourceManager.beginTransaction(mode, isActive()); resources.add(new JtxResource<>(this, resourceManager, resource)); } return resource; } \n### Response:", "ground_truth": "Requests a resource. If resource is not found, it will be created and new transaction will be started on it.", "predict": "Request resource for the transaction\n\n@param resourceType resource type\n@return resource"}
{"ID": 1005, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void popName() { if (isPushed) { if (pushedComma) { writeComma(); } String name = pushedName; pushedName = null; isPushed = false; writeName(name); } } \n### Response:", "ground_truth": "Writes stored name to JSON string. Cleans storage.", "predict": "Removes the name from the stack and writes it back to the output stream."}
{"ID": 1006, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void writeString(final String value) { popName(); write(StringPool.QUOTE); int len = value.length(); for (int i = 0; i < len; i++) { char c = value.charAt(i); switch (c) { case '\"': write(\"\\\\\\\"\"); break; case '\\\\': write(\"\\\\\\\\\"); break; case '/': if (strictStringEncoding) { write(\"\\\\/\"); } else { write(c); } break; case '\\b': write(\"\\\\b\"); break; case '\\f': write(\"\\\\f\"); break; case '\\n': write(\"\\\\n\"); break; case '\\r': write(\"\\\\r\"); break; case '\\t': write(\"\\\\t\"); break; default: if (Character.isISOControl(c)) { unicode(c); } else { write(c); } } } write(StringPool.QUOTE); } \n### Response:", "ground_truth": "Write a quoted and escaped value to the output.", "predict": "Write a string.\n\n@param value the string to write"}
{"ID": 1007, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void unicode(final char c) { write(\"\\\\u\"); int n = c; for (int i = 0; i < 4; ++i) { int digit = (n & 0xf000) >> 12; char hex = CharUtil.int2hex(digit); write(hex); n <<= 4; } } \n### Response:", "ground_truth": "Writes unicode representation of a character.", "predict": "Writes a Unicode character.\n\n@param c the character to write"}
{"ID": 1008, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void write(final CharSequence charSequence) { popName(); try { out.append(charSequence); } catch (IOException ioex) { throw new JsonException(ioex); } } \n### Response:", "ground_truth": "Appends char sequence to the buffer. Used for numbers, nulls, booleans, etc.", "predict": "Writes a char sequence to the output stream.\n\n@param charSequence the char sequence to write"}
{"ID": 1009, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public LagartoDomBuilderConfig setParsingErrorLogLevelName(String logLevel) { logLevel = logLevel.trim().toUpperCase(); parsingErrorLogLevel = Logger.Level.valueOf(logLevel); return this; } \n### Response:", "ground_truth": "Sets parsing error log level as a name.", "predict": "Sets the name of the log level for parsing errors.\n\n@param logLevel the name of the log level for parsing errors\n@return this"}
{"ID": 1010, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void startRegion(final int start, final int tagLen, final int deepLevel) { this.regionStart = start + tagLen; this.regionLength = 0; this.regionTagStart = start; this.deepLevel = deepLevel; } \n### Response:", "ground_truth": "Starts defining region by setting the start index and reset region length to zero.", "predict": "Sets the start position of the region.\n\n@param start\nThe start position of the region.\n@param tagLen\nThe length of the tag.\n@param deepLevel\nThe level of the deep level."}
{"ID": 1011, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean isContaining(final String include) { if (value == null) { return false; } if (splits == null) { splits = StringUtil.splitc(value, ' '); } for (String s: splits) { if (s.equals(include)) { return true; } } return false; } \n### Response:", "ground_truth": "Returns true if attribute is containing some value.", "predict": "Returns true if the value contains the specified string.\n\n@param include the string to check\n@return true if the value contains the specified string"}
{"ID": 1012, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void registerPseudoFunction(final Class<? extends PseudoFunction> pseudoFunctionType) { PseudoFunction pseudoFunction; try { pseudoFunction = ClassUtil.newInstance(pseudoFunctionType); } catch (Exception ex) { throw new CSSellyException(ex); } PSEUDO_FUNCTION_MAP.put(pseudoFunction.getPseudoFunctionName(), pseudoFunction); } \n### Response:", "ground_truth": "Registers pseudo function.", "predict": "Registers a pseudo function class.\n\n@param pseudoFunctionType the pseudo function class"}
{"ID": 1013, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static PseudoFunction<?> lookupPseudoFunction(final String pseudoFunctionName) { PseudoFunction pseudoFunction = PSEUDO_FUNCTION_MAP.get(pseudoFunctionName); if (pseudoFunction == null) { throw new CSSellyException(\"Unsupported pseudo function: \" + pseudoFunctionName); } return pseudoFunction; } \n### Response:", "ground_truth": "Lookups pseudo function for given pseudo function name.", "predict": "Lookup a pseudo function by name.\n\n@param pseudoFunctionName the pseudo function name\n@return the pseudo function"}
{"ID": 1014, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void visit(final int version, int access, final String name, final String signature, final String superName, final String[] interfaces) { wd.init(name, superName, this.suffix, this.reqProxyClassName); // change access of destination access &= ~AsmUtil.ACC_ABSTRACT; // write destination class final int v = ProxettaAsmUtil.resolveJavaVersion(version); wd.dest.visit(v, access, wd.thisReference, signature, wd.superName, null); wd.proxyAspects = new ProxyAspectData[aspects.length]; for (int i = 0; i < aspects.length; i++) { wd.proxyAspects[i] = new ProxyAspectData(wd, aspects[i], i); } } \n### Response:", "ground_truth": "Creates destination subclass header from current target class. Destination name is created from targets by\nadding a suffix and, optionally, a number. Destination extends the target.", "predict": "Override this method to generate the proxy class."}
{"ID": 1015, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public AnnotationVisitor visitAnnotation(final String desc, final boolean visible) { AnnotationVisitor destAnn = wd.dest.visitAnnotation(desc, visible); // [A3] return new AnnotationVisitorAdapter(destAnn); } \n### Response:", "ground_truth": "Copies all destination type annotations to the target.", "predict": "Visit an annotation.\n\n@param desc annotation description\n@param visible true if annotation is visible\n@return annotation visitor"}
{"ID": 1016, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void makeStaticInitBlock() { if (wd.adviceClinits != null) { MethodVisitor mv = wd.dest.visitMethod(AsmUtil.ACC_STATIC, CLINIT, DESC_VOID, null, null); mv.visitCode(); for (String name : wd.adviceClinits) { mv.visitMethodInsn( INVOKESTATIC, wd.thisReference, name, DESC_VOID, false); } mv.visitInsn(RETURN); mv.visitMaxs(0, 0); mv.visitEnd(); } } \n### Response:", "ground_truth": "Creates static initialization block that simply calls all\nadvice static init methods in correct order.", "predict": "Invokes the static initialization block."}
{"ID": 1017, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void makeProxyConstructor() { MethodVisitor mv = wd.dest.visitMethod(AsmUtil.ACC_PRIVATE | AsmUtil.ACC_FINAL, ProxettaNames.initMethodName, DESC_VOID, null, null); mv.visitCode(); if (wd.adviceInits != null) { for (String name : wd.adviceInits) { mv.visitVarInsn(ALOAD, 0); mv.visitMethodInsn (INVOKESPECIAL, wd.thisReference, name, DESC_VOID, false); } } mv.visitInsn(RETURN); mv.visitMaxs(0, 0); mv.visitEnd(); } \n### Response:", "ground_truth": "Creates init method that simply calls all advice constructor methods in correct order.\nThis created init method is called from each destination's constructor.", "predict": "Generate the proxy constructor."}
{"ID": 1018, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void processSuperMethods() { for (ClassReader cr : targetClassInfo.superClassReaders) { cr.accept(new EmptyClassVisitor() { String declaredClassName; @Override public void visit(final int version, final int access, final String name, final String signature, final String superName, final String[] interfaces) { declaredClassName = name; } @Override public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) { if (name.equals(INIT) || name.equals(CLINIT)) { return null; } MethodSignatureVisitor msign = targetClassInfo.lookupMethodSignatureVisitor(access, name, desc, declaredClassName); if (msign == null) { return null; } return applyProxy(msign); } }, 0); } } \n### Response:", "ground_truth": "Checks for all public super methods that are not overridden.", "predict": "Processes all super-classes."}
{"ID": 1019, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public int findLast(int low, int high) { int ndx = -1; while (low <= high) { int mid = (low + high) >>> 1; int delta = compare(mid); if (delta > 0) { high = mid - 1; } else { if (delta == 0) { ndx = mid; } low = mid + 1; } } if (ndx == -1) { return -(low + 1); } return ndx; } \n### Response:", "ground_truth": "Finds very last index of given element in inclusive index range. Returns negative\nvalue if element is not found.", "predict": "Find the last index of the specified range.\n\n@param low the lower bound of the range\n@param high the upper bound of the range\n@return the index of the last element in the range"}
{"ID": 1020, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String on(final String string) { if (!enabled) { return string; } final StringBuilder sb = new StringBuilder(); if (prefix != null) { sb.append(prefix).append(\"m\"); } sb.append(string); if (suffix != null) { sb.append(suffix).append(\"m\"); } return sb.toString(); } \n### Response:", "ground_truth": "Returns chalked string.", "predict": "Appends the given string to the prefix and suffix of the given string.\n\n@param string the string to append\n@return the string with prefix and suffix appended"}
{"ID": 1021, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private byte[] replaceAsmInstructions(final byte[] classFile, final boolean hasFrames) { final Attribute[] attributes = getAttributePrototypes(); firstField = null; lastField = null; firstMethod = null; lastMethod = null; lastRuntimeVisibleAnnotation = null; lastRuntimeInvisibleAnnotation = null; lastRuntimeVisibleTypeAnnotation = null; lastRuntimeInvisibleTypeAnnotation = null; moduleWriter = null; nestHostClassIndex = 0; numberOfNestMemberClasses = 0; nestMemberClasses = null; firstAttribute = null; compute = hasFrames ? MethodWriter.COMPUTE_INSERTED_FRAMES : MethodWriter.COMPUTE_NOTHING; new ClassReader(classFile, 0, /* checkClassVersion = */ false) .accept( this, attributes, (hasFrames ? ClassReader.EXPAND_FRAMES : 0) | ClassReader.EXPAND_ASM_INSNS); return toByteArray(); } \n### Response:", "ground_truth": "Returns the equivalent of the given class file, with the ASM specific instructions replaced\nwith standard ones. This is done with a ClassReader -&gt; ClassWriter round trip.\n\n@param classFile a class file containing ASM specific instructions, generated by this\nClassWriter.\n@param hasFrames whether there is at least one stack map frames in 'classFile'.\n@return an equivalent of 'classFile', with the ASM specific instructions replaced with standard\nones.", "predict": "Replace the asm instructions.\n\n@param classFile the class file\n@param hasFrames whether the class file has frames\n@return the byte array"}
{"ID": 1022, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Attribute[] getAttributePrototypes() { Attribute.Set attributePrototypes = new Attribute.Set(); attributePrototypes.addAttributes(firstAttribute); FieldWriter fieldWriter = firstField; while (fieldWriter != null) { fieldWriter.collectAttributePrototypes(attributePrototypes); fieldWriter = (FieldWriter) fieldWriter.fv; } MethodWriter methodWriter = firstMethod; while (methodWriter != null) { methodWriter.collectAttributePrototypes(attributePrototypes); methodWriter = (MethodWriter) methodWriter.mv; } return attributePrototypes.toArray(); } \n### Response:", "ground_truth": "Returns the prototypes of the attributes used by this class, its fields and its methods.\n\n@return the prototypes of the attributes used by this class, its fields and its methods.", "predict": "Returns the prototype of all attributes and methods."}
{"ID": 1023, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerDefaults() { register(Integer.class, IntegerSqlType.class); register(int.class, IntegerSqlType.class); register(MutableInteger.class, IntegerSqlType.class); register(Float.class, FloatSqlType.class); register(float.class, FloatSqlType.class); register(MutableFloat.class, FloatSqlType.class); register(Double.class, DoubleSqlType.class); register(double.class, DoubleSqlType.class); register(MutableDouble.class, DoubleSqlType.class); register(Byte.class, ByteSqlType.class); register(byte.class, ByteSqlType.class); register(MutableByte.class, ByteSqlType.class); register(Boolean.class, BooleanSqlType.class); register(boolean.class, BooleanSqlType.class); register(MutableBoolean.class, BooleanSqlType.class); register(Long.class, LongSqlType.class); register(long.class, LongSqlType.class); register(MutableLong.class, LongSqlType.class); register(Short.class, ShortSqlType.class); register(short.class, ShortSqlType.class); register(MutableShort.class, ShortSqlType.class); register(Character.class, CharacterSqlType.class); register(char.class, CharacterSqlType.class); register(BigDecimal.class, BigDecimalSqlType.class); register(BigInteger.class, BigIntegerSqlType.class); register(String.class, StringSqlType.class); register(LocalDateTime.class, LocalDateTimeSqlType.class); register(LocalDate.class, LocalDateSqlType.class); register(LocalTime.class, LocalTimeSqlType.class); register(Date.class, SqlDateSqlType.class); register(Timestamp.class, TimestampSqlType.class); register(Time.class, TimeSqlType.class); register(java.util.Date.class, DateSqlType.class); register(JulianDate.class, JulianDateSqlType.class); register(byte[].class, ByteArraySqlType.class); register(URL.class, URLSqlType.class); register(Blob.class, BlobSqlType.class); register(Clob.class, ClobSqlType.class); register(Array.class, SqlArraySqlType.class); register(Ref.class, SqlRefSqlType.class); } \n### Response:", "ground_truth": "Registers default set of SQL types.", "predict": "Register the default types for the SQL types."}
{"ID": 1024, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void register(final Class type, final Class<? extends SqlType> sqlTypeClass) { types.put(type, lookupSqlType(sqlTypeClass)); } \n### Response:", "ground_truth": "Registers sql type for provided type.", "predict": "Register a type.\n\n@param type the type\n@param sqlTypeClass the sql type class"}
{"ID": 1025, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public SqlType lookup(final Class clazz) { SqlType sqlType; for (Class x = clazz; x != null; x = x.getSuperclass()) { sqlType = types.get(clazz); if (sqlType != null) { return sqlType; } Class[] interfaces = x.getInterfaces(); for (Class i : interfaces) { sqlType = types.get(i); if (sqlType != null) { return sqlType; } } } return null; } \n### Response:", "ground_truth": "Retrieves SQL type for provided type. All subclasses and interfaces are examined\nfor matching sql type.", "predict": "Lookup the type of the given class.\n\n@param clazz the class to lookup\n@return the type of the given class or null if it is not found"}
{"ID": 1026, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public SqlType lookupSqlType(final Class<? extends SqlType> sqlTypeClass) { SqlType sqlType = sqlTypes.get(sqlTypeClass); if (sqlType == null) { try { sqlType = ClassUtil.newInstance(sqlTypeClass); } catch (Exception ex) { throw new DbSqlException(\"SQL type not found: \" + sqlTypeClass.getSimpleName(), ex); } sqlTypes.put(sqlTypeClass, sqlType); } return sqlType; } \n### Response:", "ground_truth": "Returns sql type instance. Instances are stored for better performances.", "predict": "Lookup the type of the given class.\n\n@param sqlTypeClass the class to lookup\n@return the type of the given class"}
{"ID": 1027, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ProxyInfo socks4Proxy(final String proxyAddress, final int proxyPort, final String proxyUser) { return new ProxyInfo(ProxyType.SOCKS4, proxyAddress, proxyPort, proxyUser, null); } \n### Response:", "ground_truth": "Creates SOCKS4 proxy.", "predict": "Create a SOCKS4 proxy.\n\n@param proxyAddress proxy address\n@param proxyPort proxy port\n@param proxyUser proxy user\n@return proxy info"}
{"ID": 1028, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ProxyInfo socks5Proxy(final String proxyAddress, final int proxyPort, final String proxyUser, final String proxyPassword) { return new ProxyInfo(ProxyType.SOCKS5, proxyAddress, proxyPort, proxyUser, proxyPassword); } \n### Response:", "ground_truth": "Creates SOCKS5 proxy.", "predict": "Create a SOCKS5 proxy.\n\n@param proxyAddress the proxy address\n@param proxyPort the proxy port\n@param proxyUser the proxy user\n@param proxyPassword the proxy password\n@return the proxy info"}
{"ID": 1029, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ProxyInfo httpProxy(final String proxyAddress, final int proxyPort, final String proxyUser, final String proxyPassword) { return new ProxyInfo(ProxyType.HTTP, proxyAddress, proxyPort, proxyUser, proxyPassword); } \n### Response:", "ground_truth": "Creates HTTP proxy.", "predict": "Create a ProxyInfo object for HTTP Proxy\n\n@param proxyAddress\n@param proxyPort\n@param proxyUser\n@param proxyPassword\n@return"}
{"ID": 1030, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public int totalThreadTransactions() { ArrayList<JtxTransaction> txList = txStack.get(); if (txList == null) { return 0; } return txList.size(); } \n### Response:", "ground_truth": "Returns total number of transactions associated with current thread.", "predict": "Returns the number of transactions currently active on the current thread.\n\n@return the number of transactions currently active on the current thread"}
{"ID": 1031, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public int totalThreadTransactionsWithStatus(final JtxStatus status) { ArrayList<JtxTransaction> txlist = txStack.get(); if (txlist == null) { return 0; } int count = 0; for (JtxTransaction tx : txlist) { if (tx.getStatus() == status) { count++; } } return count; } \n### Response:", "ground_truth": "Returns total number of transactions of the specified status associated with current thread.", "predict": "Returns the number of transactions with the given status.\n\n@param status the status of the transactions\n@return the number of transactions with the given status"}
{"ID": 1032, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void associateTransaction(final JtxTransaction tx) { totalTransactions++; ArrayList<JtxTransaction> txList = txStack.get(); if (txList == null) { txList = new ArrayList<>(); txStack.set(txList); } txList.add(tx); // add last } \n### Response:", "ground_truth": "Associate transaction to current thread.", "predict": "Associate the transaction with the transaction stack.\n\n@param tx the transaction"}
{"ID": 1033, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void continueTx(final JtxTransaction sourceTx, final JtxTransactionMode destMode) { if (!validateExistingTransaction) { return; } JtxTransactionMode sourceMode = sourceTx.getTransactionMode(); JtxIsolationLevel destIsolationLevel = destMode.getIsolationLevel(); if (destIsolationLevel != ISOLATION_DEFAULT) { JtxIsolationLevel currentIsolationLevel = sourceMode.getIsolationLevel(); if (currentIsolationLevel != destIsolationLevel) { throw new JtxException(\"Participating TX specifies isolation level: \" + destIsolationLevel + \" which is incompatible with existing TX: \" + currentIsolationLevel); } } if ((!destMode.isReadOnly()) && (sourceMode.isReadOnly())) { throw new JtxException(\"Participating TX is not marked as read-only, but existing TX is\"); } } \n### Response:", "ground_truth": "Check if propagation of a transaction is possible, due to source and destination transaction modes.\n@see #setValidateExistingTransaction(boolean)", "predict": "Validates the transaction and continues it if necessary.\n\n@param sourceTx the transaction to continue\n@param destMode the transaction mode to continue"}
{"ID": 1034, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected <E> JtxResourceManager<E> lookupResourceManager(final Class<E> resourceType) { //noinspection unchecked JtxResourceManager<E> resourceManager = this.resourceManagers.get(resourceType); if (resourceManager == null) { throw new JtxException(\"No registered resource manager for resource type: \" + resourceType.getSimpleName()); } return resourceManager; } \n### Response:", "ground_truth": "Lookups resource manager for provided type. Throws an exception if provider doesn't exists.", "predict": "Lookup the resource manager for the given resource type.\n\n@param resourceType the resource type\n@return the resource manager\n@throws JtxException if the resource manager could not be found"}
{"ID": 1035, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected C createProxyObject(Class<C> target) { target = ProxettaUtil.resolveTargetClass(target); Class proxyClass = cache.get(target); if (proxyClass == null) { proxyClass = proxetta.defineProxy(target); cache.put(target, proxyClass); } C proxy; try { proxy = (C) ClassUtil.newInstance(proxyClass); } catch (Exception ex) { throw new PathrefException(ex); } return proxy; } \n### Response:", "ground_truth": "Creates proxy object.", "predict": "Create a proxy object for the given target class.\n\n@param target the target class\n@return the proxy object"}
{"ID": 1036, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void append(final String methodName) { if (path.length() != 0) { path += StringPool.DOT; } if (methodName.startsWith(StringPool.LEFT_SQ_BRACKET)) { path = StringUtil.substring(path, 0, -1); } path += methodName; } \n### Response:", "ground_truth": "Appends method name to existing path.", "predict": "Appends the method name to the path.\n\n@param methodName the method name"}
{"ID": 1037, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String alignLeftAndPad(final String text, final int size) { int textLength = text.length(); if (textLength > size) { return text.substring(0, size); } final StringBuilder sb = new StringBuilder(size); sb.append(text); while (textLength++ < size) { sb.append(' '); } return sb.toString(); } \n### Response:", "ground_truth": "Puts the text to the left and pads with spaces until the size is reached.", "predict": "Aligns a string left and pad with spaces.\n\n@param text the string to be aligned\n@param size the number of spaces to be added\n@return the string with the specified number of spaces added"}
{"ID": 1038, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String toPrettyString(final Object value) { if (value == null) { return StringPool.NULL; } final Class<?> type = value.getClass(); if (type.isArray()) { final Class componentType = type.getComponentType(); if (componentType.isPrimitive()) { final StringBuilder sb = new StringBuilder(); sb.append('['); if (componentType == int.class) { sb.append(ArraysUtil.toString((int[]) value)); } else if (componentType == long.class) { sb.append(ArraysUtil.toString((long[]) value)); } else if (componentType == double.class) { sb.append(ArraysUtil.toString((double[]) value)); } else if (componentType == float.class) { sb.append(ArraysUtil.toString((float[]) value)); } else if (componentType == boolean.class) { sb.append(ArraysUtil.toString((boolean[]) value)); } else if (componentType == short.class) { sb.append(ArraysUtil.toString((short[]) value)); } else if (componentType == byte.class) { sb.append(ArraysUtil.toString((byte[]) value)); } else { throw new IllegalArgumentException(); } sb.append(']'); return sb.toString(); } else { final StringBuilder sb = new StringBuilder(); sb.append('['); final Object[] array = (Object[]) value; for (int i = 0; i < array.length; i++) { if (i > 0) { sb.append(','); } sb.append(toPrettyString(array[i])); } sb.append(']'); return sb.toString(); } } else if (value instanceof Iterable) { final Iterable iterable = (Iterable) value; final StringBuilder sb = new StringBuilder(); sb.append('{'); int i = 0; for (final Object o : iterable) { if (i > 0) { sb.append(','); } sb.append(toPrettyString(o)); i++; } sb.append('}'); return sb.toString(); } return value.toString(); } \n### Response:", "ground_truth": "Converts object into pretty string. All arrays are iterated.", "predict": "Converts an object to a pretty string.\n\n@param value the value to convert\n@return the string"}
{"ID": 1039, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String toCamelCase(final String input, final boolean firstCharUppercase, final char separator) { final int length = input.length(); final StringBuilder sb = new StringBuilder(length); boolean upperCase = firstCharUppercase; for (int i = 0; i < length; i++) { final char ch = input.charAt(i); if (ch == separator) { upperCase = true; } else if (upperCase) { sb.append(Character.toUpperCase(ch)); upperCase = false; } else { sb.append(ch); } } return sb.toString(); } \n### Response:", "ground_truth": "Converts separated string value to CamelCase.", "predict": "Converts the given input string to camel case.\n\n@param input the input string\n@param firstCharUppercase true if the first character should be uppercase\n@param separator the separator character\n@return the converted string"}
{"ID": 1040, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String formatParagraph(final String src, final int len, final boolean breakOnWhitespace) { StringBuilder str = new StringBuilder(); int total = src.length(); int from = 0; while (from < total) { int to = from + len; if (to >= total) { to = total; } else if (breakOnWhitespace) { int ndx = StringUtil.lastIndexOfWhitespace(src, to - 1, from); if (ndx != -1) { to = ndx + 1; } } int cutFrom = StringUtil.indexOfNonWhitespace(src, from, to); if (cutFrom != -1) { int cutTo = StringUtil.lastIndexOfNonWhitespace(src, to - 1, from) + 1; str.append(src, cutFrom, cutTo); } str.append('\\n'); from = to; } return str.toString(); } \n### Response:", "ground_truth": "Formats provided string as paragraph.", "predict": "Format a string to be a paragraph.\n\n@param src the source string\n@param len the length of the string\n@param breakOnWhitespace true if the string should be broken on whitespace\n@return the formatted string"}
{"ID": 1041, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String convertTabsToSpaces(final String line, final int tabWidth) { int tab_index, tab_size; int last_tab_index = 0; int added_chars = 0; if (tabWidth == 0) { return StringUtil.remove(line, '\\t'); } StringBuilder result = new StringBuilder(); while ((tab_index = line.indexOf('\\t', last_tab_index)) != -1) { tab_size = tabWidth - ((tab_index + added_chars) % tabWidth); if (tab_size == 0) { tab_size = tabWidth; } added_chars += tab_size - 1; result.append(line, last_tab_index, tab_index); result.append(StringUtil.repeat(' ', tab_size)); last_tab_index = tab_index+1; } if (last_tab_index == 0) { return line; } result.append(line.substring(last_tab_index)); return result.toString(); } \n### Response:", "ground_truth": "Converts all tabs on a line to spaces according to the provided tab width.\nThis is not a simple tab to spaces replacement, since the resulting\nindentation remains the same.", "predict": "Converts tabs to spaces.\n\n@param line the line\n@param tabWidth the tab width\n@return the string"}
{"ID": 1042, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String escapeJava(final String string) { int strLen = string.length(); StringBuilder sb = new StringBuilder(strLen); for (int i = 0; i < strLen; i++) { char c = string.charAt(i); switch (c) { case '\\b' : sb.append(\"\\\\b\"); break; case '\\t' : sb.append(\"\\\\t\"); break; case '\\n' : sb.append(\"\\\\n\"); break; case '\\f' : sb.append(\"\\\\f\"); break; case '\\r' : sb.append(\"\\\\r\"); break; case '\\\"' : sb.append(\"\\\\\\\"\"); break; case '\\\\' : sb.append(\"\\\\\\\\\"); break; default: if ((c < 32) || (c > 127)) { String hex = Integer.toHexString(c); sb.append(\"\\\\u\"); for (int k = hex.length(); k < 4; k++) { sb.append('0'); } sb.append(hex); } else { sb.append(c); } } } return sb.toString(); } \n### Response:", "ground_truth": "Escapes a string using java rules.", "predict": "Escapes all Java special characters in a string.\n\n@param string the string to escape\n@return the escaped string"}
{"ID": 1043, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String unescapeJava(final String str) { char[] chars = str.toCharArray(); StringBuilder sb = new StringBuilder(str.length()); for (int i = 0; i < chars.length; i++) { char c = chars[i]; if (c != '\\\\') { sb.append(c); continue; } i++; c = chars[i]; switch (c) { case 'b': sb.append('\\b'); break; case 't': sb.append('\\t'); break; case 'n': sb.append('\\n'); break; case 'f': sb.append('\\f'); break; case 'r': sb.append('\\r'); break; case '\"': sb.append('\\\"'); break; case '\\\\': sb.append('\\\\'); break; case 'u' : char hex = (char) Integer.parseInt(new String(chars, i + 1, 4), 16); sb.append(hex); i += 4; break; default: throw new IllegalArgumentException(\"Invalid escaping character: \" + c); } } return sb.toString(); } \n### Response:", "ground_truth": "Unescapes a string using java rules.", "predict": "Unescapes a Java string.\n\n@param str the string to escape\n@return the unescaped string"}
{"ID": 1044, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"unchecked\"}) public <T> T getBean(final Class<T> type) { String name = resolveBeanName(type); return (T) getBean(name); } \n### Response:", "ground_truth": "Returns Petite bean instance. Bean name will be resolved from provided type.", "predict": "Get a bean by name.\n\n@param type the bean type\n@return the bean"}
{"ID": 1045, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> T getBean(final String name) { // Lookup for registered bean definition. BeanDefinition def = lookupBeanDefinition(name); if (def == null) { // try provider ProviderDefinition providerDefinition = providers.get(name); if (providerDefinition != null) { return (T) invokeProvider(providerDefinition); } return null; } // Find the bean in its scope Object bean = def.scopeLookup(); if (bean == null) { // Create new bean in the scope initBeanDefinition(def); final BeanData beanData = new BeanData(this, def); registerBeanAndWireAndInjectParamsAndInvokeInitMethods(beanData); bean = beanData.bean(); } return (T) bean; } \n### Response:", "ground_truth": "Returns Petite bean instance.\nPetite container will find the bean in corresponding scope and all its dependencies,\neither by constructor or property injection. When using constructor injection, cyclic dependencies\ncan not be prevented, but at least they are detected.\n\n@see PetiteContainer#createBean(Class)", "predict": "Retrieves a bean definition for the given name.\n\n@param name the name of the bean definition to retrieve\n@return the bean definition or null if it is not found"}
{"ID": 1046, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void initBeanDefinition(final BeanDefinition def) { // init methods if (def.initMethods == null) { def.initMethods = petiteResolvers.resolveInitMethodPoint(def.type); } // destroy methods if (def.destroyMethods == null) { def.destroyMethods = petiteResolvers.resolveDestroyMethodPoint(def.type); } // properties if (def.properties == null) { def.properties = petiteResolvers.resolvePropertyInjectionPoint(def.type, def.wiringMode == WiringMode.AUTOWIRE); } // methods if (def.methods == null) { def.methods = petiteResolvers.resolveMethodInjectionPoint(def.type); } // ctors if (def.ctor == null) { def.ctor = petiteResolvers.resolveCtorInjectionPoint(def.type); } // values if (def.values == null) { def.values = paramManager.resolveParamInjectionPoints(def.type); } // sets if (def.sets == null) { def.sets = petiteResolvers.resolveSetInjectionPoint(def.type, def.wiringMode == WiringMode.AUTOWIRE); } // params if (def.params == null) { def.params = paramManager.filterParametersForBeanName(def.name, petiteConfig.getResolveReferenceParameters()); } } \n### Response:", "ground_truth": "Resolves and initializes bean definition. May be called multiple times.", "predict": "Initializes the given bean definition.\n\n@param def the bean definition to initialize"}
{"ID": 1047, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Object invokeProvider(final ProviderDefinition provider) { if (provider.method != null) { final Object bean; if (provider.beanName != null) { // instance factory method bean = getBean(provider.beanName); } else { // static factory method bean = null; } try { return provider.method.invoke(bean); } catch (Exception ex) { throw new PetiteException(\"Invalid provider method: \" + provider.method.getName(), ex); } } throw new PetiteException(\"Invalid provider\"); } \n### Response:", "ground_truth": "Invokes provider to get a bean.", "predict": "Invokes the provider.\n\n@param provider the provider\n@return the result of the provider"}
{"ID": 1048, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void addBean(final String name, final Object bean, WiringMode wiringMode) { wiringMode = petiteConfig.resolveWiringMode(wiringMode); registerPetiteBean(bean.getClass(), name, SingletonScope.class, wiringMode, false, null); BeanDefinition def = lookupExistingBeanDefinition(name); registerBeanAndWireAndInjectParamsAndInvokeInitMethods(new BeanData(this, def, bean)); } \n### Response:", "ground_truth": "Adds object instance to the container as singleton bean.", "predict": "Adds a bean to the petite.\n\n@param name the name of the bean\n@param bean the bean to add\n@param wiringMode the wiring mode"}
{"ID": 1049, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setBeanProperty(final String name, final Object value) { Object bean = null; int ndx = name.length(); while (true) { ndx = name.lastIndexOf('.', ndx); if (ndx == -1) { break; } String beanName = name.substring(0, ndx); bean = getBean(beanName); if (bean != null) { break; } ndx--; } if (bean == null) { throw new PetiteException(\"Invalid bean property: \" + name); } try { BeanUtil.declared.setProperty(bean, name.substring(ndx + 1), value); } catch (Exception ex) { throw new PetiteException(\"Invalid bean property: \" + name, ex); } } \n### Response:", "ground_truth": "Sets petite bean property.", "predict": "Sets the bean property.\n\n@param name the name\n@param value the value"}
{"ID": 1050, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object getBeanProperty(final String name) { int ndx = name.indexOf('.'); if (ndx == -1) { throw new PetiteException(\"Only bean name is specified, missing property name: \" + name); } String beanName = name.substring(0, ndx); Object bean = getBean(beanName); if (bean == null) { throw new PetiteException(\"Bean doesn't exist: \" + name); } try { return BeanUtil.declared.getProperty(bean, name.substring(ndx + 1)); } catch (Exception ex) { throw new PetiteException(\"Invalid bean property: \" + name, ex); } } \n### Response:", "ground_truth": "Returns petite bean property value.", "predict": "Get a bean property.\n\n@param name the name of the property\n@return the value of the property"}
{"ID": 1051, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void shutdown() { scopes.forEachValue(Scope::shutdown); externalsCache.clear(); beans.clear(); beansAlt.clear(); scopes.clear(); providers.clear(); beanCollections.clear(); } \n### Response:", "ground_truth": "Shutdowns container. After container is down, it can't be used anymore.", "predict": "Shutdown the service."}
{"ID": 1052, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static MethodParameter[] resolveParameters(final AccessibleObject methodOrCtor) { Class[] paramTypes; Class declaringClass; String name; if (methodOrCtor instanceof Method) { Method method = (Method) methodOrCtor; paramTypes = method.getParameterTypes(); name = method.getName(); declaringClass = method.getDeclaringClass(); } else { Constructor constructor = (Constructor) methodOrCtor; paramTypes = constructor.getParameterTypes(); declaringClass = constructor.getDeclaringClass(); name = CTOR_METHOD; } if (paramTypes.length == 0) { return MethodParameter.EMPTY_ARRAY; } InputStream stream; try { stream = ClassLoaderUtil.getClassAsStream(declaringClass); } catch (IOException ioex) { throw new ParamoException(\"Failed to read class bytes: \" + declaringClass.getName(), ioex); } if (stream == null) { throw new ParamoException(\"Class not found: \" + declaringClass); } try { ClassReader reader = new ClassReader(stream); MethodFinder visitor = new MethodFinder(declaringClass, name, paramTypes); reader.accept(visitor, 0); return visitor.getResolvedParameters(); } catch (IOException ioex) { throw new ParamoException(ioex); } finally { StreamUtil.close(stream); } } \n### Response:", "ground_truth": "Resolves method parameters from a method or constructor.\nReturns an empty array when target does not contain any parameter.\nNo caching is involved in this process, i.e. class bytecode\nis examined every time this method is called.", "predict": "Resolves the parameters of a method or constructor.\n\n@param methodOrCtor the method or constructor to resolve\n@return the resolved parameters"}
{"ID": 1053, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public int doAfterBody() throws JspException { BodyContent body = getBodyContent(); JspWriter out = body.getEnclosingWriter(); String bodytext = populateForm(body.getString(), name -> value(name, pageContext)); try { out.print(bodytext); } catch (IOException ioex) { throw new JspException(ioex); } return SKIP_BODY; } \n### Response:", "ground_truth": "Performs smart form population.", "predict": "Populates the form data.\n\n@throws JspException if an error occurred while processing the body content"}
{"ID": 1054, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getValue(final String... profiles) { if (hasMacro) { return propsData.resolveMacros(value, profiles); } return value; } \n### Response:", "ground_truth": "Returns the property value, with replaced macros.", "predict": "Get value.\n\n@param profiles profiles\n@return value"}
{"ID": 1055, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void end() { if (parentNode != rootNode) { Node thisNode = parentNode; while (thisNode != rootNode) { if (domBuilder.config.isImpliedEndTags()) { if (implRules.implicitlyCloseTagOnEOF(thisNode.getNodeName())) { thisNode = thisNode.getParentNode(); continue; } } error(\"Unclosed tag closed: <\" + thisNode.getNodeName() + \">\"); thisNode = thisNode.getParentNode(); } } // remove whitespaces if (domBuilder.config.isIgnoreWhitespacesBetweenTags()) { removeLastChildNodeIfEmptyText(parentNode, true); } // foster if (domBuilder.config.isUseFosterRules()) { HtmlFosterRules fosterRules = new HtmlFosterRules(); fosterRules.fixFosterElements(rootNode); } // elapsed rootNode.end(); if (log.isDebugEnabled()) { log.debug(\"LagartoDom tree created in \" + rootNode.getElapsedTime() + \" ms\"); } } \n### Response:", "ground_truth": "Finishes the tree building. Closes unclosed tags.", "predict": "Removes all whitespaces and closes all tags."}
{"ID": 1056, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Element createElementNode(final Tag tag) { boolean hasVoidTags = htmlVoidRules != null; boolean isVoid = false; boolean selfClosed = false; if (hasVoidTags) { isVoid = htmlVoidRules.isVoidTag(tag.getName()); // HTML and XHTML if (isVoid) { // it's void tag, lookup the flag selfClosed = domBuilder.config.isSelfCloseVoidTags(); } } else { // XML, no voids, lookup the flag selfClosed = domBuilder.config.isSelfCloseVoidTags(); } return new Element(rootNode, tag, isVoid, selfClosed); } \n### Response:", "ground_truth": "Creates new element with correct configuration.", "predict": "Create a new element node.\n\n@param tag the tag to create\n@return the new element node"}
{"ID": 1057, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void tag(final Tag tag) { if (!enabled) { return; } TagType tagType = tag.getType(); Element node; switch (tagType) { case START: if (domBuilder.config.isIgnoreWhitespacesBetweenTags()) { removeLastChildNodeIfEmptyText(parentNode, false); } node = createElementNode(tag); if (domBuilder.config.isImpliedEndTags()) { while (true) { String parentNodeName = parentNode.getNodeName(); if (!implRules.implicitlyCloseParentTagOnNewTag(parentNodeName, node.getNodeName())) { break; } parentNode = parentNode.getParentNode(); if (log.isDebugEnabled()) { log.debug(\"Implicitly closed tag <\" + node.getNodeName() + \"> \"); } } } parentNode.addChild(node); if (!node.isVoidElement()) { parentNode = node; } break; case END: if (domBuilder.config.isIgnoreWhitespacesBetweenTags()) { removeLastChildNodeIfEmptyText(parentNode, true); } String tagName = tag.getName().toString(); Node matchingParent = findMatchingParentOpenTag(tagName); if (matchingParent == parentNode) { // regular situation parentNode = parentNode.getParentNode(); break; } if (matchingParent == null) { // matching open tag not found, remove it error(\"Orphan closed tag ignored: </\" + tagName + \"> \" + tag.getTagPosition()); break; } // try to close it implicitly if (domBuilder.config.isImpliedEndTags()) { boolean fixed = false; while (implRules.implicitlyCloseParentTagOnTagEnd(parentNode.getNodeName(), tagName)) { parentNode = parentNode.getParentNode(); if (log.isDebugEnabled()) { log.debug(\"Implicitly closed tag <\" + tagName + \">\"); } if (parentNode == matchingParent) { parentNode = matchingParent.parentNode; fixed = true; break; } } if (fixed) { break; } } // matching tag found, but it is not a regular situation // therefore close all unclosed tags in between fixUnclosedTagsUpToMatchingParent(tag, matchingParent); break; case SELF_CLOSING: if (domBuilder.config.isIgnoreWhitespacesBetweenTags()) { removeLastChildNodeIfEmptyText(parentNode, false); } node = createElementNode(tag); parentNode.addChild(node); break; } } \n### Response:", "ground_truth": "Visits tags.", "predict": "Adds a tag to the DOM tree.\n\n@param tag the tag to add"}
{"ID": 1058, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void removeLastChildNodeIfEmptyText(final Node parentNode, final boolean closedTag) { if (parentNode == null) { return; } Node lastChild = parentNode.getLastChild(); if (lastChild == null) { return; } if (lastChild.getNodeType() != Node.NodeType.TEXT) { return; } if (closedTag) { if (parentNode.getChildNodesCount() == 1) { return; } } Text text = (Text) lastChild; if (text.isBlank()) { lastChild.detachFromParent(); } } \n### Response:", "ground_truth": "Removes last child node if contains just empty text.", "predict": "Removes the last child node if it is empty.\n\n@param parentNode the parent node\n@param closedTag if true, the last child node is removed if it is closed"}
{"ID": 1059, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getQueryString() { if (sqlTemplate == null) { return toString(); } if (parameterValues == null) { return sqlTemplate; } final StringBuilder sb = new StringBuilder(); int qMarkCount = 0; final StringTokenizer tok = new StringTokenizer(sqlTemplate + ' ', \"?\"); while (tok.hasMoreTokens()) { final String oneChunk = tok.nextToken(); sb.append(oneChunk); try { Object value = null; if (parameterValues.size() > 1 + qMarkCount) { value = parameterValues.get(1 + qMarkCount); qMarkCount++; } else { if (!tok.hasMoreTokens()) { value = \"\"; } } if (value == null) { value = \"?\"; } sb.append(value); } catch (Throwable th) { sb.append(\"--- Building query failed: \").append(th.toString()); } } return sb.toString().trim(); } \n### Response:", "ground_truth": "Returns the query string.", "predict": "Returns the query string.\n\n@return the query string"}
{"ID": 1060, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String getActionClassName(final Object action) { Class clazz = action.getClass(); clazz = ProxettaUtil.resolveTargetClass(clazz); return clazz.getName(); } \n### Response:", "ground_truth": "Returns correct action class name. Detects Proxetta classes.", "predict": "Get action class name.\n\n@param action the action\n@return the action class name"}
{"ID": 1061, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected int calculateTo(final int from, final int count, final int size) { int to = size; if (count != -1) { to = from + count; if (to > size) { to = size; } } return to; } \n### Response:", "ground_truth": "Calculates 'TO'.", "predict": "Calculates the size of the array.\n\n@param from the starting index\n@param count the number of elements\n@param size the size of the array\n@return the size of the array"}
{"ID": 1062, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void iterateCollection(final Collection collection, final int from, final int count, final PageContext pageContext) throws JspException { JspFragment body = getJspBody(); Iterator iter = collection.iterator(); int i = 0; int to = calculateTo(from, count, collection.size()); while (i < to) { Object item = iter.next(); if (i >= from) { if (status != null) { iteratorStatus.next(!iter.hasNext()); } TagUtil.setScopeAttribute(var, item, scope, pageContext); TagUtil.invokeBody(body); } i++; } } \n### Response:", "ground_truth": "Iterates collection.", "predict": "Iterates the collection and sets the scope attributes.\n\n@param collection\n@param from\n@param count\n@param pageContext\n@throws JspException"}
{"ID": 1063, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void iterateArray(final Object[] array, final int from, final int count, final PageContext pageContext) throws JspException { JspFragment body = getJspBody(); int len = array.length; int to = calculateTo(from, count, len); int last = to - 1; for (int i = from; i < to; i++) { Object item = array[i]; if (status != null) { iteratorStatus.next(i == last); } TagUtil.setScopeAttribute(var, item, scope, pageContext); TagUtil.invokeBody(body); } } \n### Response:", "ground_truth": "Iterates arrays.", "predict": "Iterates the given array.\n\n@param array\nthe array\n@param from\nthe from\n@param count\nthe count\n@param pageContext\nthe page context\n@throws JspException\nthe jsp exception"}
{"ID": 1064, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String replace(final String s, final String sub, final String with) { if (sub.isEmpty()) { return s; } int c = 0; int i = s.indexOf(sub, c); if (i == -1) { return s; } int length = s.length(); StringBuilder sb = new StringBuilder(length + with.length()); do { sb.append(s, c, i); sb.append(with); c = i + sub.length(); } while ((i = s.indexOf(sub, c)) != -1); if (c < length) { sb.append(s, c, length); } return sb.toString(); } \n### Response:", "ground_truth": "Replaces all occurrences of a certain pattern in a string with a\nreplacement string. This is the fastest replace function known to author.\n\n@param s      string to be inspected\n@param sub    string pattern to be replaced\n@param with   string that should go where the pattern was", "predict": "Replaces the given sub string with the given with string.\n\n@param s\nthe string to replace\n@param sub\nthe sub string to replace\n@param with\nthe with string to replace\n@return the string with replaced"}
{"ID": 1065, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String replaceChar(final String s, final char sub, final char with) { int startIndex = s.indexOf(sub); if (startIndex == -1) { return s; } char[] str = s.toCharArray(); for (int i = startIndex; i < str.length; i++) { if (str[i] == sub) { str[i] = with; } } return new String(str); } \n### Response:", "ground_truth": "Replaces all occurrences of a character in a string.\n\n@param s      input string\n@param sub    character to replace\n@param with   character to replace with", "predict": "Replaces a char in a string.\n\n@param s\nThe string to replace.\n@param sub\nThe char to replace.\n@param with\nThe char to replace with.\n@return The string with the replaced char."}
{"ID": 1066, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String replaceChars(final String s, final char[] sub, final char[] with) { char[] str = s.toCharArray(); for (int i = 0; i < str.length; i++) { char c = str[i]; for (int j = 0; j < sub.length; j++) { if (c == sub[j]) { str[i] = with[j]; break; } } } return new String(str); } \n### Response:", "ground_truth": "Replaces all occurrences of a characters in a string.\n\n@param s      input string\n@param sub    characters to replace\n@param with   characters to replace with", "predict": "Replaces all occurrences of the specified sub-string in the specified string with the specified\nsub-string.\n\n@param s the string to be modified\n@param sub the sub-string to be replaced\n@param with the sub-string to be replaced with\n@return the modified string"}
{"ID": 1067, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String replaceFirst(final String s, final String sub, final String with) { int i = s.indexOf(sub); if (i == -1) { return s; } return s.substring(0, i) + with + s.substring(i + sub.length()); } \n### Response:", "ground_truth": "Replaces the very first occurrence of a substring with supplied string.\n\n@param s      source string\n@param sub    substring to replace\n@param with   substring to replace with", "predict": "Replaces the first occurrence of the specified sub string in the specified string.\n\n@param s the string to be modified\n@param sub the sub string to be replaced\n@param with the string to be added to the end of the modified string\n@return the modified string"}
{"ID": 1068, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String replaceFirst(final String s, final char sub, final char with) { int index = s.indexOf(sub); if (index == -1) { return s; } char[] str = s.toCharArray(); str[index] = with; return new String(str); } \n### Response:", "ground_truth": "Replaces the very first occurrence of a character in a string.\n\n@param s      string\n@param sub    char to replace\n@param with   char to replace with", "predict": "Replaces the first occurrence of the specified character in the specified string.\n\n@param s the string to replace\n@param sub the character to replace\n@param with the character to replace with\n@return the modified string"}
{"ID": 1069, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String replaceLast(final String s, final String sub, final String with) { int i = s.lastIndexOf(sub); if (i == -1) { return s; } return s.substring(0, i) + with + s.substring(i + sub.length()); } \n### Response:", "ground_truth": "Replaces the very last occurrence of a substring with supplied string.\n\n@param s      source string\n@param sub    substring to replace\n@param with   substring to replace with", "predict": "Replaces the last occurrence of the specified sub string with the specified\nsub string.\n\n@param s\nthe string to replace\n@param sub\nthe sub string to replace\n@param with\nthe new sub string to replace\n@return the modified string"}
{"ID": 1070, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String replaceLast(final String s, final char sub, final char with) { int index = s.lastIndexOf(sub); if (index == -1) { return s; } char[] str = s.toCharArray(); str[index] = with; return new String(str); } \n### Response:", "ground_truth": "Replaces the very last occurrence of a character in a string.\n\n@param s      string\n@param sub    char to replace\n@param with   char to replace with", "predict": "Replaces the last occurrence of the specified character with the specified character.\n\n@param s the string to replace\n@param sub the character to replace\n@param with the character to replace with\n@return the string with the specified character replaced"}
{"ID": 1071, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String remove(final String s, final String sub) { int c = 0; int sublen = sub.length(); if (sublen == 0) { return s; } int i = s.indexOf(sub, c); if (i == -1) { return s; } StringBuilder sb = new StringBuilder(s.length()); do { sb.append(s, c, i); c = i + sublen; } while ((i = s.indexOf(sub, c)) != -1); if (c < s.length()) { sb.append(s, c, s.length()); } return sb.toString(); } \n### Response:", "ground_truth": "Removes all substring occurrences from the string.\n\n@param s      source string\n@param sub    substring to remove", "predict": "Removes the given substring from the given string.\n\n@param s the string to remove the substring from\n@param sub the substring to remove\n@return the modified string"}
{"ID": 1072, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String remove(final String string, final char ch) { int stringLen = string.length(); char[] result = new char[stringLen]; int offset = 0; for (int i = 0; i < stringLen; i++) { char c = string.charAt(i); if (c == ch) { continue; } result[offset] = c; offset++; } if (offset == stringLen) { return string; // no changes } return new String(result, 0, offset); } \n### Response:", "ground_truth": "Removes a single character from string.\n\n@param string    source string\n@param ch  character to remove", "predict": "Removes a character from a string.\n\n@param string the string to remove the character from\n@param ch the character to remove\n@return the modified string"}
{"ID": 1073, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isAllEmpty(final String... strings) { for (String string : strings) { if (!isEmpty(string)) { return false; } } return true; } \n### Response:", "ground_truth": "Determines if string array contains empty strings.\n@see #isEmpty(CharSequence)", "predict": "Checks if all the strings are empty.\n\n@param strings the strings to check\n@return true if all the strings are empty, otherwise false"}
{"ID": 1074, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isAllBlank(final String... strings) { for (String string : strings) { if (!isBlank(string)) { return false; } } return true; } \n### Response:", "ground_truth": "Determines if string array contains just blank strings.", "predict": "Checks if all the strings are blank.\n\n@param strings the strings to check\n@return true if all the strings are blank, otherwise false"}
{"ID": 1075, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String[] toStringArray(final Object value) { if (value == null) { return new String[0]; } Class<?> type = value.getClass(); if (!type.isArray()) { return new String[] {value.toString()}; } Class componentType = type.getComponentType(); if (componentType.isPrimitive()) { if (componentType == int.class) { return ArraysUtil.toStringArray((int[]) value); } else if (componentType == long.class) { return ArraysUtil.toStringArray((long[]) value); } else if (componentType == double.class) { return ArraysUtil.toStringArray((double[]) value); } else if (componentType == float.class) { return ArraysUtil.toStringArray((float[]) value); } else if (componentType == boolean.class) { return ArraysUtil.toStringArray((boolean[]) value); } else if (componentType == short.class) { return ArraysUtil.toStringArray((short[]) value); } else if (componentType == byte.class) { return ArraysUtil.toStringArray((byte[]) value); } else { throw new IllegalArgumentException(); } } else { return ArraysUtil.toStringArray((Object[]) value); } } \n### Response:", "ground_truth": "Converts an array object to array of strings, where every element\nof input array is converted to a string. If input is not an array,\nthe result will still be an array with one element.", "predict": "Converts an Object to an array of Strings.\n\n@param value the value to convert\n@return the array of Strings"}
{"ID": 1076, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static String changeFirstCharacterCase(final boolean capitalize, final String string) { int strLen = string.length(); if (strLen == 0) { return string; } char ch = string.charAt(0); char modifiedCh; if (capitalize) { modifiedCh = Character.toUpperCase(ch); } else { modifiedCh = Character.toLowerCase(ch); } if (modifiedCh == ch) { // no change, return unchanged string return string; } char[] chars = string.toCharArray(); chars[0] = modifiedCh; return new String(chars); } \n### Response:", "ground_truth": "Internal method for changing the first character case.", "predict": "Change the first character of a string to uppercase or lowercase.\n\n@param capitalize\n@param string\n@return"}
{"ID": 1077, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String title(final String string) { char[] chars = string.toCharArray(); boolean wasWhitespace = true; for (int i = 0; i < chars.length; i++) { char c = chars[i]; if (CharUtil.isWhitespace(c)) { wasWhitespace = true; } else { if (wasWhitespace) { chars[i] = Character.toUpperCase(c); } else { chars[i] = Character.toLowerCase(c); } wasWhitespace = false; } } return new String(chars); } \n### Response:", "ground_truth": "Makes a title-cased string from given input.", "predict": "Returns a title for the given string.\n\n@param string the string to title\n@return the title"}
{"ID": 1078, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String compressChars(final String s, final char c) { int len = s.length(); StringBuilder sb = new StringBuilder(len); boolean wasChar = false; for (int i = 0; i < len; i++) { char c1 = s.charAt(i); if (c1 == c) { if (wasChar) { continue; } wasChar = true; } else { wasChar = false; } sb.append(c1); } if (sb.length() == len) { return s; } return sb.toString(); } \n### Response:", "ground_truth": "Compress multiple occurrences of given char into one appearance.", "predict": "Compress a string by replacing all occurrences of the specified character.\n\n@param s the string to compress\n@param c the character to replace\n@return the compressed string"}
{"ID": 1079, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean startsWithIgnoreCase(final String src, final String subS, final int startIndex) { String sub = subS.toLowerCase(); int sublen = sub.length(); if (startIndex + sublen > src.length()) { return false; } int j = 0; int i = startIndex; while (j < sublen) { char source = Character.toLowerCase(src.charAt(i)); if (sub.charAt(j) != source) { return false; } j++; i++; } return true; } \n### Response:", "ground_truth": "Tests if this string starts with the specified prefix with ignored case\nand with the specified prefix beginning a specified index.\n\n@param src        source string to test\n@param subS       starting substring\n@param startIndex index from where to test\n\n@return <code>true</code> if the character sequence represented by the argument is\na prefix of the character sequence represented by this string;\n<code>false</code> otherwise.", "predict": "Returns true if the string starts with the specified substring, ignoring case.\n\n@param src the source string\n@param subS the substring to check\n@param startIndex the starting index of the substring\n@return true if the string starts with the specified substring, false otherwise"}
{"ID": 1080, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean endsWithChar(final String s, final char c) { if (s.length() == 0) { return false; } return s.charAt(s.length() - 1) == c; } \n### Response:", "ground_truth": "Returns if string ends with provided character.", "predict": "Checks if the string ends with the given character.\n\n@param s the string to check\n@param c the character to check\n@return true if the string ends with the given character"}
{"ID": 1081, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int countIgnoreCase(final String source, final String sub) { int count = 0; int j = 0; int sublen = sub.length(); if (sublen == 0) { return 0; } while (true) { int i = indexOfIgnoreCase(source, sub, j); if (i == -1) { break; } count++; j = i + sublen; } return count; } \n### Response:", "ground_truth": "Count substring occurrences in a source string, ignoring case.\n\n@param source\tsource string\n@param sub\t\tsubstring to count\n@return\t\t\tnumber of substring occurrences", "predict": "Returns the number of occurrences of the given sub-string in the given source string.\n\n@param source the source string\n@param sub the sub-string\n@return the number of occurrences of the given sub-string in the given source string."}
{"ID": 1082, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean equalsIgnoreCase(final String[] as, final String[] as1) { if (as.length != as1.length) { return false; } for (int i = 0; i < as.length; i++) { if (!as[i].equalsIgnoreCase(as1[i])) { return false; } } return true; } \n### Response:", "ground_truth": "Compares two string arrays.\n\n@param as     first string array\n@param as1    second string array\n\n@return true if all array elements matches", "predict": "Returns true if the two strings are equal."}
{"ID": 1083, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int indexOfWhitespace(final String string, final int startindex, final int endindex) { for (int i = startindex; i < endindex; i++) { if (CharUtil.isWhitespace(string.charAt(i))) { return i; } } return -1; } \n### Response:", "ground_truth": "Returns first index of a whitespace character, starting from specified index offset.", "predict": "Returns the index of the first whitespace character in the given string.\n\n@param string the string to search\n@param startindex the starting index of the search\n@param endindex the ending index of the search\n@return the index of the first whitespace character in the given string, or -1 if the string does not contain any whitespace characters"}
{"ID": 1084, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String stripLeadingChar(final String string, final char c) { if (string.length() > 0) { if (string.charAt(0) == c) { return string.substring(1); } } return string; } \n### Response:", "ground_truth": "Strips leading char if string starts with one.", "predict": "Removes the leading char from the given string.\n\n@param string the string to be modified\n@param c the char to be removed\n@return the modified string"}
{"ID": 1085, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String stripTrailingChar(final String string, final char c) { if (string.length() > 0) { if (string.charAt(string.length() - 1) == c) { return string.substring(0, string.length() - 1); } } return string; } \n### Response:", "ground_truth": "Strips trailing char if string ends with one.", "predict": "Removes the trailing char from the given string.\n\n@param string the string to be modified\n@param c the char to be removed\n@return the modified string"}
{"ID": 1086, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String stripChar(final String string, final char c) { if (string.length() == 0) { return string; } if (string.length() == 1) { if (string.charAt(0) == c) { return StringPool.EMPTY; } return string; } int left = 0; int right = string.length(); if (string.charAt(left) == c) { left++; } if (string.charAt(right - 1) == c) { right--; } return string.substring(left, right); } \n### Response:", "ground_truth": "Strips leading and trailing char from given string.", "predict": "Removes the specified character from the specified string.\n\n@param string the string to be modified\n@param c the character to be removed\n@return the modified string"}
{"ID": 1087, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String stripToChar(final String string, final char c) { int ndx = string.indexOf(c); if (ndx == -1) { return string; } return string.substring(ndx); } \n### Response:", "ground_truth": "Strips everything up to the first appearance of given char.\nCharacter IS included in the returned string.", "predict": "Removes a character from a string.\n\n@param string the string to remove the character from\n@param c the character to remove\n@return the string with the character removed"}
{"ID": 1088, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String stripFromChar(final String string, final char c) { int ndx = string.indexOf(c); if (ndx == -1) { return string; } return string.substring(0, ndx); } \n### Response:", "ground_truth": "Strips everything from the first appearance of given char.\nCharacter IS NOT included in the returned string.", "predict": "Removes a character from a string.\n\n@param string the string to remove the character from\n@param c the character to remove\n@return the string with the character removed"}
{"ID": 1089, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void cropAll(final String... strings) { for (int i = 0; i < strings.length; i++) { String string = strings[i]; if (string != null) { string = crop(strings[i]); } strings[i] = string; } } \n### Response:", "ground_truth": "Crops all elements of string array.", "predict": "Crops all strings from the given array.\n\n@param strings the array of strings to crop"}
{"ID": 1090, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String trimLeft(final String src) { int len = src.length(); int st = 0; while ((st < len) && (CharUtil.isWhitespace(src.charAt(st)))) { st++; } return st > 0 ? src.substring(st) : src; } \n### Response:", "ground_truth": "Trim whitespaces from the left.", "predict": "Removes all whitespace from the left side of the String.\n\n@param src the String to trim\n@return the String with all whitespace removed"}
{"ID": 1091, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String trimRight(final String src) { int len = src.length(); int count = len; while ((len > 0) && (CharUtil.isWhitespace(src.charAt(len - 1)))) { len--; } return (len < count) ? src.substring(0, len) : src; } \n### Response:", "ground_truth": "Trim whitespaces from the right.", "predict": "Removes all whitespace characters from the right side of the String.\n\n@param src the source String\n@return the String without the whitespace characters"}
{"ID": 1092, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int[] indexOfRegion(final String string, final String leftBoundary, final String rightBoundary, final int offset) { int ndx = offset; int[] res = new int[4]; ndx = string.indexOf(leftBoundary, ndx); if (ndx == -1) { return null; } res[0] = ndx; ndx += leftBoundary.length(); res[1] = ndx; ndx = string.indexOf(rightBoundary, ndx); if (ndx == -1) { return null; } res[2] = ndx; res[3] = ndx + rightBoundary.length(); return res; } \n### Response:", "ground_truth": "Returns indexes of the first region without escaping character.\n@see #indexOfRegion(String, String, String, char, int)", "predict": "Returns the index of the first occurrence of the specified string within the specified string.\n\n@param string the string to search\n@param leftBoundary the left boundary of the string\n@param rightBoundary the right boundary of the string\n@param offset the offset of the string to start searching from\n@return the index of the first occurrence of the specified string within the specified string, or null if the string does not contain the specified string"}
{"ID": 1093, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String join(final Collection collection, final char separator) { if (collection == null) { return null; } if (collection.size() == 0) { return StringPool.EMPTY; } final StringBuilder sb = new StringBuilder(collection.size() * 16); final Iterator it = collection.iterator(); for (int i = 0; i < collection.size(); i++) { if (i > 0) { sb.append(separator); } sb.append(it.next()); } return sb.toString(); } \n### Response:", "ground_truth": "Joins an collection of objects into one string with separator.", "predict": "Joins the collection of strings using the given separator.\n\n@param collection the collection of strings\n@param separator the separator\n@return the joined string"}
{"ID": 1094, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String join(final Object[] array, final String separator) { if (array == null) { return null; } if (array.length == 0) { return StringPool.EMPTY; } if (array.length == 1) { return String.valueOf(array[0]); } final StringBuilder sb = new StringBuilder(array.length * 16); for (int i = 0; i < array.length; i++) { if (i > 0) { sb.append(separator); } sb.append(array[i]); } return sb.toString(); } \n### Response:", "ground_truth": "Joins an array of objects into one string with separator.", "predict": "Joins an array of strings using a separator.\n\n@param array the array of strings to join\n@param separator the separator to use\n@return the joined string"}
{"ID": 1095, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String convertCharset(final String source, final String srcCharsetName, final String newCharsetName) { if (srcCharsetName.equals(newCharsetName)) { return source; } return StringUtil.newString(StringUtil.getBytes(source, srcCharsetName), newCharsetName); } \n### Response:", "ground_truth": "Converts string charset. If charset names are the same, the same string is returned.", "predict": "Convert charset to charset name.\n\n@param source source string\n@param srcCharsetName source charset name\n@param newCharsetName new charset name\n@return converted string"}
{"ID": 1096, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isCharAtEqual(final String string, final int index, final char charToCompare) { if ((index < 0) || (index >= string.length())) { return false; } return string.charAt(index) == charToCompare; } \n### Response:", "ground_truth": "Safely compares provided char with char on given location.", "predict": "Returns true if the specified char is present in the specified string.\n\n@param string the string to check\n@param index the index of the char to check\n@param charToCompare the char to compare\n@return true if the specified char is present in the specified string"}
{"ID": 1097, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String surround(String string, final String prefix, final String suffix) { if (!string.startsWith(prefix)) { string = prefix + string; } if (!string.endsWith(suffix)) { string += suffix; } return string; } \n### Response:", "ground_truth": "Surrounds the string with provided prefix and suffix if such missing from string.", "predict": "Surrounds a string with the given prefix and suffix.\n\n@param string the string to surround\n@param prefix the prefix to use\n@param suffix the suffix to use\n@return the surrounding string"}
{"ID": 1098, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String prefix(String string, final String prefix) { if (!string.startsWith(prefix)) { string = prefix + string; } return string; } \n### Response:", "ground_truth": "Inserts prefix if doesn't exist.", "predict": "Returns the prefix of the given string.\n\n@param string the string to prefix\n@param prefix the prefix to prefix with\n@return the prefix of the given string"}
{"ID": 1099, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String suffix(String string, final String suffix) { if (!string.endsWith(suffix)) { string += suffix; } return string; } \n### Response:", "ground_truth": "Appends suffix if doesn't exist.", "predict": "Adds the suffix to the given string.\n\n@param string the string to append the suffix to\n@param suffix the suffix to append\n@return the modified string"}
{"ID": 1100, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String cutToIndexOf(String string, final String substring) { int i = string.indexOf(substring); if (i != -1) { string = string.substring(0, i); } return string; } \n### Response:", "ground_truth": "Cuts the string from beginning to the first index of provided substring.", "predict": "Cuts the given substring to the beginning of the given string.\n\n@param string the string to cut\n@param substring the substring to cut\n@return the cut string"}
{"ID": 1101, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String cutFromIndexOf(String string, final String substring) { int i = string.indexOf(substring); if (i != -1) { string = string.substring(i); } return string; } \n### Response:", "ground_truth": "Cuts the string from the first index of provided substring to the end.", "predict": "Cuts the given substring from the given string.\n\n@param string the string to cut from\n@param substring the substring to cut from\n@return the cut string"}
{"ID": 1102, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String cutPrefix(String string, final String prefix) { if (string.startsWith(prefix)) { string = string.substring(prefix.length()); } return string; } \n### Response:", "ground_truth": "Cuts prefix if exists.", "predict": "Cuts the prefix from the string.\n\n@param string the string to cut\n@param prefix the prefix to cut from\n@return the cut string"}
{"ID": 1103, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String cutSuffix(String string, final String suffix) { if (string.endsWith(suffix)) { string = string.substring(0, string.length() - suffix.length()); } return string; } \n### Response:", "ground_truth": "Cuts sufix if exists.", "predict": "Cut suffix from string.\n\n@param string the string\n@param suffix the suffix\n@return the string"}
{"ID": 1104, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String cutSurrounding(final String string, final String prefix, final String suffix) { int start = 0; int end = string.length(); if (string.startsWith(prefix)) { start = prefix.length(); } if (string.endsWith(suffix)) { end -= suffix.length(); } if (end <= start) { return StringPool.EMPTY; } return string.substring(start, end); } \n### Response:", "ground_truth": "Removes surrounding prefix and suffixes.", "predict": "Cuts the surrounding string from the given string.\n\n@param string the string to cut\n@param prefix the prefix to cut from the string\n@param suffix the suffix to cut from the string\n@return the cut string"}
{"ID": 1105, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String insert(final String src, final String insert, int offset) { if (offset < 0) { offset = 0; } if (offset > src.length()) { offset = src.length(); } StringBuilder sb = new StringBuilder(src); sb.insert(offset, insert); return sb.toString(); } \n### Response:", "ground_truth": "Inserts a string on provided offset.", "predict": "Inserts a string at a given position in the given string.\n\n@param src the source string\n@param insert the string to insert\n@param offset the position to insert\n@return the new string"}
{"ID": 1106, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String repeat(final String source, int count) { StringBand result = new StringBand(count); while (count > 0) { result.append(source); count--; } return result.toString(); } \n### Response:", "ground_truth": "Creates a new string that contains the provided string a number of times.", "predict": "Repeats a string with a specified number of times.\n\n@param source the string to repeat\n@param count the number of times to repeat\n@return the string repeated"}
{"ID": 1107, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String reverse(final String s) { StringBuilder result = new StringBuilder(s.length()); for (int i = s.length() -1; i >= 0; i--) { result.append(s.charAt(i)); } return result.toString(); } \n### Response:", "ground_truth": "Reverse a string.", "predict": "Reverses the string.\n\n@param s the string to reverse\n@return the reversed string"}
{"ID": 1108, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String maxCommonPrefix(final String one, final String two) { final int minLength = Math.min(one.length(), two.length()); final StringBuilder sb = new StringBuilder(minLength); for (int pos = 0; pos < minLength; pos++) { final char currentChar = one.charAt(pos); if (currentChar != two.charAt(pos)) { break; } sb.append(currentChar); } return sb.toString(); } \n### Response:", "ground_truth": "Returns max common prefix of two strings.", "predict": "Returns the longest common prefix of two strings.\n\n@param one\n@param two\n@return"}
{"ID": 1109, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String findCommonPrefix(final String... strings) { StringBuilder prefix = new StringBuilder(); int index = 0; char c = 0; loop: while (true) { for (int i = 0; i < strings.length; i++) { String s = strings[i]; if (index == s.length()) { break loop; } if (i == 0) { c = s.charAt(index); } else { if (s.charAt(index) != c) { break loop; } } } index++; prefix.append(c); } return prefix.length() == 0 ? StringPool.EMPTY : prefix.toString(); } \n### Response:", "ground_truth": "Finds common prefix for several strings. Returns an empty string if\narguments do not have a common prefix.", "predict": "Finds the common prefix of the given strings.\n\n@param strings the strings to search\n@return the common prefix of the given strings"}
{"ID": 1110, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String shorten(String s, int length, final String suffix) { length -= suffix.length(); if (s.length() > length) { for (int j = length; j >= 0; j--) { if (CharUtil.isWhitespace(s.charAt(j))) { length = j; break; } } String temp = s.substring(0, length); s = temp.concat(suffix); } return s; } \n### Response:", "ground_truth": "Shorten string to given length.", "predict": "Concatenates the given suffix to the given string, removing any characters that are not suffix.\n\n@param s the string to be shortened\n@param length the length of the new string\n@param suffix the suffix to be appended\n@return the new string"}
{"ID": 1111, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String toUpperCase(final String s, Locale locale) { if (s == null) { return null; } StringBuilder sb = null; for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); if (c > 127) { // found non-ascii char, fallback to the slow unicode detection if (locale == null) { locale = Locale.getDefault(); } return s.toUpperCase(locale); } if ((c >= 'a') && (c <= 'z')) { if (sb == null) { sb = new StringBuilder(s); } sb.setCharAt(i, (char)(c - 32)); } } if (sb == null) { return s; } return sb.toString(); } \n### Response:", "ground_truth": "Converts all of the characters in the string to upper case, based on the\nlocale.\n\n@param  s the string to convert\n@param  locale apply this locale's rules\n@return the string, converted to upper case, or <code>null</code> if the\nstring is <code>null</code>", "predict": "Converts a string to its uppercase equivalent.\n\n@param s the string to convert\n@param locale the locale to use\n@return the uppercase equivalent of the string"}
{"ID": 1112, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String removeQuotes(final String string) { if ( (startsWithChar(string, '\\'') && endsWithChar(string, '\\'')) || (startsWithChar(string, '\"') && endsWithChar(string, '\"')) || (startsWithChar(string, '`') && endsWithChar(string, '`')) ) { return substring(string, 1, -1); } return string; } \n### Response:", "ground_truth": "Removes starting and ending single or double quotes.", "predict": "Removes all quotes from the given string.\n\n@param string the string to remove quotes from\n@return the modified string"}
{"ID": 1113, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String toHexString(final byte[] bytes) { char[] chars = new char[bytes.length * 2]; int i = 0; for (byte b : bytes) { chars[i++] = CharUtil.int2hex((b & 0xF0) >> 4); chars[i++] = CharUtil.int2hex(b & 0x0F); } return new String(chars); } \n### Response:", "ground_truth": "Converts bytes to hex string.", "predict": "Converts a byte array to a hexadecimal string.\n\n@param bytes the byte array\n@return the hexadecimal string"}
{"ID": 1114, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static byte[] getBytes(final String string) { try { return string.getBytes(JoddCore.encoding); } catch (UnsupportedEncodingException e) { throw new RuntimeException(e); } } \n### Response:", "ground_truth": "Returns String bytes using Jodds default encoding.", "predict": "Returns the bytes of a string.\n\n@param string the string\n@return the bytes"}
{"ID": 1115, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static char detectQuoteChar(final String str) { if (str.length() < 2) { return 0; } final char c = str.charAt(0); if (c != str.charAt(str.length() - 1)) { return 0; } if (c == '\\'' || c == '\"' || c == '`') { return c; } return 0; } \n### Response:", "ground_truth": "Detects quote character or return 0.", "predict": "Detect quote char.\n\n@param str the string\n@return the char"}
{"ID": 1116, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visit(final String name, final Object value) { if (av != null) { av.visit(name, value); } } \n### Response:", "ground_truth": "Visits a primitive value of the annotation.\n\n@param name the value name.\n@param value the actual value, whose type must be {@link Byte}, {@link Boolean}, {@link\nCharacter}, {@link Short}, {@link Integer} , {@link Long}, {@link Float}, {@link Double},\n{@link String} or {@link Type} of {@link Type#OBJECT} or {@link Type#ARRAY} sort. This\nvalue can also be an array of byte, boolean, short, char, int, long, float or double values\n(this is equivalent to using {@link #visitArray} and visiting each array element in turn,\nbut is more convenient).", "predict": "Visit a named value.\n\n@param name the name of the value\n@param value the value"}
{"ID": 1117, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visitEnum(final String name, final String descriptor, final String value) { if (av != null) { av.visitEnum(name, descriptor, value); } } \n### Response:", "ground_truth": "Visits an enumeration value of the annotation.\n\n@param name the value name.\n@param descriptor the class descriptor of the enumeration class.\n@param value the actual enumeration value.", "predict": "Visit an enum.\n\n@param name the enum name\n@param descriptor the enum descriptor\n@param value the enum value"}
{"ID": 1118, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public AnnotationVisitor visitAnnotation(final String name, final String descriptor) { if (av != null) { return av.visitAnnotation(name, descriptor); } return null; } \n### Response:", "ground_truth": "Visits a nested annotation value of the annotation.\n\n@param name the value name.\n@param descriptor the class descriptor of the nested annotation class.\n@return a visitor to visit the actual nested annotation value, or {@literal null} if this\nvisitor is not interested in visiting this nested annotation. <i>The nested annotation\nvalue must be fully visited before calling other methods on this annotation visitor</i>.", "predict": "Visit an annotation.\n\n@param name the annotation name\n@param descriptor the annotation descriptor\n@return the visitor result"}
{"ID": 1119, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <E> DbEntityDescriptor<E> registerType(final Class<E> type) { DbEntityDescriptor<E> ded = createDbEntityDescriptor(type); DbEntityDescriptor<E> existing = descriptorsMap.put(type, ded); if (log.isDebugEnabled()) { log.debug(\"Register \" + type.getName() + \" as \" + ded.getTableName()); } if (existing != null) { if (ded.getType() == type) { return ded; } throw new DbOomException(\"Type already registered: \" + existing.getType()); } existing = entityNamesMap.put(ded.getEntityName(), ded); if (existing != null) { throw new DbOomException(\"Name '\" + ded.getEntityName() + \"' already mapped to an entity: \" + existing.getType()); } return ded; } \n### Response:", "ground_truth": "Registers just type and entity names. Enough for most usages.", "predict": "Register a new entity type.\n\n@param type the entity type\n@return the descriptor"}
{"ID": 1120, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <E> DbEntityDescriptor<E> registerEntity(final Class<E> type, final boolean force) { if (force) { removeEntity(type); } return registerEntity(type); } \n### Response:", "ground_truth": "Registers entity. Existing entity will be removed if exist, so no exception will be thrown.", "predict": "Registers a new entity type.\n\n@param type the entity type\n@param force if true, the entity type will be registered even if it is not in the database\n@return the descriptor for the entity"}
{"ID": 1121, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <E> DbEntityDescriptor<E> removeEntity(final Class<E> type) { DbEntityDescriptor<E> ded = descriptorsMap.remove(type); if (ded == null) { ded = createDbEntityDescriptor(type); } entityNamesMap.remove(ded.getEntityName()); tableNamesMap.remove(ded.getTableName()); return ded; } \n### Response:", "ground_truth": "Removes entity and returns removed descriptor.", "predict": "Removes an entity from the descriptor.\n\n@param type the entity type\n@return the descriptor"}
{"ID": 1122, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <E> E createEntityInstance(final Class<E> type) { try { return ClassUtil.newInstance(type); } catch (Exception ex) { throw new DbOomException(ex); } } \n### Response:", "ground_truth": "Creates new entity instances.", "predict": "Create a new instance of the given type.\n\n@param type the type of the entity\n@return the entity instance"}
{"ID": 1123, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public WrapperProxettaFactory setTargetInterface(final Class targetInterface) { if (!targetInterface.isInterface()) { throw new ProxettaException(\"Not an interface: \" + targetInterface.getName()); } this.targetInterface = targetInterface; return this; } \n### Response:", "ground_truth": "Defines the interface of the resulting class.", "predict": "Sets the target interface.\n\n@param targetInterface the target interface\n@return the WrapperProxettaFactory"}
{"ID": 1124, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void injectTargetIntoWrapper(final Object target, final Object wrapper) { ProxettaUtil.injectTargetIntoWrapper(target, wrapper, targetFieldName); } \n### Response:", "ground_truth": "Injects target into wrapper.", "predict": "Injects the target object into the wrapper object.\n\n@param target the target object\n@param wrapper the wrapper object"}
{"ID": 1125, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected PropertyDescriptor[] lookupAnnotatedProperties(final Class type) { PropertyDescriptor[] properties = annotatedProperties.get(type); if (properties != null) { return properties; } ClassDescriptor cd = ClassIntrospector.get().lookup(type); PropertyDescriptor[] allProperties = cd.getAllPropertyDescriptors(); List<PropertyDescriptor> list = new ArrayList<>(); for (PropertyDescriptor propertyDescriptor : allProperties) { Annotation ann = null; if (propertyDescriptor.getFieldDescriptor() != null) { ann = propertyDescriptor.getFieldDescriptor().getField().getAnnotation(annotations); } if (ann == null && propertyDescriptor.getWriteMethodDescriptor() != null) { ann = propertyDescriptor.getWriteMethodDescriptor().getMethod().getAnnotation(annotations); } if (ann == null && propertyDescriptor.getReadMethodDescriptor() != null) { ann = propertyDescriptor.getReadMethodDescriptor().getMethod().getAnnotation(annotations); } if (ann != null) { list.add(propertyDescriptor); } } if (list.isEmpty()) { properties = EMPTY; } else { properties = list.toArray(new PropertyDescriptor[0]); } annotatedProperties.put(type, properties); return properties; } \n### Response:", "ground_truth": "Lookups for annotated properties. Caches all annotated properties on the first\naction class scan.", "predict": "Lookup all annotated properties for the given type.\n\n@param type the type to lookup\n@return the annotated properties"}
{"ID": 1126, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public DbServer detectDatabaseAndConfigureDbOom( final ConnectionProvider cp, final DbOomConfig dbOomConfig) { cp.init(); final Connection connection = cp.getConnection(); final DbServer dbServer = detectDatabase(connection); cp.closeConnection(connection); dbServer.accept(dbOomConfig); return dbServer; } \n### Response:", "ground_truth": "Detects database and configure DbOom engine.", "predict": "Detects the database and configures the DbOomConfig.\n\n@param cp the connection provider\n@param dbOomConfig the DbOomConfig\n@return the DbServer"}
{"ID": 1127, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void close() throws IOException { if (closed) { return; } if (gzipstream != null) { flushToGZip(); gzipstream.close(); gzipstream = null; } else { if (bufferCount > 0) { output.write(buffer, 0, bufferCount); bufferCount = 0; } } output.close(); closed = true; } \n### Response:", "ground_truth": "Closes this output stream, causing any buffered data to be flushed and any\nfurther output data to throw an IOException.", "predict": "Closes the output stream."}
{"ID": 1128, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void write(final int b) throws IOException { if (closed) { throw new IOException(\"Cannot write to a closed output stream\"); } if (bufferCount >= buffer.length) { flushToGZip(); } buffer[bufferCount++] = (byte) b; } \n### Response:", "ground_truth": "Writes the specified byte to our output stream.", "predict": "Writes the byte to the output stream.\n\n@param b the byte to write\n@throws IOException if an I/O error occurs"}
{"ID": 1129, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void doFilter(final ServletRequest request, final ServletResponse response, final FilterChain chain) throws IOException, ServletException { HttpServletRequest httpRequest = (HttpServletRequest) request; HttpServletResponse httpResponse = (HttpServletResponse) response; if (isRequestedSessionIdFromURL(httpRequest)) { HttpSession session = httpRequest.getSession(false); if (session != null) { session.invalidate(); // clear session if session id in URL } } // wrap response to remove URL encoding HttpServletResponseWrapper wrappedResponse = new HttpServletResponseWrapper(httpResponse) { @Override public String encodeRedirectUrl(final String url) { return url; } @Override public String encodeRedirectURL(final String url) { return url; } @Override public String encodeUrl(final String url) { return url; } @Override public String encodeURL(final String url) { return url; } }; chain.doFilter(request, wrappedResponse); } \n### Response:", "ground_truth": "Filters requests to remove URL-based session identifiers.", "predict": "Wraps the response to remove URL encoding.\n\n@param request the request\n@param response the response\n@param chain the filter chain\n@throws IOException if an IOException occurs\n@throws ServletException if an ServletException occurs"}
{"ID": 1130, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getEncodedName() { if (name == null) { return null; } try { return MimeUtility.encodeText(name); } catch (final UnsupportedEncodingException ueex) { throw new MailException(ueex); } } \n### Response:", "ground_truth": "Returns encoded attachment name.\n\n@return encoded attachment name. Value may be {@code null}.", "predict": "Returns the name of the message.\n\n@return the name of the message."}
{"ID": 1131, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public byte[] toByteArray() { final FastByteArrayOutputStream out; if (size != -1) { out = new FastByteArrayOutputStream(size); } else { out = new FastByteArrayOutputStream(); } writeToStream(out); return out.toByteArray(); } \n### Response:", "ground_truth": "Returns byte content of the attachment.\n\n@return byte array with content of the attachment.", "predict": "Returns the contents of this buffer as a byte array.\n\n@return the contents of this buffer as a byte array"}
{"ID": 1132, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void writeToFile(final File destination) { InputStream input = null; final OutputStream output; try { input = getDataSource().getInputStream(); output = new FileOutputStream(destination); StreamUtil.copy(input, output); } catch (final IOException ioex) { throw new MailException(ioex); } finally { StreamUtil.close(input); } } \n### Response:", "ground_truth": "Saves attachment to a file.\n\n@param destination The destination file to be written.", "predict": "Writes the data to a file.\n\n@param destination the destination file"}
{"ID": 1133, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void writeToStream(final OutputStream out) { InputStream input = null; try { input = getDataSource().getInputStream(); StreamUtil.copy(input, out); } catch (final IOException ioex) { throw new MailException(ioex); } finally { StreamUtil.close(input); } } \n### Response:", "ground_truth": "Saves attachment to the output stream.\n\n@param out OutputStream where attachment should be copied to.", "predict": "Writes the data to the output stream.\n\n@param out the output stream"}
{"ID": 1134, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected static String appendArgument(final String desc, final String type) { int ndx = desc.indexOf(')'); return desc.substring(0, ndx) + type + desc.substring(ndx); } \n### Response:", "ground_truth": "Appends argument to the existing description.", "predict": "Appends the given argument description to the given description.\n\n@param desc the description to append\n@param type the type of the argument\n@return the new description"}
{"ID": 1135, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected static String prependArgument(final String desc, final String type) { int ndx = desc.indexOf('('); ndx++; return desc.substring(0, ndx) + type + desc.substring(ndx); } \n### Response:", "ground_truth": "Prepends argument to the existing description.", "predict": "prepend an argument to the description string\n\n@param desc the description string\n@param type the type of the argument\n@return the description string with the argument prepended"}
{"ID": 1136, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected static String changeReturnType(final String desc, final String type) { int ndx = desc.indexOf(')'); return desc.substring(0, ndx + 1) + type; } \n### Response:", "ground_truth": "Changes return type.", "predict": "Change the return type of a description.\n\n@param desc the description\n@param type the new return type\n@return the description with the new return type"}
{"ID": 1137, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void text(final CharSequence text) { if (!strip) { super.text(text); return; } int textLength = text.length(); char[] dest = new char[textLength]; int ndx = 0; boolean regularChar = true; for (int i = 0; i < textLength; i++) { char c = text.charAt(i); if (CharUtil.isWhitespace(c)) { if (regularChar) { regularChar = false; c = ' '; } else { continue; } } else { regularChar = true; } dest[ndx] = c; ndx++; } if (regularChar || (ndx != 1)) { super.text(CharBuffer.wrap(dest, 0, ndx)); strippedCharsCount += textLength - ndx; } else { strippedCharsCount += textLength; } } \n### Response:", "ground_truth": "Cleans unnecessary whitespaces.", "predict": "Override the text method to strip all whitespace characters.\n\n@param text the text to strip"}
{"ID": 1138, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> void register(final Class<T> type, final TypeConverter<T> typeConverter) { converters.put(type, typeConverter); } \n### Response:", "ground_truth": "Registers a converter for specified type.\nUser must register converter for all super-classes as well.\n\n@param type\t\tclass that converter is for\n@param typeConverter\tconverter for provided class", "predict": "Register a converter for the given type.\n\n@param type the type to register the converter for\n@param typeConverter the converter to register"}
{"ID": 1139, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> TypeConverter<T> lookup(final Class<T> type) { return converters.get(type); } \n### Response:", "ground_truth": "Retrieves converter for provided type. Only registered types are matched,\ntherefore subclasses must be also registered.\n\n@return founded converter or <code>null</code>", "predict": "Returns the converter for the given type.\n\n@param type the type\n@return the converter"}
{"ID": 1140, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<Node> select(final String query) { Collection<List<CssSelector>> selectorsCollection = CSSelly.parse(query); return select(selectorsCollection); } \n### Response:", "ground_truth": "Selects nodes using CSS3 selector query.", "predict": "Selects all the nodes matching the given CSS selector.\n\n@param query the CSS selector\n@return the nodes matching the selector"}
{"ID": 1141, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<Node> select(final Collection<List<CssSelector>> selectorsCollection) { List<Node> results = new ArrayList<>(); for (List<CssSelector> selectors : selectorsCollection) { processSelectors(results, selectors); } return results; } \n### Response:", "ground_truth": "Selected nodes using pre-parsed CSS selectors. Take in consideration\ncollection type for results grouping order.", "predict": "Selects all the nodes that match the given selectors collection.\n\n@param selectorsCollection\n@return"}
{"ID": 1142, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void processSelectors(final List<Node> results, final List<CssSelector> selectors) { List<Node> selectedNodes = select(rootNode, selectors); for (Node selectedNode : selectedNodes) { if (!results.contains(selectedNode)) { results.add(selectedNode); } } } \n### Response:", "ground_truth": "Process selectors and keep adding results.", "predict": "Process the selectors and add the selected nodes to the results list.\n\n@param results the list of nodes to be processed\n@param selectors the selectors to be processed"}
{"ID": 1143, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Node selectFirst(final String query) { List<Node> selectedNodes = select(query); if (selectedNodes.isEmpty()) { return null; } return selectedNodes.get(0); } \n### Response:", "ground_truth": "Selects nodes using CSS3 selector query and returns the very first one.", "predict": "Returns the first node found in the query.\n\n@param query the query\n@return the first node found in the query"}
{"ID": 1144, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void walkDescendantsIteratively(final LinkedList<Node> nodes, final CssSelector cssSelector, final List<Node> result) { while (!nodes.isEmpty()) { Node node = nodes.removeFirst(); selectAndAdd(node, cssSelector, result); // append children in walking order to be processed right after this node int childCount = node.getChildNodesCount(); for (int i = childCount - 1; i >= 0; i--) { nodes.addFirst(node.getChild(i)); } } } \n### Response:", "ground_truth": "Walks over the child notes, maintaining the tree order and not using recursion.", "predict": "Walks the nodes recursively and adds the children to the result list.\n\n@param nodes\n@param cssSelector\n@param result"}
{"ID": 1145, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void walk(final Node rootNode, final CssSelector cssSelector, final List<Node> result) { // previous combinator determines the behavior CssSelector previousCssSelector = cssSelector.getPrevCssSelector(); Combinator combinator = previousCssSelector != null ? previousCssSelector.getCombinator() : Combinator.DESCENDANT; switch (combinator) { case DESCENDANT: LinkedList<Node> nodes = new LinkedList<>(); int childCount = rootNode.getChildNodesCount(); for (int i = 0; i < childCount; i++) { nodes.add(rootNode.getChild(i)); // recursive // selectAndAdd(node, cssSelector, result); // walk(node, cssSelector, result); } walkDescendantsIteratively(nodes, cssSelector, result); break; case CHILD: childCount = rootNode.getChildNodesCount(); for (int i = 0; i < childCount; i++) { Node node = rootNode.getChild(i); selectAndAdd(node, cssSelector, result); } break; case ADJACENT_SIBLING: Node node = rootNode.getNextSiblingElement(); if (node != null) { selectAndAdd(node, cssSelector, result); } break; case GENERAL_SIBLING: node = rootNode; while (true) { node = node.getNextSiblingElement(); if (node == null) { break; } selectAndAdd(node, cssSelector, result); } break; } } \n### Response:", "ground_truth": "Finds nodes in the tree that matches single selector.", "predict": "Recursively walk the tree and select the CSS selector for the current node.\n\n@param rootNode the root node\n@param cssSelector the CSS selector\n@param result the list of nodes to be selected"}
{"ID": 1146, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void selectAndAdd(final Node node, final CssSelector cssSelector, final List<Node> result) { // ignore all nodes that are not elements if (node.getNodeType() != Node.NodeType.ELEMENT) { return; } boolean matched = cssSelector.accept(node); if (matched) { // check for duplicates if (result.contains(node)) { return; } // no duplicate found, add it to the results result.add(node); } } \n### Response:", "ground_truth": "Selects single node for single selector and appends it to the results.", "predict": "Selects a node and adds it to the result list.\n\n@param node the node to select\n@param cssSelector the CSS selector to use to select the node\n@param result the list to add the node to"}
{"ID": 1147, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected boolean filter(final List<Node> currentResults, final Node node, final CssSelector cssSelector, final int index) { return cssSelector.accept(currentResults, node, index); } \n### Response:", "ground_truth": "Filter nodes.", "predict": "Filter the current results based on the CSS selector.\n\n@param currentResults the current results\n@param node       the node\n@param cssSelector the css selector\n@param index      the index\n@return true if the current results should be filtered"}
{"ID": 1148, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static char [] zzUnpackCMap(final String packed) { char [] map = new char[0x110000]; int i = 0; /* index in packed string */ int j = 0; /* index in unpacked array */ while (i < 128) { int count = packed.charAt(i++); char value = packed.charAt(i++); do map[j++] = value; while (--count > 0); } return map; } \n### Response:", "ground_truth": "Unpacks the compressed character translation table.\n\n@param packed   the packed character translation table\n@return         the unpacked character translation table", "predict": "Unpacks a character map from a string.\n\n@param packed the packed string\n@return the character map"}
{"ID": 1149, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean zzRefill() { if (zzBuffer == null) { zzBuffer = zzChars; zzEndRead += zzChars.length; return false; } return true; } \n### Response:", "ground_truth": "Refills the input buffer.\n\n@return      <code>false</code>, iff there was new input.", "predict": "Fill the buffer with the next available data.\n\n@return true if the buffer was filled, false if the buffer was not filled."}
{"ID": 1150, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected <T> PageData<T> page(String sql, final Map params, final int page, final int pageSize, final String sortColumnName, final boolean ascending, final Class[] target) { if (sortColumnName != null) { sql = buildOrderSql(sql, sortColumnName, ascending); } int from = (page - 1) * pageSize; String pageSql = buildPageSql(sql, from, pageSize); DbSqlBuilder dbsql = sql(pageSql); DbOomQuery query = query(dbsql); query.setMaxRows(pageSize); query.setFetchSize(pageSize); query.setMap(params); List<T> list = query.list(pageSize, target); query.close(); String countSql = buildCountSql(sql); dbsql = sql(countSql); query = query(dbsql); query.setMap(params); long count = query.executeCount(); query.close(); return new PageData<>(page, (int) count, pageSize, list); } \n### Response:", "ground_truth": "Pages given page.\n\n@param sql sql query that lists <b>all</b> items\n@param params map of SQL parameters\n@param page current page to show\n@param pageSize number of items to show\n@param sortColumnName name of sorting column, <code>null</code> for no sorting\n@param ascending <code>true</code> for ascending order\n@param target db entities for mapping (sa usual in DbOom)", "predict": "Builds a query to execute a page of data.\n\n@param sql\n@param params\n@param page\n@param pageSize\n@param sortColumnName\n@param ascending\n@param target\n@return"}
{"ID": 1151, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String removeSelect(String sql) { int ndx = StringUtil.indexOfIgnoreCase(sql, \"select\"); if (ndx != -1) { sql = sql.substring(ndx + 6); // select.length() } return sql; } \n### Response:", "ground_truth": "Removes the first 'select' from the sql query.", "predict": "Removes the \"select\" keyword from the given SQL statement.\n\n@param sql\n@return"}
{"ID": 1152, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String removeToFrom(String sql) { int from = 0; int fromCount = 1; int selectCount = 0; int lastNdx = 0; while (true) { int ndx = StringUtil.indexOfIgnoreCase(sql, \"from\", from); if (ndx == -1) { break; } // count selects in left part String left = sql.substring(lastNdx, ndx); selectCount += StringUtil.countIgnoreCase(left, \"select\"); if (fromCount >= selectCount) { sql = sql.substring(ndx); break; } // find next 'from' lastNdx = ndx; from = ndx + 4; fromCount++; } return sql; } \n### Response:", "ground_truth": "Removes the first part of the sql up to the relevant 'from'.\nTries to detect sub-queries in the 'select' part.", "predict": "Removes the 'from' keyword from the end of the SQL string.\n\n@param sql\n@return"}
{"ID": 1153, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String removeLastOrderBy(String sql) { int ndx = StringUtil.lastIndexOfIgnoreCase(sql, \"order by\"); if (ndx != -1) { int ndx2 = sql.lastIndexOf(sql, ')'); if (ndx > ndx2) { sql = sql.substring(0, ndx); } } return sql; } \n### Response:", "ground_truth": "Removes everything from last \"order by\".", "predict": "Remove the last 'order by' from the given SQL query.\n\n@param sql the SQL query\n@return the modified SQL query"}
{"ID": 1154, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String decode(final String html) { int ndx = html.indexOf('&'); if (ndx == -1) { return html; } StringBuilder result = new StringBuilder(html.length()); int lastIndex = 0; int len = html.length(); mainloop: while (ndx != -1) { result.append(html.substring(lastIndex, ndx)); lastIndex = ndx; while (html.charAt(lastIndex) != ';') { lastIndex++; if (lastIndex == len) { lastIndex = ndx; break mainloop; } } if (html.charAt(ndx + 1) == '#') { // decimal/hex char c = html.charAt(ndx + 2); int radix; if ((c == 'x') || (c == 'X')) { radix = 16; ndx += 3; } else { radix = 10; ndx += 2; } String number = html.substring(ndx, lastIndex); int i = Integer.parseInt(number, radix); result.append((char) i); lastIndex++; } else { // token String encodeToken = html.substring(ndx + 1, lastIndex); char[] replacement = ENTITY_MAP.get(encodeToken); if (replacement == null) { result.append('&'); lastIndex = ndx + 1; } else { result.append(replacement); lastIndex++; } } ndx = html.indexOf('&', lastIndex); } result.append(html.substring(lastIndex)); return result.toString(); } \n### Response:", "ground_truth": "Decodes HTML text. Assumes that all character references are properly closed with semi-colon.", "predict": "Decodes HTML entities.\n\n@param html the HTML to decode\n@return the decoded HTML"}
{"ID": 1155, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String detectName(final char[] input, int ndx) { final Ptr ptr = new Ptr(); int firstIndex = 0; int lastIndex = ENTITY_NAMES.length - 1; int len = input.length; char[] lastName = null; final BinarySearchBase binarySearch = new BinarySearchBase() { @Override protected int compare(final int index) { char[] name = ENTITY_NAMES[index]; if (ptr.offset >= name.length) { return -1; } return name[ptr.offset] - ptr.c; } }; while (true) { ptr.c = input[ndx]; if (!CharUtil.isAlphaOrDigit(ptr.c)) { return lastName != null ? new String(lastName) : null; } firstIndex = binarySearch.findFirst(firstIndex, lastIndex); if (firstIndex < 0) { return lastName != null ? new String(lastName) : null; } char[] element = ENTITY_NAMES[firstIndex]; if (element.length == ptr.offset + 1) { // total match, remember position, continue for finding the longer name lastName = ENTITY_NAMES[firstIndex]; } lastIndex = binarySearch.findLast(firstIndex, lastIndex); if (firstIndex == lastIndex) { // only one element found, check the rest for (int i = ptr.offset; i < element.length; i++) { if (element[i] != input[ndx]) { return lastName != null ? new String(lastName) : null; } ndx++; } return new String(element); } ptr.offset++; ndx++; if (ndx == len) { return lastName != null ? new String(lastName) : null; } } } \n### Response:", "ground_truth": "Detects the longest character reference name on given position in char array.", "predict": "Detects the name of the given character array.\n\n@param input the character array\n@param ndx the index of the character array\n@return the name of the given character array"}
{"ID": 1156, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected String buildOrderSql(String sql, final String column, final boolean ascending) { sql += \" order by \" + column; if (!ascending) { sql += \" desc\"; } return sql; } \n### Response:", "ground_truth": "Appends ORDER BY keyword.", "predict": "Builds the SQL to order the results by the given column.\n\n@param sql the SQL to build\n@param column the column to order by\n@param ascending the order by ascending or not\n@return the SQL to order by"}
{"ID": 1157, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected String buildPageSql(String sql, final int from, final int pageSize) { sql = removeSelect(sql); return \"select LIMIT \" + from + ' ' + pageSize + sql; } \n### Response:", "ground_truth": "Builds page sql using LIMIT keyword after the SELECT.", "predict": "Builds the SQL query for the page.\n\n@param sql\n@param from\n@param pageSize\n@return"}
{"ID": 1158, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void resolveColumnsAndProperties(final Class type) { PropertyDescriptor[] allProperties = ClassIntrospector.get().lookup(type).getAllPropertyDescriptors(); List<DbEntityColumnDescriptor> decList = new ArrayList<>(allProperties.length); int idcount = 0; HashSet<String> names = new HashSet<>(allProperties.length); for (PropertyDescriptor propertyDescriptor : allProperties) { DbEntityColumnDescriptor dec = DbMetaUtil.resolveColumnDescriptors(this, propertyDescriptor, isAnnotated, columnNamingStrategy); if (dec != null) { if (!names.add(dec.getColumnName())) { throw new DbOomException(\"Duplicate column name: \" + dec.getColumnName()); } decList.add(dec); if (dec.isId) { idcount++; } } } if (decList.isEmpty()) { throw new DbOomException(\"No column mappings in entity: \" + type); } columnDescriptors = decList.toArray(new DbEntityColumnDescriptor[0]); Arrays.sort(columnDescriptors); // extract ids from sorted list if (idcount > 0) { idColumnDescriptors = new DbEntityColumnDescriptor[idcount]; idcount = 0; for (DbEntityColumnDescriptor dec : columnDescriptors) { if (dec.isId) { idColumnDescriptors[idcount++] = dec; } } } } \n### Response:", "ground_truth": "Resolves list of all columns and properties.", "predict": "Resolves column names and properties for the given entity type.\n\n@param type the entity type"}
{"ID": 1159, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public DbEntityColumnDescriptor findByColumnName(final String columnName) { if (columnName == null) { return null; } init(); for (DbEntityColumnDescriptor columnDescriptor : columnDescriptors) { if (columnDescriptor.columnName.equalsIgnoreCase(columnName)) { return columnDescriptor; } } return null; } \n### Response:", "ground_truth": "Finds column descriptor by column name. Case is ignored.", "predict": "Finds the column descriptor with the given name.\n\n@param columnName the column name\n@return the column descriptor"}
{"ID": 1160, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public DbEntityColumnDescriptor findByPropertyName(final String propertyName) { if (propertyName == null) { return null; } init(); for (DbEntityColumnDescriptor columnDescriptor : columnDescriptors) { if (columnDescriptor.propertyName.equals(propertyName)) { return columnDescriptor; } } return null; } \n### Response:", "ground_truth": "Finds column descriptor by property name.", "predict": "Finds the column descriptor for the given property name.\n\n@param propertyName the property name\n@return the column descriptor or null if not found"}
{"ID": 1161, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getPropertyName(final String columnName) { DbEntityColumnDescriptor dec = findByColumnName(columnName); return dec == null ? null : dec.propertyName; } \n### Response:", "ground_truth": "Returns property name for specified column name.", "predict": "Returns the property name of the given column name.\n\n@param columnName the name of the column\n@return the property name"}
{"ID": 1162, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getColumnName(final String propertyName) { DbEntityColumnDescriptor dec = findByPropertyName(propertyName); return dec == null ? null : dec.columnName; } \n### Response:", "ground_truth": "Returns column name for specified property name..", "predict": "Returns the name of the column associated with the given property name.\n\n@param propertyName the property name\n@return the name of the column"}
{"ID": 1163, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object getIdValue(final E object) { final String propertyName = getIdPropertyName(); return BeanUtil.declared.getProperty(object, propertyName); } \n### Response:", "ground_truth": "Returns ID value for given entity instance.", "predict": "Get the id value for the given object.\n\n@param object the object\n@return the id value"}
{"ID": 1164, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setIdValue(final E object, final Object value) { final String propertyName = getIdPropertyName(); BeanUtil.declared.setProperty(object, propertyName, value); } \n### Response:", "ground_truth": "Sets ID value for given entity.", "predict": "Sets the id property value.\n\n@param object the object\n@param value the value"}
{"ID": 1165, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getKeyValue(final E object) { Object idValue = getIdValue(object); String idValueString = idValue == null ? StringPool.NULL : idValue.toString(); return type.getName().concat(StringPool.COLON).concat(idValueString); } \n### Response:", "ground_truth": "Returns unique key for this entity. Returned key\nis built from entity class and id value.", "predict": "Returns the key value for the given object.\n\n@param object the object\n@return the key value"}
{"ID": 1166, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public StringBand append(String s) { if (s == null) { s = StringPool.NULL; } if (index >= array.length) { expandCapacity(); } array[index++] = s; length += s.length(); return this; } \n### Response:", "ground_truth": "Appends a string.", "predict": "Append a string to the end of the string band.\n\n@param s the string to append\n@return this"}
{"ID": 1167, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setIndex(final int newIndex) { if (newIndex < 0) { throw new ArrayIndexOutOfBoundsException(newIndex); } if (newIndex > array.length) { String[] newArray = new String[newIndex]; System.arraycopy(array, 0, newArray, 0, index); array = newArray; } if (newIndex > index) { for (int i = index; i < newIndex; i++) { array[i] = StringPool.EMPTY; } } else if (newIndex < index) { for (int i = newIndex; i < index; i++) { array[i] = null; } } index = newIndex; length = calculateLength(); } \n### Response:", "ground_truth": "Specifies the new index.", "predict": "Sets the new index of the array.\n\n@param newIndex the new index of the array"}
{"ID": 1168, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void expandCapacity() { String[] newArray = new String[array.length << 1]; System.arraycopy(array, 0, newArray, 0, index); array = newArray; } \n### Response:", "ground_truth": "Expands internal string array by multiplying its size by 2.", "predict": "Expands the capacity of the array."}
{"ID": 1169, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected int calculateLength() { int len = 0; for (int i = 0; i < index; i++) { len += array[i].length(); } return len; } \n### Response:", "ground_truth": "Calculates string length.", "predict": "Calculates the length of the array.\n\n@return the length of the array"}
{"ID": 1170, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String createMixingMessage(final BeanDefinition targetBeanDefinition, final BeanDefinition refBeanDefinition) { return \"Scopes mixing detected: \" + refBeanDefinition.name + \"@\" + refBeanDefinition.scope.getClass().getSimpleName() + \" -> \" + targetBeanDefinition.name + \"@\" + targetBeanDefinition.scope.getClass().getSimpleName(); } \n### Response:", "ground_truth": "Creates mixed scope message.", "predict": "Create a message to be used for the error message.\n\n@param targetBeanDefinition the target bean definition\n@param refBeanDefinition the reference bean definition\n@return the message"}
{"ID": 1171, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Object createScopedProxyBean(final PetiteContainer petiteContainer, final BeanDefinition refBeanDefinition) { Class beanType = refBeanDefinition.type; Class proxyClass = proxyClasses.get(beanType); if (proxyClass == null) { // create proxy class only once if (refBeanDefinition instanceof ProxettaBeanDefinition) { // special case, double proxy! ProxettaBeanDefinition pbd = (ProxettaBeanDefinition) refBeanDefinition; ProxyProxetta proxetta = Proxetta.proxyProxetta().withAspects(ArraysUtil.insert(pbd.proxyAspects, aspect, 0)); proxetta.setClassNameSuffix(\"$ScopedProxy\"); proxetta.setVariableClassName(true); ProxyProxettaFactory builder = proxetta.proxy().setTarget(pbd.originalTarget); proxyClass = builder.define(); proxyClasses.put(beanType, proxyClass); } else { ProxyProxetta proxetta = Proxetta.proxyProxetta().withAspect(aspect); proxetta.setClassNameSuffix(\"$ScopedProxy\"); proxetta.setVariableClassName(true); ProxyProxettaFactory builder = proxetta.proxy().setTarget(beanType); proxyClass = builder.define(); proxyClasses.put(beanType, proxyClass); } } Object proxy; try { proxy = ClassUtil.newInstance(proxyClass); Field field = proxyClass.getField(\"$__petiteContainer$0\"); field.set(proxy, petiteContainer); field = proxyClass.getField(\"$__name$0\"); field.set(proxy, refBeanDefinition.name); } catch (Exception ex) { throw new PetiteException(ex); } return proxy; } \n### Response:", "ground_truth": "Creates scoped proxy bean for given bean definition.", "predict": "Create proxy bean.\n\n@param petiteContainer the PetiteContainer\n@param refBeanDefinition the bean definition\n@return the proxy bean"}
{"ID": 1172, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void loopBody() throws JspException { JspFragment body = getJspBody(); if (body == null) { return; } LoopIterator loopIterator = new LoopIterator(start, end, step, modulus); if (status != null) { getJspContext().setAttribute(status, loopIterator); } while (loopIterator.next()) { TagUtil.invokeBody(body); } if (status != null) { getJspContext().removeAttribute(status); } } \n### Response:", "ground_truth": "Loops body.", "predict": "Loops through the body of the JspFragment.\n\n@throws JspException if a JSP exception has occurred"}
{"ID": 1173, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void init() { File[] filesArray = dir.listFiles(); filesCount = 0; if (filesArray != null) { filesCount = filesArray.length; for (File file : filesArray) { if (!acceptFile(file)) { continue; } map.put(file, new MutableLong(file.lastModified())); } } } \n### Response:", "ground_truth": "Initializes dir watcher by reading all files\nfrom watched folder.", "predict": "Initializes the map of files that are currently being processed."}
{"ID": 1174, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected boolean acceptFile(final File file) { if (!file.isFile()) { return false; // ignore non-files } String fileName = file.getName(); if (ignoreDotFiles) { if (fileName.startsWith(StringPool.DOT)) { return false; // ignore hidden files } } if (patterns == null) { return true; } return Wildcard.matchOne(fileName, patterns) != -1; } \n### Response:", "ground_truth": "Accepts if a file is going to be watched.", "predict": "Helper method to check if a file is a valid file.\n\n@param file the file to check\n@return true if the file is a valid file, false otherwise"}
{"ID": 1175, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public DirWatcher useWatchFile(final String name) { watchFile = new File(dir, name); if (!watchFile.isFile() || !watchFile.exists()) { try { FileUtil.touch(watchFile); } catch (IOException ioex) { throw new DirWatcherException(\"Invalid watch file: \" + name, ioex); } } watchFileLastAccessTime = watchFile.lastModified(); return this; } \n### Response:", "ground_truth": "Enables usage of provided watch file.", "predict": "Create a watch file for the given name.\n\n@param name the name of the file to watch\n@return the DirWatcher instance"}
{"ID": 1176, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void start(final long pollingInterval) { if (timer == null) { if (!startBlank) { init(); } timer = new Timer(true); timer.schedule(new WatchTask(), 0, pollingInterval); } } \n### Response:", "ground_truth": "Starts the watcher.", "predict": "Starts the polling task.\n\n@param pollingInterval the polling interval"}
{"ID": 1177, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void onChange(final DirWatcherEvent.Type type, final File file) { listeners.accept(new DirWatcherEvent(type, file)); } \n### Response:", "ground_truth": "Triggers listeners on file change.", "predict": "Callback method for the file change event.\n\n@param type\nthe type of change\n@param file\nthe file"}
{"ID": 1178, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void add(final Enumeration<T> enumeration) { if (allEnumerations.contains(enumeration)) { throw new IllegalArgumentException(\"Duplicate enumeration\"); } allEnumerations.add(enumeration); } \n### Response:", "ground_truth": "Adds an enumeration to this composite.", "predict": "Adds an enumeration to the list of enumerations.\n\n@param enumeration enumeration to add"}
{"ID": 1179, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: int computeFieldInfoSize() { // The access_flags, name_index, descriptor_index and attributes_count fields use 8 bytes. int size = 8; // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS. if (constantValueIndex != 0) { // ConstantValue attributes always use 8 bytes. symbolTable.addConstantUtf8(Constants.CONSTANT_VALUE); size += 8; } // Before Java 1.5, synthetic fields are represented with a Synthetic attribute. if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && symbolTable.getMajorVersion() < Opcodes.V1_5) { // Synthetic attributes always use 6 bytes. symbolTable.addConstantUtf8(Constants.SYNTHETIC); size += 6; } if (signatureIndex != 0) { // Signature attributes always use 8 bytes. symbolTable.addConstantUtf8(Constants.SIGNATURE); size += 8; } // ACC_DEPRECATED is ASM specific, the ClassFile format uses a Deprecated attribute instead. if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) { // Deprecated attributes always use 6 bytes. symbolTable.addConstantUtf8(Constants.DEPRECATED); size += 6; } if (lastRuntimeVisibleAnnotation != null) { size += lastRuntimeVisibleAnnotation.computeAnnotationsSize( Constants.RUNTIME_VISIBLE_ANNOTATIONS); } if (lastRuntimeInvisibleAnnotation != null) { size += lastRuntimeInvisibleAnnotation.computeAnnotationsSize( Constants.RUNTIME_INVISIBLE_ANNOTATIONS); } if (lastRuntimeVisibleTypeAnnotation != null) { size += lastRuntimeVisibleTypeAnnotation.computeAnnotationsSize( Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS); } if (lastRuntimeInvisibleTypeAnnotation != null) { size += lastRuntimeInvisibleTypeAnnotation.computeAnnotationsSize( Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS); } if (firstAttribute != null) { size += firstAttribute.computeAttributesSize(symbolTable); } return size; } \n### Response:", "ground_truth": "Returns the size of the field_info JVMS structure generated by this FieldWriter. Also adds the\nnames of the attributes of this field in the constant pool.\n\n@return the size in bytes of the field_info JVMS structure.", "predict": "Compute the size of the field information.\n\n@return The size of the field information."}
{"ID": 1180, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: void putFieldInfo(final ByteVector output) { boolean useSyntheticAttribute = symbolTable.getMajorVersion() < Opcodes.V1_5; // Put the access_flags, name_index and descriptor_index fields. int mask = useSyntheticAttribute ? Opcodes.ACC_SYNTHETIC : 0; output.putShort(accessFlags & ~mask).putShort(nameIndex).putShort(descriptorIndex); // Compute and put the attributes_count field. // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS. int attributesCount = 0; if (constantValueIndex != 0) { ++attributesCount; } if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && useSyntheticAttribute) { ++attributesCount; } if (signatureIndex != 0) { ++attributesCount; } if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) { ++attributesCount; } if (lastRuntimeVisibleAnnotation != null) { ++attributesCount; } if (lastRuntimeInvisibleAnnotation != null) { ++attributesCount; } if (lastRuntimeVisibleTypeAnnotation != null) { ++attributesCount; } if (lastRuntimeInvisibleTypeAnnotation != null) { ++attributesCount; } if (firstAttribute != null) { attributesCount += firstAttribute.getAttributeCount(); } output.putShort(attributesCount); // Put the field_info attributes. // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS. if (constantValueIndex != 0) { output .putShort(symbolTable.addConstantUtf8(Constants.CONSTANT_VALUE)) .putInt(2) .putShort(constantValueIndex); } if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && useSyntheticAttribute) { output.putShort(symbolTable.addConstantUtf8(Constants.SYNTHETIC)).putInt(0); } if (signatureIndex != 0) { output .putShort(symbolTable.addConstantUtf8(Constants.SIGNATURE)) .putInt(2) .putShort(signatureIndex); } if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) { output.putShort(symbolTable.addConstantUtf8(Constants.DEPRECATED)).putInt(0); } if (lastRuntimeVisibleAnnotation != null) { lastRuntimeVisibleAnnotation.putAnnotations( symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_ANNOTATIONS), output); } if (lastRuntimeInvisibleAnnotation != null) { lastRuntimeInvisibleAnnotation.putAnnotations( symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_ANNOTATIONS), output); } if (lastRuntimeVisibleTypeAnnotation != null) { lastRuntimeVisibleTypeAnnotation.putAnnotations( symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS), output); } if (lastRuntimeInvisibleTypeAnnotation != null) { lastRuntimeInvisibleTypeAnnotation.putAnnotations( symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS), output); } if (firstAttribute != null) { firstAttribute.putAttributes(symbolTable, output); } } \n### Response:", "ground_truth": "Puts the content of the field_info JVMS structure generated by this FieldWriter into the given\nByteVector.\n\n@param output where the field_info structure must be put.", "predict": "Put the field information.\n\n@param output the output"}
{"ID": 1181, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Target ofValue(final Object value, final ScopeData scopeData) { return new Target(value, null, scopeData, null, VALUE_INSTANCE_CREATOR); } \n### Response:", "ground_truth": "Creates a common target over a value, with known scope data.", "predict": "Create a new Target instance with the given value and scope data.\n\n@param value the value\n@param scopeData the scope data\n@return the new Target instance"}
{"ID": 1182, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void writeValue(final InjectionPoint injectionPoint, final Object propertyValue, final boolean silent) { writeValue(injectionPoint.targetName(), propertyValue, silent); } \n### Response:", "ground_truth": "Writes value to this target. Depending on a flag, writing the value can be\ncompletely silent, when no exception is thrown and with top performances.\nOtherwise, an exception is thrown on a failure.", "predict": "Writes the given value to the target injection point.\n\n@param injectionPoint injection point\n@param propertyValue property value\n@param silent whether to log the write operation"}
{"ID": 1183, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void decorate(final Writer writer, final char[] pageContent, final char[] decoraContent) throws IOException { DecoraTag[] decoraTags = parseDecorator(decoraContent); parsePage(pageContent, decoraTags); writeDecoratedPage(writer, decoraContent, pageContent, decoraTags); } \n### Response:", "ground_truth": "Decorates page content with decorator template and outputs the result.", "predict": "Decorates the page with decorators.\n\n@param writer the writer\n@param pageContent the page content\n@param decoraContent the decorator content\n@throws IOException Signals that an I/O exception has occurred."}
{"ID": 1184, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void parsePage(final char[] pageContent, final DecoraTag[] decoraTags) { LagartoParser lagartoParser = new LagartoParser(pageContent); PageRegionExtractor writer = new PageRegionExtractor(decoraTags); lagartoParser.parse(writer); } \n### Response:", "ground_truth": "Parses target page and extracts Decora regions for replacements.", "predict": "Parses the page content.\n\n@param pageContent the page content\n@param decoraTags the decora tags"}
{"ID": 1185, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void writeDecoratedPage(final Writer out, final char[] decoratorContent, final char[] pageContent, final DecoraTag[] decoraTags) throws IOException { int ndx = 0; for (DecoraTag decoraTag : decoraTags) { // [1] just copy content before the Decora tag int decoratorLen = decoraTag.getStartIndex() - ndx; if (decoratorLen <= 0) { continue; } out.write(decoratorContent, ndx, decoratorLen); ndx = decoraTag.getEndIndex(); // [2] now write region at the place of Decora tag int regionLen = decoraTag.getRegionLength(); if (regionLen == 0) { if (decoraTag.hasDefaultValue()) { out.write(decoratorContent, decoraTag.getDefaultValueStart(), decoraTag.getDefaultValueLength()); } } else { writeRegion(out, pageContent, decoraTag, decoraTags); } } // write remaining content out.write(decoratorContent, ndx, decoratorContent.length - ndx); } \n### Response:", "ground_truth": "Writes decorated content.", "predict": "Writes the decorator content of the page.\n\n@param out\nthe writer\n@param decoratorContent\nthe decorator content\n@param pageContent\nthe page content\n@param decoraTags\nthe decora tags\n@throws IOException\nSignals that an I/O exception has occurred."}
{"ID": 1186, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void writeRegion(final Writer out, final char[] pageContent, final DecoraTag decoraTag, final DecoraTag[] decoraTags) throws IOException { int regionStart = decoraTag.getRegionStart(); int regionLen = decoraTag.getRegionLength(); int regionEnd = regionStart + regionLen; for (DecoraTag innerDecoraTag : decoraTags) { if (decoraTag == innerDecoraTag) { continue; } if (decoraTag.isRegionUndefined()) { continue; } if (innerDecoraTag.isInsideOtherTagRegion(decoraTag)) { // write everything from region start to the inner Decora tag out.write(pageContent, regionStart, innerDecoraTag.getRegionTagStart() - regionStart); regionStart = innerDecoraTag.getRegionTagEnd(); } } // write remaining content of the region out.write(pageContent, regionStart, regionEnd - regionStart); } \n### Response:", "ground_truth": "Writes region to output, but extracts all inner regions.", "predict": "Writes the content of a region.\n\n@param out\nthe writer\n@param pageContent\nthe page content\n@param decoraTag\nthe decora tag\n@param decoraTags\nthe decora tags\n@throws IOException\nSignals that an I/O exception has occurred."}
{"ID": 1187, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void start() throws IOException { serverSocket = new ServerSocket(listenPort, socketBacklog); serverSocket.setReuseAddress(true); executorService = Executors.newFixedThreadPool(threadPoolSize); running = true; while (running) { Socket socket = serverSocket.accept(); socket.setKeepAlive(false); executorService.execute(onSocketConnection(socket)); } executorService.shutdown(); } \n### Response:", "ground_truth": "Starts HTTP tunnel. Method ends when the tunnel is stopped.", "predict": "Starts the server."}
{"ID": 1188, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ProcessResult run(final Process process) throws InterruptedException { final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final StreamGobbler outputGobbler = new StreamGobbler(process.getInputStream(), baos, OUTPUT_PREFIX); final StreamGobbler errorGobbler = new StreamGobbler(process.getErrorStream(), baos, ERROR_PREFIX); outputGobbler.start(); errorGobbler.start(); final int result = process.waitFor(); outputGobbler.waitFor(); errorGobbler.waitFor(); return new ProcessResult(result, baos.toString()); } \n### Response:", "ground_truth": "Executes a process and returns the process output and exit code.", "predict": "Runs a process and returns the result.\n\n@param process the process to run\n@return the result of the process\n@throws InterruptedException if the process was interrupted"}
{"ID": 1189, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected IMAPSSLStore getStore(final Session session) { SimpleAuthenticator simpleAuthenticator = (SimpleAuthenticator) authenticator; final URLName url; if (simpleAuthenticator == null) { url = new URLName( PROTOCOL_IMAP, host, port, StringPool.EMPTY, null, null); } else { final PasswordAuthentication pa = simpleAuthenticator.getPasswordAuthentication(); url = new URLName( PROTOCOL_IMAP, host, port, StringPool.EMPTY, pa.getUserName(), pa.getPassword()); } return new IMAPSSLStore(session, url); } \n### Response:", "ground_truth": "Returns email store.\n\n@param session {@link Session}\n@return {@link com.sun.mail.imap.IMAPSSLStore}", "predict": "Get the IMAP store.\n\n@param session the session\n@return the IMAP store"}
{"ID": 1190, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ServletOutputStream createOutputStream() throws IOException { GzipResponseStream gzstream = new GzipResponseStream(origResponse); gzstream.setBuffer(threshold); return gzstream; } \n### Response:", "ground_truth": "Creates and returns a ServletOutputStream to write the content associated\nwith this Response.", "predict": "Creates a gzip output stream."}
{"ID": 1191, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void init(final TemplateData templateData) { super.init(templateData); if (hint != null) { templateData.incrementHintsCount(); } } \n### Response:", "ground_truth": "Counts actual real hints.", "predict": "Increments the hint count.\n\n@param templateData the template data"}
{"ID": 1192, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void appendAlias(final StringBuilder query, final DbEntityDescriptor ded, final DbEntityColumnDescriptor dec) { final ColumnAliasType columnAliasType = templateData.getColumnAliasType(); if (columnAliasType == null || columnAliasType == ColumnAliasType.TABLE_REFERENCE) { final String tableName = ded.getTableName(); final String columnName = dec.getColumnNameForQuery(); templateData.registerColumnDataForTableRef(tableRef, tableName); query.append(tableRef).append(columnAliasSeparator).append(columnName); } else if (columnAliasType == ColumnAliasType.COLUMN_CODE) { final String tableName = ded.getTableName(); final String columnName = dec.getColumnName(); final String code = templateData.registerColumnDataForColumnCode(tableName, columnName); query.append(code); } else if (columnAliasType == ColumnAliasType.TABLE_NAME) { final String tableName = ded.getTableNameForQuery(); final String columnName = dec.getColumnNameForQuery(); query.append(tableName).append(columnAliasSeparator).append(columnName); } } \n### Response:", "ground_truth": "Appends alias.", "predict": "Appends the alias to the query.\n\n@param query the query\n@param ded the ded\n@param dec the dec"}
{"ID": 1193, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void appendColumnName(final StringBuilder query, final DbEntityDescriptor ded, final DbEntityColumnDescriptor dec) { query.append(resolveTable(tableRef, ded)).append('.').append(dec.getColumnName()); if (templateData.getColumnAliasType() != null) { // create column aliases query.append(AS); switch (templateData.getColumnAliasType()) { case TABLE_NAME: { final String tableName = ded.getTableNameForQuery(); query.append(tableName).append(columnAliasSeparator).append(dec.getColumnNameForQuery()); break; } case TABLE_REFERENCE: { final String tableName = ded.getTableName(); templateData.registerColumnDataForTableRef(tableRef, tableName); query.append(tableRef).append(columnAliasSeparator).append(dec.getColumnNameForQuery()); break; } case COLUMN_CODE: { final String tableName = ded.getTableName(); final String code = templateData.registerColumnDataForColumnCode(tableName, dec.getColumnName()); query.append(code); break; } } } } \n### Response:", "ground_truth": "Simply appends column name with optional table reference and alias.", "predict": "Appends the column name to the query string.\n\n@param query the query\n@param ded the ded\n@param dec the dec"}
{"ID": 1194, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void addRule(final D ruleDefinition, final boolean include) { if (rules == null) { rules = new ArrayList<>(); } if (include) { includesCount++; } else { excludesCount++; } Rule<R> newRule = new Rule<>(makeRule(ruleDefinition), include); if (rules.contains(newRule)) { return; } rules.add(newRule); } \n### Response:", "ground_truth": "Adds a rule. Duplicates are not allowed and will be ignored.", "predict": "Add a rule to the list of rules.\n\n@param ruleDefinition the rule definition\n@param include if true, include the rule in the list of rules"}
{"ID": 1195, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean apply(final V value, final boolean blacklist, boolean flag) { if (rules == null) { return flag; } if (blacklist) { flag = processExcludes(value, flag); flag = processIncludes(value, flag); } else { flag = processIncludes(value, flag); flag = processExcludes(value, flag); } return flag; } \n### Response:", "ground_truth": "Applies rules on given flag. Flag is only changed if at least one rule\nmatched. Otherwise, the same value is returned. This way you can\nchain several rules and have the rule engine change the flag\nonly when a rule is matched.", "predict": "Apply the rules to the given value.\n\n@param value the value to apply the rules to\n@param blacklist true if the value should be black listed, false if it should not\n@param flag true if the value should be applied, false if it should not\n@return true if the value should be applied, false if it should not"}
{"ID": 1196, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected boolean processIncludes(final V value, boolean include) { if (includesCount > 0) { if (!include) { for (Rule<R> rule : rules) { if (!rule.include) { continue; } if (inExRuleMatcher.accept(value, rule.value, true)) { include = true; break; } } } } return include; } \n### Response:", "ground_truth": "Process includes rules.", "predict": "Processes the includes.\n\n@param value the value\n@param include the include\n@return the include"}
{"ID": 1197, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected boolean processExcludes(final V value, boolean include) { if (excludesCount > 0) { if (include) { for (Rule<R> rule : rules) { if (rule.include) { continue; } if (inExRuleMatcher.accept(value, rule.value, false)) { include = false; break; } } } } return include; } \n### Response:", "ground_truth": "Process excludes rules.", "predict": "Processes the exclude rules.\n\n@param value the value\n@param include the include\n@return the include"}
{"ID": 1198, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getPseudoClassName() { String name = getClass().getSimpleName().toLowerCase(); name = name.replace('_', '-'); return name; } \n### Response:", "ground_truth": "Returns pseudo-class name from simple class name.", "predict": "Returns the pseudo class name."}
{"ID": 1199, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public boolean addAll(final Collection<? extends E> c) { Iterator<? extends E> i = c.iterator(); boolean changed = false; while (i.hasNext()) { boolean ret = add(i.next()); if (!changed) { changed = ret; } } return changed; } \n### Response:", "ground_truth": "Add all of the elements in the given collection to this list.", "predict": "Adds all elements from the given collection to this one.\n\n@param c the collection to add to this one\n@return true if the collection was added, false otherwise"}
{"ID": 1200, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected int findInsertionPoint(final E o, int low, int high) { while (low <= high) { int mid = (low + high) >>> 1; int delta = compare(get(mid), o); if (delta > 0) { high = mid - 1; } else { low = mid + 1; } } return low; } \n### Response:", "ground_truth": "Conducts a binary search to find the index where Object\nshould be inserted.", "predict": "Finds the insertion point of the given element.\n\n@param o the element to insert\n@param low the low index of the element to insert\n@param high the high index of the element to insert\n@return the index of the element to insert"}
{"ID": 1201, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void bindAnnotationConfig(final Class<? extends Annotation> annotationType, final Class<? extends ActionConfig> actionConfigClass) { final ActionConfig actionConfig = registerNewActionConfiguration(actionConfigClass); actionConfigs.put(annotationType, actionConfig); for (final AnnotationParser annotationParser : annotationParsers) { if (annotationType.equals(annotationParser.getAnnotationType())) { // parser already exists return; } } annotationParsers = ArraysUtil.append(annotationParsers, new AnnotationParser(annotationType, Action.class)); } \n### Response:", "ground_truth": "Binds action annotation and the action config. This can overwrite the default annotation\nconfiguration of an annotation.", "predict": "Binds an annotation to a new action configuration.\n\n@param annotationType the annotation type\n@param actionConfigClass the action config class"}
{"ID": 1202, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected ActionConfig registerNewActionConfiguration(final Class<? extends ActionConfig> actionConfigClass) { final ActionConfig newActionConfig = createActionConfig(actionConfigClass); actionConfigs.put(actionConfigClass, newActionConfig); return newActionConfig; } \n### Response:", "ground_truth": "Registers action configuration for given type.", "predict": "Register a new action configuration.\n\n@param actionConfigClass the action config class\n@return the action config"}
{"ID": 1203, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ActionConfig lookup(final Class actionTypeOrAnnotationType) { final ActionConfig actionConfig = actionConfigs.get(actionTypeOrAnnotationType); if (actionConfig == null) { throw new MadvocException(\"ActionConfiguration not registered:\" + actionTypeOrAnnotationType.getName()); } return actionConfig; } \n### Response:", "ground_truth": "Lookup for the action configuration. Typically, the input argument is either the action type or annotation type.", "predict": "Lookup the action configuration for the given action type or annotation type.\n\n@param actionTypeOrAnnotationType the action type or annotation type\n@return the action configuration\n@throws MadvocException if the action configuration is not registered"}
{"ID": 1204, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T extends ActionConfig> void with(final Class<T> actionConfigType, final Consumer<T> actionConfigConsumer) { final T actionConfig = (T) lookup(actionConfigType); actionConfigConsumer.accept(actionConfig); } \n### Response:", "ground_truth": "Fetch some action config and consumes it.", "predict": "Lookups the action config of the given type and applies the given action config consumer to it.\n\n@param actionConfigType the action config type\n@param actionConfigConsumer the action config consumer"}
{"ID": 1205, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected static void setupSystemMailProperties() { System.setProperty(\"mail.mime.encodefilename\", Boolean.valueOf(Defaults.mailMimeEncodefilename).toString()); System.setProperty(\"mail.mime.decodefilename\", Boolean.valueOf(Defaults.mailMimeDecodefilename).toString()); } \n### Response:", "ground_truth": "Setups the system email properties.", "predict": "Sets system properties for mail.mime.encodefilename and mail.mime.decodefilename."}
{"ID": 1206, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void validateWithin(final ValidationContext vctx, final Object value) { vtor.validate(vctx, value, name); } \n### Response:", "ground_truth": "Validates provided context and value withing this constraint content.", "predict": "Validates the value within the context.\n\n@param vctx the context\n@param value the value"}
{"ID": 1207, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Element findLastTable(final Node node) { Node tableNode = node; while (tableNode != null) { if (tableNode.getNodeType() == Node.NodeType.ELEMENT) { String tableNodeName = tableNode.getNodeName().toLowerCase(); if (tableNodeName.equals(\"table\")) { break; } } tableNode = tableNode.getParentNode(); } return (Element) tableNode; } \n### Response:", "ground_truth": "Finds the last table in stack of open elements.", "predict": "Finds the last table node in the given node.\n\n@param node the node to search\n@return the last table node"}
{"ID": 1208, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void fixElements() { for (Element fosterElement : fosterElements) { // find parent table Element lastTable = findLastTable(fosterElement); Node fosterElementParent = fosterElement.getParentNode(); // filter our foster element Node[] fosterChilds = fosterElement.getChildNodes(); for (Node fosterChild : fosterChilds) { if (fosterChild.getNodeType() == Node.NodeType.ELEMENT) { if (isOneOfTableElements((Element) fosterChild)) { // move all child table elements outside // the foster element fosterChild.detachFromParent(); fosterElementParent.insertBefore(fosterChild, fosterElement); } } } // finally, move foster element above the table fosterElement.detachFromParent(); lastTable.getParentNode().insertBefore(fosterElement, lastTable); } } \n### Response:", "ground_truth": "Performs the fix for elements.", "predict": "Moves all elements that are not table elements to the end of the foster element."}
{"ID": 1209, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Map<String, BeanData> registerSessionBeans(final HttpSession httpSession) { SessionBeans sessionBeans = new SessionBeans(); httpSession.setAttribute(SESSION_BEANS_NAME, sessionBeans); return sessionBeans.getBeanMap(); } \n### Response:", "ground_truth": "Registers new session destroy callback if not already registered.", "predict": "Register session beans.\n\n@param httpSession the http session\n@return the map"}
{"ID": 1210, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") protected Map<String, BeanData> getSessionMap(final HttpSession session) { SessionBeans sessionBeans = (SessionBeans) session.getAttribute(SESSION_BEANS_NAME); if (sessionBeans == null) { return null; } return sessionBeans.getBeanMap(); } \n### Response:", "ground_truth": "Returns instance map from http session.", "predict": "Gets the session map.\n\n@param session the session\n@return the session map"}
{"ID": 1211, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void init(String name, final String superName, final String suffix, final String reqProxyClassName) { int lastSlash = name.lastIndexOf('/'); this.targetPackage = lastSlash == -1 ? StringPool.EMPTY : name.substring(0, lastSlash).replace('/', '.'); this.targetClassname = name.substring(lastSlash + 1); this.nextSupername = superName; this.superName = name; // create proxy name if (reqProxyClassName != null) { if (reqProxyClassName.startsWith(DOT)) { name = name.substring(0, lastSlash) + '/' + reqProxyClassName.substring(1); } else if (reqProxyClassName.endsWith(DOT)) { name = reqProxyClassName.replace('.', '/') + this.targetClassname; } else { name = reqProxyClassName.replace('.', '/'); } } // add optional suffix if (suffix != null) { name += suffix; } this.thisReference = name; this.superReference = this.superName; } \n### Response:", "ground_truth": "Work data initialization.", "predict": "Override this method to set the name of the proxy class."}
{"ID": 1212, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: void addAdviceInitMethod(final String name) { if (adviceInits == null) { adviceInits = new ArrayList<>(); } adviceInits.add(name); } \n### Response:", "ground_truth": "Saves used constructors of advices.", "predict": "Add a method to be called before advice methods are called.\n\n@param name the name of the method"}
{"ID": 1213, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void end() { if (newAction) { bundleId = bundlesManager.registerBundle(contextPath, actionPath, bundleId, bundleContentType, sources); } } \n### Response:", "ground_truth": "Called on end of parsing.", "predict": "Ends the action."}
{"ID": 1214, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void add( final String section, final String key, final StringBuilder value, final boolean trim, final Operator operator) { // ignore lines without : or = if (key == null) { return; } String fullKey = key; if (section != null) { if (fullKey.length() != 0) { fullKey = section + '.' + fullKey; } else { fullKey = section; } } String v = value.toString(); if (trim) { if (valueTrimLeft && valueTrimRight) { v = v.trim(); } else if (valueTrimLeft) { v = StringUtil.trimLeft(v); } else { v = StringUtil.trimRight(v); } } if (v.length() == 0 && skipEmptyProps) { return; } extractProfilesAndAdd(fullKey, v, operator); } \n### Response:", "ground_truth": "Adds accumulated value to key and current section.", "predict": "Adds a profile to the list.\n\n@param section\n@param key\n@param value\n@param trim\n@param operator"}
{"ID": 1215, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void extractProfilesAndAdd(final String key, final String value, final Operator operator) { String fullKey = key; int ndx = fullKey.indexOf(PROFILE_LEFT); if (ndx == -1) { justAdd(fullKey, value, null, operator); return; } // extract profiles ArrayList<String> keyProfiles = new ArrayList<>(); while (true) { ndx = fullKey.indexOf(PROFILE_LEFT); if (ndx == -1) { break; } final int len = fullKey.length(); int ndx2 = fullKey.indexOf(PROFILE_RIGHT, ndx + 1); if (ndx2 == -1) { ndx2 = len; } // remember profile final String profile = fullKey.substring(ndx + 1, ndx2); keyProfiles.add(profile); // extract profile from key ndx2++; final String right = (ndx2 == len) ? StringPool.EMPTY : fullKey.substring(ndx2); fullKey = fullKey.substring(0, ndx) + right; } if (fullKey.startsWith(StringPool.DOT)) { // check for special case when only profile is defined in section fullKey = fullKey.substring(1); } // add value to extracted profiles justAdd(fullKey, value, keyProfiles, operator); } \n### Response:", "ground_truth": "Extracts profiles from the key name and adds key-value to them.", "predict": "Extract profiles and add them to the list.\n\n@param key\n@param value\n@param operator"}
{"ID": 1216, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void justAdd(final String key, final String value, final ArrayList<String> keyProfiles, final Operator operator) { if (operator == Operator.COPY) { HashMap<String,Object> target = new HashMap<>(); String[] profiles = null; if (keyProfiles != null) { profiles = keyProfiles.toArray(new String[0]); } String[] sources = StringUtil.splitc(value, ','); for (String source : sources) { source = source.trim(); // try to extract profile for parsing String[] lookupProfiles = profiles; String lookupProfilesString = null; int leftIndex = source.indexOf('<'); if (leftIndex != -1) { int rightIndex = source.indexOf('>'); lookupProfilesString = source.substring(leftIndex + 1, rightIndex); source = source.substring(0, leftIndex).concat(source.substring(rightIndex + 1)); lookupProfiles = StringUtil.splitc(lookupProfilesString, ','); StringUtil.trimAll(lookupProfiles); } String[] wildcards = new String[] {source + \".*\"}; propsData.extract(target, lookupProfiles, wildcards, null); for (Map.Entry<String, Object> entry : target.entrySet()) { String entryKey = entry.getKey(); String suffix = entryKey.substring(source.length()); String newKey = key + suffix; String newValue = \"${\" + entryKey; if (lookupProfilesString != null) { newValue += \"<\" + lookupProfilesString + \">\"; } newValue += \"}\"; if (profiles == null) { propsData.putBaseProperty(newKey, newValue, false); } else { for (final String p : profiles) { propsData.putProfileProperty(newKey, newValue, p, false); } } } } return; } boolean append = operator == Operator.QUICK_APPEND; if (keyProfiles == null) { propsData.putBaseProperty(key, value, append); return; } for (final String p : keyProfiles) { propsData.putProfileProperty(key, value, p, append); } } \n### Response:", "ground_truth": "Core key-value addition.", "predict": "Adds a profile to the props data.\n\n@param key the key\n@param value the value\n@param keyProfiles the profiles\n@param operator the operator"}
{"ID": 1217, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String typedesc2ClassName(final String desc) { String className = desc; switch (desc.charAt(0)) { case 'B': case 'C': case 'D': case 'F': case 'I': case 'J': case 'S': case 'Z': case 'V': if (desc.length() != 1) { throw new IllegalArgumentException(INVALID_BASE_TYPE + desc); } break; case 'L': className = className.substring(1, className.length() - 1); break; case '[': // uses less-known feature of class loaders for loading array types // using bytecode-like signatures. className = className.replace('/', '.'); break; default: throw new IllegalArgumentException(INVALID_TYPE_DESCRIPTION + desc); } return className; } \n### Response:", "ground_truth": "Converts bytecode-like description to java class name that can be loaded\nwith a classloader. Uses less-known feature of class loaders for loading\narray classes.\n\n@see #typedescToSignature(String, jodd.mutable.MutableInteger)", "predict": "Convert a type description to a class name.\n\n@param desc description of the type\n@return class name"}
{"ID": 1218, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String typeref2Name(final String desc) { if (desc.charAt(0) != TYPE_REFERENCE) { throw new IllegalArgumentException(INVALID_TYPE_DESCRIPTION + desc); } String name = desc.substring(1, desc.length() - 1); return name.replace('/', '.'); } \n### Response:", "ground_truth": "Converts type reference to java-name.", "predict": "Converts a description into a type reference name.\n\n@param desc description\n@return type reference name"}
{"ID": 1219, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String typedescToSignature(final String desc, final MutableInteger from) { int fromIndex = from.get(); from.value++; // default usage for most cases switch (desc.charAt(fromIndex)) { case 'B': return \"byte\"; case 'C': return \"char\"; case 'D': return \"double\"; case 'F': return \"float\"; case 'I': return \"int\"; case 'J': return \"long\"; case 'S': return \"short\"; case 'Z': return \"boolean\"; case 'V': return \"void\"; case 'L': int index = desc.indexOf(';', fromIndex); if (index < 0) { throw new IllegalArgumentException(INVALID_TYPE_DESCRIPTION + desc); } from.set(index + 1); String str = desc.substring(fromIndex + 1, index); return str.replace('/', '.'); case 'T': return desc.substring(from.value); case '[': StringBuilder brackets = new StringBuilder(); int n = fromIndex; while (desc.charAt(n) == '[') { // count opening brackets brackets.append(\"[]\"); n++; } from.value = n; String type = typedescToSignature(desc, from); // the rest of the string denotes a `<field_type>' return type + brackets; default: if (from.value == 0) { throw new IllegalArgumentException(INVALID_TYPE_DESCRIPTION + desc); } // generics! return desc.substring(from.value); } } \n### Response:", "ground_truth": "Returns java-like signature of a bytecode-like description.\nOnly first description is parsed.\n\nThe field signature represents the value of an argument to a function or\nthe value of a variable. It is a series of bytes generated by the\nfollowing grammar:\n\n<PRE>{@code\n<field_signature> ::= <field_type>\n<field_type>      ::= <base_type>|<object_type>|<array_type>\n<base_type>       ::= B|C|D|F|I|J|S|Z\n<object_type>     ::= L<fullclassname>;\n<array_type>      ::= [<field_type>\n\nThe meaning of the base types is as follows:\nB byte signed byte\nC char character\nD double double precision IEEE float\nF float single precision IEEE float\nI int integer\nJ long long integer\nL<fullclassname>; ... an object of the given class\nS short signed short\nZ boolean true or false\n[<field sig> ... array\n}</PRE>\n\nThis method converts this string into a Java type declaration such as\n<code>String[]</code>.", "predict": "Converts a type description to a Java signature.\n\n@param desc the type description\n@param from the starting value\n@return the Java signature"}
{"ID": 1220, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String typeToTyperef(final Class type) { if (!type.isArray()) { if (!type.isPrimitive()) { return 'L' + typeToSignature(type) + ';'; } if (type == int.class) { return \"I\"; } if (type == long.class) { return \"J\"; } if (type == boolean.class) { return \"Z\"; } if (type == double.class) { return \"D\"; } if (type == float.class) { return \"F\"; } if (type == short.class) { return \"S\"; } if (type == void.class) { return \"V\"; } if (type == byte.class) { return \"B\"; } if (type == char.class) { return \"C\"; } } return type.getName(); } \n### Response:", "ground_truth": "Converts type to byteccode type ref.", "predict": "Converts a type to a type ref.\n\n@param type the type\n@return the type ref"}
{"ID": 1221, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Consumers<T> addAll(final Consumer<T>... consumers) { Collections.addAll(consumerList, consumers); return this; } \n### Response:", "ground_truth": "Registers additional consumers.", "predict": "Adds the given consumers to the list of consumers.\n\n@param consumers the consumers to add\n@return the current consumers"}
{"ID": 1222, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") protected Collection<T> createCollection(final int length) { if (collectionType.isInterface()) { if (collectionType == List.class) { if (length > 0) { return new ArrayList<>(length); } else { return new ArrayList<>(); } } if (collectionType == Set.class) { if (length > 0) { return new HashSet<>(length); } else { return new HashSet<>(); } } throw new TypeConversionException(\"Unknown collection: \" + collectionType.getName()); } if (length > 0) { try { Constructor<Collection<T>> ctor = (Constructor<Collection<T>>) collectionType.getConstructor(int.class); return ctor.newInstance(Integer.valueOf(length)); } catch (Exception ex) { // ignore exception } } try { return collectionType.getDeclaredConstructor().newInstance(); } catch (Exception ex) { throw new TypeConversionException(ex); } } \n### Response:", "ground_truth": "Creates new collection of target component type.\nDefault implementation uses reflection to create\nan collection of target type. Override it for better performances.", "predict": "Creates a collection with the specified length.\n\n@param length the length of the collection\n@return the collection"}
{"ID": 1223, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Collection<T> convertToSingleElementCollection(final Object value) { Collection<T> collection = createCollection(0); //noinspection unchecked collection.add((T) value); return collection; } \n### Response:", "ground_truth": "Creates a collection with single element.", "predict": "Converts the given value to a single element collection.\n\n@param value the value to convert\n@return the collection containing the given value"}
{"ID": 1224, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Collection<T> convertValueToCollection(Object value) { if (value instanceof Iterable) { Iterable iterable = (Iterable) value; Collection<T> collection = createCollection(0); for (Object element : iterable) { collection.add(convertType(element)); } return collection; } if (value instanceof CharSequence) { value = CsvUtil.toStringArray(value.toString()); } Class type = value.getClass(); if (type.isArray()) { // convert arrays Class componentType = type.getComponentType(); if (componentType.isPrimitive()) { return convertPrimitiveArrayToCollection(value, componentType); } else { Object[] array = (Object[]) value; Collection<T> result = createCollection(array.length); for (Object a : array) { result.add(convertType(a)); } return result; } } // everything else: return convertToSingleElementCollection(value); } \n### Response:", "ground_truth": "Converts non-collection value to collection.", "predict": "Converts an object to a collection of the specified type.\n\n@param value the value to convert\n@return the converted value"}
{"ID": 1225, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Collection<T> convertCollectionToCollection(final Collection value) { Collection<T> collection = createCollection(value.size()); for (Object v : value) { collection.add(convertType(v)); } return collection; } \n### Response:", "ground_truth": "Converts collection value to target collection.\nEach element is converted to target component type.", "predict": "Converts a collection of objects to a collection of the specified type.\n\n@param value the collection of objects\n@return the collection of objects"}
{"ID": 1226, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"AutoBoxing\") protected Collection<T> convertPrimitiveArrayToCollection(final Object value, final Class primitiveComponentType) { Collection<T> result = null; if (primitiveComponentType == int.class) { int[] array = (int[]) value; result = createCollection(array.length); for (int a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == long.class) { long[] array = (long[]) value; result = createCollection(array.length); for (long a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == float.class) { float[] array = (float[]) value; result = createCollection(array.length); for (float a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == double.class) { double[] array = (double[]) value; result = createCollection(array.length); for (double a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == short.class) { short[] array = (short[]) value; result = createCollection(array.length); for (short a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == byte.class) { byte[] array = (byte[]) value; result = createCollection(array.length); for (byte a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == char.class) { char[] array = (char[]) value; result = createCollection(array.length); for (char a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == boolean.class) { boolean[] array = (boolean[]) value; result = createCollection(array.length); for (boolean a : array) { result.add(convertType(a)); } } return result; } \n### Response:", "ground_truth": "Converts primitive array to target collection.", "predict": "Converts an array of primitive values to a collection of primitive values.\n\n@param value the primitive value\n@param primitiveComponentType the primitive component type\n@return the collection"}
{"ID": 1227, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: final void addLineNumber(final int lineNumber) { if (this.lineNumber == 0) { this.lineNumber = (short) lineNumber; } else { if (otherLineNumbers == null) { otherLineNumbers = new int[LINE_NUMBERS_CAPACITY_INCREMENT]; } int otherLineNumberIndex = ++otherLineNumbers[0]; if (otherLineNumberIndex >= otherLineNumbers.length) { int[] newLineNumbers = new int[otherLineNumbers.length + LINE_NUMBERS_CAPACITY_INCREMENT]; System.arraycopy(otherLineNumbers, 0, newLineNumbers, 0, otherLineNumbers.length); otherLineNumbers = newLineNumbers; } otherLineNumbers[otherLineNumberIndex] = lineNumber; } } \n### Response:", "ground_truth": "Adds a source line number corresponding to this label.\n\n@param lineNumber a source line number (which should be strictly positive).", "predict": "Adds the line number to the internal list of line numbers.\n\n@param lineNumber the line number to add"}
{"ID": 1228, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: final void accept(final MethodVisitor methodVisitor, final boolean visitLineNumbers) { methodVisitor.visitLabel(this); if (visitLineNumbers && lineNumber != 0) { methodVisitor.visitLineNumber(lineNumber & 0xFFFF, this); if (otherLineNumbers != null) { for (int i = 1; i <= otherLineNumbers[0]; ++i) { methodVisitor.visitLineNumber(otherLineNumbers[i], this); } } } } \n### Response:", "ground_truth": "Makes the given visitor visit this label and its source line numbers, if applicable.\n\n@param methodVisitor a method visitor.\n@param visitLineNumbers whether to visit of the label's source line numbers, if any.", "predict": "Invokes the visitor on this method.\n\n@param methodVisitor the visitor to invoke.\n@param visitLineNumbers if true, the visitor will also visit the line number."}
{"ID": 1229, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: final void put( final ByteVector code, final int sourceInsnBytecodeOffset, final boolean wideReference) { if ((flags & FLAG_RESOLVED) == 0) { if (wideReference) { addForwardReference(sourceInsnBytecodeOffset, FORWARD_REFERENCE_TYPE_WIDE, code.length); code.putInt(-1); } else { addForwardReference(sourceInsnBytecodeOffset, FORWARD_REFERENCE_TYPE_SHORT, code.length); code.putShort(-1); } } else { if (wideReference) { code.putInt(bytecodeOffset - sourceInsnBytecodeOffset); } else { code.putShort(bytecodeOffset - sourceInsnBytecodeOffset); } } } \n### Response:", "ground_truth": "Puts a reference to this label in the bytecode of a method. If the bytecode offset of the label\nis known, the relative bytecode offset between the label and the instruction referencing it is\ncomputed and written directly. Otherwise, a null relative offset is written and a new forward\nreference is declared for this label.\n\n@param code the bytecode of the method. This is where the reference is appended.\n@param sourceInsnBytecodeOffset the bytecode offset of the instruction that contains the\nreference to be appended.\n@param wideReference whether the reference must be stored in 4 bytes (instead of 2 bytes).", "predict": "Adds a forward reference to the given code.\n\n@param code the code to add a forward reference to\n@param sourceInsnBytecodeOffset the offset of the instruction to add the forward reference to\n@param wideReference if true, the code is a wide reference, otherwise it is a short reference"}
{"ID": 1230, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addForwardReference( final int sourceInsnBytecodeOffset, final int referenceType, final int referenceHandle) { if (forwardReferences == null) { forwardReferences = new int[FORWARD_REFERENCES_CAPACITY_INCREMENT]; } int lastElementIndex = forwardReferences[0]; if (lastElementIndex + 2 >= forwardReferences.length) { int[] newValues = new int[forwardReferences.length + FORWARD_REFERENCES_CAPACITY_INCREMENT]; System.arraycopy(forwardReferences, 0, newValues, 0, forwardReferences.length); forwardReferences = newValues; } forwardReferences[++lastElementIndex] = sourceInsnBytecodeOffset; forwardReferences[++lastElementIndex] = referenceType | referenceHandle; forwardReferences[0] = lastElementIndex; } \n### Response:", "ground_truth": "Adds a forward reference to this label. This method must be called only for a true forward\nreference, i.e. only if this label is not resolved yet. For backward references, the relative\nbytecode offset of the reference can be, and must be, computed and stored directly.\n\n@param sourceInsnBytecodeOffset the bytecode offset of the instruction that contains the\nreference stored at referenceHandle.\n@param referenceType either {@link #FORWARD_REFERENCE_TYPE_SHORT} or {@link\n#FORWARD_REFERENCE_TYPE_WIDE}.\n@param referenceHandle the offset in the bytecode where the forward reference value must be\nstored.", "predict": "Adds a forward reference.\n\n@param sourceInsnBytecodeOffset The bytecode offset of the instruction to be added.\n@param referenceType The type of reference to be added.\n@param referenceHandle The handle of the reference."}
{"ID": 1231, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: final boolean resolve(final byte[] code, final int bytecodeOffset) { this.flags |= FLAG_RESOLVED; this.bytecodeOffset = bytecodeOffset; if (forwardReferences == null) { return false; } boolean hasAsmInstructions = false; for (int i = forwardReferences[0]; i > 0; i -= 2) { final int sourceInsnBytecodeOffset = forwardReferences[i - 1]; final int reference = forwardReferences[i]; final int relativeOffset = bytecodeOffset - sourceInsnBytecodeOffset; int handle = reference & FORWARD_REFERENCE_HANDLE_MASK; if ((reference & FORWARD_REFERENCE_TYPE_MASK) == FORWARD_REFERENCE_TYPE_SHORT) { if (relativeOffset < Short.MIN_VALUE || relativeOffset > Short.MAX_VALUE) { // Change the opcode of the jump instruction, in order to be able to find it later in // ClassReader. These ASM specific opcodes are similar to jump instruction opcodes, except // that the 2 bytes offset is unsigned (and can therefore represent values from 0 to // 65535, which is sufficient since the size of a method is limited to 65535 bytes). int opcode = code[sourceInsnBytecodeOffset] & 0xFF; if (opcode < Opcodes.IFNULL) { // Change IFEQ ... JSR to ASM_IFEQ ... ASM_JSR. code[sourceInsnBytecodeOffset] = (byte) (opcode + Constants.ASM_OPCODE_DELTA); } else { // Change IFNULL and IFNONNULL to ASM_IFNULL and ASM_IFNONNULL. code[sourceInsnBytecodeOffset] = (byte) (opcode + Constants.ASM_IFNULL_OPCODE_DELTA); } hasAsmInstructions = true; } code[handle++] = (byte) (relativeOffset >>> 8); code[handle] = (byte) relativeOffset; } else { code[handle++] = (byte) (relativeOffset >>> 24); code[handle++] = (byte) (relativeOffset >>> 16); code[handle++] = (byte) (relativeOffset >>> 8); code[handle] = (byte) relativeOffset; } } return hasAsmInstructions; } \n### Response:", "ground_truth": "Sets the bytecode offset of this label to the given value and resolves the forward references\nto this label, if any. This method must be called when this label is added to the bytecode of\nthe method, i.e. when its bytecode offset becomes known. This method fills in the blanks that\nwhere left in the bytecode by each forward reference previously added to this label.\n\n@param code the bytecode of the method.\n@param bytecodeOffset the bytecode offset of this label.\n@return {@literal true} if a blank that was left for this label was too small to store the\noffset. In such a case the corresponding jump instruction is replaced with an equivalent\nASM specific instruction using an unsigned two bytes offset. These ASM specific\ninstructions are later replaced with standard bytecode instructions with wider offsets (4\nbytes instead of 2), in ClassReader.", "predict": "Resolves the given code and returns true if it contains ASM instructions.\n\n@param code\n@param bytecodeOffset\n@return"}
{"ID": 1232, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: final void markSubroutine(final short subroutineId) { // Data flow algorithm: put this basic block in a list of blocks to process (which are blocks // belonging to subroutine subroutineId) and, while there are blocks to process, remove one from // the list, mark it as belonging to the subroutine, and add its successor basic blocks in the // control flow graph to the list of blocks to process (if not already done). Label listOfBlocksToProcess = this; listOfBlocksToProcess.nextListElement = EMPTY_LIST; while (listOfBlocksToProcess != EMPTY_LIST) { // Remove a basic block from the list of blocks to process. Label basicBlock = listOfBlocksToProcess; listOfBlocksToProcess = listOfBlocksToProcess.nextListElement; basicBlock.nextListElement = null; // If it is not already marked as belonging to a subroutine, mark it as belonging to // subroutineId and add its successors to the list of blocks to process (unless already done). if (basicBlock.subroutineId == 0) { basicBlock.subroutineId = subroutineId; listOfBlocksToProcess = basicBlock.pushSuccessors(listOfBlocksToProcess); } } } \n### Response:", "ground_truth": "Finds the basic blocks that belong to the subroutine starting with the basic block\ncorresponding to this label, and marks these blocks as belonging to this subroutine. This\nmethod follows the control flow graph to find all the blocks that are reachable from the\ncurrent basic block WITHOUT following any jsr target.\n\n<p>Note: a precondition and postcondition of this method is that all labels must have a null\n{@link #nextListElement}.\n\n@param subroutineId the id of the subroutine starting with the basic block corresponding to\nthis label.", "predict": "Mark a basic block as belonging to a subroutine.\n\n@param subroutineId the id of the subroutine to which the block belongs"}
{"ID": 1233, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: final void addSubroutineRetSuccessors(final Label subroutineCaller) { // Data flow algorithm: put this basic block in a list blocks to process (which are blocks // belonging to a subroutine starting with this label) and, while there are blocks to process, // remove one from the list, put it in a list of blocks that have been processed, add a return // edge to the successor of subroutineCaller if applicable, and add its successor basic blocks // in the control flow graph to the list of blocks to process (if not already done). Label listOfProcessedBlocks = EMPTY_LIST; Label listOfBlocksToProcess = this; listOfBlocksToProcess.nextListElement = EMPTY_LIST; while (listOfBlocksToProcess != EMPTY_LIST) { // Move a basic block from the list of blocks to process to the list of processed blocks. Label basicBlock = listOfBlocksToProcess; listOfBlocksToProcess = basicBlock.nextListElement; basicBlock.nextListElement = listOfProcessedBlocks; listOfProcessedBlocks = basicBlock; // Add an edge from this block to the successor of the caller basic block, if this block is // the end of a subroutine and if this block and subroutineCaller do not belong to the same // subroutine. if ((basicBlock.flags & FLAG_SUBROUTINE_END) != 0 && basicBlock.subroutineId != subroutineCaller.subroutineId) { basicBlock.outgoingEdges = new Edge( basicBlock.outputStackSize, // By construction, the first outgoing edge of a basic block that ends with a jsr // instruction leads to the jsr continuation block, i.e. where execution continues // when ret is called (see {@link #FLAG_SUBROUTINE_CALLER}). subroutineCaller.outgoingEdges.successor, basicBlock.outgoingEdges); } // Add its successors to the list of blocks to process. Note that {@link #pushSuccessors} does // not push basic blocks which are already in a list. Here this means either in the list of // blocks to process, or in the list of already processed blocks. This second list is // important to make sure we don't reprocess an already processed block. listOfBlocksToProcess = basicBlock.pushSuccessors(listOfBlocksToProcess); } // Reset the {@link #nextListElement} of all the basic blocks that have been processed to null, // so that this method can be called again with a different subroutine or subroutine caller. while (listOfProcessedBlocks != EMPTY_LIST) { Label newListOfProcessedBlocks = listOfProcessedBlocks.nextListElement; listOfProcessedBlocks.nextListElement = null; listOfProcessedBlocks = newListOfProcessedBlocks; } } \n### Response:", "ground_truth": "Finds the basic blocks that end a subroutine starting with the basic block corresponding to\nthis label and, for each one of them, adds an outgoing edge to the basic block following the\ngiven subroutine call. In other words, completes the control flow graph by adding the edges\ncorresponding to the return from this subroutine, when called from the given caller basic\nblock.\n\n<p>Note: a precondition and postcondition of this method is that all labels must have a null\n{@link #nextListElement}.\n\n@param subroutineCaller a basic block that ends with a jsr to the basic block corresponding to\nthis label. This label is supposed to correspond to the start of a subroutine.", "predict": "Adds the blocks that are to be processed by the caller to the list of blocks to process.\n\n@param subroutineCaller the subroutine that is called by the caller"}
{"ID": 1234, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected int[] compareDigits(final String str1, int ndx1, final String str2, int ndx2) { // iterate all digits in the first string int zeroCount1 = 0; while (charAt(str1, ndx1) == '0') { zeroCount1++; ndx1++; } int len1 = 0; while (true) { final char char1 = charAt(str1, ndx1); final boolean isDigitChar1 = CharUtil.isDigit(char1); if (!isDigitChar1) { break; } len1++; ndx1++; } // iterate all digits in the second string and compare with the first int zeroCount2 = 0; while (charAt(str2, ndx2) == '0') { zeroCount2++; ndx2++; } int len2 = 0; int ndx1_new = ndx1 - len1; int equalNumbers = 0; while (true) { final char char2 = charAt(str2, ndx2); final boolean isDigitChar2 = CharUtil.isDigit(char2); if (!isDigitChar2) { break; } if (equalNumbers == 0 && (ndx1_new < ndx1)) { equalNumbers = charAt(str1, ndx1_new++) - char2; } len2++; ndx2++; } // compare if (len1 != len2) { // numbers are not equals size return new int[] {len1 - len2}; } if (equalNumbers != 0) { return new int[] {equalNumbers}; } // numbers are equal, but number of zeros is different return new int[] {0, zeroCount1 - zeroCount2, ndx1, ndx2}; } \n### Response:", "ground_truth": "Compare digits at certain position in two strings.\nThe longest run of digits wins. That aside, the greatest\nvalue wins.\n@return if numbers are different, only 1 element is returned.", "predict": "Compare two strings with digits.\n\n@param str1 first string\n@param ndx1 first ndx\n@param str2 second string\n@param ndx2 second ndx\n@return int[]"}
{"ID": 1235, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private char fixAccent(final char c) { for (int i = 0; i < ACCENT_CHARS.length; i+=2) { final char accentChar = ACCENT_CHARS[i]; if (accentChar == c) { return ACCENT_CHARS[i + 1]; } } return c; } \n### Response:", "ground_truth": "Fixes accent char.", "predict": "Resolve accent characters.\n\n@param c the character to resolve\n@return the resolved character"}
{"ID": 1236, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ByteVector putByte(final int byteValue) { int currentLength = length; if (currentLength + 1 > data.length) { enlarge(1); } data[currentLength++] = (byte) byteValue; length = currentLength; return this; } \n### Response:", "ground_truth": "Puts a byte into this byte vector. The byte vector is automatically enlarged if necessary.\n\n@param byteValue a byte.\n@return this byte vector.", "predict": "Puts a byte into the vector.\n\n@param byteValue the byte to put into the vector\n@return the current vector"}
{"ID": 1237, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: final ByteVector put11(final int byteValue1, final int byteValue2) { int currentLength = length; if (currentLength + 2 > data.length) { enlarge(2); } byte[] currentData = data; currentData[currentLength++] = (byte) byteValue1; currentData[currentLength++] = (byte) byteValue2; length = currentLength; return this; } \n### Response:", "ground_truth": "Puts two bytes into this byte vector. The byte vector is automatically enlarged if necessary.\n\n@param byteValue1 a byte.\n@param byteValue2 another byte.\n@return this byte vector.", "predict": "Puts two bytes into the vector.\n\n@param byteValue1 the first byte\n@param byteValue2 the second byte\n@return the vector"}
{"ID": 1238, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ByteVector putShort(final int shortValue) { int currentLength = length; if (currentLength + 2 > data.length) { enlarge(2); } byte[] currentData = data; currentData[currentLength++] = (byte) (shortValue >>> 8); currentData[currentLength++] = (byte) shortValue; length = currentLength; return this; } \n### Response:", "ground_truth": "Puts a short into this byte vector. The byte vector is automatically enlarged if necessary.\n\n@param shortValue a short.\n@return this byte vector.", "predict": "Put a short value into the vector.\n\n@param shortValue the short value to put into the vector\n@return the current vector"}
{"ID": 1239, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: final ByteVector put12(final int byteValue, final int shortValue) { int currentLength = length; if (currentLength + 3 > data.length) { enlarge(3); } byte[] currentData = data; currentData[currentLength++] = (byte) byteValue; currentData[currentLength++] = (byte) (shortValue >>> 8); currentData[currentLength++] = (byte) shortValue; length = currentLength; return this; } \n### Response:", "ground_truth": "Puts a byte and a short into this byte vector. The byte vector is automatically enlarged if\nnecessary.\n\n@param byteValue a byte.\n@param shortValue a short.\n@return this byte vector.", "predict": "Puts a byte and a short into the vector.\n\n@param byteValue the byte value\n@param shortValue the short value\n@return the vector"}
{"ID": 1240, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: final ByteVector put112(final int byteValue1, final int byteValue2, final int shortValue) { int currentLength = length; if (currentLength + 4 > data.length) { enlarge(4); } byte[] currentData = data; currentData[currentLength++] = (byte) byteValue1; currentData[currentLength++] = (byte) byteValue2; currentData[currentLength++] = (byte) (shortValue >>> 8); currentData[currentLength++] = (byte) shortValue; length = currentLength; return this; } \n### Response:", "ground_truth": "Puts two bytes and a short into this byte vector. The byte vector is automatically enlarged if\nnecessary.\n\n@param byteValue1 a byte.\n@param byteValue2 another byte.\n@param shortValue a short.\n@return this byte vector.", "predict": "Puts two bytes into the vector.\n\n@param byteValue1 the first byte\n@param byteValue2 the second byte\n@param shortValue the short value\n@return the vector"}
{"ID": 1241, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ByteVector putInt(final int intValue) { int currentLength = length; if (currentLength + 4 > data.length) { enlarge(4); } byte[] currentData = data; currentData[currentLength++] = (byte) (intValue >>> 24); currentData[currentLength++] = (byte) (intValue >>> 16); currentData[currentLength++] = (byte) (intValue >>> 8); currentData[currentLength++] = (byte) intValue; length = currentLength; return this; } \n### Response:", "ground_truth": "Puts an int into this byte vector. The byte vector is automatically enlarged if necessary.\n\n@param intValue an int.\n@return this byte vector.", "predict": "Puts an int into the vector.\n\n@param intValue the int to put\n@return the vector"}
{"ID": 1242, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: final ByteVector put122(final int byteValue, final int shortValue1, final int shortValue2) { int currentLength = length; if (currentLength + 5 > data.length) { enlarge(5); } byte[] currentData = data; currentData[currentLength++] = (byte) byteValue; currentData[currentLength++] = (byte) (shortValue1 >>> 8); currentData[currentLength++] = (byte) shortValue1; currentData[currentLength++] = (byte) (shortValue2 >>> 8); currentData[currentLength++] = (byte) shortValue2; length = currentLength; return this; } \n### Response:", "ground_truth": "Puts one byte and two shorts into this byte vector. The byte vector is automatically enlarged\nif necessary.\n\n@param byteValue a byte.\n@param shortValue1 a short.\n@param shortValue2 another short.\n@return this byte vector.", "predict": "Puts two short values into the vector.\n\n@param byteValue the byte value\n@param shortValue1 the short value 1\n@param shortValue2 the short value 2\n@return the byte vector"}
{"ID": 1243, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ByteVector putLong(final long longValue) { int currentLength = length; if (currentLength + 8 > data.length) { enlarge(8); } byte[] currentData = data; int intValue = (int) (longValue >>> 32); currentData[currentLength++] = (byte) (intValue >>> 24); currentData[currentLength++] = (byte) (intValue >>> 16); currentData[currentLength++] = (byte) (intValue >>> 8); currentData[currentLength++] = (byte) intValue; intValue = (int) longValue; currentData[currentLength++] = (byte) (intValue >>> 24); currentData[currentLength++] = (byte) (intValue >>> 16); currentData[currentLength++] = (byte) (intValue >>> 8); currentData[currentLength++] = (byte) intValue; length = currentLength; return this; } \n### Response:", "ground_truth": "Puts a long into this byte vector. The byte vector is automatically enlarged if necessary.\n\n@param longValue a long.\n@return this byte vector.", "predict": "Puts a long value into the byte vector.\n\n@param longValue the long value to be put into the byte vector\n@return the byte vector"}
{"ID": 1244, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ByteVector putByteArray( final byte[] byteArrayValue, final int byteOffset, final int byteLength) { if (length + byteLength > data.length) { enlarge(byteLength); } if (byteArrayValue != null) { System.arraycopy(byteArrayValue, byteOffset, data, length, byteLength); } length += byteLength; return this; } \n### Response:", "ground_truth": "Puts an array of bytes into this byte vector. The byte vector is automatically enlarged if\nnecessary.\n\n@param byteArrayValue an array of bytes. May be {@literal null} to put {@code byteLength} null\nbytes into this byte vector.\n@param byteOffset index of the first byte of byteArrayValue that must be copied.\n@param byteLength number of bytes of byteArrayValue that must be copied.\n@return this byte vector.", "predict": "Puts the given byte array into the byte vector.\n\n@param byteArrayValue the byte array to be added\n@param byteOffset the offset of the byte array to be added\n@param byteLength the length of the byte array to be added\n@return this"}
{"ID": 1245, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void enlarge(final int size) { int doubleCapacity = 2 * data.length; int minimalCapacity = length + size; byte[] newData = new byte[doubleCapacity > minimalCapacity ? doubleCapacity : minimalCapacity]; System.arraycopy(data, 0, newData, 0, length); data = newData; } \n### Response:", "ground_truth": "Enlarges this byte vector so that it can receive 'size' more bytes.\n\n@param size number of additional bytes that this byte vector should be able to receive.", "predict": "Copies the data to a new array with a larger capacity.\n\n@param size the new capacity"}
{"ID": 1246, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected T authenticateUserViaHttpSession(final ActionRequest actionRequest) { final HttpServletRequest servletRequest = actionRequest.getHttpServletRequest(); final UserSession<T> userSession = UserSession.get(servletRequest); if (userSession == null) { return null; } final T authToken = userSession.getAuthToken(); if (authToken == null) { return null; } // granted final T newAuthToken = userAuth().rotateToken(authToken); if (newAuthToken != authToken) { final UserSession<T> newUserSesion = new UserSession<>(newAuthToken, userAuth().tokenValue(newAuthToken)); newUserSesion.start(servletRequest, actionRequest.getHttpServletResponse()); } return newAuthToken; } \n### Response:", "ground_truth": "Tries to authenticate user via HTTP session. Returns the token if user is authenticated.\nReturned token may be rotated.", "predict": "Authenticate user via http session.\n\n@param actionRequest the action request\n@return the user token"}
{"ID": 1247, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected T authenticateUserViaToken(final ActionRequest actionRequest) { final HttpServletRequest servletRequest = actionRequest.getHttpServletRequest(); // then try the auth token final String token = ServletUtil.resolveAuthBearerToken(servletRequest); if (token == null) { return null; } final T authToken = userAuth().validateToken(token); if (authToken == null) { return null; } // granted final T newAuthToken = userAuth().rotateToken(authToken); actionRequest.getHttpServletResponse().setHeader(\"Authentication\", \"Bearer: \" + userAuth().tokenValue(newAuthToken)); return newAuthToken; } \n### Response:", "ground_truth": "Tries to authenticate user via token. Returns the token if user is authenticated.\nReturned token may be rotated.", "predict": "Authenticates the user via the token.\n\n@param actionRequest the request to be authenticated\n@return the token or null if the user is not authenticated"}
{"ID": 1248, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected T authenticateUserViaBasicAuth(final ActionRequest actionRequest) { final HttpServletRequest servletRequest = actionRequest.getHttpServletRequest(); final String username = ServletUtil.resolveAuthUsername(servletRequest); if (username == null) { return null; } final String password = ServletUtil.resolveAuthPassword(servletRequest); final T authToken = userAuth().login(username, password); if (authToken == null) { return null; } return authToken; } \n### Response:", "ground_truth": "Tires to authenticate user via the basic authentication. Returns the token if user is authenticated.", "predict": "Authenticate user via basic auth.\n\n@param actionRequest the action request\n@return the auth token"}
{"ID": 1249, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String findDefaultMessage(final Locale locale, final String key) { String indexedKey = calcIndexKey(key); String msg = getMessage(fallbackBundlename, locale, key, indexedKey); if (msg != null) { return msg; } for (String bname : defaultBundles) { msg = getMessage(bname, locale, key, indexedKey); if (msg != null) { return msg; } } return null; } \n### Response:", "ground_truth": "Finds message in default bundles only, starting from fallback bundlename.", "predict": "Find the default message for the given locale and key.\n\n@param locale the locale\n@param key the key\n@return the default message or null if none"}
{"ID": 1250, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected ResourceBundle getBundle(final String bundleName, final Locale locale, final ClassLoader classLoader) { return ResourceBundle.getBundle(bundleName, locale, classLoader); } \n### Response:", "ground_truth": "Returns specified bundle. Invoked every time if cache is disabled.\nInput arguments are always valid.", "predict": "Get the bundle with the given name and locale.\n\n@param bundleName the bundle name\n@param locale the locale\n@param classLoader the class loader\n@return the bundle"}
{"ID": 1251, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected K get(final K[] array, final int index) { return (K) Array.get(array, index); } \n### Response:", "ground_truth": "Returns array's element at given index.", "predict": "Get the value at the specified index in the specified array.\n\n@param array the array to get the value from\n@param index the index of the value to get\n@return the value at the specified index in the specified array"}
{"ID": 1252, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected <E, ID> void setEntityId(final DbEntityDescriptor<E> ded, final E entity, final ID newIdValue) { ded.setIdValue(entity, newIdValue); } \n### Response:", "ground_truth": "Sets new ID value for entity.", "predict": "Sets the entity id.\n\n@param ded\nthe ded\n@param entity\nthe entity\n@param newIdValue\nthe new id value"}
{"ID": 1253, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void save(final Object entity) { final DbQuery q = query(dbOom.entities().insert(entity)); q.autoClose().executeUpdate(); } \n### Response:", "ground_truth": "Simply inserts object into the database.", "predict": "Saves the entity to the database.\n\n@param entity the entity to save"}
{"ID": 1254, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void update(final Object entity) { query(dbOom.entities().updateAll(entity)).autoClose().executeUpdate(); } \n### Response:", "ground_truth": "Updates single entity.", "predict": "Updates the given entity.\n\n@param entity the entity to update"}
{"ID": 1255, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <E> E updateProperty(final E entity, final String name, final Object newValue) { query(dbOom.entities().updateColumn(entity, name, newValue)).autoClose().executeUpdate(); BeanUtil.declared.setProperty(entity, name, newValue); return entity; } \n### Response:", "ground_truth": "Updates single property in database and in the bean.", "predict": "Updates a property of an entity.\n\n@param entity the entity\n@param name the property name\n@param newValue the new value\n@return the updated entity"}
{"ID": 1256, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <E> E updateProperty(final E entity, final String name) { Object value = BeanUtil.declared.getProperty(entity, name); query(dbOom.entities().updateColumn(entity, name, value)).autoClose().executeUpdate(); return entity; } \n### Response:", "ground_truth": "Updates property in the database by storing the current property value.", "predict": "Updates a property of an entity.\n\n@param entity the entity\n@param name the property name\n@return the updated entity"}
{"ID": 1257, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <E, ID> E findById(final Class<E> entityType, final ID id) { return query(dbOom.entities().findById(entityType, id)).autoClose().find(entityType); } \n### Response:", "ground_truth": "Finds single entity by its id.", "predict": "Finds an entity by its id.\n\n@param entityType the entity type\n@param id the id\n@return the entity"}
{"ID": 1258, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <E> E findOneByProperty(final Class<E> entityType, final String name, final Object value) { return query(dbOom.entities().findByColumn(entityType, name, value)).autoClose().find(entityType); } \n### Response:", "ground_truth": "Finds single entity by matching property.", "predict": "Finds an entity by its property.\n\n@param <E> the type of the entity\n@param entityType the type of the entity\n@param name the property name\n@param value the property value\n@return the entity"}
{"ID": 1259, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"unchecked\"}) public <E> E findOne(final Object criteria) { return (E) query(dbOom.entities().find(criteria)).autoClose().find(criteria.getClass()); } \n### Response:", "ground_truth": "Finds one entity for given criteria.", "predict": "Finds the first matching entity.\n\n@param criteria criteria\n@return the first matching entity"}
{"ID": 1260, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <ID> void deleteById(final Class entityType, final ID id) { query(dbOom.entities().deleteById(entityType, id)).autoClose().executeUpdate(); } \n### Response:", "ground_truth": "Deleted single entity by its id.", "predict": "Deletes an entity by its id.\n\n@param entityType entity type\n@param id entity id\n@param <ID> entity id type"}
{"ID": 1261, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void deleteById(final Object entity) { if (entity != null) { int result = query(dbOom.entities().deleteById(entity)).autoClose().executeUpdate(); if (result != 0) { // now reset the ID value Class type = entity.getClass(); DbEntityDescriptor ded = dbOom.entityManager().lookupType(type); setEntityId(ded, entity, 0); } } } \n### Response:", "ground_truth": "Delete single object by its id. Resets ID value.", "predict": "Deletes the given entity.\n\n@param entity the entity to delete"}
{"ID": 1262, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public long count(final Class entityType) { return query(dbOom.entities().count(entityType)).autoClose().executeCount(); } \n### Response:", "ground_truth": "Counts number of all entities.", "predict": "Get the count of the specified entity type.\n\n@param entityType the entity type\n@return the count"}
{"ID": 1263, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <ID> void increaseProperty(final Class entityType, final ID id, final String name, final Number delta) { query(dbOom.entities().increaseColumn(entityType, id, name, delta, true)).autoClose().executeUpdate(); } \n### Response:", "ground_truth": "Increases a property.", "predict": "Increases a property value.\n\n@param entityType\n@param id\n@param name\n@param delta\n@param <ID>"}
{"ID": 1264, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <ID> void decreaseProperty(final Class entityType, final ID id, final String name, final Number delta) { query(dbOom.entities().increaseColumn(entityType, id, name, delta, false)).autoClose().executeUpdate(); } \n### Response:", "ground_truth": "Decreases a property.", "predict": "Decreases the value of a property.\n\n@param entityType\nThe entity type of the property.\n@param id\nThe id of the property.\n@param name\nThe name of the property.\n@param delta\nThe decrease in the value of the property."}
{"ID": 1265, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <E> List<E> findRelated(final Class<E> target, final Object source) { return query(dbOom.entities().findForeign(target, source)).autoClose().list(target); } \n### Response:", "ground_truth": "Finds related entity.", "predict": "Find related entities.\n\n@param <E> the type of entity\n@param target the target class\n@param source the source object\n@return the related entities"}
{"ID": 1266, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <E> List<E> listAll(final Class<E> target) { return query(dbOom.entities().from(target)).autoClose().list(target); } \n### Response:", "ground_truth": "List all entities.", "predict": "List all entities of the given type\n\n@param target the type of entities to list\n@return the list of entities"}
{"ID": 1267, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void clear() { entries = null; Iterator<String> keys = getAttributeNames(); while (keys.hasNext()) { removeAttribute(keys.next()); } } \n### Response:", "ground_truth": "Removes all attributes from the request as well as clears entries in this map.", "predict": "Removes all the attributes from the list."}
{"ID": 1268, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Set<Entry<String, Object>> entrySet() { if (entries == null) { entries = new HashSet<>(); Iterator<String> iterator = getAttributeNames(); while (iterator.hasNext()) { final String key = iterator.next(); final Object value = getAttribute(key); entries.add(new Entry<String, Object>() { @Override public boolean equals(final Object obj) { if (obj == null) { return false; } if (this.getClass() != obj.getClass()) { return false; } Entry entry = (Entry) obj; return ((key == null) ? (entry.getKey() == null) : key.equals(entry.getKey())) && ((value == null) ? (entry.getValue() == null) : value.equals(entry.getValue())); } @Override public int hashCode() { return ((key == null) ? 0 : key.hashCode()) ^ ((value == null) ? 0 : value.hashCode()); } @Override public String getKey() { return key; } @Override public Object getValue() { return value; } @Override public Object setValue(final Object obj) { setAttribute(key, obj); return value; } }); } } return entries; } \n### Response:", "ground_truth": "Returns a Set of attributes from the http request.", "predict": "Returns a set of all the entries in this AttributeSet.\n\n@return a set of all the entries in this AttributeSet."}
{"ID": 1269, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Object put(final String key, final Object value) { entries = null; Object previous = get(key); setAttribute(key, value); return previous; } \n### Response:", "ground_truth": "Saves an attribute in the request.", "predict": "Overrides the default put method to add a new entry to the cache.\n\n@param key the key of the entry to add\n@param value the value of the entry to add\n@return the previous entry"}
{"ID": 1270, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Object remove(final Object key) { entries = null; Object value = get(key); removeAttribute(key.toString()); return value; } \n### Response:", "ground_truth": "Removes the specified request attribute.", "predict": "Removes the specified key from the map.\n\n@param key the key to remove\n@return the value of the specified key, or null if the key is not present"}
{"ID": 1271, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"ThrowCaughtLocally\"}) public static StackTraceElement[] getCurrentStackTrace() { StackTraceElement[] ste = new Exception().getStackTrace(); if (ste.length > 1) { StackTraceElement[] result = new StackTraceElement[ste.length - 1]; System.arraycopy(ste, 1, result, 0, ste.length - 1); return result; } else { return ste; } } \n### Response:", "ground_truth": "Returns current stack trace in form of array of stack trace elements.\nFirst stack trace element is removed.\nSince an exception is thrown internally, this method is slow.", "predict": "Get the current stack trace.\n\n@return the current stack trace"}
{"ID": 1272, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static StackTraceElement[] getStackTrace(final Throwable t, final String[] allow, final String[] deny) { StackTraceElement[] st = t.getStackTrace(); ArrayList<StackTraceElement> result = new ArrayList<>(st.length); elementLoop: for (StackTraceElement element : st) { String className = element.getClassName(); if (allow != null) { boolean validElemenet = false; for (String filter : allow) { if (className.contains(filter)) { validElemenet = true; break; } } if (!validElemenet) { continue; } } if (deny != null) { for (String filter : deny) { if (className.contains(filter)) { continue elementLoop; } } } result.add(element); } st = new StackTraceElement[result.size()]; return result.toArray(st); } \n### Response:", "ground_truth": "Returns stack trace filtered by class names.", "predict": "Get the stack trace of a given exception.\n\n@param t the exception\n@param allow the allowed exceptions\n@param deny the allowed exceptions\n@return the stack trace of the given exception"}
{"ID": 1273, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static StackTraceElement[][] getStackTraceChain(Throwable t, final String[] allow, final String[] deny) { ArrayList<StackTraceElement[]> result = new ArrayList<>(); while (t != null) { StackTraceElement[] stack = getStackTrace(t, allow, deny); result.add(stack); t = t.getCause(); } StackTraceElement[][] allStacks = new StackTraceElement[result.size()][]; for (int i = 0; i < allStacks.length; i++) { allStacks[i] = result.get(i); } return allStacks; } \n### Response:", "ground_truth": "Returns stack trace chain filtered by class names.", "predict": "Get the stack trace chain for a given throwable.\n\n@param t the throwable\n@param allow the allowed exceptions\n@param deny the denied exceptions\n@return the stack trace chain"}
{"ID": 1274, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Throwable[] getExceptionChain(Throwable throwable) { ArrayList<Throwable> list = new ArrayList<>(); list.add(throwable); while ((throwable = throwable.getCause()) != null) { list.add(throwable); } Throwable[] result = new Throwable[list.size()]; return list.toArray(result); } \n### Response:", "ground_truth": "Returns exception chain starting from top up to root cause.", "predict": "Returns a chain of all the throwable objects that are thrown by the given throwable.\n\n@param throwable the throwable to get the chain of\n@return the chain of all the throwable objects that are thrown by the given throwable"}
{"ID": 1275, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String exceptionStackTraceToString(final Throwable t) { StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw, true); t.printStackTrace(pw); StreamUtil.close(pw); StreamUtil.close(sw); return sw.toString(); } \n### Response:", "ground_truth": "Prints stack trace into a String.", "predict": "Converts the stack trace to a string.\n\n@param t the exception\n@return the string"}
{"ID": 1276, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String exceptionChainToString(Throwable t) { StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw, true); while (t != null) { t.printStackTrace(pw); t = t.getCause(); } StreamUtil.close(pw); StreamUtil.close(sw); return sw.toString(); } \n### Response:", "ground_truth": "Prints full exception stack trace, from top to root cause, into a String.", "predict": "Converts a Throwable to a String."}
{"ID": 1277, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String buildMessage(final String message, Throwable cause) { if (cause != null) { cause = getRootCause(cause); StringBuilder buf = new StringBuilder(); if (message != null) { buf.append(message).append(\"; \"); } buf.append(\"<--- \").append(cause); return buf.toString(); } else { return message; } } \n### Response:", "ground_truth": "Build a message for the given base message and its cause.", "predict": "Build a message with the given cause.\n\n@param message the message to be added to the message string\n@param cause the cause of the message\n@return the message string"}
{"ID": 1278, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Throwable unwrapThrowable(final Throwable wrappedThrowable) { Throwable unwrapped = wrappedThrowable; while (true) { if (unwrapped instanceof InvocationTargetException) { unwrapped = ((InvocationTargetException) unwrapped).getTargetException(); } else if (unwrapped instanceof UndeclaredThrowableException) { unwrapped = ((UndeclaredThrowableException) unwrapped).getUndeclaredThrowable(); } else { return unwrapped; } } } \n### Response:", "ground_truth": "Unwraps invocation and undeclared exceptions to real cause.", "predict": "unwraps a wrapped Throwable.\n\n@param wrappedThrowable the wrapped Throwable\n@return the wrapped Throwable"}
{"ID": 1279, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void registerAsConsumer(final ClassScanner classScanner) { classScanner.registerEntryConsumer(classPathEntry -> { final String entryName = classPathEntry.name(); if (entryName.endsWith(actionClassSuffix)) { try { acceptActionClass(classPathEntry.loadClass()); } catch (Exception ex) { log.debug(\"Invalid Madvoc action, ignoring: \" + entryName); } } else if (classPathEntry.isTypeSignatureInUse(MADVOC_COMPONENT_ANNOTATION)) { try { acceptMadvocComponentClass(classPathEntry.loadClass()); } catch (Exception ex) { log.debug(\"Invalid Madvoc component ignoring: {}\" + entryName); } } }); } \n### Response:", "ground_truth": "Parses class name that matches madvoc-related names.", "predict": "Registers a consumer for the given class path entry.\n\n@param classScanner the class scanner to register the entry with"}
{"ID": 1280, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void acceptMadvocComponentClass(final Class componentClass) { if (componentClass == null) { return; } if (!checkClass(componentClass)) { return; } madvocComponents.add(() -> madvocContainer.registerComponent(componentClass)); } \n### Response:", "ground_truth": "Registers new Madvoc component.", "predict": "Callback method to register a component class.\n\n@param componentClass the component class"}
{"ID": 1281, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ClassLoader getSystemClassLoader() { if (System.getSecurityManager() == null) { return ClassLoader.getSystemClassLoader(); } else { return AccessController.doPrivileged( (PrivilegedAction<ClassLoader>) ClassLoader::getSystemClassLoader); } } \n### Response:", "ground_truth": "Returns system class loader.", "predict": "Returns the system class loader."}
{"ID": 1282, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static InputStream getResourceAsStream(final String resourceName, final ClassLoader callingClass) throws IOException { URL url = getResourceUrl(resourceName, callingClass); if (url != null) { return url.openStream(); } return null; } \n### Response:", "ground_truth": "Opens a resource of the specified name for reading.\n@see #getResourceUrl(String, ClassLoader)", "predict": "Get a resource as a stream.\n\n@param resourceName the resource name\n@param callingClass the calling class\n@return the resource as a stream\n@throws IOException if the resource cannot be found"}
{"ID": 1283, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static InputStream getResourceAsStream(final String resourceName, final ClassLoader callingClass, final boolean useCache) throws IOException { URL url = getResourceUrl(resourceName, callingClass); if (url != null) { URLConnection urlConnection = url.openConnection(); urlConnection.setUseCaches(useCache); return urlConnection.getInputStream(); } return null; } \n### Response:", "ground_truth": "Opens a resource of the specified name for reading. Controls caching,\nthat is important when the same jar is reloaded using custom classloader.", "predict": "Get the resource as an input stream.\n\n@param resourceName the resource name\n@param callingClass the calling class\n@param useCache whether to use the cache\n@return the resource as an input stream\n@throws IOException if the resource cannot be found"}
{"ID": 1284, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static InputStream getClassAsStream(final Class clazz) throws IOException { return getResourceAsStream(ClassUtil.convertClassNameToFileName(clazz), clazz.getClassLoader()); } \n### Response:", "ground_truth": "Opens a class of the specified name for reading using class classloader.\n@see #getResourceAsStream(String, ClassLoader)", "predict": "Get class as input stream.\n\n@param clazz the clazz\n@return the input stream\n@throws IOException Signals that an I/O exception has occurred."}
{"ID": 1285, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static InputStream getClassAsStream(final String className, final ClassLoader classLoader) throws IOException { return getResourceAsStream(ClassUtil.convertClassNameToFileName(className), classLoader); } \n### Response:", "ground_truth": "Opens a class of the specified name for reading using provided class loader.", "predict": "Get the class as input stream.\n\n@param className the class name\n@param classLoader the class loader\n@return the input stream\n@throws IOException Signals that an I/O exception has occurred."}
{"ID": 1286, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public RouteChunk add(final String newValue) { RouteChunk routeChunk = new RouteChunk(routes, this, newValue); if (children == null) { children = new RouteChunk[] {routeChunk}; } else { children = ArraysUtil.append(children, routeChunk); } return routeChunk; } \n### Response:", "ground_truth": "Adds a new child to the tree.", "predict": "Add a new route chunk to the list of routes.\n\n@param newValue the new value\n@return the route chunk"}
{"ID": 1287, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public RouteChunk findOrCreateChild(final String value) { if (children != null) { for (RouteChunk child : children) { if (child.get().equals(value)) { return child; } } } return add(value); } \n### Response:", "ground_truth": "Finds existing chunk or creates a new one if does not exist.", "predict": "Find or create a child with the given value.\n\n@param value the value\n@return the child with the given value"}
{"ID": 1288, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void parseRequest() throws IOException { if (ServletUtil.isMultipartRequest(request)) { parseRequestStream(request.getInputStream(), characterEncoding); } else { Enumeration names = request.getParameterNames(); while (names.hasMoreElements()) { String paramName = (String) names.nextElement(); String[] values = request.getParameterValues(paramName); putParameters(paramName, values); } } } \n### Response:", "ground_truth": "Checks if request if multi-part and parse it. If request is not multi-part it\ncopies all parameters, to make usage the same in both cases.\n\n@see MultipartRequestWrapper", "predict": "Parses the request and stores the parameters in the request object.\n\n@throws IOException if an IOException occurs"}
{"ID": 1289, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") protected Object convertToCollection(final Object value, final Class destinationType, final Class componentType) { return typeConverterManager.convertToCollection(value, destinationType, componentType); } \n### Response:", "ground_truth": "Converter to collection.", "predict": "Converts the given value to a collection.\n\n@param value the value to convert\n@param destinationType the destination type\n@param componentType the component type\n@return the value converted to a collection"}
{"ID": 1290, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Object invokeSetter(final Setter setter, final BeanProperty bp, Object value) { try { final MapperFunction setterMapperFunction = setter.getMapperFunction(); if (setterMapperFunction != null) { value = setterMapperFunction.apply(value); } final Class type = setter.getSetterRawType(); if (ClassUtil.isTypeOf(type, Collection.class)) { Class componentType = setter.getSetterRawComponentType(); value = convertToCollection(value, type, componentType); } else { // no collections value = convertType(value, type); } setter.invokeSetter(bp.bean, value); } catch (Exception ex) { if (isSilent) { return null; } throw new BeanException(\"Setter failed: \" + setter, ex); } return value; } \n### Response:", "ground_truth": "Invokes setter, but first converts type to match the setter type.", "predict": "Invokes the setter with the given value.\n\n@param setter the setter to invoke\n@param bp the bean property\n@param value the value to set\n@return the value set by the setter"}
{"ID": 1291, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void arrayForcedSet(final BeanProperty bp, Object array, final int index, Object value) { Class componentType = array.getClass().getComponentType(); array = ensureArraySize(bp, array, componentType, index); value = convertType(value, componentType); Array.set(array, index, value); } \n### Response:", "ground_truth": "Sets the array element forced. If index is greater then arrays length, array will be expanded to the index.\nIf speed is critical, it is better to allocate an array with proper size before using this method.", "predict": "Sets the value of the given array property to the given value.\n\n@param bp the property to set\n@param array the array to set\n@param index the index of the array to set\n@param value the value to set"}
{"ID": 1292, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Object createBeanProperty(final BeanProperty bp) { Setter setter = bp.getSetter(true); if (setter == null) { return null; } Class type = setter.getSetterRawType(); Object newInstance; try { newInstance = ClassUtil.newInstance(type); } catch (Exception ex) { if (isSilent) { return null; } throw new BeanException(\"Invalid property: \" + bp.name, bp, ex); } newInstance = invokeSetter(setter, bp, newInstance); return newInstance; } \n### Response:", "ground_truth": "Creates new instance for current property name through its setter.\nIt uses default constructor!", "predict": "Create a new bean property.\n\n@param bp the bean property\n@return the new bean property"}
{"ID": 1293, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Class extractType(final BeanProperty bp) { Getter getter = bp.getGetter(isDeclared); if (getter != null) { if (bp.index != null) { Class type = getter.getGetterRawComponentType(); return type == null ? Object.class : type; } return getter.getGetterRawType(); } return null; // this should not happens } \n### Response:", "ground_truth": "Extracts type of current property.", "predict": "Extract the type of the property.\n\n@param bp the bean property\n@return the type of the property"}
{"ID": 1294, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void stop(final HttpServletRequest servletRequest, final HttpServletResponse servletResponse) { final HttpSession httpSession = servletRequest.getSession(false); if (httpSession != null) { httpSession.removeAttribute(AUTH_SESSION_NAME); } final Cookie cookie = ServletUtil.getCookie(servletRequest, AUTH_COOKIE_NAME); if (cookie == null) { return; } cookie.setMaxAge(0); cookie.setPath(\"/\"); servletResponse.addCookie(cookie); } \n### Response:", "ground_truth": "Stops the user session by removing it from the http session and invalidating the cookie.", "predict": "Stops the authentication cookie.\n\n@param servletRequest the servlet request\n@param servletResponse the servlet response"}
{"ID": 1295, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void start(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) { final HttpSession httpSession = httpServletRequest.getSession(true); httpSession.setAttribute(AUTH_SESSION_NAME, this); final Cookie cookie = new Cookie(AUTH_COOKIE_NAME, authTokenValue); //cookie.setDomain(SSORealm.SSO_DOMAIN); cookie.setMaxAge(cookieMaxAge); cookie.setPath(\"/\"); httpServletResponse.addCookie(cookie); } \n### Response:", "ground_truth": "Starts new user session.", "predict": "Start the authentication session.\n\n@param httpServletRequest the http request\n@param httpServletResponse the http response"}
{"ID": 1296, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Date toDate(final LocalDate localDate) { return Date.from(localDate.atStartOfDay(ZoneId.systemDefault()).toInstant()); } \n### Response:", "ground_truth": "Converts local date to Date.", "predict": "Converts a date to a Date object.\n\n@param localDate date to convert\n@return Date object"}
{"ID": 1297, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Calendar toCalendar(final LocalDateTime localDateTime) { return GregorianCalendar.from(ZonedDateTime.of(localDateTime, ZoneId.systemDefault())); } \n### Response:", "ground_truth": "Converts local date time to Calendar.", "predict": "Converts the given local date time to a calendar object.\n\n@param localDateTime the local date time\n@return the calendar object"}
{"ID": 1298, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Class defineProxy(final Class target) { ProxyProxettaFactory builder = proxetta.proxy(); builder.setTarget(target); return builder.define(); } \n### Response:", "ground_truth": "Generates new class.", "predict": "Define proxy class.\n\n@param target proxy class\n@return proxy class"}
{"ID": 1299, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void add(final Check check) { String name = check.getName(); List<Check> list = map.computeIfAbsent(name, k -> new ArrayList<>()); list.add(check); } \n### Response:", "ground_truth": "Adds validation checks.", "predict": "Adds a check to the list of checks.\n\n@param check the check to add"}
{"ID": 1300, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ValidationContext resolveFor(final Class<?> target) { ValidationContext vc = new ValidationContext(); vc.addClassChecks(target); return vc; } \n### Response:", "ground_truth": "Resolve validation context for provided target class.\n@see #addClassChecks(Class)", "predict": "Resolves the given class to a ValidationContext instance.\n\n@param target the class to resolve\n@return the ValidationContext instance"}
{"ID": 1301, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void addClassChecks(final Class target) { final List<Check> list = cache.get(target, () -> { final List<Check> newList = new ArrayList<>(); final ClassDescriptor cd = ClassIntrospector.get().lookup(target); final PropertyDescriptor[] allProperties = cd.getAllPropertyDescriptors(); for (PropertyDescriptor propertyDescriptor : allProperties) { collectPropertyAnnotationChecks(newList, propertyDescriptor); } return newList; }); addAll(list); } \n### Response:", "ground_truth": "Parses class annotations and adds all checks.\n@see #resolveFor(Class)", "predict": "Adds all property annotations to the given class.\n\n@param target the class to add annotations to"}
{"ID": 1302, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void collectPropertyAnnotationChecks(final List<Check> annChecks, final PropertyDescriptor propertyDescriptor) { FieldDescriptor fd = propertyDescriptor.getFieldDescriptor(); if (fd != null) { Annotation[] annotations = fd.getField().getAnnotations(); collectAnnotationChecks(annChecks, propertyDescriptor.getType(), propertyDescriptor.getName(), annotations); } MethodDescriptor md = propertyDescriptor.getReadMethodDescriptor(); if (md != null) { Annotation[] annotations = md.getMethod().getAnnotations(); collectAnnotationChecks(annChecks, propertyDescriptor.getType(), propertyDescriptor.getName(), annotations); } md = propertyDescriptor.getWriteMethodDescriptor(); if (md != null) { Annotation[] annotations = md.getMethod().getAnnotations(); collectAnnotationChecks(annChecks, propertyDescriptor.getType(), propertyDescriptor.getName(), annotations); } } \n### Response:", "ground_truth": "Process all annotations of provided properties.", "predict": "Collects all annotations for the given property descriptor.\n\n@param annChecks\nthe list of annotations\n@param propertyDescriptor\nthe property descriptor"}
{"ID": 1303, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"unchecked\"}) protected void collectAnnotationChecks(final List<Check> annChecks, final Class targetType, final String targetName, final Annotation[] annotations) { for (Annotation annotation : annotations) { Constraint c = annotation.annotationType().getAnnotation(Constraint.class); Class<? extends ValidationConstraint> constraintClass; if (c == null) { // if constraint is not available, try lookup String constraintClassName = annotation.annotationType().getName() + \"Constraint\"; try { constraintClass = ClassLoaderUtil.loadClass(constraintClassName, this.getClass().getClassLoader()); } catch (ClassNotFoundException ingore) { continue; } } else { constraintClass = c.value(); } ValidationConstraint vc; try { vc = newConstraint(constraintClass, targetType); } catch (Exception ex) { throw new VtorException(\"Invalid constraint: \" + constraintClass.getClass().getName(), ex); } vc.configure(annotation); Check check = new Check(targetName, vc); copyDefaultCheckProperties(check, annotation); annChecks.add(check); } } \n### Response:", "ground_truth": "Collect annotations for some target.", "predict": "Collects all the annotations for the given target type and the given name.\n\n@param annChecks\nthe list of checks\n@param targetType\nthe target type\n@param targetName\nthe name\n@param annotations\nthe annotations"}
{"ID": 1304, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void copyDefaultCheckProperties(final Check destCheck, final Annotation annotation) { Integer severity = (Integer) ClassUtil.readAnnotationValue(annotation, ANN_SEVERITY); destCheck.setSeverity(severity.intValue()); String[] profiles = (String[]) ClassUtil.readAnnotationValue(annotation, ANN_PROFILES); destCheck.setProfiles(profiles); String message = (String) ClassUtil.readAnnotationValue(annotation, ANN_MESSAGE); destCheck.setMessage(message); } \n### Response:", "ground_truth": "Copies default properties from annotation to the check.", "predict": "Copy default properties from annotation to check.\n\n@param destCheck\n@param annotation"}
{"ID": 1305, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static String encodeUriComponent(final String source, final String encoding, final URIPart uriPart) { if (source == null) { return null; } byte[] bytes = encodeBytes(StringUtil.getBytes(source, encoding), uriPart); char[] chars = new char[bytes.length]; for (int i = 0; i < bytes.length; i++) { chars[i] = (char) bytes[i]; } return new String(chars); } \n### Response:", "ground_truth": "Encodes single URI component.", "predict": "Encodes a URI part.\n\n@param source the source\n@param encoding the encoding\n@param uriPart the URI part\n@return the encoded URI part"}
{"ID": 1306, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String encode(final String string, final String encoding) { return encodeUriComponent(string, encoding, URIPart.UNRESERVED); } \n### Response:", "ground_truth": "Encodes string using default RFCP rules.", "predict": "Encodes a string using the specified encoding.\n\n@param string the string to encode\n@param encoding the encoding to use\n@return the encoded string"}
{"ID": 1307, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String encodeScheme(final String scheme, final String encoding) { return encodeUriComponent(scheme, encoding, URIPart.SCHEME); } \n### Response:", "ground_truth": "Encodes the given URI scheme with the given encoding.", "predict": "Encode scheme part.\n\n@param scheme scheme to encode\n@param encoding encoding to use\n@return encoded scheme"}
{"ID": 1308, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String encodeHost(final String host, final String encoding) { return encodeUriComponent(host, encoding, URIPart.HOST); } \n### Response:", "ground_truth": "Encodes the given URI host with the given encoding.", "predict": "Encodes the host part of a URI.\n\n@param host the host part of the URI\n@param encoding the encoding to use\n@return the encoded host"}
{"ID": 1309, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String encodePort(final String port, final String encoding) { return encodeUriComponent(port, encoding, URIPart.PORT); } \n### Response:", "ground_truth": "Encodes the given URI port with the given encoding.", "predict": "Encode the port component.\n\n@param port the port\n@param encoding the encoding\n@return the encoded port"}
{"ID": 1310, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String encodePath(final String path, final String encoding) { return encodeUriComponent(path, encoding, URIPart.PATH); } \n### Response:", "ground_truth": "Encodes the given URI path with the given encoding.", "predict": "Encodes a path component.\n\n@param path the path to encode\n@param encoding the encoding to use\n@return the encoded path"}
{"ID": 1311, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String encodeQuery(final String query, final String encoding) { return encodeUriComponent(query, encoding, URIPart.QUERY); } \n### Response:", "ground_truth": "Encodes the given URI query with the given encoding.", "predict": "Encodes a query string.\n\n@param query the query string\n@param encoding the encoding\n@return the encoded query string"}
{"ID": 1312, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String encodeQueryParam(final String queryParam, final String encoding) { return encodeUriComponent(queryParam, encoding, URIPart.QUERY_PARAM); } \n### Response:", "ground_truth": "Encodes the given URI query parameter with the given encoding.", "predict": "Encodes a query parameter.\n\n@param queryParam the query parameter\n@param encoding the encoding\n@return the encoded query parameter"}
{"ID": 1313, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String encodeFragment(final String fragment, final String encoding) { return encodeUriComponent(fragment, encoding, URIPart.FRAGMENT); } \n### Response:", "ground_truth": "Encodes the given URI fragment with the given encoding.", "predict": "Encodes a fragment.\n\n@param fragment the fragment to encode\n@param encoding the encoding to use\n@return the encoded fragment"}
{"ID": 1314, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected HashMap<String, PropertyDescriptor> inspectProperties() { boolean scanAccessible = classDescriptor.isScanAccessible(); Class type = classDescriptor.getType(); HashMap<String, PropertyDescriptor> map = new HashMap<>(); Method[] methods = scanAccessible ? ClassUtil.getAccessibleMethods(type) : ClassUtil.getSupportedMethods(type); for (int iteration = 0; iteration < 2; iteration++) { // first find the getters, and then the setters! for (Method method : methods) { if (Modifier.isStatic(method.getModifiers())) { continue; // ignore static methods } boolean add = false; boolean issetter = false; String propertyName; if (iteration == 0) { propertyName = ClassUtil.getBeanPropertyGetterName(method); if (propertyName != null) { add = true; issetter = false; } } else { propertyName = ClassUtil.getBeanPropertySetterName(method); if (propertyName != null) { add = true; issetter = true; } } if (add) { MethodDescriptor methodDescriptor = classDescriptor.getMethodDescriptor(method.getName(), method.getParameterTypes(), true); addProperty(map, propertyName, methodDescriptor, issetter); } } } if (classDescriptor.isIncludeFieldsAsProperties()) { FieldDescriptor[] fieldDescriptors = classDescriptor.getAllFieldDescriptors(); String[] prefix = classDescriptor.getPropertyFieldPrefix(); for (FieldDescriptor fieldDescriptor : fieldDescriptors) { Field field = fieldDescriptor.getField(); if (Modifier.isStatic(field.getModifiers())) { continue; // ignore static fields } String name = field.getName(); if (prefix != null) { for (String p : prefix) { if (!name.startsWith(p)) { continue; } name = name.substring(p.length()); break; } } if (!map.containsKey(name)) { // add missing field as a potential property map.put(name, createPropertyDescriptor(name, fieldDescriptor)); } } } return map; } \n### Response:", "ground_truth": "Inspects all properties of target type.", "predict": "Inspects the class descriptor and returns a map of all properties.\n\n@return a map of all properties"}
{"ID": 1315, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public PropertyDescriptor[] getAllPropertyDescriptors() { if (allProperties == null) { PropertyDescriptor[] allProperties = new PropertyDescriptor[propertyDescriptors.size()]; int index = 0; for (PropertyDescriptor propertyDescriptor : propertyDescriptors.values()) { allProperties[index] = propertyDescriptor; index++; } Arrays.sort(allProperties, new Comparator<PropertyDescriptor>() { @Override public int compare(final PropertyDescriptor pd1, final PropertyDescriptor pd2) { return pd1.getName().compareTo(pd2.getName()); } }); this.allProperties = allProperties; } return allProperties; } \n### Response:", "ground_truth": "Returns all property descriptors.\nProperties are sorted by name.", "predict": "Returns an array of all the PropertyDescriptors in this class.\n\n@return an array of all the PropertyDescriptors in this class"}
{"ID": 1316, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Cookie[] cookies() { List<String> newCookies = headers(\"set-cookie\"); if (newCookies == null) { return new Cookie[0]; } List<Cookie> cookieList = new ArrayList<>(newCookies.size()); for (String cookieValue : newCookies) { try { Cookie cookie = new Cookie(cookieValue); cookieList.add(cookie); } catch (Exception ex) { // ignore } } return cookieList.toArray(new Cookie[0]); } \n### Response:", "ground_truth": "Returns list of valid cookies sent from server.\nIf no cookie found, returns an empty array. Invalid cookies are ignored.", "predict": "Returns the cookies that are set by the server.\n\n@return the cookies"}
{"ID": 1317, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpResponse unzip() { String contentEncoding = contentEncoding(); if (contentEncoding != null && contentEncoding().equals(\"gzip\")) { if (body != null) { headerRemove(HEADER_CONTENT_ENCODING); try { ByteArrayInputStream in = new ByteArrayInputStream(body.getBytes(StringPool.ISO_8859_1)); GZIPInputStream gzipInputStream = new GZIPInputStream(in); ByteArrayOutputStream out = new ByteArrayOutputStream(); StreamUtil.copy(gzipInputStream, out); body(out.toString(StringPool.ISO_8859_1)); } catch (IOException ioex) { throw new HttpException(ioex); } } } return this; } \n### Response:", "ground_truth": "Unzips GZip-ed body content, removes the content-encoding header\nand sets the new content-length value.", "predict": "Unzips the content.\n\n@return the current http response"}
{"ID": 1318, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpResponse close() { HttpConnection httpConnection = httpRequest.httpConnection; if (httpConnection != null) { httpConnection.close(); httpRequest.httpConnection = null; } return this; } \n### Response:", "ground_truth": "Closes requests connection if it was open.\nShould be called when using keep-alive connections.\nOtherwise, connection will be already closed.", "predict": "Closes the connection to the server."}
{"ID": 1319, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public boolean accept(final Scope referenceScope) { Class<? extends Scope> refScopeType = referenceScope.getClass(); if (refScopeType == ProtoScope.class) { return true; } if (refScopeType == SingletonScope.class) { return true; } if (refScopeType == ThreadLocalScope.class) { return true; } return false; } \n### Response:", "ground_truth": "Defines allowed referenced scopes that can be injected into the\nthread-local scoped bean.", "predict": "Helper method to determine if a given scope is a SingletonScope or a ProtoScope.\n\n@param referenceScope the scope to check.\n@return true if the given scope is a SingletonScope, false otherwise."}
{"ID": 1320, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void printRoutes(final int width) { final ActionsManager actionsManager = webApp.madvocContainer().lookupComponent(ActionsManager.class); final List<ActionRuntime> actions = actionsManager.getAllActionRuntimes(); final Map<String, String> aliases = actionsManager.getAllAliases(); if (actions.isEmpty()) { return; } final Print print = new Print(); print.line(\"Routes\", width); actions.stream() .sorted(Comparator.comparing( actionRuntime -> actionRuntime.getActionPath() + ' ' + actionRuntime.getActionMethod())) .forEach(ar -> { final String actionMethod = ar.getActionMethod(); print.out(Chalk256.chalk().yellow(), actionMethod == null ? \"*\" : actionMethod, 7); print.space(); final String signature = ClassUtil.getShortClassName( ProxettaUtil.resolveTargetClass(ar.getActionClass()), 2) + '#' + ar.getActionClassMethod().getName(); print.outLeftRightNewLine( Chalk256.chalk().green(), ar.getActionPath(), Chalk256.chalk().blue(), signature, width - 7 - 1 ); }); if (!aliases.isEmpty()) { print.line(\"Aliases\", width); actions.stream() .sorted(Comparator.comparing( actionRuntime -> actionRuntime.getActionPath() + ' ' + actionRuntime.getActionMethod())) .forEach(ar -> { final String actionPath = ar.getActionPath(); for (final Map.Entry<String, String> entry : aliases.entrySet()) { if (entry.getValue().equals(actionPath)) { print.space(8); print.outLeftRightNewLine( Chalk256.chalk().green(), entry.getValue(), Chalk256.chalk().blue(), entry.getKey(), width - 8 ); } } }); } print.line(width); } \n### Response:", "ground_truth": "Prints routes to console.", "predict": "Prints the routes.\n\n@param width the width"}
{"ID": 1321, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public byte[] encrypt(final byte[] content) { FastByteBuffer fbb = new FastByteBuffer(); int length = content.length + 1; int blockCount = length / blockSizeInBytes; int remaining = length; int offset = 0; for (int i = 0; i < blockCount; i++) { if (remaining == blockSizeInBytes) { break; } byte[] encrypted = encryptBlock(content, offset); fbb.append(encrypted); offset += blockSizeInBytes; remaining -= blockSizeInBytes; } if (remaining != 0) { // process remaining bytes byte[] block = new byte[blockSizeInBytes]; System.arraycopy(content, offset, block, 0, remaining - 1); block[remaining - 1] = TERMINATOR; byte[] encrypted = encryptBlock(block, 0); fbb.append(encrypted); } return fbb.toArray(); } \n### Response:", "ground_truth": "Encrypts complete content, block by block.", "predict": "Encrypts the given byte array.\n\n@param content the byte array to encrypt\n@return the encrypted byte array"}
{"ID": 1322, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public byte[] decrypt(final byte[] encryptedContent) { FastByteBuffer fbb = new FastByteBuffer(); int length = encryptedContent.length; int blockCount = length / blockSizeInBytes; int offset = 0; for (int i = 0; i < blockCount - 1; i++) { byte[] decrypted = decryptBlock(encryptedContent, offset); fbb.append(decrypted); offset += blockSizeInBytes; } // process last block byte[] decrypted = decryptBlock(encryptedContent, offset); // find terminator int ndx = blockSizeInBytes - 1; while (ndx >= 0) { if (decrypted[ndx] == TERMINATOR) { break; } ndx--; } fbb.append(decrypted, 0, ndx); return fbb.toArray(); } \n### Response:", "ground_truth": "Decrypts the whole content, block by block.", "predict": "Decrypts the given encrypted content.\n\n@param encryptedContent the encrypted content\n@return the decrypted content"}
{"ID": 1323, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object map2bean(final Map map, Class targetType) { Object target = null; // create targets type String className = (String) map.get(classMetadataName); if (className == null) { if (targetType == null) { // nothing to do, no information about target type found target = map; } } else { checkClassName(jsonParser.classnameWhitelist, className); try { targetType = ClassLoaderUtil.loadClass(className); } catch (ClassNotFoundException cnfex) { throw new JsonException(cnfex); } } if (target == null) { target = jsonParser.newObjectInstance(targetType); } ClassDescriptor cd = ClassIntrospector.get().lookup(target.getClass()); boolean targetIsMap = target instanceof Map; for (Object key : map.keySet()) { String keyName = key.toString(); if (classMetadataName != null) { if (keyName.equals(classMetadataName)) { continue; } } PropertyDescriptor pd = cd.getPropertyDescriptor(keyName, declared); if (!targetIsMap && pd == null) { // target property does not exist, continue continue; } // value is one of JSON basic types, like Number, Map, List... Object value = map.get(key); Class propertyType = pd == null ? null : pd.getType(); Class componentType = pd == null ? null : pd.resolveComponentType(true); if (value != null) { if (value instanceof List) { if (componentType != null && componentType != String.class) { value = generifyList((List) value, componentType); } } else if (value instanceof Map) { // if the value we want to inject is a Map... if (!ClassUtil.isTypeOf(propertyType, Map.class)) { // ... and if target is NOT a map value = map2bean((Map) value, propertyType); } else { // target is also a Map, but we might need to generify it Class keyType = pd == null ? null : pd.resolveKeyType(true); if (keyType != String.class || componentType != String.class) { // generify value = generifyMap((Map) value, keyType, componentType); } } } } if (targetIsMap) { ((Map)target).put(keyName, value); } else { try { setValue(target, pd, value); } catch (Exception ignore) { ignore.printStackTrace(); } } } return target; } \n### Response:", "ground_truth": "Converts map to target type.", "predict": "Map a map to a bean.\n\n@param map\n@param targetType\n@return"}
{"ID": 1324, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Object generifyList(final List list, final Class componentType) { for (int i = 0; i < list.size(); i++) { Object element = list.get(i); if (element != null) { if (element instanceof Map) { Object bean = map2bean((Map) element, componentType); list.set(i, bean); } else { Object value = convert(element, componentType); list.set(i, value); } } } return list; } \n### Response:", "ground_truth": "Converts type of all list elements to match the component type.", "predict": "Helper method to generify a list of objects.\n\n@param list the list of objects to generify\n@param componentType the type of the component\n@return the generified list"}
{"ID": 1325, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void setValue(final Object target, final PropertyDescriptor pd, Object value) throws InvocationTargetException, IllegalAccessException { Class propertyType; Setter setter = pd.getSetter(true); if (setter != null) { if (value != null) { propertyType = setter.getSetterRawType(); value = jsonParser.convertType(value, propertyType); } setter.invokeSetter(target, value); } } \n### Response:", "ground_truth": "Sets the property value.", "predict": "Sets the value of the property.\n\n@param target\nthe object to set the value on\n@param pd\nthe PropertyDescriptor\n@param value\nthe value to set\n@throws InvocationTargetException\nif the setter was invoked on an object that is not the target object\n@throws IllegalAccessException\nif the setter was invoked on an object that is not the target object"}
{"ID": 1326, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected <K,V> Map<K, V> generifyMap(final Map<Object, Object> map, final Class<K> keyType, final Class<V> valueType) { if (keyType == String.class) { // only value type is changed, we can make value replacements for (Map.Entry<Object, Object> entry : map.entrySet()) { Object value = entry.getValue(); Object newValue = convert(value, valueType); if (value != newValue) { entry.setValue(newValue); } } return (Map<K, V>) map; } // key is changed too, we need a new map Map<K, V> newMap = new HashMap<>(map.size()); for (Map.Entry<Object, Object> entry : map.entrySet()) { Object key = entry.getKey(); Object newKey = convert(key, keyType); Object value = entry.getValue(); Object newValue = convert(value, valueType); newMap.put((K)newKey, (V)newValue); } return newMap; } \n### Response:", "ground_truth": "Change map elements to match key and value types.", "predict": "Helper method to generify a map.\n\n@param <K> the key type\n@param <V> the value type\n@param map the map to generify\n@param keyType the key type\n@param valueType the value type\n@return the generified map"}
{"ID": 1327, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public int compareTo(final Object o) { DbEntityColumnDescriptor that = (DbEntityColumnDescriptor) o; if (this.isId != that.isId) { return this.isId ? -1 : 1; // IDs should be the first in the array } return this.columnName.compareTo(that.columnName); } \n### Response:", "ground_truth": "Compares two column descriptors. Identity columns should be the first on the list.\nEach group then will be sorted by column name.", "predict": "Compares two DbEntityColumnDescriptors.\n\n@param o the other object\n@return the result of the comparison"}
{"ID": 1328, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpBrowser setDefaultHeader(final String name, final String value) { defaultHeaders.addHeader(name, value); return this; } \n### Response:", "ground_truth": "Adds default header to all requests.", "predict": "Sets a default HTTP header.\n\n@param name the name of the header\n@param value the value of the header\n@return the current instance of this {@link HttpBrowser}"}
{"ID": 1329, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpResponse sendRequest(HttpRequest httpRequest) { elapsedTime = System.currentTimeMillis(); // send request httpRequest.followRedirects(false); while (true) { this.httpRequest = httpRequest; HttpResponse previousResponse = this.httpResponse; this.httpResponse = null; addDefaultHeaders(httpRequest); addCookies(httpRequest); // send request if (catchTransportExceptions) { try { this.httpResponse = _sendRequest(httpRequest, previousResponse); } catch (HttpException httpException) { httpResponse = new HttpResponse(); httpResponse.assignHttpRequest(httpRequest); httpResponse.statusCode(503); httpResponse.statusPhrase(\"Service unavailable. \" + ExceptionUtil.message(httpException)); } } else { this.httpResponse =_sendRequest(httpRequest, previousResponse); } readCookies(httpResponse); int statusCode = httpResponse.statusCode(); // 301: moved permanently if (statusCode == 301) { String newPath = httpResponse.location(); if (newPath == null) { break; } httpRequest = HttpRequest.get(newPath); continue; } // 302: redirect, 303: see other if (statusCode == 302 || statusCode == 303) { String newPath = httpResponse.location(); if (newPath == null) { break; } httpRequest = HttpRequest.get(newPath); continue; } // 307: temporary redirect, 308: permanent redirect if (statusCode == 307 || statusCode == 308) { String newPath = httpResponse.location(); if (newPath == null) { break; } String originalMethod = httpRequest.method(); httpRequest = new HttpRequest() .method(originalMethod) .set(newPath); continue; } break; } elapsedTime = System.currentTimeMillis() - elapsedTime; return this.httpResponse; } \n### Response:", "ground_truth": "Sends new request as a browser. Before sending,\nall browser cookies are added to the request.\nAfter sending, the cookies are read from the response.\nMoreover, status codes 301 and 302 are automatically\nhandled. Returns very last response.", "predict": "Sends a request to the server.\n\n@param httpRequest the request to send\n@return the response"}
{"ID": 1330, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected HttpResponse _sendRequest(final HttpRequest httpRequest, final HttpResponse previouseResponse) { if (!keepAlive) { httpRequest.open(httpConnectionProvider); } else { // keeping alive if (previouseResponse == null) { httpRequest.open(httpConnectionProvider).connectionKeepAlive(true); } else { httpRequest.keepAlive(previouseResponse, true); } } return httpRequest.send(); } \n### Response:", "ground_truth": "Opens connection and sends a response.", "predict": "Sends the request.\n\n@param httpRequest the http request\n@param previouseResponse the previous response\n@return the http response"}
{"ID": 1331, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void addDefaultHeaders(final HttpRequest httpRequest) { for (Map.Entry<String, String> entry : defaultHeaders.entries()) { String name = entry.getKey(); if (!httpRequest.headers.contains(name)) { httpRequest.headers.add(name, entry.getValue()); } } } \n### Response:", "ground_truth": "Add default headers to the request. If request already has a header set,\ndefault header will be ignored.", "predict": "Adds the default headers to the given request.\n\n@param httpRequest the request to add the default headers to"}
{"ID": 1332, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void readCookies(final HttpResponse httpResponse) { Cookie[] newCookies = httpResponse.cookies(); for (Cookie cookie : newCookies) { cookies.add(cookie.getName(), cookie); } } \n### Response:", "ground_truth": "Reads cookies from response and adds to cookies list.", "predict": "Reads the cookies from the HTTP response.\n\n@param httpResponse the HTTP response"}
{"ID": 1333, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void addCookies(final HttpRequest httpRequest) { // prepare all cookies List<Cookie> cookiesList = new ArrayList<>(); if (!cookies.isEmpty()) { for (Map.Entry<String, Cookie> cookieEntry : cookies) { cookiesList.add(cookieEntry.getValue()); } httpRequest.cookies(cookiesList.toArray(new Cookie[0])); } } \n### Response:", "ground_truth": "Add cookies to the request.", "predict": "Adds all cookies to the request.\n\n@param httpRequest the request"}
{"ID": 1334, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String sendMail(final Email email) { try { final MimeMessage msg = createMessage(email); getService().sendMessage(msg, msg.getAllRecipients()); return msg.getMessageID(); } catch (final MessagingException msgexc) { throw new MailException(\"Failed to send email: \" + email, msgexc); } } \n### Response:", "ground_truth": "Prepares message and sends it. Returns Message ID of sent email.\n\n@param email {@link Email} to send.\n@return String representing message ID.", "predict": "Sends an email.\n\n@param email\n@return the message ID"}
{"ID": 1335, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void setSubject(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { if (emailWithData.subjectEncoding() != null) { msgToSet.setSubject(emailWithData.subject(), emailWithData.subjectEncoding()); } else { msgToSet.setSubject(emailWithData.subject()); } } \n### Response:", "ground_truth": "Sets subject in msgToSet from subject in emailWithData.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure", "predict": "Sets the subject of the email.\n\n@param emailWithData\n@param msgToSet\n@throws MessagingException"}
{"ID": 1336, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void setSentDate(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { Date date = emailWithData.sentDate(); if (date == null) { date = new Date(); } msgToSet.setSentDate(date); } \n### Response:", "ground_truth": "Sets sent date in msgToSet with sent date from emailWithData.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure", "predict": "Sets the date of the email sent.\n\n@param emailWithData\n@param msgToSet\n@throws MessagingException"}
{"ID": 1337, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void setHeaders(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { final Map<String, String> headers = emailWithData.headers(); if (headers != null) { for (final Map.Entry<String, String> entry : headers.entrySet()) { msgToSet.setHeader(entry.getKey(), entry.getValue()); } } } \n### Response:", "ground_truth": "Sets headers in msgToSet with headers from emailWithData.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure", "predict": "Sets the email headers.\n\n@param emailWithData the email with data\n@param msgToSet the msg to set\n@throws MessagingException the messaging exception"}
{"ID": 1338, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void setPeople(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { msgToSet.setFrom(emailWithData.from().toInternetAddress()); msgToSet.setReplyTo(EmailAddress.convert(emailWithData.replyTo())); setRecipients(emailWithData, msgToSet); } \n### Response:", "ground_truth": "Sets FROM, REPLY-TO and recipients.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure", "predict": "Set the people for the email.\n\n@param emailWithData\n@param msgToSet\n@throws MessagingException"}
{"ID": 1339, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void setRecipients(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { // TO final InternetAddress[] to = EmailAddress.convert(emailWithData.to()); if (to.length > 0) { msgToSet.setRecipients(RecipientType.TO, to); } // CC final InternetAddress[] cc = EmailAddress.convert(emailWithData.cc()); if (cc.length > 0) { msgToSet.setRecipients(RecipientType.CC, cc); } // BCC final InternetAddress[] bcc = EmailAddress.convert(emailWithData.bcc()); if (bcc.length > 0) { msgToSet.setRecipients(RecipientType.BCC, bcc); } } \n### Response:", "ground_truth": "Sets TO, CC and BCC in msgToSet with TO, CC and BCC from emailWithData.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure.", "predict": "Sets the recipient list for the email message.\n\n@param emailWithData the email data\n@param msgToSet the message to set\n@throws MessagingException if an error occurs"}
{"ID": 1340, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addBodyData(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { final List<EmailMessage> messages = emailWithData.messages(); final int totalMessages = messages.size(); // Need to use new list since filterEmbeddedAttachments(List) removes attachments from the source List final List<EmailAttachment<? extends DataSource>> attachments = new ArrayList<>(emailWithData.attachments()); if (attachments.isEmpty() && totalMessages == 1) { // special case: no attachments and just one content setContent(messages.get(0), msgToSet); } else { final MimeMultipart multipart = new MimeMultipart(); final MimeMultipart msgMultipart = new MimeMultipart(ALTERNATIVE); multipart.addBodyPart(getBaseBodyPart(msgMultipart)); for (final EmailMessage emailMessage : messages) { msgMultipart.addBodyPart(getBodyPart(emailMessage, attachments)); } addAnyAttachments(attachments, multipart); msgToSet.setContent(multipart); } } \n### Response:", "ground_truth": "Adds message data and attachments.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure.", "predict": "Adds the body data to the message.\n\n@param emailWithData\n@param msgToSet\n@throws MessagingException"}
{"ID": 1341, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void setContent(final EmailMessage emailWithData, final Part partToSet) throws MessagingException { partToSet.setContent(emailWithData.getContent(), emailWithData.getMimeType() + CHARSET + emailWithData.getEncoding()); } \n### Response:", "ground_truth": "Sets emailWithData content into msgToSet.\n\n@param emailWithData {@link EmailMessage} with data.\n@param partToSet     {@link Part} to set data into.\n@throws MessagingException if there is a failure.", "predict": "Sets the content of the part to be sent.\n\n@param emailWithData\n@param partToSet\n@throws MessagingException"}
{"ID": 1342, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected MimeBodyPart createAttachmentBodyPart(final EmailAttachment<? extends DataSource> attachment) throws MessagingException { final MimeBodyPart part = new MimeBodyPart(); final String attachmentName = attachment.getEncodedName(); if (attachmentName != null) { part.setFileName(attachmentName); } part.setDataHandler(new DataHandler(attachment.getDataSource())); if (attachment.getContentId() != null) { part.setContentID(StringPool.LEFT_CHEV + attachment.getContentId() + StringPool.RIGHT_CHEV); } if (attachment.isInline()) { part.setDisposition(INLINE); } return part; } \n### Response:", "ground_truth": "Creates attachment body part. Handles regular and inline attachments.\n\n@param attachment Body part {@link EmailAttachment}.\n@return {@link MimeBodyPart} which represents body part attachment.\n@throws MessagingException if there is a failure.", "predict": "Create a body part for an attachment.\n\n@param attachment the attachment\n@return the attachment body part\n@throws MessagingException if an error occurs"}
{"ID": 1343, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private String getContentType(final String dataHeader) { String token = \"Content-Type:\"; int start = dataHeader.indexOf(token); if (start == -1) { return StringPool.EMPTY; } start += token.length(); return dataHeader.substring(start).trim(); } \n### Response:", "ground_truth": "Strips content type information from requests data header.\n@param dataHeader data header string\n@return content type or an empty string if no content type defined", "predict": "Get the content type from the given header.\n\n@param dataHeader the header to get the content type from\n@return the content type"}
{"ID": 1344, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void saveResultSet(final ResultSet rs) { if (resultSets == null) { resultSets = new HashSet<>(); } resultSets.add(rs); } \n### Response:", "ground_truth": "Stores result set.", "predict": "Saves the result set to the database.\n\n@param rs\nthe result set to save"}
{"ID": 1345, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Q closeAllResultSets() { final SQLException sex = closeQueryResultSets(); if (sex != null) { throw new DbSqlException(\"Close associated ResultSets error\", sex); } return _this(); } \n### Response:", "ground_truth": "Closes all result sets created by this query. Query remains active.", "predict": "Close all ResultSets associated with this query.\n\n@return This query instance."}
{"ID": 1346, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected SQLException closeQuery() { SQLException sqlException = closeQueryResultSets(); if (statement != null) { try { statement.close(); } catch (SQLException sex) { if (sqlException == null) { sqlException = sex; } else { sqlException.setNextException(sex); } } statement = null; } query = null; queryState = CLOSED; return sqlException; } \n### Response:", "ground_truth": "Closes all assigned result sets and then closes the query. Query becomes closed.", "predict": "Closes the query.\n\n@return the exception"}
{"ID": 1347, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override @SuppressWarnings({\"ClassReferencesSubclass\"}) public void close() { final SQLException sqlException = closeQuery(); connection = null; if (this.session != null) { this.session.detachQuery(this); } if (sqlException != null) { throw new DbSqlException(\"Close query error\", sqlException); } } \n### Response:", "ground_truth": "Closes the query and all created results sets and detaches itself from the session.", "predict": "Closes the query."}
{"ID": 1348, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Q setFetchSize(final int rows) { checkNotClosed(); this.fetchSize = rows; if (statement != null) { try { statement.setFetchSize(fetchSize); } catch (SQLException sex) { throw new DbSqlException(this, \"Unable to set fetch size: \" + fetchSize, sex); } } return _this(); } \n### Response:", "ground_truth": "Gives the JDBC driver a hint as to the number of rows that should be fetched from the database when\nmore rows are needed. The number of rows specified affects only result sets created using this statement.\nIf the value specified is zero, then the hint is ignored. The default value is zero.\n@see Statement#setFetchSize(int)", "predict": "Sets the fetch size.\n\n@param rows The new fetch size.\n@return This object."}
{"ID": 1349, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Q setMaxRows(final int maxRows) { checkNotClosed(); this.maxRows = maxRows; if (statement != null) { try { statement.setMaxRows(maxRows); } catch (SQLException sex) { throw new DbSqlException(this, \"Unable to set max rows: \" + maxRows, sex); } } return _this(); } \n### Response:", "ground_truth": "Sets the limit for the maximum number of rows that any ResultSet object can contain to the given number.\nIf the limit is exceeded, the excess rows are silently dropped. Zero means there is no limit.\n@see Statement#setMaxRows(int)", "predict": "Sets the maximum number of rows to be returned.\n\n@param maxRows\nThe maximum number of rows to return.\n@return This object."}
{"ID": 1350, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected int executeUpdate(final boolean closeQuery) { start = System.currentTimeMillis(); init(); final int result; if (log.isDebugEnabled()) { log.debug(\"Executing update: \" + getQueryString()); } try { if (preparedStatement == null) { if (generatedColumns != null) { if (generatedColumns.length == 0) { result = statement.executeUpdate(query.sql, Statement.RETURN_GENERATED_KEYS); } else { result = statement.executeUpdate(query.sql, generatedColumns); } } else { result = statement.executeUpdate(query.sql); } } else { result = preparedStatement.executeUpdate(); } } catch (SQLException sex) { throw new DbSqlException(this, \"Query execution failed\", sex); } if (closeQuery) { close(); } elapsed = System.currentTimeMillis() - start; if (log.isDebugEnabled()) { log.debug(\"execution time: \" + elapsed + \"ms\"); } return result; } \n### Response:", "ground_truth": "Executes UPDATE, INSERT or DELETE queries and optionally closes the query.\n@see Statement#executeUpdate(String)", "predict": "Executes an update query.\n\n@param closeQuery whether to close the query\n@return the result of the query"}
{"ID": 1351, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected long executeCount(final boolean close) { start = System.currentTimeMillis(); init(); ResultSet rs = null; if (log.isDebugEnabled()) { log.debug(\"Executing prepared count: \" + getQueryString()); } try { if (preparedStatement == null) { rs = statement.executeQuery(query.sql); } else { rs = preparedStatement.executeQuery(); } final long firstLong = DbUtil.getFirstLong(rs); elapsed = System.currentTimeMillis() - start; if (log.isDebugEnabled()) { log.debug(\"execution time: \" + elapsed + \"ms\"); } return firstLong; } catch (SQLException sex) { throw new DbSqlException(this, \"Count query failed\", sex); } finally { DbUtil.close(rs); if (close) { close(); } } } \n### Response:", "ground_truth": "Executes count queries and optionally closes query afterwards.", "predict": "Executes a count query and returns the result.\n\n@param close whether to close the result set\n@return the number of rows returned"}
{"ID": 1352, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ResultSet getGeneratedColumns() { checkInitialized(); if (generatedColumns == null) { throw new DbSqlException(this, \"No column is specified as auto-generated\"); } final ResultSet rs; try { rs = statement.getGeneratedKeys(); } catch (SQLException sex) { throw new DbSqlException(this, \"No generated keys\", sex); } saveResultSet(rs); totalOpenResultSetCount++; return rs; } \n### Response:", "ground_truth": "Returns generated columns.", "predict": "Get the generated columns.\n\n@return The generated columns."}
{"ID": 1353, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getQueryString() { if (debug) { if ((callableStatement != null)) { if (preparedStatement instanceof LoggableCallableStatement) { return ((LoggableCallableStatement) callableStatement).getQueryString(); } } if (preparedStatement != null) { if (preparedStatement instanceof LoggablePreparedStatement) { return ((LoggablePreparedStatement) preparedStatement).getQueryString(); } } } if (query != null) { return query.sql; } return sqlString; } \n### Response:", "ground_truth": "Returns query SQL string. For prepared statements, returned sql string with quick-and-dirty replaced values.", "predict": "Returns the query string.\n\n@return the query string"}
{"ID": 1354, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public static <T> T proxyOf(final T target, final Class<? extends Aspect> aspectClass) { final Aspect aspect; try { aspect = ClassUtil.newInstance(aspectClass, target); } catch (Exception e) { throw new IllegalArgumentException(\"Can't create new instance of aspect class\", e); } return (T) newProxyInstance(target.getClass().getClassLoader(), aspect, target.getClass().getInterfaces()); } \n### Response:", "ground_truth": "Creates a proxy of given target and the aspect.", "predict": "Create a proxy of the given target class.\n\n@param target the target class\n@param aspectClass the aspect class\n@return the proxy"}
{"ID": 1355, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> Collection<T> collectionOf(final Iterator<? extends T> iterator) { final List<T> list = new ArrayList<>(); while (iterator.hasNext()) { list.add(iterator.next()); } return list; } \n### Response:", "ground_truth": "Returns a collection containing all elements of the iterator.", "predict": "Returns a collection of the elements of the given iterator.\n\n@param iterator the iterator\n@return the collection"}
{"ID": 1356, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> Stream<T> streamOf(final Iterator<T> iterator) { return StreamSupport.stream(((Iterable<T>) () -> iterator).spliterator(), false); } \n### Response:", "ground_truth": "Converts iterator to a stream.", "predict": "Returns a stream from the given iterator.\n\n@param iterator the iterator\n@return the stream"}
{"ID": 1357, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public int compare(final T o1, final T o2) { for (Comparator<T> comparator : comparators) { int result = comparator.compare(o1, o2); if (result != 0) { return result; } } return 0; } \n### Response:", "ground_truth": "Compares two objects starting with first comparator; if they are equals\nproceeds to the next comparator and so on.", "predict": "Compares two objects.\n\n@param o1\n@param o2\n@return"}
{"ID": 1358, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public PetiteConfig setDefaultWiringMode(final WiringMode defaultWiringMode) { if ((defaultWiringMode == null) || (defaultWiringMode == WiringMode.DEFAULT)) { throw new PetiteException(\"Invalid default wiring mode: \" + defaultWiringMode); } this.defaultWiringMode = defaultWiringMode; return this; } \n### Response:", "ground_truth": "Specifies default wiring mode.", "predict": "Sets the default wiring mode.\n\n@param default WiringMode the new default wiring mode\n@return this instance of {@link PetiteConfig}"}
{"ID": 1359, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void print(final Level level, final String message, final Throwable throwable) { if (!isEnabled(level)) { return; } StringBuilder msg = new StringBuilder() .append(slf.getElapsedTime()).append(' ').append('[') .append(level).append(']').append(' ') .append(getCallerClass()).append(' ').append('-') .append(' ').append(message); System.out.println(msg.toString()); if (throwable != null) { throwable.printStackTrace(System.out); } } \n### Response:", "ground_truth": "Prints error message if level is enabled.", "predict": "Prints the given message and the given exception.\n\n@param level the level\n@param message the message\n@param throwable the exception"}
{"ID": 1360, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String getCallerClass() { Exception exception = new Exception(); StackTraceElement[] stackTrace = exception.getStackTrace(); for (StackTraceElement stackTraceElement : stackTrace) { String className = stackTraceElement.getClassName(); if (className.equals(SimpleLoggerProvider.class.getName())) { continue; } if (className.equals(SimpleLogger.class.getName())) { continue; } if (className.equals(Logger.class.getName())) { continue; } return shortenClassName(className) + '.' + stackTraceElement.getMethodName() + ':' + stackTraceElement.getLineNumber(); } return \"N/A\"; } \n### Response:", "ground_truth": "Returns called class.", "predict": "Returns the caller class name."}
{"ID": 1361, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String shortenClassName(final String className) { int lastDotIndex = className.lastIndexOf('.'); if (lastDotIndex == -1) { return className; } StringBuilder shortClassName = new StringBuilder(className.length()); int start = 0; while(true) { shortClassName.append(className.charAt(start)); int next = className.indexOf('.', start); if (next == lastDotIndex) { break; } start = next + 1; shortClassName.append('.'); } shortClassName.append(className.substring(lastDotIndex)); return shortClassName.toString(); } \n### Response:", "ground_truth": "Returns shorten class name.", "predict": "Returns a shorter version of the given class name.\n\n@param className the class name\n@return the shorter version of the given class name"}
{"ID": 1362, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public JsonSerializer excludeTypes(final Class... types) { if (excludedTypes == null) { excludedTypes = types; } else { excludedTypes = ArraysUtil.join(excludedTypes, types); } return this; } \n### Response:", "ground_truth": "Excludes types. Supports interfaces and subclasses as well.", "predict": "Excludes types from being serialized.\n\n@param types the types to exclude\n@return the JsonSerializer"}
{"ID": 1363, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void serialize(final Object source, final Appendable target) { JsonContext jsonContext = createJsonContext(target); jsonContext.serialize(source); } \n### Response:", "ground_truth": "Serializes object into provided appendable.", "predict": "Serializes the given source object into the given target object.\n\n@param source the source object\n@param target the target object"}
{"ID": 1364, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String serialize(final Object source) { FastCharBuffer fastCharBuffer = new FastCharBuffer(); serialize(source, fastCharBuffer); return fastCharBuffer.toString(); } \n### Response:", "ground_truth": "Serializes object into source.", "predict": "Serializes the given object into a String.\n\n@param source the object to serialize\n@return the serialized object"}
{"ID": 1365, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T extends Serializable> T cloneViaSerialization(final T obj) throws IOException, ClassNotFoundException { FastByteArrayOutputStream bos = new FastByteArrayOutputStream(); ObjectOutputStream out = null; ObjectInputStream in = null; Object objCopy = null; try { out = new ObjectOutputStream(bos); out.writeObject(obj); out.flush(); byte[] bytes = bos.toByteArray(); in = new ObjectInputStream(new ByteArrayInputStream(bytes)); objCopy = in.readObject(); } finally { StreamUtil.close(out); StreamUtil.close(in); } return (T) objCopy; } \n### Response:", "ground_truth": "Create object copy using serialization mechanism.", "predict": "Clones an object via serialization.\n\n@param obj the object to clone\n@return the clone\n@throws IOException if an IOException occurs\n@throws ClassNotFoundException if an exception occurs"}
{"ID": 1366, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void writeObject(final File dest, final Object object) throws IOException { FileOutputStream fos = null; BufferedOutputStream bos = null; ObjectOutputStream oos = null; try { fos = new FileOutputStream(dest); bos = new BufferedOutputStream(fos); oos = new ObjectOutputStream(bos); oos.writeObject(object); } finally { StreamUtil.close(oos); StreamUtil.close(bos); StreamUtil.close(fos); } } \n### Response:", "ground_truth": "Writes serializable object to a file. Existing file will be overwritten.", "predict": "Writes an object to a file.\n\n@param dest\nthe destination file\n@param object\nthe object to be written\n@throws IOException\nif an IOException occurs"}
{"ID": 1367, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Object readObject(final File source) throws IOException, ClassNotFoundException { Object result = null; FileInputStream fis = null; BufferedInputStream bis = null; ObjectInputStream ois = null; try { fis = new FileInputStream(source); bis = new BufferedInputStream(fis); ois = new ObjectInputStream(bis); result = ois.readObject(); } finally { StreamUtil.close(ois); StreamUtil.close(bis); StreamUtil.close(fis); } return result; } \n### Response:", "ground_truth": "Reads serialized object from the file.", "predict": "Reads a file into an object.\n\n@param source the file to read\n@return the object read\n@throws IOException if the file cannot be read\n@throws ClassNotFoundException if the file is not a class\n@throws NullPointerException if the file is null"}
{"ID": 1368, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static byte[] objectToByteArray(final Object obj) throws IOException { FastByteArrayOutputStream bos = new FastByteArrayOutputStream(); ObjectOutputStream oos = null; try { oos = new ObjectOutputStream(bos); oos.writeObject(obj); } finally { StreamUtil.close(oos); } return bos.toByteArray(); } \n### Response:", "ground_truth": "Serialize an object to byte array.", "predict": "Converts an object to a byte array.\n\n@param obj the object to convert\n@return the byte array\n@throws IOException if an IOException occurs"}
{"ID": 1369, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Object byteArrayToObject(final byte[] data) throws IOException, ClassNotFoundException { Object retObj = null; ByteArrayInputStream bais = new ByteArrayInputStream(data); ObjectInputStream ois = null; try { ois = new ObjectInputStream(bais); retObj = ois.readObject(); } finally { StreamUtil.close(ois); } return retObj; } \n### Response:", "ground_truth": "De-serialize an object from byte array.", "predict": "Convert byte array to Object\n\n@param data byte array\n@return Object\n@throws IOException\n@throws ClassNotFoundException"}
{"ID": 1370, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String[][] resolveMappedTypesTableNames(final Class[] types) { if (cachedMappedNames == null) { String[][] names = new String[types.length][]; for (int i = 0; i < types.length; i++) { Class type = types[i]; if (type != null) { DbEntityDescriptor ded = cachedDbEntityDescriptors[i]; if (ded != null) { Class[] mappedTypes = ded.getMappedTypes(); if (mappedTypes != null) { names[i] = createTypesTableNames(mappedTypes); } } } } cachedMappedNames = names; } return cachedMappedNames; } \n### Response:", "ground_truth": "Resolved mapped type names for each type.", "predict": "Resolve the mapped types names.\n\n@param types the types\n@return the string[][]"}
{"ID": 1371, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String[] createTypesTableNames(final Class[] types) { String[] names = new String[types.length]; for (int i = 0; i < types.length; i++) { if (types[i] == null) { names[i] = null; continue; } DbEntityDescriptor ded = dbEntityManager.lookupType(types[i]); if (ded != null) { String tableName = ded.getTableName(); tableName = tableName.toUpperCase(); names[i] = tableName; } } return names; } \n### Response:", "ground_truth": "Creates table names for given types.", "predict": "Create the table names for the given types.\n\n@param types the types\n@return the table names"}
{"ID": 1372, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"unchecked\"}) protected Object readColumnValue(final int colNdx, final Class destinationType, final Class<? extends SqlType> sqlTypeClass, final int columnDbSqlType) { if (colNdx != cachedColumnNdx) { try { SqlType sqlType; if (sqlTypeClass != null) { sqlType = SqlTypeManager.get().lookupSqlType(sqlTypeClass); } else { sqlType = SqlTypeManager.get().lookup(destinationType); } if (sqlType != null) { cachedColumnValue = sqlType.readValue(resultSet, colNdx + 1, destinationType, columnDbSqlType); } else { cachedColumnValue = resultSet.getObject(colNdx + 1); cachedColumnValue = TypeConverterManager.get().convertType(cachedColumnValue, destinationType); } } catch (SQLException sex) { throw new DbOomException(dbOomQuery, \"Invalid value for column #\" + (colNdx + 1), sex); } cachedColumnNdx = colNdx; } return cachedColumnValue; } \n### Response:", "ground_truth": "Reads column value from result set. Since this method may be called more then once for\nthe same column, it caches column values.", "predict": "Read column value.\n\n@param colNdx\nthe col ndx\n@param destinationType\nthe destination type\n@param sqlTypeClass\nthe sql type class\n@param columnDbSqlType\nthe column db sql type\n@return the object"}
{"ID": 1373, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void cacheResultSetEntities(final Object[] result) { if (entitiesCache == null) { entitiesCache = new HashMap<>(); } for (int i = 0; i < result.length; i++) { Object object = result[i]; if (object == null) { continue; } DbEntityDescriptor ded = cachedDbEntityDescriptors[i]; if (ded == null) { // not a type, continue continue; } // calculate key Object key; if (ded.hasIdColumn()) { //noinspection unchecked key = ded.getKeyValue(object); } else { key = object; } Object cachedObject = entitiesCache.get(key); if (cachedObject == null) { // object is not in the cache, add it entitiesCache.put(key, object); } else { // object is in the cache, replace it result[i] = cachedObject; } } } \n### Response:", "ground_truth": "Caches returned entities. Replaces new instances with existing ones.", "predict": "Caching the result set entities.\n\n@param result the result"}
{"ID": 1374, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ProviderDefinition[] resolve(final Class type, final String name) { ClassDescriptor cd = ClassIntrospector.get().lookup(type); MethodDescriptor[] methods = cd.getAllMethodDescriptors(); List<ProviderDefinition> list = new ArrayList<>(); for (MethodDescriptor methodDescriptor : methods) { Method method = methodDescriptor.getMethod(); PetiteProvider petiteProvider = method.getAnnotation(PetiteProvider.class); if (petiteProvider == null) { continue; } String providerName = petiteProvider.value(); if (StringUtil.isBlank(providerName)) { // default provider name providerName = method.getName(); if (providerName.endsWith(\"Provider\")) { providerName = StringUtil.substring(providerName, 0, -8); } } ProviderDefinition providerDefinition; if (Modifier.isStatic(method.getModifiers())) { providerDefinition = new ProviderDefinition(providerName, method); } else { providerDefinition = new ProviderDefinition(providerName, name, method); } list.add(providerDefinition); } ProviderDefinition[] providers; if (list.isEmpty()) { providers = ProviderDefinition.EMPTY; } else { providers = list.toArray(new ProviderDefinition[0]); } return providers; } \n### Response:", "ground_truth": "Resolves all providers in the class", "predict": "Resolve providers for a given type.\n\n@param type the type\n@param name the name\n@return the providers"}
{"ID": 1375, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String applyToTableName(final String tableName) { String entityName = convertTableNameToEntityName(tableName); return convertEntityNameToTableName(entityName); } \n### Response:", "ground_truth": "Applies table naming strategy to given table name hint.\nReturns full table name.", "predict": "Convert table name to table name.\n\n@param tableName table name\n@return table name"}
{"ID": 1376, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean isConnectionValid(final ConnectionData connectionData, final long now) { if (!validateConnection) { return true; } if (now < connectionData.lastUsed + validationTimeout) { return true; } Connection conn = connectionData.connection; if (validationQuery == null) { try { return !conn.isClosed(); } catch (SQLException sex) { return false; } } boolean valid = true; Statement st = null; try { st = conn.createStatement(); st.execute(validationQuery); } catch (SQLException sex) { valid = false; } finally { if (st != null) { try { st.close(); } catch (SQLException ignore) { } } } return valid; } \n### Response:", "ground_truth": "Checks if existing connection is valid and available. It may happens\nthat if connection is not used for a while it becomes inactive,\nalthough not technically closed.", "predict": "Checks if the connection is valid.\n\n@param connectionData\n@param now\n@return"}
{"ID": 1377, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected void renderView(final ActionRequest actionRequest, final String target) throws Exception { HttpServletRequest request = actionRequest.getHttpServletRequest(); HttpServletResponse response = actionRequest.getHttpServletResponse(); RequestDispatcher dispatcher = request.getRequestDispatcher(target); if (dispatcher == null) { response.sendError(SC_NOT_FOUND, \"Result not found: \" + target); // should never happened return; } // If we're included, then include the view, otherwise do forward. // This allow the page to, for example, set content type. if (DispatcherUtil.isPageIncluded(request, response)) { dispatcher.include(request, response); } else { dispatcher.forward(request, response); } } \n### Response:", "ground_truth": "Renders the view by dispatching to the target JSP.", "predict": "Renders the given view.\n\n@param actionRequest the action request\n@param target the target\n@throws Exception if an error occurs"}
{"ID": 1378, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected String locateTarget(final ActionRequest actionRequest, String path) { String target; if (path.endsWith(StringPool.SLASH)) { path = path + defaultViewPageName; } for (final String ext : defaultViewExtensions) { target = path + ext; if (targetExists(actionRequest, target)) { return target; } } return null; } \n### Response:", "ground_truth": "Locates target using path with various extensions appended.", "predict": "Locates the target of the given path.\n\n@param actionRequest the action request\n@param path the path\n@return the target of the given path"}
{"ID": 1379, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public PrintWriter getWriter() throws IOException { preResponseCommit(); if (buffer == null) { return getResponse().getWriter(); } return buffer.getWriter(); } \n### Response:", "ground_truth": "Returns buffered writer if buffering is enabled,\notherwise returns the original writer.", "predict": "Returns the writer for the response."}
{"ID": 1380, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public ServletOutputStream getOutputStream() throws IOException { preResponseCommit(); if (buffer == null) { return getResponse().getOutputStream(); } return buffer.getOutputStream(); } \n### Response:", "ground_truth": "Returns buffered output stream if buffering is enabled,\notherwise returns the original stream.", "predict": "Returns the output stream for the response."}
{"ID": 1381, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void writeContentToResponse(final char[] content) throws IOException { if (buffer == null) { return; } if (buffer.isUsingStream()) { ServletOutputStream outputStream = getResponse().getOutputStream(); String encoding = getContentTypeEncoding(); if (encoding == null) { outputStream.write(CharUtil.toByteArray(content)); } else { outputStream.write(CharUtil.toByteArray(content, encoding)); } outputStream.flush(); } else { Writer out = getResponse().getWriter(); out.write(content); out.flush(); } } \n### Response:", "ground_truth": "Writes content to original output stream, using either output stream or writer, depending\non how the content was buffered. It is assumed that provided content is a modified\nwrapped content.", "predict": "Writes the content to the response.\n\n@param content the content to write\n@throws IOException if an IOException occurs"}
{"ID": 1382, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void setContentType(final String type) { super.setContentType(type); contentTypeResolver = new ContentTypeHeaderResolver(type); if (bufferContentType(type, contentTypeResolver.getMimeType(), contentTypeResolver.getEncoding())) { enableBuffering(); } else { disableBuffering(); } } \n### Response:", "ground_truth": "Sets the content type and enables or disables buffering.", "predict": "Sets the content type.\n\n@param type the content type"}
{"ID": 1383, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void print(final String string) throws IOException { if (isBufferStreamBased()) { String encoding = getContentTypeEncoding(); byte[] bytes; if (encoding == null) { bytes = string.getBytes(); } else { bytes = string.getBytes(encoding); } buffer.getOutputStream().write(bytes); return; } // make sure at least writer is initialized buffer.getWriter().write(string); } \n### Response:", "ground_truth": "Appends string to the buffer.", "predict": "Writes the given string to the output stream.\n\n@param string the string to be written\n@throws IOException if an I/O error occurs"}
{"ID": 1384, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected JsonResult login() { T authToken; authToken = loginViaBasicAuth(servletRequest); if (authToken == null) { authToken = loginViaRequestParams(servletRequest); } if (authToken == null) { log.warn(\"Login failed.\"); return JsonResult.of(HttpStatus.error401().unauthorized(\"Login failed.\")); } log.info(\"login OK!\"); final UserSession<T> userSession = new UserSession<>(authToken, userAuth.tokenValue(authToken)); userSession.start(servletRequest, servletResponse); // return token return tokenAsJson(authToken); } \n### Response:", "ground_truth": "Authenticate user and start user session.", "predict": "Logins the user.\n\n@return the login result"}
{"ID": 1385, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected JsonResult tokenAsJson(final T authToken) { final JsonObject jsonObject = new JsonObject(); jsonObject.put(\"token\", userAuth.tokenValue(authToken)); return JsonResult.of(jsonObject); } \n### Response:", "ground_truth": "Prepares the JSON payload that carries on the token value.", "predict": "Converts the token to a JSON object.\n\n@param authToken the token\n@return the JSON object"}
{"ID": 1386, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected T loginViaBasicAuth(final HttpServletRequest servletRequest) { final String username = ServletUtil.resolveAuthUsername(servletRequest); if (username == null) { return null; } final String password = ServletUtil.resolveAuthPassword(servletRequest); return userAuth.login(username, password); } \n### Response:", "ground_truth": "Tries to login user with basic authentication.", "predict": "Login via basic auth.\n\n@param servletRequest the servlet request\n@return the login result"}
{"ID": 1387, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected JsonResult logout() { log.debug(\"logout user\"); UserSession.stop(servletRequest, servletResponse); return JsonResult.of(HttpStatus.ok()); } \n### Response:", "ground_truth": "Logout hook.", "predict": "Logs out the user."}
{"ID": 1388, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static File toContainerFile(final URL url) { String protocol = url.getProtocol(); if (protocol.equals(FILE_PROTOCOL)) { return toFile(url); } String path = url.getPath(); return new File(URI.create( path.substring(ZERO, path.lastIndexOf(\"!/\")))); } \n### Response:", "ground_truth": "Returns a file of either a folder or a containing archive.", "predict": "Converts a URL to a File.\n\n@param url the URL to convert\n@return the File object representing the URL"}
{"ID": 1389, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static File mkdirs(final File dirs) throws IOException { if (dirs.exists()) { checkIsDirectory(dirs); return dirs; } return checkCreateDirectory(dirs); } \n### Response:", "ground_truth": "Creates all directories at once.\n\n@param dirs Directories to make.\n@throws IOException if cannot create directory.", "predict": "Create a directory if it doesn't exist."}
{"ID": 1390, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static File mkdir(final File dir) throws IOException { if (dir.exists()) { checkIsDirectory(dir); return dir; } return checkCreateDirectory(dir); } \n### Response:", "ground_truth": "Creates single directory.\n\n@throws IOException if cannot create directory.", "predict": "Create a directory if it doesn't exist.\n\n@param dir the directory to create\n@return the directory\n@throws IOException if the directory cannot be created"}
{"ID": 1391, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static void _copyFile(final File srcFile, final File destFile) throws IOException { if (destFile.exists()) { if (destFile.isDirectory()) { throw new IOException(\"Destination '\" + destFile + \"' is a directory\"); } } // do copy file FileInputStream input = null; FileOutputStream output = null; try { input = new FileInputStream(srcFile); output = new FileOutputStream(destFile, false); StreamUtil.copy(input, output); } finally { StreamUtil.close(output); StreamUtil.close(input); } // done if (srcFile.length() != destFile.length()) { throw new IOException(\"Copy file failed of '\" + srcFile + \"' to '\" + destFile + \"' due to different sizes\"); } destFile.setLastModified(srcFile.lastModified()); } \n### Response:", "ground_truth": "Internal file copy when most of the pre-checking has passed.\n\n@param srcFile  Source {@link File}.\n@param destFile Destination {@link File}.\n@throws IOException if cannot copy", "predict": "Copy a file from srcFile to destFile.\n\n@param srcFile source file\n@param destFile destination file\n@throws IOException if copy fails"}
{"ID": 1392, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void copyDir(final File srcDir, final File destDir) throws IOException { checkDirCopy(srcDir, destDir); _copyDirectory(srcDir, destDir); } \n### Response:", "ground_truth": "Copies directory with specified copy params.\n\n@see #_copyDirectory(File, File)", "predict": "Copy a directory.\n\n@param srcDir source directory\n@param destDir destination directory\n@throws IOException if an IOException occurs"}
{"ID": 1393, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static File moveFileToDir(final File srcFile, final File destDir) throws IOException { checkExistsAndDirectory(destDir); return moveFile(srcFile, file(destDir, srcFile.getName())); } \n### Response:", "ground_truth": "Moves a file to a directory.\n\n@param srcFile Source {@link File}.\n@param destDir Destination directory.\n@throws IOException if there is an error during move.", "predict": "Moves the given source file to the given destination directory.\n\n@param srcFile source file\n@param destDir destination directory\n@return source file\n@throws IOException if destination file does not exist"}
{"ID": 1394, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static void _moveDirectory(final File srcDest, File destDir) throws IOException { if (destDir.exists()) { checkIsDirectory(destDir); destDir = file(destDir, destDir.getName()); destDir.mkdir(); } final boolean rename = srcDest.renameTo(destDir); if (!rename) { _copyDirectory(srcDest, destDir); deleteDir(srcDest); } } \n### Response:", "ground_truth": "Moves a directory.\n\n@param srcDest Source directory\n@param destDir Destination directory.\n@throws IOException if there is an error during move.", "predict": "Moves the source directory to the destination directory.\n\n@param srcDest source directory\n@param destDir destination directory\n@throws IOException if the destination directory cannot be created"}
{"ID": 1395, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void cleanDir(final File destDir) throws IOException { checkExists(destDir); checkIsDirectory(destDir); File[] files = destDir.listFiles(); if (files == null) { throw new IOException(\"Failed to list contents of: \" + destDir); } IOException exception = null; for (File file : files) { try { if (file.isDirectory()) { deleteDir(file); } else { file.delete(); } } catch (IOException ioex) { exception = ioex; continue; } } if (exception != null) { throw exception; } } \n### Response:", "ground_truth": "Cleans a directory without deleting it.\n\n@param destDir destination to clean.\n@throws IOException if something went wrong.", "predict": "Removes all files and directories from the given directory.\n\n@param destDir directory to clean\n@throws IOException if cleaning fails"}
{"ID": 1396, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static char[] readUTFChars(final File file) throws IOException { checkExists(file); checkIsFile(file); UnicodeInputStream in = unicodeInputStreamOf(file); try { return StreamUtil.readChars(in, detectEncoding(in)); } finally { StreamUtil.close(in); } } \n### Response:", "ground_truth": "Reads UTF file content as char array.\n\n@param file {@link File} to read.\n@return array of characters.\n@throws IOException if something went wrong.", "predict": "Reads a file as UTF-8 characters.\n\n@param file the file to read\n@return the characters read\n@throws IOException if the file cannot be read"}
{"ID": 1397, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static char[] readChars(final File file, final String encoding) throws IOException { checkExists(file); checkIsFile(file); InputStream in = streamOf(file, encoding); try { return StreamUtil.readChars(in, encoding); } finally { StreamUtil.close(in); } } \n### Response:", "ground_truth": "Reads file content as char array.\n\n@param file     {@link File} to read.\n@param encoding Encoding to use.\n@return array of characters.\n@throws IOException if something went wrong.", "predict": "Reads a char array from a file.\n\n@param file the file to read from\n@param encoding the encoding to use\n@return the char array\n@throws IOException if the file cannot be read"}
{"ID": 1398, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void writeChars(final File dest, final char[] data, final String encoding) throws IOException { outChars(dest, data, encoding, false); } \n### Response:", "ground_truth": "Write characters. append = false\n\n@see #outChars(File, char[], String, boolean)", "predict": "Writes the given char array to the given destination file.\n\n@param dest\nthe destination file\n@param data\nthe char array\n@param encoding\nthe encoding\n@throws IOException\nif an IOException occurs"}
{"ID": 1399, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void writeString(final File dest, final String data, final String encoding) throws IOException { outString(dest, data, encoding, false); } \n### Response:", "ground_truth": "Writes String. append = false\n\n@see #outString(File, String, String, boolean)", "predict": "Writes a string to the given destination file.\n\n@param dest\nthe destination file\n@param data\nthe string to write\n@param encoding\nthe encoding to use\n@throws IOException\nif an IOException occurs"}
{"ID": 1400, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void appendString(final File dest, final String data, final String encoding) throws IOException { outString(dest, data, encoding, true); } \n### Response:", "ground_truth": "Appends String. append = true\n\n@see #outString(File, String, String, boolean)", "predict": "Append a string to the given destination file.\n\n@param dest\nthe destination file\n@param data\nthe string to append\n@param encoding\nthe encoding to use\n@throws IOException\nif an IOException occurs"}
{"ID": 1401, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static byte[] readBytes(final File file, final int count) throws IOException { checkExists(file); checkIsFile(file); long numToRead = file.length(); if (numToRead >= Integer.MAX_VALUE) { throw new IOException(\"File is larger then max array size\"); } if (count > NEGATIVE_ONE && count < numToRead) { numToRead = count; } byte[] bytes = new byte[(int) numToRead]; RandomAccessFile randomAccessFile = new RandomAccessFile(file, \"r\"); randomAccessFile.readFully(bytes); randomAccessFile.close(); return bytes; } \n### Response:", "ground_truth": "Read file and returns byte array with contents.\n\n@param file  {@link File} to read\n@param count number of bytes to read\n@return byte array from {@link File} contents.\n@throws IOException if not a {@link File} or {@link File} does not exist or file size is\nlarger than {@link Integer#MAX_VALUE}.", "predict": "Reads a number of bytes from a file.\n\n@param file the file to read from\n@param count the number of bytes to read\n@return the number of bytes read\n@throws IOException if the file cannot be read"}
{"ID": 1402, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void writeBytes(final File dest, final byte[] data, final int off, final int len) throws IOException { outBytes(dest, data, off, len, false); } \n### Response:", "ground_truth": "Write bytes. append = false\n\n@see #outBytes(File, byte[], int, int, boolean)", "predict": "Writes the given byte array to the given destination file.\n\n@param dest\nthe destination file\n@param data\nthe byte array\n@param off\nthe offset in the byte array\n@param len\nthe length of the byte array\n@throws IOException\nif an IOException occurs"}
{"ID": 1403, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void appendBytes(final File dest, final byte[] data, final int off, final int len) throws IOException { outBytes(dest, data, off, len, true); } \n### Response:", "ground_truth": "Appends bytes. append = true\n\n@see #outBytes(File, byte[], int, int, boolean)", "predict": "Appends the given byte array to the given destination file.\n\n@param dest\nthe destination file\n@param data\nthe byte array\n@param off\nthe offset in the byte array\n@param len\nthe length of the byte array\n@throws IOException\nif an IOException occurs"}
{"ID": 1404, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void copy(final File src, final File dest) throws IOException { if (src.isDirectory()) { copyDir(src, dest); return; } if (dest.isDirectory()) { copyFileToDir(src, dest); return; } copyFile(src, dest); } \n### Response:", "ground_truth": "Smart copy. If source is a directory, copy it to destination.\nOtherwise, if destination is directory, copy source file to it.\nOtherwise, try to copy source file to destination file.\n\n@param src  source {@link File}\n@param dest destination {@link File}\n@throws IOException if there is an error copying.\n@see #copyDir(File, File)\n@see #copyFileToDir(File, File)\n@see #copyFile(File, File)", "predict": "Copies the given source file to the given destination file.\n\n@param src source file\n@param dest destination file\n@throws IOException if the source file cannot be read"}
{"ID": 1405, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void delete(final File dest) throws IOException { if (dest.isDirectory()) { deleteDir(dest); return; } deleteFile(dest); } \n### Response:", "ground_truth": "Smart delete of destination file or directory.\n\n@throws IOException if there is an issue deleting the file/directory.\n@see #deleteFile(File)\n@see #deleteDir(File)", "predict": "Deletes a file or directory.\n\n@param dest\n@throws IOException"}
{"ID": 1406, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static File createTempDirectory(final String prefix, final String suffix, final File tempDir) throws IOException { File file = createTempFile(prefix, suffix, tempDir); file.delete(); file.mkdir(); return file; } \n### Response:", "ground_truth": "Creates temporary directory.\n\n@see #createTempFile(String, String, File)", "predict": "Create a temp directory.\n\n@param prefix\n@param suffix\n@param tempDir\n@return\n@throws IOException"}
{"ID": 1407, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isBinary(final File file) throws IOException { byte[] bytes = readBytes(file, 128); for (byte b : bytes) { if (b < 32 && b != 9 && b != 10 && b != 13) { return true; } } return false; } \n### Response:", "ground_truth": "Checks the start of the file for ASCII control characters\n\n@param file {@link File}\n@return true if the the start of the {@link File} is ASCII control characters.", "predict": "Checks if the given file is binary.\n\n@param file the file to check\n@return true if the file is binary, false otherwise\n@throws IOException if the file cannot be read"}
{"ID": 1408, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static void checkDirCopy(final File srcDir, final File destDir) throws IOException { checkExists(srcDir); checkIsDirectory(srcDir); if (equals(srcDir, destDir)) { throw new IOException(\"Source '\" + srcDir + \"' and destination '\" + destDir + \"' are equal\"); } } \n### Response:", "ground_truth": "Checks that srcDir exists, that it is a directory and if srcDir and destDir are not equal.\n\n@param srcDir  Source directory\n@param destDir Destination directory\n@throws IOException if any of the above conditions are not true.", "predict": "Checks that the source and destination directories are different.\n\n@param srcDir source directory\n@param destDir destination directory\n@throws IOException if the source and destination are equal"}
{"ID": 1409, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static void checkFileCopy(final File srcFile, final File destFile) throws IOException { checkExists(srcFile); checkIsFile(srcFile); if (equals(srcFile, destFile)) { throw new IOException(\"Files '\" + srcFile + \"' and '\" + destFile + \"' are equal\"); } File destParent = destFile.getParentFile(); if (destParent != null && !destParent.exists()) { checkCreateDirectory(destParent); } } \n### Response:", "ground_truth": "Checks that file copy can occur.\n\n@param srcFile  Source {@link File}\n@param destFile Destination {@link File}\n@throws IOException if srcFile does not exist or is not a file or\nsrcFile and destFile are equal or cannot create ancestor directories.", "predict": "Checks if the source file is a file and if it is a directory.\n\n@param srcFile source file\n@param destFile destination file\n@throws IOException if the destination file is not a file"}
{"ID": 1410, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void printUsage(final String commandName) { final StringBuilder usage = new StringBuilder(commandName); for (final Option option : options) { if (option.shortName != null) { usage.append(\" [-\").append(option.shortName).append(\"]\"); } else if (option.longName != null) { usage.append(\" [--\").append(option.longName).append(\"]\"); } } for (final Param param : params) { usage.append(\" \").append(param.label); } System.out.println(usage); } \n### Response:", "ground_truth": "Prints the usage line.", "predict": "Prints the usage of the given command.\n\n@param commandName the name of the command"}
{"ID": 1411, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Method resolveActionMethod(final Class<?> actionClass, final String methodName) { MethodDescriptor methodDescriptor = ClassIntrospector.get().lookup(actionClass).getMethodDescriptor(methodName, false); if (methodDescriptor == null) { throw new MadvocException(\"Public method not found: \" + actionClass.getSimpleName() + \"#\" + methodName); } return methodDescriptor.getMethod(); } \n### Response:", "ground_truth": "Resolves action method for given action class ane method name.", "predict": "Resolves the action method.\n\n@param actionClass the action class\n@param methodName the method name\n@return the action method"}
{"ID": 1412, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ActionRuntime registerAction(final Class actionClass, final String actionMethodName, final ActionDefinition actionDefinition) { Method actionMethod = resolveActionMethod(actionClass, actionMethodName); return registerAction(actionClass, actionMethod, actionDefinition); } \n### Response:", "ground_truth": "Registers action with provided action class and method name.\n@see #registerAction(Class, Method, ActionDefinition)", "predict": "Registers an action method.\n\n@param actionClass the action class\n@param actionMethodName the action method name\n@param actionDefinition the action definition\n@return the action runtime"}
{"ID": 1413, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerPathAlias(final String alias, final String path) { final String existing = pathAliases.put(alias, path); if (existing != null) { throw new MadvocException(\"Duplicated alias detected: [\" + alias + \"] for paths: \" + path + \", \" + existing); } } \n### Response:", "ground_truth": "Registers new path alias.", "predict": "Register a path alias.\n\n@param alias the alias\n@param path the path"}
{"ID": 1414, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean next() { if (!looping) { return false; } if (last) { return false; } if (count == 0) { value = start; first = true; } else { value += step; first = false; } count++; last = isLastIteration(value + step); return true; } \n### Response:", "ground_truth": "Iterates to next value at the beginning of the loop.", "predict": "Returns true if the next iteration should be performed."}
{"ID": 1415, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static CharArraySequence from(final char[] value, final int offset, final int len) { final char[] buffer = new char[value.length]; System.arraycopy(value, offset, buffer, 0, len); return new CharArraySequence(buffer); } \n### Response:", "ground_truth": "Static constructor that creates a char sequence by making a copy of provided char array.", "predict": "Creates a CharArraySequence from a char array.\n\n@param value the char array\n@param offset the offset\n@param len the length\n@return the CharArraySequence"}
{"ID": 1416, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object execute() throws Exception { String methodName = ProxyTarget.targetMethodName(); Class[] argTypes = ProxyTarget.createArgumentsClassArray(); Object[] args = ProxyTarget.createArgumentsArray(); // lookup method on target object class (and not #targetClass!() Class type = _target.getClass(); Method method = type.getMethod(methodName, argTypes); // remember context classloader ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader(); Object result; try { // change class loader Thread.currentThread().setContextClassLoader(type.getClassLoader()); // invoke result = method.invoke(_target, args); } finally { // return context classloader Thread.currentThread().setContextClassLoader(contextClassLoader); } return ProxyTarget.returnValue(result); } \n### Response:", "ground_truth": "Looks up for method in target object and invokes it using reflection.", "predict": "Executes the target method.\n\n@return the result of the execution\n@throws Exception if an error occurs"}
{"ID": 1417, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public final boolean matchUpperCase(final char[] uppercaseTarget) { if (ndx + uppercaseTarget.length > total) { return false; } int j = ndx; for (int i = 0; i < uppercaseTarget.length; i++, j++) { final char c = CharUtil.toUpperAscii(input[j]); if (c != uppercaseTarget[i]) { return false; } } return true; } \n### Response:", "ground_truth": "Matches char buffer given in uppercase with content at current location, that will\nbe converted to upper case to make case-insensitive matching.", "predict": "Returns true if the input matches the specified uppercase target.\n\n@param uppercaseTarget the specified uppercase target\n@return true if the input matches the specified uppercase target"}
{"ID": 1418, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected final CharSequence charSequence(final int from, final int to) { if (from == to) { return CharArraySequence.EMPTY; } return CharArraySequence.of(input, from, to - from); } \n### Response:", "ground_truth": "Creates char sub-sequence from the input.", "predict": "Returns a sequence of characters from the specified range.\n\n@param from the starting index\n@param to   the ending index\n@return the sequence"}
{"ID": 1419, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static URL[] of(ClassLoader classLoader, Class clazz) { if (clazz == null) { clazz = ClassPathURLs.class; } if (classLoader == null) { classLoader = clazz.getClassLoader(); } final Set<URL> urls = new LinkedHashSet<>(); while (classLoader != null) { if (classLoader instanceof URLClassLoader) { URLClassLoader urlClassLoader = (URLClassLoader) classLoader; URL[] allURLS = urlClassLoader.getURLs(); Collections.addAll(urls, allURLS); break; } URL classUrl = classModuleUrl(classLoader, clazz); if (classUrl != null) { urls.add(classUrl); } classUrl = classModuleUrl(classLoader, ClassPathURLs.class); if (classUrl != null) { urls.add(classUrl); } ModuleDescriptor moduleDescriptor = clazz.getModule().getDescriptor(); if (moduleDescriptor != null) { moduleDescriptor.requires().forEach(req -> { ModuleLayer.boot() .findModule(req.name()) .ifPresent(mod -> { ClassLoader moduleClassLoader = mod.getClassLoader(); if (moduleClassLoader != null) { URL url = moduleClassLoader.getResource(MANIFEST); if (url != null) { url = fixManifestUrl(url); urls.add(url); } } }); }); } classLoader = classLoader.getParent(); } return urls.toArray(new URL[0]); } \n### Response:", "ground_truth": "Returns urls for the classloader.\n\n@param classLoader classloader in which to find urls\n@return list of urls or {@code null} if not found", "predict": "Returns the URLs for the given class.\n\n@param classLoader the class loader\n@param clazz the class\n@return the URLs"}
{"ID": 1420, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Email bcc(final EmailAddress... bccs) { this.bcc = ArraysUtil.join(this.bcc, valueOrEmptyArray(bccs)); return _this(); } \n### Response:", "ground_truth": "Appends one or more BCC addresses.\n\n@param bccs vararg of {@link EmailAddress}es to set.\n@return this", "predict": "Add bcc fields.\n\n@param bccs bcc fields\n@return this"}
{"ID": 1421, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void register(final Class type, final TypeJsonSerializer typeJsonSerializer) { map.put(type, typeJsonSerializer); cache.clear(); } \n### Response:", "ground_truth": "Registers new serializer.", "predict": "Register a type JsonSerializer.\n\n@param type the type\n@param typeJsonSerializer the type JsonSerializer"}
{"ID": 1422, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected TypeJsonSerializer lookupSerializer(final Class type) { TypeJsonSerializer tjs = map.get(type); if (tjs == null) { if (defaultSerializerMap != null) { tjs = defaultSerializerMap.map.get(type); } } return tjs; } \n### Response:", "ground_truth": "Get type serializer from map. First the current map is used.\nIf element is missing, default map will be used, if exist.", "predict": "Lookup the serializer for the given type.\n\n@param type the type to lookup the serializer for\n@return the serializer for the given type"}
{"ID": 1423, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void parseRequestStream(final InputStream inputStream, final String encoding) throws IOException { setParsed(); MultipartRequestInputStream input = new MultipartRequestInputStream(inputStream); input.readBoundary(); while (true) { FileUploadHeader header = input.readDataHeader(encoding); if (header == null) { break; } if (header.isFile) { String fileName = header.fileName; if (fileName.length() > 0) { if (header.contentType.indexOf(\"application/x-macbinary\") > 0) { input.skipBytes(128); } } FileUpload newFile = fileUploadFactory.create(input); newFile.processStream(); if (fileName.length() == 0) { // file was specified, but no name was provided, therefore it was not uploaded if (newFile.getSize() == 0) { newFile.size = -1; } } putFile(header.formFieldName, newFile); } else { // no file, therefore it is regular form parameter. FastByteArrayOutputStream fbos = new FastByteArrayOutputStream(); input.copyAll(fbos); String value = encoding != null ? new String(fbos.toByteArray(), encoding) : new String(fbos.toByteArray()); putParameter(header.formFieldName, value); } input.skipBytes(1); input.mark(1); // read byte, but may be end of stream int nextByte = input.read(); if (nextByte == -1 || nextByte == '-') { input.reset(); break; } input.reset(); } } \n### Response:", "ground_truth": "Extracts uploaded files and parameters from the request data.", "predict": "Parses the request stream and extracts the form data.\n\n@param inputStream the input stream\n@param encoding the encoding\n@throws IOException if an IOException occurs"}
{"ID": 1424, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getParameter(final String paramName) { if (requestParameters == null) { return null; } String[] values = requestParameters.get(paramName); if ((values != null) && (values.length > 0)) { return values[0]; } return null; } \n### Response:", "ground_truth": "Returns single value of a parameter. If parameter name is used for\nmore then one parameter, only the first one will be returned.\n\n@return parameter value, or <code>null</code> if not found", "predict": "Gets the value of a parameter.\n\n@param paramName\nThe parameter name\n@return The value of the parameter"}
{"ID": 1425, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String[] getParameterValues(final String paramName) { if (requestParameters == null) { return null; } return requestParameters.get(paramName); } \n### Response:", "ground_truth": "Returns all values all of the values the given request parameter has.", "predict": "Get the request parameters.\n\n@param paramName the parameter name\n@return the request parameters"}
{"ID": 1426, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public FileUpload getFile(final String paramName) { if (requestFiles == null) { return null; } FileUpload[] values = requestFiles.get(paramName); if ((values != null) && (values.length > 0)) { return values[0]; } return null; } \n### Response:", "ground_truth": "Returns uploaded file.\n@param paramName parameter name of the uploaded file\n@return uploaded file or <code>null</code> if parameter name not found", "predict": "Gets the file with the given name.\n\n@param paramName\nThe name of the file to get.\n@return The file or null if the file is not present."}
{"ID": 1427, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public FileUpload[] getFiles(final String paramName) { if (requestFiles == null) { return null; } return requestFiles.get(paramName); } \n### Response:", "ground_truth": "Returns all uploaded files the given request parameter has.", "predict": "Get the uploaded files.\n\n@param paramName\n@return the uploaded files"}
{"ID": 1428, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void init(final FilterConfig filterConfig) { this.filterConfig = filterConfig; this.encoding = filterConfig.getInitParameter(\"encoding\"); if (this.encoding == null) { this.encoding = JoddCore.encoding; } this.ignore = Converter.get().toBooleanValue(filterConfig.getInitParameter(\"ignore\"), true); } \n### Response:", "ground_truth": "Place this filter into service.\n\n@param filterConfig The filter configuration object", "predict": "Initializes the filter.\n\n@param filterConfig the filter configuration"}
{"ID": 1429, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void parse(final DbSqlBuilder sqlBuilder, final String template) { int length = template.length(); int last = 0; while (true) { int mark = template.indexOf('$', last); if (mark == -1) { if (last < length) { sqlBuilder.appendRaw(template.substring(last)); } break; } int escapesCount = countEscapes(template, mark); // check if escaped if (escapesCount > 0) { boolean isEscaped = escapesCount % 2 != 0; int escapesToAdd = escapesCount >> 1; sqlBuilder.appendRaw(template.substring(last, mark - escapesCount + escapesToAdd) + '$'); if (isEscaped) { last = mark + 1; continue; } } else { sqlBuilder.appendRaw(template.substring(last, mark)); } int end; if (template.startsWith(MACRO_TABLE, mark)) { mark += MACRO_TABLE.length(); end = findMacroEnd(template, mark); onTable(sqlBuilder, template.substring(mark, end)); } else if (template.startsWith(MACRO_COLUMN, mark)) { mark += MACRO_COLUMN.length(); end = findMacroEnd(template, mark); onColumn(sqlBuilder, template.substring(mark, end)); } else if (template.startsWith(MACRO_MATCH, mark)) { mark += MACRO_MATCH.length(); end = findMacroEnd(template, mark); onMatch(sqlBuilder, template.substring(mark, end)); } else if (template.startsWith(MACRO_VALUE, mark)) { mark += MACRO_VALUE.length(); end = findMacroEnd(template, mark); onValue(sqlBuilder, template.substring(mark, end)); } else { mark++; // reference found end = mark; // find macro end while (end < length) { if (!isReferenceChar(template, end)) { break; } end++; } onReference(sqlBuilder, template.substring(mark, end)); end--; } end++; last = end; } } \n### Response:", "ground_truth": "Parses template and returns generated sql builder.", "predict": "Parses a template into a SQL string.\n\n@param sqlBuilder the sql builder to use\n@param template the template to parse"}
{"ID": 1430, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected int findMacroEnd(final String template, final int fromIndex) { int endIndex = template.indexOf('}', fromIndex); if (endIndex == -1) { throw new DbSqlBuilderException(\"Template syntax error, some macros are not closed. Error at: '...\" + template.substring(fromIndex)); } return endIndex; } \n### Response:", "ground_truth": "Finds macros end.", "predict": "Find the end of a macro.\n\n@param template the template\n@param fromIndex the index of the macro\n@return the index of the macro end"}
{"ID": 1431, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected int countEscapes(final String template, int macroIndex) { macroIndex--; int escapeCount = 0; while (macroIndex >= 0) { if (template.charAt(macroIndex) != ESCAPE_CHARACTER) { break; } escapeCount++; macroIndex--; } return escapeCount; } \n### Response:", "ground_truth": "Count escapes to the left.", "predict": "Counts the number of escaped characters in the given template.\n\n@param template the template to count\n@param macroIndex the macro index\n@return the number of escaped characters"}
{"ID": 1432, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String buildQuery(final HttpMultiMap<?> queryMap, final String encoding) { if (queryMap.isEmpty()) { return StringPool.EMPTY; } int queryMapSize = queryMap.size(); StringBand query = new StringBand(queryMapSize * 4); int count = 0; for (Map.Entry<String, ?> entry : queryMap) { String key = entry.getKey(); key = URLCoder.encodeQueryParam(key, encoding); Object value = entry.getValue(); if (value == null) { if (count != 0) { query.append('&'); } query.append(key); count++; } else { if (count != 0) { query.append('&'); } query.append(key); count++; query.append('='); String valueString = URLCoder.encodeQueryParam(value.toString(), encoding); query.append(valueString); } } return query.toString(); } \n### Response:", "ground_truth": "Builds a query string from given query map.", "predict": "Builds a query string from a map of query parameters.\n\n@param queryMap the map of query parameters\n@param encoding the encoding to use\n@return the query string"}
{"ID": 1433, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static HttpMultiMap<String> parseQuery(final String query, final boolean decode) { final HttpMultiMap<String> queryMap = HttpMultiMap.newCaseInsensitiveMap(); if (StringUtil.isBlank(query)) { return queryMap; } int lastNdx = 0; while (lastNdx < query.length()) { int ndx = query.indexOf('&', lastNdx); if (ndx == -1) { ndx = query.length(); } final String paramAndValue = query.substring(lastNdx, ndx); ndx = paramAndValue.indexOf('='); if (ndx == -1) { queryMap.add(paramAndValue, null); } else { String name = paramAndValue.substring(0, ndx); if (decode) { name = URLDecoder.decodeQuery(name); } String value = paramAndValue.substring(ndx + 1); if (decode) { value = URLDecoder.decodeQuery(value); } queryMap.add(name, value); } lastNdx += paramAndValue.length() + 1; } return queryMap; } \n### Response:", "ground_truth": "Parses query from give query string. Values are optionally decoded.", "predict": "Parses the query string and returns a map with the parameters.\n\n@param query the query string\n@param decode whether to decode the query string\n@return a map with the parameters"}
{"ID": 1434, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String prepareHeaderParameterName(final String headerName) { // special cases if (headerName.equals(\"etag\")) { return HttpBase.HEADER_ETAG; } if (headerName.equals(\"www-authenticate\")) { return \"WWW-Authenticate\"; } char[] name = headerName.toCharArray(); boolean capitalize = true; for (int i = 0; i < name.length; i++) { char c = name[i]; if (c == '-') { capitalize = true; continue; } if (capitalize) { name[i] = Character.toUpperCase(c); capitalize = false; } else { name[i] = Character.toLowerCase(c); } } return new String(name); } \n### Response:", "ground_truth": "Makes nice header names.", "predict": "Prepare a header parameter name.\n\n@param headerName the header name\n@return the prepared header parameter name"}
{"ID": 1435, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String extractMediaType(final String contentType) { int index = contentType.indexOf(';'); if (index == -1) { return contentType; } return contentType.substring(0, index); } \n### Response:", "ground_truth": "Extracts media-type from value of \"Content Type\" header.", "predict": "Extract media type from content type string.\n\n@param contentType content type string\n@return media type"}
{"ID": 1436, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String toHtml(final Node node, final Appendable appendable) { NodeVisitor renderer = createRenderer(appendable); node.visit(renderer); return appendable.toString(); } \n### Response:", "ground_truth": "Renders node to appendable.", "predict": "Renders the given node as HTML.\n\n@param node the node to render\n@param appendable the node to append to the output\n@return the rendered HTML"}
{"ID": 1437, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String toInnerHtml(final Node node, final Appendable appendable) { NodeVisitor renderer = createRenderer(appendable); node.visitChildren(renderer); return appendable.toString(); } \n### Response:", "ground_truth": "Renders node children to appendable.", "predict": "Converts the given node to an inner HTML string.\n\n@param node the node to convert\n@param appendable the node to append to the output\n@return the HTML string"}
{"ID": 1438, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void configureWith(final ServletContext servletContext) { webAppClassName = servletContext.getInitParameter(PARAM_MADVOC_WEBAPP); paramsFiles = Converter.get().toStringArray(servletContext.getInitParameter(PARAM_MADVOC_PARAMS)); madvocConfiguratorClassName = servletContext.getInitParameter(PARAM_MADVOC_CONFIGURATOR); } \n### Response:", "ground_truth": "Configures Madvoc by reading context init parameters.", "predict": "Configure the MADVOC application with the given servlet context.\n\n@param servletContext the servlet context"}
{"ID": 1439, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void reset() { this.ndx = 0; this.textLen = 0; this.path = new Path(); this.notFirstObject = false; if (useAltPaths) { path.altPath = new Path(); } if (classMetadataName != null) { mapToBean = createMapToBean(classMetadataName); } } \n### Response:", "ground_truth": "Resets JSON parser, so it can be reused.", "predict": "Resets the state of this object."}
{"ID": 1440, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public JsonParser lazy(final boolean lazy) { this.lazy = lazy; this.mapSupplier = lazy ? LAZYMAP_SUPPLIER : HASHMAP_SUPPLIER; this.listSupplier = lazy ? LAZYLIST_SUPPLIER : ARRAYLIST_SUPPLIER; return this; } \n### Response:", "ground_truth": "Defines how JSON parser works. In non-lazy mode, the whole JSON is parsed as it is.\nIn the lazy mode, not everything is parsed, but some things are left lazy.\nThis way we gain performance, especially on partial usage of the whole JSON.\nHowever, be aware that parser holds the input memory until the returned\nobjects are disposed.", "predict": "Sets the lazy property.\n\n@param lazy\nthe lazy\n@return the json parser"}
{"ID": 1441, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Class replaceWithMappedTypeForPath(final Class target) { if (mappings == null) { return target; } Class newType; // first try alt paths Path altPath = path.getAltPath(); if (altPath != null) { if (!altPath.equals(path)) { newType = mappings.get(altPath); if (newType != null) { return newType; } } } // now check regular paths newType = mappings.get(path); if (newType != null) { return newType; } return target; } \n### Response:", "ground_truth": "Replaces type with mapped type for current path.", "predict": "Replace the target class with the mapped type for the given path.\n\n@param target the target class\n@return the mapped type"}
{"ID": 1442, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> List<T> parseAsList(final String string, final Class<T> componentType) { return new JsonParser() .map(JsonParser.VALUES, componentType) .parse(string); } \n### Response:", "ground_truth": "Parses input JSON to a list with specified component type.", "predict": "Parse a string as a list of values.\n\n@param <T> the type of the values\n@param string the string to parse\n@param componentType the type of the values\n@return the parsed values"}
{"ID": 1443, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <K, V> Map<K, V> parseAsMap( final String string, final Class<K> keyType, final Class<V> valueType) { return new JsonParser() .map(JsonParser.KEYS, keyType) .map(JsonParser.VALUES, valueType) .parse(string); } \n### Response:", "ground_truth": "Parses input JSON to a list with specified key and value types.", "predict": "Parses a JSON string as a map.\n\n@param <K> the key type\n@param <V> the value type\n@param string the JSON string\n@return the parsed map"}
{"ID": 1444, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Object resolveLazyValue(Object value) { if (value instanceof Supplier) { value = ((Supplier)value).get(); } return value; } \n### Response:", "ground_truth": "Resolves lazy value during the parsing runtime.", "predict": "Resolve the value of the given value.\n\n@param value the value\n@return the resolved value"}
{"ID": 1445, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void skipObject() { int bracketCount = 1; boolean insideString = false; while (ndx < total) { final char c = input[ndx]; if (insideString) { if (c == '\\\"' && notPrecededByEvenNumberOfBackslashes()) { insideString = false; } } else if (c == '\\\"') { insideString = true; } else if (c == '{') { bracketCount++; } else if (c == '}') { bracketCount--; if (bracketCount == 0) { ndx++; return; } } ndx++; } } \n### Response:", "ground_truth": "Skips over complete object. It is not parsed, just skipped. It will be\nparsed later, but only if required.", "predict": "Skips the next object."}
{"ID": 1446, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String parseString() { char quote = '\\\"'; if (looseMode) { quote = consumeOneOf('\\\"', '\\''); if (quote == 0) { return parseUnquotedStringContent(); } } else { consume(quote); } return parseStringContent(quote); } \n### Response:", "ground_truth": "Parses a string.", "predict": "Parses a string."}
{"ID": 1447, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String parseStringContent(final char quote) { final int startNdx = ndx; // roll-out until the end of the string or the escape char while (true) { final char c = input[ndx]; if (c == quote) { // no escapes found, just use existing string ndx++; return new String(input, startNdx, ndx - 1 - startNdx); } if (c == '\\\\') { break; } ndx++; } // escapes found, proceed differently textLen = ndx - startNdx; growEmpty(); // for (int i = startNdx, j = 0; j < textLen; i++, j++) { // text[j] = input[i]; // } System.arraycopy(input, startNdx, text, 0, textLen); // escape char, process everything until the end while (true) { char c = input[ndx]; if (c == quote) { // done ndx++; final String str = new String(text, 0, textLen); textLen = 0; return str; } if (c == '\\\\') { // escape char found ndx++; c = input[ndx]; switch (c) { case '\\\"' : c = '\\\"'; break; case '\\\\' : c = '\\\\'; break; case '/' : c = '/'; break; case 'b' : c = '\\b'; break; case 'f' : c = '\\f'; break; case 'n' : c = '\\n'; break; case 'r' : c = '\\r'; break; case 't' : c = '\\t'; break; case 'u' : ndx++; c = parseUnicode(); break; default: if (looseMode) { if (c != '\\'') { c = '\\\\'; ndx--; } } else { syntaxError(\"Invalid escape char: \" + c); } } } text[textLen] = c; textLen++; growAndCopy(); ndx++; } } \n### Response:", "ground_truth": "Parses string content, once when starting quote has been consumed.", "predict": "Parse a string content.\n\n@param quote the quote character\n@return the string content"}
{"ID": 1448, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected char parseUnicode() { int i0 = CharUtil.hex2int(input[ndx++]); int i1 = CharUtil.hex2int(input[ndx++]); int i2 = CharUtil.hex2int(input[ndx++]); int i3 = CharUtil.hex2int(input[ndx]); return (char) ((i0 << 12) + (i1 << 8) + (i2 << 4) + i3); } \n### Response:", "ground_truth": "Parses 4 characters and returns unicode character.", "predict": "Parse Unicode character.\n\n@return Unicode character."}
{"ID": 1449, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String parseUnquotedStringContent() { final int startNdx = ndx; while (true) { final char c = input[ndx]; if (c <= ' ' || CharUtil.equalsOne(c, UNQUOTED_DELIMETERS)) { final int currentNdx = ndx; // done skipWhiteSpaces(); return new String(input, startNdx, currentNdx - startNdx); } ndx++; } } \n### Response:", "ground_truth": "Parses un-quoted string content.", "predict": "Parses the unquoted string content.\n\n@return the unquoted string content"}
{"ID": 1450, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Number parseNumber() { final int startIndex = ndx; char c = input[ndx]; boolean isDouble = false; boolean isExp = false; if (c == '-') { ndx++; } while (true) { if (isEOF()) { break; } c = input[ndx]; if (c >= '0' && c <= '9') { ndx++; continue; } if (c <= 32) { // white space break; } if (c == ',' || c == '}' || c == ']') { // delimiter break; } if (c == '.') { isDouble = true; } else if (c == 'e' || c == 'E') { isExp = true; } ndx++; } final String value = new String(input, startIndex, ndx - startIndex); if (isDouble) { return Double.valueOf(value); } long longNumber; if (isExp) { longNumber = Double.valueOf(value).longValue(); } else { if (value.length() >= 19) { // if string is 19 chars and longer, it can be over the limit BigInteger bigInteger = new BigInteger(value); if (isGreaterThanLong(bigInteger)) { return bigInteger; } longNumber = bigInteger.longValue(); } else { longNumber = Long.parseLong(value); } } if ((longNumber >= Integer.MIN_VALUE) && (longNumber <= Integer.MAX_VALUE)) { return (int) longNumber; } return longNumber; } \n### Response:", "ground_truth": "Parses JSON numbers.", "predict": "Parses a number from the input.\n\n@return the parsed number"}
{"ID": 1451, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Object parseArrayContent(Class targetType, Class componentType) { // detect special case if (targetType == Object.class) { targetType = List.class; } // continue targetType = replaceWithMappedTypeForPath(targetType); if (componentType == null && targetType != null && targetType.isArray()) { componentType = targetType.getComponentType(); } path.push(VALUES); componentType = replaceWithMappedTypeForPath(componentType); Collection<Object> target = newArrayInstance(targetType); boolean koma = false; mainloop: while (true) { skipWhiteSpaces(); char c = input[ndx]; if (c == ']') { if (koma) { syntaxError(\"Trailing comma\"); } ndx++; path.pop(); return target; } Object value = parseValue(componentType, null, null); target.add(value); skipWhiteSpaces(); c = input[ndx]; switch (c) { case ']': ndx++; break mainloop; case ',': ndx++; koma = true; break; default: syntaxError(\"Invalid char: expected ] or ,\"); } } path.pop(); if (targetType != null) { return convertType(target, targetType); } return target; } \n### Response:", "ground_truth": "Parses arrays, once when open bracket has been consumed.", "predict": "Parses an array of values.\n\n@param targetType the target type\n@param componentType the component type\n@return the parsed object"}
{"ID": 1452, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void createEmptyCtor() { final MethodVisitor mv = wd.dest.visitMethod(AsmUtil.ACC_PUBLIC, INIT, \"()V\", null, null); mv.visitCode(); mv.visitVarInsn(Opcodes.ALOAD, 0); mv.visitMethodInsn( Opcodes.INVOKESPECIAL, AsmUtil.SIGNATURE_JAVA_LANG_OBJECT, INIT, \"()V\", false); mv.visitInsn(Opcodes.RETURN); mv.visitMaxs(1, 1); mv.visitEnd(); } \n### Response:", "ground_truth": "Created empty default constructor.", "predict": "Creates the empty constructor."}
{"ID": 1453, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void createSimpleMethodWrapper(final MethodSignatureVisitor msign) { int access = msign.getAccessFlags(); access &= ~ACC_ABSTRACT; access &= ~ACC_NATIVE; MethodVisitor mv = wd.dest.visitMethod( access, msign.getMethodName(), msign.getDescription(), msign.getAsmMethodSignature(), msign.getExceptions()); mv.visitCode(); mv.visitVarInsn(ALOAD, 0); mv.visitFieldInsn(GETFIELD, wd.thisReference, wd.wrapperRef, wd.wrapperType); loadVirtualMethodArguments(mv, msign); if (wd.wrapInterface) { mv.visitMethodInsn( INVOKEINTERFACE, wd.wrapperType.substring(1, wd.wrapperType.length() - 1), msign.getMethodName(), msign.getDescription(), true); } else { mv.visitMethodInsn( INVOKEVIRTUAL, wd.wrapperType.substring(1, wd.wrapperType.length() - 1), msign.getMethodName(), msign.getDescription(), false); } ProxettaAsmUtil.prepareReturnValue(mv, msign, 0); visitReturn(mv, msign, true); mv.visitMaxs(0, 0); mv.visitEnd(); } \n### Response:", "ground_truth": "Creates simple method wrapper without proxy.", "predict": "Create a simple method wrapper for the given signature.\n\n@param msign the signature of the method to wrap"}
{"ID": 1454, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private String resolveRawTypeName(String typeName) { if (typeName == null) { return null; } boolean isArray = typeName.startsWith(StringPool.LEFT_SQ_BRACKET); if (isArray) { typeName = typeName.substring(1); } String rawTypeName; if (generics.containsKey(typeName)) { rawTypeName = generics.get(typeName); } else { rawTypeName = declaredTypeGeneric.getOrDefault(typeName, typeName); } if (isArray) { rawTypeName = '[' + rawTypeName; } return rawTypeName; } \n### Response:", "ground_truth": "Resolves raw type name using the generics information from the class\nor method information.", "predict": "Resolve raw type name.\n\n@param typeName the type name\n@return the string"}
{"ID": 1455, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public BeanReferences resolveReferenceFromValue(final PropertyDescriptor propertyDescriptor, final String refName) { BeanReferences references; if (refName == null || refName.isEmpty()) { references = buildDefaultReference(propertyDescriptor); } else { references = BeanReferences.of(refName); } references = references.removeDuplicateNames(); return references; } \n### Response:", "ground_truth": "Resolves reference from given values. Returns bean reference of given value or defaults\nif given name is blank.", "predict": "Resolves a reference from its value.\n\n@param propertyDescriptor the property descriptor\n@param refName the reference name\n@return the bean references"}
{"ID": 1456, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public BeanReferences[] resolveReferenceFromValues(final Executable methodOrCtor, final String... parameterReferences) { BeanReferences[] references = convertRefToReferences(parameterReferences); if (references == null || references.length == 0) { references = buildDefaultReferences(methodOrCtor); } if (methodOrCtor.getParameterTypes().length != references.length) { throw new PetiteException(\"Different number of method parameters and references for: \" + methodOrCtor.getDeclaringClass().getName() + '#' + methodOrCtor.getName()); } removeAllDuplicateNames(references); return references; } \n### Response:", "ground_truth": "Takes given parameters references and returns reference set for given method or constructor.", "predict": "Resolves references from the given values.\n\n@param methodOrCtor the method or ctor\n@param parameterReferences the parameter references\n@return the references"}
{"ID": 1457, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public BeanReferences[] readAllReferencesFromAnnotation(final Executable methodOrCtor) { PetiteInject petiteInject = methodOrCtor.getAnnotation(PetiteInject.class); final Parameter[] parameters = methodOrCtor.getParameters(); BeanReferences[] references; final boolean hasAnnotationOnMethodOrCtor; if (petiteInject != null) { references = convertAnnValueToReferences(petiteInject.value()); hasAnnotationOnMethodOrCtor = true; } else { references = new BeanReferences[parameters.length]; hasAnnotationOnMethodOrCtor = false; } int parametersWithAnnotationCount = 0; for (int i = 0; i < parameters.length; i++) { Parameter parameter = parameters[i]; petiteInject = parameter.getAnnotation(PetiteInject.class); if (petiteInject == null) { // no annotation on argument continue; } // there is annotation on argument, override values String annotationValue = readAnnotationValue(petiteInject); if (annotationValue != null) { references[i] = BeanReferences.of(annotationValue); } parametersWithAnnotationCount++; } if (!hasAnnotationOnMethodOrCtor) { if (parametersWithAnnotationCount == 0) { return null; } if (parametersWithAnnotationCount != parameters.length) { throw new PetiteException(\"All arguments must be annotated with PetiteInject\"); } } references = updateReferencesWithDefaultsIfNeeded(methodOrCtor, references); removeAllDuplicateNames(references); return references; } \n### Response:", "ground_truth": "Extracts references from method or constructor annotation.", "predict": "Returns all annotations that are annotated with the annotation class.\n\n@param methodOrCtor the method or constructor to read annotations for\n@return the annotations that are annotated with the annotation class"}
{"ID": 1458, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private BeanReferences[] buildDefaultReferences(final Executable methodOrCtor) { final boolean useParamo = petiteConfig.getUseParamo(); final PetiteReferenceType[] lookupReferences = petiteConfig.getLookupReferences(); MethodParameter[] methodParameters = null; if (useParamo) { methodParameters = Paramo.resolveParameters(methodOrCtor); } final Class[] paramTypes = methodOrCtor.getParameterTypes(); final BeanReferences[] references = new BeanReferences[paramTypes.length]; for (int j = 0; j < paramTypes.length; j++) { String[] ref = new String[lookupReferences.length]; references[j] = BeanReferences.of(ref); for (int i = 0; i < ref.length; i++) { switch (lookupReferences[i]) { case NAME: ref[i] = methodParameters != null ? methodParameters[j].getName() : null; break; case TYPE_SHORT_NAME: ref[i] = StringUtil.uncapitalize(paramTypes[j].getSimpleName()); break; case TYPE_FULL_NAME: ref[i] = paramTypes[j].getName(); break; } } } return references; } \n### Response:", "ground_truth": "Builds default method references.", "predict": "Build the default references for the given method or ctor.\n\n@param methodOrCtor the method or ctor to build the references for\n@return the array of references"}
{"ID": 1459, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public BeanReferences buildDefaultReference(final PropertyDescriptor propertyDescriptor) { final PetiteReferenceType[] lookupReferences = petiteConfig.getLookupReferences(); final String[] references = new String[lookupReferences.length]; for (int i = 0; i < references.length; i++) { switch (lookupReferences[i]) { case NAME: references[i] = propertyDescriptor.getName(); break; case TYPE_SHORT_NAME: references[i] = StringUtil.uncapitalize(propertyDescriptor.getType().getSimpleName()); break; case TYPE_FULL_NAME: references[i] = propertyDescriptor.getType().getName(); break; } } return BeanReferences.of(references); } \n### Response:", "ground_truth": "Builds default field references.", "predict": "Builds the default reference for the given property descriptor.\n\n@param propertyDescriptor the property descriptor\n@return the BeanReferences"}
{"ID": 1460, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void removeAllDuplicateNames(final BeanReferences[] allBeanReferences) { for (int i = 0; i < allBeanReferences.length; i++) { BeanReferences references = allBeanReferences[i]; allBeanReferences[i] = references.removeDuplicateNames(); } } \n### Response:", "ground_truth": "Removes duplicate names from bean references.", "predict": "Removes duplicate bean references from the given array.\n\n@param allBeanReferences the array of bean references"}
{"ID": 1461, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private BeanReferences[] convertRefToReferences(final String[] references) { if (references == null) { return null; } BeanReferences[] ref = new BeanReferences[references.length]; for (int i = 0; i < references.length; i++) { ref[i] = BeanReferences.of(references[i]); } return ref; } \n### Response:", "ground_truth": "Converts single string array to an array of bean references.", "predict": "Converts the given string array to a bean references array.\n\n@param references the string array\n@return the bean references array"}
{"ID": 1462, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private BeanReferences[] convertAnnValueToReferences(String value) { if (value == null) { return null; } value = value.trim(); if (value.length() == 0) { return null; } String[] refNames = Converter.get().toStringArray(value); BeanReferences[] references = new BeanReferences[refNames.length]; for (int i = 0; i < refNames.length; i++) { references[i] = BeanReferences.of(refNames[i].trim()); } return references; } \n### Response:", "ground_truth": "Converts comma-separated string into array of Bean references.", "predict": "Converts a string value to an array of BeanReferences.\n\n@param value the string value\n@return the array of BeanReferences"}
{"ID": 1463, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void runJoy(final Consumer<JoddJoyRuntime> consumer) { final JoddJoy joddJoy = new JoddJoy(); final JoddJoyRuntime joyRuntime = joddJoy.startOnlyBackend(); joddJoy.withDb(joyDb -> setJtxManager(joyRuntime.getJtxManager())); final JtxTransaction tx = startRwTx(); final Print print = new Print(); try { print.line(\"START\", 80); print.newLine(); consumer.accept(joyRuntime); print.newLine(); print.line(\"END\", 80); if (tx != null) { tx.commit(); } } catch (Throwable throwable) { throwable.printStackTrace(); if (tx != null) { tx.rollback(); } } joddJoy.stop(); } \n### Response:", "ground_truth": "Runs JOY in standalone mode, with only backend.", "predict": "Start Joy.\n\n@param consumer the consumer"}
{"ID": 1464, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Method findMethod(final Class c, final String methodName) { return findDeclaredMethod(c, methodName, true); } \n### Response:", "ground_truth": "Returns method from an object, matched by name. This may be considered as\na slow operation, since methods are matched one by one.\nReturns only accessible methods.\nOnly first method is matched.\n\n@param c          class to examine\n@param methodName Full name of the method.\n@return null if method not found", "predict": "Finds a method with the given name in the given class.\n\n@param c the class to search\n@param methodName the name of the method to find\n@return the method with the given name"}
{"ID": 1465, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> Constructor<T> findConstructor(final Class<T> clazz, final Class<?>... parameterTypes) { final Constructor<?>[] constructors = clazz.getConstructors(); Class<?>[] pts; for (Constructor<?> constructor : constructors) { pts = constructor.getParameterTypes(); if (isAllAssignableFrom(pts, parameterTypes)) { return (Constructor<T>) constructor; } } return null; } \n### Response:", "ground_truth": "Finds constructor with given parameter types. First matched ctor is returned.", "predict": "Finds a constructor with the given parameter types.\n\n@param clazz the class to search\n@param parameterTypes the parameter types\n@return the constructor or null if none found"}
{"ID": 1466, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Class[] resolveAllInterfaces(final Class type) { Set<Class> bag = new LinkedHashSet<>(); _resolveAllInterfaces(type, bag); return bag.toArray(new Class[0]); } \n### Response:", "ground_truth": "Resolves all interfaces of a type. No duplicates are returned.\nDirect interfaces are prior the interfaces of subclasses in\nthe returned array.", "predict": "Resolve all interfaces of a class.\n\n@param type the class to resolve interfaces for\n@return the interfaces of the class"}
{"ID": 1467, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean compareParameters(final Class[] first, final Class[] second) { if (first.length != second.length) { return false; } for (int i = 0; i < first.length; i++) { if (first[i] != second[i]) { return false; } } return true; } \n### Response:", "ground_truth": "Compares classes, usually method or ctor parameters.", "predict": "Compares two arrays of parameters.\n\n@param first first array\n@param second second array\n@return true if the arrays are equal, false otherwise"}
{"ID": 1468, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void forceAccess(final AccessibleObject accObject) { try { if (System.getSecurityManager() == null) accObject.setAccessible(true); else { AccessController.doPrivileged((PrivilegedAction) () -> { accObject.setAccessible(true); return null; }); } } catch (SecurityException sex) { // ignore } } \n### Response:", "ground_truth": "Suppress access check against a reflection object. SecurityException is silently ignored.\nChecks first if the object is already accessible.", "predict": "Force the given object to be accessible.\n\n@param accObject the object to be made accessible"}
{"ID": 1469, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public static <T> T newInstance(final Class<T> clazz, final Object... params) throws InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException { if (params.length == 0) { return newInstance(clazz); } final Class<?>[] paramTypes = getClasses(params); final Constructor<?> constructor = findConstructor(clazz, paramTypes); if (constructor == null) { throw new InstantiationException(\"No constructor matched parameter types.\"); } return (T) constructor.newInstance(params); } \n### Response:", "ground_truth": "Creates new instance of given class with given optional arguments.", "predict": "Returns a new instance of the given class with the given parameters.\n\n@param clazz\nthe class to create a new instance of\n@param params\nthe parameters to pass to the constructor\n@return the new instance\n@throws InstantiationException\nif the class cannot be instantiated\n@throws IllegalAccessException\nif the class cannot be instantiated\n@throws InvocationTargetException\nif the class cannot be instantiated\n@throws NoSuchMethodException\nif the class cannot be instantiated"}
{"ID": 1470, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Class[] getSuperclasses(final Class type) { int i = 0; for (Class x = type.getSuperclass(); x != null; x = x.getSuperclass()) { i++; } Class[] result = new Class[i]; i = 0; for (Class x = type.getSuperclass(); x != null; x = x.getSuperclass()) { result[i] = x; i++; } return result; } \n### Response:", "ground_truth": "Returns all superclasses.", "predict": "Returns the superclasses of a given type.\n\n@param type the type to get the superclasses of\n@return the superclasses of the given type"}
{"ID": 1471, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Class<?> childClassOf(final Class<?> parentClass, final Object instance) { if (instance == null || instance == Object.class) { return null; } if (parentClass != null) { if (parentClass.isInterface()) { return null; } } Class<?> childClass = instance.getClass(); while (true) { Class<?> parent = childClass.getSuperclass(); if (parent == parentClass) { return childClass; } if (parent == null) { return null; } childClass = parent; } } \n### Response:", "ground_truth": "Returns the class of the immediate subclass of the given parent class for\nthe given object instance; or null if such immediate subclass cannot be\nuniquely identified for the given object instance.", "predict": "Returns the class of the given instance, or null if the given instance is not a child of the given parent class.\n\n@param parentClass the parent class\n@param instance the instance\n@return the class of the given instance, or null if the given instance is not a child of the given parent class"}
{"ID": 1472, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static JarFile jarFileOf(final Class<?> klass) { URL url = klass.getResource( \"/\" + klass.getName().replace('.', '/') + \".class\"); if (url == null) { return null; } String s = url.getFile(); int beginIndex = s.indexOf(\"file:\") + \"file:\".length(); int endIndex = s.indexOf(\".jar!\"); if (endIndex == -1) { return null; } endIndex += \".jar\".length(); String f = s.substring(beginIndex, endIndex); // decode URL string - it may contain encoded chars (e.g. whitespaces) which are not supported for file-instances f = URLDecoder.decode(f, \"UTF-8\"); File file = new File(f); try { return file.exists() ? new JarFile(file) : null; } catch (IOException e) { throw new IllegalStateException(e); } } \n### Response:", "ground_truth": "Returns the jar file from which the given class is loaded; or null\nif no such jar file can be located.", "predict": "Returns a JarFile representing the given class.\n\n@param klass the class to get the jar file for\n@return the jar file or null if the class does not exist"}
{"ID": 1473, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void sleep(final long ms) { try { Thread.sleep(ms); } catch (InterruptedException iex) { Thread.currentThread().interrupt(); } } \n### Response:", "ground_truth": "Puts a thread to sleep, without throwing an InterruptedException.\n\n@param ms     the length of time to sleep in milliseconds", "predict": "Sleep for ms.\n\n@param ms the ms"}
{"ID": 1474, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void sleep() { try { Thread.sleep(Long.MAX_VALUE); } catch (InterruptedException iex) { Thread.currentThread().interrupt(); } } \n### Response:", "ground_truth": "Puts a thread to sleep forever.", "predict": "Sleeps for the maximum allowed time."}
{"ID": 1475, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void wait(final Object obj) { synchronized (obj) { try { obj.wait(); } catch (InterruptedException inex) { Thread.currentThread().interrupt(); } } } \n### Response:", "ground_truth": "Waits for a object for synchronization purposes.", "predict": "Waits for the specified object to be ready.\n\n@param obj the object to wait for"}
{"ID": 1476, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ThreadFactory daemonThreadFactory(final String name, final int priority) { return new ThreadFactory() { private AtomicInteger count = new AtomicInteger(); @Override public Thread newThread(final Runnable r) { Thread thread = new Thread(r); thread.setName(name + '-' + count.incrementAndGet()); thread.setDaemon(true); thread.setPriority(priority); return thread; } }; } \n### Response:", "ground_truth": "Creates new daemon thread factory.", "predict": "Creates a daemon thread factory.\n\n@param name the name of the thread\n@param priority the priority of the thread\n@return the thread factory"}
{"ID": 1477, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public T get() { if (!initialized) { synchronized (this) { if (!initialized) { final T t = supplier.get(); value = t; initialized = true; supplier = null; return t; } } } return value; } \n### Response:", "ground_truth": "Returns the value. Value will be computed on first call.", "predict": "Returns the value of this object.\n\n@return the value of this object."}
{"ID": 1478, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visitParameter(final String name, final int access) { if (api < Opcodes.ASM5) { throw new UnsupportedOperationException(REQUIRES_ASM5); } if (mv != null) { mv.visitParameter(name, access); } } \n### Response:", "ground_truth": "Visits a parameter of this method.\n\n@param name parameter name or null if none is provided.\n@param access the parameter's access flags, only {@code ACC_FINAL}, {@code ACC_SYNTHETIC}\nor/and {@code ACC_MANDATED} are allowed (see {@link Opcodes}).", "predict": "Visits a parameter.\n\n@param name the name of the parameter\n@param access the access level of the parameter"}
{"ID": 1479, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) { if (mv != null) { return mv.visitAnnotation(descriptor, visible); } return null; } \n### Response:", "ground_truth": "Visits an annotation of this method.\n\n@param descriptor the class descriptor of the annotation class.\n@param visible {@literal true} if the annotation is visible at runtime.\n@return a visitor to visit the annotation values, or {@literal null} if this visitor is not\ninterested in visiting this annotation.", "predict": "Visit an annotation.\n\n@param descriptor the annotation descriptor\n@param visible the visibility of the annotation\n@return the visitor instance"}
{"ID": 1480, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public AnnotationVisitor visitTypeAnnotation( final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) { if (api < Opcodes.ASM5) { throw new UnsupportedOperationException(REQUIRES_ASM5); } if (mv != null) { return mv.visitTypeAnnotation(typeRef, typePath, descriptor, visible); } return null; } \n### Response:", "ground_truth": "Visits an annotation on a type in the method signature.\n\n@param typeRef a reference to the annotated type. The sort of this type reference must be\n{@link TypeReference#METHOD_TYPE_PARAMETER}, {@link\nTypeReference#METHOD_TYPE_PARAMETER_BOUND}, {@link TypeReference#METHOD_RETURN}, {@link\nTypeReference#METHOD_RECEIVER}, {@link TypeReference#METHOD_FORMAL_PARAMETER} or {@link\nTypeReference#THROWS}. See {@link TypeReference}.\n@param typePath the path to the annotated type argument, wildcard bound, array element type, or\nstatic inner type within 'typeRef'. May be {@literal null} if the annotation targets\n'typeRef' as a whole.\n@param descriptor the class descriptor of the annotation class.\n@param visible {@literal true} if the annotation is visible at runtime.\n@return a visitor to visit the annotation values, or {@literal null} if this visitor is not\ninterested in visiting this annotation.", "predict": "Visits a type annotation.\n\n@param typeRef the type reference\n@param typePath the type path\n@param descriptor the annotation descriptor\n@param visible the visibility of the annotation\n@return the visitor instance, or null if the visitor is not registered"}
{"ID": 1481, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public AnnotationVisitor visitParameterAnnotation( final int parameter, final String descriptor, final boolean visible) { if (mv != null) { return mv.visitParameterAnnotation(parameter, descriptor, visible); } return null; } \n### Response:", "ground_truth": "Visits an annotation of a parameter this method.\n\n@param parameter the parameter index. This index must be strictly smaller than the number of\nparameters in the method descriptor, and strictly smaller than the parameter count\nspecified in {@link #visitAnnotableParameterCount}. Important note: <i>a parameter index i\nis not required to correspond to the i'th parameter descriptor in the method\ndescriptor</i>, in particular in case of synthetic parameters (see\nhttps://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.18).\n@param descriptor the class descriptor of the annotation class.\n@param visible {@literal true} if the annotation is visible at runtime.\n@return a visitor to visit the annotation values, or {@literal null} if this visitor is not\ninterested in visiting this annotation.", "predict": "Visits a parameter annotation.\n\n@param parameter the parameter annotation\n@param descriptor the annotation descriptor\n@param visible the visibility of the annotation\n@return the visitor object"}
{"ID": 1482, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visitFieldInsn( final int opcode, final String owner, final String name, final String descriptor) { if (mv != null) { mv.visitFieldInsn(opcode, owner, name, descriptor); } } \n### Response:", "ground_truth": "Visits a field instruction. A field instruction is an instruction that loads or stores the\nvalue of a field of an object.\n\n@param opcode the opcode of the type instruction to be visited. This opcode is either\nGETSTATIC, PUTSTATIC, GETFIELD or PUTFIELD.\n@param owner the internal name of the field's owner class (see {@link Type#getInternalName()}).\n@param name the field's name.\n@param descriptor the field's descriptor (see {@link Type}).", "predict": "Visit a field instruction.\n\n@param opcode the instruction's opcode\n@param owner the instruction's owner\n@param name the instruction's name\n@param descriptor the instruction's descriptor"}
{"ID": 1483, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visitMethodInsn( final int opcode, final String owner, final String name, final String descriptor, final boolean isInterface) { if (api < Opcodes.ASM5) { if (isInterface != (opcode == Opcodes.INVOKEINTERFACE)) { throw new IllegalArgumentException(\"INVOKESPECIAL/STATIC on interfaces requires ASM5\"); } visitMethodInsn(opcode, owner, name, descriptor); return; } if (mv != null) { mv.visitMethodInsn(opcode, owner, name, descriptor, isInterface); } } \n### Response:", "ground_truth": "Visits a method instruction. A method instruction is an instruction that invokes a method.\n\n@param opcode the opcode of the type instruction to be visited. This opcode is either\nINVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or INVOKEINTERFACE.\n@param owner the internal name of the method's owner class (see {@link\nType#getInternalName()}).\n@param name the method's name.\n@param descriptor the method's descriptor (see {@link Type}).\n@param isInterface if the method's owner class is an interface.", "predict": "Visit a method instruction.\n\n@param opcode the instruction's opcode\n@param owner the instruction's owner\n@param name the instruction's name\n@param descriptor the instruction's descriptor\n@param isInterface the instruction's isInterface flag"}
{"ID": 1484, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visitInvokeDynamicInsn( final String name, final String descriptor, final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) { if (api < Opcodes.ASM5) { throw new UnsupportedOperationException(REQUIRES_ASM5); } if (mv != null) { mv.visitInvokeDynamicInsn(name, descriptor, bootstrapMethodHandle, bootstrapMethodArguments); } } \n### Response:", "ground_truth": "Visits an invokedynamic instruction.\n\n@param name the method's name.\n@param descriptor the method's descriptor (see {@link Type}).\n@param bootstrapMethodHandle the bootstrap method.\n@param bootstrapMethodArguments the bootstrap method constant arguments. Each argument must be\nan {@link Integer}, {@link Float}, {@link Long}, {@link Double}, {@link String}, {@link\nType}, {@link Handle} or {@link ConstantDynamic} value. This method is allowed to modify\nthe content of the array so a caller should expect that this array may change.", "predict": "Invokes the given dynamic instruction.\n\n@param name the name of the instruction\n@param descriptor the descriptor of the instruction\n@param bootstrapMethodHandle the bootstrap method handle\n@param bootstrapMethodArguments the bootstrap method arguments"}
{"ID": 1485, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visitJumpInsn(final int opcode, final Label label) { if (mv != null) { mv.visitJumpInsn(opcode, label); } } \n### Response:", "ground_truth": "Visits a jump instruction. A jump instruction is an instruction that may jump to another\ninstruction.\n\n@param opcode the opcode of the type instruction to be visited. This opcode is either IFEQ,\nIFNE, IFLT, IFGE, IFGT, IFLE, IF_ICMPEQ, IF_ICMPNE, IF_ICMPLT, IF_ICMPGE, IF_ICMPGT,\nIF_ICMPLE, IF_ACMPEQ, IF_ACMPNE, GOTO, JSR, IFNULL or IFNONNULL.\n@param label the operand of the instruction to be visited. This operand is a label that\ndesignates the instruction to which the jump instruction may jump.", "predict": "Visits the jump instruction.\n\n@param opcode the instruction code\n@param label the label of the instruction"}
{"ID": 1486, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visitMultiANewArrayInsn(final String descriptor, final int numDimensions) { if (mv != null) { mv.visitMultiANewArrayInsn(descriptor, numDimensions); } } \n### Response:", "ground_truth": "Visits a MULTIANEWARRAY instruction.\n\n@param descriptor an array type descriptor (see {@link Type}).\n@param numDimensions the number of dimensions of the array to allocate.", "predict": "Invoked when a new array is visited.\n\n@param descriptor the descriptor of the new array\n@param numDimensions the number of dimensions of the new array"}
{"ID": 1487, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visitTryCatchBlock( final Label start, final Label end, final Label handler, final String type) { if (mv != null) { mv.visitTryCatchBlock(start, end, handler, type); } } \n### Response:", "ground_truth": "Visits a try catch block.\n\n@param start the beginning of the exception handler's scope (inclusive).\n@param end the end of the exception handler's scope (exclusive).\n@param handler the beginning of the exception handler's code.\n@param type the internal name of the type of exceptions handled by the handler, or {@literal\nnull} to catch any exceptions (for \"finally\" blocks).\n@throws IllegalArgumentException if one of the labels has already been visited by this visitor\n(by the {@link #visitLabel} method).", "predict": "Visit a try catch block."}
{"ID": 1488, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public AnnotationVisitor visitLocalVariableAnnotation( final int typeRef, final TypePath typePath, final Label[] start, final Label[] end, final int[] index, final String descriptor, final boolean visible) { if (api < Opcodes.ASM5) { throw new UnsupportedOperationException(REQUIRES_ASM5); } if (mv != null) { return mv.visitLocalVariableAnnotation( typeRef, typePath, start, end, index, descriptor, visible); } return null; } \n### Response:", "ground_truth": "Visits an annotation on a local variable type.\n\n@param typeRef a reference to the annotated type. The sort of this type reference must be\n{@link TypeReference#LOCAL_VARIABLE} or {@link TypeReference#RESOURCE_VARIABLE}. See {@link\nTypeReference}.\n@param typePath the path to the annotated type argument, wildcard bound, array element type, or\nstatic inner type within 'typeRef'. May be {@literal null} if the annotation targets\n'typeRef' as a whole.\n@param start the fist instructions corresponding to the continuous ranges that make the scope\nof this local variable (inclusive).\n@param end the last instructions corresponding to the continuous ranges that make the scope of\nthis local variable (exclusive). This array must have the same size as the 'start' array.\n@param index the local variable's index in each range. This array must have the same size as\nthe 'start' array.\n@param descriptor the class descriptor of the annotation class.\n@param visible {@literal true} if the annotation is visible at runtime.\n@return a visitor to visit the annotation values, or {@literal null} if this visitor is not\ninterested in visiting this annotation.", "predict": "Visits a local variable annotation.\n\n@param typeRef the type reference\n@param typePath the type path\n@param start the start label\n@param end the end label\n@param index the index\n@param descriptor the descriptor\n@param visible the visible\n@return the visitor"}
{"ID": 1489, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: void convertToWriter(final Writer writer, final Properties properties, final Map<String, Properties> profiles) throws IOException { final BufferedWriter bw = getBufferedWriter(writer); writeBaseAndProfileProperties(bw, properties, profiles); writeProfilePropertiesThatAreNotInTheBase(bw, properties, profiles); bw.flush(); } \n### Response:", "ground_truth": "Convert Java Properties to Jodd Props format\n\n@param writer     Writer to write Props formatted file content to\n@param properties Properties to convert to Props format\n@param profiles   Properties per profile to convert and add to the Props format\n@throws IOException On any I/O error when writing to the writer", "predict": "Converts the properties to a writer.\n\n@param writer the writer to write to\n@param properties the properties to write\n@param profiles the profiles to write\n@throws IOException if an IOException occurs"}
{"ID": 1490, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void processStream() throws IOException { FastByteArrayOutputStream out = new FastByteArrayOutputStream(); size = 0; if (maxFileSize == -1) { size += input.copyAll(out); } else { size += input.copyMax(out, maxFileSize + 1); // one more byte to detect larger files if (size > maxFileSize) { fileTooBig = true; valid = false; input.skipToBoundary(); return; } } data = out.toByteArray(); size = data.length; valid = true; } \n### Response:", "ground_truth": "Reads data from input stream into byte array and stores file size.", "predict": "Processes the input stream.\n\n@throws IOException if an I/O error occurs"}
{"ID": 1491, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public T next() { if (hasNext == null) { hasNext = Boolean.valueOf(moveToNext()); } if (hasNext == false) { throw new NoSuchElementException(); } if (!entityAwareMode) { hasNext = null; return newElement; } count++; T result = previousElement; previousElement = newElement; hasNext = null; return result; } \n### Response:", "ground_truth": "Returns next mapped object.", "predict": "Returns the next element in the list.\n\n@return the next element in the list\n@throws NoSuchElementException if the list is empty"}
{"ID": 1492, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean moveToNext() { if (last) { // last has been set to true, so no more rows to iterate - close everything if (closeOnEnd) { query.close(); } else { query.closeResultSet(resultSetMapper.getResultSet()); } return false; } while (true) { if (!resultSetMapper.next()) { // no more rows, no more parsing, previousElement is the last one to iterate last = true; return entityAwareMode; } // parse row Object[] objects = resultSetMapper.parseObjects(types); Object row = query.resolveRowResults(objects); newElement = (T) row; if (entityAwareMode) { if (count == 0 && previousElement == null) { previousElement = newElement; continue; } if (previousElement != null && newElement != null) { boolean equals; if (newElement.getClass().isArray()) { equals = Arrays.equals((Object[]) previousElement, (Object[]) newElement); } else { equals = previousElement.equals(newElement); } if (equals) { continue; } } } break; } return true; } \n### Response:", "ground_truth": "Moves to next element.", "predict": "Moves to the next row.\n\n@return true if the next row is the last one to parse."}
{"ID": 1493, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"unchecked\"}) public static <T> T[] join(T[]... arrays) { Class<T> componentType = (Class<T>) arrays.getClass().getComponentType().getComponentType(); return join(componentType, arrays); } \n### Response:", "ground_truth": "Joins arrays. Component type is resolved from the array argument.", "predict": "Joins the given arrays into a single array of the given type.\n\n@param <T> the type of the arrays\n@param arrays the arrays to join\n@return the joined array"}
{"ID": 1494, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"unchecked\"}) public static <T> T[] join(Class<T> componentType, T[][] arrays) { if (arrays.length == 1) { return arrays[0]; } int length = 0; for (T[] array : arrays) { length += array.length; } T[] result = (T[]) Array.newInstance(componentType, length); length = 0; for (T[] array : arrays) { System.arraycopy(array, 0, result, length, array.length); length += array.length; } return result; } \n### Response:", "ground_truth": "Joins arrays using provided component type.", "predict": "Joins the given arrays into a single array of the given type.\n\n@param <T> the type of the elements in the arrays\n@param arrays the arrays to join\n@return the resulting array"}
{"ID": 1495, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> T[] resize(T[] buffer, int newSize) { Class<T> componentType = (Class<T>) buffer.getClass().getComponentType(); T[] temp = (T[]) Array.newInstance(componentType, newSize); System.arraycopy(buffer, 0, temp, 0, buffer.length >= newSize ? newSize : buffer.length); return temp; } \n### Response:", "ground_truth": "Resizes an array.", "predict": "Resizes the given array to the given size.\n\n@param <T> the type of the array\n@param buffer the array to resize\n@param newSize the new size of the array\n@return the resized array"}
{"ID": 1496, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> T[] append(T[] buffer, T newElement) { T[] t = resize(buffer, buffer.length + 1); t[buffer.length] = newElement; return t; } \n### Response:", "ground_truth": "Appends an element to array.", "predict": "Appends a new element to the end of the given array.\n\n@param buffer the array to append to\n@param newElement the new element to append\n@return the array that contains the new element"}
{"ID": 1497, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"unchecked\"}) public static <T> T[] remove(T[] buffer, int offset, int length, Class<T> componentType) { int len2 = buffer.length - length; T[] temp = (T[]) Array.newInstance(componentType, len2); System.arraycopy(buffer, 0, temp, 0, offset); System.arraycopy(buffer, offset + length, temp, offset, len2 - offset); return temp; } \n### Response:", "ground_truth": "Removes sub-array.", "predict": "Removes the specified elements from the specified array and returns the\nresult.\n\n@param buffer the array to remove elements from\n@param offset the index of the first element to remove\n@param length the number of elements to remove\n@param componentType the type of the elements to remove\n@return the array with the specified elements removed"}
{"ID": 1498, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int indexOf(char[] array, char value) { for (int i = 0; i < array.length; i++) { if (array[i] == value) { return i; } } return -1; } \n### Response:", "ground_truth": "Finds the first occurrence of an element in an array.", "predict": "Returns the index of the first occurrence of the given value in the given array.\n\n@param array the array to search\n@param value the value to search for\n@return the index of the first occurrence of the given value in the given array, or -1 if not found"}
{"ID": 1499, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int indexOf(Object[] array, Object value) { for (int i = 0; i < array.length; i++) { if (array[i].equals(value)) { return i; } } return -1; } \n### Response:", "ground_truth": "Finds the first occurrence in an array.", "predict": "Returns the index of the first occurrence of the specified value in the specified array.\n\n@param array the array\n@param value the value\n@return the index of the first occurrence of the specified value in the specified array, or -1 if the value is not present in the array"}
{"ID": 1500, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int indexOf(byte[] array, byte[] sub, int startIndex) { return indexOf(array, sub, startIndex, array.length); } \n### Response:", "ground_truth": "Finds the first occurrence in an array from specified given position.", "predict": "Returns the index of the first occurrence of the specified sub-array within the specified array.\n\n@param array the array to search\n@param sub the sub-array to search\n@param startIndex the starting index of the sub-array to search\n@return the index of the first occurrence of the specified sub-array within the specified array, or -1 if the sub-array is not found"}
{"ID": 1501, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public LagartoDOMBuilder enableXhtmlMode() { config.ignoreWhitespacesBetweenTags = false; // collect all whitespaces config.setCaseSensitive(true); // XHTML is case sensitive config.setEnableRawTextModes(false); // all tags are parsed in the same way config.enabledVoidTags = true; // list of void tags config.selfCloseVoidTags = true; // self close void tags config.impliedEndTags = false; // no implied tag ends config.setEnableConditionalComments(false); // don't enable IE conditional comments config.setParseXmlTags(false); // enable XML mode in parsing return this; } \n### Response:", "ground_truth": "Enables XHTML mode.", "predict": "Enables XML mode parsing.\n\n@return this"}
{"ID": 1502, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Document parse(final char[] content) { LagartoParser lagartoParser = new LagartoParser(content); return doParse(lagartoParser); } \n### Response:", "ground_truth": "Creates DOM tree from provided content.", "predict": "Parses the given content.\n\n@param content the content to parse\n@return the parsed document"}
{"ID": 1503, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Document doParse(final LagartoParser lagartoParser) { lagartoParser.setConfig(config); LagartoDOMBuilderTagVisitor domBuilderTagVisitor = new LagartoDOMBuilderTagVisitor(this); lagartoParser.parse(domBuilderTagVisitor); return domBuilderTagVisitor.getDocument(); } \n### Response:", "ground_truth": "Parses the content using provided lagarto parser.", "predict": "Do parse lagarto.\n\n@param lagartoParser lagarto parser\n@return lagarto document"}
{"ID": 1504, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void endCurrentBasicBlockWithNoSuccessor() { if (compute == COMPUTE_ALL_FRAMES) { Label nextBasicBlock = new Label(); nextBasicBlock.frame = new Frame(nextBasicBlock); nextBasicBlock.resolve(code.data, code.length); lastBasicBlock.nextBasicBlock = nextBasicBlock; lastBasicBlock = nextBasicBlock; currentBasicBlock = null; } else if (compute == COMPUTE_MAX_STACK_AND_LOCAL) { currentBasicBlock.outputStackMax = (short) maxRelativeStackSize; currentBasicBlock = null; } } \n### Response:", "ground_truth": "Ends the current basic block. This method must be used in the case where the current basic\nblock does not have any successor.\n\n<p>WARNING: this method must be called after the currently visited instruction has been put in\n{@link #code} (if frames are computed, this method inserts a new Label to start a new basic\nblock after the current instruction).", "predict": "Resets the current basic block to the next one."}
{"ID": 1505, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: final void collectAttributePrototypes(final Attribute.Set attributePrototypes) { attributePrototypes.addAttributes(firstAttribute); attributePrototypes.addAttributes(firstCodeAttribute); } \n### Response:", "ground_truth": "Collects the attributes of this method into the given set of attribute prototypes.\n\n@param attributePrototypes a set of attribute prototypes.", "predict": "Collects the prototype of the first attribute.\n\n@param attributePrototypes the prototype of the first attribute"}
{"ID": 1506, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void injectContext(final Object targetObject) { final Class targetType = targetObject.getClass(); final ScopeData scopeData = scopeDataInspector.inspectClassScopesWithCache(targetType); final Targets targets = new Targets(targetObject, scopeData); // inject no context scopeResolver.forEachScope(madvocScope -> madvocScope.inject(targets)); // inject special case scopeResolver.forScope(ParamsScope.class, scope -> scope.inject(targets)); // inject servlet context final ServletContext servletContext = madvocController.getApplicationContext(); if (servletContext != null) { scopeResolver.forEachScope(madvocScope -> madvocScope.inject(servletContext, targets)); } } \n### Response:", "ground_truth": "Inject context into target.", "predict": "Injects the context of the target object.\n\n@param targetObject the target object"}
{"ID": 1507, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void registerPseudoClass(final Class<? extends PseudoClass> pseudoClassType) { PseudoClass pseudoClass; try { pseudoClass = ClassUtil.newInstance(pseudoClassType); } catch (Exception ex) { throw new CSSellyException(ex); } PSEUDO_CLASS_MAP.put(pseudoClass.getPseudoClassName(), pseudoClass); } \n### Response:", "ground_truth": "Registers pseudo class.", "predict": "Registers a pseudo class.\n\n@param pseudoClassType the pseudo class type"}
{"ID": 1508, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static PseudoClass lookupPseudoClass(final String pseudoClassName) { PseudoClass pseudoClass = PSEUDO_CLASS_MAP.get(pseudoClassName); if (pseudoClass == null) { throw new CSSellyException(\"Unsupported pseudo class: \" + pseudoClassName); } return pseudoClass; } \n### Response:", "ground_truth": "Lookups pseudo class for given pseudo class name.", "predict": "Lookup a pseudo class.\n\n@param pseudoClassName the pseudo class name\n@return the pseudo class"}
{"ID": 1509, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void invoke(final ActionRequest actionRequest) { if (executorService == null) { throw new MadvocException(\"No action is marked as async!\"); } final HttpServletRequest servletRequest = actionRequest.getHttpServletRequest(); log.debug(() -> \"Async call to: \" + actionRequest); final AsyncContext asyncContext = servletRequest.startAsync(); executorService.submit(() -> { try { actionRequest.invoke(); } catch (Exception ex) { log.error(\"Invoking async action path failed: \" , ExceptionUtil.unwrapThrowable(ex)); } finally { asyncContext.complete(); } }); } \n### Response:", "ground_truth": "Invokes an action asynchronously by submitting it to the thread pool.", "predict": "Invokes the action request.\n\n@param actionRequest the action request"}
{"ID": 1510, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String[] getAllBeanPropertyNames(final Class type, final boolean declared) { ClassDescriptor classDescriptor = ClassIntrospector.get().lookup(type); PropertyDescriptor[] propertyDescriptors = classDescriptor.getAllPropertyDescriptors(); ArrayList<String> names = new ArrayList<>(propertyDescriptors.length); for (PropertyDescriptor propertyDescriptor : propertyDescriptors) { MethodDescriptor getter = propertyDescriptor.getReadMethodDescriptor(); if (getter != null) { if (getter.matchDeclared(declared)) { names.add(propertyDescriptor.getName()); } } else if (includeFields) { FieldDescriptor field = propertyDescriptor.getFieldDescriptor(); if (field != null) { if (field.matchDeclared(declared)) { names.add(field.getName()); } } } } return names.toArray(new String[0]); } \n### Response:", "ground_truth": "Returns all bean property names.", "predict": "Returns all bean property names.\n\n@param type the type\n@param declared the declared\n@return the names"}
{"ID": 1511, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visit() { String[] properties = resolveProperties(source, declared); for (String name : properties) { if (name == null) { continue; } if (!rules.match(name, blacklist)) { continue; } Object value; String propertyName = name; if (isSourceMap) { propertyName = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET; } if (declared) { value = BeanUtil.declared.getProperty(source, propertyName); } else { value = BeanUtil.pojo.getProperty(source, propertyName); } if (value == null && ignoreNullValues) { continue; } if (value instanceof String && StringUtil.isEmpty((String) value)) { continue; } visitProperty(name, value); } } \n### Response:", "ground_truth": "Starts visiting properties.", "predict": "Visits all properties in the source map."}
{"ID": 1512, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public boolean accept(final String propertyName, final String rule, final boolean include) { return propertyName.equals(rule); } \n### Response:", "ground_truth": "Compares property name to the rules.", "predict": "Returns true if the given property name matches the given rule.\n\n@param propertyName the property name\n@param rule the rule\n@param include the include\n@return true if the given property name matches the given rule"}
{"ID": 1513, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public MethodInjectionPoint[] resolve(final Class type) { // lookup methods ClassDescriptor cd = ClassIntrospector.get().lookup(type); List<MethodInjectionPoint> list = new ArrayList<>(); MethodDescriptor[] allMethods = cd.getAllMethodDescriptors(); for (MethodDescriptor methodDescriptor : allMethods) { Method method = methodDescriptor.getMethod(); if (ClassUtil.isBeanPropertySetter(method)) { // ignore setters continue; } if (method.getParameterTypes().length == 0) { // ignore methods with no argument continue; } BeanReferences[] references = referencesResolver.readAllReferencesFromAnnotation(method); if (references != null) { MethodInjectionPoint methodInjectionPoint = new MethodInjectionPoint(method, references); list.add(methodInjectionPoint); } } final MethodInjectionPoint[] methodInjectionPoints; if (list.isEmpty()) { methodInjectionPoints = MethodInjectionPoint.EMPTY; } else { methodInjectionPoints = list.toArray(new MethodInjectionPoint[0]); } return methodInjectionPoints; } \n### Response:", "ground_truth": "Resolve method injection points in given class.", "predict": "Resolves all method injection points for the given type.\n\n@param type the type to resolve method injection points for\n@return the list of method injection points"}
{"ID": 1514, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void readFilterConfigParameters(final FilterConfig filterConfig, final Object target, final String... parameters) { for (String parameter : parameters) { String value = filterConfig.getInitParameter(parameter); if (value != null) { BeanUtil.declared.setProperty(target, parameter, value); } } } \n### Response:", "ground_truth": "Reads filter config parameters and set into destination target.", "predict": "Reads the filter configuration parameters.\n\n@param filterConfig the filter configuration\n@param target   the target\n@param parameters the parameters"}
{"ID": 1515, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void sendBundleFile(final HttpServletResponse resp, final File bundleFile) throws IOException { OutputStream out = resp.getOutputStream(); FileInputStream fileInputStream = new FileInputStream(bundleFile); try { StreamUtil.copy(fileInputStream, out); } finally { StreamUtil.close(fileInputStream); } } \n### Response:", "ground_truth": "Outputs bundle file to the response.", "predict": "Sends a bundle file to the client.\n\n@param resp the response\n@param bundleFile the bundle file\n@throws IOException if an IOException occurs"}
{"ID": 1516, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public File lookupBundleFile(String bundleId) { if ((mirrors != null) && (!mirrors.isEmpty())) { String realBundleId = mirrors.remove(bundleId); if (realBundleId != null) { bundleId = realBundleId; } } return createBundleFile(bundleId); } \n### Response:", "ground_truth": "Lookups for bundle file.", "predict": "Lookup the file for the given bundle id.\n\n@param bundleId the bundle id\n@return the file"}
{"ID": 1517, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public File lookupGzipBundleFile(final File file) throws IOException { String path = file.getPath() + ZipUtil.GZIP_EXT; File gzipFile = new File(path); if (!gzipFile.exists()) { if (log.isDebugEnabled()) { log.debug(\"gzip bundle to \" + path); } ZipUtil.gzip(file); } return gzipFile; } \n### Response:", "ground_truth": "Locates gzipped version of bundle file. If gzip file\ndoes not exist, it will be created.", "predict": "Lookup a file that is a GZIP bundle.\n\n@param file the file to lookup\n@return the file\n@throws IOException if the file cannot be lookup"}
{"ID": 1518, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public synchronized String registerBundle(final String contextPath, final String actionPath, final String tempBundleId, final String bundleContentType, final List<String> sources) { if (tempBundleId == null || sources.isEmpty()) { if (strategy == Strategy.ACTION_MANAGED) { // page does not include any resource source file actionBundles.put(actionPath, StringPool.EMPTY); } return null; } // create unique digest from the collected sources String[] sourcesArray = sources.toArray(new String[0]); for (int i = 0, sourcesArrayLength = sourcesArray.length; i < sourcesArrayLength; i++) { sourcesArray[i] = sourcesArray[i].trim().toLowerCase(); } if (sortResources) { Arrays.sort(sourcesArray); } StringBand sb = new StringBand(sourcesArray.length); for (String src : sourcesArray) { sb.append(src); } String sourcesString = sb.toString(); String bundleId = createDigest(sourcesString); bundleId += '.' + bundleContentType; // bundle appears for the first time, create the bundle if (strategy == Strategy.ACTION_MANAGED) { actionBundles.put(actionPath, bundleId); mirrors.put(tempBundleId, bundleId); } try { createBundle(contextPath, actionPath, bundleId, sources); } catch (IOException ioex) { throw new HtmlStaplerException(\"Can't create bundle\", ioex); } return bundleId; } \n### Response:", "ground_truth": "Registers new bundle that consist of provided list of source paths.\nReturns the real bundle id, as provided one is just a temporary bundle id.", "predict": "Register a bundle.\n\n@param contextPath\nthe context path\n@param actionPath\nthe action path\n@param bundleContentType\nthe bundle content type\n@param sources\nthe sources\n@return the bundle id"}
{"ID": 1519, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String createDigest(final String source) { final DigestEngine digestEngine = DigestEngine.sha256(); final byte[] bytes = digestEngine.digest(CharUtil.toSimpleByteArray(source)); String digest = Base32.encode(bytes); if (uniqueDigestKey != null) { digest += uniqueDigestKey; } return digest; } \n### Response:", "ground_truth": "Creates digest i.e. bundle id from given string.\nReturned digest must be filename safe, for all platforms.", "predict": "Generate a SHA-256 digest of the given string.\n\n@param source the source string\n@return the SHA-256 digest"}
{"ID": 1520, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void createBundle(final String contextPath, final String actionPath, final String bundleId, final List<String>sources) throws IOException { final File bundleFile = createBundleFile(bundleId); if (bundleFile.exists()) { return; } StringBand sb = new StringBand(sources.size() * 2); for (String src : sources) { if (sb.length() != 0) { sb.append(StringPool.NEWLINE); } String content; if (isExternalResource(src)) { content = downloadString(src); } else { if (!downloadLocal) { // load local resource from file system String localFile = webRoot; if (src.startsWith(contextPath + '/')) { src = src.substring(contextPath.length()); } if (src.startsWith(StringPool.SLASH)) { // absolute path localFile += src; } else { // relative path localFile += '/' + FileNameUtil.getPathNoEndSeparator(actionPath) + '/' + src; } // trim link parameters, if any int qmndx = localFile.indexOf('?'); if (qmndx != -1) { localFile = localFile.substring(0, qmndx); } try { content = FileUtil.readString(localFile); } catch (IOException ioex) { if (notFoundExceptionEnabled) { throw ioex; } if (log.isWarnEnabled()) { log.warn(ioex.getMessage()); } content = null; } } else { // download local resource String localUrl = localAddressAndPort; if (src.startsWith(StringPool.SLASH)) { localUrl += contextPath + src; } else { localUrl += contextPath + FileNameUtil.getPath(actionPath) + '/' + src; } content = downloadString(localUrl); } if (content != null) { if (isCssResource(src)) { content = fixCssRelativeUrls(content, src); } } } if (content != null) { content = onResourceContent(content); sb.append(content); } } FileUtil.writeString(bundleFile, sb.toString()); if (log.isInfoEnabled()) { log.info(\"Bundle created: \" + bundleId); } } \n### Response:", "ground_truth": "Creates bundle file by loading resource files content. If bundle file already\nexist it will not be recreated!", "predict": "Create bundle file.\n\n@param contextPath\nthe context path\n@param actionPath\nthe action path\n@param bundleId\nthe bundle id\n@param sources\nthe sources\n@throws IOException\nSignals that an I/O exception has occurred."}
{"ID": 1521, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public synchronized void reset() { if (strategy == Strategy.ACTION_MANAGED) { actionBundles.clear(); mirrors.clear(); } final FindFile ff = new FindFile(); ff.includeDirs(false); ff.searchPath(new File(bundleFolder, staplerPath)); File f; int count = 0; while ((f = ff.nextFile()) != null) { f.delete(); count++; } if (log.isInfoEnabled()) { log.info(\"reset: \" + count + \" bundle files deleted.\"); } } \n### Response:", "ground_truth": "Clears all settings and removes all created bundle files from file system.", "predict": "Resets the bundle folder."}
{"ID": 1522, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String fixCssRelativeUrls(final String content, final String src) { final String path = FileNameUtil.getPath(src); final Matcher matcher = CSS_URL_PATTERN.matcher(content); final StringBuilder sb = new StringBuilder(content.length()); int start = 0; while (matcher.find()) { sb.append(content, start, matcher.start()); final String matchedUrl = StringUtil.removeChars(matcher.group(1), \"'\\\"\"); final String url; if (matchedUrl.startsWith(\"https://\") || matchedUrl.startsWith(\"http://\") || matchedUrl.startsWith(\"data:\")) { url = \"url('\" + matchedUrl + \"')\"; } else { url = fixRelativeUrl(matchedUrl, path); } sb.append(url); start = matcher.end(); } sb.append(content.substring(start)); return sb.toString(); } \n### Response:", "ground_truth": "Returns the content with all relative URLs fixed.", "predict": "Resolves the url of the CSS file relative to the given path.\n\n@param content the content of the file\n@param src the path to the file\n@return the resolved url"}
{"ID": 1523, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public DbSqlBuilder updateColumn(final Object entity, final String columnRef) { final Object value = BeanUtil.pojo.getProperty(entity, columnRef); return updateColumn(entity, columnRef, value); } \n### Response:", "ground_truth": "Reads property value and updates the DB.", "predict": "Update a column in a entity\n\n@param entity\n@param columnRef\n@return"}
{"ID": 1524, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected static String createTableRefName(final Object entity) { Class type = entity.getClass(); type = (type == Class.class ? (Class) entity : type); return (type.getSimpleName() + '_'); } \n### Response:", "ground_truth": "Creates table reference name from entity type.\nAlways appends an underscore to reference name in order\nto circumvent SQL compatibility issues when entity class name\nequals to a reserved word.", "predict": "Create table reference name.\n\n@param entity the entity\n@return the table reference name"}
{"ID": 1525, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public DbSession getDbSession() { log.debug(\"Requesting db TX manager session\"); final DbJtxTransaction jtx = (DbJtxTransaction) jtxTxManager.getTransaction(); if (jtx == null) { throw new DbSqlException( \"No transaction is in progress and DbSession can't be provided. \" + \"It seems that transaction manager is not used to begin a transaction.\"); } return jtx.requestResource(); } \n### Response:", "ground_truth": "Returns session from JTX transaction manager and started transaction.", "predict": "Get the DbSession for the current transaction.\n\n@return DbSession"}
{"ID": 1526, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected T[] convertToSingleElementArray(final Object value) { T[] singleElementArray = createArray(1); singleElementArray[0] = convertType(value); return singleElementArray; } \n### Response:", "ground_truth": "Creates an array with single element.", "predict": "Converts the given object to a single element array.\n\n@param value the object to convert\n@return the array containing the converted object"}
{"ID": 1527, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Map<String, String> parseSignatureForGenerics(final String signature, final boolean isInterface) { if (signature == null) { return Collections.emptyMap(); } final Map<String, String> genericsMap = new HashMap<>(); SignatureReader sr = new SignatureReader(signature); StringBuilder sb = new StringBuilder(); TraceSignatureVisitor v = new TraceSignatureVisitor(sb, isInterface) { String genericName; @Override public void visitFormalTypeParameter(final String name) { genericName = name; super.visitFormalTypeParameter(name); } @Override public void visitClassType(final String name) { if (genericName != null) { genericsMap.put(genericName, 'L' + name + ';'); genericName = null; } super.visitClassType(name); } }; sr.accept(v); return genericsMap; } \n### Response:", "ground_truth": "Parses signature for generic information and returns a map where key is generic name\nand value is raw type. Returns an empty map if signature does not define any generics.", "predict": "Helper method to parse the signature for the generics.\n\n@param signature the signature to parse\n@param isInterface if true, the signature is for an interface\n@return the map of generic names"}
{"ID": 1528, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public SetInjectionPoint[] resolve(final Class type, final boolean autowire) { ClassDescriptor cd = ClassIntrospector.get().lookup(type); List<SetInjectionPoint> list = new ArrayList<>(); PropertyDescriptor[] allProperties = cd.getAllPropertyDescriptors(); for (PropertyDescriptor propertyDescriptor : allProperties) { if (propertyDescriptor.isGetterOnly()) { continue; } Class propertyType = propertyDescriptor.getType(); if (!ClassUtil.isTypeOf(propertyType, Collection.class)) { continue; } MethodDescriptor writeMethodDescriptor = propertyDescriptor.getWriteMethodDescriptor(); FieldDescriptor fieldDescriptor = propertyDescriptor.getFieldDescriptor(); PetiteInject ref = null; if (writeMethodDescriptor != null) { ref = writeMethodDescriptor.getMethod().getAnnotation(PetiteInject.class); } if (ref == null && fieldDescriptor != null) { ref = fieldDescriptor.getField().getAnnotation(PetiteInject.class); } if ((!autowire) && (ref == null)) { continue; } list.add(new SetInjectionPoint(propertyDescriptor)); } SetInjectionPoint[] fields; if (list.isEmpty()) { fields = SetInjectionPoint.EMPTY; } else { fields = list.toArray(new SetInjectionPoint[0]); } return fields; } \n### Response:", "ground_truth": "Resolves all collections for given type.", "predict": "Resolves the fields of a class.\n\n@param type the class to resolve\n@param autowire whether or not to autowire the fields\n@return the fields of the class"}
{"ID": 1529, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean matchIgnoredPropertyTypes(final Class propertyType, final boolean excludeMaps, final boolean include) { if (!include) { return false; } if (propertyType != null) { if (!jsonSerializer.deep) { ClassDescriptor propertyTypeClassDescriptor = ClassIntrospector.get().lookup(propertyType); if (propertyTypeClassDescriptor.isArray()) { return false; } if (propertyTypeClassDescriptor.isCollection()) { return false; } if (excludeMaps) { if (propertyTypeClassDescriptor.isMap()) { return false; } } } // still not excluded, continue with excluded types and type names // + excluded types if (jsonSerializer.excludedTypes != null) { for (Class excludedType : jsonSerializer.excludedTypes) { if (ClassUtil.isTypeOf(propertyType, excludedType)) { return false; } } } // + exclude type names final String propertyTypeName = propertyType.getName(); if (jsonSerializer.excludedTypeNames != null) { for (String excludedTypeName : jsonSerializer.excludedTypeNames) { if (Wildcard.match(propertyTypeName, excludedTypeName)) { return false; } } } } return true; } \n### Response:", "ground_truth": "Matches property types that are ignored by default.", "predict": "Returns true if the given property type is a type that is ignored by the json serializer.\n\n@param propertyType the property type to check\n@param excludeMaps whether to exclude maps\n@param include whether to include the property type\n@return true if the given property type is a type that is ignored by the json serializer"}
{"ID": 1530, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void openConnectionForQuery() { if (connection == null) { connection = connectionProvider.getConnection(); txActive = false; // txAction should already be false try { connection.setAutoCommit(true); } catch (SQLException sex) { throw new DbSqlException(\"Failed to open non-TX connection\", sex); } } } \n### Response:", "ground_truth": "Opens connection in auto-commit mode, if already not opened.", "predict": "Opens the connection for the query."}
{"ID": 1531, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void openTx() { if (connection == null) { connection = connectionProvider.getConnection(); } txActive = true; try { connection.setAutoCommit(false); if (txMode.getIsolation() != DbTransactionMode.ISOLATION_DEFAULT) { connection.setTransactionIsolation(txMode.getIsolation()); } connection.setReadOnly(txMode.isReadOnly()); } catch (SQLException sex) { throw new DbSqlException(\"Open TX failed\", sex); } } \n### Response:", "ground_truth": "Opens a transaction.", "predict": "Opens the transaction."}
{"ID": 1532, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void closeTx() { txActive = false; try { connection.setAutoCommit(true); } catch (SQLException sex) { throw new DbSqlException(\"Close TX failed\", sex); } } \n### Response:", "ground_truth": "Closes current transaction.", "predict": "Closes the transaction."}
{"ID": 1533, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void commitTransaction() { log.debug(\"Committing transaction\"); assertTxIsActive(); try { connection.commit(); } catch (SQLException sex) { throw new DbSqlException(\"Commit TX failed\", sex); } finally { closeTx(); } } \n### Response:", "ground_truth": "Commit the current transaction, writing any unflushed changes to the database.\nTransaction mode is closed.", "predict": "Commits the transaction."}
{"ID": 1534, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void rollbackTransaction() { log.debug(\"Rolling-back transaction\"); assertTxIsActive(); try { connection.rollback(); } catch (SQLException sex) { throw new DbSqlException(\"Rollback TX failed\", sex); } finally { closeTx(); } } \n### Response:", "ground_truth": "Roll back the current transaction. Transaction mode is closed.", "predict": "Rollback the transaction"}
{"ID": 1535, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Properties createFromFile(final File file) throws IOException { Properties prop = new Properties(); loadFromFile(prop, file); return prop; } \n### Response:", "ground_truth": "Create properties from the file.\n\n@param file properties file to load", "predict": "Create a Properties object from a file.\n\n@param file the file to load from\n@return the Properties object\n@throws IOException if the file cannot be read"}
{"ID": 1536, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Properties createFromString(final String data) throws IOException { Properties p = new Properties(); loadFromString(p, data); return p; } \n### Response:", "ground_truth": "Creates properties from string.", "predict": "Create a Properties object from a String.\n\n@param data the String to be converted to a Properties object\n@return the Properties object\n@throws IOException if the String cannot be converted to a Properties object"}
{"ID": 1537, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void loadFromString(final Properties p, final String data) throws IOException { try (ByteArrayInputStream is = new ByteArrayInputStream(data.getBytes(StringPool.ISO_8859_1))) { p.load(is); } } \n### Response:", "ground_truth": "Loads properties from string.", "predict": "Loads a properties file from a string.\n\n@param p the properties to load\n@param data the string to load\n@throws IOException if the string cannot be loaded"}
{"ID": 1538, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Properties subset(final Properties p, String prefix, final boolean stripPrefix) { if (StringUtil.isBlank(prefix)) { return p; } if (!prefix.endsWith(StringPool.DOT)) { prefix += '.'; } Properties result = new Properties(); int baseLen = prefix.length(); for (Object o : p.keySet()) { String key = (String) o; if (key.startsWith(prefix)) { result.setProperty(stripPrefix ? key.substring(baseLen) : key, p.getProperty(key)); } } return result; } \n### Response:", "ground_truth": "Creates new Properties object from the original one, by copying\nthose properties that have specified first part of the key name.\nPrefix may be optionally stripped during this process.\n\n@param p         source properties, from which new object will be created\n@param prefix    key names prefix\n\n@return subset properties", "predict": "subset a properties object by a prefix\n\n@param p the properties object\n@param prefix the prefix\n@param stripPrefix if true, the prefix will be removed\n@return the subset"}
{"ID": 1539, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Properties createFromClasspath(final String... rootTemplate) { Properties p = new Properties(); return loadFromClasspath(p, rootTemplate); } \n### Response:", "ground_truth": "Creates properties from classpath.", "predict": "Create a Properties object from a classpath.\n\n@param rootTemplate the root template\n@return the Properties object"}
{"ID": 1540, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String getProperty(final Map map, final String key, final String defaultValue) { Object val = map.get(key); return (val instanceof String) ? (String) val : defaultValue; } \n### Response:", "ground_truth": "Returns String property from a map.\n@see #getProperty(java.util.Map, String)", "predict": "Get the value of a key in a map.\n\n@param map the map\n@param key the key\n@param defaultValue the default value\n@return the value"}
{"ID": 1541, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void resolveAllVariables(final Properties prop) { for (Object o : prop.keySet()) { String key = (String) o; String value = resolveProperty(prop, key); prop.setProperty(key, value); } } \n### Response:", "ground_truth": "Resolves all variables.", "predict": "Resolves all properties in the given Properties object.\n\n@param prop the Properties object"}
{"ID": 1542, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String resolveProperty(final Map map, final String key) { String value = getProperty(map, key); if (value == null) { return null; } value = stp.parse(value, macroName -> getProperty(map, macroName)); return value; } \n### Response:", "ground_truth": "Returns property with resolved variables.", "predict": "Resolve a property from a map.\n\n@param map the map\n@param key the property key\n@return the resolved value"}
{"ID": 1543, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String resolveScope(final Class type, final String methodName) { if (scopePattern == null) { return null; } String ctx = scopePattern; ctx = StringUtil.replace(ctx, JTXCTX_PATTERN_CLASS, type.getName()); ctx = StringUtil.replace(ctx, JTXCTX_PATTERN_METHOD, methodName); return ctx; } \n### Response:", "ground_truth": "Resolves tx scope from scope pattern.", "predict": "Resolve the scope name.\n\n@param type the class to resolve the scope name for\n@param methodName the method name to resolve the scope name for\n@return the resolved scope name"}
{"ID": 1544, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public synchronized JtxTransactionMode getTxMode(final Class type, final String methodName, final Class[] methodArgTypes, final String unique) { String signature = type.getName() + '#' + methodName + '%' + unique; JtxTransactionMode txMode = txmap.get(signature); if (txMode == null) { if (!txmap.containsKey(signature)) { final Method m; try { m = type.getMethod(methodName, methodArgTypes); } catch (NoSuchMethodException nsmex) { throw new ProxettaException(nsmex); } final TransactionAnnotationValues txAnn = readTransactionAnnotation(m); if (txAnn != null) { txMode = new JtxTransactionMode( txAnn.propagation(), txAnn.isolation(), txAnn.readOnly(), txAnn.timeout() ); } else { txMode = defaultTransactionMode; } txmap.put(signature, txMode); } } return txMode; } \n### Response:", "ground_truth": "Reads transaction mode from method annotation. Annotations are cached for better performances.\n@param type target class\n@param methodName target method name over which the transaction should be wrapped\n@param methodArgTypes types of arguments, used to find the method\n@param unique unique method fingerprint that contains return and arguments type information", "predict": "Get the transaction mode for the given method signature.\n\n@param type the class of the method signature\n@param methodName the name of the method signature\n@param methodArgTypes the argument types of the method signature\n@param unique the unique identifier of the method signature\n@return the transaction mode for the given method signature"}
{"ID": 1545, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings( {\"unchecked\"}) public void registerAnnotations(final Class<? extends Annotation>[] annotations) { this.annotations = annotations; this.annotationParsers = new AnnotationParser[annotations.length]; for (int i = 0; i < annotations.length; i++) { annotationParsers[i] = TransactionAnnotationValues.parserFor(annotations[i]); } } \n### Response:", "ground_truth": "Registers new TX annotations.", "predict": "Register annotations for this transaction.\n\n@param annotations the annotations to register"}
{"ID": 1546, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected TransactionAnnotationValues readTransactionAnnotation(final Method method) { for (AnnotationParser annotationParser : annotationParsers) { TransactionAnnotationValues tad = TransactionAnnotationValues.of(annotationParser, method); if (tad != null) { return tad; } } return null; } \n### Response:", "ground_truth": "Finds TX annotation.", "predict": "Read transaction annotation.\n\n@param method the method\n@return the transaction annotation values"}
{"ID": 1547, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public boolean accept(final Node node) { // match element name with node name if (!matchElement(node)) { return false; } // match attributes int totalSelectors = selectorsCount(); for (int i = 0; i < totalSelectors; i++) { Selector selector = getSelector(i); // just attr name existence switch (selector.getType()) { case ATTRIBUTE: if (!((AttributeSelector) selector).accept(node)) { return false; } break; case PSEUDO_CLASS: if (!((PseudoClassSelector) selector).accept(node)) { return false; } break; case PSEUDO_FUNCTION: if (!((PseudoFunctionSelector) selector).accept(node)) { return false; } break; } } return true; } \n### Response:", "ground_truth": "Accepts single node.", "predict": "Helper method to check if a node is accepted by the selector\n\n@param node node to check\n@return true if the node is accepted, false otherwise"}
{"ID": 1548, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected boolean matchElement(final Node node) { if (node.getNodeType() != Node.NodeType.ELEMENT) { return false; } String element = getElement(); String nodeName = node.getNodeName(); return element.equals(StringPool.STAR) || element.equals(nodeName); } \n### Response:", "ground_truth": "Matches element to css selector. All non-element types are ignored.", "predict": "Helper method to check if the given node is a star node.\n\n@param node the node to check\n@return true if the node is a star node, false otherwise"}
{"ID": 1549, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean accept(final List<Node> currentResults, final Node node, final int index) { // match attributes int totalSelectors = selectorsCount(); for (int i = 0; i < totalSelectors; i++) { Selector selector = getSelector(i); // just attr name existence switch (selector.getType()) { case PSEUDO_FUNCTION: if (!((PseudoFunctionSelector) selector).accept(currentResults, node, index)) { return false; } break; case PSEUDO_CLASS: if (!((PseudoClassSelector) selector).accept(currentResults, node, index)) { return false; } break; default: } } return true; } \n### Response:", "ground_truth": "Accepts node within current results.", "predict": "Returns true if the given node is accepted by the pseudo selector.\n\n@param currentResults\n@param node\n@param index\n@return"}
{"ID": 1550, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String unescape(final String value) { if (value.indexOf('\\\\') == -1) { return value; } return StringUtil.remove(value, '\\\\'); } \n### Response:", "ground_truth": "Unescapes CSS string by removing all backslash characters from it.", "predict": "Unescapes the given string.\n\n@param value the string to unescape\n@return the unescaped string"}
{"ID": 1551, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private String[] buildJrePackages(final int javaVersionNumber) { final ArrayList<String> packages = new ArrayList<>(); switch (javaVersionNumber) { case 9: case 8: case 7: case 6: case 5: // in Java1.5, the apache stuff moved packages.add(\"com.sun.org.apache\"); // fall through... case 4: if (javaVersionNumber == 4) { packages.add(\"org.apache.crimson\"); packages.add(\"org.apache.xalan\"); packages.add(\"org.apache.xml\"); packages.add(\"org.apache.xpath\"); } packages.add(\"org.ietf.jgss\"); packages.add(\"org.w3c.dom\"); packages.add(\"org.xml.sax\"); // fall through... case 3: packages.add(\"org.omg\"); packages.add(\"com.sun.corba\"); packages.add(\"com.sun.jndi\"); packages.add(\"com.sun.media\"); packages.add(\"com.sun.naming\"); packages.add(\"com.sun.org.omg\"); packages.add(\"com.sun.rmi\"); packages.add(\"sunw.io\"); packages.add(\"sunw.util\"); // fall through... case 2: packages.add(\"com.sun.java\"); packages.add(\"com.sun.image\"); // fall through... case 1: default: // core stuff packages.add(\"sun\"); packages.add(\"java\"); packages.add(\"javax\"); break; } return packages.toArray(new String[0]); } \n### Response:", "ground_truth": "Builds a set of java core packages.", "predict": "Build the Java packages.\n\n@param javaVersionNumber the Java version number\n@return the Java packages"}
{"ID": 1552, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected <T extends Node> T cloneTo(final T dest) { // dest.nodeValue = nodeValue; // already in clone implementations! dest.parentNode = parentNode; if (attributes != null) { dest.attributes = new ArrayList<>(attributes.size()); for (int i = 0, attributesSize = attributes.size(); i < attributesSize; i++) { Attribute attr = attributes.get(i); dest.attributes.add(attr.clone()); } } if (childNodes != null) { dest.childNodes = new ArrayList<>(childNodes.size()); for (int i = 0, childNodesSize = childNodes.size(); i < childNodesSize; i++) { Node child = childNodes.get(i); Node childClone = child.clone(); childClone.parentNode = dest; // fix parent! dest.childNodes.add(childClone); } } return dest; } \n### Response:", "ground_truth": "Copies all non-final values to the empty cloned object.\nCache-related values are not copied.", "predict": "Clones the node to a new node.\n\n@param dest the node to clone\n@return the clone"}
{"ID": 1553, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void detachFromParent() { if (parentNode == null) { return; } if (parentNode.childNodes != null) { parentNode.childNodes.remove(siblingIndex); parentNode.reindexChildren(); } parentNode = null; } \n### Response:", "ground_truth": "Removes this node from DOM tree.", "predict": "Removes the node from its parent."}
{"ID": 1554, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void addChild(final Node... nodes) { if (nodes.length == 0) { return; // nothing to add } for (Node node : nodes) { node.detachFromParent(); node.parentNode = this; initChildNodes(node); childNodes.add(node); } reindexChildrenOnAdd(nodes.length); } \n### Response:", "ground_truth": "Appends several child nodes at once.\nReindex is done only once, after all children are added.", "predict": "Adds the given nodes to this node.\n\n@param nodes the nodes to add"}
{"ID": 1555, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void insertChild(final Node node, final int index) { node.detachFromParent(); node.parentNode = this; try { initChildNodes(node); childNodes.add(index, node); } catch (IndexOutOfBoundsException ignore) { throw new LagartoDOMException(\"Invalid node index: \" + index); } reindexChildren(); } \n### Response:", "ground_truth": "Inserts node at given index.", "predict": "Inserts a node into the tree.\n\n@param node the node to insert\n@param index the index of the node to insert"}
{"ID": 1556, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void insertBefore(final Node newChild, final Node refChild) { int siblingIndex = refChild.getSiblingIndex(); refChild.parentNode.insertChild(newChild, siblingIndex); } \n### Response:", "ground_truth": "Inserts node before provided node.", "predict": "Inserts a new child node into the specified parent node.\n\n@param newChild the new child node to be inserted\n@param refChild the parent node to be inserted"}
{"ID": 1557, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void insertBefore(final Node[] newChilds, final Node refChild) { if (newChilds.length == 0) { return; } int siblingIndex = refChild.getSiblingIndex(); refChild.parentNode.insertChild(newChilds, siblingIndex); } \n### Response:", "ground_truth": "Inserts several child nodes before provided node.", "predict": "Inserts the given nodes into the given parent node.\n\n@param newChilds\nthe new nodes to insert\n@param refChild\nthe node to insert into"}
{"ID": 1558, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void insertAfter(final Node newChild, final Node refChild) { int siblingIndex = refChild.getSiblingIndex() + 1; if (siblingIndex == refChild.parentNode.getChildNodesCount()) { refChild.parentNode.addChild(newChild); } else { refChild.parentNode.insertChild(newChild, siblingIndex); } } \n### Response:", "ground_truth": "Inserts node after provided node.", "predict": "Inserts a new child node after the given node.\n\n@param newChild the new node to insert\n@param refChild the node to insert the new child after"}
{"ID": 1559, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void insertAfter(final Node[] newChilds, final Node refChild) { if (newChilds.length == 0) { return; } int siblingIndex = refChild.getSiblingIndex() + 1; if (siblingIndex == refChild.parentNode.getChildNodesCount()) { refChild.parentNode.addChild(newChilds); } else { refChild.parentNode.insertChild(newChilds, siblingIndex); } } \n### Response:", "ground_truth": "Inserts several child nodes after referent node.", "predict": "Inserts the given nodes after the given node.\n\n@param newChilds\nthe nodes to insert\n@param refChild\nthe node to insert the nodes after"}
{"ID": 1560, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void removeAllChilds() { List<Node> removedNodes = childNodes; childNodes = null; childElementNodes = null; childElementNodesCount = 0; if (removedNodes != null) { for (int i = 0, removedNodesSize = removedNodes.size(); i < removedNodesSize; i++) { Node removedNode = removedNodes.get(i); removedNode.detachFromParent(); } } } \n### Response:", "ground_truth": "Removes all child nodes. Each child node will be detached from this parent.", "predict": "Removes all child nodes from the node."}
{"ID": 1561, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Node findChildNodeWithName(final String name) { if (childNodes == null) { return null; } for (final Node childNode : childNodes) { if (childNode.getNodeName().equals(name)) { return childNode; } } return null; } \n### Response:", "ground_truth": "Finds the first child node with given node name.", "predict": "Finds a child node with the given name.\n\n@param name the name of the node to find\n@return the node with the given name, or null if none"}
{"ID": 1562, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Node[] filterChildNodes(final Predicate<Node> nodePredicate) { if (childNodes == null) { return new Node[0]; } return childNodes.stream() .filter(nodePredicate) .toArray(Node[]::new); } \n### Response:", "ground_truth": "Filters child nodes.", "predict": "Filter the child nodes based on a node predicate.\n\n@param nodePredicate the node predicate\n@return the node array"}
{"ID": 1563, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean check() { if (childNodes == null) { return true; } // children int siblingElementIndex = 0; for (int i = 0, childNodesSize = childNodes.size(); i < childNodesSize; i++) { Node childNode = childNodes.get(i); if (childNode.siblingIndex != i) { return false; } if (childNode.getNodeType() == NodeType.ELEMENT) { if (childNode.siblingElementIndex != siblingElementIndex) { return false; } siblingElementIndex++; } } if (childElementNodesCount != siblingElementIndex) { return false; } // child element nodes if (childElementNodes != null) { if (childElementNodes.length != childElementNodesCount) { return false; } int childCount = getChildNodesCount(); for (int i = 0; i < childCount; i++) { Node child = getChild(i); if (child.siblingElementIndex >= 0) { if (childElementNodes[child.siblingElementIndex] != child) { return false; } } } } // sibling names if (siblingNameIndex != -1) { List<Node> siblings = parentNode.childNodes; int index = 0; for (int i = 0, siblingsSize = siblings.size(); i < siblingsSize; i++) { Node sibling = siblings.get(i); if (sibling.siblingNameIndex == -1 && nodeType == NodeType.ELEMENT && nodeName.equals(sibling.getNodeName())) { if (sibling.siblingNameIndex != index++) { return false; } } } } // process children for (Node childNode : childNodes) { if (!childNode.check()) { return false; } } return true; } \n### Response:", "ground_truth": "Checks the health of child nodes. Useful during complex tree manipulation,\nto check if everything is OK. Not optimized for speed, should be used just\nfor testing purposes.", "predict": "Checks the children of this element.\n\n@return true if the children are the same, false otherwise"}
{"ID": 1564, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void initChildElementNodes() { if (childElementNodes == null) { childElementNodes = new Element[childElementNodesCount]; int childCount = getChildNodesCount(); for (int i = 0; i < childCount; i++) { Node child = getChild(i); if (child.siblingElementIndex >= 0) { childElementNodes[child.siblingElementIndex] = (Element) child; } } } } \n### Response:", "ground_truth": "Initializes list of child elements.", "predict": "Initializes the child element nodes."}
{"ID": 1565, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void initSiblingNames() { if (siblingNameIndex == -1) { List<Node> siblings = parentNode.childNodes; int index = 0; for (int i = 0, siblingsSize = siblings.size(); i < siblingsSize; i++) { Node sibling = siblings.get(i); if (sibling.siblingNameIndex == -1 && nodeType == NodeType.ELEMENT && nodeName.equals(sibling.getNodeName())) { sibling.siblingNameIndex = index++; } } } } \n### Response:", "ground_truth": "Initializes siblings elements of the same name.", "predict": "Initializes the sibling name index for all elements in the node."}
{"ID": 1566, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void initChildNodes(final Node newNode) { if (childNodes == null) { childNodes = new ArrayList<>(); } if (ownerDocument != null) { if (newNode.ownerDocument != ownerDocument) { changeOwnerDocument(newNode, ownerDocument); } } } \n### Response:", "ground_truth": "Initializes child nodes list when needed.\nAlso fix owner document for new node, if needed.", "predict": "Initializes the child nodes.\n\n@param newNode the new node"}
{"ID": 1567, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void changeOwnerDocument(final Node node, final Document ownerDocument) { node.ownerDocument = ownerDocument; int childCount = node.getChildNodesCount(); for (int i = 0; i < childCount; i++) { Node child = node.getChild(i); changeOwnerDocument(child, ownerDocument); } } \n### Response:", "ground_truth": "Changes owner document for given node and all its children.", "predict": "Change the owner document of a node.\n\n@param node the node to change the owner document of\n@param ownerDocument the new owner document"}
{"ID": 1568, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Node getPreviousSiblingName() { if (nodeName == null) { return null; } initSiblingNames(); int index = siblingNameIndex -1; for (int i = siblingIndex; i >= 0; i--) { Node sibling = parentNode.childNodes.get(i); if ((index == sibling.siblingNameIndex) && nodeName.equals(sibling.getNodeName())) { return sibling; } } return null; } \n### Response:", "ground_truth": "Returns this node's previous sibling element with the same name.", "predict": "Returns the previous sibling name.\n\n@return the previous sibling name"}
{"ID": 1569, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getTextContent() { StringBuilder sb = new StringBuilder(getChildNodesCount() + 1); appendTextContent(sb); return sb.toString(); } \n### Response:", "ground_truth": "Returns the text content of this node and its descendants.\n@see #appendTextContent(Appendable)", "predict": "Returns the text content of the node.\n\n@return the text content of the node"}
{"ID": 1570, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getHtml() { LagartoDomBuilderConfig lagartoDomBuilderConfig; if (ownerDocument == null) { lagartoDomBuilderConfig = ((Document) this).getConfig(); } else { lagartoDomBuilderConfig = ownerDocument.getConfig(); } LagartoHtmlRenderer lagartoHtmlRenderer = lagartoDomBuilderConfig.getLagartoHtmlRenderer(); return lagartoHtmlRenderer.toHtml(this, new StringBuilder()); } \n### Response:", "ground_truth": "Generates HTML.", "predict": "Returns the HTML representation of this document.\n\n@return the HTML representation of this document."}
{"ID": 1571, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getInnerHtml() { LagartoDomBuilderConfig lagartoDomBuilderConfig; if (ownerDocument == null) { lagartoDomBuilderConfig = ((Document) this).getConfig(); } else { lagartoDomBuilderConfig = ownerDocument.getConfig(); } LagartoHtmlRenderer lagartoHtmlRenderer = lagartoDomBuilderConfig.getLagartoHtmlRenderer(); return lagartoHtmlRenderer.toInnerHtml(this, new StringBuilder()); } \n### Response:", "ground_truth": "Generates inner HTML.", "predict": "Returns the HTML content of the document.\n\n@return the HTML content of the document."}
{"ID": 1572, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void visitChildren(final NodeVisitor nodeVisitor) { if (childNodes != null) { for (int i = 0, childNodesSize = childNodes.size(); i < childNodesSize; i++) { Node childNode = childNodes.get(i); childNode.visit(nodeVisitor); } } } \n### Response:", "ground_truth": "Visits children nodes.", "predict": "Visits all child nodes.\n\n@param nodeVisitor\nthe visitor to be used to visit the children"}
{"ID": 1573, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getCssPath() { StringBuilder path = new StringBuilder(); Node node = this; while (node != null) { String nodeName = node.getNodeName(); if (nodeName != null) { StringBuilder sb = new StringBuilder(); sb.append(' ').append(nodeName); String id = node.getAttribute(\"id\"); if (id != null) { sb.append('#').append(id); } path.insert(0, sb); } node = node.getParentNode(); } if (path.charAt(0) == ' ') { return path.substring(1); } return path.toString(); } \n### Response:", "ground_truth": "Returns CSS path to this node from document root.", "predict": "Returns the CSS path.\n\n@return the CSS path"}
{"ID": 1574, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void onDecoraTag(final Tag tag) { String tagName = tag.getName().toString(); if (tag.getType() == TagType.SELF_CLOSING) { checkNestedDecoraTags(); decoraTagName = tagName.substring(7); decoraTagStart = tag.getTagPosition(); decoraTagEnd = tag.getTagPosition() + tag.getTagLength(); defineDecoraTag(); return; } if (tag.getType() == TagType.START) { checkNestedDecoraTags(); decoraTagName = tagName.substring(7); decoraTagStart = tag.getTagPosition(); decoraTagDefaultValueStart = tag.getTagPosition() + tag.getTagLength(); return; } // closed tag type decoraTagEnd = tag.getTagPosition() + tag.getTagLength(); decoraTagDefaultValueEnd = tag.getTagPosition(); defineDecoraTag(); } \n### Response:", "ground_truth": "Handle Decora tags.", "predict": "On decora tag.\n\n@param tag the tag"}
{"ID": 1575, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void onIdAttrStart(final Tag tag) { String id = tag.getId().toString().substring(7); String tagName; String idName; int dashIndex = id.indexOf('-'); if (dashIndex == -1) { tagName = id; idName = null; } else { tagName = id.substring(0, dashIndex); idName = id.substring(dashIndex + 1); } if (tag.getType() == TagType.SELF_CLOSING) { checkNestedDecoraTags(); decoraTagName = tagName; decoraIdName = idName; decoraTagStart = tag.getTagPosition(); decoraTagEnd = tag.getTagPosition() + tag.getTagLength(); defineDecoraTag(); return; } if (tag.getType() == TagType.START) { checkNestedDecoraTags(); decoraTagName = tagName; decoraIdName = idName; decoraTagStart = tag.getTagPosition(); decoraTagDefaultValueStart = tag.getTagPosition() + tag.getTagLength(); closingTagName = tag.getName().toString(); closingTagDeepLevel = tag.getDeepLevel(); } } \n### Response:", "ground_truth": "Handle open and empty ID attribute tags.", "predict": "Helper method to set the id attribute of the given tag.\n\n@param tag the tag to be processed"}
{"ID": 1576, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void defineDecoraTag() { DecoraTag decoraTag = decoraTagDefaultValueStart == 0 ? new DecoraTag(decoraTagName, decoraIdName, decoraTagStart, decoraTagEnd) : new DecoraTag( decoraTagName, decoraIdName, decoraTagStart, decoraTagEnd, decoraTagDefaultValueStart, decoraTagDefaultValueEnd - decoraTagDefaultValueStart); decoraTags.add(decoraTag); decoraTagName = null; decoraIdName = null; closingTagName = null; decoraTagDefaultValueStart = 0; } \n### Response:", "ground_truth": "Defines Decora tag position inside decorator content.\nResets current Decora tag tracking.", "predict": "Defines the decora tag."}
{"ID": 1577, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public JoyProxetta addProxyAspect(final ProxyAspect proxyAspect) { requireNotStarted(proxetta); this.proxyAspects.add(proxyAspect); return this; } \n### Response:", "ground_truth": "Adds a proxy aspect.", "predict": "Adds a proxy aspect to the proxy aspect list.\n\n@param proxyAspect the proxy aspect to add\n@return the JoyProxetta instance"}
{"ID": 1578, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void addRootPackage(final String rootPackage, String mapping) { if (packages == null) { packages = new String[0]; } if (mappings == null) { mappings = new String[0]; } // fix mapping if (mapping.length() > 0) { // mapping must start with the slash if (!mapping.startsWith(StringPool.SLASH)) { mapping = StringPool.SLASH + mapping; } // mapping must NOT end with the slash if (mapping.endsWith(StringPool.SLASH)) { mapping = StringUtil.substring(mapping, 0, -1); } } // detect duplicates for (int i = 0; i < packages.length; i++) { if (packages[i].equals(rootPackage)) { if (mappings[i].equals(mapping)) { // both package and the mappings are the same return; } throw new MadvocException(\"Different mappings for the same root package: \" + rootPackage); } } packages = ArraysUtil.append(packages, rootPackage); mappings = ArraysUtil.append(mappings, mapping); } \n### Response:", "ground_truth": "Adds root package and its path mapping. Duplicate root packages\nare ignored, if mapping path is equals, otherwise exception is thrown.", "predict": "Add a root package to the mappings.\n\n@param rootPackage root package\n@param mapping mapping"}
{"ID": 1579, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void addRootPackageOf(final Class actionClass, final String mapping) { addRootPackage(actionClass.getPackage().getName(), mapping); } \n### Response:", "ground_truth": "Sets root package to package of given class.", "predict": "Adds the root package of the given action class to the mapping.\n\n@param actionClass the action class\n@param mapping the mapping"}
{"ID": 1580, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String findRootPackageForActionPath(final String actionPath) { if (mappings == null) { return null; } int ndx = -1; int delta = Integer.MAX_VALUE; for (int i = 0; i < mappings.length; i++) { String mapping = mappings[i]; boolean found = false; if (actionPath.equals(mapping)) { found = true; } else { mapping += StringPool.SLASH; if (actionPath.startsWith(mapping)) { found = true; } } if (found) { int distance = actionPath.length() - mapping.length(); if (distance < delta) { ndx = i; delta = distance; } } } if (ndx == -1) { return null; } return packages[ndx]; } \n### Response:", "ground_truth": "Finds closest root package for the given action path.", "predict": "Find the root package for the given action path.\n\n@param actionPath the action path\n@return the root package for the given action path or null if not found"}
{"ID": 1581, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String resolveValidationMessage(final HttpServletRequest request, final Violation violation) { ValidationConstraint vc = violation.getConstraint(); String key = vc != null ? vc.getClass().getName() : violation.getName(); String msg = LocalizationUtil.findMessage(request, key); if (msg != null) { return beanTemplateParser.parseWithBean(msg, violation); } return null; } \n### Response:", "ground_truth": "Prepares validation messages.\nKey is either validation constraint class name or violation name.", "predict": "Resolves the validation message for the given violation.\n\n@param request the request\n@param violation the violation\n@return the validation message"}
{"ID": 1582, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public BeanReferences removeDuplicateNames() { if (names.length < 2) { return this; } int nullCount = 0; for (int i = 1; i < names.length; i++) { String thisRef = names[i]; if (thisRef == null) { nullCount++; continue; } for (int j = 0; j < i; j++) { if (names[j] == null) { continue; } if (thisRef.equals(names[j])) { names[i] = null; break; } } } if (nullCount == 0) { return this; } String[] newRefs = new String[names.length - nullCount]; int ndx = 0; for (String name : names) { if (name == null) { continue; } newRefs[ndx] = name; ndx++; } return new BeanReferences(newRefs); } \n### Response:", "ground_truth": "Removes later duplicated references in an array.\nReturns new instance of BeanReferences if there was changes,\notherwise returns the same instance.", "predict": "Removes duplicate names."}
{"ID": 1583, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public JoyProps addPropsFile(final String namePattern) { requireNotStarted(props); this.propsNamePatterns.add(namePattern); return this; } \n### Response:", "ground_truth": "Adds props files or patterns.", "predict": "Adds a new property file to the list of properties to be loaded.\n\n@param namePattern the name pattern of the property file\n@return the JoyProps object for chaining"}
{"ID": 1584, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void forEachTarget(final Consumer<Target> targetConsumer) { for (final Target target : targets) { targetConsumer.accept(target); } } \n### Response:", "ground_truth": "Iterates all targets.", "predict": "Iterates over the targets and invokes the consumer for each one.\n\n@param targetConsumer the consumer to be invoked for each target"}
{"ID": 1585, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void forEachTargetAndIn(final MadvocScope scope, final BiConsumer<Target, InjectionPoint> biConsumer) { for (final Target target : targets) { final ScopeData scopeData = target.scopeData(); if (scopeData.in() == null) { continue; } for (final InjectionPoint in : scopeData.in()) { if (in.scope() != scope) { continue; } biConsumer.accept(target, in); } } } \n### Response:", "ground_truth": "Iterates all targets and for each target iterates all IN injection points of given scope.", "predict": "Iterates over all targets and invokes the given biConsumer for each target.\n\n@param scope the scope\n@param biConsumer the biConsumer to invoke for each target"}
{"ID": 1586, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void forEachTargetAndOut(final MadvocScope scope, final BiConsumer<Target, InjectionPoint> biConsumer) { for (final Target target : targets) { final ScopeData scopeData = target.scopeData(); if (scopeData.out() == null) { continue; } for (final InjectionPoint out : scopeData.out()) { if (out.scope() != scope) { continue; } biConsumer.accept(target, out); } } } \n### Response:", "ground_truth": "Iterates all targets and for each target iterates all OUT injection points of given scope.", "predict": "Iterates over all targets and their outs and invokes the given biConsumer for each.\n\n@param scope the scope to iterate over\n@param biConsumer the biConsumer to invoke for each target and its out"}
{"ID": 1587, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object[] extractParametersValues() { final Object[] values = new Object[targets.length - 1]; for (int i = 1; i < targets.length; i++) { values[i - 1] = targets[i].value(); } return values; } \n### Response:", "ground_truth": "Collects all parameters from target into an array.", "predict": "Returns the values of the parameters.\n\n@return the values of the parameters"}
{"ID": 1588, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Target[] makeTargets(final Target actionTarget, final MethodParam[] methodParams) { if (methodParams == null) { // action does not have method parameters, so there is just one target return new Target[]{actionTarget}; } // action has method arguments, so there is more then one target final Target[] target = new Target[methodParams.length + 1]; target[0] = actionTarget; final Object action = actionTarget.value(); for (int i = 0; i < methodParams.length; i++) { final MethodParam methodParam = methodParams[i]; final Class paramType = methodParam.type(); final Target paramTarget; if (methodParam.annotationType() == null) { // parameter is NOT annotated, create new value for the target // the class itself will be a base class, and should be scanned final ScopeData newScopeData = methodParam.scopeData().inspector().inspectClassScopesWithCache(paramType); paramTarget = Target.ofValue(createActionMethodArgument(paramType, action), newScopeData); } else if (methodParam.annotationType() == Out.class) { // parameter is annotated with *only* OUT annotation // create the output value now AND to save the type paramTarget = Target.ofMethodParam(methodParam, createActionMethodArgument(paramType, action)); } else { // parameter is annotated with any IN annotation // create target with NO value, as the value will be created later paramTarget = Target.ofMethodParam(methodParam, type -> createActionMethodArgument(type, action)); } target[i + 1] = paramTarget; } return target; } \n### Response:", "ground_truth": "Joins action and parameters into one single array of Targets.", "predict": "Create the target for the given action.\n\n@param actionTarget the target for the action\n@param methodParams the method parameters\n@return the target"}
{"ID": 1589, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"unchecked\", \"NullArgumentToVariableArgMethod\"}) protected Object createActionMethodArgument(final Class type, final Object action) { try { if (type.getEnclosingClass() == null || Modifier.isStatic(type.getModifiers())) { // regular or static class return ClassUtil.newInstance(type); } else { // member class Constructor ctor = type.getDeclaredConstructor(type.getDeclaringClass()); ctor.setAccessible(true); return ctor.newInstance(action); } } catch (Exception ex) { throw new MadvocException(ex); } } \n### Response:", "ground_truth": "Creates action method arguments.", "predict": "Create a new action method argument.\n\n@param type the type\n@param action the action\n@return the action method argument"}
{"ID": 1590, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void sessionCreated(final HttpSessionEvent httpSessionEvent) { HttpSession session = httpSessionEvent.getSession(); sessionMap.putIfAbsent(session.getId(), session); for (HttpSessionListener listener : listeners) { listener.sessionCreated(httpSessionEvent); } } \n### Response:", "ground_truth": "Stores session in map and broadcasts event to registered listeners.", "predict": "Notifies all registered listeners that a new session was created.\n\n@param httpSessionEvent the event that occurred"}
{"ID": 1591, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void sessionDestroyed(final HttpSessionEvent httpSessionEvent) { HttpSession session = httpSessionEvent.getSession(); sessionMap.remove(session.getId()); for (HttpSessionListener listener : listeners) { listener.sessionDestroyed(httpSessionEvent); } } \n### Response:", "ground_truth": "Removes session from a map and broadcasts event to registered listeners.", "predict": "Notifies listeners that the session is destroyed.\n\n@param httpSessionEvent the http session event"}
{"ID": 1592, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public JsonArray add(Object value) { Objects.requireNonNull(value); value = JsonObject.resolveValue(value); list.add(value); return this; } \n### Response:", "ground_truth": "Adds an object to the JSON array.", "predict": "Adds a value to the array.\n\n@param value value to add\n@return this"}
{"ID": 1593, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public JsonArray addAll(final JsonArray array) { Objects.requireNonNull(array); list.addAll(array.list); return this; } \n### Response:", "ground_truth": "Appends all of the elements in the specified array to the end of this JSON array.", "predict": "Adds the given JsonArray to the list.\n\n@param array the array to add\n@return this"}
{"ID": 1594, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object remove(final int pos) { Object removed = list.remove(pos); if (removed instanceof Map) { return new JsonObject((Map) removed); } if (removed instanceof ArrayList) { return new JsonArray((List) removed); } return removed; } \n### Response:", "ground_truth": "Removes the value at the specified position in the JSON array.", "predict": "Removes the element at the specified position.\n\n@param pos the position\n@return the removed element"}
{"ID": 1595, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String resolveTarget(final ActionRequest actionRequest, final String resultValue) { String resultBasePath = actionRequest.getActionRuntime().getResultBasePath(); ResultPath resultPath = resultMapper.resolveResultPath(resultBasePath, resultValue); String actionPath = resultPath.path(); String path = actionPath; String value = resultPath.value(); if (StringUtil.isEmpty(value)) { value = null; } String target; while (true) { // variant #1: with value if (value != null) { if (path == null) { // only value remains int lastSlashNdx = actionPath.lastIndexOf('/'); if (lastSlashNdx != -1) { target = actionPath.substring(0, lastSlashNdx + 1) + value; } else { target = '/' + value; } } else { target = path + '.' + value; } target = locateTarget(actionRequest, target); if (target != null) { break; } } if (path != null) { // variant #2: without value target = locateTarget(actionRequest, path); if (target != null) { break; } } // continue if (path == null) { // path not found return null; } int dotNdx = MadvocUtil.lastIndexOfDotAfterSlash(path); if (dotNdx == -1) { path = null; } else { path = path.substring(0, dotNdx); } } return target; } \n### Response:", "ground_truth": "Locates the target file from action path and the result value.", "predict": "Resolve the target of the given action request.\n\n@param actionRequest the action request\n@param resultValue the result value\n@return the target"}
{"ID": 1596, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void targetNotFound(final ActionRequest actionRequest, final String actionAndResultPath) throws IOException { final HttpServletResponse response = actionRequest.getHttpServletResponse(); if (!response.isCommitted()) { response.sendError(SC_NOT_FOUND, \"Result not found: \" + actionAndResultPath); } } \n### Response:", "ground_truth": "Called when target not found. By default sends 404 to the response.", "predict": "Throws an HTTP error if the target is not found.\n\n@param actionRequest the request to process\n@param actionAndResultPath the path to the result\n@throws IOException if the response is not committed"}
{"ID": 1597, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String valueToString(final String name, final Object valueObject) { if (!valueObject.getClass().isArray()) { return valueObject.toString(); } // array String[] array = (String[]) valueObject; if (valueNameIndexes == null) { valueNameIndexes = new HashMap<>(); } MutableInteger index = valueNameIndexes.get(name); if (index == null) { index = new MutableInteger(0); valueNameIndexes.put(name, index); } if (index.value >= array.length) { return null; } String result = array[index.value]; index.value++; return result; } \n### Response:", "ground_truth": "Converts value to a string.", "predict": "Converts an object to a string.\n\n@param name the name of the value object\n@param valueObject the value object\n@return the string"}
{"ID": 1598, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public <T extends ActionFilter> MadvocRouter filter(final Class<T> actionFilterClass) { filtersManager.resolve(actionFilterClass); return this; } \n### Response:", "ground_truth": "Returns action filter instance for further configuration.", "predict": "Resolves the given action filter.\n\n@param actionFilterClass the action filter class\n@return the router"}
{"ID": 1599, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getPseudoFunctionName() { String name = getClass().getSimpleName().toLowerCase(); name = name.replace('_', '-'); return name; } \n### Response:", "ground_truth": "Returns pseudo-function name.", "predict": "Returns the pseudo function name.\n\n@return the pseudo function name"}
{"ID": 1600, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public PropertyInjectionPoint[] resolve(Class type, final boolean autowire) { final List<PropertyInjectionPoint> list = new ArrayList<>(); final Set<String> usedPropertyNames = new HashSet<>(); // lookup fields while (type != Object.class) { final ClassDescriptor cd = ClassIntrospector.get().lookup(type); final PropertyDescriptor[] allPropertyDescriptors = cd.getAllPropertyDescriptors(); for (PropertyDescriptor propertyDescriptor : allPropertyDescriptors) { if (propertyDescriptor.isGetterOnly()) { continue; } if (usedPropertyNames.contains(propertyDescriptor.getName())) { continue; } Class propertyType = propertyDescriptor.getType(); if (ClassUtil.isTypeOf(propertyType, Collection.class)) { continue; } BeanReferences reference = referencesResolver.readReferenceFromAnnotation(propertyDescriptor); if (reference == null) { if (!autowire) { continue; } else { reference = referencesResolver.buildDefaultReference(propertyDescriptor); } } list.add(new PropertyInjectionPoint(propertyDescriptor, reference)); usedPropertyNames.add(propertyDescriptor.getName()); } // go to the supertype type = type.getSuperclass(); } final PropertyInjectionPoint[] fields; if (list.isEmpty()) { fields = PropertyInjectionPoint.EMPTY; } else { fields = list.toArray(new PropertyInjectionPoint[0]); } return fields; } \n### Response:", "ground_truth": "Resolves all properties for given type.", "predict": "Resolves the fields of the given type.\n\n@param type the type to resolve\n@param autowire whether to autowire the fields\n@return the fields"}
{"ID": 1601, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Socket createSocks4ProxySocket(final String host, final int port) { Socket socket = null; final String proxyHost = proxy.getProxyAddress(); final int proxyPort = proxy.getProxyPort(); final String user = proxy.getProxyUsername(); try { socket = Sockets.connect(proxyHost, proxyPort, connectionTimeout); final InputStream in = socket.getInputStream(); final OutputStream out = socket.getOutputStream(); socket.setTcpNoDelay(true); byte[] buf = new byte[1024]; // 1) CONNECT int index = 0; buf[index++] = 4; buf[index++] = 1; buf[index++] = (byte) (port >>> 8); buf[index++] = (byte) (port & 0xff); InetAddress addr = InetAddress.getByName(host); byte[] byteAddress = addr.getAddress(); for (byte byteAddres : byteAddress) { buf[index++] = byteAddres; } if (user != null) { System.arraycopy(user.getBytes(), 0, buf, index, user.length()); index += user.length(); } buf[index++] = 0; out.write(buf, 0, index); // 2) RESPONSE int len = 6; int s = 0; while (s < len) { int i = in.read(buf, s, len - s); if (i <= 0) { throw new HttpException(ProxyInfo.ProxyType.SOCKS4, \"stream is closed\"); } s += i; } if (buf[0] != 0) { throw new HttpException(ProxyInfo.ProxyType.SOCKS4, \"proxy returned VN \" + buf[0]); } if (buf[1] != 90) { try { socket.close(); } catch (Exception ignore) { } throw new HttpException(ProxyInfo.ProxyType.SOCKS4, \"proxy returned CD \" + buf[1]); } byte[] temp = new byte[2]; in.read(temp, 0, 2); return socket; } catch (RuntimeException rtex) { closeSocket(socket); throw rtex; } catch (Exception ex) { closeSocket(socket); throw new HttpException(ProxyInfo.ProxyType.SOCKS4, ex.toString(), ex); } } \n### Response:", "ground_truth": "Connects to the SOCKS4 proxy and returns proxified socket.", "predict": "Create a SOCKS4 proxy socket.\n\n@param host\n@param port\n@return"}
{"ID": 1602, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: final int getAttributeCount() { int count = 0; Attribute attribute = this; while (attribute != null) { count += 1; attribute = attribute.nextAttribute; } return count; } \n### Response:", "ground_truth": "Returns the number of attributes of the attribute list that begins with this attribute.\n\n@return the number of attributes of the attribute list that begins with this attribute.", "predict": "Returns the number of attributes in this attribute set.\n\n@return the number of attributes in this attribute set"}
{"ID": 1603, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Set<ActionResult> getAllActionResults() { final Set<ActionResult> set = new HashSet<>(allResults.size()); allResults.forEachValue(set::add); return set; } \n### Response:", "ground_truth": "Returns all action results as new set.", "predict": "Returns all the action results.\n\n@return allActionResults"}
{"ID": 1604, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean equalsOne(final char c, final CharSequence match) { for (int i = 0; i < match.length(); i++) { char aMatch = match.charAt(i); if (c == aMatch) { return true; } } return false; } \n### Response:", "ground_truth": "Match if one character equals to any of the given character.\n\n@return <code>true</code> if characters match any character from given array,\notherwise <code>false</code>", "predict": "Returns true if the specified character is equal to the specified match.\n\n@param c the character to compare\n@param match the character to compare to\n@return true if the specified character is equal to the specified match"}
{"ID": 1605, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int findFirstEqual(final CharSequence source, final int index, final CharSequence match) { for (int i = index; i < source.length(); i++) { if (equalsOne(source.charAt(i), match)) { return i; } } return -1; } \n### Response:", "ground_truth": "Finds index of the first character in given charsequence the matches any from the\ngiven set of characters.\n\n@return index of matched character or -1", "predict": "Returns the index of the first character in the source string that matches the\nspecified match.\n\n@param source the source string\n@param index the index of the first character to match\n@param match the match to search for\n@return the index of the first character in the source string that matches the\nspecified match, or -1 if no match was found"}
{"ID": 1606, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int findFirstEqual(final char[] source, final int index, final char match) { for (int i = index; i < source.length; i++) { if (source[i] == match) { return i; } } return -1; } \n### Response:", "ground_truth": "Finds index of the first character in given array the matches any from the\ngiven set of characters.\n\n@return index of matched character or -1", "predict": "Returns the index of the first character in the source array that matches the\nspecified match character.\n\n@param source\nThe source array.\n@param index\nThe index of the first character in the source array that matches the\nspecified match character.\n@param match\nThe match character.\n@return The index of the first character in the source array that matches the\nspecified match character."}
{"ID": 1607, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public CommandLine args(final String... arguments) { if (arguments != null && arguments.length > 0) { Collections.addAll(cmdLine, arguments); } return this; } \n### Response:", "ground_truth": "Adds several arguments.", "predict": "Adds the command line arguments.\n\n@param arguments the arguments\n@return the command line"}
{"ID": 1608, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public CommandLine env(final String key, final String value) { if (env == null) { env = new HashMap<>(); } env.put(key, value); return this; } \n### Response:", "ground_truth": "Sets environment variable.", "predict": "Sets the environment variable.\n\n@param key the key\n@param value the value\n@return the command line"}
{"ID": 1609, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ProcessRunner.ProcessResult run() { ByteArrayOutputStream baos = new ByteArrayOutputStream(); out = err = baos; try { baos.write(StringUtil.join(cmdLine, ' ').getBytes()); baos.write(StringPool.BYTES_NEW_LINE); } catch (IOException ignore) { } ProcessBuilder processBuilder = new ProcessBuilder(); processBuilder.command(cmdLine); if (cleanEnvironment) { processBuilder.environment().clear(); } if (env != null) { processBuilder.environment().putAll(env); } processBuilder.directory(workingDirectory); Process process = null; try { process = processBuilder.start(); } catch (IOException ioex) { return writeException(baos, ioex); } StreamGobbler outputGobbler = new StreamGobbler(process.getInputStream(), out, outPrefix); StreamGobbler errorGobbler = new StreamGobbler(process.getErrorStream(), err, errPrefix); outputGobbler.start(); errorGobbler.start(); int result; try { result = process.waitFor(); } catch (InterruptedException iex) { return writeException(baos, iex); } outputGobbler.waitFor(); errorGobbler.waitFor(); return new ProcessRunner.ProcessResult(result, baos.toString()); } \n### Response:", "ground_truth": "Runs command and returns process result.", "predict": "Runs the command line."}
{"ID": 1610, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void invoke(final Object listener, final Class listenerType) { if (listenerType == Init.class) { ((Init) listener).init(); return; } if (listenerType == Start.class) { ((Start) listener).start(); return; } if (listenerType == Ready.class) { ((Ready) listener).ready(); return; } if (listenerType == Stop.class) { ((Stop) listener).stop(); return; } throw new MadvocException(\"Invalid listener\"); } \n### Response:", "ground_truth": "Invoke the listener based on type.\nNot very OOP, but works.", "predict": "Invokes the given listener.\n\n@param listener the listener to invoke\n@param listenerType the type of listener to invoke"}
{"ID": 1611, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: final void copyFrom(final Frame frame) { inputLocals = frame.inputLocals; inputStack = frame.inputStack; outputStackStart = 0; outputLocals = frame.outputLocals; outputStack = frame.outputStack; outputStackTop = frame.outputStackTop; initializationCount = frame.initializationCount; initializations = frame.initializations; } \n### Response:", "ground_truth": "Sets this frame to the value of the given frame.\n\n<p>WARNING: after this method is called the two frames share the same data structures. It is\nrecommended to discard the given frame to avoid unexpected side effects.\n\n@param frame The new frame value.", "predict": "Copies the frame's values to this frame.\n\n@param frame the frame to copy from"}
{"ID": 1612, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: static int getAbstractTypeFromApiFormat(final SymbolTable symbolTable, final Object type) { if (type instanceof Integer) { return CONSTANT_KIND | ((Integer) type).intValue(); } else if (type instanceof String) { String descriptor = Type.getObjectType((String) type).getDescriptor(); return getAbstractTypeFromDescriptor(symbolTable, descriptor, 0); } else { return UNINITIALIZED_KIND | symbolTable.addUninitializedType(\"\", ((Label) type).bytecodeOffset); } } \n### Response:", "ground_truth": "Returns the abstract type corresponding to the given public API frame element type.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param type a frame element type described using the same format as in {@link\nMethodVisitor#visitFrame}, i.e. either {@link Opcodes#TOP}, {@link Opcodes#INTEGER}, {@link\nOpcodes#FLOAT}, {@link Opcodes#LONG}, {@link Opcodes#DOUBLE}, {@link Opcodes#NULL}, or\n{@link Opcodes#UNINITIALIZED_THIS}, or the internal name of a class, or a Label designating\na NEW instruction (for uninitialized types).\n@return the abstract type corresponding to the given frame element type.", "predict": "Get the abstract type from the given type.\n\n@param symbolTable the symbol table\n@param type the type\n@return the abstract type"}
{"ID": 1613, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static int getAbstractTypeFromDescriptor( final SymbolTable symbolTable, final String buffer, final int offset) { String internalName; switch (buffer.charAt(offset)) { case 'V': return 0; case 'Z': case 'C': case 'B': case 'S': case 'I': return INTEGER; case 'F': return FLOAT; case 'J': return LONG; case 'D': return DOUBLE; case 'L': internalName = buffer.substring(offset + 1, buffer.length() - 1); return REFERENCE_KIND | symbolTable.addType(internalName); case '[': int elementDescriptorOffset = offset + 1; while (buffer.charAt(elementDescriptorOffset) == '[') { ++elementDescriptorOffset; } int typeValue; switch (buffer.charAt(elementDescriptorOffset)) { case 'Z': typeValue = BOOLEAN; break; case 'C': typeValue = CHAR; break; case 'B': typeValue = BYTE; break; case 'S': typeValue = SHORT; break; case 'I': typeValue = INTEGER; break; case 'F': typeValue = FLOAT; break; case 'J': typeValue = LONG; break; case 'D': typeValue = DOUBLE; break; case 'L': internalName = buffer.substring(elementDescriptorOffset + 1, buffer.length() - 1); typeValue = REFERENCE_KIND | symbolTable.addType(internalName); break; default: throw new IllegalArgumentException(); } return ((elementDescriptorOffset - offset) << DIM_SHIFT) | typeValue; default: throw new IllegalArgumentException(); } } \n### Response:", "ground_truth": "Returns the abstract type corresponding to the given type descriptor.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param buffer a string ending with a type descriptor.\n@param offset the start offset of the type descriptor in buffer.\n@return the abstract type corresponding to the given type descriptor.", "predict": "Returns the abstract type from the descriptor.\n\n@param symbolTable the symbol table\n@param buffer the buffer\n@param offset the offset\n@return the abstract type"}
{"ID": 1614, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: final void setInputFrameFromApiFormat( final SymbolTable symbolTable, final int numLocal, final Object[] local, final int numStack, final Object[] stack) { int inputLocalIndex = 0; for (int i = 0; i < numLocal; ++i) { inputLocals[inputLocalIndex++] = getAbstractTypeFromApiFormat(symbolTable, local[i]); if (local[i] == Opcodes.LONG || local[i] == Opcodes.DOUBLE) { inputLocals[inputLocalIndex++] = TOP; } } while (inputLocalIndex < inputLocals.length) { inputLocals[inputLocalIndex++] = TOP; } int numStackTop = 0; for (int i = 0; i < numStack; ++i) { if (stack[i] == Opcodes.LONG || stack[i] == Opcodes.DOUBLE) { ++numStackTop; } } inputStack = new int[numStack + numStackTop]; int inputStackIndex = 0; for (int i = 0; i < numStack; ++i) { inputStack[inputStackIndex++] = getAbstractTypeFromApiFormat(symbolTable, stack[i]); if (stack[i] == Opcodes.LONG || stack[i] == Opcodes.DOUBLE) { inputStack[inputStackIndex++] = TOP; } } outputStackTop = 0; initializationCount = 0; } \n### Response:", "ground_truth": "Sets the input frame from the given public API frame description.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param numLocal the number of local variables.\n@param local the local variable types, described using the same format as in {@link\nMethodVisitor#visitFrame}.\n@param numStack the number of operand stack elements.\n@param stack the operand stack types, described using the same format as in {@link\nMethodVisitor#visitFrame}.", "predict": "Sets the input frame from the given api format.\n\n@param symbolTable the symbol table\n@param numLocal the number of local variables\n@param local the local variables\n@param numStack the number of stack variables\n@param stack the stack variables"}
{"ID": 1615, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private int getLocal(final int localIndex) { if (outputLocals == null || localIndex >= outputLocals.length) { // If this local has never been assigned in this basic block, it is still equal to its value // in the input frame. return LOCAL_KIND | localIndex; } else { int abstractType = outputLocals[localIndex]; if (abstractType == 0) { // If this local has never been assigned in this basic block, so it is still equal to its // value in the input frame. abstractType = outputLocals[localIndex] = LOCAL_KIND | localIndex; } return abstractType; } } \n### Response:", "ground_truth": "Returns the abstract type stored at the given local variable index in the output frame.\n\n@param localIndex the index of the local variable whose value must be returned.\n@return the abstract type stored at the given local variable index in the output frame.", "predict": "Returns the local index of the given local.\n\n@param localIndex the index of the local to return.\n@return the local index of the given local."}
{"ID": 1616, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void setLocal(final int localIndex, final int abstractType) { // Create and/or resize the output local variables array if necessary. if (outputLocals == null) { outputLocals = new int[10]; } int outputLocalsLength = outputLocals.length; if (localIndex >= outputLocalsLength) { int[] newOutputLocals = new int[Math.max(localIndex + 1, 2 * outputLocalsLength)]; System.arraycopy(outputLocals, 0, newOutputLocals, 0, outputLocalsLength); outputLocals = newOutputLocals; } // Set the local variable. outputLocals[localIndex] = abstractType; } \n### Response:", "ground_truth": "Replaces the abstract type stored at the given local variable index in the output frame.\n\n@param localIndex the index of the output frame local variable that must be set.\n@param abstractType the value that must be set.", "predict": "Sets the local variable.\n\n@param localIndex\nthe local index\n@param abstractType\nthe abstract type"}
{"ID": 1617, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void push(final int abstractType) { // Create and/or resize the output stack array if necessary. if (outputStack == null) { outputStack = new int[10]; } int outputStackLength = outputStack.length; if (outputStackTop >= outputStackLength) { int[] newOutputStack = new int[Math.max(outputStackTop + 1, 2 * outputStackLength)]; System.arraycopy(outputStack, 0, newOutputStack, 0, outputStackLength); outputStack = newOutputStack; } // Pushes the abstract type on the output stack. outputStack[outputStackTop++] = abstractType; // Updates the maximum size reached by the output stack, if needed (note that this size is // relative to the input stack size, which is not known yet). short outputStackSize = (short) (outputStackStart + outputStackTop); if (outputStackSize > owner.outputStackMax) { owner.outputStackMax = outputStackSize; } } \n### Response:", "ground_truth": "Pushes the given abstract type on the output frame stack.\n\n@param abstractType an abstract type.", "predict": "Pushes an abstract type onto the output stack.\n\n@param abstractType the abstract type to be added to the output stack."}
{"ID": 1618, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void push(final SymbolTable symbolTable, final String descriptor) { int typeDescriptorOffset = descriptor.charAt(0) == '(' ? descriptor.indexOf(')') + 1 : 0; int abstractType = getAbstractTypeFromDescriptor(symbolTable, descriptor, typeDescriptorOffset); if (abstractType != 0) { push(abstractType); if (abstractType == LONG || abstractType == DOUBLE) { push(TOP); } } } \n### Response:", "ground_truth": "Pushes the abstract type corresponding to the given descriptor on the output frame stack.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param descriptor a type or method descriptor (in which case its return type is pushed).", "predict": "Push a type descriptor."}
{"ID": 1619, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void pop(final int elements) { if (outputStackTop >= elements) { outputStackTop -= elements; } else { // If the number of elements to be popped is greater than the number of elements in the output // stack, clear it, and pop the remaining elements from the input stack. outputStackStart -= elements - outputStackTop; outputStackTop = 0; } } \n### Response:", "ground_truth": "Pops the given number of abstract types from the output frame stack.\n\n@param elements the number of abstract types that must be popped.", "predict": "Removes the specified number of elements from the output stack.\n\n@param elements The number of elements to be popped from the output stack."}
{"ID": 1620, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void pop(final String descriptor) { char firstDescriptorChar = descriptor.charAt(0); if (firstDescriptorChar == '(') { pop((Type.getArgumentsAndReturnSizes(descriptor) >> 2) - 1); } else if (firstDescriptorChar == 'J' || firstDescriptorChar == 'D') { pop(2); } else { pop(1); } } \n### Response:", "ground_truth": "Pops as many abstract types from the output frame stack as described by the given descriptor.\n\n@param descriptor a type or method descriptor (in which case its argument types are popped).", "predict": "Removes the first descriptor character from the given string.\n\n@param descriptor the descriptor to remove"}
{"ID": 1621, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addInitializedType(final int abstractType) { // Create and/or resize the initializations array if necessary. if (initializations == null) { initializations = new int[2]; } int initializationsLength = initializations.length; if (initializationCount >= initializationsLength) { int[] newInitializations = new int[Math.max(initializationCount + 1, 2 * initializationsLength)]; System.arraycopy(initializations, 0, newInitializations, 0, initializationsLength); initializations = newInitializations; } // Store the abstract type. initializations[initializationCount++] = abstractType; } \n### Response:", "ground_truth": "Adds an abstract type to the list of types on which a constructor is invoked in the basic\nblock.\n\n@param abstractType an abstract type on a which a constructor is invoked.", "predict": "Adds the given abstract type to the initializations array.\n\n@param abstractType the abstract type to be added"}
{"ID": 1622, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private int getInitializedType(final SymbolTable symbolTable, final int abstractType) { if (abstractType == UNINITIALIZED_THIS || (abstractType & (DIM_MASK | KIND_MASK)) == UNINITIALIZED_KIND) { for (int i = 0; i < initializationCount; ++i) { int initializedType = initializations[i]; int dim = initializedType & DIM_MASK; int kind = initializedType & KIND_MASK; int value = initializedType & VALUE_MASK; if (kind == LOCAL_KIND) { initializedType = dim + inputLocals[value]; } else if (kind == STACK_KIND) { initializedType = dim + inputStack[inputStack.length - value]; } if (abstractType == initializedType) { if (abstractType == UNINITIALIZED_THIS) { return REFERENCE_KIND | symbolTable.addType(symbolTable.getClassName()); } else { return REFERENCE_KIND | symbolTable.addType(symbolTable.getType(abstractType & VALUE_MASK).value); } } } } return abstractType; } \n### Response:", "ground_truth": "Returns the \"initialized\" abstract type corresponding to the given abstract type.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param abstractType an abstract type.\n@return the REFERENCE_KIND abstract type corresponding to abstractType if it is\nUNINITIALIZED_THIS or an UNINITIALIZED_KIND abstract type for one of the types on which a\nconstructor is invoked in the basic block. Otherwise returns abstractType.", "predict": "Returns the type of the given abstract type."}
{"ID": 1623, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: static void putAbstractType( final SymbolTable symbolTable, final int abstractType, final ByteVector output) { int arrayDimensions = (abstractType & Frame.DIM_MASK) >> DIM_SHIFT; if (arrayDimensions == 0) { int typeValue = abstractType & VALUE_MASK; switch (abstractType & KIND_MASK) { case CONSTANT_KIND: output.putByte(typeValue); break; case REFERENCE_KIND: output .putByte(ITEM_OBJECT) .putShort(symbolTable.addConstantClass(symbolTable.getType(typeValue).value).index); break; case UNINITIALIZED_KIND: output.putByte(ITEM_UNINITIALIZED).putShort((int) symbolTable.getType(typeValue).data); break; default: throw new AssertionError(); } } else { // Case of an array type, we need to build its descriptor first. StringBuilder typeDescriptor = new StringBuilder(); while (arrayDimensions-- > 0) { typeDescriptor.append('['); } if ((abstractType & KIND_MASK) == REFERENCE_KIND) { typeDescriptor .append('L') .append(symbolTable.getType(abstractType & VALUE_MASK).value) .append(';'); } else { switch (abstractType & VALUE_MASK) { case Frame.ITEM_ASM_BOOLEAN: typeDescriptor.append('Z'); break; case Frame.ITEM_ASM_BYTE: typeDescriptor.append('B'); break; case Frame.ITEM_ASM_CHAR: typeDescriptor.append('C'); break; case Frame.ITEM_ASM_SHORT: typeDescriptor.append('S'); break; case Frame.ITEM_INTEGER: typeDescriptor.append('I'); break; case Frame.ITEM_FLOAT: typeDescriptor.append('F'); break; case Frame.ITEM_LONG: typeDescriptor.append('J'); break; case Frame.ITEM_DOUBLE: typeDescriptor.append('D'); break; default: throw new AssertionError(); } } output .putByte(ITEM_OBJECT) .putShort(symbolTable.addConstantClass(typeDescriptor.toString()).index); } } \n### Response:", "ground_truth": "Put the given abstract type in the given ByteVector, using the JVMS verification_type_info\nformat used in StackMapTable attributes.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param abstractType an abstract type, restricted to {@link Frame#CONSTANT_KIND}, {@link\nFrame#REFERENCE_KIND} or {@link Frame#UNINITIALIZED_KIND} types.\n@param output where the abstract type must be put.\n@see <a href=\"https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.4\">JVMS\n4.7.4</a>", "predict": "Puts a type into the output.\n\n@param symbolTable the symbol table to use.\n@param abstractType the type to put.\n@param output the output."}
{"ID": 1624, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected int pruneCache() { int count = 0; Iterator<CacheObject<K,V>> values = cacheMap.values().iterator(); while (values.hasNext()) { CacheObject co = values.next(); if (co.isExpired()) { values.remove(); count++; } } return count; } \n### Response:", "ground_truth": "Prunes expired elements from the cache. Returns the number of removed objects.", "predict": "Remove expired entries from the cache."}
{"ID": 1625, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void schedulePrune(final long delay) { if (pruneTimer != null) { pruneTimer.cancel(); } pruneTimer = new Timer(); pruneTimer.schedule( new TimerTask() { @Override public void run() { prune(); } }, delay, delay ); } \n### Response:", "ground_truth": "Schedules prune.", "predict": "Schedules a prune task to run after a delay.\n\n@param delay the delay in milliseconds"}
{"ID": 1626, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ModuleVisitor visitModule(final String name, final int access, final String version) { if (api < Opcodes.ASM6) { throw new UnsupportedOperationException(\"This feature requires ASM6\"); } if (cv != null) { return cv.visitModule(name, access, version); } return null; } \n### Response:", "ground_truth": "Visit the module corresponding to the class.\n\n@param name the fully qualified name (using dots) of the module.\n@param access the module access flags, among {@code ACC_OPEN}, {@code ACC_SYNTHETIC} and {@code\nACC_MANDATED}.\n@param version the module version, or {@literal null}.\n@return a visitor to visit the module values, or {@literal null} if this visitor is not\ninterested in visiting this module.", "predict": "Visits a module.\n\n@param name the name of the module\n@param access the access level of the module\n@param version the version of the module\n@return the visitor for the given module"}
{"ID": 1627, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visitNestHost(final String nestHost) { if (api < Opcodes.ASM7) { throw new UnsupportedOperationException(\"This feature requires ASM7\"); } if (cv != null) { cv.visitNestHost(nestHost); } } \n### Response:", "ground_truth": "Visits the nest host class of the class. A nest is a set of classes of the same package that\nshare access to their private members. One of these classes, called the host, lists the other\nmembers of the nest, which in turn should link to the host of their nest. This method must be\ncalled only once and only if the visited class is a non-host member of a nest. A class is\nimplicitly its own nest, so it's invalid to call this method with the visited class name as\nargument.\n\n@param nestHost the internal name of the host class of the nest.", "predict": "Visit the nest host.\n\n@param nestHost nest host name"}
{"ID": 1628, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visitOuterClass(final String owner, final String name, final String descriptor) { if (cv != null) { cv.visitOuterClass(owner, name, descriptor); } } \n### Response:", "ground_truth": "Visits the enclosing class of the class. This method must be called only if the class has an\nenclosing class.\n\n@param owner internal name of the enclosing class of the class.\n@param name the name of the method that contains the class, or {@literal null} if the class is\nnot enclosed in a method of its enclosing class.\n@param descriptor the descriptor of the method that contains the class, or {@literal null} if\nthe class is not enclosed in a method of its enclosing class.", "predict": "Visit the given outer class.\n\n@param owner the class name\n@param name the class name\n@param descriptor the class descriptor"}
{"ID": 1629, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) { if (cv != null) { return cv.visitAnnotation(descriptor, visible); } return null; } \n### Response:", "ground_truth": "Visits an annotation of the class.\n\n@param descriptor the class descriptor of the annotation class.\n@param visible {@literal true} if the annotation is visible at runtime.\n@return a visitor to visit the annotation values, or {@literal null} if this visitor is not\ninterested in visiting this annotation.", "predict": "Visit an annotation.\n\n@param descriptor the annotation descriptor\n@param visible the visibility of the annotation\n@return the visitor object"}
{"ID": 1630, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visitNestMember(final String nestMember) { if (api < Opcodes.ASM7) { throw new UnsupportedOperationException(\"This feature requires ASM7\"); } if (cv != null) { cv.visitNestMember(nestMember); } } \n### Response:", "ground_truth": "Visits a member of the nest. A nest is a set of classes of the same package that share access\nto their private members. One of these classes, called the host, lists the other members of the\nnest, which in turn should link to the host of their nest. This method must be called only if\nthe visited class is the host of a nest. A nest host is implicitly a member of its own nest, so\nit's invalid to call this method with the visited class name as argument.\n\n@param nestMember the internal name of a nest member.", "predict": "Visit a nested member.\n\n@param nestMember the nested member name"}
{"ID": 1631, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visitInnerClass( final String name, final String outerName, final String innerName, final int access) { if (cv != null) { cv.visitInnerClass(name, outerName, innerName, access); } } \n### Response:", "ground_truth": "Visits information about an inner class. This inner class is not necessarily a member of the\nclass being visited.\n\n@param name the internal name of an inner class (see {@link Type#getInternalName()}).\n@param outerName the internal name of the class to which the inner class belongs (see {@link\nType#getInternalName()}). May be {@literal null} for not member classes.\n@param innerName the (simple) name of the inner class inside its enclosing class. May be\n{@literal null} for anonymous inner classes.\n@param access the access flags of the inner class as originally declared in the enclosing\nclass.", "predict": "Visits the inner class.\n\n@param name the name of the inner class\n@param outerName the name of the outer class\n@param innerName the name of the inner class\n@param access the access level of the inner class"}
{"ID": 1632, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public FieldVisitor visitField( final int access, final String name, final String descriptor, final String signature, final Object value) { if (cv != null) { return cv.visitField(access, name, descriptor, signature, value); } return null; } \n### Response:", "ground_truth": "Visits a field of the class.\n\n@param access the field's access flags (see {@link Opcodes}). This parameter also indicates if\nthe field is synthetic and/or deprecated.\n@param name the field's name.\n@param descriptor the field's descriptor (see {@link Type}).\n@param signature the field's signature. May be {@literal null} if the field's type does not use\ngeneric types.\n@param value the field's initial value. This parameter, which may be {@literal null} if the\nfield does not have an initial value, must be an {@link Integer}, a {@link Float}, a {@link\nLong}, a {@link Double} or a {@link String} (for {@code int}, {@code float}, {@code long}\nor {@code String} fields respectively). <i>This parameter is only used for static\nfields</i>. Its value is ignored for non static fields, which must be initialized through\nbytecode instructions in constructors or methods.\n@return a visitor to visit field annotations and attributes, or {@literal null} if this class\nvisitor is not interested in visiting these annotations and attributes.", "predict": "Visits a field.\n\n@param access the access level\n@param name the name of the field\n@param descriptor the descriptor of the field\n@param signature the signature of the field\n@param value the value of the field\n@return the visitor"}
{"ID": 1633, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static DbThreadSession getThreadSession() { DbThreadSession session = (DbThreadSession) ThreadDbSessionHolder.get(); if (session == null) { session = new DbThreadSession(); } return session; } \n### Response:", "ground_truth": "Returns existing thread session, or new one if already not exist. If session doesn't exist, it will be created\nusing default connection provider.", "predict": "Get the thread session.\n\n@return the thread session"}
{"ID": 1634, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void closeThreadSession() { DbThreadSession session = (DbThreadSession) ThreadDbSessionHolder.get(); if (session != null) { session.closeSession(); } } \n### Response:", "ground_truth": "Closes thread session.", "predict": "Closes the current thread session."}
{"ID": 1635, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected ActionWrapper[] createExecutionArray() { int totalInterceptors = (this.actionRuntime.getInterceptors() != null ? this.actionRuntime.getInterceptors().length : 0); int totalFilters = (this.actionRuntime.getFilters() != null ? this.actionRuntime.getFilters().length : 0); ActionWrapper[] executionArray = new ActionWrapper[totalFilters + 1 + totalInterceptors + 1]; // filters int index = 0; if (totalFilters > 0) { System.arraycopy(actionRuntime.getFilters(), 0, executionArray, index, totalFilters); index += totalFilters; } // result is executed AFTER the action AND interceptors executionArray[index++] = actionRequest -> { Object actionResult = actionRequest.invoke(); ActionRequest.this.madvocController.render(ActionRequest.this, actionResult); return actionResult; }; // interceptors if (totalInterceptors > 0) { System.arraycopy(actionRuntime.getInterceptors(), 0, executionArray, index, totalInterceptors); index += totalInterceptors; } // action executionArray[index] = actionRequest -> { actionResult = invokeActionMethod(); return actionResult; }; return executionArray; } \n### Response:", "ground_truth": "Creates execution array that will invoke all filters, actions and results\nin correct order.", "predict": "Creates the execution array.\n\n@return the execution array"}
{"ID": 1636, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Object invokeActionMethod() throws Exception { if (actionRuntime.isActionHandlerDefined()) { actionRuntime.getActionHandler().handle(this); return null; } final Object[] params = targets.extractParametersValues(); try { return actionRuntime.getActionClassMethod().invoke(action, params); } catch(InvocationTargetException itex) { throw wrapToException(unwrapThrowable(itex)); } } \n### Response:", "ground_truth": "Invokes action method after starting all interceptors.\nAfter method invocation, all interceptors will finish, in opposite order.", "predict": "Invokes the action method.\n\n@return the result of the action method\n@throws Exception if the action method throws an exception"}
{"ID": 1637, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String readRequestBody() { if (requestBody == null) { try { requestBody = ServletUtil.readRequestBodyFromStream(getHttpServletRequest()); } catch (IOException ioex) { requestBody = StringPool.EMPTY; } } return requestBody; } \n### Response:", "ground_truth": "Reads request body only once and returns it to user.", "predict": "Reads the request body from the request.\n\n@return the request body"}
{"ID": 1638, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int calcFirstItemIndexOfPage(int page, final int pageSize, final int total) { if (total == 0) { return 0; } if (page < 1) { page = 1; } int first = (page - 1) * pageSize; if (first >= total) { first = ((total - 1) / pageSize) * pageSize; // first item on the last page } return first; } \n### Response:", "ground_truth": "Calculates the first item index of requested page.", "predict": "Calculate the first item index for the given page size.\n\n@param page\n@param pageSize\n@param total\n@return"}
{"ID": 1639, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int calcFirstItemIndexOfPage(final PageRequest pageRequest, final int total) { return calcFirstItemIndexOfPage(pageRequest.getPage(), pageRequest.getSize(), total); } \n### Response:", "ground_truth": "Calculates first item index of the page.", "predict": "Calculates the first item index of the page.\n\n@param pageRequest the page request\n@param total the total\n@return the first item index of the page"}
{"ID": 1640, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean match(final int value) { if (a == 0) { return value == b; } if (a > 0) { if (value < b) { return false; } return (value - b) % a == 0; } if (value > b) { return false; } return (b - value) % (-a) == 0; } \n### Response:", "ground_truth": "Matches expression with the value.", "predict": "Returns true if the two values match.\n\n@param value the value to compare\n@return true if the two values match"}
{"ID": 1641, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static byte[] toRawByteArray(final char[] carr) { byte[] barr = new byte[carr.length << 1]; for (int i = 0, bpos = 0; i < carr.length; i++) { char c = carr[i]; barr[bpos++] = (byte) ((c & 0xFF00) >> 8); barr[bpos++] = (byte) (c & 0x00FF); } return barr; } \n### Response:", "ground_truth": "Converts char array into byte array by replacing each character with two bytes.", "predict": "Converts a character array to a raw byte array.\n\n@param carr the character array\n@return the raw byte array"}
{"ID": 1642, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int findFirstDiff(final char[] source, final int index, final char[] match) { for (int i = index; i < source.length; i++) { if (!equalsOne(source[i], match)) { return i; } } return -1; } \n### Response:", "ground_truth": "Finds index of the first character in given array the differs from the\ngiven set of characters.\n\n@return index of matched character or -1", "predict": "Finds the first index of the first match in the source array.\n\n@param source the source array\n@param index the index of the source array\n@param match the match array\n@return the index of the first match in the source array"}
{"ID": 1643, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String resolveNodeName(final Node node) { switch (tagCase) { case DEFAULT: return node.getNodeName(); case RAW: return node.getNodeRawName(); case LOWERCASE: return node.getNodeRawName().toLowerCase(); case UPPERCASE: return node.getNodeRawName().toUpperCase(); } return null; } \n### Response:", "ground_truth": "Renders node name.", "predict": "Resolves the node name.\n\n@param node the node\n@return the node name"}
{"ID": 1644, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String resolveAttributeName(final Node node, final Attribute attribute) { switch (attributeCase) { case DEFAULT: return attribute.getName(); case RAW: return attribute.getRawName(); case LOWERCASE: return attribute.getRawName().toLowerCase(); case UPPERCASE: return attribute.getRawName().toUpperCase(); } return null; } \n### Response:", "ground_truth": "Renders attribute name.", "predict": "Resolve the name of the attribute.\n\n@param node the node\n@param attribute the attribute\n@return the name of the attribute"}
{"ID": 1645, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void renderAttribute(final Node node, final Attribute attribute, final Appendable appendable) throws IOException { String name = resolveAttributeName(node, attribute); String value = attribute.getValue(); appendable.append(name); if (value != null) { appendable.append('='); appendable.append('\\\"'); appendable.append(HtmlEncoder.attributeDoubleQuoted(value)); appendable.append('\\\"'); } } \n### Response:", "ground_truth": "Renders attribute.", "predict": "Render an attribute.\n\n@param node the node\n@param attribute the attribute\n@param appendable the appendable\n@throws IOException Signals that an I/O exception has occurred."}
{"ID": 1646, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Props load(final File file) throws IOException { final String extension = FileNameUtil.getExtension(file.getAbsolutePath()); final String data; if (extension.equalsIgnoreCase(\"properties\")) { data = FileUtil.readString(file, StringPool.ISO_8859_1); } else { data = FileUtil.readString(file); } parse(data); return this; } \n### Response:", "ground_truth": "Loads props from the file. Assumes UTF8 encoding unless\nthe file ends with '.properties', than it uses ISO 8859-1.", "predict": "Loads the properties file.\n\n@param file the file to load\n@return the loaded properties\n@throws IOException if the file cannot be read"}
{"ID": 1647, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Props load(final File file, final String encoding) throws IOException { parse(FileUtil.readString(file, encoding)); return this; } \n### Response:", "ground_truth": "Loads properties from the file in provided encoding.", "predict": "Loads the given file with the given encoding.\n\n@param file the file to load\n@param encoding the encoding to use\n@return the loaded properties\n@throws IOException if the file cannot be read"}
{"ID": 1648, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Props load(final InputStream in) throws IOException { final Writer out = new FastCharArrayWriter(); StreamUtil.copy(in, out); parse(out.toString()); return this; } \n### Response:", "ground_truth": "Loads properties from input stream. Stream is not closed at the end.", "predict": "Loads the properties from the given input stream.\n\n@param in the input stream\n@return the loaded properties\n@throws IOException if the input stream cannot be read"}
{"ID": 1649, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Props load(final Map<?, ?> p) { for (final Map.Entry<?, ?> entry : p.entrySet()) { final String name = entry.getKey().toString(); final Object value = entry.getValue(); if (value == null) { continue; } data.putBaseProperty(name, value.toString(), false); } return this; } \n### Response:", "ground_truth": "Loads base properties from the provided java properties.\nNull values are ignored.", "predict": "Loads all properties from the given map.\n\n@param p the map to load from\n@return this"}
{"ID": 1650, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public Props load(final Map<?, ?> map, final String prefix) { String realPrefix = prefix; realPrefix += '.'; for (final Map.Entry entry : map.entrySet()) { final String name = entry.getKey().toString(); final Object value = entry.getValue(); if (value == null) { continue; } data.putBaseProperty(realPrefix + name, value.toString(), false); } return this; } \n### Response:", "ground_truth": "Loads base properties from java Map using provided prefix.\nNull values are ignored.", "predict": "Loads the properties from the given map.\n\n@param map the map to load from\n@param prefix the prefix to use for the properties\n@return the properties"}
{"ID": 1651, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Props loadFromClasspath(final String... patterns) { ClassScanner.create() .registerEntryConsumer(entryData -> { String usedEncoding = JoddCore.encoding; if (StringUtil.endsWithIgnoreCase(entryData.name(), \".properties\")) { usedEncoding = StringPool.ISO_8859_1; } final String encoding = usedEncoding; UncheckedException.runAndWrapException(() -> load(entryData.openInputStream(), encoding)); }) .includeResources(true) .ignoreException(true) .excludeCommonJars() .excludeAllEntries(true) .includeEntries(patterns) .scanDefaultClasspath() .start(); return this; } \n### Response:", "ground_truth": "Loads props and properties from the classpath.", "predict": "Load properties from classpath.\n\n@param patterns the patterns\n@return the properties"}
{"ID": 1652, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getValueOrDefault(final String key, final String defaultValue) { initialize(); final String value = data.lookupValue(key, activeProfiles); if (value == null) { return defaultValue; } return value; } \n### Response:", "ground_truth": "Returns value of property, using active profiles or default value if not found.", "predict": "Returns the value of the given key or the given default value.\n\n@param key the key\n@param defaultValue the default value\n@return the value"}
{"ID": 1653, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setValue(final String key, final String value, final String profile) { if (profile == null) { data.putBaseProperty(key, value, false); } else { data.putProfileProperty(key, value, profile, false); } initialized = false; } \n### Response:", "ground_truth": "Sets value on some profile.", "predict": "Sets a profile property.\n\n@param key the property key\n@param value the property value\n@param profile the profile name"}
{"ID": 1654, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void extractProps(final Map target) { initialize(); data.extract(target, activeProfiles, null, null); } \n### Response:", "ground_truth": "Extracts props belonging to active profiles.", "predict": "Extracts the properties from the target.\n\n@param target the target"}
{"ID": 1655, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void extractProps(final Map target, final String... profiles) { initialize(); data.extract(target, profiles, null, null); } \n### Response:", "ground_truth": "Extract props of given profiles.", "predict": "Extracts properties from the target.\n\n@param target the target\n@param profiles the profiles"}
{"ID": 1656, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void extractSubProps(final Map target, final String... wildcardPatterns) { initialize(); data.extract(target, activeProfiles, wildcardPatterns, null); } \n### Response:", "ground_truth": "Extracts subset of properties that matches given wildcards.", "predict": "Extracts sub properties from the target.\n\n@param target the target\n@param wildcardPatterns the wildcard patterns"}
{"ID": 1657, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public Map<String, Object> innerMap(final String prefix) { initialize(); return data.extract(null, activeProfiles, null, prefix); } \n### Response:", "ground_truth": "Returns inner map from the props with given prefix. Keys in returned map\nwill not have the prefix.", "predict": "Returns a map with the specified prefix as key and the specified value as value.\n\n@param prefix the prefix\n@return the map"}
{"ID": 1658, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void addInnerMap(String prefix, final Map<?, ?> map, final String profile) { if (!StringUtil.endsWithChar(prefix, '.')) { prefix += StringPool.DOT; } for (Map.Entry<?, ?> entry : map.entrySet()) { String key = entry.getKey().toString(); key = prefix + key; setValue(key, entry.getValue().toString(), profile); } } \n### Response:", "ground_truth": "Adds child map to the props on given prefix.", "predict": "Adds a map to the list of maps in the given prefix.\n\n@param prefix\nthe prefix\n@param map\nthe map\n@param profile\nthe profile"}
{"ID": 1659, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void resolveActiveProfiles() { if (activeProfilesProp == null) { activeProfiles = null; return; } final PropsEntry pv = data.getBaseProperty(activeProfilesProp); if (pv == null) { // no active profile set as the property, exit return; } final String value = pv.getValue(); if (StringUtil.isBlank(value)) { activeProfiles = null; return; } activeProfiles = StringUtil.splitc(value, ','); StringUtil.trimAll(activeProfiles); } \n### Response:", "ground_truth": "Resolves active profiles from special property.\nThis property can be only a base property!\nIf default active property is not defined, nothing happens.\nOtherwise, it will replace currently active profiles.", "predict": "Resolve the active profiles."}
{"ID": 1660, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String[] getAllProfiles() { String[] profiles = new String[data.profileProperties.size()]; int index = 0; for (String profileName : data.profileProperties.keySet()) { profiles[index] = profileName; index++; } return profiles; } \n### Response:", "ground_truth": "Returns all profiles names.", "predict": "Returns an array of profiles.\n\n@return an array of profiles"}
{"ID": 1661, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String[] getProfilesFor(final String propKeyNameWildcard) { HashSet<String> profiles = new HashSet<>(); profile: for (Map.Entry<String, Map<String, PropsEntry>> entries : data.profileProperties.entrySet()) { String profileName = entries.getKey(); Map<String, PropsEntry> value = entries.getValue(); for (String propKeyName : value.keySet()) { if (Wildcard.equalsOrMatch(propKeyName, propKeyNameWildcard)) { profiles.add(profileName); continue profile; } } } return profiles.toArray(new String[0]); } \n### Response:", "ground_truth": "Returns all the profiles that define certain prop's key name.\nKey name is given as a wildcard, or it can be matched fully.", "predict": "Returns the profiles for the given propKeyName wildcard.\n\n@param propKeyName wildcard\n@return profiles"}
{"ID": 1662, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void addPropertyInjectionPoint(final PropertyInjectionPoint pip) { if (properties == null) { properties = new PropertyInjectionPoint[1]; properties[0] = pip; } else { properties = ArraysUtil.append(properties, pip); } } \n### Response:", "ground_truth": "Adds property injection point.", "predict": "Adds a property injection point.\n\n@param pip the pip"}
{"ID": 1663, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void addSetInjectionPoint(final SetInjectionPoint sip) { if (sets == null) { sets = new SetInjectionPoint[1]; sets[0] = sip; } else { sets = ArraysUtil.append(sets, sip); } } \n### Response:", "ground_truth": "Adds set injection point.", "predict": "Add a set injection point.\n\n@param sip the set injection point"}
{"ID": 1664, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void addMethodInjectionPoint(final MethodInjectionPoint mip) { if (methods == null) { methods = new MethodInjectionPoint[1]; methods[0] = mip; } else { methods = ArraysUtil.append(methods, mip); } } \n### Response:", "ground_truth": "Adds method injection point.", "predict": "Adds a method injection point.\n\n@param mip the method injection point"}
{"ID": 1665, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void addInitMethodPoints(final InitMethodPoint[] methods) { if (initMethods == null) { initMethods = methods; } else { initMethods = ArraysUtil.join(initMethods, methods); } } \n### Response:", "ground_truth": "Adds init methods.", "predict": "Adds the init method points.\n\n@param methods the methods"}
{"ID": 1666, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void addDestroyMethodPoints(final DestroyMethodPoint[] methods) { if (destroyMethods == null) { destroyMethods = methods; } else { destroyMethods = ArraysUtil.join(destroyMethods, methods); } } \n### Response:", "ground_truth": "Adds destroy methods.", "predict": "Adds the destroy method points.\n\n@param methods the methods"}
{"ID": 1667, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Class resolveTargetClass(final Class proxy) { final String name = proxy.getName(); if (name.endsWith(ProxettaNames.proxyClassNameSuffix)) { return proxy.getSuperclass(); } if (name.endsWith(ProxettaNames.wrapperClassNameSuffix)) { return getTargetWrapperType(proxy); } return proxy; } \n### Response:", "ground_truth": "Returns target class if proxetta applied on given class.\nIf not, returns given class as result.", "predict": "Resolve the target class.\n\n@param proxy the proxy\n@return the target class"}
{"ID": 1668, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void injectTargetIntoWrapper(final Object target, final Object wrapper) { injectTargetIntoWrapper(target, wrapper, ProxettaNames.wrapperTargetFieldName); } \n### Response:", "ground_truth": "Injects target instance into proxy using default target field name.\n@see #injectTargetIntoWrapper(Object, Object, String)", "predict": "Injects the target into the wrapper.\n\n@param target the target\n@param wrapper the wrapper"}
{"ID": 1669, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Class getTargetWrapperType(final Class wrapperClass) { try { final Field field = wrapperClass.getDeclaredField(ProxettaNames.wrapperTargetFieldName); return field.getType(); } catch (NoSuchFieldException nsfex) { throw new ProxettaException(nsfex); } } \n### Response:", "ground_truth": "Returns wrapper target type.", "predict": "Get the wrapper type for the target field.\n\n@param wrapperClass the wrapper class\n@return the wrapper type"}
{"ID": 1670, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected FieldDescriptor findField(final String fieldName) { FieldDescriptor fieldDescriptor = classDescriptor.getFieldDescriptor(fieldName, true); if (fieldDescriptor != null) { return fieldDescriptor; } // field descriptor not found in this class // try to locate it in the superclasses Class[] superclasses = classDescriptor.getAllSuperclasses(); for (Class superclass : superclasses) { ClassDescriptor classDescriptor = ClassIntrospector.get().lookup(superclass); fieldDescriptor = classDescriptor.getFieldDescriptor(fieldName, true); if (fieldDescriptor != null) { return fieldDescriptor; } } // nothing found return null; } \n### Response:", "ground_truth": "Locates property field. Field is being searched also in all\nsuperclasses of current class.", "predict": "Find the field with the given name.\n\n@param fieldName the name of the field\n@return the field descriptor"}
{"ID": 1671, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Class getType() { if (type == null) { if (fieldDescriptor != null) { type = fieldDescriptor.getRawType(); } else if (readMethodDescriptor != null) { type = getGetter(true).getGetterRawType(); //type = readMethodDescriptor.getGetterRawType(); } else if (writeMethodDescriptor != null) { type = getSetter(true).getSetterRawType(); //type = writeMethodDescriptor.getSetterRawType(); } } return type; } \n### Response:", "ground_truth": "Returns property type. Raw types are detected.", "predict": "Returns the type of the field or the type of the write method.\n\n@return the type of the field or the type of the write method."}
{"ID": 1672, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Class resolveKeyType(final boolean declared) { Class keyType = null; Getter getter = getGetter(declared); if (getter != null) { keyType = getter.getGetterRawKeyComponentType(); } if (keyType == null) { FieldDescriptor fieldDescriptor = getFieldDescriptor(); if (fieldDescriptor != null) { keyType = fieldDescriptor.getRawKeyComponentType(); } } return keyType; } \n### Response:", "ground_truth": "Resolves key type for given property descriptor.", "predict": "Resolves the key type.\n\n@param declared\nthe declared\n@return the class"}
{"ID": 1673, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Class resolveComponentType(final boolean declared) { Class componentType = null; Getter getter = getGetter(declared); if (getter != null) { componentType = getter.getGetterRawComponentType(); } if (componentType == null) { FieldDescriptor fieldDescriptor = getFieldDescriptor(); if (fieldDescriptor != null) { componentType = fieldDescriptor.getRawComponentType(); } } return componentType; } \n### Response:", "ground_truth": "Resolves component type for given property descriptor.", "predict": "Resolves the component type.\n\n@param declared\nthe declared\n@return the component type"}
{"ID": 1674, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static JsonResult of(final Object object) { final String json = JsonSerializer.create().deep(true).serialize(object); return new JsonResult(json); } \n### Response:", "ground_truth": "Creates JSON result from given object. The object will be serialized to JSON.", "predict": "Serializes an object to a JSON string.\n\n@param object the object to serialize\n@return the JSON result"}
{"ID": 1675, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static JsonResult of(final Exception exception) { final HashMap<String, Object> errorMap = new HashMap<>(); errorMap.put(\"message\", ExceptionUtil.message(exception)); errorMap.put(\"error\", exception.getClass().getName()); errorMap.put(\"cause\", exception.getCause() != null ? exception.getCause().getClass().getName() : null); final ArrayList<String> details = new ArrayList<>(); final StackTraceElement[] ste = ExceptionUtil.getStackTrace(exception, null, null); for (StackTraceElement stackTraceElement : ste) { details.add(stackTraceElement.toString()); } errorMap.put(\"details\", details); final String json = JsonSerializer.create().deep(true).serialize(errorMap); return new JsonResult(json).status(HttpStatus.error500().internalError()); } \n### Response:", "ground_truth": "Creates a JSON response from an exception. Response body will have information about the\nexception and response status will be set to 500.", "predict": "Creates a JSON result for an exception.\n\n@param exception the exception\n@return the JSON result"}
{"ID": 1676, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String resolveHttpMethodFromMethodName(final String methodName) { int i = 0; while (i < methodName.length()) { if (CharUtil.isUppercaseAlpha(methodName.charAt(i))) { break; } i++; } final String name = methodName.substring(0, i).toUpperCase(); for (final HttpMethod httpMethod : HttpMethod.values()) { if (httpMethod.equalsName(name)) { return httpMethod.name(); } } return null; } \n### Response:", "ground_truth": "Resolves HTTP method name from method name.\nIf method name or first camel-case word of a method equals to\na HTTP method, it will be used as that HTTP methods.", "predict": "Resolve the http method name from the method name.\n\n@param methodName the method name\n@return the http method name"}
{"ID": 1677, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static boolean match(final CharSequence string, final CharSequence pattern, int sNdx, int pNdx) { int pLen = pattern.length(); if (pLen == 1) { if (pattern.charAt(0) == '*') { // speed-up return true; } } int sLen = string.length(); boolean nextIsNotWildcard = false; while (true) { // check if end of string and/or pattern occurred if ((sNdx >= sLen)) { // end of string still may have pending '*' in pattern while ((pNdx < pLen) && (pattern.charAt(pNdx) == '*')) { pNdx++; } return pNdx >= pLen; } if (pNdx >= pLen) { // end of pattern, but not end of the string return false; } char p = pattern.charAt(pNdx); // pattern char // perform logic if (!nextIsNotWildcard) { if (p == '\\\\') { pNdx++; nextIsNotWildcard = true; continue; } if (p == '?') { sNdx++; pNdx++; continue; } if (p == '*') { char pNext = 0; // next pattern char if (pNdx + 1 < pLen) { pNext = pattern.charAt(pNdx + 1); } if (pNext == '*') { // double '*' have the same effect as one '*' pNdx++; continue; } int i; pNdx++; // find recursively if there is any substring from the end of the // line that matches the rest of the pattern !!! for (i = string.length(); i >= sNdx; i--) { if (match(string, pattern, i, pNdx)) { return true; } } return false; } } else { nextIsNotWildcard = false; } // check if pattern char and string char are equals if (p != string.charAt(sNdx)) { return false; } // everything matches for now, continue sNdx++; pNdx++; } } \n### Response:", "ground_truth": "Internal matching recursive function.", "predict": "Finds the first occurrence of the pattern in the string.\n\n@param string the string to match\n@param pattern the pattern to match\n@param sNdx the start of the string\n@param pNdx the start of the pattern\n@return true if the pattern matches the string, false otherwise"}
{"ID": 1678, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Loading resolveLoading(final boolean parentFirstStrategy, final String className) { boolean withParent = true; boolean withLoader = true; if (parentFirstStrategy) { if (isMatchingRules(className, loaderOnlyRules)) { withParent = false; } else if (isMatchingRules(className, parentOnlyRules)) { withLoader = false; } } else { if (isMatchingRules(className, parentOnlyRules)) { withLoader = false; } else if (isMatchingRules(className, loaderOnlyRules)) { withParent = false; } } return new Loading(withParent, withLoader); } \n### Response:", "ground_truth": "Resolves loading rules.", "predict": "Resolve loading.\n\n@param parentFirstStrategy the parent first strategy\n@param className the class name\n@return the loading"}
{"ID": 1679, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Loading resolveResourceLoading(final boolean parentFirstStrategy, String resourceName) { if (matchResourcesAsPackages) { resourceName = StringUtil.replaceChar(resourceName, '/', '.'); } return resolveLoading(parentFirstStrategy, resourceName); } \n### Response:", "ground_truth": "Resolves resources.", "predict": "Resolve the loading strategy for the given resource name.\n\n@param parentFirstStrategy\n@param resourceName\n@return"}
{"ID": 1680, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected synchronized Class<?> loadClass(final String className, final boolean resolve) throws ClassNotFoundException { // check first if the class has already been loaded Class<?> c = findLoadedClass(className); if (c != null) { if (resolve) { resolveClass(c); } return c; } // class not loaded yet Loading loading = resolveLoading(parentFirst, className); if (parentFirst) { // PARENT FIRST if (loading.withParent) { try { c = parentClassLoader.loadClass(className); } catch (ClassNotFoundException ignore) { } } if (c == null) { if (loading.withLoader) { c = this.findClass(className); } else { throw new ClassNotFoundException(\"Class not found: \" + className); } } } else { // THIS FIRST if (loading.withLoader) { try { c = this.findClass(className); } catch (ClassNotFoundException ignore) { } } if (c == null) { if (loading.withParent) { c = parentClassLoader.loadClass(className); } else { throw new ClassNotFoundException(\"Class not found: \" + className); } } } if (resolve) { resolveClass(c); } return c; } \n### Response:", "ground_truth": "Loads class using parent-first or parent-last strategy.", "predict": "Finds the class with the given name and returns it if it exists.\n\n@param className the class name\n@param resolve true to resolve the class, false to return the class directly\n@return the class\n@throws ClassNotFoundException if the class cannot be found"}
{"ID": 1681, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public URL getResource(final String resourceName) { URL url = null; Loading loading = resolveResourceLoading(parentFirst, resourceName); if (parentFirst) { // PARENT FIRST if (loading.withParent) { url = parentClassLoader.getResource(resourceName); } if (url == null) { if (loading.withLoader) { url = this.findResource(resourceName); } } } else { // THIS FIRST if (loading.withLoader) { url = this.findResource(resourceName); } if (url == null) { if (loading.withParent) { url = parentClassLoader.getResource(resourceName); } } } return url; } \n### Response:", "ground_truth": "Returns a resource using parent-first or parent-last strategy.", "predict": "Finds the resource with the given name.\n\n@param resourceName the resource name\n@return the URL of the resource"}
{"ID": 1682, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void waitFor() { try { synchronized (lock) { if (!end) { lock.wait(); } } } catch (InterruptedException ignore) { Thread.currentThread().interrupt(); } } \n### Response:", "ground_truth": "Waits for gobbler to end.", "predict": "Waits until the task is completed."}
{"ID": 1683, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Class<? extends Annotation> detectAnnotationType(final Annotation[] annotations) { for (final Annotation annotation : annotations) { if (annotation instanceof In) { return annotation.annotationType(); } else if (annotation instanceof Out) { return annotation.annotationType(); } } return null; } \n### Response:", "ground_truth": "Scans annotation and returns type of Madvoc annotations.", "predict": "Detect annotation type.\n\n@param annotations the annotations\n@return the annotation type"}
{"ID": 1684, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected InjectionPoint buildInjectionPoint( final String annotationValue, final String propertyName, final Class propertyType, final Class<? extends MadvocScope> scope) { final String value = annotationValue.trim(); final String name, targetName; if (StringUtil.isNotBlank(value)) { name = value; targetName = propertyName; } else { name = propertyName; targetName = null; } return new InjectionPoint(propertyType, name, targetName, scopeResolver.defaultOrScopeType(scope)); } \n### Response:", "ground_truth": "Builds injection point.", "predict": "Builds an InjectionPoint based on the given annotation value and the given property name.\n\n@param annotationValue the annotation value\n@param propertyName the property name\n@param propertyType the property type\n@param scope the scope\n@return the InjectionPoint"}
{"ID": 1685, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visit() { ClassDescriptor classDescriptor = ClassIntrospector.get().lookup(type); if (classMetadataName != null) { // process first 'meta' fields 'class' onProperty(classMetadataName, null, false); } PropertyDescriptor[] propertyDescriptors = classDescriptor.getAllPropertyDescriptors(); for (PropertyDescriptor propertyDescriptor : propertyDescriptors) { Getter getter = propertyDescriptor.getGetter(declared); if (getter != null) { String propertyName = propertyDescriptor.getName(); boolean isTransient = false; // check for transient flag FieldDescriptor fieldDescriptor = propertyDescriptor.getFieldDescriptor(); if (fieldDescriptor != null) { isTransient = Modifier.isTransient(fieldDescriptor.getField().getModifiers()); } onProperty(propertyName, propertyDescriptor, isTransient); } } } \n### Response:", "ground_truth": "Visits a type.", "predict": "Visit all properties of the given type."}
{"ID": 1686, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static URL[] of(ClassLoader classLoader, Class clazz) { if (clazz == null) { clazz = ClassPathURLs.class; } if (classLoader == null) { classLoader = clazz.getClassLoader(); } final Set<URL> urls = new LinkedHashSet<>(); while (classLoader != null) { if (classLoader instanceof URLClassLoader) { final URLClassLoader urlClassLoader = (URLClassLoader) classLoader; return urlClassLoader.getURLs(); } final URL url = classModuleUrl(classLoader, clazz); if (url != null) { urls.add(url); } classLoader = classLoader.getParent(); } return urls.toArray(new URL[0]); } \n### Response:", "ground_truth": "Returns urls for the classloader\n\n@param classLoader classloader in which to find urls\n@return list of urls or {@code null} if not found", "predict": "Returns the URLs for the given class.\n\n@param classLoader the class loader\n@param clazz the class\n@return the URLs"}
{"ID": 1687, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void setBean(final Object bean) { this.bean = bean; this.cd = (bean == null ? null : introspector.lookup(bean.getClass())); this.first = false; this.updateProperty = true; } \n### Response:", "ground_truth": "Sets new bean instance.", "predict": "Sets the bean.\n\n@param bean the bean"}
{"ID": 1688, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void updateBean(final Object bean) { this.setBean(bean); if (this.cd != null && this.cd.isSupplier()) { final Object newBean = ((Supplier)this.bean).get(); setBean(newBean); } } \n### Response:", "ground_truth": "Updates the bean. Detects special case of suppliers.", "predict": "Update the bean.\n\n@param bean the bean"}
{"ID": 1689, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void loadPropertyDescriptor() { if (updateProperty) { if (cd == null) { propertyDescriptor = null; } else { propertyDescriptor = cd.getPropertyDescriptor(name, true); } updateProperty = false; } } \n### Response:", "ground_truth": "Loads property descriptor, if property was updated.", "predict": "Loads the property descriptor."}
{"ID": 1690, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Getter getGetter(final boolean declared) { loadPropertyDescriptor(); return propertyDescriptor != null ? propertyDescriptor.getGetter(declared) : null; } \n### Response:", "ground_truth": "Returns getter.", "predict": "Get the getter for the property declared.\n\n@param declared the property declared\n@return the getter"}
{"ID": 1691, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Setter getSetter(final boolean declared) { loadPropertyDescriptor(); return propertyDescriptor != null ? propertyDescriptor.getSetter(declared) : null; } \n### Response:", "ground_truth": "Returns setter.", "predict": "Returns the setter for the property declared.\n\n@param declared\n@return"}
{"ID": 1692, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public DbOom connect() { connectionProvider.init(); final DbDetector dbDetector = new DbDetector(); dbDetector.detectDatabaseAndConfigureDbOom(connectionProvider, dbOomConfig); return this; } \n### Response:", "ground_truth": "Initializes the DbOom by connecting to the database. Database will be detected\nand DbOom will be configured to match it.", "predict": "Connect to the database.\n\n@return this"}
{"ID": 1693, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void add(final Iterator<T> iterator) { if (allIterators.contains(iterator)) { throw new IllegalArgumentException(\"Duplicate iterator\"); } allIterators.add(iterator); } \n### Response:", "ground_truth": "Adds an iterator to this composite.", "predict": "Adds an iterator to the collection.\n\n@param iterator the iterator to add"}
{"ID": 1694, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void printLogo() { System.out.println(Chalk256.chalk().yellow().on(Jodd.JODD)); } \n### Response:", "ground_truth": "Prints a logo.", "predict": "Prints the logo."}
{"ID": 1695, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void stop() { joyProps.stop(); try { joyDb.stop(); joyPetite.stop(); } catch (Exception ignore) { } if (log != null) { log.info(\"Joy is down. Bye, bye!\"); } } \n### Response:", "ground_truth": "Stops the Joy.", "predict": "Stops the joy server."}
{"ID": 1696, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Socket createSocket(final String host, final int port, final int connectionTimeout) throws IOException { final SocketFactory socketFactory = getSocketFactory(proxy, false, false, connectionTimeout); if (connectionTimeout < 0) { return socketFactory.createSocket(host, port); } else { // creates unconnected socket Socket socket = socketFactory.createSocket(); socket.connect(new InetSocketAddress(host, port), connectionTimeout); return socket; } } \n### Response:", "ground_truth": "Creates a socket using socket factory.", "predict": "Create a socket connection to the remote host.\n\n@param host\n@param port\n@param connectionTimeout\n@return\n@throws IOException"}
{"ID": 1697, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected SSLSocket createSSLSocket( final String host, final int port, final int connectionTimeout, final boolean trustAll, final boolean verifyHttpsHost) throws IOException { final SocketFactory socketFactory = getSocketFactory(proxy, true, trustAll, connectionTimeout); final Socket socket; if (connectionTimeout < 0) { socket = socketFactory.createSocket(host, port); } else { // creates unconnected socket // unfortunately, this does not work always // sslSocket = (SSLSocket) socketFactory.createSocket(); // sslSocket.connect(new InetSocketAddress(host, port), connectionTimeout); // // Note: SSLSocketFactory has several create() methods. // Those that take arguments all connect immediately // and have no options for specifying a connection timeout. // // So, we have to create a socket and connect it (with a // connection timeout), then have the SSLSocketFactory wrap // the already-connected socket. // socket = Sockets.connect(host, port, connectionTimeout); //sock.setSoTimeout(readTimeout); //socket.connect(new InetSocketAddress(host, port), connectionTimeout); // continue to wrap this plain socket with ssl socket... } // wrap plain socket in an SSL socket SSLSocket sslSocket; if (socket instanceof SSLSocket) { sslSocket = (SSLSocket) socket; } else { if (socketFactory instanceof SSLSocketFactory) { sslSocket = (SSLSocket) ((SSLSocketFactory)socketFactory).createSocket(socket, host, port, true); } else { sslSocket = (SSLSocket) (getDefaultSSLSocketFactory(trustAll)).createSocket(socket, host, port, true); } } // sslSocket is now ready if (secureEnabledProtocols != null) { final String[] values = StringUtil.splitc(secureEnabledProtocols, ','); StringUtil.trimAll(values); sslSocket.setEnabledProtocols(values); } // set SSL parameters to allow host name verifier if (verifyHttpsHost) { final SSLParameters sslParams = new SSLParameters(); sslParams.setEndpointIdentificationAlgorithm(\"HTTPS\"); sslSocket.setSSLParameters(sslParams); } return sslSocket; } \n### Response:", "ground_truth": "Creates a SSL socket. Enables default secure enabled protocols if specified.", "predict": "Create a SSL socket for the given host, port, connection timeout, trustAll, and verifyHttpsHost.\n\n@param host\n@param port\n@param connectionTimeout\n@param trustAll\n@param verifyHttpsHost\n@return\n@throws IOException"}
{"ID": 1698, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected SSLSocketFactory getDefaultSSLSocketFactory(final boolean trustAllCertificates) throws IOException { if (trustAllCertificates) { try { SSLContext sc = SSLContext.getInstance(sslProtocol); sc.init(null, TrustManagers.TRUST_ALL_CERTS, new java.security.SecureRandom()); return sc.getSocketFactory(); } catch (NoSuchAlgorithmException | KeyManagementException e) { throw new IOException(e); } } else { return (SSLSocketFactory) SSLSocketFactory.getDefault(); } } \n### Response:", "ground_truth": "Returns default SSL socket factory allowing setting trust managers.", "predict": "Returns the default SSLSocketFactory for the given trustAllCertificates flag.\n\n@param trustAllCertificates\n@return\n@throws IOException"}
{"ID": 1699, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected SocketFactory getSocketFactory( final ProxyInfo proxy, final boolean ssl, final boolean trustAllCertificates, final int connectionTimeout) throws IOException { switch (proxy.getProxyType()) { case NONE: if (ssl) { return getDefaultSSLSocketFactory(trustAllCertificates); } else { return SocketFactory.getDefault(); } case HTTP: return new HTTPProxySocketFactory(proxy, connectionTimeout); case SOCKS4: return new Socks4ProxySocketFactory(proxy, connectionTimeout); case SOCKS5: return new Socks5ProxySocketFactory(proxy, connectionTimeout); default: return null; } } \n### Response:", "ground_truth": "Returns socket factory based on proxy type and SSL requirements.", "predict": "Get the socket factory for the proxy.\n\n@param proxy\n@param ssl\n@param trustAllCertificates\n@param connectionTimeout\n@return\n@throws IOException"}
{"ID": 1700, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String random(int count, final char[] chars) { if (count == 0) { return StringPool.EMPTY; } final char[] result = new char[count]; while (count-- > 0) { result[count] = chars[rnd.nextInt(chars.length)]; } return new String(result); } \n### Response:", "ground_truth": "Creates random string whose length is the number of characters specified.\nCharacters are chosen from the set of characters specified.", "predict": "Generate a random string of the specified length.\n\n@param count the number of characters to generate\n@param chars the characters to use\n@return the random string"}
{"ID": 1701, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String random(int count, final char start, final char end) { if (count == 0) { return StringPool.EMPTY; } final char[] result = new char[count]; final int len = end - start + 1; while (count-- > 0) { result[count] = (char) (rnd.nextInt(len) + start); } return new String(result); } \n### Response:", "ground_truth": "Creates random string whose length is the number of characters specified.\nCharacters are chosen from the provided range.", "predict": "Generate a random string of the specified length.\n\n@param count the number of characters to generate\n@param start the starting character\n@param end the ending character\n@return the random string"}
{"ID": 1702, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String randomRanges(int count, final char... ranges) { if (count == 0) { return StringPool.EMPTY; } int i = 0; int len = 0; final int[] lens = new int[ranges.length]; while (i < ranges.length) { int gap = ranges[i + 1] - ranges[i] + 1; len += gap; lens[i] = len; i += 2; } final char[] result = new char[count]; while (count-- > 0) { char c = 0; int r = rnd.nextInt(len); for (i = 0; i < ranges.length; i += 2) { if (r < lens[i]) { r += ranges[i]; if (i != 0) { r -= lens[i - 2]; } c = (char) r; break; } } result[count] = c; } return new String(result); } \n### Response:", "ground_truth": "Creates random string whose length is the number of characters specified.\nCharacters are chosen from the multiple sets defined by range pairs.\nAll ranges must be in acceding order.", "predict": "Generate a random string of the specified length, using the specified ranges.\n\n@param count the number of characters to generate\n@param ranges the ranges of characters to use\n@return the random string"}
{"ID": 1703, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") protected Collection<Object> newArrayInstance(final Class targetType) { if (targetType == null || targetType == List.class || targetType == Collection.class || targetType.isArray()) { return listSupplier.get(); } if (targetType == Set.class) { return new HashSet<>(); } try { return (Collection<Object>) targetType.getDeclaredConstructor().newInstance(); } catch (Exception e) { throw new JsonException(e); } } \n### Response:", "ground_truth": "Creates new type for JSON array objects.\nIt returns a collection.\nLater, the collection will be converted into the target type.", "predict": "Creates a new array instance of the specified type.\n\n@param targetType the target type\n@return the new array instance"}
{"ID": 1704, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void injectValueIntoObject(final Object target, final PropertyDescriptor pd, final Object value) { Object convertedValue = value; if (value != null) { Class targetClass = pd.getType(); convertedValue = convertType(value, targetClass); } try { Setter setter = pd.getSetter(true); if (setter != null) { setter.invokeSetter(target, convertedValue); } } catch (Exception ex) { throw new JsonException(ex); } } \n### Response:", "ground_truth": "Injects value into the targets property.", "predict": "Injects a value into the target object.\n\n@param target the target object\n@param pd the property descriptor\n@param value the value"}
{"ID": 1705, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Object convertType(final Object value, final Class targetType) { final Class valueClass = value.getClass(); if (valueClass == targetType) { return value; } try { return TypeConverterManager.get().convertType(value, targetType); } catch (Exception ex) { if (!strictTypes) { return null; } throw new JsonException(\"Type conversion failed\", ex); } } \n### Response:", "ground_truth": "Converts type of the given value.", "predict": "Converts the given value to the given target type.\n\n@param value the value to convert\n@param targetType the target type\n@return the converted value"}
{"ID": 1706, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visitProvide(final String service, final String... providers) { if (mv != null) { mv.visitProvide(service, providers); } } \n### Response:", "ground_truth": "Visit an implementation of a service.\n\n@param service the internal name of the service.\n@param providers the internal names of the implementations of the service (there is at least\none provider).", "predict": "Visit the provided service.\n\n@param service the service name\n@param providers the providers"}
{"ID": 1707, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public static <A> TypeCache<A> createDefault() { return (TypeCache<A>)Defaults.implementation.get(); } \n### Response:", "ground_truth": "Creates default implementation of the type cache.", "predict": "Creates a default implementation of the TypeCache interface.\n\n@return the default implementation of the TypeCache interface"}
{"ID": 1708, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public T put(final Class<?> type, final T value) { return map.put(type, value); } \n### Response:", "ground_truth": "Add values to the map.", "predict": "Put a value into the map.\n\n@param type the type of the value\n@param value the value\n@return the value"}
{"ID": 1709, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public MethodDescriptor[] getAllMethodDescriptors() { if (allMethods == null) { final List<MethodDescriptor> allMethodsList = new ArrayList<>(); for (MethodDescriptor[] methodDescriptors : methodsMap.values()) { Collections.addAll(allMethodsList, methodDescriptors); } final MethodDescriptor[] allMethods = allMethodsList.toArray(new MethodDescriptor[0]); Arrays.sort(allMethods, Comparator.comparing(md -> md.getMethod().getName())); this.allMethods = allMethods; } return allMethods; } \n### Response:", "ground_truth": "Returns all methods. Cached. Lazy.", "predict": "Returns an array of all the MethodDescriptors in the class.\n\n@return an array of all the MethodDescriptors in the class"}
{"ID": 1710, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String resolveIpAddress(final String hostname) { try { InetAddress netAddress; if (hostname == null || hostname.equalsIgnoreCase(LOCAL_HOST)) { netAddress = InetAddress.getLocalHost(); } else { netAddress = Inet4Address.getByName(hostname); } return netAddress.getHostAddress(); } catch (UnknownHostException ignore) { return null; } } \n### Response:", "ground_truth": "Resolves IP address from a hostname.", "predict": "Resolve IP address.\n\n@param hostname the hostname\n@return the ip address"}
{"ID": 1711, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int getIpAsInt(final String ipAddress) { int ipIntValue = 0; String[] tokens = StringUtil.splitc(ipAddress, '.'); for (String token : tokens) { if (ipIntValue > 0) { ipIntValue <<= 8; } ipIntValue += Integer.parseInt(token); } return ipIntValue; } \n### Response:", "ground_truth": "Returns IP address as integer.", "predict": "Get IP address as integer.\n\n@param ipAddress IP address\n@return int"}
{"ID": 1712, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean validateAgaintIPAdressV4Format(final String input) { if (input == null) { return false; } int hitDots = 0; char[] data = input.toCharArray(); for (int i = 0; i < data.length; i++) { char c = data[i]; int b = 0; do { if (c < '0' || c > '9') { return false; } b = (b * 10 + c) - 48; if (++i >= data.length) { break; } c = data[i]; } while (c != '.'); if (b > 255) { return false; } hitDots++; } return hitDots == 4; } \n### Response:", "ground_truth": "Checks given string against IP address v4 format.\n\n@param input an ip address - may be null\n@return <tt>true</tt> if param has a valid ip v4 format <tt>false</tt> otherwise\n@see <a href=\"https://en.wikipedia.org/wiki/IP_address#IPv4_addresses\">ip address v4</a>", "predict": "Validates the input string against the IP address v4 format.\n\n@param input the input string\n@return true if the input string is valid"}
{"ID": 1713, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String resolveHostName(final byte[] ip) { try { InetAddress address = InetAddress.getByAddress(ip); return address.getHostName(); } catch (UnknownHostException ignore) { return null; } } \n### Response:", "ground_truth": "Resolves host name from IP address bytes.", "predict": "Resolves the host name from the given IP address.\n\n@param ip the IP address\n@return the host name"}
{"ID": 1714, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static byte[] downloadBytes(final String url) throws IOException { try (InputStream inputStream = new URL(url).openStream()) { return StreamUtil.readBytes(inputStream); } } \n### Response:", "ground_truth": "Downloads resource as byte array.", "predict": "Downloads the specified bytes from the specified URL.\n\n@param url the URL to download\n@return the bytes downloaded\n@throws IOException if the specified URL cannot be accessed"}
{"ID": 1715, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String downloadString(final String url, final String encoding) throws IOException { try (InputStream inputStream = new URL(url).openStream()) { return new String(StreamUtil.readChars(inputStream, encoding)); } } \n### Response:", "ground_truth": "Downloads resource as String.", "predict": "Download a string from a URL.\n\n@param url the URL to download\n@param encoding the encoding to use\n@return the string\n@throws IOException if the URL cannot be downloaded"}
{"ID": 1716, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void downloadFile(final String url, final File file) throws IOException { try ( InputStream inputStream = new URL(url).openStream(); ReadableByteChannel rbc = Channels.newChannel(inputStream); FileChannel fileChannel = FileChannel.open( file.toPath(), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE) ) { fileChannel.transferFrom(rbc, 0, Long.MAX_VALUE); } } \n### Response:", "ground_truth": "Downloads resource to a file, potentially very efficiently.", "predict": "Download a file from a URL.\n\n@param url the URL to download from\n@param file the file to download\n@throws IOException if the file cannot be downloaded"}
{"ID": 1717, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void inject(final ActionRequest actionRequest) { final Targets targets = actionRequest.getTargets(); final ServletContext servletContext = actionRequest.getHttpServletRequest().getServletContext(); scopeResolver.forEachScope(madvocScope -> madvocScope.inject(servletContext, targets)); scopeResolver.forEachScope(madvocScope -> madvocScope.inject(actionRequest, targets)); } \n### Response:", "ground_truth": "Performs injection.", "predict": "Injects the Madvoc scopes into the action request.\n\n@param actionRequest the action request"}
{"ID": 1718, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void outject(final ActionRequest actionRequest) { final Targets targets = actionRequest.getTargets(); scopeResolver.forEachScope(madvocScope -> madvocScope.outject(actionRequest, targets)); } \n### Response:", "ground_truth": "Performs outjection.", "predict": "Dispatches the given action request to all Madvoc scopes.\n\n@param actionRequest the action request"}
{"ID": 1719, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Socket connect(final String hostname, final int port) throws IOException { final Socket socket = new Socket(); socket.connect(new InetSocketAddress(hostname, port)); return socket; } \n### Response:", "ground_truth": "Creates a socket.", "predict": "Connect to a remote host.\n\n@param hostname hostname of the remote host\n@param port port of the remote host\n@return socket to connect to\n@throws IOException if connection fails"}
{"ID": 1720, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Socket connect(final String hostname, final int port, final int connectionTimeout) throws IOException { final Socket socket = new Socket(); if (connectionTimeout <= 0) { socket.connect(new InetSocketAddress(hostname, port)); } else { socket.connect(new InetSocketAddress(hostname, port), connectionTimeout); } return socket; } \n### Response:", "ground_truth": "Creates a socket with a timeout.", "predict": "Connect to a remote host.\n\n@param hostname\n@param port\n@param connectionTimeout\n@return socket\n@throws IOException"}
{"ID": 1721, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static int getPrimitiveClassNameIndex(final String className) { int dotIndex = className.indexOf('.'); if (dotIndex != -1) { return -1; } return Arrays.binarySearch(PRIMITIVE_TYPE_NAMES, className); } \n### Response:", "ground_truth": "Detects if provided class name is a primitive type.\nReturns >= 0 number if so.", "predict": "Returns the index of the primitive type name in the given class name.\n\n@param className the class name\n@return the index of the primitive type name in the given class name"}
{"ID": 1722, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Class loadClass(final String className, final ClassLoader classLoader) throws ClassNotFoundException { String arrayClassName = prepareArrayClassnameForLoading(className); if ((className.indexOf('.') == -1) && (arrayClassName == null)) { // maybe a primitive int primitiveNdx = getPrimitiveClassNameIndex(className); if (primitiveNdx >= 0) { return PRIMITIVE_TYPES[primitiveNdx]; } } // try #1 - using provided class loader if (classLoader != null) { Class klass = loadClass(className, arrayClassName, classLoader); if (klass != null) { return klass; } } // try #2 - using thread class loader ClassLoader currentThreadClassLoader = Thread.currentThread().getContextClassLoader(); if ((currentThreadClassLoader != null) && (currentThreadClassLoader != classLoader)) { Class klass = loadClass(className, arrayClassName, currentThreadClassLoader); if (klass != null) { return klass; } } // try #3 - using caller classloader, similar as Class.forName() //Class callerClass = ReflectUtil.getCallerClass(2); Class callerClass = ClassUtil.getCallerClass(); ClassLoader callerClassLoader = callerClass.getClassLoader(); if ((callerClassLoader != classLoader) && (callerClassLoader != currentThreadClassLoader)) { Class klass = loadClass(className, arrayClassName, callerClassLoader); if (klass != null) { return klass; } } // try #4 - everything failed, try alternative array loader if (arrayClassName != null) { try { return loadArrayClassByComponentType(className, classLoader); } catch (ClassNotFoundException ignore) { } } throw new ClassNotFoundException(\"Class not found: \" + className); } \n### Response:", "ground_truth": "Loads class by name.", "predict": "Loads a class using the provided class loader.\n\n@param className the class name\n@param classLoader the class loader\n@return the class\n@throws ClassNotFoundException if the class could not be loaded"}
{"ID": 1723, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Class loadArrayClassByComponentType(final String className, final ClassLoader classLoader) throws ClassNotFoundException { int ndx = className.indexOf('['); int multi = StringUtil.count(className, '['); String componentTypeName = className.substring(0, ndx); Class componentType = loadClass(componentTypeName, classLoader); if (multi == 1) { return Array.newInstance(componentType, 0).getClass(); } int[] multiSizes; if (multi == 2) { multiSizes = new int[] {0, 0}; } else if (multi == 3) { multiSizes = new int[] {0, 0, 0}; } else { multiSizes = (int[]) Array.newInstance(int.class, multi); } return Array.newInstance(componentType, multiSizes).getClass(); } \n### Response:", "ground_truth": "Loads array class using component type.", "predict": "Loads a class by its component type name.\n\n@param className the class name\n@param classLoader the class loader\n@return the class\n@throws ClassNotFoundException if the class cannot be loaded"}
{"ID": 1724, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void shutdown() { for (final BeanData beanData : instances.values()) { beanData.callDestroyMethods(); } instances.clear(); } \n### Response:", "ground_truth": "Iterate all beans and invokes registered destroy methods.", "predict": "Shutdown the bean manager."}
{"ID": 1725, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T extends Comparable> BinarySearch<T> forArray(final T[] array) { return new BinarySearch<T>() { @Override @SuppressWarnings( {\"unchecked\"}) protected int compare(final int index, final T element) { return array[index].compareTo(element); } @Override protected int getLastIndex() { return array.length - 1; } }; } \n### Response:", "ground_truth": "Creates binary search wrapper over an array.", "predict": "Returns the first element of the specified array that is greater than or equal to the specified element.\n\n@param array the array to search\n@param <T> the type of the elements in the array\n@return the first element of the specified array that is greater than or equal to the specified element"}
{"ID": 1726, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> BinarySearch<T> forArray(final T[] array, final Comparator<T> comparator) { return new BinarySearch<T>() { @Override @SuppressWarnings( {\"unchecked\"}) protected int compare(final int index, final T element) { return comparator.compare(array[index], element); } @Override protected int getLastIndex() { return array.length - 1; } }; } \n### Response:", "ground_truth": "Creates binary search wrapper over an array with given comparator.", "predict": "Returns the first element of the given array that is greater than or equal to the given element.\n\n@param <T> the type of the elements in the array\n@param array the array to search\n@param comparator the comparator to use for comparing elements\n@return the first element of the given array that is greater than or equal to the given element"}
{"ID": 1727, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public T exclude(final String... excludes) { for (String ex : excludes) { rules.exclude(ex); } return _this(); } \n### Response:", "ground_truth": "Defines excluded property names.", "predict": "Excludes the specified strings from the rule.\n\n@param excludes the strings to exclude\n@return the current instance of the rule builder"}
{"ID": 1728, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public T include(final String... includes) { for (String in : includes) { rules.include(in); } return _this(); } \n### Response:", "ground_truth": "Defines included property names.", "predict": "Adds a set of rules to be included in the rule set.\n\n@param includes the rules to include\n@return the current rule set"}
{"ID": 1729, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public T includeAs(final Class template) { blacklist = false; String[] properties = getAllBeanPropertyNames(template, false); include(properties); return _this(); } \n### Response:", "ground_truth": "Defines included property names as public properties\nof given template class. Sets to black list mode.", "predict": "Helper method to include all properties from the given class into the template.\n\n@param template the class to include\n@return the current instance of the class"}
{"ID": 1730, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void start(final int startIndex) { this.tagStartIndex = startIndex; this.name = null; this.idNdx = -1; this.attributesCount = 0; this.tagLength = 0; this.modified = false; this.type = TagType.START; this.rawTag = false; } \n### Response:", "ground_truth": "Starts the tag with the index of first '<'.\nResets all tag data.", "predict": "Sets the start position of the tag.\n\n@param startIndex the position of the start of the tag"}
{"ID": 1731, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> void registerComponent(final String name, final Class<T> component, final Consumer<T> consumer) { log.debug(() -> \"Madvoc WebApp component: [\" + name + \"] --> \" + component.getName()); madpc.removeBean(name); madpc.registerPetiteBean(component, name, null, null, false, consumer); } \n### Response:", "ground_truth": "Registers Madvoc component with given name.", "predict": "Register a component.\n\n@param <T> the type of component\n@param name the name of the component\n@param component the component to register\n@param consumer the consumer to be notified when the component is created"}
{"ID": 1732, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void resolveColumnDbSqlType(final Connection connection, final DbEntityColumnDescriptor dec) { if (dec.dbSqlType != SqlType.DB_SQLTYPE_UNKNOWN) { return; } ResultSet rs = null; DbEntityDescriptor ded = dec.getDbEntityDescriptor(); try { DatabaseMetaData dmd = connection.getMetaData(); rs = dmd.getColumns(null, ded.getSchemaName(), ded.getTableName(), dec.getColumnName()); if (rs.next()) { dec.dbSqlType = rs.getInt(\"DATA_TYPE\"); } else { dec.dbSqlType = SqlType.DB_SQLTYPE_NOT_AVAILABLE; if (log.isWarnEnabled()) { log.warn(\"Column SQL type not available: \" + ded.toString() + '.' + dec.getColumnName()); } } } catch (SQLException sex) { dec.dbSqlType = SqlType.DB_SQLTYPE_NOT_AVAILABLE; if (log.isWarnEnabled()) { log.warn(\"Column SQL type not resolved: \" + ded.toString() + '.' + dec.getColumnName(), sex); } } finally { DbUtil.close(rs); } } \n### Response:", "ground_truth": "Resolves column db sql type and populates it in column descriptor if missing.", "predict": "Resolve the column db sql type.\n\n@param connection\nthe connection\n@param dec\nthe dec"}
{"ID": 1733, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String preprocessSql(String sqlString) { // detects callable statement if (sqlString.charAt(0) == '{') { return sqlString; } // quickly detect if SQL string is a key if (!CharUtil.isAlpha(sqlString.charAt(0))) { sqlString = sqlString.substring(1); } else if (sqlString.indexOf(' ') != -1) { return sqlString; } final String sqlFromMap = dbOom.queryMap().getQuery(sqlString); if (sqlFromMap != null) { sqlString = sqlFromMap.trim(); } return sqlString; } \n### Response:", "ground_truth": "Pre-process SQL before using it. If string starts with a non-ascii char\nor it has no spaces, it will be loaded from the query map.", "predict": "preprocess the sql string to remove unnecessary spaces and special characters"}
{"ID": 1734, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected ResultSetMapper createResultSetMapper(final ResultSet resultSet) { final Map<String, ColumnData> columnAliases = sqlgen != null ? sqlgen.getColumnData() : null; return new DefaultResultSetMapper(dbOom, resultSet, columnAliases, cacheEntities, this); } \n### Response:", "ground_truth": "Factory for result sets mapper.", "predict": "Create ResultSetMapper.\n\n@param resultSet\n@return"}
{"ID": 1735, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> T findGeneratedKey(final Class<T> type) { return find(new Class[] {type}, false, getGeneratedColumns()); } \n### Response:", "ground_truth": "Finds generated key column of given type.", "predict": "Finds the generated key for the given type.\n\n@param type the type of the key\n@return the generated key"}
{"ID": 1736, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void populateGeneratedKeys(final Object entity) { final String[] generatedColumns = getGeneratedColumnNames(); if (generatedColumns == null) { return; } DbEntityDescriptor ded = dbOom.entityManager().lookupType(entity.getClass()); // prepare key types Class[] keyTypes = new Class[generatedColumns.length]; String[] properties = new String[generatedColumns.length]; for (int i = 0; i < generatedColumns.length; i++) { String column = generatedColumns[i]; DbEntityColumnDescriptor decd = ded.findByColumnName(column); if (decd != null) { keyTypes[i] = decd.getPropertyType(); properties[i] = decd.getPropertyName(); } } final Object keyValues = findGeneratedColumns(keyTypes); if (!keyValues.getClass().isArray()) { BeanUtil.declared.setProperty(entity, properties[0], keyValues); } else { for (int i = 0; i < properties.length; i++) { BeanUtil.declared.setProperty(entity, properties[i], ((Object[]) keyValues)[i]); } } } \n### Response:", "ground_truth": "Populates entity with generated column values from executed query.", "predict": "Populates the entity with the generated keys.\n\n@param entity the entity"}
{"ID": 1737, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected <R extends ActionInterceptor> R createWrapper(final Class<R> wrapperClass) { return petiteContainer.createBean(wrapperClass); } \n### Response:", "ground_truth": "Acquires interceptor from Petite container.", "predict": "Creates a wrapper bean for the given class.\n\n@param wrapperClass the class of the wrapper bean\n@return the wrapper bean"}
{"ID": 1738, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Q setBean(final String beanName, final Object bean) { if (bean == null) { return _this(); } init(); final String beanNamePrefix = beanName + '.'; query.forEachNamedParameter(p -> { final String paramName = p.name; if (paramName.startsWith(beanNamePrefix)) { final String propertyName = paramName.substring(beanNamePrefix.length()); if (BeanUtil.declared.hasRootProperty(bean, propertyName)) { final Object value = BeanUtil.declared.getProperty(bean, propertyName); setObject(paramName, value); } } }); return _this(); } \n### Response:", "ground_truth": "Sets bean parameters from bean. Non-existing bean properties are ignored.", "predict": "Sets the bean with the given name.\n\n@param beanName the bean name\n@param bean the bean\n@return this"}
{"ID": 1739, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Q setMap(final Map parameters) { if (parameters == null) { return _this(); } init(); query.forEachNamedParameter(p -> { final String paramName = p.name; setObject(paramName, parameters.get(paramName)); }); return _this(); } \n### Response:", "ground_truth": "Sets properties from the map.", "predict": "Sets the query parameters.\n\n@param parameters the parameters\n@return the query"}
{"ID": 1740, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Q setObjects(final Object... objects) { int index = 1; for (final Object object : objects) { setObject(index++, object); } return _this(); } \n### Response:", "ground_truth": "Sets an array of objects parameters in given order.", "predict": "Sets the objects to be used by this Q object.\n\n@param objects the objects to be used by this Q object.\n@return this"}
{"ID": 1741, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void insertChunkAfter(final SqlChunk previous) { SqlChunk next = previous.nextChunk; previous.nextChunk = this; this.previousChunk = previous; if (next != null) { next.previousChunk = this; this.nextChunk = next; } } \n### Response:", "ground_truth": "Appends chunk to previous one and maintains the double-linked list of the previous chunk.\nCurrent surrounding connections of this chunk will be cut-off.", "predict": "Inserts a new chunk after this one.\n\n@param previous the chunk to insert after"}
{"ID": 1742, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected DbEntityDescriptor lookupType(final Class entity) { final DbEntityDescriptor ded = dbEntityManager.lookupType(entity); if (ded == null) { throw new DbSqlBuilderException(\"Invalid or not-persistent entity: \" + entity.getName()); } return ded; } \n### Response:", "ground_truth": "Lookups for entity name and throws an exception if entity type is invalid.", "predict": "Lookup the entity type for the given entity class.\n\n@param entity the entity class\n@return the entity type"}
{"ID": 1743, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected DbEntityDescriptor findColumnRef(final String columnRef) { DbEntityDescriptor ded = templateData.findTableDescriptorByColumnRef(columnRef); if (ded == null) { throw new DbSqlBuilderException(\"Invalid column reference: [\" + columnRef + \"]\"); } return ded; } \n### Response:", "ground_truth": "Finds a table that contains given column.", "predict": "Find the entity descriptor for the given column reference.\n\n@param columnRef the column reference\n@return the entity descriptor for the given column reference"}
{"ID": 1744, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String resolveTable(final String tableRef, final DbEntityDescriptor ded) { String tableAlias = templateData.getTableAlias(tableRef); if (tableAlias != null) { return tableAlias; } return ded.getTableNameForQuery(); } \n### Response:", "ground_truth": "Resolves table name or alias that will be used in the query.", "predict": "Resolve table alias.\n\n@param tableRef\nthe table reference\n@param ded\nthe ded\n@return the string"}
{"ID": 1745, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected static Class resolveClass(final Object object) { Class type = object.getClass(); return type == Class.class ? (Class) object : type; } \n### Response:", "ground_truth": "Resolves object to a class.", "predict": "Resolve the class of the given object.\n\n@param object the object to resolve\n@return the class of the given object"}
{"ID": 1746, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void appendMissingSpace(final StringBuilder out) { int len = out.length(); if (len == 0) { return; } len--; if (!CharUtil.isWhitespace(out.charAt(len))) { out.append(' '); } } \n### Response:", "ground_truth": "Appends missing space if the output doesn't end with whitespace.", "predict": "Appends a space character to the given output string.\n\n@param out the output string to append a space character to"}
{"ID": 1747, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Enumeration<String> getFileParameterNames() { if (mreq == null) { return null; } return Collections.enumeration(mreq.getFileParameterNames()); } \n### Response:", "ground_truth": "Get an enumeration of the parameter names for uploaded files", "predict": "Returns an enumeration of the file parameter names.\n\n@return an enumeration of the file parameter names"}
{"ID": 1748, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean include(final ServletRequest request, final ServletResponse response, final String page) throws IOException, ServletException { RequestDispatcher dispatcher = request.getRequestDispatcher(page); if (dispatcher != null) { dispatcher.include(request, response); return true; } return false; } \n### Response:", "ground_truth": "Include page which path is relative to the current HTTP request.", "predict": "Include a page in the request.\n\n@param request the request\n@param response the response\n@param page the page\n@return true if the page was included, false otherwise\n@throws ServletException if an error occurred\n@throws IOException if an error occurred"}
{"ID": 1749, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String getUrl(final HttpServletRequest request) { String servletPath = request.getServletPath(); String query = request.getQueryString(); if ((query != null) && (query.length() != 0)) { servletPath += '?' + query; } return servletPath; } \n### Response:", "ground_truth": "Returns url, without context path, convenient for request dispatcher.", "predict": "Get the servlet path from the request.\n\n@param request the request\n@return the servlet path"}
{"ID": 1750, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String getRequestUri(final HttpServletRequest request) { String result = getIncludeRequestUri(request); if (result == null) { result = request.getRequestURI(); } return result; } \n### Response:", "ground_truth": "Get current request uri.", "predict": "Get the request URI.\n\n@param request the request\n@return the request URI"}
{"ID": 1751, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String[] resolveParamNames(final Method actionClassMethod) { MethodParameter[] methodParameters = Paramo.resolveParameters(actionClassMethod); String[] names = new String[methodParameters.length]; for (int i = 0; i < methodParameters.length; i++) { names[i] = methodParameters[i].getName(); } return names; } \n### Response:", "ground_truth": "Returns method parameter names.", "predict": "Resolve the parameter names for the given action class method.\n\n@param actionClassMethod the action class method\n@return the parameter names"}
{"ID": 1752, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void start() { initLogger(); log.info(\"PETITE start ----------\"); petiteContainer = createPetiteContainer(); if (externalsCache) { petiteContainer.setExternalsCache(TypeCache.createDefault()); } log.info(\"Web application? \" + isWebApplication); if (!isWebApplication) { // make session scope to act as singleton scope // if this is not a web application (and http session is not available). petiteContainer.registerScope(SessionScope.class, new SingletonScope(petiteContainer)); } // load parameters from properties files petiteContainer.defineParameters(joyPropsSupplier.get().getProps()); // automagic configuration if (autoConfiguration) { final AutomagicPetiteConfigurator automagicPetiteConfigurator = new AutomagicPetiteConfigurator(petiteContainer); automagicPetiteConfigurator.registerAsConsumer(joyScannerSupplier.get().getClassScanner()); } petiteContainerConsumers.accept(this.petiteContainer); log.info(\"PETITE OK!\"); } \n### Response:", "ground_truth": "Creates and initializes Petite container.\nIt will be auto-magically configured by scanning the classpath.", "predict": "Start the Petite container."}
{"ID": 1753, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void stop() { if (log != null) { log.info(\"PETITE stop\"); } if (petiteContainer != null) { petiteContainer.shutdown(); } petiteContainer = null; } \n### Response:", "ground_truth": "Stops Petite container.", "predict": "Stops thePETITE."}
{"ID": 1754, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter subject(final String subject) { final SearchTerm subjectTerm = new SubjectTerm(subject); concat(subjectTerm); return this; } \n### Response:", "ground_truth": "Defines filter for SUBJECT field.\n\n@param subject The SUBJECT.\n@return this", "predict": "Sets the email subject.\n\n@param subject the email subject\n@return the email filter"}
{"ID": 1755, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter messageId(final String messageId) { final SearchTerm msgIdTerm = new MessageIDTerm(messageId); concat(msgIdTerm); return this; } \n### Response:", "ground_truth": "Defines filter for message id.\n\n@param messageId The message ID.\n@return this", "predict": "Add a message id filter.\n\n@param messageId the message id\n@return the email filter"}
{"ID": 1756, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter from(final String fromAddress) { final SearchTerm fromTerm = new FromStringTerm(fromAddress); concat(fromTerm); return this; } \n### Response:", "ground_truth": "Defines filter for FROM field.\n\n@param fromAddress The FROM address\n@return this", "predict": "Sets the email address to filter from.\n\n@param fromAddress the from address\n@return the email filter"}
{"ID": 1757, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter to(final String toAddress) { final SearchTerm toTerm = new RecipientStringTerm(RecipientType.TO, toAddress); concat(toTerm); return this; } \n### Response:", "ground_truth": "Defines filter for TO field.\n\n@param toAddress The TO address.\n@return this", "predict": "Add a recipient to the email search.\n\n@param toAddress the recipient address\n@return the email filter"}
{"ID": 1758, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter cc(final String ccAddress) { final SearchTerm toTerm = new RecipientStringTerm(RecipientType.CC, ccAddress); concat(toTerm); return this; } \n### Response:", "ground_truth": "Defines filter for CC field.\n\n@param ccAddress CC addreses.\n@return this", "predict": "Adds a CC address to the search.\n\n@param ccAddress the cc address\n@return the email filter"}
{"ID": 1759, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter bcc(final String bccAddress) { final SearchTerm toTerm = new RecipientStringTerm(RecipientType.BCC, bccAddress); concat(toTerm); return this; } \n### Response:", "ground_truth": "Defines filter for BCC field.\n\n@param bccAddress BCC address.\n@return this", "predict": "Adds a bcc address to the search.\n\n@param bccAddress the bcc address\n@return the email filter"}
{"ID": 1760, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter flags(final Flags flags, final boolean value) { final SearchTerm flagTerm = new FlagTerm(flags, value); concat(flagTerm); return this; } \n### Response:", "ground_truth": "Defines filter for many flags at once.\n\n@param flags The {@link Flags} to filter on.\n@param value The {@link Flag} setting to check for.\n@return this", "predict": "Add a new flag to the email filter.\n\n@param flags the flags\n@param value the value\n@return the email filter"}
{"ID": 1761, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter flag(final Flag flag, final boolean value) { final Flags flags = new Flags(); flags.add(flag); return flags(flags, value); } \n### Response:", "ground_truth": "Defines filter for single flag.\n\n@param flag  The flag to filter on.\n@param value The {@link Flag} setting to check for.\n@return this", "predict": "Add a flag to the filter.\n\n@param flag the flag\n@param value the value\n@return the filter"}
{"ID": 1762, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter receivedDate(final Operator operator, final long milliseconds) { final SearchTerm term = new ReceivedDateTerm(operator.value, new Date(milliseconds)); concat(term); return this; } \n### Response:", "ground_truth": "Defines filter for received date.\n\n@return this", "predict": "Add a new ReceivedDateTerm to the search.\n\n@param operator the operator\n@param milliseconds the milliseconds\n@return the email filter"}
{"ID": 1763, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter sentDate(final Operator operator, final long milliseconds) { final SearchTerm term = new SentDateTerm(operator.value, new Date(milliseconds)); concat(term); return this; } \n### Response:", "ground_truth": "Defines filter for sent date.\n\n@param operator     {@link Operator} to use.\n@param milliseconds the milliseconds since January 1, 1970, 00:00:00 GMT.\n@return this", "predict": "Add a sent date filter.\n\n@param operator the operator\n@param milliseconds the milliseconds\n@return the email filter"}
{"ID": 1764, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter size(final Operator comparison, final int size) { final SearchTerm term = new SizeTerm(comparison.value, size); concat(term); return this; } \n### Response:", "ground_truth": "Defines filter for message size.\n\n@param comparison {@link Operator}.\n@param size       size of message.\n@return this", "predict": "Filters the email based on the size.\n\n@param comparison the operator to compare\n@param size the size to filter\n@return the email filter"}
{"ID": 1765, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter and(final EmailFilter... emailFilters) { final SearchTerm[] searchTerms = new SearchTerm[emailFilters.length]; for (int i = 0; i < emailFilters.length; i++) { searchTerms[i] = emailFilters[i].searchTerm; } concat(new AndTerm(searchTerms)); return this; } \n### Response:", "ground_truth": "Defines AND group of filters.\n\n@param emailFilters array of {@link EmailFilter}s to AND.\n@return this", "predict": "Adds a new email filter to the list of email filters.\n\n@param emailFilters\nthe email filters to add\n@return the current email filter"}
{"ID": 1766, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter or(final EmailFilter... emailFilters) { final SearchTerm[] searchTerms = new SearchTerm[emailFilters.length]; for (int i = 0; i < emailFilters.length; i++) { searchTerms[i] = emailFilters[i].searchTerm; } concat(new OrTerm(searchTerms)); return this; } \n### Response:", "ground_truth": "Defines OR group of filters.\n\n@param emailFilters array of {@link EmailFilter}s to OR.\n@return this", "predict": "Adds a new email filter that is the OR of the specified email filters.\n\n@param emailFilters the email filters to be ORed\n@return the new email filter"}
{"ID": 1767, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter not(final EmailFilter emailFilter) { final SearchTerm searchTerm = new NotTerm(emailFilter.searchTerm); concat(searchTerm); return this; } \n### Response:", "ground_truth": "Appends single filter as NOT.\n\n@param emailFilter {@link EmailFilter} to append.\n@return this", "predict": "Adds a not filter.\n\n@param emailFilter email filter to be added\n@return the email filter"}
{"ID": 1768, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void concat(SearchTerm searchTerm) { if (nextIsNot) { searchTerm = new NotTerm(searchTerm); nextIsNot = false; } if (operatorAnd) { and(searchTerm); } else { or(searchTerm); } } \n### Response:", "ground_truth": "Concatenates last search term with new one.\n\n@param searchTerm searchTerm {@link SearchTerm} concatenate.\n@see #and(SearchTerm)\n@see #or(SearchTerm)", "predict": "Concatenates the given search term into the current search term.\n\n@param searchTerm the search term to concatenate"}
{"ID": 1769, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String encode(final byte[] bytes) { StringBuilder base32 = new StringBuilder((bytes.length * 8 + 4) / 5); int currByte, digit, i = 0; while (i < bytes.length) { // STEP 0; insert new 5 bits, leave 3 bits currByte = bytes[i++] & 255; base32.append(CHARS[currByte >> 3]); digit = (currByte & 7) << 2; if (i >= bytes.length) { base32.append(CHARS[digit]); break; } // STEP 3: insert 2 new bits, then 5 bits, leave 1 bit currByte = bytes[i++] & 255; base32.append(CHARS[digit | (currByte >> 6)]); base32.append(CHARS[(currByte >> 1) & 31]); digit = (currByte & 1) << 4; if (i >= bytes.length) { base32.append(CHARS[digit]); break; } // STEP 1: insert 4 new bits, leave 4 bit currByte = bytes[i++] & 255; base32.append(CHARS[digit | (currByte >> 4)]); digit = (currByte & 15) << 1; if (i >= bytes.length) { base32.append(CHARS[digit]); break; } // STEP 4: insert 1 new bit, then 5 bits, leave 2 bits currByte = bytes[i++] & 255; base32.append(CHARS[digit | (currByte >> 7)]); base32.append(CHARS[(currByte >> 2) & 31]); digit = (currByte & 3) << 3; if (i >= bytes.length) { base32.append(CHARS[digit]); break; } // STEP 2: insert 3 new bits, then 5 bits, leave 0 bit currByte = bytes[i++] & 255; base32.append(CHARS[digit | (currByte >> 5)]); base32.append(CHARS[currByte & 31]); } return base32.toString(); } \n### Response:", "ground_truth": "Encode an array of binary bytes into a Base32 string.", "predict": "Encode a byte array into a base32 string.\n\n@param bytes the byte array to encode\n@return the base32 string"}
{"ID": 1770, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected byte[] convertValueToArray(final Object value) { if (value instanceof Blob) { final Blob blob = (Blob) value; try { final long length = blob.length(); if (length > Integer.MAX_VALUE) { throw new TypeConversionException(\"Blob is too big.\"); } return blob.getBytes(1, (int) length); } catch (SQLException sex) { throw new TypeConversionException(value, sex); } } if (value instanceof File) { try { return FileUtil.readBytes((File) value); } catch (IOException ioex) { throw new TypeConversionException(value, ioex); } } if (value instanceof Collection) { final Collection collection = (Collection) value; final byte[] target = new byte[collection.size()]; int i = 0; for (final Object element : collection) { target[i] = convertType(element); i++; } return target; } if (value instanceof Iterable) { final Iterable iterable = (Iterable) value; final ArrayList<Byte> byteArrayList = new ArrayList<>(); for (final Object element : iterable) { final byte convertedValue = convertType(element); byteArrayList.add(Byte.valueOf(convertedValue)); } final byte[] array = new byte[byteArrayList.size()]; for (int i = 0; i < byteArrayList.size(); i++) { final Byte b = byteArrayList.get(i); array[i] = b.byteValue(); } return array; } if (value instanceof CharSequence) { final String[] strings = StringUtil.splitc(value.toString(), ArrayConverter.NUMBER_DELIMITERS); return convertArrayToArray(strings); } // everything else: return convertToSingleElementArray(value); } \n### Response:", "ground_truth": "Converts non-array value to array. Detects various\ntypes and collections, iterates them to make conversion\nand to create target array.", "predict": "Converts the given value to an array of bytes.\n\n@param value the value to convert\n@return the converted value as an array of bytes"}
{"ID": 1771, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected boolean isGzipEligible(final HttpServletRequest request) { // request parameter name if (requestParameterName.length() != 0) { String forceGzipString = request.getParameter(requestParameterName); if (forceGzipString != null) { return Converter.get().toBooleanValue(forceGzipString, false); } } // extract uri String uri = request.getRequestURI(); if (uri == null) { return false; } uri = uri.toLowerCase(); boolean result = false; // check uri if (matches == null) { // match == * if (extensions == null) { // extensions == * return true; } // extension String extension = FileNameUtil.getExtension(uri); if (extension.length() > 0) { extension = extension.toLowerCase(); if (StringUtil.equalsOne(extension, extensions) != -1) { result = true; } } } else { if (wildcards) { result = Wildcard.matchPathOne(uri, matches) != -1; } else { for (String match : matches) { if (uri.contains(match)) { result = true; break; } } } } if ((result) && (excludes != null)) { if (wildcards) { if (Wildcard.matchPathOne(uri, excludes) != -1) { result = false; } } else { for (String exclude : excludes) { if (uri.contains(exclude)) { result = false; // excludes founded break; } } } } return result; } \n### Response:", "ground_truth": "Determine if request is eligible for GZipping.", "predict": "Checks if the request is eligible for gzip compression.\n\n@param request the request\n@return true if the request is eligible for gzip compression"}
{"ID": 1772, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<Violation> validate(final Object target) { return validate(ValidationContext.resolveFor(target.getClass()), target); } \n### Response:", "ground_truth": "Validate object using context from the annotations.", "predict": "Validates the given object.\n\n@param target the object to validate\n@return a list of violations"}
{"ID": 1773, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<Violation> validate(final ValidationContext ctx, final Object target, final String targetName) { for (Map.Entry<String, List<Check>> entry : ctx.map.entrySet()) { String name = entry.getKey(); Object value = BeanUtil.declaredSilent.getProperty(target, name); String valueName = targetName != null ? (targetName + '.' + name) : name; // move up ValidationConstraintContext vcc = new ValidationConstraintContext(this, target, valueName); for (Check check : entry.getValue()) { String[] checkProfiles = check.getProfiles(); if (!matchProfiles(checkProfiles)) { continue; } if (check.getSeverity() < severity) { continue; } ValidationConstraint constraint = check.getConstraint(); if (!constraint.isValid(vcc, value)) { addViolation(new Violation(valueName, target, value, check)); } } } return getViolations(); } \n### Response:", "ground_truth": "Performs validation of provided validation context and appends violations.", "predict": "Validates the given target object.\n\n@param ctx the context\n@param target the target object\n@param targetName the name of the target object\n@return the list of violations"}
{"ID": 1774, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void useProfile(final String profile) { if (profile == null) { return; } if (this.enabledProfiles == null) { this.enabledProfiles = new HashSet<>(); } this.enabledProfiles.add(profile); } \n### Response:", "ground_truth": "Enables single profile.", "predict": "Sets the profile to use.\n\n@param profile the profile to use"}
{"ID": 1775, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void useProfiles(final String... enabledProfiles) { if (enabledProfiles == null) { return; } if (this.enabledProfiles == null) { this.enabledProfiles = new HashSet<>(); } Collections.addAll(this.enabledProfiles, enabledProfiles); } \n### Response:", "ground_truth": "Enables list of profiles.", "predict": "Sets the profiles that are enabled for the application.\n\n@param enabledProfiles the profiles that are enabled for the application"}
{"ID": 1776, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected boolean matchProfiles(final String[] checkProfiles) { // test for all profiles if ((checkProfiles != null) && (checkProfiles.length == 1) && checkProfiles[0].equals(ALL_PROFILES)) { return true; } if (enabledProfiles == null || enabledProfiles.isEmpty()) { if (validateAllProfilesByDefault) { return true; // all profiles are considered as enabled } // only default profile is enabled if ((checkProfiles == null) || (checkProfiles.length == 0)) { return true; } for (String profile : checkProfiles) { if (StringUtil.isEmpty(profile)) { return true; // default profile } if (profile.equals(DEFAULT_PROFILE)) { return true; } } return false; } // there are enabled profiles if ((checkProfiles == null) || (checkProfiles.length == 0)) { return enabledProfiles.contains(DEFAULT_PROFILE); } boolean result = false; for (String profile : checkProfiles) { boolean b = true; boolean must = false; if (StringUtil.isEmpty(profile)) { profile = DEFAULT_PROFILE; } else if (profile.charAt(0) == '-') { profile = profile.substring(1); b = false; } else if (profile.charAt(0) == '+') { profile = profile.substring(1); must = true; } if (enabledProfiles.contains(profile)) { if (!b) { return false; } result = true; } else { if (must) { return false; } } } return result; } \n### Response:", "ground_truth": "Determine if any of checks profiles is among enabled profiles.", "predict": "Checks if profiles are enabled.\n\n@param checkProfiles the profiles to check\n@return true if profiles are enabled"}
{"ID": 1777, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Object parseRequestBody(final String body, final Class targetType) { return JsonParser.create().parse(body, targetType); } \n### Response:", "ground_truth": "Parses request body into the target type.", "predict": "Parses the JSON body into a target object.\n\n@param body the JSON body\n@param targetType the target type\n@return the parsed JSON object"}
{"ID": 1778, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public long toMilliseconds() { double then = (fraction - JD_1970.fraction) * MILLIS_IN_DAY; then += (integer - JD_1970.integer) * MILLIS_IN_DAY; then += then > 0 ? 1.0e-6 : -1.0e-6; return (long) then; } \n### Response:", "ground_truth": "Converts to milliseconds.", "predict": "Converts the given date to milliseconds.\n\n@return the number of milliseconds since the Unix epoch."}
{"ID": 1779, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public JulianDate add(final JulianDate jds) { int i = this.integer + jds.integer; double f = this.fraction + jds.fraction; return new JulianDate(i, f); } \n### Response:", "ground_truth": "Adds a JD to current instance.", "predict": "Adds the given JulianDate to this one.\n\n@param jds the JulianDate to add\n@return the JulianDate with the given integer and fraction added"}
{"ID": 1780, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public JulianDate sub(final JulianDate jds) { int i = this.integer - jds.integer; double f = this.fraction -jds.fraction; return new JulianDate(i, f); } \n### Response:", "ground_truth": "Subtracts a JD from current instance.", "predict": "Returns the sub JulianDate of this JulianDate.\n\n@param jds the JulianDate to be sub- JulianDate of this JulianDate\n@return the sub JulianDate of this JulianDate"}
{"ID": 1781, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void set(final int i, double f) { integer = i; int fi = (int) f; f -= fi; integer += fi; if (f < 0) { f += 1; integer--; } this.fraction = f; } \n### Response:", "ground_truth": "Sets integer and fractional part with normalization.\nNormalization means that if double is out of range,\nvalues will be correctly fixed.", "predict": "Sets the fraction of the number.\n\n@param i\nthe number to set the fraction of\n@param f\nthe fraction of the number"}
{"ID": 1782, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected void initialize(final char[] input) { super.initialize(input); this.tag = new ParsedTag(); this.doctype = new ParsedDoctype(); this.text = new char[1024]; this.textLen = 0; this.parsingTime = -1; } \n### Response:", "ground_truth": "Initializes parser.", "predict": "Initializes the parsed document.\n\n@param input the input to be parsed"}
{"ID": 1783, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void emitComment(final int from, final int to) { if (config.enableConditionalComments) { // CC: downlevel-hidden starting if (match(CC_IF, from)) { int endBracketNdx = find(']', from + 3, to); CharSequence expression = charSequence(from + 1, endBracketNdx); ndx = endBracketNdx + 1; char c = input[ndx]; if (c != '>') { errorInvalidToken(); } visitor.condComment(expression, true, true, false); state = DATA_STATE; return; } if (to > CC_ENDIF2.length && match(CC_ENDIF2, to - CC_ENDIF2.length)) { // CC: downlevel-hidden ending visitor.condComment(_ENDIF, false, true, true); state = DATA_STATE; return; } } CharSequence comment = charSequence(from, to); visitor.comment(comment); commentStart = -1; } \n### Response:", "ground_truth": "Emits a comment. Also checks for conditional comments!", "predict": "Emits a comment.\n\n@param from the start position of the comment\n@param to the end position of the comment"}
{"ID": 1784, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void _error(String message) { if (config.calculatePosition) { Position currentPosition = position(ndx); message = message .concat(StringPool.SPACE) .concat(currentPosition.toString()); } else { message = message .concat(\" [@\") .concat(Integer.toString(ndx)) .concat(StringPool.RIGHT_SQ_BRACKET); } visitor.error(message); } \n### Response:", "ground_truth": "Prepares error message and reports it to the visitor.", "predict": "Generates a human-readable error message.\n\n@param message the error message"}
{"ID": 1785, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String createHash(final char[] password) { // Generate a random salt SecureRandom random = new SecureRandom(); byte[] salt = new byte[saltBytes]; random.nextBytes(salt); // Hash the password byte[] hash = pbkdf2(password, salt, pbkdf2Iterations, hashBytes); // format iterations:salt:hash return pbkdf2Iterations + \":\" + StringUtil.toHexString(salt) + \":\" + StringUtil.toHexString(hash); } \n### Response:", "ground_truth": "Returns a salted PBKDF2 hash of the password.\n\n@param password the password to hash\n@return a salted PBKDF2 hash of the password", "predict": "Generate a hash of the password.\n\n@param password the password\n@return the hash"}
{"ID": 1786, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static byte[] pbkdf2(final char[] password, final byte[] salt, final int iterations, final int bytes) { PBEKeySpec spec = new PBEKeySpec(password, salt, iterations, bytes * 8); try { SecretKeyFactory skf = SecretKeyFactory.getInstance(PBKDF2_ALGORITHM); return skf.generateSecret(spec).getEncoded(); } catch (NoSuchAlgorithmException ignore) { return null; } catch (InvalidKeySpecException e) { throw new IllegalArgumentException(e); } } \n### Response:", "ground_truth": "Computes the PBKDF2 hash of a password.\n\n@param password the password to hash.\n@param salt the salt\n@param iterations the iteration count (slowness factor)\n@param bytes the length of the hash to compute in bytes\n@return the PBDKF2 hash of the password", "predict": "Generates a PBKDF2 key from a password and salt.\n\n@param password\n@param salt\n@param iterations\n@param bytes\n@return"}
{"ID": 1787, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static byte[] fromHex(final String hex) { final byte[] binary = new byte[hex.length() / 2]; for (int i = 0; i < binary.length; i++) { binary[i] = (byte) Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16); } return binary; } \n### Response:", "ground_truth": "Converts a string of hexadecimal characters into a byte array.\n\n@param hex the hex string\n@return the hex string decoded into a byte array", "predict": "Converts a hex string to a byte array.\n\n@param hex hex string\n@return byte array"}
{"ID": 1788, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ProviderDefinition[] resolveProviderDefinitions(final Class type, final String name) { return providerResolver.resolve(type, name); } \n### Response:", "ground_truth": "Resolves provider definition defined in a bean.", "predict": "Resolves the provider definitions for the given type and name.\n\n@param type the type to resolve\n@param name the name of the provider\n@return the provider definitions"}
{"ID": 1789, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailAttachmentBuilder name(final String name) { if (name != null && !name.trim().isEmpty()) { this.name = name; } return this; } \n### Response:", "ground_truth": "Sets file name.\n\n@param name File name to set.\n@return this", "predict": "Sets the name of the email attachment.\n\n@param name the name of the email attachment\n@return the current builder"}
{"ID": 1790, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected EmailAttachmentBuilder setContentIdFromNameIfMissing() { if (contentId == null) { if (name != null) { contentId(FileNameUtil.getName(name)); } else { contentId(NO_NAME); } } return this; } \n### Response:", "ground_truth": "Set content ID if it is missing.\n\n@return this\n@see #contentId(String)", "predict": "Returns the email attachment content id if it is not provided.\n\n@return the email attachment content id if it is not provided."}
{"ID": 1791, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String resolveContentType(final String contentType) { if (contentType != null) { return contentType; } if (name == null) { return MimeTypes.MIME_APPLICATION_OCTET_STREAM; } final String extension = FileNameUtil.getExtension(name); return MimeTypes.getMimeType(extension); } \n### Response:", "ground_truth": "Resolves content type from all data.\n\n@param contentType Content type if we know it. {@code null} is fine to use.\n@return content type", "predict": "Resolve the content type.\n\n@param contentType the content type\n@return the content type"}
{"ID": 1792, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: int computeAttributesSize() { symbolTable.addConstantUtf8(Constants.MODULE); // 6 attribute header bytes, 6 bytes for name, flags and version, and 5 * 2 bytes for counts. int size = 22 + requires.length + exports.length + opens.length + usesIndex.length + provides.length; if (packageCount > 0) { symbolTable.addConstantUtf8(Constants.MODULE_PACKAGES); // 6 attribute header bytes, and 2 bytes for package_count. size += 8 + packageIndex.length; } if (mainClassIndex > 0) { symbolTable.addConstantUtf8(Constants.MODULE_MAIN_CLASS); // 6 attribute header bytes, and 2 bytes for main_class_index. size += 8; } return size; } \n### Response:", "ground_truth": "Returns the size of the Module, ModulePackages and ModuleMainClass attributes generated by this\nModuleWriter. Also add the names of these attributes in the constant pool.\n\n@return the size in bytes of the Module, ModulePackages and ModuleMainClass attributes.", "predict": "Compute the size of the attributes table.\n\n@return the size of the attributes table."}
{"ID": 1793, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: void putAttributes(final ByteVector output) { // 6 bytes for name, flags and version, and 5 * 2 bytes for counts. int moduleAttributeLength = 16 + requires.length + exports.length + opens.length + usesIndex.length + provides.length; output .putShort(symbolTable.addConstantUtf8(Constants.MODULE)) .putInt(moduleAttributeLength) .putShort(moduleNameIndex) .putShort(moduleFlags) .putShort(moduleVersionIndex) .putShort(requiresCount) .putByteArray(requires.data, 0, requires.length) .putShort(exportsCount) .putByteArray(exports.data, 0, exports.length) .putShort(opensCount) .putByteArray(opens.data, 0, opens.length) .putShort(usesCount) .putByteArray(usesIndex.data, 0, usesIndex.length) .putShort(providesCount) .putByteArray(provides.data, 0, provides.length); if (packageCount > 0) { output .putShort(symbolTable.addConstantUtf8(Constants.MODULE_PACKAGES)) .putInt(2 + packageIndex.length) .putShort(packageCount) .putByteArray(packageIndex.data, 0, packageIndex.length); } if (mainClassIndex > 0) { output .putShort(symbolTable.addConstantUtf8(Constants.MODULE_MAIN_CLASS)) .putInt(2) .putShort(mainClassIndex); } } \n### Response:", "ground_truth": "Puts the Module, ModulePackages and ModuleMainClass attributes generated by this ModuleWriter\nin the given ByteVector.\n\n@param output where the attributes must be put.", "predict": "Puts the attributes of the module.\n\n@param output the output"}
{"ID": 1794, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String decode(final String source, final String encoding) { return decode(source, encoding, false); } \n### Response:", "ground_truth": "Decodes URL elements. This method may be used for all\nparts of URL, except for the query parts, since it does\nnot decode the '+' character.\n@see #decodeQuery(String, String)", "predict": "Decodes a string using the specified encoding.\n\n@param source the source string\n@param encoding the encoding to use\n@return the decoded string"}
{"ID": 1795, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String decodeQuery(final String source, final String encoding) { return decode(source, encoding, true); } \n### Response:", "ground_truth": "Decodes query name or value.", "predict": "Decodes a query string.\n\n@param source the source string\n@param encoding the encoding\n@return the decoded string"}
{"ID": 1796, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override @SuppressWarnings(\"unchecked\") public void start() { initLogger(); if (!databaseEnabled) { log.info(\"DB not enabled.\"); return; } log.info(\"DB start ----------\"); final PetiteContainer petiteContainer = joyPetiteSupplier.get().getPetiteContainer(); // connection pool connectionProvider = createConnectionProviderIfNotSupplied(); petiteContainer.addBean(beanNamePrefix() + \"pool\", connectionProvider); if (connectionProvider instanceof CoreConnectionPool) { final CoreConnectionPool pool = (CoreConnectionPool) connectionProvider; if (pool.getDriver() == null) { databaseEnabled = false; log.warn(\"DB configuration not set (\" + beanNamePrefix() + \"pool.*). DB will be disabled.\"); return; } } connectionProvider.init(); checkConnectionProvider(); // transactions manager jtxManager = createJtxTransactionManager(connectionProvider); jtxManager.setValidateExistingTransaction(true); final AnnotationTxAdviceManager annTxAdviceManager = new AnnotationTxAdviceManager(new LeanJtxWorker(jtxManager), jtxScopePattern); AnnotationTxAdviceSupport.manager = annTxAdviceManager; // create proxy joyProxettaSupplier.get().getProxetta().withAspect(createTxProxyAspects(annTxAdviceManager.getAnnotations())); final DbSessionProvider sessionProvider = new DbJtxSessionProvider(jtxManager); // querymap final long startTime = System.currentTimeMillis(); final QueryMap queryMap = new DbPropsQueryMap(); log.debug(\"Queries loaded in \" + (System.currentTimeMillis() - startTime) + \"ms.\"); log.debug(\"Total queries: \" + queryMap.size()); // dboom dbOom = DbOom.create() .withConnectionProvider(connectionProvider) .withSessionProvider(sessionProvider) .withQueryMap(queryMap) .get(); dbOom.connect(); final DbEntityManager dbEntityManager = dbOom.entityManager(); dbEntityManager.reset(); petiteContainer.addBean(beanNamePrefix() + \"query\", dbOom.queryConfig()); petiteContainer.addBean(beanNamePrefix() + \"oom\", dbOom.config()); // automatic configuration if (autoConfiguration) { final AutomagicDbOomConfigurator automagicDbOomConfigurator = new AutomagicDbOomConfigurator(dbEntityManager, true); automagicDbOomConfigurator.registerAsConsumer( joyScannerSupplier.get().getClassScanner()); } dbEntityManagerConsumers.accept(dbEntityManager); log.info(\"DB OK!\"); } \n### Response:", "ground_truth": "Initializes database. First, creates connection pool.\nand transaction manager. Then, Jodds DbEntityManager is\nconfigured. It is also configured automagically, by scanning\nthe class path for entities.", "predict": "Starts the database."}
{"ID": 1797, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void checkConnectionProvider() { final Connection connection = connectionProvider.getConnection(); try { final DatabaseMetaData databaseMetaData = connection.getMetaData(); String name = databaseMetaData.getDatabaseProductName(); String version = databaseMetaData.getDatabaseProductVersion(); if (log.isInfoEnabled()) { log.info(\"Connected to database: \" + name + \" v\" + version); } } catch (SQLException sex) { log.error(\"DB connection failed: \", sex); } finally { connectionProvider.closeConnection(connection); } } \n### Response:", "ground_truth": "Checks if connection provider can return a connection.", "predict": "Checks the connection provider and closes the connection if it fails."}
{"ID": 1798, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) { // if ((access & AsmUtil.ACC_FINAL) != 0) { // return null; // skip finals // } MethodSignatureVisitor msign = createMethodSignature(access, name, desc, signature, exceptions, thisReference, this.generics); String key = ProxettaAsmUtil.createMethodSignaturesKey(access, name, desc, thisReference); methodSignatures.put(key, msign); allMethodSignatures.add(msign.getCleanSignature()); return new MethodAnnotationReader(msign); } \n### Response:", "ground_truth": "Stores method signature for target method.", "predict": "Create a signature visitor for the given access.\n\n@param access the access to the method\n@param name the name of the method\n@param desc the description of the method\n@param signature the signature of the method\n@param exceptions the exceptions that can be thrown by the method\n@return the visitor"}
{"ID": 1799, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void visitEnd() { // prepare class annotations if (classAnnotations != null) { annotations = classAnnotations.toArray(new AnnotationInfo[0]); classAnnotations = null; } List<String> superList = new ArrayList<>(); Set<String> allInterfaces = new HashSet<>(); if (nextInterfaces != null) { allInterfaces.addAll(nextInterfaces); } // check all public super methods that are not overridden in superclass while (nextSupername != null) { InputStream inputStream = null; ClassReader cr; try { inputStream = ClassLoaderUtil.getClassAsStream(nextSupername, classLoader); cr = new ClassReader(inputStream); } catch (IOException ioex) { throw new ProxettaException(\"Unable to inspect super class: \" + nextSupername, ioex); } finally { StreamUtil.close(inputStream); } superList.add(nextSupername); superClassReaders.add(cr); // remember the super class reader cr.accept(new SuperClassVisitor(), 0); if (cr.getInterfaces() != null) { Collections.addAll(allInterfaces, cr.getInterfaces()); } } superClasses = superList.toArray(new String[0]); // check all interface methods that are not overridden in super-interface Set<String> todoInterfaces = new HashSet<>(allInterfaces); Set<String> newCollectedInterfaces = new HashSet<>(); while (true) { for (String next : todoInterfaces) { InputStream inputStream = null; ClassReader cr; try { inputStream = ClassLoaderUtil.getClassAsStream(next, classLoader); cr = new ClassReader(inputStream); } catch (IOException ioex) { throw new ProxettaException(\"Unable to inspect super interface: \" + next, ioex); } finally { StreamUtil.close(inputStream); } superClassReaders.add(cr); // remember the super class reader cr.accept(new SuperClassVisitor(), 0); if (cr.getInterfaces() != null) { for (String newInterface : cr.getInterfaces()) { if (!allInterfaces.contains(newInterface) && !todoInterfaces.contains(newInterface)) { // new interface found newCollectedInterfaces.add(newInterface); } } } } // perform collection allInterfaces.addAll(todoInterfaces); if (newCollectedInterfaces.isEmpty()) { // no new interface found break; } todoInterfaces.clear(); todoInterfaces.addAll(newCollectedInterfaces); newCollectedInterfaces.clear(); } } \n### Response:", "ground_truth": "Stores signatures for all super public methods not already overridden by target class.\nAll this methods will be accepted for proxyfication.", "predict": "Collect interfaces that are not overridden in super-interface."}
{"ID": 1800, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected MethodSignatureVisitor createMethodSignature( final int access, final String methodName, final String description, final String signature, final String[] exceptions, final String classname, final Map<String, String> declaredTypeGenerics) { MethodSignatureVisitor v = new MethodSignatureVisitor(methodName, access, classname, description, exceptions, signature, declaredTypeGenerics, this); new SignatureReader(signature != null ? signature : description).accept(v); return v; } \n### Response:", "ground_truth": "Creates method signature from method name.", "predict": "Create a signature visitor for a method signature.\n\n@param access the method access level\n@param methodName the method name\n@param description the method description\n@param signature the signature\n@param exceptions the exceptions\n@param classname the class name\n@param declaredTypeGenerics the declared type generics\n@return the visitor"}
{"ID": 1801, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String toCsvString(final Object... elements) { StringBuilder line = new StringBuilder(); int last = elements.length -1; for (int i = 0; i < elements.length; i++) { if (elements[i] == null) { if (i != last) { line.append(FIELD_SEPARATOR); } continue; } String field = elements[i].toString(); // check for special cases int ndx = field.indexOf(FIELD_SEPARATOR); if (ndx == -1) { ndx = field.indexOf(FIELD_QUOTE); } if (ndx == -1) { if (field.startsWith(StringPool.SPACE) || field.endsWith(StringPool.SPACE)) { ndx = 1; } } if (ndx == -1) { ndx = StringUtil.indexOfChars(field, SPECIAL_CHARS); } // add field if (ndx != -1) { line.append(FIELD_QUOTE); } field = StringUtil.replace(field, StringPool.QUOTE, DOUBLE_QUOTE); line.append(field); if (ndx != -1) { line.append(FIELD_QUOTE); } // last if (i != last) { line.append(FIELD_SEPARATOR); } } return line.toString(); } \n### Response:", "ground_truth": "Parse fields as csv string,", "predict": "Converts an array of objects into a CSV string.\n\n@param elements the array of objects to convert\n@return the string representation of the array"}
{"ID": 1802, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String[] toStringArray(final String line) { List<String> row = new ArrayList<>(); boolean inQuotedField = false; int fieldStart = 0; final int len = line.length(); for (int i = 0; i < len; i++) { char c = line.charAt(i); if (c == FIELD_SEPARATOR) { if (!inQuotedField) { // ignore we are quoting addField(row, line, fieldStart, i, inQuotedField); fieldStart = i + 1; } } else if (c == FIELD_QUOTE) { if (inQuotedField) { if (i + 1 == len || line.charAt(i + 1) == FIELD_SEPARATOR) { // we are already quoting - peek to see if this is the end of the field addField(row, line, fieldStart, i, inQuotedField); fieldStart = i + 2; i++; // and skip the comma inQuotedField = false; } } else if (fieldStart == i) { inQuotedField = true; // this is a beginning of a quote fieldStart++; // move field start } } } // add last field - but only if string was not empty if (len > 0 && fieldStart <= len) { addField(row, line, fieldStart, len, inQuotedField); } return row.toArray(new String[0]); } \n### Response:", "ground_truth": "Converts CSV line to string array.", "predict": "Returns a String array with the line as a String array.\n\n@param line the line\n@return the String array"}
{"ID": 1803, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public CtorInjectionPoint resolve(final Class type, final boolean useAnnotation) { // lookup methods ClassDescriptor cd = ClassIntrospector.get().lookup(type); CtorDescriptor[] allCtors = cd.getAllCtorDescriptors(); Constructor foundedCtor = null; Constructor defaultCtor = null; BeanReferences[] references = null; for (CtorDescriptor ctorDescriptor : allCtors) { Constructor<?> ctor = ctorDescriptor.getConstructor(); Class<?>[] paramTypes = ctor.getParameterTypes(); if (paramTypes.length == 0) { defaultCtor = ctor; // detects default ctors } if (!useAnnotation) { continue; } BeanReferences[] ctorReferences = referencesResolver.readAllReferencesFromAnnotation(ctor); if (ctorReferences == null) { continue; } if (foundedCtor != null) { throw new PetiteException(\"Two or more constructors are annotated as injection points in the bean: \" + type.getName()); } foundedCtor = ctor; references = ctorReferences; } if (foundedCtor == null) { // there is no annotated constructor if (allCtors.length == 1) { foundedCtor = allCtors[0].getConstructor(); } else { foundedCtor = defaultCtor; } if (foundedCtor == null) { // no matching ctor found // still this is not an error if bean is already instantiated. return CtorInjectionPoint.EMPTY; } references = referencesResolver.readAllReferencesFromAnnotation(foundedCtor); if (references == null) { references = new BeanReferences[0]; } } return new CtorInjectionPoint(foundedCtor, references); } \n### Response:", "ground_truth": "Resolves constructor injection point from type. Looks for single annotated constructor.\nIf no annotated constructors found, the total number of constructors will be checked.\nIf there is only one constructor, that one will be used as injection point. If more\nconstructors exist, the default one will be used as injection point. Otherwise, exception\nis thrown.", "predict": "Resolves the constructor of the given type.\n\n@param type the type of the constructor to resolve\n@param useAnnotation whether to use the annotation to resolve the constructor\n@return the constructor of the given type"}
{"ID": 1804, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private ClassReader createAdviceClassReader(final Class<? extends ProxyAdvice> advice) { InputStream inputStream = null; try { inputStream = ClassLoaderUtil.getClassAsStream(advice); return new ClassReader(inputStream); } catch (IOException ioex) { throw new ProxettaException(ioex); } finally { StreamUtil.close(inputStream); } } \n### Response:", "ground_truth": "Creates advice's class reader.", "predict": "Create a ClassReader for the given advice class.\n\n@param advice the advice class\n@return the ClassReader"}
{"ID": 1805, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private ClassReader getCachedAdviceClassReader(final Class<? extends ProxyAdvice> advice) { if (adviceClassReaderCache == null) { adviceClassReaderCache = TypeCache.createDefault(); } ClassReader adviceReader = adviceClassReaderCache.get(advice); if (adviceReader == null) { adviceReader = createAdviceClassReader(advice); adviceClassReaderCache.put(advice, adviceReader); } return adviceReader; } \n### Response:", "ground_truth": "Returns class reader for advice.", "predict": "Returns cached advice class reader.\n\n@param advice the advice\n@return the cached advice class reader"}
{"ID": 1806, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String encrypt(final String str) { try { byte[] utf8 = StringUtil.getBytes(str); // encode the string into bytes using utf-8 byte[] enc = ecipher.doFinal(utf8); // encrypt return Base64.encodeToString(enc); // encode bytes to base64 to get a string } catch (Throwable ignore) { return null; } } \n### Response:", "ground_truth": "Symmetrically encrypts the string.", "predict": "Encrypt a string using the ecipher\n\n@param str\n@return"}
{"ID": 1807, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String decrypt(String str) { try { str = StringUtil.replaceChar(str, ' ', '+'); // replace spaces with chars. byte[] dec = Base64.decode(str); // decode base64 to get bytes byte[] utf8 = dcipher.doFinal(dec); // decrypt return new String(utf8, UTF_8); // decode using utf-8 } catch (Throwable ignore) { return null; } } \n### Response:", "ground_truth": "Symmetrically decrypts the string.", "predict": "Decrypts a Base64 encoded string.\n\n@param str the Base64 encoded string\n@return the decrypted string"}
{"ID": 1808, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Logger getLogger(final String name) { if (loggers == null) { return loggerProvider.apply(name); } return loggers.computeIfAbsent(name, loggerProvider); } \n### Response:", "ground_truth": "Returns logger for given name. Repeated calls to this method with the\nsame argument should return the very same instance of the logger.", "predict": "Returns the logger for the given name.\n\n@param name the name of the logger\n@return the logger for the given name"}
{"ID": 1809, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void setName(final String name) { if (name.contains(\";\") || name.contains(\",\") || name.startsWith(\"$\")) { throw new IllegalArgumentException(\"Invalid cookie name:\" + name); } for (int n = 0; n < name.length(); n++) { char c = name.charAt(n); if (c <= 0x20 || c >= 0x7f) { throw new IllegalArgumentException(\"Invalid cookie name:\" + name); } } this.name = name; } \n### Response:", "ground_truth": "Sets the cookie name and checks for validity.", "predict": "Sets the cookie name.\n\n@param name the name"}
{"ID": 1810, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected ActionRequest createActionRequest( final String actionPath, final String[] actionPathChunks, final ActionRuntime actionRuntime, final Object action, final HttpServletRequest servletRequest, final HttpServletResponse servletResponse) { return new ActionRequest(this, actionPath, actionPathChunks, actionRuntime, action, servletRequest, servletResponse); } \n### Response:", "ground_truth": "Creates new action request.\n@param actionPath\t\taction path\n@param actionRuntime\t\taction runtime\n@param action\t\t\taction object\n@param servletRequest\thttp request\n@param servletResponse\thttp response\n@return action request", "predict": "Creates a new request for an action.\n\n@param actionPath the action path\n@param actionPathChunks the action path chunks\n@param actionRuntime the action runtime\n@param action the action\n@param servletRequest the servlet request\n@param servletResponse the servlet response\n@return the action request"}
{"ID": 1811, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected <R extends ActionFilter> R createWrapper(final Class<R> wrapperClass) { return petiteContainer.createBean(wrapperClass); } \n### Response:", "ground_truth": "Acquires filter from Petite container.", "predict": "Creates a wrapper bean for the given class.\n\n@param wrapperClass the class of the wrapper bean\n@return the wrapper bean"}
{"ID": 1812, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void destroyBean(final BeanData beanData) { if (destroyableBeans == null) { return; } if (!isBeanDestroyable(beanData)) { return; } if (destroyableBeans.remove(beanData)) { beanData.callDestroyMethods(); } } \n### Response:", "ground_truth": "Removes destroyable bean from the list and calls it destroy methods.\nIf bean is not destroyable, does nothing. Bean gets destroyed only once.", "predict": "Destroys the given bean.\n\n@param beanData the bean to destroy"}
{"ID": 1813, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void shutdown() { if (destroyableBeans == null) { return; } for (final BeanData destroyableBean : destroyableBeans) { destroyableBean.callDestroyMethods(); } destroyableBeans.clear(); } \n### Response:", "ground_truth": "Shutdowns the scope and calls all collected destroyable beans.", "predict": "Shutdown the bean manager."}
{"ID": 1814, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ReceivedEmail[] get() { if (fromFolder != null) { session.useFolder(fromFolder); } return session.receiveMessages(filter, flagsToSet, flagsToUnset, envelopeOnly, messages -> { if (targetFolder != null) { try { session.folder.copyMessages(messages, session.getFolder(targetFolder)); } catch (MessagingException e) { throw new MailException(\"Copying messages failed\"); } } }); } \n### Response:", "ground_truth": "Receives the emails as specified by the builder.", "predict": "Returns all the messages that were received.\n\n@return all the messages that were received."}
{"ID": 1815, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void main(final String[] args) { loadPropertiesFiles(args); try (ClusteredServiceContainer container = launch()) { container.context().shutdownSignalBarrier().await(); System.out.println(\"Shutdown ClusteredServiceContainer...\"); } } \n### Response:", "ground_truth": "Launch the clustered service container and await a shutdown signal.\n\n@param args command line argument which is a list for properties files as URLs or filenames.", "predict": "Main entry point for the ClusteredServiceContainer.\n\n@param args command line arguments"}
{"ID": 1816, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void run() { do { LockSupport.parkNanos(parkNs); final long currentTotalMessages = totalMessages; final long currentTotalBytes = totalBytes; final long currentTimestamp = System.nanoTime(); final long timeSpanNs = currentTimestamp - lastTimestamp; final double messagesPerSec = ((currentTotalMessages - lastTotalMessages) * (double)reportIntervalNs) / (double)timeSpanNs; final double bytesPerSec = ((currentTotalBytes - lastTotalBytes) * (double)reportIntervalNs) / (double)timeSpanNs; reportingFunc.onReport(messagesPerSec, bytesPerSec, currentTotalMessages, currentTotalBytes); lastTotalBytes = currentTotalBytes; lastTotalMessages = currentTotalMessages; lastTimestamp = currentTimestamp; } while (!halt); } \n### Response:", "ground_truth": "Run loop for the rate reporter", "predict": "Runs the reporting loop."}
{"ID": 1817, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unused\") public static void printError( final String channel, final int streamId, final int sessionId, final String message, final HeaderFlyweight cause) { System.out.println(message); } \n### Response:", "ground_truth": "Generic error handler that just prints message to stdout.\n\n@param channel   for the error\n@param streamId  for the error\n@param sessionId for the error, if source\n@param message   indicating what the error was\n@param cause     of the error", "predict": "Prints an error message.\n\n@param channel the channel\n@param streamId the stream id\n@param sessionId the session id\n@param message the message\n@param cause the cause"}
{"ID": 1818, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void printRate( final double messagesPerSec, final double bytesPerSec, final long totalMessages, final long totalBytes) { System.out.println(String.format( \"%.02g msgs/sec, %.02g payload bytes/sec, totals %d messages %d MB\", messagesPerSec, bytesPerSec, totalMessages, totalBytes / (1024 * 1024))); } \n### Response:", "ground_truth": "Print the rates to stdout\n\n@param messagesPerSec being reported\n@param bytesPerSec    being reported\n@param totalMessages  being reported\n@param totalBytes     being reported", "predict": "Prints the rate of the message and payload.\n\n@param messagesPerSec\nthe rate of messages per second\n@param bytesPerSec\nthe rate of bytes per second\n@param totalMessages\nthe total number of messages\n@param totalBytes\nthe total number of bytes"}
{"ID": 1819, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static MappedByteBuffer mapExistingFileReadOnly(final File location) { if (!location.exists()) { final String msg = \"file not found: \" + location.getAbsolutePath(); throw new IllegalStateException(msg); } MappedByteBuffer mappedByteBuffer = null; try (RandomAccessFile file = new RandomAccessFile(location, \"r\"); FileChannel channel = file.getChannel()) { mappedByteBuffer = channel.map(READ_ONLY, 0, channel.size()); } catch (final IOException ex) { LangUtil.rethrowUnchecked(ex); } return mappedByteBuffer; } \n### Response:", "ground_truth": "Map an existing file as a read only buffer.\n\n@param location of file to map.\n@return the mapped file.", "predict": "Map a file to a ByteBuffer.\n\n@param location the file to map\n@return the ByteBuffer"}
{"ID": 1820, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void close() { final State state = this.state; if (State.CLOSED != state) { if (isReplayActive) { isReplayActive = false; archive.stopReplay(replaySessionId); } if (State.MERGED != state) { subscription.removeDestination(replayDestination); } state(State.CLOSED); } } \n### Response:", "ground_truth": "Close the merge and stop any active replay. Will remove the replay destination from the subscription. Will\nNOT remove the live destination if it has been added.", "predict": "Close the replay session."}
{"ID": 1821, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public int doWork() { int workCount = 0; switch (state) { case AWAIT_INITIAL_RECORDING_POSITION: workCount += awaitInitialRecordingPosition(); break; case AWAIT_REPLAY: workCount += awaitReplay(); break; case AWAIT_CATCH_UP: workCount += awaitCatchUp(); break; case AWAIT_CURRENT_RECORDING_POSITION: workCount += awaitUpdatedRecordingPosition(); break; case AWAIT_STOP_REPLAY: workCount += awaitStopReplay(); break; } return workCount; } \n### Response:", "ground_truth": "Process the operation of the merge. Do not call the processing of fragments on the subscription.\n\n@return indication of work done processing the merge.", "predict": "Performs work.\n\n@return the number of work items completed."}
{"ID": 1822, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public long position() { if (isClosed) { return CLOSED; } final long rawTail = rawTailVolatile(logMetaDataBuffer); final int termOffset = termOffset(rawTail, termBufferLength); return computePosition(termId(rawTail), termOffset, positionBitsToShift, initialTermId); } \n### Response:", "ground_truth": "Get the current position to which the publication has advanced for this stream.\n\n@return the current position to which the publication has advanced for this stream or {@link #CLOSED}.", "predict": "Returns the position of this log entry.\n\n@return the position of this log entry"}
{"ID": 1823, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public long offer(final DirectBufferVector[] vectors, final ReservedValueSupplier reservedValueSupplier) { final int length = DirectBufferVector.validateAndComputeLength(vectors); long newPosition = CLOSED; if (!isClosed) { final long limit = positionLimit.getVolatile(); final ExclusiveTermAppender termAppender = termAppenders[activePartitionIndex]; final long position = termBeginPosition + termOffset; if (position < limit) { final int result; if (length <= maxPayloadLength) { result = termAppender.appendUnfragmentedMessage( termId, termOffset, headerWriter, vectors, length, reservedValueSupplier); } else { checkMaxMessageLength(length); result = termAppender.appendFragmentedMessage( termId, termOffset, headerWriter, vectors, length, maxPayloadLength, reservedValueSupplier); } newPosition = newPosition(result); } else { newPosition = backPressureStatus(position, length); } } return newPosition; } \n### Response:", "ground_truth": "Non-blocking publish by gathering buffer vectors into a message.\n\n@param vectors               which make up the message.\n@param reservedValueSupplier {@link ReservedValueSupplier} for the frame.\n@return The new stream position, otherwise a negative error value of {@link #NOT_CONNECTED},\n{@link #BACK_PRESSURED}, {@link #ADMIN_ACTION}, {@link #CLOSED}, or {@link #MAX_POSITION_EXCEEDED}.", "predict": "Adds a new message to the queue.\n\n@param vectors the message vector\n@param reservedValueSupplier the reserved value supplier\n@return the new position"}
{"ID": 1824, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public long appendPadding(final int length) { checkMaxMessageLength(length); long newPosition = CLOSED; if (!isClosed) { final long limit = positionLimit.getVolatile(); final ExclusiveTermAppender termAppender = termAppenders[activePartitionIndex]; final long position = termBeginPosition + termOffset; if (position < limit) { checkPositiveLength(length); final int result = termAppender.appendPadding(termId, termOffset, headerWriter, length); newPosition = newPosition(result); } else { newPosition = backPressureStatus(position, length); } } return newPosition; } \n### Response:", "ground_truth": "Append a padding record log of a given length to make up the log to a position.\n\n@param length of the range to claim, in bytes..\n@return The new stream position, otherwise a negative error value of {@link #NOT_CONNECTED},\n{@link #BACK_PRESSURED}, {@link #ADMIN_ACTION}, {@link #CLOSED}, or {@link #MAX_POSITION_EXCEEDED}.\n@throws IllegalArgumentException if the length is greater than {@link #maxMessageLength()}.", "predict": "Appends padding to the end of the message.\n\n@param length the length of the padding to be appended\n@return the new position in the message"}
{"ID": 1825, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void close() { lock.lock(); try { if (!isClosed) { isClosed = true; archiveProxy.closeSession(controlSessionId); if (!context.ownsAeronClient()) { CloseHelper.close(controlResponsePoller.subscription()); CloseHelper.close(archiveProxy.publication()); } context.close(); } } finally { lock.unlock(); } } \n### Response:", "ground_truth": "Notify the archive that this control session is closed so it can promptly release resources then close the\nlocal resources associated with the client.", "predict": "Closes the Aeron context."}
{"ID": 1826, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String pollForErrorResponse() { lock.lock(); try { ensureOpen(); if (controlResponsePoller.poll() != 0 && controlResponsePoller.isPollComplete()) { if (controlResponsePoller.controlSessionId() == controlSessionId && controlResponsePoller.templateId() == ControlResponseDecoder.TEMPLATE_ID && controlResponsePoller.code() == ControlResponseCode.ERROR) { return controlResponsePoller.errorMessage(); } } return null; } finally { lock.unlock(); } } \n### Response:", "ground_truth": "Poll the response stream once for an error. If another message is present then it will be skipped over\nso only call when not expecting another response.\n\n@return the error String otherwise null if no error is found.", "predict": "Checks if the control response has been received.\n\n@return the error message if the control response has been received, otherwise null"}
{"ID": 1827, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void stopReplay(final long replaySessionId) { lock.lock(); try { ensureOpen(); final long correlationId = aeron.nextCorrelationId(); if (!archiveProxy.stopReplay(replaySessionId, correlationId, controlSessionId)) { throw new ArchiveException(\"failed to send stop replay request\"); } pollForResponse(correlationId); } finally { lock.unlock(); } } \n### Response:", "ground_truth": "Stop a replay session.\n\n@param replaySessionId to stop replay for.", "predict": "Stops the replay of the given replay session.\n\n@param replaySessionId the replay session id"}
{"ID": 1828, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void eventAvailableImage(final Image image) { final Subscription subscription = image.subscription(); System.out.format( \"new image on %s streamId %x sessionId %x from %s%n\", subscription.channel(), subscription.streamId(), image.sessionId(), image.sourceIdentity()); } \n### Response:", "ground_truth": "Print the information for an available image to stdout.\n\n@param image that has been created", "predict": "Emits an event indicating that a new image is available.\n\n@param image the image that is available"}
{"ID": 1829, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void eventUnavailableImage(final Image image) { final Subscription subscription = image.subscription(); System.out.format( \"inactive image on %s streamId %d sessionId %x%n\", subscription.channel(), subscription.streamId(), image.sessionId()); } \n### Response:", "ground_truth": "This handler is called when image is unavailable\n\n@param image that has gone inactive", "predict": "Notify the user that the image is inactive.\n\n@param image the image that is inactive"}
{"ID": 1830, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static StatusIndicatorReader sendChannelStatus(final CountersReader countersReader, final String channel) { StatusIndicatorReader statusReader = null; final MutableInteger id = new MutableInteger(-1); countersReader.forEach( (counterId, typeId, keyBuffer, label) -> { if (typeId == SendChannelStatus.SEND_CHANNEL_STATUS_TYPE_ID) { if (channel.startsWith(keyBuffer.getStringAscii(ChannelEndpointStatus.CHANNEL_OFFSET))) { id.value = counterId; } } }); if (Aeron.NULL_VALUE != id.value) { statusReader = new UnsafeBufferStatusIndicator(countersReader.valuesBuffer(), id.value); } return statusReader; } \n### Response:", "ground_truth": "Return the read-only status indicator for the given send channel URI.\n\n@param countersReader that holds the status indicator.\n@param channel        for the send channel.\n@return read-only status indicator that can be used to query the status of the send channel or null\n@see ChannelEndpointStatus for status values and indications.", "predict": "Sends the channel status to the client.\n\n@param countersReader the counters reader\n@param channel the channel\n@return the status reader"}
{"ID": 1831, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static StatusIndicatorReader receiveChannelStatus(final CountersReader countersReader, final String channel) { StatusIndicatorReader statusReader = null; final MutableInteger id = new MutableInteger(-1); countersReader.forEach( (counterId, typeId, keyBuffer, label) -> { if (typeId == ReceiveChannelStatus.RECEIVE_CHANNEL_STATUS_TYPE_ID) { if (channel.startsWith(keyBuffer.getStringAscii(ChannelEndpointStatus.CHANNEL_OFFSET))) { id.value = counterId; } } }); if (Aeron.NULL_VALUE != id.value) { statusReader = new UnsafeBufferStatusIndicator(countersReader.valuesBuffer(), id.value); } return statusReader; } \n### Response:", "ground_truth": "Return the read-only status indicator for the given receive channel URI.\n\n@param countersReader that holds the status indicator.\n@param channel        for the receive channel.\n@return read-only status indicator that can be used to query the status of the receive channel or null.\n@see ChannelEndpointStatus for status values and indications.", "predict": "Receives the channel status from the given counter reader.\n\n@param countersReader the counter reader\n@param channel the channel to receive the status for\n@return the status indicator reader"}
{"ID": 1832, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void limit(final int limit) { if (limit < 0 || limit >= buffer.capacity()) { throw new IllegalArgumentException( \"limit outside range: capacity=\" + buffer.capacity() + \" limit=\" + limit); } this.limit = limit; } \n### Response:", "ground_truth": "Set this limit for this buffer as the position at which the next append operation will occur.\n\n@param limit to be the new value.", "predict": "Set the limit of the buffer.\n\n@param limit the limit of the buffer"}
{"ID": 1833, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public BufferBuilder append(final DirectBuffer srcBuffer, final int srcOffset, final int length) { ensureCapacity(length); buffer.putBytes(limit, srcBuffer, srcOffset, length); limit += length; return this; } \n### Response:", "ground_truth": "Append a source buffer to the end of the internal buffer, resizing the internal buffer as required.\n\n@param srcBuffer from which to copy.\n@param srcOffset in the source buffer from which to copy.\n@param length    in bytes to copy from the source buffer.\n@return the builder for fluent API usage.", "predict": "Appends the given data to the buffer.\n\n@param srcBuffer the source buffer\n@param srcOffset the source offset\n@param length the length\n@return the buffer builder"}
{"ID": 1834, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public int poll() { controlSessionId = -1; correlationId = -1; relevantId = -1; templateId = -1; errorMessage = null; pollComplete = false; return subscription.controlledPoll(fragmentAssembler, fragmentLimit); } \n### Response:", "ground_truth": "Poll for control response events.\n\n@return the number of fragments read during the operation. Zero if no events are available.", "predict": "Polls the subscription.\n\n@return the number of messages that have been received."}
{"ID": 1835, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static MappedByteBuffer mapLossReport(final String aeronDirectoryName, final int reportFileLength) { return mapNewFile(file(aeronDirectoryName), reportFileLength, false); } \n### Response:", "ground_truth": "Map a new loss report in the Aeron directory for a given length.\n\n@param aeronDirectoryName in which to create the file.\n@param reportFileLength   for the file.\n@return the newly mapped buffer for the file.", "predict": "Create a new report file with the specified size.\n\n@param aeronDirectoryName the name of the aeron directory\n@param reportFileLength the size of the report file\n@return the MappedByteBuffer containing the report file"}
{"ID": 1836, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Map<StreamCompositeKey, List<StreamPosition>> snapshot() { final Map<StreamCompositeKey, List<StreamPosition>> streams = new HashMap<>(); counters.forEach( (counterId, typeId, keyBuffer, label) -> { if ((typeId >= PUBLISHER_LIMIT_TYPE_ID && typeId <= RECEIVER_POS_TYPE_ID) || typeId == SENDER_LIMIT_TYPE_ID || typeId == PER_IMAGE_TYPE_ID || typeId == PUBLISHER_POS_TYPE_ID) { final StreamCompositeKey key = new StreamCompositeKey( keyBuffer.getInt(SESSION_ID_OFFSET), keyBuffer.getInt(STREAM_ID_OFFSET), keyBuffer.getStringAscii(CHANNEL_OFFSET)); final StreamPosition position = new StreamPosition( keyBuffer.getLong(REGISTRATION_ID_OFFSET), counters.getCounterValue(counterId), typeId); streams .computeIfAbsent(key, (ignore) -> new ArrayList<>()) .add(position); } }); return streams; } \n### Response:", "ground_truth": "Take a snapshot of all the counters and group them by streams.\n\n@return a snapshot of all the counters and group them by streams.", "predict": "Snapshots the current state of the stream.\n\n@return a map of the stream's composite keys and their positions"}
{"ID": 1837, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static UnsafeBuffer createDefaultHeader(final int sessionId, final int streamId, final int termId) { final UnsafeBuffer buffer = new UnsafeBuffer( BufferUtil.allocateDirectAligned(HEADER_LENGTH, CACHE_LINE_LENGTH)); buffer.putByte(VERSION_FIELD_OFFSET, CURRENT_VERSION); buffer.putByte(FLAGS_FIELD_OFFSET, (byte)BEGIN_AND_END_FLAGS); buffer.putShort(TYPE_FIELD_OFFSET, (short)HDR_TYPE_DATA, LITTLE_ENDIAN); buffer.putInt(SESSION_ID_FIELD_OFFSET, sessionId, LITTLE_ENDIAN); buffer.putInt(STREAM_ID_FIELD_OFFSET, streamId, LITTLE_ENDIAN); buffer.putInt(TERM_ID_FIELD_OFFSET, termId, LITTLE_ENDIAN); buffer.putLong(RESERVED_VALUE_OFFSET, DEFAULT_RESERVE_VALUE); return buffer; } \n### Response:", "ground_truth": "Return an initialised default Data Frame Header.\n\n@param sessionId for the header\n@param streamId  for the header\n@param termId    for the header\n@return byte array containing the header", "predict": "Creates a default header for the given sessionId, streamId and termId.\n\n@param sessionId\n@param streamId\n@param termId\n@return"}
{"ID": 1838, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public CounterMessageFlyweight keyBuffer(final DirectBuffer keyBuffer, final int keyOffset, final int keyLength) { buffer.putInt(KEY_LENGTH_OFFSET, keyLength); if (null != keyBuffer && keyLength > 0) { buffer.putBytes(keyBufferOffset(), keyBuffer, keyOffset, keyLength); } return this; } \n### Response:", "ground_truth": "Fill the key buffer.\n\n@param keyBuffer containing the optional key for the counter.\n@param keyOffset within the keyBuffer at which the key begins.\n@param keyLength of the key in the keyBuffer.\n@return flyweight", "predict": "Sets the key buffer for the counter.\n\n@param keyBuffer\n@param keyOffset\n@param keyLength\n@return"}
{"ID": 1839, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public CounterMessageFlyweight labelBuffer( final DirectBuffer labelBuffer, final int labelOffset, final int labelLength) { buffer.putInt(labelOffset(), labelLength); buffer.putBytes(labelBufferOffset(), labelBuffer, labelOffset, labelLength); return this; } \n### Response:", "ground_truth": "Fill the label buffer.\n\n@param labelBuffer containing the mandatory label for the counter.\n@param labelOffset within the labelBuffer at which the label begins.\n@param labelLength of the label in the labelBuffer.\n@return flyweight", "predict": "Adds a label to the counter.\n\n@param labelBuffer\n@param labelOffset\n@param labelLength\n@return"}
{"ID": 1840, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean connect(final String responseChannel, final int responseStreamId, final long correlationId) { connectRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .correlationId(correlationId) .responseStreamId(responseStreamId) .version(AeronArchive.Configuration.SEMANTIC_VERSION) .responseChannel(responseChannel); return offerWithTimeout(connectRequestEncoder.encodedLength(), null); } \n### Response:", "ground_truth": "Connect to an archive on its control interface providing the response stream details.\n\n@param responseChannel  for the control message responses.\n@param responseStreamId for the control message responses.\n@param correlationId    for this request.\n@return true if successfully offered otherwise false.", "predict": "Connect to the specified response channel.\n\n@param responseChannel the response channel to connect to\n@param responseStreamId the id of the response stream to connect to\n@param correlationId the id of the correlation id to use\n@return true if the connection was successful, false otherwise"}
{"ID": 1841, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean tryConnect(final String responseChannel, final int responseStreamId, final long correlationId) { connectRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .correlationId(correlationId) .responseStreamId(responseStreamId) .version(AeronArchive.Configuration.SEMANTIC_VERSION) .responseChannel(responseChannel); final int length = MessageHeaderEncoder.ENCODED_LENGTH + connectRequestEncoder.encodedLength(); return publication.offer(buffer, 0, length) > 0; } \n### Response:", "ground_truth": "Try Connect to an archive on its control interface providing the response stream details. Only one attempt will\nbe made to offer the request.\n\n@param responseChannel  for the control message responses.\n@param responseStreamId for the control message responses.\n@param correlationId    for this request.\n@return true if successfully offered otherwise false.", "predict": "Attempt to connect to the specified response channel.\n\n@param responseChannel The response channel to attempt to connect to.\n@param responseStreamId The id of the response stream to attempt to connect to.\n@param correlationId The id of the correlation id to attempt to connect to.\n@return True if the connection was successful, false otherwise."}
{"ID": 1842, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean closeSession(final long controlSessionId) { closeSessionRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId); return offer(closeSessionRequestEncoder.encodedLength()); } \n### Response:", "ground_truth": "Close this control session with the archive.\n\n@param controlSessionId with the archive.\n@return true if successfully offered otherwise false.", "predict": "Closes a session.\n\n@param controlSessionId the session id\n@return true if successful"}
{"ID": 1843, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean startRecording( final String channel, final int streamId, final SourceLocation sourceLocation, final long correlationId, final long controlSessionId) { startRecordingRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .streamId(streamId) .sourceLocation(sourceLocation) .channel(channel); return offer(startRecordingRequestEncoder.encodedLength()); } \n### Response:", "ground_truth": "Start recording streams for a given channel and stream id pairing.\n\n@param channel          to be recorded.\n@param streamId         to be recorded.\n@param sourceLocation   of the publication to be recorded.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Starts recording a message to a specific channel.\n\n@param channel The channel to start recording to.\n@param streamId The ID of the stream to start recording to.\n@param sourceLocation The source location of the message.\n@param correlationId The ID of the correlation id.\n@param controlSessionId The ID of the control session.\n@return True if the request was successfully offered."}
{"ID": 1844, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean stopRecording( final String channel, final int streamId, final long correlationId, final long controlSessionId) { stopRecordingRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .streamId(streamId) .channel(channel); return offer(stopRecordingRequestEncoder.encodedLength()); } \n### Response:", "ground_truth": "Stop an active recording.\n\n@param channel          to be stopped.\n@param streamId         to be stopped.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Stops recording for the given streamId and correlationId.\n\n@param channel The streamId to stop recording for.\n@param streamId The streamId to stop recording for.\n@param correlationId The correlationId to stop recording for.\n@param controlSessionId The control session id to stop recording for.\n@return True if recording was stopped, false otherwise."}
{"ID": 1845, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean replay( final long recordingId, final long position, final long length, final String replayChannel, final int replayStreamId, final long correlationId, final long controlSessionId) { replayRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .recordingId(recordingId) .position(position) .length(length) .replayStreamId(replayStreamId) .replayChannel(replayChannel); return offer(replayRequestEncoder.encodedLength()); } \n### Response:", "ground_truth": "Replay a recording from a given position.\n\n@param recordingId      to be replayed.\n@param position         from which the replay should be started.\n@param length           of the stream to be replayed. Use {@link Long#MAX_VALUE} to follow a live stream.\n@param replayChannel    to which the replay should be sent.\n@param replayStreamId   to which the replay should be sent.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Replay a request.\n\n@param recordingId The ID of the recording to replay.\n@param position The position of the request in the buffer.\n@param length The length of the request in the buffer.\n@param replayChannel The ID of the channel to replay the request to.\n@param correlationId The ID of the correlation to replay the request to.\n@param controlSessionId The ID of the control session to replay the request to.\n@return True if the request was successfully replayed."}
{"ID": 1846, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean stopReplay(final long replaySessionId, final long correlationId, final long controlSessionId) { stopReplayRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .replaySessionId(replaySessionId); return offer(replayRequestEncoder.encodedLength()); } \n### Response:", "ground_truth": "Stop an existing replay session.\n\n@param replaySessionId  that should be stopped.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Stops the replay of the given session.\n\n@param replaySessionId the replay session id\n@param correlationId the correlation id\n@param controlSessionId the control session id\n@return true if successful"}
{"ID": 1847, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean listRecordings( final long fromRecordingId, final int recordCount, final long correlationId, final long controlSessionId) { listRecordingsRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .fromRecordingId(fromRecordingId) .recordCount(recordCount); return offer(listRecordingsRequestEncoder.encodedLength()); } \n### Response:", "ground_truth": "List a range of recording descriptors.\n\n@param fromRecordingId  at which to begin listing.\n@param recordCount      for the number of descriptors to be listed.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Lists the number of records in a given recording.\n\n@param fromRecordingId The ID of the recording to list.\n@param recordCount The number of records to list.\n@param correlationId The ID of the correlation to list.\n@param controlSessionId The ID of the control session to use.\n@return True if the request was successful."}
{"ID": 1848, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean listRecordingsForUri( final long fromRecordingId, final int recordCount, final String channelFragment, final int streamId, final long correlationId, final long controlSessionId) { listRecordingsForUriRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .fromRecordingId(fromRecordingId) .recordCount(recordCount) .streamId(streamId) .channel(channelFragment); return offer(listRecordingsForUriRequestEncoder.encodedLength()); } \n### Response:", "ground_truth": "List a range of recording descriptors which match a channel URI fragment and stream id.\n\n@param fromRecordingId  at which to begin listing.\n@param recordCount      for the number of descriptors to be listed.\n@param channelFragment  to match recordings on from the original channel URI in the archive descriptor.\n@param streamId         to match recordings on.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Lists the recording for a given URI.\n\n@param fromRecordingId The ID of the recording to list.\n@param recordCount The number of records to list.\n@param channelFragment The ID of the channel to list the recording for.\n@param streamId The ID of the stream to list the recording for.\n@param correlationId The ID of the correlation to list the recording for.\n@param controlSessionId The ID of the control session to list the recording for.\n@return True if the recording was successfully added."}
{"ID": 1849, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean listRecording(final long recordingId, final long correlationId, final long controlSessionId) { listRecordingRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .recordingId(recordingId); return offer(listRecordingRequestEncoder.encodedLength()); } \n### Response:", "ground_truth": "List a recording descriptor for a given recording id.\n\n@param recordingId      at which to begin listing.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Lists the recording for the given recordingId, correlationId and controlSessionId.\n\n@param recordingId The recordingId\n@param correlationId The correlationId\n@param controlSessionId The controlSessionId\n@return True if successful"}
{"ID": 1850, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean extendRecording( final String channel, final int streamId, final SourceLocation sourceLocation, final long recordingId, final long correlationId, final long controlSessionId) { extendRecordingRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .recordingId(recordingId) .streamId(streamId) .sourceLocation(sourceLocation) .channel(channel); return offer(extendRecordingRequestEncoder.encodedLength()); } \n### Response:", "ground_truth": "Extend an existing, non-active, recorded stream for a the same channel and stream id.\n\nThe channel must be configured for the initial position from which it will be extended. This can be done\nwith {@link ChannelUriStringBuilder#initialPosition(long, int, int)}. The details required to initialise can\nbe found by calling {@link #listRecording(long, long, long)}.\n\n@param channel          to be recorded.\n@param streamId         to be recorded.\n@param sourceLocation   of the publication to be recorded.\n@param recordingId      to be extended.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Extends a recording request.\n\n@param channel The channel to use for the request.\n@param streamId The ID of the stream to record to.\n@param sourceLocation The location of the source.\n@param recordingId The ID of the recording to create.\n@param correlationId The ID of the correlation.\n@param controlSessionId The ID of the control session.\n@return True if the request was successfully extended."}
{"ID": 1851, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean getRecordingPosition(final long recordingId, final long correlationId, final long controlSessionId) { recordingPositionRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .recordingId(recordingId); return offer(recordingPositionRequestEncoder.encodedLength()); } \n### Response:", "ground_truth": "Get the recorded position of an active recording.\n\n@param recordingId      of the active recording that the position is being requested for.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Gets the recording position.\n\n@param recordingId the recording id\n@param correlationId the correlation id\n@param controlSessionId the control session id\n@return the recording position"}
{"ID": 1852, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean getStopPosition(final long recordingId, final long correlationId, final long controlSessionId) { stopPositionRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .recordingId(recordingId); return offer(stopPositionRequestEncoder.encodedLength()); } \n### Response:", "ground_truth": "Get the stop position of a recording.\n\n@param recordingId      of the recording that the stop position is being requested for.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Get the stop position.\n\n@param recordingId The recording ID.\n@param correlationId The correlation ID.\n@param controlSessionId The control session ID.\n@return The stop position."}
{"ID": 1853, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean listRecordingSubscriptions( final int pseudoIndex, final int subscriptionCount, final String channelFragment, final int streamId, final boolean applyStreamId, final long correlationId, final long controlSessionId) { listRecordingSubscriptionsRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .pseudoIndex(pseudoIndex) .subscriptionCount(subscriptionCount) .applyStreamId(applyStreamId ? BooleanType.TRUE : BooleanType.FALSE) .streamId(streamId) .channel(channelFragment); return offer(listRecordingSubscriptionsRequestEncoder.encodedLength()); } \n### Response:", "ground_truth": "List registered subscriptions in the archive which have been used to record streams.\n\n@param pseudoIndex       in the list of active recording subscriptions.\n@param subscriptionCount for the number of descriptors to be listed.\n@param channelFragment   for a contains match on the stripped channel used with the registered subscription.\n@param streamId          for the subscription.\n@param applyStreamId     when matching.\n@param correlationId     for this request.\n@param controlSessionId  for this request.\n@return true if successfully offered otherwise false.", "predict": "Lists the subscriptions for a given pseudo index, stream id, and channel fragment.\n\n@param pseudoIndex The pseudo index to list subscriptions for.\n@param subscriptionCount The number of subscriptions to list.\n@param channelFragment The channel fragment to list subscriptions for.\n@param streamId The stream id to list subscriptions for.\n@param applyStreamId If true, the stream id is applied to the stream id.\n@param correlationId The correlation id to list subscriptions for.\n@param controlSessionId The control session id to list subscriptions for.\n@return True if the request was successfully offered."}
{"ID": 1854, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean matchesTag(final UdpChannel udpChannel) { if (!hasTag || !udpChannel.hasTag() || tag != udpChannel.tag()) { return false; } if (udpChannel.remoteData().getAddress().isAnyLocalAddress() && udpChannel.remoteData().getPort() == 0 && udpChannel.localData().getAddress().isAnyLocalAddress() && udpChannel.localData().getPort() == 0) { return true; } throw new IllegalArgumentException(\"matching tag has set endpoint or control address\"); } \n### Response:", "ground_truth": "Does this channel have a tag match to another channel including endpoints.\n\n@param udpChannel to match against.\n@return true if there is a match otherwise false.", "predict": "Checks if the given udp channel has a tag.\n\n@param udpChannel the udp channel to check\n@return true if the udp channel has a tag, false otherwise"}
{"ID": 1855, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static InetSocketAddress destinationAddress(final ChannelUri uri) { try { validateConfiguration(uri); return getEndpointAddress(uri); } catch (final Exception ex) { throw new InvalidChannelException(ErrorCode.INVALID_CHANNEL, ex); } } \n### Response:", "ground_truth": "Get the endpoint address from the URI.\n\n@param uri to check\n@return endpoint address for URI", "predict": "Get the destination address of the given URI.\n\n@param uri the URI of the channel\n@return the destination address"}
{"ID": 1856, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String description() { final StringBuilder builder = new StringBuilder(\"UdpChannel - \"); if (null != localInterface) { builder .append(\"interface: \") .append(localInterface.getDisplayName()) .append(\", \"); } builder .append(\"localData: \").append(localData) .append(\", remoteData: \").append(remoteData) .append(\", ttl: \").append(multicastTtl); return builder.toString(); } \n### Response:", "ground_truth": "Used for debugging to get a human readable description of the channel.\n\n@return a human readable description of the channel.", "predict": "Returns a string describing the UdpChannel.\n\n@return A string describing the UdpChannel."}
{"ID": 1857, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: void addDestination(final int transportIndex, final ReceiveDestinationUdpTransport transport) { imageConnections = ArrayUtil.ensureCapacity(imageConnections, transportIndex + 1); if (transport.isMulticast()) { imageConnections[transportIndex] = new ImageConnection( cachedNanoClock.nanoTime(), transport.udpChannel().remoteControl()); } else if (transport.hasExplicitControl()) { imageConnections[transportIndex] = new ImageConnection( cachedNanoClock.nanoTime(), transport.explicitControlAddress()); } } \n### Response:", "ground_truth": "Add a destination to this image so it can merge streams.\n\n@param transportIndex from which packets will arrive.\n@param transport      from which packets will arrive.", "predict": "Add a destination to the image connection.\n\n@param transportIndex the transport index\n@param transport the transport"}
{"ID": 1858, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: int insertPacket( final int termId, final int termOffset, final UnsafeBuffer buffer, final int length, final int transportIndex, final InetSocketAddress srcAddress) { final boolean isHeartbeat = DataHeaderFlyweight.isHeartbeat(buffer, length); final long packetPosition = computePosition(termId, termOffset, positionBitsToShift, initialTermId); final long proposedPosition = isHeartbeat ? packetPosition : packetPosition + length; if (!isFlowControlUnderRun(packetPosition) && !isFlowControlOverRun(proposedPosition)) { trackConnection(transportIndex, srcAddress, lastPacketTimestampNs); if (isHeartbeat) { if (DataHeaderFlyweight.isEndOfStream(buffer) && !isEndOfStream && allEos(transportIndex)) { LogBufferDescriptor.endOfStreamPosition(rawLog.metaData(), proposedPosition); isEndOfStream = true; } heartbeatsReceived.incrementOrdered(); } else { final UnsafeBuffer termBuffer = termBuffers[indexByPosition(packetPosition, positionBitsToShift)]; TermRebuilder.insert(termBuffer, termOffset, buffer, length); } lastPacketTimestampNs = cachedNanoClock.nanoTime(); hwmPosition.proposeMaxOrdered(proposedPosition); } return length; } \n### Response:", "ground_truth": "Insert frame into term buffer.\n\n@param termId         for the data packet to insert into the appropriate term.\n@param termOffset     for the start of the packet in the term.\n@param buffer         for the data packet to insert into the appropriate term.\n@param length         of the data packet\n@param transportIndex which the packet came from.\n@param srcAddress     which the packet came from.\n@return number of bytes applied as a result of this insertion.", "predict": "Inserts a packet into the log buffer.\n\n@param termId the term id\n@param termOffset the term offset\n@param buffer the buffer\n@param length the length\n@param transportIndex the transport index\n@param srcAddress the src address\n@return the length"}
{"ID": 1859, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static AtomicCounter findControlToggle(final CountersReader counters) { final AtomicBuffer buffer = counters.metaDataBuffer(); for (int i = 0, size = counters.maxCounterId(); i < size; i++) { final int recordOffset = CountersReader.metaDataOffset(i); if (counters.getCounterState(i) == RECORD_ALLOCATED && buffer.getInt(recordOffset + TYPE_ID_OFFSET) == CONTROL_TOGGLE_TYPE_ID) { return new AtomicCounter(counters.valuesBuffer(), i, null); } } return null; } \n### Response:", "ground_truth": "Find the control toggle counter or return null if not found.\n\n@param counters to search for the control toggle.\n@return the control toggle counter or return null if not found.", "predict": "Finds a counter that has been recorded with the given type.\n\n@param counters the counters to search\n@return the counter, or null if none found"}
{"ID": 1860, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String put(final String key, final String value) { return params.put(key, value); } \n### Response:", "ground_truth": "Put a key and value pair in the map of params.\n\n@param key   of the param to be put.\n@param value of the param to be put.\n@return the existing value otherwise null.", "predict": "Puts a value into the params map.\n\n@param key the key\n@param value the value\n@return the value"}
{"ID": 1861, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String channelTag() { return (null != tags && tags.length > CHANNEL_TAG_INDEX) ? tags[CHANNEL_TAG_INDEX] : null; } \n### Response:", "ground_truth": "Get the channel tag, if it exists, that refers to an another channel.\n\n@return channel tag if it exists or null if not in this URI.\n@see CommonContext#TAGS_PARAM_NAME\n@see CommonContext#TAG_PREFIX", "predict": "Returns the channel tag.\n\n@return the channel tag"}
{"ID": 1862, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String entityTag() { return (null != tags && tags.length > ENTITY_TAG_INDEX) ? tags[ENTITY_TAG_INDEX] : null; } \n### Response:", "ground_truth": "Get the entity tag, if it exists, that refers to an entity such as subscription or publication.\n\n@return entity tag if it exists or null if not in this URI.\n@see CommonContext#TAGS_PARAM_NAME\n@see CommonContext#TAG_PREFIX", "predict": "Returns the entity tag.\n\n@return the entity tag"}
{"ID": 1863, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String addSessionId(final String channel, final int sessionId) { final ChannelUri channelUri = ChannelUri.parse(channel); channelUri.put(CommonContext.SESSION_ID_PARAM_NAME, Integer.toString(sessionId)); return channelUri.toString(); } \n### Response:", "ground_truth": "Add a sessionId to a given channel.\n\n@param channel   to add sessionId to.\n@param sessionId to add to channel.\n@return new string that represents channel with sessionId added.", "predict": "Adds a session id to the given channel URI.\n\n@param channel The channel URI to add the session id to.\n@param sessionId The session id to add.\n@return The URI of the added session id."}
{"ID": 1864, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long getTag(final String paramValue) { return isTagged(paramValue) ? AsciiEncoding.parseLongAscii(paramValue, 4, paramValue.length() - 4) : INVALID_TAG; } \n### Response:", "ground_truth": "Get the value of the tag from a given parameter value.\n\n@param paramValue to extract the tag value from.\n@return the value of the tag or {@link #INVALID_TAG} if not tagged.\n@see CommonContext#TAGS_PARAM_NAME\n@see CommonContext#TAG_PREFIX", "predict": "Returns the tag of the given string.\n\n@param paramValue the string to check\n@return the tag of the given string"}
{"ID": 1865, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public int appendPadding( final int termId, final int termOffset, final HeaderWriter header, final int length) { final int frameLength = length + HEADER_LENGTH; final int alignedLength = align(frameLength, FRAME_ALIGNMENT); final UnsafeBuffer termBuffer = this.termBuffer; final int termLength = termBuffer.capacity(); int resultingOffset = termOffset + alignedLength; putRawTailOrdered(termId, resultingOffset); if (resultingOffset > termLength) { resultingOffset = handleEndOfLogCondition(termBuffer, termOffset, header, termLength, termId); } else { header.write(termBuffer, termOffset, frameLength, termId); frameType(termBuffer, termOffset, PADDING_FRAME_TYPE); frameLengthOrdered(termBuffer, termOffset, frameLength); } return resultingOffset; } \n### Response:", "ground_truth": "Pad a length of the term buffer with a padding record.\n\n@param termId     for the current term.\n@param termOffset in the term at which to append.\n@param header     for writing the default header.\n@param length     of the padding to be written.\n@return the resulting offset of the term after success otherwise {@link #FAILED}.", "predict": "Appends the given padding to the end of the log.\n\n@param termId\nThe id of the term to append to.\n@param termOffset\nThe offset of the term to append to.\n@param header\nThe header to append.\n@param length\nThe length of the frame to append.\n@return The offset of the term to append to."}
{"ID": 1866, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: final int updatePublisherLimit() { int workCount = 0; final long senderPosition = this.senderPosition.getVolatile(); if (hasReceivers || (spiesSimulateConnection && spyPositions.length > 0)) { long minConsumerPosition = senderPosition; for (final ReadablePosition spyPosition : spyPositions) { minConsumerPosition = Math.min(minConsumerPosition, spyPosition.getVolatile()); } final long proposedPublisherLimit = minConsumerPosition + termWindowLength; if (publisherLimit.proposeMaxOrdered(proposedPublisherLimit)) { cleanBuffer(proposedPublisherLimit); workCount = 1; } } else if (publisherLimit.get() > senderPosition) { publisherLimit.setOrdered(senderPosition); } return workCount; } \n### Response:", "ground_truth": "Update the publishers limit for flow control as part of the conductor duty cycle.\n\n@return 1 if the limit has been updated otherwise 0.", "predict": "Update the publisher limit.\n\n@return the work count"}
{"ID": 1867, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static UnsafeBufferPosition allocate( final MutableDirectBuffer tempBuffer, final String name, final int typeId, final CountersManager countersManager, final long registrationId, final int sessionId, final int streamId, final String channel) { return new UnsafeBufferPosition( (UnsafeBuffer)countersManager.valuesBuffer(), allocateCounterId(tempBuffer, name, typeId, countersManager, registrationId, sessionId, streamId, channel), countersManager); } \n### Response:", "ground_truth": "Allocate a counter for tracking a position on a stream of messages.\n\n@param tempBuffer      to be used for labels and key.\n@param name            of the counter for the label.\n@param typeId          of the counter for classification.\n@param countersManager from which to allocated the underlying storage.\n@param registrationId  to be associated with the counter.\n@param sessionId       for the stream of messages.\n@param streamId        for the stream of messages.\n@param channel         for the stream of messages.\n@return a new {@link UnsafeBufferPosition} for tracking the stream.", "predict": "Allocates a buffer position to be used for the given counter.\n\n@param tempBuffer the buffer to allocate the position to\n@param name the name of the counter\n@param typeId the type id of the counter\n@param countersManager the counters manager\n@param registrationId the registration id\n@param sessionId the session id\n@param streamId the stream id\n@param channel the channel\n@return the buffer position"}
{"ID": 1868, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String labelName(final int typeId) { switch (typeId) { case PublisherLimit.PUBLISHER_LIMIT_TYPE_ID: return PublisherLimit.NAME; case SenderPos.SENDER_POSITION_TYPE_ID: return SenderPos.NAME; case ReceiverHwm.RECEIVER_HWM_TYPE_ID: return ReceiverHwm.NAME; case SubscriberPos.SUBSCRIBER_POSITION_TYPE_ID: return SubscriberPos.NAME; case ReceiverPos.RECEIVER_POS_TYPE_ID: return ReceiverPos.NAME; case SenderLimit.SENDER_LIMIT_TYPE_ID: return SenderLimit.NAME; case PublisherPos.PUBLISHER_POS_TYPE_ID: return PublisherPos.NAME; case SenderBpe.SENDER_BPE_TYPE_ID: return SenderBpe.NAME; default: return \"<unknown>\"; } } \n### Response:", "ground_truth": "Return the label name for a counter type identifier.\n\n@param typeId of the counter.\n@return the label name as a String.", "predict": "Returns the name of the given type ID.\n\n@param typeId the type ID\n@return the name"}
{"ID": 1869, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long scanForAvailability(final UnsafeBuffer termBuffer, final int offset, final int maxLength) { final int limit = Math.min(maxLength, termBuffer.capacity() - offset); int available = 0; int padding = 0; do { final int termOffset = offset + available; final int frameLength = frameLengthVolatile(termBuffer, termOffset); if (frameLength <= 0) { break; } int alignedFrameLength = align(frameLength, FRAME_ALIGNMENT); if (isPaddingFrame(termBuffer, termOffset)) { padding = alignedFrameLength - HEADER_LENGTH; alignedFrameLength = HEADER_LENGTH; } available += alignedFrameLength; if (available > limit) { available -= alignedFrameLength; padding = 0; break; } } while (0 == padding && available < limit); return pack(padding, available); } \n### Response:", "ground_truth": "Scan the term buffer for availability of new message fragments from a given offset up to a maxLength of bytes.\n\n@param termBuffer to be scanned for new message fragments.\n@param offset     at which the scan should begin.\n@param maxLength  in bytes of how much should be scanned.\n@return resulting status of the scan which packs the available bytes and padding into a long.", "predict": "Returns the number of bytes that can be stored in the given term buffer.\n\n@param termBuffer the term buffer\n@param offset the offset\n@param maxLength the maximum length\n@return the number of bytes that can be stored in the given term buffer"}
{"ID": 1870, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ChannelUriStringBuilder clear() { prefix = null; media = null; endpoint = null; networkInterface = null; controlEndpoint = null; controlMode = null; tags = null; alias = null; reliable = null; ttl = null; mtu = null; termLength = null; initialTermId = null; termId = null; termOffset = null; sessionId = null; linger = null; sparse = null; eos = null; tether = null; isSessionIdTagged = false; return this; } \n### Response:", "ground_truth": "Clear out all the values thus setting back to the initial state.\n\n@return this for a fluent API.", "predict": "Clears the properties of this builder."}
{"ID": 1871, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ChannelUriStringBuilder validate() { if (null == media) { throw new IllegalStateException(\"media type is mandatory\"); } if (CommonContext.UDP_MEDIA.equals(media) && (null == endpoint && null == controlEndpoint)) { throw new IllegalStateException(\"either 'endpoint' or 'control' must be specified for UDP.\"); } int count = 0; count += null == initialTermId ? 0 : 1; count += null == termId ? 0 : 1; count += null == termOffset ? 0 : 1; if (count > 0) { if (count < 3) { throw new IllegalStateException( \"if any of then a complete set of 'initialTermId', 'termId', and 'termOffset' must be provided\"); } if (termId - initialTermId < 0) // lgtm [java/dereferenced-value-may-be-null] { throw new IllegalStateException( \"difference greater than 2^31 - 1: termId=\" + termId + \" - initialTermId=\" + initialTermId); } if (null != termLength && termOffset > termLength) // lgtm [java/dereferenced-value-may-be-null] { throw new IllegalStateException(\"termOffset=\" + termOffset + \" > termLength=\" + termLength); } } return this; } \n### Response:", "ground_truth": "Validates that the collection of set parameters are valid together.\n\n@return this for a fluent API.\n@throws IllegalStateException if the combination of params is invalid.", "predict": "Validates the given object against the requirements of this class.\n\n@return the object if valid, otherwise null"}
{"ID": 1872, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ChannelUriStringBuilder prefix(final String prefix) { if (null != prefix && !prefix.equals(\"\") && !prefix.equals(SPY_QUALIFIER)) { throw new IllegalArgumentException(\"invalid prefix: \" + prefix); } this.prefix = prefix; return this; } \n### Response:", "ground_truth": "Set the prefix for taking an addition action such as spying on an outgoing publication with \"aeron-spy\".\n\n@param prefix to be applied to the URI before the the scheme.\n@return this for a fluent API.\n@see ChannelUri#SPY_QUALIFIER", "predict": "Sets the prefix for the channel URI.\n\n@param prefix the prefix to set\n@return the channel URI builder"}
{"ID": 1873, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ChannelUriStringBuilder media(final String media) { switch (media) { case CommonContext.UDP_MEDIA: case CommonContext.IPC_MEDIA: break; default: throw new IllegalArgumentException(\"invalid media: \" + media); } this.media = media; return this; } \n### Response:", "ground_truth": "Set the media for this channel. Valid values are \"udp\" and \"ipc\".\n\n@param media for this channel.\n@return this for a fluent API.", "predict": "Sets the media type.\n\n@param media the media type\n@return the channelUriStringBuilder instance"}
{"ID": 1874, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ChannelUriStringBuilder controlMode(final String controlMode) { if (null != controlMode && !controlMode.equals(CommonContext.MDC_CONTROL_MODE_MANUAL) && !controlMode.equals(CommonContext.MDC_CONTROL_MODE_DYNAMIC)) { throw new IllegalArgumentException(\"invalid control mode: \" + controlMode); } this.controlMode = controlMode; return this; } \n### Response:", "ground_truth": "Set the control mode for multi-destination-cast. Set to \"manual\" for allowing control from the publication API.\n\n@param controlMode for taking control of MDC.\n@return this for a fluent API.\n@see Publication#addDestination(String)\n@see Publication#removeDestination(String)\n@see CommonContext#MDC_CONTROL_MODE_PARAM_NAME\n@see CommonContext#MDC_CONTROL_MODE_MANUAL\n@see CommonContext#MDC_CONTROL_MODE_DYNAMIC", "predict": "Sets the control mode.\n\n@param controlMode the new control mode\n@return the updated {@link ChannelUriStringBuilder}"}
{"ID": 1875, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ChannelUriStringBuilder termLength(final Integer termLength) { if (null != termLength) { LogBufferDescriptor.checkTermLength(termLength); } this.termLength = termLength; return this; } \n### Response:", "ground_truth": "Set the length of buffer used for each term of the log. Valid values are powers of 2 in the 64K - 1G range.\n\n@param termLength of the buffer used for each term of the log.\n@return this for a fluent API.\n@see CommonContext#TERM_LENGTH_PARAM_NAME", "predict": "Sets the term length of the channel URI.\n\n@param termLength the new term length\n@return the current builder"}
{"ID": 1876, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ChannelUriStringBuilder termOffset(final Integer termOffset) { if (null != termOffset) { if ((termOffset < 0 || termOffset > LogBufferDescriptor.TERM_MAX_LENGTH)) { throw new IllegalArgumentException(\"term offset not in range 0-1g: \" + termOffset); } if (0 != (termOffset & (FRAME_ALIGNMENT - 1))) { throw new IllegalArgumentException(\"term offset not multiple of FRAME_ALIGNMENT: \" + termOffset); } } this.termOffset = termOffset; return this; } \n### Response:", "ground_truth": "Set the offset within a term at which a publication will start. This when combined with the term id can establish\na starting position.\n\n@param termOffset within a term at which a publication will start.\n@return this for a fluent API.\n@see CommonContext#TERM_OFFSET_PARAM_NAME", "predict": "Sets the term offset.\n\n@param termOffset the term offset\n@return the channel builder"}
{"ID": 1877, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ChannelUriStringBuilder linger(final Long lingerNs) { if (null != lingerNs && lingerNs < 0) { throw new IllegalArgumentException(\"linger value cannot be negative: \" + lingerNs); } this.linger = lingerNs; return this; } \n### Response:", "ground_truth": "Set the time a network publication will linger in nanoseconds after being drained. This time is so that tail loss\ncan be recovered.\n\n@param lingerNs time for the publication after it is drained.\n@return this for a fluent API.\n@see CommonContext#LINGER_PARAM_NAME", "predict": "Sets the linger timeout in seconds.\n\n@param lingerNs the linger timeout in seconds\n@return the current {@link ChannelUriStringBuilder} instance"}
{"ID": 1878, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void openDatagramChannel(final AtomicCounter statusIndicator) { try { sendDatagramChannel = DatagramChannel.open(udpChannel.protocolFamily()); receiveDatagramChannel = sendDatagramChannel; if (udpChannel.isMulticast()) { if (null != connectAddress) { receiveDatagramChannel = DatagramChannel.open(udpChannel.protocolFamily()); } receiveDatagramChannel.setOption(StandardSocketOptions.SO_REUSEADDR, true); receiveDatagramChannel.bind(new InetSocketAddress(endPointAddress.getPort())); receiveDatagramChannel.join(endPointAddress.getAddress(), udpChannel.localInterface()); sendDatagramChannel.setOption(StandardSocketOptions.IP_MULTICAST_IF, udpChannel.localInterface()); if (udpChannel.isHasMulticastTtl()) { sendDatagramChannel.setOption(StandardSocketOptions.IP_MULTICAST_TTL, udpChannel.multicastTtl()); multicastTtl = sendDatagramChannel.getOption(StandardSocketOptions.IP_MULTICAST_TTL); } else if (context.socketMulticastTtl() != 0) { sendDatagramChannel.setOption(StandardSocketOptions.IP_MULTICAST_TTL, context.socketMulticastTtl()); multicastTtl = sendDatagramChannel.getOption(StandardSocketOptions.IP_MULTICAST_TTL); } } else { sendDatagramChannel.bind(bindAddress); } if (null != connectAddress) { sendDatagramChannel.connect(connectAddress); } if (0 != context.socketSndbufLength()) { sendDatagramChannel.setOption(SO_SNDBUF, context.socketSndbufLength()); } if (0 != context.socketRcvbufLength()) { receiveDatagramChannel.setOption(SO_RCVBUF, context.socketRcvbufLength()); } sendDatagramChannel.configureBlocking(false); receiveDatagramChannel.configureBlocking(false); } catch (final IOException ex) { if (null != statusIndicator) { statusIndicator.setOrdered(ChannelEndpointStatus.ERRORED); } CloseHelper.quietClose(sendDatagramChannel); if (receiveDatagramChannel != sendDatagramChannel) { CloseHelper.quietClose(receiveDatagramChannel); } sendDatagramChannel = null; receiveDatagramChannel = null; throw new AeronException( \"channel error - \" + ex.getMessage() + \" (at \" + ex.getStackTrace()[0].toString() + \"): \" + udpChannel.originalUriString(), ex); } } \n### Response:", "ground_truth": "Create the underlying channel for reading and writing.\n\n@param statusIndicator to set for error status", "predict": "Opens a datagram channel for sending and receiving data.\n\n@param statusIndicator The current status of the channel."}
{"ID": 1879, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void close() { if (!isClosed) { isClosed = true; try { if (null != selectionKey) { selectionKey.cancel(); } if (null != transportPoller) { transportPoller.cancelRead(this); transportPoller.selectNowWithoutProcessing(); } if (null != sendDatagramChannel) { sendDatagramChannel.close(); } if (receiveDatagramChannel != sendDatagramChannel && null != receiveDatagramChannel) { receiveDatagramChannel.close(); } if (null != transportPoller) { transportPoller.selectNowWithoutProcessing(); } } catch (final IOException ex) { errorLog.record(ex); } } } \n### Response:", "ground_truth": "Close transport, canceling any pending read operations and closing channel", "predict": "Closes the connection."}
{"ID": 1880, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean isValidFrame(final UnsafeBuffer buffer, final int length) { boolean isFrameValid = true; if (frameVersion(buffer, 0) != HeaderFlyweight.CURRENT_VERSION) { isFrameValid = false; invalidPackets.increment(); } else if (length < HeaderFlyweight.MIN_HEADER_LENGTH) { isFrameValid = false; invalidPackets.increment(); } return isFrameValid; } \n### Response:", "ground_truth": "Is the received frame valid. This method will do some basic checks on the header and can be\noverridden in a subclass for further validation.\n\n@param buffer containing the frame.\n@param length of the frame.\n@return true if the frame is believed valid otherwise false.", "predict": "Checks if the given buffer is valid.\n\n@param buffer the buffer to check\n@param length the length of the buffer\n@return true if the buffer is valid, false otherwise"}
{"ID": 1881, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public InetSocketAddress receive(final ByteBuffer buffer) { buffer.clear(); InetSocketAddress address = null; try { if (receiveDatagramChannel.isOpen()) { address = (InetSocketAddress)receiveDatagramChannel.receive(buffer); } } catch (final PortUnreachableException ignored) { } catch (final Exception ex) { LangUtil.rethrowUnchecked(ex); } return address; } \n### Response:", "ground_truth": "Receive a datagram from the media layer.\n\n@param buffer into which the datagram will be received.\n@return the source address of the datagram if one is available otherwise false.", "predict": "Receives data from the receive datagram channel.\n\n@param buffer the buffer to receive data from\n@return the address of the remote host"}
{"ID": 1882, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void onNak( final int termId, final int termOffset, final int length, final int termLength, final RetransmitSender retransmitSender) { if (!isInvalid(termOffset, termLength)) { if (null == activeRetransmitsMap.get(termId, termOffset) && activeRetransmitsMap.size() < MAX_RETRANSMITS_DEFAULT) { final RetransmitAction action = assignRetransmitAction(); action.termId = termId; action.termOffset = termOffset; action.length = Math.min(length, termLength - termOffset); final long delay = delayGenerator.generateDelay(); if (0 == delay) { retransmitSender.resend(termId, termOffset, action.length); action.linger(lingerTimeoutGenerator.generateDelay(), nanoClock.nanoTime()); } else { action.delay(delay, nanoClock.nanoTime()); } activeRetransmitsMap.put(termId, termOffset, action); } } } \n### Response:", "ground_truth": "Called on reception of a NAK to start retransmits handling.\n\n@param termId           from the NAK and the term id of the buffer to retransmit from\n@param termOffset       from the NAK and the offset of the data to retransmit\n@param length           of the missing data\n@param termLength       of the term buffer.\n@param retransmitSender to call if an immediate retransmit is required", "predict": "Callback for timeout.\n\n@param termId the term id\n@param termOffset the term offset\n@param length the length\n@param retransmitSender the retransmit sender"}
{"ID": 1883, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void processTimeouts(final long nowNs, final RetransmitSender retransmitSender) { if (activeRetransmitsMap.size() > 0) { for (final RetransmitAction action : retransmitActionPool) { if (DELAYED == action.state && (action.expireNs - nowNs < 0)) { retransmitSender.resend(action.termId, action.termOffset, action.length); action.linger(lingerTimeoutGenerator.generateDelay(), nanoClock.nanoTime()); } else if (LINGERING == action.state && (action.expireNs - nowNs < 0)) { action.cancel(); activeRetransmitsMap.remove(action.termId, action.termOffset); } } } } \n### Response:", "ground_truth": "Called to process any outstanding timeouts.\n\n@param nowNs            time in nanoseconds\n@param retransmitSender to call on retransmissions", "predict": "Processes timeouts.\n\n@param nowNs the current timeout\n@param retransmitSender the retransmit sender"}
{"ID": 1884, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String status(final long status) { if (INITIALIZING == status) { return \"INITIALIZING\"; } if (ERRORED == status) { return \"ERRORED\"; } if (ACTIVE == status) { return \"ACTIVE\"; } if (CLOSING == status) { return \"CLOSING\"; } return \"unknown id=\" + status; } \n### Response:", "ground_truth": "String representation of the channel status.\n\n@param status to be converted.\n@return representation of the channel status.", "predict": "Returns the status of the given status code.\n\n@param status the status code\n@return the status string"}
{"ID": 1885, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static AtomicCounter allocate( final MutableDirectBuffer tempBuffer, final String name, final int typeId, final CountersManager countersManager, final String channel) { final int keyLength = tempBuffer.putStringWithoutLengthAscii( CHANNEL_OFFSET + SIZE_OF_INT, channel, 0, MAX_CHANNEL_LENGTH); tempBuffer.putInt(CHANNEL_OFFSET, keyLength); int labelLength = 0; labelLength += tempBuffer.putStringWithoutLengthAscii(keyLength + labelLength, name); labelLength += tempBuffer.putStringWithoutLengthAscii(keyLength + labelLength, \": \"); labelLength += tempBuffer.putStringWithoutLengthAscii( keyLength + labelLength, channel, 0, MAX_LABEL_LENGTH - labelLength); return countersManager.newCounter(typeId, tempBuffer, 0, keyLength, tempBuffer, keyLength, labelLength); } \n### Response:", "ground_truth": "Allocate an indicator for tracking the status of a channel endpoint.\n\n@param tempBuffer      to be used for labels and metadata.\n@param name            of the counter for the label.\n@param typeId          of the counter for classification.\n@param countersManager from which to allocated the underlying storage.\n@param channel         for the stream of messages.\n@return a new {@link AtomicCounter} for tracking the status.", "predict": "Allocates a counter with the given name, type id, and channel.\n\n@param tempBuffer the buffer to allocate the counter from\n@param name the name of the counter\n@param typeId the type id of the counter\n@param countersManager the counters manager\n@param channel the channel to allocate the counter to\n@return the counter"}
{"ID": 1886, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public DirectBufferVector reset(final DirectBuffer buffer, final int offset, final int length) { this.buffer = buffer; this.offset = offset; this.length = length; return this; } \n### Response:", "ground_truth": "Reset the values.\n\n@param buffer which is the super set.\n@param offset at which the vector begins.\n@param length of the vector.\n@return this for a fluent API.", "predict": "Resets the vector to the specified buffer and offset.\n\n@param buffer The buffer to reset to.\n@param offset The offset to reset to.\n@param length The length of the buffer to reset to.\n\n@return The current instance of this class."}
{"ID": 1887, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public DirectBufferVector validate() { final int capacity = buffer.capacity(); if (offset < 0 || offset >= capacity) { throw new IllegalArgumentException(\"offset=\" + offset + \" capacity=\" + capacity); } if (length < 0 || length > (capacity - offset)) { throw new IllegalArgumentException(\"offset=\" + offset + \" capacity=\" + capacity + \" length=\" + length); } return this; } \n### Response:", "ground_truth": "Ensure the vector is valid for the buffer.\n\n@throws NullPointerException if the buffer is null.\n@throws IllegalArgumentException if the offset is out of range for the buffer.\n@throws IllegalArgumentException if the length is out of range for the buffer.\n@return this for a fluent API.", "predict": "Validates the vector.\n\n@return the vector"}
{"ID": 1888, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int validateAndComputeLength(final DirectBufferVector[] vectors) { int messageLength = 0; for (final DirectBufferVector vector : vectors) { vector.validate(); messageLength += vector.length; if (messageLength < 0) { throw new IllegalStateException(\"length overflow: \" + Arrays.toString(vectors)); } } return messageLength; } \n### Response:", "ground_truth": "Validate an array of vectors to make up a message and compute the total length.\n\n@param vectors to be validated summed.\n@return the sum of the vector lengths.", "predict": "Validates the given array of DirectBufferVectors and computes the length of the message.\n\n@param vectors the array of DirectBufferVectors to validate\n@return the length of the message\n@throws IllegalStateException if the length of the message is negative"}
{"ID": 1889, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int producerWindowLength(final int termBufferLength, final int defaultTermWindowLength) { int termWindowLength = termBufferLength / 2; if (0 != defaultTermWindowLength) { termWindowLength = Math.min(defaultTermWindowLength, termWindowLength); } return termWindowLength; } \n### Response:", "ground_truth": "How far ahead a producer can get from a consumer position.\n\n@param termBufferLength        for when default is not set and considering an appropriate minimum.\n@param defaultTermWindowLength to take priority.\n@return the length to be used for the producer window.", "predict": "Returns the maximum length of the producer window that can be used to produce\ndata.\n\n@param termBufferLength\n@param defaultTermWindowLength\n@return"}
{"ID": 1890, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void validateSocketBufferLengths(final MediaDriver.Context ctx) { try (DatagramChannel probe = DatagramChannel.open()) { final int defaultSoSndBuf = probe.getOption(StandardSocketOptions.SO_SNDBUF); probe.setOption(StandardSocketOptions.SO_SNDBUF, Integer.MAX_VALUE); final int maxSoSndBuf = probe.getOption(StandardSocketOptions.SO_SNDBUF); if (maxSoSndBuf < ctx.socketSndbufLength()) { System.err.format( \"WARNING: Could not get desired SO_SNDBUF, adjust OS to allow %s: attempted=%d, actual=%d%n\", SOCKET_SNDBUF_LENGTH_PROP_NAME, ctx.socketSndbufLength(), maxSoSndBuf); } probe.setOption(StandardSocketOptions.SO_RCVBUF, Integer.MAX_VALUE); final int maxSoRcvBuf = probe.getOption(StandardSocketOptions.SO_RCVBUF); if (maxSoRcvBuf < ctx.socketRcvbufLength()) { System.err.format( \"WARNING: Could not get desired SO_RCVBUF, adjust OS to allow %s: attempted=%d, actual=%d%n\", SOCKET_RCVBUF_LENGTH_PROP_NAME, ctx.socketRcvbufLength(), maxSoRcvBuf); } final int soSndBuf = 0 == ctx.socketSndbufLength() ? defaultSoSndBuf : ctx.socketSndbufLength(); if (ctx.mtuLength() > soSndBuf) { throw new ConfigurationException(String.format( \"MTU greater than socket SO_SNDBUF, adjust %s to match MTU: mtuLength=%d, SO_SNDBUF=%d\", SOCKET_SNDBUF_LENGTH_PROP_NAME, ctx.mtuLength(), soSndBuf)); } if (ctx.initialWindowLength() > maxSoRcvBuf) { throw new ConfigurationException(\"window length greater than socket SO_RCVBUF, increase '\" + Configuration.INITIAL_WINDOW_LENGTH_PROP_NAME + \"' to match window: windowLength=\" + ctx.initialWindowLength() + \", SO_RCVBUF=\" + maxSoRcvBuf); } } catch (final IOException ex) { throw new AeronException(\"probe socket: \" + ex.toString(), ex); } } \n### Response:", "ground_truth": "Validate that the socket buffer lengths are sufficient for the media driver configuration.\n\n@param ctx to be validated.", "predict": "Validate the socket buffer lengths.\n\n@param ctx the context"}
{"ID": 1891, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void validatePageSize(final int pageSize) { if (pageSize < PAGE_MIN_SIZE) { throw new ConfigurationException( \"page size less than min size of \" + PAGE_MIN_SIZE + \": \" + pageSize); } if (pageSize > PAGE_MAX_SIZE) { throw new ConfigurationException( \"page size greater than max size of \" + PAGE_MAX_SIZE + \": \" + pageSize); } if (!BitUtil.isPowerOfTwo(pageSize)) { throw new ConfigurationException(\"page size not a power of 2: \" + pageSize); } } \n### Response:", "ground_truth": "Validate that page size is valid and alignment is valid.\n\n@param pageSize to be checked.\n@throws ConfigurationException if the size is not as expected.", "predict": "Validate page size.\n\n@param pageSize page size"}
{"ID": 1892, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void validateSessionIdRange(final int low, final int high) { if (low > high) { throw new ConfigurationException(\"low session id value \" + low + \" must be <= high value \" + high); } if (Math.abs((long)high - low) > Integer.MAX_VALUE) { throw new ConfigurationException(\"reserved range to too large\"); } } \n### Response:", "ground_truth": "Validate the range of session ids based on a high and low value provided which accounts for the values wrapping.\n\n@param low  value in the range.\n@param high value in the range.\n@throws ConfigurationException if the values are not valid.", "predict": "Validate the range of the session id.\n\n@param low the low value\n@param high the high value\n@throws ConfigurationException if the range is invalid"}
{"ID": 1893, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void validateUnblockTimeout( final long publicationUnblockTimeoutNs, final long clientLivenessTimeoutNs, final long timerIntervalNs) { if (publicationUnblockTimeoutNs <= clientLivenessTimeoutNs) { throw new ConfigurationException( \"publicationUnblockTimeoutNs=\" + publicationUnblockTimeoutNs + \" <= clientLivenessTimeoutNs=\" + clientLivenessTimeoutNs); } if (clientLivenessTimeoutNs <= timerIntervalNs) { throw new ConfigurationException( \"clientLivenessTimeoutNs=\" + clientLivenessTimeoutNs + \" <= timerIntervalNs=\" + timerIntervalNs); } } \n### Response:", "ground_truth": "Validate that the timeouts for unblocking publications from a client are valid.\n\n@param publicationUnblockTimeoutNs after which an uncommitted publication will be unblocked.\n@param clientLivenessTimeoutNs     after which a client will be considered not alive.\n@param timerIntervalNs             interval at which the driver will check timeouts.\n@throws ConfigurationException if the values are not valid.", "predict": "Validates the unblock timeout.\n\n@param publicationUnblockTimeoutNs the publication unblock timeout\n@param clientLivenessTimeoutNs the client liveness timeout\n@param timerIntervalNs the timer interval"}
{"ID": 1894, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ErrorResponseFlyweight errorCode(final ErrorCode code) { buffer.putInt(offset + ERROR_CODE_OFFSET, code.value()); return this; } \n### Response:", "ground_truth": "Set the error code for the command.\n\n@param code for the error\n@return flyweight", "predict": "Sets the error code.\n\n@param code the error code\n@return the error response"}
{"ID": 1895, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void reset() { isBallotSent = false; isLeader = false; hasRequestedJoin = false; hasSentTerminationAck = false; vote = null; candidateTermId = Aeron.NULL_VALUE; leadershipTermId = Aeron.NULL_VALUE; logPosition = NULL_POSITION; } \n### Response:", "ground_truth": "Reset the state of a cluster member so it can be canvassed and reestablished.", "predict": "Resets the state of this election."}
{"ID": 1896, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String encodeAsString(final ClusterMember[] clusterMembers) { final StringBuilder builder = new StringBuilder(); for (int i = 0, length = clusterMembers.length; i < length; i++) { final ClusterMember member = clusterMembers[i]; builder .append(member.id()) .append(',') .append(member.endpointsDetail()); if ((length - 1) != i) { builder.append('|'); } } return builder.toString(); } \n### Response:", "ground_truth": "Encode member details from a cluster members array to a string.\n\n@param clusterMembers to fill the details from\n@return String representation suitable for use with {@link ClusterMember#parse}", "predict": "Encodes the cluster members as a string.\n\n@param clusterMembers the cluster members\n@return the string"}
{"ID": 1897, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void addMemberStatusPublications( final ClusterMember[] members, final ClusterMember exclude, final ChannelUri channelUri, final int streamId, final Aeron aeron) { for (final ClusterMember member : members) { if (member != exclude) { channelUri.put(ENDPOINT_PARAM_NAME, member.memberFacingEndpoint()); member.publication = aeron.addExclusivePublication(channelUri.toString(), streamId); } } } \n### Response:", "ground_truth": "Add the publications for sending status messages to the other members of the cluster.\n\n@param members    of the cluster.\n@param exclude    this member when adding publications.\n@param channelUri for the publication.\n@param streamId   for the publication.\n@param aeron      to add the publications to.", "predict": "Adds publications for the members of the given list of members.\n\n@param members the members to add publications for\n@param exclude the members to exclude\n@param channelUri the channel URI\n@param streamId the stream ID\n@param aeron the Aeron"}
{"ID": 1898, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void closeMemberPublications(final ClusterMember[] clusterMembers) { for (final ClusterMember member : clusterMembers) { CloseHelper.close(member.publication); } } \n### Response:", "ground_truth": "Close the publications associated with members of the cluster.\n\n@param clusterMembers to close the publications for.", "predict": "Closes all publications of the given members.\n\n@param clusterMembers the members to close"}
{"ID": 1899, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean hasActiveQuorum( final ClusterMember[] clusterMembers, final long nowMs, final long timeoutMs) { int threshold = quorumThreshold(clusterMembers.length); for (final ClusterMember member : clusterMembers) { if (member.isLeader() || nowMs <= (member.timeOfLastAppendPositionMs() + timeoutMs)) { if (--threshold <= 0) { return true; } } } return false; } \n### Response:", "ground_truth": "Check if the cluster leader has an active quorum of cluster followers.\n\n@param clusterMembers for the current cluster.\n@param nowMs          for the current time.\n@param timeoutMs      after which a follower is not considered active.\n@return true if quorum of cluster members are considered active.", "predict": "Checks if the cluster has a quorum of members.\n\n@param clusterMembers the cluster members\n@param nowMs the current time\n@param timeoutMs the timeout in milliseconds\n@return true if the cluster has a quorum of members"}
{"ID": 1900, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long quorumPosition(final ClusterMember[] members, final long[] rankedPositions) { final int length = rankedPositions.length; for (int i = 0; i < length; i++) { rankedPositions[i] = 0; } for (final ClusterMember member : members) { long newPosition = member.logPosition; for (int i = 0; i < length; i++) { final long rankedPosition = rankedPositions[i]; if (newPosition > rankedPosition) { rankedPositions[i] = newPosition; newPosition = rankedPosition; } } } return rankedPositions[length - 1]; } \n### Response:", "ground_truth": "Calculate the position reached by a quorum of cluster members.\n\n@param members         of the cluster.\n@param rankedPositions temp array to be used for sorting the positions to avoid allocation.\n@return the position reached by a quorum of cluster members.", "predict": "Returns the position of the first member in the ranked list of members.\n\n@param members the members to rank\n@param rankedPositions the ranked positions\n@return the position of the first member in the ranked list of members"}
{"ID": 1901, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void resetLogPositions(final ClusterMember[] clusterMembers, final long logPosition) { for (final ClusterMember member : clusterMembers) { member.logPosition(logPosition); } } \n### Response:", "ground_truth": "Reset the log position of all the members to the provided value.\n\n@param clusterMembers to be reset.\n@param logPosition    to set for them all.", "predict": "Resets the log positions for all members in the given cluster.\n\n@param clusterMembers the cluster members\n@param logPosition the log position"}
{"ID": 1902, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean haveVotersReachedPosition( final ClusterMember[] clusterMembers, final long position, final long leadershipTermId) { for (final ClusterMember member : clusterMembers) { if (member.vote != null && (member.logPosition < position || member.leadershipTermId != leadershipTermId)) { return false; } } return true; } \n### Response:", "ground_truth": "Has the members of the cluster the voted reached the provided position in their log.\n\n@param clusterMembers   to check.\n@param position         to compare the {@link #logPosition()} against.\n@param leadershipTermId expected of the members.\n@return true if all members have reached this position otherwise false.", "predict": "Checks if the specified position is reached by the specified cluster members.\n\n@param clusterMembers the cluster members to check\n@param position the position to check\n@param leadershipTermId the leadership term id\n@return true if the specified position is reached by the specified cluster members"}
{"ID": 1903, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean hasWonVoteOnFullCount(final ClusterMember[] members, final long candidateTermId) { int votes = 0; for (final ClusterMember member : members) { if (null == member.vote || member.candidateTermId != candidateTermId) { return false; } votes += member.vote ? 1 : 0; } return votes >= ClusterMember.quorumThreshold(members.length); } \n### Response:", "ground_truth": "Has the candidate got unanimous support of the cluster?\n\n@param members         to check for votes.\n@param candidateTermId for the vote.\n@return false if any member has not voted for the candidate.", "predict": "Checks if the candidate term has won the full number of votes.\n\n@param members the members\n@param candidateTermId the candidate term id\n@return true if the candidate term has won the full number of votes"}
{"ID": 1904, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean hasMajorityVote(final ClusterMember[] clusterMembers, final long candidateTermId) { int votes = 0; for (final ClusterMember member : clusterMembers) { if (Boolean.TRUE.equals(member.vote) && member.candidateTermId == candidateTermId) { ++votes; } } return votes >= ClusterMember.quorumThreshold(clusterMembers.length); } \n### Response:", "ground_truth": "Has sufficient votes being counted for a majority?\n\n@param clusterMembers  to check for votes.\n@param candidateTermId for the vote.\n@return true if a majority of positive votes.", "predict": "Checks if the majority of the cluster members have cast a vote for the given term.\n\n@param clusterMembers the cluster members to check\n@param candidateTermId the term to check\n@return true if the majority of the cluster members have cast a vote for the given term"}
{"ID": 1905, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ClusterMember determineMember( final ClusterMember[] clusterMembers, final int memberId, final String memberEndpoints) { ClusterMember member = NULL_VALUE != memberId ? ClusterMember.findMember(clusterMembers, memberId) : null; if ((null == clusterMembers || 0 == clusterMembers.length) && null == member) { member = ClusterMember.parseEndpoints(NULL_VALUE, memberEndpoints); } else { if (null == member) { throw new ClusterException(\"memberId=\" + memberId + \" not found in clusterMembers\"); } if (!\"\".equals(memberEndpoints)) { ClusterMember.validateMemberEndpoints(member, memberEndpoints); } } return member; } \n### Response:", "ground_truth": "Determine which member of a cluster this is and check endpoints.\n\n@param clusterMembers  for the current cluster which can be null.\n@param memberId        for this member.\n@param memberEndpoints for this member.\n@return the {@link ClusterMember} determined.", "predict": "Returns the cluster member with the given id and endpoint names.\n\n@param clusterMembers\n@param memberId\n@param memberEndpoints\n@return"}
{"ID": 1906, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void validateMemberEndpoints(final ClusterMember member, final String memberEndpoints) { final ClusterMember endpointMember = ClusterMember.parseEndpoints(Aeron.NULL_VALUE, memberEndpoints); if (!areSameEndpoints(member, endpointMember)) { throw new ClusterException( \"clusterMembers and memberEndpoints differ: \" + member.endpointsDetail() + \" != \" + memberEndpoints); } } \n### Response:", "ground_truth": "Check the member with the memberEndpoints\n\n@param member          to check memberEndpoints against\n@param memberEndpoints to check member against\n@see ConsensusModule.Context#memberEndpoints()\n@see ConsensusModule.Context#clusterMembers()", "predict": "Validates the member endpoints.\n\n@param member\nthe member\n@param memberEndpoints\nthe member endpoints"}
{"ID": 1907, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean areSameEndpoints(final ClusterMember lhs, final ClusterMember rhs) { return lhs.clientFacingEndpoint().equals(rhs.clientFacingEndpoint()) && lhs.memberFacingEndpoint().equals(rhs.memberFacingEndpoint()) && lhs.logEndpoint().equals(rhs.logEndpoint()) && lhs.transferEndpoint().equals(rhs.transferEndpoint()) && lhs.archiveEndpoint().equals(rhs.archiveEndpoint()); } \n### Response:", "ground_truth": "Are two cluster members using the same endpoints?\n\n@param lhs to check\n@param rhs to check\n@return true if both are using the same endpoints or false if not.", "predict": "Checks if the given members have the same endpoints.\n\n@param lhs\n@param rhs\n@return"}
{"ID": 1908, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isUnanimousCandidate(final ClusterMember[] clusterMembers, final ClusterMember candidate) { for (final ClusterMember member : clusterMembers) { if (NULL_POSITION == member.logPosition || compareLog(candidate, member) < 0) { return false; } } return true; } \n### Response:", "ground_truth": "Has the member achieved a unanimous view to be a suitable candidate in an election.\n\n@param clusterMembers to compare the candidate against.\n@param candidate      for leadership.\n@return true if the candidate is suitable otherwise false.", "predict": "Checks if the given candidate is a Unanimous candidate.\n\n@param clusterMembers the cluster members to check\n@param candidate the candidate to check\n@return true if the given candidate is a Unanimous candidate, false otherwise"}
{"ID": 1909, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isQuorumCandidate(final ClusterMember[] clusterMembers, final ClusterMember candidate) { int possibleVotes = 0; for (final ClusterMember member : clusterMembers) { if (NULL_POSITION == member.logPosition || compareLog(candidate, member) < 0) { continue; } ++possibleVotes; } return possibleVotes >= ClusterMember.quorumThreshold(clusterMembers.length); } \n### Response:", "ground_truth": "Has the member achieved a quorum view to be a suitable candidate in an election.\n\n@param clusterMembers to compare the candidate against.\n@param candidate      for leadership.\n@return true if the candidate is suitable otherwise false.", "predict": "Checks if the given member is a member of thequorum.\n\n@param clusterMembers the members to check\n@param candidate the candidate to check\n@return true if the candidate is a member of thequorum, false otherwise"}
{"ID": 1910, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isNotDuplicateEndpoints(final ClusterMember[] members, final String memberEndpoints) { for (final ClusterMember member : members) { if (member.endpointsDetail().equals(memberEndpoints)) { return false; } } return true; } \n### Response:", "ground_truth": "Is the string of member endpoints not duplicated in the members.\n\n@param members         to check if the provided endpoints have a duplicate.\n@param memberEndpoints to check for duplicates.\n@return true if no duplicate is found otherwise false.", "predict": "Check if the given members are not duplicate endpoints.\n\n@param members the members\n@param memberEndpoints the member endpoints\n@return true if the given members are not duplicate endpoints"}
{"ID": 1911, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int findMemberIndex(final ClusterMember[] clusterMembers, final int memberId) { final int length = clusterMembers.length; int index = ArrayUtil.UNKNOWN_INDEX; for (int i = 0; i < length; i++) { if (clusterMembers[i].id() == memberId) { index = i; } } return index; } \n### Response:", "ground_truth": "Find the index at which a member id is present.\n\n@param clusterMembers to be searched.\n@param memberId       to search for.\n@return the index at which the member id is found otherwise {@link ArrayUtil#UNKNOWN_INDEX}.", "predict": "Find the index of the member with the given id.\n\n@param clusterMembers the cluster members\n@param memberId the member id\n@return the index of the member with the given id"}
{"ID": 1912, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ClusterMember[] removeMember(final ClusterMember[] oldMembers, final int memberId) { return ArrayUtil.remove(oldMembers, findMemberIndex(oldMembers, memberId)); } \n### Response:", "ground_truth": "Remove a member from an array if found, otherwise return the array unmodified.\n\n@param oldMembers to remove a member from.\n@param memberId   of the member to remove.\n@return a new array with the member removed or the existing array if not found.", "predict": "Removes the member with the given id from the given array of members.\n\n@param oldMembers the array of members to remove\n@param memberId the id of the member to remove\n@return the array of members that contains the member with the given id"}
{"ID": 1913, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int highMemberId(final ClusterMember[] clusterMembers) { int highId = Aeron.NULL_VALUE; for (final ClusterMember member : clusterMembers) { highId = Math.max(highId, member.id()); } return highId; } \n### Response:", "ground_truth": "Find the highest member id in an array of members.\n\n@param clusterMembers to search for the highest id.\n@return the highest id otherwise {@link Aeron#NULL_VALUE} if empty.", "predict": "Get the high member id.\n\n@param clusterMembers the cluster members\n@return the high member id"}
{"ID": 1914, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public MappedByteBuffer mapExistingCncFile(final Consumer<String> logger) { final File cncFile = new File(aeronDirectory, CncFileDescriptor.CNC_FILE); if (cncFile.exists() && cncFile.length() > 0) { if (null != logger) { logger.accept(\"INFO: Aeron CnC file exists: \" + cncFile); } return IoUtil.mapExistingFile(cncFile, CncFileDescriptor.CNC_FILE); } return null; } \n### Response:", "ground_truth": "Map the CnC file if it exists.\n\n@param logger for feedback\n@return a new mapping for the file if it exists otherwise null;", "predict": "Map an existing Cnc file.\n\n@param logger logger to log the message\n@return the buffer to write the data to"}
{"ID": 1915, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isDriverActive( final File directory, final long driverTimeoutMs, final Consumer<String> logger) { final File cncFile = new File(directory, CncFileDescriptor.CNC_FILE); if (cncFile.exists() && cncFile.length() > 0) { logger.accept(\"INFO: Aeron CnC file exists: \" + cncFile); final MappedByteBuffer cncByteBuffer = IoUtil.mapExistingFile(cncFile, \"CnC file\"); try { return isDriverActive(driverTimeoutMs, logger, cncByteBuffer); } finally { IoUtil.unmap(cncByteBuffer); } } return false; } \n### Response:", "ground_truth": "Is a media driver active in the given directory?\n\n@param directory       to check\n@param driverTimeoutMs for the driver liveness check.\n@param logger          for feedback as liveness checked.\n@return true if a driver is active or false if not.", "predict": "Checks if the driver is active.\n\n@param directory the directory where the driver is located\n@param driverTimeoutMs the driver timeout in milliseconds\n@param logger the logger\n@return true if the driver is active, false otherwise"}
{"ID": 1916, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean isDriverActive(final long driverTimeoutMs, final Consumer<String> logger) { final MappedByteBuffer cncByteBuffer = mapExistingCncFile(logger); try { return isDriverActive(driverTimeoutMs, logger, cncByteBuffer); } finally { IoUtil.unmap(cncByteBuffer); } } \n### Response:", "ground_truth": "Is a media driver active in the current Aeron directory?\n\n@param driverTimeoutMs for the driver liveness check.\n@param logger          for feedback as liveness checked.\n@return true if a driver is active or false if not.", "predict": "Checks if the driver is active.\n\n@param driverTimeoutMs the timeout in milliseconds\n@param logger the logger\n@return true if the driver is active, false otherwise"}
{"ID": 1917, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isDriverActive( final long driverTimeoutMs, final Consumer<String> logger, final ByteBuffer cncByteBuffer) { if (null == cncByteBuffer) { return false; } final UnsafeBuffer cncMetaDataBuffer = CncFileDescriptor.createMetaDataBuffer(cncByteBuffer); final long startTimeMs = System.currentTimeMillis(); int cncVersion; while (0 == (cncVersion = cncMetaDataBuffer.getIntVolatile(CncFileDescriptor.cncVersionOffset(0)))) { if (System.currentTimeMillis() > (startTimeMs + driverTimeoutMs)) { throw new DriverTimeoutException(\"CnC file is created but not initialised.\"); } sleep(1); } if (CNC_VERSION != cncVersion) { throw new AeronException( \"Aeron CnC version does not match: required=\" + CNC_VERSION + \" version=\" + cncVersion); } final ManyToOneRingBuffer toDriverBuffer = new ManyToOneRingBuffer( CncFileDescriptor.createToDriverBuffer(cncByteBuffer, cncMetaDataBuffer)); final long timestamp = toDriverBuffer.consumerHeartbeatTime(); final long now = System.currentTimeMillis(); final long timestampAge = now - timestamp; logger.accept(\"INFO: Aeron toDriver consumer heartbeat is (ms): \" + timestampAge); return timestampAge <= driverTimeoutMs; } \n### Response:", "ground_truth": "Is a media driver active in the current mapped CnC buffer? If the driver is mid start then it will wait for\nup to the driverTimeoutMs by checking for the cncVersion being set.\n\n@param driverTimeoutMs for the driver liveness check.\n@param logger          for feedback as liveness checked.\n@param cncByteBuffer   for the existing CnC file.\n@return true if a driver is active or false if not.", "predict": "Check if the driver is active.\n\n@param driverTimeoutMs\n@param logger\n@param cncByteBuffer\n@return"}
{"ID": 1918, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean requestDriverTermination( final File directory, final DirectBuffer tokenBuffer, final int tokenOffset, final int tokenLength) { final File cncFile = new File(directory, CncFileDescriptor.CNC_FILE); if (cncFile.exists() && cncFile.length() > 0) { final MappedByteBuffer cncByteBuffer = IoUtil.mapExistingFile(cncFile, \"CnC file\"); try { final UnsafeBuffer cncMetaDataBuffer = CncFileDescriptor.createMetaDataBuffer(cncByteBuffer); final int cncVersion = cncMetaDataBuffer.getIntVolatile(cncVersionOffset(0)); if (CncFileDescriptor.CNC_VERSION != cncVersion) { throw new AeronException( \"Aeron CnC version does not match: required=\" + CNC_VERSION + \" version=\" + cncVersion); } final ManyToOneRingBuffer toDriverBuffer = new ManyToOneRingBuffer( CncFileDescriptor.createToDriverBuffer(cncByteBuffer, cncMetaDataBuffer)); final long clientId = toDriverBuffer.nextCorrelationId(); final DriverProxy driverProxy = new DriverProxy(toDriverBuffer, clientId); return driverProxy.terminateDriver(tokenBuffer, tokenOffset, tokenLength); } finally { IoUtil.unmap(cncByteBuffer); } } return false; } \n### Response:", "ground_truth": "Request a driver to run its termination hook.\n\n@param directory for the driver.\n@param tokenBuffer containing the optional token for the request.\n@param tokenOffset within the tokenBuffer at which the token begins.\n@param tokenLength of the token in the tokenBuffer.\n@return true if request was sent or false if request could not be sent.", "predict": "Request driver termination.\n\n@param directory the directory\n@param tokenBuffer the token buffer\n@param tokenOffset the token offset\n@param tokenLength the token length\n@return true if successful"}
{"ID": 1919, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int frameLengthVolatile(final UnsafeBuffer buffer, final int termOffset) { int frameLength = buffer.getIntVolatile(termOffset); if (ByteOrder.nativeOrder() != LITTLE_ENDIAN) { frameLength = Integer.reverseBytes(frameLength); } return frameLength; } \n### Response:", "ground_truth": "Get the length of a frame from the header as a volatile read.\n\n@param buffer     containing the frame.\n@param termOffset at which a frame begins.\n@return the value for the frame length.", "predict": "Returns the length of the frame in bytes.\n\n@param buffer The buffer to get the length from.\n@param termOffset The offset of the frame to get the length from.\n@return The length of the frame in bytes."}
{"ID": 1920, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void frameLengthOrdered(final UnsafeBuffer buffer, final int termOffset, final int frameLength) { int length = frameLength; if (ByteOrder.nativeOrder() != LITTLE_ENDIAN) { length = Integer.reverseBytes(frameLength); } buffer.putIntOrdered(termOffset, length); } \n### Response:", "ground_truth": "Write the length header for a frame in a memory ordered fashion.\n\n@param buffer      containing the frame.\n@param termOffset  at which a frame begins.\n@param frameLength field to be set for the frame.", "predict": "Helper method to reverse the frame length.\n\n@param buffer\n@param termOffset\n@param frameLength"}
{"ID": 1921, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void frameType(final UnsafeBuffer buffer, final int termOffset, final int type) { buffer.putShort(typeOffset(termOffset), (short)type, LITTLE_ENDIAN); } \n### Response:", "ground_truth": "Write the type field for a frame.\n\n@param buffer     containing the frame.\n@param termOffset at which a frame begins.\n@param type       type value for the frame.", "predict": "Sets the type of the frame.\n\n@param buffer the buffer\n@param termOffset the term offset\n@param type the type"}
{"ID": 1922, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void frameFlags(final UnsafeBuffer buffer, final int termOffset, final byte flags) { buffer.putByte(flagsOffset(termOffset), flags); } \n### Response:", "ground_truth": "Write the flags field for a frame.\n\n@param buffer     containing the frame.\n@param termOffset at which a frame begins.\n@param flags      value for the frame.", "predict": "Set the flags for the current frame.\n\n@param buffer the current frame buffer\n@param termOffset the offset into the current frame\n@param flags the flags to set"}
{"ID": 1923, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void frameTermOffset(final UnsafeBuffer buffer, final int termOffset) { buffer.putInt(termOffsetOffset(termOffset), termOffset, LITTLE_ENDIAN); } \n### Response:", "ground_truth": "Write the term offset field for a frame.\n\n@param buffer     containing the frame.\n@param termOffset at which a frame begins.", "predict": "Set the term offset in the given buffer.\n\n@param buffer the buffer\n@param termOffset the term offset"}
{"ID": 1924, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void frameTermId(final UnsafeBuffer buffer, final int termOffset, final int termId) { buffer.putInt(termIdOffset(termOffset), termId, LITTLE_ENDIAN); } \n### Response:", "ground_truth": "Write the term id field for a frame.\n\n@param buffer     containing the frame.\n@param termOffset at which a frame begins.\n@param termId     value for the frame.", "predict": "Set the term id for the given term offset.\n\n@param buffer the buffer\n@param termOffset the term offset\n@param termId the term id"}
{"ID": 1925, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int findCounterIdByRecording(final CountersReader countersReader, final long recordingId) { final DirectBuffer buffer = countersReader.metaDataBuffer(); for (int i = 0, size = countersReader.maxCounterId(); i < size; i++) { if (countersReader.getCounterState(i) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(i); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECORDING_POSITION_TYPE_ID && buffer.getLong(recordOffset + KEY_OFFSET + RECORDING_ID_OFFSET) == recordingId) { return i; } } } return NULL_COUNTER_ID; } \n### Response:", "ground_truth": "Find the active counter id for a stream based on the recording id.\n\n@param countersReader to search within.\n@param recordingId    for the active recording.\n@return the counter id if found otherwise {@link CountersReader#NULL_COUNTER_ID}.", "predict": "Finds the counter id for the given recording id.\n\n@param countersReader the counter reader\n@param recordingId the id of the recording\n@return the counter id"}
{"ID": 1926, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int findCounterIdBySession(final CountersReader countersReader, final int sessionId) { final DirectBuffer buffer = countersReader.metaDataBuffer(); for (int i = 0, size = countersReader.maxCounterId(); i < size; i++) { if (countersReader.getCounterState(i) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(i); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECORDING_POSITION_TYPE_ID && buffer.getInt(recordOffset + KEY_OFFSET + SESSION_ID_OFFSET) == sessionId) { return i; } } } return NULL_COUNTER_ID; } \n### Response:", "ground_truth": "Find the active counter id for a stream based on the session id.\n\n@param countersReader to search within.\n@param sessionId      for the active recording.\n@return the counter id if found otherwise {@link CountersReader#NULL_COUNTER_ID}.", "predict": "Finds the counter id for the given session.\n\n@param countersReader the counter reader\n@param sessionId the session id\n@return the counter id"}
{"ID": 1927, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long getRecordingId(final CountersReader countersReader, final int counterId) { final DirectBuffer buffer = countersReader.metaDataBuffer(); if (countersReader.getCounterState(counterId) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(counterId); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECORDING_POSITION_TYPE_ID) { return buffer.getLong(recordOffset + KEY_OFFSET + RECORDING_ID_OFFSET); } } return NULL_RECORDING_ID; } \n### Response:", "ground_truth": "Get the recording id for a given counter id.\n\n@param countersReader to search within.\n@param counterId      for the active recording.\n@return the counter id if found otherwise {@link #NULL_RECORDING_ID}.", "predict": "Get recording id from counter.\n\n@param countersReader counter reader\n@param counterId counter id\n@return recording id"}
{"ID": 1928, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isActive(final CountersReader countersReader, final int counterId, final long recordingId) { final DirectBuffer buffer = countersReader.metaDataBuffer(); if (countersReader.getCounterState(counterId) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(counterId); return buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECORDING_POSITION_TYPE_ID && buffer.getLong(recordOffset + KEY_OFFSET + RECORDING_ID_OFFSET) == recordingId; } return false; } \n### Response:", "ground_truth": "Is the recording counter still active.\n\n@param countersReader to search within.\n@param counterId      to search for.\n@param recordingId    to confirm it is still the same value.\n@return true if the counter is still active otherwise false.", "predict": "Checks if the given counter is currently active.\n\n@param countersReader the counter reader\n@param counterId the counter id\n@param recordingId the recording id\n@return true if the counter is currently active, false otherwise"}
{"ID": 1929, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public StatusMessageFlyweight applicationSpecificFeedback(final byte[] source, final int offset, final int length) { frameLength(HEADER_LENGTH + length); putBytes(APP_SPECIFIC_FEEDBACK_FIELD_OFFSET, source, offset, length); return this; } \n### Response:", "ground_truth": "Set the Application Specific Feedback for the Status Message.\n\n@param source of the feedback to set\n@param offset of the feedback in the source\n@param length of the feedback in bytes\n@return flyweight", "predict": "Adds application-specific feedback to the message.\n\n@param source the source of the feedback\n@param offset the offset of the feedback\n@param length the length of the feedback\n@return this status message"}
{"ID": 1930, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void reload() { entries.clear(); indexByLeadershipTermIdMap.clear(); indexByLeadershipTermIdMap.compact(); nextEntryIndex = 0; byteBuffer.clear(); try { while (true) { final int bytes = fileChannel.read(byteBuffer); if (byteBuffer.remaining() == 0) { byteBuffer.flip(); captureEntriesFromBuffer(byteBuffer, buffer, entries); byteBuffer.clear(); } if (-1 == bytes) { if (byteBuffer.position() > 0) { byteBuffer.flip(); captureEntriesFromBuffer(byteBuffer, buffer, entries); byteBuffer.clear(); } break; } } } catch (final IOException ex) { LangUtil.rethrowUnchecked(ex); } } \n### Response:", "ground_truth": "Reload the log from disk.", "predict": "Reloads the data from the file."}
{"ID": 1931, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Entry findLastTerm() { for (int i = entries.size() - 1; i >= 0; i--) { final Entry entry = entries.get(i); if (ENTRY_TYPE_TERM == entry.type) { return entry; } } return null; } \n### Response:", "ground_truth": "Find the last leadership term in the recording log.\n\n@return the last leadership term in the recording log.", "predict": "Finds the last entry with the specified type.\n\n@return the last entry with the specified type or null if none found"}
{"ID": 1932, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public RecoveryPlan createRecoveryPlan(final AeronArchive archive, final int serviceCount) { final ArrayList<Snapshot> snapshots = new ArrayList<>(); final ArrayList<Log> logs = new ArrayList<>(); planRecovery(snapshots, logs, entries, archive, serviceCount); long lastLeadershipTermId = NULL_VALUE; long lastTermBaseLogPosition = 0; long committedLogPosition = -1; long appendedLogPosition = 0; final int snapshotStepsSize = snapshots.size(); if (snapshotStepsSize > 0) { final Snapshot snapshot = snapshots.get(0); lastLeadershipTermId = snapshot.leadershipTermId; lastTermBaseLogPosition = snapshot.termBaseLogPosition; appendedLogPosition = snapshot.logPosition; committedLogPosition = snapshot.logPosition; } if (!logs.isEmpty()) { final Log log = logs.get(0); lastLeadershipTermId = log.leadershipTermId; lastTermBaseLogPosition = log.termBaseLogPosition; appendedLogPosition = log.stopPosition; committedLogPosition = log.logPosition; } return new RecoveryPlan( lastLeadershipTermId, lastTermBaseLogPosition, appendedLogPosition, committedLogPosition, snapshots, logs); } \n### Response:", "ground_truth": "Create a recovery plan for the cluster that when the steps are replayed will bring the cluster back to the\nlatest stable state.\n\n@param archive      to lookup recording descriptors.\n@param serviceCount of services that may have snapshots.\n@return a new {@link RecoveryPlan} for the cluster.", "predict": "Creates a recovery plan for the given archive and service count.\n\n@param archive the archive to recover from\n@param serviceCount the number of services to recover from\n@return the recovery plan"}
{"ID": 1933, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static RecoveryPlan createRecoveryPlan(final ArrayList<RecordingLog.Snapshot> snapshots) { long lastLeadershipTermId = NULL_VALUE; long lastTermBaseLogPosition = 0; long committedLogPosition = -1; long appendedLogPosition = 0; final int snapshotStepsSize = snapshots.size(); if (snapshotStepsSize > 0) { final Snapshot snapshot = snapshots.get(0); lastLeadershipTermId = snapshot.leadershipTermId; lastTermBaseLogPosition = snapshot.termBaseLogPosition; appendedLogPosition = snapshot.logPosition; committedLogPosition = snapshot.logPosition; } return new RecoveryPlan( lastLeadershipTermId, lastTermBaseLogPosition, appendedLogPosition, committedLogPosition, snapshots, new ArrayList<>()); } \n### Response:", "ground_truth": "Create a recovery plan that has only snapshots. Used for dynamicJoin snapshot load.\n\n@param snapshots to construct plan from\n@return a new {@link RecoveryPlan} for the cluster", "predict": "Creates a recovery plan for the given snapshots.\n\n@param snapshots the snapshots to use for the recovery plan\n@return the recovery plan"}
{"ID": 1934, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void appendTerm( final long recordingId, final long leadershipTermId, final long termBaseLogPosition, final long timestamp) { final int size = entries.size(); if (size > 0) { final Entry lastEntry = entries.get(size - 1); if (lastEntry.type != NULL_VALUE && lastEntry.leadershipTermId >= leadershipTermId) { throw new ClusterException(\"leadershipTermId out of sequence: previous \" + lastEntry.leadershipTermId + \" this \" + leadershipTermId); } } indexByLeadershipTermIdMap.put(leadershipTermId, nextEntryIndex); append( ENTRY_TYPE_TERM, recordingId, leadershipTermId, termBaseLogPosition, NULL_POSITION, timestamp, NULL_VALUE); } \n### Response:", "ground_truth": "Append a log entry for a leadership term.\n\n@param recordingId         of the log.\n@param leadershipTermId    for the current term.\n@param termBaseLogPosition reached at the beginning of the term.\n@param timestamp           at the beginning of the term.", "predict": "Appends a term to the end of the log.\n\n@param recordingId\nthe id of the recording\n@param leadershipTermId\nthe id of the term\n@param termBaseLogPosition\nthe position of the term in the term base log\n@param timestamp\nthe timestamp of the term"}
{"ID": 1935, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void appendSnapshot( final long recordingId, final long leadershipTermId, final long termBaseLogPosition, final long logPosition, final long timestamp, final int serviceId) { final int size = entries.size(); if (size > 0) { final Entry entry = entries.get(size - 1); if (entry.type == ENTRY_TYPE_TERM && entry.leadershipTermId != leadershipTermId) { throw new ClusterException(\"leadershipTermId out of sequence: previous \" + entry.leadershipTermId + \" this \" + leadershipTermId); } } append( ENTRY_TYPE_SNAPSHOT, recordingId, leadershipTermId, termBaseLogPosition, logPosition, timestamp, serviceId); } \n### Response:", "ground_truth": "Append a log entry for a snapshot.\n\n@param recordingId         in the archive for the snapshot.\n@param leadershipTermId    for the current term\n@param termBaseLogPosition at the beginning of the leadership term.\n@param logPosition         for the position in the current term or length so far for that term.\n@param timestamp           at which the snapshot was taken.\n@param serviceId           for which the snapshot is recorded.", "predict": "Append a snapshot entry to the log.\n\n@param recordingId the ID of the recording\n@param leadershipTermId the ID of the leader term\n@param termBaseLogPosition the position of the term in the term log\n@param logPosition the position of the log entry\n@param timestamp the timestamp of the entry\n@param serviceId the ID of the service that created the entry"}
{"ID": 1936, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void commitLogPosition(final long leadershipTermId, final long logPosition) { final int index = getLeadershipTermEntryIndex(leadershipTermId); commitEntryValue(index, logPosition, LOG_POSITION_OFFSET); final Entry entry = entries.get(index); entries.set(index, new Entry( entry.recordingId, entry.leadershipTermId, entry.termBaseLogPosition, logPosition, entry.timestamp, entry.serviceId, entry.type, entry.entryIndex)); } \n### Response:", "ground_truth": "Commit the position reached in a leadership term before a clean shutdown.\n\n@param leadershipTermId for committing the term position reached.\n@param logPosition      reached in the leadership term.", "predict": "Commits the log position to the index.\n\n@param leadershipTermId the leadership term id\n@param logPosition the log position"}
{"ID": 1937, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void tombstoneEntry(final long leadershipTermId, final int entryIndex) { int index = -1; for (int i = 0, size = entries.size(); i < size; i++) { final Entry entry = entries.get(i); if (entry.leadershipTermId == leadershipTermId && entry.entryIndex == entryIndex) { index = entry.entryIndex; if (ENTRY_TYPE_TERM == entry.type) { indexByLeadershipTermIdMap.remove(leadershipTermId); } break; } } if (-1 == index) { throw new ClusterException(\"unknown entry index: \" + entryIndex); } buffer.putInt(0, NULL_VALUE, LITTLE_ENDIAN); byteBuffer.limit(SIZE_OF_INT).position(0); final long filePosition = (index * (long)ENTRY_LENGTH) + ENTRY_TYPE_OFFSET; try { if (SIZE_OF_INT != fileChannel.write(byteBuffer, filePosition)) { throw new ClusterException(\"failed to write field atomically\"); } } catch (final Exception ex) { LangUtil.rethrowUnchecked(ex); } } \n### Response:", "ground_truth": "Tombstone an entry in the log so it is no longer valid.\n\n@param leadershipTermId to match for validation.\n@param entryIndex       reached in the leadership term.", "predict": "Writes a tombstone entry to the file.\n\n@param leadershipTermId the id of the leadership term\n@param entryIndex the index of the entry to write"}
{"ID": 1938, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void close() { if (null != publication && publication.isConnected()) { closeSession(); } if (!ctx.ownsAeronClient()) { CloseHelper.close(subscription); CloseHelper.close(publication); } ctx.close(); } \n### Response:", "ground_truth": "Close session and release associated resources.", "predict": "Closes the connection to the Aeron server."}
{"ID": 1939, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public long offer(final DirectBufferVector[] vectors) { if (headerVector != vectors[0]) { vectors[0] = headerVector; } return publication.offer(vectors, null); } \n### Response:", "ground_truth": "Non-blocking publish by gathering buffer vectors into a message. The first vector will be replaced by the cluster\ningress header so must be left unused.\n\n@param vectors which make up the message.\n@return the same as {@link Publication#offer(DirectBufferVector[])}.\n@see Publication#offer(DirectBufferVector[])", "predict": "Adds the given vectors to the publication.\n\n@param vectors the vectors to add\n@return the number of added vectors"}
{"ID": 1940, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean unblock( final UnsafeBuffer[] termBuffers, final UnsafeBuffer logMetaDataBuffer, final long blockedPosition, final int termLength) { final int positionBitsToShift = LogBufferDescriptor.positionBitsToShift(termLength); final int blockedTermCount = (int)(blockedPosition >> positionBitsToShift); final int blockedOffset = (int)blockedPosition & (termLength - 1); final int activeTermCount = activeTermCount(logMetaDataBuffer); if (activeTermCount == (blockedTermCount - 1) && blockedOffset == 0) { final int currentTermId = termId(rawTailVolatile(logMetaDataBuffer, indexByTermCount(activeTermCount))); return rotateLog(logMetaDataBuffer, activeTermCount, currentTermId); } final int blockedIndex = indexByTermCount(blockedTermCount); final long rawTail = rawTailVolatile(logMetaDataBuffer, blockedIndex); final int termId = termId(rawTail); final int tailOffset = termOffset(rawTail, termLength); final UnsafeBuffer termBuffer = termBuffers[blockedIndex]; switch (TermUnblocker.unblock(logMetaDataBuffer, termBuffer, blockedOffset, tailOffset, termId)) { case UNBLOCKED_TO_END: rotateLog(logMetaDataBuffer, blockedTermCount, termId); // fall through case UNBLOCKED: return true; } return false; } \n### Response:", "ground_truth": "Attempt to unblock a log buffer at given position\n\n@param termBuffers       for current blockedOffset\n@param logMetaDataBuffer for log buffer\n@param blockedPosition   to attempt to unblock\n@param termLength        of the buffer for each term in the log\n@return whether unblocked or not", "predict": "Unblocks a log entry.\n\n@param termBuffers\n@param logMetaDataBuffer\n@param blockedPosition\n@param termLength\n@return"}
{"ID": 1941, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String channel() { final int length = buffer.getInt(offset + CHANNEL_OFFSET); lengthOfChannel = SIZE_OF_INT + length; return buffer.getStringAscii(offset + CHANNEL_OFFSET, length); } \n### Response:", "ground_truth": "Get the channel field as ASCII\n\n@return channel field", "predict": "Returns the channel name.\n\n@return the channel name"}
{"ID": 1942, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ImageMessageFlyweight channel(final String channel) { lengthOfChannel = buffer.putStringAscii(offset + CHANNEL_OFFSET, channel); return this; } \n### Response:", "ground_truth": "Set the channel field as ASCII\n\n@param channel field value\n@return flyweight", "predict": "Sets the channel of the image.\n\n@param channel the channel of the image\n@return the image message"}
{"ID": 1943, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void checkTermLength(final int termLength) { if (termLength < TERM_MIN_LENGTH) { throw new IllegalStateException( \"Term length less than min length of \" + TERM_MIN_LENGTH + \": length=\" + termLength); } if (termLength > TERM_MAX_LENGTH) { throw new IllegalStateException( \"Term length more than max length of \" + TERM_MAX_LENGTH + \": length=\" + termLength); } if (!BitUtil.isPowerOfTwo(termLength)) { throw new IllegalStateException(\"Term length not a power of 2: length=\" + termLength); } } \n### Response:", "ground_truth": "Check that term length is valid and alignment is valid.\n\n@param termLength to be checked.\n@throws IllegalStateException if the length is not as expected.", "predict": "Checks if the given term length is within the allowed range.\n\n@param termLength the term length to check"}
{"ID": 1944, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void checkPageSize(final int pageSize) { if (pageSize < PAGE_MIN_SIZE) { throw new IllegalStateException( \"Page size less than min size of \" + PAGE_MIN_SIZE + \": page size=\" + pageSize); } if (pageSize > PAGE_MAX_SIZE) { throw new IllegalStateException( \"Page size more than max size of \" + PAGE_MAX_SIZE + \": page size=\" + pageSize); } if (!BitUtil.isPowerOfTwo(pageSize)) { throw new IllegalStateException(\"Page size not a power of 2: page size=\" + pageSize); } } \n### Response:", "ground_truth": "Check that page size is valid and alignment is valid.\n\n@param pageSize to be checked.\n@throws IllegalStateException if the size is not as expected.", "predict": "Checks that the page size is a power of 2.\n\n@param pageSize the page size"}
{"ID": 1945, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean casActiveTermCount( final UnsafeBuffer metadataBuffer, final int expectedTermCount, final int updateTermCount) { return metadataBuffer.compareAndSetInt(LOG_ACTIVE_TERM_COUNT_OFFSET, expectedTermCount, updateTermCount); } \n### Response:", "ground_truth": "Compare and set the value of the current active term count.\n\n@param metadataBuffer    containing the meta data.\n@param expectedTermCount value of the active term count expected in the log\n@param updateTermCount   value of the active term count to be updated in the log\n@return true if successful otherwise false.", "predict": "Compares the current term count with the expected term count.\n\n@param metadataBuffer the metadata buffer\n@param expectedTermCount the expected term count\n@param updateTermCount the expected term count\n@return true if the current term count is equal to the expected term count"}
{"ID": 1946, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long computePosition( final int activeTermId, final int termOffset, final int positionBitsToShift, final int initialTermId) { final long termCount = activeTermId - initialTermId; // copes with negative activeTermId on rollover return (termCount << positionBitsToShift) + termOffset; } \n### Response:", "ground_truth": "Compute the current position in absolute number of bytes.\n\n@param activeTermId        active term id.\n@param termOffset          in the term.\n@param positionBitsToShift number of times to left shift the term count\n@param initialTermId       the initial term id that this stream started on\n@return the absolute position in bytes", "predict": "Computes the position of a term.\n\n@param activeTermId the term id of the term to compute the position of\n@param termOffset the offset of the term to compute the position of\n@param positionBitsToShift the number of bits to shift the position\n@param initialTermId the id of the term whose position is to be computed\n@return the position of the term"}
{"ID": 1947, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long computeLogLength(final int termLength, final int filePageSize) { if (termLength < (1024 * 1024 * 1024)) { return align((termLength * PARTITION_COUNT) + LOG_META_DATA_LENGTH, filePageSize); } return (PARTITION_COUNT * (long)termLength) + align(LOG_META_DATA_LENGTH, filePageSize); } \n### Response:", "ground_truth": "Compute the total length of a log file given the term length.\n\nAssumes {@link #TERM_MAX_LENGTH} is 1GB and that filePageSize is 1GB or less and a power of 2.\n\n@param termLength   on which to base the calculation.\n@param filePageSize to use for log.\n@return the total length of the log file.", "predict": "Computes the length of the log.\n\n@param termLength the length of the log\n@param filePageSize the size of the file\n@return the length of the log"}
{"ID": 1948, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void storeDefaultFrameHeader(final UnsafeBuffer metadataBuffer, final DirectBuffer defaultHeader) { if (defaultHeader.capacity() != HEADER_LENGTH) { throw new IllegalArgumentException( \"Default header length not equal to HEADER_LENGTH: length=\" + defaultHeader.capacity()); } metadataBuffer.putInt(LOG_DEFAULT_FRAME_HEADER_LENGTH_OFFSET, HEADER_LENGTH); metadataBuffer.putBytes(LOG_DEFAULT_FRAME_HEADER_OFFSET, defaultHeader, 0, HEADER_LENGTH); } \n### Response:", "ground_truth": "Store the default frame header to the log meta data buffer.\n\n@param metadataBuffer into which the default headers should be stored.\n@param defaultHeader  to be stored.\n@throws IllegalArgumentException if the defaultHeader larger than {@link #LOG_DEFAULT_FRAME_HEADER_MAX_LENGTH}", "predict": "Store the default frame header.\n\n@param metadataBuffer the metadata buffer\n@param defaultHeader the default header"}
{"ID": 1949, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void applyDefaultHeader( final UnsafeBuffer metadataBuffer, final UnsafeBuffer termBuffer, final int termOffset) { termBuffer.putBytes(termOffset, metadataBuffer, LOG_DEFAULT_FRAME_HEADER_OFFSET, HEADER_LENGTH); } \n### Response:", "ground_truth": "Apply the default header for a message in a term.\n\n@param metadataBuffer containing the default headers.\n@param termBuffer     to which the default header should be applied.\n@param termOffset     at which the default should be applied.", "predict": "Applies the default header to the given term buffer.\n\n@param metadataBuffer\nthe metadata buffer\n@param termBuffer\nthe term buffer\n@param termOffset\nthe term offset"}
{"ID": 1950, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean rotateLog(final UnsafeBuffer metadataBuffer, final int termCount, final int termId) { final int nextTermId = termId + 1; final int nextTermCount = termCount + 1; final int nextIndex = indexByTermCount(nextTermCount); final int expectedTermId = nextTermId - PARTITION_COUNT; long rawTail; do { rawTail = rawTail(metadataBuffer, nextIndex); if (expectedTermId != termId(rawTail)) { break; } } while (!casRawTail(metadataBuffer, nextIndex, rawTail, packTail(nextTermId, 0))); return casActiveTermCount(metadataBuffer, termCount, nextTermCount); } \n### Response:", "ground_truth": "Rotate the log and update the tail counter for the new term.\n\nThis method is safe for concurrent use.\n\n@param metadataBuffer for the log.\n@param termCount      from which to rotate.\n@param termId         to be used in the default headers.\n@return true if log was rotated.", "predict": "Rotates the log by the specified term count.\n\n@param metadataBuffer the buffer to be used for the log\n@param termCount the number of terms to rotate\n@param termId the id of the term to rotate\n@return true if the log was rotated"}
{"ID": 1951, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void initialiseTailWithTermId( final UnsafeBuffer metadataBuffer, final int partitionIndex, final int termId) { metadataBuffer.putLong(TERM_TAIL_COUNTERS_OFFSET + (partitionIndex * SIZE_OF_LONG), packTail(termId, 0)); } \n### Response:", "ground_truth": "Set the initial value for the termId in the upper bits of the tail counter.\n\n@param metadataBuffer contain the tail counter.\n@param partitionIndex to be initialised.\n@param termId         to be set.", "predict": "Helper method to pack the tail of the given term into the given metadata buffer.\n\n@param metadataBuffer the metadata buffer to store the tail of the given term into\n@param partitionIndex the partition index of the term\n@param termId the id of the term"}
{"ID": 1952, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int termOffset(final long rawTail, final long termLength) { final long tail = rawTail & 0xFFFF_FFFFL; return (int)Math.min(tail, termLength); } \n### Response:", "ground_truth": "Read the termOffset from a packed raw tail value.\n\n@param rawTail    containing the termOffset.\n@param termLength that the offset cannot exceed.\n@return the termOffset value.", "predict": "Returns the minimum number of bytes required to fill the tail of a term.\n\n@param rawTail the raw tail of the term\n@param termLength the length of the term\n@return the minimum number of bytes required to fill the tail of the term"}
{"ID": 1953, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long rawTailVolatile(final UnsafeBuffer metadataBuffer) { final int partitionIndex = indexByTermCount(activeTermCount(metadataBuffer)); return metadataBuffer.getLongVolatile(TERM_TAIL_COUNTERS_OFFSET + (SIZE_OF_LONG * partitionIndex)); } \n### Response:", "ground_truth": "Get the raw value of the tail for the current active partition.\n\n@param metadataBuffer containing the tail counters.\n@return the raw value of the tail for the current active partition.", "predict": "Returns the tail of the metadata buffer.\n\n@param metadataBuffer the metadata buffer\n@return the tail of the metadata buffer"}
{"ID": 1954, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean casRawTail( final UnsafeBuffer metadataBuffer, final int partitionIndex, final long expectedRawTail, final long updateRawTail) { final int index = TERM_TAIL_COUNTERS_OFFSET + (SIZE_OF_LONG * partitionIndex); return metadataBuffer.compareAndSetLong(index, expectedRawTail, updateRawTail); } \n### Response:", "ground_truth": "Compare and set the raw value of the tail for the given partition.\n\n@param metadataBuffer  containing the tail counters.\n@param partitionIndex  for the tail counter.\n@param expectedRawTail expected current value.\n@param updateRawTail   to be applied.\n@return true if the update was successful otherwise false.", "predict": "Compares the given metadata buffer with the expected metadata buffer.\n\n@param metadataBuffer\n@param partitionIndex\n@param expectedRawTail\n@param updateRawTail\n@return true if the given metadata buffer is equal to the expected metadata buffer, false otherwise"}
{"ID": 1955, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public TerminateDriverFlyweight tokenBuffer( final DirectBuffer tokenBuffer, final int tokenOffset, final int tokenLength) { buffer.putInt(TOKEN_LENGTH_OFFSET, tokenLength); if (null != tokenBuffer && tokenLength > 0) { buffer.putBytes(tokenBufferOffset(), tokenBuffer, tokenOffset, tokenLength); } return this; } \n### Response:", "ground_truth": "Fill the token buffer.\n\n@param tokenBuffer containing the optional token for the request.\n@param tokenOffset within the tokenBuffer at which the token begins.\n@param tokenLength of the token in the tokenBuffer.\n@return flyweight", "predict": "Terminate the driver's token buffer.\n\n@param tokenBuffer the token buffer to terminate.\n@param tokenOffset the offset into the token buffer to start reading from.\n@param tokenLength the length of the token buffer to terminate.\n@return the driver instance."}
{"ID": 1956, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Counter allocate( final Aeron aeron, final MutableDirectBuffer tempBuffer, final long leadershipTermId, final long logPosition, final long timestamp, final boolean hasReplay, final long... snapshotRecordingIds) { tempBuffer.putLong(LEADERSHIP_TERM_ID_OFFSET, leadershipTermId); tempBuffer.putLong(LOG_POSITION_OFFSET, logPosition); tempBuffer.putLong(TIMESTAMP_OFFSET, timestamp); tempBuffer.putInt(REPLAY_FLAG_OFFSET, hasReplay ? 1 : 0); final int serviceCount = snapshotRecordingIds.length; tempBuffer.putInt(SERVICE_COUNT_OFFSET, serviceCount); final int keyLength = SNAPSHOT_RECORDING_IDS_OFFSET + (serviceCount * SIZE_OF_LONG); if (keyLength > MAX_KEY_LENGTH) { throw new ClusterException(keyLength + \" exceeds max key length \" + MAX_KEY_LENGTH); } for (int i = 0; i < serviceCount; i++) { tempBuffer.putLong(SNAPSHOT_RECORDING_IDS_OFFSET + (i * SIZE_OF_LONG), snapshotRecordingIds[i]); } final int labelOffset = BitUtil.align(keyLength, SIZE_OF_INT); int labelLength = 0; labelLength += tempBuffer.putStringWithoutLengthAscii(labelOffset + labelLength, NAME); labelLength += tempBuffer.putLongAscii(keyLength + labelLength, leadershipTermId); labelLength += tempBuffer.putStringWithoutLengthAscii(labelOffset + labelLength, \" logPosition=\"); labelLength += tempBuffer.putLongAscii(labelOffset + labelLength, logPosition); labelLength += tempBuffer.putStringWithoutLengthAscii(labelOffset + labelLength, \" hasReplay=\" + hasReplay); return aeron.addCounter(RECOVERY_STATE_TYPE_ID, tempBuffer, 0, keyLength, tempBuffer, labelOffset, labelLength); } \n### Response:", "ground_truth": "Allocate a counter to represent the snapshot services should load on start.\n\n@param aeron                to allocate the counter.\n@param tempBuffer           to use for building the key and label without allocation.\n@param leadershipTermId     at which the snapshot was taken.\n@param logPosition          at which the snapshot was taken.\n@param timestamp            the snapshot was taken.\n@param hasReplay            flag is true if all or part of the log must be replayed.\n@param snapshotRecordingIds for the services to use during recovery indexed by service id.\n@return the {@link Counter} for the recovery state.", "predict": "Allocates a new counter to the given aeron.\n\n@param aeron the aeron to allocate to\n@param tempBuffer the buffer to allocate to\n@param leadershipTermId the id of the leader term\n@param logPosition the position of the log\n@param timestamp the timestamp of the log\n@param hasReplay the flag indicating whether the replay flag is set\n@param snapshotRecordingIds the snapshot recording ids\n@return the new counter"}
{"ID": 1957, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int findCounterId(final CountersReader counters) { final DirectBuffer buffer = counters.metaDataBuffer(); for (int i = 0, size = counters.maxCounterId(); i < size; i++) { if (counters.getCounterState(i) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(i); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECOVERY_STATE_TYPE_ID) { return i; } } } return NULL_COUNTER_ID; } \n### Response:", "ground_truth": "Find the active counter id for recovery state.\n\n@param counters to search within.\n@return the counter id if found otherwise {@link CountersReader#NULL_COUNTER_ID}.", "predict": "Finds the ID of the counter that is currently being recorded.\n\n@param counters The counter to search for.\n@return The ID of the counter, or NULL if it is not found."}
{"ID": 1958, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean hasReplay(final CountersReader counters, final int counterId) { final DirectBuffer buffer = counters.metaDataBuffer(); if (counters.getCounterState(counterId) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(counterId); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECOVERY_STATE_TYPE_ID) { return buffer.getInt(recordOffset + KEY_OFFSET + REPLAY_FLAG_OFFSET) == 1; } } return false; } \n### Response:", "ground_truth": "Has the recovery process got a log to replay?\n\n@param counters  to search within.\n@param counterId for the active recovery counter.\n@return true if a replay is required.", "predict": "Checks if the given counter is a replay counter.\n\n@param counters the counter to check\n@param counterId the counter to check\n@return true if the counter is a replay counter, false otherwise"}
{"ID": 1959, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long getSnapshotRecordingId(final CountersReader counters, final int counterId, final int serviceId) { final DirectBuffer buffer = counters.metaDataBuffer(); if (counters.getCounterState(counterId) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(counterId); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECOVERY_STATE_TYPE_ID) { final int serviceCount = buffer.getInt(recordOffset + KEY_OFFSET + SERVICE_COUNT_OFFSET); if (serviceId < 0 || serviceId >= serviceCount) { throw new ClusterException(\"invalid serviceId \" + serviceId + \" for count of \" + serviceCount); } return buffer.getLong( recordOffset + KEY_OFFSET + SNAPSHOT_RECORDING_IDS_OFFSET + (serviceId * SIZE_OF_LONG)); } } throw new ClusterException(\"Active counter not found \" + counterId); } \n### Response:", "ground_truth": "Get the recording id of the snapshot for a service.\n\n@param counters  to search within.\n@param counterId for the active recovery counter.\n@param serviceId for the snapshot required.\n@return the count of replay terms if found otherwise {@link Aeron#NULL_VALUE}.", "predict": "Get the ID of the recording for the given counter.\n\n@param counters\n@param counterId\n@param serviceId\n@return"}
{"ID": 1960, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static char[] flagsToChars(final short flags) { final char[] chars = new char[]{ '0', '0', '0', '0', '0', '0', '0', '0' }; final int length = chars.length; short mask = (short)(1 << (length - 1)); for (int i = 0; i < length; i++) { if ((flags & mask) == mask) { chars[i] = '1'; } mask >>= 1; } return chars; } \n### Response:", "ground_truth": "Convert header flags to an array of chars to be human readable.\n\n@param flags to be converted.\n@return header flags converted to an array of chars to be human readable.", "predict": "Converts a short flag into a char array.\n\n@param flags the short flags\n@return the char array"}
{"ID": 1961, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public PublicationMessageFlyweight channel(final String channel) { lengthOfChannel = buffer.putStringAscii(offset + CHANNEL_OFFSET, channel); return this; } \n### Response:", "ground_truth": "Set the channel field in ASCII\n\n@param channel field value\n@return flyweight", "predict": "Sets the channel for the publication message.\n\n@param channel the channel name\n@return the PublicationMessageFlyweight"}
{"ID": 1962, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public long offer(final DirectBuffer buffer, final int offset, final int length) { return cluster.offer(id, responsePublication, buffer, offset, length); } \n### Response:", "ground_truth": "Non-blocking publish of a partial buffer containing a message to a cluster.\n\n@param buffer containing message.\n@param offset offset in the buffer at which the encoded message begins.\n@param length in bytes of the encoded message.\n@return the same as {@link Publication#offer(DirectBuffer, int, int)} when in {@link Cluster.Role#LEADER}\notherwise {@link #MOCKED_OFFER}.", "predict": "Offer a buffer to the cluster.\n\n@param buffer the buffer to offer\n@param offset the offset to start reading from\n@param length the length of the buffer\n@return the number of bytes offered"}
{"ID": 1963, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public final void wrap(final AtomicBuffer buffer, final int offset, final int length) { this.buffer.wrap(buffer, offset, length); } \n### Response:", "ground_truth": "Wrap a region of an underlying log buffer so can can represent a claimed space for use by a publisher.\n\n@param buffer to be wrapped.\n@param offset at which the claimed region begins including space for the header.\n@param length length of the underlying claimed region including space for the header.", "predict": "Wraps the given buffer.\n\n@param buffer the buffer to wrap\n@param offset the offset of the buffer to wrap\n@param length the length of the buffer to wrap"}
{"ID": 1964, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public final void commit() { int frameLength = buffer.capacity(); if (ByteOrder.nativeOrder() != LITTLE_ENDIAN) { frameLength = Integer.reverseBytes(frameLength); } buffer.putIntOrdered(FRAME_LENGTH_FIELD_OFFSET, frameLength); } \n### Response:", "ground_truth": "Commit the message to the log buffer so that is it available to subscribers.", "predict": "Commit the frame length."}
{"ID": 1965, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public final void abort() { int frameLength = buffer.capacity(); if (ByteOrder.nativeOrder() != LITTLE_ENDIAN) { frameLength = Integer.reverseBytes(frameLength); } buffer.putShort(TYPE_FIELD_OFFSET, (short)HDR_TYPE_PAD, LITTLE_ENDIAN); buffer.putIntOrdered(FRAME_LENGTH_FIELD_OFFSET, frameLength); } \n### Response:", "ground_truth": "Abort a claim of the message space to the log buffer so that the log can progress by ignoring this claim.", "predict": "Aborts the frame."}
{"ID": 1966, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void main(final String[] args) { loadPropertiesFiles(args); final ShutdownSignalBarrier barrier = new ShutdownSignalBarrier(); final MediaDriver.Context ctx = new MediaDriver.Context(); ctx.terminationHook(barrier::signal); try (MediaDriver ignore = MediaDriver.launch(ctx)) { barrier.await(); System.out.println(\"Shutdown Driver...\"); } } \n### Response:", "ground_truth": "Start Media Driver as a stand-alone process.\n\n@param args command line arguments", "predict": "Main method to start the driver.\n\n@param args command line arguments"}
{"ID": 1967, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void close() { CloseHelper.close(sharedRunner); CloseHelper.close(sharedNetworkRunner); CloseHelper.close(receiverRunner); CloseHelper.close(senderRunner); CloseHelper.close(conductorRunner); CloseHelper.close(sharedInvoker); if (ctx.useWindowsHighResTimer() && SystemUtil.osName().startsWith(\"win\")) { if (!wasHighResTimerEnabled) { HighResolutionTimer.disable(); } } } \n### Response:", "ground_truth": "Shutdown the media driver by stopping all threads and freeing resources.", "predict": "Closes the shared Runner, sender, receiver, sender network runner, and\nsender network runner."}
{"ID": 1968, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public final long position() { final int resultingOffset = BitUtil.align(termOffset() + frameLength(), FRAME_ALIGNMENT); return computePosition(termId(), resultingOffset, positionBitsToShift, initialTermId); } \n### Response:", "ground_truth": "Get the current position to which the image has advanced on reading this message.\n\n@return the current position to which the image has advanced on reading this message.", "predict": "Returns the position of this term in the document.\n\n@return the position of this term in the document"}
{"ID": 1969, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Counter allocate( final Aeron aeron, final MutableDirectBuffer tempBuffer, final int serviceId) { tempBuffer.putInt(SERVICE_ID_OFFSET, serviceId); final int labelOffset = BitUtil.align(KEY_LENGTH, SIZE_OF_INT); int labelLength = 0; labelLength += tempBuffer.putStringWithoutLengthAscii(labelOffset + labelLength, NAME); labelLength += tempBuffer.putIntAscii(labelOffset + labelLength, serviceId); return aeron.addCounter( SERVICE_HEARTBEAT_TYPE_ID, tempBuffer, 0, KEY_LENGTH, tempBuffer, labelOffset, labelLength); } \n### Response:", "ground_truth": "Allocate a counter to represent the heartbeat of a clustered service.\n\n@param aeron           to allocate the counter.\n@param tempBuffer      to use for building the key and label without allocation.\n@param serviceId       of the service heartbeat.\n@return the {@link Counter} for the commit position.", "predict": "Allocates a counter to be used by the Aeron API.\n\n@param aeron\n@param tempBuffer\n@param serviceId\n@return"}
{"ID": 1970, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int findCounterId(final CountersReader counters, final int serviceId) { final DirectBuffer buffer = counters.metaDataBuffer(); for (int i = 0, size = counters.maxCounterId(); i < size; i++) { if (counters.getCounterState(i) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(i); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == SERVICE_HEARTBEAT_TYPE_ID && buffer.getInt(recordOffset + KEY_OFFSET + SERVICE_ID_OFFSET) == serviceId) { return i; } } } return NULL_COUNTER_ID; } \n### Response:", "ground_truth": "Find the active counter id for heartbeat of a given service id.\n\n@param counters  to search within.\n@param serviceId to search for.\n@return the counter id if found otherwise {@link CountersReader#NULL_COUNTER_ID}.", "predict": "Find the counter id for the given service id.\n\n@param counters the counters reader\n@param serviceId the service id\n@return the counter id"}
{"ID": 1971, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Map<StreamCompositeKey, StreamBacklog> snapshot() { final Map<StreamCompositeKey, StreamBacklog> streams = new HashMap<>(); counters.forEach( (counterId, typeId, keyBuffer, label) -> { if ((typeId >= PUBLISHER_LIMIT_TYPE_ID && typeId <= RECEIVER_POS_TYPE_ID) || typeId == SENDER_LIMIT_TYPE_ID || typeId == PER_IMAGE_TYPE_ID || typeId == PUBLISHER_POS_TYPE_ID) { final StreamCompositeKey key = new StreamCompositeKey( keyBuffer.getInt(SESSION_ID_OFFSET), keyBuffer.getInt(STREAM_ID_OFFSET), keyBuffer.getStringAscii(CHANNEL_OFFSET)); final StreamBacklog streamBacklog = streams.computeIfAbsent(key, (ignore) -> new StreamBacklog()); final long registrationId = keyBuffer.getLong(REGISTRATION_ID_OFFSET); final long value = counters.getCounterValue(counterId); switch (typeId) { case PublisherLimit.PUBLISHER_LIMIT_TYPE_ID: streamBacklog.createPublisherIfAbsent().registrationId(registrationId); streamBacklog.createPublisherIfAbsent().limit(value); break; case PublisherPos.PUBLISHER_POS_TYPE_ID: streamBacklog.createPublisherIfAbsent().registrationId(registrationId); streamBacklog.createPublisherIfAbsent().position(value); break; case SenderPos.SENDER_POSITION_TYPE_ID: streamBacklog.createSenderIfAbsent().registrationId(registrationId); streamBacklog.createSenderIfAbsent().position(value); break; case SenderLimit.SENDER_LIMIT_TYPE_ID: streamBacklog.createSenderIfAbsent().registrationId(registrationId); streamBacklog.createSenderIfAbsent().limit(value); break; case ReceiverHwm.RECEIVER_HWM_TYPE_ID: streamBacklog.createReceiverIfAbsent().registrationId(registrationId); streamBacklog.createReceiverIfAbsent().highWaterMark(value); break; case ReceiverPos.RECEIVER_POS_TYPE_ID: streamBacklog.createReceiverIfAbsent().registrationId(registrationId); streamBacklog.createReceiverIfAbsent().position(value); break; case SubscriberPos.SUBSCRIBER_POSITION_TYPE_ID: streamBacklog.subscriberBacklogs().put(registrationId, new Subscriber(value)); break; } } }); return streams; } \n### Response:", "ground_truth": "Take a snapshot of all the backlog information and group by stream.\n\n@return a snapshot of all the backlog information and group by stream.", "predict": "Snapshots the current state of the PublisherCounters.\n\n@return a map of the PublisherCounters to their corresponding StreamBacklogs"}
{"ID": 1972, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static AtomicCounter allocate( final MutableDirectBuffer tempBuffer, final String name, final int typeId, final CountersManager countersManager, final long registrationId) { return new AtomicCounter( countersManager.valuesBuffer(), allocateCounterId(tempBuffer, name, typeId, countersManager, registrationId), countersManager); } \n### Response:", "ground_truth": "Allocate a counter for tracking the last heartbeat of an entity.\n\n@param tempBuffer      to be used for labels and key.\n@param name            of the counter for the label.\n@param typeId          of the counter for classification.\n@param countersManager from which to allocated the underlying storage.\n@param registrationId  to be associated with the counter.\n@return a new {@link AtomicCounter} for tracking the last heartbeat.", "predict": "Allocates a counter with the given name, type id, and counter manager.\n\n@param tempBuffer the buffer to allocate the counter from\n@param name the name of the counter\n@param typeId the type id of the counter\n@param countersManager the counter manager\n@param registrationId the registration id\n@return the new counter"}
{"ID": 1973, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void close() { final MappedByteBuffer cncByteBuffer = this.cncByteBuffer; this.cncByteBuffer = null; IoUtil.unmap(cncByteBuffer); super.close(); } \n### Response:", "ground_truth": "Clean up all resources that the client uses to communicate with the Media Driver.", "predict": "Closes the connection."}
{"ID": 1974, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void dispatchDescriptor( final RecordingDescriptorDecoder decoder, final RecordingDescriptorConsumer consumer) { consumer.onRecordingDescriptor( decoder.controlSessionId(), decoder.correlationId(), decoder.recordingId(), decoder.startTimestamp(), decoder.stopTimestamp(), decoder.startPosition(), decoder.stopPosition(), decoder.initialTermId(), decoder.segmentFileLength(), decoder.termBufferLength(), decoder.mtuLength(), decoder.sessionId(), decoder.streamId(), decoder.strippedChannel(), decoder.originalChannel(), decoder.sourceIdentity()); } \n### Response:", "ground_truth": "Dispatch a descriptor message to a consumer by reading the fields in the correct order.\n\n@param decoder  which wraps the encoded message ready for reading.\n@param consumer to which the decoded fields should be passed.", "predict": "Dispatches a recording descriptor to the consumer.\n\n@param decoder the decoder to dispatch\n@param consumer the consumer to dispatch to"}
{"ID": 1975, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addSlab(int minimumSize) { int nextSlabSize; if (bytesUsed == 0) { nextSlabSize = initialSlabSize; } else if (bytesUsed > maxCapacityHint / 5) { // to avoid an overhead of up to twice the needed size, we get linear when approaching target page size nextSlabSize = maxCapacityHint / 5; } else { // double the size every time nextSlabSize = bytesUsed; } if (nextSlabSize < minimumSize) { LOG.debug(\"slab size {} too small for value of size {}. Bumping up slab size\", nextSlabSize, minimumSize); nextSlabSize = minimumSize; } LOG.debug(\"used {} slabs, adding new slab of size {}\", slabs.size(), nextSlabSize); this.currentSlab = allocator.allocate(nextSlabSize); this.slabs.add(currentSlab); this.bytesAllocated += nextSlabSize; this.currentSlabIndex = 0; } \n### Response:", "ground_truth": "the new slab is guaranteed to be at least minimumSize\n@param minimumSize the size of the data we want to copy in the new slab", "predict": "Add a new slab of size minimumSize to the slab list.\n\n@param minimumSize the minimum size of the slab"}
{"ID": 1976, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setByte(long index, byte value) { checkArgument(index < bytesUsed, \"Index: \" + index + \" is >= the current size of: \" + bytesUsed); long seen = 0; for (int i = 0; i < slabs.size(); i++) { ByteBuffer slab = slabs.get(i); if (index < seen + slab.limit()) { // ok found index slab.put((int)(index-seen), value); break; } seen += slab.limit(); } } \n### Response:", "ground_truth": "Replace the byte stored at position index in this stream with value\n\n@param index which byte to replace\n@param value the value to replace it with", "predict": "Sets a byte at the specified index.\n\n@param index The index of the byte to set.\n@param value The value to set."}
{"ID": 1977, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void add(Statistics<?> stats) { if (stats.hasNonNullValue()) { nullPages.add(false); Object min = stats.genericGetMin(); Object max = stats.genericGetMax(); addMinMax(min, max); pageIndexes.add(nextPageIndex); minMaxSize += sizeOf(min); minMaxSize += sizeOf(max); } else { nullPages.add(true); } nullCounts.add(stats.getNumNulls()); ++nextPageIndex; } \n### Response:", "ground_truth": "Adds the data from the specified statistics to this builder\n\n@param stats\nthe statistics to be added", "predict": "Adds a statistics to the statistics list.\n\n@param stats the statistics to add"}
{"ID": 1978, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static RowRanges calculateRowRanges(FilterCompat.Filter filter, ColumnIndexStore columnIndexStore, Set<ColumnPath> paths, long rowCount) { return filter.accept(new FilterCompat.Visitor<RowRanges>() { @Override public RowRanges visit(FilterPredicateCompat filterPredicateCompat) { try { return filterPredicateCompat.getFilterPredicate() .accept(new ColumnIndexFilter(columnIndexStore, paths, rowCount)); } catch (MissingOffsetIndexException e) { LOGGER.info(e.getMessage()); return RowRanges.createSingle(rowCount); } } @Override public RowRanges visit(UnboundRecordFilterCompat unboundRecordFilterCompat) { return RowRanges.createSingle(rowCount); } @Override public RowRanges visit(NoOpFilter noOpFilter) { return RowRanges.createSingle(rowCount); } }); } \n### Response:", "ground_truth": "Calculates the row ranges containing the indexes of the rows might match the specified filter.\n\n@param filter\nto be used for filtering the rows\n@param columnIndexStore\nthe store for providing column/offset indexes\n@param paths\nthe paths of the columns used in the actual projection; a column not being part of the projection will be\nhandled as containing {@code null} values only even if the column has values written in the file\n@param rowCount\nthe total number of rows in the row-group\n@return the ranges of the possible matching row indexes; the returned ranges will contain all the rows if any of\nthe required offset index is missing", "predict": "Calculates the row ranges for the given filter.\n\n@param filter the filter\n@param columnIndexStore the column index store\n@param paths the paths\n@return the row ranges"}
{"ID": 1979, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static GroupType convertArrayType(final String name, final ListTypeInfo typeInfo) { final TypeInfo subType = typeInfo.getListElementTypeInfo(); return listWrapper(name, listType(), new GroupType(Repetition.REPEATED, ParquetHiveSerDe.ARRAY.toString(), convertType(\"array_element\", subType))); } \n### Response:", "ground_truth": "1 anonymous element \"array_element\"", "predict": "Converts a list type to a Parquet GroupType.\n\n@param name the name of the type\n@param typeInfo the type info of the type\n@return the Parquet GroupType"}
{"ID": 1980, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static GroupType convertStructType(final String name, final StructTypeInfo typeInfo) { final List<String> columnNames = typeInfo.getAllStructFieldNames(); final List<TypeInfo> columnTypes = typeInfo.getAllStructFieldTypeInfos(); return new GroupType(Repetition.OPTIONAL, name, convertTypes(columnNames, columnTypes)); } \n### Response:", "ground_truth": "An optional group containing multiple elements", "predict": "Convert a struct type to a GroupType."}
{"ID": 1981, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static String annotateMessage(String message, int pos) { StringBuilder sb = new StringBuilder(message); sb.append('\\n'); for (int i = 0; i < pos; i++) { sb.append('-'); } sb.append('^'); return sb.toString(); } \n### Response:", "ground_truth": "for pretty printing which character had the error", "predict": "annotates a message with a line break at the specified position"}
{"ID": 1982, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void endPreviousBitPackedRun() { if (bitPackedRunHeaderPointer == -1) { // we're not currently in a bit-packed-run return; } // create bit-packed-header, which needs to fit in 1 byte byte bitPackHeader = (byte) ((bitPackedGroupCount << 1) | 1); // update this byte baos.setByte(bitPackedRunHeaderPointer, bitPackHeader); // mark that this run is over bitPackedRunHeaderPointer = -1; // reset the number of groups bitPackedGroupCount = 0; } \n### Response:", "ground_truth": "If we are currently writing a bit-packed-run, update the\nbit-packed-header and consider this run to be over\n\ndoes nothing if we're not currently writing a bit-packed run", "predict": "This method is called when we're done with the previous bit-packed run."}
{"ID": 1983, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void readOne(TProtocol in, TProtocol out) throws TException { readOneStruct(in, out); } \n### Response:", "ground_truth": "reads one record from in and writes it to out\nexceptions are not recoverable as record might be halfway written\n@param in input protocol\n@param out output protocol\n@throws TException if there is an error while reading or writing", "predict": "Read one struct.\n\n@param in the in\n@param out the out\n@throws TException the exception"}
{"ID": 1984, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Deprecated public static List<Footer> readFooters(Configuration configuration, FileStatus pathStatus) throws IOException { return readFooters(configuration, pathStatus, false); } \n### Response:", "ground_truth": "this always returns the row groups\n@param configuration a configuration\n@param pathStatus a file status to read footers from\n@return a list of footers\n@throws IOException if an exception is thrown while reading the footers\n@deprecated will be removed in 2.0.0;\nuse {@link ParquetFileReader#open(InputFile, ParquetReadOptions)}", "predict": "Reads the footers from the given file.\n\n@deprecated Use {@link #readFooters(Configuration, FileStatus, boolean)} instead."}
{"ID": 1985, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Deprecated public static List<Footer> readSummaryFile(Configuration configuration, FileStatus summaryStatus) throws IOException { final Path parent = summaryStatus.getPath().getParent(); ParquetMetadata mergedFooters = readFooter(configuration, summaryStatus, filter(false)); return footersFromSummaryFile(parent, mergedFooters); } \n### Response:", "ground_truth": "Specifically reads a given summary file\n@param configuration a configuration\n@param summaryStatus file status for a summary file\n@return the metadata translated for each file\n@throws IOException if an exception is thrown while reading the summary file\n@deprecated metadata files are not recommended and will be removed in 2.0.0", "predict": "Reads the footers from the given summary file.\n\n@deprecated Use {@link #readFootersFromSummaryFile(Configuration, FileStatus)} instead."}
{"ID": 1986, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Deprecated public static final ParquetMetadata readFooter(InputFile file, MetadataFilter filter) throws IOException { ParquetReadOptions options; if (file instanceof HadoopInputFile) { options = HadoopReadOptions.builder(((HadoopInputFile) file).getConfiguration()) .withMetadataFilter(filter).build(); } else { options = ParquetReadOptions.builder().withMetadataFilter(filter).build(); } try (SeekableInputStream in = file.newStream()) { return readFooter(file, options, in); } } \n### Response:", "ground_truth": "Reads the meta data block in the footer of the file using provided input stream\n@param file a {@link InputFile} to read\n@param filter the filter to apply to row groups\n@return the metadata blocks in the footer\n@throws IOException if an error occurs while reading the file\n@deprecated will be removed in 2.0.0;\nuse {@link ParquetFileReader#open(InputFile, ParquetReadOptions)}", "predict": "Reads the footer of a Parquet file.\n\n@param file the input file\n@param filter the filter\n@return the footer\n@deprecated Use {@link #readFooter(InputFile, MetadataFilter)} instead."}
{"ID": 1987, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public PageReadStore readNextRowGroup() throws IOException { if (currentBlock == blocks.size()) { return null; } BlockMetaData block = blocks.get(currentBlock); if (block.getRowCount() == 0) { throw new RuntimeException(\"Illegal row group of 0 rows\"); } this.currentRowGroup = new ColumnChunkPageReadStore(block.getRowCount()); // prepare the list of consecutive parts to read them in one scan List<ConsecutivePartList> allParts = new ArrayList<ConsecutivePartList>(); ConsecutivePartList currentParts = null; for (ColumnChunkMetaData mc : block.getColumns()) { ColumnPath pathKey = mc.getPath(); BenchmarkCounter.incrementTotalBytes(mc.getTotalSize()); ColumnDescriptor columnDescriptor = paths.get(pathKey); if (columnDescriptor != null) { long startingPos = mc.getStartingPos(); // first part or not consecutive => new list if (currentParts == null || currentParts.endPos() != startingPos) { currentParts = new ConsecutivePartList(startingPos); allParts.add(currentParts); } currentParts.addChunk(new ChunkDescriptor(columnDescriptor, mc, startingPos, (int)mc.getTotalSize())); } } // actually read all the chunks ChunkListBuilder builder = new ChunkListBuilder(); for (ConsecutivePartList consecutiveChunks : allParts) { consecutiveChunks.readAll(f, builder); } for (Chunk chunk : builder.build()) { currentRowGroup.addColumn(chunk.descriptor.col, chunk.readAllPages()); } // avoid re-reading bytes the dictionary reader is used after this call if (nextDictionaryReader != null) { nextDictionaryReader.setRowGroup(currentRowGroup); } advanceToNextBlock(); return currentRowGroup; } \n### Response:", "ground_truth": "Reads all the columns requested from the row group at the current file position.\n@throws IOException if an error occurs while reading\n@return the PageReadStore which can provide PageReaders for each column.", "predict": "Returns the next row group of the current block.\n\n@return the next row group\n@throws IOException if an I/O error occurs"}
{"ID": 1988, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public PageReadStore readNextFilteredRowGroup() throws IOException { if (currentBlock == blocks.size()) { return null; } if (!options.useColumnIndexFilter()) { return readNextRowGroup(); } BlockMetaData block = blocks.get(currentBlock); if (block.getRowCount() == 0) { throw new RuntimeException(\"Illegal row group of 0 rows\"); } ColumnIndexStore ciStore = getColumnIndexStore(currentBlock); RowRanges rowRanges = getRowRanges(currentBlock); long rowCount = rowRanges.rowCount(); if (rowCount == 0) { // There are no matching rows -> skipping this row-group advanceToNextBlock(); return readNextFilteredRowGroup(); } if (rowCount == block.getRowCount()) { // All rows are matching -> fall back to the non-filtering path return readNextRowGroup(); } this.currentRowGroup = new ColumnChunkPageReadStore(rowRanges); // prepare the list of consecutive parts to read them in one scan ChunkListBuilder builder = new ChunkListBuilder(); List<ConsecutivePartList> allParts = new ArrayList<ConsecutivePartList>(); ConsecutivePartList currentParts = null; for (ColumnChunkMetaData mc : block.getColumns()) { ColumnPath pathKey = mc.getPath(); ColumnDescriptor columnDescriptor = paths.get(pathKey); if (columnDescriptor != null) { OffsetIndex offsetIndex = ciStore.getOffsetIndex(mc.getPath()); OffsetIndex filteredOffsetIndex = filterOffsetIndex(offsetIndex, rowRanges, block.getRowCount()); for (OffsetRange range : calculateOffsetRanges(filteredOffsetIndex, mc, offsetIndex.getOffset(0))) { BenchmarkCounter.incrementTotalBytes(range.getLength()); long startingPos = range.getOffset(); // first part or not consecutive => new list if (currentParts == null || currentParts.endPos() != startingPos) { currentParts = new ConsecutivePartList(startingPos); allParts.add(currentParts); } ChunkDescriptor chunkDescriptor = new ChunkDescriptor(columnDescriptor, mc, startingPos, (int) range.getLength()); currentParts.addChunk(chunkDescriptor); builder.setOffsetIndex(chunkDescriptor, filteredOffsetIndex); } } } // actually read all the chunks for (ConsecutivePartList consecutiveChunks : allParts) { consecutiveChunks.readAll(f, builder); } for (Chunk chunk : builder.build()) { currentRowGroup.addColumn(chunk.descriptor.col, chunk.readAllPages()); } // avoid re-reading bytes the dictionary reader is used after this call if (nextDictionaryReader != null) { nextDictionaryReader.setRowGroup(currentRowGroup); } advanceToNextBlock(); return currentRowGroup; } \n### Response:", "ground_truth": "Reads all the columns requested from the row group at the current file position. It may skip specific pages based\non the column indexes according to the actual filter. As the rows are not aligned among the pages of the different\ncolumns row synchronization might be required. See the documentation of the class SynchronizingColumnReader for\ndetails.\n\n@return the PageReadStore which can provide PageReaders for each column\n@throws IOException\nif any I/O error occurs while reading", "predict": "Returns the next row group of the current block.\n\n@return the row group\n@throws IOException if an I/O error occurs"}
{"ID": 1989, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: DictionaryPage readDictionary(ColumnChunkMetaData meta) throws IOException { if (!meta.getEncodings().contains(Encoding.PLAIN_DICTIONARY) && !meta.getEncodings().contains(Encoding.RLE_DICTIONARY)) { return null; } // TODO: this should use getDictionaryPageOffset() but it isn't reliable. if (f.getPos() != meta.getStartingPos()) { f.seek(meta.getStartingPos()); } PageHeader pageHeader = Util.readPageHeader(f); if (!pageHeader.isSetDictionary_page_header()) { return null; // TODO: should this complain? } DictionaryPage compressedPage = readCompressedDictionary(pageHeader, f); BytesInputDecompressor decompressor = options.getCodecFactory().getDecompressor(meta.getCodec()); return new DictionaryPage( decompressor.decompress(compressedPage.getBytes(), compressedPage.getUncompressedSize()), compressedPage.getDictionarySize(), compressedPage.getEncoding()); } \n### Response:", "ground_truth": "Reads and decompresses a dictionary page for the given column chunk.\n\nReturns null if the given column chunk has no dictionary page.\n\n@param meta a column's ColumnChunkMetaData to read the dictionary from\n@return an uncompressed DictionaryPage or null\n@throws IOException if there is an error while reading the dictionary", "predict": "Reads a dictionary page."}
{"ID": 1990, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: synchronized void addWriter(InternalParquetRecordWriter writer, Long allocation) { Long oldValue = writerList.get(writer); if (oldValue == null) { writerList.put(writer, allocation); } else { throw new IllegalArgumentException(\"[BUG] The Parquet Memory Manager should not add an \" + \"instance of InternalParquetRecordWriter more than once. The Manager already contains \" + \"the writer: \" + writer); } updateAllocation(); } \n### Response:", "ground_truth": "Add a new writer and its memory allocation to the memory manager.\n@param writer the new created writer\n@param allocation the requested buffer size", "predict": "Adds a writer to the allocation list."}
{"ID": 1991, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: synchronized void removeWriter(InternalParquetRecordWriter writer) { if (writerList.containsKey(writer)) { writerList.remove(writer); } if (!writerList.isEmpty()) { updateAllocation(); } } \n### Response:", "ground_truth": "Remove the given writer from the memory manager.\n@param writer the writer that has been closed", "predict": "Removes a writer from the list of writers."}
{"ID": 1992, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void updateAllocation() { long totalAllocations = 0; for (Long allocation : writerList.values()) { totalAllocations += allocation; } if (totalAllocations <= totalMemoryPool) { scale = 1.0; } else { scale = (double) totalMemoryPool / totalAllocations; LOG.warn(String.format( \"Total allocation exceeds %.2f%% (%,d bytes) of heap memory\\n\" + \"Scaling row group sizes to %.2f%% for %d writers\", 100*memoryPoolRatio, totalMemoryPool, 100*scale, writerList.size())); for (Runnable callBack : callBacks.values()) { // we do not really want to start a new thread here. callBack.run(); } } int maxColCount = 0; for (InternalParquetRecordWriter w : writerList.keySet()) { maxColCount = Math.max(w.getSchema().getColumns().size(), maxColCount); } for (Map.Entry<InternalParquetRecordWriter, Long> entry : writerList.entrySet()) { long newSize = (long) Math.floor(entry.getValue() * scale); if(scale < 1.0 && minMemoryAllocation > 0 && newSize < minMemoryAllocation) { throw new ParquetRuntimeException(String.format(\"New Memory allocation %d bytes\" + \" is smaller than the minimum allocation size of %d bytes.\", newSize, minMemoryAllocation)){}; } entry.getKey().setRowGroupSizeThreshold(newSize); LOG.debug(String.format(\"Adjust block size from %,d to %,d for writer: %s\", entry.getValue(), newSize, entry.getKey())); } } \n### Response:", "ground_truth": "Update the allocated size of each writer based on the current allocations and pool size.", "predict": "Update the row group size threshold for each writer."}
{"ID": 1993, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerScaleCallBack(String callBackName, Runnable callBack) { Preconditions.checkNotNull(callBackName, \"callBackName\"); Preconditions.checkNotNull(callBack, \"callBack\"); if (callBacks.containsKey(callBackName)) { throw new IllegalArgumentException(\"The callBackName \" + callBackName + \" is duplicated and has been registered already.\"); } else { callBacks.put(callBackName, callBack); } } \n### Response:", "ground_truth": "Register callback and deduplicate it if any.\n@param callBackName the name of callback. It should be identical.\n@param callBack the callback passed in from upper layer, such as Hive.", "predict": "Register a call back for the scale operation.\n\n@param callBackName the name of the call back\n@param callBack the call back"}
{"ID": 1994, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void start() throws IOException { state = state.start(); LOG.debug(\"{}: start\", out.getPos()); out.write(MAGIC); } \n### Response:", "ground_truth": "start the file\n@throws IOException if there is an error while writing", "predict": "Starts the stream."}
{"ID": 1995, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void startBlock(long recordCount) throws IOException { state = state.startBlock(); LOG.debug(\"{}: start block\", out.getPos()); // out.write(MAGIC); // TODO: add a magic delimiter alignment.alignForRowGroup(out); currentBlock = new BlockMetaData(); currentRecordCount = recordCount; currentColumnIndexes = new ArrayList<>(); currentOffsetIndexes = new ArrayList<>(); } \n### Response:", "ground_truth": "start a block\n@param recordCount the record count in this block\n@throws IOException if there is an error while writing", "predict": "Start a new block.\n\n@param recordCount the number of records to write\n@throws IOException if an I/O error occurs"}
{"ID": 1996, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void startColumn(ColumnDescriptor descriptor, long valueCount, CompressionCodecName compressionCodecName) throws IOException { state = state.startColumn(); encodingStatsBuilder.clear(); currentEncodings = new HashSet<Encoding>(); currentChunkPath = ColumnPath.get(descriptor.getPath()); currentChunkType = descriptor.getPrimitiveType(); currentChunkCodec = compressionCodecName; currentChunkValueCount = valueCount; currentChunkFirstDataPage = out.getPos(); compressedLength = 0; uncompressedLength = 0; // The statistics will be copied from the first one added at writeDataPage(s) so we have the correct typed one currentStatistics = null; columnIndexBuilder = ColumnIndexBuilder.getBuilder(currentChunkType, columnIndexTruncateLength); offsetIndexBuilder = OffsetIndexBuilder.getBuilder(); firstPageOffset = -1; } \n### Response:", "ground_truth": "start a column inside a block\n@param descriptor the column descriptor\n@param valueCount the value count in this column\n@param compressionCodecName a compression codec name\n@throws IOException if there is an error while writing", "predict": "Starts the current column.\n\n@param descriptor\nthe descriptor\n@param valueCount\nthe value count\n@param compressionCodecName\nthe compression codec name\n@throws IOException\nSignals that an I/O exception has occurred."}
{"ID": 1997, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void writeDictionaryPage(DictionaryPage dictionaryPage) throws IOException { state = state.write(); LOG.debug(\"{}: write dictionary page: {} values\", out.getPos(), dictionaryPage.getDictionarySize()); currentChunkDictionaryPageOffset = out.getPos(); int uncompressedSize = dictionaryPage.getUncompressedSize(); int compressedPageSize = (int)dictionaryPage.getBytes().size(); // TODO: fix casts metadataConverter.writeDictionaryPageHeader( uncompressedSize, compressedPageSize, dictionaryPage.getDictionarySize(), dictionaryPage.getEncoding(), out); long headerSize = out.getPos() - currentChunkDictionaryPageOffset; this.uncompressedLength += uncompressedSize + headerSize; this.compressedLength += compressedPageSize + headerSize; LOG.debug(\"{}: write dictionary page content {}\", out.getPos(), compressedPageSize); dictionaryPage.getBytes().writeAllTo(out); encodingStatsBuilder.addDictEncoding(dictionaryPage.getEncoding()); currentEncodings.add(dictionaryPage.getEncoding()); } \n### Response:", "ground_truth": "writes a dictionary page page\n@param dictionaryPage the dictionary page\n@throws IOException if there is an error while writing", "predict": "Writes the dictionary page to the output stream.\n\n@param dictionaryPage the dictionary page to write\n@throws IOException if an IOException occurs"}
{"ID": 1998, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void writeDataPage( int valueCount, int uncompressedPageSize, BytesInput bytes, Statistics statistics, long rowCount, Encoding rlEncoding, Encoding dlEncoding, Encoding valuesEncoding) throws IOException { long beforeHeader = out.getPos(); innerWriteDataPage(valueCount, uncompressedPageSize, bytes, statistics, rlEncoding, dlEncoding, valuesEncoding); offsetIndexBuilder.add((int) (out.getPos() - beforeHeader), rowCount); } \n### Response:", "ground_truth": "Writes a single page\n@param valueCount count of values\n@param uncompressedPageSize the size of the data once uncompressed\n@param bytes the compressed data for the page without header\n@param statistics the statistics of the page\n@param rowCount the number of rows in the page\n@param rlEncoding encoding of the repetition level\n@param dlEncoding encoding of the definition level\n@param valuesEncoding encoding of values\n@throws IOException if any I/O error occurs during writing the file", "predict": "Writes the given number of values to the output stream.\n\n@param valueCount\n@param uncompressedPageSize\n@param bytes\n@param statistics\n@param rowCount\n@param rlEncoding\n@param dlEncoding\n@param valuesEncoding\n@throws IOException"}
{"ID": 1999, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: void writeColumnChunk(ColumnDescriptor descriptor, long valueCount, CompressionCodecName compressionCodecName, DictionaryPage dictionaryPage, BytesInput bytes, long uncompressedTotalPageSize, long compressedTotalPageSize, Statistics<?> totalStats, ColumnIndexBuilder columnIndexBuilder, OffsetIndexBuilder offsetIndexBuilder, Set<Encoding> rlEncodings, Set<Encoding> dlEncodings, List<Encoding> dataEncodings) throws IOException { startColumn(descriptor, valueCount, compressionCodecName); state = state.write(); if (dictionaryPage != null) { writeDictionaryPage(dictionaryPage); } LOG.debug(\"{}: write data pages\", out.getPos()); long headersSize = bytes.size() - compressedTotalPageSize; this.uncompressedLength += uncompressedTotalPageSize + headersSize; this.compressedLength += compressedTotalPageSize + headersSize; LOG.debug(\"{}: write data pages content\", out.getPos()); firstPageOffset = out.getPos(); bytes.writeAllTo(out); encodingStatsBuilder.addDataEncodings(dataEncodings); if (rlEncodings.isEmpty()) { encodingStatsBuilder.withV2Pages(); } currentEncodings.addAll(rlEncodings); currentEncodings.addAll(dlEncodings); currentEncodings.addAll(dataEncodings); currentStatistics = totalStats; this.columnIndexBuilder = columnIndexBuilder; this.offsetIndexBuilder = offsetIndexBuilder; endColumn(); } \n### Response:", "ground_truth": "Writes a column chunk at once\n@param descriptor the descriptor of the column\n@param valueCount the value count in this column\n@param compressionCodecName the name of the compression codec used for compressing the pages\n@param dictionaryPage the dictionary page for this column chunk (might be null)\n@param bytes the encoded pages including page headers to be written as is\n@param uncompressedTotalPageSize total uncompressed size (without page headers)\n@param compressedTotalPageSize total compressed size (without page headers)\n@param totalStats accumulated statistics for the column chunk\n@param columnIndexBuilder the builder object for the column index\n@param offsetIndexBuilder the builder object for the offset index\n@param rlEncodings the RL encodings used in this column chunk\n@param dlEncodings the DL encodings used in this column chunk\n@param dataEncodings the data encodings used in this column chunk\n@throws IOException if there is an error while writing", "predict": "Writes a single column chunk."}
{"ID": 2000, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void endBlock() throws IOException { state = state.endBlock(); LOG.debug(\"{}: end block\", out.getPos()); currentBlock.setRowCount(currentRecordCount); blocks.add(currentBlock); columnIndexes.add(currentColumnIndexes); offsetIndexes.add(currentOffsetIndexes); currentColumnIndexes = null; currentOffsetIndexes = null; currentBlock = null; } \n### Response:", "ground_truth": "ends a block once all column chunks have been written\n@throws IOException if there is an error while writing", "predict": "Ends the current block."}
