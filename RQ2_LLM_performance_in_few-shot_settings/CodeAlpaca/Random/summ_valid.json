[{"ID": 1, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *SeriesIDSet) UnmarshalBinary(data []byte) error { s.Lock() defer s.Unlock() return s.bitmap.UnmarshalBinary(data) }\n\n    ### Response: // UnmarshalBinary unmarshals data into the set..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected final void fastPathOrderedEmit(U value, boolean delayError, Disposable disposable) { final Observer<? super V> observer = downstream; final SimplePlainQueue<U> q = queue; if (wip.get() == 0 && wip.compareAndSet(0, 1)) { if (q.isEmpty()) { accept(observer, value); if (leave(-1) == 0) { return; } } else { q.offer(value); } } else { q.offer(value); if (!enter()) { return; } } QueueDrainHelper.drainLoop(q, observer, delayError, disposable, this); }\n\n    ### Response:", "ground_truth": "Makes sure the fast-path emits in order.\n@param value the value to emit or queue up\n@param delayError if true, errors are delayed until the source has terminated\n@param disposable the resource to dispose if the drain terminates", "predict": "// FastPathEmit unmarshals values from the source into the set and dispatches them to the consumers of the set in order of increasing values of V and ignoring the values with error...."}, {"ID": 2, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function generateMorphToManyPivotTable($name, Annotation $annotation, EntityDefinition &$entityMetadata) { $morphName = $annotation->morphName; $tableName = ($annotation->pivotTable) ? $annotation->pivotTable : $this->generatePivotTablename($entityMetadata['class'], $annotation->relatedEntity, $annotation->inverse, $morphName); if ($annotation->inverse) { $pivotKey = $annotation->localPivotKey ?: $this->generateKey($entityMetadata['class']); } else { $pivotKey = $annotation->relatedPivotKey ?: $this->generateKey($annotation->relatedEntity); } $morphId = (! empty($annotation->localKey)) ? $annotation->localKey : $morphName.'_id'; $morphType = $morphName.'_type'; return new TableDefinition([ 'name' => $tableName, 'columns' => [ $this->getModifiedPrimaryKeyColumn($entityMetadata['table'], [ 'name' => $pivotKey, 'options' => [ 'autoIncrement' => false ] ]), $this->getModifiedPrimaryKeyColumn($entityMetadata['table'], [ 'name' => $morphId, 'options' => [ 'autoIncrement' => false ] ]), new ColumnDefinition([ 'name' => $morphType, 'type' => 'string', 'nullable' => false, 'default' => false, 'primary' => true, 'unique' => false, 'index' => false, 'options' => [] ]), ] ]); }\n\n    ### Response: Generate pivot table for a morphToMany relation.\n\n@param string $name\n@param \\ProAI\\Datamapper\\Annotations\\Annotation $annotation\n@param \\ProAI\\Datamapper\\Metadata\\Definitions\\Class $entityMetadata\n@return \\ProAI\\Datamapper\\Metadata\\Definitions\\Table.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @SchedulerSupport(SchedulerSupport.NONE) public static <T> Observable<T> wrap(ObservableSource<T> source) { ObjectHelper.requireNonNull(source, \"source is null\"); if (source instanceof Observable) { return RxJavaPlugins.onAssembly((Observable<T>)source); } return RxJavaPlugins.onAssembly(new ObservableFromUnsafeSource<T>(source)); }\n\n    ### Response:", "ground_truth": "Wraps an ObservableSource into an Observable if not already an Observable.\n\n\nScheduler:\n{@code wrap} does not operate by default on a particular {@link Scheduler}.\n\n\n@param  the value type\n@param source the source ObservableSource instance\n@return the new Observable instance or the same as the source\n@throws NullPointerException if source is null", "predict": "Wrap an observable source with the observable extension method"}, {"ID": 3, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function telephonyCallManager($phone, $details) { if (!isset($phone)) { throw new \\InvalidArgumentException('Phone number must be set'); } $parameters['phone'] = $phone; $parameters['details'] = isset($details) ? $details : 0; /* @noinspection PhpUndefinedMethodInspection */ return $this->client->makeRequest( '/telephony/manager', \"GET\", $parameters ); }\n\n    ### Response: Get call manager\n\n@param string $phone   phone number\n@param bool   $details detailed information\n\n@throws \\InvalidArgumentException\n@throws \\RetailCrm\\Exception\\CurlException\n@throws \\RetailCrm\\Exception\\InvalidJsonException\n\n@return \\RetailCrm\\Response\\ApiResponse.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @SchedulerSupport(SchedulerSupport.NONE) public final Observable<T> sorted(Comparator<? super T> sortFunction) { ObjectHelper.requireNonNull(sortFunction, \"sortFunction is null\"); return toList().toObservable().map(Functions.listSorter(sortFunction)).flatMapIterable(Functions.<List<T>>identity()); }\n\n    ### Response:", "ground_truth": "Returns an Observable that emits the events emitted by source ObservableSource, in a\nsorted order based on a specified comparison function.\n\nNote that calling {@code sorted} with long, non-terminating or infinite sources\nmight cause {@link OutOfMemoryError}\n\n\nScheduler:\n{@code sorted} does not operate by default on a particular {@link Scheduler}.\n\n\n@param sortFunction\na function that compares two items emitted by the source ObservableSource and returns an Integer\nthat indicates their sort order\n@return an Observable that emits the items emitted by the source ObservableSource in sorted order", "predict": "Comparator-based sorting of the given list"}, {"ID": 4, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function addHeader($type = PHPRtfLite_Container_Header::TYPE_ALL, PHPRtfLite_Container_Header $header = null) { if ($header === null) { $header = new PHPRtfLite_Container_Header($this, $type); } $this->_headers[$type] = $header; return $header; }\n\n    ### Response: creates header for the document\n\n@param   string  $type\nRepresented by class constants PHPRtfLite_Container_Header::TYPE_* \nPossible values: \nPHPRtfLite_Container_Header::TYPE_ALL\nall pages (different odd and even headers/footers must be not set) \nPHPRtfLite_Container_Header::TYPE_LEFT\nleft pages (different odd and even headers/footers must be set) \nPHPRtfLite_Container_Header::TYPE_RIGHT\nright pages (different odd and even headers/footers must be set \nPHPRtfLite_Container_Header::TYPE_FIRST\nfirst page\n@param   PHPRtfLite_Container_Header $header\n\n@return  PHPRtfLite_Container_Header.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> ConnectableObservable<T> observeOn(final ConnectableObservable<T> co, final Scheduler scheduler) { final Observable<T> observable = co.observeOn(scheduler); return RxJavaPlugins.onAssembly(new Replay<T>(co, observable)); }\n\n    ### Response:", "ground_truth": "Child Observers will observe the events of the ConnectableObservable on the\nspecified scheduler.\n@param  the value type\n@param co the connectable observable instance\n@param scheduler the target scheduler\n@return the new ConnectableObservable instance", "predict": "subscribes items to an observable for later retrieval\n\nobserveOn() subscribes items to an observable for later retrieval. This allows you to schedule items for later retrieval without blocking the UI thread of your application; hence, providing a nice separation of UI threads and background threads in your application design."}, {"ID": 5, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected byte[] getBinaryRequestPayload(SignableRequest<?> request) { if (SdkHttpUtils.usePayloadForQueryParameters(request)) { String encodedParameters = SdkHttpUtils.encodeParameters(request); if (encodedParameters == null) return new byte[0]; return encodedParameters.getBytes(UTF8); } return getBinaryRequestPayloadWithoutQueryParams(request); }\n\n    ### Response: Returns the request's payload as binary data.\n\n@param request\nThe request\n@return The data from the request's payload, as binary data..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @NonNull public static <T> UnicastProcessor<T> create(int capacityHint) { return new UnicastProcessor<T>(capacityHint); }\n\n    ### Response:", "ground_truth": "Creates an UnicastProcessor with the given internal buffer capacity hint.\n@param  the value type\n@param capacityHint the hint to size the internal unbounded buffer\n@return an UnicastProcessor instance", "predict": "Creates and returns a unicast processor with the given capacity hint."}, {"ID": 6, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def from_aid(cls, aid): \"\"\"Retrieve the Assay record for the specified AID. :param int aid: The PubChem Assay Identifier (AID). \"\"\" record = json.loads(request(aid, 'aid', 'assay', 'description').read().decode())['PC_AssayContainer'][0] return cls(record)\n\n    ### Response: Retrieve the Assay record for the specified AID.\n\n        :param int aid: The PubChem Assay Identifier (AID)..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @NonNull public static <T> UnicastProcessor<T> create(int capacityHint, Runnable onCancelled) { ObjectHelper.requireNonNull(onCancelled, \"onTerminate\"); return new UnicastProcessor<T>(capacityHint, onCancelled); }\n\n    ### Response:", "ground_truth": "Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for\nthe case when the single Subscriber cancels its subscription.\n\nThe callback, if not null, is called exactly once and\nnon-overlapped with any active replay.\n\n@param  the value type\n@param capacityHint the hint to size the internal unbounded buffer\n@param onCancelled the non null callback\n@return an UnicastProcessor instance", "predict": "Creates and returns an unbounded single producer single consumer queue with an optional capacity and an onCancelled callback."}, {"ID": 7, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def one_frame size = @socket.read(4) raise SocketError, @socket.eof? ? 'Connection closed by remote server' : 'Error reading frame from remote server' if size.nil? size = size.unpack('N')[0] @recv_frame = @socket.read(size - 4) recv_frame_to_xml end\n\n    ### Response: gets a frame from the socket and returns the parsed response..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public static <T, R> boolean tryScalarXMapSubscribe(Publisher<T> source, Subscriber<? super R> subscriber, Function<? super T, ? extends Publisher<? extends R>> mapper) { if (source instanceof Callable) { T t; try { t = ((Callable<T>)source).call(); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptySubscription.error(ex, subscriber); return true; } if (t == null) { EmptySubscription.complete(subscriber); return true; } Publisher<? extends R> r; try { r = ObjectHelper.requireNonNull(mapper.apply(t), \"The mapper returned a null Publisher\"); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptySubscription.error(ex, subscriber); return true; } if (r instanceof Callable) { R u; try { u = ((Callable<R>)r).call(); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptySubscription.error(ex, subscriber); return true; } if (u == null) { EmptySubscription.complete(subscriber); return true; } subscriber.onSubscribe(new ScalarSubscription<R>(subscriber, u)); } else { r.subscribe(subscriber); } return true; } return false; }\n\n    ### Response:", "ground_truth": "Tries to subscribe to a possibly Callable source's mapped Publisher.\n@param  the input value type\n@param  the output value type\n@param source the source Publisher\n@param subscriber the subscriber\n@param mapper the function mapping a scalar value into a Publisher\n@return true if successful, false if the caller should continue with the regular path.", "predict": "Tries to map the given source to its corresponding R and subscribes to the returned R"}, {"ID": 8, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function configInfo($table, $path, $name) { if (empty($path)) { return array(); } if (!$config = $this->config($table, $path)) { $config = array(); } unset($config['path'], $config['url']); $page = Page::html(); $config = array_merge(array( 'name' => $name, 'path' => $path, 'url' => ($table == 'categories') ? $page->url('base', $path) : $page->url('blog/listings', $table, $path), 'image' => '', ), $config); if (!empty($config['image'])) { $config['image'] = $page->url('blog/config', $config['image']); } return $config; }\n\n    ### Response: Compiles an array of useful information.\n\n@param string $table Either 'authors', 'categories', or 'tags'.\n@param string $path  The ``$table``'s key (a url path).\n@param string $name  The default ``$table[$path]``'s name if one is not specified.\n\n@return array Either an empty one if not found, or the 'name', 'path', 'url', and 'image' of the ``$table[$path]``..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T, U> Flowable<U> scalarXMap(final T value, final Function<? super T, ? extends Publisher<? extends U>> mapper) { return RxJavaPlugins.onAssembly(new ScalarXMapFlowable<T, U>(value, mapper)); }\n\n    ### Response:", "ground_truth": "Maps a scalar value into a Publisher and emits its values.\n\n@param  the scalar value type\n@param  the output value type\n@param value the scalar value to map\n@param mapper the function that gets the scalar value and should return\na Publisher that gets streamed\n@return the new Flowable instance", "predict": "Maps values emitted by the source Single to other values produced by the mapping Function"}, {"ID": 9, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def from_url(url, db=None, **kwargs): \"\"\" Returns an active Redis client generated from the given database URL. Will attempt to extract the database id from the path url fragment, if none is provided. \"\"\" from redis.client import Redis return Redis.from_url(url, db, **kwargs)\n\n    ### Response: Returns an active Redis client generated from the given database URL.\n\n    Will attempt to extract the database id from the path url fragment, if\n    none is provided..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void reset() { setErrorHandler(null); setScheduleHandler(null); setComputationSchedulerHandler(null); setInitComputationSchedulerHandler(null); setIoSchedulerHandler(null); setInitIoSchedulerHandler(null); setSingleSchedulerHandler(null); setInitSingleSchedulerHandler(null); setNewThreadSchedulerHandler(null); setInitNewThreadSchedulerHandler(null); setOnFlowableAssembly(null); setOnFlowableSubscribe(null); setOnObservableAssembly(null); setOnObservableSubscribe(null); setOnSingleAssembly(null); setOnSingleSubscribe(null); setOnCompletableAssembly(null); setOnCompletableSubscribe(null); setOnConnectableFlowableAssembly(null); setOnConnectableObservableAssembly(null); setOnMaybeAssembly(null); setOnMaybeSubscribe(null); setOnParallelAssembly(null); setFailOnNonBlockingScheduler(false); setOnBeforeBlocking(null); }\n\n    ### Response:", "ground_truth": "Removes all handlers and resets to default behavior.", "predict": "Resetting all handlers to their default values.."}, {"ID": 10, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (r *Response) GetRedirectUrl() (string, error) { if r.Type != REDIRECT { return \"\", errors.New(\"Not a redirect response\") } u, err := url.Parse(r.URL) if err != nil { return \"\", err } var q url.Values if r.RedirectInFragment { // start with empty set for fragment q = url.Values{} } else { // add parameters to existing query q = u.Query() } // add parameters for n, v := range r.Output { q.Set(n, fmt.Sprint(v)) } // https://tools.ietf.org/html/rfc6749#section-4.2.2 // Fragment should be encoded as application/x-www-form-urlencoded (%-escaped, spaces are represented as '+') // The stdlib URL#String() doesn't make that easy to accomplish, so build this ourselves if r.RedirectInFragment { u.Fragment = \"\" redirectURI := u.String() + \"#\" + q.Encode() return redirectURI, nil } // Otherwise, update the query and encode normally u.RawQuery = q.Encode() u.Fragment = \"\" return u.String(), nil }\n\n    ### Response: // GetRedirectUrl returns the redirect url with all query string parameters.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @NonNull @SchedulerSupport(SchedulerSupport.NONE) public static <T> Maybe<T> fromCompletable(CompletableSource completableSource) { ObjectHelper.requireNonNull(completableSource, \"completableSource is null\"); return RxJavaPlugins.onAssembly(new MaybeFromCompletable<T>(completableSource)); }\n\n    ### Response:", "ground_truth": "Wraps a CompletableSource into a Maybe.\n\n\nScheduler:\n{@code fromCompletable} does not operate by default on a particular {@link Scheduler}.\n\n@param  the target type\n@param completableSource the CompletableSource to convert from\n@return the new Maybe instance\n@throws NullPointerException if completable is null", "predict": "// This function converts an Completable into Maybe by wrapping its Completion in an Optional.\n    // It requires Completales to be of type CompletaleSource, for proper error handling"}, {"ID": 11, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewReset(in io.Reader, ignorePreflightErrors sets.String, forceReset bool, certsDir, criSocketPath string) (*Reset, error) { if !forceReset { fmt.Println(\"[reset] WARNING: Changes made to this host by 'kubeadm init' or 'kubeadm join' will be reverted.\") fmt.Print(\"[reset] Are you sure you want to proceed? [y/N]: \") s := bufio.NewScanner(in) s.Scan() if err := s.Err(); err != nil { return nil, err } if strings.ToLower(s.Text()) != \"y\" { return nil, errors.New(\"Aborted reset operation\") } } fmt.Println(\"[preflight] Running pre-flight checks\") if err := preflight.RunRootCheckOnly(ignorePreflightErrors); err != nil { return nil, err } return &Reset{ certsDir: certsDir, criSocketPath: criSocketPath, }, nil }\n\n    ### Response: // NewReset instantiate Reset struct.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @NonNull @SchedulerSupport(SchedulerSupport.NONE) public static <T> Maybe<T> fromSingle(SingleSource<T> singleSource) { ObjectHelper.requireNonNull(singleSource, \"singleSource is null\"); return RxJavaPlugins.onAssembly(new MaybeFromSingle<T>(singleSource)); }\n\n    ### Response:", "ground_truth": "Wraps a SingleSource into a Maybe.\n\n\nScheduler:\n{@code fromSingle} does not operate by default on a particular {@link Scheduler}.\n\n@param  the target type\n@param singleSource the SingleSource to convert from\n@return the new Maybe instance\n@throws NullPointerException if single is null", "predict": "// This function takes SingleSource and returns Maybe which contains Single (just one) Element of SingleSource"}, {"ID": 12, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _np_dtype(bit_res, discrete): \"\"\" Given the bit resolution of a signal, return the minimum numpy dtype used to store it. Parameters ---------- bit_res : int The bit resolution. discrete : bool Whether the dtype is to be int or float. Returns ------- dtype : str String numpy dtype used to store the signal of the given resolution \"\"\" bit_res = min(bit_res, 64) for np_res in [8, 16, 32, 64]: if bit_res <= np_res: break if discrete is True: return 'int' + str(np_res) else: # No float8 dtype return 'float' + str(max(np_res, 16))\n\n    ### Response: Given the bit resolution of a signal, return the minimum numpy dtype\n    used to store it.\n\n    Parameters\n    ----------\n    bit_res : int\n        The bit resolution.\n    discrete : bool\n        Whether the dtype is to be int or float.\n\n    Returns\n    -------\n    dtype : str\n        String numpy dtype used to store the signal of the given\n        resolution.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @SchedulerSupport(SchedulerSupport.NONE) public final Maybe<T> retry(long times, Predicate<? super Throwable> predicate) { return toFlowable().retry(times, predicate).singleElement(); }\n\n    ### Response:", "ground_truth": "Retries at most times or until the predicate returns false, whichever happens first.\n\n\nScheduler:\n{@code retry} does not operate by default on a particular {@link Scheduler}.\n\n@param times the number of times to resubscribe if the current Maybe fails\n@param predicate the predicate called with the failure Throwable and should return true to trigger a retry.\n@return the new Maybe instance", "predict": "The function may throw an exception and may repeat its invocation multiple times until succeeds or reaches its limit of allowed failures (configurable via predicate argument). It may also yield intermediate results during the invocation (configurable via SingleElementConverter)"}, {"ID": 13, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(e) { var t = this, item = $(e.currentTarget), path = item.attr('data-path'); t.showTour(path); }\n\n    ### Response: Process a tour selection.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> T requireNonNull(T object, String message) { if (object == null) { throw new NullPointerException(message); } return object; }\n\n    ### Response:", "ground_truth": "Verifies if the object is not null and returns it or throws a NullPointerException\nwith the given message.\n@param  the value type\n@param object the object to verify\n@param message the message to use with the NullPointerException\n@return the object itself\n@throws NullPointerException if object is null", "predict": "Check that the parameter is non-null, otherwise throw an exception."}, {"ID": 14, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (v *GenerateServiceResponse) GetFiles() (o map[string][]byte) { if v != nil && v.Files != nil { return v.Files } return }\n\n    ### Response: // GetFiles returns the value of Files if it is set or its\n// zero value if it is unset..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public static <T> Function<T, T> identity() { return (Function<T, T>)IDENTITY; }\n\n    ### Response:", "ground_truth": "Returns an identity function that simply returns its argument.\n@param  the input and output value type\n@return the identity function", "predict": "// This method provides an identity Function for any type of objects"}, {"ID": 15, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function request($class, $service, $method, $arguments = []) { // Get WSDL URL $wsdl = $this->getWsdlUri($class); // Init SOAP client $this->client = new SoapClient($wsdl, [ 'features' => SOAP_SINGLE_ELEMENT_ARRAYS, 'trace' => true, 'exceptions' => true, 'cache_wsdl' => WSDL_CACHE_MEMORY, ]); // Add authentication to the query $request = $this->addAuthHeader($arguments); $result = $this->client->__soapcall($service, array($method => $request)); if (!isset($result->ReturnValue)) { return; } else { // If more than one, return all return values if (is_array($result->ReturnValue) && count($result->ReturnValue) > 1) { return $result; } else { return $result->ReturnValue; } } }\n\n    ### Response: Forms and send a Web Service request to Schilling.\n\n@param string $class\n@param string $service\n@param string $method\n@param array  $arguments\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> Callable<T> justCallable(T value) { return new JustValue<Object, T>(value); }\n\n    ### Response:", "ground_truth": "Returns a Callable that returns the given value.\n@param  the value type\n@param value the value to return\n@return the new Callable instance", "predict": "Generates objects capable of invoking the given method for the given arguments"}, {"ID": 16, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def add_state_transition_function(self): \"\"\" add state transition function tag to pomdpx model Return --------------- string containing the xml for state transition tag \"\"\" state_transition_function = self.model['state_transition_function'] for condition in state_transition_function: condprob = etree.SubElement(self.transition_function, 'CondProb') self.add_conditions(condition, condprob) return self.__str__(self.transition_function)[:-1]\n\n    ### Response: add state transition function tag to pomdpx model\n\n        Return\n        ---------------\n        string containing the xml for state transition tag.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T, U> Function<T, U> justFunction(U value) { return new JustValue<T, U>(value); }\n\n    ### Response:", "ground_truth": "Returns a Function that ignores its parameter and returns the given value.\n@param  the function's input type\n@param  the value and return type of the function\n@param value the value to return\n@return the new Function instance", "predict": "\n    public static Function<Integer, Double> justFunction(Double d) {\n    return new FunctionWrapper<Integer, Double>(justFunction) {\n    @Override public Double apply(Integer x) {\n    return d;\n    }};\n    }"}, {"ID": 17, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getAlterTableEngine($table, $engine) { $engine = $this->dba->quote($engine); return sprintf(\"%s\\$this->execute(\\\"ALTER TABLE `%s` ENGINE=%s;\\\");\", $this->ind2, $table, $engine); }\n\n    ### Response: Generate Alter Table Engine.\n\n@param string $table\n@param string $engine\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T, U> Function<T, U> castFunction(Class<U> target) { return new CastToClass<T, U>(target); }\n\n    ### Response:", "ground_truth": "Returns a function that cast the incoming values via a Class object.\n@param  the input value type\n@param  the output and target type\n@param target the target class\n@return the new Function instance", "predict": "The function generates a Function from any given source type to any given target type, given as parameter, and uses reflection for castning objects to the given target type."}, {"ID": 18, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def setXlimits(self, lims): \"\"\"Sets the X axis limits of the trace plot :param lims: (min, max) of x axis, in same units as data :type lims: (float, float) \"\"\" # update all \"linked\", plots self.specPlot.setXlim(lims) for plot in self.responsePlots.values(): plot.setXlim(lims) # ridiculous... sizes = self.splittersw.sizes() if len(sizes) > 1: if self.badbadbad: sizes[0] +=1 sizes[1] -=1 else: sizes[0] -=1 sizes[1] +=1 self.badbadbad = not self.badbadbad self.splittersw.setSizes(sizes) self._ignore_range_signal = False\n\n    ### Response: Sets the X axis limits of the trace plot\n\n        :param lims: (min, max) of x axis, in same units as data\n        :type lims: (float, float).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @NonNull public static <T> UnicastSubject<T> create() { return new UnicastSubject<T>(bufferSize(), true); }\n\n    ### Response:", "ground_truth": "Creates an UnicastSubject with an internal buffer capacity hint 16.\n@param  the value type\n@return an UnicastSubject instance", "predict": "Creates and returns a SingleSubscriberSubject with the given buffer size and flag of SingleSubscriberSpsctio being NonNull"}, {"ID": 19, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function isValid() { $this->errors = array(); foreach ($this->rules() as $rule) { $fields = array_map('trim', explode(',', $rule[0])); $ruleName = $rule[1]; $params = array_slice($rule, 2); // check scenario if (!empty($rule['on'])) { $onScenarios = explode(',', $rule['on']); if (!in_array($this->getScenario(), $onScenarios)) { continue; } } if (!empty($rule['except'])) { $exceptScenarios = explode(',', $rule['except']); if (in_array($this->getScenario(), $exceptScenarios)) { continue; } } if (method_exists($this, $ruleName)) { // method foreach ($fields as $field) { $this->{$ruleName}($field, $params); } } else { // validator class $validatorClassName = $this->getValidatorClassNameByRuleName($ruleName); /* @var $validator \\Sokil\\Mongo\\Validator */ $validator = new $validatorClassName; if (!$validator instanceof Validator) { throw new Exception('Validator class must implement \\Sokil\\Mongo\\Validator class'); } $validator->validate($this, $fields, $params); } } return !$this->hasErrors(); }\n\n    ### Response: Check if filled model params is valid\n\n@return boolean\n\n@throws Exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @NonNull public static <T> UnicastSubject<T> create(int capacityHint) { return new UnicastSubject<T>(capacityHint, true); }\n\n    ### Response:", "ground_truth": "Creates an UnicastSubject with the given internal buffer capacity hint.\n@param  the value type\n@param capacityHint the hint to size the internal unbounded buffer\n@return an UnicastSubject instance", "predict": "Creates and initialize an unicast subject with given capacity hint."}, {"ID": 20, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *FakeCSINodes) Get(name string, options v1.GetOptions) (result *v1beta1.CSINode, err error) { obj, err := c.Fake. Invokes(testing.NewRootGetAction(csinodesResource, name), &v1beta1.CSINode{}) if obj == nil { return nil, err } return obj.(*v1beta1.CSINode), err }\n\n    ### Response: // Get takes name of the cSINode, and returns the corresponding cSINode object, and an error if there is any..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @NonNull public static <T> UnicastSubject<T> create(int capacityHint, Runnable onTerminate) { return new UnicastSubject<T>(capacityHint, onTerminate, true); }\n\n    ### Response:", "ground_truth": "Creates an UnicastSubject with the given internal buffer capacity hint and a callback for\nthe case when the single Subscriber cancels its subscription.\n\nThe callback, if not null, is called exactly once and\nnon-overlapped with any active replay.\n\n@param  the value type\n@param capacityHint the hint to size the internal unbounded buffer\n@param onTerminate the callback to run when the Subject is terminated or cancelled, null not allowed\n@return an UnicastSubject instance", "predict": "// Creates and initialize an unicast subject with given capacity and runnable for terminate the unicast subscription\n    // If given capacity and runnable arguments of the method is NonNull, then the method ensures the arguments during its invocation by passing Null Checking annotations to avoid Null Poiinter Exceptions\n    // If given arguments of the method is NonNull, then the method ensures the arguments during its invocation by passing Null Checking annotations to avoid Null Poiinter Exceptions\n    // If given arguments of the method is NonNull, then the method ensures the arguments during its invocation by passing Null Checking annotations to avoid Null Poiinter Exceptions\n    // If given arguments of the method is NonNull, then the method ensures the arguments during its invocation by passing Null Checking annotations to avoid Null Poipper Exceptions\n    // If given arguments of the method is NonNull, then the method ensures the arguments during its invocation by passing Null Checking annotations to avoid Null Poi"}, {"ID": 21, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getUserEmail() { return strlen($this->kontakt->getDataValue($this->mailColumn)) ? $this->kontakt->getDataValue($this->mailColumn) : $this->adresar->getDataValue($this->mailColumn); }\n\n    ### Response: Retrun user's mail address.\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @NonNull public static <T> UnicastSubject<T> create(boolean delayError) { return new UnicastSubject<T>(bufferSize(), delayError); }\n\n    ### Response:", "ground_truth": "Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag.\n\nThe callback, if not null, is called exactly once and\nnon-overlapped with any active replay.\nHistory: 2.0.8 - experimental\n@param  the value type\n@param delayError deliver pending onNext events before onError\n@return an UnicastSubject instance\n@since 2.2", "predict": "Creates and initialize an instance of the given unicast subject with the given arguments. Delays error until first subscription error if given parameter delayedError is true."}, {"ID": 22, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String render(Collection<Message5WH> messages){ StrBuilder ret = new StrBuilder(50); for(Message5WH msg : messages){ ret.appendln(this.render(msg)); } return ret.toString(); }\n\n    ### Response: Renders a collection of messages.\n@param messages the collection of messages to render\n@return string with rendered messages.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Throwable blockingGetError() { if (getCount() != 0) { try { BlockingHelper.verifyNonBlocking(); await(); } catch (InterruptedException ex) { dispose(); return ex; } } return error; }\n\n    ### Response:", "ground_truth": "Block until the latch is counted down and return the error received or null if no\nerror happened.\n@return the error received or null", "predict": "Blocking error."}, {"ID": 23, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (sdnStrategy) Validate(ctx context.Context, obj runtime.Object) field.ErrorList { return validation.ValidateNetNamespace(obj.(*networkapi.NetNamespace)) }\n\n    ### Response: // Validate validates a new NetNamespace.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Throwable blockingGetError(long timeout, TimeUnit unit) { if (getCount() != 0) { try { BlockingHelper.verifyNonBlocking(); if (!await(timeout, unit)) { dispose(); throw ExceptionHelper.wrapOrThrow(new TimeoutException(timeoutMessage(timeout, unit))); } } catch (InterruptedException ex) { dispose(); throw ExceptionHelper.wrapOrThrow(ex); } } return error; }\n\n    ### Response:", "ground_truth": "Block until the latch is counted down and return the error received or\nwhen the wait is interrupted or times out, null otherwise.\n@param timeout the timeout value\n@param unit the time unit\n@return the error received or null", "predict": "// BlockingGetError blocks until an error message is retrieved from the error queue of the error processor and\n    // throws the error message back to the caller."}, {"ID": 24, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setRange(int $start, int $end) : void { if ($end < $start) { throw new InvalidArgumentException('End must be greater or equal to start'); } if ($end === $start) { return; } --$end; $firstInt = $start >> 5; $lastInt = $end >> 5; for ($i = $firstInt; $i <= $lastInt; ++$i) { $firstBit = $i > $firstInt ? 0 : $start & 0x1f; $lastBit = $i < $lastInt ? 31 : $end & 0x1f; if (0 === $firstBit && 31 === $lastBit) { $mask = 0x7fffffff; } else { $mask = 0; for ($j = $firstBit; $j < $lastBit; ++$j) { $mask |= 1 << $j; } } $this->bits[$i] = $this->bits[$i] | $mask; } }\n\n    ### Response: Sets a range of bits.\n\n@throws InvalidArgumentException if end is smaller than start.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean blockingAwait(long timeout, TimeUnit unit) { if (getCount() != 0) { try { BlockingHelper.verifyNonBlocking(); if (!await(timeout, unit)) { dispose(); return false; } } catch (InterruptedException ex) { dispose(); throw ExceptionHelper.wrapOrThrow(ex); } } Throwable ex = error; if (ex != null) { throw ExceptionHelper.wrapOrThrow(ex); } return true; }\n\n    ### Response:", "ground_truth": "Block until the observer terminates and return true; return false if\nthe wait times out.\n@param timeout the timeout value\n@param unit the time unit\n@return true if the observer terminated in time, false otherwise", "predict": "Blocking wait until either the desired millis have elapsed, the desired number of non-blocking waits have occurred, or an error occurs."}, {"ID": 25, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(node, entity, props, content) { const hasContent = (!entity || entity.content !== null) && content !== null; const entityContent = hasContent ? ((entity && entity.content) || content || traverse.children(transform, node)) : null; const block = parseBemNode(entity); const bemNode = build(block, props, entityContent); // Extend blocks context with external plugins hContext if (node.data) { node.data.htmlAttributes && (bemNode.attrs = Object.assign({}, bemNode.attrs, node.data.htmlAttributes)); node.data.hProperties && (bemNode.hProps = node.data.hProperties); } return transform.augment(bemNode); }\n\n    ### Response: Transform MDAST node to bemNode\n\n@param {Object} node - MDAST node\n@param {Object} entity - bem entity, partial representation of bemNode\n@param {Object} [props] - bemNode properties\n@param {Object|Array|String} [content] - bemNode content\n@returns {Object} bemNode.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T, U> void drainMaxLoop(SimplePlainQueue<T> q, Subscriber<? super U> a, boolean delayError, Disposable dispose, QueueDrain<T, U> qd) { int missed = 1; for (;;) { for (;;) { boolean d = qd.done(); T v = q.poll(); boolean empty = v == null; if (checkTerminated(d, empty, a, delayError, q, qd)) { if (dispose != null) { dispose.dispose(); } return; } if (empty) { break; } long r = qd.requested(); if (r != 0L) { if (qd.accept(a, v)) { if (r != Long.MAX_VALUE) { qd.produced(1); } } } else { q.clear(); if (dispose != null) { dispose.dispose(); } a.onError(new MissingBackpressureException(\"Could not emit value due to lack of requests.\")); return; } } missed = qd.leave(-missed); if (missed == 0) { break; } } }\n\n    ### Response:", "ground_truth": "Drain the queue but give up with an error if there aren't enough requests.\n@param  the queue value type\n@param  the emission value type\n@param q the queue\n@param a the subscriber\n@param delayError true if errors should be delayed after all normal items\n@param dispose the disposable to call when termination happens and cleanup is necessary\n@param qd the QueueDrain instance that gives status information to the drain logic", "predict": "Drain queue of values from source to destination and signal when queue is full\n\npublic static <T, U> void drainLoop(SimplePlainQueue<T> queue, Subscriber<? super U> a, boolean delayError, Disposable d) { int missed = 1; for (;;) { for (;;) { boolean drainSucceeded; T v; drainSucceeded = queue.drain(v); if (drainSucceeded) { checkTerminated(drainSucceeded, queue.isFull, queue); } if (drainSucceeded) { queue.clear(); } if (d != null) d.dispose(); return; } queue.clear(); if (d != null) d.dispose(); queue.clear(); if (d != null) d.dispose(); queue.clear(); if (d != null) d.dispose(); queue.clear(); if (d != null) d.dispose"}, {"ID": 26, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def turn_on(host, did, token=None): \"\"\"Turn on bulb or fixture\"\"\" urllib3.disable_warnings() if token: scheme = \"https\" if not token: scheme = \"http\" token = \"1234567890\" url = ( scheme + '://' + host + '/gwr/gop.php?cmd=DeviceSendCommand&data=<gip><version>1</version><token>' + token + '</token><did>' + did + '</did><value>1</value></gip>&fmt=xml') response = requests.get(url, verify=False) if response.status_code == '200': return True else: return False\n\n    ### Response: Turn on bulb or fixture.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void request(Subscription s, int prefetch) { s.request(prefetch < 0 ? Long.MAX_VALUE : prefetch); }\n\n    ### Response:", "ground_truth": "Requests Long.MAX_VALUE if prefetch is negative or the exact\namount if prefetch is positive.\n@param s the Subscription to request from\n@param prefetch the prefetch value", "predict": "Request items from server and fill local data structure with items received."}, {"ID": 27, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def store(report, address): \"\"\"Stores the report on disk. \"\"\" now = time.time() secs = int(now) msecs = int((now - secs) * 1000) submitted_date = filename = None # avoids warnings while True: submitted_date = '%d.%03d' % (secs, msecs) filename = 'report_%s.txt' % submitted_date filename = os.path.join(DESTINATION, filename) if not os.path.exists(filename): break msecs += 1 lines = [l for l in report.split(b'\\n') if l] for line in lines: if line.startswith(b'date:'): date = line[5:] if date_format.match(date): with open(filename, 'wb') as fp: if not isinstance(address, bytes): address = address.encode('ascii') fp.write(b'submitted_from:' + address + b'\\n') fp.write(('submitted_date:%s\\n' % submitted_date) .encode('ascii')) fp.write(report) return None else: return \"invalid date\" return \"missing date field\"\n\n    ### Response: Stores the report on disk..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> void postComplete(Subscriber<? super T> actual, Queue<T> queue, AtomicLong state, BooleanSupplier isCancelled) { if (queue.isEmpty()) { actual.onComplete(); return; } if (postCompleteDrain(state.get(), actual, queue, state, isCancelled)) { return; } for (; ; ) { long r = state.get(); if ((r & COMPLETED_MASK) != 0L) { return; } long u = r | COMPLETED_MASK; // (active, r) -> (complete, r) transition if (state.compareAndSet(r, u)) { // if the requested amount was non-zero, drain the queue if (r != 0L) { postCompleteDrain(u, actual, queue, state, isCancelled); } return; } } }\n\n    ### Response:", "ground_truth": "Signals the completion of the main sequence and switches to post-completion replay mode.\n\n\nDon't modify the queue after calling this method!\n\n\nPost-completion backpressure handles the case when a source produces values based on\nrequests when it is active but more values are available even after its completion.\nIn this case, the onComplete() can't just emit the contents of the queue but has to\ncoordinate with the requested amounts. This requires two distinct modes: active and\ncompleted. In active mode, requests flow through and the queue is not accessed but\nin completed mode, requests no-longer reach the upstream but help in draining the queue.\n\nThe algorithm utilizes the most significant bit (bit 63) of a long value (AtomicLong) since\nrequest amount only goes up to Long.MAX_VALUE (bits 0-62) and negative values aren't\nallowed.\n\n@param  the value type emitted\n@param actual the target Subscriber to send events to\n@param queue the queue to drain if in the post-complete state\n@param state holds the request amount and the post-completed flag\n@param isCancelled a supplier that returns true if the drain has been cancelled", "predict": "Stores the report on disk.."}, {"ID": 28, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function turnOffAllClicks(selectors) { if (Array.isArray(selectors) || typeof selectors == \"object\") { for (var selector in selectors) { if (selectors.hasOwnProperty(selector)) { $(\"body\").off(\"click\", selectors[selector]); } } } else if (typeof selectors === \"string\") { $(\"body\").off(\"click\", selectors); } else { alert(\"ERROR: Not an array, string, or object passed in to turn off all clicks\"); } }\n\n    ### Response: When we're done with a \"pop-up\" where the user chooses what to do, we need to remove all other events bound on that whole \"pop-up\" so that it doesn't interfere with any future \"pop-ups\"..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected final void complete(R n) { long p = produced; if (p != 0) { BackpressureHelper.produced(this, p); } for (;;) { long r = get(); if ((r & COMPLETE_MASK) != 0) { onDrop(n); return; } if ((r & REQUEST_MASK) != 0) { lazySet(COMPLETE_MASK + 1); downstream.onNext(n); downstream.onComplete(); return; } value = n; if (compareAndSet(0, COMPLETE_MASK)) { return; } value = null; } }\n\n    ### Response:", "ground_truth": "Signals the given value and an onComplete if the downstream is ready to receive the final value.\n@param n the value to emit", "predict": "When the Subscriber has finished its work and provided its output to the caller, this listener sets its bit to notify the caller of its completion and sets the other bit to notify the listener that its work is done and to drop the reference to the Subscriber and its output."}, {"ID": 29, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setName(String name) throws ApplicationException { if (name == null) return; this.name = name.trim(); if (name.length() == 0) throw new ApplicationException(\"invalid attribute definition\", \"attribute [name] can't be a empty string\"); }\n\n    ### Response: set the value name\n\n@param name value to set\n@throws ApplicationException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") @Nullable public T getValue() { Object o = value; if (o != null && !NotificationLite.isError(o)) { return (T)value; } return null; }\n\n    ### Response:", "ground_truth": "Returns the contained value if this notification is an onNext\nsignal, null otherwise.\n@return the value contained or null\n@see #isOnNext()", "predict": "retrieve the Value from the Object o and convert it to its appropriate type"}, {"ID": 30, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def memoize(*methods) options = methods.last.kind_of?(Hash) ? methods.pop : {} method_freezer = Freezer.parse(options) || freezer methods.each { |method| memoize_method(method, method_freezer) } self end\n\n    ### Response: Memoize a list of methods\n\n @example\n   memoize :hash\n\n @param [Array] methods\n   a list of methods to memoize\n\n @return [self]\n\n @api public.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Nullable public Throwable getError() { Object o = value; if (NotificationLite.isError(o)) { return NotificationLite.getError(o); } return null; }\n\n    ### Response:", "ground_truth": "Returns the container Throwable error if this notification is an onError\nsignal, null otherwise.\n@return the Throwable error contained or null\n@see #isOnError()", "predict": "Gets the error, or null if no error occurred"}, {"ID": 31, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function parseNodeName($node) { $nodeName = $node->nodeName; if ($node->hasAttributes()) { $storeCodeNode = $node->attributes->getNamedItem('store_code'); $containerNameNode = $node->attributes->getNamedItem('name'); if ($containerNameNode) { $nodeName = $containerNameNode->nodeValue; if ($storeCodeNode) { $nodeName = $nodeName . \"|\" . $storeCodeNode->nodeValue; } } } return $nodeName; }\n\n    ### Response: Retrieve proper node name\n\n@param \\DOMNode $node The configuration XML node to parse\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean validate(Disposable upstream, Disposable next, Class<?> observer) { ObjectHelper.requireNonNull(next, \"next is null\"); if (upstream != null) { next.dispose(); if (upstream != DisposableHelper.DISPOSED) { reportDoubleSubscription(observer); } return false; } return true; }\n\n    ### Response:", "ground_truth": "Ensures that the upstream Disposable is null and returns true, otherwise\ndisposes the next Disposable and if the upstream is not the shared\ndisposed instance, reports a ProtocolViolationException due to\nmultiple subscribe attempts.\n@param upstream the upstream current value\n@param next the Disposable to check for nullness and dispose if necessary\n@param observer the class of the consumer to have a personalized\nerror message if the upstream already contains a non-cancelled Disposable.\n@return true if successful, false if the upstream was non null", "predict": "Validates given objects and reports double subscription\n\n* Helper method to detect and report double subscription * If objects have been double subscribed, the method may throw * ClassCastException during subscription and subscription* If objects have been double subscribed, the method may* ClassCastException during subscription and subscription* If objects have been double subscribed, the method may* ClassCastException during subscription and subscription* If objects have been double subscribed, the method may* ClassCastException during subscription and subscription* If objects have been double subscribed, the method may* ClassCastException during subscription and subscription* If objects have been double subscribed, the method may* ClassCastException during subscription and subscription* If objects have been double subscribed, the method may* ClassCastException during subscription and subscription* If objects have been double subscribed, the method may* ClassCastException during subscription and subscription* If objects have been double subscribed, the method may* ClassCastException during subscription and subscription* If objects have been double subscribed, the method may* ClassCast"}, {"ID": 32, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void harvestReturnValue( Object obj, CallableStatement callable, FieldDescriptor fmd, int index) throws PersistenceBrokerSQLException { try { // If we have a field descriptor, then we can harvest // the return value. if ((callable != null) && (fmd != null) && (obj != null)) { // Get the value and convert it to it's appropriate // java type. Object value = fmd.getJdbcType().getObjectFromColumn(callable, index); // Set the value of the persistent field. fmd.getPersistentField().set(obj, fmd.getFieldConversion().sqlToJava(value)); } } catch (SQLException e) { String msg = \"SQLException during the execution of harvestReturnValue\" + \" class=\" + obj.getClass().getName() + \",\" + \" field=\" + fmd.getAttributeName() + \" : \" + e.getMessage(); logger.error(msg,e); throw new PersistenceBrokerSQLException(msg, e); } }\n\n    ### Response: Harvest a single value that was returned by a callable statement.\n\n@param obj the object that will receive the value that is harvested.\n@param callable the CallableStatement that contains the value to harvest\n@param fmd the FieldDescriptor that identifies the field where the\nharvested value will be stord.\n@param index the parameter index.\n\n@throws PersistenceBrokerSQLException if a problem occurs..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean setOnce(AtomicReference<Disposable> upstream, Disposable next, Class<?> observer) { ObjectHelper.requireNonNull(next, \"next is null\"); if (!upstream.compareAndSet(null, next)) { next.dispose(); if (upstream.get() != DisposableHelper.DISPOSED) { reportDoubleSubscription(observer); } return false; } return true; }\n\n    ### Response:", "ground_truth": "Atomically updates the target upstream AtomicReference from null to the non-null\nnext Disposable, otherwise disposes next and reports a ProtocolViolationException\nif the AtomicReference doesn't contain the shared disposed indicator.\n@param upstream the target AtomicReference to update\n@param next the Disposable to set on it atomically\n@param observer the class of the consumer to have a personalized\nerror message if the upstream already contains a non-cancelled Disposable.\n@return true if successful, false if the content of the AtomicReference was non null", "predict": "Allows the observer to be notified once of the change in the source reference"}, {"ID": 33, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func stepInstructionOut(dbp Process, curthread Thread, fnname1, fnname2 string) error { for { if err := curthread.StepInstruction(); err != nil { return err } loc, err := curthread.Location() if err != nil || loc.Fn == nil || (loc.Fn.Name != fnname1 && loc.Fn.Name != fnname2) { if g := dbp.SelectedGoroutine(); g != nil { g.CurrentLoc = *loc } return curthread.SetCurrentBreakpoint() } } }\n\n    ### Response: // stepInstructionOut repeatedly calls StepInstruction until the current\n// function is neither fnname1 or fnname2.\n// This function is used to step out of runtime.Breakpoint as well as\n// runtime.debugCallV1..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean validate(Subscription upstream, Subscription next, Class<?> subscriber) { ObjectHelper.requireNonNull(next, \"next is null\"); if (upstream != null) { next.cancel(); if (upstream != SubscriptionHelper.CANCELLED) { reportDoubleSubscription(subscriber); } return false; } return true; }\n\n    ### Response:", "ground_truth": "Ensures that the upstream Subscription is null and returns true, otherwise\ncancels the next Subscription and if the upstream is not the shared\ncancelled instance, reports a ProtocolViolationException due to\nmultiple subscribe attempts.\n@param upstream the upstream current value\n@param next the Subscription to check for nullness and cancel if necessary\n@param subscriber the class of the consumer to have a personalized\nerror message if the upstream already contains a non-cancelled Subscription.\n@return true if successful, false if the upstream was non null", "predict": "// Validates that there is no double subscription for the given listener\n    // If there is a double subscription, reports an error and\n    // returns false\n    // If there is no double subscription, returns true\n    // If the listener does not support subscription,\n    // reports an error and returns false\n    // If the listener does not support unsubscription,\n    // reports an error and returns true"}, {"ID": 34, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function resolveFieldValue($name, $row, Fluent $control) { $value = null; $model = data_get($row, $name); if (!is_null($model)) { $value = $model; } if (is_null($control->get('value'))) { return $value; } $value = $control->get('value'); if ($value instanceof Closure) { $value = $value($row, $control); } return $value; }\n\n    ### Response: resolve field value\n\n@param String $name\n@param String $row\n@param Fluent $control\n@return String | mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean setOnce(AtomicReference<Subscription> upstream, Subscription next, Class<?> subscriber) { ObjectHelper.requireNonNull(next, \"next is null\"); if (!upstream.compareAndSet(null, next)) { next.cancel(); if (upstream.get() != SubscriptionHelper.CANCELLED) { reportDoubleSubscription(subscriber); } return false; } return true; }\n\n    ### Response:", "ground_truth": "Atomically updates the target upstream AtomicReference from null to the non-null\nnext Subscription, otherwise cancels next and reports a ProtocolViolationException\nif the AtomicReference doesn't contain the shared cancelled indicator.\n@param upstream the target AtomicReference to update\n@param next the Subscription to set on it atomically\n@param subscriber the class of the consumer to have a personalized\nerror message if the upstream already contains a non-cancelled Subscription.\n@return true if successful, false if the content of the AtomicReference was non null", "predict": "set once\n\nSets the reference once to the given subscription, cancels the next reference and reports a double subscription for the given listener if the reference wasn't already set to the given subscription."}, {"ID": 35, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setBackend(Backend\\BackendInterface $backend) { if ($this->psrCompatibleLoggerWasInjected) { throw new Exception('A PSR-3 logger was injected so setting backends is not possible. Create a new instance.', 1515342951935); } foreach ($this->backends as $backend) { $backend->close(); } $this->backends = new \\SplObjectStorage(); $this->backends->attach($backend); }\n\n    ### Response: Sets the given backend as the only backend for this Logger.\n\nThis method allows for conveniently injecting a backend through some Objects.yaml configuration.\n\n@param Backend\\BackendInterface $backend A backend implementation\n@return void\n@api\n@throws Exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long addCap(long a, long b) { long u = a + b; if (u < 0L) { return Long.MAX_VALUE; } return u; }\n\n    ### Response:", "ground_truth": "Adds two long values and caps the sum at Long.MAX_VALUE.\n@param a the first value\n@param b the second value\n@return the sum capped at Long.MAX_VALUE", "predict": "Calculates and returns the sum of x and y, where x and y are specified at the method level arguments, or returns Long.MAX_VALUE if either or both arguments or the sum is negative or greater than or equal to 2^31 - 1L (~4,294,967,296)."}, {"ID": 36, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static function readSubSet( $node ) { $item = array(); foreach( $node->children() as $nodeName => $nodeValue ) $item[$nodeName] = (string) $nodeValue; return $item; }\n\n    ### Response: Reads Subset of Node.\n@access\t\tprotected\n@static\n@param\t\tSimpleXMLElement\t$node\t\tSubset Node\n@return\t\tarray.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long multiplyCap(long a, long b) { long u = a * b; if (((a | b) >>> 31) != 0) { if (u / a != b) { return Long.MAX_VALUE; } } return u; }\n\n    ### Response:", "ground_truth": "Multiplies two long values and caps the product at Long.MAX_VALUE.\n@param a the first value\n@param b the second value\n@return the product capped at Long.MAX_VALUE", "predict": "Multiply and Cap Exponential Function"}, {"ID": 37, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _read_legacy_10x_mtx(path, var_names='gene_symbols', make_unique=True, cache=False): \"\"\" Read mex from output from Cell Ranger v2 or earlier versions \"\"\" path = Path(path) adata = read(path / 'matrix.mtx', cache=cache).T # transpose the data genes = pd.read_csv(path / 'genes.tsv', header=None, sep='\\t') if var_names == 'gene_symbols': var_names = genes[1] if make_unique: var_names = anndata.utils.make_index_unique(pd.Index(var_names)) adata.var_names = var_names adata.var['gene_ids'] = genes[0].values elif var_names == 'gene_ids': adata.var_names = genes[0] adata.var['gene_symbols'] = genes[1].values else: raise ValueError('`var_names` needs to be \\'gene_symbols\\' or \\'gene_ids\\'') adata.obs_names = pd.read_csv(path / 'barcodes.tsv', header=None)[0] return adata\n\n    ### Response: Read mex from output from Cell Ranger v2 or earlier versions.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long add(AtomicLong requested, long n) { for (;;) { long r = requested.get(); if (r == Long.MAX_VALUE) { return Long.MAX_VALUE; } long u = addCap(r, n); if (requested.compareAndSet(r, u)) { return r; } } }\n\n    ### Response:", "ground_truth": "Atomically adds the positive value n to the requested value in the AtomicLong and\ncaps the result at Long.MAX_VALUE and returns the previous value.\n@param requested the AtomicLong holding the current requested value\n@param n the value to add, must be positive (not verified)\n@return the original value before the add", "predict": "Longadd() adds x to the atomic Long requested and returns the new sum. If x > Long.MAX_VALUE, returns Long.MAX_VALUE; If x < 0, returns 0; Otherwise returns the new sum of requested and x."}, {"ID": 38, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function post(string $url, array $params = null, array $headers = null) { return static::quickRequest($url, self::POST, $params, $headers); }\n\n    ### Response: Make quick POST request\n\n@param string $url\n@param array|null $params\n@param array|null $headers\n\n@return Response\n@throws Exception\n@throws Json\\Exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static NullPointerException toNpe(Throwable ex) { NullPointerException npe = new NullPointerException(\"Actually not, but can't pass out an exception otherwise...\"); npe.initCause(ex); return npe; }\n\n    ### Response:", "ground_truth": "Creates a NullPointerException instance and sets the given Throwable as its initial cause.\n@param ex the Throwable instance to use as cause, not null (not verified)\n@return the created NullPointerException", "predict": "Wrap exception in Nullpointer exception\n    Exception wrap(Throwable exception);"}, {"ID": 39, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function iRunPhpDocumentorAgainstTheFile($file_path) { $tmp = self::getTmpFolder(); $fullPath = __DIR__ . '/../../' . $file_path; $this->iRunPhpdoc(\"-f $fullPath -t $tmp --config='{$this->getTempXmlConfigurationPath()}' --force\"); }\n\n    ### Response: Runs phpDocumentor with only the file that is provided in this command.\n\nThe configuration is explicitly disabled to prevent tainting via\nthe configuration.\n\n@param string $file_path\n\n@When /^I run phpDocumentor against the file \"([^\"]*)\"$/\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void add(Object o) { // if no value yet, create the first array if (size == 0) { head = new Object[capacityHint + 1]; tail = head; head[0] = o; indexInTail = 1; size = 1; } else // if the tail is full, create a new tail and link if (indexInTail == capacityHint) { Object[] t = new Object[capacityHint + 1]; t[0] = o; tail[capacityHint] = t; tail = t; indexInTail = 1; size++; } else { tail[indexInTail] = o; indexInTail++; size++; } }\n\n    ### Response:", "ground_truth": "Adds a new element to this list.\n@param o the object to add, nulls are accepted", "predict": "Creates an Object array with the given parameter and links it to the existing objects of the Object array."}, {"ID": 40, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func yaml_parser_fetch_block_entry(parser *yaml_parser_t) bool { // Check if the scanner is in the block context. if parser.flow_level == 0 { // Check if we are allowed to start a new entry. if !parser.simple_key_allowed { return yaml_parser_set_scanner_error(parser, \"\", parser.mark, \"block sequence entries are not allowed in this context\") } // Add the BLOCK-SEQUENCE-START token if needed. if !yaml_parser_roll_indent(parser, parser.mark.column, -1, yaml_BLOCK_SEQUENCE_START_TOKEN, parser.mark) { return false } } else { // It is an error for the '-' indicator to occur in the flow context, // but we let the Parser detect and report about it because the Parser // is able to point to the context. } // Reset any potential simple keys on the current flow level. if !yaml_parser_remove_simple_key(parser) { return false } // Simple keys are allowed after '-'. parser.simple_key_allowed = true // Consume the token. start_mark := parser.mark skip(parser) end_mark := parser.mark // Create the BLOCK-ENTRY token and append it to the queue. token := yaml_token_t{ typ: yaml_BLOCK_ENTRY_TOKEN, start_mark: start_mark, end_mark: end_mark, } yaml_insert_token(parser, -1, &token) return true }\n\n    ### Response: // Produce the BLOCK-ENTRY token..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void shutdown() { ScheduledExecutorService exec = PURGE_THREAD.getAndSet(null); if (exec != null) { exec.shutdownNow(); } POOLS.clear(); }\n\n    ### Response:", "ground_truth": "Stops the purge thread.", "predict": "The given piece of code implements the purge and monitoring thread shutdown procedure of the application."}, {"ID": 41, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getThisMonth() { if (!$this->_thisMonth) { $this->_thisMonth = new ThisMonthList($this->version, $this->solution['accountSid']); } return $this->_thisMonth; }\n\n    ### Response: Access the thisMonth.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ScheduledExecutorService create(ThreadFactory factory) { final ScheduledExecutorService exec = Executors.newScheduledThreadPool(1, factory); tryPutIntoPool(PURGE_ENABLED, exec); return exec; }\n\n    ### Response:", "ground_truth": "Creates a ScheduledExecutorService with the given factory.\n@param factory the thread factory\n@return the ScheduledExecutorService", "predict": "Create and schedule jobs to run on the given ThreadFactory"}, {"ID": 42, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _read_frame(self, length): \"\"\"Read a response frame from the PN532 of at most length bytes in size. Returns the data inside the frame if found, otherwise raises an exception if there is an error parsing the frame. Note that less than length bytes might be returned! \"\"\" # Read frame with expected length of data. response = self._read_data(length+8) logger.debug('Read frame: 0x{0}'.format(binascii.hexlify(response))) # Check frame starts with 0x01 and then has 0x00FF (preceeded by optional # zeros). if response[0] != 0x01: raise RuntimeError('Response frame does not start with 0x01!') # Swallow all the 0x00 values that preceed 0xFF. offset = 1 while response[offset] == 0x00: offset += 1 if offset >= len(response): raise RuntimeError('Response frame preamble does not contain 0x00FF!') if response[offset] != 0xFF: raise RuntimeError('Response frame preamble does not contain 0x00FF!') offset += 1 if offset >= len(response): raise RuntimeError('Response contains no data!') # Check length & length checksum match. frame_len = response[offset] if (frame_len + response[offset+1]) & 0xFF != 0: raise RuntimeError('Response length checksum did not match length!') # Check frame checksum value matches bytes. checksum = reduce(self._uint8_add, response[offset+2:offset+2+frame_len+1], 0) if checksum != 0: raise RuntimeError('Response checksum did not match expected value!') # Return frame data. return response[offset+2:offset+2+frame_len]\n\n    ### Response: Read a response frame from the PN532 of at most length bytes in size.\n        Returns the data inside the frame if found, otherwise raises an exception\n        if there is an error parsing the frame.  Note that less than length bytes\n        might be returned!.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final void setSubscription(Subscription s) { if (cancelled) { s.cancel(); return; } ObjectHelper.requireNonNull(s, \"s is null\"); if (get() == 0 && compareAndSet(0, 1)) { Subscription a = actual; if (a != null && cancelOnReplace) { a.cancel(); } actual = s; long r = requested; if (decrementAndGet() != 0) { drainLoop(); } if (r != 0L) { s.request(r); } return; } Subscription a = missedSubscription.getAndSet(s); if (a != null && cancelOnReplace) { a.cancel(); } drain(); }\n\n    ### Response:", "ground_truth": "Atomically sets a new subscription.\n@param s the subscription to set, not null (verified)", "predict": "\n    The method sets the given subscription s to be active if the cancelled flag\n    does not indicate that the listener has been unsubscribed already, and makes\n    sure that the listener s is run once (but may run again because the listener\n    may be added again because the listener may be added again because the listener\n    may be added again because the listener may be added again because the listener\n    may be added again because the listener may be added again because the listener\n    may be added again because the listener may be added again because the listener\n    may be added again because the listener may be added again because the listener\n    may be added again because the listener may be added again because the listener\n    may be added again because the listener may be added again because the listener\n    may be added again because the listener may be added again because the listener\n    may be added again because the listener may be added again because the listener\n    may be added again because the listener may be added again because the listener\n    may"}, {"ID": 43, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def HuntIDToInt(hunt_id): \"\"\"Convert hunt id string to an integer.\"\"\" # TODO(user): This code is only needed for a brief period of time when we # allow running new rel-db flows with old aff4-based hunts. In this scenario # parent_hunt_id is effectively not used, but it has to be an # integer. Stripping \"H:\" from hunt ids then makes the rel-db happy. Remove # this code when hunts are rel-db only. if hunt_id.startswith(\"H:\"): hunt_id = hunt_id[2:] try: return int(hunt_id or \"0\", 16) except ValueError as e: raise HuntIDIsNotAnIntegerError(e)\n\n    ### Response: Convert hunt id string to an integer..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void emitLoop() { for (;;) { AppendOnlyLinkedArrayList<Object> q; synchronized (this) { q = queue; if (q == null) { emitting = false; return; } queue = null; } q.forEachWhile(this); } }\n\n    ### Response:", "ground_truth": "Loops until all notifications in the queue has been processed.", "predict": "Emit items from the queue until queue is empty."}, {"ID": 44, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void evictEntry(Node node) { data.remove(node.key); node.remove(); if (node.freq.isEmpty()) { node.freq.remove(); } }\n\n    ### Response: Removes the entry..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static RuntimeException wrapOrThrow(Throwable error) { if (error instanceof Error) { throw (Error)error; } if (error instanceof RuntimeException) { return (RuntimeException)error; } return new RuntimeException(error); }\n\n    ### Response:", "ground_truth": "If the provided Throwable is an Error this method\nthrows it, otherwise returns a RuntimeException wrapping the error\nif that error is a checked exception.\n@param error the error to wrap or throw\n@return the (wrapped) error", "predict": "Wrap or throw exception"}, {"ID": 45, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public MediaCreditList getEpisodeCredits(int tvID, int seasonNumber, int episodeNumber) throws MovieDbException { return tmdbEpisodes.getEpisodeCredits(tvID, seasonNumber, episodeNumber); }\n\n    ### Response: Get the TV episode credits by combination of season and episode number.\n\n@param tvID tvID\n@param seasonNumber seasonNumber\n@param episodeNumber episodeNumber\n@return\n@throws MovieDbException exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static List<Throwable> flatten(Throwable t) { List<Throwable> list = new ArrayList<Throwable>(); ArrayDeque<Throwable> deque = new ArrayDeque<Throwable>(); deque.offer(t); while (!deque.isEmpty()) { Throwable e = deque.removeFirst(); if (e instanceof CompositeException) { CompositeException ce = (CompositeException) e; List<Throwable> exceptions = ce.getExceptions(); for (int i = exceptions.size() - 1; i >= 0; i--) { deque.offerFirst(exceptions.get(i)); } } else { list.add(e); } } return list; }\n\n    ### Response:", "ground_truth": "Returns a flattened list of Throwables from tree-like CompositeException chain.\n@param t the starting throwable\n@return the list of Throwables flattened in a depth-first manner", "predict": "Flatten the given exception into a single exception with all its exception objects concatenated together into one single exception objects."}, {"ID": 46, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_config(self, config='running-config', params=None, as_string=False): \"\"\" Retreives the config from the node This method will retrieve the config from the node as either a string or a list object. The config to retrieve can be specified as either the startup-config or the running-config. Args: config (str): Specifies to return either the nodes startup-config or running-config. The default value is the running-config params (str): A string of keywords to append to the command for retrieving the config. as_string (boo): Flag that determines the response. If True, then the configuration is returned as a raw string. If False, then the configuration is returned as a list. The default value is False Returns: This method will return either a string or a list depending on the states of the as_string keyword argument. Raises: TypeError: If the specified config is not one of either 'running-config' or 'startup-config' \"\"\" if config not in ['startup-config', 'running-config']: raise TypeError('invalid config name specified') command = 'show %s' % config if params: command += ' %s' % params result = self.run_commands(command, 'text') if as_string: return str(result[0]['output']).strip() return str(result[0]['output']).split('\\n')\n\n    ### Response: Retreives the config from the node\n\n        This method will retrieve the config from the node as either a string\n        or a list object.  The config to retrieve can be specified as either\n        the startup-config or the running-config.\n\n        Args:\n            config (str): Specifies to return either the nodes startup-config\n                or running-config.  The default value is the running-config\n            params (str): A string of keywords to append to the command for\n                retrieving the config.\n            as_string (boo): Flag that determines the response.  If True, then\n                the configuration is returned as a raw string.  If False, then\n                the configuration is returned as a list.  The default value is\n                False\n\n        Returns:\n            This method will return either a string or a list depending on the\n            states of the as_string keyword argument.\n\n        Raises:\n            TypeError: If the specified config is not one of either\n                'running-config' or 'startup-config'.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public static <E extends Throwable> Exception throwIfThrowable(Throwable e) throws E { if (e instanceof Exception) { return (Exception)e; } throw (E)e; }\n\n    ### Response:", "ground_truth": "Workaround for Java 6 not supporting throwing a final Throwable from a catch block.\n@param  the generic exception type\n@param e the Throwable error to return or throw\n@return the Throwable e if it is a subclass of Exception\n@throws E the generic exception thrown", "predict": "Throw If Throwable\n\n    @SuppressWarnings(\"unchecked\")\n    public static <E extends Throwable> Exception throwIfThrowable(Throwable e) throws E {\n    // If exception e extends exception,\n    // return e as an exception\n    if (e instanceof Exception) {\n    return (Exception) e;\n    }\n    // Else,\n    // throw exception e as an exception\n    throw (E) e;\n    }"}, {"ID": 47, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def asyncPipeFetch(context=None, _INPUT=None, conf=None, **kwargs): \"\"\"A source that asynchronously fetches and parses one or more feeds to return the feed entries. Loopable. Parameters ---------- context : pipe2py.Context object _INPUT : asyncPipe like object (twisted Deferred iterable of items) conf : { 'URL': [ {'type': 'url', 'value': <url1>}, {'type': 'url', 'value': <url2>}, {'type': 'url', 'value': <url3>}, ] } Returns ------- _OUTPUT : twisted.internet.defer.Deferred generator of items \"\"\" splits = yield asyncGetSplits(_INPUT, conf['URL'], **cdicts(opts, kwargs)) items = yield asyncStarMap(asyncParseResult, splits) _OUTPUT = utils.multiplex(items) returnValue(_OUTPUT)\n\n    ### Response: A source that asynchronously fetches and parses one or more feeds to\n    return the feed entries. Loopable.\n\n    Parameters\n    ----------\n    context : pipe2py.Context object\n    _INPUT : asyncPipe like object (twisted Deferred iterable of items)\n    conf : {\n        'URL': [\n            {'type': 'url', 'value': },\n            {'type': 'url', 'value': },\n            {'type': 'url', 'value': },\n        ]\n    }\n\n    Returns\n    -------\n    _OUTPUT : twisted.internet.defer.Deferred generator of items.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void clear() { if (disposed) { return; } OpenHashSet<Disposable> set; synchronized (this) { if (disposed) { return; } set = resources; resources = null; } dispose(set); }\n\n    ### Response:", "ground_truth": "Atomically clears the container, then disposes all the previously contained Disposables.", "predict": "The method clears any unused objects by disposing of any objects that have been added but not otherwise used (i.e., objects that are in the Disposable pool but that have not been retrieved via the get() method of the pool.)."}, {"ID": 48, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get(self, name): \"\"\"Get a GObject property. The value of the property is converted to a Python value. \"\"\" logger.debug('VipsObject.get: name = %s', name) pspec = self._get_pspec(name) if pspec is None: raise Error('Property not found.') gtype = pspec.value_type gv = pyvips.GValue() gv.set_type(gtype) go = ffi.cast('GObject *', self.pointer) gobject_lib.g_object_get_property(go, _to_bytes(name), gv.pointer) return gv.get()\n\n    ### Response: Get a GObject property.\n\n        The value of the property is converted to a Python value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int size() { if (disposed) { return 0; } synchronized (this) { if (disposed) { return 0; } OpenHashSet<Disposable> set = resources; return set != null ? set.size() : 0; } }\n\n    ### Response:", "ground_truth": "Returns the number of currently held Disposables.\n@return the number of currently held Disposables", "predict": "Get the size of the Disposable objects owned by this resource manager."}, {"ID": 49, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function get_version_data() { $api_params = array( 'edd_action' => 'get_version', 'version' => $this->product->get_version(), 'license' => $this->license_key, 'name' => $this->product->get_name(), 'slug' => $this->product->get_slug(), 'author' => $this->get_distributor_name(), 'url' => rawurlencode( home_url() ), ); $response = wp_remote_get( $this->get_api_url(), array( 'timeout' => 15, 'sslverify' => false, 'body' => $api_params, ) ); if ( is_wp_error( $response ) || 200 != wp_remote_retrieve_response_code( $response ) ) { return false; } $update_data = json_decode( wp_remote_retrieve_body( $response ) ); if ( ! is_object( $update_data ) ) { return false; } return $update_data; }\n\n    ### Response: Check remote api for latest version.\n\n@return bool|mixed Update api response..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public static <T, R> boolean tryScalarXMapSubscribe(ObservableSource<T> source, Observer<? super R> observer, Function<? super T, ? extends ObservableSource<? extends R>> mapper) { if (source instanceof Callable) { T t; try { t = ((Callable<T>)source).call(); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptyDisposable.error(ex, observer); return true; } if (t == null) { EmptyDisposable.complete(observer); return true; } ObservableSource<? extends R> r; try { r = ObjectHelper.requireNonNull(mapper.apply(t), \"The mapper returned a null ObservableSource\"); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptyDisposable.error(ex, observer); return true; } if (r instanceof Callable) { R u; try { u = ((Callable<R>)r).call(); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptyDisposable.error(ex, observer); return true; } if (u == null) { EmptyDisposable.complete(observer); return true; } ScalarDisposable<R> sd = new ScalarDisposable<R>(observer, u); observer.onSubscribe(sd); sd.run(); } else { r.subscribe(observer); } return true; } return false; }\n\n    ### Response:", "ground_truth": "Tries to subscribe to a possibly Callable source's mapped ObservableSource.\n@param  the input value type\n@param  the output value type\n@param source the source ObservableSource\n@param observer the subscriber\n@param mapper the function mapping a scalar value into an ObservableSource\n@return true if successful, false if the caller should continue with the regular path.", "predict": "Attempt to map the source observable to its corresponding R observable and attempt to run the corresponding listener consumers"}, {"ID": 50, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function initServer() { $this->http = new Object(); $this->server = new Object(); foreach ($_SERVER as $key => $val) { $key = str_replace('request_', '', strtolower($key)); if (substr($key, 0, 5) === 'http_') { $this->http->{Util::_toCamel(substr($key, 5))} = $val; } elseif (substr($key, 0, 7) === 'server_') { $this->server->{Util::_toCamel(substr($key, 7))} = $val; } else { $this->{Util::_toCamel($key)} = $val; } } }\n\n    ### Response: initializes server values.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T, U> Observable<U> scalarXMap(T value, Function<? super T, ? extends ObservableSource<? extends U>> mapper) { return RxJavaPlugins.onAssembly(new ScalarXMapObservable<T, U>(value, mapper)); }\n\n    ### Response:", "ground_truth": "Maps a scalar value into an Observable and emits its values.\n\n@param  the scalar value type\n@param  the output value type\n@param value the scalar value to map\n@param mapper the function that gets the scalar value and should return\nan ObservableSource that gets streamed\n@return the new Observable instance", "predict": "Maps values emitted by the source observable to values of type U determined by the specified mapper function"}, {"ID": 51, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func seekReader(r io.Reader, offset, size int64) (io.Reader, error) { // attempt to resolve r as a seeker and setup the offset. seeker, ok := r.(io.Seeker) if ok { nn, err := seeker.Seek(offset, io.SeekStart) if nn != offset { return nil, errors.Wrapf(err, \"failed to seek to offset %v\", offset) } if err != nil { return nil, err } return r, nil } // ok, let's try io.ReaderAt! readerAt, ok := r.(io.ReaderAt) if ok && size > offset { sr := io.NewSectionReader(readerAt, offset, size) return sr, nil } // well then, let's just discard up to the offset n, err := copyWithBuffer(ioutil.Discard, io.LimitReader(r, offset)) if err != nil { return nil, errors.Wrap(err, \"failed to discard to offset\") } if n != offset { return nil, errors.Errorf(\"unable to discard to offset\") } return r, nil }\n\n    ### Response: // seekReader attempts to seek the reader to the given offset, either by\n// resolving `io.Seeker`, by detecting `io.ReaderAt`, or discarding\n// up to the given offset..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <U> boolean accept(Subscriber<? super U> subscriber) { Object[] a = head; final int c = capacity; while (a != null) { for (int i = 0; i < c; i++) { Object o = a[i]; if (o == null) { break; } if (NotificationLite.acceptFull(o, subscriber)) { return true; } } a = (Object[])a[c]; } return false; }\n\n    ### Response:", "ground_truth": "Interprets the contents as NotificationLite objects and calls\nthe appropriate Subscriber method.\n\n@param  the target type\n@param subscriber the subscriber to emit the events to\n@return true if a terminal event has been reached", "predict": "// This method iterates over the contents of the FIFO to see if any objects\n// in it match the given listener parameter. If objects are added to the FIFO\n// during the iteration, the iteration may stop short of its normal\n// completion point because the listener may no longer be a valid listener\n// for objects added after the iteration began."}, {"ID": 52, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def expand_range(arg, value_delimiter=',', range_delimiter='-'): \"\"\" Expands a delimited string of ranged integers into a list of strings :param arg: The string range to expand :param value_delimiter: The delimiter that separates values :param range_delimiter: The delimiter that signifies a range of values :return: An array of expanded string values :rtype: list \"\"\" values = list() expanded = arg.split(value_delimiter) for item in expanded: if range_delimiter in item: start, end = item.split(range_delimiter) _expand = range(int(start), int(end) + 1) values.extend([str(x) for x in _expand]) else: values.extend([item]) return [str(x) for x in values]\n\n    ### Response: Expands a delimited string of ranged integers into a list of strings\n\n    :param arg: The string range to expand\n    :param value_delimiter: The delimiter that separates values\n    :param range_delimiter: The delimiter that signifies a range of values\n\n    :return: An array of expanded string values\n    :rtype: list.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <U> boolean accept(Observer<? super U> observer) { Object[] a = head; final int c = capacity; while (a != null) { for (int i = 0; i < c; i++) { Object o = a[i]; if (o == null) { break; } if (NotificationLite.acceptFull(o, observer)) { return true; } } a = (Object[])a[c]; } return false; }\n\n    ### Response:", "ground_truth": "Interprets the contents as NotificationLite objects and calls\nthe appropriate Observer method.\n\n@param  the target type\n@param observer the observer to emit the events to\n@return true if a terminal event has been reached", "predict": "Boolean indicates if an observer can observe objects of type U"}, {"ID": 53, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public CreatorProperty findPropertyValue(String name) { return properties().stream().filter(p->name.equals(p.getName())).findFirst().orElse(EMPTY); }\n\n    ### Response: Gets a property by it's name\n@param name the name of the property to find\n@return the property or EMPTY.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void start() { if (SubscriptionHelper.setOnce(upstream, EmptySubscription.INSTANCE)) { queue = new SpscArrayQueue<T>(bufferSize); } }\n\n    ### Response:", "ground_truth": "Initializes this Processor by setting an upstream Subscription that\nignores request amounts, uses a fixed buffer\nand allows using the onXXX and offer methods\nafterwards.", "predict": "Starts the listener, sets up the listener queue and sets the source listener to the source listener"}, {"ID": 54, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getLocalizedLiteralsForLocale(Locale $locale) { if (isset($this->localizedLiterals[(string)$locale])) { return $this->localizedLiterals[(string)$locale]; } $model = $this->cldrRepository->getModelForLocale($locale); $localizedLiterals['months'] = $this->parseLocalizedLiterals($model, 'month'); $localizedLiterals['days'] = $this->parseLocalizedLiterals($model, 'day'); $localizedLiterals['quarters'] = $this->parseLocalizedLiterals($model, 'quarter'); $localizedLiterals['dayPeriods'] = $this->parseLocalizedLiterals($model, 'dayPeriod'); $localizedLiterals['eras'] = $this->parseLocalizedEras($model); return $this->localizedLiterals[(string)$locale] = $localizedLiterals; }\n\n    ### Response: Returns literals array for locale provided.\n\nIf array was not generated earlier, it will be generated and cached.\n\n@param Locale $locale\n@return array An array with localized literals.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void startUnbounded() { if (SubscriptionHelper.setOnce(upstream, EmptySubscription.INSTANCE)) { queue = new SpscLinkedArrayQueue<T>(bufferSize); } }\n\n    ### Response:", "ground_truth": "Initializes this Processor by setting an upstream Subscription that\nignores request amounts, uses an unbounded buffer\nand allows using the onXXX and offer methods\nafterwards.", "predict": "Starts unbounded source listener queue with given capacity and sets queue listener to be the given source listener."}, {"ID": 55, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def frame_paths(frame_type, start_time, end_time, server=None, url_type='file'): \"\"\"Return the paths to a span of frame files Parameters ---------- frame_type : string The string representation of the frame type (ex. 'H1_ER_C00_L1') start_time : int The start time that we need the frames to span. end_time : int The end time that we need the frames to span. server : {None, SERVER:PORT string}, optional Optional string to specify the datafind server to use. By default an attempt is made to use a local datafind server. url_type : string Returns only frame URLs with a particular scheme or head such as \"file\" or \"gsiftp\". Default is \"file\", which queries locally stored frames. Option can be disabled if set to None. Returns ------- paths : list of paths The list of paths to the frame files. Examples -------- >>> paths = frame_paths('H1_LDAS_C02_L2', 968995968, 968995968+2048) \"\"\" site = frame_type[0] connection = datafind_connection(server) connection.find_times(site, frame_type, gpsstart=start_time, gpsend=end_time) cache = connection.find_frame_urls(site, frame_type, start_time, end_time,urltype=url_type) paths = [entry.path for entry in cache] return paths\n\n    ### Response: Return the paths to a span of frame files\n\n    Parameters\n    ----------\n    frame_type : string\n        The string representation of the frame type (ex. 'H1_ER_C00_L1')\n    start_time : int\n        The start time that we need the frames to span.\n    end_time : int\n        The end time that we need the frames to span.\n    server : {None, SERVER:PORT string}, optional\n        Optional string to specify the datafind server to use. By default an\n        attempt is made to use a local datafind server.\n    url_type : string\n        Returns only frame URLs with a particular scheme or head such\n        as \"file\" or \"gsiftp\". Default is \"file\", which queries locally\n        stored frames. Option can be disabled if set to None.\n    Returns\n    -------\n    paths : list of paths\n        The list of paths to the frame files.\n\n    Examples\n    --------\n    >>> paths = frame_paths('H1_LDAS_C02_L2', 968995968, 968995968+2048).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean offer(T t) { if (once.get()) { return false; } ObjectHelper.requireNonNull(t, \"offer called with null. Null values are generally not allowed in 2.x operators and sources.\"); if (fusionMode == QueueSubscription.NONE) { if (queue.offer(t)) { drain(); return true; } } return false; }\n\n    ### Response:", "ground_truth": "Tries to offer an item into the internal queue and returns false\nif the queue is full.\n@param t the item to offer, not null\n@return true if successful, false if the queue is full", "predict": "Offload values to local queue to avoid unnecessary blocking of single producer thread because of many consumers trying to acquire SingleLock during SingleProducerSingleConsumer design pattern for a given resource (in this case, offering values to local queue)"}, {"ID": 56, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Clustering<SubspaceModel> computeClusters(Relation<V> database, DiSHClusterOrder clusterOrder) { final int dimensionality = RelationUtil.dimensionality(database); // extract clusters Object2ObjectOpenCustomHashMap<long[], List<ArrayModifiableDBIDs>> clustersMap = extractClusters(database, clusterOrder); logClusterSizes(\"Step 1: extract clusters\", dimensionality, clustersMap); // check if there are clusters < minpts checkClusters(database, clustersMap); logClusterSizes(\"Step 2: check clusters\", dimensionality, clustersMap); // sort the clusters List<Cluster<SubspaceModel>> clusters = sortClusters(database, clustersMap); if(LOG.isVerbose()) { StringBuilder msg = new StringBuilder(\"Step 3: sort clusters\"); for(Cluster<SubspaceModel> c : clusters) { msg.append('\\n').append(BitsUtil.toStringLow(c.getModel().getSubspace().getDimensions(), dimensionality)).append(\" ids \").append(c.size()); } LOG.verbose(msg.toString()); } // build the hierarchy Clustering<SubspaceModel> clustering = new Clustering<>(\"DiSH clustering\", \"dish-clustering\"); buildHierarchy(database, clustering, clusters, dimensionality); if(LOG.isVerbose()) { StringBuilder msg = new StringBuilder(\"Step 4: build hierarchy\"); for(Cluster<SubspaceModel> c : clusters) { msg.append('\\n').append(BitsUtil.toStringLow(c.getModel().getSubspace().getDimensions(), dimensionality)).append(\" ids \").append(c.size()); for(It<Cluster<SubspaceModel>> iter = clustering.getClusterHierarchy().iterParents(c); iter.valid(); iter.advance()) { msg.append(\"\\n parent \").append(iter.get()); } for(It<Cluster<SubspaceModel>> iter = clustering.getClusterHierarchy().iterChildren(c); iter.valid(); iter.advance()) { msg.append(\"\\n child \").append(iter.get()); } } LOG.verbose(msg.toString()); } // build result for(Cluster<SubspaceModel> c : clusters) { if(clustering.getClusterHierarchy().numParents(c) == 0) { clustering.addToplevelCluster(c); } } return clustering; }\n\n    ### Response: Computes the hierarchical clusters according to the cluster order.\n\n@param database the database holding the objects\n@param clusterOrder the cluster order.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Nullable public Disposable get() { Disposable d = resource.get(); if (d == DisposableHelper.DISPOSED) { return Disposables.disposed(); } return d; }\n\n    ### Response:", "ground_truth": "Returns the currently contained Disposable or null if this container is empty.\n@return the current Disposable, may be null", "predict": "The Disposable provides access to the resource for disposal"}, {"ID": 57, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Handler(channels = Self.class) public void onRegistered(NioRegistration.Completed event) throws InterruptedException, IOException { NioHandler handler = event.event().handler(); if (handler == this) { if (event.event().get() == null) { fire(new Error(event, \"Registration failed, no NioDispatcher?\")); return; } registration = event.event().get(); purger = new Purger(); purger.start(); fire(new Ready(serverSocketChannel.getLocalAddress())); return; } if (handler instanceof TcpChannelImpl) { TcpChannelImpl channel = (TcpChannelImpl) handler; channel.downPipeline() .fire(new Accepted(channel.nioChannel().getLocalAddress(), channel.nioChannel().getRemoteAddress(), false, Collections.emptyList()), channel); channel.registrationComplete(event.event()); } }\n\n    ### Response: Handles the successful channel registration.\n\n@param event the event\n@throws InterruptedException the interrupted exception\n@throws IOException Signals that an I/O exception has occurred..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final void complete(T value) { int state = get(); if ((state & (FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED)) != 0) { return; } Observer<? super T> a = downstream; if (state == FUSED_EMPTY) { this.value = value; lazySet(FUSED_READY); a.onNext(null); } else { lazySet(TERMINATED); a.onNext(value); } if (get() != DISPOSED) { a.onComplete(); } }\n\n    ### Response:", "ground_truth": "Complete the target with a single value or indicate there is a value available in\nfusion mode.\n@param value the value to signal, not null (not verified)", "predict": "Finishes the subscription by disposing the listener with the given value and sets the state to FUSED_EMPTY to notify the listener for the next listener subscribed to this listener."}, {"ID": 58, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (listen *StopListener) Accept() (net.Conn, error) { conn, err := listen.TCPListener.Accept() if !listen.active { return nil, StopRequestError{} // ### return, stop requested ### } if err != nil { return nil, err // ### return, error ### } return conn, err }\n\n    ### Response: // Accept is analogous to net.TCPListener.Accept but may return a connection\n// closed error if the connection was requested to shut down..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final void error(Throwable t) { int state = get(); if ((state & (FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED)) != 0) { RxJavaPlugins.onError(t); return; } lazySet(TERMINATED); downstream.onError(t); }\n\n    ### Response:", "ground_truth": "Complete the target with an error signal.\n@param t the Throwable to signal, not null (not verified)", "predict": "The error() method sets the error in the current listener instance to the given exception and\n// notifies the listener observable that there was an error during the operation of the listener observable."}, {"ID": 59, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def provide(self, cls): \"\"\"Provides an instance of the given class. Args: cls: a class (not an instance) Returns: an instance of cls Raises: Error: an instance of cls is not providable \"\"\" support.verify_class_type(cls, 'cls') if not self._is_injectable_fn(cls): provide_loc = locations.get_back_frame_loc() raise errors.NonExplicitlyBoundClassError(provide_loc, cls) try: return self._obj_provider.provide_class( cls, self._injection_context_factory.new(cls.__init__), direct_init_pargs=[], direct_init_kwargs={}) except errors.Error as e: if self._use_short_stack_traces: raise e else: raise\n\n    ### Response: Provides an instance of the given class.\n\n        Args:\n          cls: a class (not an instance)\n        Returns:\n          an instance of cls\n        Raises:\n          Error: an instance of cls is not providable.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final void complete() { int state = get(); if ((state & (FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED)) != 0) { return; } lazySet(TERMINATED); downstream.onComplete(); }\n\n    ### Response:", "ground_truth": "Complete the target without any value.", "predict": "\n    Completes the computation of the source observable by disposing of the source and its consumers and sets the source to the terminal state of Disposed."}, {"ID": 60, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function getInstance($basepath = null, $classprefix = 'JInstallerAdapter', $adapterfolder = 'adapter') { if ($basepath === null) { $basepath = JPATH_LIBRARIES . '/cms/installer'; } return parent::getInstance($basepath, $classprefix, $adapterfolder); }\n\n    ### Response: Returns the global Installer object, only creating it if it doesn't already exist.\n\n@param   string  $basepath       Base Path of the adapters\n@param   string  $classprefix    Class prefix of adapters\n@param   string  $adapterfolder  Name of folder to append to base path\n\n@return  JInstaller  An installer object\n\n@since   3.1.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @BackpressureSupport(BackpressureKind.FULL) @SchedulerSupport(SchedulerSupport.NONE) public final <R> Flowable<R> concatMapDelayError(Function<? super T, ? extends Publisher<? extends R>> mapper) { return concatMapDelayError(mapper, 2, true); }\n\n    ### Response:", "ground_truth": "Maps each of the items into a Publisher, subscribes to them one after the other,\none at a time and emits their values in order\nwhile delaying any error from either this or any of the inner Publishers\ntill all of them terminate.\n\n\nBackpressure:\nThe operator honors backpressure from downstream. Both this and the inner {@code Publisher}s are\nexpected to honor backpressure as well. If the source {@code Publisher} violates the rule, the operator will\nsignal a {@code MissingBackpressureException}. If any of the inner {@code Publisher}s doesn't honor\nbackpressure, that may throw an {@code IllegalStateException} when that\n{@code Publisher} completes.\nScheduler:\n{@code concatMapDelayError} does not operate by default on a particular {@link Scheduler}.\n\n\n@param  the result value type\n@param mapper the function that maps the items of this Publisher into the inner Publishers.\n@return the new Publisher instance with the concatenation behavior", "predict": "Delays execution of the singleSubscriber operator and subscribes to the error signal of the singleSubscriber operator to combine values and errors of the singleSubscriber operator into one singleSubscriber operator."}, {"ID": 61, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setEnvProperty($name, $version) { if (! isset($this->data['env']) || ! is_array($this->data['env'])) { $this->data['env'] = []; } $this->data['env'][$name] = $version; }\n\n    ### Response: Add an optional env property for SDK telemetry.\n\n@param string $name    Property name to set, name of dependency or platform.\n@param string $version Version number of dependency or platform.\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @BackpressureSupport(BackpressureKind.FULL) @SchedulerSupport(SchedulerSupport.NONE) public final <U> Flowable<U> concatMapIterable(Function<? super T, ? extends Iterable<? extends U>> mapper) { return concatMapIterable(mapper, 2); }\n\n    ### Response:", "ground_truth": "Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an\nIterable corresponding to that item that is generated by a selector.\n\n\nBackpressure:\nThe operator honors backpressure from downstream. The source {@code Publisher}s is\nexpected to honor backpressure as well. If the source {@code Publisher} violates the rule, the operator will\nsignal a {@code MissingBackpressureException}.\nScheduler:\n{@code concatMapIterable} does not operate by default on a particular {@link Scheduler}.\n\n\n@param \nthe type of item emitted by the resulting Publisher\n@param mapper\na function that returns an Iterable sequence of values for when given an item emitted by the\nsource Publisher\n@return a Flowable that emits the results of concatenating the items emitted by the source Publisher with\nthe values in the Iterables corresponding to those items, as generated by {@code collectionSelector}\n@see ReactiveX operators documentation: FlatMap", "predict": "Combine values returned by mapping each item of the source Single to its own Stream of values produced by the mapping function with the second argument, which controls the buffering behavior of the returned Single"}, {"ID": 62, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getViewPath() { $module = $this->module; if (substr($module, 0, 1) !== '@') { $module = '@'.$module; } return implode(DIRECTORY_SEPARATOR, [Yii::getAlias($module), 'views', 'aws', $this->getViewFolderName()]); }\n\n    ### Response: Return the view path for view context.\n\n{@inheritDoc}\n@see \\yii\\base\\ViewContextInterface::getViewPath().\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @NonNull @BackpressureSupport(BackpressureKind.FULL) @SchedulerSupport(SchedulerSupport.NONE) public final Flowable<T> sorted(Comparator<? super T> sortFunction) { ObjectHelper.requireNonNull(sortFunction, \"sortFunction\"); return toList().toFlowable().map(Functions.listSorter(sortFunction)).flatMapIterable(Functions.<List<T>>identity()); }\n\n    ### Response:", "ground_truth": "Returns a Flowable that emits the events emitted by source Publisher, in a\nsorted order based on a specified comparison function.\n\nNote that calling {@code sorted} with long, non-terminating or infinite sources\nmight cause {@link OutOfMemoryError}\n\n\nBackpressure:\nThe operator honors backpressure from downstream and consumes the source {@code Publisher} in an\nunbounded manner (i.e., without applying backpressure to it).\nScheduler:\n{@code sorted} does not operate by default on a particular {@link Scheduler}.\n\n\n@param sortFunction\na function that compares two items emitted by the source Publisher and returns an Integer\nthat indicates their sort order\n@return a Flowable that emits the items emitted by the source Publisher in sorted order", "predict": "Generates a sorted sequence of values by applying the given function to each item of the source observable sequence to sort them in ascending or descending order respectively and returns the sorted sequence of values to the observable observer of this function."}, {"ID": 63, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function backwardTransitionAndCreate (shell, options) { let { targetPageId, targetPageMeta, sourcePageId, sourcePageMeta, onComplete } = options // Goto root page, resume scroll position (Only appears in backward) let rootPageScrollPosition = 0 fixRootPageScroll(shell, {targetPageId}) if (targetPageId === window.MIP.viewer.page.pageId) { rootPageScrollPosition = shell.rootPageScrollPosition } let iframe = getIFrame(sourcePageId) // If source page is root page, skip transition if (!iframe) { document.documentElement.classList.add('mip-no-scroll') window.MIP.viewer.page.getElementsInRootPage().forEach(e => e.classList.add('hide')) onComplete && onComplete() let targetIFrame = getIFrame(targetPageId) if (targetIFrame) { activeZIndex -= 2 css(targetIFrame, 'z-index', activeZIndex++) } shell.afterSwitchPage(options) return } // Moving out only needs header, not loading body let loading = getLoading(sourcePageMeta, { onlyHeader: true, transitionContainsHeader: shell.transitionContainsHeader }) let headerLogoTitle let fadeHeader if (shell.transitionContainsHeader) { css(loading, 'display', 'block') } else { headerLogoTitle = document.querySelector('.mip-shell-header-wrapper .mip-shell-header-logo-title') headerLogoTitle && headerLogoTitle.classList.add('fade-out') fadeHeader = getFadeHeader(targetPageMeta, sourcePageMeta) css(fadeHeader, 'display', 'block') } iframe.classList.add('slide-leave', 'slide-leave-active') if (shell.transitionContainsHeader) { loading.classList.add('slide-leave', 'slide-leave-active') } else { fadeHeader.classList.add('fade-enter', 'fade-enter-active') } // trigger layout and move current iframe to correct position /* eslint-disable no-unused-expressions */ css(iframe, { opacity: 1, top: rootPageScrollPosition + 'px' }) /* eslint-enable no-unused-expressions */ whenTransitionEnds(iframe, 'transition', () => { css(iframe, { display: 'none', 'z-index': 10000, top: 0 }) iframe.classList.remove('slide-leave-to', 'slide-leave-active') if (shell.transitionContainsHeader) { loading.classList.remove('slide-leave-to', 'slide-leave-active') css(loading, 'display', 'none') } else { fadeHeader.classList.remove('fade-enter-to', 'fade-enter') } onComplete && onComplete() let targetIFrame = getIFrame(targetPageId) if (targetIFrame) { activeZIndex -= 2 css(targetIFrame, 'z-index', activeZIndex++) } shell.afterSwitchPage(options) }) nextFrame(() => { iframe.classList.add('slide-leave-to') iframe.classList.remove('slide-leave') if (shell.transitionContainsHeader) { loading.classList.add('slide-leave-to') loading.classList.remove('slide-leave') } else { fadeHeader.classList.add('fade-enter-to') fadeHeader.classList.remove('fade-enter') } }) }\n\n    ### Response: Backward transition and create new iframe\n\n@param {Object} shell shell instance\n@param {Object} options\n@param {string} options.targetPageId targetPageId\n@param {Object} options.targetPageMeta pageMeta of target page\n@param {string} options.sourcePageId sourcePageId\n@param {Object} options.sourcePageMeta pageMeta of source page\n@param {boolean} options.newPage whether a new iframe should be created (true)\n@param {boolean} options.isForward whether transition direction is forward (false)\n@param {Function} options.onComplete complete callback.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public PerfAsyncConsumer await(int count) { if (count <= 1000) { while (getCount() != 0) { } } else { try { await(); } catch (InterruptedException ex) { throw new RuntimeException(ex); } } return this; }\n\n    ### Response:", "ground_truth": "Wait for the terminal signal.\n@param count if less than 1001, a spin-wait is used\n@return this", "predict": "Excessive iteration may reduce performance because JavaScript may do many iterations per tick (~10M iterations per sec)"}, {"ID": 64, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function getLocalizedLabelsFromFile($extensionKey) { if ($extensionKey === '') { throw new \\InvalidArgumentException('$extensionKey must not be empty.', 1331489618); } /** @var LocalizationFactory $languageFactory */ $languageFactory = GeneralUtility::makeInstance(LocalizationFactory::class); $languageFile = 'EXT:' . $extensionKey . '/' . self::LANGUAGE_FILE_PATH; $localizedLabels = $languageFactory->getParsedData($languageFile, $this->languageKey, 'utf-8', 0); if ($this->alternativeLanguageKey !== '') { $alternativeLabels = $languageFactory->getParsedData($languageFile, $this->languageKey, 'utf-8', 0); $localizedLabels = array_merge( $alternativeLabels, is_array($localizedLabels) ? $localizedLabels : [] ); } return $localizedLabels; }\n\n    ### Response: Returns the localized labels from an extension's language file.\n\n@param string $extensionKey\nkey of the extension to get the localized labels from,\nmust not be empty, and the corresponding extension must be loaded\n\n@return string[] the localized labels from an extension's language file, will be empty if there are none.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected final void request(long n) { Subscription s = this.upstream; if (s != null) { s.request(n); } }\n\n    ### Response:", "ground_truth": "Requests from the upstream Subscription.\n@param n the request amount, positive", "predict": "Initiates a request to the source of the Single Processor from the Single Processor itself."}, {"ID": 65, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function timestampedFileName( $extension, $fullpath = true ) { $book_title = ( get_bloginfo( 'name' ) ) ? get_bloginfo( 'name' ) : __( 'book', 'pressbooks' ); $book_title_slug = sanitize_file_name( $book_title ); $book_title_slug = str_replace( [ '+' ], '', $book_title_slug ); // Remove symbols which confuse Apache (Ie. form urlencoded spaces) $book_title_slug = sanitize_file_name( $book_title_slug ); // str_replace() may inadvertently create a new bad filename, sanitize again for good measure. if ( $fullpath ) { $path = static::getCoversFolder(); } else { $path = ''; } $filename = $path . $book_title_slug . '-cover-' . time() . '.' . ltrim( $extension, '.' ); return $filename; }\n\n    ### Response: Create a timestamped filename.\n\n@param string $extension\n@param bool $fullpath\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    boolean add(PublishDisposable<T> ps) { for (;;) { PublishDisposable<T>[] a = subscribers.get(); if (a == TERMINATED) { return false; } int n = a.length; @SuppressWarnings(\"unchecked\") PublishDisposable<T>[] b = new PublishDisposable[n + 1]; System.arraycopy(a, 0, b, 0, n); b[n] = ps; if (subscribers.compareAndSet(a, b)) { return true; } } }\n\n    ### Response:", "ground_truth": "Tries to add the given subscriber to the subscribers array atomically\nor returns false if the subject has terminated.\n@param ps the subscriber to add\n@return true if successful, false if the subject has terminated", "predict": "Increment the count of the given subscribers array and compare it with the new array returned by the method to detect the addition of the given disposable to the list of subscribers of this listener."}, {"ID": 66, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def send(self, data, sample_rate=1): \"\"\" Squirt the metrics over UDP \"\"\" if self.prefix: data = dict((\".\".join((self.prefix, stat)), value) for stat, value in data.items()) if sample_rate < 1: if random.random() > sample_rate: return sampled_data = dict((stat, \"%s|@%s\" % (value, sample_rate)) for stat, value in data.items()) else: sampled_data = data try: [self.udp_sock.sendto(bytes(bytearray(\"%s:%s\" % (stat, value), \"utf-8\")), self.addr) for stat, value in sampled_data.items()] except: self.log.exception(\"unexpected error\")\n\n    ### Response: Squirt the metrics over UDP.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") void remove(PublishDisposable<T> ps) { for (;;) { PublishDisposable<T>[] a = subscribers.get(); if (a == TERMINATED || a == EMPTY) { return; } int n = a.length; int j = -1; for (int i = 0; i < n; i++) { if (a[i] == ps) { j = i; break; } } if (j < 0) { return; } PublishDisposable<T>[] b; if (n == 1) { b = EMPTY; } else { b = new PublishDisposable[n - 1]; System.arraycopy(a, 0, b, 0, j); System.arraycopy(a, j + 1, b, j, n - j - 1); } if (subscribers.compareAndSet(a, b)) { return; } } }\n\n    ### Response:", "ground_truth": "Atomically removes the given subscriber if it is subscribed to the subject.\n@param ps the subject to remove", "predict": "Remove the given PubSub from this listener."}, {"ID": 67, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_distributed_seismicity_source_nodes(source): \"\"\" Returns list of nodes of attributes common to all distributed seismicity source classes :param source: Seismic source as instance of :class: `openquake.hazardlib.source.area.AreaSource` or :class: `openquake.hazardlib.source.point.PointSource` :returns: List of instances of :class:`openquake.baselib.node.Node` \"\"\" source_nodes = [] # parse msr source_nodes.append( Node(\"magScaleRel\", text=source.magnitude_scaling_relationship.__class__.__name__)) # Parse aspect ratio source_nodes.append( Node(\"ruptAspectRatio\", text=source.rupture_aspect_ratio)) # Parse MFD source_nodes.append(obj_to_node(source.mfd)) # Parse nodal plane distribution source_nodes.append( build_nodal_plane_dist(source.nodal_plane_distribution)) # Parse hypocentral depth distribution source_nodes.append( build_hypo_depth_dist(source.hypocenter_distribution)) return source_nodes\n\n    ### Response: Returns list of nodes of attributes common to all distributed seismicity\n    source classes\n\n    :param source:\n        Seismic source as instance of :class:\n        `openquake.hazardlib.source.area.AreaSource` or :class:\n        `openquake.hazardlib.source.point.PointSource`\n    :returns:\n        List of instances of :class:`openquake.baselib.node.Node`.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> ConnectableFlowable<T> observeOn(final ConnectableFlowable<T> cf, final Scheduler scheduler) { final Flowable<T> flowable = cf.observeOn(scheduler); return RxJavaPlugins.onAssembly(new ConnectableFlowableReplay<T>(cf, flowable)); }\n\n    ### Response:", "ground_truth": "Child Subscribers will observe the events of the ConnectableObservable on the\nspecified scheduler.\n@param  the value type\n@param cf the ConnectableFlowable to wrap\n@param scheduler the target scheduler\n@return the new ConnectableObservable instance", "predict": "\n    Observe the given connectable Flowable on the given Scheduler."}, {"ID": 68, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (t *Tree) DeletePrefix(k []byte) (*Tree, bool) { txn := t.Txn() ok := txn.DeletePrefix(k) return txn.Commit(), ok }\n\n    ### Response: // DeletePrefix is used to delete all nodes starting with a given prefix. Returns the new tree,\n// and a bool indicating if the prefix matched any nodes.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static <ResponseT, ReturnT> HttpServiceMethod<ResponseT, ReturnT> parseAnnotations( Retrofit retrofit, Method method, RequestFactory requestFactory) { boolean isKotlinSuspendFunction = requestFactory.isKotlinSuspendFunction; boolean continuationWantsResponse = false; boolean continuationBodyNullable = false; Annotation[] annotations = method.getAnnotations(); Type adapterType; if (isKotlinSuspendFunction) { Type[] parameterTypes = method.getGenericParameterTypes(); Type responseType = Utils.getParameterLowerBound(0, (ParameterizedType) parameterTypes[parameterTypes.length - 1]); if (getRawType(responseType) == Response.class && responseType instanceof ParameterizedType) { // Unwrap the actual body type from Response<T>. responseType = Utils.getParameterUpperBound(0, (ParameterizedType) responseType); continuationWantsResponse = true; } else { // TODO figure out if type is nullable or not // Metadata metadata = method.getDeclaringClass().getAnnotation(Metadata.class) // Find the entry for method // Determine if return type is nullable or not } adapterType = new Utils.ParameterizedTypeImpl(null, Call.class, responseType); annotations = SkipCallbackExecutorImpl.ensurePresent(annotations); } else { adapterType = method.getGenericReturnType(); } CallAdapter<ResponseT, ReturnT> callAdapter = createCallAdapter(retrofit, method, adapterType, annotations); Type responseType = callAdapter.responseType(); if (responseType == okhttp3.Response.class) { throw methodError(method, \"'\" + getRawType(responseType).getName() + \"' is not a valid response body type. Did you mean ResponseBody?\"); } if (responseType == Response.class) { throw methodError(method, \"Response must include generic type (e.g., Response<String>)\"); } // TODO support Unit for Kotlin? if (requestFactory.httpMethod.equals(\"HEAD\") && !Void.class.equals(responseType)) { throw methodError(method, \"HEAD method must use Void as response type.\"); } Converter<ResponseBody, ResponseT> responseConverter = createResponseConverter(retrofit, method, responseType); okhttp3.Call.Factory callFactory = retrofit.callFactory; if (!isKotlinSuspendFunction) { return new CallAdapted<>(requestFactory, callFactory, responseConverter, callAdapter); } else if (continuationWantsResponse) { //noinspection unchecked Kotlin compiler guarantees ReturnT to be Object. return (HttpServiceMethod<ResponseT, ReturnT>) new SuspendForResponse<>(requestFactory, callFactory, responseConverter, (CallAdapter<ResponseT, Call<ResponseT>>) callAdapter); } else { //noinspection unchecked Kotlin compiler guarantees ReturnT to be Object. return (HttpServiceMethod<ResponseT, ReturnT>) new SuspendForBody<>(requestFactory, callFactory, responseConverter, (CallAdapter<ResponseT, Call<ResponseT>>) callAdapter, continuationBodyNullable); } }\n\n    ### Response:", "ground_truth": "Inspects the annotations on an interface method to construct a reusable service method that\nspeaks HTTP. This requires potentially-expensive reflection so it is best to build each service\nmethod only once and reuse it.", "predict": "// This method uses annotations to determine if the method body should be executed synchronously or asynchronously\n    // It also uses annotations to determine if the method should produce a response body or not\n    // It uses reflection to determine the generic return type of the method\n    // It uses reflection again to determine if the returned type contains generic parameters\n    // It uses reflection again to determine if the returned type contains annotations\n    // It uses reflection again to determine if the returned type contains generic annotations\n    // It uses reflection again to determine if the returned type contains generic annotations\n    // It uses reflection again to determine if the returned type contains annotations\n    // It uses reflection again to determine if the returned type contains annotations\n    // It uses reflection again to determine if the returned type contains annotations\n    // It uses reflection again to determine if the returned type contains annotations\n    // It uses reflection again to determine if the returned type contains annotations\n    // It uses reflection again to determine if the returned type contains annotations\n    // It uses reflection again to determine"}, {"ID": 69, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function create($maniaLinkId = null, $version = null, $name = null, array $children = null) { return new static($maniaLinkId, $version, $name, $children); }\n\n    ### Response: Create a new ManiaLink\n\n@api\n@param string       $maniaLinkId (optional) ManiaLink ID\n@param int          $version     (optional) Version\n@param string       $name        (optional) Name\n@param Renderable[] $children    (optional) Children\n@return static.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setDelay(long amount, TimeUnit unit) { if (amount < 0) { throw new IllegalArgumentException(\"Amount must be positive value.\"); } this.delayMs = unit.toMillis(amount); }\n\n    ### Response:", "ground_truth": "Set the network round trip delay.", "predict": "Delay millisecs by given amount of millisecs\n\n/** Delays millisecs by given amount of millisecs */\npublic void setDelay(long amount, TimeUnit unit) {\n    if (amount < 0) {\n        throw new IllegalArgumentException(\"Amount must be positive value.\");\n    }\n    this.delayMs = unit.toMillis(amount);\n}"}, {"ID": 70, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func ListRemoveRangeOp(binName string, index int, count int) *Operation { if count == 1 { return ListRemoveOp(binName, index) } return &Operation{opType: _CDT_MODIFY, binName: binName, binValue: ListValue{_CDT_LIST_REMOVE_RANGE, IntegerValue(index), IntegerValue(count)}, encoder: listGenericOpEncoder} }\n\n    ### Response: // ListRemoveRangeOp creates a list remove range operation.\n// Server removes \"count\" items starting at specified index from list bin.\n// Server returns number of items removed..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Response<?> createErrorResponse() { Response<?> call; try { call = errorFactory.call(); } catch (Exception e) { throw new IllegalStateException(\"Error factory threw an exception.\", e); } if (call == null) { throw new IllegalStateException(\"Error factory returned null.\"); } if (call.isSuccessful()) { throw new IllegalStateException(\"Error factory returned successful response.\"); } return call; }\n\n    ### Response:", "ground_truth": "The HTTP error to be used when an error is triggered.", "predict": "The errorFactory creates and returns an error response. The errorFactory may throw an exception or return null or a success response. The errorFactory may choose to do anything with the error response, including ignoring it or sending it on its way to the client."}, {"ID": 71, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(sexagesimal) { if (sexagesimal in geolib.decimal) { return geolib.decimal[sexagesimal]; } var regEx = new RegExp(sexagesimalPattern); var data = regEx.exec(sexagesimal); if(data) { var min = parseFloat(data[2]/60); var sec = parseFloat(data[4]/3600) || 0; } var dec = ((parseFloat(data[1]) + min + sec)).toFixed(8); // South and West are negative decimals dec = (data[7] == 'S' || data[7] == 'W') ? dec * -1 : dec; geolib.decimal[sexagesimal] = dec; return dec; }\n\n    ### Response: Converts a sexagesimal coordinate to decimal format\n\n@param\t\tfloat\t\tSexagesimal coordinate\n@return\t\tstring\t\tDecimal value (XX.XXXXXXXX).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public long calculateDelay(TimeUnit unit) { float delta = variancePercent / 100f; // e.g., 20 / 100f == 0.2f float lowerBound = 1f - delta; // 0.2f --> 0.8f float upperBound = 1f + delta; // 0.2f --> 1.2f float bound = upperBound - lowerBound; // 1.2f - 0.8f == 0.4f float delayPercent = lowerBound + (random.nextFloat() * bound); // 0.8 + (rnd * 0.4) long callDelayMs = (long) (delayMs * delayPercent); return MILLISECONDS.convert(callDelayMs, unit); }\n\n    ### Response:", "ground_truth": "Get the delay that should be used for delaying a response in accordance with configured\nbehavior.", "predict": "Calculates delay time given time variance and random jitter"}, {"ID": 72, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func IsArangoErrorWithCode(err error, code int) bool { ae, ok := Cause(err).(ArangoError) return ok && ae.Code == code }\n\n    ### Response: // IsArangoErrorWithCode returns true when the given error is an ArangoError and its Code field is equal to the given code..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void createSampleData(String username, String password) { Assert.notNull(documentDao, \"DocumentDao required\"); Assert.hasText(username, \"Username required\"); Authentication auth = new UsernamePasswordAuthenticationToken(username, password); try { // Set the SecurityContextHolder ThreadLocal so any subclasses // automatically know which user is operating SecurityContextHolder.getContext().setAuthentication(auth); // Create the home directory first Directory home = new Directory(username, Directory.ROOT_DIRECTORY); documentDao.create(home); addPermission(documentDao, home, username, LEVEL_GRANT_ADMIN); addPermission(documentDao, home, \"ROLE_USER\", LEVEL_GRANT_READ); createFiles(documentDao, home); // Now create the confidential directory Directory confid = new Directory(\"confidential\", home); documentDao.create(confid); addPermission(documentDao, confid, \"ROLE_USER\", LEVEL_NEGATE_READ); createFiles(documentDao, confid); // Now create the shared directory Directory shared = new Directory(\"shared\", home); documentDao.create(shared); addPermission(documentDao, shared, \"ROLE_USER\", LEVEL_GRANT_READ); addPermission(documentDao, shared, \"ROLE_USER\", LEVEL_GRANT_WRITE); createFiles(documentDao, shared); } finally { // Clear the SecurityContextHolder ThreadLocal so future calls are // guaranteed to be clean SecurityContextHolder.clearContext(); } }\n\n    ### Response:", "ground_truth": "Creates a directory for the user, and a series of sub-directories. The root\ndirectory is the parent for the user directory. The sub-directories are\n\"confidential\" and \"shared\". The ROLE_USER will be given read and write access to\n\"shared\".", "predict": "// This method creates directories and populates them // with sample documents to test the DocumentDAO Class. It // uses the username and password provided by the caller // to authenticate to the database and // create directories and files. It // also grants read and write access // to the created directories and // files to the given username and // uses the Spring security mechanism // to do this"}, {"ID": 73, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def refresh(self): \"\"\" Refresh access token. Only non-expired tokens can be renewed. :Example: token = client.tokens.refresh() \"\"\" uri = \"%s/%s\" % (self.uri, \"refresh\") response, instance = self.request(\"GET\", uri) return response.ok\n\n    ### Response: Refresh access token. Only non-expired tokens can be renewed.\n\n        :Example:\n\n        token = client.tokens.refresh().\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static HttpMethod valueOf(String method) { try { return HttpMethod.valueOf(method); } catch (IllegalArgumentException e) { } return null; }\n\n    ### Response:", "ground_truth": "Provides a save way of obtaining the HttpMethod from a String. If the method is\ninvalid, returns null.\n\n@param method the HTTP method to use.\n\n@return the HttpMethod or null if method is invalid.", "predict": "\n    The method defines an enum to map HTTP verbs to HTTP methods to allow clients to send HTTP verbs in the method header to the server to determine what action should be taken. It provides an appropriate method for resolving HTTP verbs to HTTP methods for the given HTTP method string."}, {"ID": 74, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def find_xdb_bin(wnd, power=.5, res=1500): \"\"\" A not so fast way to find the x-dB cutoff frequency \"bin\" index. Parameters ---------- wnd: The window itself as an iterable. power: The power value (squared amplitude) where the x-dB value should lie, using ``x = dB10(power)``. res : Zero-padding factor. 1 for no zero-padding, 2 for twice the length, etc.. \"\"\" spectrum = dB20(rfft(wnd, res * len(wnd))) root_at_xdb = spectrum - spectrum[0] - dB10(power) return next(i for i, el in enumerate(zcross(root_at_xdb)) if el) / res\n\n    ### Response: A not so fast way to find the x-dB cutoff frequency \"bin\" index.\n\n  Parameters\n  ----------\n  wnd:\n    The window itself as an iterable.\n  power:\n    The power value (squared amplitude) where the x-dB value should lie,\n    using ``x = dB10(power)``.\n  res :\n    Zero-padding factor. 1 for no zero-padding, 2 for twice the length, etc...\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public DirContextOperations searchForUser(String username) { if (logger.isDebugEnabled()) { logger.debug(\"Searching for user '\" + username + \"', with user search \" + this); } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate( contextSource); template.setSearchControls(searchControls); try { return template.searchForSingleEntry(searchBase, searchFilter, new String[] { username }); } catch (IncorrectResultSizeDataAccessException notFound) { if (notFound.getActualSize() == 0) { throw new UsernameNotFoundException(\"User \" + username + \" not found in directory.\"); } // Search should never return multiple results if properly configured, so just // rethrow throw notFound; } }\n\n    ### Response:", "ground_truth": "Return the LdapUserDetails containing the user's information\n\n@param username the username to search for.\n\n@return An LdapUserDetails object containing the details of the located user's\ndirectory entry\n\n@throws UsernameNotFoundException if no matching entry is found.", "predict": "\nSearching for user 'username', with user search"}, {"ID": 75, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<String> getNamespaces() { List<String> namespaceList = new ArrayList<String>(); java.util.Map<String, String> attributes = model.getAttributes(); for (Entry<String, String> e : attributes.entrySet()) { final String name = e.getKey(); final String value = e.getValue(); if (value != null && value.startsWith(\"http://\")) { namespaceList.add(name + \"=\" + value); } } return namespaceList; }\n\n    ### Response: Returns all defined namespaces.\n@return all defined namespaces.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String encode(CharSequence rawPassword) { String salt = PREFIX + this.saltGenerator.generateKey() + SUFFIX; return digest(salt, rawPassword); }\n\n    ### Response:", "ground_truth": "Encodes the rawPass using a MessageDigest. If a salt is specified it will be merged\nwith the password before encoding.\n\n@param rawPassword The plain text password\n@return Hex string of password digest (or base64 encoded string if\nencodeHashAsBase64 is enabled.", "predict": "Generates an encrypted form of the given string with the given salt string appended to it."}, {"ID": 76, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def build_classes(self,strict=False, named_only=False, standardize_names=True): \"\"\" Build all of the classes named in the JSONSchema. Class names will be transformed using inflection by default, so names with spaces in the schema will be camelcased, while names without spaces will have internal capitalization dropped. Thus \"Home Address\" becomes \"HomeAddress\", while \"HomeAddress\" becomes \"Homeaddress\" To disable this behavior, pass standardize_names=False, but be aware that accessing names with spaces from the namespace can be problematic. Args: strict: (bool) use this to validate required fields while creating the class named_only: (bool) If true, only properties with an actual title attribute will be included in the resulting namespace (although all will be generated). standardize_names: (bool) If true (the default), class names will be tranformed by camel casing Returns: A namespace containing all the generated classes \"\"\" kw = {\"strict\": strict} builder = classbuilder.ClassBuilder(self.resolver) for nm, defn in iteritems(self.schema.get('definitions', {})): uri = python_jsonschema_objects.util.resolve_ref_uri( self.resolver.resolution_scope, \"#/definitions/\" + nm) builder.construct(uri, defn, **kw) if standardize_names: name_transform = lambda t: inflection.camelize(inflection.parameterize(six.text_type(t), '_')) else: name_transform = lambda t: t nm = self.schema['title'] if 'title' in self.schema else self.schema['id'] nm = inflection.parameterize(six.text_type(nm), '_') builder.construct(nm, self.schema,**kw) self._resolved = builder.resolved classes = {} for uri, klass in six.iteritems(builder.resolved): title = getattr(klass, '__title__', None) if title is not None: classes[name_transform(title)] = klass elif not named_only: classes[name_transform(uri.split('/')[-1])] = klass return python_jsonschema_objects.util.Namespace.from_mapping(classes)\n\n    ### Response: Build all of the classes named in the JSONSchema.\n\n        Class names will be transformed using inflection by default, so names\n        with spaces in the schema will be camelcased, while names without\n        spaces will have internal capitalization dropped. Thus \"Home Address\"\n        becomes \"HomeAddress\", while \"HomeAddress\" becomes \"Homeaddress\" To\n        disable this behavior, pass standardize_names=False, but be aware\n        that accessing names with spaces from the namespace can be\n        problematic.\n\n        Args:\n            strict: (bool) use this to validate required fields while creating the class\n            named_only: (bool) If true, only properties with an actual title attribute will\n                be included in the resulting namespace (although all will be generated).\n            standardize_names: (bool) If true (the default), class names will be tranformed\n                by camel casing\n\n        Returns:\n            A namespace containing all the generated classes.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean matches(CharSequence rawPassword, String encodedPassword) { String salt = extractSalt(encodedPassword); String rawPasswordEncoded = digest(salt, rawPassword); return PasswordEncoderUtils.equals(encodedPassword.toString(), rawPasswordEncoded); }\n\n    ### Response:", "ground_truth": "Takes a previously encoded password and compares it with a rawpassword after mixing\nin the salt and encoding that value\n\n@param rawPassword plain text password\n@param encodedPassword previously encoded password\n@return true or false", "predict": "Matches the given password with the encrypted copy of it to verify\n    // If the given password matches the encrypted copy of it,\n    // returns true;\n    // Otherwise returns false."}, {"ID": 77, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function parse(array $criteria, array $orderBy = array(), $limit = null, $offset = null) { $statement = new Expr\\Statement(); if(!empty($criteria)) { $statement->setClause('condition', $this->parseCriteria($criteria)); } if(!empty($orderBy)) $statement->setClause('order', $this->parseOrderBy($orderBy)); if($limit) $statement->setClause('limit', $this->parseLimit($limit)); if($offset) $statement->setClause('offset', $this->parseOffset($offset)); return new Query($statement, $this->persister); }\n\n    ### Response: parse\nParse fields criteria and order\n@param array $criteria\n@param array $order\n@access public\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static void performVersionChecks(String minSpringVersion) { if (minSpringVersion == null) { return; } // Check Spring Compatibility String springVersion = SpringVersion.getVersion(); String version = getVersion(); if (disableChecks(springVersion, version)) { return; } logger.info(\"You are running with Spring Security Core \" + version); if (new ComparableVersion(springVersion) .compareTo(new ComparableVersion(minSpringVersion)) < 0) { logger.warn(\"**** You are advised to use Spring \" + minSpringVersion + \" or later with this version. You are running: \" + springVersion); } }\n\n    ### Response:", "ground_truth": "Perform version checks with specific min Spring Version\n\n@param minSpringVersion", "predict": "\n    Check compatibility of Spring Version\n    If Spring Version of Spring Security Library does not match given Spring Version, prompt for upgrade\n    If compatibility of Spring Version of Spring Security Library and Spring Version of Spring Security Library matches\n    then prompt for upgrade"}, {"ID": 78, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function create() { switch (func_num_args()) { case 0: return new ClassWithStringProperty(); case 1: return new ClassWithStringProperty(func_get_arg(0)); case 2: return new ClassWithStringProperty(func_get_arg(0), func_get_arg(1)); case 3: return new ClassWithStringProperty(func_get_arg(0), func_get_arg(1), func_get_arg(2)); case 4: return new ClassWithStringProperty(func_get_arg(0), func_get_arg(1), func_get_arg(2), func_get_arg(3)); case 5: return new ClassWithStringProperty(func_get_arg(0), func_get_arg(1), func_get_arg(2), func_get_arg(3), func_get_arg(4)); case 6: return new ClassWithStringProperty(func_get_arg(0), func_get_arg(1), func_get_arg(2), func_get_arg(3), func_get_arg(4), func_get_arg(5)); case 7: return new ClassWithStringProperty(func_get_arg(0), func_get_arg(1), func_get_arg(2), func_get_arg(3), func_get_arg(4), func_get_arg(5), func_get_arg(6)); case 8: return new ClassWithStringProperty(func_get_arg(0), func_get_arg(1), func_get_arg(2), func_get_arg(3), func_get_arg(4), func_get_arg(5), func_get_arg(6), func_get_arg(7)); default: throw new \\InvalidArgumentException('More than 8 arguments supplied, please be reasonable.'); } }\n\n    ### Response: Creates new instance of \\Skrz\\Meta\\Fixtures\\Protobuf\\ClassWithStringProperty\n\n@throws \\InvalidArgumentException\n\n@return ClassWithStringProperty.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static boolean disableChecks(String springVersion, String springSecurityVersion) { if (springVersion == null || springVersion.equals(springSecurityVersion)) { return true; } return Boolean.getBoolean(DISABLE_CHECKS); }\n\n    ### Response:", "ground_truth": "Disable if springVersion and springSecurityVersion are the same to allow working\nwith Uber Jars.\n\n@param springVersion\n@param springSecurityVersion\n@return", "predict": "Allows to disable Spring security version verification by passing the correct Spring security and Spring versions to the method."}, {"ID": 79, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getFreightClass() { if (isset($this->contents['Details']['PreviewFreightClass'])){ return $this->contents['Details']['PreviewFreightClass']; } else if (isset($this->contents['Details']['SellerFreightClass'])){ return $this->contents['Details']['SellerFreightClass']; } else { return false; } }\n\n    ### Response: Returns the freight class for the transport request.\n\nThis value will only be set if the shipment is with an Amazon-partnered carrier and\nthe shipment type is set to \"LTL\" for Less Than Truckload/Full Truckload.\nThis should be the same as the value that was sent when creating the transport request.\nIf the freight class was not sent before, this is Amazon's estimated freight class\nbased on the description of the contents.\nSee setFreightClass for a list of possible values.\nThis method will return FALSE if the value has not been set yet.\n@return string|boolean single value, or FALSE if value not set yet\n@see setFreightClass.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static String getSpringVersion() { Properties properties = new Properties(); try { properties.load(SpringSecurityCoreVersion.class.getClassLoader().getResourceAsStream(\"META-INF/spring-security.versions\")); } catch (IOException | NullPointerException e) { return null; } return properties.getProperty(\"org.springframework:spring-core\"); }\n\n    ### Response:", "ground_truth": "Loads the spring version or null if it cannot be found.\n@return", "predict": "Get the Spring security version string from the resource spring-security.versions."}, {"ID": 80, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Internal public static Set<Annotation> readSingleForwardAnnotations(Class<?> udfClass) { ForwardedFields forwardedFields = udfClass.getAnnotation(ForwardedFields.class); NonForwardedFields nonForwardedFields = udfClass.getAnnotation(NonForwardedFields.class); ReadFields readSet = udfClass.getAnnotation(ReadFields.class); Set<Annotation> annotations = new HashSet<Annotation>(); if (forwardedFields != null) { annotations.add(forwardedFields); } if (nonForwardedFields != null) { if (!annotations.isEmpty()) { throw new InvalidProgramException(\"Either \" + ForwardedFields.class.getSimpleName() + \" or \" + NonForwardedFields.class.getSimpleName() + \" can be annotated to a function, not both.\"); } annotations.add(nonForwardedFields); } if (readSet != null) { annotations.add(readSet); } return !annotations.isEmpty() ? annotations : null; }\n\n    ### Response: Reads the annotations of a user defined function with one input and returns semantic properties according to the forwarded fields annotated.\n\n@param udfClass The user defined function, represented by its class.\n@return\tThe DualInputSemanticProperties containing the forwarded fields..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public AttributeExchangeConfigurer attributeExchange(String identifierPattern) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer( identifierPattern); this.attributeExchangeConfigurers.add(attributeExchangeConfigurer); return attributeExchangeConfigurer; }\n\n    ### Response:", "ground_truth": "", "predict": "Allows the configuration of an AttributeExchange filter for given pattern of identifiers to filter attributes of objects matching the given pattern of identifiers to filter attributes of objects matching the given pattern of identifiers to filter attributes of objects matching the given pattern of identifiers to filter attributes of objects matching the given pattern of identifiers to filter attributes of objects matching the given pattern of identifiers to filter attributes of objects matching the given pattern of identifiers to filter attributes of objects matching the given pattern of identifiers to filter attributes of objects matching the given pattern of identifiers to filter attributes of objects matching the given pattern of identifiers to filter attributes of objects matching the given pattern of identifiers to filter attributes of objects matching the given pattern of identifiers to filter attributes of objects matching the given pattern of identifiers to filter attributes of objects matching the given pattern of identifiers to filter attributes of objects matching the given pattern of identifiers to filter attributes of objects matching the given pattern of identifiers to filter attributes of objects matching the given pattern of identifiers to filter attributes of objects matching the given"}, {"ID": 81, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ClassLoader getThreadContextClassLoader() { Thread thread=Thread.currentThread(); ClassLoader classLoader=thread.getContextClassLoader(); return classLoader; }\n\n    ### Response: This function returns the thread context class loader.\n\n@return  The thread context class loader.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public OAuth2ClientConfigurer<HttpSecurity> oauth2Client() throws Exception { OAuth2ClientConfigurer<HttpSecurity> configurer = getOrApply(new OAuth2ClientConfigurer<>()); this.postProcess(configurer); return configurer; }\n\n    ### Response:", "ground_truth": "Configures OAuth 2.0 Client support.\n\n@since 5.1\n@see OAuth 2.0 Authorization Framework\n@return the {@link OAuth2ClientConfigurer} for further customizations\n@throws Exception", "predict": "The Spring security configurer for OAuth 2 servers uses Spring's configuration mechanism to customize the configuration of an OAuth 2 server to meet specific security requirements of the application."}, {"ID": 82, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public List<CommerceDiscountRule> findAll() { return findAll(QueryUtil.ALL_POS, QueryUtil.ALL_POS, null); }\n\n    ### Response: Returns all the commerce discount rules.\n\n@return the commerce discount rules.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public OAuth2ResourceServerConfigurer<HttpSecurity> oauth2ResourceServer() throws Exception { OAuth2ResourceServerConfigurer<HttpSecurity> configurer = getOrApply(new OAuth2ResourceServerConfigurer<>(getContext())); this.postProcess(configurer); return configurer; }\n\n    ### Response:", "ground_truth": "Configures OAuth 2.0 Resource Server support.\n\n@since 5.1\n@see OAuth 2.0 Authorization Framework\n@return the {@link OAuth2ResourceServerConfigurer} for further customizations\n@throws Exception", "predict": "Allows configuration of the Spring security OAuth2 resource server."}, {"ID": 83, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void applyAttachment() { if (body == null || staticLight) return; restorePosition.setToTranslation(bodyPosition); rotateAroundZero.setToRotationRad(bodyAngle + bodyAngleOffset); for (int i = 0; i < rayNum; i++) { tmpVec.set(startX[i], startY[i]).mul(rotateAroundZero).mul(restorePosition); startX[i] = tmpVec.x; startY[i] = tmpVec.y; tmpVec.set(endX[i], endY[i]).mul(rotateAroundZero).mul(restorePosition); endX[i] = tmpVec.x; endY[i] = tmpVec.y; } }\n\n    ### Response: Applies attached body initial transform to all lights rays.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ChannelSecurityConfigurer<HttpSecurity>.ChannelRequestMatcherRegistry requiresChannel() throws Exception { ApplicationContext context = getContext(); return getOrApply(new ChannelSecurityConfigurer<>(context)) .getRegistry(); }\n\n    ### Response:", "ground_truth": "Configures channel security. In order for this configuration to be useful at least\none mapping to a required channel must be provided.\n\nExample Configuration\n\nThe example below demonstrates how to require HTTPs for every request. Only\nrequiring HTTPS for some requests is supported, but not recommended since an\napplication that allows for HTTP introduces many security vulnerabilities. For one\nsuch example, read about Firesheep.\n\n\n\n\n@return the {@link ChannelSecurityConfigurer} for further customizations\n@throws Exception", "predict": "Provide an ordered channel request mapping for given HTTP request filter annotations to appropriate security annotations to ensure secure channel connections to the server"}, {"ID": 84, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getTableByPhpName($phpName) { if (isset($this->tablesByPhpName[$phpName])) { return $this->tablesByPhpName[$phpName]; } return null; // just to be explicit }\n\n    ### Response: Returns the table object with the specified PHP name.\n\n@param  string $phpName\n@return Table.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean compare(final String dn, final String attributeName, final Object value) { final String comparisonFilter = \"(\" + attributeName + \"={0})\"; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext(DirContext ctx) throws NamingException { SearchControls ctls = new SearchControls(); ctls.setReturningAttributes(NO_ATTRS); ctls.setSearchScope(SearchControls.OBJECT_SCOPE); NamingEnumeration<SearchResult> results = ctx.search(dn, comparisonFilter, new Object[] { value }, ctls); Boolean match = Boolean.valueOf(results.hasMore()); LdapUtils.closeEnumeration(results); return match; } } Boolean matches = (Boolean) executeReadOnly(new LdapCompareCallback()); return matches.booleanValue(); }\n\n    ### Response:", "ground_truth": "Performs an LDAP compare operation of the value of an attribute for a particular\ndirectory entry.\n\n@param dn the entry who's attribute is to be used\n@param attributeName the attribute who's value we want to compare\n@param value the value to be checked against the directory value\n\n@return true if the supplied value matches that in the directory", "predict": "Compares the given Dn and attributeName to the given value to see if the objects match"}, {"ID": 85, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def qrlist(self, name_start, name_end, limit): \"\"\" Return a list of the top ``limit`` keys between ``name_start`` and ``name_end`` in descending order .. note:: The range is (``name_start``, ``name_end``]. ``name_start`` isn't in the range, but ``name_end`` is. :param string name_start: The lower bound(not included) of keys to be returned, empty string ``''`` means +inf :param string name_end: The upper bound(included) of keys to be returned, empty string ``''`` means -inf :param int limit: number of elements will be returned. :return: a list of keys :rtype: list >>> ssdb.qrlist('queue_2', 'queue_1', 10) ['queue_1'] >>> ssdb.qrlist('queue_z', 'queue_', 10) ['queue_2', 'queue_1'] >>> ssdb.qrlist('z', '', 10) ['queue_2', 'queue_1'] \"\"\" limit = get_positive_integer(\"limit\", limit) return self.execute_command('qrlist', name_start, name_end, limit)\n\n    ### Response: Return a list of the top ``limit`` keys between ``name_start`` and\n        ``name_end``  in descending order\n\n        .. note:: The range is (``name_start``, ``name_end``]. ``name_start``\n           isn't in the range, but ``name_end`` is.\n\n        :param string name_start: The lower bound(not included) of keys to be\n         returned, empty string ``''`` means +inf\n        :param string name_end: The upper bound(included) of keys to be\n         returned, empty string ``''`` means -inf\n        :param int limit: number of elements will be returned.\n        :return: a list of keys\n        :rtype: list\n\n        >>> ssdb.qrlist('queue_2', 'queue_1', 10)\n        ['queue_1']\n        >>> ssdb.qrlist('queue_z', 'queue_', 10)\n        ['queue_2', 'queue_1']\n        >>> ssdb.qrlist('z', '', 10)\n        ['queue_2', 'queue_1'].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DirContextOperations retrieveEntry(final String dn, final String[] attributesToRetrieve) { return (DirContextOperations) executeReadOnly(new ContextExecutor() { public Object executeWithContext(DirContext ctx) throws NamingException { Attributes attrs = ctx.getAttributes(dn, attributesToRetrieve); // Object object = ctx.lookup(LdapUtils.getRelativeName(dn, ctx)); return new DirContextAdapter(attrs, new DistinguishedName(dn), new DistinguishedName(ctx.getNameInNamespace())); } }); }\n\n    ### Response:", "ground_truth": "Composes an object from the attributes of the given DN.\n\n@param dn the directory entry which will be read\n@param attributesToRetrieve the named attributes which will be retrieved from the\ndirectory entry.\n\n@return the object created by the mapper", "predict": "The method retrieveEntry retrieve the attributes of the given DN from the DirContext. It uses the attributesToRetrieve parameter to retrieve specific attributes of the DN objects in the DirContext. It first lookups the DN and then lookups the objects with the attributesToRetrieve and returns the objects attributes as an objects array."}, {"ID": 86, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Resource(name = \"cxf\") public final void setBus(Bus bus) { assert this.bus == null || this.bus == bus; this.bus = bus; if (bus != null) { bus.setExtension(this, UndertowServerEngineFactory.class); lifeCycleManager = bus.getExtension(BusLifeCycleManager.class); if (null != lifeCycleManager) { lifeCycleManager.registerLifeCycleListener(this); } } }\n\n    ### Response: This call is used to set the bus. It should only be called once.\n@param bus.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Set<String> searchForSingleAttributeValues(final String base, final String filter, final Object[] params, final String attributeName) { String[] attributeNames = new String[] { attributeName }; Set<Map<String, List<String>>> multipleAttributeValues = searchForMultipleAttributeValues( base, filter, params, attributeNames); Set<String> result = new HashSet<>(); for (Map<String, List<String>> map : multipleAttributeValues) { List<String> values = map.get(attributeName); if (values != null) { result.addAll(values); } } return result; }\n\n    ### Response:", "ground_truth": "Performs a search using the supplied filter and returns the union of the values of\nthe named attribute found in all entries matched by the search. Note that one\ndirectory entry may have several values for the attribute. Intended for role\nsearches and similar scenarios.\n\n@param base the DN to search in\n@param filter search filter to use\n@param params the parameters to substitute in the search filter\n@param attributeName the attribute who's values are to be retrieved.\n\n@return the set of String values for the attribute as a union of the values found\nin all the matching entries.", "predict": "The function searches for values of the given attributeName across the given base and filter string and parameter values and returns the values found in the order of the given attributeName."}, {"ID": 87, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void scaleCol( double alpha , DMatrixRMaj A , int col ) { int idx = col; for (int row = 0; row < A.numRows; row++, idx += A.numCols) { A.data[idx] *= alpha; } }\n\n    ### Response: In-place scaling of a column in A\n\n@param alpha scale factor\n@param A matrix\n@param col which row in A.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Set<Map<String, List<String>>> searchForMultipleAttributeValues( final String base, final String filter, final Object[] params, final String[] attributeNames) { // Escape the params acording to RFC2254 Object[] encodedParams = new String[params.length]; for (int i = 0; i < params.length; i++) { encodedParams[i] = LdapEncoder.filterEncode(params[i].toString()); } String formattedFilter = MessageFormat.format(filter, encodedParams); logger.debug(\"Using filter: \" + formattedFilter); final HashSet<Map<String, List<String>>> set = new HashSet<Map<String, List<String>>>(); ContextMapper roleMapper = new ContextMapper() { public Object mapFromContext(Object ctx) { DirContextAdapter adapter = (DirContextAdapter) ctx; Map<String, List<String>> record = new HashMap<String, List<String>>(); if (attributeNames == null || attributeNames.length == 0) { try { for (NamingEnumeration ae = adapter.getAttributes().getAll(); ae .hasMore();) { Attribute attr = (Attribute) ae.next(); extractStringAttributeValues(adapter, record, attr.getID()); } } catch (NamingException x) { org.springframework.ldap.support.LdapUtils .convertLdapException(x); } } else { for (String attributeName : attributeNames) { extractStringAttributeValues(adapter, record, attributeName); } } record.put(DN_KEY, Arrays.asList(getAdapterDN(adapter))); set.add(record); return null; } }; SearchControls ctls = new SearchControls(); ctls.setSearchScope(searchControls.getSearchScope()); ctls.setReturningAttributes(attributeNames != null && attributeNames.length > 0 ? attributeNames : null); search(base, formattedFilter, ctls, roleMapper); return set; }\n\n    ### Response:", "ground_truth": "Performs a search using the supplied filter and returns the values of each named\nattribute found in all entries matched by the search. Note that one directory entry\nmay have several values for the attribute. Intended for role searches and similar\nscenarios.\n\n@param base the DN to search in\n@param filter search filter to use\n@param params the parameters to substitute in the search filter\n@param attributeNames the attributes' values that are to be retrieved.\n\n@return the set of String values for each attribute found in all the matching\nentries. The attribute name is the key for each set of values. In addition each map\ncontains the DN as a String with the key predefined key {@link #DN_KEY}.", "predict": "The above method generates a Hash Set of Map of String to List of String given an LDIF string and an AttributeNames string of values to extract and the ResultSet to filter on"}, {"ID": 88, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_ssl(database): \"\"\" Returns SSL options for the selected engine \"\"\" # Set available keys per engine if database['engine'] == 'postgresql': keys = ['sslmode', 'sslcert', 'sslkey', 'sslrootcert', 'sslcrl', 'sslcompression'] else: keys = ['ssl_ca', 'ssl_capath', 'ssl_cert', 'ssl_key', 'ssl_cipher', 'ssl_check_hostname'] # Loop thru keys ssl = {} for key in keys: value = database.get(key, None) if value is not None: ssl[key] = value return ssl\n\n    ### Response: Returns SSL options for the selected engine.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static DirContextOperations searchForSingleEntryInternal(DirContext ctx, SearchControls searchControls, String base, String filter, Object[] params) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName( ctx.getNameInNamespace()); final DistinguishedName searchBaseDn = new DistinguishedName(base); final NamingEnumeration<SearchResult> resultsEnum = ctx.search(searchBaseDn, filter, params, buildControls(searchControls)); if (logger.isDebugEnabled()) { logger.debug(\"Searching for entry under DN '\" + ctxBaseDn + \"', base = '\" + searchBaseDn + \"', filter = '\" + filter + \"'\"); } Set<DirContextOperations> results = new HashSet<>(); try { while (resultsEnum.hasMore()) { SearchResult searchResult = resultsEnum.next(); DirContextAdapter dca = (DirContextAdapter) searchResult.getObject(); Assert.notNull(dca, \"No object returned by search, DirContext is not correctly configured\"); if (logger.isDebugEnabled()) { logger.debug(\"Found DN: \" + dca.getDn()); } results.add(dca); } } catch (PartialResultException e) { LdapUtils.closeEnumeration(resultsEnum); logger.info(\"Ignoring PartialResultException\"); } if (results.size() == 0) { throw new IncorrectResultSizeDataAccessException(1, 0); } if (results.size() > 1) { throw new IncorrectResultSizeDataAccessException(1, results.size()); } return results.iterator().next(); }\n\n    ### Response:", "ground_truth": "Internal method extracted to avoid code duplication in AD search.", "predict": "The function searches for an LDIF entry with the given DN under the given base DN and filter and returns the first matching DN and the first matching DN and all the attributes of the matching DN"}, {"ID": 89, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func matchesError(err error, fns ...Matcher) bool { for _, fn := range fns { if fn(err) { return true } } return false }\n\n    ### Response: // matchesError returns true if any Matcher returns true.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static SearchControls buildControls(SearchControls originalControls) { return new SearchControls(originalControls.getSearchScope(), originalControls.getCountLimit(), originalControls.getTimeLimit(), originalControls.getReturningAttributes(), RETURN_OBJECT, originalControls.getDerefLinkFlag()); }\n\n    ### Response:", "ground_truth": "We need to make sure the search controls has the return object flag set to true, in\norder for the search to return DirContextAdapter instances.\n@param originalControls\n@return", "predict": "// This method generates new SearchControls with the given arguments and flags and returns the new objects"}, {"ID": 90, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _match_service(self, line_with_color): \"\"\"Return line if line matches this service's name, return None otherwise.\"\"\" line = re.compile(\"(\\x1b\\[\\d+m)+\").sub(\"\", line_with_color) # Strip color codes regexp = re.compile(r\"^\\[(.*?)\\]\\s(.*?)$\") if regexp.match(line): title = regexp.match(line).group(1).strip() if title in self.titles: return (title, regexp.match(line).group(2)) return None\n\n    ### Response: Return line if line matches this service's name, return None otherwise..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void lookupPrimaryKeys(final Map<Serializable, Acl> acls, final Set<Long> findNow, final List<Sid> sids) { Assert.notNull(acls, \"ACLs are required\"); Assert.notEmpty(findNow, \"Items to find now required\"); String sql = computeRepeatingSql(lookupPrimaryKeysWhereClause, findNow.size()); Set<Long> parentsToLookup = jdbcTemplate.query(sql, new PreparedStatementSetter() { public void setValues(PreparedStatement ps) throws SQLException { int i = 0; for (Long toFind : findNow) { i++; ps.setLong(i, toFind); } } }, new ProcessResultSet(acls, sids)); // Lookup the parents, now that our JdbcTemplate has released the database // connection (SEC-547) if (parentsToLookup.size() > 0) { lookupPrimaryKeys(acls, parentsToLookup, sids); } }\n\n    ### Response:", "ground_truth": "Locates the primary key IDs specified in \"findNow\", adding AclImpl instances with\nStubAclParents to the \"acls\" Map.\n\n@param acls the AclImpls (with StubAclParents)\n@param findNow Long-based primary keys to retrieve\n@param sids", "predict": "Lookup the parents of the given items in the given ACL Map and set of SidS"}, {"ID": 91, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getSupportedResourceTypes() { return [ DbResourceTypes::TYPE_SCHEMA, DbResourceTypes::TYPE_TABLE, DbResourceTypes::TYPE_TABLE_FIELD, DbResourceTypes::TYPE_TABLE_CONSTRAINT, DbResourceTypes::TYPE_TABLE_RELATIONSHIP, DbResourceTypes::TYPE_VIEW, DbResourceTypes::TYPE_FUNCTION, DbResourceTypes::TYPE_PROCEDURE, ]; }\n\n    ### Response: Return an array of supported schema resource types.\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails buildDetails( HttpServletRequest context) { Collection<String> j2eeUserRoles = getUserRoles(context); Collection<? extends GrantedAuthority> userGas = j2eeUserRoles2GrantedAuthoritiesMapper .getGrantedAuthorities(j2eeUserRoles); if (logger.isDebugEnabled()) { logger.debug(\"J2EE roles [\" + j2eeUserRoles + \"] mapped to Granted Authorities: [\" + userGas + \"]\"); } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails( context, userGas); return result; }\n\n    ### Response:", "ground_truth": "Builds the authentication details object.\n\n@see org.springframework.security.authentication.AuthenticationDetailsSource#buildDetails(Object)", "predict": "PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails contains information about the J2EE and Web Authentication Details of the given request. It contains information about the J2EE and Web Authentication Details of the given request, such as J2EE Roles and Web Authentication Details, such as Web Authentication Details and Web Resources Access Details of the given request."}, {"ID": 92, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (dht *DHT) init() { listener, err := net.ListenPacket(dht.Network, dht.Address) if err != nil { panic(err) } dht.conn = listener.(*net.UDPConn) dht.routingTable = newRoutingTable(dht.KBucketSize, dht) dht.peersManager = newPeersManager(dht) dht.tokenManager = newTokenManager(dht.TokenExpiredAfter, dht) dht.transactionManager = newTransactionManager( dht.MaxTransactionCursor, dht) go dht.transactionManager.run() go dht.tokenManager.clear() go dht.blackList.clear() }\n\n    ### Response: // init initializes global varables..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private RootBeanDefinition createEmbeddedServer(Element element, ParserContext parserContext) { Object source = parserContext.extractSource(element); String suffix = element.getAttribute(ATT_ROOT_SUFFIX); if (!StringUtils.hasText(suffix)) { suffix = OPT_DEFAULT_ROOT_SUFFIX; } String port = element.getAttribute(ATT_PORT); if (!StringUtils.hasText(port)) { port = getDefaultPort(); if (logger.isDebugEnabled()) { logger.debug(\"Using default port of \" + port); } } String url = \"ldap://127.0.0.1:\" + port + \"/\" + suffix; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder .rootBeanDefinition(CONTEXT_SOURCE_CLASS); contextSource.addConstructorArgValue(url); contextSource.addPropertyValue(\"userDn\", \"uid=admin,ou=system\"); contextSource.addPropertyValue(\"password\", \"secret\"); RootBeanDefinition apacheContainer = new RootBeanDefinition( \"org.springframework.security.ldap.server.ApacheDSContainer\", null, null); apacheContainer.setSource(source); apacheContainer.getConstructorArgumentValues().addGenericArgumentValue(suffix); String ldifs = element.getAttribute(ATT_LDIF_FILE); if (!StringUtils.hasText(ldifs)) { ldifs = OPT_DEFAULT_LDIF_FILE; } apacheContainer.getConstructorArgumentValues().addGenericArgumentValue(ldifs); apacheContainer.getPropertyValues().addPropertyValue(\"port\", port); logger.info(\"Embedded LDAP server bean definition created for URL: \" + url); if (parserContext.getRegistry() .containsBeanDefinition(BeanIds.EMBEDDED_APACHE_DS)) { parserContext.getReaderContext().error( \"Only one embedded server bean is allowed per application context\", element); } parserContext.getRegistry().registerBeanDefinition(BeanIds.EMBEDDED_APACHE_DS, apacheContainer); return (RootBeanDefinition) contextSource.getBeanDefinition(); }\n\n    ### Response:", "ground_truth": "Will be called if no url attribute is supplied.\n\nRegisters beans to create an embedded apache directory server.\n\n@return the BeanDefinition for the ContextSource for the embedded server.\n\n@see ApacheDSContainer", "predict": "// Creates an embedded LDAP server defined in Spring Security configuration file // Uses Spring LdapContextSource to connect to the LDAP server // If Spring LdapContextSource does not exist in Spring context // Throws exception // If configuration file does not define an LDIF file // Uses default file // If configuration file does not define LDAP port // Uses default port"}, {"ID": 93, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewAlreadyExists(kind, name string) error { return &StatusError{unversioned.Status{ Status: unversioned.StatusFailure, Code: http.StatusConflict, Reason: unversioned.StatusReasonAlreadyExists, Details: &unversioned.StatusDetails{ Kind: kind, Name: name, }, Message: fmt.Sprintf(\"%s %q already exists\", kind, name), }} }\n\n    ### Response: // NewAlreadyExists returns an error indicating the item requested exists by that identifier..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void createServletApiFilter(BeanReference authenticationManager) { final String ATT_SERVLET_API_PROVISION = \"servlet-api-provision\"; final String DEF_SERVLET_API_PROVISION = \"true\"; String provideServletApi = httpElt.getAttribute(ATT_SERVLET_API_PROVISION); if (!StringUtils.hasText(provideServletApi)) { provideServletApi = DEF_SERVLET_API_PROVISION; } if (\"true\".equals(provideServletApi)) { servApiFilter = GrantedAuthorityDefaultsParserUtils.registerWithDefaultRolePrefix(pc, SecurityContextHolderAwareRequestFilterBeanFactory.class); servApiFilter.getPropertyValues().add(\"authenticationManager\", authenticationManager); } }\n\n    ### Response:", "ground_truth": "Adds the servlet-api integration filter if required", "predict": "// This method creates and registers a filter to provide servlet API security for the application. It looks for an attributes on the Spring WebMVC Element that indicate whether to enable servlet API security or default to true.."}, {"ID": 94, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (configMgr *ConfigurationManager) GetConfigurationsByDimensionInfo(dimensionInfo string) (map[string]interface{}, error) { config := make(map[string]interface{}, 0) configMgr.configMapMux.Lock() defer configMgr.configMapMux.Unlock() for key, sourceName := range configMgr.ConfigurationMap { sValue := configMgr.configValueBySourceAndDimensionInfo(key, sourceName, dimensionInfo) if sValue == nil { continue } config[key] = sValue } return config, nil }\n\n    ### Response: // GetConfigurationsByDimensionInfo returns list of all the configuration for a particular dimensionInfo.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void createJaasApiFilter() { final String ATT_JAAS_API_PROVISION = \"jaas-api-provision\"; final String DEF_JAAS_API_PROVISION = \"false\"; String provideJaasApi = httpElt.getAttribute(ATT_JAAS_API_PROVISION); if (!StringUtils.hasText(provideJaasApi)) { provideJaasApi = DEF_JAAS_API_PROVISION; } if (\"true\".equals(provideJaasApi)) { jaasApiFilter = new RootBeanDefinition(JaasApiIntegrationFilter.class); } }\n\n    ### Response:", "ground_truth": "Adds the jaas-api integration filter if required", "predict": "// Creates and configures Jaas Api Integration Filter to enable jaas api configuration for given application.\n\n    "}, {"ID": 95, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @GET @Path(\"{guid}\") @Produces(Servlets.JSON_MEDIA_TYPE) public Response getEntityDefinition(@PathParam(\"guid\") String guid) { if (LOG.isDebugEnabled()) { LOG.debug(\"==> EntityResource.getEntityDefinition({})\", guid); } AtlasPerfTracer perf = null; try { if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) { perf = AtlasPerfTracer.getPerfTracer(PERF_LOG, \"EntityResource.getEntityDefinition(\" + guid + \")\"); } if (LOG.isDebugEnabled()) { LOG.debug(\"Fetching entity definition for guid={} \", guid); } guid = ParamChecker.notEmpty(guid, \"guid cannot be null\"); final String entityDefinition = metadataService.getEntityDefinitionJson(guid); JSONObject response = new JSONObject(); response.put(AtlasClient.REQUEST_ID, Servlets.getRequestId()); Response.Status status = Response.Status.NOT_FOUND; if (entityDefinition != null) { response.put(AtlasClient.DEFINITION, new JSONObject(entityDefinition)); status = Response.Status.OK; } else { response.put(AtlasClient.ERROR, Servlets.escapeJsonString(String.format(\"An entity with GUID={%s} does not exist\", guid))); } return Response.status(status).entity(response).build(); } catch (EntityNotFoundException e) { LOG.error(\"An entity with GUID={} does not exist \", guid, e); throw new WebApplicationException(Servlets.getErrorResponse(e, Response.Status.NOT_FOUND)); } catch (AtlasException | IllegalArgumentException e) { LOG.error(\"Bad GUID={} \", guid, e); throw new WebApplicationException(Servlets.getErrorResponse(e, Response.Status.BAD_REQUEST)); } catch (WebApplicationException e) { LOG.error(\"Unable to get instance definition for GUID {}\", guid, e); throw e; } catch (Throwable e) { LOG.error(\"Unable to get instance definition for GUID {}\", guid, e); throw new WebApplicationException(Servlets.getErrorResponse(e, Response.Status.INTERNAL_SERVER_ERROR)); } finally { AtlasPerfTracer.log(perf); if (LOG.isDebugEnabled()) { LOG.debug(\"<== EntityResource.getEntityDefinition({})\", guid); } } }\n\n    ### Response: Fetch the complete definition of an entity given its GUID.\n\n@param guid GUID for the entity.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static TypeResolverBuilder<? extends TypeResolverBuilder> createWhitelistedDefaultTyping() { TypeResolverBuilder<? extends TypeResolverBuilder> result = new WhitelistTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); result = result.init(JsonTypeInfo.Id.CLASS, null); result = result.inclusion(JsonTypeInfo.As.PROPERTY); return result; }\n\n    ### Response:", "ground_truth": "Creates a TypeResolverBuilder that performs whitelisting.\n@return a TypeResolverBuilder that performs whitelisting.", "predict": "Resolves a given JSON string to an appropriate type to ensure compatibility with Jackson annotations, such as JsonIgnore or JsonRequired, to ensure compatibility with Jackson annotations, such as JsonIgnore or JsonRequired."}, {"ID": 96, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function onUpdate (update) { var value = update[0], ts = update[1], id = update[2] insertBatch (id, key, ts, JSON.stringify(value), scuttlebutt) }\n\n    ### Response: write the update twice, the first time, to store the document. maybe change scuttlebutt so that value is always a string? If i write a bunch of batches, will they come out in order? because I think updates are expected in order, or it will break..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void insertSpringSecurityFilterChain(ServletContext servletContext) { String filterName = DEFAULT_FILTER_NAME; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy( filterName); String contextAttribute = getWebApplicationContextAttribute(); if (contextAttribute != null) { springSecurityFilterChain.setContextAttribute(contextAttribute); } registerFilter(servletContext, true, filterName, springSecurityFilterChain); }\n\n    ### Response:", "ground_truth": "Registers the springSecurityFilterChain\n@param servletContext the {@link ServletContext}", "predict": "Describes the method insertSpringSecurityFilterChain which inserts Spring Security Filter into Spring MVC Application"}, {"ID": 97, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def run( self, inputs: Dict[str, Union[float, Iterable]], torch_size: Optional[int] = None, ) -> Union[float, Iterable]: \"\"\"Executes the GrFN over a particular set of inputs and returns the result. Args: inputs: Input set where keys are the names of input nodes in the GrFN and each key points to a set of input values (or just one). Returns: A set of outputs from executing the GrFN, one for every set of inputs. \"\"\" # Set input values for i in self.inputs: self.nodes[i][\"value\"] = inputs[i] for func_set in self.function_sets: for func_name in func_set: lambda_fn = self.nodes[func_name][\"lambda_fn\"] output_node = list(self.successors(func_name))[0] signature = self.nodes[func_name][\"func_inputs\"] input_values = [self.nodes[n][\"value\"] for n in signature] res = lambda_fn(*input_values) if torch_size is not None and len(signature) == 0: self.nodes[output_node][\"value\"] = torch.tensor( [res] * torch_size, dtype=torch.double ) else: self.nodes[output_node][\"value\"] = res # Return the output return self.nodes[self.output_node][\"value\"]\n\n    ### Response: Executes the GrFN over a particular set of inputs and returns the\n        result.\n\n        Args:\n            inputs: Input set where keys are the names of input nodes in the\n              GrFN and each key points to a set of input values (or just one).\n\n        Returns:\n            A set of outputs from executing the GrFN, one for every set of\n            inputs..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public PersistentRememberMeToken getTokenForSeries(String seriesId) { try { return getJdbcTemplate().queryForObject(tokensBySeriesSql, new RowMapper<PersistentRememberMeToken>() { public PersistentRememberMeToken mapRow(ResultSet rs, int rowNum) throws SQLException { return new PersistentRememberMeToken(rs.getString(1), rs .getString(2), rs.getString(3), rs.getTimestamp(4)); } }, seriesId); } catch (EmptyResultDataAccessException zeroResults) { if (logger.isDebugEnabled()) { logger.debug(\"Querying token for series '\" + seriesId + \"' returned no results.\", zeroResults); } } catch (IncorrectResultSizeDataAccessException moreThanOne) { logger.error(\"Querying token for series '\" + seriesId + \"' returned more than one value. Series\" + \" should be unique\"); } catch (DataAccessException e) { logger.error(\"Failed to load token for series \" + seriesId, e); } return null; }\n\n    ### Response:", "ground_truth": "Loads the token data for the supplied series identifier.\n\nIf an error occurs, it will be reported and null will be returned (since the result\nshould just be a failed persistent login).\n\n@param seriesId\n@return the token matching the series, or null if no match found or an exception\noccurred.", "predict": "Query for objects to retrieve the corresponding tokens for the given\n    series ID and load them into the tokenstore."}, {"ID": 98, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function deactivate() { if (!$this->sieve) { return $this->_set_error(self::ERROR_INTERNAL); } $result = $this->sieve->setActive(''); if (is_a($result, 'PEAR_Error')) { return $this->_set_error(self::ERROR_DEACTIVATE); } $this->active = null; return true; }\n\n    ### Response: De-activates specified script.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<GrantedAuthority> getGrantedAuthorities(Collection<String> attributes) { List<GrantedAuthority> result = new ArrayList<>(attributes.size()); for (String attribute : attributes) { result.add(getGrantedAuthority(attribute)); } return result; }\n\n    ### Response:", "ground_truth": "Map the given list of string attributes one-to-one to Spring Security\nGrantedAuthorities.", "predict": "Get list of authorities given by given attributes of the resource \n    given by the resource server."}, {"ID": 99, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getRelation($name) { $relation = false; if ($this->isRelation($name)) { $relation = $this->getRelations()[$name]; } return $relation; }\n\n    ### Response: Returns the relation defined in the provided property name, or false\nif there is no relation defined with that name.\n\n@param string $name\n\n@return bool|RelationInterface.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Cipher newCipher(String algorithm) { try { return Cipher.getInstance(algorithm); } catch (NoSuchAlgorithmException e) { throw new IllegalArgumentException(\"Not a valid encryption algorithm\", e); } catch (NoSuchPaddingException e) { throw new IllegalStateException(\"Should not happen\", e); } }\n\n    ### Response:", "ground_truth": "Constructs a new Cipher.", "predict": "Creates and returns an appropriate Cipher instance corresponding to the given encryption algorithm"}, {"ID": 100, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getType() { $name = get_class($this); $name = explode('\\\\', $name); $name = $name[count($name) - 2]; return $name; }\n\n    ### Response: Get the type of strategy.\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void afterPropertiesSet() { try { super.afterPropertiesSet(); } catch (ServletException e) { // convert to RuntimeException for passivity on afterPropertiesSet signature throw new RuntimeException(e); } Assert.notNull(authenticationManager, \"An AuthenticationManager must be set\"); }\n\n    ### Response:", "ground_truth": "Check whether all required properties have been set.", "predict": "Override the default behavior of the afterPropertiesSet method to convert any exception into run-time exception for compatibility purpose."}, {"ID": 101, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def cmd(send, msg, args): \"\"\"Checks if a website is up. Syntax: {command} <website> \"\"\" if not msg: send(\"What are you trying to get to?\") return nick = args['nick'] isup = get(\"http://isup.me/%s\" % msg).text if \"looks down from here\" in isup: send(\"%s: %s is down\" % (nick, msg)) elif \"like a site on the interwho\" in isup: send(\"%s: %s is not a valid url\" % (nick, msg)) else: send(\"%s: %s is up\" % (nick, msg))\n\n    ### Response: Checks if a website is up.\n\n    Syntax: {command} .\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { if (logger.isDebugEnabled()) { logger.debug(\"Checking secure context token: \" + SecurityContextHolder.getContext().getAuthentication()); } if (requiresAuthentication((HttpServletRequest) request)) { doAuthenticate((HttpServletRequest) request, (HttpServletResponse) response); } chain.doFilter(request, response); }\n\n    ### Response:", "ground_truth": "Try to authenticate a pre-authenticated user with Spring Security if the user has\nnot yet been authenticated.", "predict": "Do Filter : Check secure context token and do Authentication if necessary"}, {"ID": 102, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def find_spans(degree, knot_vector, num_ctrlpts, knots, func=find_span_linear): \"\"\" Finds spans of a list of knots over the knot vector. :param degree: degree, :math:`p` :type degree: int :param knot_vector: knot vector, :math:`U` :type knot_vector: list, tuple :param num_ctrlpts: number of control points, :math:`n + 1` :type num_ctrlpts: int :param knots: list of knots or parameters :type knots: list, tuple :param func: function for span finding, e.g. linear or binary search :return: list of spans :rtype: list \"\"\" spans = [] for knot in knots: spans.append(func(degree, knot_vector, num_ctrlpts, knot)) return spans\n\n    ### Response: Finds spans of a list of knots over the knot vector.\n\n    :param degree: degree, :math:`p`\n    :type degree: int\n    :param knot_vector: knot vector, :math:`U`\n    :type knot_vector: list, tuple\n    :param num_ctrlpts: number of control points, :math:`n + 1`\n    :type num_ctrlpts: int\n    :param knots: list of knots or parameters\n    :type knots: list, tuple\n    :param func: function for span finding, e.g. linear or binary search\n    :return: list of spans\n    :rtype: list.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected boolean principalChanged(HttpServletRequest request, Authentication currentAuthentication) { Object principal = getPreAuthenticatedPrincipal(request); if ((principal instanceof String) && currentAuthentication.getName().equals(principal)) { return false; } if (principal != null && principal.equals(currentAuthentication.getPrincipal())) { return false; } if (logger.isDebugEnabled()) { logger.debug(\"Pre-authenticated principal has changed to \" + principal + \" and will be reauthenticated\"); } return true; }\n\n    ### Response:", "ground_truth": "Determines if the current principal has changed. The default implementation tries\n\n\nIf the {@link #getPreAuthenticatedPrincipal(HttpServletRequest)} is a String, the {@link Authentication#getName()} is compared against the pre authenticated principal\nOtherwise, the {@link #getPreAuthenticatedPrincipal(HttpServletRequest)} is compared against the {@link Authentication#getPrincipal()}\n\n\nSubclasses can override this method to determine when a principal has changed.\n\n\n@param request\n@param currentAuthentication\n@return true if the principal has changed, else false", "predict": "\n    The method principalChanged() handles the authentication pre-authentication mechanism of Spring Security to determine if the pre-authenticated principal has changed and should be re-authenticated. It checks if the objects principal is either a String or the same as the current Authentication's principal and returns true or false accordingly. If the objects principal is the same as the current Authentication's principal or the objects principal is a String indicating that the objects principal has changed, the method returns true to prompt Spring to re-authenticate the objects principal. Otherwise, the method returns false to indicate that the objects principal does not require any further action."}, {"ID": 103, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *s3Client) RemoveNotificationConfig(arn string) *probe.Error { bucket, _ := c.url2BucketAndObject() // Remove all notification configs if arn is empty if arn == \"\" { if err := c.api.RemoveAllBucketNotification(bucket); err != nil { return probe.NewError(err) } return nil } mb, e := c.api.GetBucketNotification(bucket) if e != nil { return probe.NewError(e) } fields := strings.Split(arn, \":\") if len(fields) != 6 { return errInvalidArgument().Trace(fields...) } accountArn := minio.NewArn(fields[1], fields[2], fields[3], fields[4], fields[5]) switch fields[2] { case \"sns\": mb.RemoveTopicByArn(accountArn) case \"sqs\": mb.RemoveQueueByArn(accountArn) case \"lambda\": mb.RemoveLambdaByArn(accountArn) default: return errInvalidArgument().Trace(fields[2]) } // Set the new bucket configuration if e := c.api.SetBucketNotification(bucket, mb); e != nil { return probe.NewError(e) } return nil }\n\n    ### Response: // Remove bucket notification.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void doAuthenticate(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException { Authentication authResult; Object principal = getPreAuthenticatedPrincipal(request); Object credentials = getPreAuthenticatedCredentials(request); if (principal == null) { if (logger.isDebugEnabled()) { logger.debug(\"No pre-authenticated principal found in request\"); } return; } if (logger.isDebugEnabled()) { logger.debug(\"preAuthenticatedPrincipal = \" + principal + \", trying to authenticate\"); } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken( principal, credentials); authRequest.setDetails(authenticationDetailsSource.buildDetails(request)); authResult = authenticationManager.authenticate(authRequest); successfulAuthentication(request, response, authResult); } catch (AuthenticationException failed) { unsuccessfulAuthentication(request, response, failed); if (!continueFilterChainOnUnsuccessfulAuthentication) { throw failed; } } }\n\n    ### Response:", "ground_truth": "Do the actual authentication for a pre-authenticated user.", "predict": "// Authenticate the request."}, {"ID": 104, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def shift updated_queue = [] found_job = nil @queue.each do |job| if found_job || job.status == Executor::STATUS_HOLDING updated_queue.push(job) elsif job.status == Executor::STATUS_NONE found_job = job end end @queue = updated_queue @time_start = Time.now if @time_start == nil return found_job end\n\n    ### Response: Take something from the queue.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void checkContentLength(long contentLengthToWrite) { this.contentWritten += contentLengthToWrite; boolean isBodyFullyWritten = this.contentLength > 0 && this.contentWritten >= this.contentLength; int bufferSize = getBufferSize(); boolean requiresFlush = bufferSize > 0 && this.contentWritten >= bufferSize; if (isBodyFullyWritten || requiresFlush) { doOnResponseCommitted(); } }\n\n    ### Response:", "ground_truth": "Adds the contentLengthToWrite to the total contentWritten size and checks to see if\nthe response should be written.\n\n@param contentLengthToWrite the size of the content that is about to be written.", "predict": "Checks if data written to response stream matches data specified in its Content-Length header, and flushing stream if necessary"}, {"ID": 105, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _check_valid_version(): ''' Check the version of Bower to ensure this module will work. Currently bower must be at least version 1.3. ''' # pylint: disable=no-member bower_version = _LooseVersion( __salt__['cmd.run']('bower --version')) valid_version = _LooseVersion('1.3') # pylint: enable=no-member if bower_version < valid_version: raise CommandExecutionError( '\\'bower\\' is not recent enough({0} < {1}). ' 'Please Upgrade.'.format( bower_version, valid_version ) )\n\n    ### Response: Check the version of Bower to ensure this module will work. Currently\n    bower must be at least version 1.3..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Set<GrantedAuthority> mapAuthorities( Collection<? extends GrantedAuthority> authorities) { HashSet<GrantedAuthority> mapped = new HashSet<>( authorities.size()); for (GrantedAuthority authority : authorities) { mapped.add(mapAuthority(authority.getAuthority())); } if (defaultAuthority != null) { mapped.add(defaultAuthority); } return mapped; }\n\n    ### Response:", "ground_truth": "Creates a mapping of the supplied authorities based on the case-conversion and\nprefix settings. The mapping will be one-to-one unless duplicates are produced\nduring the conversion. If a default authority has been set, this will also be\nassigned to each mapping.\n\n@param authorities the original authorities\n\n@return the converted set of authorities", "predict": "\n    The above method maps the given authorities to corresponding authorities in the Spring security authorities mechanism. It first creates a hash set to hold the authorities and then iterates over the authorities provided by the caller to add the authorities to the hash set. If any default authorities or authorities explicitly set on the resource being protected or on the resource server is missing, then those authorities are added to the hash set of authorities to complete the mapping of authorities provided by the caller to authorities in Spring security authorities mechanism."}, {"ID": 106, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void loadTableGcsParquet(String datasetName) throws InterruptedException { // [START bigquery_load_table_gcs_parquet] String sourceUri = \"gs://cloud-samples-data/bigquery/us-states/us-states.parquet\"; TableId tableId = TableId.of(datasetName, \"us_states\"); LoadJobConfiguration configuration = LoadJobConfiguration.builder(tableId, sourceUri) .setFormatOptions(FormatOptions.parquet()) .build(); // Load the table Job loadJob = bigquery.create(JobInfo.of(configuration)); loadJob = loadJob.waitFor(); // Check the table StandardTableDefinition destinationTable = bigquery.getTable(tableId).getDefinition(); System.out.println(\"State: \" + loadJob.getStatus().getState()); System.out.printf(\"Loaded %d rows.\\n\", destinationTable.getNumRows()); // [END bigquery_load_table_gcs_parquet] }\n\n    ### Response: Example of loading a parquet file from GCS to a table..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T loginProcessingUrl(String loginProcessingUrl) { this.loginProcessingUrl = loginProcessingUrl; authFilter .setRequiresAuthenticationRequestMatcher(createLoginProcessingUrlMatcher(loginProcessingUrl)); return getSelf(); }\n\n    ### Response:", "ground_truth": "Specifies the URL to validate the credentials.\n\n@param loginProcessingUrl the URL to validate username and password\n@return the {@link FormLoginConfigurer} for additional customization", "predict": "The method loginProcessingUrl accepts a string parameter of the url of the processing url of the given application and uses that parameter to determine if the given request should be authenticated and authorized or not."}, {"ID": 107, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (o CommandCode) IsQuiet() bool { switch o { case GETQ, GETKQ, SETQ, ADDQ, REPLACEQ, DELETEQ, INCREMENTQ, DECREMENTQ, QUITQ, FLUSHQ, APPENDQ, PREPENDQ, RSETQ, RAPPENDQ, RPREPENDQ, RDELETEQ, RINCRQ, RDECRQ: return true } return false }\n\n    ### Response: // Return true if a command is a \"quiet\" command..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected final void updateAuthenticationDefaults() { if (loginProcessingUrl == null) { loginProcessingUrl(loginPage); } if (failureHandler == null) { failureUrl(loginPage + \"?error\"); } final LogoutConfigurer<B> logoutConfigurer = getBuilder().getConfigurer( LogoutConfigurer.class); if (logoutConfigurer != null && !logoutConfigurer.isCustomLogoutSuccess()) { logoutConfigurer.logoutSuccessUrl(loginPage + \"?logout\"); } }\n\n    ### Response:", "ground_truth": "Updates the default values for authentication.\n\n@throws Exception", "predict": "// Updates Authentication default values // If loginProcessing url or failure handler or logout success url is null, default values are set // If custom logout success url defined, custom url overrides default url"}, {"ID": 108, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Observable<ProtectionContainerResourceInner> getAsync(String vaultName, String resourceGroupName, String fabricName, String containerName) { return getWithServiceResponseAsync(vaultName, resourceGroupName, fabricName, containerName).map(new Func1<ServiceResponse<ProtectionContainerResourceInner>, ProtectionContainerResourceInner>() { @Override public ProtectionContainerResourceInner call(ServiceResponse<ProtectionContainerResourceInner> response) { return response.body(); } }); }\n\n    ### Response: Gets details of the specific container registered to your Recovery Services vault.\n\n@param vaultName The name of the Recovery Services vault.\n@param resourceGroupName The name of the resource group associated with the Recovery Services vault.\n@param fabricName The fabric name associated with the container.\n@param containerName The container name used for this GET operation.\n@throws IllegalArgumentException thrown if parameters fail the validation\n@return the observable to the ProtectionContainerResourceInner object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected final void updateAccessDefaults(B http) { if (permitAll) { PermitAllSupport.permitAll(http, loginPage, loginProcessingUrl, failureUrl); } }\n\n    ### Response:", "ground_truth": "Updates the default values for access.", "predict": "Allows a resource to be accessed without any credentials being specified, but prevents other actions to be taken without providing credentials first\n\n// This method permits a resource to be accessed without any credentials being specified\n// It prevents other actions to be taken without providing credentials first\n\n// It accepts an HTTP client as an argument\n\n// If permitAll argument is true, permits the resource to be accessed without any credentials being specified\n// If permitAll argument is false, prevents other actions to be taken without providing credentials first\n\n// If permitAll argument is true, permits the resource to be accessed without any credentials being specified\n// If permitAll argument is false, prevents other actions to be taken without providing credentials first\n\n// If permitAll argument is true, permits the resource to be accessed without any credentials being specified\n// If permitAll argument is false, prevents other actions to be taken without providing credentials first\n\n// If permitAll argument is true, permits the resource to be accessed without any credentials being specified\n// If permitAll argument"}, {"ID": 109, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _determine_weights(self, other, settings): \"\"\" Return weights of name components based on whether or not they were omitted \"\"\" # TODO: Reduce weight for matches by prefix or initials first_is_used = settings['first']['required'] or \\ self.first and other.first first_weight = settings['first']['weight'] if first_is_used else 0 middle_is_used = settings['middle']['required'] or \\ self.middle and other.middle middle_weight = settings['middle']['weight'] if middle_is_used else 0 last_is_used = settings['last']['required'] or \\ self.last and other.last last_weight = settings['last']['weight'] if last_is_used else 0 return first_weight, middle_weight, last_weight\n\n    ### Response: Return weights of name components based on whether or not they were\n        omitted.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String mapPassword(Object passwordValue) { if (!(passwordValue instanceof String)) { // Assume it's binary passwordValue = new String((byte[]) passwordValue); } return (String) passwordValue; }\n\n    ### Response:", "ground_truth": "Extension point to allow customized creation of the user's password from the\nattribute stored in the directory.\n\n@param passwordValue the value of the password attribute\n@return a String representation of the password.", "predict": "Map an arbitrary (possibly binary) representation of a password to its corresponding String form"}, {"ID": 110, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({ \"unchecked\" }) public static <V> Optional<V> get(Map<?, ?> map, Class<V> type, Serializable id) { return Optional .ofNullable((V) map.get(new TypedIdKey<>(type, id))); }\n\n    ### Response: Retrieves a value with the given type and id from the given map.\n\n@param  the value type\n@param map the map\n@param type the type\n@param id the id\n@return the associated value, if any.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String extractRememberMeCookie(HttpServletRequest request) { Cookie[] cookies = request.getCookies(); if ((cookies == null) || (cookies.length == 0)) { return null; } for (Cookie cookie : cookies) { if (cookieName.equals(cookie.getName())) { return cookie.getValue(); } } return null; }\n\n    ### Response:", "ground_truth": "Locates the Spring Security remember me cookie in the request and returns its\nvalue. The cookie is searched for by name and also by matching the context path to\nthe cookie path.\n\n@param request the submitted request which is to be authenticated\n@return the cookie value (if present), null otherwise.", "predict": "Extracts the remember-me cookie from the given HTTP request."}, {"ID": 111, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function send($method, $path = null, $data = [], array $options = []) { $defaults = ['return' => 'body']; $options += $defaults; $request = $this->_request($method, $path, $data, $options); $options += ['message' => $request]; if (!$this->connection || !$this->connection->open($options)) { return; } $response = $this->connection->send($request, $options); $this->connection->close(); if ($response->status['code'] == 401 && $auth = $response->digest()) { $request->auth = $auth; $this->connection->open(['message' => $request] + $options); $response = $this->connection->send($request, $options); $this->connection->close(); } $this->last = (object) compact('request', 'response'); $handlers = $this->_responseTypes; $handler = isset($handlers[$options['return']]) ? $handlers[$options['return']] : null; return $handler ? $handler($response) : $response; }\n\n    ### Response: Send request and return response data. Will open the connection if\nneeded and always close it after sending the request.\n\nWill automatically authenticate when receiving a `401` HTTP status code\nthen continue retrying sending initial request.\n\n@param string $method\n@param string $path\n@param array $data the parameters for the request. For GET/DELETE this is the query string\nfor POST/PUT this is the body\n@param array $options passed to request and socket\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String encodeCookie(String[] cookieTokens) { StringBuilder sb = new StringBuilder(); for (int i = 0; i < cookieTokens.length; i++) { try { sb.append(URLEncoder.encode(cookieTokens[i], StandardCharsets.UTF_8.toString())); } catch (UnsupportedEncodingException e) { logger.error(e.getMessage(), e); } if (i < cookieTokens.length - 1) { sb.append(DELIMITER); } } String value = sb.toString(); sb = new StringBuilder(new String(Base64.getEncoder().encode(value.getBytes()))); while (sb.charAt(sb.length() - 1) == '=') { sb.deleteCharAt(sb.length() - 1); } return sb.toString(); }\n\n    ### Response:", "ground_truth": "Inverse operation of decodeCookie.\n\n@param cookieTokens the tokens to be encoded.\n@return base64 encoding of the tokens concatenated with the \":\" delimiter.", "predict": "\n   encode cookies to be included in HTTP request"}, {"ID": 112, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function getInstance($method, CURLConfiguration $configuration = null, $resourcePath = null) { // Check the configuration. if (null === $configuration) { $configuration = new CURLConfiguration(); } // Switch into $method. switch ($method) { case self::HTTP_METHOD_DELETE: return new CURLDeleteRequest($configuration, $resourcePath); case self::HTTP_METHOD_GET: return new CURLGetRequest($configuration, $resourcePath); case self::HTTP_METHOD_HEAD: return new CURLHeadRequest($configuration, $resourcePath); case self::HTTP_METHOD_OPTIONS: return new CURLOptionsRequest($configuration, $resourcePath); case self::HTTP_METHOD_PATCH: return new CURLPatchRequest($configuration, $resourcePath); case self::HTTP_METHOD_POST: return new CURLPostRequest($configuration, $resourcePath); case self::HTTP_METHOD_PUT: return new CURLPutRequest($configuration, $resourcePath); default: throw new InvalidHTTPMethodException($method); } }\n\n    ### Response: Get an instance.\n\n@param string $method The method.\n@param CURLConfiguration $configuration The configuration.\n@return CURLRequestInterface Returns this request.\n@throws InvalidHTTPMethodException Throws an invalid HTTP method exception if the method is not implemented..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void setCookie(String[] tokens, int maxAge, HttpServletRequest request, HttpServletResponse response) { String cookieValue = encodeCookie(tokens); Cookie cookie = new Cookie(cookieName, cookieValue); cookie.setMaxAge(maxAge); cookie.setPath(getCookiePath(request)); if (cookieDomain != null) { cookie.setDomain(cookieDomain); } if (maxAge < 1) { cookie.setVersion(1); } if (useSecureCookie == null) { cookie.setSecure(request.isSecure()); } else { cookie.setSecure(useSecureCookie); } cookie.setHttpOnly(true); response.addCookie(cookie); }\n\n    ### Response:", "ground_truth": "Sets the cookie on the response.\n\nBy default a secure cookie will be used if the connection is secure. You can set\nthe {@code useSecureCookie} property to {@code false} to override this. If you set\nit to {@code true}, the cookie will always be flagged as secure. By default the cookie\nwill be marked as HttpOnly.\n\n@param tokens the tokens which will be encoded to make the cookie value.\n@param maxAge the value passed to {@link Cookie#setMaxAge(int)}\n@param request the request\n@param response the response to add the cookie to.", "predict": "\n    Sets cookies to the given HTTP request and response objects."}, {"ID": 113, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Deserialize(p []byte) (*x.CPUs, error) { cpus := &x.CPUs{} err := json.Unmarshal(p, cpus) if err != nil { return nil, err } return cpus, nil }\n\n    ### Response: // Deserialize takes some JSON serialized bytes and unmarshals them as\n// cpux.CPUs..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Mono<Object> resolveArgument(MethodParameter parameter, BindingContext bindingContext, ServerWebExchange exchange) { ReactiveAdapter adapter = getAdapterRegistry().getAdapter(parameter.getParameterType()); Mono<SecurityContext> reactiveSecurityContext = ReactiveSecurityContextHolder.getContext(); if (reactiveSecurityContext == null) { return null; } return reactiveSecurityContext.flatMap( a -> { Object p = resolveSecurityContext(parameter, a); Mono<Object> o = Mono.justOrEmpty(p); return adapter == null ? o : Mono.just(adapter.fromPublisher(o)); }); }\n\n    ### Response:", "ground_truth": "resolve the argument to inject into the controller parameter.\n@param parameter the method parameter.\n@param bindingContext the binding context.\n@param exchange the server web exchange.\n@return the reactive mono object result.", "predict": "The resolveArgument method resolves arguments to objects for the given method. It looks for an adapater for the parameter type of the method argument in the registry of adapters and maps the argument to the appropriate objects for the given argument security context."}, {"ID": 114, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def ratio(self, col: str, ratio_col: str=\"Ratio\"): \"\"\" Add a column whith the percentages ratio from a column :param col: column to calculate ratio from :type col: str :param ratio_col: new ratio column name, defaults to \"Ratio\" :param ratio_col: str, optional :example: ``ds2 = ds.ratio(\"Col 1\")`` \"\"\" try: df = self.df.copy() df[ratio_col] = df[[col]].apply( lambda x: 100 * x / float(x.sum())) self.df = df except Exception as e: self.err(e, self.ratio, \"Can not calculate ratio\")\n\n    ### Response: Add a column whith the percentages ratio from a column\n\n        :param col: column to calculate ratio from\n        :type col: str\n        :param ratio_col: new ratio column name, defaults to \"Ratio\"\n        :param ratio_col: str, optional\n\n        :example: ``ds2 = ds.ratio(\"Col 1\")``.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private String getQueryString(final HttpServletRequest request, final Pattern artifactPattern) { final String query = request.getQueryString(); if (query == null) { return null; } final String result = artifactPattern.matcher(query).replaceFirst(\"\"); if (result.length() == 0) { return null; } // strip off the trailing & only if the artifact was the first query param return result.startsWith(\"&\") ? result.substring(1) : result; }\n\n    ### Response:", "ground_truth": "If present, removes the artifactParameterName and the corresponding value from the\nquery String.\n@param request\n@return the query String minus the artifactParameterName and the corresponding\nvalue.", "predict": "Get the query string of the given HTTP request and filter values matching the given regular expression"}, {"ID": 115, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def configmap_absent(name, namespace='default', **kwargs): ''' Ensures that the named configmap is absent from the given namespace. name The name of the configmap namespace The namespace holding the configmap. The 'default' one is going to be used unless a different one is specified. ''' ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''} configmap = __salt__['kubernetes.show_configmap'](name, namespace, **kwargs) if configmap is None: ret['result'] = True if not __opts__['test'] else None ret['comment'] = 'The configmap does not exist' return ret if __opts__['test']: ret['comment'] = 'The configmap is going to be deleted' ret['result'] = None return ret __salt__['kubernetes.delete_configmap'](name, namespace, **kwargs) # As for kubernetes 1.6.4 doesn't set a code when deleting a configmap # The kubernetes module will raise an exception if the kubernetes # server will return an error ret['result'] = True ret['changes'] = { 'kubernetes.configmap': { 'new': 'absent', 'old': 'present'}} ret['comment'] = 'ConfigMap deleted' return ret\n\n    ### Response: Ensures that the named configmap is absent from the given namespace.\n\n    name\n        The name of the configmap\n\n    namespace\n        The namespace holding the configmap. The 'default' one is going to be\n        used unless a different one is specified..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static int getServicePort(URL casServiceUrl) { int port = casServiceUrl.getPort(); if (port == -1) { port = casServiceUrl.getDefaultPort(); } return port; }\n\n    ### Response:", "ground_truth": "", "predict": "The method returns the port of the given CasServiceURL if it's -1 or the default port otherwise."}, {"ID": 116, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _calculate_solar_time(self, hour, eq_of_time, is_solar_time): \"\"\"Calculate Solar time for an hour.\"\"\" if is_solar_time: return hour return ( (hour * 60 + eq_of_time + 4 * math.degrees(self._longitude) - 60 * self.time_zone) % 1440) / 60\n\n    ### Response: Calculate Solar time for an hour..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getPrincipal() { Authentication authentication = SecurityContextHolder.getContext() .getAuthentication(); if (authentication == null) { log.warn(\"No Authentication object set in SecurityContext - returning empty String as Principal\"); return \"\"; } Object principal = authentication.getPrincipal(); if (principal instanceof LdapUserDetails) { LdapUserDetails details = (LdapUserDetails) principal; return details.getDn(); } else if (authentication instanceof AnonymousAuthenticationToken) { if (log.isDebugEnabled()) { log.debug(\"Anonymous Authentication, returning empty String as Principal\"); } return \"\"; } else { throw new IllegalArgumentException( \"The principal property of the authentication object\" + \"needs to be an LdapUserDetails.\"); } }\n\n    ### Response:", "ground_truth": "Get the principals of the logged in user, in this case the distinguished name.\n\n@return the distinguished name of the logged in user.", "predict": "The method-level comment should describe what the method does and how to use it, e.g.,\"Returns the principal name of the currently authenticated user.\" or something similar to this effect.\""}, {"ID": 117, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (m *MockVolumeDriver) CloudBackupEnumerate(arg0 *api.CloudBackupEnumerateRequest) (*api.CloudBackupEnumerateResponse, error) { ret := m.ctrl.Call(m, \"CloudBackupEnumerate\", arg0) ret0, _ := ret[0].(*api.CloudBackupEnumerateResponse) ret1, _ := ret[1].(error) return ret0, ret1 }\n\n    ### Response: // CloudBackupEnumerate mocks base method.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) { Assert.notNull(request, \"HttpServletRequest required\"); if (invalidateHttpSession) { HttpSession session = request.getSession(false); if (session != null) { logger.debug(\"Invalidating session: \" + session.getId()); session.invalidate(); } } if (clearAuthentication) { SecurityContext context = SecurityContextHolder.getContext(); context.setAuthentication(null); } SecurityContextHolder.clearContext(); }\n\n    ### Response:", "ground_truth": "Requires the request to be passed in.\n\n@param request from which to obtain a HTTP session (cannot be null)\n@param response not used (can be null)\n@param authentication not used (can be null)", "predict": "// Validates the given HTTP session, and invalidates if necessary. If session validation\n    ###             // succeeds, session may be deleted to ensure subsequent reuse does not occur\n    ###             // without explicit authorization by the server owner. If session security is\n    ###             // enabled, authentication credentials stored in the session may be deleted\n    ###             // to enforce \"logged in but not allowed\" situation"}, {"ID": 118, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func ReadAPI(fn string, m map[string][]string) error { f, err := os.Open(fn) if err != nil { return err } defer f.Close() scnr := bufio.NewScanner(f) var key string for scnr.Scan() { if s := scnr.Text(); strings.Contains(s, \"//\") { continue } else if strings.Contains(s, \"\\t\") { m[key] = append(m[key], strings.Replace(s, \"\\t\", \"\", -1)) continue } else { m[s] = make([]string, 0) key = s } } return scnr.Err() }\n\n    ### Response: // Reads api from file to map.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Authentication authenticate(Authentication auth) throws AuthenticationException { if (!(auth instanceof UsernamePasswordAuthenticationToken)) { return null; } UsernamePasswordAuthenticationToken request = (UsernamePasswordAuthenticationToken) auth; Set<GrantedAuthority> authorities; try { // Create the LoginContext object, and pass our InternallCallbackHandler LoginContext loginContext = createLoginContext( new InternalCallbackHandler(auth)); // Attempt to login the user, the LoginContext will call our // InternalCallbackHandler at this point. loginContext.login(); // Create a set to hold the authorities, and add any that have already been // applied. authorities = new HashSet<>(); // Get the subject principals and pass them to each of the AuthorityGranters Set<Principal> principals = loginContext.getSubject().getPrincipals(); for (Principal principal : principals) { for (AuthorityGranter granter : this.authorityGranters) { Set<String> roles = granter.grant(principal); // If the granter doesn't wish to grant any authorities, it should // return null. if ((roles != null) && !roles.isEmpty()) { for (String role : roles) { authorities.add(new JaasGrantedAuthority(role, principal)); } } } } // Convert the authorities set back to an array and apply it to the token. JaasAuthenticationToken result = new JaasAuthenticationToken( request.getPrincipal(), request.getCredentials(), new ArrayList<>(authorities), loginContext); // Publish the success event publishSuccessEvent(result); // we're done, return the token. return result; } catch (LoginException loginException) { AuthenticationException ase = this.loginExceptionResolver .resolveException(loginException); publishFailureEvent(request, ase); throw ase; } }\n\n    ### Response:", "ground_truth": "Attempts to login the user given the Authentication objects principal and\ncredential\n\n@param auth The Authentication object to be authenticated.\n\n@return The authenticated Authentication object, with it's grantedAuthorities set.\n\n@throws AuthenticationException This implementation does not handle 'locked' or\n'disabled' accounts. This method only throws a AuthenticationServiceException, with\nthe message of the LoginException that will be thrown, should the\nloginContext.login() method fail.", "predict": "Authentication plugin for Spring security, handles the authentication of the request and publishes corresponding success and error events to the listener(s)."}, {"ID": 119, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def conversion(self, idx): \"\"\" Switches into the 'conversion' state, used to parse a % conversion. :param idx: The format string index at which the conversion begins. \"\"\" self.state.append('conversion') self.str_begin = idx self.param_begin = None self.conv_begin = None self.modifier = conversions.Modifier() self.codes = [] self.reject = False self.code_last = False\n\n    ### Response: Switches into the 'conversion' state, used to parse a %\n        conversion.\n\n        :param idx: The format string index at which the conversion\n                    begins..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static String buildProviderUrl(List<String> urls, String baseDn) { Assert.notNull(baseDn, \"The Base DN for the LDAP server must not be null.\"); Assert.notEmpty(urls, \"At least one LDAP server URL must be provided.\"); String trimmedBaseDn = baseDn.trim(); StringBuilder providerUrl = new StringBuilder(); for (String serverUrl : urls) { String trimmedUrl = serverUrl.trim(); if (\"\".equals(trimmedUrl)) { continue; } providerUrl.append(trimmedUrl); if (!trimmedUrl.endsWith(\"/\")) { providerUrl.append(\"/\"); } providerUrl.append(trimmedBaseDn); providerUrl.append(\" \"); } return providerUrl.toString(); }\n\n    ### Response:", "ground_truth": "Builds a Spring LDAP-compliant Provider URL string, i.e. a space-separated list of\nLDAP servers with their base DNs. As the base DN must be identical for all servers,\nit needs to be supplied only once.\n\n@param urls A list of string values which are LDAP server URLs. An example would be\n\n\nldap://ldap.company.com:389\n\n\n. LDAPS URLs may be used as well, given that Spring Security is able to connect to\nthe server.\n@param baseDn The common Base DN for all provided servers, e.g.\n\n\ndc=company,dc=com\n\n\n.\n@return A Spring Security/Spring LDAP-compliant Provider URL string.", "predict": "\n    // Builds the provider URL string given an LDIAP server list and\n    // base DN. It trim the given base DN to remove any leading '/',\n    // trailing '/', and spaces, and appends each of the given LDIAP\n    // server URLs to the DN to form the provider url string of the\n    // given provider."}, {"ID": 120, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int compareByAvg(ProcProfRow lhs, ProcProfRow rhs) { if (lhs.avg * lhs.invocations > rhs.avg * rhs.invocations) { return 1; } else if (lhs.avg * lhs.invocations < rhs.avg * rhs.invocations) { return -1; } else { return 0; } }\n\n    ### Response: Sort by average, weighting the sampled average by the real invocation count..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setContextEnvironmentProperties(Map<String, Object> environment) { Assert.notEmpty(environment, \"environment must not be empty\"); this.contextEnvironmentProperties = new Hashtable<>(environment); }\n\n    ### Response:", "ground_truth": "Allows a custom environment properties to be used to create initial LDAP context.\n\n@param environment the additional environment parameters to use when creating the LDAP Context", "predict": "Sets the given environment Map to the ContextEnvironmentProperties Map to make values in the environment Map available in the ApplicationContext"}, {"ID": 121, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def update_application_metadata(template, application_id, sar_client=None): \"\"\" Update the application metadata. :param template: Content of a packaged YAML or JSON SAM template :type template: str_or_dict :param application_id: The Amazon Resource Name (ARN) of the application :type application_id: str :param sar_client: The boto3 client used to access SAR :type sar_client: boto3.client :raises ValueError \"\"\" if not template or not application_id: raise ValueError('Require SAM template and application ID to update application metadata') if not sar_client: sar_client = boto3.client('serverlessrepo') template_dict = _get_template_dict(template) app_metadata = get_app_metadata(template_dict) request = _update_application_request(app_metadata, application_id) sar_client.update_application(**request)\n\n    ### Response: Update the application metadata.\n\n    :param template: Content of a packaged YAML or JSON SAM template\n    :type template: str_or_dict\n    :param application_id: The Amazon Resource Name (ARN) of the application\n    :type application_id: str\n    :param sar_client: The boto3 client used to access SAR\n    :type sar_client: boto3.client\n    :raises ValueError.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public String getRedirectUrl() { return UrlUtils.buildFullRequestUrl(scheme, serverName, serverPort, requestURI, queryString); }\n\n    ### Response:", "ground_truth": "Indicates the URL that the user agent used for this request.\n\n@return the full URL of this request", "predict": "Override to return the full request url, with given query string appended to the original url."}, {"ID": 122, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def side_effect(self, func, *args, **kwargs): ''' Wrap side effects for spies. ''' self._spy_side_effect = func self._spy_side_effect_args = args self._spy_side_effect_kwargs = kwargs return self\n\n    ### Response: Wrap side effects for spies..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int doEndTag() throws JspException { try { if (!authorized && TagLibConfig.isUiSecurityDisabled()) { pageContext.getOut().write(TagLibConfig.getSecuredUiSuffix()); } } catch (IOException e) { throw new JspException(e); } return EVAL_PAGE; }\n\n    ### Response:", "ground_truth": "Default processing of the end tag returning EVAL_PAGE.\n\n@return EVAL_PAGE\n@see Tag#doEndTag()", "predict": "Wrap side effects for spies..\n\n    "}, {"ID": 123, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private SessionThrottleFilterConfig getConfigFromWebXML(FilterConfig filterConfig){ int limit = -1; String l = filterConfig.getInitParameter(\"limit\"); try{ if (l!=null) limit = Integer.parseInt(l); }catch(NumberFormatException ignored){ //ignored. } String target = filterConfig.getInitParameter(\"redirectTarget\"); if (target==null || target.length()==0) limit = -1; return new SessionThrottleFilterConfig(limit, target); }\n\n    ### Response: Reads config from web.xml.\n@param filterConfig\n@return.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected void initUserDetailsService() throws Exception { for (UserDetailsBuilder userBuilder : userBuilders) { getUserDetailsService().createUser(userBuilder.build()); } for (UserDetails userDetails : this.users) { getUserDetailsService().createUser(userDetails); } }\n\n    ### Response:", "ground_truth": "Populates the users that have been added.\n\n@throws Exception", "predict": "Override the initUserDetailsService to create the Users and setup the User Details Services with the builders and the created objects of Users and the Users built objects."}, {"ID": 124, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def save(self, *args, **kwargs): \"\"\" call synchronizer \"after_external_layer_saved\" method for any additional operation that must be executed after save \"\"\" after_save = kwargs.pop('after_save', True) super(LayerExternal, self).save(*args, **kwargs) # call after_external_layer_saved method of synchronizer if after_save: try: synchronizer = self.synchronizer except ImproperlyConfigured: pass else: if synchronizer: synchronizer.after_external_layer_saved(self.config) # reload schema self._reload_schema()\n\n    ### Response: call synchronizer \"after_external_layer_saved\" method\n        for any additional operation that must be executed after save.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private UserDetailsService getUserDetailsService() { Map<String, ?> beans = getBeansOfType(CachingUserDetailsService.class); if (beans.size() == 0) { beans = getBeansOfType(UserDetailsService.class); } if (beans.size() == 0) { throw new ApplicationContextException(\"No UserDetailsService registered.\"); } else if (beans.size() > 1) { throw new ApplicationContextException( \"More than one UserDetailsService registered. Please \" + \"use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements.\"); } return (UserDetailsService) beans.values().toArray()[0]; }\n\n    ### Response:", "ground_truth": "Obtains a user details service for use in RememberMeServices etc. Will return a\ncaching version if available so should not be used for beans which need to separate\nthe two.", "predict": "Map<String, ?> beans = getBeansOfType(UserDetailsService.class); If no objects of type CachingUserDetailsService or UserDetailsService are found, the exception exception( \"No UserDetailsService registered. \" ) exception( \"Please use a specific Id reference in \" \"remember-me/openid-login/or x509 elements. \" ) beans of type CachingUserDetailsService and exception( \"More than one UserDetailsService registered. exception( \"Please use a specific Id reference in exception( \"remember-me/openid-login/or exception( \"x509 /> elements. \") \") \") \") \") \") \") \") }) \") }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) })"}, {"ID": 125, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def load(fnames, tag=None, sat_id=None, fake_daily_files_from_monthly=False, flatten_twod=True): \"\"\"Load NASA CDAWeb CDF files. This routine is intended to be used by pysat instrument modules supporting a particular NASA CDAWeb dataset. Parameters ------------ fnames : (pandas.Series) Series of filenames tag : (str or NoneType) tag or None (default=None) sat_id : (str or NoneType) satellite id or None (default=None) fake_daily_files_from_monthly : bool Some CDAWeb instrument data files are stored by month, interfering with pysat's functionality of loading by day. This flag, when true, parses of daily dates to monthly files that were added internally by the list_files routine, when flagged. These dates are used here to provide data by day. Returns --------- data : (pandas.DataFrame) Object containing satellite data meta : (pysat.Meta) Object containing metadata such as column names and units Examples -------- :: # within the new instrument module, at the top level define # a new variable named load, and set it equal to this load method # code below taken from cnofs_ivm.py. # support load routine # use the default CDAWeb method load = cdw.load \"\"\" import pysatCDF if len(fnames) <= 0 : return pysat.DataFrame(None), None else: # going to use pysatCDF to load the CDF and format # data and metadata for pysat using some assumptions. # Depending upon your needs the resulting pandas DataFrame may # need modification # currently only loads one file, which handles more situations via pysat # than you may initially think if fake_daily_files_from_monthly: # parse out date from filename fname = fnames[0][0:-11] date = pysat.datetime.strptime(fnames[0][-10:], '%Y-%m-%d') with pysatCDF.CDF(fname) as cdf: # convert data to pysat format data, meta = cdf.to_pysat(flatten_twod=flatten_twod) # select data from monthly data = data.ix[date:date+pds.DateOffset(days=1) - pds.DateOffset(microseconds=1),:] return data, meta else: # basic data return with pysatCDF.CDF(fnames[0]) as cdf: return cdf.to_pysat(flatten_twod=flatten_twod)\n\n    ### Response: Load NASA CDAWeb CDF files.\n    \n    This routine is intended to be used by pysat instrument modules supporting\n    a particular NASA CDAWeb dataset.\n\n    Parameters\n    ------------\n    fnames : (pandas.Series)\n        Series of filenames\n    tag : (str or NoneType)\n        tag or None (default=None)\n    sat_id : (str or NoneType)\n        satellite id or None (default=None)\n    fake_daily_files_from_monthly : bool\n        Some CDAWeb instrument data files are stored by month, interfering\n        with pysat's functionality of loading by day. This flag, when true,\n        parses of daily dates to monthly files that were added internally\n        by the list_files routine, when flagged. These dates are\n        used here to provide data by day. \n\n    Returns\n    ---------\n    data : (pandas.DataFrame)\n        Object containing satellite data\n    meta : (pysat.Meta)\n        Object containing metadata such as column names and units\n        \n    Examples\n    --------\n    ::\n    \n        # within the new instrument module, at the top level define\n        # a new variable named load, and set it equal to this load method\n        # code below taken from cnofs_ivm.py.\n        \n        # support load routine\n        # use the default CDAWeb method\n        load = cdw.load.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addPkceParameters(Map<String, Object> attributes, Map<String, Object> additionalParameters) { String codeVerifier = this.codeVerifierGenerator.generateKey(); attributes.put(PkceParameterNames.CODE_VERIFIER, codeVerifier); try { String codeChallenge = createCodeChallenge(codeVerifier); additionalParameters.put(PkceParameterNames.CODE_CHALLENGE, codeChallenge); additionalParameters.put(PkceParameterNames.CODE_CHALLENGE_METHOD, \"S256\"); } catch (NoSuchAlgorithmException e) { additionalParameters.put(PkceParameterNames.CODE_CHALLENGE, codeVerifier); } }\n\n    ### Response:", "ground_truth": "Creates and adds additional PKCE parameters for use in the OAuth 2.0 Authorization and Access Token Requests\n\n@param attributes where {@link PkceParameterNames#CODE_VERIFIER} is stored for the token request\n@param additionalParameters where {@link PkceParameterNames#CODE_CHALLENGE} and, usually,\n{@link PkceParameterNames#CODE_CHALLENGE_METHOD} are added to be used in the authorization request.\n\n@since 5.2\n@see 1.1.  Protocol Flow\n@see 4.1.  Client Creates a Code Verifier\n@see 4.2.  Client Creates the Code Challenge", "predict": "\n    Private Map<String, Object> addPkceParameters(Map<String, Object> attributes, Map<String, Object> additionalParameters) {\n    // generate the code verifier\n    String codeVerifier = this.codeVerifierGenerator.generateKey();\n    // add the verifier to attributes\n    attributes.put(PkceParameterNames.CODE_VERIFIER, codeVerifier);\n    // generate the code challenge\n    String codeChallenge;\n    try {\n    // generate SHA-256 hash of the verifier\n    SHA256 hasher = SHA256.of(digest(codeVerifier.getBytes(UTF_8)));\n    // generate the hash of the SHA-256 hash\n    hasher.processBytes(digest(digest(digest(digest(digest(digest(digest(digest(digest(digest(digest(digest(digest"}, {"ID": 126, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (r *Reader) Read(p []byte) (n int, err error) { // Deviations from RFC 2045: // 1. in addition to \"=\\r\\n\", \"=\\n\" is also treated as soft line break. // 2. it will pass through a '\\r' or '\\n' not preceded by '=', consistent // with other broken QP encoders & decoders. for len(p) > 0 { if len(r.line) == 0 { if r.rerr != nil { return n, r.rerr } r.line, r.rerr = r.br.ReadSlice('\\n') // Does the line end in CRLF instead of just LF? hasLF := bytes.HasSuffix(r.line, lf) hasCR := bytes.HasSuffix(r.line, crlf) wholeLine := r.line r.line = bytes.TrimRightFunc(wholeLine, isQPDiscardWhitespace) if bytes.HasSuffix(r.line, softSuffix) { rightStripped := wholeLine[len(r.line):] r.line = r.line[:len(r.line)-1] if !bytes.HasPrefix(rightStripped, lf) && !bytes.HasPrefix(rightStripped, crlf) { r.rerr = fmt.Errorf(\"quotedprintable: invalid bytes after =: %q\", rightStripped) } } else if hasLF { if hasCR { r.line = append(r.line, '\\r', '\\n') } else { r.line = append(r.line, '\\n') } } continue } b := r.line[0] switch { case b == '=': if len(r.line[1:]) < 2 { return n, io.ErrUnexpectedEOF } b, err = readHexByte(r.line[1], r.line[2]) if err != nil { return n, err } r.line = r.line[2:] // 2 of the 3; other 1 is done below case b == '\\t' || b == '\\r' || b == '\\n': break case b < ' ' || b > '~': return n, fmt.Errorf(\"quotedprintable: invalid unescaped byte 0x%02x in body\", b) } p[0] = b p = p[1:] r.line = r.line[1:] n++ } return n, nil }\n\n    ### Response: // Read reads and decodes quoted-printable data from the underlying reader..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected boolean requiresAuthentication(final HttpServletRequest request, final HttpServletResponse response) { final boolean serviceTicketRequest = serviceTicketRequest(request, response); final boolean result = serviceTicketRequest || proxyReceptorRequest(request) || (proxyTicketRequest(serviceTicketRequest, request)); if (logger.isDebugEnabled()) { logger.debug(\"requiresAuthentication = \" + result); } return result; }\n\n    ### Response:", "ground_truth": "Overridden to provide proxying capabilities.", "predict": "// RequiresAuthentication makes sure that the given HTTP request contains an appropriate authorization header or that the given HTTP request is coming directly from the origin server of the given resource to ensure that the given resource is protected from unauthorized use. It makes sure that the given HTTP request contains an appropriate authorization header or that the given HTTP request is coming directly from the origin server of the given resource to ensure that the given resource is protected from unauthorized use. It makes sure that the given HTTP request contains an appropriate authorization header or that the given HTTP request is coming directly from the origin server of the given resource to ensure that the given resource is protected from unauthorized use. It makes sure that the given HTTP request contains an appropriate authorization header or that the given HTTP request is coming directly from the origin server of the given resource to ensure that the given resource is protected from unauthorized use. It makes sure that the given HTTP request contains an appropriate authorization header or that the given HTTP request is coming directly from the origin server of the given resource to ensure"}, {"ID": 127, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function addData($mixedData) { if (false === isset($this->cases[$this->currentCaseTitle])) { throw new \\UnexpectedValueException( sprintf('You cannot add data - you have to add a case first by using %s->addCase().', __CLASS__) ); } $this->cases[$this->currentCaseTitle][$this->getParamTitle()] = $mixedData; return $this; }\n\n    ### Response: Add data to current case\n\n@param mixed $mixedData\n@throws \\UnexpectedValueException\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean serviceTicketRequest(final HttpServletRequest request, final HttpServletResponse response) { boolean result = super.requiresAuthentication(request, response); if (logger.isDebugEnabled()) { logger.debug(\"serviceTicketRequest = \" + result); } return result; }\n\n    ### Response:", "ground_truth": "Indicates if the request is elgible to process a service ticket. This method exists\nfor readability.\n@param request\n@param response\n@return", "predict": "Initiates a request for a temporary security ticket to allow access to protected resources\n\nCall this method to request a temporary security ticket to allow access to protected resources. It may require authentication to run successfully."}, {"ID": 128, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def renew_access_token(access_token = nil, access_secret = nil, session_handle = nil) access_token ||= @atoken access_secret ||= @asecret session_handle ||= @session_handle old_token = ::OAuth::RequestToken.new(consumer, access_token, access_secret) # Underlying oauth consumer accepts body params and headers for request via positional params - explicit nilling of # body parameters allows for correct position for headers access_token = old_token.get_access_token({ :oauth_session_handle => session_handle, :token => old_token }, nil, @base_headers) update_attributes_from_token(access_token) rescue ::OAuth::Unauthorized => e # If the original access token is for some reason invalid an OAuth::Unauthorized could be raised. # In this case raise a XeroGateway::OAuth::TokenInvalid which can be captured by the caller. In this # situation the end user will need to re-authorize the application via the request token authorization URL raise XeroGateway::OAuth::TokenInvalid.new(e.message) end\n\n    ### Response: Renewing access tokens only works for Partner applications.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean proxyTicketRequest(final boolean serviceTicketRequest, final HttpServletRequest request) { if (serviceTicketRequest) { return false; } final boolean result = authenticateAllArtifacts && obtainArtifact(request) != null && !authenticated(); if (logger.isDebugEnabled()) { logger.debug(\"proxyTicketRequest = \" + result); } return result; }\n\n    ### Response:", "ground_truth": "Indicates if the request is elgible to process a proxy ticket.\n@param request\n@return", "predict": "The method generates a request ticket for the given request. It first checks if any artifact exists for the given request. If any artifact exists, its authentication status is checked and the method returns true. If any artifact does not exist or its authentication status does not allow access, the method returns false."}, {"ID": 129, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setCoreCompressJs($value) { $this->setFieldName('compress_js'); $this->loadObject(true); $this->setFieldValue($value); return $this; }\n\n    ### Response: Use Compressed JavaScript Libraries ~\nWhen this is enabled, MODX will serve a compressed version of the core scripts file.\n\n@param bool $value\n\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean authenticated() { Authentication authentication = SecurityContextHolder.getContext() .getAuthentication(); return authentication != null && authentication.isAuthenticated() && !(authentication instanceof AnonymousAuthenticationToken); }\n\n    ### Response:", "ground_truth": "Determines if a user is already authenticated.\n@return", "predict": "Authentication Checks ~\nChecks if the Authentication is authenticated and not an Anonymous Authentication Token."}, {"ID": 130, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def load_figure(self, fig, fmt): \"\"\"Set a new figure in the figure canvas.\"\"\" self.figcanvas.load_figure(fig, fmt) self.scale_image() self.figcanvas.repaint()\n\n    ### Response: Set a new figure in the figure canvas..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean proxyReceptorRequest(final HttpServletRequest request) { final boolean result = proxyReceptorConfigured() && proxyReceptorMatcher.matches(request); if (logger.isDebugEnabled()) { logger.debug(\"proxyReceptorRequest = \" + result); } return result; }\n\n    ### Response:", "ground_truth": "Indicates if the request is elgible to be processed as the proxy receptor.\n@param request\n@return", "predict": "The above method makes a decision on if the given request should be send to the given url and/or server and/or client and/or filter and/or processor and/or service and/or ..."}, {"ID": 131, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (u *UUID) ReadBytes(str []byte) error { /* NOTE: Duplicate of SetString, with different method signature, to prevent unnecessary copying of memory due to string <-> []byte conversion */ i := 0 x := 0 c := len(str) for x < c { a := hexchar2byte[str[x]] if a == 255 { // Invalid char, skip x++ continue } // We need to perform this check after the attempted hex-read in case // we have trailing \"}\" characters if i >= 16 { return &ErrTooLong{x, i, c} } if x+1 >= c { // Not enough to scan return &ErrTooShort{x, i, c} } b := hexchar2byte[str[x+1]] if b == 255 { // Uneven hexadecimal byte return &ErrUneven{x, i, c} } u[i] = (a << 4) | b x += 2 i++ } if i != 16 { // Can only be too short here return &ErrTooShort{x, i, c} } return nil }\n\n    ### Response: // ReadBytes reads the supplied byte array of hexadecimal characters representing\n// a UUID into the instance.\n// On invalid UUID an error is returned and the UUID state will be undetermined.\n// This function will ignore all non-hexadecimal digits..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected MethodSecurityExpressionOperations createSecurityExpressionRoot( Authentication authentication, MethodInvocation invocation) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot( authentication); root.setThis(invocation.getThis()); root.setPermissionEvaluator(getPermissionEvaluator()); root.setTrustResolver(getTrustResolver()); root.setRoleHierarchy(getRoleHierarchy()); root.setDefaultRolePrefix(getDefaultRolePrefix()); return root; }\n\n    ### Response:", "ground_truth": "Creates the root object for expression evaluation.", "predict": "// This method creates an instance of the Spring Security Expression Root using the given Authentication and AuthenticationProvider for the given method invocation. It populates the expression root with values for the This, Permission Evaluator, Trust Resolver and Role Hierarchy and sets its Default Role Prefix for the given AuthenticationProvider."}, {"ID": 132, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static MozuUrl updateQuoteItemUrl(String quoteId, String quoteItemId, String responseFields) { UrlFormatter formatter = new UrlFormatter(\"/api/commerce/quotes/{quoteId}/items/{quoteItemId}?responseFields={responseFields}\"); formatter.formatUrl(\"quoteId\", quoteId); formatter.formatUrl(\"quoteItemId\", quoteItemId); formatter.formatUrl(\"responseFields\", responseFields); return new MozuUrl(formatter.getResourceUrl(), MozuUrl.UrlLocation.TENANT_POD) ; }\n\n    ### Response: Get Resource Url for UpdateQuoteItem\n@param quoteId\n@param quoteItemId\n@param responseFields Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.\n@return   String Resource Url.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Mono<JWKSet> getJWKSet() { return this.webClient.get() .uri(this.jwkSetURL) .retrieve() .bodyToMono(String.class) .map(this::parse) .doOnNext(jwkSet -> this.cachedJWKSet.set(Mono.just(jwkSet))) .cache(); }\n\n    ### Response:", "ground_truth": "Updates the cached JWK set from the configured URL.\n\n@return The updated JWK set.\n\n@throws RemoteKeySourceException If JWK retrieval failed.", "predict": "Get Mono of JWK Set from given url\n@GET\n@Path(\"/\")\n@Produces({\"application/jwt\"})\npublic Mono<JWKSet> getJWKSet(@RequestPath(\"/\") String url) {\n UriBuilder builder = UriBuilder.fromPath(\"/\");\n return webClient.get(builder.build().toString());\n\n}\n\nParsing JWK Set from given url\nMoving cachedJWK to set to avoid unnecessary retrieval"}, {"ID": 133, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String double2str(final double doubleValue, final int radix) { if (radix != 10 && radix != 16) { throw new IllegalArgumentException(\"Illegal radix [\" + radix + ']'); } final String result; if (radix == 16) { String converted = Double.toHexString(doubleValue); boolean minus = converted.startsWith(\"-\"); if (minus) { converted = converted.substring(1); } if (converted.startsWith(\"0x\")) { converted = converted.substring(2); } result = (minus ? '-' + converted : converted).toUpperCase(Locale.ENGLISH); } else { result = Double.toString(doubleValue); } return result; }\n\n    ### Response: Convert double value into string representation with defined radix\nbase.\n\n@param doubleValue value to be converted in string\n@param radix       radix base to be used for conversion, must be 10 or 16\n@return converted value as upper case string\n@throws IllegalArgumentException for wrong radix base\n@since 1.4.0.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private String utf8UrlEncode(String value) { try { return URLEncoder.encode(value, \"UTF-8\"); } catch (UnsupportedEncodingException e) { Error err = new AssertionError( \"The Java platform guarantees UTF-8 support, but it seemingly is not present.\"); err.initCause(e); throw err; } }\n\n    ### Response:", "ground_truth": "Performs URL encoding with UTF-8\n\n@param value the value to URL encode\n@return the encoded value", "predict": "Convert given string to UTF8 form and encode it"}, {"ID": 134, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private SocketChannel connect() { try { // Async connect has finished. Check whether an error occurred boolean finished = fd.finishConnect(); assert (finished); return fd; } catch (IOException e) { return null; } }\n\n    ### Response: null if the connection was unsuccessful..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Collection<? extends GrantedAuthority> getWebSphereGroupsBasedGrantedAuthorities() { List<String> webSphereGroups = wasHelper.getGroupsForCurrentUser(); Collection<? extends GrantedAuthority> userGas = webSphereGroups2GrantedAuthoritiesMapper .getGrantedAuthorities(webSphereGroups); if (logger.isDebugEnabled()) { logger.debug(\"WebSphere groups: \" + webSphereGroups + \" mapped to Granted Authorities: \" + userGas); } return userGas; }\n\n    ### Response:", "ground_truth": "Get a list of Granted Authorities based on the current user's WebSphere groups.\n\n@return authorities mapped from the user's WebSphere groups.", "predict": "WebSphere groups: and mapped to Granted Authorities:"}, {"ID": 135, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DerInputStream toDerInputStream() throws IOException { if (tag == tag_Sequence || tag == tag_Set) return new DerInputStream(buffer); throw new IOException(\"toDerInputStream rejects tag type \" + tag); }\n\n    ### Response: For \"set\" and \"sequence\" types, this function may be used\nto return a DER stream of the members of the set or sequence.\nThis operation is not supported for primitive types such as\nintegers or bit strings..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected UserDetails loadUserByAssertion(final Assertion assertion) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken( assertion, \"\"); return this.authenticationUserDetailsService.loadUserDetails(token); }\n\n    ### Response:", "ground_truth": "Template method for retrieving the UserDetails based on the assertion. Default is\nto call configured userDetailsService and pass the username. Deployers can override\nthis method and retrieve the user based on any criteria they desire.\n\n@param assertion The CAS Assertion.\n@return the UserDetails.", "predict": "The loadUserByAssertion method may be used to retrieve the\nuser details of the given assertion. It makes use of the CasAssertionAuthenticationToken to retrieve the details of the given\nuser."}, {"ID": 136, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getText($sSelector) { $oElement = $this->getElementLazy($sSelector); try { $sText = $oElement->getText(); } catch (Exception $e) { sleep(1); $sText = $oElement->getText(); } return $sText; }\n\n    ### Response: Overrides original method - waits for element before checking for text\n\n@param string $sSelector text to be searched\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Object getPreAuthenticatedPrincipal(HttpServletRequest httpRequest) { Object principal = wasHelper.getCurrentUserName(); if (logger.isDebugEnabled()) { logger.debug(\"PreAuthenticated WebSphere principal: \" + principal); } return principal; }\n\n    ### Response:", "ground_truth": "Return the WebSphere user name.", "predict": "Override original method to retrieve WebSphere PreAutheticated principal\n    \"\"\"\n     Override original method to retrieve WebSphere PreAutheticated principal\n    \"\"\"\n    public Object getPreAuthenticatedPrincipal(HttpServletRequest request) {\n        Object principal = wasHelper.getCurrentUserName();\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"PreAuthenticated WebSphere principal: \" + principal);\n        }\n        return principal;\n    }"}, {"ID": 137, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def calc_mean_time_deviation(timepoints, weights, mean_time=None): \"\"\"Return the weighted deviation of the given timepoints from their mean time. With equal given weights, the is simply the standard deviation of the given time points: >>> from hydpy import calc_mean_time_deviation >>> calc_mean_time_deviation(timepoints=[3., 7.], ... weights=[2., 2.]) 2.0 One can pass a precalculated or alternate mean time: >>> from hydpy import round_ >>> round_(calc_mean_time_deviation(timepoints=[3., 7.], ... weights=[2., 2.], ... mean_time=4.)) 2.236068 >>> round_(calc_mean_time_deviation(timepoints=[3., 7.], ... weights=[1., 3.])) 1.732051 Or, in the most extreme case: >>> calc_mean_time_deviation(timepoints=[3., 7.], ... weights=[0., 4.]) 0.0 There will be some checks for input plausibility perfomed, e.g.: >>> calc_mean_time_deviation(timepoints=[3., 7.], ... weights=[-2., 2.]) Traceback (most recent call last): ... ValueError: While trying to calculate the weighted time deviation \\ from mean time, the following error occurred: For the following objects, \\ at least one value is negative: weights. \"\"\" timepoints = numpy.array(timepoints) weights = numpy.array(weights) validtools.test_equal_shape(timepoints=timepoints, weights=weights) validtools.test_non_negative(weights=weights) if mean_time is None: mean_time = calc_mean_time(timepoints, weights) return (numpy.sqrt(numpy.dot(weights, (timepoints-mean_time)**2) / numpy.sum(weights)))\n\n    ### Response: Return the weighted deviation of the given timepoints from their mean\n    time.\n\n    With equal given weights, the is simply the standard deviation of the\n    given time points:\n\n    >>> from hydpy import calc_mean_time_deviation\n    >>> calc_mean_time_deviation(timepoints=[3., 7.],\n    ...                          weights=[2., 2.])\n    2.0\n\n    One can pass a precalculated or alternate mean time:\n\n    >>> from hydpy import round_\n    >>> round_(calc_mean_time_deviation(timepoints=[3., 7.],\n    ...                                 weights=[2., 2.],\n    ...                                 mean_time=4.))\n    2.236068\n\n    >>> round_(calc_mean_time_deviation(timepoints=[3., 7.],\n    ...                                 weights=[1., 3.]))\n    1.732051\n\n    Or, in the most extreme case:\n\n    >>> calc_mean_time_deviation(timepoints=[3., 7.],\n    ...                          weights=[0., 4.])\n    0.0\n\n    There will be some checks for input plausibility perfomed, e.g.:\n\n    >>> calc_mean_time_deviation(timepoints=[3., 7.],\n    ...                          weights=[-2., 2.])\n    Traceback (most recent call last):\n    ...\n    ValueError: While trying to calculate the weighted time deviation \\\nfrom mean time, the following error occurred: For the following objects, \\\nat least one value is negative: weights..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static byte[] concatenate(byte[]... arrays) { int length = 0; for (byte[] array : arrays) { length += array.length; } byte[] newArray = new byte[length]; int destPos = 0; for (byte[] array : arrays) { System.arraycopy(array, 0, newArray, destPos, array.length); destPos += array.length; } return newArray; }\n\n    ### Response:", "ground_truth": "Combine the individual byte arrays into one array.", "predict": "Concatenates arrays of any length given to the function."}, {"ID": 138, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (sa *scriptAddress) SyncStatus() SyncStatus { switch { case sa.flags.unsynced && !sa.flags.partialSync: return Unsynced(sa.firstBlock) case sa.flags.unsynced && sa.flags.partialSync: return PartialSync(sa.partialSyncHeight) default: return FullSync{} } }\n\n    ### Response: // SyncStatus returns a SyncStatus type for how the address is currently\n// synced.  For an Unsynced type, the value is the recorded first seen\n// block height of the address.\n// Implements WalletAddress..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static byte[] subArray(byte[] array, int beginIndex, int endIndex) { int length = endIndex - beginIndex; byte[] subarray = new byte[length]; System.arraycopy(array, beginIndex, subarray, 0, length); return subarray; }\n\n    ### Response:", "ground_truth": "Extract a sub array of bytes out of the byte array.\n@param array the byte array to extract from\n@param beginIndex the beginning index of the sub array, inclusive\n@param endIndex the ending index of the sub array, exclusive", "predict": "// Subarray function returns a given range of values from an input array. It copies values from the input array to the returned subarray from the given start to end indices."}, {"ID": 139, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def validate_required_attributes(self, *attributes: str) -> None: \"\"\" Validates that the schema contains a series of required attributes \"\"\" self.add_errors( validate_required_attributes(self.fully_qualified_name, self._spec, *attributes))\n\n    ### Response: Validates that the schema contains a series of required attributes.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<GrantedAuthority> getGrantedAuthorities(Collection<String> attributes) { ArrayList<GrantedAuthority> gaList = new ArrayList<>(); for (String attribute : attributes) { Collection<GrantedAuthority> c = attributes2grantedAuthoritiesMap .get(attribute); if (c != null) { gaList.addAll(c); } } gaList.trimToSize(); return gaList; }\n\n    ### Response:", "ground_truth": "Map the given array of attributes to Spring Security GrantedAuthorities.", "predict": "The method generates a list of authorities given attributes specified in the collection of string attributes provided to the method."}, {"ID": 140, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function determineModelState(ModelInterface $model, $level) { $model->setMeta(DCGE::TREE_VIEW_LEVEL, $level); $model->setMeta( $model::SHOW_CHILDREN, $this->getTreeNodeStates()->isModelOpen( $model->getProviderName(), $model->getId() ) ); }\n\n    ### Response: Check the state of a model and set the metadata accordingly.\n\n@param ModelInterface $model The model of which the state shall be checked of.\n@param int            $level The tree level the model is contained within.\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Map<String, Collection<GrantedAuthority>> preProcessMap(Map<?, ?> orgMap) { Map<String, Collection<GrantedAuthority>> result = new HashMap<String, Collection<GrantedAuthority>>( orgMap.size()); for (Map.Entry<?, ?> entry : orgMap.entrySet()) { Assert.isInstanceOf(String.class, entry.getKey(), \"attributes2grantedAuthoritiesMap contains non-String objects as keys\"); result.put((String) entry.getKey(), getGrantedAuthorityCollection(entry.getValue())); } return result; }\n\n    ### Response:", "ground_truth": "Preprocess the given map to convert all the values to GrantedAuthority collections\n\n@param orgMap The map to process\n@return the processed Map", "predict": "PreProcesses Map of Strings to Collections of Granted Authority objects to produce Map of Strings to Collection of Authority objects suitable for passing into the AuthenticationProcess. The Map contains the SPI Names of the attributes as the keys and the appropriate authority objects as values determined by the SPI names of the attributes of the given resource objects."}, {"ID": 141, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewActionBlock(blockID string, elements ...BlockElement) *ActionBlock { return &ActionBlock{ Type: mbtAction, BlockID: blockID, Elements: elements, } }\n\n    ### Response: // NewActionBlock returns a new instance of an Action Block.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Collection<GrantedAuthority> getGrantedAuthorityCollection(Object value) { Collection<GrantedAuthority> result = new ArrayList<>(); addGrantedAuthorityCollection(result, value); return result; }\n\n    ### Response:", "ground_truth": "Convert the given value to a collection of Granted Authorities\n\n@param value The value to convert to a GrantedAuthority Collection\n@return Collection containing the GrantedAuthority Collection", "predict": "// This method retrieves the list of authorities given by the given value and adds it to the given collection."}, {"ID": 142, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function _getFileContents(values) { const env = getDefaultSlateEnv(); for (const key in values) { if (values.hasOwnProperty(key) && env.hasOwnProperty(key)) { env[key] = values[key]; } } return Object.entries(env) .map((keyValues) => { return `${keyValues.join('=')}\\r\\n`; }) .join('\\r\\n\\r\\n'); }\n\n    ### Response: Return default list of env variables with their assigned value, if any..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addGrantedAuthorityCollection(Collection<GrantedAuthority> result, Object value) { if (value == null) { return; } if (value instanceof Collection<?>) { addGrantedAuthorityCollection(result, (Collection<?>) value); } else if (value instanceof Object[]) { addGrantedAuthorityCollection(result, (Object[]) value); } else if (value instanceof String) { addGrantedAuthorityCollection(result, (String) value); } else if (value instanceof GrantedAuthority) { result.add((GrantedAuthority) value); } else { throw new IllegalArgumentException(\"Invalid object type: \" + value.getClass().getName()); } }\n\n    ### Response:", "ground_truth": "Convert the given value to a collection of Granted Authorities, adding the result\nto the given result collection.\n\n@param value The value to convert to a GrantedAuthority Collection\n@return Collection containing the GrantedAuthority Collection", "predict": "This method adds the given values to the Result collection and may add additional values to the Result collection if the given values were already added to the Result collection and the Result collection contains other values of other types such as string arrays, string sets, and string collections of any other types of objects or arrays of other objects or arrays of other string sets or string collections of other string sets or string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other string collections of other"}, {"ID": 143, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function dropdown($entries, $title, $name = null, $parameters = [], $attributes = [], $isVisible = true) { return new Dropdown($entries, $title, $name, $parameters, $attributes, $isVisible); }\n\n    ### Response: Returns a new html ul-like dropdown menu with sub-elements.\n\n@param array $entries\n@param string $title\n@param string|null $name\n@param array $parameters\n@param array $attributes\n@param bool $isVisible\n@return Dropdown.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Object getPreAuthenticatedPrincipal(HttpServletRequest httpRequest) { Object principal = httpRequest.getUserPrincipal() == null ? null : httpRequest .getUserPrincipal().getName(); if (logger.isDebugEnabled()) { logger.debug(\"PreAuthenticated J2EE principal: \" + principal); } return principal; }\n\n    ### Response:", "ground_truth": "Return the J2EE user name.", "predict": "Get the PreAuthenticated J2EE principal from the given HTTP request."}, {"ID": 144, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static public void createDbFromSqlStatements( Context context, String dbName, int dbVersion, String sqlStatements) { File f = context.getDatabasePath(dbName); f.getParentFile().mkdirs(); SQLiteDatabase db = SQLiteDatabase.openOrCreateDatabase(f, null); // TODO: this is not quite safe since it assumes that all semicolons at the end of a line // terminate statements. It is possible that a text field contains ;\\n. We will have to fix // this if that turns out to be a problem. String[] statements = TextUtils.split(sqlStatements, \";\\n\"); for (String statement : statements) { if (TextUtils.isEmpty(statement)) continue; db.execSQL(statement); } db.setVersion(dbVersion); db.close(); }\n\n    ### Response: Creates a db and populates it with the sql statements in sqlStatements.\n\n@param context the context to use to create the db\n@param dbName the name of the db to create\n@param dbVersion the version to set on the db\n@param sqlStatements the statements to use to populate the db. This should be a single string\nof the form returned by sqlite3's .dump command (statements separated by\nsemicolons).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public <C> C getSharedObject(Class<C> sharedType) { return (C) this.sharedObjects.get(sharedType); }\n\n    ### Response:", "ground_truth": "Gets a shared Object. Note that object heirarchies are not considered.\n\n@param sharedType the type of the shared Object\n@return the shared Object or null if it is not found", "predict": "Get an instance of the given sharedType from the sharedObject Map."}, {"ID": 145, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function printIndices( InputInterface $input, OutputInterface $output, array $indices ) { $hasIndices = !empty($indices); $table = new Table($output); $headers = ['UUID', 'App ID', 'Doc Count', 'Size', 'Ok?', 'shards', 'replicas']; $withMetadata = $input->getOption('with-metadata'); $withFields = $input->getOption('with-fields'); if ($hasIndices && $withFields) { $headers[] = 'Fields'; } if ($hasIndices && $withMetadata) { foreach ($indices[0]->getMetadata() as $field => $_) { $headers[] = ucfirst($field); } } $table->setHeaders($headers); /* * @var Index */ foreach ($indices as $index) { $row = [ $index->getUUID()->composeUUID(), $index->getAppUUID()->composeUUID(), $index->getDocCount(), $index->getSize(), $index->isOK() ? 'Yes' : 'No', $index->getShards(), $index->getReplicas(), ]; if ($withFields) { $fields = $index->getFields(); array_walk($fields, function (string &$type, string $field) { $type = \"$field: $type\"; }); $row[] = implode(\"\\n\", $fields); } if ($withMetadata) { foreach ($index->getMetadata() as $_ => $value) { $row[] = $value; } } $table->addRow($row); } $table->render(); }\n\n    ### Response: Print indices.\n\n@param InputInterface  $input\n@param OutputInterface $output\n@param Index[]         $indices.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String buildHttpsRedirectUrlForRequest(HttpServletRequest request) throws IOException, ServletException { int serverPort = portResolver.getServerPort(request); Integer httpsPort = portMapper.lookupHttpsPort(Integer.valueOf(serverPort)); if (httpsPort != null) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder(); urlBuilder.setScheme(\"https\"); urlBuilder.setServerName(request.getServerName()); urlBuilder.setPort(httpsPort.intValue()); urlBuilder.setContextPath(request.getContextPath()); urlBuilder.setServletPath(request.getServletPath()); urlBuilder.setPathInfo(request.getPathInfo()); urlBuilder.setQuery(request.getQueryString()); return urlBuilder.getUrl(); } // Fall through to server-side forward with warning message logger.warn(\"Unable to redirect to HTTPS as no port mapping found for HTTP port \" + serverPort); return null; }\n\n    ### Response:", "ground_truth": "Builds a URL to redirect the supplied request to HTTPS. Used to redirect the\ncurrent request to HTTPS, before doing a forward to the login page.", "predict": "Builds and returns a HTTPS redirect url given the current request."}, {"ID": 146, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function humanSize($bytes) { // Make sure we can't divide by zero if ($bytes == 0) { return '0 B'; } $value = floor(log($bytes, 1024)); $units = array('B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'); $unit = $units[$value]; // Chosen unit return sprintf('%.02F', $bytes / pow(1024, $value)) * 1 . ' ' . $unit; }\n\n    ### Response: Turns raw bytes into human-readable format\n\n@param int $bytes\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object invoke(JoinPoint jp, AspectJCallback advisorProceed) { InterceptorStatusToken token = super .beforeInvocation(new MethodInvocationAdapter(jp)); Object result; try { result = advisorProceed.proceedWithObject(); } finally { super.finallyInvocation(token); } return super.afterInvocation(token, result); }\n\n    ### Response:", "ground_truth": "Method that is suitable for user with traditional AspectJ-code aspects.\n\n@param jp The AspectJ joint point being invoked which requires a security decision\n@param advisorProceed the advice-defined anonymous class that implements\n{@code AspectJCallback} containing a simple {@code return proceed();} statement\n\n@return The returned value from the method invocation", "predict": "Invoke the advice of the aspect and transform the objects returned to the caller"}, {"ID": 147, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function query(string $number, string $type) { $params = [ 'appid' => $this->app['config']->app_id, $type => $number, ]; return $this->request($this->wrap('pay/refundquery'), $params); }\n\n    ### Response: Query refund.\n\n@param string $number\n@param string $type\n\n@return \\Psr\\Http\\Message\\ResponseInterface|\\EasyWeChat\\Kernel\\Support\\Collection|array|object|string\n\n@throws \\EasyWeChat\\Kernel\\Exceptions\\InvalidConfigException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static String hasRole(String role) { Assert.isTrue( !role.startsWith(\"ROLE_\"), () -> role + \" should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead.\"); return \"ROLE_\" + role; }\n\n    ### Response:", "ground_truth": "Creates a String for specifying a user requires a role.\n\n@param role the role that should be required which is prepended with ROLE_\nautomatically (i.e. USER, ADMIN, etc). It should not start with ROLE_\n@return the {@link ConfigAttribute} expressed as a String", "predict": "Check if the given role has been assigned to the given subject by examining if the subject's role starts with the given 'ROLE_'."}, {"ID": 148, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(reason, element) { if (elements.length > 0) { var obj = elements.pop(); element = element || obj.element; obj.error.call(element, reason); bigscreen.onerror(element, reason); } }\n\n    ### Response: Make a callback to the error handlers and clear the element from the stack when an error occurs..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static String[] hasAnyRole(String... roles) { for (int i = 0; i < roles.length; i++) { roles[i] = \"ROLE_\" + roles[i]; } return roles; }\n\n    ### Response:", "ground_truth": "Creates a String for specifying that a user requires one of many roles.\n\n@param roles the roles that the user should have at least one of (i.e. ADMIN, USER,\netc). Each role should not start with ROLE_ since it is automatically prepended\nalready.\n@return the {@link ConfigAttribute} expressed as a String", "predict": "Precomputes the string values of the given arguments to speed up the function execution"}, {"ID": 149, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func compareType(d1 dosa.FieldValue, d2 dosa.FieldValue) int8 { switch d1 := d1.(type) { case dosa.UUID: u1 := uuid.FromStringOrNil(string(d1)) u2 := uuid.FromStringOrNil(string(d2.(dosa.UUID))) if u1.Version() != u2.Version() { if u1.Version() < u2.Version() { return -1 } return 1 } if u1.Version() == 1 { // compare time UUIDs t1, _ := uuid.TimestampFromV1(u1) t2, _ := uuid.TimestampFromV1(u2) if t1 == t2 { return 0 } if t1 < t2 { return -1 } return 1 } // version if string(d1) == string(d2.(dosa.UUID)) { return 0 } if string(d1) < string(d2.(dosa.UUID)) { return -1 } return 1 case string: if d1 == d2.(string) { return 0 } if d1 < d2.(string) { return -1 } return 1 case int64: if d1 == d2.(int64) { return 0 } if d1 < d2.(int64) { return -1 } return 1 case int32: if d1 == d2.(int32) { return 0 } if d1 < d2.(int32) { return -1 } return 1 case float64: if d1 == d2.(float64) { return 0 } if d1 < d2.(float64) { return -1 } return 1 case []byte: c := bytes.Compare(d1, d2.([]byte)) if c == 0 { return 0 } if c < 0 { return -1 } return 1 case time.Time: if d1.Equal(d2.(time.Time)) { return 0 } if d1.Before(d2.(time.Time)) { return -1 } return 1 case bool: if d1 == d2.(bool) { return 0 } if d1 == false { return -1 } return 1 } panic(d1) }\n\n    ### Response: // compareType compares a single DOSA field based on the type. This code assumes the types of each\n// of the columns are the same, or it will panic.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected UserDetails processAutoLoginCookie(String[] cookieTokens, HttpServletRequest request, HttpServletResponse response) { if (cookieTokens.length != 2) { throw new InvalidCookieException(\"Cookie token did not contain \" + 2 + \" tokens, but contained '\" + Arrays.asList(cookieTokens) + \"'\"); } final String presentedSeries = cookieTokens[0]; final String presentedToken = cookieTokens[1]; PersistentRememberMeToken token = tokenRepository .getTokenForSeries(presentedSeries); if (token == null) { // No series match, so we can't authenticate using this cookie throw new RememberMeAuthenticationException( \"No persistent token found for series id: \" + presentedSeries); } // We have a match for this user/series combination if (!presentedToken.equals(token.getTokenValue())) { // Token doesn't match series value. Delete all logins for this user and throw // an exception to warn them. tokenRepository.removeUserTokens(token.getUsername()); throw new CookieTheftException( messages.getMessage( \"PersistentTokenBasedRememberMeServices.cookieStolen\", \"Invalid remember-me token (Series/token) mismatch. Implies previous cookie theft attack.\")); } if (token.getDate().getTime() + getTokenValiditySeconds() * 1000L < System .currentTimeMillis()) { throw new RememberMeAuthenticationException(\"Remember-me login has expired\"); } // Token also matches, so login is valid. Update the token value, keeping the // *same* series number. if (logger.isDebugEnabled()) { logger.debug(\"Refreshing persistent login token for user '\" + token.getUsername() + \"', series '\" + token.getSeries() + \"'\"); } PersistentRememberMeToken newToken = new PersistentRememberMeToken( token.getUsername(), token.getSeries(), generateTokenData(), new Date()); try { tokenRepository.updateToken(newToken.getSeries(), newToken.getTokenValue(), newToken.getDate()); addCookie(newToken, request, response); } catch (Exception e) { logger.error(\"Failed to update token: \", e); throw new RememberMeAuthenticationException( \"Autologin failed due to data access problem\"); } return getUserDetailsService().loadUserByUsername(token.getUsername()); }\n\n    ### Response:", "ground_truth": "Locates the presented cookie data in the token repository, using the series id. If\nthe data compares successfully with that in the persistent store, a new token is\ngenerated and stored with the same series. The corresponding cookie value is set on\nthe response.\n\n@param cookieTokens the series and token values\n\n@throws RememberMeAuthenticationException if there is no stored token corresponding\nto the submitted cookie, or if the token in the persistent store has expired.\n@throws InvalidCookieException if the cookie doesn't have two tokens as expected.\n@throws CookieTheftException if a presented series value is found, but the stored\ntoken is different from the one presented.", "predict": "The autoLoginProcess() method uses the values in the cookie to compare the presenter series and\n// token values to those stored in the token repository to verify the token's authenticity. If the values match\n// and the token hasn't expired, then the token is considered authentic and the presenter is considered\n// authenticated successfully. If the values match but the token has expired, then the token is considered\n// invalid and the presenter should be deleted from the token repository and an exception should be\n// thrown to alert the presenter of the potential compromise of their remember-me session. Finally, if\n// the values of the presenter series or the token values do not match, then the token is considered\n// invalid and an exception should be thrown to alert the presenter of the potential compromise of their\n// remember-me session."}, {"ID": 150, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _get_all_timers(self, dataframe): \"\"\"Get all timers and set them in the _timers_values property :param pandas.DataFrame dataframe: the main dataframe with row results \"\"\" s = dataframe['custom_timers'].apply(json.loads) s.index = dataframe['epoch'] for index, value in s.iteritems(): if not value: continue for key, value in six.iteritems(value): self._timers_values[key].append((index, value)) self.total_timers += 1 del dataframe['custom_timers'] del s\n\n    ### Response: Get all timers and set them in the _timers_values property\n\n        :param pandas.DataFrame dataframe: the main dataframe with row results.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void onLoginSuccess(HttpServletRequest request, HttpServletResponse response, Authentication successfulAuthentication) { String username = successfulAuthentication.getName(); logger.debug(\"Creating new persistent login for user \" + username); PersistentRememberMeToken persistentToken = new PersistentRememberMeToken( username, generateSeriesData(), generateTokenData(), new Date()); try { tokenRepository.createNewToken(persistentToken); addCookie(persistentToken, request, response); } catch (Exception e) { logger.error(\"Failed to save persistent token \", e); } }\n\n    ### Response:", "ground_truth": "Creates a new persistent login token with a new series number, stores the data in\nthe persistent token repository and adds the corresponding cookie to the response.", "predict": "Creates and saves a new persistent login for the given username\n\n     * If tokenRepository.save(persistentToken) succeeds\n     * addCookie(persistentToken, request, response)\n     * for given username\n     * and saves the token"}, {"ID": 151, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def validate_otp(hsm, args): \"\"\" Validate an OTP. \"\"\" try: res = pyhsm.yubikey.validate_otp(hsm, args.otp) if args.verbose: print \"OK counter=%04x low=%04x high=%02x use=%02x\" % \\ (res.use_ctr, res.ts_low, res.ts_high, res.session_ctr) return 0 except pyhsm.exception.YHSM_CommandFailed, e: if args.verbose: print \"%s\" % (pyhsm.defines.status2str(e.status)) # figure out numerical response code for r in [pyhsm.defines.YSM_OTP_INVALID, \\ pyhsm.defines.YSM_OTP_REPLAY, \\ pyhsm.defines.YSM_ID_NOT_FOUND]: if e.status == r: return r - pyhsm.defines.YSM_RESPONSE # not found return 0xff\n\n    ### Response: Validate an OTP..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Authentication attemptSwitchUser(HttpServletRequest request) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest; String username = request.getParameter(this.usernameParameter); if (username == null) { username = \"\"; } if (this.logger.isDebugEnabled()) { this.logger.debug(\"Attempt to switch to user [\" + username + \"]\"); } UserDetails targetUser = this.userDetailsService.loadUserByUsername(username); this.userDetailsChecker.check(targetUser); // OK, create the switch user token targetUserRequest = createSwitchUserToken(request, targetUser); if (this.logger.isDebugEnabled()) { this.logger.debug(\"Switch User Token [\" + targetUserRequest + \"]\"); } // publish event if (this.eventPublisher != null) { this.eventPublisher.publishEvent(new AuthenticationSwitchUserEvent( SecurityContextHolder.getContext().getAuthentication(), targetUser)); } return targetUserRequest; }\n\n    ### Response:", "ground_truth": "Attempt to switch to another user. If the user does not exist or is not active,\nreturn null.\n\n@return The new Authentication request if successfully switched to\nanother user, null otherwise.\n\n@throws UsernameNotFoundException If the target user is not found.\n@throws LockedException if the account is locked.\n@throws DisabledException If the target user is disabled.\n@throws AccountExpiredException If the target user account is expired.\n@throws CredentialsExpiredException If the target user credentials are expired.", "predict": "Attempt to switch to user [UNDEFINED]..."}, {"ID": 152, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getHeadersAsString($status = true, $eol = \"\\n\") { $headers = ''; if ($status) { $headers = \"HTTP/{$this->version} {$this->code} {$this->reasonPhrase}{$eol}\"; } foreach ($this->headers as $name => $value) { $headers .= \"{$name}: {$value}{$eol}\"; } return $headers; }\n\n    ### Response: Get the response headers as a string.\n\n@param (bool) $status\n(string) $eol\n\n@since 3.0.0\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Authentication attemptExitUser(HttpServletRequest request) throws AuthenticationCredentialsNotFoundException { // need to check to see if the current user has a SwitchUserGrantedAuthority Authentication current = SecurityContextHolder.getContext().getAuthentication(); if (null == current) { throw new AuthenticationCredentialsNotFoundException( this.messages.getMessage(\"SwitchUserFilter.noCurrentUser\", \"No current user associated with this request\")); } // check to see if the current user did actual switch to another user // if so, get the original source user so we can switch back Authentication original = getSourceAuthentication(current); if (original == null) { this.logger.debug(\"Could not find original user Authentication object!\"); throw new AuthenticationCredentialsNotFoundException( this.messages.getMessage(\"SwitchUserFilter.noOriginalAuthentication\", \"Could not find original Authentication object\")); } // get the source user details UserDetails originalUser = null; Object obj = original.getPrincipal(); if ((obj != null) && obj instanceof UserDetails) { originalUser = (UserDetails) obj; } // publish event if (this.eventPublisher != null) { this.eventPublisher.publishEvent( new AuthenticationSwitchUserEvent(current, originalUser)); } return original; }\n\n    ### Response:", "ground_truth": "Authentication object or null\notherwise.\n\n@throws AuthenticationCredentialsNotFoundException If no\nAuthentication associated with this request.", "predict": "Attempts to exit the current User and switch to the Authentication source defined in the AuthenticationProvider."}, {"ID": 153, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void onCommunicationException(Throwable error) { String msg = I18nProvider.getGlobal().commandCommunicationError() + \":\\n\" + error.getMessage(); Log.logWarn(msg, error); SC.warn(msg); }\n\n    ### Response: Default behaviour for handling a communication exception. Shows a warning window to the user.\n\n@param error error to report.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setExitUserUrl(String exitUserUrl) { Assert.isTrue(UrlUtils.isValidRedirectUrl(exitUserUrl), \"exitUserUrl cannot be empty and must be a valid redirect URL\"); this.exitUserMatcher = createMatcher(exitUserUrl); }\n\n    ### Response:", "ground_truth": "Set the URL to respond to exit user processing.\n\n@param exitUserUrl The exit user URL.", "predict": "Prevents the exitUserUrl to be empty, and makes sure that it is a valid redirect url."}, {"ID": 154, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @ExceptionHandler(MethodArgumentNotValidException.class) @ResponseStatus(HttpStatus.BAD_REQUEST) @ResponseBody public ValidationResultInterface processValidationError( final MethodArgumentNotValidException pexception) { final BindingResult result = pexception.getBindingResult(); final List<FieldError> fieldErrors = result.getFieldErrors(); return processFieldErrors(fieldErrors); }\n\n    ### Response: handle validation errors.\n\n@param pexception exception which is thrown when data is invalid.\n@return ValidationResultData with validation errors.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @RequestMapping(value = \"/hello.htm\", method = RequestMethod.GET) public ModelAndView displayPublicIndex() { Contact rnd = contactManager.getRandomContact(); return new ModelAndView(\"hello\", \"contact\", rnd); }\n\n    ### Response:", "ground_truth": "The public index page, used for unauthenticated users.", "predict": "display public index\n\nProcess public index page"}, {"ID": 155, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def metadefs_namespace_list(request, filters=None, sort_dir='asc', sort_key='namespace', marker=None, paginate=False): \"\"\"Retrieve a listing of Namespaces :param paginate: If true will perform pagination based on settings. :param marker: Specifies the namespace of the last-seen namespace. The typical pattern of limit and marker is to make an initial limited request and then to use the last namespace from the response as the marker parameter in a subsequent limited request. With paginate, limit is automatically set. :param sort_dir: The sort direction ('asc' or 'desc'). :param sort_key: The field to sort on (for example, 'created_at'). Default is namespace. The way base namespaces are loaded into glance typically at first deployment is done in a single transaction giving them a potentially unpredictable sort result when using create_at. :param filters: specifies addition fields to filter on such as resource_types. :returns A tuple of three values: 1) Current page results 2) A boolean of whether or not there are previous page(s). 3) A boolean of whether or not there are more page(s). \"\"\" # Listing namespaces requires the v2 API. If not supported we return an # empty array so callers don't need to worry about version checking. if get_version() < 2: return [], False, False if filters is None: filters = {} limit = getattr(settings, 'API_RESULT_LIMIT', 1000) page_size = utils.get_page_size(request) if paginate: request_size = page_size + 1 else: request_size = limit kwargs = {'filters': filters} if marker: kwargs['marker'] = marker kwargs['sort_dir'] = sort_dir kwargs['sort_key'] = sort_key namespaces_iter = glanceclient(request, '2').metadefs_namespace.list( page_size=request_size, limit=limit, **kwargs) # Filter the namespaces based on the provided properties_target since this # is not supported by the metadata namespaces API. resource_types = filters.get('resource_types') properties_target = filters.get('properties_target') if resource_types and properties_target: namespaces_iter = filter_properties_target(namespaces_iter, resource_types, properties_target) has_prev_data = False has_more_data = False if paginate: namespaces = list(itertools.islice(namespaces_iter, request_size)) # first and middle page condition if len(namespaces) > page_size: namespaces.pop(-1) has_more_data = True # middle page condition if marker is not None: has_prev_data = True # first page condition when reached via prev back elif sort_dir == 'desc' and marker is not None: has_more_data = True # last page condition elif marker is not None: has_prev_data = True else: namespaces = list(namespaces_iter) namespaces = [Namespace(namespace) for namespace in namespaces] return namespaces, has_more_data, has_prev_data\n\n    ### Response: Retrieve a listing of Namespaces\n\n    :param paginate: If true will perform pagination based on settings.\n    :param marker: Specifies the namespace of the last-seen namespace.\n             The typical pattern of limit and marker is to make an\n             initial limited request and then to use the last\n             namespace from the response as the marker parameter\n             in a subsequent limited request. With paginate, limit\n             is automatically set.\n    :param sort_dir: The sort direction ('asc' or 'desc').\n    :param sort_key: The field to sort on (for example, 'created_at'). Default\n             is namespace. The way base namespaces are loaded into glance\n             typically at first deployment is done in a single transaction\n             giving them a potentially unpredictable sort result when using\n             create_at.\n    :param filters: specifies addition fields to filter on such as\n             resource_types.\n    :returns A tuple of three values:\n        1) Current page results\n        2) A boolean of whether or not there are previous page(s).\n        3) A boolean of whether or not there are more page(s)..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Bean(name = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME) public Filter springSecurityFilterChain() throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && !webSecurityConfigurers.isEmpty(); if (!hasConfigurers) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor .postProcess(new WebSecurityConfigurerAdapter() { }); webSecurity.apply(adapter); } return webSecurity.build(); }\n\n    ### Response:", "ground_truth": "Creates the Spring Security Filter Chain\n@return the {@link Filter} that represents the security filter chain\n@throws Exception", "predict": "Spring security configuration filter"}, {"ID": 156, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function highlight($field) { if (isset($this->highlighted[$field])) { return $this->highlighted[$field]; } return false; }\n\n    ### Response: Returns a highlighted field.\n\n@param string $field\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Jwt decode(String token) throws JwtException { JWT jwt = parse(token); if (jwt instanceof SignedJWT) { Jwt createdJwt = createJwt(token, jwt); return validateJwt(createdJwt); } throw new JwtException(\"Unsupported algorithm of \" + jwt.getHeader().getAlgorithm()); }\n\n    ### Response:", "ground_truth": "Decode and validate the JWT from its compact claims representation format\n\n@param token the JWT value\n@return a validated {@link Jwt}\n@throws JwtException", "predict": "Decodes the given token and verifies its authenticity by checking if the signature of the JWT is valid or not."}, {"ID": 157, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function replaceContent(&$parameters, TypoScriptFrontendController $parentObject) { if (TYPO3_MODE === 'FE') { // Fetch configuration $configuration = $parentObject->config['config']['tx_replacecontent.']; // Quit if no search/replace configuration is found if (!is_array($configuration['search.']) || !is_array($configuration['replace.'])) { return; } // Replace Content $parameters['pObj']->content = preg_replace( $configuration['search.'], $configuration['replace.'], $parameters['pObj']->content ); } }\n\n    ### Response: Search for a string and replace it with something else.\n\nYou must set the Search and Replace patterns via TypoScript.\n\nTypoScript setup usage:\nconfig.tx_replacecontent {\nsearch {\n1 = #(src|href)=(\"|')(/?)(typo3temp|fileadmin|uploads)/#\n2 = lala\n}\nreplace {\n1 = $1=$2{$config.tx_replacecontent.schema}{$config.tx_replacecontent.host}/$4/\n2 = Sm\u00f6rg\u00e5sbord\n}\n}\n\n@param array $parameters Parameters delivered by the caller (tslib_fe)\n@param TypoScriptFrontendController $parentObject The parent object (tslib_fe)\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean authorizeUsingAccessExpression() throws IOException { if (SecurityContextHolder.getContext().getAuthentication() == null) { return false; } SecurityExpressionHandler<FilterInvocation> handler = getExpressionHandler(); Expression accessExpression; try { accessExpression = handler.getExpressionParser().parseExpression(getAccess()); } catch (ParseException e) { IOException ioException = new IOException(); ioException.initCause(e); throw ioException; } return ExpressionUtils.evaluateAsBoolean(accessExpression, createExpressionEvaluationContext(handler)); }\n\n    ### Response:", "ground_truth": "Make an authorization decision based on a Spring EL expression. See the\n\"Expression-Based Access Control\" chapter in Spring Security for details on what\nexpressions can be used.\n\n@return the result of the authorization decision\n@throws IOException", "predict": "Check access expression and authorize access."}, {"ID": 158, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getNameForBackend(SoyBackendKind backend) { switch (backend) { case JS_SRC: // The 'proto' prefix is JSPB-specific. If we ever support some other // JavaScript proto implementation, we'll need some way to determine which // proto implementation the user wants to use at this point. return ProtoUtils.calculateQualifiedJsName(typeDescriptor); case TOFU: case JBC_SRC: return JavaQualifiedNames.getClassName(typeDescriptor); case PYTHON_SRC: throw new UnsupportedOperationException(); } throw new AssertionError(backend); }\n\n    ### Response: Returns this proto's type name for the given backend..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean authorizeUsingUrlCheck() throws IOException { String contextPath = ((HttpServletRequest) getRequest()).getContextPath(); Authentication currentUser = SecurityContextHolder.getContext() .getAuthentication(); return getPrivilegeEvaluator().isAllowed(contextPath, getUrl(), getMethod(), currentUser); }\n\n    ### Response:", "ground_truth": "Make an authorization decision based on the URL and HTTP method attributes. True is\nreturned if the user is allowed to access the given URL as defined.\n\n@return the result of the authorization decision\n@throws IOException", "predict": "Checks if the given url and method are allowed to run under the given context path."}, {"ID": 159, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getSize( $precision = NULL ) { $size = filesize( $this->fileName ); if( $precision ) { $size = Alg_UnitFormater::formatBytes( $size, $precision ); } return $size; }\n\n    ### Response: Returns Size of current File.\n@access\t\tpublic\n@param\t\tint\t\t\t$precision\t\tPrecision of rounded Size (only if unit is set)\n@return\t\tint.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Collection<GrantedAuthority> convert(Jwt jwt) { return getScopes(jwt) .stream() .map(authority -> SCOPE_AUTHORITY_PREFIX + authority) .map(SimpleGrantedAuthority::new) .collect(Collectors.toList()); }\n\n    ### Response:", "ground_truth": "Extracts the authorities\n@param jwt The {@link Jwt} token\n@return The {@link GrantedAuthority authorities} read from the token scopes", "predict": "Returns Scope of current Token (only if token contains Scope information) and Convert these Scope into appropriate list of Authority objects to form Authentication Grant."}, {"ID": 160, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (f *Feed) GetEventURLs() ([]string, error) { s := make([]string, len(f.Entry)) for i := 0; i < len(f.Entry); i++ { e := f.Entry[i] s[i] = strings.TrimRight(e.Link[1].Href, \"/\") } return s, nil }\n\n    ### Response: // GetEventURLs extracts a slice of event urls from the feed object..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public CsrfToken generateToken(HttpServletRequest request) { return wrap(request, this.delegate.generateToken(request)); }\n\n    ### Response:", "ground_truth": "Generates a new token\n@param request the {@link HttpServletRequest} to use. The\n{@link HttpServletRequest} must have the {@link HttpServletResponse} as an\nattribute with the name of HttpServletResponse.class.getName()", "predict": "// Override generates and returns a CsrfToken from the given request"}, {"ID": 161, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def breeding_plugevent(request, breeding_id): \"\"\"This view defines a form for adding new plug events from a breeding cage. This form requires a breeding_id from a breeding set and restricts the PlugFemale and PlugMale to animals that are defined in that breeding cage.\"\"\" breeding = get_object_or_404(Breeding, pk=breeding_id) if request.method == \"POST\": form = BreedingPlugForm(request.POST, request.FILES) if form.is_valid(): plug = form.save(commit=False) plug.Breeding_id = breeding.id plug.save() form.save() return HttpResponseRedirect(reverse(\"plugevents-list\")) else: form = BreedingPlugForm() form.fields[\"PlugFemale\"].queryset = breeding.Females.all() form.fields[\"PlugMale\"].queryset = breeding.Male.all() return render(request, 'breeding_plugevent_form.html', {'form':form, 'breeding':breeding})\n\n    ### Response: This view defines a form for adding new plug events from a breeding cage.\n\n    This form requires a breeding_id from a breeding set and restricts the PlugFemale and PlugMale to animals that are defined in that breeding cage..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @RequestMapping(value = \"/secure/adminPermission.htm\", method = RequestMethod.GET) public ModelAndView displayAdminPage(@RequestParam(\"contactId\") int contactId) { Contact contact = contactManager.getById(Long.valueOf(contactId)); Acl acl = aclService.readAclById(new ObjectIdentityImpl(contact)); Map<String, Object> model = new HashMap<>(); model.put(\"contact\", contact); model.put(\"acl\", acl); return new ModelAndView(\"adminPermission\", \"model\", model); }\n\n    ### Response:", "ground_truth": "Displays the permission admin page for a particular contact.", "predict": "\n    The above method displays the administrative settings page for the contact with the given contact id. It reads the contact details and its access control list (ACL) from the database and populates the administrative settings page with the corresponding values of contact and its access control list."}, {"ID": 162, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def hexbin(self, x, y, size, orientation=\"pointytop\", palette=\"Viridis256\", line_color=None, fill_color=None, aspect_scale=1, **kwargs): ''' Perform a simple equal-weight hexagonal binning. A :class:`~bokeh.models._glyphs.HexTile` glyph will be added to display the binning. The :class:`~bokeh.models.sources.ColumnDataSource` for the glyph will have columns ``q``, ``r``, and ``count``, where ``q`` and ``r`` are `axial coordinates`_ for a tile, and ``count`` is the associated bin count. It is often useful to set ``match_aspect=True`` on the associated plot, so that hexagonal tiles are all regular (i.e. not \"stretched\") in screen space. For more sophisticated use-cases, e.g. weighted binning or individually scaling hex tiles, use :func:`hex_tile` directly, or consider a higher level library such as HoloViews. Args: x (array[float]) : A NumPy array of x-coordinates to bin into hexagonal tiles. y (array[float]) : A NumPy array of y-coordinates to bin into hexagonal tiles size (float) : The size of the hexagonal tiling to use. The size is defined as distance from the center of a hexagon to a corner. In case the aspect scaling is not 1-1, then specifically `size` is the distance from the center to the \"top\" corner with the `\"pointytop\"` orientation, and the distance from the center to a \"side\" corner with the \"flattop\" orientation. orientation (\"pointytop\" or \"flattop\", optional) : Whether the hexagonal tiles should be oriented with a pointed corner on top, or a flat side on top. (default: \"pointytop\") palette (str or seq[color], optional) : A palette (or palette name) to use to colormap the bins according to count. (default: 'Viridis256') If ``fill_color`` is supplied, it overrides this value. line_color (color, optional) : The outline color for hex tiles, or None (default: None) fill_color (color, optional) : An optional fill color for hex tiles, or None. If None, then the ``palette`` will be used to color map the tiles by count. (default: None) aspect_scale (float) : Match a plot's aspect ratio scaling. When working with a plot with ``aspect_scale != 1``, this parameter can be set to match the plot, in order to draw regular hexagons (instead of \"stretched\" ones). This is roughly equivalent to binning in \"screen space\", and it may be better to use axis-aligned rectangular bins when plot aspect scales are not one. Any additional keyword arguments are passed to :func:`hex_tile`. Returns (Glyphrender, DataFrame) A tuple with the ``HexTile`` renderer generated to display the binning, and a Pandas ``DataFrame`` with columns ``q``, ``r``, and ``count``, where ``q`` and ``r`` are `axial coordinates`_ for a tile, and ``count`` is the associated bin count. Example: .. bokeh-plot:: :source-position: above import numpy as np from bokeh.models import HoverTool from bokeh\n\n    ### Response: Perform a simple equal-weight hexagonal binning.\n\n        A :class:`~bokeh.models._glyphs.HexTile` glyph will be added to display\n        the binning. The :class:`~bokeh.models.sources.ColumnDataSource` for\n        the glyph will have columns ``q``, ``r``, and ``count``, where ``q``\n        and ``r`` are `axial coordinates`_ for a tile, and ``count`` is the\n        associated bin count.\n\n        It is often useful to set ``match_aspect=True`` on the associated plot,\n        so that hexagonal tiles are all regular (i.e. not \"stretched\") in\n        screen space.\n\n        For more sophisticated use-cases, e.g. weighted binning or individually\n        scaling hex tiles, use :func:`hex_tile` directly, or consider a higher\n        level library such as HoloViews.\n\n        Args:\n            x (array[float]) :\n                A NumPy array of x-coordinates to bin into hexagonal tiles.\n\n            y (array[float]) :\n                A NumPy array of y-coordinates to bin into hexagonal tiles\n\n            size (float) :\n                The size of the hexagonal tiling to use. The size is defined as\n                distance from the center of a hexagon to a corner.\n\n                In case the aspect scaling is not 1-1, then specifically `size`\n                is the distance from the center to the \"top\" corner with the\n                `\"pointytop\"` orientation, and the distance from the center to\n                a \"side\" corner with the \"flattop\" orientation.\n\n            orientation (\"pointytop\" or \"flattop\", optional) :\n                Whether the hexagonal tiles should be oriented with a pointed\n                corner on top, or a flat side on top. (default: \"pointytop\")\n\n            palette (str or seq[color], optional) :\n                A palette (or palette name) to use to colormap the bins according\n                to count. (default: '.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @RequestMapping(value = \"/secure/addPermission.htm\", method = RequestMethod.GET) public ModelAndView displayAddPermissionPageForContact( @RequestParam(\"contactId\") long contactId) { Contact contact = contactManager.getById(contactId); AddPermission addPermission = new AddPermission(); addPermission.setContact(contact); Map<String, Object> model = new HashMap<>(); model.put(\"addPermission\", addPermission); model.put(\"recipients\", listRecipients()); model.put(\"permissions\", listPermissions()); return new ModelAndView(\"addPermission\", model); }\n\n    ### Response:", "ground_truth": "Displays the \"add permission\" page for a contact.", "predict": "\n    @RequestMapping(value = \"/secure/addPermission.html\", method = RequestMethod.GET)\n    public ModelAndView displayAddPermissionPageForContact(\n            @RequestParam(\"contactId\") Long contactId, Map<String, Object> model\n    ) {\n        Contact contact = contactManager.getById(contactId);\n        AddPermission addPermission = new AddPermission();\n        addPermission.setContact(contact);\n        Map<String, Object> addParameters = listParams(\n            \"addPermission=\",\n            contact.getLogin().getLoginName(),\n            contact.getLogin().getLoginType().name(),\n            contact.getLogin().getLoginOrganization().name()\n        );\n        addParameters.put(\"permissions=\", listParams(\n            \"addPermission=\",\n            \"ReadSensitiveData=\",\n            \"ReadSensitiveDataNotifications=\",\n            \"ReadSensitiveDataNotificationsSensitivities=\""}, {"ID": 163, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String consume() throws ParsingException, IllegalStateException { if (completed) throwNoMoreContent(); // Get the value from the current token ... String result = currentToken().value(); moveToNextToken(); return result; }\n\n    ### Response: Return the value of this token and move to the next token.\n\n@return the value of the current token\n@throws ParsingException if there is no such token to consume\n@throws IllegalStateException if this method was called before the stream was {@link #start() started}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @RequestMapping(value = \"/secure/addPermission.htm\", method = RequestMethod.POST) public String addPermission(AddPermission addPermission, BindingResult result, ModelMap model) { addPermissionValidator.validate(addPermission, result); if (result.hasErrors()) { model.put(\"recipients\", listRecipients()); model.put(\"permissions\", listPermissions()); return \"addPermission\"; } PrincipalSid sid = new PrincipalSid(addPermission.getRecipient()); Permission permission = permissionFactory.buildFromMask(addPermission .getPermission()); try { contactManager.addPermission(addPermission.getContact(), sid, permission); } catch (DataAccessException existingPermission) { existingPermission.printStackTrace(); result.rejectValue(\"recipient\", \"err.recipientExistsForContact\", \"Addition failure.\"); model.put(\"recipients\", listRecipients()); model.put(\"permissions\", listPermissions()); return \"addPermission\"; } return \"redirect:/secure/index.htm\"; }\n\n    ### Response:", "ground_truth": "Handles submission of the \"add permission\" form.", "predict": "Validate the given permission, add the given permission to the given contact, and notify the caller of any error that may occur during the permission add operation."}, {"ID": 164, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getQNVarName() { return \\lyquidity\\xml\\qname( $this->_varName->ToString(), $this->getContext()->NamespaceManager->getNamespaces(), true ); }\n\n    ### Response: Get the VarName as a QName.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @RequestMapping(value = \"/secure/deletePermission.htm\") public ModelAndView deletePermission(@RequestParam(\"contactId\") long contactId, @RequestParam(\"sid\") String sid, @RequestParam(\"permission\") int mask) { Contact contact = contactManager.getById(contactId); Sid sidObject = new PrincipalSid(sid); Permission permission = permissionFactory.buildFromMask(mask); contactManager.deletePermission(contact, sidObject, permission); Map<String, Object> model = new HashMap<>(); model.put(\"contact\", contact); model.put(\"sid\", sidObject); model.put(\"permission\", permission); return new ModelAndView(\"deletePermission\", \"model\", model); }\n\n    ### Response:", "ground_truth": "Deletes a permission", "predict": "deletePermission - deletes the specified contact and its associated permission given the contact id and permission mask."}, {"ID": 165, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _trychar(char, fallback, asciimode=None): # nocover \"\"\" Logic from IPython timeit to handle terminals that cant show mu Args: char (str): character, typically unicode, to try to use fallback (str): ascii character to use if stdout cannot encode char asciimode (bool): if True, always use fallback Example: >>> char = _trychar('\u00b5s', 'us') >>> print('char = {}'.format(char)) >>> assert _trychar('\u00b5s', 'us', asciimode=True) == 'us' \"\"\" if asciimode is True: # If we request ascii mode simply return it return fallback if hasattr(sys.stdout, 'encoding') and sys.stdout.encoding: # pragma: nobranch try: char.encode(sys.stdout.encoding) except Exception: # nocover pass else: return char return fallback\n\n    ### Response: Logic from IPython timeit to handle terminals that cant show mu\n\n    Args:\n        char (str): character, typically unicode, to try to use\n        fallback (str): ascii character to use if stdout cannot encode char\n        asciimode (bool): if True, always use fallback\n\n    Example:\n        >>> char = _trychar('\u00b5s', 'us')\n        >>> print('char = {}'.format(char))\n        >>> assert _trychar('\u00b5s', 'us', asciimode=True) == 'us'.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static String getRoleWithDefaultPrefix(String defaultRolePrefix, String role) { if (role == null) { return role; } if (defaultRolePrefix == null || defaultRolePrefix.length() == 0) { return role; } if (role.startsWith(defaultRolePrefix)) { return role; } return defaultRolePrefix + role; }\n\n    ### Response:", "ground_truth": "Prefixes role with defaultRolePrefix if defaultRolePrefix is non-null and if role\ndoes not already start with defaultRolePrefix.\n\n@param defaultRolePrefix\n@param role\n@return", "predict": "Get the role given its default prefix and its role\n\n    Args:\n        defaultRolePrefix (String): default prefix of the role\n        role (String): role to get\n        \n    If the role does not start with the default prefix, its default prefix is added to the role to form the returned string\n    Otherwise, its role is returned directly\n    If the role or default prefix is null or empty, its corresponding string \"\" is returned"}, {"ID": 166, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setAttribute($key, $value) { if ($value instanceof BaseModel || $value instanceof Collection) $this->setRelationship($value, $key); elseif ( !is_array($value)) $this->attributes[$key] = $value; else $this->setRelationship($value, $key); }\n\n    ### Response: Sets the attributes for this model\n\n@param mixed $key\n@param mixed $value.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static UserDetailsResourceFactoryBean fromString(String users) { InMemoryResource resource = new InMemoryResource(users); return fromResource(resource); }\n\n    ### Response:", "ground_truth": "Creates a UserDetailsResourceFactoryBean with a resource from the provided String\n\n@param users the string representing the users\n@return the UserDetailsResourceFactoryBean", "predict": "Creates objects of resource given its stringified form\n\nParses the given stringified form of resource objects to generate objects of resource"}, {"ID": 167, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function createOrUpdateCalendar(BaseCalendar $calendar, $calendarName, $replace = false, $updateTriggers = false) { $url = $this->service_url . '/jobs/calendars/' . rawurlencode($calendarName) . '?' . Util::query_suffix(array(\"replace\" => $replace, \"updateTriggers\" => $updateTriggers)); $body = $calendar->toJSON(); $this->service->prepAndSend($url, array(200), 'PUT', $body, false); }\n\n    ### Response: Create or Update a calendar\n\n@param BaseCalendar $calendar A DTO representing the new or altered calendar\n@param string $calendarName Name of the calendar to create or update\n@param bool $replace Should an existing calendar of the same name be overwritten?\n@param bool $updateTriggers Should an existing jobs using this calendar adhere to the changes made?.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<String> getAttributeValues(String name) { List<String> result = null; if (attributes != null) { result = attributes.get(name); } if (result == null) { result = Collections.emptyList(); } return result; }\n\n    ### Response:", "ground_truth": "Returns the values for a specific attribute\n\n@param name the attribute name\n@return a String array, never null but may be zero length", "predict": "Get the Value of an Attribute of this resource\n\nAttributes is an indexed collection of name/value pairs of fields of this resource which allows for quick retrieval of values without the need to parse the full resource for the given information; It provides O(1) lookups for given names without the need to parse the full resource for given information; It provides O(1) lookups for given names without the need to parse the full resource for given information; It provides O(1) lookups for given names without the need to parse the full resource for given information; It provides O(1) lookups for given names without the need to parse the full resource for given information; It provides O(1) lookups for given names without the need to parse the full resource for given information; It provides O(1) lookups for given names without the need to parse the full resource for given information; It provides O(1) lookups for given names without the need to parse the full resource for given information; It provides O(1) lookups"}, {"ID": 168, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def syndic_cmd(self, data): ''' Take the now clear load and forward it on to the client cmd ''' # Set up default tgt_type if 'tgt_type' not in data: data['tgt_type'] = 'glob' kwargs = {} # optionally add a few fields to the publish data for field in ('master_id', # which master the job came from 'user', # which user ran the job ): if field in data: kwargs[field] = data[field] def timeout_handler(*args): log.warning('Unable to forward pub data: %s', args[1]) return True with tornado.stack_context.ExceptionStackContext(timeout_handler): self.local.pub_async(data['tgt'], data['fun'], data['arg'], data['tgt_type'], data['ret'], data['jid'], data['to'], io_loop=self.io_loop, callback=lambda _: None, **kwargs)\n\n    ### Response: Take the now clear load and forward it on to the client cmd.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getFirstAttributeValue(String name) { List<String> result = getAttributeValues(name); if (result.isEmpty()) { return null; } else { return result.get(0); } }\n\n    ### Response:", "ground_truth": "Returns the first attribute value for a specified attribute\n\n@param name\n@return the first attribute value for a specified attribute, may be null", "predict": "Get the first attribute Value of the given name from the Attributes Map and returns its String Value or Null If no Value Found."}, {"ID": 169, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_json_feed_content(url, offset=0, limit=None): \"\"\" Get the entries in a JSON feed \"\"\" end = limit + offset if limit is not None else None response = _get(url) try: content = json.loads(response.text) except Exception as parse_error: logger.warning( 'Failed to parse feed from {}: {}'.format(url, str(parse_error)) ) return False return content[offset:end]\n\n    ### Response: Get the entries in a JSON feed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static byte[] encode(CharSequence string) { try { ByteBuffer bytes = CHARSET.newEncoder().encode(CharBuffer.wrap(string)); byte[] bytesCopy = new byte[bytes.limit()]; System.arraycopy(bytes.array(), 0, bytesCopy, 0, bytes.limit()); return bytesCopy; } catch (CharacterCodingException e) { throw new IllegalArgumentException(\"Encoding failed\", e); } }\n\n    ### Response:", "ground_truth": "Get the bytes of the String in UTF-8 encoded form.", "predict": "The function generates a UTF8 representation of the given string to ensure proper transmission of the string across platforms with non-unicode environments"}, {"ID": 170, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def select(self,sql): \"\"\" Execute an SQL select statement and stuff the results into a dictionary. sql = the (case sensitve) SQL statment to execute \"\"\" if not self.curs: raise LIGOLwDBError, \"Database connection not initalized\" if len(self.table) != 0: raise LIGOLwDBError, 'attempt to fill non-empty table from database' ligolw = '' self.table = {} sqltypes = { -2 : 'ilwd:char_u', 1 : 'lstring', 3 : 'real_8', 4 : 'int_4s', 5 : 'int_2s', 7 : 'real_4', 8 : 'real_8', 12 : 'lstring', 93 : 'lstring', } try: tab = re.compile(r'[Ff][Rr][Oo][Mm]\\s+([A-Za-z0-0_]+)([,\\s]+|$)').search(sql).group(1) except AttributeError: raise LIGOLwDBError, 'could not find table name in query ' + str(sql) self.table[tab] = { 'pos' : 0, 'column' : {}, 'stream' : (), 'query' : sql } try: self.curs.execute(sql) except DB2.Error, e: raise LIGOLwDBError, e[2] desc = self.curs.description for col,typ,disp,intsz,prec,sca,nul in desc: try: self.table[tab]['column'][col] = sqltypes[typ] except KeyError: raise LIGOLwDBError, 'unknown type returned by database ' + str(typ) self.table[tab].setdefault('orderedcol',[]).append(col) try: self.table[tab]['stream'] = self.curs.fetchall() except DB2.Error, e: raise LIGOLwDBError, e[2] return len(self.table[tab]['stream'])\n\n    ### Response: Execute an SQL select statement and stuff the results into a\n    dictionary.\n\n    sql = the (case sensitve) SQL statment to execute.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String decode(byte[] bytes) { try { return CHARSET.newDecoder().decode(ByteBuffer.wrap(bytes)).toString(); } catch (CharacterCodingException e) { throw new IllegalArgumentException(\"Decoding failed\", e); } }\n\n    ### Response:", "ground_truth": "Decode the bytes in UTF-8 form into a String.", "predict": "Decodes a given UTF8 string to its corresponding string"}, {"ID": 171, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void synchronizeThreadDevice(Long threadId, Integer deviceId, AllocationPoint point) { // we synchronize only if this AllocationPoint was used within device context, so for multiple consequent syncs only first one will be issued flowController.synchronizeToHost(point); }\n\n    ### Response: This method causes memory synchronization on host side.\nViable only for Device-dependant MemoryHandlers\n\n@param threadId\n@param deviceId\n@param point.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private <T extends AccessibleObject> String[] lookupParameterNames( ParameterNameFactory<T> parameterNameFactory, T t) { Annotation[][] parameterAnnotations = parameterNameFactory.findParameterAnnotations(t); int parameterCount = parameterAnnotations.length; String[] paramNames = new String[parameterCount]; boolean found = false; for (int i = 0; i < parameterCount; i++) { Annotation[] annotations = parameterAnnotations[i]; String parameterName = findParameterName(annotations); if (parameterName != null) { found = true; paramNames[i] = parameterName; } } return found ? paramNames : null; }\n\n    ### Response:", "ground_truth": "Gets the parameter names or null if not found.\n\n@param parameterNameFactory the {@link ParameterNameFactory} to use\n@param t the {@link AccessibleObject} to find the parameter names on (i.e. Method\nor Constructor)\n@return the parameter names or null", "predict": "The above method looks up parameter names of the given parameter annotations of the given parameterized object. It first seeks for parameter names of the parameter annotations of the parameterized object and if any parameter names are found, then its corresponding parameter names of the parameterized object are returned; otherwise null is returned to indicate that no parameter names were found for the given parameter annotations of the parameterized object."}, {"ID": 172, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function nibbleControl($nibble, $control) { // This control stays constant for the low/high nibbles, so it doesn't matter which we compare to if ($control == self::NIBBLE_CONTROL['X'][1]) { $dec = bindec($nibble); $dec += 9; $nibble = str_pad(decbin($dec), 4, '0', STR_PAD_LEFT); } return $nibble; }\n\n    ### Response: Based on the control, adjust the nibble accordingly.\n\n@param string $nibble\n@param string $control\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @RequestMapping(value = \"/secure/add.htm\", method = RequestMethod.POST) public String addContact(WebContact form, BindingResult result) { validator.validate(form, result); if (result.hasErrors()) { return \"add\"; } Contact contact = new Contact(form.getName(), form.getEmail()); contactManager.create(contact); return \"redirect:/secure/index.htm\"; }\n\n    ### Response:", "ground_truth": "Handles the submission of the contact form, creating a new instance if the username\nand email are valid.", "predict": "Validate the contact form, add contact to database and display success message."}, {"ID": 173, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static Flags getDefaultFlags() { if (defaultFlags != null) { return defaultFlags; } defaultFlags = new Flags(); defaultFlags.angularPass = false; defaultFlags.applyInputSourceMaps = true; defaultFlags.assumeFunctionWrapper = false; defaultFlags.checksOnly = false; defaultFlags.chunk = null; defaultFlags.chunkWrapper = null; defaultFlags.chunkOutputPathPrefix = \"./\"; defaultFlags.compilationLevel = \"SIMPLE\"; defaultFlags.createSourceMap = true; defaultFlags.dartPass = false; defaultFlags.debug = false; defaultFlags.define = null; defaultFlags.defines = null; defaultFlags.dependencyMode = null; defaultFlags.entryPoint = null; defaultFlags.env = \"BROWSER\"; defaultFlags.exportLocalPropertyDefinitions = false; defaultFlags.extraAnnotationName = null; defaultFlags.externs = null; defaultFlags.forceInjectLibraries = null; defaultFlags.formatting = null; defaultFlags.generateExports = false; defaultFlags.hideWarningsFor = null; defaultFlags.injectLibraries = true; defaultFlags.js = null; defaultFlags.jsCode = null; defaultFlags.jscompError = null; defaultFlags.jscompOff = null; defaultFlags.jscompWarning = null; defaultFlags.jsModuleRoot = null; defaultFlags.jsOutputFile = \"compiled.js\"; defaultFlags.languageIn = \"ECMASCRIPT_2017\"; defaultFlags.languageOut = \"ECMASCRIPT5\"; defaultFlags.moduleResolution = \"BROWSER\"; defaultFlags.newTypeInf = false; defaultFlags.isolationMode = \"NONE\"; defaultFlags.outputWrapper = null; defaultFlags.packageJsonEntryNames = null; defaultFlags.parseInlineSourceMaps = true; defaultFlags.polymerPass = false; defaultFlags.polymerVersion = null; defaultFlags.preserveTypeAnnotations = false; defaultFlags.processClosurePrimitives = true; defaultFlags.processCommonJsModules = false; defaultFlags.renamePrefixNamespace = null; defaultFlags.renameVariablePrefix = null; defaultFlags.renaming = true; defaultFlags.rewritePolyfills = true; defaultFlags.sourceMapIncludeContent = false; defaultFlags.strictModeInput = true; defaultFlags.tracerMode = \"OFF\"; defaultFlags.warningLevel = \"DEFAULT\"; defaultFlags.useTypesForOptimization = true; return defaultFlags; }\n\n    ### Response: Lazy initialize due to GWT. If things are exported then Object is not available when the static\ninitialization runs..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected Collection<ConfigAttribute> findAttributes(Method method, Class<?> targetClass) { if (targetClass == null) { return null; } return findAttributesSpecifiedAgainst(method, targetClass); }\n\n    ### Response:", "ground_truth": "Will walk the method inheritance tree to find the most specific declaration\napplicable.", "predict": "Find attributes specified against the method or the given targetClass"}, {"ID": 174, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function isEqual($value1, $value2, $roundPrecision = 0) { $equal = false; if (static::floor($value1, $roundPrecision) == static::floor($value2, $roundPrecision)) { $equal = true; } return $equal; }\n\n    ### Response: Checks if of two numbers are equal.\nOptional to set a required precision\n\n@param float $value1\n@param float $value2\n@param int   $roundPrecision\n\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addSecureMethod(RegisteredMethod method, List<ConfigAttribute> attr) { Assert.notNull(method, \"RegisteredMethod required\"); Assert.notNull(attr, \"Configuration attribute required\"); if (logger.isInfoEnabled()) { logger.info(\"Adding secure method [\" + method + \"] with attributes [\" + attr + \"]\"); } this.methodMap.put(method, attr); }\n\n    ### Response:", "ground_truth": "Add configuration attributes for a secure method.\n\n@param method the method to be secured\n@param attr required authorities associated with the method", "predict": "Adds a secure method to the register of the application with given attributes."}, {"ID": 175, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def respond_unauthorized(self, request_authentication=False): \"\"\" Respond to the client that the request is unauthorized. :param bool request_authentication: Whether to request basic authentication information by sending a WWW-Authenticate header. \"\"\" headers = {} if request_authentication: headers['WWW-Authenticate'] = 'Basic realm=\"' + self.__config['server_version'] + '\"' self.send_response_full(b'Unauthorized', status=401, headers=headers) return\n\n    ### Response: Respond to the client that the request is unauthorized.\n\n\t\t:param bool request_authentication: Whether to request basic authentication information by sending a WWW-Authenticate header..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Collection<ConfigAttribute> getAllConfigAttributes() { Set<ConfigAttribute> allAttributes = new HashSet<>(); for (List<ConfigAttribute> attributeList : methodMap.values()) { allAttributes.addAll(attributeList); } return allAttributes; }\n\n    ### Response:", "ground_truth": "Obtains the configuration attributes explicitly defined against this bean.\n\n@return the attributes explicitly defined against this bean", "predict": "Override to add attributes from other maps to the set of attributes of this map.."}, {"ID": 176, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Plugin parsePluginString( String pluginString, String field ) throws MojoExecutionException { if ( pluginString != null ) { String[] pluginStrings = pluginString.split( \":\" ); if ( pluginStrings.length == 2 ) { Plugin plugin = new Plugin(); plugin.setGroupId( StringUtils.strip( pluginStrings[0] ) ); plugin.setArtifactId( StringUtils.strip( pluginStrings[1] ) ); return plugin; } else { throw new MojoExecutionException( \"Invalid \" + field + \" string: \" + pluginString ); } } else { throw new MojoExecutionException( \"Invalid \" + field + \" string: \" + pluginString ); } }\n\n    ### Response: Helper method to parse and inject a Plugin.\n\n@param pluginString\n@param field\n@throws MojoExecutionException\n@return the plugin.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean isMatch(String methodName, String mappedName) { return (mappedName.endsWith(\"*\") && methodName.startsWith(mappedName.substring(0, mappedName.length() - 1))) || (mappedName.startsWith(\"*\") && methodName.endsWith(mappedName .substring(1, mappedName.length()))); }\n\n    ### Response:", "ground_truth": "Return if the given method name matches the mapped name. The default implementation\nchecks for \"xxx\" and \"xxx\" matches.\n\n@param methodName the method name of the class\n@param mappedName the name in the descriptor\n\n@return if the names match", "predict": "Helper method to determine whether the given method name matches the given mapped name or not."}, {"ID": 177, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func lastModified(resp *http.Response) (time.Time, error) { lastModified := resp.Header.Get(\"Last-Modified\") return http.ParseTime(lastModified) }\n\n    ### Response: // lastModified parses the Last-Modified header from a response.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public C anyRequest() { Assert.state(!this.anyRequestConfigured, \"Can't configure anyRequest after itself\"); C configurer = requestMatchers(ANY_REQUEST); this.anyRequestConfigured = true; return configurer; }\n\n    ### Response:", "ground_truth": "Maps any request.\n\n@return the object that is chained after creating the {@link RequestMatcher}", "predict": "// anyRequest may be configured to do anything, but by default ignores the given arguments and simply returns the configured behavior"}, {"ID": 178, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function backupArchive(ContainerConfigurationInterface $containerNode, \\SplFileInfo $archive) { // if we don't want to create backups, to nothing if ($this->getExtractorNode()->isCreateBackups() === false) { return; } // load the PHAR archive's pathname $pharPathname = $archive->getPathname(); // create tmp & webapp folder name based on the archive's basename $webappFolderName = $this->getWebappsDir($containerNode) . DIRECTORY_SEPARATOR . basename($archive->getFilename(), $this->getExtensionSuffix()); $tmpFolderName = $this->getTmpDir($containerNode) . DIRECTORY_SEPARATOR . md5(basename($archive->getFilename(), $this->getExtensionSuffix())); // initialize PHAR archive $p = new \\Phar($archive); // iterate over the PHAR content to backup files that are NOT part of the archive foreach (new \\RecursiveIteratorIterator($p) as $file) { unlink(str_replace($this->createUrl($pharPathname), $webappFolderName, $file->getPathName())); } // delete empty directories but LEAVE files created by app $this->removeDir($webappFolderName, false); // copy backup to tmp directory $this->copyDir($webappFolderName, $tmpFolderName); // we have to set the user rights to the user:group configured within the system configuration $this->setUserRights(new \\SplFileInfo($tmpFolderName)); // log a message that the application has successfully been deployed $this->getInitialContext()->getSystemLogger()->info( sprintf('Application archive %s has succussfully been backed up', $archive->getBasename($this->getExtensionSuffix())) ); }\n\n    ### Response: Creates a backup of files that are NOT part of the\npassed archive.\n\n@param \\AppserverIo\\Psr\\ApplicationServer\\Configuration\\ContainerConfigurationInterface $containerNode The container the archive belongs to\n@param \\SplFileInfo                                                                     $archive       Backup files that are NOT part of this archive\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void handleBindException(String userDn, String username, Throwable cause) { if (logger.isDebugEnabled()) { logger.debug(\"Failed to bind as \" + userDn + \": \" + cause); } }\n\n    ### Response:", "ground_truth": "Allows subclasses to inspect the exception thrown by an attempt to bind with a\nparticular DN. The default implementation just reports the failure to the debug\nlogger.", "predict": "Handles exception of binding the given username to the given Dn."}, {"ID": 179, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def move_to(name, from_state, *conditions) transition = select_transition(name, from_state, *conditions) transition ||= UndefinedTransition.new(name) transition.to_state(from_state) end\n\n    ### Response: Find state that this machine can move to\n\n @example\n   evenst_map.move_to(:go, :green) # => :red\n\n @param [Symbol] name\n   the event name\n\n @param [Symbol] from_state\n   the transition from state\n\n @param [Array] conditions\n   the data associated with this transition\n\n @return [Symbol]\n   the transition `to` state\n\n @api public.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Transactional(readOnly = true) public Contact getRandomContact() { logger.debug(\"Returning random contact\"); Random rnd = new Random(); List<Contact> contacts = contactDao.findAll(); int getNumber = rnd.nextInt(contacts.size()); return contacts.get(getNumber); }\n\n    ### Response:", "ground_truth": "This is a public method.", "predict": "Returns random contact\n\n Random contact retrieved"}, {"ID": 180, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function log() { var _console; if (LatticeLogs.failFast(LatticeLogs.LOG)) return; for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) { args[_key3] = arguments[_key3]; } (_console = console).log.apply(_console, (0, _toConsumableArray2.default)(args.map(LatticeLogs.argMapper))); }\n\n    ### Response: Pass-thru to console.log; arguments parsed via `argMapper`.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected final void clearAuthenticationAttributes(HttpServletRequest request) { HttpSession session = request.getSession(false); if (session == null) { return; } session.removeAttribute(WebAttributes.AUTHENTICATION_EXCEPTION); }\n\n    ### Response:", "ground_truth": "Removes temporary authentication-related data which may have been stored in the\nsession during the authentication process.", "predict": "Remove the Authentication exception from the session."}, {"ID": 181, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function size(value) { var className = toString.call(value); return className == arrayClass || className == stringClass ? value.length : keys(value).length; }\n\n    ### Response: Gets the size of `value` by returning `value.length` if `value` is a string\nor array, or the number of own enumerable properties if `value` is an object.\n\n@deprecated\n@static\n@memberOf _\n@category Objects\n@param {Array|Object|String} value The value to inspect.\n@returns {Number} Returns `value.length` if `value` is a string or array,\nor the number of own enumerable properties if `value` is an object.\n@example\n\n_.size([1, 2]);\n// => 2\n\n_.size({ 'one': 1, 'two': 2, 'three': 3 });\n// => 3\n\n_.size('curly');\n// => 5.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Field getField(Class<?> clazz, String fieldName) throws IllegalStateException { Assert.notNull(clazz, \"Class required\"); Assert.hasText(fieldName, \"Field name required\"); try { return clazz.getDeclaredField(fieldName); } catch (NoSuchFieldException nsf) { // Try superclass if (clazz.getSuperclass() != null) { return getField(clazz.getSuperclass(), fieldName); } throw new IllegalStateException(\"Could not locate field '\" + fieldName + \"' on class \" + clazz); } }\n\n    ### Response:", "ground_truth": "Attempts to locate the specified field on the class.\n\n@param clazz the class definition containing the field\n@param fieldName the name of the field to locate\n\n@return the Field (never null)\n\n@throws IllegalStateException if field could not be found", "predict": "Gets the specified field from the specified `class`. Throws an exception if the field does not exist or cannot be found or accessed on the given `class`."}, {"ID": 182, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _imshow_array2d(self, array, origin='lower', interpolation='none', aspect='auto', **kwargs): \"\"\"Render an `~gwpy.types.Array2D` using `Axes.imshow` \"\"\" # NOTE: If you change the defaults for this method, please update # the docstring for `imshow` above. # calculate extent extent = tuple(array.xspan) + tuple(array.yspan) if self.get_xscale() == 'log' and extent[0] == 0.: extent = (1e-300,) + extent[1:] if self.get_yscale() == 'log' and extent[2] == 0.: extent = extent[:2] + (1e-300,) + extent[3:] kwargs.setdefault('extent', extent) return self.imshow(array.value.T, origin=origin, aspect=aspect, interpolation=interpolation, **kwargs)\n\n    ### Response: Render an `~gwpy.types.Array2D` using `Axes.imshow`.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String createServiceUrl(final HttpServletRequest request, final HttpServletResponse response) { return CommonUtils.constructServiceUrl(null, response, this.serviceProperties.getService(), null, this.serviceProperties.getArtifactParameter(), this.encodeServiceUrlWithSessionId); }\n\n    ### Response:", "ground_truth": "Constructs a new Service Url. The default implementation relies on the CAS client\nto do the bulk of the work.\n@param request the HttpServletRequest\n@param response the HttpServlet Response\n@return the constructed service url. CANNOT be NULL.", "predict": "Creates and returns the url of the given service with the given parameters, or an empty string if the url cannot be constructed."}, {"ID": 183, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getPayPalRequest() { if ($this->payPalRequest === null) { $this->payPalRequest = oxNew(\\OxidEsales\\PayPalModule\\Core\\Request::class); } return $this->payPalRequest; }\n\n    ### Response: Create object \\OxidEsales\\PayPalModule\\Core\\Request to get PayPal request information.\n\n@return \\OxidEsales\\PayPalModule\\Core\\Request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String createRedirectUrl(final String serviceUrl) { return CommonUtils.constructRedirectUrl(this.loginUrl, this.serviceProperties.getServiceParameter(), serviceUrl, this.serviceProperties.isSendRenew(), false); }\n\n    ### Response:", "ground_truth": "Constructs the Url for Redirection to the CAS server. Default implementation relies\non the CAS client to do the bulk of the work.\n\n@param serviceUrl the service url that should be included.\n@return the redirect url. CANNOT be NULL.", "predict": "Creates redirect url with login, url parameter, and other values to given url."}, {"ID": 184, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static MavenSettings getMavenSettings() { try { String homeDir = System.getProperty(\"user.home\"); return parseMavenSettings(new File(homeDir, \".m2/settings.xml\")); } catch (Exception e) { log(e); } return new MavenSettings(); }\n\n    ### Response: get maven settings.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private String extractPrefix(String encPass) { if (!encPass.startsWith(\"{\")) { return null; } int secondBrace = encPass.lastIndexOf('}'); if (secondBrace < 0) { throw new IllegalArgumentException( \"Couldn't find closing brace for SHA prefix\"); } return encPass.substring(0, secondBrace + 1); }\n\n    ### Response:", "ground_truth": "Returns the hash prefix or null if there isn't one.", "predict": "Extract SHA prefix from given encrypted password string."}, {"ID": 185, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public QueryBuilder createQueryFilter() { if (userSession.isRoot()) { return QueryBuilders.matchAllQuery(); } Integer userId = userSession.getUserId(); BoolQueryBuilder filter = boolQuery(); // anyone filter.should(QueryBuilders.termQuery(FIELD_ALLOW_ANYONE, true)); // users Optional.ofNullable(userId) .map(Integer::longValue) .ifPresent(id -> filter.should(termQuery(FIELD_USER_IDS, id))); // groups userSession.getGroups() .stream() .map(GroupDto::getId) .forEach(groupId -> filter.should(termQuery(FIELD_GROUP_IDS, groupId))); return JoinQueryBuilders.hasParentQuery( TYPE_AUTHORIZATION, QueryBuilders.boolQuery().filter(filter), false); }\n\n    ### Response: Build a filter to restrict query to the documents on which\nuser has read access..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException arg2) throws IOException, ServletException { if (logger.isDebugEnabled()) { logger.debug(\"Pre-authenticated entry point called. Rejecting access\"); } response.sendError(HttpServletResponse.SC_FORBIDDEN, \"Access Denied\"); }\n\n    ### Response:", "ground_truth": "Always returns a 403 error code to the client.", "predict": "Commences the pre-authenticated entry point of the\napplication, rejecting any attempt to gain unauthorized\naccess."}, {"ID": 186, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (md *MDServerRemote) GetForHandle(ctx context.Context, handle tlf.Handle, mStatus kbfsmd.MergeStatus, lockBeforeGet *keybase1.LockID) ( tlfID tlf.ID, rmds *RootMetadataSigned, err error) { ctx = rpc.WithFireNow(ctx) // TODO: Ideally, *tlf.Handle would have a nicer String() function. md.log.LazyTrace(ctx, \"MDServer: GetForHandle %+v %s\", handle, mStatus) defer func() { md.deferLog.LazyTrace(ctx, \"MDServer: GetForHandle %+v %s done (err=%v)\", handle, mStatus, err) }() encodedHandle, err := md.config.Codec().Encode(handle) if err != nil { return tlf.ID{}, nil, err } // kbfsmd.BranchID needs to be present when Unmerged is true; // kbfsmd.NullBranchID signals that the folder's current branch ID // should be looked up. arg := keybase1.GetMetadataArg{ FolderHandle: encodedHandle, BranchID: kbfsmd.NullBranchID.String(), Unmerged: mStatus == kbfsmd.Unmerged, LockBeforeGet: lockBeforeGet, } id, rmdses, err := md.get(ctx, arg) if err != nil { return tlf.ID{}, nil, err } if len(rmdses) == 0 { return id, nil, nil } // TODO: Error if server returns more than one rmds. return id, rmdses[0], nil }\n\n    ### Response: // GetForHandle implements the MDServer interface for MDServerRemote..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void checkFilterStack(List<Filter> filters) { checkForDuplicates(SecurityContextPersistenceFilter.class, filters); checkForDuplicates(UsernamePasswordAuthenticationFilter.class, filters); checkForDuplicates(SessionManagementFilter.class, filters); checkForDuplicates(BasicAuthenticationFilter.class, filters); checkForDuplicates(SecurityContextHolderAwareRequestFilter.class, filters); checkForDuplicates(JaasApiIntegrationFilter.class, filters); checkForDuplicates(ExceptionTranslationFilter.class, filters); checkForDuplicates(FilterSecurityInterceptor.class, filters); }\n\n    ### Response:", "ground_truth": "Checks the filter list for possible errors and logs them", "predict": "// Checks for duplicate filters in the given list of Filters // and warns the caller of any potential ambiguity"}, {"ID": 187, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def gen_otu_dict(nex_obj, nexson_version=None): \"\"\"Takes a NexSON object and returns a dict of otu_id -> otu_obj \"\"\" if nexson_version is None: nexson_version = detect_nexson_version(nex_obj) if _is_by_id_hbf(nexson_version): otus = nex_obj['nexml']['otusById'] if len(otus) > 1: d = {} for v in otus.values(): d.update(v['otuById']) return d else: return otus.values()[0]['otuById'] o_dict = {} for ob in nex_obj.get('otus', []): for o in ob.get('otu', []): oid = o['@id'] o_dict[oid] = o return o_dict\n\n    ### Response: Takes a NexSON object and returns a dict of\n    otu_id -> otu_obj.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") final Class<? extends Throwable>[] getRegisteredTypes() { Set<Class<? extends Throwable>> typeList = this.extractorMap.keySet(); return typeList.toArray(new Class[typeList.size()]); }\n\n    ### Response:", "ground_truth": "Returns an array containing the classes for which extractors are registered. The\norder of the classes is the order in which comparisons will occur for resolving a\nmatching extractor.\n\n@return the types for which extractors are registered", "predict": "The method generates an array of Throwable objects of the types that have been registered to the error extractor map of the error extractor."}, {"ID": 188, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function get_response_header($header = null) { if ($header) { return $this->response_headers[strtolower($header)]; } return $this->response_headers; }\n\n    ### Response: Get the HTTP response headers from the request.\n\n@param string $header (Optional) A specific header value to return. Defaults to all headers.\n@return string|array All or selected header values..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Throwable extractCause(Throwable throwable) { for (Map.Entry<Class<? extends Throwable>, ThrowableCauseExtractor> entry : extractorMap .entrySet()) { Class<? extends Throwable> throwableType = entry.getKey(); if (throwableType.isInstance(throwable)) { ThrowableCauseExtractor extractor = entry.getValue(); return extractor.extractCause(throwable); } } return null; }\n\n    ### Response:", "ground_truth": "Extracts the cause of the given throwable using an appropriate extractor.\n\n@param throwable the Throwable (not null\n@return the cause, may be null if none could be resolved", "predict": "Extract the cause of the exception from the exception."}, {"ID": 189, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function compile($to){ copy($this->path->skeleton, $to); $epub = new \\ZipArchive(); if( true === $epub->open($to) ){ $this->deliver($epub, $this->temp_dir); } }\n\n    ### Response: Compile ePub File\n\n@param string $to\n\n@throws CompileException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) private String registerAccessManager(ParserContext pc, boolean jsr250Enabled, BeanDefinition expressionVoter) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder .rootBeanDefinition(AffirmativeBased.class); ManagedList voters = new ManagedList(4); if (expressionVoter != null) { voters.add(expressionVoter); } voters.add(new RootBeanDefinition(RoleVoter.class)); voters.add(new RootBeanDefinition(AuthenticatedVoter.class)); if (jsr250Enabled) { voters.add(new RootBeanDefinition(Jsr250Voter.class)); } accessMgrBuilder.addConstructorArgValue(voters); BeanDefinition accessManager = accessMgrBuilder.getBeanDefinition(); String id = pc.getReaderContext().generateBeanName(accessManager); pc.registerBeanComponent(new BeanComponentDefinition(accessManager, id)); return id; }\n\n    ### Response:", "ground_truth": "Register the default AccessDecisionManager. Adds the special JSR 250 voter jsr-250\nis enabled and an expression voter if expression-based access control is enabled.\n@return", "predict": "Register Access Management Component in Parser Context"}, {"ID": 190, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected File getGeneratedResourcesDirectory() { if (generatedResourcesFolder == null) { String generatedResourcesFolderAbsolutePath = this.project.getBuild().getDirectory() + \"/\" + getGeneratedResourcesDirectoryPath(); generatedResourcesFolder = new File(generatedResourcesFolderAbsolutePath); if (!generatedResourcesFolder.exists()) { generatedResourcesFolder.mkdirs(); } } return generatedResourcesFolder; }\n\n    ### Response: Get folder to temporarily generate the resources to.\n@return Folder.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Set<String> authorityListToSet( Collection<? extends GrantedAuthority> userAuthorities) { Assert.notNull(userAuthorities, \"userAuthorities cannot be null\"); Set<String> set = new HashSet<>(userAuthorities.size()); for (GrantedAuthority authority : userAuthorities) { set.add(authority.getAuthority()); } return set; }\n\n    ### Response:", "ground_truth": "Converts an array of GrantedAuthority objects to a Set.\n@return a Set of the Strings obtained from each call to\nGrantedAuthority.getAuthority()", "predict": "Get the authority string of the given authorities to add to the given set."}, {"ID": 191, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def reboot(vm_name, call=None): ''' Call GCE 'reset' on the instance. CLI Example: .. code-block:: bash salt-cloud -a reboot myinstance ''' if call != 'action': raise SaltCloudSystemExit( 'The reboot action must be called with -a or --action.' ) conn = get_conn() __utils__['cloud.fire_event']( 'event', 'reboot instance', 'salt/cloud/{0}/rebooting'.format(vm_name), args={'name': vm_name}, sock_dir=__opts__['sock_dir'], transport=__opts__['transport'] ) result = conn.reboot_node( conn.ex_get_node(vm_name) ) __utils__['cloud.fire_event']( 'event', 'reboot instance', 'salt/cloud/{0}/rebooted'.format(vm_name), args={'name': vm_name}, sock_dir=__opts__['sock_dir'], transport=__opts__['transport'] ) return result\n\n    ### Response: Call GCE 'reset' on the instance.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt-cloud -a reboot myinstance.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean matches(byte[] expected, byte[] actual) { if (expected.length != actual.length) { return false; } int result = 0; for (int i = 0; i < expected.length; i++) { result |= expected[i] ^ actual[i]; } return result == 0; }\n\n    ### Response:", "ground_truth": "Constant time comparison to prevent against timing attacks.", "predict": "Matches the given bytes."}, {"ID": 192, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def iter_code_frequency(self, number=-1, etag=None): \"\"\"Iterate over the code frequency per week. Returns a weekly aggregate of the number of additions and deletions pushed to this repository. :param int number: (optional), number of weeks to return. Default: -1 returns all weeks :param str etag: (optional), ETag from a previous request to the same endpoint :returns: generator of lists ``[seconds_from_epoch, additions, deletions]`` .. note:: All statistics methods may return a 202. On those occasions, you will not receive any objects. You should store your iterator and check the new ``last_status`` attribute. If it is a 202 you should wait before re-requesting. .. versionadded:: 0.7 \"\"\" url = self._build_url('stats', 'code_frequency', base_url=self._api) return self._iter(int(number), url, list, etag=etag)\n\n    ### Response: Iterate over the code frequency per week.\n\n        Returns a weekly aggregate of the number of additions and deletions\n        pushed to this repository.\n\n        :param int number: (optional), number of weeks to return. Default: -1\n            returns all weeks\n        :param str etag: (optional), ETag from a previous request to the same\n            endpoint\n        :returns: generator of lists ``[seconds_from_epoch, additions,\n            deletions]``\n\n        .. note:: All statistics methods may return a 202. On those occasions,\n                  you will not receive any objects. You should store your\n                  iterator and check the new ``last_status`` attribute. If it\n                  is a 202 you should wait before re-requesting.\n\n        .. versionadded:: 0.7.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setDefaultFailureUrl(String defaultFailureUrl) { Assert.isTrue(UrlUtils.isValidRedirectUrl(defaultFailureUrl), () -> \"'\" + defaultFailureUrl + \"' is not a valid redirect URL\"); this.defaultFailureUrl = defaultFailureUrl; }\n\n    ### Response:", "ground_truth": "The URL which will be used as the failure destination.\n\n@param defaultFailureUrl the failure URL, for example \"/loginFailed.jsp\".", "predict": "\n    '''\n    Helper method to set the default failure url\n    '''\n    public void setDefaultFailureUrl(String defaultFailureUrl) {\n      Assert.isTrue(UrlUtils.isValidRedirectUrl(defaultFailureUrl), () -> \"'\" + defaultFailureUrl + \"' is not a valid redirect URL\");\n      this.defaultFailureUrl = defaultFailureUrl;\n    }"}, {"ID": 193, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def mle(simulated_array, observed_array, replace_nan=None, replace_inf=None, remove_neg=False, remove_zero=False): \"\"\" Compute the mean log error of the simulated and observed data. .. image:: /pictures/MLE.png **Range:** -inf < MLE < inf, data units, closer to zero is better. **Notes** Same as the mean erro (ME) only use log ratios as the error term. Limits the impact of outliers, more evenly weights high and low data values. Parameters ---------- simulated_array: one dimensional ndarray An array of simulated data from the time series. observed_array: one dimensional ndarray An array of observed data from the time series. replace_nan: float, optional If given, indicates which value to replace NaN values with in the two arrays. If None, when a NaN value is found at the i-th position in the observed OR simulated array, the i-th value of the observed and simulated array are removed before the computation. replace_inf: float, optional If given, indicates which value to replace Inf values with in the two arrays. If None, when an inf value is found at the i-th position in the observed OR simulated array, the i-th value of the observed and simulated array are removed before the computation. remove_neg: boolean, optional If True, when a negative value is found at the i-th position in the observed OR simulated array, the i-th value of the observed AND simulated array are removed before the computation. remove_zero: boolean, optional If true, when a zero value is found at the i-th position in the observed OR simulated array, the i-th value of the observed AND simulated array are removed before the computation. Returns ------- float The mean log error value. Examples -------- Note that the value is very small because it is in log space. >>> import HydroErr as he >>> import numpy as np >>> sim = np.array([5, 7, 9, 2, 4.5, 6.7]) >>> obs = np.array([4.7, 6, 10, 2.5, 4, 6.8]) >>> he.mle(sim, obs) 0.002961767058151136 References ---------- - T\u00f6rnqvist, Leo, Pentti Vartia, and Yrj\u00f6 O. Vartia. \u201cHow Should Relative Changes Be Measured?\u201d The American Statistician 39, no. 1 (1985): 43\u201346. \"\"\" # Checking and cleaning the data simulated_array, observed_array = treat_values( simulated_array, observed_array, replace_nan=replace_nan, replace_inf=replace_inf, remove_neg=remove_neg, remove_zero=remove_zero ) sim_log = np.log1p(simulated_array) obs_log = np.log1p(observed_array) return np.mean(sim_log - obs_log)\n\n    ### Response: Compute the mean log error of the simulated and observed data.\n\n    .. image:: /pictures/MLE.png\n\n    **Range:** -inf >> import HydroErr as he\n    >>> import numpy as np\n\n    >>> sim = np.array([5, 7, 9, 2, 4.5, 6.7])\n    >>> obs = np.array([4.7, 6, 10, 2.5, 4, 6.8])\n    >>> he.mle(sim, obs)\n    0.002961767058151136\n\n    References\n    ----------\n    - T\u00f6rnqvist, Leo, Pentti Vartia, and Yrj\u00f6 O. Vartia. \u201cHow Should Relative Changes Be Measured?\u201d\n      The American Statistician 39, no. 1 (1985): 43\u201346..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setResolveHiddenInputs( Function<HttpServletRequest, Map<String, String>> resolveHiddenInputs) { Assert.notNull(resolveHiddenInputs, \"resolveHiddenInputs cannot be null\"); this.resolveHiddenInputs = resolveHiddenInputs; }\n\n    ### Response:", "ground_truth": "Sets a Function used to resolve a Map of the hidden inputs where the key is the\nname of the input and the value is the value of the input. Typically this is used\nto resolve the CSRF token.\n@param resolveHiddenInputs the function to resolve the inputs", "predict": "\n    * Sets the function to resolve hidden input values in the HTTP request objects to values defined in the Spring configuration file * If the function is null, hidden values in the HTTP request objects are not resolved * If the function is not null, hidden values in the HTTP request objects are resolved to values defined in the Spring configuration file"}, {"ID": 194, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def commit(self, id, impreq): # pylint: disable=invalid-name,redefined-builtin \"\"\"Commit a staged import. :param id: Staged import ID as an int. :param impreq: :class:`imports.Request <imports.Request>` object :return: :class:`imports.Request <imports.Request>` object :rtype: imports.Request \"\"\" schema = RequestSchema() json = self.service.encode(schema, impreq) schema = RequestSchema() resp = self.service.post(self.base+str(id)+'/', json=json) return self.service.decode(schema, resp)\n\n    ### Response: Commit a staged import.\n\n        :param id: Staged import ID as an int.\n        :param impreq: :class:`imports.Request ` object\n        :return: :class:`imports.Request ` object\n        :rtype: imports.Request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static String buildRequestUrl(String servletPath, String requestURI, String contextPath, String pathInfo, String queryString) { StringBuilder url = new StringBuilder(); if (servletPath != null) { url.append(servletPath); if (pathInfo != null) { url.append(pathInfo); } } else { url.append(requestURI.substring(contextPath.length())); } if (queryString != null) { url.append(\"?\").append(queryString); } return url.toString(); }\n\n    ### Response:", "ground_truth": "Obtains the web application-specific fragment of the URL.", "predict": "The buildRequestUrl method generates a request url given the servlet path, the request uri, the context path, the path info, and any query string arguments. It appends the given values to the generated url string and returns it."}, {"ID": 195, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def gravatar_url(options = {}) raise ArgumentError, \"The size parameter must be an integer\" if options[:size] && !options[:size].is_a?(Integer) response = api_response(\"user-information\") hash = response[\"user_information\"][\"gravatar\"] return nil if hash.nil? return build_gravatar_url(hash, options) end\n\n    ### Response: Returns the Gravatar image URL using the Gravatar hash from the user's information.\n\n @param options [Hash] optional settings for the gravatar URL.\n @return [String, nil] the Gravatar URL, with the optional size parameter, nil if\n   the user information contains no Gravatar hash..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isAbsoluteUrl(String url) { if (url == null) { return false; } final Pattern ABSOLUTE_URL = Pattern.compile(\"\\\\A[a-z0-9.+-]+://.*\", Pattern.CASE_INSENSITIVE); return ABSOLUTE_URL.matcher(url).matches(); }\n\n    ### Response:", "ground_truth": "Decides if a URL is absolute based on whether it contains a valid scheme name, as\ndefined in RFC 1738.", "predict": "Checks if the given url string is an absolute url or not."}, {"ID": 196, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _objective_bestscore(self, old, new): \"\"\"An objective function that returns True if new has a better score than old, and ``False`` otherwise. INPUTS: old (tuple): a tuple (score, embedding) new (tuple): a tuple (score, embedding) \"\"\" (oldscore, oldthing) = old (newscore, newthing) = new if oldscore is None: return True if newscore is None: return False return oldscore < newscore\n\n    ### Response: An objective function that returns True if new has a better score\n        than old, and ``False`` otherwise.\n\n        INPUTS:\n            old (tuple): a tuple (score, embedding)\n\n            new (tuple): a tuple (score, embedding).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<OpenIDAttribute> createAttributeList(String identifier) { for (Map.Entry<Pattern, List<OpenIDAttribute>> entry : idToAttributes.entrySet()) { if (entry.getKey().matcher(identifier).matches()) { return entry.getValue(); } } return Collections.emptyList(); }\n\n    ### Response:", "ground_truth": "Iterates through the patterns stored in the map and returns the list of attributes\ndefined for the first match. If no match is found, returns an empty list.", "predict": "\n    A method to create an Attribute List given an OpenID Identifier string. It iterates over the Map of patterns and attributes and creates the list of attributes given the matches of the given string to the patterns in the Map of patterns and attributes. If no attributes match the given string, the default behavior of empty list is used."}, {"ID": 197, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def nb_to_q_nums(nb) -> list: \"\"\" Gets question numbers from each cell in the notebook \"\"\" def q_num(cell): assert cell.metadata.tags return first(filter(lambda t: 'q' in t, cell.metadata.tags)) return [q_num(cell) for cell in nb['cells']]\n\n    ### Response: Gets question numbers from each cell in the notebook.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    Serializable identifierFrom(Serializable identifier, ResultSet resultSet) throws SQLException { if (isString(identifier) && hasValidClassIdType(resultSet) && canConvertFromStringTo(classIdTypeFrom(resultSet))) { identifier = convertFromStringTo((String) identifier, classIdTypeFrom(resultSet)); } else { // Assume it should be a Long type identifier = convertToLong(identifier); } return identifier; }\n\n    ### Response:", "ground_truth": "Converts the raw type from the database into the right Java type. For most applications the 'raw type' will be Long, for some applications\nit could be String.\n@param identifier The identifier from the database\n@param resultSet  Result set of the query\n@return The identifier in the appropriate target Java type. Typically Long or UUID.\n@throws SQLException", "predict": "Serializable identifierFrom(Identifier, ResultSet) converts an identifier string to its corresponding serializable form and returns it. It assumes the identifier string contains an appropriate type for the ResultSet being used and converts to the appropriate type for the ResultSet to ensure proper type safety during the ResultSet operation."}, {"ID": 198, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def value_nth_person(self, n, array, default = 0): \"\"\" Get the value of array for the person whose position in the entity is n. Note that this position is arbitrary, and that members are not sorted. If the nth person does not exist, return ``default`` instead. The result is a vector which dimension is the number of entities. \"\"\" self.members.check_array_compatible_with_entity(array) positions = self.members_position nb_persons_per_entity = self.nb_persons() members_map = self.ordered_members_map result = self.filled_array(default, dtype = array.dtype) # For households that have at least n persons, set the result as the value of criteria for the person for which the position is n. # The map is needed b/c the order of the nth persons of each household in the persons vector is not necessarily the same than the household order. result[nb_persons_per_entity > n] = array[members_map][positions[members_map] == n] return result\n\n    ### Response: Get the value of array for the person whose position in the entity is n.\n\n            Note that this position is arbitrary, and that members are not sorted.\n\n            If the nth person does not exist, return  ``default`` instead.\n\n            The result is a vector which dimension is the number of entities..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void createEntries(final MutableAcl acl) { if (acl.getEntries().isEmpty()) { return; } jdbcOperations.batchUpdate(insertEntry, new BatchPreparedStatementSetter() { public int getBatchSize() { return acl.getEntries().size(); } public void setValues(PreparedStatement stmt, int i) throws SQLException { AccessControlEntry entry_ = acl.getEntries().get(i); Assert.isTrue(entry_ instanceof AccessControlEntryImpl, \"Unknown ACE class\"); AccessControlEntryImpl entry = (AccessControlEntryImpl) entry_; stmt.setLong(1, ((Long) acl.getId()).longValue()); stmt.setInt(2, i); stmt.setLong(3, createOrRetrieveSidPrimaryKey(entry.getSid(), true) .longValue()); stmt.setInt(4, entry.getPermission().getMask()); stmt.setBoolean(5, entry.isGranting()); stmt.setBoolean(6, entry.isAuditSuccess()); stmt.setBoolean(7, entry.isAuditFailure()); } }); }\n\n    ### Response:", "ground_truth": "Creates a new row in acl_entry for every ACE defined in the passed MutableAcl\nobject.\n\n@param acl containing the ACEs to insert", "predict": "Creates the given number of access control entries in the given ACL."}, {"ID": 199, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function csvCommand($services = [], $collection_pattern = '', $bom = false) { foreach ($this->_getServices($services) as $service) { /** * @var \\ManaPHP\\Mongodb $mongodb */ $mongodb = $this->_di->getShared($service); $defaultDb = $mongodb->getDefaultDb(); foreach ($defaultDb ? [$defaultDb] : $mongodb->listDatabases() as $db) { if (in_array($db, ['admin', 'local'], true)) { continue; } foreach ($mongodb->listCollections($db) as $collection) { if ($collection_pattern && !fnmatch($collection_pattern, $collection)) { continue; } $fileName = \"@tmp/mongodb_csv/$db/$collection.csv\"; $this->console->progress(['`:collection` processing...', 'collection' => $collection], ''); $this->filesystem->dirCreate(dirname($fileName)); $file = fopen($this->alias->resolve($fileName), 'wb'); if ($bom) { fprintf($file, \"\\xEF\\xBB\\xBF\"); } $docs = $mongodb->fetchAll(\"$db.$collection\"); if ($docs) { $columns = []; foreach ($docs[0] as $k => $v) { if ($k === '_id' && is_object($v)) { continue; } $columns[] = $k; } fputcsv($file, $columns); } $linesCount = 0; $startTime = microtime(true); if (count($docs) !== 0) { foreach ($docs as $doc) { $line = []; foreach ($doc as $k => $v) { if ($k === '_id' && is_object($v)) { continue; } $line[] = $v; } $linesCount++; fputcsv($file, $line); } } fclose($file); $this->console->progress(['write to `:file` success: :count [:time]', 'file' => $fileName, 'count' => $linesCount, 'time' => round(microtime(true) - $startTime, 4)]); /** @noinspection DisconnectedForeachInstructionInspection */ } } } }\n\n    ### Response: export mongodb data to csv files\n\n@param array  $services services list\n@param string $collection_pattern match collection against a pattern\n@param bool   $bom contains BOM or not.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void createObjectIdentity(ObjectIdentity object, Sid owner) { Long sidId = createOrRetrieveSidPrimaryKey(owner, true); Long classId = createOrRetrieveClassPrimaryKey(object.getType(), true, object.getIdentifier().getClass()); jdbcOperations.update(insertObjectIdentity, classId, object.getIdentifier().toString(), sidId, Boolean.TRUE); }\n\n    ### Response:", "ground_truth": "Creates an entry in the acl_object_identity table for the passed ObjectIdentity.\nThe Sid is also necessary, as acl_object_identity has defined the sid column as\nnon-null.\n\n@param object to represent an acl_object_identity for\n@param owner for the SID column (will be created if there is no acl_sid entry for\nthis particular Sid already)", "predict": "\n    Create or retrieve Single Sign On Identity Id and Class Id for the given Object Identity and the Sid of the Object Identity's owner. Store the Single Sign On Identity Id and Class Id in the Object Identity Table to associate the Object Identity to the Single Sign On Identity and Class Table for later retrieval of the Single Sign On Identity Id and Class Id for the given Object Identity."}, {"ID": 200, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function setPaths($paths, $recursive = false, $filter = '') { foreach($paths as $path){ if(!preg_match(\"/\\/$/\", $path)){ $path .= '/'; } if(empty($filter) || strtolower($filter) == tao_helpers_Scriptloader::CSS){ foreach(glob($path . \"*.\" . tao_helpers_Scriptloader::CSS) as $cssFile){ self::$cssFiles[] = $path . $cssFile; } } if(empty($filter) || strtolower($filter) == tao_helpers_Scriptloader::JS){ foreach(glob($path . \"*.\" . tao_helpers_Scriptloader::JS) as $jsFile){ self::$jsFiles[] = $path . $jsFile; } } if($recursive){ $dirs = array(); foreach(scandir($path) as $file){ if(is_dir($path.$file) && $file != '.' && $file != '..'){ $dirs[] = $path.$file; } } if(count($dirs) > 0){ self::setPaths($dirs, true, $filter); } } } }\n\n    ### Response: define the paths to look for the scripts\n\n@access public\n@author Bertrand Chevrier, \n@param  array paths\n@param  boolean recursive\n@param  string filter\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void updateObjectIdentity(MutableAcl acl) { Long parentId = null; if (acl.getParentAcl() != null) { Assert.isInstanceOf(ObjectIdentityImpl.class, acl.getParentAcl() .getObjectIdentity(), \"Implementation only supports ObjectIdentityImpl\"); ObjectIdentityImpl oii = (ObjectIdentityImpl) acl.getParentAcl() .getObjectIdentity(); parentId = retrieveObjectIdentityPrimaryKey(oii); } Assert.notNull(acl.getOwner(), \"Owner is required in this implementation\"); Long ownerSid = createOrRetrieveSidPrimaryKey(acl.getOwner(), true); int count = jdbcOperations.update(updateObjectIdentity, parentId, ownerSid, Boolean.valueOf(acl.isEntriesInheriting()), acl.getId()); if (count != 1) { throw new NotFoundException(\"Unable to locate ACL to update\"); } }\n\n    ### Response:", "ground_truth": "Updates an existing acl_object_identity row, with new information presented in the\npassed MutableAcl object. Also will create an acl_sid entry if needed for the Sid\nthat owns the MutableAcl.\n\n@param acl to modify (a row must already exist in acl_object_identity)\n\n@throws NotFoundException if the ACL could not be found to update.", "predict": "\n    This method updates the Object Identity of the given ACL to the given values and stores the updated information back into the database."}, {"ID": 201, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Deprecated public static String buildCall(final Method method, final Object[] parameters) { if (method == null) { throw new IllegalArgumentException(\"Parameter method can't be null\"); } return buildCall(method.getDeclaringClass().getSimpleName(), method.getName(), parameters, null).toString(); }\n\n    ### Response: Builds call.\n\n@param method     source {@link Method}, can't be null\n@param parameters method parameters\n@return call.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void saveRequest(HttpServletRequest request, HttpServletResponse response) { if (requestMatcher.matches(request)) { DefaultSavedRequest savedRequest = new DefaultSavedRequest(request, portResolver); if (createSessionAllowed || request.getSession(false) != null) { // Store the HTTP request itself. Used by // AbstractAuthenticationProcessingFilter // for redirection after successful authentication (SEC-29) request.getSession().setAttribute(this.sessionAttrName, savedRequest); logger.debug(\"DefaultSavedRequest added to Session: \" + savedRequest); } } else { logger.debug(\"Request not saved as configured RequestMatcher did not match\"); } }\n\n    ### Response:", "ground_truth": "Stores the current request, provided the configuration properties allow it.", "predict": "Stores HTTP request in Session to allow redirection after successful authentication or provides log message for non matching request"}, {"ID": 202, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func writeLayer(layerData io.Reader, home string, id string, parentLayerPaths ...string) (size int64, retErr error) { err := winio.EnableProcessPrivileges([]string{winio.SeBackupPrivilege, winio.SeRestorePrivilege}) if err != nil { return 0, err } if noreexec { defer func() { if err := winio.DisableProcessPrivileges([]string{winio.SeBackupPrivilege, winio.SeRestorePrivilege}); err != nil { // This should never happen, but just in case when in debugging mode. // See https://github.com/docker/docker/pull/28002#discussion_r86259241 for rationale. panic(\"Failed to disabled process privileges while in non re-exec mode\") } }() } info := hcsshim.DriverInfo{ Flavour: filterDriver, HomeDir: home, } w, err := hcsshim.NewLayerWriter(info, id, parentLayerPaths) if err != nil { return 0, err } defer func() { if err := w.Close(); err != nil { // This error should not be discarded as a failure here // could result in an invalid layer on disk if retErr == nil { retErr = err } } }() return writeLayerFromTar(layerData, w, filepath.Join(home, id)) }\n\n    ### Response: // writeLayer writes a layer from a tar file..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ServerWebExchangeMatcher pathMatchers(HttpMethod method, String... patterns) { List<ServerWebExchangeMatcher> matchers = new ArrayList<>(patterns.length); for (String pattern : patterns) { matchers.add(new PathPatternParserServerWebExchangeMatcher(pattern, method)); } return new OrServerWebExchangeMatcher(matchers); }\n\n    ### Response:", "ground_truth": "Creates a matcher that matches on the specific method and any of the provided patterns.\n@param method the method to match on. If null, any method will be matched\n@param patterns the patterns to match on\n@return the matcher to use", "predict": "The method pathMatchers creates a server web exchange matcher composed of a group of path pattern matchers of given HTTP method and patterns of given strings of the given order of precedence of the given HTTP method of given patterns of given strings of given order of precedence of the given HTTP method of given patterns of given strings of given order of precedence of the given HTTP method of given patterns of given strings of given order of precedence of the given HTTP method of given patterns of given strings of given order of precedence of the given HTTP method of given patterns of given strings of given order of precedence of the given HTTP method of given patterns of given strings of given order of precedence of the given HTTP method of given patterns of given strings of given order of precedence of the given HTTP method of given patterns of given strings of given order of precedence of the given HTTP method of given patterns of given strings of given order of precedence of the given HTTP method of given patterns of given strings of given order of precedence of the given HTTP method of given patterns of"}, {"ID": 203, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void initLocalizations(String[][] localizations) { if (localizations != null) { publicRuleSetNames = localizations[0].clone(); Map<String, String[]> m = new HashMap<String, String[]>(); for (int i = 1; i < localizations.length; ++i) { String[] data = localizations[i]; String loc = data[0]; String[] names = new String[data.length-1]; if (names.length != publicRuleSetNames.length) { throw new IllegalArgumentException(\"public name length: \" + publicRuleSetNames.length + \" != localized names[\" + i + \"] length: \" + names.length); } System.arraycopy(data, 1, names, 0, names.length); m.put(loc, names); } if (!m.isEmpty()) { ruleSetDisplayNames = m; } } }\n\n    ### Response: Take the localizations array and create a Map from the locale strings to\nthe localization arrays..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ServerWebExchangeMatcher anyExchange() { // we don't use a lambda to ensure a unique equals and hashcode // which otherwise can cause problems with adding multiple entries to an ordered LinkedHashMap return new ServerWebExchangeMatcher() { @Override public Mono<MatchResult> matches(ServerWebExchange exchange) { return ServerWebExchangeMatcher.MatchResult.match(); } }; }\n\n    ### Response:", "ground_truth": "Matches any exchange\n@return the matcher to use", "predict": "This method creates an instance of the ServerWebExchangeMatcher and returns its Mono instance for matching ServerWebExchanges objects of any type to the given server and url patterns of the server and url matching those patterns to produce MatchResult objects of type MatchResult. It uses an ordered LinkedHashMap to store the matching objects to avoid any potential hash collision and ensures proper equality and hashcode for unique objects to add to the ordered Map during matching."}, {"ID": 204, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function uploadUrl($key, $acl, $mimeType = null, $cacheControl = null, $expires = null) { try { $optionsData = [ 'ACL' => $acl, 'Bucket' => $this->bucket, 'ContentType' => $mimeType, 'Key' => $key ]; if(!empty($cacheControl)) { $optionsData[] = ['CacheControl' => $cacheControl]; } if(!empty($expires)) { $optionsData[] = ['Expires' => $expires]; } $putCommand = $this->client->getCommand('PutObject',$optionsData); $request = $this->client->createPresignedRequest($putCommand, '+20 minutes'); $signedUrl = (string)$request->getUri(); return new OtherS3UploadInfo($key,$signedUrl,$acl); } catch(AwsException $ex) { Logger::error('S3 Generate File Upload URL Error', ['exception' => $ex->getMessage()]); throw new StorageException($ex->getMessage(), $ex->getCode(), $ex); } }\n\n    ### Response: region Direct Uploads.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static TextEncryptor delux(CharSequence password, CharSequence salt) { return new HexEncodingTextEncryptor(stronger(password, salt)); }\n\n    ### Response:", "ground_truth": "Creates a text encryptor that uses \"stronger\" password-based encryption. Encrypted\ntext is hex-encoded.\n\n@param password the password used to generate the encryptor's secret key; should\nnot be shared\n@see Encryptors#stronger(CharSequence, CharSequence)", "predict": "Delux encorps HexEncoding TextEncryptor"}, {"ID": 205, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def basis(self): \"\"\" Compute basis rather than storing it. \"\"\" precision_adj = self.dt / 100 return np.arange(self.start, self.stop - precision_adj, self.dt)\n\n    ### Response: Compute basis rather than storing it..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static TextEncryptor text(CharSequence password, CharSequence salt) { return new HexEncodingTextEncryptor(standard(password, salt)); }\n\n    ### Response:", "ground_truth": "Creates a text encryptor that uses \"standard\" password-based encryption. Encrypted\ntext is hex-encoded.\n\n@param password the password used to generate the encryptor's secret key; should\nnot be shared\n@see Encryptors#standard(CharSequence, CharSequence)", "predict": "This method uses the HexEncoding TextEncryptor approach to encrypt the given password and salt string to generate an encrypted string"}, {"ID": 206, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function replaceTypeHintsInFile( string $filePath, string $type, string $dbalType, bool $isNullable ): void { $contents = \\ts\\file_get_contents($filePath); $search = [ ': string;', '(string $', ': string {', '@var string', '@return string', '@param string', ]; $replaceNormal = [ \": $type;\", \"($type $\", \": $type {\", \"@var $type\", \"@return $type\", \"@param $type\", ]; $replaceNullable = [ \": ?$type;\", \"(?$type $\", \": ?$type {\", \"@var $type|null\", \"@return $type|null\", \"@param $type|null\", ]; $replaceRemove = [ ';', '($', ' {', '', '', '', ]; $replace = $replaceNormal; if (\\in_array($dbalType, MappingHelper::MIXED_TYPES, true)) { $replace = $replaceRemove; } elseif ($isNullable) { $replace = $replaceNullable; } $contents = \\str_replace( $search, $replace, $contents ); \\file_put_contents($filePath, $contents); }\n\n    ### Response: We use the string type hint as our default in templates\n\nThis method will then replace those with the updated type\n\n@param string $filePath\n@param string $type\n@param string $dbalType\n@param bool   $isNullable.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static TextEncryptor queryableText(CharSequence password, CharSequence salt) { return new HexEncodingTextEncryptor(new AesBytesEncryptor(password.toString(), salt)); }\n\n    ### Response:", "ground_truth": "Creates an encryptor for queryable text strings that uses standard password-based\nencryption. Uses a 16-byte all-zero initialization vector so encrypting the same\ndata results in the same encryption result. This is done to allow encrypted data to\nbe queried against. Encrypted text is hex-encoded.\n\n@param password the password used to generate the encryptor's secret key; should\nnot be shared\n@param salt a hex-encoded, random, site-global salt value to use to generate the\nsecret key", "predict": "The TextEncryptor class uses AES and HexEncoding to protect passwords and salts with encrypted passwords"}, {"ID": 207, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def raise_error( self, exception_type, # type: Type[Exception] message # type: Text ): # type: (...) -> NoReturn \"\"\"Raise an exception with the current parser state information and error message.\"\"\" error_message = '{} at {}'.format(message, repr(self)) raise exception_type(error_message)\n\n    ### Response: Raise an exception with the current parser state information and error message..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void writeHeaders(HttpServletRequest request, HttpServletResponse response) { if (XFrameOptionsMode.ALLOW_FROM.equals(frameOptionsMode)) { String allowFromValue = this.allowFromStrategy.getAllowFromValue(request); if (XFrameOptionsMode.DENY.getMode().equals(allowFromValue)) { if (!response.containsHeader(XFRAME_OPTIONS_HEADER)) { response.setHeader(XFRAME_OPTIONS_HEADER, XFrameOptionsMode.DENY.getMode()); } } else if (allowFromValue != null) { if (!response.containsHeader(XFRAME_OPTIONS_HEADER)) { response.setHeader(XFRAME_OPTIONS_HEADER, XFrameOptionsMode.ALLOW_FROM.getMode() + \" \" + allowFromValue); } } } else { response.setHeader(XFRAME_OPTIONS_HEADER, frameOptionsMode.getMode()); } }\n\n    ### Response:", "ground_truth": "Writes the X-Frame-Options header value, overwritting any previous value.\n\n@param request the servlet request\n@param response the servlet response", "predict": "\n    The method writesHeaders() generates the appropriate header values for the given framing options and sets them in the response object. If the framing options include the 'allowFrom' setting and its value of 'XFrameOptionsMode.ALLOW_FROM', the header XFRAME_OPTIONS_HEADER contains its value of 'ALLOW_FROM' plus an appropriate separator, e.g. 'ALLOW_FROM;XFrameOptionsMode=ALLOW_FROM;', or if no separator, contains its value of 'ALLOW_FROM;XFrameOptionsMode=ALLOW_FROM;'. Otherwise, the header contains its value of 'XFrameOptionsMode;XFrameOptionsMode=ALLOW_FROM;', or if no separator, contains its value of 'ALLOW_FROM;XFrameOptionsMode=ALLOW_FROM;'."}, {"ID": 208, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function preview($file_name) { if (!\\Entrust::can('preview-logs')) { abort(403, 'Unauthorized access - you do not have the necessary permission to preview logs.'); } $disk = Storage::disk('local'); if ($disk->exists('logs/'.$file_name)) { $this->data['log'] = [ 'file_path' => 'logs/'.$file_name, 'file_name' => $file_name, 'file_size' => $disk->size('logs/'.$file_name), 'last_modified' => $disk->lastModified('logs/'.$file_name), 'content' => $disk->get('logs/'.$file_name), ]; return view(\"logmanager::log_item\", $this->data); } else { abort(404, \"The log file doesn't exist.\"); } }\n\n    ### Response: Previews a log file.\n\nTODO: make it work no matter the flysystem driver (S3 Bucket, etc)..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String determineTargetUrl(HttpServletRequest request, HttpServletResponse response, Authentication authentication) { return determineTargetUrl(request, response); }\n\n    ### Response:", "ground_truth": "Builds the target URL according to the logic defined in the main class Javadoc\n\n@since 5.2", "predict": "Determines the target url of the given HTTP request."}, {"ID": 209, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void addProperty(String propertyName, Direction direction) { if (propertyName == null) { throw new IllegalArgumentException(); } if (direction == null) { direction = Direction.UNSPECIFIED; } if (direction != Direction.UNSPECIFIED) { if (propertyName.length() > 0) { if (propertyName.charAt(0) == '-' || propertyName.charAt(0) == '+') { // Overrule the direction. propertyName = propertyName.substring(1); } } propertyName = direction.toCharacter() + propertyName; } mPropertyList.add(propertyName); }\n\n    ### Response: Adds a property to this index, with the specified direction.\n\n@param propertyName name of property to add to index\n@param direction optional direction of property.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String determineTargetUrl(HttpServletRequest request, HttpServletResponse response) { if (isAlwaysUseDefaultTargetUrl()) { return defaultTargetUrl; } // Check for the parameter and use that if available String targetUrl = null; if (targetUrlParameter != null) { targetUrl = request.getParameter(targetUrlParameter); if (StringUtils.hasText(targetUrl)) { logger.debug(\"Found targetUrlParameter in request: \" + targetUrl); return targetUrl; } } if (useReferer && !StringUtils.hasLength(targetUrl)) { targetUrl = request.getHeader(\"Referer\"); logger.debug(\"Using Referer header: \" + targetUrl); } if (!StringUtils.hasText(targetUrl)) { targetUrl = defaultTargetUrl; logger.debug(\"Using default Url: \" + targetUrl); } return targetUrl; }\n\n    ### Response:", "ground_truth": "Builds the target URL according to the logic defined in the main class Javadoc.", "predict": "Determines the target url of the given HTTP request based on the given parameters and configurations of the index."}, {"ID": 210, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def gen_source(self, ast, name, customize, is_lambda=False, returnNone=False): \"\"\"convert SyntaxTree to Python source code\"\"\" rn = self.return_none self.return_none = returnNone old_name = self.name self.name = name # if code would be empty, append 'pass' if len(ast) == 0: self.println(self.indent, 'pass') else: self.customize(customize) if is_lambda: self.write(self.traverse(ast, is_lambda=is_lambda)) else: self.text = self.traverse(ast, is_lambda=is_lambda) self.println(self.text) self.name = old_name self.return_none = rn\n\n    ### Response: convert SyntaxTree to Python source code.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setTargetUrlParameter(String targetUrlParameter) { if (targetUrlParameter != null) { Assert.hasText(targetUrlParameter, \"targetUrlParameter cannot be empty\"); } this.targetUrlParameter = targetUrlParameter; }\n\n    ### Response:", "ground_truth": "If this property is set, the current request will be checked for this a parameter\nwith this name and the value used as the target URL if present.\n\n@param targetUrlParameter the name of the parameter containing the encoded target\nURL. Defaults to null.", "predict": "\n    * setTargetUrlParameter(String targetUrlParameter);\n    * If parameter is null, throw exception because parameter cannot be empty\n    * If parameter has empty, throw exception because parameter cannot be empty\n    * If parameter has non-blank, set parameter to this Value and execute method\n    * If parameter does not exist, default to empty string"}, {"ID": 211, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_flag_variables(ds): ''' Returns a list of variables that are defined as flag variables :param netCDF4.Dataset ds: An open netCDF4 Dataset ''' flag_variables = [] for name, ncvar in ds.variables.items(): standard_name = getattr(ncvar, 'standard_name', None) if isinstance(standard_name, basestring) and 'status_flag' in standard_name: flag_variables.append(name) elif hasattr(ncvar, 'flag_meanings'): flag_variables.append(name) return flag_variables\n\n    ### Response: Returns a list of variables that are defined as flag variables\n\n    :param netCDF4.Dataset ds: An open netCDF4 Dataset.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Directory getDirectoryWithImmediateParentPopulated(final Long id) { return getJdbcTemplate().queryForObject(SELECT_FROM_DIRECTORY_SINGLE, new Object[] { id }, new RowMapper<Directory>() { public Directory mapRow(ResultSet rs, int rowNumber) throws SQLException { Long parentDirectoryId = new Long(rs .getLong(\"parent_directory_id\")); Directory parentDirectory = Directory.ROOT_DIRECTORY; if (parentDirectoryId != null && !parentDirectoryId.equals(new Long(-1))) { // Need to go and lookup the parent, so do that first parentDirectory = getDirectoryWithImmediateParentPopulated(parentDirectoryId); } Directory directory = new Directory(rs .getString(\"directory_name\"), parentDirectory); FieldUtils.setProtectedFieldValue(\"id\", directory, new Long(rs.getLong(\"id\"))); return directory; } }); }\n\n    ### Response:", "ground_truth": "Executes recursive SQL as needed to build a full Directory hierarchy of objects", "predict": "Returns a directory populated with its immediate parent and the given id and its name and its id populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and populated and"}, {"ID": 212, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function getPropertyPath($propertyPath): PropertyPath { if ($propertyPath instanceof PropertyPathInterface) { // Don't call the copy constructor has it is not needed here return $propertyPath; } if (isset($this->propertyPathCache[$propertyPath])) { return $this->propertyPathCache[$propertyPath]; } if ($this->cacheItemPool) { $item = $this->cacheItemPool->getItem(self::CACHE_PREFIX_PROPERTY_PATH.rawurlencode($propertyPath)); if ($item->isHit()) { return $this->propertyPathCache[$propertyPath] = $item->get(); } } $propertyPathInstance = new PropertyPath($propertyPath); if (isset($item)) { $item->set($propertyPathInstance); $this->cacheItemPool->save($item); } return $this->propertyPathCache[$propertyPath] = $propertyPathInstance; }\n\n    ### Response: Gets a PropertyPath instance and caches it.\n\n@param string|PropertyPath $propertyPath.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DistinguishedName buildDn(String username) { DistinguishedName dn = new DistinguishedName(userDnBase); dn.add(usernameAttribute, username); return dn; }\n\n    ### Response:", "ground_truth": "Assembles the Distinguished Name that should be used the given username.", "predict": "Creates and returns the Dn of the given username."}, {"ID": 213, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function getLinkName($issueLink) { $linkName = null; if (isset($issueLink['outwardIssue'])) { if (isset($issueLink['outwardIssue']['key'], $issueLink['type']['outward'])) { $linkName = $issueLink['type']['outward']; } } elseif (isset($issueLink['inwardIssue'], $issueLink['type']['inward'])) { if (isset($issueLink['inwardIssue']['key'])) { $linkName = $issueLink['type']['inward']; } } return $linkName; }\n\n    ### Response: Returns name of link from Issue link\n\n@param array $issueLink An array of Issue link\n\n@return string Name of link.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Map<Class<? extends Object>, Object> createSharedObjects() { Map<Class<? extends Object>, Object> sharedObjects = new HashMap<Class<? extends Object>, Object>(); sharedObjects.putAll(localConfigureAuthenticationBldr.getSharedObjects()); sharedObjects.put(UserDetailsService.class, userDetailsService()); sharedObjects.put(ApplicationContext.class, context); sharedObjects.put(ContentNegotiationStrategy.class, contentNegotiationStrategy); sharedObjects.put(AuthenticationTrustResolver.class, trustResolver); return sharedObjects; }\n\n    ### Response:", "ground_truth": "Creates the shared objects\n\n@return the shared Objects", "predict": "Map of objects shared across the application"}, {"ID": 214, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func MustEncodeStruct(src interface{}) BSON { b, err := encodeStruct(\"\", src) if err != nil { panic(err) } return b }\n\n    ### Response: // MustEncodeStruct encodes a struct to BSON. Panics upon error..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void configureJaasUsingLoop() throws IOException { String loginConfigUrl = convertLoginConfigToUrl(); boolean alreadySet = false; int n = 1; final String prefix = \"login.config.url.\"; String existing; while ((existing = Security.getProperty(prefix + n)) != null) { alreadySet = existing.equals(loginConfigUrl); if (alreadySet) { break; } n++; } if (!alreadySet) { String key = prefix + n; log.debug(\"Setting security property [\" + key + \"] to: \" + loginConfigUrl); Security.setProperty(key, loginConfigUrl); } }\n\n    ### Response:", "ground_truth": "Loops through the login.config.url.1,login.config.url.2 properties looking for the\nlogin configuration. If it is not set, it will be set to the last available\nlogin.config.url.X property.", "predict": "// Configuration of Jaas using Loop .. Sets security property for login.config.url to given url .. If url already set, log.debug prints \"Property already set to:\" and continues; If url does not exist, creates new property and sets its value to url and log.debug prints \"Setting security property to:\" and sets new property .."}, {"ID": 215, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def set_default(self, name, value): \"\"\"Changes the default value of the named flag object. The flag's current value is also updated if the flag is currently using the default value, i.e. not specified in the command line, and not set by FLAGS.name = value. Args: name: str, the name of the flag to modify. value: The new default value. Raises: UnrecognizedFlagError: Raised when there is no registered flag named name. IllegalFlagValueError: Raised when value is not valid. \"\"\" fl = self._flags() if name not in fl: self._set_unknown_flag(name, value) return fl[name]._set_default(value) # pylint: disable=protected-access self._assert_validators(fl[name].validators)\n\n    ### Response: Changes the default value of the named flag object.\n\n    The flag's current value is also updated if the flag is currently using\n    the default value, i.e. not specified in the command line, and not set\n    by FLAGS.name = value.\n\n    Args:\n      name: str, the name of the flag to modify.\n      value: The new default value.\n\n    Raises:\n      UnrecognizedFlagError: Raised when there is no registered flag named name.\n      IllegalFlagValueError: Raised when value is not valid..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String getCurrentDate() { long now = System.currentTimeMillis(); if ((now - currentDateGenerated) > 1000) { synchronized (format) { if ((now - currentDateGenerated) > 1000) { currentDateGenerated = now; currentDate = format.format(new Date(now)); } } } return currentDate; }\n\n    ### Response:", "ground_truth": "Gets the current date in HTTP format.\n\n@return Current date in HTTP format", "predict": "Get the current date and time in the given format."}, {"ID": 216, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (ctx *HookContext) AddMetric(key, value string, created time.Time) error { return errors.New(\"metrics not allowed in this context\") }\n\n    ### Response: // AddMetric adds metrics to the hook context..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static Long internalParseDate(String value, DateFormat[] formats) { Date date = null; for (int i = 0; (date == null) && (i < formats.length); i++) { try { date = formats[i].parse(value); } catch (ParseException ignored) { } } if (date == null) { return null; } return new Long(date.getTime()); }\n\n    ### Response:", "ground_truth": "Parses date with given formatters.\n\n@param value The string to parse\n@param formats Array of formats to use\n\n@return Parsed date (or null if no formatter mached)", "predict": "// internalParseDate parses the given string as date to millis"}, {"ID": 217, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function getDumpFileFooter() { $footer = ''; if (!$this->dumpSettings['skip-comments']) { $footer .= '-- Dump completed'; if (!$this->dumpSettings['skip-dump-date']) { $footer .= ' on: '.date('r'); } $footer .= PHP_EOL; } return $footer; }\n\n    ### Response: Returns footer for dump file.\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") private static void updateCache(HashMap cache, Object key, Object value) { if (value == null) { return; } if (cache.size() > 1000) { cache.clear(); } cache.put(key, value); }\n\n    ### Response:", "ground_truth": "Updates cache.\n\n@param cache Cache to be updated\n@param key Key to be updated\n@param value New value", "predict": "Updates the given cache by replacing values that were added since the last run of the program with the new values and wipe the other values to avoid unnecessary storage of values that were already added to the cache during the program run."}, {"ID": 218, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function bytesToDump($bytes, $max = 0) { $s = strlen($bytes); if ($max > 0) { $s = min($max, $s); } $line = 24; for ($i = 0; $i < $s; $i ++) { printf('%02X ', ord($bytes{$i})); if (($i + 1) % $line == 0) { print(\"\\n\"); } } print(\"\\n\"); }\n\n    ### Response: Format bytes for dumping.\n\nThis method is for debug output, it will format a string as a\nhexadecimal dump suitable for display on a terminal. The output\nis printed directly to standard out.\n\n@param string $bytes\nthe bytes that will be dumped.\n\n@param integer $max\nthe maximum number of bytes to dump. If this is left\nout (or left to the default of 0), then the entire string will be\ndumped.\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void setDetails(HttpServletRequest request, UsernamePasswordAuthenticationToken authRequest) { authRequest.setDetails(authenticationDetailsSource.buildDetails(request)); }\n\n    ### Response:", "ground_truth": "Provided so that subclasses may configure what is put into the authentication\nrequest's details property.\n\n@param request that an authentication request is being created for\n@param authRequest the authentication request object that should have its details\nset", "predict": "Store details extracted from the request in the Authentication Token.\n\nThis method sets any details extracted from the request into the Authentication Token to aid in subsequent processing of the Authentication request."}, {"ID": 219, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getSQLParamNames() : array { $out = []; foreach ( $this->_attributes as $attributeName => $attribute ) { if ( Type::INIT_SQL === $attribute->getType() ) { $out[] = $attributeName; } } return $out; }\n\n    ### Response: Gets the names of the parameters that should be used as SQL queries, called after connection open.\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static String getSecurityName(final Subject subject) { if (logger.isDebugEnabled()) { logger.debug(\"Determining Websphere security name for subject \" + subject); } String userSecurityName = null; if (subject != null) { // SEC-803 Object credential = subject.getPublicCredentials(getWSCredentialClass()) .iterator().next(); if (credential != null) { userSecurityName = (String) invokeMethod(getSecurityNameMethod(), credential); } } if (logger.isDebugEnabled()) { logger.debug(\"Websphere security name is \" + userSecurityName + \" for subject \" + subject); } return userSecurityName; }\n\n    ### Response:", "ground_truth": "Get the security name for the given subject.\n\n@param subject The subject for which to retrieve the security name\n@return String the security name for the given subject", "predict": "Gets the Websphere security name of the given subject, called during authentication of the given subject."}, {"ID": 220, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def extract_export_code_iruby( placeholder=random_canvas_id, export_type='png', file_name='chart' ) js = '' js << \"\\n <script>\" js << \"\\n (function() {\" js << \"\\n \\tvar chartDom = document.getElementById('#{placeholder}');\" js << \"\\n \\tvar chart = Highcharts.charts[Highcharts.attr(chartDom,\" js << \" 'data-highcharts-chart')]\" js << \"\\n \\tchart.exportChart({\" js << \"\\n \\t\\t\" + append_chart_type(export_type) js << \"\\n \\t\\tfilename: '#{file_name}'\" js << \"\\n \\t});\" js << \"\\n })();\" js << \"\\n </script>\" js end\n\n    ### Response: Returns the script to export the chart in different formats in\n   IRuby notebook\n\n @param (see #extract_export_code)\n @return [String] the script to export the chart in IRuby notebook.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") private static List<String> getWebSphereGroups(final String securityName) { Context ic = null; try { // TODO: Cache UserRegistry object ic = new InitialContext(); Object objRef = ic.lookup(USER_REGISTRY); Object userReg = invokeMethod(getNarrowMethod(), null , objRef, Class.forName(\"com.ibm.websphere.security.UserRegistry\")); if (logger.isDebugEnabled()) { logger.debug(\"Determining WebSphere groups for user \" + securityName + \" using WebSphere UserRegistry \" + userReg); } final Collection groups = (Collection) invokeMethod(getGroupsForUserMethod(), userReg, new Object[] { securityName }); if (logger.isDebugEnabled()) { logger.debug(\"Groups for user \" + securityName + \": \" + groups.toString()); } return new ArrayList(groups); } catch (Exception e) { logger.error(\"Exception occured while looking up groups for user\", e); throw new RuntimeException( \"Exception occured while looking up groups for user\", e); } finally { try { if (ic != null) { ic.close(); } } catch (NamingException e) { logger.debug(\"Exception occured while closing context\", e); } } }\n\n    ### Response:", "ground_truth": "Get the WebSphere group names for the given security name.\n\n@param securityName The security name for which to retrieve the WebSphere group\nnames\n@return the WebSphere group names for the given security name", "predict": "Returns list of WebSphere groups for given security name"}, {"ID": 221, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setRequirements() { if (!isset($this->options['requirements']) || $this->options['requirements'] === null) { return $this; } $requirements = $this->options['requirements']; if (!is_array($requirements)) { $requirements = [$requirements]; } foreach ($requirements as $constraint) { $this->requirements[] = $constraint; } unset($this->options['requirements']); return $this; }\n\n    ### Response: Set requirements..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void changePassword(final String oldPassword, final String newPassword) { Authentication authentication = SecurityContextHolder.getContext() .getAuthentication(); Assert.notNull( authentication, \"No authentication object found in security context. Can't change current user's password!\"); String username = authentication.getName(); logger.debug(\"Changing password for user '\" + username); DistinguishedName userDn = usernameMapper.buildDn(username); if (usePasswordModifyExtensionOperation) { changePasswordUsingExtensionOperation(userDn, oldPassword, newPassword); } else { changePasswordUsingAttributeModification(userDn, oldPassword, newPassword); } }\n\n    ### Response:", "ground_truth": "Changes the password for the current user. The username is obtained from the\nsecurity context.\n\nThere are two supported strategies for modifying the user's password depending on\nthe capabilities of the corresponding LDAP server.\n\n\nConfigured one way, this method will modify the user's password via the\n\nLDAP Password Modify Extended Operation\n.\n\nSee {@link LdapUserDetailsManager#setUsePasswordModifyExtensionOperation(boolean)} for details.\n\n\nBy default, though, if the old password is supplied, the update will be made by rebinding as the user,\nthus modifying the password using the user's permissions. If\noldPassword is null, the update will be attempted using a standard\nread/write context supplied by the context source.\n\n\n@param oldPassword the old password\n@param newPassword the new value of the password.", "predict": "The method-level comment should describe what the method does and how to use it, e.g., Change the password of the specified username to the given new password.."}, {"ID": 222, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (api *Client) ArchiveGroupContext(ctx context.Context, group string) error { values := url.Values{ \"token\": {api.token}, \"channel\": {group}, } _, err := api.groupRequest(ctx, \"groups.archive\", values) return err }\n\n    ### Response: // ArchiveGroupContext archives a private group.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected DistinguishedName buildGroupDn(String group) { DistinguishedName dn = new DistinguishedName(groupSearchBase); dn.add(groupRoleAttributeName, group.toLowerCase()); return dn; }\n\n    ### Response:", "ground_truth": "Creates a DN from a group name.\n\n@param group the name of the group\n@return the DN of the corresponding group, including the groupSearchBase", "predict": "// Group DN builder for the given group."}, {"ID": 223, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def connection_from_promised_list(data_promise, args=None, **kwargs): ''' A version of `connectionFromArray` that takes a promised array, and returns a promised connection. ''' return data_promise.then(lambda data: connection_from_list(data, args, **kwargs))\n\n    ### Response: A version of `connectionFromArray` that takes a promised array, and returns a\n    promised connection..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void allowableSessionsExceeded(List<SessionInformation> sessions, int allowableSessions, SessionRegistry registry) throws SessionAuthenticationException { if (exceptionIfMaximumExceeded || (sessions == null)) { throw new SessionAuthenticationException(messages.getMessage( \"ConcurrentSessionControlAuthenticationStrategy.exceededAllowed\", new Object[] { Integer.valueOf(allowableSessions) }, \"Maximum sessions of {0} for this principal exceeded\")); } // Determine least recently used session, and mark it for invalidation SessionInformation leastRecentlyUsed = null; for (SessionInformation session : sessions) { if ((leastRecentlyUsed == null) || session.getLastRequest() .before(leastRecentlyUsed.getLastRequest())) { leastRecentlyUsed = session; } } leastRecentlyUsed.expireNow(); }\n\n    ### Response:", "ground_truth": "Allows subclasses to customise behaviour when too many sessions are detected.\n\n@param sessions either null or all unexpired sessions associated with\nthe principal\n@param allowableSessions the number of concurrent sessions the user is allowed to\nhave\n@param registry an instance of the SessionRegistry for subclass use", "predict": "Allows a given principal to connect to the Web server if the given principal has not exceeding allowed concurrent sessions or expired any of its sessions, or if there is no other session marked for expiration. If any of these conditions are met, an exception is raised."}, {"ID": 224, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function hasHeader(string $key = null) : bool { if ($key === null) { return false; } $array = $this->getHeaders(); return isset($array[$key]) || array_key_exists($key, $array); }\n\n    ### Response: Returns whether a header exists or not.\n\n@param  string|null $key The header key.\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void copyDetails(Authentication source, Authentication dest) { if ((dest instanceof AbstractAuthenticationToken) && (dest.getDetails() == null)) { AbstractAuthenticationToken token = (AbstractAuthenticationToken) dest; token.setDetails(source.getDetails()); } }\n\n    ### Response:", "ground_truth": "Copies the authentication details from a source Authentication object to a\ndestination one, provided the latter does not already have one set.\n\n@param source source authentication\n@param dest the destination authentication object", "predict": "Copies details from source to dest authentication objects."}, {"ID": 225, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final protected function mergeConfigInstance( ConfigInterface $config, ConfigInterface $instance = null ) : ConfigInterface { $instance = $instance?: $this; // if offset detect as an increment array $arrayInstance = get_object_vars($instance); $arrayInstance[] = true; end($arrayInstance); $increment = key($arrayInstance); unset($arrayInstance); foreach (get_object_vars($config) as $key => $value) { if (isset($instance->{$key})) { if ($value instanceof Config) { if ($instance->{$key} instanceof Config) { $instance->mergeConfigInstance($value, $instance->{$key}); continue; } $instance->{$key} = $value; continue; } if (is_numeric($key) && is_int(abs($key))) { $key = $increment; $increment++; } } $instance->{$key} = $value; } return $instance; }\n\n    ### Response: Method to handle merge config\n\n@param ConfigInterface $config\n@param ConfigInterface|null $instance\n\n@return Config.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private List<Filter> getFilters(HttpServletRequest request) { for (SecurityFilterChain chain : filterChains) { if (chain.matches(request)) { return chain.getFilters(); } } return null; }\n\n    ### Response:", "ground_truth": "Returns the first filter chain matching the supplied URL.\n\n@param request the request to match\n@return an ordered array of Filters defining the filter chain", "predict": "Filter chain given by given HTTP request"}, {"ID": 226, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def copy_contents(self, dst, src, size, condition=None, src_memory=None, dst_memory=None, inspect=True, disable_actions=False): \"\"\" Copies data within a memory. :param dst: A claripy expression representing the address of the destination :param src: A claripy expression representing the address of the source The following parameters are optional. :param src_memory: Copy data from this SimMemory instead of self :param src_memory: Copy data to this SimMemory instead of self :param size: A claripy expression representing the size of the copy :param condition: A claripy expression representing a condition, if the write should be conditional. If this is determined to be false, the size of the copy will be 0. \"\"\" dst = _raw_ast(dst) src = _raw_ast(src) size = _raw_ast(size) condition = _raw_ast(condition) return self._copy_contents(dst, src, size, condition=condition, src_memory=src_memory, dst_memory=dst_memory, inspect=inspect, disable_actions=disable_actions)\n\n    ### Response: Copies data within a memory.\n\n        :param dst:         A claripy expression representing the address of the destination\n        :param src:         A claripy expression representing the address of the source\n\n        The following parameters are optional.\n\n        :param src_memory:  Copy data from this SimMemory instead of self\n        :param src_memory:  Copy data to this SimMemory instead of self\n        :param size:        A claripy expression representing the size of the copy\n        :param condition:   A claripy expression representing a condition, if the write should be conditional. If this\n                            is determined to be false, the size of the copy will be 0..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<Filter> getFilters(String url) { return getFilters(firewall.getFirewalledRequest((new FilterInvocation(url, \"GET\") .getRequest()))); }\n\n    ### Response:", "ground_truth": "Convenience method, mainly for testing.\n\n@param url the URL\n@return matching filter list", "predict": "\n    GetFilters - Get the list of Firewall Filters given the url of the request\n\n     * Parameters:\n     * url - The url of the request\n     * *Return Value:* A list of Firewall Filters"}, {"ID": 227, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_xml_children(source, path): \"\"\"Get all the descendants of source identified by path. Path must be either a an xpath string, or a 2-tuple of (xpath, namespace_dict). \"\"\" if isinstance(path, (tuple, list)): return source.findall(*path) else: return source.findall(path)\n\n    ### Response: Get all the descendants of source identified by path.\n\n  Path must be either a an xpath string, or a 2-tuple of (xpath, namespace_dict)..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected ApplicationContext getContext(PageContext pageContext) { ServletContext servletContext = pageContext.getServletContext(); return SecurityWebApplicationContextUtils.findRequiredWebApplicationContext(servletContext); }\n\n    ### Response:", "ground_truth": "Allows test cases to override where application context obtained from.\n\n@param pageContext so the ServletContext can be accessed as required\nby Spring's WebApplicationContextUtils\n\n@return the Spring application context (never null)", "predict": "Get an ApplicationContext from the given PageContext."}, {"ID": 228, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func ProvideSeed() ([]byte, error) { reader := bufio.NewReader(os.Stdin) for { fmt.Print(\"Enter existing wallet seed: \") seedStr, err := reader.ReadString('\\n') if err != nil { return nil, err } seedStr = strings.TrimSpace(strings.ToLower(seedStr)) seed, err := hex.DecodeString(seedStr) if err != nil || len(seed) < hdkeychain.MinSeedBytes || len(seed) > hdkeychain.MaxSeedBytes { fmt.Printf(\"Invalid seed specified. Must be a \"+ \"hexadecimal value that is at least %d bits and \"+ \"at most %d bits\\n\", hdkeychain.MinSeedBytes*8, hdkeychain.MaxSeedBytes*8) continue } return seed, nil } }\n\n    ### Response: // ProvideSeed is used to prompt for the wallet seed which maybe required during\n// upgrades..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static DistinguishedName getFullDn(DistinguishedName dn, Context baseCtx) throws NamingException { DistinguishedName baseDn = new DistinguishedName(baseCtx.getNameInNamespace()); if (dn.contains(baseDn)) { return dn; } baseDn.append(dn); return baseDn; }\n\n    ### Response:", "ground_truth": "Gets the full dn of a name by prepending the name of the context it is relative to.\nIf the name already contains the base name, it is returned unaltered.", "predict": "// This method generates the full DN string given the partial DN string and the base DN string\n    // It appends the given partial DN string to the base DN string to generate the full DN string\n    // It handles the case if the given partial DN string already exists in the base DN string\n    // It handles the case if the given partial DN string does not already exist in the base DN string\n    // It handles the case if the given partial DN string does not already exist in the base DN string\n    // It handles the case if the given partial DN string does already exist in the base DN string"}, {"ID": 229, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Host) StreamEvents(id string, ch chan *host.Event) (stream.Stream, error) { r := fmt.Sprintf(\"/host/jobs/%s\", id) if id == \"all\" { r = \"/host/jobs\" } return c.c.ResumingStream(\"GET\", r, ch) }\n\n    ### Response: // StreamEvents about job state changes to ch. id may be \"all\" or a single\n// job ID..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public MockMvcRequestSpecification sessionAttrs(Map<String, Object> sessionAttributes) { notNull(sessionAttributes, \"sessionAttributes\"); parameterUpdater.updateParameters(convert(cfg.getMockMvcParamConfig().sessionAttributesUpdateStrategy()), sessionAttributes, this.sessionAttributes); return this; }\n\n    ### Response:", "ground_truth": "Set session attributes.\n\n@param sessionAttributes the session attributes", "predict": "// sessionAttributes contains values that are used to customize MockMVC behavior\n    // during a given request; values could be added or updated by the Spring framework\n    // automatically or by the test code"}, {"ID": 230, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def pack(x: Any) -> bytes: \"\"\"Encode ``x`` into msgpack with additional encoders.\"\"\" try: return msgpack.packb(x, default=encoders) except TypeError as exc: message = ('Serialization error, check the data passed to a do_ command. ' 'Cannot serialize this object:\\n') + str(exc)[16:] raise SerializationError(message)\n\n    ### Response: Encode ``x`` into msgpack with additional encoders..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public AuthenticationScheme basic(String userName, String password) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme(); preemptiveBasicAuthScheme.setUserName(userName); preemptiveBasicAuthScheme.setPassword(password); return preemptiveBasicAuthScheme; }\n\n    ### Response:", "ground_truth": "", "predict": "The method basic() uses the PreemptiveBasicAuthScheme to authenticate the given username and password.."}, {"ID": 231, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function createFileHistory(PostPersistEvent $event) { // Find original filename in request uploaded file $files = $event->getRequest()->files->all(); $uploadedFile = array_pop($files); $originalFileName = $uploadedFile->getClientOriginalName(); // Get generated filename $fileName = $event->getFile()->getBasename(); // Fill FileHistory object return $this->fileHistoryManager->createAndSave($fileName, $originalFileName, $event->getType()); }\n\n    ### Response: Create a filehistory to retrieve original name and uploading user\n\n@param PostPersistEvent $event\n\n@return FileHistory.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void filters(List<Filter> filters) { Validate.notNull(filters, \"Filter list cannot be null\"); RestAssured.filters.addAll(filters); }\n\n    ### Response:", "ground_truth": "Add default filters that will be applied to each request.\n\n@param filters The filter list", "predict": "Filters given list of Filters to RestAssured"}, {"ID": 232, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static Set<String> excludedMethods(String... methodNames) { Set<String> set = new HashSet<String>(MpxjTreeNode.DEFAULT_EXCLUDED_METHODS); set.addAll(Arrays.asList(methodNames)); return set; }\n\n    ### Response: Generates a set of excluded method names.\n\n@param methodNames method names\n@return set of method names.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void filters(Filter filter, Filter... additionalFilters) { Validate.notNull(filter, \"Filter cannot be null\"); RestAssured.filters.add(filter); if (additionalFilters != null) { Collections.addAll(RestAssured.filters, additionalFilters); } }\n\n    ### Response:", "ground_truth": "Add default filters to apply to each request.\n\n@param filter            The filter to add\n@param additionalFilters An optional array of additional filters to add", "predict": "Filters given objects and annotations to produce objects with annotations filtered in"}, {"ID": 233, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def transform(string, transliterations=None): \"\"\" Transform the string to \"upside-down\" writing. Example: >>> import upsidedown >>> print(upsidedown.transform('Hello World!')) \u00a1p\ua781\u0279oM o\ua781\ua781\u01ddH For languages with diacritics you might want to supply a transliteration to work around missing (rendering of) upside-down forms: >>> import upsidedown >>> print(upsidedown.transform('k\u00f6ln', transliterations={'\u00f6': 'oe'})) u\ua781\u01ddo\u029e \"\"\" transliterations = transliterations or TRANSLITERATIONS for character in transliterations: string = string.replace(character, transliterations[character]) inputChars = list(string) inputChars.reverse() output = [] for character in inputChars: if character in _CHARLOOKUP: output.append(_CHARLOOKUP[character]) else: charNormalised = unicodedata.normalize(\"NFD\", character) for c in charNormalised[:]: if c in _CHARLOOKUP: charNormalised = charNormalised.replace(c, _CHARLOOKUP[c]) elif c in _DIACRITICSLOOKUP: charNormalised = charNormalised.replace(c, _DIACRITICSLOOKUP[c]) output.append(unicodedata.normalize(\"NFC\", charNormalised)) return ''.join(output)\n\n    ### Response: Transform the string to \"upside-down\" writing.\n\n    Example:\n\n        >>> import upsidedown\n        >>> print(upsidedown.transform('Hello World!'))\n        \u00a1p\ua781\u0279oM o\ua781\ua781\u01ddH\n\n    For languages with diacritics you might want to supply a transliteration to\n    work around missing (rendering of) upside-down forms:\n        >>> import upsidedown\n        >>> print(upsidedown.transform('k\u00f6ln', transliterations={'\u00f6': 'oe'}))\n        u\ua781\u01ddo\u029e.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static AuthenticationScheme basic(String userName, String password) { final BasicAuthScheme scheme = new BasicAuthScheme(); scheme.setUserName(userName); scheme.setPassword(password); return scheme; }\n\n    ### Response:", "ground_truth": "", "predict": "The method basic() defines an AuthenticationScheme using Basic Authentication. It takes in \n    an arbitrary string as the username and another arbitrary string as the password to authenticate the \n    given username and grant access to the resource protected by this Scheme."}, {"ID": 234, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function ErrorMessage() { this.eventTime = (new Date()).toISOString(); this.serviceContext = {service : 'node', version : undefined}; this.message = ''; this.context = { httpRequest : { method : '', url : '', userAgent : '', referrer : '', responseStatusCode : 0, remoteIp : '' }, user : '', reportLocation : {filePath : '', lineNumber : 0, functionName : ''} }; }\n\n    ### Response: The constructor for ErrorMessage takes no arguments and is solely meant to\nto instantiate properties on the instance. Each property should be externally\nset using the corresponding set function with the exception of eventTime\nwhich can be set externally but does not need to be since it is inited to\nan ISO-8601 compliant time string.\n@type {Object}\n@class ErrorMessage\n@classdesc ErrorMessage is a class which is meant to store and control-for\nStackdriver Error API submittable values. Meant to be JSON string-ifiable\nrepresentation of the final values which will be submitted to the Error API\nthis class enforces type-checking on every setter function and will write\ndefault type-friendly values to instance properties if given values which\nare type-incompatible to expectations. These type-friendly default\nsubstitutions will occur silently and no errors will be thrown on attempted\ninvalid input under the premise that during misassignment some error\ninformation sent to the Error API is better than no error information\ndue to the Error library failing under invalid input.\n@property {String} eventTime - an ISO-8601 compliant string representing when\nthe error was created\n@property {Object} serviceContext - The service information for the error\n@property {String} serviceContext.service - The service that the error was\nwas produced on\n@property {String|Undefined} serviceContext.version - The service version\nthat the error was produced on\n@property {String} message - The error message\n@property {Object} context - the request, user and report context\n@property {Object} context.httpRequest - the request context\n@property {String} context.httpRequest.method - the request method (e.g. GET)\n@property {String} context.httpRequest.url - the request url or path\n@property {String} context.httpRequest.userAgent - the requesting user-agent\n@property {String} context.httpRequest.referrer - the request referrer\n@property {Number} context.httpRequest.responseStatusCode - the request\nstatus-code\n@property {String} context.httpRequest.remoteIp - the requesting remote ip\n@property {String} context.user - the vm instances user\n@property {Object} context.reportLocation - the report context\n@property {String} context.reportLocation.filePath - the file path of the\nreport site\n@property {Number} context.reportLocation.lineNumber - the line number of the\nreport site\n@property {String} context.reportLocation.functionName - the function name of\nthe report site.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static AuthenticationScheme ntlm(String userName, String password, String workstation, String domain) { final NTLMAuthScheme scheme = new NTLMAuthScheme(); scheme.setUserName(userName); scheme.setPassword(password); scheme.setWorkstation(workstation); scheme.setDomain(domain); return scheme; }\n\n    ### Response:", "ground_truth": "Create a NTLM authentication scheme.\n\n@param userName The user name.\n@param password The password.\n@param workstation The NTLM workstation.\n@param domain The NTLM workstation.\n@return The authentication scheme", "predict": "The AuthenticationScheme ntlm() method uses the Microsoft's Network Authentication Library to attempt to connect to the given resource over the given credentials provided to the method. It uses the given username and password to attempt to connect to the given resource and verifies the given credentials on the given domain of the given workstation to connect to the given resource. It succeeds or fails to connect to the given resource according to the given username and password provided to the method and the given domain of the given workstation of the given resource specified to the method."}, {"ID": 235, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function initPopupForm(){ var popUpIsAlreadyVisible = $('#ep_email_form_popup').is(\":visible\"); if(!popUpIsAlreadyVisible){ // if the popup isn't already visible var cookieVal = pad.getPadId() + \"email\"; if(cookie.getPref(cookieVal) !== \"true\"){ // if this user hasn't already subscribed askClientToEnterEmail(); // ask the client to register TODO uncomment me for a pop up } } }\n\n    ### Response: Initialize the popup panel form for subscription.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static AuthenticationScheme form(String userName, String password, FormAuthConfig config) { if (userName == null) { throw new IllegalArgumentException(\"Username cannot be null\"); } if (password == null) { throw new IllegalArgumentException(\"Password cannot be null\"); } final FormAuthScheme scheme = new FormAuthScheme(); scheme.setUserName(userName); scheme.setPassword(password); scheme.setConfig(config); return scheme; }\n\n    ### Response:", "ground_truth": "Use form authentication with the supplied configuration.\n\n@param userName The user name.\n@param password The password.\n@param config   The form authentication config\n@return The authentication scheme", "predict": "Initialize and submit the popup panel for online form authentication of the given username and password."}, {"ID": 236, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function merge($props, array $value) { $conf = $this->conf->getConfig(); $ret = $this->doMerge($conf, $this->arrayize($props), $value); $this->conf->setConfig($conf); return $ret; }\n\n    ### Response: Merges a value to the current property value\n\n@param array|string $props The property to set\n@param array        $value\n\n@throws InvalidArgumentException If the target property contains a scalar.\n\n@return mixed The merged value.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void proxy(URI uri) { if (uri == null) { throw new IllegalArgumentException(\"Proxy URI cannot be null\"); } proxy(new ProxySpecification(uri.getHost(), uri.getPort(), uri.getScheme())); }\n\n    ### Response:", "ground_truth": "Instruct REST Assured to connect to a proxy using a URI.\n\n@param uri The URI of the proxy", "predict": "Starts a new HTTP request to the given url"}, {"ID": 237, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def request(self, method, url_parts, headers=None, data=None): \"\"\" Method for making requests to the Optimizely API \"\"\" if method in self.ALLOWED_REQUESTS: # add request token header headers = headers or {} # test if Oauth token if self.token_type == 'legacy': headers.update( {'Token': self.api_key, 'User-Agent': 'optimizely-client-python/0.1.1'}) elif self.token_type == 'oauth': headers.update( {'Authorization': 'Bearer ' + self.api_key, 'User-Agent': 'optimizely-client-python/0.1.1'}) else: raise ValueError( '{} is not a valid token type.'.format(self.token_type)) # make request and return parsed response url = urlparse.urljoin( self.api_base, '/'.join([str(url_part) for url_part in url_parts]) ) return self.parse_response( getattr(requests, method)(url, headers=headers, data=data) ) else: raise error.BadRequestError( '%s is not a valid request type.' % method)\n\n    ### Response: Method for making requests to the Optimizely API.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String print(ResponseOptions responseOptions, ResponseBody responseBody, PrintStream stream, LogDetail logDetail, boolean shouldPrettyPrint) { final StringBuilder builder = new StringBuilder(); if (logDetail == ALL || logDetail == STATUS) { builder.append(responseOptions.statusLine()); } if (logDetail == ALL || logDetail == HEADERS) { final Headers headers = responseOptions.headers(); if (headers.exist()) { appendNewLineIfAll(logDetail, builder).append(toString(headers)); } } else if (logDetail == COOKIES) { final Cookies cookies = responseOptions.detailedCookies(); if (cookies.exist()) { appendNewLineIfAll(logDetail, builder).append(cookies.toString()); } } if (logDetail == ALL || logDetail == BODY) { String responseBodyToAppend; if (shouldPrettyPrint) { responseBodyToAppend = new Prettifier().getPrettifiedBodyIfPossible(responseOptions, responseBody); } else { responseBodyToAppend = responseBody.asString(); } if (logDetail == ALL && !isBlank(responseBodyToAppend)) { builder.append(SystemUtils.LINE_SEPARATOR).append(SystemUtils.LINE_SEPARATOR); } builder.append(responseBodyToAppend); } String response = builder.toString(); stream.println(response); return response; }\n\n    ### Response:", "ground_truth": "Prints the response to the print stream\n\n@return A string of representing the response", "predict": "prints details of the HTTP response to the console"}, {"ID": 238, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function sendMessageRead($to, $id) { $listNode = null; $idNode = $id; if (is_array($id) && count($id > 1)) { $idNode = array_shift($id); foreach ($id as $itemId) { $items[] = new ProtocolNode('item', [ 'id' => $itemId, ], null, null); } $listNode = new ProtocolNode('list', null, $items, null); } $messageNode = new ProtocolNode('receipt', [ 'type' => 'read', 't' => time(), 'to' => $this->getJID($to), 'id' => $idNode, ], [$listNode], null); $this->sendNode($messageNode); }\n\n    ### Response: Send a read receipt to a message.\n\n@param string                $to The recipient.\n@param mixed String or Array $id.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RestAssuredConfig redirect(RedirectConfig redirectConfig) { notNull(redirectConfig, \"Redirect config\"); return new RestAssuredConfig(redirectConfig, conf(HttpClientConfig.class), conf(LogConfig.class), conf(EncoderConfig.class), conf(DecoderConfig.class), conf(SessionConfig.class), conf(ObjectMapperConfig.class), conf(ConnectionConfig.class), conf(JsonConfig.class), conf(XmlConfig.class), conf(SSLConfig.class), conf(MatcherConfig.class), conf(HeaderConfig.class), conf(MultiPartConfig.class), conf(ParamConfig.class), conf(OAuthConfig.class), conf(FailureConfig.class)); }\n\n    ### Response:", "ground_truth": "Set the redirect config.\n\n@param redirectConfig The {@link RedirectConfig} to set\n@return An updated RestAssuredConfiguration", "predict": "Allows you to easily configure RestAssured to do redirections of the HTTP protocol"}, {"ID": 239, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function registerClientScript() { $view = $this->getView(); ImageManagerInputAsset::register($view); //set baseUrl from image manager $sBaseUrl = Url::to(['/imagemanager/manager']); //set base url $view->registerJs(\"imageManagerInput.baseUrl = '\" . $sBaseUrl . \"';\"); $view->registerJs(\"imageManagerInput.message = \" . Json::encode([ 'imageManager' => Yii::t('imagemanager','Image manager'), 'detachWarningMessage' => Yii::t('imagemanager', 'Are you sure you want to detach the image?'), ]) . \";\"); }\n\n    ### Response: Registers js Input.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EncoderConfig defaultQueryParameterCharset(String charset) { return new EncoderConfig(defaultContentCharset, charset, shouldAppendDefaultContentCharsetToContentTypeIfUndefined, contentEncoders, contentTypeToDefaultCharset, true); }\n\n    ### Response:", "ground_truth": "Specify the default charset for query parameters\n\n@param charset The charset to use.\n@return A new instance of {@link EncoderConfig}", "predict": "Allows you to customize the charset of the query parameter values in the server response"}, {"ID": 240, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function authIps($userIp) { if (empty($this->ips)) { return true; } foreach ($this->ips as $ip) { if ($userIp === $ip) { return true; } } return false; }\n\n    ### Response: Returns true if user has IP to access area\n\n@param string $userIp\n\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ObjectMapperConfig defaultObjectMapperType(ObjectMapperType defaultObjectMapperType) { return new ObjectMapperConfig(defaultObjectMapper, defaultObjectMapperType, gsonObjectMapperFactory, jackson1ObjectMapperFactory, jackson2ObjectMapperFactory, jaxbObjectMapperFactory, johnzonObjectMapperFactory, true); }\n\n    ### Response:", "ground_truth": "Creates an object mapper configuration that uses the specified object mapper as default.\n\n@param defaultObjectMapperType The object mapper to use. If null then classpath scanning will be used.", "predict": "Sets default mapper for given type of objects\n\npublic ObjectMapperConfig defaultObjectMapperType(ObjectMapperType defaultObjectMapperType);\n\nSets default mapper for given type of objects to the given defaultObjectMapper and defaultObjectMapperType"}, {"ID": 241, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_default_metrics(config): \"\"\" Get the default metrics for a configuration. :param config: The configuration :type config: :class:`wily.config.WilyConfig` :return: Return the list of default metrics in this index :rtype: ``list`` of ``str`` \"\"\" archivers = list_archivers(config) default_metrics = [] for archiver in archivers: index = get_archiver_index(config, archiver) if len(index) == 0: logger.warning(\"No records found in the index, no metrics available\") return [] operators = index[0][\"operators\"] for operator in operators: o = resolve_operator(operator) if o.cls.default_metric_index is not None: metric = o.cls.metrics[o.cls.default_metric_index] default_metrics.append(\"{0}.{1}\".format(o.cls.name, metric.name)) return default_metrics\n\n    ### Response: Get the default metrics for a configuration.\n\n    :param config: The configuration\n    :type  config: :class:`wily.config.WilyConfig`\n\n    :return: Return the list of default metrics in this index\n    :rtype: ``list`` of ``str``.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ObjectMapperConfig jaxbObjectMapperFactory(JAXBObjectMapperFactory jaxbObjectMapperFactory) { return new ObjectMapperConfig(defaultObjectMapper, defaultObjectMapperType, gsonObjectMapperFactory, jackson1ObjectMapperFactory, jackson2ObjectMapperFactory, jaxbObjectMapperFactory, johnzonObjectMapperFactory, true); }\n\n    ### Response:", "ground_truth": "Specify a custom JAXB object mapper factory.\n\n@param jaxbObjectMapperFactory The object mapper factory", "predict": "\n    Defines the configuration for the ObjectMapperFactory using Jackson ObjectMapperFactory plugins and various other plugins to customize the behavior of the ObjectMapperFactory for various situations such as marshaling of arbitrary objects to and from xml and for various Json parsers such as Jackson, Gson, Johnzon, and so on."}, {"ID": 242, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Config createAdaptorRuntime(SchedulerStateManagerAdaptor adaptor) { return Config.newBuilder() .put(Key.SCHEDULER_STATE_MANAGER_ADAPTOR, adaptor).build(); }\n\n    ### Response: Creates initial runtime config of scheduler state manager adaptor\n\n@return adaptor config.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RestAssuredMockMvcConfig logConfig(LogConfig logConfig) { notNull(logConfig, \"Log config\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }\n\n    ### Response:", "ground_truth": "Set the Log config.\n\n@param logConfig The {@link LogConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Allows configuration of Rest assured Mockmvc Loggin"}, {"ID": 243, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function _call( $path, $method = 'GET', $params = array(), $retry = false ) { $this->_logger->entrance( $method . ':' . $path ); if ( self::is_temporary_down() ) { $result = $this->get_temporary_unavailable_error(); } else { $result = $this->_api->Api( $path, $method, $params ); if ( null !== $result && isset( $result->error ) && isset( $result->error->code ) && 'request_expired' === $result->error->code ) { if ( ! $retry ) { $diff = isset( $result->error->timestamp ) ? ( time() - strtotime( $result->error->timestamp ) ) : false; // Try to sync clock diff. if ( false !== $this->_sync_clock_diff( $diff ) ) { // Retry call with new synced clock. return $this->_call( $path, $method, $params, true ); } } } } if ( $this->_logger->is_on() && self::is_api_error( $result ) ) { // Log API errors. $this->_logger->api_error( $result ); } return $result; }\n\n    ### Response: Override API call to enable retry with servers' clock auto sync method.\n\n@param string $path\n@param string $method\n@param array  $params\n@param bool   $retry Is in retry or first call attempt.\n\n@return array|mixed|string|void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RestAssuredMockMvcConfig sessionConfig(SessionConfig sessionConfig) { notNull(sessionConfig, \"Session config\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }\n\n    ### Response:", "ground_truth": "Set the session config.\n\n@param sessionConfig The {@link SessionConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Override session configuration to enable session auto sync method."}, {"ID": 244, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function put ($data) { $this->_options[ CURLOPT_CUSTOMREQUEST ] = 'PUT'; $this->_options[ CURLOPT_POSTFIELDS ] = http_build_query($data); return $this->send(); }\n\n    ### Response: Sends PUT request.\n\n@param null|array $data Additional data to append to request.\n@return string|CurlResponse.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RestAssuredMockMvcConfig objectMapperConfig(ObjectMapperConfig objectMapperConfig) { notNull(objectMapperConfig, \"Object mapper config\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }\n\n    ### Response:", "ground_truth": "Set the object mapper config.\n\n@param objectMapperConfig The {@link ObjectMapperConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Allows configuration of MockMVC objects to customize behaviour of RestAssured REST client library"}, {"ID": 245, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setInvokableClass($name, $invokableClass, $shared = null) { $invokableClass = strtr($invokableClass, '.', '\\\\'); return parent::setInvokableClass($name, $invokableClass, $shared); }\n\n    ### Response: Auto convert dottet class names to PHP class names\n\n@see \\Zend\\ServiceManager\\ServiceManager::setInvokableClass().\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RestAssuredMockMvcConfig jsonConfig(JsonConfig jsonConfig) { notNull(jsonConfig, \"JsonConfig\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }\n\n    ### Response:", "ground_truth": "Set the Json config.\n\n@param jsonConfig The {@link JsonConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Allows configuration of MockMvc RESTful Testing via Jackson, Gson, Snake_case, Xml, Headers, Async and Multi_Part support"}, {"ID": 246, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def consume(self, payload=True): \"\"\"Consume events.\"\"\" with self.create_consumer() as consumer: for msg in consumer.iterqueue(): yield msg.payload if payload else msg\n\n    ### Response: Consume events..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RestAssuredMockMvcConfig xmlConfig(XmlConfig xmlConfig) { notNull(xmlConfig, \"XmlConfig\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }\n\n    ### Response:", "ground_truth": "Set the Xml config.\n\n@param xmlConfig The {@link XmlConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "The method defines a configuration method for RestAssured MockMvc called xmlConfig which uses the arguments of an XmlConfig object to customize how MockMvc handles incoming request with XML payload"}, {"ID": 247, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isLocalCameraUri(Uri uri) { String uriString = uri.toString(); return uriString.startsWith(MediaStore.Images.Media.EXTERNAL_CONTENT_URI.toString()) || uriString.startsWith(MediaStore.Images.Media.INTERNAL_CONTENT_URI.toString()); }\n\n    ### Response: Checks if the given URI is for a photo from the device's local media store.\n\n@param uri the URI to check\n@return true if the URI points to a media store photo.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RestAssuredMockMvcConfig encoderConfig(EncoderConfig encoderConfig) { notNull(encoderConfig, \"EncoderConfig\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }\n\n    ### Response:", "ground_truth": "Set the encoder config\n\n@param encoderConfig The {@link EncoderConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Allows you to customize how MockMVC handles objects (encoders and decoders), sessions, HTTP Headers, HTTP Status Codes, MockMVC Test Request Objects, MockMVC Test Answers, MockMVC Test Matching and more!"}, {"ID": 248, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def funTransChica(imagl, idril, ibfield, gamma0, xoy='x'): \"\"\" Chicane matrix, composed of four rbends, seperated by drifts :param imagl: rbend width, in [m] :param idril: drift length between two adjacent rbends, in [m] :param ibfield: rbend magnetic strength, in [T] :param gamma0: electron energy, gamma :param xoy: ``'x'`` or ``'y'``, matrix in X or Y direction, ``'x'`` by default :return: 2x2 numpy array \"\"\" m0 = 9.10938215e-31 e0 = 1.602176487e-19 c0 = 299792458 rho = np.sqrt(gamma0 ** 2 - 1) * m0 * c0 / ibfield / e0 theta = np.arcsin(imagl / rho) ld = idril mx = reduce(np.dot, [funTransDrift(idril), funTransSectX(theta, rho), funTransEdgeX(theta, rho), funTransDrift(ld), funTransEdgeX(-theta, -rho), funTransSectX(-theta, -rho), funTransDrift(ld), funTransSectX(-theta, -rho), funTransEdgeX(-theta, -rho), funTransDrift(ld), funTransEdgeX(theta, rho), funTransSectX(theta, rho), funTransDrift(idril)]) my = reduce(np.dot, [funTransDrift(idril), funTransSectY(theta, rho), funTransEdgeY(theta, rho), funTransDrift(ld), funTransEdgeY(-theta, -rho), funTransSectY(-theta, -rho), funTransDrift(ld), funTransSectY(-theta, -rho), funTransEdgeY(-theta, -rho), funTransDrift(ld), funTransEdgeY(theta, rho), funTransSectY(theta, rho), funTransDrift(idril)]) if xoy == 'x': m = mx else: m = my return m\n\n    ### Response: Chicane matrix, composed of four rbends, seperated by drifts\n\n    :param imagl: rbend width, in [m]\n    :param idril: drift length between two adjacent rbends, in [m]\n    :param ibfield: rbend magnetic strength, in [T]\n    :param gamma0: electron energy, gamma\n    :param xoy: ``'x'`` or ``'y'``, matrix in X or Y direction, ``'x'`` by default\n    :return: 2x2 numpy array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RestAssuredMockMvcConfig headerConfig(HeaderConfig headerConfig) { notNull(headerConfig, \"HeaderConfig\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }\n\n    ### Response:", "ground_truth": "Set the header config\n\n@param headerConfig The {@link HeaderConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "\n    Configures RestAssured MockMvc to add custom HTTP Headers to all responses, such as allow/deny values for particular HTTP verbs or particular HTTP methods, allow/deny values for particular HTTP Status Codes, allow/deny values for particular HTTP Response Headers, allow/deny values for particular query string parameters, allow/deny values for particular request parameters, allow/deny values for particular request fields, allow/deny values for particular request objects, allow/deny values for particular server errors, allow/deny values for particular server response codes, allow/deny values for particular server response messages, allow/deny values for particular server response objects, allow/deny values for particular server response fields, allow/deny values for particular server error objects and allow/deny values for particular server error codes."}, {"ID": 249, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (m *MockSentPacketHandler) GetLowestPacketNotConfirmedAcked() protocol.PacketNumber { m.ctrl.T.Helper() ret := m.ctrl.Call(m, \"GetLowestPacketNotConfirmedAcked\") ret0, _ := ret[0].(protocol.PacketNumber) return ret0 }\n\n    ### Response: // GetLowestPacketNotConfirmedAcked mocks base method.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RestAssuredMockMvcConfig asyncConfig(AsyncConfig asyncConfig) { notNull(asyncConfig, AsyncConfig.class); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }\n\n    ### Response:", "ground_truth": "Set the async config\n\n@param asyncConfig The {@link AsyncConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "// This method generates an instance of RestAssuredMockMvc configured for asynchronous behavior with the given AsyncConfig instance."}, {"ID": 250, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _safe_urlsplit(s): \"\"\"the urlparse.urlsplit cache breaks if it contains unicode and we cannot control that. So we force type cast that thing back to what we think it is. \"\"\" rv = urlparse.urlsplit(s) # we have to check rv[2] here and not rv[1] as rv[1] will be # an empty bytestring in case no domain was given. if type(rv[2]) is not type(s): assert hasattr(urlparse, 'clear_cache') urlparse.clear_cache() rv = urlparse.urlsplit(s) assert type(rv[2]) is type(s) return rv\n\n    ### Response: the urlparse.urlsplit cache breaks if it contains unicode and\n    we cannot control that.  So we force type cast that thing back\n    to what we think it is..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RestAssuredMockMvcConfig mockMvcConfig(MockMvcConfig mockMvcConfig) { notNull(mockMvcConfig, MockMvcConfig.class); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }\n\n    ### Response:", "ground_truth": "Set the MockMVC config\n\n@param mockMvcConfig The {@link MockMvcConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "The RestAssuredMockMvcConfig class provides configuration options for Rest assured MockMVC Tests. It contains configuration options for Logging, Serialization, Request Processing, Sessions, Object Map, Json, XML, Headers, Asynchronous Test Execution, Multi Part Form Data, Matching and Mock MVC Test configuration"}, {"ID": 251, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function sleep($s) { static $interval = 0.2; $n = $s / $interval; for ($i = 0; $i < $n; ++$i) { if ($this->shutdown) { return false; } \\usleep($interval * 1000000); } return true; }\n\n    ### Response: Delays the process execution for the given number of seconds\n@param integer Sleep time in seconds\n@return boolean Success.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RestAssuredMockMvcConfig multiPartConfig(MultiPartConfig multiPartConfig) { notNull(multiPartConfig, MultiPartConfig.class); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }\n\n    ### Response:", "ground_truth": "Set the multi-part config\n\n@param multiPartConfig The {@link MultiPartConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Allows configuration of MockMVC behavior for multi-part fields in a request"}, {"ID": 252, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean blockReceived(Block block, String delHint, DatanodeDescriptor node) throws IOException { assert (hasWriteLock()); // decrement number of blocks scheduled to this datanode. node.decBlocksScheduled(); // get the deletion hint node DatanodeDescriptor delHintNode = null; if (delHint != null && delHint.length() != 0) { delHintNode = datanodeMap.get(delHint); if (delHintNode == null) { NameNode.stateChangeLog.warn(\"BLOCK* NameSystem.blockReceived: \" + block + \" is expected to be removed from an unrecorded node \" + delHint); } } // // Modify the blocks->datanode map and node's map. // pendingReplications.remove(block); return addStoredBlock(block, node, delHintNode); }\n\n    ### Response: The given node is reporting that it received a certain block..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RestAssuredMockMvcConfig paramConfig(MockMvcParamConfig paramConfig) { notNull(paramConfig, MultiPartConfig.class); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }\n\n    ### Response:", "ground_truth": "Set the parameter config\n\n@param paramConfig The {@link MockMvcParamConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Allows you to customize MockMVC behavior by parameterizing its configuration"}, {"ID": 253, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getEnabledExtensions() { $returnValue = array(); $enabled = $this->getExtensionById('generis')->getConfig(self::EXTENSIONS_CONFIG_KEY); foreach ($this->getInstalledExtensions() as $ext) { if (isset($enabled[$ext->getId()]) && $enabled[$ext->getId()]['enabled']) { $returnValue[$ext->getId()] = $ext; } } return (array) $returnValue; }\n\n    ### Response: Get the set of currently enabled extensions. This method\nreturns an array of common_ext_Extension.\n\n@access public\n@author Joel Bout, \n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RestAssuredMockMvcConfig matcherConfig(MatcherConfig matcherConfig) { notNull(matcherConfig, MatcherConfig.class); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }\n\n    ### Response:", "ground_truth": "Set the matcher config\n\n@param matcherConfig The {@link MockMvcParamConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Matcher configuration for MockMVC test suite using Rest assured."}, {"ID": 254, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def load(path=None, first_data_line='auto', filters='*.*', text='Select a file, FACEHEAD.', default_directory='default_directory', quiet=True, header_only=False, transpose=False, **kwargs): \"\"\" Loads a data file into the databox data class. Returns the data object. Most keyword arguments are sent to databox.load() so check there for documentation.(if their function isn't obvious). Parameters ---------- path=None Supply a path to a data file; None means use a dialog. first_data_line=\"auto\" Specify the index of the first data line, or have it figure this out automatically. filters=\"*.*\" Specify file filters. text=\"Select a file, FACEHEAD.\" Window title text. default_directory=\"default_directory\" Which directory to start in (by key). This lives in spinmob.settings. quiet=True Don't print stuff while loading. header_only=False Load only the header information. transpose = False Return databox.transpose(). Additioinal optional keyword arguments are sent to spinmob.data.databox(), so check there for more information. \"\"\" d = databox(**kwargs) d.load_file(path=path, first_data_line=first_data_line, filters=filters, text=text, default_directory=default_directory, header_only=header_only) if not quiet: print(\"\\nloaded\", d.path, \"\\n\") if transpose: return d.transpose() return d\n\n    ### Response: Loads a data file into the databox data class. Returns the data object.\n\n    Most keyword arguments are sent to databox.load() so check there\n    for documentation.(if their function isn't obvious).\n\n    Parameters\n    ----------\n    path=None\n        Supply a path to a data file; None means use a dialog.\n    first_data_line=\"auto\"\n        Specify the index of the first data line, or have it figure this out\n        automatically.\n    filters=\"*.*\"\n        Specify file filters.\n    text=\"Select a file, FACEHEAD.\"\n        Window title text.\n    default_directory=\"default_directory\"\n        Which directory to start in (by key). This lives in spinmob.settings.\n    quiet=True\n        Don't print stuff while loading.\n    header_only=False\n        Load only the header information.\n    transpose = False    \n        Return databox.transpose().\n\n    Additioinal optional keyword arguments are sent to spinmob.data.databox(), \n    so check there for more information..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public CertificateAuthSettings allowAllHostnames() { return new CertificateAuthSettings(keystoreType, trustStoreType, port, trustStore, keyStore, ALLOW_ALL_HOSTNAME_VERIFIER, sslSocketFactory); }\n\n    ### Response:", "ground_truth": "", "predict": "\n    The CertificateAuthSettings class provides configuration options for the Selenium WebDriver server to accept any hostname when verifying the server certificate during WebDriver communication.. It defines options for the system certificate store (truststore andkeystorelibrary), the port of the WebDriver server, the certificate store location, the certificate store file names, the certificate verifier, and the SSL Socket Factory to use.. It also defines options to allow any hostname during verification of the server certificate.. It uses either the KeyStore or Truststore library to manage certificate stores.. It uses either the KeyStore or Truststore library to manage certificate stores.. It uses either the KeyStore or Truststore library to manage certificate stores.. It uses either the KeyStore or Truststore library to manage certificate stores.. It uses either the KeyStore or Truststore library to manage certificate stores.. It uses either the KeyStore or Truststore library to manage certificate stores.. It uses either the KeyStore or Truststore library to manage certificate stores.. It uses either the KeyStore or Truststore"}, {"ID": 255, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private List<String> getDomainHostServers(ModelControllerClient mcc, String hostName) { return getChildrenNames(PathAddress.EMPTY_ADDRESS.append(\"host\", hostName), \"server\", mcc); }\n\n    ### Response: returns empty list if not in domain mode.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public XmlPathConfig declareNamespaces(Map<String, String> namespacesToDeclare) { return new XmlPathConfig(jaxbObjectMapperFactory, defaultParserType, defaultDeserializer, charset, features, namespacesToDeclare, properties, validating, namespaceAware, allowDocTypeDeclaration); }\n\n    ### Response:", "ground_truth": "Specify declared namespaces that will be used when parsing XML.\n\n@param namespacesToDeclare A map containing features that will be used by the underlying {@link groovy.util.XmlSlurper}.\n@return A new instance of XmlPathConfig\n@see org.xml.sax.XMLReader#setFeature(java.lang.String, boolean)", "predict": "Declares JAXB and XPath mappings and sets document type declaration if specified"}, {"ID": 256, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ServiceName moduleServiceName(ModuleIdentifier identifier) { if (!identifier.getName().startsWith(MODULE_PREFIX)) { throw ServerLogger.ROOT_LOGGER.missingModulePrefix(identifier, MODULE_PREFIX); } return MODULE_SERVICE_PREFIX.append(identifier.getName()).append(identifier.getSlot()); }\n\n    ### Response: Returns the corresponding ModuleLoadService service name for the given module.\n\n@param identifier The module identifier\n@return The service name of the ModuleLoadService service.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public XmlPathConfig declaredNamespace(String prefix, String namespaceURI) { Validate.notEmpty(prefix, \"Prefix cannot be empty\"); Validate.notEmpty(namespaceURI, \"Namespace URI cannot be empty\"); Map<String, String> updatedNamespaces = new HashMap<String, String>(declaredNamespaces); updatedNamespaces.put(prefix, namespaceURI); return new XmlPathConfig(jaxbObjectMapperFactory, defaultParserType, defaultDeserializer, charset, features, updatedNamespaces, properties, validating, true, allowDocTypeDeclaration); }\n\n    ### Response:", "ground_truth": "Declares a namespace.\n\n@param prefix       The feature name, which is a fully-qualified URI.\n@param namespaceURI The requested value of the feature (true or false).\n@return A new XmlPathConfig instance\n@see org.xml.sax.XMLReader#setFeature(java.lang.String, boolean)", "predict": "Declares the given prefix and namespaceURI for the given document type."}, {"ID": 257, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def update(self, collection_id, title=None, description=None, private=False): \"\"\" Update an existing collection belonging to the logged-in user. This requires the 'write_collections' scope. :param collection_id [string]: The collection\u2019s ID. Required. :param title [string]: The title of the collection. (Required.) :param description [string]: The collection\u2019s description. (Optional.) :param private [boolean]: Whether to make this collection private. (Optional; default false). :return: [Collection]: The Unsplash Collection. \"\"\" url = \"/collections/%s\" % collection_id data = { \"title\": title, \"description\": description, \"private\": private } result = self._put(url, data=data) return CollectionModel.parse(result)\n\n    ### Response: Update an existing collection belonging to the logged-in user.\n        This requires the 'write_collections' scope.\n\n        :param collection_id [string]: The collection\u2019s ID. Required.\n        :param title [string]: The title of the collection. (Required.)\n        :param description [string]: The collection\u2019s description. (Optional.)\n        :param private [boolean]: Whether to make this collection private. (Optional; default false).\n        :return: [Collection]: The Unsplash Collection..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object request(String method, boolean hasBody, Closure configClosure) throws ClientProtocolException, IOException { return this.doRequest(this.defaultURI.toURI(), method, this.defaultContentType, hasBody, configClosure); }\n\n    ### Response:", "ground_truth": "Make an HTTP request to the default URI, and parse using the default\ncontent-type.\n\n@param method        {@link HttpRequestFactory HTTP method}\n@param configClosure request configuration options\n@return whatever value was returned by the executed response handler.\n@throws ClientProtocolException\n@throws IOException\n@see #request(Object, HttpRequestFactory, Object, Closure)", "predict": "The Client makes a request to the server specified by its default endpoint. The method used may be POST, PUT, GET, or DELETE, depending on the method specified in the request."}, {"ID": 258, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _query_from_term(self, term, field_name, filter_type, is_not): \"\"\" Uses arguments to construct a list of xapian.Query's. \"\"\" if field_name != 'content' and field_name not in self.backend.column: raise InvalidIndexError('field \"%s\" not indexed' % field_name) # It it is an AutoQuery, it has no filters # or others, thus we short-circuit the procedure. if isinstance(term, AutoQuery): if field_name != 'content': query = '%s:%s' % (field_name, term.prepare(self)) else: query = term.prepare(self) return [self.backend.parse_query(query)] query_list = [] # Handle `ValuesListQuerySet`. if hasattr(term, 'values_list'): term = list(term) if field_name == 'content': # content is the generic search: # force no field_name search # and the field_type to be 'text'. field_name = None field_type = 'text' # we don't know what is the type(term), so we parse it. # Ideally this would not be required, but # some filters currently depend on the term to make decisions. term = _to_xapian_term(term) query_list.append(self._filter_contains(term, field_name, field_type, is_not)) # when filter has no filter_type, haystack uses # filter_type = 'content'. Here we remove it # since the above query is already doing this if filter_type == 'content': filter_type = None else: # get the field_type from the backend field_type = self.backend.schema[self.backend.column[field_name]]['type'] # private fields don't accept 'contains' or 'startswith' # since they have no meaning. if filter_type in ('contains', 'startswith') and field_name in (ID, DJANGO_ID, DJANGO_CT): filter_type = 'exact' if field_type == 'text': # we don't know what type \"term\" is, but we know we are searching as text # so we parse it like that. # Ideally this would not be required since _term_query does it, but # some filters currently depend on the term to make decisions. if isinstance(term, list): term = [_to_xapian_term(term) for term in term] else: term = _to_xapian_term(term) # todo: we should check that the filter is valid for this field_type or raise InvalidIndexError if filter_type == 'contains': query_list.append(self._filter_contains(term, field_name, field_type, is_not)) elif filter_type in ('content', 'exact'): query_list.append(self._filter_exact(term, field_name, field_type, is_not)) elif filter_type == 'in': query_list.append(self._filter_in(term, field_name, field_type, is_not)) elif filter_type == 'startswith': query_list.append(self._filter_startswith(term, field_name, field_type, is_not)) elif filter_type == 'endswith': raise NotImplementedError(\"The Xapian search backend doesn't support endswith queries.\") elif filter_type == 'gt': query_list.append(self._filter_gt(term, field_name, field_type, is_not)) elif filter_type == 'gte': query_list.append(self._filter_gte(term, field_name, field_type, is_not)) elif filter_type == 'lt': query_list.append(self._filter_lt(term, field_name, field_type, is_not)) elif filter_type == 'lte': query_list.append(self._filter_lte(term, field_name, field_type, is_not)) elif filter_type == 'range': query_list.append(self._filter_range(term, field_name, field_type, is_not)) return query_list\n\n    ### Response: Uses arguments to construct a list of xapian.Query's..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setHeaders(Map<?, ?> headers) { this.defaultRequestHeaders.clear(); if (headers == null) return; for (Object key : headers.keySet()) { Object val = headers.get(key); if (val == null) continue; this.defaultRequestHeaders.put(key.toString(), val.toString()); } }\n\n    ### Response:", "ground_truth": "Set the default headers to add to all requests made by this builder\ninstance.  These values will replace any previously set default headers.\n\n@param headers map of header names & values.", "predict": "Sets the default request header values to those specified in the Map provided. If no Map is provided or its contents are null, then the default request header values are kept intact."}, {"ID": 259, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def pretty_inspect io = StringIO.new formatter = Formatter.new(io) pretty_dump(formatter) io.rewind io.read end\n\n    ### Response: Return pretty inspection\n\n @return [String]\n\n @api private.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setProxy(String host, int port, String scheme) { getClient().getParams().setParameter( ConnRoutePNames.DEFAULT_PROXY, new HttpHost(host, port, scheme)); }\n\n    ### Response:", "ground_truth": "null for the default\n@see HttpHost#HttpHost(String, int, String)", "predict": "\n    Sets the proxy for the HTTP client"}, {"ID": 260, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function hasReadableProperty( string $name, &$getterName ) : bool { if ( \\in_array( $name, $this->ignoreGetProperties ) ) { return false; } $getterName = 'get' . \\ucfirst( $name ); return \\method_exists( $this, $getterName ); }\n\n    ### Response: Returns, if a property with the defined name exists for read access.\n\n@param  string $name       The name of the property.\n@param  string $getterName Returns the name of the associated get method, if method returns TRUE.\n@return boolean.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public MultiPartSpecBuilder controlName(String controlName) { Validate.notEmpty(controlName, \"Control name cannot be empty\"); this.controlName = controlName; this.isControlNameExplicit = true; return this; }\n\n    ### Response:", "ground_truth": "Specify the control name of this multi-part.\n\n@param controlName The control name to use. Default is file.\n@return An instance of MultiPartSpecBuilder", "predict": "Allows you to set or change the name of the control to be used in the Multi Part Form API request"}, {"ID": 261, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Source getAssociatedStylesheet() { int sz = m_stylesheets.size(); if (sz > 0) { Source source = (Source) m_stylesheets.elementAt(sz-1); return source; } else return null; }\n\n    ### Response: Return the last stylesheet found that match the constraints.\n\n@return Source object that references the last stylesheet reference\nthat matches the constraints..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public MultiPartSpecBuilder header(String name, String value) { Validate.notEmpty(name, \"Header name cannot be empty\"); Validate.notEmpty(value, \"Header value cannot be empty\"); // Replace previous header if exists final Set<String> headerNames = headers.keySet(); final String trimmedName = name.trim(); for (String headerName : headerNames) { if (headerName.equalsIgnoreCase(trimmedName)) { headers.remove(headerName); } } // Put the name header in the header list headers.put(name, value); return this; }\n\n    ### Response:", "ground_truth": "Add a header to this multipart specification.\n\n@param name The name of the header\n@param value The value of the header\n@return An instance of MultiPartSpecBuilder", "predict": "Override existing header names by passing header names with trimmed names and values to the header method to add values to the existing header names or to add new header names to the existing header values"}, {"ID": 262, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void visitTree(Simon simon, SimonVisitor visitor) throws IOException { visitor.visit(simon); for (Simon childSimon : simon.getChildren()) { visitTree(childSimon, visitor); } }\n\n    ### Response: Visit Simons recursively as a tree starting from the specified Simon.\n\n@param simon Parent simon\n@param visitor Visitor\n@throws IOException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void basic(String host, int port, String user, String pass) { builder.getClient().getCredentialsProvider().setCredentials( new AuthScope(host, port), new UsernamePasswordCredentials(user, pass) ); }\n\n    ### Response:", "ground_truth": "Set authentication credentials to be used for the given host and port.\n\n@param host\n@param port\n@param user\n@param pass", "predict": "Initiates a basic request to the given host and port using the given username and password."}, {"ID": 263, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def newNode(name): \"\"\"Create a new Node \"\"\" ret = libxml2mod.xmlNewNode(name) if ret is None:raise treeError('xmlNewNode() failed') return xmlNode(_obj=ret)\n\n    ### Response: Create a new Node.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void ntlm(String host, int port, String user, String pass, String workstation, String domain) { builder.getClient().getCredentialsProvider().setCredentials( new AuthScope(host, port), new NTCredentials(user, pass, workstation, domain) ); }\n\n    ### Response:", "ground_truth": "Set NTLM authentication credentials to be used for the given host and port.\n\n@param host\n@param port\n@param user\n@param pass\n@param workstation\n@param domain", "predict": "Initiates the Negotiate Authentication Process by passing credentials to the NTLM Client Library of the Builder Class to gain access to the given host and port."}, {"ID": 264, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function setHeader() { foreach (getallheaders() as $k => $v) { $this->log->debug(\"[ HEADER Params ]\" . $k . \": \" . $v, []); $this->header->$k = $this->setSecurityLevel($v); $this->parameters[\"header\"][$k] = $this->setSecurityLevel($v); } }\n\n    ### Response: Set Header Info.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Headers headers(Header header, Header... additionalHeaders) { notNull(header, \"Header\"); final List<Header> headerList = new LinkedList<Header>(); headerList.add(header); if (additionalHeaders != null) { Collections.addAll(headerList, additionalHeaders); } return new Headers(headerList); }\n\n    ### Response:", "ground_truth": "An alternative way to create a Headers object from the constructor.\n\n@param header            The header to be included\n@param additionalHeaders Additional headers to be included (optional)\n@return A new headers object containing the specified headers", "predict": "Get and convert header information to appropriate objects"}, {"ID": 265, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getTitle($language = null) { $fallbackLanguage = key($this->titles); if ($language === null) { $language = $fallbackLanguage; } if (!empty($this->titles[$language])) { return $this->titles[$language]; } if (!empty($this->titles[$fallbackLanguage])) { return $this->titles[$fallbackLanguage]; } $title = false; try { $defaultUrl = $this->getDefaultUrl(); if ($defaultUrl) { $title = $defaultUrl->getHostname(); } } catch (\\Exception $e) { } if (!$title) { return '(No title)'; } return $title; }\n\n    ### Response: Return siteroot title.\n\n@param string $language\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void reset() { mockMvcFactory = null; config = null; basePath = \"/\"; resultHandlers.clear(); requestPostProcessors.clear(); responseSpecification = null; requestSpecification = null; authentication = null; }\n\n    ### Response:", "ground_truth": "Reset all static configurations to their default values.", "predict": "Reset MockMVC configuration objects to their default values."}, {"ID": 266, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function createUserProviders($config, ContainerBuilder $container) { $providerIds = []; foreach ($config['providers'] as $name => $provider) { $id = $this->createUserDaoProvider($name, $provider, $container); $providerIds[str_replace('-', '_', $name)] = $id; } return $providerIds; }\n\n    ### Response: Parses user providers and returns an array of their ids.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ResponseBuilder setHeader(String name, String value) { notNull(name, \"Header name\"); notNull(value, \"Header value\"); List<Header> newHeaders = new ArrayList<Header>(restAssuredResponse.headers().asList()); newHeaders.add(new Header(name, value)); restAssuredResponse.setResponseHeaders(new Headers(newHeaders)); if (trim(name).equalsIgnoreCase(CONTENT_TYPE)) { restAssuredResponse.setContentType(value); } return this; }\n\n    ### Response:", "ground_truth": "Set a specific header\n\n@return The builder", "predict": "Sets header values and returns the ResponseBuilder"}, {"ID": 267, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void parseRequestSmugglingProtection(Map<Object, Object> props) { // PK53193 - allow this to be disabled Object value = props.get(HttpConfigConstants.PROPNAME_ENABLE_SMUGGLING_PROTECTION); if (null != value) { this.bEnableSmugglingProtection = convertBoolean(value); if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) { Tr.debug(tc, \"Config: request smuggling protection is \" + this.bEnableSmugglingProtection); } } }\n\n    ### Response: Check whether or not the request smuggling protection has been changed.\n\n@param props.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Response build() { final int statusCode = restAssuredResponse.statusCode(); if (statusCode < 100 || statusCode >= 600) { throw new IllegalArgumentException(format(\"Status code must be greater than 100 and less than 600, was %d.\", statusCode)); } if (StringUtils.isBlank(restAssuredResponse.statusLine())) { restAssuredResponse.setStatusLine(restAssuredResponse.statusCode()); } restAssuredResponse.setRpr(new ResponseParserRegistrar()); return restAssuredResponse; }\n\n    ### Response:", "ground_truth": "Build the actual response\n\n@return The response object", "predict": "Parses the status code of the HTTP response, and generates appropriate error if the code does not fit into the specified range of 100 to 600, or if the status code cannot be retrieved from the status line of the HTTP response."}, {"ID": 268, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function option(Model $model, $key, $default = null) { if (! method_exists($model, 'searchableOptions')) { return $default; } $options = $model->searchableOptions() ?: []; return array_get($options, $key, $default); }\n\n    ### Response: Get the model specific option value or a default.\n\n@param \\Illuminate\\Database\\Eloquent\\Model $model\n@param string $key\n@param mixed $default\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DetailedCookieMatcher value(Matcher<? super String> valueMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"value\", valueMatcher))); }\n\n    ### Response:", "ground_truth": "Verifies whether value of cookie satisfies specified matcher.\n@param valueMatcher value assertion\n@return A {@link DetailedCookieMatcher} instance with and-composed value property assertion", "predict": "Matches objects that have the \"value\" property that matches the given valueMatcher."}, {"ID": 269, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (nm *NamedMutex) TryLock(name string) bool { nm.localMutex.Lock() mc, ok := nm.mutexMap[name] if !ok { mc = make(chan struct{}, 1) nm.mutexMap[name] = mc } nm.localMutex.Unlock() select { case mc <- struct{}{}: return true default: return false } }\n\n    ### Response: // TryLock tries to acquires the lock returning true on success.\n// On the first lock attempt a new channel is automatically created..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DetailedCookieMatcher comment(Matcher<? super String> commentMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"comment\", commentMatcher))); }\n\n    ### Response:", "ground_truth": "Verifies whether comment of cookie satisfies specified matcher.\n@param commentMatcher comment assertion\n@return A {@link DetailedCookieMatcher} instance with and-composed comment property assertion", "predict": "// The DetailedCookieMatcher provides details about the matching behavior for the given cookies by inspecting the contents of the \"comment\" property of the given objects"}, {"ID": 270, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected boolean isLoggingIn(final Request request, final Response response) { return this.isInterceptingLogin() && this.getLoginPath().equals(request.getResourceRef().getRemainingPart(false, false)) && Method.POST.equals(request.getMethod()); }\n\n    ### Response: Indicates if the request is an attempt to log in and should be intercepted.\n\n@param request\nThe current request.\n@param response\nThe current response.\n@return True if the request is an attempt to log in and should be intercepted..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DetailedCookieMatcher expiryDate(Matcher<? super Date> expiryDateMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"expiryDate\", expiryDateMatcher))); }\n\n    ### Response:", "ground_truth": "Verifies whether expiry date of cookie satisfies specified matcher.\n@param expiryDateMatcher expiry date assertion\n@return A {@link DetailedCookieMatcher} instance with and-composed expiry date property assertion", "predict": "Matches a cookie that has an \"expiryDate\" property with the given matcher."}, {"ID": 271, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public com.google.api.ads.admanager.axis.v201808.DateTime getLicenseWindowStartDateTime() { return licenseWindowStartDateTime; }\n\n    ### Response: Gets the licenseWindowStartDateTime value for this SetTopBoxCreative.\n\n@return licenseWindowStartDateTime   * The date and time that this creative can begin serving from\na local cable video-on-demand\nserver. This attribute is optional..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DetailedCookieMatcher domain(Matcher<? super String> domainMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"domain\", domainMatcher))); }\n\n    ### Response:", "ground_truth": "Verifies whether domain of cookie satisfies specified matcher.\n@param domainMatcher assertion for domain property\n@return A {@link DetailedCookieMatcher} instance with and-composed domain property assertion", "predict": "Domain filter for matching cookies to creative Domain Domain filter for matching cookies to creative Domain filter for matching cookies to creative Domain filter for matching cookies to creative Domain filter for matching cookies to creative Domain filter for matching cookies to creative Domain filter for matching cookies to creative Domain filter for matching cookies to creative Domain filter for matching cookies to creative Domain filter for matching cookies to creative Domain filter for matching cookies to creative Domain filter for matching cookies to creative Domain filter for matching cookies to creative Domain filter for matching cookies to creative Domain filter for matching cookies to creative Domain filter for matching cookies to creative Domain filter for matching cookies to creative Domain filter for matching cookies to creative Domain filter for matching cookies to creative Domain filter for matching cookies to creative Domain filter for matching cookies to creative Domain filter for matching cookies to creative Domain filter for matching cookies to creative Domain filter for matching cookies to creative Domain filter for matching cookies to creative Domain filter for matching cookies to creative Domain filter for matching cookies to cre"}, {"ID": 272, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final public function execute($input, $output) { $action = $this->action; $group = static::getName(); if ($this->isDisabled($action)) { $output->liteError(\\sprintf(\"Sorry, The command '%s' is invalid in the group '%s'!\", $action, $group)); return -1; } $method = $this->actionSuffix ? $action . \\ucfirst($this->actionSuffix) : $action; // the action method exists and only allow access public method. if (\\method_exists($this, $method) && (($rfm = new \\ReflectionMethod($this, $method)) && $rfm->isPublic())) { // before if (\\method_exists($this, $before = 'before' . \\ucfirst($action))) { $this->$before($input, $output); } // run action $result = $this->$method($input, $output); // after if (\\method_exists($this, $after = 'after' . \\ucfirst($action))) { $this->$after($input, $output); } return $result; } // if you defined the method '$this->notFoundCallback' , will call it if (($notFoundCallback = $this->notFoundCallback) && \\method_exists($this, $notFoundCallback)) { $result = $this->{$notFoundCallback}($action); } else { $result = -1; $output->liteError(\"Sorry, The command '$action' not exist of the group '{$group}'!\"); // find similar command names $similar = Helper::findSimilar($action, $this->getAllCommandMethods(null, true)); if ($similar) { $output->write(sprintf(\"\\nMaybe what you mean is:\\n <info>%s</info>\", \\implode(', ', $similar))); } else { $this->showCommandList(); } } return $result; }\n\n    ### Response: Run command action in the group\n\n@param  Input  $input\n@param  Output $output\n@return mixed\n@throws \\ReflectionException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DetailedCookieMatcher path(Matcher<? super String> pathMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"path\", pathMatcher))); }\n\n    ### Response:", "ground_truth": "Verifies whether path of cookie satisfies specified matcher.\n@param pathMatcher assertion for path property\n@return A {@link DetailedCookieMatcher} instance with and-composed path property assertion", "predict": "Match cookies to given path string"}, {"ID": 273, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setContentEncoding(String contentEncoding) throws InvalidArgumentException { if (Strings.isNullOrEmpty(contentEncoding)) { throw new InvalidArgumentException(\"empty content encoding\"); } this.contentEncoding = contentEncoding; }\n\n    ### Response: Sets content encoding..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DetailedCookieMatcher secured(Matcher<? super Boolean> securedMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"secured\", securedMatcher))); }\n\n    ### Response:", "ground_truth": "Verifies whether secured property of cookie satisfies specified matcher.\n@param securedMatcher assertion for secured property\n@return A {@link DetailedCookieMatcher} instance with and-composed secured property assertion", "predict": "Matches cookies that are secured.."}, {"ID": 274, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def load(path=None, root=None, db=None, load_user=True): \"Load all of the config files. \" config = load_config(path, load_user=load_user) remotes = load_remotes(path, load_user=load_user) # The external file overwrites the main config if remotes: if not 'remotes' in config: config.remotes = AttrDict() for k, v in remotes.remotes.items(): config.remotes[k] = v accounts = load_accounts(path, load_user=load_user) # The external file overwrites the main config if accounts: if not 'accounts' in config: config.accounts = AttrDict() for k, v in accounts.accounts.items(): config.accounts[k] = v update_config(config) if root: config.library.filesystem_root = root if db: config.library.database = db return config\n\n    ### Response: Load all of the config files..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DetailedCookieMatcher httpOnly(Matcher<? super Boolean> httpOnlyMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"httpOnly\", httpOnlyMatcher))); }\n\n    ### Response:", "ground_truth": "", "predict": "Matches HTTP-only cookies according to the specified regular expression and predicate"}, {"ID": 275, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void warn(String s) { if (isEnabled() && isWarnEnabled()) { dispatchLogMessage(new LogEvent(this, LogEvent.WARN_TYPE, s)); } }\n\n    ### Response: Simple method for logging a single warning message..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DetailedCookieMatcher version(Matcher<? super Integer> versionMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"version\", versionMatcher))); }\n\n    ### Response:", "ground_truth": "Verifies whether version of cookie satisfies specified matcher.\n@param versionMatcher assertion for version property\n@return A {@link DetailedCookieMatcher} instance with and-composed version property assertion", "predict": "Matches a given HTTP Request to the given version of the server"}, {"ID": 276, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def vehicleTypes2flt(outSTRM, vtIDm): \"\"\" Currently, rather a stub than an implementation. Writes the vehicle ids stored in the given \"vtIDm\" map formatted as a .flt file readable by PHEM. The following may be a matter of changes: - A default map is assigned to all vehicle types with the same probability \"\"\" for q in sorted(vtIDm._m): print(\"%s,%s,%s\" % (vtIDm.g(q), \"<VEHDIR>\\PC\\PC_%s.GEN\" % q, 1.), file=outSTRM)\n\n    ### Response: Currently, rather a stub than an implementation. Writes the vehicle ids stored\n    in the given \"vtIDm\" map formatted as a .flt file readable by PHEM.\n\n    The following may be a matter of changes:\n    - A default map is assigned to all vehicle types with the same probability.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DetailedCookieMatcher maxAge(Matcher<? super Integer> maxAgeMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"maxAge\", maxAgeMatcher))); }\n\n    ### Response:", "ground_truth": "Verifies whether max age of cookie satisfies specified matcher.\n@param maxAgeMatcher assertion for max age property\n@return A {@link DetailedCookieMatcher} instance with and-composed max age property assertion", "predict": "The DetailedCookieMatcher provides details about the given cookie by verifying that\n    the given cookie satisfies the given conditions of being of age and that\n    the given cookie has been stored for that age. It uses the given MaxAge Matcher to\n    determine the age of the given cookie and checks that the given cookie satisfies\n    the given conditions of being of age and that the given cookie has been stored\n    for that age."}, {"ID": 277, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _warmup(self, num_updates): \"\"\" Returns linearly increasing fraction of base_lr. \"\"\" assert self.base_lr is not None if not self.warmup: return self.base_lr fraction = (num_updates + 1) * self.base_lr / (self.warmup + 1) if num_updates > self.last_warmup_log and num_updates % self.log_warmup_every_t == 0: self.last_warmup_log = num_updates logger.info(\"Learning rate warmup: %3.0f%%\", fraction / self.base_lr * 100.0) return fraction\n\n    ### Response: Returns linearly increasing fraction of base_lr..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ResponseSpecBuilder expectHeader(String headerName, Matcher<String> expectedValueMatcher) { spec.header(headerName, expectedValueMatcher); return this; }\n\n    ### Response:", "ground_truth": "Expect that a response header matches the supplied header name and hamcrest matcher.\n\n@param headerName           The name of the expected header\n@param expectedValueMatcher The Hamcrest matcher that must conform to the value\n@return The builder", "predict": "Expect header to contain the given value of headerName and Matcher to verify its contents"}, {"ID": 278, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_value_ddist(self, attr_name, attr_value): \"\"\" Returns the class value probability distribution of the given attribute value. \"\"\" assert not self.tree.data.is_continuous_class, \\ \"Discrete distributions are only maintained for \" + \\ \"discrete class types.\" ddist = DDist() cls_counts = self._attr_class_value_counts[attr_name][attr_value] for cls_value, cls_count in iteritems(cls_counts): ddist.add(cls_value, count=cls_count) return ddist\n\n    ### Response: Returns the class value probability distribution of the given\n        attribute value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ResponseSpecBuilder expectHeader(String headerName, String expectedValue) { spec.header(headerName, expectedValue); return this; }\n\n    ### Response:", "ground_truth": "Expect that a response header matches the supplied name and value.\n\n@param headerName    The name of the expected header\n@param expectedValue The value of the expected header\n@return The builder", "predict": "Expect given header to have the given value"}, {"ID": 279, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function addRawFromAssocArray($lines, $indentation = 0) { foreach ($lines as $key => $value) { if (is_array($value)) { $this->addLine($key . ': [', array(\"indentation\"=>$indentation)); $this->addRawFromAssocArray($value, $indentation + 1); $this->addLine(']', array(\"indentation\"=>$indentation)); } else { $this->addLine($key . ': ' . $value, array(\"indentation\"=>$indentation)); } } }\n\n    ### Response: Helper method to add an associative array to the output buffer.\n\n@param array $lines The lines to add\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ResponseSpecBuilder expectCookie(String cookieName, String expectedValue) { spec.cookie(cookieName, expectedValue); return this; }\n\n    ### Response:", "ground_truth": "Expect that a response cookie matches the supplied name and value.\n\n@param cookieName    The name of the expected cookie\n@param expectedValue The value of the expected cookie\n@return The builder", "predict": "Expect that the given cookie has the given value."}, {"ID": 280, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_confused_learning_objective_ids(self, question_id): \"\"\"get confused objective ids available for the question\"\"\" response = self.get_response(question_id) if response.is_answered(): item = self._get_item(response.get_item_id()) return item.get_confused_learning_objective_ids_for_response(response) raise errors.IllegalState()\n\n    ### Response: get confused objective ids available for the question.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ProxySpecification withHost(String host) { return new ProxySpecification(host, port, scheme, username, password); }\n\n    ### Response:", "ground_truth": "Specify the hostname of the proxy.\n\n@param host The hostname of the proxy.\n@return A new ProxySpecification instance", "predict": "With this method, you can configure the host, port, scheme and username and password of the proxy server to connect to the given url"}, {"ID": 281, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *cookies) String(key string) (string, error) { ck, err := c.req.Cookie(key) if err != nil { return \"\", err } return ck.Value, nil }\n\n    ### Response: // String get cookie as string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public JsonPathConfig numberReturnType(NumberReturnType numberReturnType) { return new JsonPathConfig(numberReturnType, defaultParserType, gsonObjectMapperFactory, jackson1ObjectMapperFactory, jackson2ObjectMapperFactory, johnzonObjectMapperFactory, defaultDeserializer, charset); }\n\n    ### Response:", "ground_truth": "Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers.\n\n@param numberReturnType The choice.\n@return A new instance of JsonPathConfig with the given configuration", "predict": "// Allows to customize how objects are returned in the response for given NumberReturnType."}, {"ID": 282, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def to_h { code: code, app_code: app_code, message: message, field_errors: field_errors.map(&:to_h), debug_info: debug_info.to_h } end\n\n    ### Response: Return the error represented in Hash form\n\n @return [Hash] The error as a hash.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public JsonPathConfig defaultParserType(JsonParserType defaultParserType) { return new JsonPathConfig(numberReturnType, defaultParserType, gsonObjectMapperFactory, jackson1ObjectMapperFactory, jackson2ObjectMapperFactory, johnzonObjectMapperFactory, defaultDeserializer, charset); }\n\n    ### Response:", "ground_truth": "Creates an json path configuration that uses the specified parser type as default.\n\n@param defaultParserType The parser type to use. If null then classpath scanning will be used.", "predict": "Defines behavior of the JsonPathConfig object for the given JsonParserType parameter\n\n JsonPathConfig Object to configure behavior of the JsonPath object for the given JsonParserType parameter"}, {"ID": 283, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function askConfirmation(args) { let userAnswer = 'no-answer'; const merged = merge(DEFAULTS.CONFIRMATIONS, args); inquirer.prompt([ { type: DEFAULTS.QUESTION_TYPES.CONFIRM, name: 'choice', message: merged.question, default: merged.defaultValue } ]).then((answer) => { userAnswer = answer.choice; }); while (userAnswer === 'no-answer') { wait(100); } return userAnswer; }\n\n    ### Response: Asks the user for confirmation.\n@param args {object} keys: question, defaultValue\n@return {boolean} the user's answer..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public LogConfig defaultStream(PrintStream printStream) { return new LogConfig(printStream, true, logDetailIfValidationFails, urlEncodeRequestUri, true); }\n\n    ### Response:", "ground_truth": "Specify a new default stream to the print to.\n\n@param printStream The stream\n@return A new LogConfig instance", "predict": "Allows for configuration of log output for the given PrintStream instance.."}, {"ID": 284, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (b *BigIP) ModifyTcpProfile(name string, config *TcpProfile) error { return b.put(config, uriLtm, uriProfile, uriTcp, name) }\n\n    ### Response: // ModifyTcpProfile allows you to change any attribute of a tcp profile.\n// Fields that can be modified are referenced in the TcpProfile struct..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public LogConfig enableLoggingOfRequestAndResponseIfValidationFails(LogDetail logDetail) { return new LogConfig(defaultPrintStream, prettyPrintingEnabled, logDetail, urlEncodeRequestUri, true); }\n\n    ### Response:", "ground_truth": "Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail\n\n@param logDetail The log detail to show in the log\n@return A new LogConfig instance", "predict": "// This method enables logging of request and response if validation\n// of the given request fails, while providing options to customize how\n// the logs should look and feel to the client application."}, {"ID": 285, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def GetFeedMapping(client, feed, placeholder_type): \"\"\"Gets the Feed Mapping for a given Feed. Args: client: an AdWordsClient instance. feed: the Feed we are retrieving the Feed Mapping for. placeholder_type: the Placeholder Type we are looking for. Returns: A dictionary containing the Feed Mapping. \"\"\" feed_mapping_service = client.GetService('FeedMappingService', 'v201809') attribute_mappings = {} more_pages = True selector = { 'fields': ['FeedMappingId', 'AttributeFieldMappings'], 'predicates': [ { 'field': 'FeedId', 'operator': 'EQUALS', 'values': [feed['id']] }, { 'field': 'PlaceholderType', 'operator': 'EQUALS', 'values': [placeholder_type] } ], 'paging': { 'startIndex': 0, 'numberResults': PAGE_SIZE } } while more_pages: page = feed_mapping_service.get(selector) if 'entries' in page: # Normally, a feed attribute is mapped only to one field. However, you may # map it to more than one field if needed. for feed_mapping in page['entries']: for attribute_mapping in feed_mapping['attributeFieldMappings']: # Since attribute mappings can have multiple values for each key, # we use a list to store the values. if attribute_mapping['feedAttributeId'] in attribute_mappings: attribute_mappings[attribute_mapping['feedAttributeId']].append( attribute_mapping['fieldId']) else: attribute_mappings[attribute_mapping['feedAttributeId']] = [ attribute_mapping['fieldId']] selector['paging']['startIndex'] += PAGE_SIZE more_pages = selector['paging']['startIndex'] < int(page['totalNumEntries']) return attribute_mappings\n\n    ### Response: Gets the Feed Mapping for a given Feed.\n\n  Args:\n    client: an AdWordsClient instance.\n    feed: the Feed we are retrieving the Feed Mapping for.\n    placeholder_type: the Placeholder Type we are looking for.\n  Returns:\n    A dictionary containing the Feed Mapping..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static HttpRequestBase createHttpRequest(URI uri, String httpMethod, boolean hasBody) { String method = notNull(upperCase(trimToNull(httpMethod)), \"Http method\"); Class<? extends HttpRequestBase> type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE.get(method); final HttpRequestBase httpRequest; // If we are sending HTTP method that does not allow body (like GET) then HTTP library prevents // us from including it, however we chose to allow deviations from standard if user wants so, // so it needs custom handling - hence the second condition below. // Otherwise we should use standard implementation found in the map if (type == null || (!(type.isInstance(HttpEntityEnclosingRequest.class)) && hasBody)) { httpRequest = new CustomHttpMethod(method, uri); } else { try { httpRequest = type.newInstance(); } catch (Exception e) { throw new RuntimeException(e); } httpRequest.setURI(uri); } return httpRequest; }\n\n    ### Response:", "ground_truth": "Get the HttpRequest class that represents this request type.\n\n@return a non-abstract class that implements {@link HttpRequest}", "predict": "Creates an HTTP request with specified method, uri and optionally body."}, {"ID": 286, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function withNotModified() { $new = $this->withStatus(304); $new->_createStream(); $remove = [ 'Allow', 'Content-Encoding', 'Content-Language', 'Content-Length', 'Content-MD5', 'Content-Type', 'Last-Modified' ]; foreach ($remove as $header) { $new = $new->withoutHeader($header); } return $new; }\n\n    ### Response: Create a new instance as 'not modified'\n\nThis will remove any body contents set the status code\nto \"304\" and removing headers that describe\na response body.\n\n@return static.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public MultiPartConfig defaultBoundary(String defaultBoundary) { return new MultiPartConfig(defaultControlName, defaultFileName, defaultSubtype, defaultBoundary, defaultCharset, true); }\n\n    ### Response:", "ground_truth": "Specify an explicit default multipart boundary to use when sending multi-part data.\n\n@param defaultBoundary The boundary to set\n@return An updated MultiPartConfig", "predict": "Creates a new MultiPartConfig instance with the given values\n\n// This method creates a new MultiPartConfig instance with the given values\n\n// It sets the default control name to the given string\n// It sets the default file name to the given string\n// It sets the default subtype to the given string\n// It sets the default boundary to the given string\n// It sets the default charset to the given string\n// It sets the default flag to true\n\n// It returns the new instance"}, {"ID": 287, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function get_wikis_by_courses($courseids = array()) { $returnedwikis = array(); $warnings = array(); $params = self::validate_parameters(self::get_wikis_by_courses_parameters(), array('courseids' => $courseids)); $mycourses = array(); if (empty($params['courseids'])) { $mycourses = enrol_get_my_courses(); $params['courseids'] = array_keys($mycourses); } // Ensure there are courseids to loop through. if (!empty($params['courseids'])) { list($courses, $warnings) = external_util::validate_courses($params['courseids'], $mycourses); // Get the wikis in this course, this function checks users visibility permissions. // We can avoid then additional validate_context calls. $wikis = get_all_instances_in_courses('wiki', $courses); foreach ($wikis as $wiki) { $context = context_module::instance($wiki->coursemodule); // Entry to return. $module = array(); // First, we return information that any user can see in (or can deduce from) the web interface. $module['id'] = $wiki->id; $module['coursemodule'] = $wiki->coursemodule; $module['course'] = $wiki->course; $module['name'] = external_format_string($wiki->name, $context->id); $viewablefields = []; if (has_capability('mod/wiki:viewpage', $context)) { list($module['intro'], $module['introformat']) = external_format_text($wiki->intro, $wiki->introformat, $context->id, 'mod_wiki', 'intro', null); $module['introfiles'] = external_util::get_area_files($context->id, 'mod_wiki', 'intro', false, false); $viewablefields = array('firstpagetitle', 'wikimode', 'defaultformat', 'forceformat', 'editbegin', 'editend', 'section', 'visible', 'groupmode', 'groupingid'); } // Check additional permissions for returning optional private settings. if (has_capability('moodle/course:manageactivities', $context)) { $additionalfields = array('timecreated', 'timemodified'); $viewablefields = array_merge($viewablefields, $additionalfields); } foreach ($viewablefields as $field) { $module[$field] = $wiki->{$field}; } // Check if user can add new pages. $module['cancreatepages'] = wiki_can_create_pages($context); $returnedwikis[] = $module; } } $result = array(); $result['wikis'] = $returnedwikis; $result['warnings'] = $warnings; return $result; }\n\n    ### Response: Returns a list of wikis in a provided list of courses,\nif no list is provided all wikis that the user can view will be returned.\n\n@param array $courseids The courses IDs.\n@return array Containing a list of warnings and a list of wikis.\n@since Moodle 3.1.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public MockMvcRequestSpecBuilder addAttribute(String attributeName, Object attributeValue) { spec.attribute(attributeName, attributeValue); return this; }\n\n    ### Response:", "ground_truth": "Add request attribute\n\n@param attributeName  The attribute name\n@param attributeValue The attribute value\n@return The request specification builder", "predict": "Allows you to add attributes to the MockMVC request objects during test setup to simplify the test data structure for MockMVC tests."}, {"ID": 288, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function exceptionHandler(Exception $ex) { return $this->errorHandler(E_USER_ERROR, $ex->getMessage(), $ex->getFile(), $ex->getLine()); }\n\n    ### Response: Custom exception handler.\n\n@param   \\Exception      $ex.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public MockMvcRequestSpecBuilder addHeader(String headerName, String headerValue) { spec.header(headerName, headerValue); return this; }\n\n    ### Response:", "ground_truth": "Add a header to be sent with the request\n\n@param headerName  The header name\n@param headerValue The header value\n@return The request specification builder", "predict": "Add header to Mock MVC request specification."}, {"ID": 289, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function removeItemByIndex($index): ContainerInterface { if ($this->hasItem($index)) { $this->items[$index] = null; //prevente unset item. unset($this->items[$index]); //unset only index, not the item. } return $this; }\n\n    ### Response: Removes the child from the children list for the given index.\n\n@param  mixed $index\n@return \\HOM\\ContainerInterface.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public MockMvcRequestSpecBuilder addMultiPart(String controlName, String contentBody, String mimeType) { spec.multiPart(controlName, mimeType); return this; }\n\n    ### Response:", "ground_truth": "Specify a string to send to the server using multi-part form data with a specific mime-type.\n\n@param controlName Defines the control name of the body part. In HTML this is the attribute name of the input tag.\n@param contentBody The string to send\n@param mimeType    The mime-type\n@return The request specification", "predict": "Allows you to add a Multi Part Form Control to the Mock MVC request specification with given names and mimeType"}, {"ID": 290, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function send() { $settings = Application::getSettings()->mail; $mailTransport = new Transport( @$settings->smtp->host ? : 'localhost', @$settings->smtp->port ? : 25, @$settings->smtp->timeout ? : 15 ); $mailTransport->setUser( @$settings->smtp->user, @$settings->smtp->password ); $mailTransport->addMessage($this); $mailTransport->send(); }\n\n    ### Response: Sends the current mail message..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public MockMvcRequestSpecBuilder addResultHandlers(ResultHandler resultHandler, ResultHandler... additionalResultHandlers) { spec.resultHandlers(resultHandler, additionalResultHandlers); return this; }\n\n    ### Response:", "ground_truth": "Add a result handler\n\n@param resultHandler The result handler\n@return MockMvcRequestSpecBuilder", "predict": "Allows you to add custom behavior for the MockMVC test when the results of the test are retrieved.."}, {"ID": 291, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static HtmlTree MAIN() { HtmlTree htmltree = new HtmlTree(HtmlTag.MAIN); htmltree.setRole(Role.MAIN); return htmltree; }\n\n    ### Response: Generates a MAIN tag with role attribute.\n\n@return an HtmlTree object for the MAIN tag.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> HttpClientConfig setParam(String parameterName, T parameterValue) { notNull(parameterName, \"Parameter name\"); final Map<String, Object> newParams = new HashMap<String, Object>(httpClientParams); newParams.put(parameterName, parameterValue); return new HttpClientConfig(httpClientFactory, newParams, httpMultipartMode, shouldReuseHttpClientInstance, NO_HTTP_CLIENT, true); }\n\n    ### Response:", "ground_truth": "            The parameter type\n@return An updated HttpClientConfig", "predict": "Sets parameter to the given values and returns an HTTP Client Config Object with new values and configurations."}, {"ID": 292, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public OptionsBuilder option(String option, Object value) { this.options.setOption(option, value); return this; }\n\n    ### Response: Sets a custom or unlisted option.\n\n@param option\nname.\n@param value\nfor given option.\n@return this instance..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpClientConfig addParams(Map<String, ?> httpClientParams) { notNull(httpClientParams, \"httpClientParams\"); final Map<String, Object> newParams = new HashMap<String, Object>(this.httpClientParams); newParams.putAll(httpClientParams); return new HttpClientConfig(httpClientFactory, newParams, httpMultipartMode, shouldReuseHttpClientInstance, NO_HTTP_CLIENT, true); }\n\n    ### Response:", "ground_truth": "", "predict": "Allows configuration of HTTP Client Parameters prior to its instantiation to customize its behavior for given HTTP request..\n\n/**\n * Allows configuration of HTTP Client Parameters prior to its instantiation to customize its behavior for given HTTP request.<br>\n * Allows configuration of HTTP Client Parameters prior to its instantiation to customize its behavior for given HTTP request.<br>\n * Allows configuration of HTTP Client Parameters prior to its instantiation to customize its behavior for given HTTP request.<br>\n * Allows configuration of HTTP Client Parameters prior to its instantiation to customize its behavior for given HTTP request.<br>\n * Allows configuration of HTTP Client Parameters prior to its instantiation to customize its behavior for given HTTP request.<br>\n * Allows configuration of HTTP Client Parameters prior to its instantiation to customize its behavior for given HTTP request.<br>\n * Allows configuration of HTTP Client Parameters prior to its instantiation to customize its behavior for given HTTP request.<br>\n"}, {"ID": 293, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setPrecomputeBeta($beta) { if (!is_int($beta) || $beta < 1 || $beta > 10) { throw new Exception('Invalid beta specified. An integer between 1 and 10 is required.'); } $this->precomputeBeta = $beta; }\n\n    ### Response: Set the beta - early expiration scale.\n\nThis affects the probability of early expiration.\n\nDefault is 4, Set to any value from 1 to 10 to increase the chance of early expiration.\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpClientConfig httpClientFactory(HttpClientFactory httpClientFactory) { return new HttpClientConfig(httpClientFactory, httpClientParams, httpMultipartMode, shouldReuseHttpClientInstance, NO_HTTP_CLIENT, true); }\n\n    ### Response:", "ground_truth": "", "predict": "Create an instance of HttpClientFactory and configure its parameters to customize its behavior\n\nHttpClientParams contains configuration parameters to customize its behavior\n\nHttpMultipartMode indicates if HttpClientFactory should allow sending multi-part request bodies or not\n\nShouldReuseHttpRequestInstance indicates if the HttpClientFactory should reuse its instance for sending multiple request or not\n\nHttpRequestFactory provides interfaces for creating new HTTP client objects to send HTTP requests to the server\n\nHttpClientFactory provides interfaces for creating new HTTP client objects to send HTTP requests to the server\n\nHttpRequestFactory provides interfaces for creating new HTTP client objects to send HTTP requests to the server\n\nHttpRequestFactory provides interfaces for creating new HTTP client objects to send HTTP requests to the server\n\nHttpRequestFactory provides interfaces for creating new HTTP client objects to send HTTP requests to the server\n\nHttpRequestFactory provides interfaces for creating new HTTP client objects to send HTTP requests to the server\n\nHttpRequestFactory provides interfaces for creating new HTTP client objects to send HTTP requests to the server\n\nHttpRequestFactory provides interfaces for creating new"}, {"ID": 294, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def check(&block) sync return false unless @nodes.check entries = 0 res = true @progressmeter.start('Checking index structure', @size) do |pm| res = @root.check do |k, v| pm.update(entries += 1) block_given? ? yield(k, v) : true end end unless entries == @size PEROBS.log.error \"The BTree size (#{@size}) and the number of \" + \"found entries (#{entries}) don't match\" return false end res end\n\n    ### Response: Check if the tree file contains any errors.\n @return [Boolean] true if no erros were found, false otherwise.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpClientConfig httpMultipartMode(HttpMultipartMode httpMultipartMode) { return new HttpClientConfig(httpClientFactory, httpClientParams, httpMultipartMode, shouldReuseHttpClientInstance, httpClient, true); }\n\n    ### Response:", "ground_truth": "", "predict": "Allows you to configure HTTP Client behavior for upload and download of multi-part forms (HTML Form Data, MIME Form Data, MIME Part Mapping, MIME Parameter Encoding, Client Alignment)"}, {"ID": 295, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function delete($pinId, $commentId) { $requestOptions = ['commentId' => $commentId]; return $this->post(UrlBuilder::RESOURCE_COMMENT_DELETE_PIN, $requestOptions); }\n\n    ### Response: Delete a comment for a pin with current id.\n\n@param string $pinId\n@param int $commentId\n\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> T get(String path) { final JSONAssertion jsonAssertion = createJsonAssertion(path, params); final Object json = jsonParser.parseWith(createConfigurableJsonSlurper()); return (T) jsonAssertion.getResult(json, null); }\n\n    ### Response:", "ground_truth": "Get the result of an Object path expression as a boolean.\n\n@param path The Object path.\n@return The object matching the Object path. This may be any primitive type, a List or a Map.  A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "Get information corresponding to the given path and parameters"}, {"ID": 296, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def lower_ext(abspath): \"\"\"Convert file extension to lowercase. \"\"\" fname, ext = os.path.splitext(abspath) return fname + ext.lower()\n\n    ### Response: Convert file extension to lowercase..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int getInt(String path) { //The type returned from Groovy depends on the input, so we need to handle different numerical types. Object value = get(path); if (value instanceof Integer) { return (Integer) value; } else if (value instanceof Short) { return ((Short) value).intValue(); } else if (value instanceof Long) { return ((Long) value).intValue(); } else { return ObjectConverter.convertObjectTo(value, Integer.class); } }\n\n    ### Response:", "ground_truth": "Get the result of an Object path expression as an int.\n\n@param path The Object path.\n@return The int matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "The type returned from Groovy depends on the input, so we need to handle different numerical types. The function handles various numerical types and returns the appropriate int type corresponding to the given string path."}, {"ID": 297, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewWorker(config Config) (worker.Worker, error) { if err := config.Validate(); err != nil { return nil, errors.Trace(err) } w := &upgradeSeriesWorker{ Facade: config.FacadeFactory(config.Tag), facadeFactory: config.FacadeFactory, logger: config.Logger, service: config.Service, upgraderFactory: config.UpgraderFactory, machineStatus: model.UpgradeSeriesNotStarted, leadersPinned: false, } if err := catacomb.Invoke(catacomb.Plan{ Site: &w.catacomb, Work: w.loop, }); err != nil { return nil, errors.Trace(err) } return w, nil }\n\n    ### Response: // NewWorker creates, starts and returns a new upgrade-series worker based on\n// the input configuration..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public byte getByte(String path) { //The type returned from Groovy depends on the input, so we need to handle different numerical types. Object value = get(path); if (value instanceof Byte) { return (Byte) value; } else if (value instanceof Long) { return ((Long) value).byteValue(); } else if (value instanceof Integer) { return ((Integer) value).byteValue(); } else { return ObjectConverter.convertObjectTo(value, Byte.class); } }\n\n    ### Response:", "ground_truth": "Get the result of an Object path expression as a byte.\n\n@param path The Object path.\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "// This method reads the contents of the given path as a Byte object.."}, {"ID": 298, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_session(credentials, config): \"\"\"Gets requests session.\"\"\" session = requests.Session() session.verify = False auth_url = config.get(\"auth_url\") if auth_url: cookie = session.post( auth_url, data={ \"j_username\": credentials[0], \"j_password\": credentials[1], \"submit\": \"Log In\", \"rememberme\": \"true\", }, headers={\"Content-Type\": \"application/x-www-form-urlencoded\"}, ) if not cookie: raise Dump2PolarionException(\"Cookie was not retrieved from {}.\".format(auth_url)) else: # TODO: can be removed once basic auth is discontinued on prod session.auth = credentials return session\n\n    ### Response: Gets requests session..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public short getShort(String path) { //The type returned from Groovy depends on the input, so we need to handle different numerical types. Object value = get(path); if (value instanceof Short) { return (Short) value; } else if (value instanceof Long) { return ((Long) value).shortValue(); } else if (value instanceof Integer) { return ((Integer) value).shortValue(); } else { return ObjectConverter.convertObjectTo(value, Short.class); } }\n\n    ### Response:", "ground_truth": "Get the result of an Object path expression as a short.\n\n@param path The Object path.\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "The type returned from Groovy depends on the input, so we need to handle different numerical types. The method returns the given value converted to Short or converts the given path to Short and returns it if path does not exist or cannot be converted to Short."}, {"ID": 299, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def visit_CommandNode(node) debug_visit(node) @aliases_expanded ||= [] @command_node_args_stack ||= [] with_standard_streams do |stdin, stdout, stderr| args = process_ArgumentNodes(node.args) if !node.literal? && !@aliases_expanded.include?(node.command) && Aliases.instance.has_key?(node.command) _alias=Aliases.instance.fetch_alias(node.command) @suppress_events = true @command_node_args_stack << args ast = Parser.parse(_alias) @aliases_expanded.push(node.command) ast.accept(self) @aliases_expanded.pop @suppress_events = false else cmd2execute = variable_expand(node.command) final_args = (args + @command_node_args_stack).flatten.map(&:shellescape) expanded_args = final_args command = CommandFactory.build_command_for( world: world, command: cmd2execute, args: expanded_args, heredoc: (node.heredoc && node.heredoc.value), internally_evaluate: node.internally_evaluate?, line: @input) @stdin, @stdout, @stderr = stream_redirections_for(node) set_last_result @blk.call command, @stdin, @stdout, @stderr, pipeline_stack.empty? @command_node_args_stack.clear end end end\n\n    ### Response: VISITOR METHODS FOR AST TREE WALKING.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public float getFloat(String path) { final Object value = get(path); //Groovy will always return a Double for floating point values. if (value instanceof Double) { return ((Double) value).floatValue(); } else { return ObjectConverter.convertObjectTo(value, Float.class); } }\n\n    ### Response:", "ground_truth": "Get the result of an Object path expression as a float.\n\n@param path The Object path.\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "GENERIC READ FROM DATABASES.\n\n    def get_data_types_mapping():\n        \"\"\"Sets the mapping for various SQL data types to corresponding Groovy types.\"\"\"\n        mapping = { int: int, int_list: int_list, int_set: int_set, int_array: int_array, int_object: int_object, int_char: int_char, int_float: int_float, int_double: int_double, int_big_decimal: int_big_decimal, int_integer: int_integer, int_integer_list: int_integer_list, int_integer_set: int_integer_set, int_integer_array: int_integer_array, int_integer_object: int_integer_object, int_integer_char: int_integer_char, int_integer_float: int_integer_float, int_integer_double: int_integer_double, int_integer"}, {"ID": 300, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function numbers($link, $current, $reversed = false) { $r = ''; $range = floor(($this->max_items - 1) / 2); if (!$this->max_items) { $page_nums = range(1, $this->pages()); } else { $lower_limit = max($this->get - $range, 1); $upper_limit = min($this->pages(), $this->get + $range); $page_nums = range($lower_limit, $upper_limit); } if ($reversed) { $page_nums = array_reverse($page_nums); } foreach ($page_nums as $i) { if ($this->get == $i) { $r .= str_replace('{nr}', $i, $current); } else { $r .= str_replace('{nr}', $i, $link); } } return $r; }\n\n    ### Response: This shows an loop of 'numbers' with their appropriate link in custom html\n@param string $link The HTML to display a number with a link\n@param string $current The HTML to display a the current page number without a link\n@param string $reversed Optional Parameter, set to true if you want the numbers reversed (align to right for designs)\n@return string The Same HTML replaced the tags with the proper numbers and links.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public double getDouble(String path) { final Object value = get(path); if (value instanceof Double) { return (Double) value; } return ObjectConverter.convertObjectTo(value, Double.class); }\n\n    ### Response:", "ground_truth": "Get the result of an Object path expression as a double.\n\n@param path The Object path.\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "The method generates and returns a double value from the given path string."}, {"ID": 301, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *Server) ListenPacket() (net.PacketConn, error) { if QUIC { udpAddr, err := net.ResolveUDPAddr(\"udp\", s.Server.Addr) if err != nil { return nil, err } return net.ListenUDP(\"udp\", udpAddr) } return nil, nil }\n\n    ### Response: // ListenPacket creates udp connection for QUIC if it is enabled,.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public long getLong(String path) { //The type returned from Groovy depends on the input, so we need to handle different numerical types. Object value = get(path); if (value instanceof Long) { return (Long) value; } else if (value instanceof Short) { return ((Short) value).longValue(); } else if (value instanceof Integer) { return ((Integer) value).longValue(); } else { return ObjectConverter.convertObjectTo(value, Long.class); } }\n\n    ### Response:", "ground_truth": "Get the result of an Object path expression as a long.\n\n@param path The Object path.\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "// The method returns a specific type of numerical values, such as Long or int values"}, {"ID": 302, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private InputStream safeOpen(String file) { URL url = bundle.getEntry(file); if (url != null) { try { return url.openStream(); } catch (IOException e) { // if we get an IOException just return null for default page. } } return null; }\n\n    ### Response: Attempt to open the file in the bundle and return null if something goes wrong..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> List<T> getList(String path, Class<T> genericType) { if (genericType == null) { throw new IllegalArgumentException(\"Generic type cannot be null\"); } final List<T> original = get(path); final List<T> newList = new LinkedList<T>(); if (original != null) { for (T t : original) { T e; if (t instanceof Map && !genericType.isAssignableFrom(Map.class)) { // TODO Avoid double parsing String str = objectToString(t); //noinspection unchecked e = (T) jsonStringToObject(str, genericType); } else { e = ObjectConverter.convertObjectTo(t, genericType); } newList.add(e); } } return Collections.unmodifiableList(newList); }\n\n    ### Response:", "ground_truth": "Get the result of an Object path expression as a list.\n\n@param path        The Object path.\n@param genericType The generic list type\n@param          The type\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "Gets the contents of the given path as objects of given GenericType and populates into an immutable list"}, {"ID": 303, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def run_step(context): \"\"\"Executes dynamic python code. Context is a dictionary or dictionary-like. Context must contain key 'pycode' Will exec context['pycode'] as dynamically interpreted python statements. context is mandatory. When you execute the pipeline, it should look something like this: pipeline-runner [name here] 'pycode=print(1+1)'. \"\"\" logger.debug(\"started\") context.assert_key_has_value(key='pycode', caller=__name__) logger.debug(f\"Executing python string: {context['pycode']}\") locals_dictionary = locals() exec(context['pycode'], globals(), locals_dictionary) # It looks like this dance might be unnecessary in python 3.6 logger.debug(\"looking for context update in exec\") exec_context = locals_dictionary['context'] context.update(exec_context) logger.debug(\"exec output context merged with pipeline context\") logger.debug(\"done\")\n\n    ### Response: Executes dynamic python code.\n\n    Context is a dictionary or dictionary-like.\n    Context must contain key 'pycode'\n    Will exec context['pycode'] as dynamically interpreted python statements.\n\n    context is mandatory. When you execute the pipeline, it should look\n    something like this:\n        pipeline-runner [name here] 'pycode=print(1+1)'..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <K, V> Map<K, V> getMap(String path) { return get(path); }\n\n    ### Response:", "ground_truth": "Get the result of an Object path expression as a map.\n\n@param path The Object path.\n@param   The type of the expected key\n@param   The type of the expected value\n@return The map matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "\n    Gets Map from given path."}, {"ID": 304, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def verify(self, connection_type=None): \"\"\" Verifies and update the remote system settings. :param connection_type: same as the one in `create` method. \"\"\" req_body = self._cli.make_body(connectionType=connection_type) resp = self.action('verify', **req_body) resp.raise_if_err() return resp\n\n    ### Response: Verifies and update the remote system settings.\n\n        :param connection_type: same as the one in `create` method..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> T getObject(String path, Class<T> objectType) { Object object = getFromPath(path, false); return getObjectAsType(object, objectType); }\n\n    ### Response:", "ground_truth": "Get an XML document as a Java Object.\n\n@param objectType The type of the java object.\n@param         The type of the java object\n@return A Java object representation of the XML document", "predict": "\n    Gets an object of given type from the given path."}, {"ID": 305, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (b *KubeletBuilder) kubeletPath() string { kubeletCommand := \"/usr/local/bin/kubelet\" if b.Distribution == distros.DistributionCoreOS { kubeletCommand = \"/opt/kubernetes/bin/kubelet\" } if b.Distribution == distros.DistributionContainerOS { kubeletCommand = \"/home/kubernetes/bin/kubelet\" } return kubeletCommand }\n\n    ### Response: // kubeletPath returns the path of the kubelet based on distro.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RequestSpecBuilder setBody(Object object, ObjectMapper mapper) { spec.body(object, mapper); return this; }\n\n    ### Response:", "ground_truth": "", "predict": "// Sets the request body to the given values and returns the RequestSpecBuilder."}, {"ID": 306, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function treeAdjustQuantity (amount, tree, availableItems, ignoreAvailable = false, nesting = 0) { tree = {...tree} tree.output = tree.output || 1 // Calculate the total quantity needed let treeQuantity = amount * tree.quantity // Round amount to nearest multiple of the tree output treeQuantity = Math.ceil(treeQuantity / tree.output) * tree.output tree.totalQuantity = Math.round(treeQuantity) // If the item is available and the higher tree is not // bought or already available get as many items of it as possible // (This ignores the root node, because we *always* want to craft all of these) let availableQuantity = 0 if (nesting > 0 && !ignoreAvailable && availableItems[tree.id]) { availableQuantity = Math.min(availableItems[tree.id], tree.totalQuantity) availableItems[tree.id] -= availableQuantity } tree.usedQuantity = tree.totalQuantity - availableQuantity if (!tree.components) { return tree } // Get the amount of components that need to be crafted // e.g. a recipe outputs 10 and we need 20 -> 2x components let componentAmount = Math.ceil(tree.usedQuantity / tree.output) // Ignore available items in components if the tree // doesn't get crafted or is completely available anyway ignoreAvailable = tree.craft === false || tree.usedQuantity === 0 || ignoreAvailable // Adjust the quantity for all tree's subcomponents tree.components = tree.components.map(component => { return treeAdjustQuantity(componentAmount, component, availableItems, ignoreAvailable, ++nesting) }) return tree }\n\n    ### Response: Go through a recipe tree and set 'totalQuantity' based on the wanted amount and the output of recipes and sub-recipes.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RequestSpecBuilder addCookie(String key, Object value, Object... cookieNameValuePairs) { spec.cookie(key, value, cookieNameValuePairs); return this; }\n\n    ### Response:", "ground_truth": "Add a cookie to be sent with the request.\n\n@param key                  The cookie key\n@param value                The cookie value\n@param cookieNameValuePairs Additional cookies values. This will actually create two cookies with the same name but with different values.\n@return The request specification builder", "predict": "Allows you to add custom cookies to the given RequestSpecBuilder and add them to the given RequestSpec."}, {"ID": 307, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void cleanFile(String path) { try { PrintWriter writer; writer = new PrintWriter(path); writer.print(\"\"); writer.close(); } catch (FileNotFoundException e) { throw new RuntimeException(\"An error occurred while cleaning the file: \" + e.getMessage(), e); } }\n\n    ### Response: Creates target file if it does not exist, cleans it if it exists.\n\n@param path\nis the path to the location where the tuples are written.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RequestSpecBuilder addParam(String parameterName, Object... parameterValues) { spec.param(parameterName, parameterValues); return this; }\n\n    ### Response:", "ground_truth": "Add a parameter to be sent with the request.\n\n@param parameterName   The parameter name\n@param parameterValues Zero to many parameter values for this parameter name.\n@return The request specification builder", "predict": "Allows specification of parameter values to be added to the given RequestSpec during construction of the RequestSpec object"}, {"ID": 308, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function transform($entity) { if (null === $entity || '' === $entity) { return null; } if (!is_object($entity)) { throw new UnexpectedTypeException($entity, 'object'); } //Here, do not put the result in the cache because we must check the value in //reverseTransform (by QueryBuilder) return $this->accessor->getValue($entity, $this->identifier); }\n\n    ### Response: Transforms entity to id\n\n@param Object $entity\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RequestSpecBuilder addParam(String parameterName, Collection<?> parameterValues) { spec.param(parameterName, parameterValues); return this; }\n\n    ### Response:", "ground_truth": "Add a multi-value parameter to be sent with the request.\n\n@param parameterName   The parameter key\n@param parameterValues The parameter values\n@return The request specification builder", "predict": "Add parameter to the given specification builder"}, {"ID": 309, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static AttributeDefinition[] getValueTypes(Object instance, Class clazz) { try { if (ObjectTypeAttributeDefinition.class.isAssignableFrom(clazz)) { Field valueTypesField = clazz.getDeclaredField(\"valueTypes\"); valueTypesField.setAccessible(true); Object value = valueTypesField.get(instance); if (value != null) { if (AttributeDefinition[].class.isAssignableFrom(value.getClass())) { return (AttributeDefinition[]) value; } } return (AttributeDefinition[]) value; } } catch (Exception e) { throw new RuntimeException(\"Unable to get valueTypes.\", e); } return null; }\n\n    ### Response: Obtain the 'valueTypes' of the ObjectTypeAttributeDefinition through reflection because they are private in Wildfly 8..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public MockMvcParamConfig formParamsUpdateStrategy(UpdateStrategy updateStrategy) { return new MockMvcParamConfig(queryParamsUpdateStrategy, updateStrategy, requestParameterUpdateStrategy, attributeUpdateStrategy, sessionUpdateStrategy, true); }\n\n    ### Response:", "ground_truth": "Set form parameter update strategy to the given value.\n\n@param updateStrategy The update strategy to use for form parameters\n@return A new instance of {@link MockMvcParamConfig}", "predict": "Allows you to customize how MockMVC processes the parameters of the HTTP request: queryParamsUpdateStrategy for query parameters, updateStrategy for Form Parameters, Request Parameter, Sessin and Bean attributes"}, {"ID": 310, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function mw(options) { // Defaults. const configuration = is.not.existy(options) ? {} : options; // Validation. if (is.not.object(configuration)) { throw new TypeError('Options must be an object!'); } const attributeName = configuration.attributeName || 'clientIp'; return (req, res, next) => { const ip = getClientIp(req); Object.defineProperty(req, attributeName, { get: () => ip, configurable: true }); next(); }; }\n\n    ### Response: Expose request IP as a middleware.\n\n@param {object} [options] - Configuration.\n@param {string} [options.attributeName] - Name of attribute to augment request object with.\n@return {*}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Filter logResponseToIfMatches(PrintStream stream, Matcher<Integer> matcher) { return new ResponseLoggingFilter(stream, matcher); }\n\n    ### Response:", "ground_truth": "Create a new logging filter without using the \"new\" operator.\nWill make the DSL look nicer.\n\n@param stream The print stream to log to\n@param matcher The matcher that must be fulfilled in order for logging to occur\n@return a new instance of the filter", "predict": "Exposes the given HTTP response to the given logger if its status code matches the given regular expression pattern"}, {"ID": 311, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getString($value) { if ($this->startsWith($value, '\\'') && $this->endsWith($value, '\\'')) { return ltrim(rtrim($value, '\\''), '\\''); } if ($this->startsWith($value, '\"') && $this->endsWith($value, '\"')) { return ltrim(rtrim($value, '\"'), '\"'); } return $value; }\n\n    ### Response: Removes ' or \" from string\n\n@param string $value\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Cookies cookies(Cookie cookie, Cookie... additionalCookies) { AssertParameter.notNull(cookie, \"Cookie\"); final List<Cookie> cookieList = new LinkedList<Cookie>(); cookieList.add(cookie); Collections.addAll(cookieList, additionalCookies); return new Cookies(cookieList); }\n\n    ### Response:", "ground_truth": "An alternative way to create a Cookies object from the constructor.\n\n@param cookie            The cookie to be included\n@param additionalCookies Additional cookies to be included (optional)\n@return A new cookies object containing the specified cookies", "predict": "Prepares an ordered list of cookies to send to the server\n\nPrior to sending cookies to the server, they must first be prepared in an ordered list to send to the server. The order of the cookies matters because the server may compare the order of the cookies to determine if they were submitted in the original order intended by the client, thus helping to mitigate cookie hijacking attacks. The Cookies class provides a method to prepare the order list of cookies to send to the server in an HTTP request:"}, {"ID": 312, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (g *Generation) Refresh() error { col, closer := g.st.db().GetCollection(generationsC) defer closer() var doc generationDoc if err := col.FindId(g.doc.DocId).One(&doc); err != nil { return errors.Trace(err) } g.doc = doc return nil }\n\n    ### Response: // Refresh refreshes the contents of the generation from the underlying state..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void cleanUpForCollectedState(Set<KeyAndSource> keysAndSources) { synchronized (lock) { for (KeyAndSource keyAndSource : keysAndSources) { Multiset<Object> set = backingMap.get(keyAndSource.key); if (set != null) { set.remove(keyAndSource.source); if (set.isEmpty()) { backingMap.remove(keyAndSource.key); } } } } }\n\n    ### Response:", "ground_truth": "There may be multiple child injectors blacklisting a certain key so only remove the source\nthat's relevant.", "predict": "// This method iterates over the set of objects with the specified source and\n    // cleans up any pending change sets for objects with the given source."}, {"ID": 313, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function logout() { set_user_preference('repository_flickr_access_token', null); set_user_preference('repository_flickr_access_token_secret', null); $this->accesstoken = null; $this->accesstokensecret = null; return $this->print_login(); }\n\n    ### Response: Purge the stored access token and related user data.\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void index() { for (Binding<?> binding : state.getExplicitBindingsThisLevel().values()) { bindingsMultimap.put(binding.getKey().getTypeLiteral(), binding); } }\n\n    ### Response:", "ground_truth": "Indexes bindings by type.", "predict": "Populate the bindingsMultimap map with the stored explicit binding for the given level of the program."}, {"ID": 314, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def handle_schedule(self): ''' Evaluate the scheduler ''' try: self.schedule.eval() # Check if scheduler requires lower loop interval than # the loop_interval setting if self.schedule.loop_interval < self.loop_interval: self.loop_interval = self.schedule.loop_interval except Exception as exc: log.error('Exception %s occurred in scheduled job', exc)\n\n    ### Response: Evaluate the scheduler.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    <T> BindingImpl<T> getBindingOrThrow(Key<T> key, Errors errors, JitLimitation jitType) throws ErrorsException { // Check explicit bindings, i.e. bindings created by modules. BindingImpl<T> binding = state.getExplicitBinding(key); if (binding != null) { return binding; } // Look for an on-demand binding. return getJustInTimeBinding(key, errors, jitType); }\n\n    ### Response:", "ground_truth": "Gets a binding implementation. First, it check to see if the parent has a binding. If the\nparent has a binding and the binding is scoped, it will use that binding. Otherwise, this\nchecks for an explicit binding. If no explicit binding is found, it looks for a just-in-time\nbinding.", "predict": "BindingImpl<T> getBindingOrThrow(Key<T> key, Errors errors, JitLimitation jitType) throws ErrorsException\n    // Check explicit bindings, i.e. bindings created by modules\n    BindingImpl<T> binding = state.getExplicitBinding(key);\n    // If there is a binding, return it\n    if (binding != null) {\n        return binding;\n    }\n    // Otherwise look for an on-demand binding\n    return getJustInTimeBinding(key, errors, jitType);"}, {"ID": 315, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def attribute(name, type=Object) name = name.to_sym #normalize raise NameError, \"attribute `#{name}` already created\" if members.include?(name) raise TypeError, \"second argument, type, must be a Class but got `#{type.inspect}` insted\" unless type.is_a?(Class) raise TypeError, \"directly converting to Bignum is not supported, use Integer instead\" if type == Bignum new_attribute(name, type) end\n\n    ### Response: Create attribute accesors for the included class\n   Also validations and coercions for the type specified\n\n @param [Symbol] name the accessor name\n @param [Class] type the class type to use for validations and coercions\n\n @example\n   class Person\n     include StronglyTyped::Model\n\n     attribute :id, Integer\n     attribute :slug, String\n   end\n\n   Person.new(id: 1, slug: 'elgalu')\n   #=> #\n   leo.id   #=> 1\n   leo.slug #=> \"elgalu\".\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private <T> BindingImpl<T> convertConstantStringBinding(Key<T> key, Errors errors) throws ErrorsException { // Find a constant string binding. Key<String> stringKey = key.ofType(STRING_TYPE); BindingImpl<String> stringBinding = state.getExplicitBinding(stringKey); if (stringBinding == null || !stringBinding.isConstant()) { return null; } // We can't call getProvider().get() because this InstanceBinding may not have been inintialized // yet (because we may have been called during InternalInjectorCreator.initializeStatically and // instance binding validation hasn't happened yet.) @SuppressWarnings(\"unchecked\") String stringValue = ((InstanceBinding<String>) stringBinding).getInstance(); Object source = stringBinding.getSource(); // Find a matching type converter. TypeLiteral<T> type = key.getTypeLiteral(); TypeConverterBinding typeConverterBinding = state.getConverter(stringValue, type, errors, source); if (typeConverterBinding == null) { // No converter can handle the given type. return null; } // Try to convert the string. A failed conversion results in an error. try { @SuppressWarnings(\"unchecked\") // This cast is safe because we double check below. T converted = (T) typeConverterBinding.getTypeConverter().convert(stringValue, type); if (converted == null) { throw errors .converterReturnedNull(stringValue, source, type, typeConverterBinding) .toException(); } if (!type.getRawType().isInstance(converted)) { throw errors .conversionTypeError(stringValue, source, type, typeConverterBinding, converted) .toException(); } return new ConvertedConstantBindingImpl<T>( this, key, converted, stringBinding, typeConverterBinding); } catch (ErrorsException e) { throw e; } catch (RuntimeException e) { throw errors .conversionError(stringValue, source, type, typeConverterBinding, e) .toException(); } }\n\n    ### Response:", "ground_truth": "Converts a constant string binding to the required type.\n\n@return the binding if it could be resolved, or null if the binding doesn't exist\n@throws com.google.inject.internal.ErrorsException if there was an error resolving the binding", "predict": "Find and convert string to appropriate type"}, {"ID": 316, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getFromRegistry($controllerString) { if (!is_string($controllerString)) { return null; } foreach ($this->registry as $viewBuilder) { if ($viewBuilder->matches($controllerString)) { return $viewBuilder; } } return null; }\n\n    ### Response: Returns the ViewBuilder that matches the given controller string.\n\n@param string $controllerString A controller string to match against. Example: ez_content:viewAction.\n\n@return \\eZ\\Publish\\Core\\MVC\\Symfony\\View\\Builder\\ViewBuilder|null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean cleanup(BindingImpl<?> binding, Set<Key> encountered) { boolean bindingFailed = false; Set<Dependency<?>> deps = getInternalDependencies(binding); for (Dependency dep : deps) { Key<?> depKey = dep.getKey(); InjectionPoint ip = dep.getInjectionPoint(); if (encountered.add(depKey)) { // only check if we haven't looked at this key yet BindingImpl depBinding = jitBindings.get(depKey); if (depBinding != null) { // if the binding still exists, validate boolean failed = cleanup(depBinding, encountered); // if children fail, we fail if (depBinding instanceof ConstructorBindingImpl) { ConstructorBindingImpl ctorBinding = (ConstructorBindingImpl) depBinding; ip = ctorBinding.getInternalConstructor(); if (!ctorBinding.isInitialized()) { failed = true; } } if (failed) { removeFailedJitBinding(depBinding, ip); bindingFailed = true; } } else if (state.getExplicitBinding(depKey) == null) { // ignore keys if they were explicitly bound, but if neither JIT // nor explicit, it's also invalid & should let parent know. bindingFailed = true; } } } return bindingFailed; }\n\n    ### Response:", "ground_truth": "Iterates through the binding's dependencies to clean up any stray bindings that were leftover\nfrom a failed JIT binding. This is required because the bindings are eagerly & optimistically\nadded to allow circular dependency support, so dependencies may pass where they should have\nfailed.", "predict": "Validates the given Binding and its Injection Point and sets the FailedBinding property to true if there is a problem during the validation procedure."}, {"ID": 317, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Client) SetPhase(phase migration.Phase) error { args := params.SetMigrationPhaseArgs{ Phase: phase.String(), } return c.caller.FacadeCall(\"SetPhase\", args, nil) }\n\n    ### Response: // SetPhase updates the phase of the currently active model migration..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void removeFailedJitBinding(Binding<?> binding, InjectionPoint ip) { failedJitBindings.add(binding.getKey()); jitBindings.remove(binding.getKey()); membersInjectorStore.remove(binding.getKey().getTypeLiteral()); provisionListenerStore.remove(binding); if (ip != null) { constructors.remove(ip); } }\n\n    ### Response:", "ground_truth": "Cleans up any state that may have been cached when constructing the JIT binding.", "predict": "// RemoveFailedJitBinding removes the given Binding and its Injection Point from the list of Failed and Removing Jit Bindings, and from the member Injection Point Store and the Provision Listener Store"}, {"ID": 318, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def cftime_to_timestamp(date, time_unit='us'): \"\"\"Converts cftime to timestamp since epoch in milliseconds Non-standard calendars (e.g. Julian or no leap calendars) are converted to standard Gregorian calendar. This can cause extra space to be added for dates that don't exist in the original calendar. In order to handle these dates correctly a custom bokeh model with support for other calendars would have to be defined. Args: date: cftime datetime object (or array) Returns: time_unit since 1970-01-01 00:00:00 \"\"\" import cftime utime = cftime.utime('microseconds since 1970-01-01 00:00:00') if time_unit == 'us': tscale = 1 else: tscale = (np.timedelta64(1, 'us')/np.timedelta64(1, time_unit)) return utime.date2num(date)*tscale\n\n    ### Response: Converts cftime to timestamp since epoch in milliseconds\n\n    Non-standard calendars (e.g. Julian or no leap calendars)\n    are converted to standard Gregorian calendar. This can cause\n    extra space to be added for dates that don't exist in the original\n    calendar. In order to handle these dates correctly a custom bokeh\n    model with support for other calendars would have to be defined.\n\n    Args:\n        date: cftime datetime object (or array)\n\n    Returns:\n        time_unit since 1970-01-01 00:00:00.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") private Set<Dependency<?>> getInternalDependencies(BindingImpl<?> binding) { if (binding instanceof ConstructorBindingImpl) { return ((ConstructorBindingImpl) binding).getInternalDependencies(); } else if (binding instanceof HasDependencies) { return ((HasDependencies) binding).getDependencies(); } else { return ImmutableSet.of(); } }\n\n    ### Response:", "ground_truth": "Safely gets the dependencies of possibly not initialized bindings.", "predict": "Get internal dependencies of objects of type BindingImpl and HasDependencies"}, {"ID": 319, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private long findHighestId() { return this.registeredServices.stream().map(RegisteredService::getId).max(Comparator.naturalOrder()).orElse(0L); }\n\n    ### Response: This isn't super-fast but we don't expect thousands of services.\n\n@return the highest service id in the list of registered services.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    <T> BindingImpl<T> createUninitializedBinding( Key<T> key, Scoping scoping, Object source, Errors errors, boolean jitBinding) throws ErrorsException { Class<?> rawType = key.getTypeLiteral().getRawType(); ImplementedBy implementedBy = rawType.getAnnotation(ImplementedBy.class); // Don't try to inject arrays or enums annotated with @ImplementedBy. if (rawType.isArray() || (rawType.isEnum() && implementedBy != null)) { throw errors.missingImplementationWithHint(key, this).toException(); } // Handle TypeLiteral<T> by binding the inner type if (rawType == TypeLiteral.class) { @SuppressWarnings(\"unchecked\") // we have to fudge the inner type as Object BindingImpl<T> binding = (BindingImpl<T>) createTypeLiteralBinding((Key<TypeLiteral<Object>>) key, errors); return binding; } // Handle @ImplementedBy if (implementedBy != null) { Annotations.checkForMisplacedScopeAnnotations(rawType, source, errors); return createImplementedByBinding(key, scoping, implementedBy, errors); } // Handle @ProvidedBy. ProvidedBy providedBy = rawType.getAnnotation(ProvidedBy.class); if (providedBy != null) { Annotations.checkForMisplacedScopeAnnotations(rawType, source, errors); return createProvidedByBinding(key, scoping, providedBy, errors); } return ConstructorBindingImpl.create( this, key, null, /* use default constructor */ source, scoping, errors, jitBinding && options.jitDisabled, options.atInjectRequired); }\n\n    ### Response:", "ground_truth": "Creates a binding for an injectable type with the given scope. Looks for a scope on the type if\nnone is specified.", "predict": "This method creates an instance of an object and uses reflection to determine the annotations on the objects and annotations that direct how the objects should be bound to the Spring application context. It looks for annotations that indicate how the objects should be populated and looks for annotations that indicate how the objects should be bound to the Spring application context for dependency injection into other objects in the Spring application context. It looks for annotations that indicate how the objects should be populated and looks for annotations that indicate how the objects should be bound to the Spring application context for dependency injection into other objects in the Spring application context. It looks for annotations that indicate how the objects should be populated and looks for annotations that indicate how the objects should be bound to the Spring application context for dependency injection into other objects in the Spring application context. It looks for annotations that indicate how the objects should be populated and looks for annotations that indicate how the objects should be bound to the Spring application context for dependency injection into other objects in the Spring application context. It looks for annotations that indicate how the objects should be populated and looks for annotations that indicate"}, {"ID": 320, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public JSModule getSmallestCoveringSubtree(JSModule parentTree, BitSet dependentModules) { checkState(!dependentModules.isEmpty()); // Candidate modules are those that all of the given dependent modules depend on, including // themselves. The dependent module with the smallest index might be our answer, if all // the other modules depend on it. int minDependentModuleIndex = modules.length; final BitSet candidates = new BitSet(modules.length); candidates.set(0, modules.length, true); for (int dependentIndex = dependentModules.nextSetBit(0); dependentIndex >= 0; dependentIndex = dependentModules.nextSetBit(dependentIndex + 1)) { minDependentModuleIndex = Math.min(minDependentModuleIndex, dependentIndex); candidates.and(selfPlusTransitiveDeps[dependentIndex]); } checkState( !candidates.isEmpty(), \"No common dependency found for %s\", dependentModules); // All candidates must have an index <= the smallest dependent module index. // Work backwards through the candidates starting with the dependent module with the smallest // index. For each candidate, we'll remove all of the modules it depends on from consideration, // since they must all have larger subtrees than the one we're considering. int parentTreeIndex = parentTree.getIndex(); // default to parent tree if we don't find anything better int bestCandidateIndex = parentTreeIndex; for (int candidateIndex = candidates.previousSetBit(minDependentModuleIndex); candidateIndex >= 0; candidateIndex = candidates.previousSetBit(candidateIndex - 1)) { BitSet candidatePlusTransitiveDeps = selfPlusTransitiveDeps[candidateIndex]; if (candidatePlusTransitiveDeps.get(parentTreeIndex)) { // candidate is a subtree of parentTree candidates.andNot(candidatePlusTransitiveDeps); if (subtreeSize[candidateIndex] < subtreeSize[bestCandidateIndex]) { bestCandidateIndex = candidateIndex; } } // eliminate candidates that are not a subtree of parentTree } return modules[bestCandidateIndex]; }\n\n    ### Response: Finds the module with the fewest transitive dependents on which all of the given modules depend\nand that is a subtree of the given parent module tree.\n\nIf no such subtree can be found, the parent module is returned.\n\nIf multiple candidates have the same number of dependents, the module farthest down in the\ntotal ordering of modules will be chosen.\n\n@param parentTree module on which the result must depend\n@param dependentModules indices of modules to consider\n@return A module on which all of the argument modules depend.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static Object[] getAll(InternalContext context, SingleParameterInjector<?>[] parameterInjectors) throws InternalProvisionException { if (parameterInjectors == null) { return NO_ARGUMENTS; } int size = parameterInjectors.length; Object[] parameters = new Object[size]; // optimization: use manual for/each to save allocating an iterator here for (int i = 0; i < size; i++) { parameters[i] = parameterInjectors[i].inject(context); } return parameters; }\n\n    ### Response:", "ground_truth": "Returns an array of parameter values.", "predict": "Get arguments for the given parameterInjectors from the InternalContext. If no arguments are provided, returns NO_ARGUMENTS"}, {"ID": 321, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected synchronized void updateVisualizerMenus() { Projection proj = null; if(svgCanvas.getPlot() instanceof DetailView) { PlotItem item = ((DetailView) svgCanvas.getPlot()).getPlotItem(); proj = item.proj; } menubar.removeAll(); menubar.add(filemenu); ResultHierarchy hier = context.getHierarchy(); Hierarchy<Object> vistree = context.getVisHierarchy(); Result start = context.getBaseResult(); ArrayList<JMenuItem> items = new ArrayList<>(); if(start == null) { for(It<Result> iter = hier.iterAll(); iter.valid(); iter.advance()) { if(hier.numParents(iter.get()) == 0) { recursiveBuildMenu(items, iter.get(), hier, vistree, proj); } } } else { for(It<Result> iter = hier.iterChildren(start); iter.valid(); iter.advance()) { recursiveBuildMenu(items, iter.get(), hier, vistree, proj); } } // Add all items. for(JMenuItem item : items) { menubar.add(item); } menubar.revalidate(); menubar.repaint(); }\n\n    ### Response: Update the visualizer menus..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static void bindInjector(InjectorImpl injector) { Key<Injector> key = Key.get(Injector.class); InjectorFactory injectorFactory = new InjectorFactory(injector); injector.state.putBinding( key, new ProviderInstanceBindingImpl<Injector>( injector, key, SourceProvider.UNKNOWN_SOURCE, injectorFactory, Scoping.UNSCOPED, injectorFactory, ImmutableSet.<InjectionPoint>of())); }\n\n    ### Response:", "ground_truth": "The Injector is a special case because we allow both parent and child injectors to both have a\nbinding for that key.", "predict": "Initiates the binding of the given Injector to the InjectionPoint of the application."}, {"ID": 322, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final OutputStream openOutputStream(int index) { Column column = _row.columns()[index]; return column.openOutputStream(this); }\n\n    ### Response: Set a blob value with an open blob stream..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static void bindLogger(InjectorImpl injector) { Key<Logger> key = Key.get(Logger.class); LoggerFactory loggerFactory = new LoggerFactory(); injector.state.putBinding( key, new ProviderInstanceBindingImpl<Logger>( injector, key, SourceProvider.UNKNOWN_SOURCE, loggerFactory, Scoping.UNSCOPED, loggerFactory, ImmutableSet.<InjectionPoint>of())); }\n\n    ### Response:", "ground_truth": "The Logger is a special case because it knows the injection point of the injected member. It's\nthe only binding that does this.", "predict": "Bind the given logger to the given Injector."}, {"ID": 323, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def mod_watch(name, **kwargs): ''' The at watcher, called to invoke the watch command. .. note:: This state exists to support special handling of the ``watch`` :ref:`requisite <requisites>`. It should not be called directly. Parameters for this function should be set by the state being triggered. name The name of the atjob ''' ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''} if kwargs['sfun'] == 'watch': for p in ['sfun', '__reqs__']: del kwargs[p] kwargs['name'] = name ret = present(**kwargs) return ret\n\n    ### Response: The at watcher, called to invoke the watch command.\n\n    .. note::\n        This state exists to support special handling of the ``watch``\n        :ref:`requisite `. It should not be called directly.\n\n        Parameters for this function should be set by the state being triggered.\n\n    name\n        The name of the atjob.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static boolean checkForMisplacedBindingAnnotations(Member member, Errors errors) { Annotation misplacedBindingAnnotation = Annotations.findBindingAnnotation( errors, member, ((AnnotatedElement) member).getAnnotations()); if (misplacedBindingAnnotation == null) { return false; } // don't warn about misplaced binding annotations on methods when there's a field with the same // name. In Scala, fields always get accessor methods (that we need to ignore). See bug 242. if (member instanceof Method) { try { if (member.getDeclaringClass().getDeclaredField(member.getName()) != null) { return false; } } catch (NoSuchFieldException ignore) { } } errors.misplacedBindingAnnotation(member, misplacedBindingAnnotation); return true; }\n\n    ### Response:", "ground_truth": "Returns true if the binding annotation is in the wrong place.", "predict": "\n    The function checks if there is a misplaced annotation on the member, such that there is a conflict with an annotation of the same name but on an accessor method of the member, such as an accessor method of a fields in Scala. It ignores fields in Scala because fields always get accessor methods, so there should be no conflict with annotation of the same name on an accessor method of the fields since there is no conflict with the fields directly declaring the annotation since there is no conflict with fields directly declaring the annotation since there is no conflict with fields directly declaring the annotation since there is no conflict with fields directly declaring the annotation since there is no conflict with fields directly declaring the annotation since there is no conflict with fields directly declaring the annotation since there is no conflict with fields directly declaring the annotation since there is no conflict with fields directly declaring the annotation since there is no conflict with fields directly declaring the annotation since there is no conflict with fields directly declaring the annotation since there is no conflict with fields directly declaring the annotation since there is no conflict with fields directly"}, {"ID": 324, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function to($path, $code = 302, $trigger = true) { $debuglvl = self::$debuglvl; self::$debuglvl = 2; if (headers_sent()) { throw new Exception('Headers already sent', $debuglvl); } elseif ($code < 300 || $code > 399) { throw new Exception('Invalid redirect HTTP status', $debuglvl); } elseif (empty($path)) { throw new Exception('Path is not defined', $debuglvl); } elseif (strpos($path, '/') === 0) { $path = Uri::root($path); } Response::status($code, $trigger); Response::putHeader('Location', $path); }\n\n    ### Response: Redirects to a valid path within the application\n\n@param string $path\n@param int    $code\n@param bool   $trigger\n@throws \\Inphinit\\Experimental\\Exception\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static boolean overrides(Method a, Method b) { // See JLS section 8.4.8.1 int modifiers = b.getModifiers(); if (Modifier.isPublic(modifiers) || Modifier.isProtected(modifiers)) { return true; } if (Modifier.isPrivate(modifiers)) { return false; } // b must be package-private return a.getDeclaringClass().getPackage().equals(b.getDeclaringClass().getPackage()); }\n\n    ### Response:", "ground_truth": "Returns true if a overrides b. Assumes signatures of a and b are the same and a's declaring\nclass is a subclass of b's declaring class.", "predict": "Override method can be determined by examining public or package-private access of the method being overridden\n\n/**\n * Determines whether method overrides another method of the same class or superclass of the method being overridden by examining public or\n * package-private access of the method being overridden\n *\n * @param Method a The method being overridden\n * @param Method b The method being overridden\n *\n * @return boolean indicates if method overrides another method of the same class or superclass of the method being overridden\n *\n * See JLS section 8.4.8.1\n *\n * @since JDK15 Release 05, JDK8 Release 03, JDK9 Release 03\n * @author Jayson Ambrosi\n * @author Rinat Abdullin\n * @since JDK8 Release 03, JDK9 Release 03\n * @since JDK8 Release 03, JDK9"}, {"ID": 325, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Jawn onShutdown(Runnable callback) { Objects.requireNonNull(callback); bootstrapper.onShutdown(callback); return this; }\n\n    ### Response: Run the tasks as a part of the shut down process.\n\nWith the current implementation, the Runnables will be executed\nright after stopping the server, but before closing any\nconnection pool to a {@link DatabaseConnection}.\n\n@param callback\n@return this, for chaining.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void initializeDelegate(MembersInjector<T> delegate) { checkState(this.delegate == null, \"delegate already initialized\"); this.delegate = checkNotNull(delegate, \"delegate\"); }\n\n    ### Response:", "ground_truth": "Sets the actual members injector.\n\n@throws IllegalStateException if the delegate is already set", "predict": "Initialize the given delegate and make sure there is no other instance of this delegate is attached to this Jawn."}, {"ID": 326, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (exs Examples) Names() []string { names := make([]string, 0, len(exs)) for k := range exs { names = append(names, k) } sort.Strings(names) return names }\n\n    ### Response: // Names will return the name of the example. This will also be the name of the operation\n// that is to be tested..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") final TypeLiteral<Provider<T>> providerType() { // This cast is safe and wouldn't generate a warning if Type had a type // parameter. return (TypeLiteral<Provider<T>>) get(Types.providerOf(getType())); }\n\n    ### Response:", "ground_truth": "Gets the type of this type's provider.", "predict": "// This method generates an instance of an anonymous class // TypeLiteral<Provider<T>> and casts // it to ensure compatibility // with the method //provider(providerType(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider(provider).provider"}, {"ID": 327, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static JScrollPane createVerticalScrollPane( final JComponent component) { JScrollPane scrollPane = new JScrollPane(component) { /** * Serial UID */ private static final long serialVersionUID = -177913025197077320L; @Override public Dimension getPreferredSize() { Dimension d = super.getPreferredSize(); if (super.isPreferredSizeSet()) { return d; } JScrollBar scrollBar = getVerticalScrollBar(); Dimension sd = scrollBar.getPreferredSize(); d.width += sd.width; return d; } @Override public boolean isValidateRoot() { return false; } }; return scrollPane; }\n\n    ### Response: Creates a JScrollPane for vertically scrolling the given component.\nThe scroll pane will take into account that the vertical scroll bar\nwill be shown when needed, and return a preferred size that takes\nthe width of this scroll bar into account, so that when the vertical\nscroll bar appears, the contained component can still have its\npreferred width.\n\n@param component The view component\n@return The scroll pane.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private List<TypeLiteral<?>> resolveAll(Type[] types) { TypeLiteral<?>[] result = new TypeLiteral<?>[types.length]; for (int t = 0; t < types.length; t++) { result[t] = resolve(types[t]); } return ImmutableList.copyOf(result); }\n\n    ### Response:", "ground_truth": "Returns an immutable list of the resolved types.", "predict": "Resolves all arguments of the given type to the appropriate type arguments of the function being invoked\nand returns an immutable list of those objects resolved to type arguments of the function being invoked."}, {"ID": 328, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (chat *Chat) ServiceHookURL() string { return Config.BaseURL + \"/\" + chat.ctx.ServiceName + \"/\" + chat.ServiceHookToken() }\n\n    ### Response: // ServiceHookURL returns Chats's webhook URL for service to use in webhook handling\n// Used in case when user need to put webhook URL to receive notifications to chat.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> TypeLiteral<T> canonicalizeForKey(TypeLiteral<T> typeLiteral) { Type type = typeLiteral.getType(); if (!isFullySpecified(type)) { Errors errors = new Errors().keyNotFullySpecified(typeLiteral); throw new ConfigurationException(errors.getMessages()); } if (typeLiteral.getRawType() == javax.inject.Provider.class) { ParameterizedType parameterizedType = (ParameterizedType) type; // the following casts are generally unsafe, but com.google.inject.Provider extends // javax.inject.Provider and is covariant @SuppressWarnings(\"unchecked\") TypeLiteral<T> guiceProviderType = (TypeLiteral<T>) TypeLiteral.get(Types.providerOf(parameterizedType.getActualTypeArguments()[0])); return guiceProviderType; } @SuppressWarnings(\"unchecked\") TypeLiteral<T> wrappedPrimitives = (TypeLiteral<T>) PRIMITIVE_TO_WRAPPER.get(typeLiteral); if (wrappedPrimitives != null) { return wrappedPrimitives; } // If we know this isn't a subclass, return as-is. if (typeLiteral.getClass() == TypeLiteral.class) { return typeLiteral; } // recreate the TypeLiteral to avoid anonymous TypeLiterals from holding refs to their // surrounding classes. @SuppressWarnings(\"unchecked\") TypeLiteral<T> recreated = (TypeLiteral<T>) TypeLiteral.get(typeLiteral.getType()); return recreated; }\n\n    ### Response:", "ground_truth": "Returns an type that's appropriate for use in a key.\n\nIf the raw type of {@code typeLiteral} is a {@code javax.inject.Provider}, this returns a\n{@code com.google.inject.Provider} with the same type parameters.\n\nIf the type is a primitive, the corresponding wrapper type will be returned.\n\n@throws ConfigurationException if {@code type} contains a type variable", "predict": "// Canonicalizes objects to be able to provide them to Guice // via @Provider annotations by resolving any ambiguity // caused by mixing primitives and wrappers in the // objects to be provided // This function may produce an ambiguous Result for objects // that contain both wrappers and primitives but // for objects that contain only wrappers or // only primitives, there should be no ambiguity // and for objects that contain neither wrappers // nor primitives, there should be no error // This function may produce an ambiguous Result for objects // that contain both wrappers and primitives but // for objects that contain only wrappers or // only primitives, there should be no ambiguity // and for objects that contain neither wrappers // nor primitives, there should be no error // This function may produce an ambiguous Result for objects // that contain both wrappers and primitives but // for objects that contain only wrappers or // only primitives, there should be no ambiguity // and for objects that contain neither wrappers // nor primitives"}, {"ID": 329, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setDefaultValue($def) { if (!$def instanceof ColumnDefaultValue) { $def = new ColumnDefaultValue($def, ColumnDefaultValue::TYPE_VALUE); } $this->domain->setDefaultValue($def); return $this; }\n\n    ### Response: Set a string that will give this column a default value.\n\n@param ColumnDefaultValue|int|float|bool|string column default value\n\n@return Column.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static void prepareBuiltInConverters(InjectorImpl injector) { // Configure type converters. convertToPrimitiveType(injector, int.class, Integer.class); convertToPrimitiveType(injector, long.class, Long.class); convertToPrimitiveType(injector, boolean.class, Boolean.class); convertToPrimitiveType(injector, byte.class, Byte.class); convertToPrimitiveType(injector, short.class, Short.class); convertToPrimitiveType(injector, float.class, Float.class); convertToPrimitiveType(injector, double.class, Double.class); convertToClass( injector, Character.class, new TypeConverter() { @Override public Object convert(String value, TypeLiteral<?> toType) { value = value.trim(); if (value.length() != 1) { throw new RuntimeException(\"Length != 1.\"); } return value.charAt(0); } @Override public String toString() { return \"TypeConverter<Character>\"; } }); convertToClasses( injector, Matchers.subclassesOf(Enum.class), new TypeConverter() { @Override @SuppressWarnings(\"unchecked\") public Object convert(String value, TypeLiteral<?> toType) { return Enum.valueOf((Class) toType.getRawType(), value); } @Override public String toString() { return \"TypeConverter<E extends Enum<E>>\"; } }); internalConvertToTypes( injector, new AbstractMatcher<TypeLiteral<?>>() { @Override public boolean matches(TypeLiteral<?> typeLiteral) { return typeLiteral.getRawType() == Class.class; } @Override public String toString() { return \"Class<?>\"; } }, new TypeConverter() { @Override @SuppressWarnings(\"unchecked\") public Object convert(String value, TypeLiteral<?> toType) { try { return Class.forName(value); } catch (ClassNotFoundException e) { throw new RuntimeException(e.getMessage()); } } @Override public String toString() { return \"TypeConverter<Class<?>>\"; } }); }\n\n    ### Response:", "ground_truth": "Installs default converters for primitives, enums, and class literals.", "predict": "Prepares the Built in converters for the given Injector and configures the converters to convert values to and from objects of given types to and from other types of values"}, {"ID": 330, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static List<List<IAtom>> getAllPaths(IAtomContainer atomContainer, IAtom start, IAtom end) { List<List<IAtom>> allPaths = new ArrayList<List<IAtom>>(); if (start.equals(end)) return allPaths; findPathBetween(allPaths, atomContainer, start, end, new ArrayList<IAtom>()); return allPaths; }\n\n    ### Response: Get a list of all the paths between two atoms.\n\nIf the two atoms are the same an empty list is returned. Note that this problem\nis NP-hard and so can take a long time for large graphs.\n\n@param atomContainer The molecule to consider\n@param start         The starting Atom of the path\n@param end           The ending Atom of the path\n@return A List containing all the paths between the specified atoms.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static ClassLoader canonicalize(ClassLoader classLoader) { return classLoader != null ? classLoader : SystemBridgeHolder.SYSTEM_BRIDGE.getParent(); }\n\n    ### Response:", "ground_truth": "Attempts to canonicalize null references to the system class loader. May return null if for\nsome reason the system loader is unavailable.", "predict": "Canonicalize the given ClassLoader to the system ClassLoader."}, {"ID": 331, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def cmd_echo(self, connection, sender, target, payload): \"\"\" Echoes the given payload \"\"\" connection.privmsg(target, payload or \"Hello, {0}\".format(sender))\n\n    ### Response: Echoes the given payload.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static boolean hasSameVersionOfCglib(ClassLoader classLoader) { Class<?> fc = net.sf.cglib.reflect.FastClass.class; try { return classLoader.loadClass(fc.getName()) == fc; } catch (ClassNotFoundException e) { return false; } }\n\n    ### Response:", "ground_truth": "Returns true if the types classloader has the same version of cglib that BytecodeGen has. This\nonly returns false in strange OSGI situations, but it prevents us from using FastClass for non\npublic members.", "predict": "\n    // Checks if the given class loader has the same version of gcj as the current one\n    // Uses reflection to compare the FastClass class of gcj to the given class loader\n    // If the FastClass class of gcj matches the given class loader,\n    //    indicates that the gcj version of the given class loader is the same\n    //    as the gcj version of this class\n    // If the FastClass class of gcj does not match the given class loader\n    //    indicates that the gcj version of the given class loader is different\n    //    than the gcj version of this class\n    // If the FastClass class of gcj cannot be found\n    //    indicates that the gcj version of the given class loader is too old\n    //    to be the same as the gcj version of this class\n    // If any of the above conditions are true\n    //    indicates that the gcj version"}, {"ID": 332, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function checkNotIncompatibleParams(ParamInterface $param) { if (null === $param->getValue($this->getRequest(), null)) { return; } $params = $this->getParams(); foreach ($param->getIncompatibilities() as $incompatibleParamName) { if (!array_key_exists($incompatibleParamName, $params)) { throw new \\InvalidArgumentException(sprintf(\"No @ParamInterface configuration for parameter '%s'.\", $incompatibleParamName)); } $incompatibleParam = $params[$incompatibleParamName]; if (null !== $incompatibleParam->getValue($this->getRequest(), null)) { $exceptionMessage = sprintf( \"'%s' param is incompatible with %s param.\", $param->getName(), $incompatibleParam->getName() ); throw new BadRequestHttpException($exceptionMessage); } } }\n\n    ### Response: Check if current param is not in conflict with other parameters\naccording to the \"incompatibles\" field.\n\n@param ParamInterface $param the configuration for the param fetcher\n\n@throws InvalidArgumentException\n@throws BadRequestHttpException\n\n@internal.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static boolean isPubliclyCallable(Member member) { if (!Modifier.isPublic(member.getModifiers())) { return false; } Class<?>[] parameterTypes; if (member instanceof Constructor) { parameterTypes = ((Constructor) member).getParameterTypes(); } else { Method method = (Method) member; if (!Modifier.isPublic(method.getReturnType().getModifiers())) { return false; } parameterTypes = method.getParameterTypes(); } for (Class<?> type : parameterTypes) { if (!Modifier.isPublic(type.getModifiers())) { return false; } } return true; }\n\n    ### Response:", "ground_truth": "Returns true if the member can be called by a fast class generated in a different classloader.", "predict": "Checks if the given member is publicly callable, i.e., if\nit has public access\n    and all of its parameter and return types are public."}, {"ID": 333, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void ENaddpattern( String id ) throws EpanetException { int errcode = epanet.ENaddpattern(id); checkError(errcode); }\n\n    ### Response: Adds a new time pattern to the network.\n\n@param id ID label of pattern.\n@throws EpanetException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Key<?> fixAnnotations(Key<?> key) { return key.getAnnotation() == null ? key : Key.get(key.getTypeLiteral(), key.getAnnotation().annotationType()); }\n\n    ### Response:", "ground_truth": "Replace annotation instances with annotation types, this is only appropriate for testing if a\nkey is bound and not for injecting.\n\n", "predict": "This method fixes the annotations of the given key to the specified annotation type."}, {"ID": 334, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_members_in_state(self, state): \"\"\"return all members of replica set in specific state\"\"\" members = self.run_command(command='replSetGetStatus', is_eval=False)['members'] return [member['name'] for member in members if member['state'] == state]\n\n    ### Response: return all members of replica set in specific state.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    <T> Initializable<T> requestInjection( InjectorImpl injector, T instance, Binding<T> binding, Object source, Set<InjectionPoint> injectionPoints) { checkNotNull(source); Preconditions.checkState( !validationStarted, \"Member injection could not be requested after validation is started\"); ProvisionListenerStackCallback<T> provisionCallback = binding == null ? null : injector.provisionListenerStore.get(binding); // short circuit if the object has no injections or listeners. if (instance == null || (injectionPoints.isEmpty() && !injector.membersInjectorStore.hasTypeListeners() && provisionCallback == null)) { return Initializables.of(instance); } if (initializablesCache.containsKey(instance)) { @SuppressWarnings(\"unchecked\") // Map from T to InjectableReference<T> Initializable<T> cached = (Initializable<T>) initializablesCache.get(instance); return cached; } InjectableReference<T> injectableReference = new InjectableReference<T>( injector, instance, binding == null ? null : binding.getKey(), provisionCallback, source, cycleDetectingLockFactory.create(instance.getClass())); initializablesCache.put(instance, injectableReference); pendingInjections.add(injectableReference); return injectableReference; }\n\n    ### Response:", "ground_truth": "Registers an instance for member injection when that step is performed.\n\n@param instance an instance that optionally has members to be injected (each annotated\nwith @Inject).\n@param binding the binding that caused this initializable to be created, if it exists.\n@param source the source location that this injection was requested", "predict": "Initiates member and listener injections for the given member instance and binding of the member and provisions listeners for the member and binding if applicable"}, {"ID": 335, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setTempDirectory(File dir) throws IOException { File td = dir.getCanonicalFile(); if (td.isDirectory()) { _temp_directory = td; } }\n\n    ### Response: Override directory to create temporary file in.\nDoes not affect already open temp file.\n@param dir File object representing temporary directory.\nMay be null which means that system default\n(java.io.tmpdir system property) should be used.\n@throws IOException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void validateOustandingInjections(Errors errors) { validationStarted = true; initializablesCache.clear(); for (InjectableReference<?> reference : pendingInjections) { try { reference.validate(errors); } catch (ErrorsException e) { errors.merge(e.getErrors()); } } }\n\n    ### Response:", "ground_truth": "Prepares member injectors for all injected instances. This prompts Guice to do static analysis\non the injected instances.", "predict": "Validates pending injections and updates the cache of objects with pending injections to be able to validate them next time without need to look into the objects for pending injections"}, {"ID": 336, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected Future<ActivityData> submit(ActivityCallable callable) { try { if(getEjb() == null) { logger.info(\"locating AsynchronousBean EJB through service locator\"); setEjb(ServiceLocator.getService(asynchBeanName, AsynchronousBean.class)); } else { logger.info(\"asynchronousBean EJB correctly initialized through dependency injection\"); } return getEjb().submit(callable); } catch(Exception e) { logger.error(\"error in the AsynchronousBean service locator lookup\", e); } return null; }\n\n    ### Response: Assigns the given activity to a worker thread in the JavaEE application\nserver, returning the task's Future object.\n\n@param callable\nthe callable object for the {@code Activity} to be executed asynchronously.\n@return\nthe activity's {@code Future} object, for result retrieval.\n@see\norg.dihedron.patterns.activities.concurrent.ActivityExecutor#submit(org.dihedron.patterns.activities.Activity).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T newInstance(Object[] args) throws Throwable { constructor.setAccessible(true); try { return constructor.newInstance(args); } catch (InvocationTargetException e) { throw e.getCause(); } }\n\n    ### Response:", "ground_truth": "Returns an instance of T, constructed using this constructor, with the supplied arguments.", "predict": "Allows for the construction of objects with arbitrary arguments, invokes the constructor to perform the actual construction and catches any exception that may occur during the construction\n\n// This method creates an instance of an arbitrary object with arbitrary arguments\npublic <T extends Throwable> T newInstace(Object[] args) throws Throwable {\n    // First ensure that the given constructor is accessible\n    constructor.setAccessible(true);\n    // Finally invoke the given constructor to perform the actual construction\n    return constructor.newInstace(args);\n};"}, {"ID": 337, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def transform_import(self, node, results): \"\"\"Transform for the basic import case. Replaces the old import name with a comma separated list of its replacements. \"\"\" import_mod = results.get(\"module\") pref = import_mod.prefix names = [] # create a Node list of the replacement modules for name in MAPPING[import_mod.value][:-1]: names.extend([Name(name[0], prefix=pref), Comma()]) names.append(Name(MAPPING[import_mod.value][-1][0], prefix=pref)) import_mod.replace(names)\n\n    ### Response: Transform for the basic import case. Replaces the old\n           import name with a comma separated list of its\n           replacements..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"JavaDoc\", \"deprecation\"}) private ServletRequest withDispatcher( ServletRequest servletRequest, final ManagedServletPipeline servletPipeline) { // don't wrap the request if there are no servlets mapped. This prevents us from inserting our // wrapper unless it's actually going to be used. This is necessary for compatibility for apps // that downcast their HttpServletRequests to a concrete implementation. if (!servletPipeline.hasServletsMapped()) { return servletRequest; } HttpServletRequest request = (HttpServletRequest) servletRequest; //noinspection OverlyComplexAnonymousInnerClass return new HttpServletRequestWrapper(request) { @Override public RequestDispatcher getRequestDispatcher(String path) { final RequestDispatcher dispatcher = servletPipeline.getRequestDispatcher(path); return (null != dispatcher) ? dispatcher : super.getRequestDispatcher(path); } }; }\n\n    ### Response:", "ground_truth": "Used to create an proxy that dispatches either to the guice-servlet pipeline or the regular\npipeline based on uri-path match. This proxy also provides minimal forwarding support.\n\nWe cannot forward from a web.xml Servlet/JSP to a guice-servlet (because the filter pipeline\nis not called again). However, we can wrap requests with our own dispatcher to forward the\n*other* way. web.xml Servlets/JSPs can forward to themselves as per normal.\n\nThis is not a problem cuz we intend for people to migrate from web.xml to guice-servlet,\nincrementally, but not the other way around (which, we should actively discourage).", "predict": "Do not wrap the request unless there are servlets // mapped because doing so may break compatibility in apps that // downcastle their HttpServletRequest objects to concrete // subtypes of HttpServletRequest. If there // are no servlets mapped, just return the original // RequestDispatcher for compatibility with apps // that cast their HttpServletRequest objects to // concrete subtypes of HttpServletRequest."}, {"ID": 338, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function assertResponseBodyMatches(PyStringNode $pattern) { $this->requireResponse(); $pattern = (string) $pattern; try { Assertion::regex($body = (string) $this->response->getBody(), $pattern, sprintf( 'Expected response body to match regular expression \"%s\", got \"%s\".', $pattern, $body )); } catch (AssertionFailure $e) { throw new AssertionFailedException($e->getMessage()); } }\n\n    ### Response: Assert that the response body matches some content using a regular expression\n\n@param PyStringNode $pattern The regular expression pattern to use for the match\n@throws AssertionFailedException\n@return void\n\n@Then the response body matches:.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static <T> InternalFactory<? extends T> scope( Key<T> key, InjectorImpl injector, InternalFactory<? extends T> creator, Object source, Scoping scoping) { if (scoping.isNoScope()) { return creator; } Scope scope = scoping.getScopeInstance(); // NOTE: SingletonScope relies on the fact that we are passing a // ProviderToInternalFactoryAdapter here. If you change the type make sure to update // SingletonScope as well. Provider<T> scoped = scope.scope(key, new ProviderToInternalFactoryAdapter<T>(injector, creator)); return new InternalFactoryToProviderAdapter<T>(scoped, source); }\n\n    ### Response:", "ground_truth": "Scopes an internal factory.", "predict": "Invoke the given InternalFactory to produce an instance of the given type from the given source."}, {"ID": 339, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def prepare_headers(self, headers, metadata, queue_derive=True): \"\"\"Convert a dictionary of metadata into S3 compatible HTTP headers, and append headers to ``headers``. :type metadata: dict :param metadata: Metadata to be converted into S3 HTTP Headers and appended to ``headers``. :type headers: dict :param headers: (optional) S3 compatible HTTP headers. \"\"\" if not metadata.get('scanner'): scanner = 'Internet Archive Python library {0}'.format(__version__) metadata['scanner'] = scanner prepared_metadata = prepare_metadata(metadata) headers['x-archive-auto-make-bucket'] = '1' if queue_derive is False: headers['x-archive-queue-derive'] = '0' else: headers['x-archive-queue-derive'] = '1' for meta_key, meta_value in prepared_metadata.items(): # Encode arrays into JSON strings because Archive.org does not # yet support complex metadata structures in # <identifier>_meta.xml. if isinstance(meta_value, dict): meta_value = json.dumps(meta_value) # Convert the metadata value into a list if it is not already # iterable. if (isinstance(meta_value, six.string_types) or not hasattr(meta_value, '__iter__')): meta_value = [meta_value] # Convert metadata items into HTTP headers and add to # ``headers`` dict. for i, value in enumerate(meta_value): if not value: continue header_key = 'x-archive-meta{0:02d}-{1}'.format(i, meta_key) if (isinstance(value, six.string_types) and needs_quote(value)): if six.PY2 and isinstance(value, six.text_type): value = value.encode('utf-8') value = 'uri({0})'.format(urllib.parse.quote(value)) # because rfc822 http headers disallow _ in names, IA-S3 will # translate two hyphens in a row (--) into an underscore (_). header_key = header_key.replace('_', '--') headers[header_key] = value super(S3PreparedRequest, self).prepare_headers(headers)\n\n    ### Response: Convert a dictionary of metadata into S3 compatible HTTP\n        headers, and append headers to ``headers``.\n\n        :type metadata: dict\n        :param metadata: Metadata to be converted into S3 HTTP Headers\n                         and appended to ``headers``.\n\n        :type headers: dict\n        :param headers: (optional) S3 compatible HTTP headers..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static Scoping makeInjectable(Scoping scoping, InjectorImpl injector, Errors errors) { Class<? extends Annotation> scopeAnnotation = scoping.getScopeAnnotation(); if (scopeAnnotation == null) { return scoping; } ScopeBinding scope = injector.state.getScopeBinding(scopeAnnotation); if (scope != null) { return forInstance(scope.getScope()); } errors.scopeNotFound(scopeAnnotation); return UNSCOPED; }\n\n    ### Response:", "ground_truth": "Replaces annotation scopes with instance scopes using the Injector's annotation-to-instance\nmap. If the scope annotation has no corresponding instance, an error will be added and unscoped\nwill be retuned.", "predict": "Generates the method level annotation for the above java code\n    static Scoping makeInjectable(Scoping scoping, InjectorImpl injector, Errors errors) {Class<? extends Annotation> scopeAnnotation = scoping.getScopeAnnotation(); // Check if annotation of given scope exists in the Injector ScopeBinding scope = injector.state.getScopeBinding(scopeAnnotation); // If annotation exists get the Scope from Injector If (scope != null) // If annotation exists and corresponding Scope defined // generate Scope and return it ScopeBinding scope = (ScopeBinding) scopeAnnotation; return forInstace(scope.getScope()); // If annotation does not exist generate error and return UNDEFINEDerrors.scopeNotFound(scopeAnnotation); // If annotation does not exist and corresponding Scope defined generate error and return UNDEFINED; // If annotation does not exist and corresponding Scope defined generate error and return UNDEFINED; // If annotation does not exist and corresponding Scope defined generate error"}, {"ID": 340, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void updateName(TreeElement parentNode, int index) { setName(getNodeName(parentNode, index)); TreeElement[] children = getChildren(); for (int i = 0; i < children.length; i++) { children[i].updateName(this, i); } }\n\n    ### Response: This method will update the name of this node and all of the children node.  The name\nof a node reflects it's position in the tree.\n@param parentNode The parent node of this node.\n@param index      the index position of this node within the parent node..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static String normalizePath(String path) { StringBuilder sb = new StringBuilder(path.length()); int queryStart = path.indexOf('?'); String query = null; if (queryStart != -1) { query = path.substring(queryStart); path = path.substring(0, queryStart); } // Normalize the path. we need to decode path segments, normalize and rejoin in order to // 1. decode and normalize safe percent escaped characters. e.g. %70 -> 'p' // 2. decode and interpret dangerous character sequences. e.g. /%2E/ -> '/./' -> '/' // 3. preserve dangerous encoded characters. e.g. '/%2F/' -> '///' -> '/%2F' List<String> segments = new ArrayList<>(); for (String segment : SLASH_SPLITTER.split(path)) { // This decodes all non-special characters from the path segment. so if someone passes // /%2E/foo we will normalize it to /./foo and then /foo String normalized = UrlEscapers.urlPathSegmentEscaper().escape(lenientDecode(segment, UTF_8, false)); if (\".\".equals(normalized)) { // skip } else if (\"..\".equals(normalized)) { if (segments.size() > 1) { segments.remove(segments.size() - 1); } } else { segments.add(normalized); } } SLASH_JOINER.appendTo(sb, segments); if (query != null) { sb.append(query); } return sb.toString(); }\n\n    ### Response:", "ground_truth": "Normalizes a path by unescaping all safe, percent encoded characters.", "predict": "The normalizedPath() method normalizes the given path string to remove any dangerous or misleading characters and escape any reserved characters in the path string to ensure proper HTTP protocol compliance."}, {"ID": 341, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setMasterPlaylistSettings(com.google.api.ads.admanager.axis.v201902.MasterPlaylistSettings masterPlaylistSettings) { this.masterPlaylistSettings = masterPlaylistSettings; }\n\n    ### Response: Sets the masterPlaylistSettings value for this HlsSettings.\n\n@param masterPlaylistSettings   * The settings for the master playlist. This field is optional\nand if it is not set will default\nto a {@link MasterPlaylistSettings} with a refresh\ntype of {@link RefreshType#AUTOMATIC}..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T extends Annotation> T generateAnnotation(Class<T> annotationType) { Preconditions.checkState( isAllDefaultMethods(annotationType), \"%s is not all default methods\", annotationType); return (T) cache.getUnchecked(annotationType); }\n\n    ### Response:", "ground_truth": "Generates an Annotation for the annotation class. Requires that the annotation is all\noptionals.", "predict": "Generates an annotation for the given annotationType from the cache or creates it from scratch."}, {"ID": 342, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function parse($uri) { parent::parse($uri); if (empty($this->path)) { $this->path = '/'; } return $this; }\n\n    ### Response: Parse a URI string\n\n@param  string $uri\n@return Http.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isRetainedAtRuntime(Class<? extends Annotation> annotationType) { Retention retention = annotationType.getAnnotation(Retention.class); return retention != null && retention.value() == RetentionPolicy.RUNTIME; }\n\n    ### Response:", "ground_truth": "Returns true if the given annotation is retained at runtime.", "predict": "Determines whether an annotation is kept in the generated class at runtime or during its compilation\n\n* If the annotation contains the @Retention annotation with its parameter set to @SOURCE, * then the annotation is kept in the generated class during its * compilation; otherwise it is kept in the generated class at runtime."}, {"ID": 343, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setReportLocation($var) { GPBUtil::checkMessage($var, \\Google\\Cloud\\ErrorReporting\\V1beta1\\SourceLocation::class); $this->report_location = $var; return $this; }\n\n    ### Response: The location in the source code where the decision was made to\nreport the error, usually the place where it was logged.\nFor a logged exception this would be the source line where the\nexception is logged, usually close to the place where it was\ncaught. This value is in contrast to `Exception.cause_location`,\nwhich describes the source line where the exception was thrown.\n\nGenerated from protobuf field .google.devtools.clouderrorreporting.v1beta1.SourceLocation report_location = 3;\n@param \\Google\\Cloud\\ErrorReporting\\V1beta1\\SourceLocation $var\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Class<? extends Annotation> findScopeAnnotation( Errors errors, Annotation[] annotations) { Class<? extends Annotation> found = null; for (Annotation annotation : annotations) { Class<? extends Annotation> annotationType = annotation.annotationType(); if (isScopeAnnotation(annotationType)) { if (found != null) { errors.duplicateScopeAnnotations(found, annotationType); } else { found = annotationType; } } } return found; }\n\n    ### Response:", "ground_truth": "Returns the scoping annotation, or null if there isn't one.", "predict": "The function identifies the annotations that appear on the error objects produced by the program and\nchecks if there any annotations appear multiple times with the same\nScope annotations, e.g., Error, Information and Warning and\nidentifies the objects that produce the annotations with the same\nScope annotations."}, {"ID": 344, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def walk_json(d, func): \"\"\" Walk over a parsed JSON nested structure `d`, apply `func` to each leaf element and replace it with result \"\"\" if isinstance(d, Mapping): return OrderedDict((k, walk_json(v, func)) for k, v in d.items()) elif isinstance(d, list): return [walk_json(v, func) for v in d] else: return func(d)\n\n    ### Response: Walk over a parsed JSON nested structure `d`, apply `func` to each leaf element and replace it with result.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Key<?> getKey( TypeLiteral<?> type, Member member, Annotation[] annotations, Errors errors) throws ErrorsException { int numErrorsBefore = errors.size(); Annotation found = findBindingAnnotation(errors, member, annotations); errors.throwIfNewErrors(numErrorsBefore); return found == null ? Key.get(type) : Key.get(type, found); }\n\n    ### Response:", "ground_truth": "Gets a key for the given type, member and annotations.", "predict": "Get the Key for the given member of the given type, given annotations and given error array."}, {"ID": 345, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (OpenTracingTracer) TraceLoad(ctx context.Context, key Key) (context.Context, TraceLoadFinishFunc) { span, spanCtx := opentracing.StartSpanFromContext(ctx, \"Dataloader: load\") span.SetTag(\"dataloader.key\", key.String()) return spanCtx, func(thunk Thunk) { // TODO: is there anything we should do with the results? span.Finish() } }\n\n    ### Response: // TraceLoad will trace a call to dataloader.LoadMany with Open Tracing.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String nameOf(Key<?> key) { Annotation annotation = key.getAnnotation(); Class<? extends Annotation> annotationType = key.getAnnotationType(); if (annotation != null && !isMarker(annotationType)) { return key.getAnnotation().toString(); } else if (key.getAnnotationType() != null) { return \"@\" + key.getAnnotationType().getName(); } else { return \"\"; } }\n\n    ### Response:", "ground_truth": "Returns the name the binding should use. This is based on the annotation. If the annotation has\nan instance and is not a marker annotation, we ask the annotation for its toString. If it was a\nmarker annotation or just an annotation type, we use the annotation's name. Otherwise, the name\nis the empty string.", "predict": "// This function names the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given annotation string of the given"}, {"ID": 346, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def release! version = Origen.app.version body = { version: version.to_s } if version.production? body[:type] = :production else body[:type] = :development end post(\"plugins/#{Origen.app.name}/release\", body: body) end\n\n    ### Response: This will be called by the Origen release process to post\n the latest app version information to the server.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void initializeDelegate(Provider<T> delegate) { checkState(this.delegate == null, \"delegate already initialized\"); this.delegate = checkNotNull(delegate, \"delegate\"); }\n\n    ### Response:", "ground_truth": "Sets the actual provider.\n\n@throws IllegalStateException if the delegate is already set", "predict": "Prevents the delegate being initialized multiple times by checking if the delegate has been initialized already. If the delegate has been initialized,\n    then the method simply returns without taking any action. If the delegate has not been initialized, then the method sets the delegate to the parameter provided and\n    returns success."}, {"ID": 347, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _get_window_data(self, data, asset, window_length): \"\"\" Internal utility method to return the trailing mean volume over the past 'window_length' days, and volatility of close prices for a specific asset. Parameters ---------- data : The BarData from which to fetch the daily windows. asset : The Asset whose data we are fetching. window_length : Number of days of history used to calculate the mean volume and close price volatility. Returns ------- (mean volume, volatility) \"\"\" try: values = self._window_data_cache.get(asset, data.current_session) except KeyError: try: # Add a day because we want 'window_length' complete days, # excluding the current day. volume_history = data.history( asset, 'volume', window_length + 1, '1d', ) close_history = data.history( asset, 'close', window_length + 1, '1d', ) except HistoryWindowStartsBeforeData: # If there is not enough data to do a full history call, return # values as if there was no data. return 0, np.NaN # Exclude the first value of the percent change array because it is # always just NaN. close_volatility = close_history[:-1].pct_change()[1:].std( skipna=False, ) values = { 'volume': volume_history[:-1].mean(), 'close': close_volatility * SQRT_252, } self._window_data_cache.set(asset, values, data.current_session) return values['volume'], values['close']\n\n    ### Response: Internal utility method to return the trailing mean volume over the\n        past 'window_length' days, and volatility of close prices for a\n        specific asset.\n\n        Parameters\n        ----------\n        data : The BarData from which to fetch the daily windows.\n        asset : The Asset whose data we are fetching.\n        window_length : Number of days of history used to calculate the mean\n            volume and close price volatility.\n\n        Returns\n        -------\n        (mean volume, volatility).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addDirectTypeBinding(Binder binder) { binder .bind(bindingSelection.getDirectKey()) .toProvider(new RealDirectTypeProvider<T>(bindingSelection)); }\n\n    ### Response:", "ground_truth": "Adds a binding for T. Multiple calls to this are safe, and will be collapsed as duplicate\nbindings.", "predict": "Initiates binding for objects of type DirectType to objects of type Provider of DirectType to avoid unnecessary casts during type conversion"}, {"ID": 348, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(metacache, callback) { var funcs = []; for (var processor in metacache) { if (processor !== '_id') { var cached = metacache[processor]; funcs.push(function(callback) { self.cache.delete(cached, callback); }); } } async.parallel(funcs, callback); }\n\n    ### Response: Delete all cached entities.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ConstructorInjector<?> get(InjectionPoint constructorInjector, Errors errors) throws ErrorsException { return cache.get(constructorInjector, errors); }\n\n    ### Response:", "ground_truth": "Returns a new complete constructor injector with injection listeners registered.", "predict": "Get an instance of the given constructor from the given cache."}, {"ID": 349, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function addParam(string $name, $value): self { $this->parsedUri->queryString()->addParam($name, $value); return $this; }\n\n    ### Response: add a parameter to the uri\n\n@param   string  $name   name of parameter\n@param   mixed   $value  value of parameter\n@return  \\stubbles\\peer\\Uri.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static boolean hasScope(Class<? extends Interceptor> interceptorClass) { for (Annotation annotation : interceptorClass.getAnnotations()) { if (Annotations.isScopeAnnotation(annotation.annotationType())) { return true; } } return false; }\n\n    ### Response:", "ground_truth": "Returns true if the given class has a scope annotation.", "predict": "\n    Checks if an Interceptor class has been given annotation of annotation-type Scope, and returns true if so, false otherwise."}, {"ID": 350, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (w *ledgerDriver) Close() error { w.browser, w.version = false, [3]byte{} return nil }\n\n    ### Response: // Close implements usbwallet.driver, cleaning up and metadata maintained within\n// the Ledger driver..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static <K, V> RealMapBinder<K, V> newRealMapBinder( Binder binder, TypeLiteral<K> keyType, Key<V> valueTypeAndAnnotation) { binder = binder.skipSources(RealMapBinder.class); TypeLiteral<V> valueType = valueTypeAndAnnotation.getTypeLiteral(); return newRealMapBinder( binder, keyType, valueType, valueTypeAndAnnotation.ofType(mapOf(keyType, valueType)), RealMultibinder.newRealSetBinder( binder, valueTypeAndAnnotation.ofType(entryOfProviderOf(keyType, valueType)))); }\n\n    ### Response:", "ground_truth": "since it's an easy way to group a type and an optional annotation type or instance.", "predict": "// RealMapBinder provides an API to register RealMap using reflection and annotations\n    // Usage: RealMapBinder<Key, Value>.new(Annotation, Class, Class, Class) for registering RealMap for given annotations, Map, Key, Value"}, {"ID": 351, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def com_google_fonts_check_family_panose_familytype(ttFonts): \"\"\"Fonts have consistent PANOSE family type?\"\"\" failed = False familytype = None for ttfont in ttFonts: if familytype is None: familytype = ttfont['OS/2'].panose.bFamilyType if familytype != ttfont['OS/2'].panose.bFamilyType: failed = True if failed: yield FAIL, (\"PANOSE family type is not\" \" the same accross this family.\" \" In order to fix this,\" \" please make sure that the panose.bFamilyType value\" \" is the same in the OS/2 table of all of this family\" \" font files.\") else: yield PASS, \"Fonts have consistent PANOSE family type.\"\n\n    ### Response: Fonts have consistent PANOSE family type?.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    Key<V> getKeyForNewValue(K key) { checkNotNull(key, \"key\"); checkConfiguration(!bindingSelection.isInitialized(), \"MapBinder was already initialized\"); RealMultibinder<Map.Entry<K, Provider<V>>> entrySetBinder = bindingSelection.getEntrySetBinder(); Key<V> valueKey = Key.get( bindingSelection.getValueType(), new RealElement( entrySetBinder.getSetName(), MAPBINDER, bindingSelection.getKeyType().toString())); entrySetBinder.addBinding().toProvider(new ProviderMapEntry<K, V>(key, valueKey)); return valueKey; }\n\n    ### Response:", "ground_truth": "Adds a binding to the map for the given key.", "predict": "Map<K, V> get(K key, RealCallable<V>)"}, {"ID": 352, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Set<K> getUnavailableNodes() { final Set<K> result = new HashSet<K>(); for ( final Map.Entry<K, ManagedItem<Boolean>> entry : _map.entrySet() ) { if ( !entry.getValue()._value.booleanValue() && !isExpired( entry.getValue() ) ) { result.add( entry.getKey() ); } } return result; }\n\n    ### Response: A set of nodes that are stored as unavailable.\n\n@return a set of unavailable nodes, never null..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private T provision(InternalContext context, ConstructionContext<T> constructionContext) throws InternalProvisionException { try { T t; try { Object[] parameters = SingleParameterInjector.getAll(context, parameterInjectors); t = constructionProxy.newInstance(parameters); constructionContext.setProxyDelegates(t); } finally { constructionContext.finishConstruction(); } // Store reference. If an injector re-enters this factory, they'll get the same reference. constructionContext.setCurrentReference(t); MembersInjectorImpl<T> localMembersInjector = membersInjector; localMembersInjector.injectMembers(t, context, false); localMembersInjector.notifyListeners(t); return t; } catch (InvocationTargetException userException) { Throwable cause = userException.getCause() != null ? userException.getCause() : userException; throw InternalProvisionException.errorInjectingConstructor(cause) .addSource(constructionProxy.getInjectionPoint()); } finally { constructionContext.removeCurrentReference(); } }\n\n    ### Response:", "ground_truth": "Provisions a new T.", "predict": "Initiates construction of an instance of an object of type `T` and stores its reference in the ConstructionContext provided during construction of the InternalFactory of this component. If the InternalFactory is invoked again, the same reference is retrieved from the ConstructionContext to complete construction of the objects of type `T` with the parameters provided during construction of the InternalFactory of this component. After construction of objects of type `T` is finished, the reference of objects of type `T` is stored in the ConstructionContext to notify other listeners of the ConstructionContext of objects of type `T` being constructed and to notify other member objects of objects of type `T` being constructed of the change in member objects of objects of type `T` caused by other member objects of objects of type `T` being constructed of the change in member objects of objects of type `T` caused by other member objects of objects of type `T` being constructed of the change in member objects of objects of type `T` caused by other member objects of"}, {"ID": 353, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getAuthorizers($offset = 0, $count = 500) { $params = [ 'component_appid' => $this->app['config']['app_id'], 'offset' => $offset, 'count' => $count, ]; return $this->httpPostJson('cgi-bin/component/api_get_authorizer_list', $params); }\n\n    ### Response: Get authorizer list.\n\n@param int $offset\n@param int $count\n\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Object writeReplace() throws ObjectStreamException { Object[] sourcesAsStrings = sources.toArray(); for (int i = 0; i < sourcesAsStrings.length; i++) { sourcesAsStrings[i] = Errors.convert(sourcesAsStrings[i]).toString(); } return new Message(ImmutableList.copyOf(sourcesAsStrings), message, cause); }\n\n    ### Response:", "ground_truth": "When serialized, we eagerly convert sources to strings. This hurts our formatting, but it\nguarantees that the receiving end will be able to read the message.", "predict": "Override the Object.writeReplace() method to convert objects into serialized objects when serialized."}, {"ID": 354, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_locations_list(self, lower_bound=0, upper_bound=None): \"\"\" Return the internal location list. Args: lower_bound: upper_bound: Returns: \"\"\" real_upper_bound = upper_bound if upper_bound is None: real_upper_bound = self.nbr_of_sub_locations() try: return self._locations_list[lower_bound:real_upper_bound] except: return list()\n\n    ### Response: Return the internal location list.\n\n        Args:\n            lower_bound:\n            upper_bound:\n\n        Returns:.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static Module forModule(Module module) { // avoid infinite recursion, since installing a module always installs itself if (module instanceof CheckedProviderMethodsModule) { return Modules.EMPTY_MODULE; } return new CheckedProviderMethodsModule(module); }\n\n    ### Response:", "ground_truth": "Returns a module which creates bindings for provider methods from the given module.", "predict": "Module forModule() method prevents infinite recursion by ensuring that the parameter, Module, does no longer represent its own Module instance during recursive invocation of this method. It checks first if Module is an instance of CheckedProviderMethodsModule, and if so, returns an empty Module instance. Otherwise, it invokes its internal method to install the given Module and returns its output."}, {"ID": 355, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def header_name_check(header_name): \"\"\" Check header name for validity. Return True if name is valid :param header_name: name to check :return: bool \"\"\" header_match = WHTTPHeaders.header_name_re.match(header_name.encode('us-ascii')) return len(header_name) > 0 and header_match is not None\n\n    ### Response: Check header name for validity. Return True if name is valid\n\n\t\t:param header_name: name to check\n\t\t:return: bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override @SuppressWarnings(\"unchecked\") public Collection<AssistedMethod> getAssistedMethods() { return (Collection<AssistedMethod>) (Collection<?>) assistDataByMethod.values(); }\n\n    ### Response:", "ground_truth": "the collection is immutable.", "predict": "Override to suppress Warnings and to convert to Collection of AssistedMethods instead of Collection of objects"}, {"ID": 356, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (g *Generator) DropLinuxResourcesBlockIOThrottleWriteIOPSDevice(major int64, minor int64) { if g.Config == nil || g.Config.Linux == nil || g.Config.Linux.Resources == nil || g.Config.Linux.Resources.BlockIO == nil { return } throttleDevices := dropBlockIOThrottleDevice(g.Config.Linux.Resources.BlockIO.ThrottleWriteIOPSDevice, major, minor) g.Config.Linux.Resources.BlockIO.ThrottleWriteIOPSDevice = throttleDevices }\n\n    ### Response: // DropLinuxResourcesBlockIOThrottleWriteIOPSDevice drops a item from g.Config.Linux.Resources.BlockIO.ThrottleWriteIOPSDevice..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean isTypeNotSpecified(TypeLiteral<?> typeLiteral, ConfigurationException ce) { Collection<Message> messages = ce.getErrorMessages(); if (messages.size() == 1) { Message msg = Iterables.getOnlyElement(new Errors().keyNotFullySpecified(typeLiteral).getMessages()); return msg.getMessage().equals(Iterables.getOnlyElement(messages).getMessage()); } else { return false; } }\n\n    ### Response:", "ground_truth": "Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully\nspecified.", "predict": "// This method checks if the given typeLiteral and exception Collection contains the exact exception message and ignores other messages in the exception Collection."}, {"ID": 357, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final List<? extends E> get(String hostname) { Entries entries = resolveCache.get(hostname); return entries == null ? null : entries.get(); }\n\n    ### Response: Returns all caches entries for the given hostname..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean constructorHasMatchingParams( TypeLiteral<?> type, Constructor<?> constructor, List<Key<?>> paramList, Errors errors) throws ErrorsException { List<TypeLiteral<?>> params = type.getParameterTypes(constructor); Annotation[][] paramAnnotations = constructor.getParameterAnnotations(); int p = 0; List<Key<?>> constructorKeys = Lists.newArrayList(); for (TypeLiteral<?> param : params) { Key<?> paramKey = Annotations.getKey(param, constructor, paramAnnotations[p++], errors); constructorKeys.add(paramKey); } // Require that every key exist in the constructor to match up exactly. for (Key<?> key : paramList) { // If it didn't exist in the constructor set, we can't use it. if (!constructorKeys.remove(key)) { return false; } } // If any keys remain and their annotation is Assisted, we can't use it. for (Key<?> key : constructorKeys) { if (key.getAnnotationType() == Assisted.class) { return false; } } // All @Assisted params match up to the method's parameters. return true; }\n\n    ### Response:", "ground_truth": "Matching logic for constructors annotated with AssistedInject. This returns true if and only if\nall @Assisted parameters in the constructor exactly match (in any order) all @Assisted\nparameters the method's parameter.", "predict": "Matches all arguments of the constructor to the arguments of the method to ensure proper functioning of the constructor and method"}, {"ID": 358, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (state *UserState) GetToken(username string) (string, error) { return state.users.Get(username, \"token\") }\n\n    ### Response: // GetToken retrieves the token for a user.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Set<Dependency<?>> getDependencies( InjectionPoint ctorPoint, TypeLiteral<?> implementation) { ImmutableSet.Builder<Dependency<?>> builder = ImmutableSet.builder(); builder.addAll(ctorPoint.getDependencies()); if (!implementation.getRawType().isInterface()) { for (InjectionPoint ip : InjectionPoint.forInstanceMethodsAndFields(implementation)) { builder.addAll(ip.getDependencies()); } } return builder.build(); }\n\n    ### Response:", "ground_truth": "Calculates all dependencies required by the implementation and constructor.", "predict": "// GetDependencies retrieves the dependencies of an instance of an object for given constructor parameter and implementation."}, {"ID": 359, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function fetchLocales($available = true) { $available_locales = $this->getAvailableLocales(); $current_locales = $this->translations()->lists('locale')->toArray(); return array_filter($available_locales, function ($v) use ($current_locales, $available) { return $available ? in_array($v, $current_locales) : !in_array($v, $current_locales); }, ARRAY_FILTER_USE_BOTH); }\n\n    ### Response: Get all locales associated with this entity\n\n@param bool $available\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Set<Dependency<?>> removeAssistedDeps(Set<Dependency<?>> deps) { ImmutableSet.Builder<Dependency<?>> builder = ImmutableSet.builder(); for (Dependency<?> dep : deps) { Class<?> annotationType = dep.getKey().getAnnotationType(); if (annotationType == null || !annotationType.equals(Assisted.class)) { builder.add(dep); } } return builder.build(); }\n\n    ### Response:", "ground_truth": "Return all non-assisted dependencies.", "predict": "Remove all annotations of type Assisted from given Set of dependencies\n\n@param Set<Dependency<?>> dependencies The given Set of dependencies to filter\n@return The filtered Set of dependencies with annotations of type Assisted removed\n\nNote: The annotations need to be of exact type, so AnnotationClass{,.*,AnotherAnnotationClass{,.*,AnotherAnnotationClass{,.*}} will produce an error because of the comma and space after AnotherAnnotationClass{,.*,AnotherAnnotationClass{,.*}}"}, {"ID": 360, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewNumberLiteral(pos int, line int, val float64, isInt bool, original string) *NumberLiteral { return &NumberLiteral{ NodeType: NodeNumber, Loc: Loc{pos, line}, Value: val, IsInt: isInt, Original: original, } }\n\n    ### Response: // NewNumberLiteral instanciates a new number node..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean isValidForOptimizedAssistedInject( Set<Dependency<?>> dependencies, Class<?> implementation, TypeLiteral<?> factoryType) { Set<Dependency<?>> badDeps = null; // optimization: create lazily for (Dependency<?> dep : dependencies) { if (isInjectorOrAssistedProvider(dep)) { if (badDeps == null) { badDeps = Sets.newHashSet(); } badDeps.add(dep); } } if (badDeps != null && !badDeps.isEmpty()) { logger.log( Level.WARNING, \"AssistedInject factory {0} will be slow \" + \"because {1} has assisted Provider dependencies or injects the Injector. \" + \"Stop injecting @Assisted Provider<T> (instead use @Assisted T) \" + \"or Injector to speed things up. (It will be a ~6500% speed bump!) \" + \"The exact offending deps are: {2}\", new Object[] {factoryType, implementation, badDeps}); return false; } return true; }\n\n    ### Response:", "ground_truth": "Returns true if all dependencies are suitable for the optimized version of AssistedInject. The\noptimized version caches the binding & uses a ThreadLocal Provider, so can only be applied if\nthe assisted bindings are immediately provided. This looks for hints that the values may be\nlazily retrieved, by looking for injections of Injector or a Provider for the assisted values.", "predict": "// This method creates an optimization to speed up AssistedInject: It creates an // optimizedFactory and keeps track of badDependencies // and speed up the AssistedInject by ignoring the bad // dependencies during the AssistedInjectFactory// inspection of the objects // If there are badDependencies, the method logs // a warning to notify the developer // of the slowdown and offers options to // speed up // If there are no badDependencies, // the method returns true // indicating that speeding // up was possible // If there are badDependencies, // the method returns false // indicating speeding // up wasn't possible"}, {"ID": 361, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def lang(self): \"\"\" Languages this text is in :return: List of available languages \"\"\" return str(self.graph.value(self.asNode(), DC.language))\n\n    ### Response: Languages this text is in\n\n        :return: List of available languages.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Binding<?> getBindingFromNewInjector( final Method method, final Object[] args, final AssistData data) { checkState( injector != null, \"Factories.create() factories cannot be used until they're initialized by Guice.\"); final Key<?> returnType = data.returnType; // We ignore any pre-existing binding annotation. final Key<?> returnKey = Key.get(returnType.getTypeLiteral(), RETURN_ANNOTATION); Module assistedModule = new AbstractModule() { @Override @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) // raw keys are necessary for the args array and return value protected void configure() { Binder binder = binder().withSource(method); int p = 0; if (!data.optimized) { for (Key<?> paramKey : data.paramTypes) { // Wrap in a Provider to cover null, and to prevent Guice from injecting the // parameter binder.bind((Key) paramKey).toProvider(Providers.of(args[p++])); } } else { for (Key<?> paramKey : data.paramTypes) { // Bind to our ThreadLocalProviders. binder.bind((Key) paramKey).toProvider(data.providers.get(p++)); } } Constructor constructor = data.constructor; // Constructor *should* always be non-null here, // but if it isn't, we'll end up throwing a fairly good error // message for the user. if (constructor != null) { binder .bind(returnKey) .toConstructor(constructor, (TypeLiteral) data.implementationType) .in(Scopes.NO_SCOPE); // make sure we erase any scope on the implementation type } } }; Injector forCreate = injector.createChildInjector(assistedModule); Binding<?> binding = forCreate.getBinding(returnKey); // If we have providers cached in data, cache the binding for future optimizations. if (data.optimized) { data.cachedBinding = binding; } return binding; }\n\n    ### Response:", "ground_truth": "Creates a child injector that binds the args, and returns the binding for the method's result.", "predict": "\n    Languages this text is in\n\n        :return: List of available languages\n    Wrap in Provider to cover null\n    Append args to Key to force Guice to look into args (even if args empty)\n    Append args to Key to force Guice to look into args (even if args empty)\n    Append args to Key to force Guice to look into args (even if args empty)\n    Append args to Key to force Guice to look into args (even if args empty)\n    Append args to Key to force Guice to look into args (even if args empty)\n    Append args to Key to force Guice to look into args (even if args empty)\n    Append args to Key to force Guice to look into args (even if args empty)\n    Append args to Key to force Guice to look into args (even if args empty)\n    Append args to Key to force Guice to look into args (even if args empty)\n    Append args to Key to force"}, {"ID": 362, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean persistSet(@Nullable final Set<String> set) { if (set != null && shouldPersist()) { if (set.equals(getPersistedSet(null))) { return true; } Editor editor = getPreferenceManager().getSharedPreferences().edit(); editor.putStringSet(getKey(), set); editor.apply(); return true; } return false; }\n\n    ### Response: Persists a specific set in the shared preferences by using the preference's key.\n\n@param set\nThe set, which should be persisted, as an instance of the type {@link Set}\n@return True, if the given set has been persisted, false otherwise.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Object invoke(Object proxy, final Method method, final Object[] args) throws Throwable { // If we setup a method handle earlier for this method, call it. // This is necessary for default methods that java8 creates, so we // can call the default method implementation (and not our proxied version of it). if (methodHandleByMethod.containsKey(method)) { return methodHandleByMethod.get(method).invokeWithArguments(args); } if (method.getDeclaringClass().equals(Object.class)) { if (\"equals\".equals(method.getName())) { return proxy == args[0]; } else if (\"hashCode\".equals(method.getName())) { return System.identityHashCode(proxy); } else { return method.invoke(this, args); } } AssistData data = assistDataByMethod.get(method); checkState(data != null, \"No data for method: %s\", method); Provider<?> provider; if (data.cachedBinding != null) { // Try to get optimized form... provider = data.cachedBinding.getProvider(); } else { provider = getBindingFromNewInjector(method, args, data).getProvider(); } try { int p = 0; for (ThreadLocalProvider tlp : data.providers) { tlp.set(args[p++]); } return provider.get(); } catch (ProvisionException e) { // if this is an exception declared by the factory method, throw it as-is if (e.getErrorMessages().size() == 1) { Message onlyError = getOnlyElement(e.getErrorMessages()); Throwable cause = onlyError.getCause(); if (cause != null && canRethrow(method, cause)) { throw cause; } } throw e; } finally { for (ThreadLocalProvider tlp : data.providers) { tlp.remove(); } } }\n\n    ### Response:", "ground_truth": "When a factory method is invoked, we create a child injector that binds all parameters, then\nuse that to get an instance of the return type.", "predict": "Invoke the given method of the given object and its proxied version of it, if necessary, and retrieve the result of the invocation"}, {"ID": 363, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def retrieve_certificate_actions(resource_group_name, name, custom_headers:nil) response = retrieve_certificate_actions_async(resource_group_name, name, custom_headers:custom_headers).value! response.body unless response.nil? end\n\n    ### Response: Retrieve the list of certificate actions.\n\n Retrieve the list of certificate actions.\n\n @param resource_group_name [String] Name of the resource group to which the\n resource belongs.\n @param name [String] Name of the certificate order.\n @param custom_headers [Hash{String => String}] A hash of custom headers that\n will be added to the HTTP request.\n\n @return [Array] operation results..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    <T> Errors missingImplementationWithHint(Key<T> key, Injector injector) { StringBuilder sb = new StringBuilder(); sb.append(format(\"No implementation for %s was bound.\", key)); // Keys which have similar strings as the desired key List<String> possibleMatches = new ArrayList<>(); // Check for other keys that may have the same type, // but not the same annotation TypeLiteral<T> type = key.getTypeLiteral(); List<Binding<T>> sameTypes = injector.findBindingsByType(type); if (!sameTypes.isEmpty()) { sb.append(format(\"%n Did you mean?\")); int howMany = Math.min(sameTypes.size(), MAX_MATCHING_TYPES_REPORTED); for (int i = 0; i < howMany; ++i) { // TODO: Look into a better way to prioritize suggestions. For example, possbily // use levenshtein distance of the given annotation vs actual annotation. sb.append(format(\"%n * %s\", sameTypes.get(i).getKey())); } int remaining = sameTypes.size() - MAX_MATCHING_TYPES_REPORTED; if (remaining > 0) { String plural = (remaining == 1) ? \"\" : \"s\"; sb.append(format(\"%n %d more binding%s with other annotations.\", remaining, plural)); } } else { // For now, do a simple substring search for possibilities. This can help spot // issues when there are generics being used (such as a wrapper class) and the // user has forgotten they need to bind based on the wrapper, not the underlying // class. In the future, consider doing a strict in-depth type search. // TODO: Look into a better way to prioritize suggestions. For example, possbily // use levenshtein distance of the type literal strings. String want = type.toString(); Map<Key<?>, Binding<?>> bindingMap = injector.getAllBindings(); for (Key<?> bindingKey : bindingMap.keySet()) { String have = bindingKey.getTypeLiteral().toString(); if (have.contains(want) || want.contains(have)) { Formatter fmt = new Formatter(); Messages.formatSource(fmt, bindingMap.get(bindingKey).getSource()); String match = String.format(\"%s bound%s\", convert(bindingKey), fmt.toString()); possibleMatches.add(match); // TODO: Consider a check that if there are more than some number of results, // don't suggest any. if (possibleMatches.size() > MAX_RELATED_TYPES_REPORTED) { // Early exit if we have found more than we need. break; } } } if ((possibleMatches.size() > 0) && (possibleMatches.size() <= MAX_RELATED_TYPES_REPORTED)) { sb.append(format(\"%n Did you mean?\")); for (String possibleMatch : possibleMatches) { sb.append(format(\"%n %s\", possibleMatch)); } } } // If where are no possibilities to suggest, then handle the case of missing // annotations on simple types. This is usually a bad idea. if (sameTypes.isEmpty() && possibleMatches.isEmpty() && key.getAnnotation() == null && COMMON_AMBIGUOUS_TYPES.contains(key.getTypeLiteral().getRawType())) { // We don't recommend using such simple types without annotations. sb.append(format(\"%nThe key seems very generic, did you forget an annotation?\")); } return addMessage(sb.toString()); }\n\n    ### Response:", "ground_truth": "Within guice's core, allow for better missing binding messages", "predict": "ErrorsMissingImplementationSuggestion(Key<String> key, Injector injector) { StringBuilder sb = new StringBuilder(); sb.append(format(\"Did you mean?\")); int howMany = Math.min(sameTypes.size(), MAX_MATCHING_TYPES_REPORTED); sb.append(format(\"%n* %s\", sameTypes.get(i).getKey())); sb.append(format(\"%n\")); int remaining = sameTypes.size() - MAX_MATCHING_TYPES_REPORTED; sb.append(format(\"%n %d more binding%s with other annotations.\", remaining, sb.format(\"%n\"))) sb.append(format(\"%n\")); return sb.toString(); }"}, {"ID": 364, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(verificationId) { return new Promise((resolve, reject) => { this._start() .uri('/api/user/verify-email') .urlSegment(verificationId) .post() .go(this._responseHandler(resolve, reject)); }); }\n\n    ### Response: Confirms a email verification. The Id given is usually from an email sent to the user.\n\n@param {string} verificationId The email verification id sent to the user.\n@return {Promise} A Promise for the Passport call..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> RealMultibinder<T> newRealSetBinder(Binder binder, Key<T> key) { binder = binder.skipSources(RealMultibinder.class); RealMultibinder<T> result = new RealMultibinder<>(binder, key); binder.install(result); return result; }\n\n    ### Response:", "ground_truth": "Implementation of newSetBinder.", "predict": "Allows the binding of objects to fields of other objects during construction of the objects, to avoid null values during object initialization"}, {"ID": 365, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public com.google.api.ads.admanager.axis.v201811.RichMediaStudioCreativeBillingAttribute getBillingAttribute() { return billingAttribute; }\n\n    ### Response: Gets the billingAttribute value for this BaseRichMediaStudioCreative.\n\n@return billingAttribute   * The billing attribute associated with this creative. This attribute\nis read only..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    Key<T> getKeyForNewItem() { checkConfiguration(!bindingSelection.isInitialized(), \"Multibinder was already initialized\"); return Key.get( bindingSelection.getElementTypeLiteral(), new RealElement(bindingSelection.getSetName(), MULTIBINDER, \"\")); }\n\n    ### Response:", "ground_truth": "Adds a new entry to the set and returns the key for it.", "predict": "Get the Key for the new item for the given bindingSlection. The bindingSlection may be initialized or not and the method may initialize the bindingSlection and its child and and associate item for the given Key and setName"}, {"ID": 366, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def refresh(self): ''' Refresh the contents of the ``_updates`` collection. This gets all updates in the Windows Update system and loads them into the collection. This is the part that is slow. Code Example: .. code-block:: python import salt.utils.win_update wua = salt.utils.win_update.WindowsUpdateAgent() wua.refresh() ''' # https://msdn.microsoft.com/en-us/library/windows/desktop/aa386526(v=vs.85).aspx search_string = 'Type=\\'Software\\' or ' \\ 'Type=\\'Driver\\'' # Create searcher object searcher = self._session.CreateUpdateSearcher() self._session.ClientApplicationID = 'Salt: Load Updates' # Load all updates into the updates collection try: results = searcher.Search(search_string) if results.Updates.Count == 0: log.debug('No Updates found for:\\n\\t\\t%s', search_string) return 'No Updates found: {0}'.format(search_string) except pywintypes.com_error as error: # Something happened, raise an error hr, msg, exc, arg = error.args # pylint: disable=W0633 try: failure_code = self.fail_codes[exc[5]] except KeyError: failure_code = 'Unknown Failure: {0}'.format(error) log.error('Search Failed: %s\\n\\t\\t%s', failure_code, search_string) raise CommandExecutionError(failure_code) self._updates = results.Updates\n\n    ### Response: Refresh the contents of the ``_updates`` collection. This gets all\n        updates in the Windows Update system and loads them into the collection.\n        This is the part that is slow.\n\n        Code Example:\n\n        .. code-block:: python\n\n            import salt.utils.win_update\n            wua = salt.utils.win_update.WindowsUpdateAgent()\n            wua.refresh().\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Filter findNextFilter(HttpServletRequest request) { while (++index < filterDefinitions.length) { Filter filter = filterDefinitions[index].getFilterIfMatching(request); if (filter != null) { return filter; } } return null; }\n\n    ### Response:", "ground_truth": "Iterates over the remaining filter definitions. Returns the first applicable filter, or null if\nnone apply.", "predict": "The above method iterates over an array of Filter objects to\n    /// locate the first Filter that matches the given HTTP request. If\n    /// there is no Filter that matches the given HTTP request, the default\n    /// behavior of the servlet container may be used to handle the request.\n    /// If a Filter matches the given HTTP request, its Filter method may\n    /// be invoked to modify the HTTP response objects prior to sending\n    /// them to the client application."}, {"ID": 367, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def Var(poly, dist=None, **kws): \"\"\" Element by element 2nd order statistics. Args: poly (Poly, Dist): Input to take variance on. dist (Dist): Defines the space the variance is taken on. It is ignored if ``poly`` is a distribution. Returns: (numpy.ndarray): Element for element variance along ``poly``, where ``variation.shape == poly.shape``. Examples: >>> dist = chaospy.J(chaospy.Gamma(1, 1), chaospy.Normal(0, 2)) >>> print(chaospy.Var(dist)) [1. 4.] >>> x, y = chaospy.variable(2) >>> poly = chaospy.Poly([1, x, y, 10*x*y]) >>> print(chaospy.Var(poly, dist)) [ 0. 1. 4. 800.] \"\"\" if isinstance(poly, distributions.Dist): x = polynomials.variable(len(poly)) poly, dist = x, poly else: poly = polynomials.Poly(poly) dim = len(dist) if poly.dim<dim: polynomials.setdim(poly, dim) shape = poly.shape poly = polynomials.flatten(poly) keys = poly.keys N = len(keys) A = poly.A keys1 = numpy.array(keys).T if dim==1: keys1 = keys1[0] keys2 = sum(numpy.meshgrid(keys, keys)) else: keys2 = numpy.empty((dim, N, N)) for i in range(N): for j in range(N): keys2[:, i, j] = keys1[:, i]+keys1[:, j] m1 = numpy.outer(*[dist.mom(keys1, **kws)]*2) m2 = dist.mom(keys2, **kws) mom = m2-m1 out = numpy.zeros(poly.shape) for i in range(N): a = A[keys[i]] out += a*a*mom[i, i] for j in range(i+1, N): b = A[keys[j]] out += 2*a*b*mom[i, j] out = out.reshape(shape) return out\n\n    ### Response: Element by element 2nd order statistics.\n\n    Args:\n        poly (Poly, Dist):\n            Input to take variance on.\n        dist (Dist):\n            Defines the space the variance is taken on. It is ignored if\n            ``poly`` is a distribution.\n\n    Returns:\n        (numpy.ndarray):\n            Element for element variance along ``poly``, where\n            ``variation.shape == poly.shape``.\n\n    Examples:\n        >>> dist = chaospy.J(chaospy.Gamma(1, 1), chaospy.Normal(0, 2))\n        >>> print(chaospy.Var(dist))\n        [1. 4.]\n        >>> x, y = chaospy.variable(2)\n        >>> poly = chaospy.Poly([1, x, y, 10*x*y])\n        >>> print(chaospy.Var(poly, dist))\n        [  0.   1.   4. 800.].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static boolean hasAtInject(Constructor cxtor) { return cxtor.isAnnotationPresent(Inject.class) || cxtor.isAnnotationPresent(javax.inject.Inject.class); }\n\n    ### Response:", "ground_truth": "Returns true if the inject annotation is on the constructor.", "predict": "The given java Code provides information about whether or not the given constructor has been annotated with the annotations, Inject or javax.inject.Inject respectively. It checks for the presence of the annotations on the given constructor to determine whether or not the constructor meets the criteria of being an annotated constructor, i.e., capable of taking in arguments and thus capable of being used in DI(Dependency Injection). It returns true if the constructor meets the criteria and false otherwise."}, {"ID": 368, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function checkIdField() { if(is_null($this->headers)) { return; } if(in_array($this->idField, $this->headers)) { return; } foreach($this->headers as $header) { if(strtolower($this->idField) == strtolower($header)) { $this->setIdField($header); } } }\n\n    ### Response: Check the header line for variations on the default ID field name, fixing\nthe case of the ID field..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    InjectionPoint getInternalConstructor() { if (factory.constructorInjector != null) { return factory.constructorInjector.getConstructionProxy().getInjectionPoint(); } else { return constructorInjectionPoint; } }\n\n    ### Response:", "ground_truth": "Returns an injection point that can be used to clean up the constructor store.", "predict": "InjectionPoint for internal constructor, or default constructor if none defined"}, {"ID": 369, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function numberOfSubGraph(): int { if (null === $this->getNodes()) return 0; $c = 0; $v = new ArrayList(); foreach ($this->getNodes() as $node) { if ($v->containsValue($node)) continue; $c++; $this->flood($node, $v); } return $c; }\n\n    ### Response: returns the number of sub graphs\n\n@return int.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    Set<Dependency<?>> getInternalDependencies() { ImmutableSet.Builder<InjectionPoint> builder = ImmutableSet.builder(); if (factory.constructorInjector == null) { builder.add(constructorInjectionPoint); // If the below throws, it's OK -- we just ignore those dependencies, because no one // could have used them anyway. try { builder.addAll( InjectionPoint.forInstanceMethodsAndFields( constructorInjectionPoint.getDeclaringType())); } catch (ConfigurationException ignored) { } } else { builder.add(getConstructor()).addAll(getInjectableMembers()); } return Dependency.forInjectionPoints(builder.build()); }\n\n    ### Response:", "ground_truth": "Returns a set of dependencies that can be iterated over to clean up stray JIT bindings.", "predict": "Get the internal dependencies of the given object"}, {"ID": 370, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void parseFile(File file) throws Exception { int lineNumber = 1; String line = null; BufferedReader in = null; try { in = new BufferedReader(new FileReader(file)); List<TZDBZone> openZone = null; for ( ; (line = in.readLine()) != null; lineNumber++) { int index = line.indexOf('#'); // remove comments (doesn't handle # in quotes) if (index >= 0) { line = line.substring(0, index); } if (line.trim().length() == 0) { // ignore blank lines continue; } StringTokenizer st = new StringTokenizer(line, \" \\t\"); if (openZone != null && Character.isWhitespace(line.charAt(0)) && st.hasMoreTokens()) { if (parseZoneLine(st, openZone)) { openZone = null; } } else { if (st.hasMoreTokens()) { String first = st.nextToken(); if (first.equals(\"Zone\")) { if (st.countTokens() < 3) { printVerbose(\"Invalid Zone line in file: \" + file + \", line: \" + line); throw new IllegalArgumentException(\"Invalid Zone line\"); } openZone = new ArrayList<TZDBZone>(); zones.put(st.nextToken(), openZone); if (parseZoneLine(st, openZone)) { openZone = null; } } else { openZone = null; if (first.equals(\"Rule\")) { if (st.countTokens() < 9) { printVerbose(\"Invalid Rule line in file: \" + file + \", line: \" + line); throw new IllegalArgumentException(\"Invalid Rule line\"); } parseRuleLine(st); } else if (first.equals(\"Link\")) { if (st.countTokens() < 2) { printVerbose(\"Invalid Link line in file: \" + file + \", line: \" + line); throw new IllegalArgumentException(\"Invalid Link line\"); } String realId = st.nextToken(); String aliasId = st.nextToken(); links.put(aliasId, realId); } else { throw new IllegalArgumentException(\"Unknown line\"); } } } } } } catch (Exception ex) { throw new Exception(\"Failed while processing file '\" + file + \"' on line \" + lineNumber + \" '\" + line + \"'\", ex); } finally { if (in != null) { in.close(); } } }\n\n    ### Response: Parses a source file.\n\n@param file  the file being read, not null\n@throws Exception if an error occurs.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Module forModule(Object module, ModuleAnnotatedMethodScanner scanner) { return forObject(module, false, scanner); }\n\n    ### Response:", "ground_truth": "Returns a module which creates bindings methods in the module that match the scanner.", "predict": "Parses a source file to generate information about its annotations, such as method parameters, annotations, arguments, return values, parameter annotations, parameter values, parameter annotations values, annotations values, annotations values annotations values and annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations values annotations"}, {"ID": 371, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *PCPCounterVector) SetAll(val int64) { for ins := range c.indom.instances { c.MustSet(val, ins) } }\n\n    ### Response: // SetAll sets all instances to the same value and panics on an error..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Annotation getAnnotation(Binder binder, Method method) { if (method.isBridge() || method.isSynthetic()) { return null; } Annotation annotation = null; for (Class<? extends Annotation> annotationClass : scanner.annotationClasses()) { Annotation foundAnnotation = method.getAnnotation(annotationClass); if (foundAnnotation != null) { if (annotation != null) { binder.addError( \"More than one annotation claimed by %s on method %s.\" + \" Methods can only have one annotation claimed per scanner.\", scanner, method); return null; } annotation = foundAnnotation; } } return annotation; }\n\n    ### Response:", "ground_truth": "Returns the annotation that is claimed by the scanner, or null if there is none.", "predict": "// This function scans annotation on method and checks if there any ambiguity of annotations and returns the proper annotation for given method."}, {"ID": 372, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <K> Map<K, Integer> rankMapOnIntegerValue(Map<K, Integer> inputMap) { Map<K, Integer> newMap = new TreeMap<K, Integer>(new IntegerValueComparator(inputMap)); newMap.putAll(inputMap); Map<K, Integer> linkedMap = new LinkedHashMap<K, Integer>(newMap); return linkedMap; }\n\n    ### Response: Ranks a map based on integer values\n@param inputMap Input\n@return The ranked map.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Integer getLineNumber(Member member) { Preconditions.checkArgument( type == member.getDeclaringClass(), \"Member %s belongs to %s, not %s\", member, member.getDeclaringClass(), type); return lines.get(memberKey(member)); }\n\n    ### Response:", "ground_truth": "Get the line number associated with the given member.\n\n@param member a field, constructor, or method belonging to the class used during construction\n@return the wrapped line number, or null if not available\n@throws IllegalArgumentException if the member does not belong to the class used during\nconstruction", "predict": "Get the line number of the given member, given the member's declaring class\nPreferece arguments to the method to ensure proper classification of the given member\nRetrun the corresponding line number in the given member's source code"}, {"ID": 373, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function index($listener) { $eloquent = $this->model->newQuery(); $table = $this->presenter->table($eloquent); $this->fireEvent('list', [$eloquent, $table]); // Once all event listening to `orchestra.list: role` is executed, // we can add we can now add the final column, edit and delete // action for roles. $this->presenter->actions($table); return $listener->indexSucceed(compact('eloquent', 'table')); }\n\n    ### Response: View list roles page.\n\n@param  object  $listener\n\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void initialize(Errors errors) { injector.lookups = injector; new LookupProcessor(errors).process(injector, lookups); }\n\n    ### Response:", "ground_truth": "Initialize the specified lookups, either immediately or when the injector is created.", "predict": "Initialize the LookupProcessor and prepare the Lookups for processing."}, {"ID": 374, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function print($row_key) { $this->calculateDimensions(); $result = ''; if ($this->getPrintHeader()) { $result .= $this->printHeader(); } else { $result .= $this->printRowLine(); } if (! is_null($row_key)) { $result .= $this->printRow($row_key, $this->getRows()[$row_key]); } else { foreach ($this->getRows() as $key => $data) { $result .= $this->printRow($key, $data); } } $result .= $this->printRowLine(false); return $result; }\n\n    ### Response: Prints the data to a text table\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Deprecated public static <T> Callable<T> continueRequest(Callable<T> callable, Map<Key<?>, Object> seedMap) { return wrap(callable, continueRequest(seedMap)); }\n\n    ### Response:", "ground_truth": "Wraps the given callable in a contextual callable that \"continues\" the HTTP request in another\nthread. This acts as a way of transporting request context data from the request processing\nthread to to worker threads.\n\nThere are some limitations:\n\n\nDerived objects (i.e. anything marked @RequestScoped will not be transported.\nState changes to the HttpServletRequest after this method is called will not be seen in the\ncontinued thread.\nOnly the HttpServletRequest, ServletContext and request parameter map are available in the\ncontinued thread. The response and session are not available.\n\nThe returned callable will throw a {@link ScopingException} when called if the HTTP request\nscope is still active on the current thread.\n\n@param callable code to be executed in another thread, which depends on the request scope.\n@param seedMap the initial set of scoped instances for Guice to seed the request scope with. To\nseed a key with null, use {@code null} as the value.\n@return a callable that will invoke the given callable, making the request context available to\nit.\n@throws OutOfScopeException if this method is called from a non-request thread, or if the\nrequest has completed.\n@since 3.0\n@deprecated You probably want to use {@code transferRequest} instead", "predict": "Wrap the given callable to extend its life time to the life time of the wrapper and supply the given arguments to the original callable for its continued execution"}, {"ID": 375, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewSourcesStore(s chronograf.SourcesStore, org string) *SourcesStore { return &SourcesStore{ store: s, organization: org, } }\n\n    ### Response: // NewSourcesStore creates a new SourcesStore from an existing\n// chronograf.SourceStore and an organization string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> Callable<T> transferRequest(Callable<T> callable) { return wrap(callable, transferRequest()); }\n\n    ### Response:", "ground_truth": "Wraps the given callable in a contextual callable that \"transfers\" the request to another\nthread. This acts as a way of transporting request context data from the current thread to a\nfuture thread.\n\nAs opposed to {@link #continueRequest}, this method propagates all existing scoped objects.\nThe primary use case is in server implementations where you can detach the request processing\nthread while waiting for data, and reattach to a different thread to finish processing at a\nlater time.\n\nBecause request-scoped objects are not typically thread-safe, the callable returned by this\nmethod must not be run on a different thread until the current request scope has terminated.\nThe returned callable will block until the current thread has released the request scope.\n\n@param callable code to be executed in another thread, which depends on the request scope.\n@return a callable that will invoke the given callable, making the request context available to\nit.\n@throws OutOfScopeException if this method is called from a non-request thread, or if the\nrequest has completed.\n@since 4.0", "predict": "// This method wraps another callable to add transfer functionality to it\n    // It takes in a single parameter, the source callable to wrap,\n    // and returns a new wrapper around it with transfer functionality\n    // invoked during execution of the wrapper"}, {"ID": 376, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void saveRecord(final ORecordInternal<?> iRecord, final String iClusterName, final OPERATION_MODE iMode, final ORecordCallback<? extends Number> iCallback) { try { database.executeSaveRecord(iRecord, iClusterName, iRecord.getVersion(), iRecord.getRecordType(), true, iMode, iCallback); } catch (Exception e) { // REMOVE IT FROM THE CACHE TO AVOID DIRTY RECORDS final ORecordId rid = (ORecordId) iRecord.getIdentity(); if (rid.isValid()) database.getLevel1Cache().freeRecord(rid); if (e instanceof RuntimeException) throw (RuntimeException) e; throw new OException(e); } }\n\n    ### Response: Update the record.\n\n@param iCallback.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static Object validateAndCanonicalizeValue(Key<?> key, Object object) { if (object == null || object == NullObject.INSTANCE) { return NullObject.INSTANCE; } if (!key.getTypeLiteral().getRawType().isInstance(object)) { throw new IllegalArgumentException( \"Value[\" + object + \"] of type[\" + object.getClass().getName() + \"] is not compatible with key[\" + key + \"]\"); } return object; }\n\n    ### Response:", "ground_truth": "Validates the key and object, ensuring the value matches the key type, and canonicalizing null\nobjects to the null sentinel.", "predict": "Validates the given Object and converts it to the canonicalized form of the given Key."}, {"ID": 377, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function() { var oldViews = this.getItemViews(); var newViews = this.__createItemViews(); var staleViews = this.__getStaleItemViews(); var sizeOfOldViews = _.size(oldViews); var sizeOfNewViews = _.size(newViews); var sizeOfStaleViews = _.size(staleViews); var sizeOfFinalViews = sizeOfOldViews - sizeOfStaleViews + sizeOfNewViews; var changes = sizeOfNewViews + sizeOfStaleViews; var percentChange = changes / Math.max(sizeOfFinalViews, 1); var fromEmptyToNotEmpty = !sizeOfOldViews && sizeOfNewViews; var fromNotEmptyToEmpty = sizeOfOldViews && sizeOfOldViews === sizeOfStaleViews && !sizeOfNewViews; var threshold = this.updateThreshold || 0.5; var signficantChanges = percentChange >= threshold; if (changes <= 0) { return this.reorder(); } // A switch from empty to not empty or vise versa, needs a new render var renderNeeded = fromEmptyToNotEmpty || fromNotEmptyToEmpty || signficantChanges; if (renderNeeded) { this.__removeStaleItemViews(staleViews); this.__delayedRender(); } else { this.__updateByAddingRemoving(oldViews, newViews, staleViews); } }\n\n    ### Response: Builds any new views, removes stale ones, and re-renders\n@method update.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") // the MembersInjector type always agrees with the passed type public <T> MembersInjectorImpl<T> get(TypeLiteral<T> key, Errors errors) throws ErrorsException { return (MembersInjectorImpl<T>) cache.get(key, errors); }\n\n    ### Response:", "ground_truth": "Returns a new complete members injector with injection listeners registered.", "predict": "The given method retrieves an instance of the given member from the member injector cache or creates and stores an instance in the cache if it does not exist. It accepts an error listener for error handling during the retrieval of the member."}, {"ID": 378, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def postprocessor(prediction): \"\"\"Map prediction tensor to labels.\"\"\" prediction = prediction.data.numpy()[0] top_predictions = prediction.argsort()[-3:][::-1] return [labels[prediction] for prediction in top_predictions]\n\n    ### Response: Map prediction tensor to labels..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private <T> MembersInjectorImpl<T> createWithListeners(TypeLiteral<T> type, Errors errors) throws ErrorsException { int numErrorsBefore = errors.size(); Set<InjectionPoint> injectionPoints; try { injectionPoints = InjectionPoint.forInstanceMethodsAndFields(type); } catch (ConfigurationException e) { errors.merge(e.getErrorMessages()); injectionPoints = e.getPartialValue(); } ImmutableList<SingleMemberInjector> injectors = getInjectors(injectionPoints, errors); errors.throwIfNewErrors(numErrorsBefore); EncounterImpl<T> encounter = new EncounterImpl<>(errors, injector.lookups); Set<TypeListener> alreadySeenListeners = Sets.newHashSet(); for (TypeListenerBinding binding : typeListenerBindings) { TypeListener typeListener = binding.getListener(); if (!alreadySeenListeners.contains(typeListener) && binding.getTypeMatcher().matches(type)) { alreadySeenListeners.add(typeListener); try { typeListener.hear(type, encounter); } catch (RuntimeException e) { errors.errorNotifyingTypeListener(binding, type, e); } } } encounter.invalidate(); errors.throwIfNewErrors(numErrorsBefore); return new MembersInjectorImpl<T>(injector, type, encounter, injectors); }\n\n    ### Response:", "ground_truth": "Creates a new members injector and attaches both injection listeners and method aspects.", "predict": "Map prediction tensor to labels.."}, {"ID": 379, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    async function imageCompression (file, options) { let compressedFile options.maxSizeMB = options.maxSizeMB || Number.POSITIVE_INFINITY options.useWebWorker = typeof options.useWebWorker === 'boolean' ? options.useWebWorker : true if (!(file instanceof Blob || file instanceof File)) { throw new Error('The file given is not an instance of Blob or File') } else if (!/^image/.test(file.type)) { throw new Error('The file given is not an image') } // try run in web worker, fall back to run in main thread const inWebWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope // if (inWebWorker) { // console.log('run compression in web worker') // } else { // console.log('run compression in main thread') // } if (options.useWebWorker && typeof Worker === 'function' && !inWebWorker) { try { // \"compressOnWebWorker\" is kind of like a recursion to call \"imageCompression\" again inside web worker compressedFile = await compressOnWebWorker(file, options) } catch (e) { // console.error('run compression in web worker failed', e) compressedFile = await compress(file, options) } } else { compressedFile = await compress(file, options) } try { compressedFile.name = file.name compressedFile.lastModified = file.lastModified } catch (e) {} return compressedFile }\n\n    ### Response: Compress an image file.\n\n@param {File} file\n@param {Object} options - { maxSizeMB=Number.POSITIVE_INFINITY, maxWidthOrHeight, useWebWorker=true, maxIteration = 10, exifOrientation }\n@param {number} [options.maxSizeMB=Number.POSITIVE_INFINITY]\n@param {number} [options.maxWidthOrHeight=undefined] * @param {number} [options.maxWidthOrHeight=undefined]\n@param {boolean} [options.useWebWorker=true]\n@param {number} [options.maxIteration=10]\n@param {number} [options.exifOrientation=] - default to be the exif orientation from the image file\n@returns {Promise}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    ImmutableList<SingleMemberInjector> getInjectors( Set<InjectionPoint> injectionPoints, Errors errors) { List<SingleMemberInjector> injectors = Lists.newArrayList(); for (InjectionPoint injectionPoint : injectionPoints) { try { Errors errorsForMember = injectionPoint.isOptional() ? new Errors(injectionPoint) : errors.withSource(injectionPoint); SingleMemberInjector injector = injectionPoint.getMember() instanceof Field ? new SingleFieldInjector(this.injector, injectionPoint, errorsForMember) : new SingleMethodInjector(this.injector, injectionPoint, errorsForMember); injectors.add(injector); } catch (ErrorsException ignoredForNow) { // ignored for now } } return ImmutableList.copyOf(injectors); }\n\n    ### Response:", "ground_truth": "Returns the injectors for the specified injection points.", "predict": "Get immutable list of SingleMemberInjectors for specified objects and error objects."}, {"ID": 380, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function loadUsers (startId, orgId, teamId, callback) { // insert users console.log('inserting users ' + startId + ' to ' + (startId + NUM_USERS_PER_TEAM - 1) + ' into team: ' + teamId) var userSql = 'INSERT INTO users (id, name, org_id, metadata)\\nVALUES\\n' var userTeamSql = 'INSERT INTO team_members (user_id, team_id)\\nVALUES\\n' for (var id = startId; id < (startId + NUM_USERS_PER_TEAM); id++) { userSql += \"('\" + id + \"', 'USER_\" + id + \"', '\" + orgId + \"',\" + getMetaData(id, orgId) + ')' userTeamSql += \"('\" + id + \"', '\" + teamId + \"')\" if (id === startId + NUM_USERS_PER_TEAM - 1) { userSql += ';' userTeamSql += ';' } else { userSql += ',\\n' userTeamSql += ',\\n' } } var fixturesSQL = 'BEGIN;\\n' fixturesSQL += userSql + '\\n' fixturesSQL += userTeamSql + '\\n' fixturesSQL += 'COMMIT;\\n' client.query(fixturesSQL, function (err, result) { if (err) { callback(err) } else { console.log(chalk.green('success inserting users ' + startId + ' to ' + (startId + NUM_USERS_PER_TEAM - 1))) if (teamId < NUM_TEAMS + TEAM_START_ID - 1) { loadUsers(id, orgId, teamId + 1, callback) } else { loadVolumeDataEnd(callback) } } }) }\n\n    ### Response: insert users and add them to teams in batches.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static <T> Key<T> get(Class<T> type, AnnotationStrategy annotationStrategy) { return new Key<T>(type, annotationStrategy); }\n\n    ### Response:", "ground_truth": "Gets a key for an injection type and an annotation strategy.", "predict": "Get an instance of an ordered Map to store the annotations for the given parameterized type."}, {"ID": 381, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function editResourceGroup($groupName, array $resources) { $this->validateResourceGroupName($groupName); return $this->getCommand('EditResourceGroup', array( 'groupName' => $groupName, 'resources' => json_encode($resources), ))->execute(); }\n\n    ### Response: Edit a resource group\n\nNote: If the resource group does not already exist, it will be created\n\n@param string $groupName Name of the group to edit\n@param array $resources Array of resource names the group should contain\n@return Model\n@throws InvalidArgumentException Thrown when group name is invalid or group already exists.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static AnnotationStrategy strategyFor(Annotation annotation) { checkNotNull(annotation, \"annotation\"); Class<? extends Annotation> annotationType = annotation.annotationType(); ensureRetainedAtRuntime(annotationType); ensureIsBindingAnnotation(annotationType); if (Annotations.isMarker(annotationType)) { return new AnnotationTypeStrategy(annotationType, annotation); } return new AnnotationInstanceStrategy(Annotations.canonicalizeIfNamed(annotation)); }\n\n    ### Response:", "ground_truth": "Gets the strategy for an annotation.", "predict": "Get annotation for given annotation string\n    Use annotation for given annotation string to retrieve its annotation\n    Use annotations for given annotation string to retrieve annotations of the annotation string\n    Use annotations for given annotation string to retrieve annotations of the annotation string"}, {"ID": 382, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_basis(name, elements=None, version=None, fmt=None, uncontract_general=False, uncontract_spdf=False, uncontract_segmented=False, make_general=False, optimize_general=False, data_dir=None, header=True): '''Obtain a basis set This is the main function for getting basis set information. This function reads in all the basis data and returns it either as a string or as a python dictionary. Parameters ---------- name : str Name of the basis set. This is not case sensitive. elements : str or list List of elements that you want the basis set for. Elements can be specified by Z-number (int or str) or by symbol (str). If this argument is a str (ie, '1-3,7-10'), it is expanded into a list. Z numbers and symbols (case insensitive) can be used interchangeably (see :func:`bse.misc.expand_elements`) If an empty string or list is passed, or if None is passed (the default), all elements for which the basis set is defined are included. version : int or str Obtain a specific version of this basis set. By default, the latest version is returned. fmt: str The desired output format of the basis set. By default, basis set information is returned as a python dictionary. Otherwise, if a format is specified, a string is returned. Use :func:`bse.api.get_formats` to programmatically obtain the available formats. The `fmt` argument is not case sensitive. Available formats are * nwchem * gaussian94 * psi4 * gamess_us * turbomole * json uncontract_general : bool If True, remove general contractions by duplicating the set of primitive exponents with each vector of coefficients. Primitives with zero coefficient are removed, as are duplicate shells. uncontract_spdf : bool If True, remove general contractions with combined angular momentum (sp, spd, etc) by duplicating the set of primitive exponents with each vector of coefficients. Primitives with zero coefficient are removed, as are duplicate shells. uncontract_segmented : bool If True, remove segmented contractions by duplicating each primitive into new shells. Each coefficient is set to 1.0 make_general : bool If True, make the basis set as generally-contracted as possible. There will be one shell per angular momentum (for each element) optimize_general : bool Optimize by removing general contractions that contain uncontracted functions (see :func:`bse.manip.optimize_general`) data_dir : str Data directory with all the basis set information. By default, it is in the 'data' subdirectory of this project. Returns ------- str or dict The basis set in the desired format. If `fmt` is **None**, this will be a python dictionary. Otherwise, it will be a string. ''' data_dir = fix_data_dir(data_dir) bs_data = _get_basis_metadata(name, data_dir) # If version is not specified, use the latest if version is None: version = bs_data['latest_version'] else: version = str(version) # Version may be an int if not version in bs_data['versions']: raise KeyError(\"Version {} does not exist for basis {}\".format(version, name)) # Compose the entire basis set (all elements) file_relpath = bs_data['versions'][version]['file_relpath'] basis_dict = compose.compose_table_basis(file_relpath,\n\n    ### Response: Obtain a basis set\n\n    This is the main function for getting basis set information.\n    This function reads in all the basis data and returns it either\n    as a string or as a python dictionary.\n\n    Parameters\n    ----------\n    name : str\n        Name of the basis set. This is not case sensitive.\n    elements : str or list\n        List of elements that you want the basis set for.\n        Elements can be specified by Z-number (int or str) or by symbol (str).\n        If this argument is a str (ie, '1-3,7-10'), it is expanded into a list.\n        Z numbers and symbols (case insensitive) can be used interchangeably\n        (see :func:`bse.misc.expand_elements`)\n\n        If an empty string or list is passed, or if None is passed (the default),\n        all elements for which the basis set is defined are included.\n    version : int or str\n        Obtain a specific version of this basis set. By default,\n        the latest version is returned.\n    fmt: str\n        The desired output format of the basis set. By default,\n        basis set information is returned as a python dictionary. Otherwise,\n        if a format is specified, a string is returned.\n        Use :func:`bse.api.get_formats` to programmatically obtain the available\n        formats.  The `fmt` argument is not case sensitive.\n\n        Available formats are\n\n            * nwchem\n            * gaussian94\n            * psi4\n            * gamess_us\n            * turbomole\n            * json\n\n    uncontract_general : bool\n        If True, remove general contractions by duplicating the set\n        of primitive exponents with each vector of coefficients.\n        Primitives with zero coefficient are removed, as are duplicate shells.\n    uncontract_spdf : bool\n        If True, remove general contractions with combined angular momentum (sp, spd, etc)\n        by duplicating the set of primitive exponents with each vector of coefficients.\n        Primitives with zero coefficient are removed, as are duplicate shells.\n    uncontract_segmented.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static AnnotationStrategy strategyFor(Class<? extends Annotation> annotationType) { annotationType = Annotations.canonicalizeIfNamed(annotationType); if (isAllDefaultMethods(annotationType)) { return strategyFor(generateAnnotation(annotationType)); } checkNotNull(annotationType, \"annotation type\"); ensureRetainedAtRuntime(annotationType); ensureIsBindingAnnotation(annotationType); return new AnnotationTypeStrategy(annotationType, null); }\n\n    ### Response:", "ground_truth": "Gets the strategy for an annotation type.", "predict": "The annotation processor generates binding annotations for fields, method parameters, constructor parameters, and so on of the classes annotated with annotations, such as @Visible, @NotNull, and @Required, to enable compile time error checking of annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of the annotations of"}, {"ID": 383, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function buildColumnMap() { $content = ' return $this->columnMapMissingColumnsFix(array(' . \"\\n\"; foreach($this->getFields() as $field) { $content .= ' \\'' . $field->getName() . '\\' => \\'' . $field->getShortName() . '\\',' . \"\\n\"; } $content = substr($content, 0, -2) . \"\\n\"; //Remove trailing comma $content .= ' ));'; $method = new Object\\Method(); $method->setAccess('public'); $method->setDescription('Updates so we can use the shortened names, without changing the database'); $method->setName('columnMap'); $method->setReturnType('string[] keys are the real names, values are the names in the application'); $method->setContent($content); $this->getAbstractClass()->addMethod($method); $this->getAbstractClass()->addUse('Phalcon\\Db\\Column'); $content = ' return ['; foreach($this->getFields() as $field) { $content .= ' \\'' . $field->getShortName() . '\\' => Column::' . $field->getPhalconColumnType() . ',' . \"\\n\"; } $content .= ' ];'; $method = new Object\\Method(); $method->setAccess('public'); $method->setDescription('Used for determining the database type'); $method->setName('getDatabaseTypes'); $method->setReturnType('string[] keys are the column names, values are the DB\\Column'); $method->setContent($content); $this->getAbstractClass()->addMethod($method); }\n\n    ### Response: Builds the column maps\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void pruneStacktrace(Throwable throwable) { for (Throwable t = throwable; t != null; t = t.getCause()) { StackTraceElement[] stackTrace = t.getStackTrace(); List<StackTraceElement> pruned = Lists.newArrayList(); for (StackTraceElement element : stackTrace) { String className = element.getClassName(); if (!AOP_INTERNAL_CLASSES.contains(className) && !className.contains(\"$EnhancerByGuice$\")) { pruned.add(element); } } t.setStackTrace(pruned.toArray(new StackTraceElement[pruned.size()])); } }\n\n    ### Response:", "ground_truth": "Removes stacktrace elements related to AOP internal mechanics from the throwable's stack trace\nand any causes it may have.", "predict": "Prune the Stacktrace"}, {"ID": 384, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _done_callback(self, wrapped): \"\"\"Internal \"done callback\" to set the result of the object. The result of the object if forced by the wrapped future. So this internal callback must be called when the wrapped future is ready. Args: wrapped (Future): the wrapped Future object \"\"\" if wrapped.exception(): self.set_exception(wrapped.exception()) else: self.set_result(wrapped.result())\n\n    ### Response: Internal \"done callback\" to set the result of the object.\n\n        The result of the object if forced by the wrapped future. So this\n        internal callback must be called when the wrapped future is ready.\n\n        Args:\n            wrapped (Future): the wrapped Future object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getBindingSource() { if (source instanceof Class) { return StackTraceElements.forType((Class) source).toString(); } else if (source instanceof Member) { return StackTraceElements.forMember((Member) source).toString(); } else { return source.toString(); } }\n\n    ### Response:", "ground_truth": "Returns a string describing where this dependency was bound. If the binding was just-in-time,\nthere is no valid binding source, so this describes the class in question.", "predict": "The binding source of the objects can be retrieved by inspecting its StackTraceElements objects or its Members objects or its string representations of objects directly."}, {"ID": 385, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_ddG_results(self): \"\"\"Parse the results from BuildModel and get the delta delta G's. A positive ddG means that the mutation(s) is destabilzing, negative means stabilizing. - highly stabilising (\u0394\u0394G < \u22121.84 kcal/mol); - stabilising (\u22121.84 kcal/mol \u2264 \u0394\u0394G < \u22120.92 kcal/mol); - slightly stabilising (\u22120.92 kcal/mol \u2264 \u0394\u0394G < \u22120.46 kcal/mol); - neutral (\u22120.46 kcal/mol < \u0394\u0394G \u2264 +0.46 kcal/mol); - slightly destabilising (+0.46 kcal/mol < \u0394\u0394G \u2264 +0.92 kcal/mol); - destabilising (+0.92 kcal/mol < \u0394\u0394G \u2264 +1.84 kcal/mol); - highly destabilising (\u0394\u0394G > +1.84 kcal/mol). Returns: dict: Dictionary of mutation group to predicted ddG. \"\"\" foldx_avg_df = self.df_mutation_ddG_avg foldx_avg_ddG = {} results = foldx_avg_df[['Pdb', 'total energy', 'SD']].T.to_dict().values() for r in results: ident = r['Pdb'].split('_')[-1] ddG = r['total energy'] ddG_sd = r['SD'] foldx_avg_ddG[self.mutation_index_to_group[int(ident)]] = (ddG, ddG_sd) return foldx_avg_ddG\n\n    ### Response: Parse the results from BuildModel and get the delta delta G's.\n\n        A positive ddG means that the mutation(s) is destabilzing, negative means stabilizing.\n\n            - highly stabilising (\u0394\u0394G  +1.84 kcal/mol).\n\n        Returns:\n            dict: Dictionary of mutation group to predicted ddG..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String formatMessages(String heading, Collection<Message> errorMessages) { Formatter fmt = new Formatter().format(heading).format(\":%n%n\"); int index = 1; boolean displayCauses = getOnlyCause(errorMessages) == null; Map<Equivalence.Wrapper<Throwable>, Integer> causes = Maps.newHashMap(); for (Message errorMessage : errorMessages) { int thisIdx = index++; fmt.format(\"%s) %s%n\", thisIdx, errorMessage.getMessage()); List<Object> dependencies = errorMessage.getSources(); for (int i = dependencies.size() - 1; i >= 0; i--) { Object source = dependencies.get(i); formatSource(fmt, source); } Throwable cause = errorMessage.getCause(); if (displayCauses && cause != null) { Equivalence.Wrapper<Throwable> causeEquivalence = ThrowableEquivalence.INSTANCE.wrap(cause); if (!causes.containsKey(causeEquivalence)) { causes.put(causeEquivalence, thisIdx); fmt.format(\"Caused by: %s\", Throwables.getStackTraceAsString(cause)); } else { int causeIdx = causes.get(causeEquivalence); fmt.format( \"Caused by: %s (same stack trace as error #%s)\", cause.getClass().getName(), causeIdx); } } fmt.format(\"%n\"); } if (errorMessages.size() == 1) { fmt.format(\"1 error\"); } else { fmt.format(\"%s errors\", errorMessages.size()); } return fmt.toString(); }\n\n    ### Response:", "ground_truth": "Returns the formatted message for an exception with the specified messages.", "predict": "Format the given error messages and return the formatted message string"}, {"ID": 386, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func isAcceptableKind(kind reflect.Kind) bool { switch kind { case reflect.Chan: fallthrough case reflect.Complex64: fallthrough case reflect.Complex128: fallthrough case reflect.Func: fallthrough case reflect.Ptr: fallthrough case reflect.Interface: return false } return true }\n\n    ### Response: // isAcceptableKind returns whether or not the passed field type is a supported\n// type.  It is called after the first pointer indirection, so further pointers\n// are not supported..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Message create(String messageFormat, Object... arguments) { return create(null, messageFormat, arguments); }\n\n    ### Response:", "ground_truth": "Creates a new Message without a cause.\n\n@param messageFormat Format string\n@param arguments format string arguments", "predict": "// Creates and returns a message with the given format string and arguments. The format string may contain placeholders for arguments which must be quoted to ensure they are interpreted as literals (See Format Specifiers in the javadoc)."}, {"ID": 387, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def filter_search(self, code=None, name=None, abilities=None, attributes=None, info=None): \"\"\" Return a list of codes and names pertaining to cards that have the given information values stored. Can take a code integer, name string, abilities dict {phase: ability list/\"*\"}, attributes list, info dict {key, value list/\"*\"}. In the above argument examples \"*\" is a string that may be passed instead of a list as the dict value to match anything that stores that key. \"\"\" command = \"SELECT code, name FROM CARDS \" command += Where_filter_gen((\"code\", code), (\"name\", name), (\"abilities\", abilities), (\"attributes\", attributes), (\"info\", info)) with sqlite3.connect(self.dbname) as carddb: return carddb.execute(command).fetchall()\n\n    ### Response: Return a list of codes and names pertaining to cards that have the\n        given information values stored.\n\n        Can take a code integer, name string, abilities dict {phase: ability\n        list/\"*\"}, attributes list, info dict {key, value list/\"*\"}.\n\n        In the above argument examples \"*\" is a string that may be passed\n        instead of a list as the dict value to match anything that stores that\n        key..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Message create(Throwable cause, String messageFormat, Object... arguments) { return create(cause, ImmutableList.of(), messageFormat, arguments); }\n\n    ### Response:", "ground_truth": "Creates a new Message with the given cause.\n\n@param cause The exception that caused the error\n@param messageFormat Format string\n@param arguments format string arguments", "predict": "\n    Creates a message with the given arguments and message format string, and\n    throws the exception associated with the Throwable parameter if the error\n    code cannot be converted to success."}, {"ID": 388, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void clean() { final Path bPath = FileSystems.getDefault().getPath(basePath); for (int i = 0; i < 3; i++) { try { final CleanUpFileVisitor visitor = new CleanUpFileVisitor(); Files.walkFileTree(bPath, visitor); if (!visitor.hasErrors()) { print(\"Deleted \" + basePath); return; } else if (useLogger && logger.isDebugEnabled()) { for (final Throwable t : visitor.getErrors()) { logger.debug(\"Could not delete files/directories.\", t); } } } catch (final Exception e) { print(e.getMessage() + \" Retring to delete it.\"); try { Thread.sleep(1000); } catch (final InterruptedException ignore) { // ignore } } } print(\"Failed to delete \" + basePath + \" in this process.\"); }\n\n    ### Response: Delete all configuration files and directories..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Message create( Throwable cause, List<Object> sources, String messageFormat, Object... arguments) { String message = format(messageFormat, arguments); return new Message(sources, message, cause); }\n\n    ### Response:", "ground_truth": "Creates a new Message with the given cause and a binding source stack.\n\n@param cause The exception that caused the error\n@param sources The binding sources for the source stack\n@param messageFormat Format string\n@param arguments format string arguments", "predict": "Creates a message with the given arguments and formats the message according to the given format string.."}, {"ID": 389, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void generateTemplateIndices(WikipediaTemplateInfo info, Set<String> templateNames) { try { for (String name : templateNames) { int id = info.checkTemplateId(name); if (id != -1) { tplNameToTplId.put(name, id); } } } catch (WikiApiException e) { } }\n\n    ### Response: Loads existing ids into the map. If no id exists, a template will\nget a new one in the dump writer\n\n@param info Must not be {@code null}.\n@param templateNames\ntemplate names to use.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static Object convert(Object o) { ElementSource source = null; if (o instanceof ElementSource) { source = (ElementSource) o; o = source.getDeclaringSource(); } return convert(o, source); }\n\n    ### Response:", "ground_truth": "Formats an object in a user friendly way.", "predict": "Loads existing ids into the map and converts objects to appropriate ElementSources objects to add into the maps"}, {"ID": 390, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void handleBorrowTaskMessage(BorrowTaskMessage message) { // borrows do not advance the sp handle. The handle would // move backwards anyway once the next message is received // from the SP leader. long newSpHandle = getMaxScheduledTxnSpHandle(); Iv2Trace.logFragmentTaskMessage(message.getFragmentTaskMessage(), m_mailbox.getHSId(), newSpHandle, true); final VoltTrace.TraceEventBatch traceLog = VoltTrace.log(VoltTrace.Category.SPI); if (traceLog != null) { traceLog.add(() -> VoltTrace.beginAsync(\"recvfragment\", MiscUtils.hsIdPairTxnIdToString(m_mailbox.getHSId(), m_mailbox.getHSId(), newSpHandle, 0), \"txnId\", TxnEgo.txnIdToString(message.getTxnId()), \"partition\", m_partitionId, \"hsId\", CoreUtils.hsIdToString(m_mailbox.getHSId()))); } TransactionState txn = m_outstandingTxns.get(message.getTxnId()); if (txn == null) { // If the borrow is the first fragment for a transaction, run it as // a single partition fragment; Must not engage/pause this // site on a MP transaction before the SP instructs to do so. // Do not track the borrow task as outstanding - it completes // immediately and is not a valid transaction state for // full MP participation (it claims everything can run as SP). txn = new BorrowTransactionState(newSpHandle, message); } // BorrowTask is a read only task embedded in a MP transaction // and its response (FragmentResponseMessage) should not be buffered if (message.getFragmentTaskMessage().isSysProcTask()) { final SysprocBorrowedTask task = new SysprocBorrowedTask(m_mailbox, (ParticipantTransactionState)txn, m_pendingTasks, message.getFragmentTaskMessage(), message.getInputDepMap()); task.setResponseNotBufferable(); m_pendingTasks.offer(task); } else { final BorrowedTask task = new BorrowedTask(m_mailbox, (ParticipantTransactionState)txn, m_pendingTasks, message.getFragmentTaskMessage(), message.getInputDepMap()); task.setResponseNotBufferable(); m_pendingTasks.offer(task); } }\n\n    ### Response: to perform replicated reads or aggregation fragment work..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean shouldBeSkipped(String className) { return (parent != null && parent.shouldBeSkipped(className)) || classNamesToSkip.contains(className); }\n\n    ### Response:", "ground_truth": "Returns true if the className should be skipped.", "predict": "The given method checks if the given string represents an entity to be skipped during fragmentation. The algorithm looks into the child nodes of the given string to see if any of the nodes represent an entity to be skipped during fragmentation. If any of the nodes represent such an entity, the method returns true; otherwise, it returns false."}, {"ID": 391, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void strictRRpolicy(PackingPlanBuilder planBuilder, String componentName) throws ConstraintViolationException { planBuilder.addInstance(this.containerId, componentName); this.containerId = nextContainerId(this.containerId); }\n\n    ### Response: Attempts to place the instance the current containerId.\n\n@param planBuilder packing plan builder\n@param componentName the component name of the instance that needs to be placed in the container\n@throws ResourceExceededException if there is no room on the current container for the instance.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object getFromClassNames(List<String> moduleClassNames) { Preconditions.checkNotNull(moduleClassNames, \"The list of module class names cannot be null.\"); for (final String moduleClassName : moduleClassNames) { if (!shouldBeSkipped(moduleClassName)) { return new StackTraceElement(moduleClassName, \"configure\", null, -1); } } return UNKNOWN_SOURCE; }\n\n    ### Response:", "ground_truth": "Returns the non-skipped module class name.", "predict": "Retrieves objects from the given list of moduleClassNames"}, {"ID": 392, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function Cam(gl) { this._projection = mat4.create(); this._camModelView = mat4.create(); this._modelView = mat4.create(); this._rotation = mat4.create(); this._translation = mat4.create(); this._near = 0.10; this._onCameraChangedListeners = []; this._far = 4000.0; this._fogNear = -5; this._fogFar = 50; this._fog = true; this._fovY = Math.PI * 45.0 / 180.0; this._fogColor = vec3.fromValues(1, 1, 1); this._outlineColor = vec3.fromValues(0.1, 0.1, 0.1); this._outlineWidth = 1.0; this._outlineEnabled = true; this._selectionColor = vec4.fromValues(0.1, 1.0, 0.1, 0.7); this._center = vec3.create(); this._zoom = 50; this._screenDoorTransparency = false; this._updateProjectionMat = true; this._updateModelViewMat = true; this._upsamplingFactor = 1; this._gl = gl; this._currentShader = null; this._stateId = 0; this.setViewportSize(gl.viewportWidth, gl.viewportHeight); }\n\n    ### Response: A camera, providing us with a view into the 3D worlds. Handles projection, and modelview matrices and controls the global render parameters such as shader and fog..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void main(String[] args) throws Exception { if (args.length != 1) { System.err.println( \"Usage: java -Dcom.sun.management.jmxremote \" + Manager.class.getName() + \" [module class name]\"); System.err.println(\"Then run 'jconsole' to connect.\"); System.exit(1); } Module module = (Module) Class.forName(args[0]).newInstance(); Injector injector = Guice.createInjector(module); manage(args[0], injector); System.out.println(\"Press Ctrl+C to exit...\"); // Sleep forever. Thread.sleep(Long.MAX_VALUE); }\n\n    ### Response:", "ground_truth": "Run with no arguments for usage instructions.", "predict": "Draw and manage 3d objects provided by the given Module class loaded and initialized with the given args, and send the objects for rendering to the specified graphics context managed and controlled by Guice and the Injector."}, {"ID": 393, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Digest(bundleHash []int8, signatureFragment Trits, startOffset int, spongeFunc ...SpongeFunction) (Trits, error) { sigLength := len(signatureFragment) secLvl, err := GetSecurityLevel(bundleHash) if err != nil { return nil, err } sigFrag := make(Trits, sigLength) copy(sigFrag, signatureFragment[:sigLength]) h := GetSpongeFunc(spongeFunc, kerl.NewKerl) defer h.Reset() dig := make(Trits, HashTrinarySize) sig := make(Trits, HashTrinarySize) i := startOffset % int(secLvl) for digLength := 0; digLength < sigLength; { for j := i * ISSChunkLength; j < (i+1)*ISSChunkLength && digLength < sigLength; j += TrinaryRadix { copy(sig, sigFrag[digLength:digLength+HashTrinarySize]) to := (bundleHash[j] + bundleHash[j+1]*3 + bundleHash[j+2]*9) - MinTryteValue for k := 0; k < int(to); k++ { err := h.Absorb(sig) if err != nil { return nil, err } sig, err = h.Squeeze(HashTrinarySize) if err != nil { return nil, err } h.Reset() } copy(sigFrag[digLength:], sig) digLength += HashTrinarySize } i = (i + 1) % int(secLvl) } err = h.Absorb(sigFrag) if err != nil { return nil, err } dig, err = h.Squeeze(HashTrinarySize) if err != nil { return nil, err } return dig, nil }\n\n    ### Response: // Digest computes the digest derived from the signature fragment and bundle hash.\n// Optionally takes the SpongeFunction to use. Default is Kerl..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    Dependency<?> pushDependency(Dependency<?> dependency, Object source) { Dependency<?> previous = this.dependency; this.dependency = dependency; doPushState(dependency, source); return previous; }\n\n    ### Response:", "ground_truth": "Sets the new current dependency & adds it to the state.", "predict": "// The pushDependency method pushes objects of the given dependency onto the dependency stack of the given source object."}, {"ID": 394, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function create_table() { if ($this->type == 'sqlite') { $auto_increase = ''; } else { $auto_increase = ' AUTO_INCREMENT'; } $query = \"CREATE TABLE cache (cache_id INTEGER PRIMARY KEY\" . $auto_increase . \", unique_vars TEXT, expires INT, body TEXT)\"; if ($this->db->query($query)) { // Ok } else { // TODO: Handle error echo $this->db->error; } }\n\n    ### Response: Internal method to create the table if it doesn't exist\n@access private\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void pushState(com.google.inject.Key<?> key, Object source) { doPushState(key, source); }\n\n    ### Response:", "ground_truth": "Adds to the state without setting the dependency.", "predict": "Internal method to push the given state into the given Stack"}, {"ID": 395, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def execute(self, commands=None, ignored_commands=('DROP', 'UNLOCK', 'LOCK'), execute_fails=True, max_executions=MAX_EXECUTION_ATTEMPTS): \"\"\" Sequentially execute a list of SQL commands. Check if commands property has already been fetched, if so use the fetched_commands rather than getting them again. :param commands: List of SQL commands :param ignored_commands: Boolean, skip SQL commands that begin with 'DROP' :param execute_fails: Boolean, attempt to execute failed commands again :param max_executions: Int, max number of attempted executions :return: Successful and failed commands \"\"\" # Break connection self._MySQL.disconnect() self._execute_iters += 1 if self._execute_iters > 0: print('\\tExecuting commands attempt #{0}'.format(self._execute_iters)) # Retrieve commands from sql_script if no commands are provided commands = self.commands if not commands else commands # Remove 'DROP' commands if ignored_commands: commands = filter_commands(commands, ignored_commands) # Reestablish connection self._MySQL.reconnect() # Execute list of commands fail, success = self._execute_commands(commands) # Dump failed commands to text files print('\\t' + str(success), 'successful commands') if len(fail) > 1 and self._dump_fails: # Dump failed commands dump_dir = self.dump_commands(fail) # Execute failed commands if execute_fails and self._execute_iters < max_executions: return self._execute_commands_from_dir(dump_dir) return fail, success\n\n    ### Response: Sequentially execute a list of SQL commands.\n\n        Check if commands property has already been fetched, if so use the\n        fetched_commands rather than getting them again.\n\n        :param commands: List of SQL commands\n        :param ignored_commands: Boolean, skip SQL commands that begin with 'DROP'\n        :param execute_fails: Boolean, attempt to execute failed commands again\n        :param max_executions: Int, max number of attempted executions\n        :return: Successful and failed commands.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static <T> Initializable<T> of(final T instance) { return new Initializable<T>() { @Override public T get() { return instance; } @Override public String toString() { return String.valueOf(instance); } }; }\n\n    ### Response:", "ground_truth": "Returns an initializable for an instance that requires no initialization.", "predict": "Static factory method to create an Initializable for the given instance parameter to fetch the singleton instance and make its fields accessible to the outside world"}, {"ID": 396, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (o *GetFqdnCacheIDParams) WithID(id string) *GetFqdnCacheIDParams { o.SetID(id) return o }\n\n    ### Response: // WithID adds the id to the get fqdn cache ID params.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected T provision( Provider<? extends T> provider, Dependency<?> dependency, ConstructionContext<T> constructionContext) throws InternalProvisionException { T t = provider.get(); if (t == null && !dependency.isNullable()) { InternalProvisionException.onNullInjectedIntoNonNullableDependency(source, dependency); } constructionContext.setProxyDelegates(t); return t; }\n\n    ### Response:", "ground_truth": "Provisions a new instance. Subclasses should override this to catch exceptions & rethrow as\nErrorsExceptions.", "predict": "//provision provisions an instance of the given type with the given arguments and context. It first checks if the given instance or any of its dependencies is null, and if so, throws an exception. After the instance is constructed and context set for the given dependency annotations, the given instance is returned."}, {"ID": 397, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int getAsInt(int index) { switch (type) { case TIFF_BYTE: case TIFF_UNDEFINED: return ((byte[])data)[index] & 0xff; case TIFF_SBYTE: return ((byte[])data)[index]; case TIFF_SHORT: return ((char[])data)[index] & 0xffff; case TIFF_SSHORT: return ((short[])data)[index]; case TIFF_SLONG: return ((int[])data)[index]; default: throw new ClassCastException(); } }\n\n    ### Response: Returns data in TIFF_BYTE, TIFF_SBYTE, TIFF_UNDEFINED, TIFF_SHORT,\nTIFF_SSHORT, or TIFF_SLONG format as an int.\n\n TIFF_BYTE and TIFF_UNDEFINED data are treated as unsigned;\nthat is, no sign extension will take place and the returned\nvalue will be in the range [0, 255].  TIFF_SBYTE data will\nbe returned in the range [-128, 127].\n\n A ClassCastException will be thrown if the field is not of\ntype TIFF_BYTE, TIFF_SBYTE, TIFF_UNDEFINED, TIFF_SHORT,\nTIFF_SSHORT, or TIFF_SLONG..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void onEvent(ConnectionEventType type, String remoteAddr, Connection conn) { List<ConnectionEventProcessor> processorList = this.processors.get(type); if (processorList != null) { for (ConnectionEventProcessor processor : processorList) { processor.onEvent(remoteAddr, conn); } } }\n\n    ### Response:", "ground_truth": "Dispatch events.\n\n@param type\n@param remoteAddr\n@param conn", "predict": "On the specified event, the given processor processes the event and may take corresponding action."}, {"ID": 398, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def bc2pg(dataset, db_url, table, schema, query, append, pagesize, sortby, max_workers): \"\"\"Download a DataBC WFS layer to postgres - an ogr2ogr wrapper. \\b $ bcdata bc2pg bc-airports --db_url postgresql://postgres:postgres@localhost:5432/postgis The default target database can be specified by setting the $DATABASE_URL environment variable. https://docs.sqlalchemy.org/en/latest/core/engines.html#database-urls \"\"\" src = bcdata.validate_name(dataset) src_schema, src_table = [i.lower() for i in src.split(\".\")] if not schema: schema = src_schema if not table: table = src_table # create schema if it does not exist conn = pgdata.connect(db_url) if schema not in conn.schemas: click.echo(\"Schema {} does not exist, creating it\".format(schema)) conn.create_schema(schema) # build parameters for each required request param_dicts = bcdata.define_request( dataset, query=query, sortby=sortby, pagesize=pagesize ) try: # run the first request / load payload = urlencode(param_dicts[0], doseq=True) url = bcdata.WFS_URL + \"?\" + payload db = parse_db_url(db_url) db_string = \"PG:host={h} user={u} dbname={db} password={pwd}\".format( h=db[\"host\"], u=db[\"user\"], db=db[\"database\"], pwd=db[\"password\"] ) # create the table if not append: command = [ \"ogr2ogr\", \"-lco\", \"OVERWRITE=YES\", \"-lco\", \"SCHEMA={}\".format(schema), \"-lco\", \"GEOMETRY_NAME=geom\", \"-f\", \"PostgreSQL\", db_string, \"-t_srs\", \"EPSG:3005\", \"-nln\", table, url, ] click.echo(\" \".join(command)) subprocess.run(command) # append to table when append specified or processing many chunks if len(param_dicts) > 1 or append: # define starting index in list of requests if append: idx = 0 else: idx = 1 commands = [] for chunk, paramdict in enumerate(param_dicts[idx:]): payload = urlencode(paramdict, doseq=True) url = bcdata.WFS_URL + \"?\" + payload command = [ \"ogr2ogr\", \"-update\", \"-append\", \"-f\", \"PostgreSQL\", db_string + \" active_schema=\" + schema, \"-t_srs\", \"EPSG:3005\", \"-nln\", table, url, ] commands.append(command) # https://stackoverflow.com/questions/14533458 pool = Pool(max_workers) with click.progressbar( pool.imap(partial(call), commands), length=len(param_dicts) ) as bar: for returncode in bar: if returncode != 0: click.echo(\"Command failed: {}\".format(returncode)) click.echo( \"Load of {} to {} in {} complete\".format(src, schema + \".\" + table, db_url) ) except Exception: click.echo(\"Data load failed\") raise click.Abort()\n\n    ### Response: Download a DataBC WFS layer to postgres - an ogr2ogr wrapper.\n\n     \\b\n      $ bcdata bc2pg bc-airports --db_url postgresql://postgres:postgres@localhost:5432/postgis\n\n    The default target database can be specified by setting the $DATABASE_URL\n    environment variable.\n    https://docs.sqlalchemy.org/en/latest/core/engines.html#database-urls.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void addConnectionEventProcessor(ConnectionEventType type, ConnectionEventProcessor processor) { List<ConnectionEventProcessor> processorList = this.processors.get(type); if (processorList == null) { this.processors.putIfAbsent(type, new ArrayList<ConnectionEventProcessor>(1)); processorList = this.processors.get(type); } processorList.add(processor); }\n\n    ### Response:", "ground_truth": "Add event processor.\n\n@param type\n@param processor", "predict": "\n     The method addConnectionEventProcessor adds an instance of ConnectionEventProcessor to the list of ConnectionEventProcessors associated with the specified ConnectionEventType. If there is no ConnectionEventProcessors list associated with the ConnectionEventType, the method creates and populates the list with an empty array."}, {"ID": 399, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void doVerify(Parameter p) throws NamespaceSyntaxWarning { if (p.getValue() == null) { throw new InvalidArgument(\"parameter value is null\"); } Namespace ns = p.getNamespace(); String resourceLocation = ns.getResourceLocation(); if (resourceLocation == null) { throw new InvalidArgument(\"resourceLocation\", resourceLocation); } // get opened namespace and lookup namespace parameter encoding JDBMNamespaceLookup il = openNamespaces.get(ns.getResourceLocation()); if (il == null) { throw new IllegalStateException(\"namespace index is not open.\"); } String encoding = il.lookup(p.getValue()); if (encoding == null) { throw new NamespaceSyntaxWarning(ns.getResourceLocation(), ns.getPrefix(), p.getValue()); } }\n\n    ### Response: Do namespace value verification against a resource location. This\nimplementation assumes the namespace has been open prior to execution.\n\n@param p {@link Parameter}, the parameter to verify namespace value for\nwhich cannot be null and must have a non-null namespace and value\n@throws NamespaceSyntaxWarning Thrown if parameter's {@link Namespace} is\nnot null and it does not contain the parameter's value\n@throws InvalidArgument Thrown if p argument is null, its value\nis null, or if its namespace's resource location is null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> T getFutureTaskResult(RunStateRecordedFutureTask<T> task, Logger logger) { T t = null; if (null != task) { try { t = task.getAfterRun(); } catch (InterruptedException e) { logger.error(\"Future task interrupted!\", e); } catch (ExecutionException e) { logger.error(\"Future task execute failed!\", e); } catch (FutureTaskNotRunYetException e) { logger.error(\"Future task has not run yet!\", e); } catch (FutureTaskNotCompleted e) { logger.error(\"Future task has not completed!\", e); } } return t; }\n\n    ### Response:", "ground_truth": "get the result of a future task\n\nNotice: the run method of this task should have been called at first.\n\n@param task\n@param \n@return", "predict": "Get the result of the runnable {@link RunnableFutureTask}."}, {"ID": 400, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Convert_v1beta1_InitConfiguration_To_kubeadm_InitConfiguration(in *InitConfiguration, out *kubeadm.InitConfiguration, s conversion.Scope) error { return autoConvert_v1beta1_InitConfiguration_To_kubeadm_InitConfiguration(in, out, s) }\n\n    ### Response: // Convert_v1beta1_InitConfiguration_To_kubeadm_InitConfiguration is an autogenerated conversion function..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void launderThrowable(Throwable t) { if (t instanceof RuntimeException) { throw (RuntimeException) t; } else if (t instanceof Error) { throw (Error) t; } else { throw new IllegalStateException(\"Not unchecked!\", t); } }\n\n    ### Response:", "ground_truth": "launder the throwable\n\n@param t", "predict": "// This method wraps the exception into an Error, unless the exception extends from Error, in which case, the exception itself is thrown."}, {"ID": 401, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setFile(PhingFile $file) { // non-existing files are not allowed if (!$file->exists()) { throw new BuildException(\"File \" . $file . \" does not exist.\"); } $reader = null; try { if ($this->encoding == null) { $reader = new BufferedReader(new FileReader($file)); } else { $reader = new BufferedReader( new InputStreamReader(new FileInputStream($file)) ); } $this->value = $reader->read(); } catch (IOException $ex) { $reader->close(); throw new BuildException($ex); } $reader->close(); }\n\n    ### Response: set the text using a file\n\n@param  PhingFile $file the file to use\n@throws BuildException if the file does not exist, or cannot be\nread.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerProcessor(CommandCode cmdCode, RemotingProcessor<?> processor) { if (this.cmd2processors.containsKey(cmdCode)) { logger .warn( \"Processor for cmd={} is already registered, the processor is {}, and changed to {}\", cmdCode, cmd2processors.get(cmdCode).getClass().getName(), processor.getClass() .getName()); } this.cmd2processors.put(cmdCode, processor); }\n\n    ### Response:", "ground_truth": "Register processor to process command that has the command code of cmdCode.\n\n@param cmdCode\n@param processor", "predict": "Registers the given processor for the given command, or warns if the processor has already been registered for the command, or changes the processor for the given command to the given processor if the processor hasn't been registered for the command."}, {"ID": 402, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getFormatMimeType($format) { $format = $this->normalizeFormat($format); $result = ''; switch ($format) { case static::FORMAT_PNG: case static::FORMAT_JPEG: case static::FORMAT_GIF: case static::FORMAT_XBM: $result = 'image/' . $format; break; case static::FORMAT_WBMP: $result = 'image/vnd.wap.wbmp'; break; } return $result; }\n\n    ### Response: Get the MIME type for a specific format.\n\n@param string $format One of the BitmapFormat::FORMAT_...  constants.\n\n@return string return an empty string is $format is invalid.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerDefaultProcessor(RemotingProcessor<?> processor) { if (this.defaultProcessor == null) { this.defaultProcessor = processor; } else { throw new IllegalStateException(\"The defaultProcessor has already been registered: \" + this.defaultProcessor.getClass()); } }\n\n    ### Response:", "ground_truth": "Register the default processor to process command with no specific processor registered.\n\n@param processor", "predict": "Registers the given processor as the default processor for the manager."}, {"ID": 403, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def field_mask(original, modified): \"\"\"Create a field mask by comparing two messages. Args: original (~google.protobuf.message.Message): the original message. If set to None, this field will be interpretted as an empty message. modified (~google.protobuf.message.Message): the modified message. If set to None, this field will be interpretted as an empty message. Returns: google.protobuf.field_mask_pb2.FieldMask: field mask that contains the list of field names that have different values between the two messages. If the messages are equivalent, then the field mask is empty. Raises: ValueError: If the ``original`` or ``modified`` are not the same type. \"\"\" if original is None and modified is None: return field_mask_pb2.FieldMask() if original is None and modified is not None: original = copy.deepcopy(modified) original.Clear() if modified is None and original is not None: modified = copy.deepcopy(original) modified.Clear() if type(original) != type(modified): raise ValueError( \"expected that both original and modified should be of the \" 'same type, received \"{!r}\" and \"{!r}\".'.format( type(original), type(modified) ) ) return field_mask_pb2.FieldMask(paths=_field_mask_helper(original, modified))\n\n    ### Response: Create a field mask by comparing two messages.\n\n    Args:\n        original (~google.protobuf.message.Message): the original message.\n            If set to None, this field will be interpretted as an empty\n            message.\n        modified (~google.protobuf.message.Message): the modified message.\n            If set to None, this field will be interpretted as an empty\n            message.\n\n    Returns:\n        google.protobuf.field_mask_pb2.FieldMask: field mask that contains\n        the list of field names that have different values between the two\n        messages. If the messages are equivalent, then the field mask is empty.\n\n    Raises:\n        ValueError: If the ``original`` or ``modified`` are not the same type..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RemotingProcessor<?> getProcessor(CommandCode cmdCode) { RemotingProcessor<?> processor = this.cmd2processors.get(cmdCode); if (processor != null) { return processor; } return this.defaultProcessor; }\n\n    ### Response:", "ground_truth": "Get the specific processor with command code of cmdCode if registered, otherwise the default processor is returned.\n\n@param cmdCode\n@return", "predict": "Get the processor for the given command code."}, {"ID": 404, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Observable<Server> selectServer() { return Observable.create(new OnSubscribe<Server>() { @Override public void call(Subscriber<? super Server> next) { try { Server server = loadBalancerContext.getServerFromLoadBalancer(loadBalancerURI, loadBalancerKey); next.onNext(server); next.onCompleted(); } catch (Exception e) { next.onError(e); } } }); }\n\n    ### Response: Return an Observable that either emits only the single requested server\nor queries the load balancer for the next server on each subscription.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Url tryGet(String url) { SoftReference<Url> softRef = Url.parsedUrls.get(url); return (null == softRef) ? null : softRef.get(); }\n\n    ### Response:", "ground_truth": "try get from cache\n\n@param url\n@return", "predict": "Get the Url from the SoftReference Map or retrieve the default url"}, {"ID": 405, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(count, includeWeekends) { initialize(); count = count || 3; includeWeekends = includeWeekends || false; var self = this; var holidays = []; if (count > self.MAX_HOLIDAYS) { throw Error('Cannot request more than {MAX_HOLIDAYS} holidays at once.'.replace('{MAX HOLIDAYS}', self.MAX_HOLIDAYS)); } /** * Collects holidays. */ function collectHolidays() { if (typeof self.year.holidays[self.m] !== 'undefined' && typeof self.year.holidays[self.m] !== 'undefined') { self.year.holidays[self.m].forEach(function(holiday) { if (holidays.length < count && holiday.day >= self.d) { holidays.push(holiday); } }); } } while (holidays.length < count) { if (!includeWeekends) { self.year.discardWeekends(); } collectHolidays(); if (holidays.length < count) { nextMonth(); } } return holidays; }\n\n    ### Response: Returns the next holidays.\n@param {number} [count] number of holidays to list (default: 3)\n@param {boolean} [includeWeekends] include holidays falling on a weekend (default: false)\n@return {Array}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected ProtocolCode decodeProtocolCode(ByteBuf in) { if (in.readableBytes() >= protocolCodeLength) { byte[] protocolCodeBytes = new byte[protocolCodeLength]; in.readBytes(protocolCodeBytes); return ProtocolCode.fromBytes(protocolCodeBytes); } return null; }\n\n    ### Response:", "ground_truth": "decode the protocol code\n\n@param in input byte buf\n@return an instance of ProtocolCode", "predict": "Decodes protocol codes of length protocolCodeLength from the given ByteBuf."}, {"ID": 406, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function addToArrayKeyLookUp($phpName, Table $table, $plural) { if($phpName == \"\") { $phpName = $table->getPhpName(); } $camelCaseName = $table->getCamelCaseName(); $fieldName = $table->getName(); if ($plural) { $phpName = $this->getPluralizer()->getPluralForm($phpName); $camelCaseName = $this->getPluralizer()->getPluralForm($camelCaseName); $fieldName = $this->getPluralizer()->getPluralForm($fieldName); } return \" switch (\\$keyType) { case TableMap::TYPE_CAMELNAME: \\$key = '\" . $camelCaseName . \"'; break; case TableMap::TYPE_FIELDNAME: \\$key = '\" . $fieldName . \"'; break; default: \\$key = '\" . $phpName . \"'; } \"; }\n\n    ### Response: Adds the switch-statement for looking up the array-key name for toArray\n@see toArray.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Map<String, List<Connection>> getAll() { Map<String, List<Connection>> allConnections = new HashMap<String, List<Connection>>(); Iterator<Map.Entry<String, RunStateRecordedFutureTask<ConnectionPool>>> iterator = this .getConnPools().entrySet().iterator(); while (iterator.hasNext()) { Map.Entry<String, RunStateRecordedFutureTask<ConnectionPool>> entry = iterator.next(); ConnectionPool pool = FutureTaskUtil.getFutureTaskResult(entry.getValue(), logger); if (null != pool) { allConnections.put(entry.getKey(), pool.getAll()); } } return allConnections; }\n\n    ### Response:", "ground_truth": "Get all connections of all poolKey.\n\n@return a map with poolKey as key and a list of connections in ConnectionPool as value", "predict": "Override to add details about the behavior of the method"}, {"ID": 407, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static function boot() { parent::boot(); self::creating(function ($model) { do { $id = mt_rand(pow(10, 9), pow(2, 32) - 1); } while (self::find($id)); $model->{$model->getKeyName()} = $id; }); }\n\n    ### Response: Find and use an unused non-sequential ID for a record, as part of a\nmodel's creation. ID will be a 32-bit unsigned integer of 10 characters\nin length.\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void scan() { if (null != this.connTasks && !this.connTasks.isEmpty()) { Iterator<String> iter = this.connTasks.keySet().iterator(); while (iter.hasNext()) { String poolKey = iter.next(); ConnectionPool pool = this.getConnectionPool(this.connTasks.get(poolKey)); if (null != pool) { pool.scan(); if (pool.isEmpty()) { if ((System.currentTimeMillis() - pool.getLastAccessTimestamp()) > DEFAULT_EXPIRE_TIME) { iter.remove(); logger.warn(\"Remove expired pool task of poolKey {} which is empty.\", poolKey); } } } } } }\n\n    ### Response:", "ground_truth": "in case of cache pollution and connection leak, to do schedule scan\n\n@see com.alipay.remoting.Scannable#scan()", "predict": "Check for expired Connection Pools and delete them from the list of\npooled Connections to avoid unnecessary resource usage and potential\nperformance issues."}, {"ID": 408, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def missing_count(self): \"\"\"numeric representing count of missing rows in cube response.\"\"\" if self.means: return self.means.missing_count return self._cube_dict[\"result\"].get(\"missing\", 0)\n\n    ### Response: numeric representing count of missing rows in cube response..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Connection getAndCreateIfAbsent(Url url) throws InterruptedException, RemotingException { // get and create a connection pool with initialized connections. ConnectionPool pool = this.getConnectionPoolAndCreateIfAbsent(url.getUniqueKey(), new ConnectionPoolCall(url)); if (null != pool) { return pool.get(); } else { logger.error(\"[NOTIFYME] bug detected! pool here must not be null!\"); return null; } }\n\n    ### Response:", "ground_truth": "If no task cached, create one and initialize the connections.\n\n@see ConnectionManager#getAndCreateIfAbsent(Url)", "predict": "Override public Connection getAndCreateIfAbsent(Url url) throws InterruptedException, RemotingException to fetch and init an instance of Connection from the Connection Pool and to notify the listener of its existence and initialization status"}, {"ID": 409, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getCachePermissions($cacheKey) { // Check local cache if (isset($this->cachePermissions[$cacheKey])) { return $this->cachePermissions[$cacheKey]; } // Check persistent cache if ($this->cacheService) { $result = $this->cacheService->get($cacheKey); // Warm local cache if ($result) { $this->cachePermissions[$cacheKey] = $result; return $result; } } return null; }\n\n    ### Response: Gets the permission from cache\n\n@param string $cacheKey\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void createConnectionAndHealIfNeed(Url url) throws InterruptedException, RemotingException { // get and create a connection pool with initialized connections. ConnectionPool pool = this.getConnectionPoolAndCreateIfAbsent(url.getUniqueKey(), new ConnectionPoolCall(url)); if (null != pool) { healIfNeed(pool, url); } else { logger.error(\"[NOTIFYME] bug detected! pool here must not be null!\"); } }\n\n    ### Response:", "ground_truth": "If no task cached, create one and initialize the connections.\nIf task cached, check whether the number of connections adequate, if not then heal it.\n\n@param url\n@return\n@throws InterruptedException\n@throws RemotingException", "predict": "Override and heals the connection and create the connection pool and initialized connections"}, {"ID": 410, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def train(self, sentences, nr_iter=5): \"\"\"Train a model from sentences. :param sentences: A list of sentences, each of which is a list of (token, tag) tuples. :param nr_iter: Number of training iterations. \"\"\" self._make_tagdict(sentences) self.perceptron.classes = self.classes for iter_ in range(nr_iter): c = 0 n = 0 for sentence in sentences: prev, prev2 = self.START context = [t[0] for t in sentence] for i, (token, tag) in enumerate(sentence): guess = self.tagdict.get(token) if not guess: feats = self._get_features(i, context, prev, prev2) guess = self.perceptron.predict(feats) self.perceptron.update(tag, guess, feats) prev2 = prev prev = guess c += guess == tag n += 1 random.shuffle(sentences) log.debug('Iter %s: %s/%s=%s' % (iter_, c, n, (float(c) / n) * 100)) self.perceptron.average_weights()\n\n    ### Response: Train a model from sentences.\n\n        :param sentences: A list of sentences, each of which is a list of (token, tag) tuples.\n        :param nr_iter: Number of training iterations..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void removeTask(String poolKey) { RunStateRecordedFutureTask<ConnectionPool> task = this.connTasks.remove(poolKey); if (null != task) { ConnectionPool pool = FutureTaskUtil.getFutureTaskResult(task, logger); if (null != pool) { pool.removeAllAndTryClose(); } } }\n\n    ### Response:", "ground_truth": "remove task and remove all connections\n\n@param poolKey", "predict": "Remove the given task from the task queue of the given Connection Pool"}, {"ID": 411, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _split_rules(rules): ''' Split rules with lists into individual rules. We accept some attributes as lists or strings. The data we get back from the execution module lists rules as individual rules. We need to split the provided rules into individual rules to compare them. ''' split = [] for rule in rules: cidr_ip = rule.get('cidr_ip') group_name = rule.get('source_group_name') group_id = rule.get('source_group_group_id') if cidr_ip and not isinstance(cidr_ip, six.string_types): for ip in cidr_ip: _rule = rule.copy() _rule['cidr_ip'] = ip split.append(_rule) elif group_name and not isinstance(group_name, six.string_types): for name in group_name: _rule = rule.copy() _rule['source_group_name'] = name split.append(_rule) elif group_id and not isinstance(group_id, six.string_types): for _id in group_id: _rule = rule.copy() _rule['source_group_group_id'] = _id split.append(_rule) else: split.append(rule) return split\n\n    ### Response: Split rules with lists into individual rules.\n\n    We accept some attributes as lists or strings. The data we get back from\n    the execution module lists rules as individual rules. We need to split the\n    provided rules into individual rules to compare them..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void healIfNeed(ConnectionPool pool, Url url) throws RemotingException, InterruptedException { String poolKey = url.getUniqueKey(); // only when async creating connections done // and the actual size of connections less than expected, the healing task can be run. if (pool.isAsyncCreationDone() && pool.size() < url.getConnNum()) { FutureTask<Integer> task = this.healTasks.get(poolKey); if (null == task) { task = new FutureTask<Integer>(new HealConnectionCall(url, pool)); task = this.healTasks.putIfAbsent(poolKey, task); if (null == task) { task = this.healTasks.get(poolKey); task.run(); } } try { int numAfterHeal = task.get(); if (logger.isDebugEnabled()) { logger.debug(\"[NOTIFYME] - conn num after heal {}, expected {}, warmup {}\", numAfterHeal, url.getConnNum(), url.isConnWarmup()); } } catch (InterruptedException e) { this.healTasks.remove(poolKey); throw e; } catch (ExecutionException e) { this.healTasks.remove(poolKey); Throwable cause = e.getCause(); if (cause instanceof RemotingException) { throw (RemotingException) cause; } else { FutureTaskUtil.launderThrowable(cause); } } // heal task is one-off, remove from cache directly after run this.healTasks.remove(poolKey); } }\n\n    ### Response:", "ground_truth": "execute heal connection tasks if the actual number of connections in pool is less than expected\n\n@param pool\n@param url", "predict": "Only run healing task if these conditions are met\n    * Async creating of connections has been completed\n    * Size of the connection objects in the cache is less than expected\n    * And healing task should run for each url"}, {"ID": 412, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (e *endpoint) deliverAccepted(n *endpoint) { e.mu.RLock() if e.state == stateListen { e.acceptedChan <- n e.waiterQueue.Notify(waiter.EventIn) } else { n.Close() } e.mu.RUnlock() }\n\n    ### Response: // deliverAccepted delivers the newly-accepted endpoint to the listener. If the\n// endpoint has transitioned out of the listen state, the new endpoint is closed\n// instead..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void doCreate(final Url url, final ConnectionPool pool, final String taskName, final int syncCreateNumWhenNotWarmup) throws RemotingException { final int actualNum = pool.size(); final int expectNum = url.getConnNum(); if (actualNum < expectNum) { if (logger.isDebugEnabled()) { logger.debug(\"actual num {}, expect num {}, task name {}\", actualNum, expectNum, taskName); } if (url.isConnWarmup()) { for (int i = actualNum; i < expectNum; ++i) { Connection connection = create(url); pool.add(connection); } } else { if (syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url.getConnNum()) { throw new IllegalArgumentException( \"sync create number when not warmup should be [0,\" + url.getConnNum() + \"]\"); } // create connection in sync way if (syncCreateNumWhenNotWarmup > 0) { for (int i = 0; i < syncCreateNumWhenNotWarmup; ++i) { Connection connection = create(url); pool.add(connection); } if (syncCreateNumWhenNotWarmup == url.getConnNum()) { return; } } // initialize executor in lazy way initializeExecutor(); pool.markAsyncCreationStart();// mark the start of async try { this.asyncCreateConnectionExecutor.execute(new Runnable() { @Override public void run() { try { for (int i = pool.size(); i < url.getConnNum(); ++i) { Connection conn = null; try { conn = create(url); } catch (RemotingException e) { logger .error( \"Exception occurred in async create connection thread for {}, taskName {}\", url.getUniqueKey(), taskName, e); } pool.add(conn); } } finally { pool.markAsyncCreationDone();// mark the end of async } } }); } catch (RejectedExecutionException e) { pool.markAsyncCreationDone();// mark the end of async when reject throw e; } } // end of NOT warm up } // end of if }\n\n    ### Response:", "ground_truth": "do create connections\n\n@param url\n@param pool\n@param taskName\n@param syncCreateNumWhenNotWarmup you can specify this param to ensure at least desired number of connections available in sync way\n@throws RemotingException", "predict": "The method doCreate creates a new Connection and add to the Connection Pool of the given endpoint. The behavior of the method depends on the values of url.getConnNum and syncCreateNumWhenNotWarmup arguments of this method. The default behavior of this method when url.getConnNum and syncCreateNumWhenNotWarmup arguments of this method are negative values, its behavior is to throw exception and when values of arguments of this method is positive values, its behavior is to add Connection to the Connection Pool of the given endpoint and to mark its state to SYNC and SYNC_IN_PROGRESS and SYNC_IN_COMPLETE and SYNC_IN_COMPLETE and SYNC_IN_COMPLETE and SYNC_IN_COMPLETE and SYNC_IN_COMPLETE and SYNC_IN_COMPLETE and SYNC_IN_COMPLETE and SYNC_IN_COMPLETE and SYNC_IN_COMPLETE and SYNC_IN_COMPLETE and SYNC_IN_COMPLETE"}, {"ID": 413, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void checkIfMeterExists(final AbstractMeter meter) { if (!meterResults.containsKey(meter)) { meterResults.put(meter, new LinkedList<Double>()); } }\n\n    ### Response: Checking method if meter is registered, otherwise inserting a suitable data structure.\n\n@param meter to be checked.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void closeConnection(String addr) { Url url = this.addressParser.parse(addr); this.connectionManager.remove(url.getUniqueKey()); }\n\n    ### Response:", "ground_truth": "Close all connections of a address\n\n@param addr", "predict": "Closes the connection to the given url, unless the connection to that url is already closed."}, {"ID": 414, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function colors_control_js() { $suffix = SCRIPT_DEBUG ? '' : '.min'; wp_enqueue_script( 'rock-colors-control', get_template_directory_uri() . \"/assets/js/admin/colors-control{$suffix}.js\", array( 'customize-controls', 'iris', 'underscore', 'wp-util' ), ROCK_VERSION, true ); wp_localize_script( 'rock-colors-control', 'colorSchemes', $this->color_schemes ); }\n\n    ### Response: Enqueue color scheme control in the Customizer.\n\n@action customize_controls_enqueue_scripts\n@since  1.0.0.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void onClose() { Iterator<Entry<Integer, InvokeFuture>> iter = invokeFutureMap.entrySet().iterator(); while (iter.hasNext()) { Entry<Integer, InvokeFuture> entry = iter.next(); iter.remove(); InvokeFuture future = entry.getValue(); if (future != null) { future.putResponse(future.createConnectionClosedResponse(this.getRemoteAddress())); future.cancelTimeout(); future.tryAsyncExecuteInvokeCallbackAbnormally(); } } }\n\n    ### Response:", "ground_truth": "Do something when closing.", "predict": "Closes the listener when the listener receives a closure_completed event and sets the remote address in the listener."}, {"ID": 415, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String getEmbeddedId( final HttpServletRequest servletRequest, final Prefix prefix) { String requestPath = servletRequest.getPathInfo(); // http://stackoverflow.com/questions/18963562/grizzlys-request-getpathinfo-returns-always-null if (requestPath == null && servletRequest.getContextPath().isEmpty()) { requestPath = servletRequest.getRequestURI(); } String id = null; if (requestPath != null) { final String pathPrefix = prefix.getPrefix(); final String[] part = requestPath.split(\"/\"); if (part.length > 1 && part[1].startsWith(pathPrefix)) { id = part[1].substring(pathPrefix.length()); } } return id; }\n\n    ### Response: Extract the id embedded at the beginning of a request path\n\n@param servletRequest the servlet request\n@param prefix the prefix for the id\n@return the found id or null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void close() { if (closed.compareAndSet(false, true)) { try { if (this.getChannel() != null) { this.getChannel().close().addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture future) throws Exception { if (logger.isInfoEnabled()) { logger .info( \"Close the connection to remote address={}, result={}, cause={}\", RemotingUtil.parseRemoteAddress(Connection.this .getChannel()), future.isSuccess(), future.cause()); } } }); } } catch (Exception e) { logger.warn(\"Exception caught when closing connection {}\", RemotingUtil.parseRemoteAddress(Connection.this.getChannel()), e); } } }\n\n    ### Response:", "ground_truth": "Close the connection.", "predict": "Closes the connection to the remote endpoint"}, {"ID": 416, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (a *AddressWitnessPubKeyHash) EncodeAddress() string { str, err := encodeSegWitAddress(a.hrp, a.witnessVersion, a.witnessProgram[:]) if err != nil { return \"\" } return str }\n\n    ### Response: // EncodeAddress returns the bech32 string encoding of an\n// AddressWitnessPubKeyHash.\n// Part of the Address interface..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object setAttributeIfAbsent(String key, Object value) { return attributes.putIfAbsent(key, value); }\n\n    ### Response:", "ground_truth": "set attribute if key absent.\n\n@param key\n@param value\n@return", "predict": "// Sets an attribute in the attributes Map to the given\n// value if it does not already exist."}, {"ID": 417, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressFBWarnings(\"DM_EXIT\") public void run() { status = CroquetStatus.STARTING; // create the injector createInjector(); // configure the Jetty server jettyServer = configureJetty(settings.getPort()); // add a life-cycle listener to remove drop the PID jettyServer.addLifeCycleListener(new AbstractLifeCycleListener() { @Override public void lifeCycleStarted(final LifeCycle event) { final String pidFile = settings.getPidFile(); // when a pid-file is configured, drop it upon successfully binding to the port. if (pidFile != null) { LOG.info(\"Dropping PID file: {}\", pidFile); // the PidManager will automatically remove the pid file on shutdown new PidManager(pidFile).dropPidOrDie(); } else { LOG.warn(\"No PID file specified, so not file will be dropped. \" + \"Set a file via code or in the config file to drop a pid file.\"); } } }); // start the server try { jettyServer.start(); //CHECKSTYLE:OFF the only exception that is thrown } catch (final Exception e) { //CHECKSTYLE:ON LOG.error(\"Error starting Jetty: {}\", e.getMessage(), e); System.err.println(\"Error starting Jetty: \" + e.getMessage()); System.exit(-1); throw new RuntimeException(e); // throw this so the whole app stops } // create and start the modules final List<ManagedModule> managedModuleInstances = createAndStartModules(); // install the shutdown hook Runtime.getRuntime().addShutdownHook(new Thread() { @Override public void run() { status = CroquetStatus.STOPPING; try { jettyServer.stop(); //CHECKSTYLE:OFF the only exception that is thrown } catch (final Exception e) { //CHECKSTYLE:ON LOG.error(\"Error stopping Jetty: {}\", e.getMessage(), e); } // go through the modules stopping them for(final ManagedModule module:managedModuleInstances) { module.stop(); } status = CroquetStatus.STOPPED; LOG.info(\"Croquet has stopped\"); } }); status = CroquetStatus.RUNNING; LOG.info(\"Croquet is running on port {}\", settings.getPort()); }\n\n    ### Response: Starts the Croquet framework..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void registerUserProcessor(UserProcessor<?> processor, ConcurrentHashMap<String, UserProcessor<?>> userProcessors) { if (null == processor) { throw new RuntimeException(\"User processor should not be null!\"); } if (processor instanceof MultiInterestUserProcessor) { registerUserProcessor((MultiInterestUserProcessor) processor, userProcessors); } else { if (StringUtils.isBlank(processor.interest())) { throw new RuntimeException(\"Processor interest should not be blank!\"); } UserProcessor<?> preProcessor = userProcessors.putIfAbsent(processor.interest(), processor); if (preProcessor != null) { String errMsg = \"Processor with interest key [\" + processor.interest() + \"] has already been registered to rpc server, can not register again!\"; throw new RuntimeException(errMsg); } } }\n\n    ### Response:", "ground_truth": "Help register single-interest user processor.\n\n@param processor  the processor need to be registered\n@param userProcessors   the map of user processors", "predict": "Stores the given processor and updates the cache of registered processor for given interest and registers the processor for given interest to RPC server"}, {"ID": 418, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static protected function inputPrompt($message, $default = '', $isPassword = false) { fwrite(STDOUT, $message); if (!$isPassword) { $input = trim(fgets(STDIN)); } else { $input = self::getPassword(false); echo PHP_EOL; } if ($input == '') $input = $default; return $input; }\n\n    ### Response: Asks the user for input\n\n@param string $message\n@param string $default\n@param boolean $isPassword\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static void registerUserProcessor(MultiInterestUserProcessor<?> processor, ConcurrentHashMap<String, UserProcessor<?>> userProcessors) { if (null == processor.multiInterest() || processor.multiInterest().isEmpty()) { throw new RuntimeException(\"Processor interest should not be blank!\"); } for (String interest : processor.multiInterest()) { UserProcessor<?> preProcessor = userProcessors.putIfAbsent(interest, processor); if (preProcessor != null) { String errMsg = \"Processor with interest key [\" + interest + \"] has already been registered to rpc server, can not register again!\"; throw new RuntimeException(errMsg); } } }\n\n    ### Response:", "ground_truth": "Help register multi-interest user processor.\n\n@param processor  the processor with multi-interest need to be registered\n@param userProcessors    the map of user processors", "predict": "Registers given multiInterestProcessor to the given server"}, {"ID": 419, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def json_as_html(self): \"\"\" Print out self.json in a nice way. \"\"\" # To avoid circular import from cspreports import utils formatted_json = utils.format_report(self.json) return mark_safe(\"<pre>\\n%s</pre>\" % escape(formatted_json))\n\n    ### Response: Print out self.json in a nice way..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void dispatchToUserProcessor(RemotingContext ctx, RpcRequestCommand cmd) { final int id = cmd.getId(); final byte type = cmd.getType(); // processor here must not be null, for it have been checked before UserProcessor processor = ctx.getUserProcessor(cmd.getRequestClass()); if (processor instanceof AsyncUserProcessor) { try { processor.handleRequest(processor.preHandleRequest(ctx, cmd.getRequestObject()), new RpcAsyncContext(ctx, cmd, this), cmd.getRequestObject()); } catch (RejectedExecutionException e) { logger .warn(\"RejectedExecutionException occurred when do ASYNC process in RpcRequestProcessor\"); sendResponseIfNecessary(ctx, type, this.getCommandFactory() .createExceptionResponse(id, ResponseStatus.SERVER_THREADPOOL_BUSY)); } catch (Throwable t) { String errMsg = \"AYSNC process rpc request failed in RpcRequestProcessor, id=\" + id; logger.error(errMsg, t); sendResponseIfNecessary(ctx, type, this.getCommandFactory() .createExceptionResponse(id, t, errMsg)); } } else { try { Object responseObject = processor .handleRequest(processor.preHandleRequest(ctx, cmd.getRequestObject()), cmd.getRequestObject()); sendResponseIfNecessary(ctx, type, this.getCommandFactory().createResponse(responseObject, cmd)); } catch (RejectedExecutionException e) { logger .warn(\"RejectedExecutionException occurred when do SYNC process in RpcRequestProcessor\"); sendResponseIfNecessary(ctx, type, this.getCommandFactory() .createExceptionResponse(id, ResponseStatus.SERVER_THREADPOOL_BUSY)); } catch (Throwable t) { String errMsg = \"SYNC process rpc request failed in RpcRequestProcessor, id=\" + id; logger.error(errMsg, t); sendResponseIfNecessary(ctx, type, this.getCommandFactory() .createExceptionResponse(id, t, errMsg)); } } }\n\n    ### Response:", "ground_truth": "dispatch request command to user processor\n@param ctx remoting context\n@param cmd rpc request command", "predict": "Printout the given request in a nicer way, processor must be defined and initialized, for the given method to run successfully, and the given exception may occur during SYNC and ASYNC processing of the given request, so the appropriate error message must be provided to the caller of this method."}, {"ID": 420, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function resolveResource(CalledUri $calledUri, Route $route): ResolvingResource { return new ResolvingResource( $this->injector, $calledUri, $this->collectInterceptors($calledUri, $route), $this->supportedMimeTypes($route), $route ); }\n\n    ### Response: creates matching route\n\n@param   \\stubbles\\webapp\\routing\\CalledUri  $calledUri\n@param   \\stubbles\\webapp\\routing\\Route      $route\n@return  \\stubbles\\webapp\\routing\\ResolvingResource.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean deserializeRequestCommand(RemotingContext ctx, RpcRequestCommand cmd, int level) { boolean result; try { cmd.deserialize(level); result = true; } catch (DeserializationException e) { logger .error( \"DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}\", cmd.getId(), RpcDeserializeLevel.valueOf(level), e); sendResponseIfNecessary(ctx, cmd.getType(), this.getCommandFactory() .createExceptionResponse(cmd.getId(), ResponseStatus.SERVER_DESERIAL_EXCEPTION, e)); result = false; } catch (Throwable t) { String errMsg = \"Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=\" + cmd.getId() + \", deserializeLevel=\" + level; logger.error(errMsg, t); sendResponseIfNecessary(ctx, cmd.getType(), this.getCommandFactory() .createExceptionResponse(cmd.getId(), t, errMsg)); result = false; } return result; }\n\n    ### Response:", "ground_truth": "deserialize request command\n\n@return true if deserialize success; false if exception catched", "predict": "Deserializes RPC request and sends exception response if necessary"}, {"ID": 421, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function monitorArray(a, emit) { ['copyWithin', 'fill', 'pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'] .forEach(function(key) { var original = a[key]; a[key] = function() { var result = original.apply(a, arguments); emit(); return result; }; }); return a; }\n\n    ### Response: Wrap all modifying array methods, so change-emisions can be triggered\n@name    monitorArray\n@access  internal\n@param   Array     a\n@param   function  emitter\n@return  Array     a.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void preProcessRemotingContext(RemotingContext ctx, RpcRequestCommand cmd, long currentTimestamp) { ctx.setArriveTimestamp(cmd.getArriveTime()); ctx.setTimeout(cmd.getTimeout()); ctx.setRpcCommandType(cmd.getType()); ctx.getInvokeContext().putIfAbsent(InvokeContext.BOLT_PROCESS_WAIT_TIME, currentTimestamp - cmd.getArriveTime()); }\n\n    ### Response:", "ground_truth": "pre process remoting context, initial some useful infos and pass to biz\n\n@param ctx remoting context\n@param cmd rpc request command\n@param currentTimestamp current timestamp", "predict": "Pre-process the remoting context to set values for various attributes\n\n    @param       RpcRequestCommand       cmd    The rpc request context.\n    @param       long                   currentTimestamp The timestamp since the request context began executing, in millisecods.\n    @return       void                     The remoting context with values set for various attributes."}, {"ID": 422, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *LayeredCache) GetOrCreateSecondaryCache(primary string) *SecondaryCache { primaryBkt := c.bucket(primary) bkt := primaryBkt.getSecondaryBucket(primary) primaryBkt.Lock() if bkt == nil { bkt = &bucket{lookup: make(map[string]*Item)} primaryBkt.buckets[primary] = bkt } primaryBkt.Unlock() return &SecondaryCache{ bucket: bkt, pCache: c, } }\n\n    ### Response: // Get the secondary cache for a given primary key. This operation will\n// never return nil. In the case where the primary key does not exist, a\n// new, underlying, empty bucket will be created and returned..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void timeoutLog(final RpcRequestCommand cmd, long currentTimestamp, RemotingContext ctx) { if (logger.isDebugEnabled()) { logger .debug( \"request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}].\", cmd.getId(), currentTimestamp, cmd.getArriveTime(), (currentTimestamp - cmd.getArriveTime()), cmd.getTimeout()); } String remoteAddr = \"UNKNOWN\"; if (null != ctx) { ChannelHandlerContext channelCtx = ctx.getChannelContext(); Channel channel = channelCtx.channel(); if (null != channel) { remoteAddr = RemotingUtil.parseRemoteAddress(channel); } } logger .warn( \"Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}].\", cmd.getId(), remoteAddr, (currentTimestamp - cmd.getArriveTime()), cmd.getTimeout()); }\n\n    ### Response:", "ground_truth": "print some log when request timeout and discarded in io thread.", "predict": "// timeoutLog handles the expiration of RPC request when the wait time\n// exceeds the defined timeout parameter, by log the expiration\n// event and to prompt the server to stop the RPC request execution\n// and to prompt the client to react to the expiration"}, {"ID": 423, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def dict( self, *, include: 'SetStr' = None, exclude: 'SetStr' = None, by_alias: bool = False, skip_defaults: bool = False ) -> 'DictStrAny': \"\"\" Generate a dictionary representation of the model, optionally specifying which fields to include or exclude. \"\"\" get_key = self._get_key_factory(by_alias) get_key = partial(get_key, self.fields) return_keys = self._calculate_keys(include=include, exclude=exclude, skip_defaults=skip_defaults) if return_keys is None: return {get_key(k): v for k, v in self._iter(by_alias=by_alias, skip_defaults=skip_defaults)} else: return { get_key(k): v for k, v in self._iter(by_alias=by_alias, skip_defaults=skip_defaults) if k in return_keys }\n\n    ### Response: Generate a dictionary representation of the model, optionally specifying which fields to include or exclude..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void debugLog(RemotingContext ctx, RpcRequestCommand cmd, long currentTimestamp) { if (logger.isDebugEnabled()) { logger.debug(\"Rpc request received! requestId={}, from {}\", cmd.getId(), RemotingUtil.parseRemoteAddress(ctx.getChannelContext().channel())); logger.debug( \"request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}.\", cmd.getId(), currentTimestamp, cmd.getArriveTime(), (currentTimestamp - cmd.getArriveTime()), cmd.getTimeout()); } }\n\n    ### Response:", "ground_truth": "print some debug log when receive request", "predict": "\n    Debug logs the details of RPC request reception, such as the request ID, source IP, request timestamp, and total request latency to the log."}, {"ID": 424, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (r Hardware_Router) GetVirtualChassis() (resp datatypes.Hardware_Group, err error) { err = r.Session.DoRequest(\"SoftLayer_Hardware_Router\", \"getVirtualChassis\", nil, &r.Options, &resp) return }\n\n    ### Response: // Retrieve Information regarding the virtual chassis for a piece of hardware..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void process(RemotingContext ctx, T msg, ExecutorService defaultExecutor) throws Exception { ProcessTask task = new ProcessTask(ctx, msg); if (this.getExecutor() != null) { this.getExecutor().execute(task); } else { defaultExecutor.execute(task); } }\n\n    ### Response:", "ground_truth": "Process the remoting command with its own executor or with the defaultExecutor if its own if null.\n\n@param ctx\n@param msg\n@param defaultExecutor\n@throws Exception", "predict": "// Process the given message and execute the corresponding task"}, {"ID": 425, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def loadTexture_Async(self, textureId): \"\"\"Loads and returns a texture for use in the application.\"\"\" fn = self.function_table.loadTexture_Async ppTexture = POINTER(RenderModel_TextureMap_t)() result = fn(textureId, byref(ppTexture)) return result, ppTexture\n\n    ### Response: Loads and returns a texture for use in the application..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void invokeWithCallback(final Connection conn, final RemotingCommand request, final InvokeCallback invokeCallback, final int timeoutMillis) { final InvokeFuture future = createInvokeFuture(conn, request, request.getInvokeContext(), invokeCallback); conn.addInvokeFuture(future); final int requestId = request.getId(); try { Timeout timeout = TimerHolder.getTimer().newTimeout(new TimerTask() { @Override public void run(Timeout timeout) throws Exception { InvokeFuture future = conn.removeInvokeFuture(requestId); if (future != null) { future.putResponse(commandFactory.createTimeoutResponse(conn .getRemoteAddress())); future.tryAsyncExecuteInvokeCallbackAbnormally(); } } }, timeoutMillis, TimeUnit.MILLISECONDS); future.addTimeout(timeout); conn.getChannel().writeAndFlush(request).addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture cf) throws Exception { if (!cf.isSuccess()) { InvokeFuture f = conn.removeInvokeFuture(requestId); if (f != null) { f.cancelTimeout(); f.putResponse(commandFactory.createSendFailedResponse( conn.getRemoteAddress(), cf.cause())); f.tryAsyncExecuteInvokeCallbackAbnormally(); } logger.error(\"Invoke send failed. The address is {}\", RemotingUtil.parseRemoteAddress(conn.getChannel()), cf.cause()); } } }); } catch (Exception e) { InvokeFuture f = conn.removeInvokeFuture(requestId); if (f != null) { f.cancelTimeout(); f.putResponse(commandFactory.createSendFailedResponse(conn.getRemoteAddress(), e)); f.tryAsyncExecuteInvokeCallbackAbnormally(); } logger.error(\"Exception caught when sending invocation. The address is {}\", RemotingUtil.parseRemoteAddress(conn.getChannel()), e); } }\n\n    ### Response:", "ground_truth": "Invocation with callback.\n\n@param conn\n@param request\n@param invokeCallback\n@param timeoutMillis\n@throws InterruptedException", "predict": "Invoke sends the given request to the server and invokes the invoke callback once the request has been received and the response has been retrieved"}, {"ID": 426, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Configure(apiServer, kubeconfigPath string) { config.APIServer = apiServer config.KubeconfigPath = kubeconfigPath if IsEnabled() && config.APIServer != \"\" && !strings.HasPrefix(apiServer, \"http\") { config.APIServer = \"http://\" + apiServer } }\n\n    ### Response: // Configure sets the parameters of the Kubernetes package.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void oneway(final Connection conn, final RemotingCommand request) { try { conn.getChannel().writeAndFlush(request).addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture f) throws Exception { if (!f.isSuccess()) { logger.error(\"Invoke send failed. The address is {}\", RemotingUtil.parseRemoteAddress(conn.getChannel()), f.cause()); } } }); } catch (Exception e) { if (null == conn) { logger.error(\"Conn is null\"); } else { logger.error(\"Exception caught when sending invocation. The address is {}\", RemotingUtil.parseRemoteAddress(conn.getChannel()), e); } } }\n\n    ### Response:", "ground_truth": "Oneway invocation.\n\n@param conn\n@param request\n@throws InterruptedException", "predict": "// This listener processes the received request and invokes the appropriate listener for the given request."}, {"ID": 427, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static function traverse( $deep, &$object, $mapFunction, $seen = array() ) { if ($object instanceof AVObject) { if (in_array($object, $seen, true)) { return null; } $seen[] = $object; if ($deep) { self::traverse($deep, $object->estimatedData, $mapFunction, $seen); } return $mapFunction($object); } if ($object instanceof AVRelation || $object instanceof AVFile) { return $mapFunction($object); } if (is_array($object)) { foreach ($object as $key => $value) { self::traverse($deep, $value, $mapFunction, $seen); } return $mapFunction($object); } return $mapFunction($object); }\n\n    ### Response: Traverse object to find children.\n\n@param boolean $deep Should this call traverse deeply\n@param AVObject|array &$object Object to traverse.\n@param callable $mapFunction Function to call for every item.\n@param array $seen Objects already seen.\n\n@return mixed The result of calling mapFunction on the root object..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static byte toByte(BitSet bs) { int value = 0; for (int i = 0; i < bs.length(); ++i) { if (bs.get(i)) { value += 1 << i; } } if (bs.length() > 7) { throw new IllegalArgumentException(\"The byte value \" + value + \" generated according to bit set \" + bs + \" is out of range, should be limited between [\" + Byte.MIN_VALUE + \"] to [\" + Byte.MAX_VALUE + \"]\"); } return (byte) value; }\n\n    ### Response:", "ground_truth": "from bit set to byte\n@param bs\n@return byte represent the bit set", "predict": "Converts BitSet to corresponding Value in range 0 to 127"}, {"ID": 428, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected final Object negate( Object value ) { if (value == null) return null; return ((Boolean)value).booleanValue() ? Boolean.FALSE : Boolean.TRUE; }\n\n    ### Response: Negate a boolean value.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static BitSet toBitSet(int value) { if (value > Byte.MAX_VALUE || value < Byte.MIN_VALUE) { throw new IllegalArgumentException( \"The value \" + value + \" is out of byte range, should be limited between [\" + Byte.MIN_VALUE + \"] to [\" + Byte.MAX_VALUE + \"]\"); } BitSet bs = new BitSet(); int index = 0; while (value != 0) { if (value % 2 != 0) { bs.set(index); } ++index; value = (byte) (value >> 1); } return bs; }\n\n    ### Response:", "ground_truth": "from byte to bit set\n@param value\n@return bit set represent the byte", "predict": "Convert an int to BitSet.\n    * If parameter values are out of range, exception may be thrown\n    * Uses bit manipulations to convert int to BitSet\n    * Uses left-to-right algorithm for bit manipulations"}, {"ID": 429, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _sequence_search(self, start: GridQubit, current: List[GridQubit]) -> List[GridQubit]: \"\"\"Search for the continuous linear sequence from the given qubit. This method is called twice for the same starting qubit, so that sequences that begin and end on this qubit are searched for. Args: start: The first qubit, where search should be trigerred from. current: Previously found linear sequence, which qubits are forbidden to use during the search. Returns: Continuous linear sequence that begins with the starting qubit and does not contain any qubits from the current list. \"\"\" used = set(current) seq = [] n = start # type: Optional[GridQubit] while n is not None: # Append qubit n to the sequence and mark it is as visited. seq.append(n) used.add(n) # Advance search to the next qubit. n = self._choose_next_qubit(n, used) return seq\n\n    ### Response: Search for the continuous linear sequence from the given qubit.\n\n        This method is called twice for the same starting qubit, so that\n        sequences that begin and end on this qubit are searched for.\n\n        Args:\n            start: The first qubit, where search should be trigerred from.\n            current: Previously found linear sequence, which qubits are\n                     forbidden to use during the search.\n\n        Returns:\n            Continuous linear sequence that begins with the starting qubit and\n            does not contain any qubits from the current list..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void addReconnectTask(Url url) { ReconnectTask task = new ReconnectTask(); task.url = url; tasks.add(task); }\n\n    ### Response:", "ground_truth": "add reconnect task\n\n@param url", "predict": "Adds the given url to the list of ReconnectTasks to run\n    after disconnection and reconnection of Web Socket server and client"}, {"ID": 430, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def provision_devices(self, devices): \"\"\"Provision multiple devices with a single API call This method takes an iterable of dictionaries where the values in the dictionary are expected to match the arguments of a call to :meth:`provision_device`. The contents of each dictionary will be validated. :param list devices: An iterable of dictionaries each containing information about a device to be provision. The form of the dictionary should match the keyword arguments taken by :meth:`provision_device`. :raises DeviceCloudHttpException: If there is an unexpected error reported by Device Cloud. :raises ValueError: If any input fields are known to have a bad form. :return: A list of dictionaries in the form described for :meth:`provision_device` in the order matching the requested device list. Note that it is possible for there to be mixed success and error when provisioning multiple devices. \"\"\" # Validate all the input for each device provided sio = six.StringIO() def write_tag(tag, val): sio.write(\"<{tag}>{val}</{tag}>\".format(tag=tag, val=val)) def maybe_write_element(tag, val): if val is not None: write_tag(tag, val) return True return False sio.write(\"<list>\") for d in devices: sio.write(\"<DeviceCore>\") mac_address = d.get(\"mac_address\") device_id = d.get(\"device_id\") imei = d.get(\"imei\") if mac_address is not None: write_tag(\"devMac\", mac_address) elif device_id is not None: write_tag(\"devConnectwareId\", device_id) elif imei is not None: write_tag(\"devCellularModemId\", imei) else: raise ValueError(\"mac_address, device_id, or imei must be provided for device %r\" % d) # Write optional elements if present. maybe_write_element(\"grpPath\", d.get(\"group_path\")) maybe_write_element(\"dpUserMetaData\", d.get(\"metadata\")) maybe_write_element(\"dpTags\", d.get(\"tags\")) maybe_write_element(\"dpMapLong\", d.get(\"map_long\")) maybe_write_element(\"dpMapLat\", d.get(\"map_lat\")) maybe_write_element(\"dpContact\", d.get(\"contact\")) maybe_write_element(\"dpDescription\", d.get(\"description\")) sio.write(\"</DeviceCore>\") sio.write(\"</list>\") # Send the request, set the Accept XML as a nicety results = [] response = self._conn.post(\"/ws/DeviceCore\", sio.getvalue(), headers={'Accept': 'application/xml'}) root = ET.fromstring(response.content) # <result> tag is root of <list> response for child in root: if child.tag.lower() == \"location\": results.append({ \"error\": False, \"error_msg\": None, \"location\": child.text }) else: # we expect \"error\" but handle generically results.append({ \"error\": True, \"location\": None, \"error_msg\": child.text }) return results\n\n    ### Response: Provision multiple devices with a single API call\n\n        This method takes an iterable of dictionaries where the values in the dictionary are\n        expected to match the arguments of a call to :meth:`provision_device`.  The\n        contents of each dictionary will be validated.\n\n        :param list devices: An iterable of dictionaries each containing information about\n            a device to be provision.  The form of the dictionary should match the keyword\n            arguments taken by :meth:`provision_device`.\n        :raises DeviceCloudHttpException: If there is an unexpected error reported by Device Cloud.\n        :raises ValueError: If any input fields are known to have a bad form.\n        :return: A list of dictionaries in the form described for :meth:`provision_device` in the\n            order matching the requested device list.  Note that it is possible for there to\n            be mixed success and error when provisioning multiple devices..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void stop() { if (!this.started) { return; } this.started = false; healConnectionThreads.interrupt(); this.tasks.clear(); this.canceled.clear(); }\n\n    ### Response:", "ground_truth": "stop reconnect thread", "predict": "\n    The stop() method stops the Device Cloud connector threads, clears any pending tasks and\n    sets the flag to indicate that the connector is not running."}, {"ID": 431, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def fetch_submissions(self, submissions_callback, *args): \"\"\"Wrap the submissions_callback function.\"\"\" logger.debug('Fetching submissions') submissions_callback(*args) logger.info('Found {} submissions'.format(len(self.submissions))) if not self.submissions: return self.min_date = min(x.created_utc for x in self.submissions.values()) self.max_date = max(x.created_utc for x in self.submissions.values()) self.process_submitters() self.process_commenters()\n\n    ### Response: Wrap the submissions_callback function..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected RemotingCommand toRemotingCommand(Object request, Connection conn, InvokeContext invokeContext, int timeoutMillis) throws SerializationException { RpcRequestCommand command = this.getCommandFactory().createRequestCommand(request); if (null != invokeContext) { // set client custom serializer for request command if not null Object clientCustomSerializer = invokeContext.get(InvokeContext.BOLT_CUSTOM_SERIALIZER); if (null != clientCustomSerializer) { try { command.setSerializer((Byte) clientCustomSerializer); } catch (ClassCastException e) { throw new IllegalArgumentException( \"Illegal custom serializer [\" + clientCustomSerializer + \"], the type of value should be [byte], but now is [\" + clientCustomSerializer.getClass().getName() + \"].\"); } } // enable crc by default, user can disable by set invoke context `false` for key `InvokeContext.BOLT_CRC_SWITCH` Boolean crcSwitch = invokeContext.get(InvokeContext.BOLT_CRC_SWITCH, ProtocolSwitch.CRC_SWITCH_DEFAULT_VALUE); if (null != crcSwitch && crcSwitch) { command.setProtocolSwitch(ProtocolSwitch .create(new int[] { ProtocolSwitch.CRC_SWITCH_INDEX })); } } else { // enable crc by default, if there is no invoke context. command.setProtocolSwitch(ProtocolSwitch .create(new int[] { ProtocolSwitch.CRC_SWITCH_INDEX })); } command.setTimeout(timeoutMillis); command.setRequestClass(request.getClass().getName()); command.setInvokeContext(invokeContext); command.serialize(); logDebugInfo(command); return command; }\n\n    ### Response:", "ground_truth": "Convert application request object to remoting request command.\n\n@param request\n@param conn\n@param timeoutMillis\n@return\n@throws CodecException", "predict": "Create RequestCommand..\n\n    "}, {"ID": 432, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def save_bt_addr(self, packet, bt_addr): \"\"\"Add to the list of mappings.\"\"\" if isinstance(packet, EddystoneUIDFrame): # remove out old mapping new_mappings = [m for m in self.eddystone_mappings if m[0] != bt_addr] new_mappings.append((bt_addr, packet.properties)) self.eddystone_mappings = new_mappings\n\n    ### Response: Add to the list of mappings..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Map<String, List<Connection>> filter(List<Connection> connections) { List<Connection> serviceOnConnections = new ArrayList<Connection>(); List<Connection> serviceOffConnections = new ArrayList<Connection>(); Map<String, List<Connection>> filteredConnections = new ConcurrentHashMap<String, List<Connection>>(); for (Connection connection : connections) { String serviceStatus = (String) connection.getAttribute(Configs.CONN_SERVICE_STATUS); if (serviceStatus != null) { if (connection.isInvokeFutureMapFinish() && !freshSelectConnections.containsValue(connection)) { serviceOffConnections.add(connection); } } else { serviceOnConnections.add(connection); } } filteredConnections.put(Configs.CONN_SERVICE_STATUS_ON, serviceOnConnections); filteredConnections.put(Configs.CONN_SERVICE_STATUS_OFF, serviceOffConnections); return filteredConnections; }\n\n    ### Response:", "ground_truth": "Filter connections to monitor\n\n@param connections", "predict": "Filters the given list of connectios to produce two maps of status and corresponding connectios"}, {"ID": 433, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def make_sqlite_url(filename: str) -> str: \"\"\" Makes an SQLAlchemy URL for a SQLite database. \"\"\" absfile = os.path.abspath(filename) return \"sqlite://{host}/{path}\".format(host=\"\", path=absfile)\n\n    ### Response: Makes an SQLAlchemy URL for a SQLite database..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void monitor(Map<String, RunStateRecordedFutureTask<ConnectionPool>> connPools) { try { if (null != connPools && !connPools.isEmpty()) { Iterator<Map.Entry<String, RunStateRecordedFutureTask<ConnectionPool>>> iter = connPools .entrySet().iterator(); while (iter.hasNext()) { Map.Entry<String, RunStateRecordedFutureTask<ConnectionPool>> entry = iter .next(); String poolKey = entry.getKey(); ConnectionPool pool = FutureTaskUtil.getFutureTaskResult(entry.getValue(), logger); List<Connection> connections = pool.getAll(); Map<String, List<Connection>> filteredConnectons = this.filter(connections); List<Connection> serviceOnConnections = filteredConnectons .get(Configs.CONN_SERVICE_STATUS_ON); List<Connection> serviceOffConnections = filteredConnectons .get(Configs.CONN_SERVICE_STATUS_OFF); if (serviceOnConnections.size() > CONNECTION_THRESHOLD) { Connection freshSelectConnect = serviceOnConnections.get(random .nextInt(serviceOnConnections.size())); freshSelectConnect.setAttribute(Configs.CONN_SERVICE_STATUS, Configs.CONN_SERVICE_STATUS_OFF); Connection lastSelectConnect = freshSelectConnections.remove(poolKey); freshSelectConnections.put(poolKey, freshSelectConnect); closeFreshSelectConnections(lastSelectConnect, serviceOffConnections); } else { if (freshSelectConnections.containsKey(poolKey)) { Connection lastSelectConnect = freshSelectConnections.remove(poolKey); closeFreshSelectConnections(lastSelectConnect, serviceOffConnections); } if (logger.isInfoEnabled()) { logger .info( \"the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}].\", serviceOnConnections.size(), CONNECTION_THRESHOLD); } } for (Connection offConn : serviceOffConnections) { if (offConn.isFine()) { offConn.close(); } } } } } catch (Exception e) { logger.error(\"ScheduledDisconnectStrategy monitor error\", e); } }\n\n    ### Response:", "ground_truth": "Monitor connections and close connections with status is off\n\n@param connPools", "predict": "The Monitor method of this class periodically monitors the SQLAlchemy Connection Pools of the application to detect if any of them has reached its limit of allowed active Connections and take corresponding actions to balance load across the Connection Pools to maximize connectivity and maximize uptime of the Application"}, {"ID": 434, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private UserAlias getUserAlias(Object attribute) { if (m_userAlias != null) { return m_userAlias; } if (!(attribute instanceof String)) { return null; } if (m_alias == null) { return null; } if (m_aliasPath == null) { boolean allPathsAliased = true; return new UserAlias(m_alias, (String)attribute, allPathsAliased); } return new UserAlias(m_alias, (String)attribute, m_aliasPath); }\n\n    ### Response: Retrieves or if necessary, creates a user alias to be used\nby a child criteria\n@param attribute The alias to set.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void closeFreshSelectConnections(Connection lastSelectConnect, List<Connection> serviceOffConnections) throws InterruptedException { if (null != lastSelectConnect) { if (lastSelectConnect.isInvokeFutureMapFinish()) { serviceOffConnections.add(lastSelectConnect); } else { Thread.sleep(RETRY_DETECT_PERIOD); if (lastSelectConnect.isInvokeFutureMapFinish()) { serviceOffConnections.add(lastSelectConnect); } else { if (logger.isInfoEnabled()) { logger.info(\"Address={} won't close at this schedule turn\", RemotingUtil.parseRemoteAddress(lastSelectConnect.getChannel())); } } } } }\n\n    ### Response:", "ground_truth": "close the connection of the fresh select connections\n\n@param lastSelectConnect\n@param serviceOffConnections\n@throws InterruptedException", "predict": "Closes any unclosed fresh connect and save time"}, {"ID": 435, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void removeSource (JComponent comp) { if (_sourceComp == comp) { // reset cursors clearComponentCursor(); _topComp.setCursor(_topCursor); reset(); } _draggers.remove(comp); comp.removeMouseListener(_sourceListener); comp.removeMouseMotionListener(_sourceListener); }\n\n    ### Response: Remove a dragsource..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean getBool(String key, String defaultValue) { return Boolean.parseBoolean(System.getProperty(key, defaultValue)); }\n\n    ### Response:", "ground_truth": "~~~ public helper methods to retrieve system property", "predict": "Get boolean from System Properties"}, {"ID": 436, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <E extends Number> AbstractGroupExpression<E, E> avg(Expression<E> expression) { return new GAvg<E>(expression); }\n\n    ### Response: Create a new aggregating avg expression\n\n@param expression expression for which the accumulated average value will be used in the group by projection\n@return wrapper expression.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void infoLog(String format, String addr) { if (logger.isInfoEnabled()) { if (StringUtils.isNotEmpty(addr)) { logger.info(format, addr); } else { logger.info(format, \"UNKNOWN-ADDR\"); } } }\n\n    ### Response:", "ground_truth": "print info log\n@param format\n@param addr", "predict": "Info log for given format and address\n\n/**\n * Info log for given format and address\n *\n * @param format message to display\n * @param addr address to display\n * @param <E extends Number> E type for Number expressions\n * @param <E extends Number> E type for Number expressions\n * @return wrapper expression\n *\n * @param format message to display\n * @param addr address to display\n * @param <E extends Number> E type for Number expressions\n * @param <E extends Number> E type for Number expressions\n * @return wrapper expression\n *\n * @param format message to display\n * @param addr address to display\n * @param <E extends Number> E type for Number expressions\n * @param <E extends Number> E type for Number expressions\n * @return wrapper expression\n *\n * @param format message to display\n * @param addr address to display\n * @param <E extends Number> E type for Number expressions\n * @param <E extends Number>"}, {"ID": 437, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(vars, listener) { if (!Array.isArray(vars)) { vars = [vars]; } if (vars.length == 0) return null; var found = false; vars.forEach( function(name) { var data = this.findDataBinding(name); var i, target; for (i = 0 ; i < data[1].length ; i++) { target = data[1][i]; if (listener === target) { data[1].splice(i, 1); found = true; return; } } }, this ); return found; }\n\n    ### Response: Detach this object from data binding.\n\n@param {array} vars array of names of data to watch.\n@param {object} listner the listener to remove.\n@memberof WTag.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean isRequestTimeout() { if (this.timeout > 0 && (this.rpcCommandType != RpcCommandType.REQUEST_ONEWAY) && (System.currentTimeMillis() - this.arriveTimestamp) > this.timeout) { return true; } return false; }\n\n    ### Response:", "ground_truth": "whether this request already timeout\n\n@return", "predict": "Checks if request has timedout because of its setTimeout value or its RPCType."}, {"ID": 438, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_string_scope(self, code, resource=None): \"\"\"Returns a `Scope` object for the given code\"\"\" return rope.base.libutils.get_string_scope(code, resource)\n\n    ### Response: Returns a `Scope` object for the given code.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public UserProcessor<?> getUserProcessor(String className) { return StringUtils.isBlank(className) ? null : this.userProcessors.get(className); }\n\n    ### Response:", "ground_truth": "Get user processor for class name.\n\n@param className\n@return", "predict": "GetUserProcessor - GetUserProcessor() returns an instance of the specified processor for the given class name, or null if no processor for the given class name is defined in the specified Map."}, {"ID": 439, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void dropIndex(String indexName) { Index index; index = table.getIndex(indexName); if (table.isIndexingMutable()) { table.dropIndex(session, indexName); } else { OrderedHashSet indexSet = new OrderedHashSet(); indexSet.add(table.getIndex(indexName).getName()); Table tn = table.moveDefinition(session, table.tableType, null, null, null, -1, 0, emptySet, indexSet); tn.moveData(session, table, -1, 0); updateConstraints(tn, emptySet); setNewTableInSchema(tn); database.persistentStoreCollection.releaseStore(table); table = tn; } if (!index.isConstraint()) { database.schemaManager.removeSchemaObject(index.getName()); } database.schemaManager.recompileDependentObjects(table); }\n\n    ### Response: Because of the way indexes and column data are held in memory and on\ndisk, it is necessary to recreate the table when an index is added to or\nremoved from a non-empty table.\n\n Originally, this method would break existing foreign keys as the\ntable order in the DB was changed. The new table is now linked in place\nof the old table (fredt@users)\n\n@param indexName String.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Connection randomGet(List<Connection> conns) { if (null == conns || conns.isEmpty()) { return null; } int size = conns.size(); int tries = 0; Connection result = null; while ((result == null || !result.isFine()) && tries++ < MAX_TIMES) { result = conns.get(this.random.nextInt(size)); } if (result != null && !result.isFine()) { result = null; } return result; }\n\n    ### Response:", "ground_truth": "get one connection randomly\n\n@param conns\n@return", "predict": "Get a random Connection from the list of available Connections\n    (fredt@users)"}, {"ID": 440, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Get(name string) (string, error) { m, err := ReadConfig() if err != nil { return \"\", err } return get(name, m) }\n\n    ### Response: // Get gets a named value from config.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public <T> T get(String key, T defaultIfNotFound) { return this.context.get(key) != null ? (T) this.context.get(key) : defaultIfNotFound; }\n\n    ### Response:", "ground_truth": "get and use default if not found\n\n@param key\n@param defaultIfNotFound\n@param \n@return", "predict": "// This method uses the Spring EL Resolver to retrieve the given value from the Spring context."}, {"ID": 441, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static List<Point> getPath ( TraversalPred tpred, Object trav, int longest, int ax, int ay, int bx, int by, boolean partial) { return getPath(tpred, new Stepper(), trav, longest, ax, ay, bx, by, partial); }\n\n    ### Response: Gets a path with the default stepper which assumes the piece can move one in any of the\neight cardinal directions..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getProperty(String key) { if (properties == null) { return null; } return properties.getProperty(key); }\n\n    ### Response:", "ground_truth": "Get property value according to property key\n\n@param key\n@return property value", "predict": "Retrieves the specified property from the Map of Properties stored in the given Map."}, {"ID": 442, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func CQ(c context.Context, cfg *pb.Config) error { // Normalize each ConfigGroup individually first. for _, cg := range cfg.ConfigGroups { for _, g := range cg.Gerrit { normalizeGerrit(g) } sort.Slice(cg.Gerrit, func(i, j int) bool { return cg.Gerrit[i].Url < cg.Gerrit[j].Url }) if cg.Verifiers != nil { normalizeGerritCqAbility(cg.Verifiers.GerritCqAbility) normalizeTryjobs(cg.Verifiers.Tryjob) } } // Sort by some synthetic key. It doesn't really matter what it is exactly as // long as the final ordering is \"stable\" across multiple invocations. Note // that we rely here on sorting of Gerrit/Project/Refs done above. sortKeys := make(map[*pb.ConfigGroup]string, len(cfg.ConfigGroups)) for _, cg := range cfg.ConfigGroups { sortKeys[cg] = cgSortKey(cg) } sort.Slice(cfg.ConfigGroups, func(i, j int) bool { return sortKeys[cfg.ConfigGroups[i]] < sortKeys[cfg.ConfigGroups[j]] }) return nil }\n\n    ### Response: // CQ normalizes cq.cfg config..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Object resolveResponseObject(ResponseCommand responseCommand, String addr) throws RemotingException { preProcess(responseCommand, addr); if (responseCommand.getResponseStatus() == ResponseStatus.SUCCESS) { return toResponseObject(responseCommand); } else { String msg = String.format(\"Rpc invocation exception: %s, the address is %s, id=%s\", responseCommand.getResponseStatus(), addr, responseCommand.getId()); logger.warn(msg); if (responseCommand.getCause() != null) { throw new InvokeException(msg, responseCommand.getCause()); } else { throw new InvokeException(msg + \", please check the server log for more.\"); } } }\n\n    ### Response:", "ground_truth": "Analyze the response command and generate the response object.\n\n@param responseCommand response command\n@param addr response address\n@return response object", "predict": "// Resolve and convert RPCHandle response to objects"}, {"ID": 443, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def make_compound_word(self, start_index, how_many): \"\"\"Combines two Units in self.unit_list to make a compound word token. :param int start_index: Index of first Unit in self.unit_list to be combined :param int how_many: Index of how many Units in self.unit_list to be combined. Modifies: - self.unit_list: Modifies the Unit corresponding to the first word in the compound word. Changes the .text property to include .text properties from subsequent Units, separted by underscores. Modifies the .original_text property to record each componentword separately. Modifies the .end_time property to be the .end_time of the final unit in the compound word. Finally, after extracting the text and timing information, it removes all units in the compound word except for the first. .. note: This method is only used with semantic processing, so we don't need to worry about the phonetic representation of Units. \"\"\" if not self.quiet: compound_word = \"\" for word in self.unit_list[start_index:start_index + how_many]: compound_word += \" \" + word.text print compound_word.strip(), \"-->\",\"_\".join(compound_word.split()) #combine text for other_unit in range(1, how_many): self.unit_list[start_index].original_text.append(self.unit_list[start_index + other_unit].text) self.unit_list[start_index].text += \"_\" + self.unit_list[start_index + other_unit].text #start time is the same. End time is the end time of the LAST word self.unit_list[start_index].end_time = self.unit_list[start_index + how_many - 1].end_time #shorten unit_list self.unit_list = self.unit_list[:start_index + 1] + self.unit_list[start_index + how_many:]\n\n    ### Response: Combines two Units in self.unit_list to make a compound word token.\n\n        :param int start_index: Index of first Unit in self.unit_list to be combined\n        :param int how_many: Index of how many Units in self.unit_list to be combined.\n\n        Modifies:\n                - self.unit_list: Modifies the Unit corresponding to the first word\n                    in the compound word. Changes the .text property to include .text\n                    properties from subsequent Units, separted by underscores. Modifies\n                    the .original_text property to record each componentword separately.\n                    Modifies the .end_time property to be the .end_time of the final unit\n                    in the compound word.  Finally, after extracting the text and timing\n                    information, it removes all units in the compound word except for the\n                    first.\n\n        .. note: This method is only used with semantic processing, so we don't need to worry\n            about the phonetic representation of Units..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static Object toResponseObject(ResponseCommand responseCommand) throws CodecException { RpcResponseCommand response = (RpcResponseCommand) responseCommand; response.deserialize(); return response.getResponseObject(); }\n\n    ### Response:", "ground_truth": "Convert remoting response command to application response object.", "predict": "\n    Private static Object toResponseObject(ResponseCommand responseCommand) throws CodecException{\n            RpcResponseCommand response = (RpcResponseCommand)responseCommand;\n            response.deserialize();\n            return response.getResponseObject();\n    }"}, {"ID": 444, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function footer(Closure $closure = null) { if (!$closure) { return $this->footer; } $this->footer = $closure; return $this; }\n\n    ### Response: Set grid footer.\n\n@param Closure|null $closure\n\n@return $this|Closure.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static Throwable toThrowable(ResponseCommand responseCommand) throws CodecException { RpcResponseCommand resp = (RpcResponseCommand) responseCommand; resp.deserialize(); Object ex = resp.getResponseObject(); if (ex != null && ex instanceof Throwable) { return (Throwable) ex; } return null; }\n\n    ### Response:", "ground_truth": "Convert remoting response command to throwable if it is a throwable, otherwise return null.", "predict": "Deserializes the given command and converts it into its appropriate exception objects or null values if there is no error."}, {"ID": 445, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _get_site_amplification_term(self, C, vs30): \"\"\" Returns the site amplification term on the basis of Eurocode 8 site class \"\"\" s_b, s_c, s_d = self._get_site_dummy_variables(vs30) return (C[\"sB\"] * s_b) + (C[\"sC\"] * s_c) + (C[\"sD\"] * s_d)\n\n    ### Response: Returns the site amplification term on the basis of Eurocode 8\n        site class.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static String detailErrMsg(String clientErrMsg, ResponseCommand responseCommand) { RpcResponseCommand resp = (RpcResponseCommand) responseCommand; if (StringUtils.isNotBlank(resp.getErrorMsg())) { return String.format(\"%s, ServerErrorMsg:%s\", clientErrMsg, resp.getErrorMsg()); } else { return String.format(\"%s, ServerErrorMsg:null\", clientErrMsg); } }\n\n    ### Response:", "ground_truth": "Detail your error msg with the error msg returned from response command", "predict": "Error message details for the given error message and corresponding response command."}, {"ID": 446, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def store(self, thing): \"\"\" Simple persistence method \"\"\" to_store = {'field1': thing.field1, 'date_field': thing.date_field, } to_store['stuff'] = Binary(cPickle.dumps(thing.stuff)) # Respect any soft-quota on write - raises if stats().totals.size > quota self._arctic_lib.check_quota() self._collection.insert_one(to_store)\n\n    ### Response: Simple persistence method.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private RpcServerException createServerException(Throwable t, String errMsg) { String formattedErrMsg = String.format( \"[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s\", t.getClass().getName(), t.getMessage(), errMsg); RpcServerException e = new RpcServerException(formattedErrMsg); e.setStackTrace(t.getStackTrace()); return e; }\n\n    ### Response:", "ground_truth": "create server exception using error msg and fill the stack trace using the stack trace of throwable.\n\n@param t the origin throwable to fill the stack trace of rpc server exception\n@param errMsg additional error msg, null is allowed\n@return an instance of RpcServerException", "predict": "Creates and returns an exception with the given error message and details of the exception."}, {"ID": 447, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function showUpgradeNotes(Script\\Event $event) { $packageName = 'yiisoft/yii2'; if (!isset($this->_packageUpdates[$packageName])) { return; } $package = $this->_packageUpdates['yiisoft/yii2']; // do not show a notice on up/downgrades between dev versions // avoid messages like from version dev-master to dev-master if ($package['fromPretty'] == $package['toPretty']) { return; } $io = $event->getIO(); // print the relevant upgrade notes for the upgrade // - only on upgrade, not on downgrade // - only if the \"from\" version is non-dev, otherwise we have no idea which notes to show if ($package['direction'] === 'up' && $this->isNumericVersion($package['fromPretty'])) { $notes = $this->findUpgradeNotes($packageName, $package['fromPretty']); if ($notes !== false && empty($notes)) { // no relevent upgrade notes, do not show anything. return; } $this->printUpgradeIntro($io, $package); if ($notes) { // safety check: do not display notes if they are too many if (count($notes) > 250) { $io->write(\"\\n <fg=yellow;options=bold>The relevant notes for your upgrade are too long to be displayed here.</>\"); } else { $io->write(\"\\n \" . trim(implode(\"\\n \", $notes))); } } $io->write(\"\\n You can find the upgrade notes for all versions online at:\"); } else { $this->printUpgradeIntro($io, $package); $io->write(\"\\n You can find the upgrade notes online at:\"); } $this->printUpgradeLink($io, $package); }\n\n    ### Response: Listen to POST_UPDATE_CMD event to display information about upgrade notes if appropriate.\n@param Script\\Event $event.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void printConnectionTraceLog(Logger logger, String traceId, InvokeContext invokeContext) { String sourceIp = invokeContext.get(InvokeContext.CLIENT_LOCAL_IP); Integer sourcePort = invokeContext.get(InvokeContext.CLIENT_LOCAL_PORT); String targetIp = invokeContext.get(InvokeContext.CLIENT_REMOTE_IP); Integer targetPort = invokeContext.get(InvokeContext.CLIENT_REMOTE_PORT); StringBuilder logMsg = new StringBuilder(); logMsg.append(traceId).append(\",\"); logMsg.append(sourceIp).append(\",\"); logMsg.append(sourcePort).append(\",\"); logMsg.append(targetIp).append(\",\"); logMsg.append(targetPort); if (logger.isInfoEnabled()) { logger.info(logMsg.toString()); } }\n\n    ### Response:", "ground_truth": "print trace log\n@param traceId\n@param invokeContext", "predict": "Examine the details of the given request to determine if anything looks unusual or misconfigured, and to generate corresponding debug logs to help track issues and provide information for troubleshooting."}, {"ID": 448, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def move_application(self, app_id, queue): \"\"\"Move an application to a different queue. Parameters ---------- app_id : str The id of the application to move. queue : str The queue to move the application to. \"\"\" self._call('moveApplication', proto.MoveRequest(id=app_id, queue=queue))\n\n    ### Response: Move an application to a different queue.\n\n        Parameters\n        ----------\n        app_id : str\n            The id of the application to move.\n        queue : str\n            The queue to move the application to..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static EventLoopGroup newEventLoopGroup(int nThreads, ThreadFactory threadFactory) { return epollEnabled ? new EpollEventLoopGroup(nThreads, threadFactory) : new NioEventLoopGroup(nThreads, threadFactory); }\n\n    ### Response:", "ground_truth": "Create the right event loop according to current platform and system property, fallback to NIO when epoll not enabled.\n\n@param nThreads\n@param threadFactory\n@return an EventLoopGroup suitable for the current platform", "predict": "Creates an EventLoopGroup with specified nThreads and threadFactory arguments."}, {"ID": 449, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def sort(in_file, out_file): \"\"\"Sorts the given file. \"\"\" filehandle = open(in_file, 'r') lines = filehandle.readlines() filehandle.close() lines.sort() filehandle = open(out_file, 'w') for line in lines: filehandle.write(line) filehandle.close()\n\n    ### Response: Sorts the given file..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String parseRemoteAddress(final Channel channel) { if (null == channel) { return StringUtils.EMPTY; } final SocketAddress remote = channel.remoteAddress(); return doParse(remote != null ? remote.toString().trim() : StringUtils.EMPTY); }\n\n    ### Response:", "ground_truth": "Parse the remote address of the channel.\n\n@param channel\n@return", "predict": "Parses the given remote address."}, {"ID": 450, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function entityTo(string $propertyName) { $idString = implode(':', [$this->definition->getClassName(), __CLASS__, $this->relationCount++]); $this->readDefinition->relation($propertyName) ->asCustom(new EmbeddedObjectRelation($idString, new EmbeddedMapperProxy($this->mapper))); }\n\n    ### Response: Maps the entity instance to the property\nof the read model.\n\n@param string $propertyName\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String parseLocalAddress(final Channel channel) { if (null == channel) { return StringUtils.EMPTY; } final SocketAddress local = channel.localAddress(); return doParse(local != null ? local.toString().trim() : StringUtils.EMPTY); }\n\n    ### Response:", "ground_truth": "Parse the local address of the channel.\n\n@param channel\n@return", "predict": "Parses the local address of the specified channel."}, {"ID": 451, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def add_params_to_url(url, params): \"\"\"Adds params to url :param url: Url :param params: Params to add :return: original url with new params \"\"\" url_parts = list(urlparse.urlparse(url)) # get url parts query = dict(urlparse.parse_qsl(url_parts[4])) # get url query query.update(params) # add new params url_parts[4] = urlencode(query) return urlparse.urlunparse(url_parts)\n\n    ### Response: Adds params to url\n\n    :param url: Url\n    :param params: Params to add\n    :return: original url with new params.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String parseRemoteIP(final Channel channel) { if (null == channel) { return StringUtils.EMPTY; } final InetSocketAddress remote = (InetSocketAddress) channel.remoteAddress(); if (remote != null) { return remote.getAddress().getHostAddress(); } return StringUtils.EMPTY; }\n\n    ### Response:", "ground_truth": "Parse the remote host ip of the channel.\n\n@param channel\n@return", "predict": "Parses remote ip\n\n    If you need any Help, Please visit our Help Section."}, {"ID": 452, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_group_line(self, data): \"\"\"Get the next group-style key's line. :param data: the data to proceed :returns: the line number \"\"\" idx = -1 for key in self.groups: i = self.get_group_key_line(data, key) if (i < idx and i != -1) or idx == -1: idx = i return idx\n\n    ### Response: Get the next group-style key's line.\n\n        :param data: the data to proceed\n        :returns: the line number.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String parseRemoteHostName(final Channel channel) { if (null == channel) { return StringUtils.EMPTY; } final InetSocketAddress remote = (InetSocketAddress) channel.remoteAddress(); if (remote != null) { return remote.getAddress().getHostName(); } return StringUtils.EMPTY; }\n\n    ### Response:", "ground_truth": "Parse the remote hostname of the channel.\n\nNote: take care to use this method, for a reverse name lookup takes uncertain time in {@link InetAddress#getHostName}.\n\n@param channel\n@return", "predict": "Parses the hostname of the remote endpoint of the given channel."}, {"ID": 453, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def pull(image, tag=None): \"\"\" pull a docker image \"\"\" if tag: image = \":\".join([image, tag]) utils.xrun(\"docker pull\", [image])\n\n    ### Response: pull a docker image.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String parseLocalIP(final Channel channel) { if (null == channel) { return StringUtils.EMPTY; } final InetSocketAddress local = (InetSocketAddress) channel.localAddress(); if (local != null) { return local.getAddress().getHostAddress(); } return StringUtils.EMPTY; }\n\n    ### Response:", "ground_truth": "Parse the local host ip of the channel.\n\n@param channel\n@return", "predict": "Parses the local IP of the given channel."}, {"ID": 454, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function generate($length = null) { $generator = new RandomGenerator(); $result = $generator->randomToken('sha256'); if ($length !== null) { return substr($result, 0, $length); } return $result; }\n\n    ### Response: Generates new random key\n\n@param integer $length\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int parseRemotePort(final Channel channel) { if (null == channel) { return -1; } final InetSocketAddress remote = (InetSocketAddress) channel.remoteAddress(); if (remote != null) { return remote.getPort(); } return -1; }\n\n    ### Response:", "ground_truth": "Parse the remote host port of the channel.\n\n@param channel\n@return int", "predict": "Parses the remote port of the given channel\n\nParses the remote port of the given channel."}, {"ID": 455, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function runRoute(Request $request, Route $route) { $request->setRouteResolver(function () use ($route) { return $route; }); $this->events->dispatch(new Events\\RouteMatched($route, $request)); return $this->prepareResponse($request, $this->runRouteWithinStack($route, $request) ); }\n\n    ### Response: Return the response for the given route.\n\n@param  \\Illuminate\\Http\\Request  $request\n@param  \\Illuminate\\Routing\\Route  $route\n@return \\Illuminate\\Http\\Response|\\Illuminate\\Http\\JsonResponse.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int parseLocalPort(final Channel channel) { if (null == channel) { return -1; } final InetSocketAddress local = (InetSocketAddress) channel.localAddress(); if (local != null) { return local.getPort(); } return -1; }\n\n    ### Response:", "ground_truth": "Parse the local host port of the channel.\n\n@param channel\n@return int", "predict": "Parses the local port of the given channel."}, {"ID": 456, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_model(with_pipeline=False): \"\"\"Get a multi-layer perceptron model. Optionally, put it in a pipeline that scales the data. \"\"\" model = NeuralNetClassifier(MLPClassifier) if with_pipeline: model = Pipeline([ ('scale', FeatureUnion([ ('minmax', MinMaxScaler()), ('normalize', Normalizer()), ])), ('select', SelectKBest(k=N_FEATURES)), # keep input size constant ('net', model), ]) return model\n\n    ### Response: Get a multi-layer perceptron model.\n\n    Optionally, put it in a pipeline that scales the data..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String parseSocketAddressToHostIp(SocketAddress socketAddress) { final InetSocketAddress addrs = (InetSocketAddress) socketAddress; if (addrs != null) { InetAddress addr = addrs.getAddress(); if (null != addr) { return addr.getHostAddress(); } } return StringUtils.EMPTY; }\n\n    ### Response:", "ground_truth": "Parse the host ip of socket address.\n\ne.g. /127.0.0.1:1234 -> 127.0.0.1\n\n@param socketAddress\n@return String", "predict": "Parses a socket address to extract its host and port components to form an host and port string."}, {"ID": 457, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void mergeFiles(List<File> inputFiles, OutputStream outputStream) throws IOException { long startTime = System.nanoTime(); //Merge files for (File f : inputFiles) { if (f.exists()) { FileInputStream fileInputStream = new FileInputStream(f); BufferedInputStream bufferedInputStream = new BufferedInputStream(fileInputStream); try { LOGGER.log(Level.INFO, \"Merging {0} size={1}\", new Object[]{f.getName(), f.length()}); byte[] buffer = new byte[8192]; int length; while ((length = bufferedInputStream.read(buffer)) > 0) { outputStream.write(buffer, 0, length); } } finally { bufferedInputStream.close(); fileInputStream.close(); } } else { LOGGER.log(Level.INFO, \"Skip merging file {0} because it doesn't exist\", f.getName()); } } LOGGER.log(Level.INFO, \"Time to merge {0} s\", ((System.nanoTime() - startTime) / 1000000000.0)); }\n\n    ### Response: Merge files to the provided fileChannel.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void add(Connection connection) { markAccess(); if (null == connection) { return; } boolean res = this.conns.addIfAbsent(connection); if (res) { connection.increaseRef(); } }\n\n    ### Response:", "ground_truth": "add a connection\n\n@param connection", "predict": "Adds the given Connection to the list of Connections managed by this Pool."}, {"ID": 458, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function sendResponse($status, $nextUrl, $detail = null) { $message = $this->getResponseBody($status, $nextUrl, $detail); echo $message; if ((bool)$this->getExitOnResponse()) { exit; } }\n\n    ### Response: Respond to SagePay confirming or rejecting the notification.\n\n@param string The status to send to Sage Pay, one of static::RESPONSE_STATUS_*\n@param string URL to forward the customer to.\n@param string Optional human readable reason for this response..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void removeAndTryClose(Connection connection) { if (null == connection) { return; } boolean res = this.conns.remove(connection); if (res) { connection.decreaseRef(); } if (connection.noRef()) { connection.close(); } }\n\n    ### Response:", "ground_truth": "removeAndTryClose a connection\n\n@param connection", "predict": "Remove the Connection from the list of Connections and try to close the Connection"}, {"ID": 459, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function user($id = null) { if ($this->allCleared === true || $this->isSwitchedOff()) { return; } if ($id === null) { // @todo From the looks of usage in legacy we only need to clear meta data here, and there is no such thing // in persistence so we ignore it for now. //$this->cache->clear(); } elseif (is_scalar($id)) { $this->cache->invalidateTags(['user-' . $id]); } else { throw new InvalidArgumentType('$id', 'int|null', $id); } }\n\n    ### Response: Clear meta info on users in Persistence.\n\nIn legacy kernel used when clearing meta info cache on users in eZUser, never with id.\n\n@param int|null $id Purges all users cache if null\n@throws \\eZ\\Publish\\Core\\Base\\Exceptions\\InvalidArgumentType On invalid $id type.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Connection get() { markAccess(); if (null != this.conns) { List<Connection> snapshot = new ArrayList<Connection>(this.conns); if (snapshot.size() > 0) { return this.strategy.select(snapshot); } else { return null; } } else { return null; } }\n\n    ### Response:", "ground_truth": "get a connection\n\n@return", "predict": "Get active and live conneciton objects from the conneciton manager."}, {"ID": 460, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void reset() { // float[] floatp; // float[] floatp2; // initialize v1[] and v2[]: // for (floatp = v1 + 512, floatp2 = v2 + 512; floatp > v1; ) // *--floatp = *--floatp2 = 0.0; for (int p = 0; p < 512; p++) v1[p] = v2[p] = 0.0f; // initialize samples[]: // for (floatp = samples + 32; floatp > samples; ) // *--floatp = 0.0; for (int p2 = 0; p2 < 32; p2++) samples[p2] = 0.0f; actual_v = v1; actual_write_pos = 15; }\n\n    ### Response: Reset the synthesis filter..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void registerCustomSerializer(String className, CustomSerializer serializer) { CustomSerializer prevSerializer = classCustomSerializer.putIfAbsent(className, serializer); if (prevSerializer != null) { throw new RuntimeException(\"CustomSerializer has been registered for class: \" + className + \", the custom serializer is: \" + prevSerializer.getClass().getName()); } }\n\n    ### Response:", "ground_truth": "Register custom serializer for class name.\n\n@param className\n@param serializer\n@return", "predict": "Prevents unnecessary registration of custom serializers for the given class, and provides a mechanism for replacing custom serializers with other serializers of the same class"}, {"ID": 461, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_stored_hash(self, temp_ver): \"\"\" Retrieves the hash for the given template version from the store Args: temp_ver (TemplateVersion): template version to retrieve the hash for Returns: str: hash of the given template version \"\"\" with open(self._prefixed('%s.hash' % temp_ver.name)) as f: return f.read().strip()\n\n    ### Response: Retrieves the hash for the given template version from the store\n\n        Args:\n            temp_ver (TemplateVersion): template version to retrieve the hash\n                for\n\n        Returns:\n            str: hash of the given template version.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static CustomSerializer getCustomSerializer(String className) { if (!classCustomSerializer.isEmpty()) { return classCustomSerializer.get(className); } return null; }\n\n    ### Response:", "ground_truth": "Get the custom serializer for class name.\n\n@param className\n@return", "predict": "GetCustomSerializer - Get custom serializer for specified classname."}, {"ID": 462, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (db *ProposalDB) CheckProposalsUpdates() error { if db == nil || db.dbP == nil { return errDef } db.mtx.Lock() defer func() { // Update the lastSync before the function exits. db.lastSync = time.Now().UTC().Unix() db.mtx.Unlock() }() // Retrieve and update all current proposals whose vote statuses is either // NotAuthorized, Authorized and Started numRecords, err := db.updateInProgressProposals() if err != nil { return err } // Retrieve and update any new proposals created since the previous // proposals were stored in the db. lastProposal, err := db.lastSavedProposal() if err != nil { return fmt.Errorf(\"lastSavedProposal failed: %v\", err) } var queryParam string if len(lastProposal) > 0 && lastProposal[0].TokenVal != \"\" { queryParam = fmt.Sprintf(\"?after=%s\", lastProposal[0].TokenVal) } n, err := db.saveProposals(queryParam) if err != nil { return err } // Add the sum of the newly added proposals. numRecords += n log.Infof(\"%d proposal records (politeia proposals-storm) were updated\", numRecords) return nil }\n\n    ### Response: // CheckProposalsUpdates updates the proposal changes if they exist and updates\n// them to the proposal db..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void registerCustomSerializer(CommandCode code, CustomSerializer serializer) { CustomSerializer prevSerializer = commandCustomSerializer.putIfAbsent(code, serializer); if (prevSerializer != null) { throw new RuntimeException(\"CustomSerializer has been registered for command code: \" + code + \", the custom serializer is: \" + prevSerializer.getClass().getName()); } }\n\n    ### Response:", "ground_truth": "Register custom serializer for command code.\n\n@param code\n@param serializer\n@return", "predict": "// Registers custom serializers for the given command codes, maps custom serializers to the given command codes\n\n    "}, {"ID": 463, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func isSecret(name string) bool { name = strings.ToLower(name) return strings.Contains(name, \"key\") || strings.Contains(name, \"token\") || strings.Contains(name, \"secret\") }\n\n    ### Response: // isSecret determines whether a field name represents a field which\n// may contain a secret..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static CustomSerializer getCustomSerializer(CommandCode code) { if (!commandCustomSerializer.isEmpty()) { return commandCustomSerializer.get(code); } return null; }\n\n    ### Response:", "ground_truth": "Get the custom serializer for command code.\n\n@param code\n@return", "predict": "// The CustomSerializerGenerator generates custom serializers for given command codes\n    // If there is no custom serializer defined for the given command,\n    // The default serializers for the given command are used\n    // If there is no default serializer defined for the given command,\n    // The default serializers for the whole system are used\n    // If there is no default serializer defined for the whole system,\n    // The whole system may crash"}, {"ID": 464, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _dask_array_with_chunks_hint(array, chunks): \"\"\"Create a dask array using the chunks hint for dimensions of size > 1.\"\"\" import dask.array as da if len(chunks) < array.ndim: raise ValueError('not enough chunks in hint') new_chunks = [] for chunk, size in zip(chunks, array.shape): new_chunks.append(chunk if size > 1 else (1,)) return da.from_array(array, new_chunks)\n\n    ### Response: Create a dask array using the chunks hint for dimensions of size > 1..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void start() { /** initial delay to execute schedule task, unit: ms */ long initialDelay = ConfigManager.conn_monitor_initial_delay(); /** period of schedule task, unit: ms*/ long period = ConfigManager.conn_monitor_period(); this.executor = new ScheduledThreadPoolExecutor(1, new NamedThreadFactory( \"ConnectionMonitorThread\", true), new ThreadPoolExecutor.AbortPolicy()); MonitorTask monitorTask = new MonitorTask(); this.executor.scheduleAtFixedRate(monitorTask, initialDelay, period, TimeUnit.MILLISECONDS); }\n\n    ### Response:", "ground_truth": "Start schedule task", "predict": "Initialize the scheduling for the conn_monitor_task and initialize the conn_monitor_task."}, {"ID": 465, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def pick(self): \"\"\" picks a value accoriding to the given density \"\"\" v = random.uniform(0, self.ub) d = self.dist c = self.vc - 1 s = self.vc while True: s = s / 2 if s == 0: break if v <= d[c][1]: c -= s else: c += s # we only need this logic when increasing c while len(d) <= c: s = s / 2 c -= s if s == 0: break # we may have converged from the left, instead of the right if c == len(d) or v <= d[c][1]: c -= 1 return d[c][0]\n\n    ### Response: picks a value accoriding to the given density.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean isConnected(String remoteAddr) { Url url = this.rpcRemoting.addressParser.parse(remoteAddr); return this.isConnected(url); }\n\n    ### Response:", "ground_truth": "check whether a client address connected\n\n@param remoteAddr\n@return", "predict": "\n    The method-level comment for the above java Code declares that the method\n    boolean isConnected(String remoteAddr) checks if the specified RPC endpoint\n    (host and port) of the specified RPC server is reachable and connected to\n    the specified client RPC endpoint (host and port). It makes use of the\n    RpcEndpoint.getAddress() method to parse the given RPC endpoint string to\n    generate appropriate Url objects to determine connectivity of the RPC\n    endpoints of the given client and server hosts and ports. Finally, the\n    method makes use of the RpcEndpoint.isConnected() method to determine\n    connectivity of the given RPC endpoint objects of the given hosts and\n    ports of the given client and server hosts and ports to determine\n    connectivity of the given RPC endpoint objects of the given hosts and\n    ports of the given client and server hosts and ports to determine\n    connectivity of the given RPC endpoint objects of the given"}, {"ID": 466, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function hasItems() { if (count($this->data[1]) === 0) { return; } foreach ($this->data[1] as $key => $value) { $this->failIf( !$this->itemExists( array($this->data[0], array($key => $value)) ) ); } }\n\n    ### Response: Assert an array has all key and value items.\n\n@syntax array ?:array has items ?:array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void initWriteBufferWaterMark() { int lowWaterMark = this.netty_buffer_low_watermark(); int highWaterMark = this.netty_buffer_high_watermark(); if (lowWaterMark > highWaterMark) { throw new IllegalArgumentException( String .format( \"[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)\", highWaterMark, lowWaterMark)); } else { logger.warn( \"[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes\", lowWaterMark, highWaterMark); } this.bootstrap.childOption(ChannelOption.WRITE_BUFFER_WATER_MARK, new WriteBufferWaterMark( lowWaterMark, highWaterMark)); }\n\n    ### Response:", "ground_truth": "init netty write buffer water mark", "predict": "Initialize and configure the write buffer watermark values to avoid unnecessary buffer allocation"}, {"ID": 467, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def grayspec(k): \"\"\" List of gray-scale colors in HSV space as web hex triplets. For integer argument k, returns list of `k` gray-scale colors, increasingly light, linearly in the HSV color space, as web hex triplets. Technical dependency of :func:`tabular.spreadsheet.aggregate_in`. **Parameters** **k** : positive integer Number of gray-scale colors to return. **Returns** **glist** : list of strings List of `k` gray-scale colors. \"\"\" ll = .5 ul = .8 delta = (ul - ll) / k return [GrayScale(t) for t in np.arange(ll, ul, delta)]\n\n    ### Response: List of gray-scale colors in HSV space as web hex triplets.\n\n    For integer argument k, returns list of `k` gray-scale colors, increasingly \n    light, linearly in the HSV color space, as web hex triplets.\n\n    Technical dependency of :func:`tabular.spreadsheet.aggregate_in`.\n\n    **Parameters**\n\n            **k** :  positive integer\n\n                    Number of gray-scale colors to return.\n\n    **Returns**\n\n            **glist** :  list of strings\n\n                    List of `k` gray-scale colors..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static FramedataImpl1 get(Opcode opcode) { if (opcode== null) { throw new IllegalArgumentException(\"Supplied opcode cannot be null\"); } switch (opcode) { case PING: return new PingFrame(); case PONG: return new PongFrame(); case TEXT: return new TextFrame(); case BINARY: return new BinaryFrame(); case CLOSING: return new CloseFrame(); case CONTINUOUS: return new ContinuousFrame(); default: throw new IllegalArgumentException(\"Supplied opcode is invalid\"); } }\n\n    ### Response:", "ground_truth": "Get a frame with a specific opcode\n\n@param opcode the opcode representing the frame\n@return the frame with a specific opcode", "predict": "\n    The function generates an appropriate framedata for the given opcode, and\n    throws exception if the given opcode is invalid or null. It uses switch\n    statement to translate the given opcode to appropriate framedata objects\n    for different values of opcodes, and returns appropriate objects for the\n    given opcodes in the switch statement blocks."}, {"ID": 468, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def mark_topics_read(self, request, pk): \"\"\" Marks forum topics as read. \"\"\" track_handler.mark_forums_read([self.forum, ], request.user) messages.success(request, self.success_message) return HttpResponseRedirect(self.get_forum_url())\n\n    ### Response: Marks forum topics as read..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean batch( WebSocketImpl ws, ByteChannel sockchannel ) throws IOException { if (ws == null) { return false; } ByteBuffer buffer = ws.outQueue.peek(); WrappedByteChannel c = null; if( buffer == null ) { if( sockchannel instanceof WrappedByteChannel ) { c = (WrappedByteChannel) sockchannel; if( c.isNeedWrite() ) { c.writeMore(); } } } else { do {// FIXME writing as much as possible is unfair!! /*int written = */sockchannel.write( buffer ); if( buffer.remaining() > 0 ) { return false; } else { ws.outQueue.poll(); // Buffer finished. Remove it. buffer = ws.outQueue.peek(); } } while ( buffer != null ); } if( ws.outQueue.isEmpty() && ws.isFlushAndClose() && ws.getDraft() != null && ws.getDraft().getRole() != null && ws.getDraft().getRole() == Role.SERVER ) {// ws.closeConnection(); } return c == null || !((WrappedByteChannel) sockchannel).isNeedWrite(); }\n\n    ### Response:", "ground_truth": "Returns whether the whole outQueue has been flushed\n@param ws The WebSocketImpl associated with the channels\n@param sockchannel The channel to write to\n@throws IOException May be thrown by {@link WrappedByteChannel#writeMore()}\n@return returns Whether there is more data to write", "predict": "\n    Batch writes messages to Web Socket server and processes received messages"}, {"ID": 469, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get(self, url): \"\"\"Navigate to a specific url This specific implementation inject a javascript script to intercept the javascript error Configurable with the \"proxy_driver:intercept_javascript_error\" config Args: url (str): the url to navigate to Returns: bool \"\"\" self._driver.get(url) if self.bot_diary: self.bot_diary.add_auto_entry( \"I went on\", target=url, take_screenshot=True ) if BROME_CONFIG['proxy_driver']['intercept_javascript_error']: self.init_javascript_error_interception() return True\n\n    ### Response: Navigate to a specific url\n\n        This specific implementation inject a javascript\n            script to intercept the javascript error\n\n        Configurable with the \"proxy_driver:intercept_javascript_error\" config\n\n        Args:\n            url (str): the url to navigate to\n\n        Returns:\n            bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setCode(int code) { this.code = code; // CloseFrame.TLS_ERROR is not allowed to be transfered over the wire if (code == CloseFrame.TLS_ERROR) { this.code = CloseFrame.NOCODE; this.reason = \"\"; } updatePayload(); }\n\n    ### Response:", "ground_truth": "Set the close code for this close frame\n@param code the close code", "predict": "\n    Closes Frame during error recovery by passing error code of TLS_ERROR to the client and sets appropriate error reason to the error code"}, {"ID": 470, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def maybe_coroutine(decide): \"\"\" Either be a coroutine or not. Use as a decorator: @maybe_coroutine(lambda maybeAPromise: return isinstance(maybeAPromise, Promise)) def foo(maybeAPromise): result = yield maybeAPromise print(\"hello\") return result The function passed should be a generator yielding either only Promises or whatever you feel like. The decide parameter must be a function which gets called with the same parameters as the function to decide whether this is a coroutine or not. Using this it is possible to either make the function a coroutine or not based on a parameter to the function call. Let's explain the example above: # If the maybeAPromise is an instance of Promise, # we want the foo function to act as a coroutine. # If the maybeAPromise is not an instance of Promise, # we want the foo function to act like any other normal synchronous function. @maybe_coroutine(lambda maybeAPromise: return isinstance(maybeAPromise, Promise)) def foo(maybeAPromise): # If isinstance(maybeAPromise, Promise), foo behaves like a coroutine, # thus maybeAPromise will get resolved asynchronously and the result will be # pushed back here. # Otherwise, foo behaves like no_coroutine, # just pushing the exact value of maybeAPromise back into the generator. result = yield maybeAPromise print(\"hello\") return result \"\"\" def _maybe_coroutine(f): @functools.wraps(f) def __maybe_coroutine(*args, **kwargs): if decide(*args, **kwargs): return coroutine(f)(*args, **kwargs) else: return no_coroutine(f)(*args, **kwargs) return __maybe_coroutine return _maybe_coroutine\n\n    ### Response: Either be a coroutine or not.\n\n    Use as a decorator:\n    @maybe_coroutine(lambda maybeAPromise: return isinstance(maybeAPromise, Promise))\n    def foo(maybeAPromise):\n        result = yield maybeAPromise\n        print(\"hello\")\n        return result\n\n    The function passed should be a generator yielding either only Promises or whatever\n    you feel like.\n    The decide parameter must be a function which gets called with the same parameters as\n    the function to decide whether this is a coroutine or not.\n    Using this it is possible to either make the function a coroutine or not based on a\n    parameter to the function call.\n    Let's explain the example above:\n\n    # If the maybeAPromise is an instance of Promise,\n    # we want the foo function to act as a coroutine.\n    # If the maybeAPromise is not an instance of Promise,\n    # we want the foo function to act like any other normal synchronous function.\n    @maybe_coroutine(lambda maybeAPromise: return isinstance(maybeAPromise, Promise))\n    def foo(maybeAPromise):\n        # If isinstance(maybeAPromise, Promise), foo behaves like a coroutine,\n        # thus maybeAPromise will get resolved asynchronously and the result will be\n        # pushed back here.\n        # Otherwise, foo behaves like no_coroutine,\n        # just pushing the exact value of maybeAPromise back into the generator.\n        result = yield maybeAPromise\n        print(\"hello\")\n        return result.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void validateUtf8(ByteBuffer payload, int mark) throws InvalidDataException { try { payload.position( payload.position() + 2 ); reason = Charsetfunctions.stringUtf8( payload ); } catch ( IllegalArgumentException e ) { throw new InvalidDataException( CloseFrame.NO_UTF8 ); } finally { payload.position( mark ); } }\n\n    ### Response:", "ground_truth": "Validate the payload to valid utf8\n@param mark the current mark\n@param payload the current payload\n@throws InvalidDataException the current payload is not a valid utf8", "predict": "Validates that the UTF8 representation of the payload matches the given Bytes object"}, {"ID": 471, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function load($lang) { $langDir = MODULES_DIR . DS . RouteController::$currentModule . '/Views/lang/' . $lang; $files = glob($langDir . \"/*.php\"); if (count($files) == 0) { throw new \\Exception(ExceptionMessages::TRANSLATION_FILES_NOT_FOUND); } foreach ($files as $file) { $fileInfo = pathinfo($file); self::$translations[$fileInfo['filename']] = require_once $file; } }\n\n    ### Response: Finds and loads translation files\n\n@param string $lang\n@return void\n@throws \\Exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void updatePayload() { byte[] by = Charsetfunctions.utf8Bytes(reason); ByteBuffer buf = ByteBuffer.allocate(4); buf.putInt(code); buf.position(2); ByteBuffer pay = ByteBuffer.allocate(2 + by.length); pay.put(buf); pay.put(by); pay.rewind(); super.setPayload(pay); }\n\n    ### Response:", "ground_truth": "Update the payload to represent the close code and the reason", "predict": "Updates payload"}, {"ID": 472, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setSecondEntity(Annotation v) { if (Cooccurrence_Type.featOkTst && ((Cooccurrence_Type)jcasType).casFeat_secondEntity == null) jcasType.jcas.throwFeatMissing(\"secondEntity\", \"ch.epfl.bbp.uima.types.Cooccurrence\"); jcasType.ll_cas.ll_setRefValue(addr, ((Cooccurrence_Type)jcasType).casFeatCode_secondEntity, jcasType.ll_cas.ll_getFSRef(v));}\n\n    ### Response: setter for secondEntity - sets\n@generated\n@param v value to set into the feature.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private HandshakeState containsRequestedProtocol(String requestedProtocol) { for( IProtocol knownProtocol : knownProtocols ) { if( knownProtocol.acceptProvidedProtocol( requestedProtocol ) ) { protocol = knownProtocol; log.trace(\"acceptHandshake - Matching protocol found: {}\", protocol); return HandshakeState.MATCHED; } } return HandshakeState.NOT_MATCHED; }\n\n    ### Response:", "ground_truth": "Check if the requested protocol is part of this draft\n@param requestedProtocol the requested protocol\n@return MATCHED if it is matched, otherwise NOT_MATCHED", "predict": "method to determine if the given protocol is included in the list of known protocols\n    If the given protocol matches any of the known protocols, the method\n    sets protocol to the matching protocol and\n    logs a debug message. Otherwise, the method\n    sets protocol to null and\n    logs a debug message stating that the given protocol wasn't matched."}, {"ID": 473, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function handleData($data) { $this->incomingBuffer .= $data; if ($this->connection && $this->isHeaderEnd($this->incomingBuffer)) { $remoteAddress = (string) $this->incoming->getRemoteAddress(); $headersToReplace = [ 'X-PHP-PM-Remote-IP' => trim(parse_url($remoteAddress, PHP_URL_HOST), '[]'), 'X-PHP-PM-Remote-Port' => trim(parse_url($remoteAddress, PHP_URL_PORT), '[]') ]; $buffer = $this->replaceHeader($this->incomingBuffer, $headersToReplace); $this->connection->write($buffer); $this->incoming->removeListener('data', [$this, 'handleData']); $this->incoming->pipe($this->connection); } }\n\n    ### Response: Buffer incoming data until slave connection is available\nand headers have been received\n\n@param string $data.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void translateSingleFrameCheckLengthLimit(long length) throws LimitExceededException { if( length > Integer.MAX_VALUE ) { log.trace(\"Limit exedeed: Payloadsize is to big...\"); throw new LimitExceededException(\"Payloadsize is to big...\"); } if( length > maxFrameSize) { log.trace( \"Payload limit reached. Allowed: {} Current: {}\" , maxFrameSize, length); throw new LimitExceededException( \"Payload limit reached.\", maxFrameSize ); } if( length < 0 ) { log.trace(\"Limit underflow: Payloadsize is to little...\"); throw new LimitExceededException(\"Payloadsize is to little...\"); } }\n\n    ### Response:", "ground_truth": "Check if the frame size exceeds the allowed limit\n@param length the current payload length\n@throws LimitExceededException if the payload length is to big", "predict": "Translate single frame length limitations"}, {"ID": 474, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def configure_error_handlers(graph): \"\"\" Register error handlers. \"\"\" # override all of the werkzeug HTTPExceptions for code in default_exceptions.keys(): graph.flask.register_error_handler(code, make_json_error) # register catch all for user exceptions graph.flask.register_error_handler(Exception, make_json_error)\n\n    ### Response: Register error handlers..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void translateSingleFrameCheckPacketSize(int maxpacketsize, int realpacketsize) throws IncompleteException { if( maxpacketsize < realpacketsize ) { log.trace( \"Incomplete frame: maxpacketsize < realpacketsize\" ); throw new IncompleteException( realpacketsize ); } }\n\n    ### Response:", "ground_truth": "Check if the max packet size is smaller than the real packet size\n@param maxpacketsize the max packet size\n@param realpacketsize the real packet size\n@throws IncompleteException if the maxpacketsize is smaller than the realpackagesize", "predict": "Translate SingleFrame Check Packet Size.."}, {"ID": 475, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (d *state) permute() { switch d.state { case spongeAbsorbing: // If we're absorbing, we need to xor the input into the state // before applying the permutation. xorIn(d, d.buf) d.buf = d.storage[:0] keccakF1600(&d.a) case spongeSqueezing: // If we're squeezing, we need to apply the permutatin before // copying more output. keccakF1600(&d.a) d.buf = d.storage[:d.rate] copyOut(d, d.buf) } }\n\n    ### Response: // permute applies the KeccakF-1600 permutation. It handles\n// any input-output buffering..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private String generateFinalKey( String in ) { String seckey = in.trim(); String acc = seckey + \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"; MessageDigest sh1; try { sh1 = MessageDigest.getInstance( \"SHA1\" ); } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException( e ); } return Base64.encodeBytes( sh1.digest( acc.getBytes() ) ); }\n\n    ### Response:", "ground_truth": "Generate a final key from a input string\n@param in the input string\n@return a final key", "predict": "// generates the SHA-1 hash of the provided string // and encodes it in Base64"}, {"ID": 476, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static function load(array $values) { $container = new static($values); $container['debugger'] = new Debugger(); $container['grav'] = function (Container $container) { user_error('Calling $grav[\\'grav\\'] or {{ grav.grav }} is deprecated since Grav 1.6, just use $grav or {{ grav }}', E_USER_DEPRECATED); return $container; }; $container->measureTime('_services', 'Services', function () use ($container) { $container->registerServices(); }); return $container; }\n\n    ### Response: Initialize and return a Grav instance\n\n@param  array $values\n\n@return static.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void processFrameContinuousAndNonFin(WebSocketImpl webSocketImpl, Framedata frame, Opcode curop) throws InvalidDataException { if( curop != Opcode.CONTINUOUS ) { processFrameIsNotFin(frame); } else if( frame.isFin() ) { processFrameIsFin(webSocketImpl, frame); } else if( currentContinuousFrame == null ) { log.error( \"Protocol error: Continuous frame sequence was not started.\" ); throw new InvalidDataException( CloseFrame.PROTOCOL_ERROR, \"Continuous frame sequence was not started.\" ); } //Check if the whole payload is valid utf8, when the opcode indicates a text if( curop == Opcode.TEXT && !Charsetfunctions.isValidUTF8( frame.getPayloadData() ) ) { log.error( \"Protocol error: Payload is not UTF8\" ); throw new InvalidDataException( CloseFrame.NO_UTF8 ); } //Checking if the current continuous frame contains a correct payload with the other frames combined if( curop == Opcode.CONTINUOUS && currentContinuousFrame != null ) { addToBufferList(frame.getPayloadData()); } }\n\n    ### Response:", "ground_truth": "Process the frame if it is a continuous frame or the fin bit is not set\n@param webSocketImpl the websocket implementation to use\n@param frame the current frame\n@param curop the current Opcode\n@throws InvalidDataException if there is a protocol error", "predict": "Initiates the processing of frames of Web Socket; processes frames of Continuous; and processes Fin and NonFin Frame"}, {"ID": 477, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addModuleToGraph(final DbModule module, final AbstractGraph graph, final int depth) { if (graph.isTreated(graph.getId(module))) { return; } final String moduleElementId = graph.getId(module); graph.addElement(moduleElementId, module.getVersion(), depth == 0); if (filters.getDepthHandler().shouldGoDeeper(depth)) { for (final DbDependency dep : DataUtils.getAllDbDependencies(module)) { if(filters.shouldBeInReport(dep)){ addDependencyToGraph(dep, graph, depth + 1, moduleElementId); } } } }\n\n    ### Response: Manage the artifact add to the Module AbstractGraph\n\n@param graph\n@param depth.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void processFrameBinary(WebSocketImpl webSocketImpl, Framedata frame) { try { webSocketImpl.getWebSocketListener().onWebsocketMessage( webSocketImpl, frame.getPayloadData() ); } catch ( RuntimeException e ) { logRuntimeException(webSocketImpl, e); } }\n\n    ### Response:", "ground_truth": "Process the frame if it is a binary frame\n@param webSocketImpl the websocket impl\n@param frame the frame", "predict": "Handle Web Socket Frame Binary"}, {"ID": 478, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setUser($uid, array $properties=array(), $eventTime=null) { $eventTime = $this->getEventTime($eventTime); // casting to object so that an empty array would be represented as {} if (empty($properties)) { $properties = (object)$properties; } $json = json_encode([ 'event' => '$set', 'entityType' => 'user', 'entityId' => $uid, 'properties' => $properties, 'eventTime' => $eventTime, ]); return $this->sendRequest('POST', $this->eventUrl, $json); }\n\n    ### Response: Set a user entity\n\n@param int|string User Id\n@param array Properties of the user entity to set\n@param string Time of the event in ISO 8601 format\n(e.g. 2014-09-09T16:17:42.937-08:00).\nDefault is the current time.\n\n@return string JSON response\n\n@throws PredictionIOAPIError Request error.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void logRuntimeException(WebSocketImpl webSocketImpl, RuntimeException e) { log.error( \"Runtime exception during onWebsocketMessage\", e ); webSocketImpl.getWebSocketListener().onWebsocketError( webSocketImpl, e ); }\n\n    ### Response:", "ground_truth": "Log the runtime exception to the specific WebSocketImpl\n@param webSocketImpl the implementation of the websocket\n@param e the runtime exception", "predict": "Report exception during Web Socket listener\n\n/**\n * Report exception during Web Socket listener\n *\n * @param WebSocketImpl web Socket Implmentation\n * @param exception exception occurred\n *\n * @return void\n *\n * @throws PredictionIOAPIError exception during Web Socket listener\n */\npublic void logRuntimeException(WebSocketImpl webSocketImpl, Exception exception) {\n log.error( \"Runtime exception during onWebsocketMessage\", exception );\n webSocketImpl.getWebSocketListener().onWebsocketError( webSocketImpl, exception );\n};"}, {"ID": 479, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ArrayList<OvhChartSerie<OvhChartTimestampValue>> serviceName_statistics_GET(String serviceName, OvhStatisticsPeriodEnum period, OvhStatisticsTypeEnum type) throws IOException { String qPath = \"/hosting/web/{serviceName}/statistics\"; StringBuilder sb = path(qPath, serviceName); query(sb, \"period\", period); query(sb, \"type\", type); String resp = exec(qPath, \"GET\", sb.toString(), null); return convertTo(resp, t6); }\n\n    ### Response: Get statistics about this web hosting\n\nREST: GET /hosting/web/{serviceName}/statistics\n@param period [required]\n@param type [required]\n@param serviceName [required] The internal name of your hosting.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void processFrameText(WebSocketImpl webSocketImpl, Framedata frame) throws InvalidDataException { try { webSocketImpl.getWebSocketListener().onWebsocketMessage( webSocketImpl, Charsetfunctions.stringUtf8( frame.getPayloadData() ) ); } catch ( RuntimeException e ) { logRuntimeException(webSocketImpl, e); } }\n\n    ### Response:", "ground_truth": "Process the frame if it is a text frame\n@param webSocketImpl the websocket impl\n@param frame the frame", "predict": "Processes the contents of a Web Socket frame"}, {"ID": 480, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (cm *CompanyManager) Create(company *Company) error { // TODO: Validation! company.ID = bson.NewObjectId() err := cm.collection.Insert(company) if mgo.IsDup(err) { return db.ErrDuplicate } return err }\n\n    ### Response: // Create a company..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void processFrameIsFin(WebSocketImpl webSocketImpl, Framedata frame) throws InvalidDataException { if( currentContinuousFrame == null ) { log.trace( \"Protocol error: Previous continuous frame sequence not completed.\" ); throw new InvalidDataException( CloseFrame.PROTOCOL_ERROR, \"Continuous frame sequence was not started.\" ); } addToBufferList(frame.getPayloadData()); checkBufferLimit(); if( currentContinuousFrame.getOpcode() == Opcode.TEXT ) { ((FramedataImpl1) currentContinuousFrame).setPayload( getPayloadFromByteBufferList() ); ((FramedataImpl1) currentContinuousFrame).isValid(); try { webSocketImpl.getWebSocketListener().onWebsocketMessage( webSocketImpl, Charsetfunctions.stringUtf8( currentContinuousFrame.getPayloadData() ) ); } catch ( RuntimeException e ) { logRuntimeException(webSocketImpl, e); } } else if( currentContinuousFrame.getOpcode() == Opcode.BINARY ) { ((FramedataImpl1) currentContinuousFrame).setPayload( getPayloadFromByteBufferList() ); ((FramedataImpl1) currentContinuousFrame).isValid(); try { webSocketImpl.getWebSocketListener().onWebsocketMessage( webSocketImpl, currentContinuousFrame.getPayloadData() ); } catch ( RuntimeException e ) { logRuntimeException(webSocketImpl, e); } } currentContinuousFrame = null; clearBufferList(); }\n\n    ### Response:", "ground_truth": "Process the frame if it is the last frame\n@param webSocketImpl the websocket impl\n@param frame the frame\n@throws InvalidDataException if there is a protocol error", "predict": "// Process frames received over Web Socket"}, {"ID": 481, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def memoized(func): \"\"\"Decorate a function to memoize results. Functions wraped by this decorator won't compute twice for each input. Any results will be stored. This decorator might increase used memory in order to shorten computational time. \"\"\" cache = {} @wraps(func) def memoized_function(*args): \"\"\"The decorated function. \"\"\" try: return cache[args] except KeyError: value = func(*args) try: cache[args] = value except MemoryError: cache.clear() gc.collect() return value return memoized_function\n\n    ### Response: Decorate a function to memoize results.\n\n    Functions wraped by this decorator won't compute twice for each input.\n    Any results will be stored. This decorator might increase used memory\n    in order to shorten computational time..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void processFrameIsNotFin(Framedata frame) throws InvalidDataException { if( currentContinuousFrame != null ) { log.trace( \"Protocol error: Previous continuous frame sequence not completed.\" ); throw new InvalidDataException( CloseFrame.PROTOCOL_ERROR, \"Previous continuous frame sequence not completed.\" ); } currentContinuousFrame = frame; addToBufferList(frame.getPayloadData()); checkBufferLimit(); }\n\n    ### Response:", "ground_truth": "Process the frame if it is not the last frame\n@param frame the frame\n@throws InvalidDataException if there is a protocol error", "predict": "\n    Private method to deal with the case of incomplete Continuous Frames during the capturing of Frame details of the current frame of data during the capturing of Frame details of the current frame of data during the capturing of Frame details of the current frame of data during the capturing of Frame details of the current frame of data during the capturing of Frame details of the current frame of data during the capturing of Frame details of the current frame of data during the capturing of Frame details of the current frame of data during the capturing of Frame details of the current frame of data during the capturing of Frame details of the current frame of data during the capturing of Frame details of the current frame of data during the capturing of Frame details of the current frame of data during the capturing of Frame details of the current frame of data during the capturing of Frame details of the current frame of data during the capturing of Frame details of the current frame of data during the capturing of Frame details of the current frame of data during the capturing of"}, {"ID": 482, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def field(name, *params) @model.translated_attribute_names.push name.to_sym @model.translated_attr_accessor(name) @model.translation_class.field name, *params end\n\n    ### Response: Initializes new istance of FieldsBuilder.\n Param Class\n Creates new field in translation document.\n Param String or Symbol\n Other params are the same as for Mongoid's +field+.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void processFrameClosing(WebSocketImpl webSocketImpl, Framedata frame) { int code = CloseFrame.NOCODE; String reason = \"\"; if( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame; code = cf.getCloseCode(); reason = cf.getMessage(); } if( webSocketImpl.getReadyState() == ReadyState.CLOSING ) { // complete the close handshake by disconnecting webSocketImpl.closeConnection( code, reason, true ); } else { // echo close handshake if( getCloseHandshakeType() == CloseHandshakeType.TWOWAY ) webSocketImpl.close( code, reason, true ); else webSocketImpl.flushAndClose( code, reason, false ); } }\n\n    ### Response:", "ground_truth": "Process the frame if it is a closing frame\n@param webSocketImpl the websocket impl\n@param frame the frame", "predict": "Closes Web Socket and disconnects the client if Web Socket is in CLOSING ReadyState. Closes Web Socket and echo close handshake according to specified CloseHandshakeType."}, {"ID": 483, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function joinCond(string $primKey, string $forKey, string $cOpr = \"=\"): self { $this->qBuilder->joinCond($primKey, $forKey, $cOpr, \"AND\"); return $this; }\n\n    ### Response: Add join condition\n\nAdds a JOIN condition to the last join added. If no join was yet added, an\nexception is raised.\n\n@param string $primKey Key of the main table for the condition\n@param string $forKey Key of the joining table\n@param string $cOpr Comparison operator for the two keys\n@return self.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void checkBufferLimit() throws LimitExceededException { long totalSize = getByteBufferListSize(); if( totalSize > maxFrameSize ) { clearBufferList(); log.trace(\"Payload limit reached. Allowed: {} Current: {}\", maxFrameSize, totalSize); throw new LimitExceededException(maxFrameSize); } }\n\n    ### Response:", "ground_truth": "Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size\n@throws LimitExceededException if the current size is bigger than the allowed size", "predict": "Checks if there is a limit exceeding of payload length\n    Checks if there is a limit exceeding of payload length of the Byte Buffer List of this listener instance and, if there is, clears the list and logs an error."}, {"ID": 484, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setValign(String align) { /* todo: should this enforce top|middle|bottom|baseline as in the spec */ _tbodyTag.registerAttribute(AbstractHtmlState.ATTR_GENERAL, HtmlConstants.VALIGN, align); }\n\n    ### Response: Sets the value of the vertical alignment attribute of the HTML tbody tag.\n\n@param align the alignment\n@jsptagref.attributedescription The vertical alignment.\n@jsptagref.attributesyntaxvalue string_align\n@netui:attribute required=\"false\" rtexprvalue=\"true\" description=\"The vertical alignment of the HTML tbody tag\".\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private ByteBuffer getPayloadFromByteBufferList() throws LimitExceededException { long totalSize = 0; ByteBuffer resultingByteBuffer; synchronized (byteBufferList) { for (ByteBuffer buffer : byteBufferList) { totalSize += buffer.limit(); } checkBufferLimit(); resultingByteBuffer = ByteBuffer.allocate( (int) totalSize ); for (ByteBuffer buffer : byteBufferList) { resultingByteBuffer.put( buffer ); } } resultingByteBuffer.flip(); return resultingByteBuffer; }\n\n    ### Response:", "ground_truth": "Method to generate a full bytebuffer out of all the fragmented frame payload\n@return a bytebuffer containing all the data\n@throws LimitExceededException will be thrown when the totalSize is bigger then Integer.MAX_VALUE due to not being able to allocate more", "predict": "Get Payload from Byte Buffer List\n    The above method reads payload from multiple ByteBuffers and concatenates it to create one single ByteBuffer to send to the client. The method first checks if there is any limit exceeding and sets back to normal condition if there is. After that it flip the single ByteBuffer to send it to client."}, {"ID": 485, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func namespaceStrictToTransitional(content []byte) []byte { var namespaceTranslationDic = map[string]string{ StrictSourceRelationship: SourceRelationship, StrictSourceRelationshipChart: SourceRelationshipChart, StrictSourceRelationshipComments: SourceRelationshipComments, StrictSourceRelationshipImage: SourceRelationshipImage, StrictNameSpaceSpreadSheet: NameSpaceSpreadSheet, } for s, n := range namespaceTranslationDic { content = bytes.Replace(content, []byte(s), []byte(n), -1) } return content }\n\n    ### Response: // namespaceStrictToTransitional provides a method to convert Strict and\n// Transitional namespaces..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private long getByteBufferListSize() { long totalSize = 0; synchronized (byteBufferList) { for (ByteBuffer buffer : byteBufferList) { totalSize += buffer.limit(); } } return totalSize; }\n\n    ### Response:", "ground_truth": "Get the current size of the resulting bytebuffer in the bytebuffer list\n@return the size as long (to not get an integer overflow)", "predict": "// The method returns the total size of the list of ByteBuffers described\n// in the synchronized block of the method."}, {"ID": 486, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (m *BinDataAsset) Evaluate(data interface{}) (*MemoryAsset, error) { if !m.IsTemplate() { return nil, errors.Errorf(\"the asset %s is not a template\", m.AssetName) } var buf bytes.Buffer if err := m.template.Execute(&buf, data); err != nil { return nil, err } return NewMemoryAsset(buf.Bytes(), m.GetTargetDir(), m.GetTargetName(), m.GetPermissions()), nil }\n\n    ### Response: // Evaluate evaluates the template to a new asset.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static HandshakeBuilder translateHandshakeHttpServer(String[] firstLineTokens, String line) throws InvalidHandshakeException { // translating/parsing the request from the CLIENT if (!\"GET\".equalsIgnoreCase(firstLineTokens[0])) { throw new InvalidHandshakeException( String.format(\"Invalid request method received: %s Status line: %s\", firstLineTokens[0],line)); } if (!\"HTTP/1.1\".equalsIgnoreCase(firstLineTokens[2])) { throw new InvalidHandshakeException( String.format(\"Invalid status line received: %s Status line: %s\", firstLineTokens[2], line)); } ClientHandshakeBuilder clienthandshake = new HandshakeImpl1Client(); clienthandshake.setResourceDescriptor( firstLineTokens[ 1 ] ); return clienthandshake; }\n\n    ### Response:", "ground_truth": "Checking the handshake for the role as server\n@return a handshake\n@param firstLineTokens the token of the first line split as as an string array\n@param line the whole line", "predict": "The translateHandshakeHttpServer method translate the first line of the request received to its appropriate Client handshake builder objects to translate the HTTP request to its appropriate resource descriptor objects to complete the HTTP request parsing and processing of the given request."}, {"ID": 487, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def acquire(self): \"\"\"Acquire the pidfile. Create the pidfile, lock it, write the pid into it and register the release with atexit. :return: None :raise: SystemExit \"\"\" try: pidfile = open(self._pidfile, \"a\") except IOError as err: raise SystemExit(err) try: fcntl.flock(pidfile.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB) except IOError: raise SystemExit('Already running according to ' + self._pidfile) pidfile.seek(0) pidfile.truncate() pidfile.write(str(os.getpid()) + '\\n') pidfile.flush() self.pidfile = pidfile atexit.register(self.release)\n\n    ### Response: Acquire the pidfile.\n\n        Create the pidfile, lock it, write the pid into it\n        and register the release with atexit.\n\n\n        :return: None\n        :raise: SystemExit.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static HandshakeBuilder translateHandshakeHttpClient(String[] firstLineTokens, String line) throws InvalidHandshakeException { // translating/parsing the response from the SERVER if (!\"101\".equals(firstLineTokens[1])) { throw new InvalidHandshakeException( String.format(\"Invalid status code received: %s Status line: %s\", firstLineTokens[1], line)); } if (!\"HTTP/1.1\".equalsIgnoreCase(firstLineTokens[0])) { throw new InvalidHandshakeException( String.format(\"Invalid status line received: %s Status line: %s\", firstLineTokens[0], line)); } HandshakeBuilder handshake = new HandshakeImpl1Server(); ServerHandshakeBuilder serverhandshake = (ServerHandshakeBuilder) handshake; serverhandshake.setHttpStatus( Short.parseShort( firstLineTokens[ 1 ] ) ); serverhandshake.setHttpStatusMessage( firstLineTokens[ 2 ] ); return handshake; }\n\n    ### Response:", "ground_truth": "Checking the handshake for the role as client\n@return a handshake\n@param firstLineTokens the token of the first line split as as an string array\n@param line the whole line", "predict": "\n    Parsing the response from the SERVER.\n    If the first token of the first line of the response does not match, an exception is raised.\n    If the first token of the first line of the response does not match HTTP/1.1, an exception is raised.\n    If the first token of the first line of the response does not match HTTP, an exception is raised.\n    If the first token of the first line of the response does not match 101, an exception is raised.\n    If the first token of the first line of the response does not match, an exception is raised.\n    If the first token of the first line of the response does not match, an exception is raised.\n    If the first token of the first line of the response does not match, an exception is raised.\n    If the first token of the first line of the response does not match, an exception is raised.\n    If the first token of the first line of the response does not match, an exception"}, {"ID": 488, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def fast_memory_load(self, addr, size, data_type, endness='Iend_LE'): \"\"\" Load memory bytes from loader's memory backend. :param int addr: The address to begin memory loading. :param int size: Size in bytes. :param data_type: Type of the data. :param str endness: Endianness of this memory load. :return: Data read out of the memory. :rtype: int or bytes or str or None \"\"\" if data_type is int: try: return self.project.loader.memory.unpack_word(addr, size=size, endness=endness) except KeyError: return None try: data = self.project.loader.memory.load(addr, size) if data_type is str: return \"\".join(chr(i) for i in data) return data except KeyError: return None\n\n    ### Response: Load memory bytes from loader's memory backend.\n\n        :param int addr:    The address to begin memory loading.\n        :param int size:    Size in bytes.\n        :param data_type:   Type of the data.\n        :param str endness: Endianness of this memory load.\n        :return:            Data read out of the memory.\n        :rtype:             int or bytes or str or None.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void decode( ByteBuffer socketBuffer ) { assert ( socketBuffer.hasRemaining() ); log.trace( \"process({}): ({})\", socketBuffer.remaining(), ( socketBuffer.remaining() > 1000 ? \"too big to display\" : new String( socketBuffer.array(), socketBuffer.position(), socketBuffer.remaining() ) )); if( readyState != ReadyState.NOT_YET_CONNECTED ) { if( readyState == ReadyState.OPEN ) { decodeFrames( socketBuffer ); } } else { if( decodeHandshake( socketBuffer ) && (!isClosing() && !isClosed())) { assert ( tmpHandshakeBytes.hasRemaining() != socketBuffer.hasRemaining() || !socketBuffer.hasRemaining() ); // the buffers will never have remaining bytes at the same time if( socketBuffer.hasRemaining() ) { decodeFrames( socketBuffer ); } else if( tmpHandshakeBytes.hasRemaining() ) { decodeFrames( tmpHandshakeBytes ); } } } }\n\n    ### Response:", "ground_truth": "Method to decode the provided ByteBuffer\n\n@param socketBuffer the ByteBuffer to decode", "predict": "Decodes frames from the given ByteBuffer. Decoding may yield new frames to send, which are encoded and appended to the given ByteBuffer."}, {"ID": 489, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func zero3d(p []byte, n int) []byte { switch { case n < 10: p = append(p, \"00\"...) case n < 100: p = append(p, '0') } return strconv.AppendInt(p, int64(n), 10) }\n\n    ### Response: // helper function to append %03d ints.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void closeConnectionDueToWrongHandshake( InvalidDataException exception ) { write( generateHttpResponseDueToError( 404 ) ); flushAndClose( exception.getCloseCode(), exception.getMessage(), false ); }\n\n    ### Response:", "ground_truth": "Close the connection if the received handshake was not correct\n\n@param exception the InvalidDataException causing this problem", "predict": "// Closes the connection due to an error during the handshake."}, {"ID": 490, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function beforeFetch(&$args) { $model = $args[0]; $is_cms = $model->isCmsContext(); $is_preview = $this->_isPreview() && Garp_Auth::getInstance()->isLoggedIn(); $force = $this->_force; if (($is_cms || $is_preview) && !$force) { // don't use in the CMS, or in preview mode return; } $model = &$args[0]; $select = &$args[1]; if ($this->_blockOfflineItems) { $this->addWhereClause($model, $select); } }\n\n    ### Response: Before fetch callback.\nAdds the WHERE clause.\n\n@param array $args\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void closeConnectionDueToInternalServerError( RuntimeException exception ) { write( generateHttpResponseDueToError( 500 ) ); flushAndClose( CloseFrame.NEVER_CONNECTED, exception.getMessage(), false ); }\n\n    ### Response:", "ground_truth": "Close the connection if there was a server error by a RuntimeException\n\n@param exception the RuntimeException causing this problem", "predict": "Closes the connection due to an internal server error."}, {"ID": 491, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function render_questions_table($includeauto, $data, $header) { if (empty($data)) { return $this->render_quiz_no_grade_question_notification(); } $output = ''; $table = new html_table(); $table->class = 'generaltable'; $table->id = 'questionstograde'; $table->head = $header; $table->data = $data; $output .= html_writer::table($table); return $output; }\n\n    ### Response: Render questions list table.\n\n@param bool $includeauto True to show automatically graded questions.\n@param array $data List of questions.\n@param array $header List of table headers.\n@return string The HTML for the question table.\n@throws coding_exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private ByteBuffer generateHttpResponseDueToError( int errorCode ) { String errorCodeDescription; switch(errorCode) { case 404: errorCodeDescription = \"404 WebSocket Upgrade Failure\"; break; case 500: default: errorCodeDescription = \"500 Internal Server Error\"; } return ByteBuffer.wrap( Charsetfunctions.asciiBytes( \"HTTP/1.1 \" + errorCodeDescription + \"\\r\\nContent-Type: text/html\\nServer: TooTallNate Java-WebSocket\\r\\nContent-Length: \" + ( 48 + errorCodeDescription.length() ) + \"\\r\\n\\r\\n<html><head></head><body><h1>\" + errorCodeDescription + \"</h1></body></html>\" ) ); }\n\n    ### Response:", "ground_truth": "", "predict": "Generate HTTP error response due to error code."}, {"ID": 492, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public org.modeshape.jcr.api.Problems backupRepository( File backupDirectory, BackupOptions options ) throws RepositoryException { // Create the activity ... final BackupActivity backupActivity = createBackupActivity(backupDirectory, options); //suspend any existing transactions try { if (runningState.suspendExistingUserTransaction()) { LOGGER.debug(\"Suspended existing active user transaction before the backup operation starts\"); } try { // Run the backup and return the problems ... return new JcrProblems(backupActivity.execute()); } finally { runningState.resumeExistingUserTransaction(); } } catch (SystemException e) { throw new RuntimeException(e); } }\n\n    ### Response: Start backing up the repository.\n\n@param backupDirectory the directory on the file system into which the backup should be placed; this directory should\ntypically not exist\n@param options a {@link org.modeshape.jcr.api.BackupOptions} instance controlling the behavior of the backup; may not be\n{@code null}\n@return the problems that occurred during the backup process\n@throws RepositoryException if the backup operation cannot be run.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void send( String text ) { if( text == null ) throw new IllegalArgumentException( \"Cannot send 'null' data to a WebSocketImpl.\" ); send( draft.createFrames( text, role == Role.CLIENT ) ); }\n\n    ### Response:", "ground_truth": "Send Text data to the other end.\n\n@throws WebsocketNotConnectedException websocket is not yet connected", "predict": "Sent the given WebSocket text to the Web Socket server."}, {"ID": 493, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function buildRelationship(array $relInfo) { $relationship = new Relationship($relInfo['start'], $relInfo['end'], $relInfo['type']); $relationship->setCardinality($relInfo['mode']); if (isset($relInfo['properties'])) { foreach ($relInfo['properties'] as $name => $info) { $property = $this->buildRelationshipProperty($name, $info); $relationship->addProperty($property); } } return $relationship; }\n\n    ### Response: Builds the relationship object based on user schema\n\n@param  array        $relInfo relationship info from user schema\n@return Relationship.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void reset() { Thread current = Thread.currentThread(); if (current == writeThread || current == connectReadThread) { throw new IllegalStateException(\"You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup.\"); } try { closeBlocking(); if( writeThread != null ) { this.writeThread.interrupt(); this.writeThread = null; } if( connectReadThread != null ) { this.connectReadThread.interrupt(); this.connectReadThread = null; } this.draft.reset(); if( this.socket != null ) { this.socket.close(); this.socket = null; } } catch ( Exception e ) { onError( e ); engine.closeConnection( CloseFrame.ABNORMAL_CLOSE, e.getMessage() ); return; } connectLatch = new CountDownLatch( 1 ); closeLatch = new CountDownLatch( 1 ); this.engine = new WebSocketImpl( this, this.draft ); }\n\n    ### Response:", "ground_truth": "Reset everything relevant to allow a reconnect\n@since 1.3.8", "predict": "Reconfigures the Web Socket listener"}, {"ID": 494, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function DeleteCategoryPhoto($CategoryID = FALSE, $TransientKey = '') { // Check permission $this->Permission('Garden.Settings.Manage'); $RedirectUrl = 'vanilla/settings/editcategory/'.$CategoryID; if (Gdn::Session()->ValidateTransientKey($TransientKey)) { // Do removal, set message, redirect $CategoryModel = new CategoryModel(); $CategoryModel->SetField($CategoryID, 'Photo', NULL); $this->InformMessage(T('Category photo has been deleted.')); } if ($this->_DeliveryType == DELIVERY_TYPE_ALL) { Redirect($RedirectUrl); } else { $this->ControllerName = 'Home'; $this->View = 'FileNotFound'; $this->RedirectUrl = Url($RedirectUrl); $this->Render(); } }\n\n    ### Response: Deleting a category photo.\n\n@since 2.1\n@access public\n\n@param int $CategoryID Unique ID of the category to have its photo deleted..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void connect() { if( connectReadThread != null ) throw new IllegalStateException( \"WebSocketClient objects are not reuseable\" ); connectReadThread = new Thread( this ); connectReadThread.setName( \"WebSocketConnectReadThread-\" + connectReadThread.getId() ); connectReadThread.start(); }\n\n    ### Response:", "ground_truth": "Initiates the websocket connection. This method does not block.", "predict": "Initiates a Web Socket connection to the server to receive push notifications"}, {"ID": 495, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function getHashedToken($length = 25) { $token = \"\"; $max = strlen(static::getPool()); for ($i = 0; $i < $length; $i++) { $token .= static::getPool()[static::secureCrypt(0, $max)]; } return $token; }\n\n    ### Response: Finally, generate a hashed token\n@param  integer $length\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private int getPort() { int port = uri.getPort(); if( port == -1 ) { String scheme = uri.getScheme(); if( \"wss\".equals( scheme ) ) { return WebSocketImpl.DEFAULT_WSS_PORT; } else if( \"ws\".equals( scheme ) ) { return WebSocketImpl.DEFAULT_PORT; } else { throw new IllegalArgumentException( \"unknown scheme: \" + scheme ); } } return port; }\n\n    ### Response:", "ground_truth": "Extract the specified port\n@return the specified port or the default port for the specific scheme", "predict": "Get the port of the given url"}, {"ID": 496, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function query($id = null, $raw = false) { if ($id !== null) { return $this->queries[$id] ?? null; } if ($raw) { return $this->queries; } if (!$this->queries) { return ''; } return http_build_query($this->queries); }\n\n    ### Response: Return full query string or a single query attribute.\n\n@param string $id Optional attribute. Get a single query attribute if set\n@param bool $raw If true and $id is not set, return the full query array. Otherwise return the query string\n\n@return string|array Returns an array if $id = null and $raw = true.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void sendHandshake() throws InvalidHandshakeException { String path; String part1 = uri.getRawPath(); String part2 = uri.getRawQuery(); if( part1 == null || part1.length() == 0 ) path = \"/\"; else path = part1; if( part2 != null ) path += '?' + part2; int port = getPort(); String host = uri.getHost() + ( (port != WebSocketImpl.DEFAULT_PORT && port != WebSocketImpl.DEFAULT_WSS_PORT) ? \":\" + port : \"\" ); HandshakeImpl1Client handshake = new HandshakeImpl1Client(); handshake.setResourceDescriptor( path ); handshake.put( \"Host\", host ); if( headers != null ) { for( Map.Entry<String,String> kv : headers.entrySet() ) { handshake.put( kv.getKey(), kv.getValue() ); } } engine.startHandshake( handshake ); }\n\n    ### Response:", "ground_truth": "Create and send the handshake to the other endpoint\n@throws InvalidHandshakeException  a invalid handshake was created", "predict": "Send handshake request to the server"}, {"ID": 497, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (fs *FileSessionStore) Set(key, value interface{}) { fs.lock.Lock() defer fs.lock.Unlock() fs.values[key] = value }\n\n    ### Response: // Set value to file session.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setConnectionLostTimeout( int connectionLostTimeout ) { synchronized (syncConnectionLost) { this.connectionLostTimeout = TimeUnit.SECONDS.toNanos(connectionLostTimeout); if (this.connectionLostTimeout <= 0) { log.trace(\"Connection lost timer stopped\"); cancelConnectionLostTimer(); return; } if (this.websocketRunning) { log.trace(\"Connection lost timer restarted\"); //Reset all the pings try { ArrayList<WebSocket> connections = new ArrayList<WebSocket>(getConnections()); WebSocketImpl webSocketImpl; for (WebSocket conn : connections) { if (conn instanceof WebSocketImpl) { webSocketImpl = (WebSocketImpl) conn; webSocketImpl.updateLastPong(); } } } catch (Exception e) { log.error(\"Exception during connection lost restart\", e); } restartConnectionLostTimer(); } } }\n\n    ### Response:", "ground_truth": "Setter for the interval checking for lost connections\nA value lower or equal 0 results in the check to be deactivated\n\n@param connectionLostTimeout the interval in seconds\n@since 1.3.4", "predict": "//Sets the time for the connection lost to millisecs and resets the lost ping timer\n    // If Web Socket Running, resets the lost ping and sets the lost ping to millis"}, {"ID": 498, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def convert_string_to_file(string) file = Tempfile.new('MG_TMP_MIME') file.write(string) file.rewind file end\n\n    ### Response: Converts MIME string to file for easy uploading to API\n\n @param [String] string MIME string to post to API\n @return [File] File object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void stopConnectionLostTimer() { synchronized (syncConnectionLost) { if (connectionLostCheckerService != null || connectionLostCheckerFuture != null) { this.websocketRunning = false; log.trace(\"Connection lost timer stopped\"); cancelConnectionLostTimer(); } } }\n\n    ### Response:", "ground_truth": "Stop the connection lost timer\n@since 1.3.4", "predict": "Stops the ConnectionLost timer."}, {"ID": 499, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def metrics(self): \"\"\" Set of metrics for this model \"\"\" from vel.metrics.loss_metric import Loss from vel.metrics.accuracy import Accuracy return [Loss(), Accuracy()]\n\n    ### Response: Set of metrics for this model.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void startConnectionLostTimer() { synchronized (syncConnectionLost) { if (this.connectionLostTimeout <= 0) { log.trace(\"Connection lost timer deactivated\"); return; } log.trace(\"Connection lost timer started\"); this.websocketRunning = true; restartConnectionLostTimer(); } }\n\n    ### Response:", "ground_truth": "Start the connection lost timer\n@since 1.3.4", "predict": "Starts the ConnectionLostTimeout timer to detect when Web Socket Connection has been Lost."}, {"ID": 500, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void saveState(Bundle outState) { outState.putString(STATE_CURRENT_PATH, currentPath); outState.putSerializable(STATE_FOLDERS, folders); outState.putSerializable(STATE_NEXT_TOKENS, nextTokens); }\n\n    ### Response: Save the items we've loaded on orientation changes etc.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void restartConnectionLostTimer() { cancelConnectionLostTimer(); connectionLostCheckerService = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory(\"connectionLostChecker\")); Runnable connectionLostChecker = new Runnable() { /** * Keep the connections in a separate list to not cause deadlocks */ private ArrayList<WebSocket> connections = new ArrayList<WebSocket>( ); @Override public void run() { connections.clear(); try { connections.addAll( getConnections() ); long minimumPongTime = (long) (System.nanoTime() - ( connectionLostTimeout * 1.5 )); for( WebSocket conn : connections ) { executeConnectionLostDetection(conn, minimumPongTime); } } catch ( Exception e ) { //Ignore this exception } connections.clear(); } }; connectionLostCheckerFuture = connectionLostCheckerService.scheduleAtFixedRate(connectionLostChecker, connectionLostTimeout, connectionLostTimeout, TimeUnit.NANOSECONDS); }\n\n    ### Response:", "ground_truth": "This methods allows the reset of the connection lost timer in case of a changed parameter\n@since 1.3.4", "predict": "Cancels the previous lostConnectionTimeout and reschedules the lostConnectionChecker."}, {"ID": 501, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def parameters(self): \"\"\"Returns tuple of selection parameters of self (self.block_tl, self.block_br, self.rows, self.cols, self.cells) \"\"\" return self.block_tl, self.block_br, self.rows, self.cols, self.cells\n\n    ### Response: Returns tuple of selection parameters of self\n\n        (self.block_tl, self.block_br, self.rows, self.cols, self.cells).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void executeConnectionLostDetection(WebSocket webSocket, long minimumPongTime) { if (!(webSocket instanceof WebSocketImpl)) { return; } WebSocketImpl webSocketImpl = (WebSocketImpl) webSocket; if( webSocketImpl.getLastPong() < minimumPongTime ) { log.trace(\"Closing connection due to no pong received: {}\", webSocketImpl); webSocketImpl.closeConnection( CloseFrame.ABNORMAL_CLOSE, \"The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection\" ); } else { if( webSocketImpl.isOpen() ) { webSocketImpl.sendPing(); } else { log.trace(\"Trying to ping a non open connection: {}\", webSocketImpl); } } }\n\n    ### Response:", "ground_truth": "Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping\n@param webSocket the websocket instance\n@param minimumPongTime the lowest/oldest allowable last pong time (in nanoTime) before we consider the connection to be lost", "predict": "Closing connection due to no pong received\n\n     * If no pong has been received for longer than the defined *minimumPongTime* from the Web Socket server, *connectionLostDetection* may *closeConnection* to *reestablish* the Web Socket connection."}, {"ID": 502, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Container) runToBitmap() { statsHit(\"runToBitmap\") runs := c.runs() bitmap := make([]uint64, bitmapN) c.typ = containerBitmap c.setBitmap(bitmap) c.mapped = false // return early if empty if c.n == 0 { return } for _, r := range runs { // TODO this can be ~64x faster for long runs by setting maxBitmap instead of single bits //note v must be int or will overflow for v := int(r.start); v <= int(r.last); v++ { bitmap[v/64] |= (uint64(1) << uint(v%64)) } } }\n\n    ### Response: // runToBitmap converts from RLE format to bitmap format..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void cancelConnectionLostTimer() { if( connectionLostCheckerService != null ) { connectionLostCheckerService.shutdownNow(); connectionLostCheckerService = null; } if( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture.cancel(false); connectionLostCheckerFuture = null; } }\n\n    ### Response:", "ground_truth": "Cancel any running timer for the connection lost detection\n@since 1.3.4", "predict": "The cancelConnectionLostTimer() method reschedules the lostConnectionCheckerTimeout time to check if the Web Socket has been lost. If the Web Socket has been lost, the lostConnectionCheckerTimeout time will be serviced to immediately cancel the Web Socket."}, {"ID": 503, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function (name) { var args = arguments; var len = args.length; if (len === 0) { return this.getMap(); } else if (len === 1) { return this.getValue(name); } else { return this.getValues.apply(this, args); } }\n\n    ### Response: Get the values of one or more properties\n@param {...string=} name Optional property names. If omitted, a map of\nall properties will be returned. If one property name is given then the\nvalue of that property will be returned. Otherwise, if more than one\nproperty name is given, the values of those properties will be returned\nas an array.\n@return {Object|Array|*} Result of the get operation depending on the\nnumber of property names given..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public ServerHandshakeBuilder onWebsocketHandshakeReceivedAsServer( WebSocket conn, Draft draft, ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server(); }\n\n    ### Response:", "ground_truth": "This default implementation does not do anything. Go ahead and overwrite it.\n\n@see org.java_websocket.WebSocketListener#onWebsocketHandshakeReceivedAsServer(WebSocket, Draft, ClientHandshake)", "predict": "Override the onWebsocketHandshakeReceivedAsServer() method to implement the Web Socket Server Handshake"}, {"ID": 504, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def fix_windows_command_list(commands): # type: (List[str]) -> List[str] \"\"\"Return command list with working Windows commands. npm on windows is npm.cmd, which will blow up subprocess.check_call(['npm', '...']) Similar issues arise when calling python apps like pipenv that will have a windows-only suffix applied to them \"\"\" fully_qualified_cmd_path = which(commands[0]) if fully_qualified_cmd_path and ( not which(commands[0], add_win_suffixes=False)): commands[0] = os.path.basename(fully_qualified_cmd_path) return commands\n\n    ### Response: Return command list with working Windows commands.\n\n    npm on windows is npm.cmd, which will blow up\n    subprocess.check_call(['npm', '...'])\n\n    Similar issues arise when calling python apps like pipenv that will have\n    a windows-only suffix applied to them.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void onWebsocketPing( WebSocket conn, Framedata f ) { conn.sendFrame( new PongFrame( (PingFrame)f ) ); }\n\n    ### Response:", "ground_truth": "This default implementation will send a pong in response to the received ping.\nThe pong frame will have the same payload as the ping frame.\n\n@see org.java_websocket.WebSocketListener#onWebsocketPing(WebSocket, Framedata)", "predict": "Override the onWebsocketPong() method to send the ping frame in response to the ping frame received over Web Socket."}, {"ID": 505, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getKeysByName($names) { if (empty($names)) { return []; } return $this->whereIn('name', $names) ->select($this->getKeyName())->get() ->pluck($this->getKeyName())->all(); }\n\n    ### Response: Get the keys of the roles with the given names.\n\n@param  iterable  $names\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void stop( int timeout ) throws InterruptedException { if( !isclosed.compareAndSet( false, true ) ) { // this also makes sure that no further connections will be added to this.connections return; } List<WebSocket> socketsToClose; // copy the connections in a list (prevent callback deadlocks) synchronized ( connections ) { socketsToClose = new ArrayList<WebSocket>( connections ); } for( WebSocket ws : socketsToClose ) { ws.close( CloseFrame.GOING_AWAY ); } wsf.close(); synchronized ( this ) { if( selectorthread != null && selector != null) { selector.wakeup(); selectorthread.join( timeout ); } } }\n\n    ### Response:", "ground_truth": "Closes all connected clients sockets, then closes the underlying\nServerSocketChannel, effectively killing the server socket selectorthread,\nfreeing the port the server was bound to and stops all internal workerthreads.\n\nIf this method is called before the server is started it will never start.\n\n@param timeout\nSpecifies how many milliseconds the overall close handshaking may take altogether before the connections are closed without proper close handshaking.\n\n@throws InterruptedException Interrupt", "predict": "Closes Web Socket connections given by the given names and wakes up the selector."}, {"ID": 506, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def parse_value_reference(self, tup_tree): \"\"\" Parse a VALUE.REFERENCE element and return the instance path or class path it represents as a CIMInstanceName or CIMClassName object, respectively. :: <!ELEMENT VALUE.REFERENCE (CLASSPATH | LOCALCLASSPATH | CLASSNAME | INSTANCEPATH | LOCALINSTANCEPATH | INSTANCENAME)> \"\"\" self.check_node(tup_tree, 'VALUE.REFERENCE') child = self.one_child(tup_tree, ('CLASSPATH', 'LOCALCLASSPATH', 'CLASSNAME', 'INSTANCEPATH', 'LOCALINSTANCEPATH', 'INSTANCENAME')) return child\n\n    ### Response: Parse a VALUE.REFERENCE element and return the instance path or class\n        path it represents as a CIMInstanceName or CIMClassName object,\n        respectively.\n\n          ::\n\n            .\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int getPort() { int port = getAddress().getPort(); if( port == 0 && server != null ) { port = server.socket().getLocalPort(); } return port; }\n\n    ### Response:", "ground_truth": "Gets the port number that this server listens on.\n\n@return The port number.", "predict": "Get the port on which the Web Socket server is listening on and returns it if its not 0 or the server is null, otherwise returns 0."}, {"ID": 507, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private AllocatedSlice getSliceOfType(final JobID jobID, final InstanceType instanceType) { AllocatedSlice slice = null; // Try to match the instance type without slicing first for (final ClusterInstance host : this.registeredHosts.values()) { if (host.getType().equals(instanceType)) { slice = host.createSlice(instanceType, jobID); if (slice != null) { break; } } } // Use slicing now if necessary if (slice == null) { for (final ClusterInstance host : this.registeredHosts.values()) { slice = host.createSlice(instanceType, jobID); if (slice != null) { break; } } } return slice; }\n\n    ### Response: Attempts to allocate a slice of the given type for the given job. The method first attempts to allocate this\nslice by finding a physical host which exactly matches the given instance type. If this attempt failed, it tries\nto allocate the slice by partitioning the resources of a more powerful host.\n\n@param jobID\nthe ID of the job the slice shall be allocated for\n@param instanceType\nthe instance type of the requested slice\n@return the allocated slice or null if no such slice could be allocated.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void doAdditionalRead() throws InterruptedException, IOException { WebSocketImpl conn; while ( !iqueue.isEmpty() ) { conn = iqueue.remove( 0 ); WrappedByteChannel c = ( (WrappedByteChannel) conn.getChannel() ); ByteBuffer buf = takeBuffer(); try { if( SocketChannelIOHelper.readMore( buf, conn, c ) ) iqueue.add( conn ); if( buf.hasRemaining() ) { conn.inQueue.put( buf ); queue( conn ); } else { pushBuffer( buf ); } } catch ( IOException e ) { pushBuffer( buf ); throw e; } } }\n\n    ### Response:", "ground_truth": "Do an additional read\n@throws InterruptedException thrown by taking a buffer\n@throws IOException if an error happened during read", "predict": "Attempts to send additional reads to the Web Socket listener when there is data to send but not enough space in\nthe queue to send it all at once. The listener processes data in order of increasing buffer address until it has received enough\ndata to fill its buffer and send it on its way to its recipient."}, {"ID": 508, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _load_config(config_file): \"\"\"Load settings from config file and return them as a dict. If the config file is not found, or if it is invalid, create and use a default config file. :param config_file: `pathlib.Path` object. Path to config file. :return: Dictionary of config options. \"\"\" logger.debug('Config file: {}'.format(config_file)) parser = configparser.ConfigParser() try: with config_file.open('r') as f: parser.read_file(f) except FileNotFoundError as e: logger.warning('Config file not found') parser = _use_default(config_file) except configparser.ParsingError as e: logger.warning('Error in config file: {}'.format(e)) parser = _use_default(config_file) finally: try: config = _load_options(parser) except (configparser.NoOptionError): parser = _use_default(config_file) config = _load_options(parser) logger.debug('Config loaded: {}'.format(config_file)) return config\n\n    ### Response: Load settings from config file and return them as a dict.  If the\n    config file is not found, or if it is invalid, create and use a\n    default config file.\n\n    :param config_file: `pathlib.Path` object. Path to config file.\n    :return: Dictionary of config options..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void doAccept(SelectionKey key, Iterator<SelectionKey> i) throws IOException, InterruptedException { if( !onConnect( key ) ) { key.cancel(); return; } SocketChannel channel = server.accept(); if(channel==null){ return; } channel.configureBlocking( false ); Socket socket = channel.socket(); socket.setTcpNoDelay( isTcpNoDelay() ); socket.setKeepAlive( true ); WebSocketImpl w = wsf.createWebSocket( this, drafts ); w.setSelectionKey(channel.register( selector, SelectionKey.OP_READ, w )); try { w.setChannel( wsf.wrapChannel( channel, w.getSelectionKey() )); i.remove(); allocateBuffers( w ); } catch (IOException ex) { if( w.getSelectionKey() != null ) w.getSelectionKey().cancel(); handleIOException( w.getSelectionKey(), null, ex ); } }\n\n    ### Response:", "ground_truth": "Execute a accept operation\n@param key the selectionkey to read off\n@param i the iterator for the selection keys\n@throws InterruptedException  thrown by taking a buffer\n@throws IOException if an error happened during accept", "predict": "Do accept the given SocketChannel and Socket from the given SelectionKey. If the SocketChannel does\n    //not support non blocking mode, convert to non blocking mode and\n    //start receiving data from the Socket. Once data is received,\n    //start Web Socket handshake with the Socket and allocateBuffers().\n    If the SocketChannel does support non blocking mode,\n    convert to non blocking mode and start receiving data from the Socket. Once data is received,\n    start Web Socket handshake with the Socket and allocateBuffers()."}, {"ID": 509, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def bind(self, sock): \"\"\"Wrap and return the given socket.\"\"\" if self.context is None: self.context = self.get_context() conn = SSLConnection(self.context, sock) self._environ = self.get_environ() return conn\n\n    ### Response: Wrap and return the given socket..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean doRead(SelectionKey key, Iterator<SelectionKey> i) throws InterruptedException, IOException { WebSocketImpl conn = (WebSocketImpl) key.attachment(); ByteBuffer buf = takeBuffer(); if(conn.getChannel() == null){ key.cancel(); handleIOException( key, conn, new IOException() ); return false; } try { if( SocketChannelIOHelper.read( buf, conn, conn.getChannel() ) ) { if( buf.hasRemaining() ) { conn.inQueue.put( buf ); queue( conn ); i.remove(); if( conn.getChannel() instanceof WrappedByteChannel && ( (WrappedByteChannel) conn.getChannel() ).isNeedRead() ) { iqueue.add( conn ); } } else { pushBuffer(buf); } } else { pushBuffer( buf ); } } catch ( IOException e ) { pushBuffer( buf ); throw e; } return true; }\n\n    ### Response:", "ground_truth": "Execute a read operation\n@param key the selectionkey to read off\n@param i the iterator for the selection keys\n@return true, if the read was successful, or false if there was an error\n@throws InterruptedException thrown by taking a buffer\n@throws IOException if an error happened during read", "predict": "Wrap and return the given socket.."}, {"ID": 510, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function each($method, ...$args) { if ($this->count() === 0) { return 0; } $n = 0; foreach ($this as $obj) { $obj->$method(...$args); ++$n; } return $n; }\n\n    ### Response: Call given method of all objects in storage\n@param  string $method Method name\n@param  mixed ...$args Arguments\n@return integer Number of called objects.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void doWrite(SelectionKey key) throws IOException { WebSocketImpl conn = (WebSocketImpl) key.attachment(); if( SocketChannelIOHelper.batch( conn, conn.getChannel() ) ) { if( key.isValid() ) { key.interestOps(SelectionKey.OP_READ); } } }\n\n    ### Response:", "ground_truth": "Execute a write operation\n@param key the selectionkey to write on\n@throws IOException if an error happened during batch", "predict": "Write Web Socket packets to Web Socket SocketChannel"}, {"ID": 511, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static boolean compatibleModifiers(int modifiersA, int modifiersB) { int mask = Modifier.PRIVATE | Modifier.PROTECTED | Modifier.PUBLIC | Modifier.STATIC; return (modifiersA & mask) == (modifiersB & mask); }\n\n    ### Response: Checks the compatibility between two modifier masks. Checks that they are equal\nwith regards to access and static modifier.\n\n@return true if the modifiers are compatible.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean doSetupSelectorAndServerThread() { selectorthread.setName( \"WebSocketSelector-\" + selectorthread.getId() ); try { server = ServerSocketChannel.open(); server.configureBlocking( false ); ServerSocket socket = server.socket(); socket.setReceiveBufferSize( WebSocketImpl.RCVBUF ); socket.setReuseAddress( isReuseAddr() ); socket.bind( address ); selector = Selector.open(); server.register( selector, server.validOps() ); startConnectionLostTimer(); for( WebSocketWorker ex : decoders ){ ex.start(); } onStart(); } catch ( IOException ex ) { handleFatal( null, ex ); return false; } return true; }\n\n    ### Response:", "ground_truth": "Setup the selector thread as well as basic server settings\n@return true, if everything was successful, false if some error happened", "predict": "Do setup for selector and server threads to communicate and to send Web Socket handshake request to the client"}, {"ID": 512, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (L *State) SetExecutionLimit(instrNumber int) { C.clua_setexecutionlimit(L.s, C.int(instrNumber)) }\n\n    ### Response: // Sets the maximum number of operations to execute at instrNumber, after this the execution ends.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean doEnsureSingleThread() { synchronized ( this ) { if( selectorthread != null ) throw new IllegalStateException( getClass().getName() + \" can only be started once.\" ); selectorthread = Thread.currentThread(); if( isclosed.get() ) { return false; } } return true; }\n\n    ### Response:", "ground_truth": "The websocket server can only be started once\n@return true, if the server can be started, false if already a thread is running", "predict": "// Checks if the instance is already in its proper single-threaded state and prevents multiple threads from trying to use this instance simultaneously\n    // If the instance has not been closed, and the proper single-threaded state has not been reached, the method may throw an exception stating that the instance must be closed and then initialized again to use in a single-threaded environment\n    // If the exception does occur, the method may attempt to re-start the proper single-threaded environment by disposing of any previous threads attached to the instance\n    // If the proper single-threaded environment cannot be obtained, the exception may be ignored"}, {"ID": 513, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function index($request) { $application = $request->get('application'); $path = $request->get('path'); if (empty($application) || empty($path)) { return new Response( \"Not a valid asset\", 404 ); } if (strpos('..', $path) === 0) { return new Response( \"Only assets will be served\", 404 ); } if ($application !== 'Towel') { $asset_path = APP_ROOT_DIR . '/Application/' . $application . '/Views/assets/' . $path; } else { $asset_path = APP_FW_DIR. '/Views/assets/' . $path; } if (!file_exists($asset_path)) { return new Response( \"Asset does not exists\", 404 ); } $asset_type = mime_content_type($asset_path); $asset_content = file_get_contents($asset_path); $asset_info = pathinfo($asset_path); if (!empty($asset_info['extension']) && in_array($asset_info['extension'], self::$validExtensions)) { $response = new Response( $asset_content, 200, ['Content-Type' => self::$extensionTypeMapping[$asset_info['extension']]] ); //To cache in the client side. $maxAge = 0; if (!empty($this->appConfig['assets']['max-age'])) { $maxAge = $this->appConfig['assets']['max-age']; } $response->headers->addCacheControlDirective('max-age', $maxAge); if (!empty($this->appConfig['assets']['public']) && $this->appConfig['assets']['public'] == true) { $response->headers->addCacheControlDirective('public', true); } return $response; } return new Response( \"Not a valid extension\", 404 ); }\n\n    ### Response: Serves assets from the Application directory.\n\nTo use this controller in your template use the function asset_url to get a valid url\nfor this controller.\n\n@param $request\n@return string|Response.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void doServerShutdown() { stopConnectionLostTimer(); if( decoders != null ) { for( WebSocketWorker w : decoders ) { w.interrupt(); } } if( selector != null ) { try { selector.close(); } catch ( IOException e ) { log.error( \"IOException during selector.close\", e ); onError( null, e ); } } if( server != null ) { try { server.close(); } catch ( IOException e ) { log.error( \"IOException during server.close\", e ); onError( null, e ); } } }\n\n    ### Response:", "ground_truth": "Clean up everything after a shutdown", "predict": "Closes the Web Socket server and interrupt the decode and decode workers"}, {"ID": 514, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long calculateOptimalPartSizeForCopy( CopyObjectRequest copyObjectRequest, TransferManagerConfiguration configuration, long contentLengthOfSource) { double optimalPartSize = (double) contentLengthOfSource / (double) MAXIMUM_UPLOAD_PARTS; // round up so we don't push the copy over the maximum number of parts optimalPartSize = Math.ceil(optimalPartSize); return (long) Math.max(optimalPartSize, configuration.getMultipartCopyPartSize()); }\n\n    ### Response: Calculates the optimal part size of each part request if the copy\noperation is carried out as multi-part copy.\n\n@param copyObjectRequest\nthe original request.\n@param configuration\nconfiguration containing the default part size.\n@param contentLengthOfSource\ncontent length of the Amazon S3 object.\n@return the optimal part size for a copy part request..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Socket getSocket( WebSocket conn ) { WebSocketImpl impl = (WebSocketImpl) conn; return ( (SocketChannel) impl.getSelectionKey().channel() ).socket(); }\n\n    ### Response:", "ground_truth": "Getter to return the socket used by this specific connection\n@param conn The specific connection\n@return The socket used by this connection", "predict": "Get the socket for the given Web Socket conn."}, {"ID": 515, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (l *Logger) handleError(err error) error { h := l.errorHandler.Load().(func(error) error) if h == nil { return err } return h(err) }\n\n    ### Response: // Formatter returns the current log formatter..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void broadcast(byte[] data, Collection<WebSocket> clients) { if (data == null || clients == null) { throw new IllegalArgumentException(); } broadcast(ByteBuffer.wrap(data), clients); }\n\n    ### Response:", "ground_truth": "Send a byte array to a specific collection of websocket connections\n@param data the data to send to the endpoints\n@param clients a collection of endpoints to whom the text has to be send", "predict": "// Broadcast given payload to Web Socket clients"}, {"ID": 516, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function deletePost($post_id) { $token = $this->oauth->getToken(); // Set parameters. $parameters = array( 'oauth_token' => $token['key'] ); // Set the success response code. $this->oauth->setOption('success_code', 204); // Set the API base $base = '/v1/posts/' . $post_id; // Build the request path. $path = $this->getOption('api.url') . $base; // Send the request. $response = $this->oauth->oauthRequest($path, 'DELETE', $parameters); return $response; }\n\n    ### Response: Method to delete a post if the current user is the creator or flag it as inappropriate otherwise.\n\n@param   string  $post_id  The unique identifier for a group.\n\n@return  array  The decoded JSON response\n\n@since   1.0.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void broadcast(String text, Collection<WebSocket> clients) { if (text == null || clients == null) { throw new IllegalArgumentException(); } doBroadcast(text, clients); }\n\n    ### Response:", "ground_truth": "Send a text to a specific collection of websocket connections\n@param text the text to send to the endpoints\n@param clients a collection of endpoints to whom the text has to be send", "predict": "Broadcast given message to given WebSocket objects"}, {"ID": 517, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(str) { var parameters = str.split('&'), obj = {}, parameter, key, match, lastKey, subKey, depth; // Iterate over key/value pairs _.each(parameters, function(parameter) { parameter = parameter.split('='); key = urlDecode(parameter[0]); lastKey = key; depth = obj; // Reset so we don't have issues when matching the same string bracketRegex.lastIndex = 0; // Attempt to extract nested values while ((match = bracketRegex.exec(key)) !== null) { if (!_.isUndefined(match[1])) { // If we're at the top nested level, no new object needed subKey = match[1]; } else { // If we're at a lower nested level, we need to step down, and make // sure that there is an object to place the value into subKey = match[2]; depth[lastKey] = depth[lastKey] || (subKey ? {} : []); depth = depth[lastKey]; } // Save the correct key as a hash or an array lastKey = subKey || _.size(depth); } // Assign value to nested object depth[lastKey] = urlDecode(parameter[1]); }); return obj; }\n\n    ### Response: Parses a query string into a hash.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void doBroadcast(Object data, Collection<WebSocket> clients) { String sData = null; if (data instanceof String) { sData = (String)data; } ByteBuffer bData = null; if (data instanceof ByteBuffer) { bData = (ByteBuffer)data; } if (sData == null && bData == null) { return; } Map<Draft, List<Framedata>> draftFrames = new HashMap<Draft, List<Framedata>>(); for( WebSocket client : clients ) { if( client != null ) { Draft draft = client.getDraft(); fillFrames(draft, draftFrames, sData, bData); try { client.sendFrame( draftFrames.get( draft ) ); } catch ( WebsocketNotConnectedException e ) { //Ignore this exception in this case } } } }\n\n    ### Response:", "ground_truth": "Private method to cache all the frames to improve memory footprint and conversion time\n@param data the data to broadcast\n@param clients the clients to send the message to", "predict": "Parses a query string or serialized objects and sends to WebSocket clients"}, {"ID": 518, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> Observable<T> toHotObservable(final List<ComposableFuture<T>> futures, final boolean failOnError) { final ReplaySubject<T> subject = ReplaySubject.create(futures.size()); final AtomicInteger counter = new AtomicInteger(futures.size()); final AtomicBoolean errorTrigger = new AtomicBoolean(false); for (final ComposableFuture<T> future : futures) { future.consume(provideObserverResult(subject, counter, errorTrigger, failOnError)); } return subject; }\n\n    ### Response: translate a list of eager futures into a hot Observable stream\nthe results of the futures will be stored in the stream for any future subscriber.\n\n@param futures     the list of eager futures\n@param failOnError whether to close the stream upon a future error\n@param          the stream type\n@return the stream.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void fillFrames(Draft draft, Map<Draft, List<Framedata>> draftFrames, String sData, ByteBuffer bData) { if( !draftFrames.containsKey( draft ) ) { List<Framedata> frames = null; if (sData != null) { frames = draft.createFrames( sData, false ); } if (bData != null) { frames = draft.createFrames( bData, false ); } if (frames != null) { draftFrames.put(draft, frames); } } }\n\n    ### Response:", "ground_truth": "Fills the draftFrames with new data for the broadcast\n@param draft The draft to use\n@param draftFrames The list of frames per draft to fill\n@param sData the string data, can be null\n@param bData the bytebuffer data, can be null", "predict": "\nfillFrames populates the Map with frames for the given Draft and stores them in the Map for later retrieval\ndraft and sData are arguments to the method\ndraft and frames/bData are objects in the Map"}, {"ID": 519, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function findAdderMethod($object, $property) { if (is_callable([$object, $method = 'add' . $property])) { return $method; } if (class_exists('Symfony\\Component\\PropertyAccess\\StringUtil') && method_exists('Symfony\\Component\\PropertyAccess\\StringUtil', 'singularify')) { foreach ((array) Inflector::singularize($property) as $singularForm) { if (is_callable([$object, $method = 'add' . $singularForm])) { return $method; } } } if (is_callable([$object, $method = 'add' . rtrim($property, 's')])) { return $method; } if (substr($property, -3) === 'ies' && is_callable([$object, $method = 'add' . substr($property, 0, -3) . 'y'])) { return $method; } return null; }\n\n    ### Response: finds the method used to append values to the named property\n\n@param mixed  $object\n@param string $property\n\n@return string|null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int transferByteBuffer( ByteBuffer source, ByteBuffer dest ) { if( source == null || dest == null ) { throw new IllegalArgumentException(); } int fremain = source.remaining(); int toremain = dest.remaining(); if( fremain > toremain ) { int limit = Math.min( fremain, toremain ); source.limit( limit ); dest.put( source ); return limit; } else { dest.put( source ); return fremain; } }\n\n    ### Response:", "ground_truth": "Transfer from one ByteBuffer to another ByteBuffer\n\n@param source the ByteBuffer to copy from\n@param dest   the ByteBuffer to copy to\n@return the number of transferred bytes", "predict": "Transfers values from source to dest given limitations of source and dest"}, {"ID": 520, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *InvokeOutput) SetExecutedVersion(v string) *InvokeOutput { s.ExecutedVersion = &v return s }\n\n    ### Response: // SetExecutedVersion sets the ExecutedVersion field's value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public JPAApi start() { jpaConfig .persistenceUnits() .forEach( persistenceUnit -> emfs.put( persistenceUnit.name, Persistence.createEntityManagerFactory(persistenceUnit.unitName))); return this; }\n\n    ### Response:", "ground_truth": "Initialise JPA entity manager factories.", "predict": "// start creates and configures the EntityManagerFactory and its associated EntityManagers and returns this JPAApi instance.."}, {"ID": 521, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function _processTemplateVars(array $options) { $templateVars = isset($options['options']['templateVars']) ? $options['options']['templateVars'] : []; if (empty($templateVars)) { return $templateVars; } if (isset($templateVars['formRowLabel']) && $options['options']['id'] !== false) { $templateVars['formRowFor'] = ' for=\"' . $options['options']['id'] . '\"'; } $wrapInSmall = [ 'formRowLabelInfo', 'formRowInfo', 'info' ]; foreach ($wrapInSmall as $attr) { if (isset($templateVars[$attr])) { $templateVars[$attr] = '<small>' . $templateVars[$attr] . '</small>'; } } return $templateVars; }\n\n    ### Response: Process templateVars to wrap info elements in a small tag and\napply the \"for\" attribute to form row labels.\n\n@param array $options The input options\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EntityManager em(String name) { EntityManagerFactory emf = emfs.get(name); if (emf == null) { return null; } return emf.createEntityManager(); }\n\n    ### Response:", "ground_truth": "Get a newly created EntityManager for the specified persistence unit name.\n\n@param name The persistence unit name", "predict": "Get an EntityManager from an entity manager factory or create a new one and return it."}, {"ID": 522, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static public function getItemTranslationsForCatalog($nb_catalog, int $level) { $nb_catalog_id = nb_getMixedValue($nb_catalog, NABU_CATALOG_FIELD_ID); if (is_numeric($nb_catalog_id)) { $retval = CNabuCatalogItemLanguage::buildObjectListFromSQL( null, 'SELECT cil.* FROM nb_catalog_item ci, nb_catalog_item_lang cil WHERE ci.nb_catalog_item_id=cil.nb_catalog_item_id AND ci.nb_catalog_id=%catalog_id$d ' . ($level > 0 ? 'and ci.nb_catalog_item_level<=%level$d ' : '') . 'ORDER BY ci.nb_catalog_item_order, cil.nb_language_id', array( 'catalog_id' => $nb_catalog_id, 'level' => $level ) ); } else { $retval = new CNabuCatalogItemLanguageList(); } return $retval; }\n\n    ### Response: Gets the list of translations associated to all items of a catalog from the storage.\n@param mixed $nb_catalog A CNabuDataObject instance containing a field name nb_catalog_id or a Catalog ID.\n@param int $level Max deep level to retrieve items. If $level is 0 then retrieves all levels.\n@return CNabuCatalogItemLanguageList Returns a CNabuCatalogItemLanguageList with all translations found.\nIf no translations found, then rturns an empty instance..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void withTransaction(Consumer<EntityManager> block) { withTransaction( em -> { block.accept(em); return null; }); }\n\n    ### Response:", "ground_truth": "Run a block of code with a newly created EntityManager for the default Persistence Unit.\n\n@param block Block of code to execute", "predict": "Initiates a transaction and invokes the given listener in the context of the transaction. The listener may run any SQL queries and modify any objects but must do so within the context of the transaction or rollback the transaction when finished."}, {"ID": 523, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function column($column, $type = 'string', $length = 255) { $this->builder->setDiscriminatorColumn($column, $type, $length); return $this; }\n\n    ### Response: Add the discriminator column.\n\n@param string $column\n@param string $type\n@param int    $length\n\n@return Inheritance.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static Seq<Object> convertArgsToScalaBuffer(final Object... args) { return scala.collection.JavaConverters.asScalaBufferConverter(wrapArgsToListIfNeeded(args)) .asScala() .toList(); }\n\n    ### Response:", "ground_truth": "Converts the varargs to a scala buffer, takes care of wrapping varargs into a intermediate list\nif necessary\n\n@param args the message arguments\n@return scala type for message processing", "predict": "Wrap arguments to Scala List and convert to Scala Buffer objects"}, {"ID": 524, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function mergeClassOptions(classes, clazz) { if (!clazz || !clazz.length) { return; } clazz = clazz[0]; var merged = []; var propChecked = {}; var clazzChecking = clazz; while (clazzChecking) { //find class's options var filtered = find({kind: 'member', memberof: clazzChecking.longname, name : 'options'}); if (filtered) { var properties = filtered.length ? filtered[0].properties : null; if (properties) { properties.forEach(function (prop) { //append 'options.' at the head of the property name if (prop.name.indexOf('options') < 0) { prop.name = 'options.' + prop.name; } if (!propChecked[prop.name]) { merged.push(prop); propChecked[prop.name] = 1; } }); } } //find class's parent class var parents = clazzChecking.augments ? helper.find(classes, {longname: clazzChecking.augments[0]}) : null; if (!parents || !parents.length) { break; } clazzChecking = parents[0]; } var toMerge = find({kind: 'member', memberof: clazz.longname, name : 'options'}); if (toMerge.length) { toMerge[0].properties = merged; } }\n\n    ### Response: merge class's options with its parent classes recursively.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SafeVarargs private static <T> List<T> wrapArgsToListIfNeeded(final T... args) { List<T> out; if (args != null && args.length == 1 && args[0] instanceof List) { out = (List<T>) args[0]; } else { out = Arrays.asList(args); } return out; }\n\n    ### Response:", "ground_truth": "Wraps arguments passed into a list if necessary.\n\nReturns the first value as is if it is the only argument and a subtype of `java.util.List`\nOtherwise, it calls Arrays.asList on args\n\n@param args arguments as a List", "predict": "Wrap arguments given in varargs into objects of list to ensure proper functioning of the program"}, {"ID": 525, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _compute_dependencies(self): \"\"\"Recompute this distribution's dependencies.\"\"\" dm = self.__dep_map = {None: []} reqs = [] # Including any condition expressions for req in self._parsed_pkg_info.get_all('Requires-Dist') or []: reqs.extend(parse_requirements(req)) def reqs_for_extra(extra): for req in reqs: if not req.marker or req.marker.evaluate({'extra': extra}): yield req common = frozenset(reqs_for_extra(None)) dm[None].extend(common) for extra in self._parsed_pkg_info.get_all('Provides-Extra') or []: s_extra = safe_extra(extra.strip()) dm[s_extra] = list(frozenset(reqs_for_extra(extra)) - common) return dm\n\n    ### Response: Recompute this distribution's dependencies..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String get(play.api.i18n.Lang lang, String key, Object... args) { Seq<Object> scalaArgs = convertArgsToScalaBuffer(args); return messages.apply(key, scalaArgs, lang); }\n\n    ### Response:", "ground_truth": "Translates a message.\n\nUses `java.text.MessageFormat` internally to format the message.\n\n@param lang the message lang\n@param key the message key\n@param args the message arguments\n@return the formatted message or a default rendering if the key wasn't defined", "predict": "The function generates a translated string from the given arguments and the specified language code."}, {"ID": 526, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Config) SnapshotMulti(snapshotID string, i ...interface{}) error { snapshotName := fmt.Sprintf(\"%s-%s\", getNameOfCaller(), snapshotID) return c.snapshot(snapshotName, i...) }\n\n    ### Response: // SnapshotMulti is similar to Snapshot but can be called multiple times from the\n// same function. This is possible by providing a unique id for each snapshot which is\n// appended to the function name to form the snapshot name..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String get(play.api.i18n.Lang lang, List<String> keys, Object... args) { Buffer<String> keyArgs = scala.collection.JavaConverters.asScalaBufferConverter(keys).asScala(); Seq<Object> scalaArgs = convertArgsToScalaBuffer(args); return messages.apply(keyArgs.toSeq(), scalaArgs, lang); }\n\n    ### Response:", "ground_truth": "Translates the first defined message.\n\nUses `java.text.MessageFormat` internally to format the message.\n\n@param lang the message lang\n@param keys the messages keys\n@param args the message arguments\n@return the formatted message or a default rendering if the key wasn't defined", "predict": "The function generates a translated message string given the source string, the source string arguments and the specified language code."}, {"ID": 527, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Service getServiceInfos(ClassLoader compileClassLoader) { Service service = new Service(); // get some service properties from pom service.setServiceId(serviceId); service.setName(project.getName()); // find @ServiceDoc annotated class in source folder JavaProjectBuilder builder = new JavaProjectBuilder(); builder.addSourceTree(new File(source)); JavaClass serviceInfo = builder.getSources().stream() .flatMap(javaSource -> javaSource.getClasses().stream()) .filter(javaClass -> hasAnnotation(javaClass, ServiceDoc.class)) .findFirst().orElse(null); // populate further service information from @ServiceDoc class and @LinkRelationDoc fields if (serviceInfo != null) { service.setDescriptionMarkup(serviceInfo.getComment()); serviceInfo.getFields().stream() .filter(field -> hasAnnotation(field, LinkRelationDoc.class)) .map(field -> toLinkRelation(serviceInfo, field, compileClassLoader)) .forEach(service::addLinkRelation); } // resolve link relations service.resolve(); return service; }\n\n    ### Response: Get service infos from current maven project.\n@return Service.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Boolean isDefinedAt(play.api.i18n.Lang lang, String key) { return messages.isDefinedAt(key, lang); }\n\n    ### Response:", "ground_truth": "Check if a message key is defined.\n\n@param lang the message lang\n@param key the message key\n@return a Boolean", "predict": "Check if the given key and lang has a defined message in the messages resource bundle."}, {"ID": 528, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public IntTrie serialize(TrieBuilder.DataManipulate datamanipulate, Trie.DataManipulate triedatamanipulate) { if (datamanipulate == null) { throw new IllegalArgumentException(\"Parameters can not be null\"); } // fold and compact if necessary, also checks that indexLength is // within limits if (!m_isCompacted_) { // compact once without overlap to improve folding compact(false); // fold the supplementary part of the index array fold(datamanipulate); // compact again with overlap for minimum data array length compact(true); m_isCompacted_ = true; } // is dataLength within limits? if (m_dataLength_ >= MAX_DATA_LENGTH_) { throw new ArrayIndexOutOfBoundsException(\"Data length too small\"); } char index[] = new char[m_indexLength_]; int data[] = new int[m_dataLength_]; // write the index (stage 1) array and the 32-bit data (stage 2) array // write 16-bit index values shifted right by INDEX_SHIFT_ for (int i = 0; i < m_indexLength_; i ++) { index[i] = (char)(m_index_[i] >>> INDEX_SHIFT_); } // write 32-bit data values System.arraycopy(m_data_, 0, data, 0, m_dataLength_); int options = SHIFT_ | (INDEX_SHIFT_ << OPTIONS_INDEX_SHIFT_); options |= OPTIONS_DATA_IS_32_BIT_; if (m_isLatin1Linear_) { options |= OPTIONS_LATIN1_IS_LINEAR_; } return new IntTrie(index, data, m_initialValue_, options, triedatamanipulate); }\n\n    ### Response: Serializes the build table with 32 bit data\n@param datamanipulate builder raw fold method implementation\n@param triedatamanipulate result trie fold method\n@return a new trie.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Messages preferred(Collection<Lang> candidates) { Seq<Lang> cs = Scala.asScala(candidates); play.api.i18n.Messages msgs = messages.preferred((Seq) cs); return new MessagesImpl(new Lang(msgs.lang()), this); }\n\n    ### Response:", "ground_truth": "Get a messages context appropriate for the given candidates.\n\nWill select a language from the candidates, based on the languages available, and fallback\nto the default language if none of the candidates are available.\n\n@param candidates the candidate languages\n@return the most appropriate Messages instance given the candidate languages", "predict": "Preferred contains the translated texts of the given candidate languages to the given output language"}, {"ID": 529, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function getTraceOutput() { if (! $this->addTraceToOutput()) { return ''; } $inspector = $this->getInspector(); $frames = $inspector->getFrames(); $response = \"\\nStack trace:\"; $line = 1; foreach ($frames as $frame) { /** @var Frame $frame */ $class = $frame->getClass(); $template = \"\\n%3d. %s->%s() %s:%d%s\"; if (! $class) { // Remove method arrow (->) from output. $template = \"\\n%3d. %s%s() %s:%d%s\"; } $response .= sprintf( $template, $line, $class, $frame->getFunction(), $frame->getFile(), $frame->getLine(), $this->getFrameArgsOutput($frame, $line) ); $line++; } return $response; }\n\n    ### Response: Get the exception trace as plain text.\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Messages preferred(Http.RequestHeader request) { play.api.i18n.Messages msgs = messages.preferred(request); return new MessagesImpl(new Lang(msgs.lang()), this); }\n\n    ### Response:", "ground_truth": "Get a messages context appropriate for the given request.\n\nWill select a language from the request, based on the languages available, and fallback to\nthe default language if none of the candidates are available.\n\n@param request the incoming request\n@return the preferred messages context for the request", "predict": "Preferred Messages"}, {"ID": 530, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Client) GrantAccess(rNames, uNames []string) error { b := map[string][]string{\"repositories\": rNames, \"users\": uNames} return c.post(b, \"/repository/grant\") }\n\n    ### Response: // GrantAccess grants access to N users into N repositories..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Result setLang(Result result, Lang lang) { return messages.setLang(result.asScala(), lang).asJava(); }\n\n    ### Response:", "ground_truth": "Given a Result and a Lang, return a new Result with the lang cookie set to the given Lang.\n\n@param result the result where the lang will be set.\n@param lang the lang to set on the result\n@return a new result with the lang.", "predict": "// This method sets the language for the Result object and returns the Result object updated with the given lang."}, {"ID": 531, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function parse($group) { $this->setId($group['id']); $this->setName($group['name']); $this->setDescription($group['description']); $this->setType($group['type']); if (isset($group['primaryColour'])) { $this->setPrimaryColour($group['primaryColour']); } if (isset($group['secondaryColour'])) { $this->setSecondaryColour($group['secondaryColour']); } if (isset($group['badgeCode'])) { $this->setBadgeCode($group['badgeCode']); } if (isset($group['roomId'])) { $this->setRoomId($group['roomId']); } if (isset($group['isAdmin'])) { $this->setIsAdmin($group['isAdmin']); } }\n\n    ### Response: Parses group info array to \\Entities\\Group object\n\n@param array $group.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final Self bindings(GuiceableModule... modules) { return newBuilder(delegate.bindings(Scala.varargs(modules))); }\n\n    ### Response:", "ground_truth": "Add bindings from guiceable modules.\n\n@param modules the set of modules to bind\n@return a copy of this builder configured with those modules", "predict": "Allows binding objects to the injected Guice environment"}, {"ID": 532, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Context) BlendEquationSeparate(modeRGB, modeAlpha int) { c.Call(\"blendEquationSeparate\", modeRGB, modeAlpha) }\n\n    ### Response: // Controls the blending of an incoming source fragment's R, G, B, and A values\n// with a destination R, G, B, and A values as stored in the fragment's WebGLFramebuffer..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final Self bindings(play.api.inject.Module... modules) { return bindings(Guiceable.modules(modules)); }\n\n    ### Response:", "ground_truth": "Add bindings from Play modules.\n\n@param modules the set of Guice modules whose bindings to apply\n@return a copy of this builder configured with the provided bindings", "predict": "// Allows for binding objects to other objects in the application\n// Allows for binding objects to other objects in the application\n    // Allows for binding objects to other objects in the application"}, {"ID": 533, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function isValidExtension($extension) { $valid_page_types = implode('|', Grav::instance()['config']->get('system.pages.types')); // Strip the file extension for valid page types if (preg_match('/(' . $valid_page_types . ')/', $extension)) { return true; } return false; }\n\n    ### Response: Check if this is a valid Grav extension\n\n@param $extension\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final Self bindings(play.api.inject.Binding<?>... bindings) { return bindings(Guiceable.bindings(bindings)); }\n\n    ### Response:", "ground_truth": "Add Play bindings.\n\n@param bindings the set of play bindings to apply\n@return a copy of this builder configured with the provided bindings", "predict": "Allows binding objects to other objects in the application"}, {"ID": 534, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void stripAllCalls(Map<String, TweakInfo> tweakInfos) { for (TweakInfo tweakInfo : tweakInfos.values()) { boolean isRegistered = tweakInfo.isRegistered(); for (TweakFunctionCall functionCall : tweakInfo.functionCalls) { Node callNode = functionCall.callNode; Node parent = callNode.getParent(); if (functionCall.tweakFunc.isGetterFunction()) { Node newValue; if (isRegistered) { newValue = tweakInfo.getDefaultValueNode().cloneNode(); } else { // When we find a getter of an unregistered tweak, there has // already been a warning about it, so now just use a default // value when stripping. TweakFunction registerFunction = functionCall.tweakFunc.registerFunction; newValue = registerFunction.createDefaultValueNode(); } parent.replaceChild(callNode, newValue); compiler.reportChangeToEnclosingScope(parent); } else { Node voidZeroNode = IR.voidNode(IR.number(0).srcref(callNode)) .srcref(callNode); parent.replaceChild(callNode, voidZeroNode); compiler.reportChangeToEnclosingScope(parent); } } } }\n\n    ### Response: Removes all CALL nodes in the given TweakInfos, replacing calls to getter\nfunctions with the tweak's default value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final Self overrides(GuiceableModule... modules) { return newBuilder(delegate.overrides(Scala.varargs(modules))); }\n\n    ### Response:", "ground_truth": "Override bindings using guiceable modules.\n\n@param modules the set of Guice modules whose bindings override some previously configured ones\n@return a copy of this builder re-configured with the provided bindings", "predict": "Override the default behavior of Guice such that all arguments of GuiceableModule are populated during binding of delegated binding of this binding of Guice and supply arguments to those GuiceableModule during binding of delegated binding of this binding of Guice such that arguments of GuiceableModule during binding of delegated binding of this binding of Guice are populated during binding of delegated binding of this binding of Guice"}, {"ID": 535, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def build_from_bases(bases, classdict, attr, attr_dict): \"\"\"Helper function to build private HasProperties attributes\"\"\" output = OrderedDict() output_keys = set() all_bases = [] # Go through the bases from furthest to nearest ancestor for base in reversed(bases): # Only keep the items that are still defined on the bases if base is not object and isinstance(base, PropertyMetaclass): output_keys = output_keys.union(getattr(base, attr)) # Collect all bases so we ensure overridden items are assigned # in the correct order for item in reversed(base.__mro__): if item is object or not isinstance(item, PropertyMetaclass): continue if item not in all_bases: all_bases.append(item) # Update the items in reverse MRO order; only keep those that are # defined on the bases for base in all_bases: for key, val in iteritems(getattr(base, attr)): if key in base.__dict__ and key in output_keys: output.update({key: val}) # Remove all items that were overridden by this class; this is # potentially a superset of the items added back in the next step. for key in classdict: if key in output: output.pop(key) # Update the items with those defined on this class output.update(attr_dict) return output\n\n    ### Response: Helper function to build private HasProperties attributes.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final Self overrides(play.api.inject.Module... modules) { return overrides(Guiceable.modules(modules)); }\n\n    ### Response:", "ground_truth": "Override bindings using Play modules.\n\n@param modules the set of Play modules whose bindings override some previously configured ones\n@return a copy of this builder re-configured with the provided bindings", "predict": "Override behavior of Self for given Guice modules"}, {"ID": 536, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (p *point) SetPrecision(precision string) { switch precision { case \"us\": p.SetTime(p.Time().Truncate(time.Microsecond)) case \"ms\": p.SetTime(p.Time().Truncate(time.Millisecond)) case \"s\": p.SetTime(p.Time().Truncate(time.Second)) } }\n\n    ### Response: // SetPrecision will round a time to the specified precision..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final Self overrides(play.api.inject.Binding<?>... bindings) { return overrides(Guiceable.bindings(bindings)); }\n\n    ### Response:", "ground_truth": "Override bindings using Play bindings.\n\n@param bindings a set of Play bindings that override some previously configured ones\n@return a copy of this builder re-configured with the provided bindings", "predict": "The overrides method overrides other implementations of overrides to produce the same behavior but with the given arguments provided to the method."}, {"ID": 537, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void sendSpeak (BodyObject source, String message, byte mode) { SpeakUtil.sendSpeak(_speakObj, source.getVisibleName(), null, message, mode); }\n\n    ### Response: Sends the actual speak message..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final Self disable(Class<?>... moduleClasses) { return newBuilder(delegate.disable(Scala.toSeq(moduleClasses))); }\n\n    ### Response:", "ground_truth": "Disable modules by class.\n\n@param moduleClasses the module classes whose bindings should be disabled\n@return a copy of this builder configured to ignore the provided module classes", "predict": "Allows to disable specified classes of objects"}, {"ID": 538, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def transmit_metrics(self): \"\"\" Keep metrics updated about how long time ago each filetype was successfully uploaded. Transmits max once per ten seconds, regardless of how many threads are running. \"\"\" global _last_stats_transmit_time # pylint: disable=global-statement with _STATS_LOCK: # pylint: disable=not-context-manager if time.monotonic() - _last_stats_transmit_time < 10.0: return for site in self.state: for filetype, prop in self.state[site][\"upload\"].items(): if prop[\"last_success\"]: self.metrics.gauge( \"pghoard.last_upload_age\", time.monotonic() - prop[\"last_success\"], tags={ \"site\": site, \"type\": filetype, } ) _last_stats_transmit_time = time.monotonic()\n\n    ### Response: Keep metrics updated about how long time ago each filetype was successfully uploaded.\n        Transmits max once per ten seconds, regardless of how many threads are running..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Deprecated // TODO: When you remove this method make call(Request) below abstract public CompletionStage<Result> call(Context ctx) { return call( ctx.args != null && !ctx.args.isEmpty() ? ctx.request().addAttr(CTX_ARGS, ctx.args) : ctx.request()); }\n\n    ### Response:", "ground_truth": "the\nmigration guide for more details.", "predict": "@Deprecated // When you remove this method, make sure to make the method abstract public CompletionStage<Result> call(Request) and make sure to add arguments to the method for the arguments provided in the Request object in order to add them to the Attributes of the Request Object"}, {"ID": 539, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def handle_add(queue_name): \"\"\"Adds a task to a queue.\"\"\" source = request.form.get('source', request.remote_addr, type=str) try: task_id = work_queue.add( queue_name, payload=request.form.get('payload', type=str), content_type=request.form.get('content_type', type=str), source=source, task_id=request.form.get('task_id', type=str)) except work_queue.Error, e: return utils.jsonify_error(e) db.session.commit() logging.info('Task added: queue=%r, task_id=%r, source=%r', queue_name, task_id, source) return flask.jsonify(task_id=task_id)\n\n    ### Response: Adds a task to a queue..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public CompletionStage<Result> call( Request req) { // TODO: Make this method abstract after removing call(Context) return Context.safeCurrent() .map( threadLocalCtx -> { // A previous action did explicitly set a context onto the thread local (via // Http.Context.current.set(...)) // Let's use that context so the user doesn't loose data he/she set onto that ctx // (args,...) Context newCtx = threadLocalCtx.withRequest(req.removeAttr(CTX_ARGS)); Context.setCurrent(newCtx); return call(newCtx); }) .orElseGet( () -> { // A previous action did not set a context explicitly, we simply create a new one to // pass on the request Context ctx = new Context(req.removeAttr(CTX_ARGS), contextComponents); ctx.args = req.attrs().getOptional(CTX_ARGS).orElse(new HashMap<>()); return call(ctx); }); }\n\n    ### Response:", "ground_truth": "", "predict": "This method retrieves the Context from the thread local store // and applies the given arguments to the given Context // Returns either the Result of the original call or the Result of the substitute // call depending on whether the original and substitute arguments // were the same"}, {"ID": 540, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getConstructorArgumentsForClass($className) { if (!isset($this->constructorReflectionFirstLevelCache[$className])) { $constructorSignature = []; // TODO: Check if we can get rid of this reflection service usage, directly reflecting doesn't work as the proxy class __construct has no arguments. if ($this->reflectionService->hasMethod($className, '__construct')) { $constructorSignature = $this->reflectionService->getMethodParameters($className, '__construct'); } $this->constructorReflectionFirstLevelCache[$className] = $constructorSignature; } return $this->constructorReflectionFirstLevelCache[$className]; }\n\n    ### Response: Get the constructor argument reflection for the given object type.\n\n@param string $className\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Optional<File> getExistingFile(String relativePath) { return OptionConverters.toJava(env.getExistingFile(relativePath)); }\n\n    ### Response:", "ground_truth": "Retrieves a file relative to the application root path. This method returns an Optional, using\nempty if the file was not found.\n\n@param relativePath relative path of the file to fetch\n@return an existing file", "predict": "Get an existing file given its relative path."}, {"ID": 541, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _prep(e): \"\"\" Normalizes lastupdate to a timestamp, and constructs a URL from the embedded attributes. \"\"\" if 'lastupdate' in e: e['lastupdate'] = datetime.datetime.fromtimestamp(int(e['lastupdate'])) for k in ['farm', 'server', 'id', 'secret']: if not k in e: return e e[\"url\"] = \"https://farm%s.staticflickr.com/%s/%s_%s_b.jpg\" % (e[\"farm\"], e[\"server\"], e[\"id\"], e[\"secret\"]) return e\n\n    ### Response: Normalizes lastupdate to a timestamp, and constructs a URL from the embedded attributes..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <A extends Annotation> Binding<T> in(final Class<A> scope) { return underlying.in(scope).asJava(); }\n\n    ### Response:", "ground_truth": "Configure the scope for this binding.", "predict": "Allows for reflection into fields of objects of type A, to produce objects of type T determined by the underlying binding of objects to fields of objects of type A determined by the scope parameter of the annotation"}, {"ID": 542, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function end() { \\ManiaLive\\Utilities\\Logger::debug('end()'); $this->showTansfertLabel(null, -50); foreach($this->storage->players as $player) { try { $this->connection->sendOpenLink((string) $player->login, '#qjoin='.$this->lobby->backLink, 1); } catch (\\DedicatedApi\\Xmlrpc\\Exception $e) { //do nothing } } $this->connection->cleanGuestList(); $this->match = null; $this->matchId = null; $this->matchMakingService->updateServerCurrentMatchId( null, $this->storage->serverLogin, $this->scriptName, $this->titleIdString ); $this->connection->setForcedTeams(false); $this->sleep(); }\n\n    ### Response: Free the match for the lobby.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <A, B> Tuple<A, B> Tuple(A a, B b) { return new Tuple<A, B>(a, b); }\n\n    ### Response:", "ground_truth": "Constructs a tuple of A,B\n\n@param a The a value\n@param b The b value\n@param  a's type\n@param  b's type\n@return The tuple", "predict": "Create an ordered tuple with values of type A and B given an argument of type (A,B), or returns an empty tuple if arguments are incorrect"}, {"ID": 543, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int[] getInt2DColumnSum(int[][] apsp) { int[] colSum = new int[apsp.length]; int sum; for (int i = 0; i < apsp.length; i++) { sum = 0; for (int j = 0; j < apsp.length; j++) { sum += apsp[i][j]; } colSum[i] = sum; } return colSum; }\n\n    ### Response: Sums up the columns in a 2D int matrix.\n\n@param apsp The 2D int matrix\n@return A 1D matrix containing the column sum of the 2D matrix.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <A, B, C, D, E> Tuple5<A, B, C, D, E> Tuple5(A a, B b, C c, D d, E e) { return new Tuple5<A, B, C, D, E>(a, b, c, d, e); }\n\n    ### Response:", "ground_truth": "Constructs a tuple of A,B,C,D,E\n\n@param a The a value\n@param b The b value\n@param c The c value\n@param d The d value\n@param e The e value\n@param  a's type\n@param  b's type\n@param  c's type\n@param  d's type\n@param  e's type\n@return The tuple", "predict": "Creates and returns a 5-element tuple with values corresponding to arguments of the same names given to the method."}, {"ID": 544, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_next_mangled_name(self): \"\"\" 1. Do not shadow a mangled name from a parent scope if we reference the original name from that scope in this scope or any sub-scope. 2. Do not shadow an original name from a parent scope if it's not mangled and we reference it in this scope or any sub-scope. \"\"\" while True: mangled = next(self.base54) # case 1 ancestor = self._get_scope_with_mangled(mangled) if (ancestor is not None and self.refs.get(ancestor.rev_mangled[mangled]) is ancestor ): continue # case 2 ancestor = self._get_scope_with_symbol(mangled) if (ancestor is not None and self.refs.get(mangled) is ancestor and mangled not in ancestor.mangled ): continue # make sure a new mangled name is not a reserved word if mangled.upper() in Lexer.keywords: continue return mangled\n\n    ### Response: 1. Do not shadow a mangled name from a parent scope\n           if we reference the original name from that scope\n           in this scope or any sub-scope.\n\n        2. Do not shadow an original name from a parent scope\n           if it's not mangled and we reference it in this scope\n           or any sub-scope..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static Executor toExecutor(ExecutionContext ec) { ExecutionContext prepared = ec.prepare(); if (prepared instanceof Executor) { return (Executor) prepared; } else { return prepared::execute; } }\n\n    ### Response:", "ground_truth": "Converts the execution context to an executor, preparing it first.\n\n@param ec the execution context.\n@return the Java Executor.", "predict": "The method generates an executor instance from an execution context instance and uses reflection to cast the returned instance to an executor or prepare and execute the given context respectively to generate an executor instance"}, {"ID": 545, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def to_proto(self): \"\"\"Returns a list of SplitInfo protos that we have.\"\"\" # Return the proto.SplitInfo, sorted by name return sorted((s.get_proto() for s in self.values()), key=lambda s: s.name)\n\n    ### Response: Returns a list of SplitInfo protos that we have..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static JPAConfig of(String name, String unitName) { return new DefaultJPAConfig(new JPAConfig.PersistenceUnit(name, unitName)); }\n\n    ### Response:", "ground_truth": "Create a default JPA configuration with the given name and unit name.\n\n@param name the name for the entity manager factory\n@param unitName the persistence unit name as used in `persistence.xml`\n@return a default JPA configuration", "predict": "The constructor creates an instance of the DefaultJPAConfig and sets its name and unitName attributes to the given values."}, {"ID": 546, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def read_ppdesc(self, filename): \"\"\" Read the pseudopotential descriptor from file filename. Returns: Pseudopotential descriptor. None if filename is not a valid pseudopotential file. Raises: `PseudoParserError` if fileformat is not supported. \"\"\" if filename.endswith(\".xml\"): raise self.Error(\"XML pseudo not supported yet\") else: # Assume file with the abinit header. lines = _read_nlines(filename, 80) for lineno, line in enumerate(lines): if lineno == 2: try: tokens = line.split() pspcod, pspxc = map(int, tokens[:2]) except: msg = \"%s: Cannot parse pspcod, pspxc in line\\n %s\" % (filename, line) logger.critical(msg) return None #if tokens[-1].strip().replace(\" \",\"\") not in [\"pspcod,pspxc,lmax,lloc,mmax,r2well\", # \"pspcod,pspxc,lmax,llocal,mmax,r2well\"]: # raise self.Error(\"%s: Invalid line\\n %s\" % (filename, line)) # return None if pspcod not in self._PSPCODES: raise self.Error(\"%s: Don't know how to handle pspcod %s\\n\" % (filename, pspcod)) ppdesc = self._PSPCODES[pspcod] if pspcod == 7: # PAW -> need to know the format pspfmt tokens = lines[lineno+1].split() pspfmt, creatorID = tokens[:2] #if tokens[-1].strip() != \"pspfmt,creatorID\": # raise self.Error(\"%s: Invalid line\\n %s\" % (filename, line)) # return None ppdesc = ppdesc._replace(format = pspfmt) return ppdesc return None\n\n    ### Response: Read the pseudopotential descriptor from file filename.\n\n        Returns:\n            Pseudopotential descriptor. None if filename is not a valid pseudopotential file.\n\n        Raises:\n            `PseudoParserError` if fileformat is not supported..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static JPAConfig of(String n1, String u1, String n2, String u2) { return new DefaultJPAConfig( new JPAConfig.PersistenceUnit(n1, u1), new JPAConfig.PersistenceUnit(n2, u2)); }\n\n    ### Response:", "ground_truth": "Create a default JPA configuration with the given names and unit names.\n\n@param n1 Name of the first entity manager factory\n@param u1 Name of the first unit\n@param n2 Name of the second entity manager factory\n@param u2 Name of the second unit\n@return a default JPA configuration with the provided persistence units.", "predict": "The constructor of this class creates and initialize an instance of the DefaultJPAConfig and the two given arguments which represent names of the two persistent units to connect to the database and load the objects into."}, {"ID": 547, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function outputUri( $mtime ) { return Thumbnail::THUMBNAIL_BASEURI . '/' . $this->path . '/' . $this->method . '/' . ( empty( $this->crop ) ? '' : $this->cropLeft . 'x' . $this->cropTop . '-' . $this->cropWidth . 'x' . $this->cropHeight . '-' ) . $this->width . 'x' . $this->height . '/' . $this->bgColor . '/' . ( empty( $this->filters ) ? 'none' : implode( '-', (array) $this->filters ) ) . '/' . $mtime . '/' . $this->file; }\n\n    ### Response: Get output uri for settings\n\n@param int $mtime\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static JPAConfig from(Map<String, String> map) { ImmutableSet.Builder<JPAConfig.PersistenceUnit> persistenceUnits = new ImmutableSet.Builder<JPAConfig.PersistenceUnit>(); for (Map.Entry<String, String> entry : map.entrySet()) { persistenceUnits.add(new JPAConfig.PersistenceUnit(entry.getKey(), entry.getValue())); } return new DefaultJPAConfig(persistenceUnits.build()); }\n\n    ### Response:", "ground_truth": "Create a default JPA configuration from a map of names to unit names.\n\n@param map Map of entity manager factory names to unit names\n@return a JPAConfig configured with the provided mapping", "predict": "Get output Uri from Map"}, {"ID": 548, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Map<String, Object> map(Object... objects) { if (objects.length % 2 != 0) { throw new ActivitiIllegalArgumentException(\"The input should always be even since we expect a list of key-value pairs!\"); } Map<String, Object> map = new HashMap<String, Object>(); for (int i = 0; i < objects.length; i += 2) { map.put((String) objects[i], objects[i + 1]); } return map; }\n\n    ### Response: Helper method to easily create a map.\n\nTakes as input a varargs containing the key1, value1, key2, value2, etc. Note: although an Object, we will cast the key to String internally..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Flow<String, ByteString, NotUsed> string(String callbackName) { return Flow.of(String.class) .map( str -> { return ByteString.fromString(\"'\" + StringEscapeUtils.escapeEcmaScript(str) + \"'\"); }) .via(flow(callbackName)); }\n\n    ### Response:", "ground_truth": "Produces a Flow of escaped ByteString from a series of String elements. Calls out to Comet.flow\ninternally.\n\n@param callbackName the javascript callback method.\n@return a flow of ByteString elements.", "predict": "Generates Flow of ByteStrings from given string to callback function"}, {"ID": 549, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function childrenAllowed(Authenticatable $user = null) { return $this->children()->filter(function ($item) use ($user) { return $item->isAllowed($user); }); }\n\n    ### Response: Returns allowed children of the item\n\n@return \\Konekt\\Menu\\ItemCollection.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Flow<JsonNode, ByteString, NotUsed> json(String callbackName) { return Flow.of(JsonNode.class) .map( json -> { return ByteString.fromString(Json.stringify(json)); }) .via(flow(callbackName)); }\n\n    ### Response:", "ground_truth": "Produces a flow of ByteString using `Json.stringify` from a Flow of JsonNode. Calls out to\nComet.flow internally.\n\n@param callbackName the javascript callback method.\n@return a flow of ByteString elements.", "predict": "Stream of JsonNodes encoded in UTF8"}, {"ID": 550, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def to_dict(self): '''Save this configuration data into a dictionary.''' d = {'name': self.name} if self.data: d['data'] = self.data return d\n\n    ### Response: Save this configuration data into a dictionary..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T extends ConstraintValidator<?, ?>> MappedConstraintValidatorFactory addConstraintValidator(Class<T> key, T constraintValidator) { validators.put(key, () -> constraintValidator); return this; }\n\n    ### Response:", "ground_truth": "Adds validator as a singleton.\n\n@param key the constraint validator type\n@param constraintValidator the constraint validator instance\n@param  the type of constraint validator implementation\n@return {@link MappedConstraintValidatorFactory} with the given constraint validator added.", "predict": "Adds specified constraint to specified Map and returns this Factory Object"}, {"ID": 551, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def find_between start_time, end_time feeds = [] channel.feed_list.each do |feed| feed.dates.item_list.each do |item| if item.type_attr == \"standalone\" feed_start_time = Time.parse(item.start.text!) if feed_start_time.between?(start_time, end_time) feeds << { :time => feed_start_time, :feed => feed } end elsif item.type_attr == \"recurrent\" moments = parse_recurrent_date_item(item, end_time, start_time) moments.each do |moment| if moment.between?(start_time, end_time) feeds << { :time => moment, :feed => feed } end end elsif item.type_attr == \"permanent\" start = Time.parse(item.start.text!) unless start > end_time if start > start_time feeds << { :time => start, :feed => feed } else feeds << { :time => start_time, :feed => feed } end end else raise DTD::InvalidValueError, \"the \\\"#{item.type_attr}\\\" is not valid for a date item type attribute\" end end end feeds.sort! { |x, y| x[:time] <=> y[:time] } end\n\n    ### Response: Returns all events starting after the time specified by the first\n parameter and before the time specified by the second parameter,\n which accept regular Time objects.\n\n === Parameters\n\n [start_time] will return only events starting after this moment\n [end_time] will return only events starting before this moment\n\n === Returns\n\n A list of hashes, sorted by event start time, each hash having\n two keys:\n\n [:time] start time of the event\n [:feed] feed describing the event.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private <T extends ConstraintValidator<?, ?>> T newInstance(Class<T> key) { try { return key.getDeclaredConstructor().newInstance(); } catch (InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex) { throw new RuntimeException(ex); } }\n\n    ### Response:", "ground_truth": "need to do so.", "predict": "The method generates an instance of the given constraint\n    validator from its parameterized class."}, {"ID": 552, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function() { var layerEl = this.container && this.container.layer ? this.container.layer.el : document.body; var obj = this.el; var curleft = 0, curtop = 0; if (obj.offsetParent) { do { curleft += obj.offsetLeft; curtop += obj.offsetTop; obj = obj.offsetParent; } while ( !!obj && obj != layerEl); } return [curleft+15,curtop+15]; }\n\n    ### Response: This function is a temporary test. I added the border width while traversing the DOM and\nI calculated the offset to center the wire in the terminal just after its creation\n@method getXY.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Method getMatchingAccessibleMethod( final Class<?> cls, final String methodName, final Class<?>... parameterTypes) { try { final Method method = cls.getMethod(methodName, parameterTypes); MemberUtils.setAccessibleWorkaround(method); return method; } catch (final NoSuchMethodException e) { // NOPMD - Swallow the exception } // search through all methods Method bestMatch = null; final Method[] methods = cls.getMethods(); for (final Method method : methods) { // compare name and parameters if (method.getName().equals(methodName) && MemberUtils.isMatchingMethod(method, parameterTypes)) { // get accessible version of method final Method accessibleMethod = getAccessibleMethod(method); if (accessibleMethod != null && (bestMatch == null || MemberUtils.compareMethodFit(accessibleMethod, bestMatch, parameterTypes) < 0)) { bestMatch = accessibleMethod; } } } if (bestMatch != null) { MemberUtils.setAccessibleWorkaround(bestMatch); } if (bestMatch != null && bestMatch.isVarArgs() && bestMatch.getParameterTypes().length > 0 && parameterTypes.length > 0) { final Class<?>[] methodParameterTypes = bestMatch.getParameterTypes(); final Class<?> methodParameterComponentType = methodParameterTypes[methodParameterTypes.length - 1].getComponentType(); final String methodParameterComponentTypeName = ClassUtils.primitiveToWrapper(methodParameterComponentType).getName(); final String parameterTypeName = parameterTypes[parameterTypes.length - 1].getName(); final String parameterTypeSuperClassName = parameterTypes[parameterTypes.length - 1].getSuperclass().getName(); if (!methodParameterComponentTypeName.equals(parameterTypeName) && !methodParameterComponentTypeName.equals(parameterTypeSuperClassName)) { return null; } } return bestMatch; }\n\n    ### Response:", "ground_truth": "Finds an accessible method that matches the given name and has compatible parameters.\nCompatible parameters mean that every method parameter is assignable from the given parameters.\nIn other words, it finds a method with the given name that will take the parameters given.\n\nThis method can match primitive parameter by passing in wrapper classes. For example, a\n{@code Boolean} will match a primitive {@code boolean} parameter.\n\n@param cls find method in this class\n@param methodName find method with this name\n@param parameterTypes find method with most compatible parameters\n@return The accessible method", "predict": "The function given above makes use of the MemberUtils class to retrieve the accessible and parameterized version of the given method from the given class. The given class may or may not have the given method but the function makes sure to retrieve it from the given class regardless of its existence. The given function makes sure to compare parameter names and parameterized arguments of the given method to retrieve the best matching method and makes sure to retrieve the parameterized version of the method to ensure proper parameter values are given to the method for proper functionality of the method to be tested."}, {"ID": 553, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(options) { var gl = this.gl; //If no options is provided... this method does nothing. if (!options) return; // width, height, format, dataType, data, genMipmaps //If 'src' is provided, try to load the image from a path... if (options.src && typeof options.src===\"string\") { var img = new Image(); var path = options.src; var crossOrigin = options.crossOrigin; var successCB = typeof options.onLoad === \"function\" ? options.onLoad : null; var failCB = typeof options.onError === \"function\" ? options.onError : null; var genMipmaps = options.genMipmaps; var self = this; //If you try to render a texture that is not yet \"renderable\" (i.e. the //async load hasn't completed yet, which is always the case in Chrome since requestAnimationFrame //fires before img.onload), WebGL will throw us errors. So instead we will just upload some //dummy data until the texture load is complete. Users can disable this with the global flag. if (Texture.USE_DUMMY_1x1_DATA) { self.uploadData(1, 1); this.width = this.height = 0; } img.crossOrigin = crossOrigin; img.onload = function(ev) { self.uploadImage(img, undefined, undefined, genMipmaps); if (typeof successCB === \"function\") successCB.call(self, ev, self); } img.onerror = function(ev) { if (genMipmaps) //we still need to gen mipmaps on the 1x1 dummy gl.generateMipmap(gl.TEXTURE_2D); if (typeof failCB === \"function\") failCB.call(self, ev, self); } img.onabort = function(ev) { if (genMipmaps) gl.generateMipmap(gl.TEXTURE_2D); if (typeof failCB === \"function\") failCB.call(self, ev, self); } img.src = path; } //otherwise see if we have an 'image' specified else if (options.image) { this.uploadImage(options.image, options.format, options.dataType, options.data, options.genMipmaps); } //otherwise assume our regular list of width/height arguments are passed else { this.uploadData(options.width, options.height, options.format, options.dataType, options.data, options.genMipmaps); } }\n\n    ### Response: This can be called after creating a Texture to load an Image object asynchronously,\nor upload image data directly. It takes the same options as the constructor.\n\nUsers will generally not need to call this directly.\n\n@protected\n@method  setup.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public CompletionStage<Result> onClientError( RequestHeader request, int statusCode, String message) { if (statusCode == 400) { return onBadRequest(request, message); } else if (statusCode == 403) { return onForbidden(request, message); } else if (statusCode == 404) { return onNotFound(request, message); } else if (statusCode >= 400 && statusCode < 500) { return onOtherClientError(request, statusCode, message); } else { throw new IllegalArgumentException( \"onClientError invoked with non client error status code \" + statusCode + \": \" + message); } }\n\n    ### Response:", "ground_truth": "Invoked when a client error occurs, that is, an error in the 4xx series.\n\nThe base implementation calls onBadRequest, onForbidden, onNotFound, or onOtherClientError\ndepending on the HTTP status code.\n\n@param request The request that caused the client error.\n@param statusCode The error status code. Must be greater or equal to 400, and less than 500.\n@param message The error message.\n@return a CompletionStage containing the Result.", "predict": "The onClientError method handles the various HTTP codes returned by the server indicating an error occurred in the request lifecycle. It delegates the error handling to sub-methods for particular HTTP codes to determine the appropriate error page to display to the client."}, {"ID": 554, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function checkPermission($role, $context) { if (!is_string($role)) { throw new \\TypeError('The role parameter must be a string.'); } if (!$role) { throw new \\InvalidArgumentException('The role parameter cannot be empty.'); } if (!is_array($context)) { throw new \\TypeError('The context parameter must be an array.'); } if (!isset($context['user'])) { throw new \\InvalidArgumentException(sprintf('The context parameter must contain a \"user\" key to be able to evaluate the %s flag.', $this->getName())); } $user = $context['user']; if (is_string($user)) { //Anonymous user return false; } if (!($user instanceof SecurityUserInterface)) { throw new \\InvalidArgumentException('The user class must implement Symfony\\Component\\Security\\Core\\User\\UserInterface to be able to evaluate the user role.'); } $roles = $user->getRoles(); // Use Symfony Security Role class to make roles compatible with RoleHierarchy::getReachableRoles(). foreach ($roles as $i => $thisRole) { if (is_string($thisRole)) { $roles[$i] = new SecurityRole($thisRole); } elseif (!($thisRole instanceof SecurityRole)) { throw new \\InvalidArgumentException('One of the roles of this user is neither a string nor an instance of Symfony\\Component\\Security\\Core\\Role\\Role.'); } } $roles = $this->roleHierarchy->getReachableRoles($roles); foreach ($roles as $thisRole) { $strRole = (string) $thisRole->getRole(); if ($role === $strRole) { return true; } } return false; }\n\n    ### Response: Checks if a role is present on a user in a given context\n\n@param string $role    The name of the role to evaluate\n@param array  $context The context for evaluating the role. The context must contain a 'user' key which references either a user string (to signify an anonymous user) or an object implementing Symfony\\Component\\Security\\Core\\User\\UserInterface. You can get the current user by calling getCurrentUser() from the service 'logauth.service.helper'.\n\n@return bool TRUE if the role is present on the user or FALSE if it is not present.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected CompletionStage<Result> onBadRequest(RequestHeader request, String message) { return CompletableFuture.completedFuture( Results.badRequest( views.html.defaultpages.badRequest.render( request.method(), request.uri(), message, request.asScala()))); }\n\n    ### Response:", "ground_truth": "Invoked when a client makes a bad request.\n\nReturns Results.badRequest (400) with the included template from {@code\nviews.html.defaultpages.badRequest} as the content.\n\n@param request The request that was bad.\n@param message The error message.\n@return a CompletionStage containing the Result.", "predict": "OnBadRequest handles bad request situations and returns an appropriate Result"}, {"ID": 555, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getReference($repository, $attr, $key = 'id') { if (isset($this->$attr)) { return ($repository->find($key, $this->$attr) ?: null); } return null; }\n\n    ### Response: Retrieve a reference by foreign key.\n\n@param RepositoryInterface   $repository Repository to query.\n@param string                $attr       Name of foreign key attribute.\n@param string                $key        Name of primary key attribute in referenced table.\n\n@return mixed                            Model instance if found, null otherwise..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected CompletionStage<Result> onForbidden(RequestHeader request, String message) { return CompletableFuture.completedFuture( Results.forbidden(views.html.defaultpages.unauthorized.render(request.asScala()))); }\n\n    ### Response:", "ground_truth": "Invoked when a client makes a request that was forbidden.\n\nReturns Results.forbidden (401) with the included template from {@code\nviews.html.defaultpages.unauthorized} as the content.\n\n@param request The forbidden request.\n@param message The error message.\n@return a CompletionStage containing the Result.", "predict": "On Forbidden completes the Result success and render the Forbidden page."}, {"ID": 556, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function normalizeHeaderName($header) { if (strpos($header, 'HTTP_') === 0) { $header = str_replace('_', '-', substr($header, 5)); } return strtolower($header); }\n\n    ### Response: Normalizes HTTP header name representations.\n\nHTTP_MY_HEADER and My-Header would be transformed to my-header.\n\n@param string $header The original header name.\n@return string The normalized header name..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected CompletionStage<Result> onNotFound(RequestHeader request, String message) { if (environment.isProd()) { return CompletableFuture.completedFuture( Results.notFound( views.html.defaultpages.notFound.render( request.method(), request.uri(), request.asScala()))); } else { return CompletableFuture.completedFuture( Results.notFound( views.html.defaultpages.devNotFound.render( request.method(), request.uri(), Some.apply(routes.get()), request.asScala()))); } }\n\n    ### Response:", "ground_truth": "Invoked when a handler or resource is not found.\n\nIf the environment's mode is production, then returns Results.notFound (404) with the\nincluded template from `views.html.defaultpages.notFound` as the content.\n\nOtherwise, Results.notFound (404) is rendered with {@code\nviews.html.defaultpages.devNotFound} template.\n\n@param request The request that no handler was found to handle.\n@param message A message, which is not used by the default implementation.\n@return a CompletionStage containing the Result.", "predict": "OnNotFound handles the case of a HTTP method and URI corresponding to the resource being accessed, but no corresponding resource could be found in the given server. It may produce a HTTP 404 response for the given method and URI or may produce a custom error page for the given method and URI."}, {"ID": 557, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getEditRoute(Request $req, Response $res) { $route = new EditModelRoute($req, $res); $route->setApp($this->app) ->setSerializer($this->getSerializer($req)); return $route; }\n\n    ### Response: Builds an edit route object.\n\n@param Request  $req\n@param Response $res\n\n@return EditModelRoute.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public CompletionStage<Result> onServerError(RequestHeader request, Throwable exception) { try { UsefulException usefulException = throwableToUsefulException(exception); logServerError(request, usefulException); switch (environment.mode()) { case PROD: return onProdServerError(request, usefulException); default: return onDevServerError(request, usefulException); } } catch (Exception e) { logger.error(\"Error while handling error\", e); return CompletableFuture.completedFuture(Results.internalServerError()); } }\n\n    ### Response:", "ground_truth": "Invoked when a server error occurs.\n\nBy default, the implementation of this method delegates to [[onProdServerError()]] when in\nprod mode, and [[onDevServerError()]] in dev mode. It is recommended, if you want Play's debug\ninfo on the error page in dev mode, that you override [[onProdServerError()]] instead of this\nmethod.\n\n@param request The request that triggered the server error.\n@param exception The server error.\n@return a CompletionStage containing the Result.", "predict": "On error, handles the error according to environment setting."}, {"ID": 558, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function parseTime($timeSpan) { $times = array('s' => 1, 'm' => 60, 'h' => 3600, 'd' => 86400, 'w' => 604800); $matches = array(); if (is_numeric($timeSpan)) { return $timeSpan; } if (preg_match('/^((\\d+)?(\\.\\d+)?)('.implode('|', array_keys($times)).')$/', $timeSpan, $matches)) { return floatval($matches[1]) * $times[$matches[4]]; } return null; }\n\n    ### Response: Parses a timespan string such as \"10s\", \"5m\" or \"1h\" and returns the amount of seconds.\n@param string $timeSpan the time span to parse to seconds\n@return float|null the number of seconds or null, if $timeSpan couldn't be parsed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void logServerError(RequestHeader request, UsefulException usefulException) { logger.error( String.format( \"\\n\\n! @%s - Internal server error, for (%s) [%s] ->\\n\", usefulException.id, request.method(), request.uri()), usefulException); }\n\n    ### Response:", "ground_truth": "Responsible for logging server errors.\n\nThe base implementation uses a SLF4J Logger. If a special annotation is desired for internal\nserver errors, you may want to use SLF4J directly with the Marker API to distinguish server\nerrors from application errors.\n\nThis can also be overridden to add additional logging information, eg. the id of the\nauthenticated user.\n\n@param request The request that triggered the server error.\n@param usefulException The server error.", "predict": "Logs an error message when an exception occurred during server operation."}, {"ID": 559, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function optimize(svg) { const svgo = new Svgo({ plugins: [ { convertShapeToPath: false }, { mergePaths: false }, { removeAttrs: { attrs: '(fill|stroke.*)' } }, { removeTitle: true }, ], }); return new Promise(resolve => { svgo.optimize(svg, ({ data }) => resolve(data)); }); }\n\n    ### Response: Optimize SVG with `svgo`.\n@param {string} svg - An SVG string.\n@returns {Promise}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected final UsefulException throwableToUsefulException(final Throwable throwable) { return HttpErrorHandlerExceptions.throwableToUsefulException( sourceMapper.sourceMapper(), environment.isProd(), throwable); }\n\n    ### Response:", "ground_truth": "Convert the given exception to an exception that Play can report more information about.\n\nThis will generate an id for the exception, and in dev mode, will load the source code for\nthe code that threw the exception, making it possible to report on the location that the\nexception was thrown from.", "predict": "Map exception objects into useful exceptions to aid in error handling."}, {"ID": 560, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function createEvent (type, data) { let event = document.createEvent(specialEvents[type] || 'Event') event.initEvent(type, true, true) data && (event.data = data) return event }\n\n    ### Response: Create a event object to dispatch\n\n@param {string} type Event name\n@param {?Object} data Custom data\n@return {Event}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected CompletionStage<Result> onDevServerError( RequestHeader request, UsefulException exception) { return CompletableFuture.completedFuture( Results.internalServerError( views.html.defaultpages.devError.render(playEditor, exception, request.asScala()))); }\n\n    ### Response:", "ground_truth": "Invoked in dev mode when a server error occurs. Note that this method is where the URL set by\nplay.editor is used.\n\nThe base implementation returns {@code Results.internalServerError} with the content of\n{@code views.html.defaultpages.devError}.\n\n@param request The request that triggered the error.\n@param exception The exception.\n@return a CompletionStage containing the Result.", "predict": "On error, render default error page"}, {"ID": 561, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def envrcpt(self, rcpt, *params): \"\"\" Send all recipients to DSPAM. \"\"\" if rcpt.startswith('<'): rcpt = rcpt[1:] if rcpt.endswith('>'): rcpt = rcpt[:-1] if self.recipient_delimiter_re: rcpt = self.recipient_delimiter_re.sub('', rcpt) if rcpt not in self.recipients: self.recipients.append(rcpt) logger.debug('<{}> Received RCPT {}'.format(self.id, rcpt)) return Milter.CONTINUE\n\n    ### Response: Send all recipients to DSPAM..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected CompletionStage<Result> onProdServerError( RequestHeader request, UsefulException exception) { return CompletableFuture.completedFuture( Results.internalServerError( views.html.defaultpages.error.render(exception, request.asScala()))); }\n\n    ### Response:", "ground_truth": "Invoked in prod mode when a server error occurs.\n\nThe base implementation returns {@code Results.internalServerError} with the content of\n{@code views.html.defaultpages.error} template.\n\nOverride this rather than [[onServerError()]] if you don't want to change Play's debug\noutput when logging errors in dev mode.\n\n@param request The request that triggered the error.\n@param exception The exception.\n@return a CompletionStage containing the Result.", "predict": "On ProdServerError, render internal server error page."}, {"ID": 562, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function HKP(keyServerBaseUrl) { this._baseUrl = keyServerBaseUrl || config.keyserver; this._fetch = typeof window !== 'undefined' ? window.fetch : require('node-fetch'); }\n\n    ### Response: Initialize the HKP client and configure it with the key server url and fetch function.\n@constructor\n@param {String}    keyServerBaseUrl  (optional) The HKP key server base url including\nthe protocol to use, e.g. 'https://pgp.mit.edu'; defaults to\nopenpgp.config.keyserver (https://keyserver.ubuntu.com).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static BuildDocHandler fromResources(File[] files, String[] baseDirs) throws IOException { assert (files.length == baseDirs.length); FileRepository[] repositories = new FileRepository[files.length]; List<JarFile> jarFiles = new ArrayList<>(); for (int i = 0; i < files.length; i++) { File file = files[i]; String baseDir = baseDirs[i]; if (file.isDirectory()) { repositories[i] = new FilesystemRepository(file); } else { // Assume it's a jar file JarFile jarFile = new JarFile(file); jarFiles.add(jarFile); repositories[i] = new JarRepository(jarFile, Option.apply(baseDir)); } } return new DocumentationHandler( new AggregateFileRepository(repositories), () -> { for (JarFile jarFile : jarFiles) { jarFile.close(); } }); }\n\n    ### Response:", "ground_truth": "Create a BuildDocHandler that serves documentation from the given files, which could either be\ndirectories or jar files. The baseDir array must be the same length as the files array, and the\ncorresponding entry in there for jar files is used as a base directory to use resources from in\nthe jar.\n\n@param files The directories or jar files to serve documentation from.\n@param baseDirs The base directories for the jar files. Entries may be null.\n@return a BuildDocHandler.", "predict": "Creates and returns an instance of `BuildDocHandler` given an array of JAR and directory locations of build resources to document and an array of strings of locations of base directories of the resources to aggregate into the document"}, {"ID": 563, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String task2compName(String old) { String[] parts = old.split(DELIM); if (parts.length >= 7) { parts[0] = MetaType.COMPONENT.getV() + parts[0].charAt(1); parts[parts.length - 3] = EMPTY; parts[parts.length - 4] = \"0\"; } return concat(parts); }\n\n    ### Response: make taskId=0 and streamId empty..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static BuildDocHandler fromDirectory(File directory) { FileRepository repo = new FilesystemRepository(directory); return new DocumentationHandler(repo); }\n\n    ### Response:", "ground_truth": "Create an BuildDocHandler that serves documentation from a given directory by wrapping a\nFilesystemRepository.\n\n@param directory The directory to serve the documentation from.", "predict": "reads documentation from given directory"}, {"ID": 564, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getRouteParam($key) { if (!isset($this->routeParams[$key])) { return false; } return $this->routeParams[$key]; }\n\n    ### Response: Returns the route param for the given index.\n\n@access public\n@param integer|string $key\n@return false|mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static BuildDocHandler fromDirectoryAndJar(File directory, JarFile jarFile, String base) { return fromDirectoryAndJar(directory, jarFile, base, false); }\n\n    ### Response:", "ground_truth": "Create an BuildDocHandler that serves the manual from a given directory by wrapping a\nFilesystemRepository, and the API docs from a given JAR file by wrapping a JarRepository\n\n@param directory The directory to serve the documentation from.\n@param jarFile The JAR file to server the documentation from.\n@param base The directory within the JAR file to serve the documentation from, or null if the\ndocumentation should be served from the root of the JAR.", "predict": "Creates and returns an instance of BuildDocHandler from the given directory and jar file."}, {"ID": 565, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def open_in_composer(self): \"\"\"Open in layout designer a given MapReport instance. .. versionadded: 4.3.0 \"\"\" impact_layer = self.impact_function.analysis_impacted report_path = dirname(impact_layer.source()) impact_report = self.impact_function.impact_report custom_map_report_metadata = impact_report.metadata custom_map_report_product = ( custom_map_report_metadata.component_by_tags( [final_product_tag, pdf_product_tag])) for template_path in self.retrieve_paths( custom_map_report_product, report_path=report_path, suffix='.qpt'): layout = QgsPrintLayout(QgsProject.instance()) with open(template_path) as template_file: template_content = template_file.read() document = QtXml.QDomDocument() document.setContent(template_content) # load layout object rwcontext = QgsReadWriteContext() load_status = layout.loadFromTemplate(document, rwcontext) if not load_status: # noinspection PyCallByClass,PyTypeChecker QtWidgets.QMessageBox.warning( self, tr('InaSAFE'), tr('Error loading template: %s') % template_path) return QgsProject.instance().layoutManager().addLayout(layout) self.iface.openLayoutDesigner(layout)\n\n    ### Response: Open in layout designer a given MapReport instance.\n\n        .. versionadded: 4.3.0.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static BuildDocHandler fromDirectoryAndJar( File directory, JarFile jarFile, String base, boolean fallbackToJar) { FileRepository fileRepo = new FilesystemRepository(directory); FileRepository jarRepo = new JarRepository(jarFile, Option.apply(base)); FileRepository manualRepo; if (fallbackToJar) { manualRepo = new AggregateFileRepository(new FileRepository[] {fileRepo, jarRepo}); } else { manualRepo = fileRepo; } return new DocumentationHandler(manualRepo, jarRepo); }\n\n    ### Response:", "ground_truth": "Create an BuildDocHandler that serves the manual from a given directory by wrapping a\nFilesystemRepository, and the API docs from a given JAR file by wrapping a JarRepository.\n\n@param directory The directory to serve the documentation from.\n@param jarFile The JAR file to server the documentation from.\n@param base The directory within the JAR file to serve the documentation from, or null if the\ndocumentation should be served from the root of the JAR.\n@param fallbackToJar Whether the doc handler should fall back to the jar repo for docs.", "predict": "The function reads documentation objects from a given directory and jar file and presents them in an organized fashion to the caller."}, {"ID": 566, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function isValidRename($source, $dest) { $adapter = $this->filesystem->getAdapter(); if ( ! $adapter->has($source)) { throw new FileNotFoundException($source); } $subdir = Util::dirname($dest); if (strlen($subdir) && ! $adapter->has($subdir)) { throw new FileNotFoundException($source); } if ( ! $adapter->has($dest)) { return true; } return $this->compareTypes($source, $dest); }\n\n    ### Response: Checks that a rename is valid.\n\n@param string $source\n@param string $dest\n\n@return bool\n\n@throws \\League\\Flysystem\\FileNotFoundException\n@throws \\Twistor\\Flysystem\\Exception\\DirectoryExistsException\n@throws \\Twistor\\Flysystem\\Exception\\DirectoryNotEmptyException\n@throws \\Twistor\\Flysystem\\Exception\\NotADirectoryException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static BuildDocHandler fromJar(JarFile jarFile, String base) { FileRepository repo = new JarRepository(jarFile, Option.apply(base)); return new DocumentationHandler(repo); }\n\n    ### Response:", "ground_truth": "Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a\nJarRepository.\n\n@param jarFile The JAR file to server the documentation from.\n@param base The directory within the JAR file to serve the documentation from, or null if the\ndocumentation should be served from the root of the JAR.", "predict": "The function generates documentation objects from jar archives."}, {"ID": 567, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean copyFilesFromDirectoryToDirectory(File origDir, File destDir) { if (!origDir.exists()) { return false; } if (!destDir.exists()) { destDir.mkdirs(); } File array[]=origDir.listFiles(); if ( array!= null) { for (File file : array) { File destFile = new File(destDir, file.getName()); if (file.isDirectory()) { copyFilesFromDirectoryToDirectory(file, destFile); } else { if (!copyFile(file, destFile)) { return false; } } } } else { return false; } return true; }\n\n    ### Response: Copya los directorios y ficheros de la carpeta origen hasta la carpeta\ndestino. En el path de destino crea los directorios que sean necesarios.\n\n@param origDir\ndirectorio origen\n@param destDir\ndirectorio final\n@return true si va bien, false si falla.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public CompletionStage<ByteString> consumeData(Materializer mat) { return dataStream().runFold(ByteString.empty(), ByteString::concat, mat); }\n\n    ### Response:", "ground_truth": "Consumes the data.\n\nThis method should be used carefully, since if the source represents an ephemeral stream,\nthen the entity may not be usable after this method is invoked.\n\n@param mat the application's materializer.\n@return a CompletionStage holding the data", "predict": "Comprobe los datos proporcionados desde el Stream de materialeando su concatenaci\u00f3n hasta completarse."}, {"ID": 568, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setCoreCompressJsMaxFiles($value) { $this->setFieldName('compress_js_max_files'); $this->loadObject(true); $this->setFieldValue($value); return $this; }\n\n    ### Response: Maximum JavaScript Files Compression Threshold ~\nThe maximum number of JavaScript files MODX will attempt to compress at once when compress_js is on. Set to a lower number if you are experiencing issues with Google Minify in the manager.\n\n@param string $value\n\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static final HttpEntity fromContent(Content content, String charset) { String body; if (content instanceof Xml) { // See https://github.com/playframework/playframework/issues/2770 body = content.body().trim(); } else { body = content.body(); } return new Strict( ByteString.fromString(body, charset), Optional.of(content.contentType() + \"; charset=\" + charset)); }\n\n    ### Response:", "ground_truth": "Create an entity from the given content.\n\n@param content The content.\n@param charset The charset.\n@return the HTTP entity.", "predict": "Composes an HTTP Entity from given Content and its ContentType."}, {"ID": 569, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (cs *MockChannelService) Transactor(reqCtx reqContext.Context) (fab.Transactor, error) { if cs.transactor != nil { return cs.transactor, nil } return &MockTransactor{ChannelID: cs.channelID, Ctx: reqCtx}, nil }\n\n    ### Response: // Transactor returns a mock transactor.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static final HttpEntity fromString(String content, String charset) { return new Strict( ByteString.fromString(content, charset), Optional.of(\"text/plain; charset=\" + charset)); }\n\n    ### Response:", "ground_truth": "Create an entity from the given String.\n\n@param content The content.\n@param charset The charset.\n@return the HTTP entity.", "predict": "// This method generates an HTTP Entity from a given string with specified charset."}, {"ID": 570, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private final boolean classNeedsTransform(String className) { final boolean isTraceOn = TraceComponent.isAnyTracingEnabled(); if (isTraceOn && tc.isEntryEnabled()) { Tr.entry(tc, \"classNeedsTransform : PUID = \" + ivArchivePuId + \", class name = \" + className); //d454146 } boolean rtnVal = true; for (Pattern regex : transformExclusionPatterns) { if (regex.matcher(className).matches()) { rtnVal = false; break; } } if (isTraceOn && tc.isEntryEnabled()) Tr.exit(tc, \"classNeedsTransform : \" + className + (rtnVal ? \" needs\" : \" does not need\") + \" transform.\"); return rtnVal; }\n\n    ### Response: Determine if the input class needs persistence provider class transformation using\na pre-defined regular expression filter..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static final HttpEntity chunked(Source<ByteString, ?> data, Optional<String> contentType) { return new Chunked(data.map(HttpChunk.Chunk::new), contentType); }\n\n    ### Response:", "ground_truth": "Convert the given source of ByteStrings to a chunked entity.\n\n@param data The source.\n@param contentType The optional content type.\n@return The ByteStrings.", "predict": "Generates HTTP Chunked Transfer Encoding entities given a source of bytes and any custom content type given."}, {"ID": 571, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function recordEnquiry(string $email, string $name, string $subject, string $message, callable $sendMailToAdminCallback) : ContactEnquiry { $enquiry = new ContactEnquiry( $this->clock, new EmailAddress($email), $name, $subject, $message ); $this->repository->save($enquiry); $sendMailToAdminCallback($enquiry); return $enquiry; }\n\n    ### Response: Records a contact enquiry.\n\n@param string   $email\n@param string   $name\n@param string   $subject\n@param string   $message\n@param callable $sendMailToAdminCallback\n\n@return ContactEnquiry.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Result status(int status, JsonNode content) { return status(status, content, JsonEncoding.UTF8); }\n\n    ### Response:", "ground_truth": "Generates a simple result with json content and UTF8 encoding.\n\n@param status the HTTP status for this result e.g. 200 (OK), 404 (NOT_FOUND)\n@param content the result's body content as a play-json object\n@return the result", "predict": "Returns status information given the status code and corresponding json content."}, {"ID": 572, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean hasData(Class<?> dataClass) { if (dataClass == null) { return false; } return dataClass.isPrimitive() ? hasData() : dataClass.isInstance(data); }\n\n    ### Response: Boolean method telling message contains data of given type or not.\n\n@param dataClass data class\n@return true if message has not null data of given type.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Result status(int status, JsonNode content, JsonEncoding encoding) { if (content == null) { throw new NullPointerException(\"Null content\"); } return status(status).sendJson(content, encoding); }\n\n    ### Response:", "ground_truth": "Generates a simple result with json content.\n\n@param status the HTTP status for this result e.g. 200 (OK), 404 (NOT_FOUND)\n@param content the result's body content, as a play-json object\n@param encoding the encoding into which the json should be encoded\n@return the result", "predict": "Status message method sending given status and node and encoding."}, {"ID": 573, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setPigJob($var) { GPBUtil::checkMessage($var, \\Google\\Cloud\\Dataproc\\V1\\PigJob::class); $this->writeOneof(7, $var); return $this; }\n\n    ### Response: Job is a Pig job.\n\nGenerated from protobuf field .google.cloud.dataproc.v1.PigJob pig_job = 7;\n@param \\Google\\Cloud\\Dataproc\\V1\\PigJob $var\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Result status(int status, byte[] content) { if (content == null) { throw new NullPointerException(\"Null content\"); } return new Result( status, new HttpEntity.Strict(ByteString.fromArray(content), Optional.empty())); }\n\n    ### Response:", "ground_truth": "Generates a simple result with byte-array content.\n\n@param status the HTTP status for this result e.g. 200 (OK), 404 (NOT_FOUND)\n@param content the result's body content, as a byte array\n@return the result", "predict": "Status indicates the result of the submitted workload. If the status code indicates success, the workload is considered complete and the Result object contains information such as allocation IDs, Bigtable table names, Bigtable row keys and row IDs of the submitted workload. If the status code indicates failure, the Result object contains error details such as error message, correlation ID, and the reason for failure."}, {"ID": 574, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void foundActiveSecondary(Protocol newSecondaryProtocol) throws SQLException { if (isSecondaryHostFail()) { if (isExplicitClosed()) { newSecondaryProtocol.close(); return; } if (proxy.lock.tryLock()) { try { lockAndSwitchSecondary(newSecondaryProtocol); } finally { proxy.lock.unlock(); } } else { if (!waitNewSecondaryProtocol.compareAndSet(null, newSecondaryProtocol)) { newSecondaryProtocol.close(); } } } else { newSecondaryProtocol.close(); } }\n\n    ### Response: Method called when a new secondary connection is found after a fallback.\n\n@param newSecondaryProtocol the new active connection\n@throws SQLException if switch failed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Result status(int status, InputStream content, long contentLength) { return status(status).sendInputStream(content, contentLength); }\n\n    ### Response:", "ground_truth": "Generates a chunked result.\n\n@param status the HTTP status for this result e.g. 200 (OK), 404 (NOT_FOUND)\n@param content the input stream containing data to chunk over\n@param contentLength the length of the provided content in bytes.\n@return the result", "predict": "Generates and sends feedback indicating the given status and length of the given input stream."}, {"ID": 575, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _parse_raw_bytes(raw_bytes): \"\"\"Convert a string of hexadecimal values to decimal values parameters Example: '0x2E 0xF1 0x80 0x28 0x00 0x1A 0x01 0x00' is converted to: 46, 241, [128, 40, 0, 26, 1, 0] :param raw_bytes: string of hexadecimal values :returns: 3 decimal values \"\"\" bytes_list = [int(x, base=16) for x in raw_bytes.split()] return bytes_list[0], bytes_list[1], bytes_list[2:]\n\n    ### Response: Convert a string of hexadecimal values to decimal values parameters\n\n    Example: '0x2E 0xF1 0x80 0x28 0x00 0x1A 0x01 0x00' is converted to:\n              46, 241, [128, 40, 0, 26, 1, 0]\n\n    :param raw_bytes: string of hexadecimal values\n    :returns: 3 decimal values.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Result status(int status, File content) { return status(status, content, StaticFileMimeTypes.fileMimeTypes()); }\n\n    ### Response:", "ground_truth": "Generates a result with file contents.\n\n@param status the HTTP status for this result e.g. 200 (OK), 404 (NOT_FOUND)\n@param content the file to send\n@return the result", "predict": "\n    Status function to translate status code and file into appropriate HTTP status code and response body. The status code and corresponding HTTP status code are provided in the first parameter, while any additional parameters may be provided in subsequent arguments to customize the behavior of the function for given situations. The status code and corresponding HTTP status code must be in the same order in this function as in Status code. The default behavior of this function assumes that status code 404 indicates file not found, status code 500 indicates internal error, status code 200 indicates success and status code 201 indicates created."}, {"ID": 576, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func generateOSElement(p domainParams) OS { switch p.Arch() { case arch.ARM64: return OS{ Type: OSType{ Arch: \"aarch64\", Machine: \"virt\", Text: \"hvm\", }, Loader: &NVRAMCode{ Text: p.Loader(), ReadOnly: \"yes\", Type: \"pflash\", }, } default: return OS{Type: OSType{Text: \"hvm\"}} } }\n\n    ### Response: // generateOSElement creates the architecture appropriate element details..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private User findById(Long id) { if (id > 3) return null; User user = new User(); user.id = id; user.name = \"User \" + String.valueOf(id); return user; }\n\n    ### Response:", "ground_truth": "designed to be lightweight operation", "predict": "// This method returns an appropriate User Element given its corresponding id."}, {"ID": 577, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static function prepare_cookies() { global $CFG; $cookiesecure = is_moodle_cookie_secure(); if (!isset($CFG->cookiehttponly)) { $CFG->cookiehttponly = 0; } // Set sessioncookie variable if it isn't already. if (!isset($CFG->sessioncookie)) { $CFG->sessioncookie = ''; } $sessionname = 'MoodleSession'.$CFG->sessioncookie; // Make sure cookie domain makes sense for this wwwroot. if (!isset($CFG->sessioncookiedomain)) { $CFG->sessioncookiedomain = ''; } else if ($CFG->sessioncookiedomain !== '') { $host = parse_url($CFG->wwwroot, PHP_URL_HOST); if ($CFG->sessioncookiedomain !== $host) { if (substr($CFG->sessioncookiedomain, 0, 1) === '.') { if (!preg_match('|^.*'.preg_quote($CFG->sessioncookiedomain, '|').'$|', $host)) { // Invalid domain - it must be end part of host. $CFG->sessioncookiedomain = ''; } } else { if (!preg_match('|^.*\\.'.preg_quote($CFG->sessioncookiedomain, '|').'$|', $host)) { // Invalid domain - it must be end part of host. $CFG->sessioncookiedomain = ''; } } } } // Make sure the cookiepath is valid for this wwwroot or autodetect if not specified. if (!isset($CFG->sessioncookiepath)) { $CFG->sessioncookiepath = ''; } if ($CFG->sessioncookiepath !== '/') { $path = parse_url($CFG->wwwroot, PHP_URL_PATH).'/'; if ($CFG->sessioncookiepath === '') { $CFG->sessioncookiepath = $path; } else { if (strpos($path, $CFG->sessioncookiepath) !== 0 or substr($CFG->sessioncookiepath, -1) !== '/') { $CFG->sessioncookiepath = $path; } } } // Discard session ID from POST, GET and globals to tighten security, // this is session fixation prevention. unset($GLOBALS[$sessionname]); unset($_GET[$sessionname]); unset($_POST[$sessionname]); unset($_REQUEST[$sessionname]); // Compatibility hack for non-browser access to our web interface. if (!empty($_COOKIE[$sessionname]) && $_COOKIE[$sessionname] == \"deleted\") { unset($_COOKIE[$sessionname]); } // Set configuration. session_name($sessionname); session_set_cookie_params(0, $CFG->sessioncookiepath, $CFG->sessioncookiedomain, $cookiesecure, $CFG->cookiehttponly); ini_set('session.use_trans_sid', '0'); ini_set('session.use_only_cookies', '1'); ini_set('session.hash_function', '0'); // For now MD5 - we do not have room for sha-1 in sessions table. ini_set('session.use_strict_mode', '0'); // We have custom protection in session init. ini_set('session.serialize_handler', 'php'); // We can move to 'php_serialize' after we require PHP 5.5.4 form Moodle. // Moodle does normal session timeouts, this is for leftovers only. ini_set('session.gc_probability', 1); ini_set('session.gc_divisor', 1000); ini_set('session.gc_maxlifetime', 60*60*24*4); }\n\n    ### Response: Make sure all cookie and session related stuff is configured properly before session start..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Lang preferred(Collection<Lang> candidates) { return new Lang( langs.preferred((scala.collection.immutable.Seq) Scala.asScala(candidates).toSeq())); }\n\n    ### Response:", "ground_truth": "Select a preferred language, given the list of candidates.\n\nWill select the preferred language, based on what languages are available, or return the\ndefault language if none of the candidates are available.\n\n@param candidates The candidate languages\n@return The preferred language", "predict": "Preferred function to retrieve the preferred language given a set of candidates to choose from"}, {"ID": 578, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (cc *CachingConnector) DialContext(ctx context.Context, target string, opts ...grpc.DialOption) (*grpc.ClientConn, error) { logger.Debugf(\"DialContext: %s\", target) cc.lock.Lock() c, ok := cc.loadConn(target) if !ok { createdConn, err := cc.createConn(ctx, target, opts...) if err != nil { cc.lock.Unlock() return nil, errors.WithMessage(err, \"connection creation failed\") } c = createdConn } cc.lock.Unlock() if err := cc.openConn(ctx, c); err != nil { cc.lock.Lock() setClosed(c) cc.lock.Unlock() return nil, errors.Errorf(\"dialing connection timed out [%s]\", target) } return c.conn, nil }\n\n    ### Response: // DialContext is a wrapper for grpc.DialContext where connections are cached..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Call unique() { return new play.api.mvc.Call(method(), this.uniquify(this.url()), fragment()); }\n\n    ### Response:", "ground_truth": "Append a unique identifier to the URL.\n\n@return a copy if this call with a unique identifier to this url", "predict": "The unique() method makes sure that there is no other request happening for the given method and url at the given moment of time by uniquifying the given url parameter of the given method."}, {"ID": 579, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function add_pickup_windowAction(Request $request) { $id = $request->get('id'); $hub = $this->getRepo('Profile')->find($id); $seller = $this->getUser()->getCurrentProfile(); if (!$hub) { throw $this->createNotFoundException('No hub found for id '.$id); } $sellerHubRef = $this->getRepo('SellerHubRef')->findOneBySellerAndHub($seller, $hub); if (!$sellerHubRef) { throw $this->createNotFoundException('No SellerHubRef found for Seller/Hub combination'); } $pickupWindow = new SellerHubPickupWindow(); $pickupWindow->setSellerHubRef($sellerHubRef); $form = $this->createForm(new SellerHubPickupWindowType(), $pickupWindow); if ($request->getMethod() == 'POST') { $form->bindRequest($request); if ($form->isValid()) { $em = $this->getDoctrine()->getEntityManager(); $em->persist($pickupWindow); $em->flush(); return $this->redirect($this->generateUrl('Seller_hub_show', array( 'id' => $hub->getId(), ))); } } return $this->render('HarvestCloudCoreBundle:Seller/SellerHubRef:add_pickup_window.html.twig', array( 'hub' => $hub, 'form' => $form->createView(), )); }\n\n    ### Response: add pickup window\n\n@author Tom Haskins-Vaughan \n@since  2012-04-29\n@todo   Reduce number of queries on this page\n@todo   Make sure we don't create a PickupWindow when the Hub is closed\n@todo   Refcator to model\n\n@param  Request $request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Call withFragment(String fragment) { return new play.api.mvc.Call(method(), url(), fragment); }\n\n    ### Response:", "ground_truth": "Returns a new Call with the given fragment.\n\n@param fragment the URL fragment\n@return a copy of this call that contains the fragment", "predict": "generates a play.api.mvc.Call with the given url and fragment parameter"}, {"ID": 580, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function is_ajax($is_phery = false) { switch ($is_phery) { case true: return (bool)(!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strcasecmp($_SERVER['HTTP_X_REQUESTED_WITH'], 'XMLHttpRequest') === 0 && strtoupper($_SERVER['REQUEST_METHOD']) === 'POST' && !empty($_SERVER['HTTP_X_PHERY'])); case false: return (bool)(!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strcasecmp($_SERVER['HTTP_X_REQUESTED_WITH'], 'XMLHttpRequest') === 0); } return false; }\n\n    ### Response: Check if the current call is an ajax call\n\n@param bool $is_phery Check if is an ajax call and a phery specific call\n\n@static\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String absoluteURL(Http.Request request) { return absoluteURL(request.secure(), request.host()); }\n\n    ### Response:", "ground_truth": "Transform this call to an absolute URL.\n\n@param request used to identify the host and protocol that should base this absolute URL\n@return the absolute URL string", "predict": "Generates an absolute url given the url provided and its secure and host parameters\n\n@param int secure Check if its a secure url\n@param String host Check if its a relative url\n\n@return String The absolute url"}, {"ID": 581, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private LogFileDetail truncateALogFileOfAnAttempt( final TaskAttemptID taskID, final LogFileDetail oldLogFileDetail, final long taskRetainSize, final FileWriter tmpFileWriter, final FileReader logFileReader) throws IOException { LogFileDetail newLogFileDetail = new LogFileDetail(); // ///////////// Truncate log file /////////////////////// // New location of log file is same as the old newLogFileDetail.location = oldLogFileDetail.location; if (taskRetainSize > MINIMUM_RETAIN_SIZE_FOR_TRUNCATION && oldLogFileDetail.length > taskRetainSize) { LOG.info(\"Truncating logs for \" + taskID + \" from \" + oldLogFileDetail.length + \"bytes to \" + taskRetainSize + \"bytes.\"); newLogFileDetail.length = taskRetainSize; } else { LOG.info(\"No truncation needed for \" + taskID + \" length is \" + oldLogFileDetail.length + \" retain size \" + taskRetainSize + \"bytes.\"); newLogFileDetail.length = oldLogFileDetail.length; } long charsSkipped = logFileReader.skip(oldLogFileDetail.length - newLogFileDetail.length); if (charsSkipped != oldLogFileDetail.length - newLogFileDetail.length) { throw new IOException(\"Erroneously skipped \" + charsSkipped + \" instead of the expected \" + (oldLogFileDetail.length - newLogFileDetail.length)); } long alreadyRead = 0; while (alreadyRead < newLogFileDetail.length) { char tmpBuf[]; // Temporary buffer to read logs if (newLogFileDetail.length - alreadyRead >= DEFAULT_BUFFER_SIZE) { tmpBuf = new char[DEFAULT_BUFFER_SIZE]; } else { tmpBuf = new char[(int) (newLogFileDetail.length - alreadyRead)]; } int bytesRead = logFileReader.read(tmpBuf); if (bytesRead < 0) { break; } else { alreadyRead += bytesRead; } tmpFileWriter.write(tmpBuf); } // ////// End of truncating log file /////////////////////// return newLogFileDetail; }\n\n    ### Response: Truncate the log file of this task-attempt so that only the last retainSize\nmany bytes of each log file is retained and the log file is reduced in size\nsaving disk space.\n\n@param taskID Task whose logs need to be truncated\n@param oldLogFileDetail contains the original log details for the attempt\n@param taskRetainSize retain-size\n@param tmpFileWriter New log file to write to. Already opened in append\nmode.\n@param logFileReader Original log file to read from.\n@return\n@throws IOException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String webSocketURL(Http.Request request) { return webSocketURL(request.secure(), request.host()); }\n\n    ### Response:", "ground_truth": "Transform this call to an WebSocket URL.\n\n@param request used as the base for forming the WS url\n@return the websocket url string", "predict": "The webSocket URL of the given request determined by secure and host parameters of the given request."}, {"ID": 582, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def port_create_gre(br, port, id, remote): ''' Generic Routing Encapsulation - creates GRE tunnel between endpoints. Args: br: A string - bridge name. port: A string - port name. id: An integer - unsigned 32-bit number, tunnel's key. remote: A string - remote endpoint's IP address. Returns: True on success, else False. .. versionadded:: 2016.3.0 CLI Example: .. code-block:: bash salt '*' openvswitch.port_create_gre br0 gre1 5001 192.168.1.10 ''' if not 0 <= id < 2**32: return False elif not __salt__['dig.check_ip'](remote): return False elif not bridge_exists(br): return False elif port in port_list(br): cmd = 'ovs-vsctl set interface {0} type=gre options:remote_ip={1} options:key={2}'.format(port, remote, id) result = __salt__['cmd.run_all'](cmd) return _retcode_to_bool(result['retcode']) else: cmd = 'ovs-vsctl add-port {0} {1} -- set interface {1} type=gre options:remote_ip={2} ' \\ 'options:key={3}'.format(br, port, remote, id) result = __salt__['cmd.run_all'](cmd) return _retcode_to_bool(result['retcode'])\n\n    ### Response: Generic Routing Encapsulation - creates GRE tunnel between endpoints.\n\n    Args:\n        br: A string - bridge name.\n        port: A string - port name.\n        id: An integer - unsigned 32-bit number, tunnel's key.\n        remote: A string - remote endpoint's IP address.\n\n    Returns:\n        True on success, else False.\n\n    .. versionadded:: 2016.3.0\n\n    CLI Example:\n    .. code-block:: bash\n\n       salt '*' openvswitch.port_create_gre br0 gre1 5001 192.168.1.10.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    AbstractFunction1<Connection, BoxedUnit> connectionFunction(final ConnectionRunnable block) { return new AbstractFunction1<Connection, BoxedUnit>() { public BoxedUnit apply(Connection connection) { try { block.run(connection); return BoxedUnit.UNIT; } catch (java.sql.SQLException e) { throw new RuntimeException(\"Connection runnable failed\", e); } } }; }\n\n    ### Response:", "ground_truth": "Create a Scala function wrapper for ConnectionRunnable.\n\n@param block a Java functional interface instance to wrap\n@return a scala function that wraps the given block", "predict": "\n    AbstractFunction1 - This function accepts a Connection and runs the runnable block provided in its constructor to run the necessary SQL queries to complete the task of the runnable."}, {"ID": 583, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function checkRelationship($method) { $table = $this->table; $one = $table->getOneRelationship(); $many = $table->getManyRelationship(); $belongsTo = $table->getBelongsToRelationship(); $type = null; $params = null; if (!is_null($one) && array_key_exists($method, $one)) { $type = 'one'; $params = $one[$method]; } if (!is_null($many) && array_key_exists($method, $many)) { $type = 'many'; $params = $many[$method]; } if (!is_null($belongsTo) && array_key_exists($method, $belongsTo)) { $type = 'belongsTo'; $params = $belongsTo[$method]; } if (is_null($type)) { return false; } return $this->parseRelationship($table, $type, $params); }\n\n    ### Response: Check if exist relationship alias\n@param string @method\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    <A> AbstractFunction1<Connection, A> connectionFunction(final ConnectionCallable<A> block) { return new AbstractFunction1<Connection, A>() { public A apply(Connection connection) { try { return block.call(connection); } catch (java.sql.SQLException e) { throw new RuntimeException(\"Connection callable failed\", e); } } }; }\n\n    ### Response:", "ground_truth": "Create a Scala function wrapper for ConnectionCallable.\n\n@param block a Java functional interface instance to wrap\n@param  the provided block's return type\n@return a scala function wrapping the given block", "predict": "Check for Result from Database Operation"}, {"ID": 584, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Open(sockPath string, timeout time.Duration) (*thrift.TSocket, error) { addr, err := net.ResolveUnixAddr(\"unix\", sockPath) if err != nil { return nil, errors.Wrapf(err, \"resolving socket path '%s'\", sockPath) } // the timeout parameter is passed to thrift, which passes it to net.DialTimeout // but it looks like net.DialTimeout ignores timeouts for unix socket and immediately returns an error // waitForSocket will loop every 200ms to stat the socket path, // or until the timeout value passes, similar to the C++ and python implementations. if err := waitForSocket(sockPath, timeout); err != nil { return nil, errors.Wrapf(err, \"waiting for unix socket to be available: %s\", sockPath) } trans := thrift.NewTSocketFromAddrTimeout(addr, timeout) if err := trans.Open(); err != nil { return nil, errors.Wrap(err, \"opening socket transport\") } return trans, nil }\n\n    ### Response: // Open opens the unix domain socket with the provided path and timeout,\n// returning a TTransport..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Server forRouter(Mode mode, int port, Function<BuiltInComponents, Router> block) { return new Builder().mode(mode).http(port).build(block); }\n\n    ### Response:", "ground_truth": "Create a server for the router returned by the given block.\n\n@param block The block which creates a router.\n@param mode The mode the server will run on.\n@param port The port the server will run on.\n@return The running server.", "predict": "// This method creates a server instance for the given router and its given settings\n\n// forRouter creates a server instance for the given router and its given settings\n\n// It accepts two arguments, Mode and int port, and uses those values to\n// instantiate the Builder and configure its behavior\n\n// It then uses the Block method on the Builder to supply the router code\n\n// Finally, it creates and returns an instance of Server with the appropriate settings\n\n// If there is no error, the returned server instance should be able to serve HTTP requests"}, {"ID": 585, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Task getTaskById(String id) { return engine.getTaskService().createTaskQuery().taskId(id).initializeFormKeys().singleResult(); }\n\n    ### Response: Returns the task with the given id\n\n@param id\n@return.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static JsonNode toJson(final Object data) { try { return mapper().valueToTree(data); } catch (Exception e) { throw new RuntimeException(e); } }\n\n    ### Response:", "ground_truth": "Converts an object to JsonNode.\n\n@param data Value to convert in Json.\n@return the JSON node.", "predict": "Converts objects to and from JSON"}, {"ID": 586, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def set_channel_groups(self, channel_ids, groups): '''This function sets the group property of each specified channel id with the corresponding group of the passed in groups list. Parameters ---------- channel_ids: array_like The channel ids (ints) for which the groups will be specified groups: array_like A list of corresonding groups (ints) for the given channel_ids ''' if len(channel_ids) == len(groups): for i in range(len(channel_ids)): if isinstance(groups[i], int): self.set_channel_property(channel_ids[i], 'group', groups[i]) else: raise ValueError(str(groups[i]) + \" must be an int\") else: raise ValueError(\"channel_ids and groups must have same length\")\n\n    ### Response: This function sets the group property of each specified channel\n        id with the corresponding group of the passed in groups list.\n\n        Parameters\n        ----------\n        channel_ids: array_like\n            The channel ids (ints) for which the groups will be specified\n        groups: array_like\n            A list of corresonding groups (ints) for the given channel_ids.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <A> A fromJson(JsonNode json, Class<A> clazz) { try { return mapper().treeToValue(json, clazz); } catch (Exception e) { throw new RuntimeException(e); } }\n\n    ### Response:", "ground_truth": "Converts a JsonNode to a Java value\n\n@param  the type of the return value.\n@param json Json value to convert.\n@param clazz Expected Java value type.\n@return the return value.", "predict": "The function parses a given JsonNode and converts it to an object of specified type A."}, {"ID": 587, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (nu *NullUUID) Scan(val interface{}) error { if val == nil { nu.UUID, nu.Valid = [16]byte{}, false return nil } nu.Valid = true return nu.UUID.Scan(val) }\n\n    ### Response: // Scan scans a uuid or null from the given value.\n// If the supplied value is nil, Valid will be set to false and the\n// UUID will be zeroed..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static JsonNode parse(String src) { try { return mapper().readTree(src); } catch (Throwable t) { throw new RuntimeException(t); } }\n\n    ### Response:", "ground_truth": "Parses a String representing a json, and return it as a JsonNode.\n\n@param src the JSON string.\n@return the JSON node.", "predict": "// Parses the given source string as a JsonNode.\n// If there is a problem parsing the source, an exception is thrown.."}, {"ID": 588, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public com.google.api.ads.admanager.axis.v201805.MediaLocationSettings getDefaultDeliverySettings() { return defaultDeliverySettings; }\n\n    ### Response: Gets the defaultDeliverySettings value for this SourceContentConfiguration.\n\n@return defaultDeliverySettings   * Default configuration for how DAI should deliver the non-modified\nmedia segments. At delivery\ntime, we replace the ingest location's url prefix\nwith the delivery location's URL prefix and\nuse the security policy from the delivery settings\nto determine how DAI needs to deliver the\nmedia so that users can access it. This value is required\nfor a valid source content\nconfiguration..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static JsonNode parse(java.io.InputStream src) { try { return mapper().readTree(src); } catch (Throwable t) { throw new RuntimeException(t); } }\n\n    ### Response:", "ground_truth": "Parses a InputStream representing a json, and return it as a JsonNode.\n\n@param src the JSON input stream.\n@return the JSON node.", "predict": "Parses the given source stream to produce a corresponding JsonNode object"}, {"ID": 589, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def compute_voltages(grid, configs_raw, potentials_raw): \"\"\"Given a list of potential distribution and corresponding four-point spreads, compute the voltages Parameters ---------- grid: crt_grid object the grid is used to infer electrode positions configs_raw: Nx4 array containing the measurement configs (1-indexed) potentials_raw: list with N entries corresponding to each measurement, containing the node potentials of each injection dipole. \"\"\" # we operate on 0-indexed arrays, config holds 1-indexed values # configs = configs_raw - 1 voltages = [] for config, potentials in zip(configs_raw, potentials_raw): print('config', config) e3_node = grid.get_electrode_node(config[2]) e4_node = grid.get_electrode_node(config[3]) print(e3_node, e4_node) print('pot1', potentials[e3_node]) print('pot2', potentials[e4_node]) voltage = potentials[e3_node] - potentials[e4_node] voltages.append(voltage) return voltages\n\n    ### Response: Given a list of potential distribution and corresponding four-point\n    spreads, compute the voltages\n\n    Parameters\n    ----------\n    grid:\n        crt_grid object the grid is used to infer electrode positions\n    configs_raw: Nx4 array\n        containing the measurement configs (1-indexed)\n    potentials_raw: list with N entries\n        corresponding to each measurement, containing the node potentials of\n        each injection dipole..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String relative(String startPath, String targetPath) { // If the start and target path's are the same then link to the current directory if (startPath.equals(targetPath)) { return CURRENT_DIR; } String[] start = toSegments(canonical(startPath)); String[] target = toSegments(canonical(targetPath)); // If start path has no trailing separator (a \"file\" path), then drop file segment if (!startPath.endsWith(SEPARATOR)) start = Arrays.copyOfRange(start, 0, start.length - 1); // If target path has no trailing separator, then drop file segment, but keep a reference to add // it later String targetFile = \"\"; if (!targetPath.endsWith(SEPARATOR)) { targetFile = target[target.length - 1]; target = Arrays.copyOfRange(target, 0, target.length - 1); } // Work out how much of the filepath is shared by start and path. String[] common = commonPrefix(start, target); String[] parents = toParentDirs(start.length - common.length); int relativeStartIdx = common.length; String[] relativeDirs = Arrays.copyOfRange(target, relativeStartIdx, target.length); String[] relativePath = Arrays.copyOf(parents, parents.length + relativeDirs.length); System.arraycopy(relativeDirs, 0, relativePath, parents.length, relativeDirs.length); // If this is not a sibling reference append a trailing / to path String trailingSep = \"\"; if (relativePath.length > 0) trailingSep = SEPARATOR; return Arrays.stream(relativePath).collect(Collectors.joining(SEPARATOR)) + trailingSep + targetFile; }\n\n    ### Response:", "ground_truth": "Create a path to targetPath that's relative to the given startPath.", "predict": "If the start and target path's are the same then link to the current directory\n    If (startPath.equals(targetPath)) {\n        return CURRENT_DIR;\n    }\n    String[] start = toSegments(canonical(startPath));\n    String[] target = toSegments(canonical(targetPath));\n    // If start path has no trailing separator\n    // (a \"file\" path), then drop file segment\n    if (!startPath.endsWith(SEPARATOR)) {\n        start = Arrays.copyOfRange(start, 0, start.length - 1);\n    } // If target path has no trailing separator\n    // drop file segment, but keep a reference to add it later\n    String targetFile = \"\";\n    if (!targetPath.endsWith(SEPARATOR)) {\n        targetFile = target[target.length - 1];\n        target = Arrays.copyOfRange(target, "}, {"ID": 590, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def sort_header(header_text): \"\"\"sort the chromosomes in a header text\"\"\" lines = header_text.rstrip().split(\"\\n\") rlens = {} for ln in lines: m = re.match('@SQ\\tSN:(\\S+)\\tLN:(\\S+)',ln) if m: rlens[m.group(1)] = m.group(2) output = '' done_lens = False for ln in lines: if re.match('@SQ\\tSN:',ln): if not done_lens: done_lens = True for chr in sorted(rlens.keys()): output += \"@SQ\\tSN:\"+chr+\"\\tLN:\"+str(rlens[chr])+\"\\n\" else: output += ln.rstrip(\"\\n\")+\"\\n\" return output\n\n    ### Response: sort the chromosomes in a header text.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String canonical(String url) { String[] urlPath = toSegments(url); Stack<String> canonical = new Stack<>(); for (String comp : urlPath) { if (comp.isEmpty() || comp.equals(CURRENT_DIR)) continue; if (!comp.equals(PARENT_DIR) || (!canonical.empty() && canonical.peek().equals(PARENT_DIR))) canonical.push(comp); else canonical.pop(); } String prefixSep = url.startsWith(SEPARATOR) ? SEPARATOR : \"\"; String trailingSep = url.endsWith(SEPARATOR) ? SEPARATOR : \"\"; return prefixSep + canonical.stream().collect(Collectors.joining(SEPARATOR)) + trailingSep; }\n\n    ### Response:", "ground_truth": "Create a canonical path that does not contain parent directories, current directories, or\nsuperfluous directory separators.", "predict": "The method generates a canonicalized version of the given url by resolving relative paths and joining the segments of the url together with an appropriate separator string to form a single path string with proper indentation of the segments and an appropriate separator string of '/'."}, {"ID": 591, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def send_callback_json_message(value, *args, **kwargs): \"\"\" useful for sending messages from callbacks as it puts the result of the callback in the dict for serialization \"\"\" if value: kwargs['result'] = value send_json_message(args[0], args[1], **kwargs) return value\n\n    ### Response: useful for sending messages from callbacks as it puts the\n        result of the callback in the dict for serialization.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static List<Tuple<String, List<Object>>> displayableConstraint( Set<ConstraintDescriptor<?>> constraints) { return constraints .parallelStream() .filter(c -> c.getAnnotation().annotationType().isAnnotationPresent(Display.class)) .map(c -> displayableConstraint(c)) .collect(Collectors.toList()); }\n\n    ### Response:", "ground_truth": "Converts a set of constraints to human-readable values. Does not guarantee the order of the\nreturned constraints.\n\nThis method calls {@code displayableConstraint} under the hood.\n\n@param constraints the set of constraint descriptors.\n@return a list of pairs of tuples assembled from displayableConstraint.", "predict": "The function displayableConstraint() iterates over the given constraints to display those that have been labeled as displayable by the annotation annotationType(). This function makes use of parallel stream to do the work in parallel to maximize utility of multi-core machines. It first filters the given constraints to displayable by looking for the annotation annotationType(). Finally it maps the filtered results to displayableConstraint() to generate the displayable results of the given constraints in the given Set of constraints."}, {"ID": 592, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function childProcessOptions($options) { // Process options if ($options['cwd']) { chdir($options['cwd']); } // User to be change if ($options['user']) { $this->childChangeUser($options['user']); } // Env set if ($options['env']) { $this->childChangeEnv($options['env']); } // Env set if ($options['timeout']) { $this->childSetTimeout($options['timeout']); } // Support callback if ($options['callback'] instanceof \\Closure) { $options['callback']($this); } }\n\n    ### Response: Process options in child\n\n@param $options.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Tuple<String, List<Object>> displayableConstraint( ConstraintDescriptor<?> constraint) { final Display displayAnnotation = constraint.getAnnotation().annotationType().getAnnotation(Display.class); return Tuple( displayAnnotation.name(), Collections.unmodifiableList( Stream.of(displayAnnotation.attributes()) .map(attr -> constraint.getAttributes().get(attr)) .collect(Collectors.toList()))); }\n\n    ### Response:", "ground_truth": "Converts a constraint to a human-readable value.\n\n@param constraint the constraint descriptor.\n@return A tuple containing the constraint's display name and the constraint attributes.", "predict": "constraint constraint and display attributes"}, {"ID": 593, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func handleGetBestBlock(s *rpcServer, cmd interface{}, closeChan <-chan struct{}) (interface{}, error) { // All other \"get block\" commands give either the height, the // hash, or both but require the block SHA. This gets both for // the best block. best := s.cfg.Chain.BestSnapshot() result := &btcjson.GetBestBlockResult{ Hash: best.Hash.String(), Height: best.Height, } return result, nil }\n\n    ### Response: // handleGetBestBlock implements the getbestblock command..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public <A> CompletionStage<A> timeout( final CompletionStage<A> stage, final long amount, final TimeUnit unit) { requireNonNull(stage, \"Null stage\"); requireNonNull(unit, \"Null unit\"); FiniteDuration duration = FiniteDuration.apply(amount, unit); return toJava(delegate.timeout(duration, Scala.asScalaWithFuture(() -> stage))); }\n\n    ### Response:", "ground_truth": "Creates a CompletionStage that returns either the input stage, or a futures.\n\nNote that timeout is not the same as cancellation. Even in case of futures, the given\ncompletion stage will still complete, even though that completed value is not returned.\n\n@param stage the input completion stage that may time out.\n@param amount The amount (expressed with the corresponding unit).\n@param unit The time Unit.\n@param  the completion's result type.\n@return either the completed future, or a completion stage that failed with futures.", "predict": "The timeout() method implements the Bouncy Castle API for timeout behavior for futures returned by other completestates"}, {"ID": 594, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def query_tweets_once_generator(query, limit=None, lang='', pos=None): \"\"\" Queries twitter for all the tweets you want! It will load all pages it gets from twitter. However, twitter might out of a sudden stop serving new pages, in that case, use the `query_tweets` method. Note that this function catches the KeyboardInterrupt so it can return tweets on incomplete queries if the user decides to abort. :param query: Any advanced query you want to do! Compile it at https://twitter.com/search-advanced and just copy the query! :param limit: Scraping will be stopped when at least ``limit`` number of items are fetched. :param pos: Field used as a \"checkpoint\" to continue where you left off in iteration :return: A list of twitterscraper.Tweet objects. You will get at least ``limit`` number of items. \"\"\" logger.info('Querying {}'.format(query)) query = query.replace(' ', '%20').replace('#', '%23').replace(':', '%3A') num_tweets = 0 try: while True: new_tweets, new_pos = query_single_page(query, lang, pos) if len(new_tweets) == 0: logger.info('Got {} tweets for {}.'.format( num_tweets, query)) return for t in new_tweets: yield t, pos # use new_pos only once you have iterated through all old tweets pos = new_pos num_tweets += len(new_tweets) if limit and num_tweets >= limit: logger.info('Got {} tweets for {}.'.format( num_tweets, query)) return except KeyboardInterrupt: logger.info('Program interrupted by user. Returning tweets gathered ' 'so far...') except BaseException: logger.exception('An unknown error occurred! Returning tweets ' 'gathered so far.') logger.info('Got {} tweets for {}.'.format( num_tweets, query))\n\n    ### Response: Queries twitter for all the tweets you want! It will load all pages it gets\n    from twitter. However, twitter might out of a sudden stop serving new pages,\n    in that case, use the `query_tweets` method.\n\n    Note that this function catches the KeyboardInterrupt so it can return\n    tweets on incomplete queries if the user decides to abort.\n\n    :param query: Any advanced query you want to do! Compile it at\n                  https://twitter.com/search-advanced and just copy the query!\n    :param limit: Scraping will be stopped when at least ``limit`` number of\n                  items are fetched.\n    :param pos: Field used as a \"checkpoint\" to continue where you left off in iteration\n    :return:      A list of twitterscraper.Tweet objects. You will get at least\n                  ``limit`` number of items..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isAssignable( Class<?>[] classArray, Class<?>[] toClassArray, boolean autoboxing) { if (arrayGetLength(classArray) != arrayGetLength(toClassArray)) { return false; } if (classArray == null) { classArray = EMPTY_CLASS_ARRAY; } if (toClassArray == null) { toClassArray = EMPTY_CLASS_ARRAY; } for (int i = 0; i < classArray.length; i++) { if (isAssignable(classArray[i], toClassArray[i], autoboxing) == false) { return false; } } return true; }\n\n    ### Response:", "ground_truth": "Checks if an array of Classes can be assigned to another array of Classes.\n\nThis method calls {@link #isAssignable(Class, Class) isAssignable} for each Class pair in\nthe input arrays. It can be used to check if a set of arguments (the first parameter) are\nsuitably compatible with a set of method parameter types (the second parameter).\n\nUnlike the {@link Class#isAssignableFrom(java.lang.Class)} method, this method takes into\naccount widenings of primitive classes and {@code null}s.\n\nPrimitive widenings allow an int to be assigned to a {@code long}, {@code float} or {@code\ndouble}. This method returns the correct result for these cases.\n\n{@code Null} may be assigned to any reference type. This method will return {@code true} if\n{@code null} is passed in and the toClass is non-primitive.\n\nSpecifically, this method tests whether the type represented by the specified {@code Class}\nparameter can be converted to the type represented by this {@code Class} object via an identity\nconversion widening primitive or widening reference conversion. See The Java Language Specification, sections\n5.1.1, 5.1.2 and 5.1.4 for details.\n\n@param classArray the array of Classes to check, may be {@code null}\n@param toClassArray the array of Classes to try to assign into, may be {@code null}\n@param autoboxing whether to use implicit autoboxing/unboxing between primitives and wrappers\n@return {@code true} if assignment possible", "predict": "\n    The function checks if there is a assignment operator that exists\n    to convert objects of any of the given arrays to objects of any of\n    the other given arrays, given that objects of any of the given arrays\n    could be converted to objects of any of the other given arrays\n    automatically by the autoboxing behavior of the JVM, or given that\n    there exists a assignment operator that exists to convert objects of\n    any of the given arrays to objects of any of the other given arrays\n    manually by the program, or given that there exists a assignment\n    operator that exists to convert objects of any of the given arrays\n    to objects of any of the other given arrays automatically by the\n    autoboxing behavior of the JVM or manually by the program, or\n    given that there exists a assignment operator that exists to\n    convert objects of any of the given arrays to objects of any of\n    the other given arrays manually by the program or given that there\n    exists a assignment operator that exists to convert objects of any"}, {"ID": 595, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Timeout(duration time.Duration) ReporterOption { return func(r *httpReporter) { r.client.Timeout = duration } }\n\n    ### Response: // Timeout sets maximum timeout for http request..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Date parseCRONExpression(String cron) { try { return new CronExpression(cron).getNextValidTimeAfter(new Date()); } catch (Exception e) { throw new IllegalArgumentException(\"Invalid CRON pattern : \" + cron, e); } }\n\n    ### Response:", "ground_truth": "Parses a CRON expression.\n\n@param cron the CRON String\n@return the next Date that satisfies the expression", "predict": "// Parses CRON string to generate proper calendar date objects.."}, {"ID": 596, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Properties getEnvVariables() throws EnvironmentException { if( isUnix() ) { return getUnixShellVariables(); } if( isWindows() ) { return getWindowsShellVariables(); } String message = \"Environment operations not supported on unrecognized operatings system\"; UnsupportedOperationException cause = new UnsupportedOperationException( message ); throw new EnvironmentException( cause ); }\n\n    ### Response: Gets all environment variables within a Properties instance where the\nkey is the environment variable name and value is the value of the\nproperty.\n\n@return the environment variables and values as Properties\n\n@throws EnvironmentException if os is not recognized.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long cronInterval(String cron, Date date) { try { return new CronExpression(cron).getNextInterval(date); } catch (Exception e) { throw new IllegalArgumentException(\"Invalid CRON pattern : \" + cron, e); } }\n\n    ### Response:", "ground_truth": "Compute the number of milliseconds between the next valid date and the one after.\n\n@param cron the CRON String\n@param date the date to start search\n@return the number of milliseconds between the next valid date and the one after, with an\ninvalid interval between", "predict": "The cronInterval method uses the CronExpression class to translate the cron string into an appropriate calendar interval which can then be used to schedule jobs to run on the specified date."}, {"ID": 597, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function getPossibleValues(): array { return [ self::POST, self::PUT, self::PATCH, self::DELETE, self::GET, ]; }\n\n    ### Response: Get the possible values of action method\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static AhcWSClient create( AhcWSClientConfig config, AhcHttpCache cache, Materializer materializer) { final StandaloneAhcWSClient client = StandaloneAhcWSClient.create(config, cache, materializer); return new AhcWSClient(client, materializer); }\n\n    ### Response:", "ground_truth": "Creates WS client manually from configuration, internally creating a new instance of\nAsyncHttpClient and managing its own thread pool.\n\nThis client is not managed as part of Play's lifecycle, and must be closed by calling\nws.close(), otherwise you will run into memory leaks.\n\n@param config a config object, usually from AhcWSClientConfigFactory\n@param cache if not null, provides HTTP caching.\n@param materializer an Akka materializer\n@return a new instance of AhcWSClient.", "predict": "Creates an AhcWSClient and attaches materials to the objects to make them usable in the AhcWSClient for REST operations"}, {"ID": 598, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean useTargetContext(InternalLinkResolverOptions options) { if (options.isUseTargetContext() && !options.isRewritePathToContext()) { return true; } // even is use target context is not activated use it if current page is an experience fragment // otherwise it will be always impossible to resolve internal links else if (currentPage != null && Path.isExperienceFragmentPath(currentPage.getPath())) { return true; } return false; }\n\n    ### Response: Checks if target context should be used.\n@param options Link resolver options\n@return true if target context should be used.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public GuiceApplicationBuilder builder(ApplicationLoader.Context context) { return initialBuilder .in(context.environment()) .loadConfig(context.initialConfig()) .overrides(overrides(context)); }\n\n    ### Response:", "ground_truth": "Construct a builder to use for loading the given context.\n\n@param context the context the returned builder will load\n@return the builder", "predict": "Allows the builder method to accept an ApplicationLoader context parameter to customize environment and config values of the builder method invocation"}, {"ID": 599, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static double gammaQuantileNewtonRefinement(final double logpt, final double k, final double theta, final int maxit, double x) { final double EPS_N = 1e-15; // Precision threshold // 0 is not possible, try MIN_NORMAL instead if(x <= 0) { x = Double.MIN_NORMAL; } // Current estimation double logpc = logcdf(x, k, theta); if(x == Double.MIN_NORMAL && logpc > logpt * (1. + 1e-7)) { return 0.; } if(logpc == Double.NEGATIVE_INFINITY) { return 0.; } // Refine by newton iterations for(int i = 0; i < maxit; i++) { // Error of current approximation final double logpe = logpc - logpt; if(Math.abs(logpe) < Math.abs(EPS_N * logpt)) { break; } // Step size is controlled by PDF: final double g = logpdf(x, k, theta); if(g == Double.NEGATIVE_INFINITY) { break; } final double newx = x - logpe * FastMath.exp(logpc - g); // New estimate: logpc = logcdf(newx, k, theta); if(Math.abs(logpc - logpt) > Math.abs(logpe) || (i > 0 && Math.abs(logpc - logpt) == Math.abs(logpe))) { // no further improvement break; } x = newx; } return x; }\n\n    ### Response: Refinement of ChiSquared probit using Newton iterations.\n\nA trick used by GNU R to improve precision.\n\n@param logpt Target value of log p\n@param k Alpha\n@param theta Theta = 1 / Beta\n@param maxit Maximum number of iterations to do\n@param x Initial estimate\n@return Refined value.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Result TODO(Request request) { return status(NOT_IMPLEMENTED, views.html.defaultpages.todo.render(request.asScala())); }\n\n    ### Response:", "ground_truth": "Generates a 501 NOT_IMPLEMENTED simple result.", "predict": "Draw and render Todo page"}, {"ID": 600, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function addColumn(FieldConfig $column) { if ($this->columns === null) { $this->setColumns([]); } $this->columns->push($column); return $this; }\n\n    ### Response: Adds column to grid.\n\n@param FieldConfig $column\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Deprecated public static void session(String key, String value) { session().put(key, value); }\n\n    ### Response:", "ground_truth": "Puts a new value into the current session.\n\n@param key the key to set into the session\n@param value the value to set for key\n@deprecated Deprecated as of 2.7.0. Use {@link Result} instead.", "predict": "Stores specified key,value into sessions.\n    @param String key,value\n    @return self"}, {"ID": 601, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function validateAlias() { $field = 'alias'; $value = $this->getSubmitted($field); if (empty($value)) { $this->unsetSubmitted($field); return null; } $label = $this->translation->text('Alias'); if (mb_strlen($value) > 255) { $this->setErrorLengthRange($field, $label, 0, 255); return false; } if (preg_match('/^[A-Za-z0-9_.-]+$/', $value) !== 1) { $this->setErrorInvalid($field, $label); return false; } $updating = $this->getUpdating(); if (isset($updating['alias']) && $updating['alias'] === $value) { return true; // Do not check own alias on update } if ($this->alias->exists($value)) { $this->setErrorExists($field, $label); return false; } return true; }\n\n    ### Response: Validates an alias\n@return boolean|null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Deprecated public static void flash(String key, String value) { flash().put(key, value); }\n\n    ### Response:", "ground_truth": "Puts a new value into the flash scope.\n\n@param key the key to put into the flash scope\n@param value the value corresponding to key\n@deprecated Deprecated as of 2.7.0. Use {@link Result} instead.", "predict": "Stores specified key and values in Flash object."}, {"ID": 602, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static base_response delete(nitro_service client) throws Exception { locationfile deleteresource = new locationfile(); return deleteresource.delete_resource(client); }\n\n    ### Response: Use this API to delete locationfile..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <A extends Annotation> BindingKey<T> qualifiedWith(final A instance) { return underlying.qualifiedWith(instance).asJava(); }\n\n    ### Response:", "ground_truth": "Qualify this binding key with the given instance of an annotation.\n\nThis can be used to specify bindings with annotations that have particular values.", "predict": "Use this method to convert an instance of an annotation to its corresponding java type to form an appropriate BindingKey"}, {"ID": 603, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function config($key, $default = null) { // if an array is passed as the key, we will assume you want to set an array of values if (is_array($key)) { return $this->config = array_merge($this->config, $key); } return array_key_exists($key, $this->config) ? $this->config[$key] : $default; }\n\n    ### Response: Get or set configuration values\n\n@param  string|array $key\n@param  mixed|null   $default\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <A extends Annotation> BindingKey<T> qualifiedWith(final Class<A> annotation) { return underlying.qualifiedWith(annotation).asJava(); }\n\n    ### Response:", "ground_truth": "Qualify this binding key with the given annotation.\n\nFor example, you may have both a cached implementation, and a direct implementation of a\nservice. To differentiate between them, you may define a Cached annotation:\n\n{@code\nbindClass(Foo.class).qualifiedWith(Cached.class).to(FooCached.class),\nbindClass(Foo.class).to(FooImpl.class)\n\n...\n\nclass MyController {\n{@literal @}Inject\nMyController({@literal @}Cached Foo foo) {\n...\n}\n...\n}\n}\n\nIn the above example, the controller will get the cached {@code Foo} service.", "predict": "Get or set configuration values\n\n*Function to convert an annotation to its corresponding java reflection API*\n\n*Function to convert an annotation to its corresponding java reflection API*\n\n*Function to convert an annotation to its corresponding java reflection API*"}, {"ID": 604, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function _checkConstantNaming($text) { if ($this->_isActive('constantNaming')) { $text = ltrim($text, \"\\\"'\"); // just in case, remove the quotes $text = rtrim($text, \"\\\"'\"); $ret = preg_match($this->_config->getTestRegExp('constantNaming'), $text); if (!$ret) { $msg = $this->_getMessage('CONSTANT_NAMING', $text, $this->_config->getTestRegExp('constantNaming')); $this->_writeError('constantNaming', $msg); } } $this->_constantDef = false; }\n\n    ### Response: Checks to see if the constant follows the naming convention.\n\n@param String $text\nthe string containing the constant..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Binding<T> to(final Class<? extends T> implementation) { return underlying.to(implementation).asJava(); }\n\n    ### Response:", "ground_truth": "Bind this binding key to the given implementation class.\n\nThis class will be instantiated and injected by the injection framework.", "predict": "Allows for the given implementation to be used to convert objects to objects of type T"}, {"ID": 605, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function (scene) { if (this.scene) { this.detachScene(); } scene.skybox = this; this.scene = scene; scene.on('beforerender', this._beforeRenderScene, this); }\n\n    ### Response: Attach the skybox to the scene\n@param  {clay.Scene} scene.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Binding<T> to(final Provider<? extends T> provider) { return underlying.to(provider).asJava(); }\n\n    ### Response:", "ground_truth": "Bind this binding key to the given provider instance.\n\nThis provider instance will be invoked to obtain the implementation for the key.", "predict": "Transform objects of type `T` from objects provided by the given `provider` to objects of type `java.lang.Object`"}, {"ID": 606, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func InitDispatcher(d *tq.Dispatcher) { d.RegisterTask(&internal.EmailTask{}, SendEmail, \"email\", nil) }\n\n    ### Response: // InitDispatcher registers the send email task with the given dispatcher..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <A extends T> Binding<T> to(final Supplier<A> instance) { return underlying.to(new FromJavaSupplier<>(instance)).asJava(); }\n\n    ### Response:", "ground_truth": "Bind this binding key to the given instance.", "predict": "// This method creates and returns an Optional binding to an instance of A from an underlying Optional binding to its parent Object."}, {"ID": 607, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Address() string { return fmt.Sprintf(\"%d %s,\\n%s, %s, %s\", Number(100), Street(), City(), State(Small), PostalCode(\"US\")) }\n\n    ### Response: // Address returns an american style address.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Binding<T> to(final BindingKey<? extends T> key) { return underlying.to(key.asScala()).asJava(); }\n\n    ### Response:", "ground_truth": "Bind this binding key to another binding key.", "predict": "// This method converts objects to objects of type T and maps values from the objects to fields of type S to produce objects of type S and maps values from objects of type S to fields of type S to produce objects of type S and maps values from objects of type S to fields of type S to produce objects of type S and maps values from objects of type S to fields of type S to produce objects of type S and maps values from objects of type S to fields of type S to produce objects of type S and maps values from objects of type S to fields of type S to produce objects of type S and maps values from objects of type S to fields of type S to produce objects of type S and maps values from objects of type S to fields of type S to produce objects of type S and maps values from objects of type S to fields of type S to produce objects of type S and maps values from objects of type S to fields of type S to produce objects of type S and maps values from objects of type S to fields of type S to produce objects of type"}, {"ID": 608, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function _safeLoadDependency(name) { try { window[name.split('/').pop()] = require(`../src/charts/${name}`); } catch(e) { errors.push({ error: e, filePath: name }); } }\n\n    ### Response: Safe load dependency. If there is an error, it loads the error to be displayed in the notification bar\n@param  {file name} name     name of fiel at src/charts. probably could refactor to take full path.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <P extends Provider<? extends T>> Binding<T> toProvider(final Class<P> provider) { return underlying.toProvider(provider).asJava(); }\n\n    ### Response:", "ground_truth": "Bind this binding key to the given provider class.\n\nThe dependency injection framework will instantiate and inject this provider, and then\ninvoke its `get` method whenever an instance of the class is needed.", "predict": "Allows for binding objects to objects of other types to enable dependency inversion principle"}, {"ID": 609, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function start($prompt, $historyFile) { readline_read_history($historyFile); declare (ticks = 1); pcntl_signal(SIGCHLD, SIG_IGN); pcntl_signal(SIGINT, array( $this, 'clear' ), true); // wait for the worker to finish executing hooks if (fread($this->_socket, 1) != EvalWorker::READY) { throw new \\RuntimeException('EvalWorker failed to start'); } $parser = new ShallowParser(); $buf = ''; $lineno = 1; for (;;) { $this->_clear = false; $line = readline(sprintf('[%d] %s', $lineno, ($buf == '' ? $prompt : str_pad('*> ', strlen($prompt), ' ', STR_PAD_LEFT)))); if ($this->_clear) { $buf = ''; continue; } if (false === $line) { $buf = 'exit(0);'; // ctrl-d acts like exit } if (strlen($line) > 0) { readline_add_history($line); } $buf .= sprintf(\"%s\\n\", $line); if ($statements = $parser->statements($buf)) { ++$lineno; $buf = ''; foreach ($statements as $stmt) { if (false === $written = fwrite($this->_socket, $stmt)) { throw new \\RuntimeException('Socket error: failed to write data'); } if ($written > 0) { $status = fread($this->_socket, 1); if ($status == EvalWorker::EXITED) { readline_write_history($historyFile); echo \"\\n\"; exit(0); } elseif ($status == EvalWorker::FAILED) { break; } } } } } }\n\n    ### Response: Start the client with an prompt and readline history path.\n\nThis method never returns.\n\n@param string $prompt\n@param string $historyFile.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static List<Lang> availables(Application app) { play.api.i18n.Langs langs = app.injector().instanceOf(play.api.i18n.Langs.class); List<play.api.i18n.Lang> availableLangs = Scala.asJava(langs.availables()); return availableLangs.stream().map(Lang::new).collect(toList()); }\n\n    ### Response:", "ground_truth": "Retrieve Lang availables from the application configuration.\n\n@param app the current application.\n@return the list of available Lang.", "predict": "Get the list of available languages to translate into the given Application."}, {"ID": 610, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public KeyExporter findKeyExporterByPublicKey(PublicKey publicKey) { PrivateKey key = _privateKeys.get(publicKey); if (key instanceof KeyExporter) { return (KeyExporter) key; } return null; }\n\n    ### Response: Find a KeyExporter by public key\n\n@return key exporter.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Lang preferred(Application app, List<Lang> availableLangs) { play.api.i18n.Langs langs = app.injector().instanceOf(play.api.i18n.Langs.class); Stream<Lang> stream = availableLangs.stream(); List<play.api.i18n.Lang> langSeq = stream.map(l -> new play.api.i18n.Lang(l.toLocale())).collect(toList()); return new Lang(langs.preferred(Scala.toSeq(langSeq))); }\n\n    ### Response:", "ground_truth": "Guess the preferred lang in the langs set passed as argument. The first Lang that matches an\navailable Lang wins, otherwise returns the first Lang available in this application.\n\n@param app the currept application\n@param availableLangs the set of langs from which to guess the preferred\n@return the preferred lang.", "predict": "Preferred lang for given app and available languages\n\nPicks the preferred lang for the given app and available languages and returns it in the preferred lang format of play's lang library"}, {"ID": 611, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function getRelativePath(string $domain, string $locale): string { return strtr($this->relativePathTemplate, [ '%domain%' => $domain, '%locale%' => $locale, '%extension%' => $this->getExtension(), ]); }\n\n    ### Response: Gets the relative file path using the template..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static play.api.db.evolutions.EvolutionsReader fromMap( Map<String, List<Evolution>> evolutions) { return new SimpleEvolutionsReader(evolutions); }\n\n    ### Response:", "ground_truth": "Create an evolutions reader based on a simple map of database names to evolutions.\n\n@param evolutions The map of database names to evolutions.\n@return the evolutions reader.", "predict": "Creates an EvolutionsReader using the given Map of Evolution Strings to Evolution List"}, {"ID": 612, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function setFormDataPanesCheckout() { $panes = array('login', 'review', 'payment_methods', 'shipping_methods', 'shipping_address', 'payment_address', 'comment', 'action'); foreach ($panes as $pane) { $this->data_form[\"pane_$pane\"] = $this->render(\"checkout/panes/$pane\", $this->data_form); } }\n\n    ### Response: Sets rendered panes.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static play.api.db.evolutions.EvolutionsReader forDefault(Evolution... evolutions) { Map<String, List<Evolution>> map = new HashMap<String, List<Evolution>>(); map.put(\"default\", Arrays.asList(evolutions)); return fromMap(map); }\n\n    ### Response:", "ground_truth": "Create an evolutions reader for the default database from a list of evolutions.\n\n@param evolutions The list of evolutions.\n@return the evolutions reader.", "predict": "Returns an Evolution reader for the default Evolution(s)."}, {"ID": 613, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getBundleAmount($dAmount) { $dItemAmount = $this->oxdiscount__oxitmamount->value; // Multiplying bundled articles count, if allowed if ($this->oxdiscount__oxitmmultiple->value && $this->oxdiscount__oxamount->value > 0) { $dItemAmount = floor($dAmount / $this->oxdiscount__oxamount->value) * $this->oxdiscount__oxitmamount->value; } return $dItemAmount; }\n\n    ### Response: Returns amount of items to bundle\n\n@param double $dAmount item amount\n\n@return double.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void cleanupEvolutions(Database database, boolean autocommit, String schema) { DatabaseEvolutions evolutions = new DatabaseEvolutions(database.asScala(), schema); evolutions.evolve(evolutions.resetScripts(), autocommit); }\n\n    ### Response:", "ground_truth": "Cleanup evolutions for the given database.\n\nThis will run the down scripts for all the applied evolutions.\n\n@param database The database to apply the evolutions to.\n@param autocommit Whether autocommit should be used.\n@param schema The schema where all the play evolution tables are saved in", "predict": "Stores and applies Evolution scripts to the target Database"}, {"ID": 614, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void setCallbackExecutor(Builder clientBuilder) { if (clientBuilder.callbackExecutor == null) { callbackExecutor = Platform.get().callbackExecutor(); } else { callbackExecutor = clientBuilder.callbackExecutor; } }\n\n    ### Response: Sets the callback executor..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public GuiceApplicationBuilder withConfigLoader(Function<Environment, Config> load) { return newBuilder( delegate.loadConfig( func( (play.api.Environment env) -> new play.api.Configuration(load.apply(new Environment(env)))))); }\n\n    ### Response:", "ground_truth": "Set the initial configuration loader. Overrides the default or any previously configured\nvalues.\n\n@param load the configuration loader\n@return the configured application builder", "predict": "Allows the configuration of the application to be loaded from a custom function loaded from the environment.."}, {"ID": 615, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void printPropertyRecord(PrintStream out, PropertyRecord propertyRecord, PropertyIdValue propertyIdValue) { printTerms(out, propertyRecord.propertyDocument, propertyIdValue, null); String datatype = \"Unknown\"; if (propertyRecord.propertyDocument != null) { datatype = getDatatypeLabel(propertyRecord.propertyDocument .getDatatype()); } out.print(\",\" + datatype + \",\" + propertyRecord.statementCount + \",\" + propertyRecord.itemCount + \",\" + propertyRecord.statementWithQualifierCount + \",\" + propertyRecord.qualifierCount + \",\" + propertyRecord.referenceCount + \",\" + (propertyRecord.statementCount + propertyRecord.qualifierCount + propertyRecord.referenceCount)); printRelatedProperties(out, propertyRecord); out.println(\"\"); }\n\n    ### Response: Prints the data of one property to the given output. This will be a\nsingle line in CSV.\n\n@param out\nthe output to write to\n@param propertyRecord\nthe data to write\n@param propertyIdValue\nthe property that the data refers to.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public GuiceApplicationBuilder withModuleLoader( BiFunction<Environment, Config, List<GuiceableModule>> loader) { return newBuilder( delegate.load( func( (play.api.Environment env, play.api.Configuration conf) -> Scala.toSeq(loader.apply(new Environment(env), conf.underlying()))))); }\n\n    ### Response:", "ground_truth": "Set the module loader. Overrides the default or any previously configured values.\n\n@param loader the configuration\n@return the configured application builder", "predict": "Allows the Guice Application Builder to be customized to load any given GuiceableModule given any given environment and configuration"}, {"ID": 616, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (r DockerImageReference) Exact() string { name := r.NameString() if len(name) == 0 { return name } s := r.Registry if len(s) > 0 { s += \"/\" } if len(r.Namespace) != 0 { s += r.Namespace + \"/\" } return s + name }\n\n    ### Response: // Exact returns a string representation of the set fields on the DockerImageReference.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public GuiceApplicationBuilder load(GuiceableModule... modules) { return newBuilder(delegate.load(Scala.varargs(modules))); }\n\n    ### Response:", "ground_truth": "Override the module loader with the given guiceable modules.\n\n@param modules the set of overriding modules\n@return an application builder that incorporates the overrides", "predict": "The GuiceApplicationBuilder.load() method delegates its invocation to Guice's built in binding mechanism to retrieve the binding for the given GuiceableModule objects and returns an enhanced GuiceApplicationBuilder builder with the binding information populated in it."}, {"ID": 617, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def getSize(string): \"\"\" This functions opens a web sites and then calculate the total size of the page in bytes. This is for the sake of the example. Do not use this technique in real code as it is not a very bright way to do this.\"\"\" try: # We open the web page with urllib.request.urlopen(string, None, 1) as f: return sum(len(line) for line in f) except (urllib.error.URLError, socket.timeout) as e: return 0\n\n    ### Response: This functions opens a web sites and then calculate the total\n    size of the page in bytes. This is for the sake of the example. Do\n    not use this technique in real code as it is not a very bright way\n    to do this..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public GuiceApplicationBuilder load(com.google.inject.Module... modules) { return load(Guiceable.modules(modules)); }\n\n    ### Response:", "ground_truth": "Override the module loader with the given Guice modules.\n\n@param modules the set of overriding modules\n@return an application builder that incorporates the overrides", "predict": "The GuiceApplicationBuilder.load(Module... modules) method\n    provides a convenient method for loading additional modules of\n    Guice into an application. It delegates to Guiceable.load(modules),\n    passing in an array of Guice modules to configure into the\n    application."}, {"ID": 618, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Transient private Feature getLocation() { if (geometry == null) { return null; } final List<Feature> features = geometry.getFeatures(); if (features == null || features.isEmpty()) { return null; } return features.get(0); }\n\n    ### Response: Return the location. It is in the form of a GeoJSON feature.\nMuch of the descriptive data from Google is in the properties\nof that feature.\n\n@return the location feature.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public GuiceApplicationBuilder load(play.api.inject.Module... modules) { return load(Guiceable.modules(modules)); }\n\n    ### Response:", "ground_truth": "Override the module loader with the given Play modules.\n\n@param modules the set of overriding modules\n@return an application builder that incorporates the overrides", "predict": "Initiates the binding of the given modules to the application. The binding process populates the binding annotations with values fetched from the given modules. It also populates the Guice Application Builder with values fetched from the given modules for configuration of the Application."}, {"ID": 619, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T, U> Predicate<Pair<T, U>> tupled(BiPredicate<T, U> predicate) { dbc.precondition(predicate != null, \"cannot apply a pair to a null predicate\"); return pair -> predicate.test(pair.first(), pair.second()); }\n\n    ### Response: Adapts a binary predicate to a predicate accepting a pair.\n\n@param  the predicate first parameter type\n@param  the predicate second parameter type\n@param predicate the predicate to be adapted\n@return the adapted predicate.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public GuiceApplicationBuilder load(play.api.inject.Binding<?>... bindings) { return load(Guiceable.bindings(bindings)); }\n\n    ### Response:", "ground_truth": "Override the module loader with the given Play bindings.\n\n@param bindings the set of binding override\n@return an application builder that incorporates the overrides", "predict": "Allows the binding of objects to fields of the Application using Guice annotations such as @Singleton or @Named."}, {"ID": 620, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static Properties loadConfig(String name) { try { URL url = new URL(name); return loadConfig(url); } catch (Exception ex) { return loadConfig(new File(name)); } }\n\n    ### Response: Loads properties from a file or url with the passed name\n@param name The name of the file or URL\n@return the loaded properties.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected GuiceApplicationBuilder newBuilder( play.api.inject.guice.GuiceApplicationBuilder builder) { return new GuiceApplicationBuilder(builder); }\n\n    ### Response:", "ground_truth": "Implementation of Self creation for GuiceBuilder.\n\n@return the application builder", "predict": "Allows the caller to supply an already constructed GuiceApplicationBuilder for quick reuse\n    */"}, {"ID": 621, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getRoleAssignments(APIRole $role) { if ($this->repository->hasAccess('role', 'read') !== true) { throw new UnauthorizedException('role', 'read'); } $userService = $this->repository->getUserService(); $spiRoleAssignments = $this->userHandler->loadRoleAssignmentsByRoleId($role->id); $roleAssignments = array(); foreach ($spiRoleAssignments as $spiRoleAssignment) { // First check if the Role is assigned to a User // If no User is found, see if it belongs to a UserGroup try { $user = $userService->loadUser($spiRoleAssignment->contentId); $roleAssignments[] = $this->roleDomainMapper->buildDomainUserRoleAssignmentObject( $spiRoleAssignment, $user, $role ); } catch (APINotFoundException $e) { try { $userGroup = $userService->loadUserGroup($spiRoleAssignment->contentId); $roleAssignments[] = $this->roleDomainMapper->buildDomainUserGroupRoleAssignmentObject( $spiRoleAssignment, $userGroup, $role ); } catch (APINotFoundException $e) { // Do nothing } } } return $roleAssignments; }\n\n    ### Response: Returns the assigned user and user groups to this role.\n\n@throws \\eZ\\Publish\\API\\Repository\\Exceptions\\UnauthorizedException if the authenticated user is not allowed to read a role\n\n@param \\eZ\\Publish\\API\\Repository\\Values\\User\\Role $role\n\n@return \\eZ\\Publish\\API\\Repository\\Values\\User\\RoleAssignment[].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String encode(Cookie cookie) { if (cookie == null) { throw new NullPointerException(\"cookie\"); } StringBuilder buf = new StringBuilder(); encode(buf, cookie); return stripTrailingSeparator(buf); }\n\n    ### Response:", "ground_truth": "Encodes the specified cookie into a Cookie header value.\n\n@param cookie specified the cookie\n@return a Rfc6265 style Cookie header value", "predict": "Stores the given Cookie into the given string builder."}, {"ID": 622, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function describeWithoutUnderscores(properties, nameProperty) { var html = \"\"; for (var key in properties) { if (properties.hasOwnProperty(key)) { if (key === nameProperty || simpleStyleIdentifiers.indexOf(key) !== -1) { continue; } var value = properties[key]; if (typeof value === \"object\") { value = describeWithoutUnderscores(value); } else { value = formatPropertyValue(value); } key = key.replace(/_/g, \" \"); if (defined(value)) { html += \"<tr><th>\" + key + \"</th><td>\" + value + \"</td></tr>\"; } } } if (html.length > 0) { html = '<table class=\"cesium-infoBox-defaultTable\"><tbody>' + html + \"</tbody></table>\"; } return html; }\n\n    ### Response: This next function modelled on Cesium.geoJsonDataSource's defaultDescribe..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EntityManager em() { Deque<EntityManager> ems = this.emStack(true); if (ems.isEmpty()) { Http.Context.safeCurrent() .map( ctx -> { throw new RuntimeException( \"No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional\"); }) .orElseGet( () -> { throw new RuntimeException( \"No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread.\"); }); } return ems.peekFirst(); }\n\n    ### Response:", "ground_truth": "Get the default EntityManager for this thread.\n\n@throws RuntimeException if no EntityManager is bound to the current Http.Context or the\ncurrent Thread.\n@return the EntityManager", "predict": "The EntityManagerFactory provides objects for creating and manipulating objects in the Entity Manager. The EntityManager contains relationships to other objects in the database, and provides other utility methods for working with the objects in the database. The EntityManagerFactory also provides utility methods for creating and manipulating objects in the Entity Manager. The EntityManager contains relationships to other objects in the database, and provides other utility methods for working with the objects in the database. The EntityManagerFactory also provides utility methods for creating and manipulating objects in the Entity Manager. The EntityManager contains relationships to other objects in the database, and provides other utility methods for working with the objects in the database. The EntityManagerFactory also provides utility methods for creating and manipulating objects in the Entity Manager. The EntityManager contains relationships to other objects in the database, and provides other utility methods for working with the objects in the database. The EntityManagerFactory also provides utility methods for creating and manipulating objects in the Entity Manager. The EntityManager contains relationships to other objects in the database, and provides other utility methods for working"}, {"ID": 623, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _logpdf(self, **kwargs): \"\"\" Returns the logpdf at the given angles. Parameters ---------- \\**kwargs: The keyword arguments should specify the value for each angle, using the names of the polar and azimuthal angles as the keywords. Unrecognized arguments are ignored. Returns ------- float The value of the pdf at the given values. \"\"\" return self._polardist._logpdf(**kwargs) +\\ self._azimuthaldist._logpdf(**kwargs)\n\n    ### Response: Returns the logpdf at the given angles.\n\n        Parameters\n        ----------\n        \\**kwargs:\n            The keyword arguments should specify the value for each angle,\n            using the names of the polar and azimuthal angles as the keywords.\n            Unrecognized arguments are ignored.\n\n        Returns\n        -------\n        float\n            The value of the pdf at the given values..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public Deque<EntityManager> emStack(boolean threadLocalFallback) { return Http.Context.safeCurrent() .map( context -> { Object emsObject = context.args.get(CURRENT_ENTITY_MANAGER); if (emsObject != null) { return (Deque<EntityManager>) emsObject; } else { Deque<EntityManager> ems = new ArrayDeque<>(); context.args.put(CURRENT_ENTITY_MANAGER, ems); return ems; } }) .orElseGet( () -> { // Not a web request if (threadLocalFallback) { return this.get(); } else { throw new RuntimeException( \"No Http.Context is present. If you want to invoke this method outside of a HTTP request, you need to wrap the call with JPA.withTransaction instead.\"); } }); }\n\n    ### Response:", "ground_truth": "Get the EntityManager stack.\n\n@param threadLocalFallback if true, fall back to a ThreadLocal queue of entity managers if no\nHTTP.Context object is found.\n@return the queue of entity managers.", "predict": "\n    @SuppressWarnings(\"unchecked\")\n    public Deque<EntityManager> emStack(boolean threadLocalFallback) {\n        return Http.Context.safeCurrent().andThen(em -> {\n            Object emsObject = em.get(CURRENT_ENTITY_MANAGER);\n            return (Deque<EntityManager>) emsObject;\n        });\n    }\n\n    @SuppressWarnings(\"rawtypes\")\n    public Deque em(boolean local) {\n        return em(local);\n    }\n\n    public Deque em(boolean local, Object em) {\n        return em(local);\n    }\n\n    public Deque em(boolean local, Object em, Object args) {\n        return em(local);\n    }\n\n    public Deque em(boolean local, Object em, Object args, Object state) {\n        return em(local);\n    }\n\n    public Deque em(boolean"}, {"ID": 624, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setTargetDirectory(String directory) { if (directory != null && directory.length() > 0) { this.targetDirectory = new File(directory); } else { this.targetDirectory = null; } }\n\n    ### Response: Sets the target directory..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void pushOrPopEm(EntityManager em, boolean threadLocalFallback) { Deque<EntityManager> ems = this.emStack(threadLocalFallback); if (em != null) { ems.push(em); } else { if (ems.isEmpty()) { throw new IllegalStateException(\"Tried to remove the EntityManager, but none was set.\"); } ems.pop(); } }\n\n    ### Response:", "ground_truth": "Pushes or pops the EntityManager stack depending on the value of the em argument. If em is\nnull, then the current EntityManager is popped. If em is non-null, then em is pushed onto the\nstack and becomes the current EntityManager.\n\n@param em the entity manager to push, if null then will pop one off the stack.\n@param threadLocalFallback if true, fall back to a ThreadLocal queue of entity managers if no\nHTTP.Context object is found.", "predict": "Pushes or pops an EntityManager from the Deque depending on the parameter provided."}, {"ID": 625, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def do_use(self, args): \"\"\"Use another instance, provided as argument.\"\"\" self.instance = args self.prompt = self.instance + '> ' archive = self._client.get_archive(self.instance) self.streams = [s.name for s in archive.list_streams()] self.tables = [t.name for t in archive.list_tables()]\n\n    ### Response: Use another instance, provided as argument..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <In, FlowIn, Out> Flow<In, Out, ?> bypassWith( Function<In, F.Either<FlowIn, Out>> splitter, Flow<FlowIn, Out, ?> flow) { return bypassWith( Flow.<In>create().map(splitter::apply), play.api.libs.streams.AkkaStreams.onlyFirstCanFinishMerge(2), flow); }\n\n    ### Response:", "ground_truth": "Bypass the given flow using the given splitter function.\n\nIf the splitter function returns Left, they will go through the flow. If it returns Right,\nthey will bypass the flow.\n\nUses onlyFirstCanFinishMerge(2) by default.\n\n@param  the In type parameter for Flow\n@param  the FlowIn type parameter for the left branch in Either.\n@param  the Out type parameter for Flow\n@param flow the original flow\n@param splitter the splitter function to use\n@return the flow with a bypass.", "predict": "This method uses the provided function to split the input stream into two and feeds it into first and second stages of the Stream API's only_first_can_finish and first_and_second_can_finish_merge respectively to complete the bypassing of the given stream and produce an output stream"}, {"ID": 626, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function() { var res = Object.create(null); res.freq = this.freq; if (this.count) { res.count = this.count; } if (this.interval > 1) { res.interval = this.interval; } for (var k in this.parts) { /* istanbul ignore if */ if (!this.parts.hasOwnProperty(k)) { continue; } var kparts = this.parts[k]; if (Array.isArray(kparts) && kparts.length == 1) { res[k.toLowerCase()] = kparts[0]; } else { res[k.toLowerCase()] = ICAL.helpers.clone(this.parts[k]); } } if (this.until) { res.until = this.until.toString(); } if ('wkst' in this && this.wkst !== ICAL.Time.DEFAULT_WEEK_START) { res.wkst = ICAL.Recur.numericDayToIcalDay(this.wkst); } return res; }\n\n    ### Response: The jCal representation of this recurrence type.\n@return {Object}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <In, FlowIn, Out> Flow<In, Out, ?> bypassWith( Flow<In, F.Either<FlowIn, Out>, ?> splitter, Graph<UniformFanInShape<Out, Out>, ?> mergeStrategy, Flow<FlowIn, Out, ?> flow) { return splitter.via( Flow.fromGraph( GraphDSL.<FlowShape<F.Either<FlowIn, Out>, Out>>create( builder -> { // Eager cancel must be true so that if the flow cancels, that will be propagated // upstream. // However, that means the bypasser must block cancel, since when this flow // finishes, the merge // will result in a cancel flowing up through the bypasser, which could lead to // dropped messages. // Using scaladsl here because of https://github.com/akka/akka/issues/18384 UniformFanOutShape<F.Either<FlowIn, Out>, F.Either<FlowIn, Out>> broadcast = builder.add(Broadcast.create(2, true)); UniformFanInShape<Out, Out> merge = builder.add(mergeStrategy); Flow<F.Either<FlowIn, Out>, FlowIn, ?> collectIn = Flow.<F.Either<FlowIn, Out>>create() .collect( Scala.partialFunction( x -> { if (x.left.isPresent()) { return x.left.get(); } else { throw Scala.noMatch(); } })); Flow<F.Either<FlowIn, Out>, Out, ?> collectOut = Flow.<F.Either<FlowIn, Out>>create() .collect( Scala.partialFunction( x -> { if (x.right.isPresent()) { return x.right.get(); } else { throw Scala.noMatch(); } })); Flow<F.Either<FlowIn, Out>, F.Either<FlowIn, Out>, ?> blockCancel = play.api.libs.streams.AkkaStreams .<F.Either<FlowIn, Out>>ignoreAfterCancellation() .asJava(); // Normal flow builder .from(broadcast.out(0)) .via(builder.add(collectIn)) .via(builder.add(flow)) .toInlet(merge.in(0)); // Bypass flow, need to ignore downstream finish builder .from(broadcast.out(1)) .via(builder.add(blockCancel)) .via(builder.add(collectOut)) .toInlet(merge.in(1)); return new FlowShape<>(broadcast.in(), merge.out()); }))); }\n\n    ### Response:", "ground_truth": "Using the given splitter flow, allow messages to bypass a flow.\n\nIf the splitter flow produces Left, they will be fed into the flow. If it produces Right,\nthey will bypass the flow.\n\n@param  the In type parameter for Flow\n@param  the FlowIn type parameter for the left branch in Either.\n@param  the Out type parameter for Flow.\n@param flow the original flow.\n@param splitter the splitter function.\n@param mergeStrategy the merge strategy (onlyFirstCanFinishMerge, ignoreAfterFinish,\nignoreAfterCancellation)\n@return the flow with a bypass.", "predict": "The FlowShape described above accepts two Input and produces two Output and controls two Stream instances of the FlowBy<FlowIn, FlowIn, Out>. Its functioning is described in details above, but to summarize, this FlowShape accepts two Input and controls two Stream instances of the FlowBy<FlowIn, FlowIn, Out>. Its functioning is described in details above, but to summarize, this FlowShape accepts two Input and controls two Stream instances of the FlowBy<FlowIn, FlowIn, Out>. Its functioning is described in details above, but to summarize, this FlowShape accepts two Input and controls two Stream instances of the FlowBy<FlowIn, FlowIn, Out>. Its functioning is described in details above, but to summarize, this FlowShape accepts two Input and controls two Stream instances of the FlowBy<FlowIn, FlowIn, Out>. Its functioning is described in details above, but to summarize, this FlowShape accepts two Input and controls two Stream instances of the FlowBy<FlowIn, Flow"}, {"ID": 627, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function _convertStringIfTrue(original) { var str; if (original && typeof original === \"string\") { str = original.toLowerCase().trim(); return (str === \"true\" || str === \"false\") ? (str === \"true\") : original; } return original; }\n\n    ### Response: If a string is \"true\" \"TRUE\", or \"  TrUE\" convert to boolean type else\nleave as is.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <In, Out> Flow<In, Out, ?> actorRef( Function<ActorRef, Props> props, int bufferSize, OverflowStrategy overflowStrategy, ActorRefFactory factory, Materializer mat) { return play.api.libs.streams.ActorFlow.<In, Out>actorRef( new AbstractFunction1<ActorRef, Props>() { @Override public Props apply(ActorRef v1) { return props.apply(v1); } }, bufferSize, overflowStrategy, factory, mat) .asJava(); }\n\n    ### Response:", "ground_truth": "Create a flow that is handled by an actor.\n\nMessages can be sent downstream by sending them to the actor passed into the props function.\nThis actor meets the contract of the actor returned by {@link\nakka.stream.javadsl.Source#actorRef}.\n\nThe props function should return the props for an actor to handle the flow. This actor will\nbe created using the passed in {@link akka.actor.ActorRefFactory}. Each message received will\nbe sent to the actor - there is no back pressure, if the actor is unable to process the\nmessages, they will queue up in the actors mailbox. The upstream can be cancelled by the actor\nterminating itself.\n\n@param  the In type parameter for a Flow\n@param  the Out type parameter for a Flow\n@param props A function that creates the props for actor to handle the flow.\n@param bufferSize The maximum number of elements to buffer.\n@param overflowStrategy The strategy for how to handle a buffer overflow.\n@param factory The Actor Factory used to create the actor to handle the flow - for example, an\nActorSystem.\n@param mat The materializer to materialize the flow.\n@return the flow itself.", "predict": "Create and return an Overflow Strategy Flow for the given props, buffer size and actor factory"}, {"ID": 628, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setAll($name, $value) { foreach ($this->data as $record) { $record[$name] = $value; } return $this; }\n\n    ### Response: Set field value for every record in collection\n\n@param string $name\n@param mixed $value\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private List<Object> convertErrorArguments(Object[] arguments) { if (arguments == null) { return Collections.emptyList(); } List<Object> converted = Arrays.stream(arguments) .filter( arg -> !(arg instanceof org.springframework.context.support.DefaultMessageSourceResolvable)) .collect(Collectors.toList()); return Collections.unmodifiableList(converted); }\n\n    ### Response:", "ground_truth": "Convert the error arguments.\n\n@param arguments The arguments to convert.\n@return The converted arguments.", "predict": "Convert arguments to objects and filter arguments that are already objects to avoid unnecessary conversion\n\n* If arguments is null\n* If arguments contains any Spring beans or other objects that already exist in objects form\n* If arguments contains any arguments that cannot be converted to objects\n* If arguments contains any arguments that already exist in objects form\n* If arguments contains any arguments that cannot be converted to objects\n* If arguments contains any arguments that already exist in objects form\n* If arguments contains any arguments that cannot be converted to objects\n* If arguments contains any arguments that already exist in objects form\n* If arguments contains any arguments that cannot be converted to objects\n* If arguments contains any arguments that already exist in objects form\n* If arguments contains any arguments that cannot be converted to objects\n* If arguments contains any arguments that already exist in objects form\n* If arguments contains any arguments that cannot be converted to objects\n* If arguments contains any arguments that already exist in objects form\n* If arguments contains any arguments that cannot be converted to objects\n* If arguments contains any arguments"}, {"ID": 629, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def demonize(self): \"\"\" do the double fork magic \"\"\" # check if a process is already running if access(self.pid_file_name, F_OK): # read the pid file pid = self.read_pid() try: kill(pid, 0) # check if process is running self.stderr.write(\"process is already running\\n\") return False except OSError as e: if e.errno == errno.ESRCH: # process is dead self.delete_pid(force_del=True) else: self.stderr.write(\"demonize failed, something went wrong: %d (%s)\\n\" % (e.errno, e.strerror)) return False try: pid = fork() if pid > 0: # Exit from the first parent timeout = time() + 60 while self.read_pid() is None: self.stderr.write(\"waiting for pid..\\n\") sleep(0.5) if time() > timeout: break self.stderr.write(\"pid is %d\\n\" % self.read_pid()) sys.exit(0) except OSError as e: self.stderr.write(\"demonize failed in 1. Fork: %d (%s)\\n\" % (e.errno, e.strerror)) sys.exit(1) # Decouple from parent environment # os.chdir(\"/\") setsid() umask(0) # Do the Second fork try: pid = fork() if pid > 0: # Exit from the second parent sys.exit(0) except OSError as e: self.stderr.write(\"demonize failed in 2. Fork: %d (%s)\\n\" % (e.errno, e.strerror)) sys.exit(1) # Redirect standard file descriptors # sys.stdout.flush() # sys.stderr.flush() # si = file(self.stdin, 'r') # so = file(self.stdout, 'a+') # se = file(self.stderr, 'a+', # os.dup2(si.fileno(), sys.stdin.fileno()) # os.dup2(so.fileno(), sys.stdout.fileno()) # os.dup2(se.fileno(), sys.stderr.fileno()) # Write the PID file #atexit.register(self.delete_pid) self.write_pid() return True\n\n    ### Response: do the double fork magic.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Form<T> fill(T value) { if (value == null) { throw new RuntimeException(\"Cannot fill a form with a null value\"); } return new Form<>( rootName, backedType, new HashMap<>(), new HashMap<>(), new ArrayList<>(), Optional.ofNullable(value), groups, messagesApi, formatters, validatorFactory, config, lang, directFieldAccess); }\n\n    ### Response:", "ground_truth": "Populates this form with an existing value, used for edit forms.\n\n@param value existing value of type T used to fill this form\n@return a copy of this form filled with the new data", "predict": "Do the double fork magic to fill the Form with the given value and exception handling to deal with null values and configuration settings"}, {"ID": 630, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def print_classification(self, cls, inst, index): \"\"\" Prints the classification to the buffer. :param cls: the classifier :type cls: Classifier :param inst: the test instance :type inst: Instance :param index: the 0-based index of the test instance :type index: int \"\"\" javabridge.call( self.jobject, \"printClassification\", \"(Lweka/classifiers/Classifier;Lweka/core/Instance;I)V\", cls.jobject, inst.jobject, index)\n\n    ### Response: Prints the classification to the buffer.\n\n        :param cls: the classifier\n        :type cls: Classifier\n        :param inst: the test instance\n        :type inst: Instance\n        :param index: the 0-based index of the test instance\n        :type index: int.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<ValidationError> globalErrors() { return Collections.unmodifiableList( errors.stream().filter(error -> error.key().isEmpty()).collect(Collectors.toList())); }\n\n    ### Response:", "ground_truth": "Retrieve all global errors - errors without a key.\n\n@return All global errors.", "predict": "The method returns a list of Validation Error objects filtered to include Error objects that have an empty error key string."}, {"ID": 631, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def pull name, source, dest, kwargs={} packages = kwargs.arg :packages, [] deps = kwargs.arg :deps, true remove = kwargs.arg :remove, true if packages.length == 0 raise AptlyError.new \"1 or more package names are required\" end cmd = 'aptly snapshot pull' cmd += ' -no-deps' if !deps cmd += ' -no-remove' if !remove cmd += \" #{name.quote} #{source.quote} #{dest.quote}\" if !packages.empty? packages.each {|p| cmd += \" #{p.quote}\"} end Aptly::runcmd cmd Aptly::Snapshot.new dest end\n\n    ### Response: Pull packages from a snapshot into another, creating a new snapshot.\n\n  == Parameters:\n name::\n   The name of the snapshot to pull to\n source::\n   The repository containing the packages to pull in\n dest::\n   The name for the new snapshot which will be created\n packages::\n   An array of package names to search\n deps::\n   When true, process dependencies\n remove::\n   When true, removes package versions not found in source.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public JsonNode errorsAsJson(Lang lang) { Map<String, List<String>> allMessages = new HashMap<>(); errors.forEach( error -> { if (error != null) { final List<String> messages = new ArrayList<>(); if (messagesApi != null && lang != null) { final List<String> reversedMessages = new ArrayList<>(error.messages()); Collections.reverse(reversedMessages); messages.add( messagesApi.get( lang, reversedMessages, translateMsgArg(error.arguments(), messagesApi, lang))); } else { messages.add(error.message()); } allMessages.put(error.key(), messages); } }); return play.libs.Json.toJson(allMessages); }\n\n    ### Response:", "ground_truth": "Returns the form errors serialized as Json using the given Lang.\n\n@param lang the language to use.\n@return the JSON node containing the errors.", "predict": "Errors produced during the build process, normalized to the given lang, are serialized to the given JsonNode format."}, {"ID": 632, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function process(node) { var children, i, l, lastContentEditable, hasContentEditableState; // Node has a contentEditable value if (node.nodeType === 1 && getContentEditable(node)) { lastContentEditable = contentEditable; contentEditable = getContentEditable(node) === \"true\"; hasContentEditableState = true; // We don't want to wrap the container only it's children } // Grab the children first since the nodelist might be changed children = grep(node.childNodes); // Process current node if (contentEditable && !hasContentEditableState) { for (i = 0, l = formatList.length; i < l; i++) { if (removeFormat(formatList[i], vars, node, node)) { break; } } } // Process the children if (format.deep) { if (children.length) { for (i = 0, l = children.length; i < l; i++) { process(children[i]); } if (hasContentEditableState) { contentEditable = lastContentEditable; // Restore last contentEditable state from stack } } } }\n\n    ### Response: Merges the styles for each node.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Optional<Object> value(String key) { return super.value().map(v -> v.getData().get(asNormalKey(key))); }\n\n    ### Response:", "ground_truth": "Gets the concrete value\n\n@param key the string key.\n@return the value", "predict": "Allows for the fetching of objects values given an arbitrary string key to the given Map of objects and its values in the given Map of normalized keys to values produced by the given Optional function."}, {"ID": 633, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func scanBlockFiles(dbPath string) (int, uint32) { lastFile := -1 fileLen := uint32(0) for i := 0; ; i++ { filePath := blockFilePath(dbPath, uint32(i)) st, err := os.Stat(filePath) if err != nil { break } lastFile = i fileLen = uint32(st.Size()) } log.Tracef(\"Scan found latest block file #%d with length %d\", lastFile, fileLen) return lastFile, fileLen }\n\n    ### Response: // scanBlockFiles searches the database directory for all flat block files to\n// find the end of the most recent file.  This position is considered the\n// current write cursor which is also stored in the metadata.  Thus, it is used\n// to detect unexpected shutdowns in the middle of writes so the block files\n// can be reconciled..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DynamicForm fill(Map<String, Object> value) { Form<Dynamic> form = super.fill(new Dynamic(value)); return new DynamicForm( form.rawData(), form.files(), form.errors(), form.value(), messagesApi, formatters, validatorFactory, config, lang().orElse(null)); }\n\n    ### Response:", "ground_truth": "Fills the form with existing data.\n\n@param value the map of values to fill in the form.\n@return the modified form.", "predict": "The fill method populates the fields of the document with values from the given Map of objects and returns an enhanced DynamicForm with the populated fields and error messages, if any."}, {"ID": 634, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function build($cacheDriver, $poolOptions = null) { if (!($cacheDriver instanceof DriverInterface)) { $cacheDriver = $this->resolveDriver($cacheDriver); } $poolOptions = $this->parsePoolOptions($poolOptions); $poolInstance = new $poolOptions['pool_class']($cacheDriver); $this->applyPoolOptions($poolInstance, $poolOptions); return $poolInstance; }\n\n    ### Response: Create a new cache pool.\n\n@param  mixed $cacheDriver The name of a registered cache driver,\nthe class name or instance of a {@see DriverInterface cache driver}.\nAn array may be used to designate fallback drivers.\n@param  mixed $poolOptions Optional settings for the new pool.\nIf a string is specified, it is used as the namespace for the new pool.\nIf an array is specified, it is assumed to be associative and is merged with the default settings.\nOtherwise, the default settings are used.\n@return PoolInterface.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> T parse(String text, Class<T> clazz) { return conversion.convert(text, clazz); }\n\n    ### Response:", "ground_truth": "Parses this string as instance of the given class.\n\n@param text the text to parse\n@param clazz class representing the required type\n@param  the type to parse out of the text\n@return the parsed value", "predict": "Parses a given string to its corresponding type and returns the result."}, {"ID": 635, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function showSeeds(Migrator $migrator) { $this->line('<comment>Seeds</comment>'); $seeds = $migrator->seedNames(); if (count($seeds) > 0) { $default_seed = $migrator->defaultSeed(); foreach ($seeds as $seed) { $class = $migrator->seedClass($seed); $status_mark = ' '; $default_mark = $seed == $default_seed ? '(default)' : ''; if (!class_exists($class)) { $this->line(\"{$status_mark} <info>[{$seed}]</info> <error>{$class}</error>\"); $this->line(''); $this->error('Error: Class not found.'); continue; } $this->line(\"{$status_mark} <comment>{$default_mark}</comment><info>[{$seed}]</info> {$class}\"); } if ($default_seed && !in_array($default_seed, $seeds)) { $this->line(''); $this->error(\"Error: default seed '{$default_seed}' is not defined.\"); } } else { $this->info('Nothing.'); } $this->line(''); }\n\n    ### Response: Show seed infomation.\n\n@param \\Jumilla\\Versionia\\Laravel\\Migrator $migrator.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public <T> T parse(Field field, String text) { return (T) conversion.convert(text, new TypeDescriptor(field)); }\n\n    ### Response:", "ground_truth": "Parses this string as instance of a specific field\n\n@param field the related field (custom formatters are extracted from this field annotation)\n@param text the text to parse\n@param  the type to parse out of the text\n@return the parsed value", "predict": "Parses the given text to its appropriate type and returns it."}, {"ID": 636, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def parse_resource(name): \"\"\"Parse a resource file \"\"\" with closing(pkg_resources.resource_stream(__name__, name)) as fp: rbytes = fp.read() return _load(StringIO(rbytes.decode('utf-8')))\n\n    ### Response: Parse a resource file.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> String print(T t) { if (t == null) { return \"\"; } if (conversion.canConvert(t.getClass(), String.class)) { return conversion.convert(t, String.class); } else { return t.toString(); } }\n\n    ### Response:", "ground_truth": "Computes the display string for any value.\n\n@param t the value to print\n@param  the type to print\n@return the formatted string", "predict": "Prints an object to the console or an empty string if the object cannot be converted to String."}, {"ID": 637, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getPluginClasses() { $arr = array(); foreach ($this->pluginInformations as $single) { $arr = array_merge($arr, $single->getPluginClasses()); } return $arr; }\n\n    ### Response: Returns an array of all the class names of plugins that have been\nloaded.\n\n@return string[].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> String print(Field field, T t) { return print(new TypeDescriptor(field), t); }\n\n    ### Response:", "ground_truth": "Computes the display string for any value, for a specific field.\n\n@param field the related field - custom formatters are extracted from this field annotation\n@param t the value to print\n@param  the type to print\n@return the formatted string", "predict": "Prints the contents of the given field to the console with the given values appended to the end of the output string"}, {"ID": 638, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def remove_external_references_from_srl_layer(self): \"\"\" Removes all external references present in the term layer \"\"\" if self.srl_layer is not None: for pred in self.srl_layer.get_predicates(): pred.remove_external_references() pred.remove_external_references_from_roles()\n\n    ### Response: Removes all external references present in the term layer.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> String print(TypeDescriptor desc, T t) { if (t == null) { return \"\"; } if (desc != null && conversion.canConvert(desc, TypeDescriptor.valueOf(String.class))) { return (String) conversion.convert(t, desc, TypeDescriptor.valueOf(String.class)); } else if (conversion.canConvert(t.getClass(), String.class)) { return conversion.convert(t, String.class); } else { return t.toString(); } }\n\n    ### Response:", "ground_truth": "Computes the display string for any value, for a specific type.\n\n@param desc the field descriptor - custom formatters are extracted from this descriptor.\n@param t the value to print\n@param  the type to print\n@return the formatted string", "predict": "Prints the given string or its equivalent in the given type."}, {"ID": 639, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function str($flags = 0) { $ret = false; if ($this->match(TextTokenizer::STRING, $matches, $flags)) { $delimiter = $matches[2]; $str = $matches[3]; $str = str_replace(\"\\\\$delimiter\", \"$delimiter\", $str); $ret = array($str); } return $ret; }\n\n    ### Response: Is the next token a string?\n\nThis function returns false if the next token is not a string or an array\nwith a single string.\n\n@param integer $flags Flags (default is 0)\n\n@return false|array of a single string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Formatters registerOptional() { conversion.addConverter( new GenericConverter() { public Object convert( Object source, TypeDescriptor sourceType, TypeDescriptor targetType) { if (sourceType.getObjectType().equals(String.class)) { // From String to Optional Object element = conversion.convert(source, sourceType, targetType.elementTypeDescriptor(source)); return Optional.ofNullable(element); } else if (targetType.getObjectType().equals(String.class)) { // From Optional to String if (source == null) return \"\"; Optional<?> opt = (Optional) source; return opt.map( o -> conversion.convert( source, sourceType.getElementTypeDescriptor(), targetType)) .orElse(\"\"); } return null; } public Set<GenericConverter.ConvertiblePair> getConvertibleTypes() { Set<ConvertiblePair> result = new HashSet<>(); result.add(new ConvertiblePair(Optional.class, String.class)); result.add(new ConvertiblePair(String.class, Optional.class)); return result; } }); return this; }\n\n    ### Response:", "ground_truth": "Converter for String -> Optional and Optional -> String", "predict": "The function registrationOptional() adds the OptionalConverter class to the FormatterConverter object to convert objects of type String to and from Optional objects of any other type, such as List and Set objects of any other type to and from Optional objects of any other type to and from Optional objects of any other type to and from String objects of any other type to and from String objects of any other type to and from String objects of any other type to and from String objects of any other type to and from String objects of any other type to and from String objects of any other type to and from String objects of any other type to and from String objects of any other type to and from String objects of any other type to and from String objects of any other type to and from String objects of any other type to and from String objects of any other type to and from String objects of any other type to and from String objects of any other type to and from String objects of any other type to and from String objects of any other type to and from String objects of any other type to and from"}, {"ID": 640, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def parse_def(self, text): \"\"\"Parse the function definition text.\"\"\" self.__init__() if not is_start_of_function(text): return self.func_indent = get_indent(text) text = text.strip() text = text.replace('\\r\\n', '') text = text.replace('\\n', '') return_type_re = re.search(r'->[ ]*([a-zA-Z0-9_,()\\[\\] ]*):$', text) if return_type_re: self.return_type_annotated = return_type_re.group(1) text_end = text.rfind(return_type_re.group(0)) else: self.return_type_annotated = None text_end = len(text) pos_args_start = text.find('(') + 1 pos_args_end = text.rfind(')', pos_args_start, text_end) self.args_text = text[pos_args_start:pos_args_end] args_list = self.split_args_text_to_list(self.args_text) if args_list is not None: self.has_info = True self.split_arg_to_name_type_value(args_list)\n\n    ### Response: Parse the function definition text..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> Formatters register(final Class<T> clazz, final SimpleFormatter<T> formatter) { conversion.addFormatterForFieldType( clazz, new org.springframework.format.Formatter<T>() { public T parse(String text, Locale locale) throws java.text.ParseException { return formatter.parse(text, locale); } public String print(T t, Locale locale) { return formatter.print(t, locale); } public String toString() { return formatter.toString(); } }); return this; }\n\n    ### Response:", "ground_truth": "Registers a simple formatter.\n\n@param clazz class handled by this formatter\n@param  the type that this formatter will parse and print\n@param formatter the formatter to register\n@return the modified Formatters object.", "predict": "The method registers Formatters for fields of the given type to the Spring Formatters mechanism. It uses the specified SimpleFormatter to parse and format objects of the given type."}, {"ID": 641, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function load($data, $dataType = 'json') { $this->_data = ($dataType != 'json') ? $this->dataToJson($data) : $data; }\n\n    ### Response: loads the dataset and converts it to the correct format.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public <A extends Annotation, T> Formatters register( final Class<T> clazz, final AnnotationFormatter<A, T> formatter) { final Class<? extends Annotation> annotationType = (Class<? extends Annotation>) GenericTypeResolver.resolveTypeArguments( formatter.getClass(), AnnotationFormatter.class)[0]; conversion.addConverter( new ConditionalGenericConverter() { public Set<GenericConverter.ConvertiblePair> getConvertibleTypes() { Set<GenericConverter.ConvertiblePair> types = new HashSet<>(); types.add(new GenericConverter.ConvertiblePair(clazz, String.class)); return types; } public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) { return (sourceType.getAnnotation(annotationType) != null); } public Object convert( Object source, TypeDescriptor sourceType, TypeDescriptor targetType) { final A a = (A) sourceType.getAnnotation(annotationType); Locale locale = LocaleContextHolder.getLocale(); try { return formatter.print(a, (T) source, locale); } catch (Exception ex) { throw new ConversionFailedException(sourceType, targetType, source, ex); } } public String toString() { return \"@\" + annotationType.getName() + \" \" + clazz.getName() + \" -> \" + String.class.getName() + \": \" + formatter; } }); conversion.addConverter( new ConditionalGenericConverter() { public Set<GenericConverter.ConvertiblePair> getConvertibleTypes() { Set<GenericConverter.ConvertiblePair> types = new HashSet<>(); types.add(new GenericConverter.ConvertiblePair(String.class, clazz)); return types; } public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) { return (targetType.getAnnotation(annotationType) != null); } public Object convert( Object source, TypeDescriptor sourceType, TypeDescriptor targetType) { final A a = (A) targetType.getAnnotation(annotationType); Locale locale = LocaleContextHolder.getLocale(); try { return formatter.parse(a, (String) source, locale); } catch (Exception ex) { throw new ConversionFailedException(sourceType, targetType, source, ex); } } public String toString() { return String.class.getName() + \" -> @\" + annotationType.getName() + \" \" + clazz.getName() + \": \" + formatter; } }); return this; }\n\n    ### Response:", "ground_truth": "Registers an annotation-based formatter.\n\n@param clazz class handled by this formatter\n@param formatter the formatter to register\n@param  the annotation type\n@param  the type that will be parsed or printed\n@return the modified Formatters object.", "predict": "\n    The method convertDataToJson() of the Formatters class generates the appropriate Json format for the given dataset and\n    stores it in the _data member."}, {"ID": 642, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def delta_nu(self, *args): \"\"\"Returns asteroseismic delta_nu in uHz reference: https://arxiv.org/pdf/1312.3853v1.pdf, Eq (2) \"\"\" return 134.88 * np.sqrt(self.mass(*args) / self.radius(*args)**3)\n\n    ### Response: Returns asteroseismic delta_nu in uHz\n\n        reference: https://arxiv.org/pdf/1312.3853v1.pdf, Eq (2).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String encode(Cookie cookie) { if (cookie == null) { throw new NullPointerException(\"cookie\"); } final String name = cookie.name(); final String value = cookie.value() != null ? cookie.value() : \"\"; validateCookie(name, value); StringBuilder buf = new StringBuilder(); if (cookie.wrap()) { addQuoted(buf, name, value); } else { add(buf, name, value); } if (cookie.maxAge() != Integer.MIN_VALUE) { add(buf, CookieHeaderNames.MAX_AGE, cookie.maxAge()); Date expires = cookie.maxAge() <= 0 ? new Date(0) // Set expires to the Unix epoch : new Date(cookie.maxAge() * 1000L + System.currentTimeMillis()); add(buf, CookieHeaderNames.EXPIRES, HttpHeaderDateFormat.get().format(expires)); } if (cookie.sameSite() != null) { add(buf, CookieHeaderNames.SAMESITE, cookie.sameSite()); } if (cookie.path() != null) { add(buf, CookieHeaderNames.PATH, cookie.path()); } if (cookie.domain() != null) { add(buf, CookieHeaderNames.DOMAIN, cookie.domain()); } if (cookie.isSecure()) { add(buf, CookieHeaderNames.SECURE); } if (cookie.isHttpOnly()) { add(buf, CookieHeaderNames.HTTPONLY); } return stripTrailingSeparator(buf); }\n\n    ### Response:", "ground_truth": "Encodes the specified cookie into a Set-Cookie header value.\n\n@param cookie the cookie\n@return a single Set-Cookie header value", "predict": "\n    public String encode(Cookie cookie)\n    {\n        // Validate that cookie is non-null\n        if (cookie == null) {\n            throw new NullPointerException(\"cookie\");\n        }\n\n        // Get name and values\n        final String name = cookie.name();\n        final String values = cookie.value() != null ? cookie.value() : \"\";\n        validateCookie(name, values);\n\n        // Build HTTP header\n        StringBuilder buf = new StringBuilder();\n        // Append name\n        add(buf, CookieHeaderNames.NAME, name);\n        // Append values\n        add(buf, CookieHeaderNames.VALUE, values);\n        // Append path\n        add(buf, CookieHeaderNames.PATH, cookie.path());\n        // Append secure\n        add(buf, CookieHeaderNames.SECURE);\n        // Append domain\n        add(buf, CookieHeaderNames.DOMAIN, cookie.domain());\n        // Append exp"}, {"ID": 643, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func AddOlderFilter(q *ds.Query, t time.Time) *ds.Query { return q.Lt(\"Created\", t.UTC()).Order(\"-Created\") }\n\n    ### Response: // AddOlderFilter adds a filter to queries that restricts them to results that\n// were created before the supplied time..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static NodeList selectNodes(String path, Object node) { return selectNodes(path, node, null); }\n\n    ### Response:", "ground_truth": "Select all nodes that are selected by this XPath expression. If multiple nodes match, multiple\nnodes will be returned. Nodes will be returned in document-order,\n\n@param path the xpath expression\n@param node the starting node\n@return result of evaluating the xpath expression against node", "predict": "The selectNodes() method selects nodes specified by the given path from the document \n    // specified by the node parameter.."}, {"ID": 644, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function get() { $data = $this->twisto->requestJson('GET', 'invoice/' . urlencode($this->invoice_id) . '/'); $this->deserialize($data); }\n\n    ### Response: Fetch invoice data from API.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> scala.collection.immutable.Seq<T> toSeq(java.util.List<T> list) { return scala.collection.JavaConverters.asScalaBufferConverter(list).asScala().toList(); }\n\n    ### Response:", "ground_truth": "Converts a Java List to Scala Seq.\n\n@param list    the java list.\n@return the converted Seq.\n@param  the element type.", "predict": "Scala extension method to convert java list to Scala immutable list"}, {"ID": 645, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (k *KubeBoot) RunSyncLoop() { for { if err := k.syncOnce(); err != nil { glog.Warningf(\"error during attempt to bootstrap (will sleep and retry): %v\", err) } time.Sleep(1 * time.Minute) } }\n\n    ### Response: // RunSyncLoop is responsible for provision the cluster.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> scala.collection.immutable.Seq<T> toSeq(T[] array) { return toSeq(java.util.Arrays.asList(array)); }\n\n    ### Response:", "ground_truth": "Converts a Java Array to Scala Seq.\n\n@param array    the java array.\n@return the converted Seq.\n@param  the element type.", "predict": "// This method converts an array to an immutable Scala collection by delegating to the Arrays.asList method."}, {"ID": 646, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function identifier(fnparam, prop) { var i = optionalidentifier(fnparam, prop); if (i) { return i; } if (state.tokens.curr.id === \"function\" && state.tokens.next.id === \"(\") { warning(\"W025\"); } else { error(\"E030\", state.tokens.next, state.tokens.next.value); } }\n\n    ### Response: fnparam means that this identifier is being defined as a function argument prop means that this identifier is that of an object property.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SafeVarargs public static <T> scala.collection.immutable.Seq<T> varargs(T... array) { return toSeq(array); }\n\n    ### Response:", "ground_truth": "Converts a Java varargs to Scala varargs.\n\n@param array    the java array.\n@return the Scala varargs\n@param  the element type.", "predict": "This method accepts arguments of type, int, char, float, and string and converts them to Scala's immutable collection objects called Seq and returns it back to the caller."}, {"ID": 647, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func PanicFunc(err error, f fn, message string, args ...interface{}) { if err != nil { f() logger.Printf(message+\"\\n\", args...) panic(err) } }\n\n    ### Response: // PanicFunc panics if err is not nil after executing function f..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <In, Out> MappedWebSocketAcceptor<In, Out> json(Class<In> in) { return new MappedWebSocketAcceptor<>( Scala.partialFunction( message -> { try { if (message instanceof Message.Binary) { return F.Either.Left( play.libs.Json.mapper() .readValue( ((Message.Binary) message).data().iterator().asInputStream(), in)); } else if (message instanceof Message.Text) { return F.Either.Left( play.libs.Json.mapper().readValue(((Message.Text) message).data(), in)); } } catch (Exception e) { return F.Either.Right(new Message.Close(CloseCodes.Unacceptable(), e.getMessage())); } throw Scala.noMatch(); }), outMessage -> { try { return new Message.Text(play.libs.Json.mapper().writeValueAsString(outMessage)); } catch (Exception e) { throw new RuntimeException(e); } }); }\n\n    ### Response:", "ground_truth": "Acceptor for JSON WebSockets.\n\n@param in The class of the incoming messages, used to decode them from the JSON.\n@param  The websocket's input type (what it receives from clients)\n@param  The websocket's output type (what it writes to clients)\n@return The WebSocket acceptor.", "predict": "// This method maps Web Socket messages to and from objects of type In and Out.."}, {"ID": 648, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void doProcessNext() { int _position = getPosition(); Node _current = getSource().item(_position); if (getActionPool().containsKey(_current.getNodeName())) { getActionPool().get(_current.getNodeName()).execute(_current, _position); } else if (getActionPool().containsKey(NODE_NAME__DEFAULT)) { getActionPool().get(NODE_NAME__DEFAULT).execute(_current, _position); } // else do nothing... // done _position++; setPosition(_position); }\n\n    ### Response: Perform the processing on the next available node..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static <In, Out> WebSocket acceptOrResult( PartialFunction<Message, F.Either<In, Message>> inMapper, Function<Http.RequestHeader, CompletionStage<F.Either<Result, Flow<In, Out, ?>>>> f, Function<Out, Message> outMapper) { return new WebSocket() { @Override public CompletionStage<F.Either<Result, Flow<Message, Message, ?>>> apply( Http.RequestHeader request) { return f.apply(request) .thenApply( resultOrFlow -> { if (resultOrFlow.left.isPresent()) { return F.Either.Left(resultOrFlow.left.get()); } else { Flow<Message, Message, ?> flow = AkkaStreams.bypassWith( Flow.<Message>create().collect(inMapper), play.api.libs.streams.AkkaStreams.onlyFirstCanFinishMerge(2), resultOrFlow.right.get().map(outMapper::apply)); return F.Either.Right(flow); } }); } }; }\n\n    ### Response:", "ground_truth": "Helper to create handlers for WebSockets.\n\n@param inMapper Function to map input messages. If it produces left, the message will be passed\nto the WebSocket flow, if it produces right, the message will be sent back out to the\nclient - this can be used to send errors directly to the client.\n@param f The function to handle the WebSocket.\n@param outMapper Function to map output messages.\n@return The WebSocket handler.", "predict": "Accept and translate Web Socket request into Result and Flow"}, {"ID": 649, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function transformPhpDateFormatToRFC3339(string $format): string { $mapping = [ 'd' => 'dd', //Day of the month, 2 digits with leading zeros (01 to 31) 'D' => 'E', // A textual representation of a day, three letters (Mon through Sun) 'j' => 'd', // Day of the month without leading zeros (1 to 31) 'l' => 'EEEE', // A full textual representation of the day of the week (Sunday through Saturday) 'N' => 'd', // ISO-8601 numeric representation of the day of the week (added in PHP 5.1.0) (1 (for Monday) through 7 (for Sunday)) 'S' => '', // Not supported yet: English ordinal suffix for the day of the month, 2 characters (st, nd, rd or th. Works well with j) 'w' => 'e', // Numeric representation of the day of the week (0 (for Sunday) through 6 (for Saturday)) 'z' => 'D', // The day of the year (starting from 0) (0 through 365) 'W' => 'w', // ISO-8601 week number of year, weeks starting on Monday (Example: 42 (the 42nd week in the year)) 'F' => 'MMMM', // A full textual representation of a month, such as January or March (January through December) 'm' => 'MM', // Numeric representation of a month, with leading zeros (01 through 12) 'M' => 'MMM', // A short textual representation of a month, three letters (Jan through Dec) 'n' => 'M', // Numeric representation of a month, without leading zeros (1 through 12) 't' => '', // Not supported yet: Number of days in the given month (28 through 31) 'L' => '', // Not supported yet: Whether it's a leap year (1 if it is a leap year, 0 otherwise.) 'o' => 'Y', // ISO-8601 week-numbering year. This has the same value as Y, except that if the ISO week number (W) belongs to the previous or next year, that year is used instead. (added in PHP 5.1.0) (Examples: 1999 or 2003) 'Y' => 'yyyy', // A full numeric representation of a year, 4 digits (Examples: 1999 or 2003) 'y' => 'yy', // A two digit representation of a year (Examples: 99 or 03) 'a' => '', // Not supported yet: Lowercase Ante meridiem and Post meridiem (am or pm) 'A' => 'a', // Uppercase Ante meridiem and Post meridiem (AM or PM) 'B' => '', // Not supported yet: Swatch Internet time (000 through 999) 'g' => 'h', // 12-hour format of an hour without leading zeros (1 through 12) 'G' => 'H', // 24-hour format of an hour without leading zeros (0 through 23) 'h' => 'hh', // 12-hour format of an hour with leading zeros (01 through 12) 'H' => 'HH', // 24-hour format of an hour with leading zeros (00 through 23) 'i' => 'mm', // Minutes with leading zeros (00 to 59) 's' => 'ss', // Seconds, with leading zeros (00 to 59) 'u' => '', // Not supported yet: Microseconds (added in PHP 5.2.2). Note that date() will always generate 000000 since it takes an integer parameter, whereas DateTime::format() does support microseconds if DateTime was created with microseconds. (Example: 654321) 'v' => '', // Not supported yet: Milliseconds (added in PHP 7.0.0). Same note applies as for u. (Example: 654) 'e' => 'VV', // Timezone identifier (added in PHP 5.1.0) (Examples: UTC, GMT, Atlantic/Azores) 'I' => '', // Not supported yet: Whether or not the date is in daylight saving time (1 if Daylight Saving Time, 0 otherwise.) 'O' => 'xx', // Difference to Greenwich time (GMT) in hours (Example: +0200) 'P' => 'xxx', // Difference to Greenwich time (GMT) with colon between hours and minutes (added in PHP 5.1.3) (Example: +02:00) 'T' => '', // Not supported yet: Timezone abbreviation (Examples: EST, MDT) 'Z' => '', // Not supported yet: Timezone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive. (-43200 through 50400) 'c' => \"yyyy-MM-dd'T'HH:mm:ssxxx\", // ISO 8601 date (added in PHP 5) (2004-02-12T15:19:21+00:00) 'r' => '', // Not supported yet: \u00bb RFC 2822 formatted date (Example: Thu, 21 Dec 2000 16:01:07 +0200) 'U' => '', // Not supported yet: Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT) ]; $chunks = str_split($format); foreach ($chunks as $k => $v) { if (!isset($mapping[$v])) { continue; } $chunks[$k] = $mapping[$v]; } return preg_replace('/([a-zA-Z])/', '$1', implode('', $chunks)); }\n\n    ### Response: Format a php date formate pattern to an RFC3339 compliant format.\n\n@param string $format The php date format (see: http://php.net/manual/de/function.date.php#refsect1-function.date-parameters)\n\n@return string The RFC3339 compliant format (see: http://userguide.icu-project.org/formatparse/datetime#TOC-Date-Time-Format-Syntax or http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static boolean setAccessibleWorkaround(final AccessibleObject o) { if (o == null || o.isAccessible()) { return false; } final Member m = (Member) o; if (!o.isAccessible() && Modifier.isPublic(m.getModifiers()) && isPackageAccess(m.getDeclaringClass().getModifiers())) { try { o.setAccessible(true); return true; } catch (final SecurityException e) { // NOPMD // ignore in favor of subsequent IllegalAccessException } } return false; }\n\n    ### Response:", "ground_truth": "XXX Default access superclass workaround.\n\nWhen a {@code public} class has a default access superclass with {@code public} members,\nthese members are accessible. Calling them from compiled code works fine. Unfortunately, on\nsome JVMs, using reflection to invoke these members seems to (wrongly) prevent access even when\nthe modifier is {@code public}. Calling {@code setAccessible(true)} solves the problem but will\nonly work from sufficiently privileged code. Better workarounds would be gratefully accepted.\n\n@param o the AccessibleObject to set as accessible\n@return a boolean indicating whether the accessibility of the object was set to true.", "predict": "The setAccessibleWorkaround() method works around a bug in the current version of the JDK to enable access to public fields of an inaccessible object during reflection by trying to make the inaccessible object accessible during reflection by passing the flag AccessibleObject to the setAccessible() method of the object. If the object or its fields cannot be accessed during reflection, the method returns false; otherwise, true is returned. The setAccessibleWorkaround() method works around a bug in the current version of the JDK to enable access to public fields of an inaccessible object during reflection by trying to make the inaccessible object accessible during reflection by passing the flag AccessibleObject to the setAccessible() method of the object. If the object or its fields cannot be accessed during reflection, the method returns false; otherwise, true is returned. The setAccessibleWorkaround() method works around a bug in the current version of the JDK to enable access to public fields of an inaccessible object during reflection by trying to make the inaccessible"}, {"ID": 650, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (t *Template) GetAllAWSNeptuneDBClusterParameterGroupResources() map[string]*resources.AWSNeptuneDBClusterParameterGroup { results := map[string]*resources.AWSNeptuneDBClusterParameterGroup{} for name, untyped := range t.Resources { switch resource := untyped.(type) { case *resources.AWSNeptuneDBClusterParameterGroup: results[name] = resource } } return results }\n\n    ### Response: // GetAllAWSNeptuneDBClusterParameterGroupResources retrieves all AWSNeptuneDBClusterParameterGroup items from an AWS CloudFormation template.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static float getPrimitivePromotionCost( final Class<?> srcClass, final Class<?> destClass) { float cost = 0.0f; Class<?> cls = srcClass; if (!cls.isPrimitive()) { // slight unwrapping penalty cost += 0.1f; cls = ClassUtils.wrapperToPrimitive(cls); } for (int i = 0; cls != destClass && i < ORDERED_PRIMITIVE_TYPES.length; i++) { if (cls == ORDERED_PRIMITIVE_TYPES[i]) { cost += 0.1f; if (i < ORDERED_PRIMITIVE_TYPES.length - 1) { cls = ORDERED_PRIMITIVE_TYPES[i + 1]; } } } return cost; }\n\n    ### Response:", "ground_truth": "Gets the number of steps required to promote a primitive number to another type.\n\n@param srcClass the (primitive) source class\n@param destClass the (primitive) destination class\n@return The cost of promoting the primitive", "predict": "// This method calculates the promotion cost of converting objects of the specified sourceClass to objects of the specified destClass. The promotion cost is composed of an unwrapping penalty plus a small unwrapping surcharge plus a small unwrapping surcharge plus a small unwrapping surcharge plus an ordered unwrapping penalty of certain primitive types plus an ordered unwrapping surcharge of certain other primitive types plus other miscellaneous considerations to add up to 0.1000000000000000038\u00b10. 00000000000038\u00b10."}, {"ID": 651, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isFirstCoveredToken(final Token token, final Annotation annotation) { final JCas jCas = getJCas(annotation); final List<Token> coveredTokens = JCasUtil.selectCovered(jCas, Token.class, annotation); if (coveredTokens.isEmpty()) { return false; } else { final Token firstCoveredToken = coveredTokens.get(0); return haveSameSpan(token, firstCoveredToken); } }\n\n    ### Response: Returns whether the given token is the first token covered by the given annotation.\n\n@param token      the token\n@param annotation the annotation\n@return whether the token is the first covered token.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static float getTotalTransformationCost( final Class<?>[] srcArgs, final Executable executable) { final Class<?>[] destArgs = executable.getParameterTypes(); final boolean isVarArgs = executable.isVarArgs(); // \"source\" and \"destination\" are the actual and declared args respectively. float totalCost = 0.0f; final long normalArgsLen = isVarArgs ? destArgs.length - 1 : destArgs.length; if (srcArgs.length < normalArgsLen) { return Float.MAX_VALUE; } for (int i = 0; i < normalArgsLen; i++) { totalCost += getObjectTransformationCost(srcArgs[i], destArgs[i]); } if (isVarArgs) { // When isVarArgs is true, srcArgs and dstArgs may differ in length. // There are two special cases to consider: final boolean noVarArgsPassed = srcArgs.length < destArgs.length; final boolean explicitArrayForVarags = srcArgs.length == destArgs.length && srcArgs[srcArgs.length - 1].isArray(); final float varArgsCost = 0.001f; final Class<?> destClass = destArgs[destArgs.length - 1].getComponentType(); if (noVarArgsPassed) { // When no varargs passed, the best match is the most generic matching type, not the most // specific. totalCost += getObjectTransformationCost(destClass, Object.class) + varArgsCost; } else if (explicitArrayForVarags) { final Class<?> sourceClass = srcArgs[srcArgs.length - 1].getComponentType(); totalCost += getObjectTransformationCost(sourceClass, destClass) + varArgsCost; } else { // This is typical varargs case. for (int i = destArgs.length - 1; i < srcArgs.length; i++) { final Class<?> srcClass = srcArgs[i]; totalCost += getObjectTransformationCost(srcClass, destClass) + varArgsCost; } } } return totalCost; }\n\n    ### Response:", "ground_truth": "Returns the sum of the object transformation cost for each class in the source argument list.\n\n@param srcArgs The source arguments\n@param executable The executable to calculate transformation costs for\n@return The total transformation cost", "predict": "Calculates the total transformation cost of executing the given program with arguments of the given types on the given destination objects of the given types."}, {"ID": 652, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def writeCommit(self, varBind, **context): \"\"\"Commit new value of the Managed Object Instance. Implements the second of the multi-step workflow of the SNMP SET command processing (:RFC:`1905#section-4.2.5`). The goal of the second phase is to actually modify the requested Managed Object Instance. When multiple Managed Objects Instances are modified at once (likely coming all in one SNMP PDU), each of them has to run through the second (*commit*) phase successfully for the system to transition to the third (*cleanup*) phase. If any single *commit* step fails, the system transitions into the *undo* state for each of Managed Objects Instances being processed at once. The role of this object in the MIB tree is non-terminal. It does not access the actual Managed Object Instance, but just traverses one level down the MIB tree and hands off the query to the underlying objects. Parameters ---------- varBind: :py:class:`~pysnmp.smi.rfc1902.ObjectType` object representing new Managed Object Instance value to set Other Parameters ---------------- \\*\\*context: Query parameters: * `cbFun` (callable) - user-supplied callable that is invoked to pass the new value of the Managed Object Instance or an error. Notes ----- The callback functions (e.g. `cbFun`) have the same signature as this method where `varBind` contains the new Managed Object Instance value. In case of an error, the `error` key in the `context` dict will contain an exception object. \"\"\" name, val = varBind (debug.logger & debug.FLAG_INS and debug.logger('%s: writeCommit(%s, %r)' % (self, name, val))) cbFun = context['cbFun'] instances = context['instances'].setdefault(self.name, {self.ST_CREATE: {}, self.ST_DESTROY: {}}) idx = context['idx'] if idx in instances[self.ST_CREATE]: self.createCommit(varBind, **context) return if idx in instances[self.ST_DESTROY]: self.destroyCommit(varBind, **context) return try: node = self.getBranch(name, **context) except (error.NoSuchInstanceError, error.NoSuchObjectError) as exc: cbFun(varBind, **dict(context, error=exc)) else: node.writeCommit(varBind, **context)\n\n    ### Response: Commit new value of the Managed Object Instance.\n\n        Implements the second of the multi-step workflow of the SNMP SET\n        command processing (:RFC:`1905#section-4.2.5`).\n\n        The goal of the second phase is to actually modify the requested Managed\n        Object Instance. When multiple Managed Objects Instances are modified at\n        once (likely coming all in one SNMP PDU), each of them has to run through\n        the second (*commit*) phase successfully for the system to transition to\n        the third (*cleanup*) phase. If any single *commit* step fails, the system\n        transitions into the *undo* state for each of Managed Objects Instances\n        being processed at once.\n\n        The role of this object in the MIB tree is non-terminal. It does not\n        access the actual Managed Object Instance, but just traverses one level\n        down the MIB tree and hands off the query to the underlying objects.\n\n        Parameters\n        ----------\n        varBind: :py:class:`~pysnmp.smi.rfc1902.ObjectType` object representing\n            new Managed Object Instance value to set\n\n        Other Parameters\n        ----------------\n        \\*\\*context:\n\n            Query parameters:\n\n            * `cbFun` (callable) - user-supplied callable that is invoked to\n              pass the new value of the Managed Object Instance or an error.\n\n        Notes\n        -----\n        The callback functions (e.g. `cbFun`) have the same signature as this\n        method where `varBind` contains the new Managed Object Instance value.\n\n        In case of an error, the `error` key in the `context` dict will contain\n        an exception object..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static float getObjectTransformationCost(Class<?> srcClass, final Class<?> destClass) { if (destClass.isPrimitive()) { return getPrimitivePromotionCost(srcClass, destClass); } float cost = 0.0f; while (srcClass != null && !destClass.equals(srcClass)) { if (destClass.isInterface() && ClassUtils.isAssignable(srcClass, destClass)) { // slight penalty for interface match. // we still want an exact match to override an interface match, // but // an interface match should override anything where we have to // get a superclass. cost += 0.25f; break; } cost++; srcClass = srcClass.getSuperclass(); } /* * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if (srcClass == null) { cost += 1.5f; } return cost; }\n\n    ### Response:", "ground_truth": "Gets the number of steps required needed to turn the source class into the destination class.\nThis represents the number of steps in the object hierarchy graph.\n\n@param srcClass The source class\n@param destClass The destination class\n@return The cost of transforming an object", "predict": "Get the transformation cost of converting objects of the source\n    class to objects of the destclass. The transformation cost comprises of\n    several steps :\n    - If destClass is a superclass of the sourceClass, add 0.25 to\n    transformation cost\n    - If destClass is an Interface of sourceClass, add 0.25 to\n    transformation cost\n    - Finally, if destClass is the sourceClass itself, add 0.5 to\n    transformation cost\n    Finally, add additional penalty of 0.5 if destClass is null, to\n    transformation cost\n    Returns :float The transformation cost of converting objects of the sourceClass to objects of destClass"}, {"ID": 653, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function onWithoutAssert($page) { $this->page = $page; // Here we will set the page elements on the resolver instance, which will allow // the developer to access short-cuts for CSS selectors on the page which can // allow for more expressive navigation and interaction with all the pages. $this->resolver->pageElements(array_merge( $page::siteElements(), $page->elements() )); return $this; }\n\n    ### Response: Set the current page object without executing the assertions.\n\n@param  mixed  $page\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String at(String key, Object... args) { return messagesApi.get(lang, key, args); }\n\n    ### Response:", "ground_truth": "Get the message at the given key.\n\nUses `java.text.MessageFormat` internally to format the message.\n\n@param key the message key\n@param args the message arguments\n@return the formatted message or a default rendering if the key wasn't defined", "predict": "Retrieves a translated message given the source, key, and arguments."}, {"ID": 654, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def text(params = {}) # TODO: some helper for key transformation for two supported formats k = key.split('.') k.unshift('activity') if k.first != 'activity' k = k.join('.') I18n.t(k, parameters.merge(params) || {}) end\n\n    ### Response: Virtual attribute returning text description of the activity\n using the activity's key to translate using i18n..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String at(List<String> keys, Object... args) { return messagesApi.get(lang, keys, args); }\n\n    ### Response:", "ground_truth": "Get the message at the first defined key.\n\nUses `java.text.MessageFormat` internally to format the message.\n\n@param keys the messages keys\n@param args the message arguments\n@return the formatted message or a default rendering if the key wasn't defined", "predict": "Translation of arbitrary string values given by arguments from the given source locale to the target locale"}, {"ID": 655, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function loadXmlFile(string $xmlFile): SimpleXMLElement { $xmlContent = (new FileReader($xmlFile))->read(); $xml = simplexml_load_string($xmlContent); if (!($xml instanceof SimpleXMLElement)) { $message = \"Error loading XML file: $xmlFile\"; $this->log($message, Project::MSG_ERR); throw new BuildException($message); } return $xml; }\n\n    ### Response: Load XML content from a file\n\n@param string $xmlFile XML or XSLT file\n\n@return \\SimpleXMLElement.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Database createFrom( String driver, String url, Map<String, ? extends Object> config) { return createFrom(\"default\", driver, url, config); }\n\n    ### Response:", "ground_truth": "Create a pooled database named \"default\" with the given configuration.\n\n@param driver the database driver class\n@param url the database url\n@param config a map of extra database configuration\n@return a configured database", "predict": "Creates and returns an instance of Database from the given url and configuration"}, {"ID": 656, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Set<Annotation> filterInterceptorBindings(BeanManagerImpl beanManager, Collection<Annotation> annotations) { Set<Annotation> interceptorBindings = new InterceptorBindingSet(beanManager); for (Annotation annotation : annotations) { if (beanManager.isInterceptorBinding(annotation.annotationType())) { interceptorBindings.add(annotation); } } return interceptorBindings; }\n\n    ### Response: Extracts a set of interceptor bindings from a collection of annotations.\n@param beanManager\n@param annotations\n@return.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ParallelSorter create(Object[] arrays) { Generator gen = new Generator(); gen.setArrays(arrays); return gen.create(); }\n\n    ### Response:", "ground_truth": "Create a new ParallelSorter object for a set of arrays. You may\nsort the arrays multiple times via the same ParallelSorter object.\n@param arrays An array of arrays to sort. The arrays may be a mix\nof primitive and non-primitive types, but should all be the same\nlength.\n@param loader ClassLoader for generated class, uses \"current\" if null", "predict": "Creates and returns an instance of ParallelSorter using the given arrays of objects to sort simultaneously."}, {"ID": 657, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function execute($key, $value, $ini) { $found = $this->findValue($key, $ini); if ($this->getCast()->castValue($found) <= $this->getCast()->castValue($value)) { return false; } return true; }\n\n    ### Response: Execute the \"greater than\" operation\nIf the value and the ini setting isn't greater than the value\n\n@param string $key Key name of setting\n@param string $value Value to match on\n@param array $ini Current php.ini settings\n@return boolean Pass/fail of operation.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void quickSort(int index, int lo, int hi, Comparator cmp) { chooseComparer(index, cmp); super.quickSort(lo, hi - 1); }\n\n    ### Response:", "ground_truth": "Sort the arrays using the quicksort algorithm.\n@param index array (column) to sort by\n@param lo starting array index (row), inclusive\n@param hi ending array index (row), exclusive\n@param cmp Comparator to use if the specified column is non-primitive", "predict": "Initiates quicksort by first identifying the comparer and then invokes the super method to split the given range of values in two parts and recursing on each of these"}, {"ID": 658, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function getValidator() { if (null === $this->validator) { $hook = function ($uri) { return $this->uriToFile($uri); }; $this->validator = SchemaValidator::buildDefault($hook); } return $this->validator; }\n\n    ### Response: Get schema validator.\n\n@return SchemaValidator.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void mergeSort(int index, int lo, int hi, Comparator cmp) { chooseComparer(index, cmp); super.mergeSort(lo, hi - 1); }\n\n    ### Response:", "ground_truth": "Sort the arrays using an in-place merge sort.\n@param index array (column) to sort by\n@param lo starting array index (row), inclusive\n@param hi ending array index (row), exclusive\n@param cmp Comparator to use if the specified column is non-primitive", "predict": "Merges two partial partial sorts produced by insertion and selection sorts into a partial sort of the given keys and values in the given range of indices and uses the given comparator for merging partial sorts produced by the given comparators of the partial partial sorts produced by insertion and selection sorts of the given keys and values in the given range of indices to produce a partial sort of the given keys and values in the given range of indices of the given partial partial sorts produced by insertion and selection sorts of the given keys and values in the given range of indices of the given partial partial sorts produced by insertion and selection sorts of the given keys and values in the given range of indices of the given partial partial sorts produced by insertion and selection sorts of the given keys and values in the given range of indices of the given partial partial sorts produced by insertion and selection sorts of the given keys and values in the given range of indices of the given partial partial sorts produced by insertion and selection sorts of the given keys and values in the given range of indices of the given partial"}, {"ID": 659, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function progressBarCommand(): void { $i = 0; $total = 120; $bar = new ProgressBar(); $bar->start(120); while ($i <= $total) { $bar->advance(); usleep(50000); $i++; } $bar->finish(); }\n\n    ### Response: a progress bar example show, by class ProgressBar\n@throws \\LogicException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object invoke(Object obj, Object[] args) throws Throwable { try { init(); FastClassInfo fci = fastClassInfo; return fci.f1.invoke(fci.i1, obj, args); } catch (InvocationTargetException e) { throw e.getTargetException(); } catch (IllegalArgumentException e) { if (fastClassInfo.i1 < 0) throw new IllegalArgumentException(\"Protected method: \" + sig1); throw e; } }\n\n    ### Response:", "ground_truth": "Invoke the original method, on a different object of the same type.\n@param obj the compatible object; recursion will result if you use the object passed as the first\nargument to the MethodInterceptor (usually not what you want)\n@param args the arguments passed to the intercepted method; you may substitute a different\nargument array as long as the types are compatible\n@see MethodInterceptor#intercept\n@throws Throwable the bare exceptions thrown by the called method are passed through\nwithout wrapping in an InvocationTargetException", "predict": "Fast Class Invoke, Fast Class Info, Fast Class Invoke Exception, Illegal Argument Exception, Illegal Argument Exception Exception, Illegal Argument Exception Exception Exception, Illegal Argument Exception Exception Exception, Illegal Argument Exception Exception Exception, Illegal Argument Exception Exception Exception, Illegal Argument Exception Exception Exception, Illegal Argument Exception Exception Exception, Illegal Argument Exception Exception Exception, Illegal Argument Exception Exception Exception, Illegal Argument Exception Exception Exception, Illegal Argument Exception Exception Exception, Illegal Argument Exception Exception Exception, Illegal Argument Exception Exception Exception, Illegal Argument Exception Exception Exception, Illegal Argument Exception Exception Exception, Illegal Argument Exception Exception Exception, Illegal Argument Exception Exception Exception, Illegal Argument Exception Exception Exception, Illegal Argument Exception Exception Exception, Illegal Argument Exception Exception Exception, Illegal Argument Exception Exception Exception, Illegal Argument Exception Exception Exception, Illegal Argument Exception Exception Exception, Illegal Argument Exception Exception Exception, Illegal Argument Exception Exception Exception, Illegal Argument Exception Exception Exception, Illegal Argument Exception Exception Exception, Illegal Argument Exception Exception Exception, Il"}, {"ID": 660, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(e) { // Stores the `keycode` value in a local variable var currentKey = self._keyMappings[e.keyCode], keydownMethod = self._keydownMethods()[currentKey]; if(keydownMethod) { keydownMethod(); if(self.options[\"keydownOpen\"] && (currentKey === \"up\" || currentKey === \"down\")) { self.open(); } } if(keydownMethod && currentKey !== \"tab\") { e.preventDefault(); } }\n\n    ### Response: `keydown` event with the `selectBoxIt` namespace.  Catches all user keyboard navigations.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void cast_numeric(Type from, Type to) { if (from != to) { if (from == Type.DOUBLE_TYPE) { if (to == Type.FLOAT_TYPE) { mv.visitInsn(Constants.D2F); } else if (to == Type.LONG_TYPE) { mv.visitInsn(Constants.D2L); } else { mv.visitInsn(Constants.D2I); cast_numeric(Type.INT_TYPE, to); } } else if (from == Type.FLOAT_TYPE) { if (to == Type.DOUBLE_TYPE) { mv.visitInsn(Constants.F2D); } else if (to == Type.LONG_TYPE) { mv.visitInsn(Constants.F2L); } else { mv.visitInsn(Constants.F2I); cast_numeric(Type.INT_TYPE, to); } } else if (from == Type.LONG_TYPE) { if (to == Type.DOUBLE_TYPE) { mv.visitInsn(Constants.L2D); } else if (to == Type.FLOAT_TYPE) { mv.visitInsn(Constants.L2F); } else { mv.visitInsn(Constants.L2I); cast_numeric(Type.INT_TYPE, to); } } else { if (to == Type.BYTE_TYPE) { mv.visitInsn(Constants.I2B); } else if (to == Type.CHAR_TYPE) { mv.visitInsn(Constants.I2C); } else if (to == Type.DOUBLE_TYPE) { mv.visitInsn(Constants.I2D); } else if (to == Type.FLOAT_TYPE) { mv.visitInsn(Constants.I2F); } else if (to == Type.LONG_TYPE) { mv.visitInsn(Constants.I2L); } else if (to == Type.SHORT_TYPE) { mv.visitInsn(Constants.I2S); } } } }\n\n    ### Response:", "ground_truth": "Casts from one primitive numeric type to another", "predict": "Cast numeric from and to objects to appropriate type and store into appropriate objects for later use in the program."}, {"ID": 661, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def authenticatedUserForKey(self, key): \"\"\" Find a persistent session for a user. @type key: L{bytes} @param key: The persistent session identifier. @rtype: L{bytes} or C{None} @return: The avatar ID the session belongs to, or C{None} if no such session exists. \"\"\" session = self.store.findFirst( PersistentSession, PersistentSession.sessionKey == key) if session is None: return None else: session.renew() return session.authenticatedAs\n\n    ### Response: Find a persistent session for a user.\n\n        @type key: L{bytes}\n        @param key: The persistent session identifier.\n\n        @rtype: L{bytes} or C{None}\n        @return: The avatar ID the session belongs to, or C{None} if no such\n            session exists..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void load_arg(int index) { load_local(state.argumentTypes[index], state.localOffset + skipArgs(index)); }\n\n    ### Response:", "ground_truth": "Pushes the specified argument of the current method onto the stack.\n@param index the zero-based index into the argument list", "predict": "Loads an argument from the state machine into the specified local."}, {"ID": 662, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def update(self, *sources, follow_symlinks: bool=False, maximum_depth: int=20): \"\"\"Add one or more ClassFile sources to the class loader. If a given source is a directory path, it is traversed up to the maximum set depth and all files under it are added to the class loader lookup table. If a given source is a .jar or .zip file it will be opened and the file index added to the class loader lookup table. If a given source is a ClassFile or a subclass, it's immediately added to the class loader lookup table and the class cache. :param sources: One or more ClassFile sources to be added. :param follow_symlinks: True if symlinks should be followed when traversing filesystem directories. [default: False] :param maximum_depth: The maximum sub-directory depth when traversing filesystem directories. If set to `None` no limit will be enforced. [default: 20] \"\"\" for source in sources: if isinstance(source, self.klass): self.path_map[source.this.name.value] = source self.class_cache[source.this.name.value] = source continue # Explicit cast to str to support Path objects. source = str(source) if source.lower().endswith(('.zip', '.jar')): zf = ZipFile(source, 'r') self.path_map.update(zip(zf.namelist(), repeat(zf))) elif os.path.isdir(source): walker = _walk( source, follow_links=follow_symlinks, maximum_depth=maximum_depth ) for root, dirs, files in walker: for file_ in files: path_full = os.path.join(root, file_) path_suffix = os.path.relpath(path_full, source) self.path_map[path_suffix] = path_full\n\n    ### Response: Add one or more ClassFile sources to the class loader.\n\n        If a given source is a directory path, it is traversed up to the\n        maximum set depth and all files under it are added to the class loader\n        lookup table.\n\n        If a given source is a .jar or .zip file it will be opened and the\n        file index added to the class loader lookup table.\n\n        If a given source is a ClassFile or a subclass, it's immediately\n        added to the class loader lookup table and the class cache.\n\n        :param sources: One or more ClassFile sources to be added.\n        :param follow_symlinks: True if symlinks should be followed when\n                                traversing filesystem directories.\n                                [default: False]\n        :param maximum_depth: The maximum sub-directory depth when traversing\n                              filesystem directories. If set to `None` no limit\n                              will be enforced. [default: 20].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void emit_field(int opcode, Type ctype, String name, Type ftype) { mv.visitFieldInsn(opcode, ctype.getInternalName(), name, ftype.getDescriptor()); }\n\n    ### Response:", "ground_truth": "package-protected for EmitUtils, try to fix", "predict": "Emit an instruction to add or modify the contents of an existing field of an object of the given type with the given name to the instruction stream."}, {"ID": 663, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function resolveViewHelperName($namespaceIdentifier, $methodIdentifier) { $explodedViewHelperName = explode('.', $methodIdentifier); if (count($explodedViewHelperName) > 1) { $className = implode('\\\\', array_map('ucfirst', $explodedViewHelperName)); } else { $className = ucfirst($explodedViewHelperName[0]); } $className .= 'ViewHelper'; $name = $this->namespaces[$namespaceIdentifier] . '\\\\' . $className; return $name; }\n\n    ### Response: Resolve a viewhelper name.\n\n@param string $namespaceIdentifier Namespace identifier for the view helper.\n@param string $methodIdentifier Method identifier, might be hierarchical like \"link.url\"\n@return string The fully qualified class name of the viewhelper.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void zero_or_null(Type type) { if (TypeUtils.isPrimitive(type)) { switch (type.getSort()) { case Type.DOUBLE: push(0d); break; case Type.LONG: push(0L); break; case Type.FLOAT: push(0f); break; case Type.VOID: aconst_null(); default: push(0); } } else { aconst_null(); } }\n\n    ### Response:", "ground_truth": "Pushes a zero onto the stack if the argument is a primitive class, or a null otherwise.", "predict": "Zero or Null"}, {"ID": 664, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (m *activeDeadlineHandler) ShouldEvict(pod *v1.Pod) lifecycle.ShouldEvictResponse { if !m.pastActiveDeadline(pod) { return lifecycle.ShouldEvictResponse{Evict: false} } m.recorder.Eventf(pod, v1.EventTypeNormal, reason, message) return lifecycle.ShouldEvictResponse{Evict: true, Reason: reason, Message: message} }\n\n    ### Response: // ShouldEvict returns true if the pod is past its active deadline.\n// It dispatches an event that the pod should be evicted if it is past its deadline..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void unbox_or_zero(Type type) { if (TypeUtils.isPrimitive(type)) { if (type != Type.VOID_TYPE) { Label nonNull = make_label(); Label end = make_label(); dup(); ifnonnull(nonNull); pop(); zero_or_null(type); goTo(end); mark(nonNull); unbox(type); mark(end); } } else { checkcast(type); } }\n\n    ### Response:", "ground_truth": "Unboxes the object on the top of the stack. If the object is null, the\nunboxed primitive value becomes zero.", "predict": "// This function extracts the contents of an Object or Null from its boxed or non-primitive form.\n// It extracts the contents of objects but zeroes objects of other types such as int, float, char and sets the contents of objects to null for other types such as string, boolean and void"}, {"ID": 665, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function () { var auth = E; // Add authentication method to URL if the same is requested. We do it this way because // this is how `postman-request` library accepts auth credentials in its proxy configuration. if (this.authenticate) { auth = (this.username || E); if (this.password) { auth += (COLON + (this.password || E)); } if (auth) { auth += AUTH_CREDENTIALS_SEPARATOR; } } return DEFAULT_PROTOCOL + PROTOCOL_HOST_SEPARATOR + auth + this.host + COLON + this.port; }\n\n    ### Response: Returns the proxy server url.\n\n@returns {String}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void process_array(CodeEmitter e, Type type, ProcessArrayCallback callback) { Type componentType = TypeUtils.getComponentType(type); Local array = e.make_local(); Local loopvar = e.make_local(Type.INT_TYPE); Label loopbody = e.make_label(); Label checkloop = e.make_label(); e.store_local(array); e.push(0); e.store_local(loopvar); e.goTo(checkloop); e.mark(loopbody); e.load_local(array); e.load_local(loopvar); e.array_load(componentType); callback.processElement(componentType); e.iinc(loopvar, 1); e.mark(checkloop); e.load_local(loopvar); e.load_local(array); e.arraylength(); e.if_icmp(e.LT, loopbody); }\n\n    ### Response:", "ground_truth": "Process an array on the stack. Assumes the top item on the stack\nis an array of the specified type. For each element in the array,\nputs the element on the stack and triggers the callback.\n@param type the type of the array (type.isArray() must be true)\n@param callback the callback triggered for each element", "predict": "Processes an array component of given type and invokes the callback for each element of the given array"}, {"ID": 666, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static double mean(Collection<? extends Number> values) { double sum = 0d; for (Number n : values) sum += n.doubleValue(); return sum / values.size(); }\n\n    ### Response: Returns the mean value of the collection of numbers.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static void nullcmp(CodeEmitter e, Label oneNull, Label bothNull) { e.dup2(); Label nonNull = e.make_label(); Label oneNullHelper = e.make_label(); Label end = e.make_label(); e.ifnonnull(nonNull); e.ifnonnull(oneNullHelper); e.pop2(); e.goTo(bothNull); e.mark(nonNull); e.ifnull(oneNullHelper); e.goTo(end); e.mark(oneNullHelper); e.pop2(); e.goTo(oneNull); e.mark(end); }\n\n    ### Response:", "ground_truth": "If both objects on the top of the stack are non-null, does nothing.\nIf one is null, or both are null, both are popped off and execution\nbranches to the respective label.\n@param oneNull label to branch to if only one of the objects is null\n@param bothNull label to branch to if both of the objects are null", "predict": "Null comparision function to compare objects of type Number to see if any of the objects in the given Collection is Null or not."}, {"ID": 667, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Waiter<DescribeStacksRequest> stackUpdateComplete() { return new WaiterBuilder<DescribeStacksRequest, DescribeStacksResult>() .withSdkFunction(new DescribeStacksFunction(client)) .withAcceptors(new StackUpdateComplete.IsUPDATE_COMPLETEMatcher(), new StackUpdateComplete.IsUPDATE_FAILEDMatcher(), new StackUpdateComplete.IsUPDATE_ROLLBACK_FAILEDMatcher(), new StackUpdateComplete.IsUPDATE_ROLLBACK_COMPLETEMatcher(), new StackUpdateComplete.IsValidationErrorMatcher()) .withDefaultPollingStrategy(new PollingStrategy(new MaxAttemptsRetryStrategy(120), new FixedDelayStrategy(30))) .withExecutorService(executorService).build(); }\n\n    ### Response: Builds a StackUpdateComplete waiter by using custom parameters waiterParameters and other parameters defined in\nthe waiters specification, and then polls until it determines whether the resource entered the desired state or\nnot, where polling criteria is bound by either default polling strategy or custom polling strategy..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Map/*<Signature, Signature>*/resolveAll() { Map resolved = new HashMap(); for (Iterator entryIter = declToBridge.entrySet().iterator(); entryIter.hasNext(); ) { Map.Entry entry = (Map.Entry) entryIter.next(); Class owner = (Class) entry.getKey(); Set bridges = (Set) entry.getValue(); try { InputStream is = classLoader.getResourceAsStream(owner.getName().replace('.', '/') + \".class\"); if (is == null) { return resolved; } try { new ClassReader(is) .accept(new BridgedFinder(bridges, resolved), ClassReader.SKIP_FRAMES | ClassReader.SKIP_DEBUG); } finally { is.close(); } } catch (IOException ignored) {} } return resolved; }\n\n    ### Response:", "ground_truth": "Finds all bridge methods that are being called with invokespecial &\nreturns them.", "predict": "Resolves all the signature bridges of the given signature and populates the Map resolved to include the corresponding signature bridge of each signature bridge found in declToBridge Map."}, {"ID": 668, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function addHeader($header){ $headerO=$header; if(\\is_string($header)){ $headerO=new HtmlSemDoubleElement(\"header-\".$this->identifier,\"div\"); $headerO->setClass(\"header\"); $headerO->setContent($header); } return $this->addContent($headerO,true); }\n\n    ### Response: Adds an header to the message\n@param string|HtmlSemDoubleElement $header\n@return \\Ajax\\semantic\\html\\collections\\HtmlMessage.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void getMethods(Class superclass, Class[] interfaces, List methods) { getMethods(superclass, interfaces, methods, null, null); }\n\n    ### Response:", "ground_truth": "Finds all of the methods that will be extended by an\nEnhancer-generated class using the specified superclass and\ninterfaces. This can be useful in building a list of Callback\nobjects. The methods are added to the end of the given list.  Due\nto the subclassing nature of the classes generated by Enhancer,\nthe methods are guaranteed to be non-static, non-final, and\nnon-private. Each method signature will only occur once, even if\nit occurs in multiple classes.\n@param superclass the class that will be extended, or null\n@param interfaces the list of interfaces that will be implemented, or null\n@param methods the list into which to copy the applicable methods", "predict": "Get all public methods of the given objects recursively\n    @param Class superclass The superclass of objects to search\n    @param Class[] interfaces The interfaces of objects to search\n    @param List<Method> objects The objects to search recursively\n    @param Map<String, Class[]> searchSuggestion Suggestion of search pattern\n    @param Map<String, Class[]> searchShorcut Suggestion of search pattern\n    @return The found objects"}, {"ID": 669, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def apply_definitions(node) # Apply definition check to all of the node's children process_definitions = proc do |children| children.each do |child| # Check if we have a definition is_definition = if child[@value] == @current_def child[@options][:recursive] else @definitions.key?(child[@value]) end # Set child as a defined node child[@type] = :def if is_definition # Recursively apply definitions to child nodes apply_definitions child if child[@children] end end # Apply definitions to each case of the control node if [:if, :unless, :case].include? node[@type] node[@children].each do |array| process_definitions[array] end # Apply definition to all of the node's children else process_definitions[node[@children]] end end\n\n    ### Response: Set each node as a defined node if a definition exists with the given\n node name, unless we're inside a definition with the same name as the node\n because we want to avoid recursion.\n\n @param node [Node] Input Node to checked for existence of definitions.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void filterConstructors(Class sc, List constructors) { CollectionUtils.filter(constructors, new VisibilityPredicate(sc, true)); if (constructors.size() == 0) throw new IllegalArgumentException(\"No visible constructors in \" + sc); }\n\n    ### Response:", "ground_truth": "Filter the list of constructors from the superclass. The\nconstructors which remain will be included in the generated\nclass. The default implementation is to filter out all private\nconstructors, but subclasses may extend Enhancer to override this\nbehavior.\n@param sc the superclass\n@param constructors the list of all declared constructors from the superclass\n@throws IllegalArgumentException if there are no non-private constructors", "predict": "Filters visible public and non-public constructor of the given class to the given list of constructors"}, {"ID": 670, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Void visitParameterizedType(ParameterizedTypeTree tree, VisitorState visitorState) { VisitorState state = processMatchers( parameterizedTypeMatchers, tree, ParameterizedTypeTreeMatcher::matchParameterizedType, visitorState); return super.visitParameterizedType(tree, state); }\n\n    ### Response: generated by javac to implement autoboxing. We are only interested in source-level constructs..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setSuperclass(Class superclass) { if (superclass != null && superclass.equals(Object.class)) { superclass = null; } this.superclass = superclass; }\n\n    ### Response:", "ground_truth": "Set the class which the generated class will extend. The class\nmust not be declared as final, and must have a non-private\nno-argument constructor.\n@param superclass class to extend, or null to extend Object", "predict": "Override the default behavior of the Object class to avoid unnecessary boxing and unboxing of objects during assignment by declaring the superclass during object instantiation.."}, {"ID": 671, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def coordinate_tensor(shape, axis): \"\"\"Return a tensor with given shape containing coordinate along given axis. Args: shape: a Tensor representing the shape of the output Tensor axis: an integer Returns: A tensor with shape shape and type tf.int32, where each elements its coordinate along the given axis. \"\"\" if axis < 0: axis = tf.size(shape) + axis # Convert to positive for the one_hot indice r = tf.range(shape[axis]) r_shape = tf.one_hot( axis, tf.size(shape), on_value=-1, off_value=1, dtype=tf.int32) return tf.zeros(shape, dtype=tf.int32) + tf.reshape(r, r_shape)\n\n    ### Response: Return a tensor with given shape containing coordinate along given axis.\n\n  Args:\n    shape: a Tensor representing the shape of the output Tensor\n    axis: an integer\n\n  Returns:\n    A tensor with shape shape and type tf.int32, where each elements its\n    coordinate along the given axis..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void getField(String[] names) throws Exception { final CodeEmitter e = begin_method(Constants.ACC_PUBLIC, PROVIDER_GET, null); e.load_this(); e.load_arg(0); EmitUtils.string_switch(e, names, Constants.SWITCH_STYLE_HASH, new ObjectSwitchCallback() { public void processCase(Object key, Label end) { Type type = (Type)fields.get(key); e.getfield((String)key); e.box(type); e.return_value(); } public void processDefault() { e.throw_exception(ILLEGAL_ARGUMENT_EXCEPTION, \"Unknown field name\"); } }); e.end_method(); }\n\n    ### Response:", "ground_truth": "to avoid JVM hashcode implementation incompatibilities", "predict": "\n    Private void getField(String[] names) throws Exception\n    {\n      // Begin emitting code\n      CodeEmitter e = begin_method(ACC_PUBLIC, PROVIDER_GET, null);\n      // Load this\n      e.load_this();\n      // Load argument\n      e.load_arg(0);\n      // Use string switch to iterate over fields\n      EmitUtils.string_switch(e, names, Constants.SWITCH_STYLE_HASH,\n              new ObjectSwitchCallback()\n              {\n                public void processCase(Object key, Label end)\n                {\n                    Type type = (Type)fields.get(key);\n                    // Getfield for given argument\n                    e.getfield((String)key);\n                    // Box given argument\n                    e.box(type);\n                    // Return Value\n                    e.return_value();\n                    // Reach default"}, {"ID": 672, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static public void addConfigurator(ClientConfigurator<?> configurator) { if (!HttpClientConfigurator.class.isInstance(configurator) && !OkHttpClientConfigurator.class.isInstance(configurator)) { throw new IllegalArgumentException( \"Configurator must implement OkHttpClientConfigurator\" ); } clientConfigurator = configurator; }\n\n    ### Response: Adds a listener that provides custom configuration when a communication library\nis created.\n@see com.marklogic.client.extra.okhttpclient.OkHttpClientConfigurator\n@param configurator\tthe listener for configuring the communication library.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void add(Method method) { add(ReflectUtils.getSignature(method), ReflectUtils.getExceptionTypes(method)); }\n\n    ### Response:", "ground_truth": "Add a method signature to the interface. The method modifiers are ignored,\nsince interface methods are by definition abstract and public.\n@param method the method to add to the interface", "predict": "Allows the listener to add listener for specified method of specified object to listener listener. The listener\nreceive details about signature and exception of specified method of specified objects to add for listener listener"}, {"ID": 673, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function enough_positionals( $args ) { $positional = $this->query_spec( array( 'type' => 'positional', 'optional' => false, ) ); return count( $args ) >= count( $positional ); }\n\n    ### Response: Check whether there are enough positional arguments.\n\n@param array $args Positional arguments.\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int cardinality() { int w = value; int c = 0; while (w != 0) { c += T[w & 255]; w >>= 8; } return c; }\n\n    ### Response:", "ground_truth": "If bit 31 is set then this method results in an infinite loop.\n\n@return the number of bits set to true in this TinyBitSet.", "predict": "Calculate the total number of values of the set of values described by the input array."}, {"ID": 674, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _run(self, strategy, parameters=None): ''' Run single trial of MAB strategy. Parameters ---------- strategy : function parameters : dict Returns ------- None ''' choice = self.run_strategy(strategy, parameters) self.choices.append(choice) payout = self.bandits.pull(choice) if payout is None: print('Trials exhausted. No more values for bandit', choice) return None else: self.wins[choice] += payout self.pulls[choice] += 1\n\n    ### Response: Run single trial of MAB strategy.\n\n        Parameters\n        ----------\n        strategy : function\n        parameters : dict\n\n        Returns\n        -------\n        None.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setNamingPolicy(NamingPolicy namingPolicy) { if (namingPolicy == null) namingPolicy = DefaultNamingPolicy.INSTANCE; this.namingPolicy = namingPolicy; }\n\n    ### Response:", "ground_truth": "Override the default naming policy.\n@see DefaultNamingPolicy\n@param namingPolicy the custom policy, or null to use the default", "predict": "Allows you to customize the naming of objects in your program by setting a naming policy for the objects of your program to adhere to"}, {"ID": 675, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_last_month_range(): \"\"\" Gets the date for the first and the last day of the previous complete month. :returns: A tuple containing two date objects, for the first and the last day of the month respectively. \"\"\" today = date.today() # Get the last day for the previous month. end_of_last_month = snap_to_beginning_of_month(today) - timedelta(days=1) start_of_last_month = snap_to_beginning_of_month(end_of_last_month) return (start_of_last_month, end_of_last_month)\n\n    ### Response: Gets the date for the first and the last day of the previous complete month.\n\n    :returns: A tuple containing two date objects, for the first and the last day of the month\n              respectively..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Method[] findMethods(String[] namesAndDescriptors, Method[] methods) { Map map = new HashMap(); for (int i = 0; i < methods.length; i++) { Method method = methods[i]; map.put(method.getName() + Type.getMethodDescriptor(method), method); } Method[] result = new Method[namesAndDescriptors.length / 2]; for (int i = 0; i < result.length; i++) { result[i] = (Method)map.get(namesAndDescriptors[i * 2] + namesAndDescriptors[i * 2 + 1]); if (result[i] == null) { // TODO: error? } } return result; }\n\n    ### Response:", "ground_truth": "used by MethodInterceptorGenerated generated code", "predict": "\n    Finds methods given names and descriptors of the given array of string and maps these names and descriptors to the corresponding method objects in the given array of method objects. It then creates an output array of these objects with lengths corresponding to the given names and descriptors array of string to divide up the returned objects evenly to match the given names and descriptions array of string to half of the given objects' lengths to divide up the returned objects evenly to match the given names and descriptions array of string to half of the objects' lengths creates an output array of these objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects of objects"}, {"ID": 676, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function send() { if (is_null($this->Transport)) { throw new TransportException(); } $this->Transport->setRequest($this); return $this->Transport->makeHttpRequest($this); }\n\n    ### Response: Send request data method\n@return string request execution result\n@throws TransportException in case of undefined Transport.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Path resolve(final Path base, String child) { if (StringUtil.startsWithChar(child, File.separatorChar)) { child = child.substring(1); } return base.resolve(child); }\n\n    ### Response:", "ground_truth": "Resolves subpath in safer way. For some reason, if child starts with\na separator it gets resolved as a full path, ignoring the base.\nThis method acts different.", "predict": "Resolve child path given the base path method\nResolves child path given the base path"}, {"ID": 677, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function loadTrashItem($trashItemId) { return new Values\\RestTrashItem( $trashItem = $this->trashService->loadTrashItem($trashItemId), $this->locationService->getLocationChildCount($trashItem) ); }\n\n    ### Response: Returns the trash item given by id.\n\n@param $trashItemId\n\n@return \\eZ\\Publish\\Core\\REST\\Server\\Values\\RestTrashItem.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String readString(final Path path) throws IOException { try (BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) { StringWriter writer = new StringWriter(); // flush & close not needed for StringWriter-instance StreamUtil.copy(reader, writer); return writer.toString(); } }\n\n    ### Response:", "ground_truth": "Reads path content.", "predict": "Reads contents of the given path as UTF8 string."}, {"ID": 678, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def repaint return unless @repaint_required _lrow = @lrow || @row # the next was nice, but in some cases this goes out of screen. and the container # only sets row and col for whatever is added, it does not know that lcol has to be # taken into account #_lcol = @lcol || (@col - @label.length - 2) unless @lcol @lcol = @col @col = @lcol + @label.length + 2 end _lcol = @lcol @graphic = @form.window if @graphic.nil? lcolor = @label_color_pair || $datacolor # this should be the same color as window bg XXX lattr = @label_attr || NORMAL @graphic.printstring _lrow, _lcol, @label, lcolor, lattr ##c += @label.length + 2 #@col_offset = c-@col # required so cursor lands in right place super end\n\n    ### Response: label of field  Unused earlier, now will print.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpRequest host(final String host) { this.host = host; if (headers.contains(HEADER_HOST)) { headerOverwrite(HEADER_HOST, host); } return this; }\n\n    ### Response:", "ground_truth": "Sets request host name.", "predict": "Override header for given hostname\n\n    "}, {"ID": 679, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def setNreps(self, nreps): \"\"\"Sets the number of reps before the raster plot resets\"\"\" for plot in self.responsePlots.values(): plot.setNreps(nreps)\n\n    ### Response: Sets the number of reps before the raster plot resets.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static HttpRequest create(final String method, final String destination) { return new HttpRequest() .method(method.toUpperCase()) .set(destination); }\n\n    ### Response:", "ground_truth": "Generic request builder, usually used when method is a variable.\nOtherwise, use one of the other static request builder methods.", "predict": "Creates an HTTP request with the given method and destination."}, {"ID": 680, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function tree($config = array()) { $config = new KObjectConfigJson($config); $config->append(array( 'debug' => JFactory::getApplication()->getCfg('debug') )); return parent::tree($config); }\n\n    ### Response: Loads the Koowa customized jQtree behavior and renders a sidebar-nav list useful in split views\n\n@see    http://mbraak.github.io/jqTree/\n\n@note   If no 'element' option is passed, then only assets will be loaded.\n\n@param  array|KObjectConfig $config\n@throws InvalidArgumentException\n@return string    The html output.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static HttpRequest connect(final String destination) { return new HttpRequest() .method(HttpMethod.CONNECT) .set(destination); }\n\n    ### Response:", "ground_truth": "Builds a CONNECT request.", "predict": "Connects to the given destination and send its status code to the client\n\nSee HttpStatus for details of the codes returned\n\nRequest:      GET /destination\nHTTP Status: 200 OK"}, {"ID": 681, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _get_client_and_key(url, user, password, verbose=0): ''' Return the client object and session key for the client ''' session = {} session['client'] = six.moves.xmlrpc_client.Server(url, verbose=verbose, use_datetime=True) session['key'] = session['client'].auth.login(user, password) return session\n\n    ### Response: Return the client object and session key for the client.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static HttpRequest get(final String destination) { return new HttpRequest() .method(HttpMethod.GET) .set(destination); }\n\n    ### Response:", "ground_truth": "Builds a GET request.", "predict": "Get the specified HTTP resource, optionally passing arguments to the GET method of the resource."}, {"ID": 682, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *Service) TeamMemberListByMember(ctx context.Context, teamIdentity string, teamMemberIdentity string, lr *ListRange) (TeamMemberListByMemberResult, error) { var teamMember TeamMemberListByMemberResult return teamMember, s.Get(ctx, &teamMember, fmt.Sprintf(\"/teams/%v/members/%v/apps\", teamIdentity, teamMemberIdentity), nil, lr) }\n\n    ### Response: // List the apps of a team member..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static HttpRequest post(final String destination) { return new HttpRequest() .method(HttpMethod.POST) .set(destination); }\n\n    ### Response:", "ground_truth": "Builds a POST request.", "predict": "// Creates a HTTP request with method POST and destinatination given by parameter"}, {"ID": 683, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function store(CreateUploadRequest $request) { $input = $request->all(); $upload = $this->repository->create($input, null, $request->user()); $upload->load($request->getWith()); return $this->sendResponse($upload, 'Upload saved successfully.'); }\n\n    ### Response: Store a newly created Upload in storage.\n\n@param CreateUploadRequest $request\n@return JsonResponse.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static HttpRequest put(final String destination) { return new HttpRequest() .method(HttpMethod.PUT) .set(destination); }\n\n    ### Response:", "ground_truth": "Builds a PUT request.", "predict": "Stores or updates an existing resource at the given url with the given payload of arguments and parameters in the given request method."}, {"ID": 684, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def image_url(self): \"\"\"URL of a GIF image.\"\"\" return construct_api_url(self.input, 'image', self.resolvers, False, self.get3d, False, **self.kwargs)\n\n    ### Response: URL of a GIF image..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static HttpRequest patch(final String destination) { return new HttpRequest() .method(HttpMethod.PATCH) .set(destination); }\n\n    ### Response:", "ground_truth": "Builds a PATCH request.", "predict": "The HttpRequest patch method sends a PATCH request to the given destination."}, {"ID": 685, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def setting(key, default=None, expected_type=None, qsettings=None): \"\"\"Helper function to get a value from settings under InaSAFE scope. :param key: Unique key for setting. :type key: basestring :param default: The default value in case of the key is not found or there is an error. :type default: basestring, None, boolean, int, float :param expected_type: The type of object expected. :type expected_type: type :param qsettings: A custom QSettings to use. If it's not defined, it will use the default one. :type qsettings: qgis.PyQt.QtCore.QSettings :returns: The value of the key in the setting. :rtype: object \"\"\" if default is None: default = inasafe_default_settings.get(key, None) full_key = '%s/%s' % (APPLICATION_NAME, key) return general_setting(full_key, default, expected_type, qsettings)\n\n    ### Response: Helper function to get a value from settings under InaSAFE scope.\n\n    :param key: Unique key for setting.\n    :type key: basestring\n\n    :param default: The default value in case of the key is not found or there\n        is an error.\n    :type default: basestring, None, boolean, int, float\n\n    :param expected_type: The type of object expected.\n    :type expected_type: type\n\n    :param qsettings: A custom QSettings to use. If it's not defined, it will\n        use the default one.\n    :type qsettings: qgis.PyQt.QtCore.QSettings\n\n    :returns: The value of the key in the setting.\n    :rtype: object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static HttpRequest delete(final String destination) { return new HttpRequest() .method(HttpMethod.DELETE) .set(destination); }\n\n    ### Response:", "ground_truth": "Builds a DELETE request.", "predict": "The method deletes an asset to the given destination."}, {"ID": 686, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getResourcesBySourceName($sourceName) { // Getting source object first $source = $this->getSourceByName($sourceName); // Getting the data if ($source instanceof SourceInterface) { // Getting result iterator try { return $source->getContentIterator(); } catch (\\Exception $e) { throw new Exception\\SourceGetDataException( sprintf( 'Exception caught while getting the content for the following source object: %s', $source->toString() ) ); } } return null; }\n\n    ### Response: Returns an Iterator containing all the resources for the given source name\n\n@param string $sourceName the source name\n\n@throws \\Msl\\ResourceProxy\\Exception\\SourceGetDataException\n\n@return null|Iterator.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static HttpRequest head(final String destination) { return new HttpRequest() .method(HttpMethod.HEAD) .set(destination); }\n\n    ### Response:", "ground_truth": "Builds a HEAD request.", "predict": "The method sends a HTTP head request to the given destination."}, {"ID": 687, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def check_path(self, path): \"\"\" turns path into an absolute path and checks that it exists, then returns it as a string. \"\"\" path = os.path.abspath(path) if os.path.exists(path): return path else: utils.die(\"input file does not exists:\\n {}\".format(path))\n\n    ### Response: turns path into an absolute path and checks that it exists, then\n        returns it as a string..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static HttpRequest trace(final String destination) { return new HttpRequest() .method(HttpMethod.TRACE) .set(destination); }\n\n    ### Response:", "ground_truth": "Builds a TRACE request.", "predict": "generates an HTTP Trace request to the given destination."}, {"ID": 688, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function toArray($data, $rootKey = null, $isList = false, $includeHeading = true) { $rows = explode($this->lineTerminator, $data); if ($includeHeading) { $heading = array_shift($rows); $keys = explode($this->delimiter, $heading); } else { $keys = range(0, count($this->getColumns($rows[0])) - 1); } if ($isList) { $array = []; foreach ($rows as $row) { $values = $this->cleanupRow($this->getColumns($row)); if ($values !== []) { $array []= array_combine($keys, $values); } } } else { $values = $this->cleanupRow($this->getColumns(array_shift($rows))); if ($keys === [''] && $values === []) { $array = []; } else { if (count($keys) > count($values)) { // empty values at the end of the row are not match bu the getColumns() regexp $values = array_pad($values, count($keys), null); } $array = array_combine($keys, $values); } } return $array; }\n\n    ### Response: Converts data from CSV to an associative array.\n\n@param string $data Source data to convert, as a CSV string\n@param string|null $rootKey Will not be used for converting because csv is flat\n@param boolean $isList Whether the input data contains more than one row\n@param boolean $includeHeading Whether the input contains a heading line\n\n@return array Converted data.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static HttpRequest options(final String destination) { return new HttpRequest() .method(HttpMethod.OPTIONS) .set(destination); }\n\n    ### Response:", "ground_truth": "Builds an OPTIONS request.", "predict": "Allows clients to request options of the given destination, such as GET, POST and PUT"}, {"ID": 689, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function setNoProxyList($list) { if (is_array($list)) { $this->proxySettings['no'] = array_map('trim', $list); return; } if (is_string($list) && strpos($list, ',') !== false) { $this->proxySettings['no'] = explode(',', $list); } elseif (is_string($list) && strpos($list, ' ') !== false) { $this->proxySettings['no'] = explode(' ', $list); } $this->proxySettings['no'] = array_map('trim', $this->proxySettings['no']); }\n\n    ### Response: set the no proxy setting\n\n@param string $list either string or array\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpRequest path(String path) { // this must be the only place that sets the path if (!path.startsWith(StringPool.SLASH)) { path = StringPool.SLASH + path; } int ndx = path.indexOf('?'); if (ndx != -1) { String queryString = path.substring(ndx + 1); path = path.substring(0, ndx); query = HttpUtil.parseQuery(queryString, true); } else { query = HttpMultiMap.newCaseInsensitiveMap(); } this.path = path; return this; }\n\n    ### Response:", "ground_truth": "Sets request path. Query string is allowed.\nAdds a slash if path doesn't start with one.\nQuery will be stripped out from the path.\nPrevious query is discarded.\n@see #query()", "predict": "Sets the path of the HTTP request"}, {"ID": 690, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String arraysToBase64(INDArray[] arrays) throws IOException { StringBuilder sb = new StringBuilder(); //tab separate the outputs for de serialization for (INDArray outputArr : arrays) { ByteArrayOutputStream bos = new ByteArrayOutputStream(); DataOutputStream dos = new DataOutputStream(bos); Nd4j.write(outputArr, dos); String base64 = Base64.encodeBase64String(bos.toByteArray()); sb.append(base64); sb.append(\"\\t\"); } return sb.toString(); }\n\n    ### Response: Returns a tab delimited base 64\nrepresentation of the given arrays\n@param arrays the arrays\n@return\n@throws IOException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpRequest cookies(final Cookie... cookies) { if (cookies.length == 0) { return this; } StringBuilder cookieString = new StringBuilder(); boolean first = true; for (Cookie cookie : cookies) { Integer maxAge = cookie.getMaxAge(); if (maxAge != null && maxAge.intValue() == 0) { continue; } if (!first) { cookieString.append(\"; \"); } first = false; cookieString.append(cookie.getName()); cookieString.append('='); cookieString.append(cookie.getValue()); } headerOverwrite(\"cookie\", cookieString.toString()); return this; }\n\n    ### Response:", "ground_truth": "Sets cookies to the request.", "predict": "Override the default behavior of sending no\n     * cookies by setting the given cookies in the request\n     * header \"cookie\""}, {"ID": 691, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Dot(v1, v2 []float32) (float32, error) { if len(v1) != len(v2) { return 0.0, fmt.Errorf(\"Length mismatched %d, %d\\n\", len(v1), len(v2)) } sum := float32(0.0) for i := 0; i < len(v1); i++ { sum += v1[i] * v2[i] } return sum, nil }\n\n    ### Response: // Dot calculate dot of two vector..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpRequest query(final String name1, final Object value1, final Object... parameters) { query(name1, value1 == null ? null : value1.toString()); for (int i = 0; i < parameters.length; i += 2) { String name = parameters[i].toString(); String value = parameters[i + 1].toString(); query.add(name, value); } return this; }\n\n    ### Response:", "ground_truth": "Adds many query parameters at once. Although it accepts objects,\neach value will be converted to string.", "predict": "// Query makes HTTP request to the server to fetch data corresponding to given url parameter values"}, {"ID": 692, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Complex64Shrinker(v interface{}) gopter.Shrink { c := v.(complex64) realShrink := Float64Shrinker(float64(real(c))).Map(func(r float64) complex64 { return complex(float32(r), imag(c)) }) imagShrink := Float64Shrinker(float64(imag(c))).Map(func(i float64) complex64 { return complex(real(c), float32(i)) }) return realShrink.Interleave(imagShrink) }\n\n    ### Response: // Complex64Shrinker is a shrinker for complex64 numbers.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpRequest query(final Map<String, String> queryMap) { for (Map.Entry<String, String> entry : queryMap.entrySet()) { query.add(entry.getKey(), entry.getValue()); } return this; }\n\n    ### Response:", "ground_truth": "Adds all parameters from the provided map.", "predict": "The method accepts a Map of string to string values and uses these values to build a query string to send to the server."}, {"ID": 693, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c ConfigClient) CheckAPIServerOutOfDateWarning(ctx context.Context) (res OutOfDateInfo, err error) { err = c.Cli.Call(ctx, \"keybase.1.config.checkAPIServerOutOfDateWarning\", []interface{}{CheckAPIServerOutOfDateWarningArg{}}, &res) return }\n\n    ### Response: // Check whether the API server has told us we're out of date..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpRequest queryString(final String queryString, final boolean decode) { this.query = HttpUtil.parseQuery(queryString, decode); return this; }\n\n    ### Response:", "ground_truth": "Sets query from provided query string. Previous query values\nare discarded.", "predict": "// Query string parser for HttpRequest objects"}, {"ID": 694, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def available_styles(self): \"\"\" Returns a list of all styles defined for the item \"\"\" styles = self._schema_item.get(\"styles\", []) return list(map(operator.itemgetter(\"name\"), styles))\n\n    ### Response: Returns a list of all styles defined for the item.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String queryString() { if (query == null) { return StringPool.EMPTY; } return HttpUtil.buildQuery(query, queryEncoding); }\n\n    ### Response:", "ground_truth": "Generates query string. All values are URL encoded.", "predict": "If the query string is null, returns an empty string; otherwise generates and returns the query string according to the query string formatting guidelines of the HttpUtil class."}, {"ID": 695, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function flattenAssocArray( array $array, $format, $glue = null, $escape = false ) { $pairs = []; foreach ($array as $key => $val) { if ($escape) { $key = self::escape($key); $val = self::escape($val); } $pairs[] = sprintf($format, $key, $val); } //Return array if no glue provided if ($glue === null) { return $pairs; } else { return implode($glue, $pairs); } }\n\n    ### Response: Generic function to flatten an associative array into an arbitrarily\ndelimited string.\n\n@param array $array\n@param string $format\n@param string|null $glue\n@param bool $escape\n@return string|array if no glue provided, it won't be imploded.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String hostUrl() { StringBand url = new StringBand(8); if (protocol != null) { url.append(protocol); url.append(\"://\"); } if (host != null) { url.append(host); } if (port != Defaults.DEFAULT_PORT) { url.append(':'); url.append(port); } return url.toString(); }\n\n    ### Response:", "ground_truth": "Returns just host url, without path and query.", "predict": "Function to generate the url string of the given server"}, {"ID": 696, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Init(home string, options []string, uidMaps, gidMaps []idtools.IDMap) (graphdriver.Driver, error) { _, err := parseOptions(options) if err != nil { return nil, err } if err := supportsOverlay(); err != nil { return nil, graphdriver.ErrNotSupported } // Perform feature detection on /var/lib/docker/overlay if it's an existing directory. // This covers situations where /var/lib/docker/overlay is a mount, and on a different // filesystem than /var/lib/docker. // If the path does not exist, fall back to using /var/lib/docker for feature detection. testdir := home if _, err := os.Stat(testdir); os.IsNotExist(err) { testdir = filepath.Dir(testdir) } fsMagic, err := graphdriver.GetFSMagic(testdir) if err != nil { return nil, err } if fsName, ok := graphdriver.FsNames[fsMagic]; ok { backingFs = fsName } switch fsMagic { case graphdriver.FsMagicAufs, graphdriver.FsMagicBtrfs, graphdriver.FsMagicEcryptfs, graphdriver.FsMagicNfsFs, graphdriver.FsMagicOverlay, graphdriver.FsMagicZfs: logrus.WithField(\"storage-driver\", \"overlay\").Errorf(\"'overlay' is not supported over %s\", backingFs) return nil, graphdriver.ErrIncompatibleFS } supportsDType, err := fsutils.SupportsDType(testdir) if err != nil { return nil, err } if !supportsDType { if !graphdriver.IsInitialized(home) { return nil, overlayutils.ErrDTypeNotSupported(\"overlay\", backingFs) } // allow running without d_type only for existing setups (#27443) logrus.WithField(\"storage-driver\", \"overlay\").Warn(overlayutils.ErrDTypeNotSupported(\"overlay\", backingFs)) } rootUID, rootGID, err := idtools.GetRootUIDGID(uidMaps, gidMaps) if err != nil { return nil, err } // Create the driver home dir if err := idtools.MkdirAllAndChown(home, 0700, idtools.Identity{UID: rootUID, GID: rootGID}); err != nil { return nil, err } d := &Driver{ home: home, uidMaps: uidMaps, gidMaps: gidMaps, ctr: graphdriver.NewRefCounter(graphdriver.NewFsChecker(graphdriver.FsMagicOverlay)), supportsDType: supportsDType, locker: locker.New(), } return NaiveDiffDriverWithApply(d, uidMaps, gidMaps), nil }\n\n    ### Response: // Init returns the NaiveDiffDriver, a native diff driver for overlay filesystem.\n// If overlay filesystem is not supported on the host, the error\n// graphdriver.ErrNotSupported is returned.\n// If an overlay filesystem is not supported over an existing filesystem then\n// error graphdriver.ErrIncompatibleFS is returned..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpRequest basicAuthentication(final String username, final String password) { if (username != null && password != null) { String data = username.concat(StringPool.COLON).concat(password); String base64 = Base64.encodeToString(data); headerOverwrite(HEADER_AUTHORIZATION, \"Basic \" + base64); } return this; }\n\n    ### Response:", "ground_truth": "Enables basic authentication by adding required header.", "predict": "The basicAuthentication method of the HttpRequest class overrides the default behavior of sending an authorization header to the server to include basic Authentication credentials of username and password if provided."}, {"ID": 697, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_from_import(self, resource, name): \"\"\"The from import statement for `name` in `resource`\"\"\" module_name = libutils.modname(resource) names = [] if isinstance(name, list): names = [(imported, None) for imported in name] else: names = [(name, None), ] return FromImport(module_name, 0, tuple(names))\n\n    ### Response: The from import statement for `name` in `resource`.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpRequest setHostHeader() { String hostPort = this.host; if (port != Defaults.DEFAULT_PORT) { hostPort += StringPool.COLON + port; } headerOverwrite(HEADER_HOST, hostPort); return this; }\n\n    ### Response:", "ground_truth": "Sets 'Host' header from current host and port.", "predict": "The setHostHeader() method overrides the default behavior of sending an HTTP request to the given host and port and sets the Host header to include the given host and port."}, {"ID": 698, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def start_health_check_for(self, node_address: Address): \"\"\"Start health checking `node_address`. This function is a noop during initialization, because health checking can be started as a side effect of some events (e.g. new channel). For these cases the healthcheck will be started by `start_neighbours_healthcheck`. \"\"\" if self.transport: self.transport.start_health_check(node_address)\n\n    ### Response: Start health checking `node_address`.\n\n        This function is a noop during initialization, because health checking\n        can be started as a side effect of some events (e.g. new channel). For\n        these cases the healthcheck will be started by\n        `start_neighbours_healthcheck`..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected Buffer buffer(final boolean fullRequest) { // INITIALIZATION // host port if (header(HEADER_HOST) == null) { setHostHeader(); } // form Buffer formBuffer = formBuffer(); // query string String queryString = queryString(); // user-agent if (header(\"User-Agent\") == null) { header(\"User-Agent\", Defaults.userAgent); } // POST method requires Content-Type to be set if (method.equals(\"POST\") && (contentLength() == null)) { contentLength(0); } // BUILD OUT Buffer request = new Buffer(); request.append(method) .append(SPACE) .append(path); if (query != null && !query.isEmpty()) { request.append('?'); request.append(queryString); } request.append(SPACE) .append(httpVersion) .append(CRLF); populateHeaderAndBody(request, formBuffer, fullRequest); return request; }\n\n    ### Response:", "ground_truth": "Prepares the request buffer.", "predict": "INITIALIZATION\n\nhost port\n\nform request\n\nquery\n\nuser-agent\n\nPOST method requires Content-Type to be set\n\nBUILD OUT\n\nHttpRequest response;"}, {"ID": 699, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def find_next_character(code, position, char): \"\"\"Find next char and return its first and last positions\"\"\" end = LineCol(code, *position) while not end.eof and end.char() in WHITESPACE: end.inc() if not end.eof and end.char() == char: return end.tuple(), inc_tuple(end.tuple()) return None, None\n\n    ### Response: Find next char and return its first and last positions.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <R> R sendAndReceive(final Function<HttpResponse, R> responseHandler) { return responseHandler.apply(send()); }\n\n    ### Response:", "ground_truth": "Syntax sugar.", "predict": "Send and receive HTTP response and convert to specified type R."}, {"ID": 700, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getContentModules() { return array_filter($this->getModules(), function (ModuleInterface $module) { return !($module instanceof AdministrationModuleInterface) && !($module instanceof SubmoduleInterface); }); }\n\n    ### Response: Get all modules that handle content.\n\n@return ModuleInterface[].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static Handler removeRange(final Handler firstHandler, final Label start, final Label end) { if (firstHandler == null) { return null; } else { firstHandler.nextHandler = removeRange(firstHandler.nextHandler, start, end); } int handlerStart = firstHandler.startPc.bytecodeOffset; int handlerEnd = firstHandler.endPc.bytecodeOffset; int rangeStart = start.bytecodeOffset; int rangeEnd = end == null ? Integer.MAX_VALUE : end.bytecodeOffset; // Return early if [handlerStart,handlerEnd[ and [rangeStart,rangeEnd[ don't intersect. if (rangeStart >= handlerEnd || rangeEnd <= handlerStart) { return firstHandler; } if (rangeStart <= handlerStart) { if (rangeEnd >= handlerEnd) { // If [handlerStart,handlerEnd[ is included in [rangeStart,rangeEnd[, remove firstHandler. return firstHandler.nextHandler; } else { // [handlerStart,handlerEnd[ - [rangeStart,rangeEnd[ = [rangeEnd,handlerEnd[ return new Handler(firstHandler, end, firstHandler.endPc); } } else if (rangeEnd >= handlerEnd) { // [handlerStart,handlerEnd[ - [rangeStart,rangeEnd[ = [handlerStart,rangeStart[ return new Handler(firstHandler, firstHandler.startPc, start); } else { // [handlerStart,handlerEnd[ - [rangeStart,rangeEnd[ = // [handlerStart,rangeStart[ + [rangeEnd,handerEnd[ firstHandler.nextHandler = new Handler(firstHandler, end, firstHandler.endPc); return new Handler(firstHandler, firstHandler.startPc, start); } }\n\n    ### Response:", "ground_truth": "Removes the range between start and end from the Handler list that begins with the given\nelement.\n\n@param firstHandler the beginning of a Handler list. May be {@literal null}.\n@param start the start of the range to be removed.\n@param end the end of the range to be removed. Maybe {@literal null}.\n@return the exception handler list with the start-end range removed.", "predict": "Remove from the beginning of the function to the given start, and from the given end to the end of the function, all handlers but those that handle content and that are not Administration or Submodule handlers"}, {"ID": 701, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def save(self, filename=None, debug=False): \"\"\"save a data file such that all processes know the game that is running\"\"\" if not filename: filename = self.name with open(filename, \"w\") as f: # save config data file f.write(self.toJson(self.attrs)) if self.debug or debug: print(\"saved configuration %s\"%(self.name)) for k,v in sorted(iteritems(self.attrs)): print(\"%15s : %s\"%(k,v))\n\n    ### Response: save a data file such that all processes know the game that is running.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static int getExceptionTableLength(final Handler firstHandler) { int length = 0; Handler handler = firstHandler; while (handler != null) { length++; handler = handler.nextHandler; } return length; }\n\n    ### Response:", "ground_truth": "Returns the number of elements of the Handler list that begins with the given element.\n\n@param firstHandler the beginning of a Handler list. May be {@literal null}.\n@return the number of elements of the Handler list that begins with 'handler'.", "predict": "Get the length of the exception handler chain by walking through the exception handlers of the first exception handler of this process."}, {"ID": 702, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def validate_request(self, data: Any, *additional: AnyMapping, merged_class: Type[dict] = dict) -> Any: r\"\"\"Validate request data against request schema from module. :param data: Request data. :param \\*additional: Additional data dicts to be merged with base request data. :param merged_class: When additional data dicts supplied method by default will return merged **dict** with all data, but you can customize things to use read-only dict or any other additional class or callable. \"\"\" request_schema = getattr(self.module, 'request', None) if request_schema is None: logger.error( 'Request schema should be defined', extra={'schema_module': self.module, 'schema_module_attrs': dir(self.module)}) raise self.make_error('Request schema should be defined') # Merge base and additional data dicts, but only if additional data # dicts have been supplied if isinstance(data, dict) and additional: data = merged_class(self._merge_data(data, *additional)) try: self._validate(data, request_schema) finally: self._valid_request = False self._valid_request = True processor = getattr(self.module, 'request_processor', None) return processor(data) if processor else data\n\n    ### Response: r\"\"\"Validate request data against request schema from module.\n\n        :param data: Request data.\n        :param \\*additional:\n            Additional data dicts to be merged with base request data.\n        :param merged_class:\n            When additional data dicts supplied method by default will return\n            merged **dict** with all data, but you can customize things to\n            use read-only dict or any other additional class or callable..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void collectActionInterceptors() { final Collection<? extends ActionInterceptor> interceptorValues = interceptorsManager.getAllInterceptors(); interceptors = new ArrayList<>(); interceptors.addAll(interceptorValues); interceptors.sort(Comparator.comparing(a -> a.getClass().getSimpleName())); }\n\n    ### Response:", "ground_truth": "Collects all interceptors.", "predict": "r\"\"\"Collect and sort ActionInterceptors values.\"\"\""}, {"ID": 703, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected VoltTable runDML(String dml, boolean transformDml) { String modifiedDml = (transformDml ? transformDML(dml) : dml); printTransformedSql(dml, modifiedDml); return super.runDML(modifiedDml); }\n\n    ### Response: Optionally, modifies queries in such a way that PostgreSQL results will\nmatch VoltDB results; and then passes the remaining work to the base\nclass version..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void collectActionFilters() { final Collection<? extends ActionFilter> filterValues = filtersManager.getAllFilters(); filters = new ArrayList<>(); filters.addAll(filterValues); filters.sort(Comparator.comparing(a -> a.getClass().getSimpleName())); }\n\n    ### Response:", "ground_truth": "Collects all filters.", "predict": "Populates fields and filters the list of objects to include only those objects that implement the action filter interfaces.."}, {"ID": 704, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setActivitySorter(ActivitySorter activitySorter) { synchronized (mInstanceLock) { if (mActivitySorter == activitySorter) { return; } mActivitySorter = activitySorter; if (sortActivitiesIfNeeded()) { notifyChanged(); } } }\n\n    ### Response: Sets the sorter for ordering activities based on historical data and an intent.\n\n@param activitySorter The sorter.\n\n@see ActivitySorter.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void collectActionResults() { final Collection<ActionResult> resultsValues = resultsManager.getAllActionResults(); results = new ArrayList<>(); results.addAll(resultsValues); results.sort(Comparator.comparing(a -> a.getClass().getSimpleName())); }\n\n    ### Response:", "ground_truth": "Collects all action results.", "predict": "The method gathers and sorts the results of recent activity into an ordered collection to provide access to the results in an efficient manner."}, {"ID": 705, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function fromOption($option) { $message = sprintf( 'Could not add invalid Option of type \"%1$s\" to option repository.', is_object($option) ? get_class($option) : gettype($option) ); return new static($message); }\n\n    ### Response: Get a new exception based on the type of an invalid option.\n\n@since 0.1.0\n\n@param mixed $option Option that was tried to be added.\n\n@return static.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void collectActionRuntimes() { actions = actionsManager.getAllActionRuntimes(); actions.sort(Comparator.comparing(ActionRuntime::getActionPath)); }\n\n    ### Response:", "ground_truth": "Collects all action runtime configurations.", "predict": "Get the list of runtimes of the actions and sort it by action path."}, {"ID": 706, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String toExtendedASCIIs(byte[] bytes, int n, ByteOrder bo) { RubyArray<String> ra = Ruby.Array.create(); if (bo == LITTLE_ENDIAN) { for (int i = 0; i < n; i++) { if (i >= bytes.length) { ra.push(\"\\0\"); continue; } byte b = bytes[i]; ra.push(toASCII8Bit(b)); } return ra.join(); } else { for (int i = bytes.length - 1; n > 0; i--) { if (i < 0) { ra.unshift(\"\\0\"); n--; continue; } byte b = bytes[i]; ra.unshift(toASCII8Bit(b)); n--; } return ra.join(); } }\n\n    ### Response: Converts a byte array into an ASCII String.\n\n@param bytes\nused to be converted\n@param n\nlength of ASCII String\n@param bo\na ByteOrder\n@return ASCII String.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"unchecked\"}) protected void setSimpleProperty(final BeanProperty bp, final Object value) { Setter setter = bp.getSetter(isDeclared); // try: setter if (setter != null) { invokeSetter(setter, bp, value); return; } // try: put(\"property\", value) if (bp.isMap()) { ((Map) bp.bean).put(bp.name, value); return; } if (isSilent) { return; } throw new BeanException(\"Simple property not found: \" + bp.name, bp); }\n\n    ### Response:", "ground_truth": "Sets a value of simple property.", "predict": "Sets a BeanProperty to the given Value."}, {"ID": 707, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getDeliveryChannel($i = 0){ if (isset($this->list[$i]['Destination']['DeliveryChannel'])){ return $this->list[$i]['Destination']['DeliveryChannel']; } else { return false; } }\n\n    ### Response: Returns the delivery channel for the retrieved subscription's destination.\n\nSee setDeliveryChannel for list of possible values.\nThis method will return FALSE if the data has not been set yet.\n@param int $i [optional] List index to retrieve the value from. Defaults to 0.\n@return string|boolean single value, or FALSE if not set yet or invalid index\n@see setDeliveryChannel.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public <T> T getProperty(final Object bean, final String name) { BeanProperty beanProperty = new BeanProperty(this, bean, name); if (!isSilent) { resolveNestedProperties(beanProperty); return (T) getIndexProperty(beanProperty); } else { try { resolveNestedProperties(beanProperty); return (T) getIndexProperty(beanProperty); } catch (Exception ignore) { return null; } } }\n\n    ### Response:", "ground_truth": "Returns value of bean's property.", "predict": "Resolves the given bean property and returns the corresponding property for the given bean and name. The given bean may be a nested bean or an indexed bean property. The given bean may be a nested bean or an indexed bean property. If the given bean or name cannot be found or the given bean or name cannot be resolved to the corresponding bean property or indexed bean property, returns null. If the given bean or name cannot be found or the given bean or name cannot be resolved to the corresponding bean property or indexed bean property, returns null. If the given bean or name cannot be found or the given bean or name cannot be resolved to the corresponding bean property or indexed bean property, returns null. If the given bean or name cannot be found or the given bean or name cannot be resolved to the corresponding bean property or indexed bean property, returns null. If the given bean or name cannot be found or the given bean or name cannot be resolved to the corresponding bean property or indexed bean property, returns null. If the given bean or name cannot be found or the given bean or name"}, {"ID": 708, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function registerDefaultParser() { $this->registerMediaTypeParser('application/json', function (string $input) { $result = json_decode($input, true); if (! is_array($result)) { return null; } return $result; }, null); $this->registerMediaTypeParser('application/xml', function (string $input) { $backup = libxml_disable_entity_loader(true); $backup_errors = libxml_use_internal_errors(true); $result = simplexml_load_string($input); libxml_disable_entity_loader($backup); libxml_clear_errors(); libxml_use_internal_errors($backup_errors); if ($result === false) { return null; } return $result; }, null); $this->registerMediaTypeParser('text/xml', function (string $input) { $backup = libxml_disable_entity_loader(true); $backup_errors = libxml_use_internal_errors(true); $result = simplexml_load_string($input); libxml_disable_entity_loader($backup); libxml_clear_errors(); libxml_use_internal_errors($backup_errors); if ($result === false) { return null; } return $result; }, null); $this->registerMediaTypeParser('application/x-www-form-urlencoded', function (string $input) { parse_str($input, $data); return $data; }, null); }\n\n    ### Response: Register Default Parser.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public String extractThisReference(final String propertyName) { int ndx = StringUtil.indexOfChars(propertyName, INDEX_CHARS); if (ndx == -1) { return propertyName; } return propertyName.substring(0, ndx); }\n\n    ### Response:", "ground_truth": "Extract the first name of this reference.", "predict": "Extract This Reference."}, {"ID": 709, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static <T> JAXBElement createCollectionElement(String rootName, Collection<T> c) { JAXBCollection collection = new JAXBCollection(c); return new JAXBElement<>(new QName(rootName), JAXBCollection.class, collection); }\n\n    ### Response: Create a JAXBElement containing a JAXBCollection. Needed for marshalling a generic collection\nwithout a seperate wrapper class.\n\n@param rootName Name of the XML root element\n@return JAXBElement containing the given Collection, wrapped in a JAXBCollection..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public PrintWriter getWriter() { if (writer == null) { writer = new FastCharArrayWriter(); printWriter = new PrintWriter(writer); } return printWriter; }\n\n    ### Response:", "ground_truth": "Returns buffered writer. Buffer will be created if not already used.", "predict": "Override the default behavior of the PrintWriter to force marshaling into a fast char array stream to reduce GC overhead"}, {"ID": 710, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function validatePackageRepositories($index, $repo) { if ('package' !== $repo['type']) { return; } if (!isset($repo['package'])) { throw new \\UnexpectedValueException('Repository '.$index.' ('.json_encode($repo).') must have a package definition\"'); } foreach (array('name', 'type', 'version', 'dist') as $key) { if (!isset($repo['package'][$key])) { throw new \\UnexpectedValueException('Repository '.$index.' ('.json_encode($repo).') must have the \"'.$key.'\" key in the package definition\"'); } } }\n\n    ### Response: Validates the config of package repositories.\n\n@param int|string  $index The index\n@param array|mixed $repo  The config repo\n\n@throws \\UnexpectedValueException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setObjectReference(final String name, final Object object) { if (objectRefs == null) { objectRefs = new HashMap<>(); } objectRefs.put(name, object); }\n\n    ### Response:", "ground_truth": "Saves object reference.", "predict": "Associates an Object to the given name in the Map of objects known to the program"}, {"ID": 711, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getDestenationFile($name, $path) { if (!empty($path)) { $path = Helpers::getPathWithSlash(ucfirst($path)); } return app_path(Config::getModelsPath($path . $name . '.php')); }\n\n    ### Response: Gets the destenation file to be created.\n\n@param string $name\n@param string $path\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object getObjectReference(final String name) { if (objectRefs == null) { return null; } return objectRefs.get(name); }\n\n    ### Response:", "ground_truth": "Returns object reference.", "predict": "Gets an ObjectReference for the given name from the cache."}, {"ID": 712, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function _doRequest(array $request, $storeId) { if ($storeId instanceof Mage_Core_model_Store) { $storeId = $storeId->getId(); } $requestUrl = self::ENDPOINT_LIVE; if ($this->_helper()->getConfigDataDemoMode($storeId)) { $requestUrl = self::ENDPOINT_TEST; } $username = $this->_helper()->getConfigDataWsUserName($storeId); $password = $this->_helper()->getConfigDataWsPassword($storeId); Mage::log($request, null, 'adyen_api.log'); $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $requestUrl); curl_setopt($ch, CURLOPT_HEADER, false); curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC); curl_setopt($ch, CURLOPT_USERPWD, $username . \":\" . $password); curl_setopt($ch, CURLOPT_POST, count($request)); curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($request)); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); $result = curl_exec($ch); $error = curl_error($ch); $httpStatus = curl_getinfo($ch, CURLINFO_HTTP_CODE); curl_close($ch); if ($result === false) { Adyen_Payment_Exception::throwException($error); } if ($httpStatus != 200) { Adyen_Payment_Exception::throwException( Mage::helper('adyen')->__( 'HTTP Status code %s received, data %s', $httpStatus, $result ) ); } return $result; }\n\n    ### Response: Do the actual API request\n\n@param array $request\n@param int|Mage_Core_model_Store $storeId\n\n@throws Adyen_Payment_Exception\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object lookupObject(final String ref) { Object value = getObjectReference(ref); if (value == null) { throw new DbSqlBuilderException(\"Invalid object reference: \" + ref); } return value; }\n\n    ### Response:", "ground_truth": "Lookups for object reference and throws an exception if reference doesn't exist.", "predict": "The lookupObject() method looks up an object reference in the database and returns the corresponding Object or null if the reference cannot be found."}, {"ID": 713, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *PhoneNumberCapabilities) SetInboundCall(v bool) *PhoneNumberCapabilities { s.InboundCall = &v return s }\n\n    ### Response: // SetInboundCall sets the InboundCall field's value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DbEntityDescriptor getTableDescriptor(final String tableRef) { if (tableRefs == null) { return null; } TableRefData t = tableRefs.get(tableRef); return t == null ? null : t.desc; }\n\n    ### Response:", "ground_truth": "Returns entity descriptor for provided table reference.", "predict": "// The method returns the TableDescriptor for the given table Ref string or null if no corresponding record exists in the Map TableRefs. The Map contains the TableRef and its corresponding TableDescriptor objects."}, {"ID": 714, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _getInterfaces(self): \"\"\" Load application communication interfaces. :return: <dict> \"\"\" interfaces = {} interfacesPath = os.path.join(\"application\", \"interface\") interfaceList = os.listdir(interfacesPath) for file in interfaceList: interfaceDirectoryPath = os.path.join(interfacesPath, file) if not os.path.isdir(interfaceDirectoryPath) or file.startswith(\"__\") or file.startswith(\".\"): continue interfaceName = ntpath.basename(interfaceDirectoryPath) interfacePath = os.path.join(interfaceDirectoryPath, interfaceName) + \".py\" if not os.path.isfile(interfacePath): continue # importing interface interfaceSpec = importlib.util.spec_from_file_location( interfaceName, interfacePath ) interface = importlib.util.module_from_spec(interfaceSpec) interfaceSpec.loader.exec_module(interface) # checking if there is an interface in the file if hasattr(interface, \"Service\"): # initializing interface interfaceInstance = interface.Service(self) interfaces[interfaceName] = interfaceInstance return interfaces\n\n    ### Response: Load application communication interfaces.\n\n        :return: .\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DbEntityDescriptor findTableDescriptorByColumnRef(final String columnRef) { for (Map.Entry<String, TableRefData> entry : tableRefs.entrySet()) { DbEntityDescriptor ded = entry.getValue().desc; if (ded.findByPropertyName(columnRef) != null) { return ded; } } return null; }\n\n    ### Response:", "ground_truth": "Finds entity descriptor of a table that contains provided column reference.", "predict": "\n    Finds the table descriptor of the given columnref from the given database table references TableDescriptor{desc=\"db_entity_description\"}. It looks into the table references Map and checks if there is an entry with the given columnref and returns the corresponding TableDescriptor{desc=\"db_entity_description\"} otherwise returns null."}, {"ID": 715, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func WrappedErr(err error) error { cast, ok := err.(*Error) if !ok { return err } return cast.WrappedErr() }\n\n    ### Response: // WrappedErr returns the wrapped error, if the current error is simply\n// wrapping some previously returned error or system error. If the error isn't\n// hierarchical it is just returned..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getTableAlias(final String tableRef) { if (tableRefs == null) { return null; } TableRefData t = tableRefs.get(tableRef); return t == null ? null : t.alias; }\n\n    ### Response:", "ground_truth": "Returns table alias for provided table reference.", "predict": "// GetTableAlias returns the table alias of the given table reference,\n// or null if there is no mapping for the given table reference."}, {"ID": 716, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function hasNextSibling(): bool { try { $this->nextSibling(); // sibling found, return true; return true; } catch (ParentNotFoundException $e) { // no parent, no next sibling return false; } catch (ChildNotFoundException $e) { // no sibling found return false; } }\n\n    ### Response: Checks if the current node has a next sibling.\n\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerTableReference(final String tableReference, final DbEntityDescriptor ded, final String tableAlias) { if (tableRefs == null) { tableRefs = new HashMap<>(); } TableRefData t = new TableRefData(ded, tableAlias); if (tableRefs.put(tableReference, t) != null) { throw new DbSqlBuilderException(\"Duplicated table reference: \" + tableReference); } }\n\n    ### Response:", "ground_truth": "Registers table reference for provided entity.", "predict": "Registers the given tableReference and its corresponding DBEntityDescriptor and tableAlias into the Map of TableReference objects."}, {"ID": 717, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func processBot(c context.Context, desc model.PoolDescriptor) error { t, err := auth.GetRPCTransport(c, auth.AsSelf) if err != nil { return err } sc, err := swarmingAPI.New(&http.Client{Transport: t}) if err != nil { return err } sc.BasePath = fmt.Sprintf(\"https://%s/_ah/api/swarming/v1/\", desc.Host()) var bots []model.Bot bl := sc.Bots.List().Dimensions(desc.Dimensions().Format()...) // Keep fetching until the cursor is empty. for { botList, err := bl.Do() if err != nil { return err } for _, botInfo := range botList.Items { // Ignore deleted bots. if botInfo.Deleted { continue } bot, err := parseBot(c, desc.Host(), botInfo) if err != nil { return err } bots = append(bots, *bot) } if botList.Cursor == \"\" { break } bl = bl.Cursor(botList.Cursor) } // If there are too many bots, then it won't fit in datastore. // Only store a subset of the bots. // TODO(hinoka): This is inaccurate, but will only affect few builders. // Instead of chopping this list off, just store the statistics. if len(bots) > 1000 { bots = bots[:1000] } // This is a large RPC, don't try to batch it. return datastore.Put(c, &model.BotPool{ PoolID: desc.PoolID(), Descriptor: desc, Bots: bots, LastUpdate: clock.Now(c), }) }\n\n    ### Response: // processBot retrieves the Bot pool details from Swarming for a given set of\n// dimensions for its respective Swarming host, and saves the data into datastore..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected DbEntityDescriptor lookupTableRef(final String tableRef) { DbEntityDescriptor ded = getTableDescriptor(tableRef); if (ded == null) { throw new DbSqlBuilderException(\"Table reference not used in this query: \" + tableRef); } return ded; }\n\n    ### Response:", "ground_truth": "Lookups for table reference and throws an exception if table reference not found.", "predict": "// lookupTableRef looks up the DB EntityDescriptor for the given table Ref string // It first checks if there is an entry for the given table Ref // in the DB Schema Map // If there is no entry, an exception is thrown // Else the DB EntityDescriptor for the given table Ref // is retrieved and returned"}, {"ID": 718, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (m AttributeMap) Pop(name string, dst interface{}, opts ...mapdecode.Option) (bool, error) { ok, err := m.Get(name, dst, opts...) if ok { delete(m, name) } return ok, err }\n\n    ### Response: // Pop removes the named key from the AttributeMap and decodes the value into\n// the dst interface..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerHint(final String hint) { if (hints == null) { hints = new ArrayList<>(hintCount); } hints.add(hint); }\n\n    ### Response:", "ground_truth": "Registers a hint.", "predict": "// registerHint adds the given hint to the list of hints with the given count\n\n    "}, {"ID": 719, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (logger *Logger) Infof(format string, args ...interface{}) { logger.output(log.Info, fmt.Sprintf(format, args...)) }\n\n    ### Response: // Infof logs with an info level.\n// Arguments are handled in the manner of fmt.Printf..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public final boolean serialize(final JsonContext jsonContext, final T value) { if (jsonContext.pushValue(value)) { // prevent circular dependencies return false; } serializeValue(jsonContext, value); jsonContext.popValue(); return true; }\n\n    ### Response:", "ground_truth": "Detects circular dependencies and pushes value as current\ntype context.", "predict": "// Override the default behavior of the JsonSeriallizer to avoid unnecessary depth in the serialized objects.\n// Pop and push values on the JsonContext stack to avoid unnecessary depth in the objects being serialized.\n// Pop and push also prevents cycles in the object graph during serialization since the same objects are not added multiple times to the stack."}, {"ID": 720, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def save(self, path, binary=False): \"\"\"Save a set of constructs into the CLIPS data base. If binary is True, the constructs will be saved in binary format. The Python equivalent of the CLIPS load command. \"\"\" if binary: ret = lib.EnvBsave(self._env, path.encode()) else: ret = lib.EnvSave(self._env, path.encode()) if ret == 0: raise CLIPSError(self._env)\n\n    ### Response: Save a set of constructs into the CLIPS data base.\n\n        If binary is True, the constructs will be saved in binary format.\n\n        The Python equivalent of the CLIPS load command..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void injectAttributes(final HttpServletRequest servletRequest, final Targets targets) { final Enumeration<String> attributeNames = servletRequest.getAttributeNames(); while (attributeNames.hasMoreElements()) { final String attrName = attributeNames.nextElement(); targets.forEachTargetAndIn(this, (target, in) -> { final String name = in.matchedName(attrName); if (name != null) { final Object attrValue = servletRequest.getAttribute(attrName); target.writeValue(name, attrValue, true); } }); } }\n\n    ### Response:", "ground_truth": "Injects request attributes.", "predict": "Inject attributes of the given HTTP request into the given targets objects"}, {"ID": 721, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getSort($className='CSort') { if($this->_sort===null) { $this->_sort=new $className; if(($id=$this->getId())!='') $this->_sort->sortVar=$id.'_sort'; } return $this->_sort; }\n\n    ### Response: Returns the sort object.\n@param string $className the sorting object class name. Parameter is available since version 1.1.13.\n@return CSort|false the sorting object. If this is false, it means the sorting is disabled..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void injectParameters(final HttpServletRequest servletRequest, final Targets targets) { final boolean encode = encodeGetParams && servletRequest.getMethod().equals(\"GET\"); final Enumeration<String> paramNames = servletRequest.getParameterNames(); while (paramNames.hasMoreElements()) { final String paramName = paramNames.nextElement(); if (servletRequest.getAttribute(paramName) != null) { continue; } targets.forEachTargetAndIn(this, (target, in) -> { final String name = in.matchedName(paramName); if (name != null) { String[] paramValues = servletRequest.getParameterValues(paramName); paramValues = ServletUtil.prepareParameters( paramValues, treatEmptyParamsAsNull, ignoreEmptyRequestParams); if (paramValues != null) { if (encode) { for (int j = 0; j < paramValues.length; j++) { final String p = paramValues[j]; if (p != null) { final String encoding = madvocEncoding.getEncoding(); paramValues[j] = StringUtil.convertCharset(p, StringPool.ISO_8859_1, encoding); } } } final Object value = (paramValues.length != 1 ? paramValues : paramValues[0]); target.writeValue(name, value, true); } } }); } }\n\n    ### Response:", "ground_truth": "Inject request parameters.", "predict": "Injects parameters from the HTTP request into the objects of this component."}, {"ID": 722, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public JSONObject toJSON(Constraint o) throws JSONConverterException { ConstraintConverter c = java2json.get(o.getClass()); if (c == null) { throw new JSONConverterException(\"No converter available for a constraint with the '\" + o.getClass() + \"' className\"); } return c.toJSON(o); }\n\n    ### Response: Serialise a constraint.\n@param o the constraint\n@return the resulting encoded constraint\n@throws JSONConverterException if the conversion failed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void injectUploadedFiles(final HttpServletRequest servletRequest, final Targets targets) { if (!(servletRequest instanceof MultipartRequestWrapper)) { return; } final MultipartRequestWrapper multipartRequest = (MultipartRequestWrapper) servletRequest; if (!multipartRequest.isMultipart()) { return; } final Enumeration<String> paramNames = multipartRequest.getFileParameterNames(); while (paramNames.hasMoreElements()) { final String paramName = paramNames.nextElement(); if (servletRequest.getAttribute(paramName) != null) { continue; } targets.forEachTargetAndIn(this, (target, in) -> { final String name = in.matchedName(paramName); if (name != null) { final FileUpload[] paramValues = multipartRequest.getFiles(paramName); if (ignoreInvalidUploadFiles) { for (int j = 0; j < paramValues.length; j++) { final FileUpload paramValue = paramValues[j]; if ((!paramValue.isValid()) || (!paramValue.isUploaded())) { paramValues[j] = null; } } } final Object value = (paramValues.length == 1 ? paramValues[0] : paramValues); target.writeValue(name, value, true); } }); } }\n\n    ### Response:", "ground_truth": "Inject uploaded files from multipart request parameters.", "predict": "Inject values from uploaded files into objects of type Target and its subtypes"}, {"ID": 723, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function scheduleForUpdate($entity) : void { $oid = spl_object_id($entity); if (! isset($this->entityIdentifiers[$oid])) { throw ORMInvalidArgumentException::entityHasNoIdentity($entity, 'scheduling for update'); } if (isset($this->entityDeletions[$oid])) { throw ORMInvalidArgumentException::entityIsRemoved($entity, 'schedule for update'); } if (! isset($this->entityUpdates[$oid]) && ! isset($this->entityInsertions[$oid])) { $this->entityUpdates[$oid] = $entity; } }\n\n    ### Response: Schedules an entity for being updated.\n\n@param object $entity The entity to schedule for being updated.\n\n@throws ORMInvalidArgumentException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String convertPropertyNameToColumnName(final String propertyName) { StringBuilder tableName = new StringBuilder(propertyName.length() * 2); if (splitCamelCase) { String convertedTableName = Format.fromCamelCase(propertyName, separatorChar); tableName.append(convertedTableName); } else { tableName.append(propertyName); } if (!changeCase) { return tableName.toString(); } return uppercase ? toUppercase(tableName).toString() : toLowercase(tableName).toString(); }\n\n    ### Response:", "ground_truth": "Converts property name to column name.", "predict": "Converts the property name of the given entity to the corresponding table name to ensure proper mapping during hydration of the entity into the relational database"}, {"ID": 724, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (u UAA) Exchange(authCode string) (Token, error) { return u.ExchangeCommand(u, authCode) }\n\n    ### Response: // Gets auth token based on the code UAA provides during redirect process.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String convertColumnNameToPropertyName(final String columnName) { StringBuilder propertyName = new StringBuilder(columnName.length()); int len = columnName.length(); if (splitCamelCase) { boolean toUpper = false; for (int i = 0; i < len; i++) { char c = columnName.charAt(i); if (c == separatorChar) { toUpper = true; continue; } if (toUpper) { propertyName.append(Character.toUpperCase(c)); toUpper = false; } else { propertyName.append(Character.toLowerCase(c)); } } return propertyName.toString(); } return columnName; }\n\n    ### Response:", "ground_truth": "Converts column name to property name.", "predict": "// This method converts the column name of the given SQL to the property name of the given entity to make the access to the corresponding entity property easier in the application code. It uses the split camelCase convention to split the column names to property names with the given separator character (default: '.'). It uses the toUpperCase and toLowerCase methods to convert the characters to appropriate case for the property names to ensure proper access to the corresponding entity properties in the code."}, {"ID": 725, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getList() { /** @var RcmUserService $rcmUserService */ $rcmUserService = $this->serviceLocator->get(RcmUserService::class); //ACCESS CHECK if (!$rcmUserService->isAllowed( ResourceName::RESOURCE_SITES, 'admin' ) ) { $this->getResponse()->setStatusCode(Response::STATUS_CODE_401); return $this->getResponse(); } $config = $this->getConfig(); $pageTypes = $config['Rcm']['pageTypes']; return new ApiJsonModel($pageTypes, 0, 'Success'); }\n\n    ### Response: getList of available page types\n\n@return mixed|JsonModel.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String applyToColumnName(final String columnName) { String propertyName = convertColumnNameToPropertyName(columnName); return convertPropertyNameToColumnName(propertyName); }\n\n    ### Response:", "ground_truth": "Applies column naming strategy to given column name hint.\nReturns full column name.", "predict": "\n    Helper method to convert column names to property names and vice versa\n    \"\"\"\n    Helper method to convert column names to property names and vice versa\n    \"\"\"\n    Helper method to convert column names to property names and vice versa"}, {"ID": 726, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func streamOutput(src io.Reader, dst *bytes.Buffer, out io.Writer) error { mw := io.MultiWriter(dst, out) s := bufio.NewReader(src) for { var line []byte line, err := s.ReadSlice('\\n') if err == io.EOF && len(line) == 0 { break // done } if err == io.EOF { return fmt.Errorf(\"Improper termination: %v\", line) } if err != nil { return err } // append to the buffer and out at once mw.Write(line) } return nil }\n\n    ### Response: // streamOutput from a source to a destination buffer while also printing.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void storeValue(final PreparedStatement st, final int index, final Object value, final int dbSqlType) throws SQLException { T t = TypeConverterManager.get().convertType(value, sqlType); set(st, index, t, dbSqlType); }\n\n    ### Response:", "ground_truth": "Stores value in database. Value is casted to sql type.", "predict": "// Stores the given Value to the given SQLStatement and stores its SQLType for later usage"}, {"ID": 727, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_defs(self, cache=True): \"\"\" Gets the defitions args: cache: True will read from the file cache, False queries the triplestore \"\"\" log.debug(\" *** Started\") cache = self.__use_cache__(cache) if cache: log.info(\" loading json cache\") try: with open(self.cache_filepath) as file_obj: self.results = json.loads(file_obj.read()) except FileNotFoundError: self.results = [] if not cache or len(self.results) == 0: log.info(\" NO CACHE, querying the triplestore\") sparql = render_without_request(self.def_sparql, graph=self.conn.graph, prefix=self.nsm.prefix()) start = datetime.datetime.now() log.info(\" Starting query\") self.results = self.conn.query(sparql) log.info(\"query complete in: %s | %s triples retrieved.\", (datetime.datetime.now() - start), len(self.results)) with open(self.cache_filepath, \"w\") as file_obj: file_obj.write(json.dumps(self.results, indent=4)) with open(self.loaded_filepath, \"w\") as file_obj: file_obj.write((json.dumps(self.conn.mgr.loaded)))\n\n    ### Response: Gets the defitions\n\n        args:\n            cache: True will read from the file cache, False queries the\n                   triplestore.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"unchecked\"}) protected <E> E prepareGetValue(final T t, final Class<E> destinationType) { if (t == null) { return null; } if (destinationType == null) { return (E) t; } return TypeConverterManager.get().convertType(t, destinationType); }\n\n    ### Response:", "ground_truth": "Once when value is read from result set, prepare it to match destination type.\n@param t get value\n@param destinationType destination type", "predict": "Prepares and returns the Value for the given Operation and Object"}, {"ID": 728, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (k *kubernetesClient) maybeGetVolumeClaimSpec(params volumeParams) (*core.PersistentVolumeClaimSpec, error) { storageClassName := params.storageConfig.storageClass haveStorageClass := false if storageClassName == \"\" { return nil, errors.New(\"cannot create a volume claim spec without a storage class\") } // See if the requested storage class exists already. sc, err := k.getStorageClass(storageClassName) if err != nil && !k8serrors.IsNotFound(err) { return nil, errors.Annotatef(err, \"looking for storage class %q\", storageClassName) } if err == nil { haveStorageClass = true storageClassName = sc.Name } if !haveStorageClass { params.storageConfig.storageClass = storageClassName sc, err := k.EnsureStorageProvisioner(caas.StorageProvisioner{ Name: params.storageConfig.storageClass, Namespace: k.namespace, Provisioner: params.storageConfig.storageProvisioner, Parameters: params.storageConfig.parameters, ReclaimPolicy: string(params.storageConfig.reclaimPolicy), }) if err != nil && !errors.IsNotFound(err) { return nil, errors.Trace(err) } if err == nil { haveStorageClass = true storageClassName = sc.Name } } if !haveStorageClass { return nil, errors.NewNotFound(nil, fmt.Sprintf( \"cannot create persistent volume as storage class %q cannot be found\", storageClassName)) } accessMode := params.accessMode if accessMode == \"\" { accessMode = core.ReadWriteOnce } return &core.PersistentVolumeClaimSpec{ StorageClassName: &storageClassName, Resources: core.ResourceRequirements{ Requests: core.ResourceList{ core.ResourceStorage: params.requestedVolumeSize, }, }, AccessModes: []core.PersistentVolumeAccessMode{accessMode}, }, nil }\n\n    ### Response: // maybeGetVolumeClaimSpec returns a persistent volume claim spec for the given\n// parameters. If no suitable storage class is available, return a NotFound error..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Set<T> getAll() { final Set<T> set = new HashSet<>(wrappers.size()); set.addAll(wrappers.values()); return set; }\n\n    ### Response:", "ground_truth": "Returns all action wrappers. Returns a copy in new set.", "predict": "// This method returns a set with all objects of type T from the given wrapper collection // This set may be empty, but cannot be null"}, {"ID": 729, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function optionsToCKEditorConfig(Options $options) { $config = array(); foreach ($options->toArray() as $key => $value) { if (!array_key_exists($key, static::$optionsToConfigMap)) { continue; } if (in_array($key, static::$optionsToPrependBasePath)) { if (is_array($value)) { foreach ($value as &$deepValue) { $deepValue = $this->view->basePath($deepValue); } } else { $value = $this->view->basePath($value); } } $config[static::$optionsToConfigMap[$key]] = $value; } return $config; }\n\n    ### Response: Translates our internal Options object into a usable config array\nfor CKEditor.\n\n@param \\CKEditor\\Options $options\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T resolve(final Class<? extends T> wrapperClass) { String wrapperClassName = wrapperClass.getName(); T wrapper = lookup(wrapperClassName); if (wrapper == null) { wrapper = createWrapper(wrapperClass); initializeWrapper(wrapper); wrappers.put(wrapperClassName, wrapper); } return wrapper; }\n\n    ### Response:", "ground_truth": "Resolves single wrapper. Creates new wrapper instance if not already registered.\nDoes not expand the wrappers.", "predict": "Resolves an instance of the given wrapperClass from the cache or creates and stores an instance in the cache for later reuse"}, {"ID": 730, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def status(self): \"\"\" Determine the status of the connection and receiver, and return ERROR, CONNECTED, or DISCONNECTED as appropriate. For simplicity, we only consider ourselves to be connected after the Connection class has setup a receiver task. This only happens after the websocket is open, and the connection isn't usable until that receiver has been started. \"\"\" connection = self.connection() # the connection instance was destroyed but someone kept # a separate reference to the monitor for some reason if not connection: return self.DISCONNECTED # connection cleanly disconnected or not yet opened if not connection.ws: return self.DISCONNECTED # close called but not yet complete if self.close_called.is_set(): return self.DISCONNECTING # connection closed uncleanly (we didn't call connection.close) stopped = connection._receiver_task.stopped.is_set() if stopped or not connection.ws.open: return self.ERROR # everything is fine! return self.CONNECTED\n\n    ### Response: Determine the status of the connection and receiver, and return\n        ERROR, CONNECTED, or DISCONNECTED as appropriate.\n\n        For simplicity, we only consider ourselves to be connected\n        after the Connection class has setup a receiver task. This\n        only happens after the websocket is open, and the connection\n        isn't usable until that receiver has been started..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected <R extends T> R createWrapper(final Class<R> wrapperClass) { try { return ClassUtil.newInstance(wrapperClass); } catch (Exception ex) { throw new MadvocException(\"Invalid Madvoc wrapper: \" + wrapperClass, ex); } }\n\n    ### Response:", "ground_truth": "Creates new wrapper.", "predict": "Wrap objects of type R in objects of type Wrapper, where Wrapper extends the MadvocWrapperAdapter and Wrapper provides an implementation for the MadvocWrapperAdapter for the given R object.."}, {"ID": 731, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getLinkerNotation() { String pSymbol = getPhosphateSymbol(); String result = null; if (null == pSymbol || pSymbol.length() == 0) { result = \"\"; } else { if (pSymbol.length() > 1) result = \"[\" + pSymbol + \"]\"; else result = pSymbol; } return result; }\n\n    ### Response: This method returns the HELM notation for nucleotide linker\n\n@return linker notation.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String separatorsToSystem(final String path) { if (path == null) { return null; } if (SYSTEM_SEPARATOR == WINDOWS_SEPARATOR) { return separatorsToWindows(path); } else { return separatorsToUnix(path); } }\n\n    ### Response:", "ground_truth": "Converts all separators to the system separator.\n\n@param path  the path to be changed, null ignored\n@return the updated path", "predict": "Separates string values with given separator to system dependent values"}, {"ID": 732, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def configure( self, *, read_fragment_size=None, write_fragment_size=None, use_display_names=None, single_bit_uint_as_bool=None, integer_interpolation=None, ): \"\"\" configure MDF parameters Parameters ---------- read_fragment_size : int size hint of split data blocks, default 8MB; if the initial size is smaller, then no data list is used. The actual split size depends on the data groups' records size write_fragment_size : int size hint of split data blocks, default 4MB; if the initial size is smaller, then no data list is used. The actual split size depends on the data groups' records size. Maximum size is 4MB to ensure compatibility with CANape use_display_names : bool search for display name in the Channel XML comment single_bit_uint_as_bool : bool return single bit channels are np.bool arrays integer_interpolation : int interpolation mode for integer channels: * 0 - repeat previous sample * 1 - use linear interpolation \"\"\" if read_fragment_size is not None: self._read_fragment_size = int(read_fragment_size) if write_fragment_size: self._write_fragment_size = min(int(write_fragment_size), 4 * 2 ** 20) if use_display_names is not None: self._use_display_names = bool(use_display_names) if single_bit_uint_as_bool is not None: self._single_bit_uint_as_bool = bool(single_bit_uint_as_bool) if integer_interpolation in (0, 1): self._integer_interpolation = int(integer_interpolation)\n\n    ### Response: configure MDF parameters\n\n        Parameters\n        ----------\n        read_fragment_size : int\n            size hint of split data blocks, default 8MB; if the initial size is\n            smaller, then no data list is used. The actual split size depends on\n            the data groups' records size\n        write_fragment_size : int\n            size hint of split data blocks, default 4MB; if the initial size is\n            smaller, then no data list is used. The actual split size depends on\n            the data groups' records size. Maximum size is 4MB to ensure\n            compatibility with CANape\n        use_display_names : bool\n            search for display name in the Channel XML comment\n        single_bit_uint_as_bool : bool\n            return single bit channels are np.bool arrays\n        integer_interpolation : int\n            interpolation mode for integer channels:\n\n                * 0 - repeat previous sample\n                * 1 - use linear interpolation.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static String doGetPath(final String filename, final int separatorAdd) { if (filename == null) { return null; } int prefix = getPrefixLength(filename); if (prefix < 0) { return null; } int index = indexOfLastSeparator(filename); int endIndex = index + separatorAdd; if (prefix >= filename.length() || index < 0 || prefix >= endIndex) { return StringPool.EMPTY; } return filename.substring(prefix, endIndex); }\n\n    ### Response:", "ground_truth": "Does the work of getting the path.\n\n@param filename  the filename\n@param separatorAdd  0 to omit the end separator, 1 to return it\n@return the path", "predict": "\n    The method doGetPath obtains the full path of a given file or directory name from its partial path and an integer which indicates where to insert an additional separator character (typically '/'). It obtains the full path by first extracting the prefix of the partial path and then concatenates the additional separator and the remaining partial path to obtain the full path of the file or directory name."}, {"ID": 733, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Conversation) InitializeInstanceTag(tag uint32) uint32 { if tag == 0 { c.generateInstanceTag() } else { c.ourInstanceTag = tag } return c.ourInstanceTag }\n\n    ### Response: // InitializeInstanceTag sets our instance tag for this conversation. If the argument is zero we will create a new instance tag and return it\n// The instance tag created or set will be returned.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String[] split(final String filename) { String prefix = getPrefix(filename); if (prefix == null) { prefix = StringPool.EMPTY; } int lastSeparatorIndex = indexOfLastSeparator(filename); int lastExtensionIndex = indexOfExtension(filename); String path; String baseName; String extension; if (lastSeparatorIndex == -1) { path = StringPool.EMPTY; if (lastExtensionIndex == -1) { baseName = filename.substring(prefix.length()); extension = StringPool.EMPTY; } else { baseName = filename.substring(prefix.length(), lastExtensionIndex); extension = filename.substring(lastExtensionIndex + 1); } } else { path = filename.substring(prefix.length(), lastSeparatorIndex + 1); if (lastExtensionIndex == -1) { baseName = filename.substring(prefix.length() + path.length()); extension = StringPool.EMPTY; } else { baseName = filename.substring(prefix.length() + path.length(), lastExtensionIndex); extension = filename.substring(lastExtensionIndex + 1); } } return new String[] {prefix, path, baseName, extension}; }\n\n    ### Response:", "ground_truth": "Splits filename into a array of four Strings containing prefix, path, basename and extension.\nPath will contain ending separator.", "predict": "The split() method extracts the path, base name and extension from the given filename string and returns them in an ordered array of string values"}, {"ID": 734, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<String> getExtendedReport(int topEntries) { TreeSet<ReportEntry<V>> topLevelFailed = new TreeSet<ReportEntry<V>>(); fillReport(topLevelFailed, rootReport); int count = topEntries; List<String> result = Lists.newArrayList(); StringBuilder out = new StringBuilder(); for (ReportEntry<V> entry : topLevelFailed) { if (count-- == 0) return result; out.setLength(0); fillExtendedReport(out, 0, entry); result.add(out.toString()); } return result; }\n\n    ### Response: Lists the work done by the most expensive failed rules.\n\nFirst all failed rules are sorted according to how long they took, then, for each such rule,\na string is produced listing it and all its child rules. These are returned.\n\n@param topEntries Produce reports for the top {@code topEntries} most expensive failed rules.\na negative number means: All of them..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String relativePath(final String targetPath, final String basePath) { return new File(basePath).toPath().relativize(new File(targetPath).toPath()).toString(); }\n\n    ### Response:", "ground_truth": "Calculates relative path of target path on base path.", "predict": "The method generates a string which contains the relative path of the given target path to the given base path."}, {"ID": 735, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewShortcutExpander(delegate meta.RESTMapper, client discovery.DiscoveryInterface) meta.RESTMapper { return shortcutExpander{RESTMapper: delegate, discoveryClient: client} }\n\n    ### Response: // NewShortcutExpander wraps a restmapper in a layer that expands shortcuts found via discovery.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public WebApp registerComponent(final Class<?> madvocComponent) { Objects.requireNonNull(madvocComponent); madvocComponents.add(ClassConsumer.of(madvocComponent)); return this; }\n\n    ### Response:", "ground_truth": "Registers additional Madvoc components after the registration of default components.", "predict": "// Registers the given component into Spring's context and into Spring's dependency injection mechanism for later use in other objects and controllers of this Spring WebApplication."}, {"ID": 736, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function update(Schedule $schedule) { try { $schedule = execute(new UpdateScheduleCommand( $schedule, Binput::get('name'), Binput::get('message'), Binput::get('status'), Binput::get('scheduled_at'), Binput::get('completed_at'), Binput::get('components', []) )); } catch (QueryException $e) { throw new BadRequestHttpException(); } return $this->item($schedule); }\n\n    ### Response: Update a schedule.\n\n@param \\CachetHQ\\Cachet\\Models\\Schedule $schedule\n\n@return \\Illuminate\\Http\\JsonResponse.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <A extends ActionConfig> WebApp withActionConfig(final Class<A> actionConfigType, final Consumer<A> actionConfigConsumer) { withRegisteredComponent(ActionConfigManager.class, acm -> acm.with(actionConfigType, actionConfigConsumer)); return this; }\n\n    ### Response:", "ground_truth": "Configures the action configurations.", "predict": "Initiates the registration of the given action configuration for the given action controller."}, {"ID": 737, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func AddHeader(out io.Writer, key, value string) { if resp, ok := out.(http.ResponseWriter); ok { resp.Header().Add(key, value) } }\n\n    ### Response: // AddHeader will add a header onto the function response.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public WebApp start() { log = LoggerFactory.getLogger(WebApp.class); log.debug(\"Initializing Madvoc WebApp\"); //// params & props for (final Map<String, Object> params : paramsList) { madvocContainer.defineParams(params); } for (final Props props : propsList) { madvocContainer.defineParams(props); } propsList = null; //// components registerMadvocComponents(); madvocComponents.forEach( madvocComponent -> madvocContainer.registerComponent(madvocComponent.type(), madvocComponent.consumer())); madvocComponents = null; madvocComponentInstances.forEach(madvocContainer::registerComponentInstance); madvocComponentInstances = null; configureDefaults(); //// listeners madvocContainer.fireEvent(Init.class); //// component configuration componentConfigs.accept(madvocContainer); componentConfigs = null; initialized(); madvocContainer.fireEvent(Start.class); if (!madvocRouterConsumers.isEmpty()) { final MadvocRouter madvocRouter = MadvocRouter.create(); madvocContainer.registerComponentInstance(madvocRouter); madvocRouterConsumers.accept(madvocRouter); } madvocRouterConsumers = null; started(); madvocContainer.fireEvent(Ready.class); ready(); return this; }\n\n    ### Response:", "ground_truth": "Initializes and starts web application.", "predict": "The start() method of WebApp component initialization routine will do the following: * Log into the console that Web App initialization is happening * Initialize and register Madvoc components * Register and configure Madvoc components * Listen for and react to initialization and other events * Create and add routes to the Madvoc router * Notify other Madvoc consumers of Web App initialization * Notify other Madvoc consumers of Web App being ready for use * Returns the instance of Web App component"}, {"ID": 738, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function loadExtraRoutes() { $config = Config::get('amethyst.invoice.http.admin.invoice'); if (Arr::get($config, 'enabled')) { Router::group('admin', Arr::get($config, 'router'), function ($router) use ($config) { $controller = Arr::get($config, 'controller'); $router->post('/{id}/issue', ['as' => 'issue', 'uses' => $controller.'@issue']); }); } }\n\n    ### Response: Load extra routes..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void configureDefaults() { final ActionConfigManager actionConfigManager = madvocContainer.lookupComponent(ActionConfigManager.class); actionConfigManager.registerAnnotation(Action.class); actionConfigManager.registerAnnotation(RestAction.class); }\n\n    ### Response:", "ground_truth": "Configure defaults.", "predict": "Defines default configuration for the action and REST annotations"}, {"ID": 739, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function getNodeTypeAndPattern($pattern) { $node_type = 'text'; // If user set payload, default, welcome message. foreach (['payload', 'default', 'attachment'] as $type) { if (strpos($pattern, $type . ':') !== false) { $node_type = $type; $pattern = str_replace($node_type . ':', '', $pattern); } } if (!empty($pattern) && $pattern[0] == '@') { $node_type = 'intended'; $pattern = str_replace('@', '', $pattern); } return [$node_type, $pattern]; }\n\n    ### Response: Get Node type and Pattern\n\n@param $pattern\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void registerMadvocComponents() { if (madvocContainer == null) { throw new MadvocException(\"Madvoc WebApp not initialized.\"); } log.debug(\"Registering Madvoc WebApp components\"); madvocContainer.registerComponent(MadvocEncoding.class); madvocContainer.registerComponentInstance(new ServletContextProvider(servletContext)); madvocContainer.registerComponent(ActionConfigManager.class); madvocContainer.registerComponent(ActionMethodParamNameResolver.class); madvocContainer.registerComponent(ActionMethodParser.class); madvocContainer.registerComponent(ActionPathRewriter.class); madvocContainer.registerComponent(ActionsManager.class); madvocContainer.registerComponent(ContextInjectorComponent.class); madvocContainer.registerComponent(InterceptorsManager.class); madvocContainer.registerComponent(FiltersManager.class); madvocContainer.registerComponent(MadvocController.class); madvocContainer.registerComponent(RootPackages.class); madvocContainer.registerComponent(ResultsManager.class); madvocContainer.registerComponent(ResultMapper.class); madvocContainer.registerComponent(ScopeResolver.class); madvocContainer.registerComponent(ScopeDataInspector.class); madvocContainer.registerComponent(AsyncActionExecutor.class); madvocContainer.registerComponent(FileUploader.class); }\n\n    ### Response:", "ground_truth": "Registers default Madvoc components.", "predict": "Register MadVocation Components\n\n* If MadVocation Web App is initialized,\n\n* Register MadVocation Components\n\n* If MadVocation Web App is initialized, log.debug(\"Registering MadVocation Web App Components\");\n\n* Register MadVocation Components\n\n* If MadVocation Web App is initialized, log.debug(\"Registering MadVocation Components\");\n\n* Register MadVocation Components\n\n* If MadVocation Web App is initialized, log.debug(\"Registering MadVocation Components\");\n\n* Register MadVocation Components\n\n* If MadVocation Web App is initialized, log.debug(\"Registering MadVocation Components\");\n\n* Register MadVocation Components\n\n* If MadVocation Web App is initialized, log.debug(\"Registering MadVocation Components\");\n\n* Register MadVocation Components\n\n* If MadVocation Web App is initialized, log.debug(\"Registering MadVocation Com"}, {"ID": 740, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function toArray($obj) { $arr = array(); if (is_array($obj)) { foreach ($obj as $value) { $arr[] = $this->toArray($value); } } else if (is_object($obj)) { $arObj = (array) $obj; foreach ($arObj as $key => $value) { $attribute = str_replace(get_class($obj), \"\", $key); if (is_object($value) || is_array($value)) { $value = $this->toArray($value); } else { $arr[$attribute] = $this->utf8_encode_all($value); } } } else { $arr = $this->utf8_encode_all($obj); } return $arr; }\n\n    ### Response: Convierte un objeto a notacion json.\n@param type $obj\n@return type.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ClassScanner excludeJars(final String... excludedJars) { for (final String excludedJar : excludedJars) { rulesJars.exclude(excludedJar); } return this; }\n\n    ### Response:", "ground_truth": "Specify excluded jars.", "predict": "Exclude from analysis certain jars included in the build"}, {"ID": 741, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function unserialize($iterators) { parent::__construct(MultipleIterator::MIT_NEED_ALL | MultipleIterator::MIT_KEYS_NUMERIC); $this->_iterators = unserialize($iterators); foreach ($this->_iterators as $it) { $this->attachIterator($it); } }\n\n    ### Response: Unserializes the passed string and rebuilds the ZipIterator instance\n\n@param string $iterators The serialized iterators\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ClassScanner includeJars(final String... includedJars) { for (final String includedJar : includedJars) { rulesJars.include(includedJar); } return this; }\n\n    ### Response:", "ground_truth": "Specify included jars.", "predict": "Includes the given jars into the build and updates the set of jars included in the build"}, {"ID": 742, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def random_size_crop(src, size, min_area=0.25, ratio=(3.0/4.0, 4.0/3.0)): \"\"\"Randomly crop src with size. Randomize area and aspect ratio\"\"\" h, w, _ = src.shape area = w*h for _ in range(10): new_area = random.uniform(min_area, 1.0) * area new_ratio = random.uniform(*ratio) new_w = int(new_area*new_ratio) new_h = int(new_area/new_ratio) if random.uniform(0., 1.) < 0.5: new_w, new_h = new_h, new_w if new_w > w or new_h > h: continue x0 = random.randint(0, w - new_w) y0 = random.randint(0, h - new_h) out = fixed_crop(src, x0, y0, new_w, new_h, size) return out, (x0, y0, new_w, new_h) return random_crop(src, size)\n\n    ### Response: Randomly crop src with size. Randomize area and aspect ratio.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ClassScanner includeEntries(final String... includedEntries) { for (final String includedEntry : includedEntries) { rulesEntries.include(includedEntry); } return this; }\n\n    ### Response:", "ground_truth": "Sets included set of names that will be considered during configuration.\n@see InExRules", "predict": "Include specified entries in the set of entries to scan"}, {"ID": 743, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String parseNumberToString(Number number, Context context, Arguments args) { final NumberFormat numberFormat = parseFormatter(context, args); final Currency currency = context.get(Contexts.CURRENCY); if (currency != null) { numberFormat.setCurrency(currency); } return numberFormat.format(number); }\n\n    ### Response: Parses the given number to a string depending on the context.\n\n@param number The number to parse.\n@param context The context to use.\n@param args The arguments of the macro.\n\n@return The number as a string..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ClassScanner excludeEntries(final String... excludedEntries) { for (final String excludedEntry : excludedEntries) { rulesEntries.exclude(excludedEntry); } return this; }\n\n    ### Response:", "ground_truth": "Sets excluded names that narrows included set of packages.\n@see InExRules", "predict": "Excludes given string from the set of entries to scan"}, {"ID": 744, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getLemmas(array $lemmas = []) { // Get folders $folders = $this->getPath($this->config('folders', [])); foreach ($folders as $path) { if ($this->option('verbose')) { $this->line(' <info>' . $path . '</info>'); } foreach ($this->getPhpFiles($path) as $php_file_path => $dumb) { $lemma = []; foreach ($this->extractTranslationFromFile($php_file_path) as $k => $v) { $real_value = eval(\"return $k;\"); $lemma[$real_value] = $php_file_path; } $lemmas = array_merge($lemmas, $lemma); } } if (count($lemmas) === 0) { $this->comment(\"No lemma have been found in the code.\"); $this->line(\"In these directories:\"); foreach ($this->config('folders', []) as $path) { $path = $this->getPath($path); $this->line(\" {$path}\"); } $this->line(\"For these functions/methods:\"); foreach ($this->config('trans_methods', []) as $k => $v) { $this->line(\" {$k}\"); } die(); } $this->line((count($lemmas) > 1) ? count($lemmas) . \" lemmas have been found in the code\" : \"1 lemma has been found in the code\"); if ($this->option('verbose')) { foreach ($lemmas as $key => $value) { if (strpos($key, '.') !== false) { $this->line(' <info>' . $key . '</info> in file <comment>' . $this->getShortPath($value) . '</comment>'); } } } return $lemmas; }\n\n    ### Response: Get the lemmas values from the provided directories.\n\n@param array $lemmas\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void scanJarFile(final File file) { final ZipFile zipFile; try { zipFile = new ZipFile(file); } catch (IOException ioex) { if (!ignoreException) { throw new FindFileException(\"Invalid zip: \" + file.getName(), ioex); } return; } final Enumeration entries = zipFile.entries(); while (entries.hasMoreElements()) { final ZipEntry zipEntry = (ZipEntry) entries.nextElement(); final String zipEntryName = zipEntry.getName(); try { if (StringUtil.endsWithIgnoreCase(zipEntryName, CLASS_FILE_EXT)) { final String entryName = prepareEntryName(zipEntryName, true); final ClassPathEntry classPathEntry = new ClassPathEntry(entryName, zipFile, zipEntry); try { scanEntry(classPathEntry); } finally { classPathEntry.closeInputStream(); } } else if (includeResources) { final String entryName = prepareEntryName(zipEntryName, false); final ClassPathEntry classPathEntry = new ClassPathEntry(entryName, zipFile, zipEntry); try { scanEntry(classPathEntry); } finally { classPathEntry.closeInputStream(); } } } catch (RuntimeException rex) { if (!ignoreException) { ZipUtil.close(zipFile); throw rex; } } } ZipUtil.close(zipFile); }\n\n    ### Response:", "ground_truth": "Scans classes inside single JAR archive. Archive is scanned as a zip file.\n@see #onEntry(ClassPathEntry)", "predict": "Scan and translate the given jar file"}, {"ID": 745, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function getGeneratorConfig(options) { const { tag, classNames } = parseSelector(options.baseSelector) const config = { files : options.paths, dest : options.outputDir, types : options.types, codepoints : options.codepointsMap, startCodepoint : options.startCodepoint || 0xF101, cssDest : options.cssPath, cssFontsUrl : getCssFontsUrl(options), htmlDest : options.htmlPath, cssTemplate : options.cssTemplate || TEMPLATES.css, htmlTemplate : options.htmlTemplate || TEMPLATES.html, templateOptions : { baseTag : tag || options.baseTag || 'i', baseSelector : options.baseSelector || null, baseClassNames : classNames.join(' '), classPrefix : (options.classPrefix || 'icon') + '-', htmlCssRelativePath : path.relative( path.dirname(getResolvedPath(options, 'html')), getResolvedPath(options, 'css') ) } } // Normalise and add available optional configurations OPTIONAL_PARAMS.forEach(key => { if (typeof options[key] !== 'undefined') { // Parse numeric values if (`${ parseFloat(options[key]) }` === `${ options[key] }`) { options[key] = parseFloat(options[key]) } config[key] = options[key] } }) return config }\n\n    ### Response: Transform options Object in a configuration accepted by the generator\n\n@param  {Object} options\n@return {void}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void scanClassPath(final File root) { String rootPath = root.getAbsolutePath(); if (!rootPath.endsWith(File.separator)) { rootPath += File.separatorChar; } final FindFile ff = FindFile.create().includeDirs(false).recursive(true).searchPath(rootPath); File file; while ((file = ff.nextFile()) != null) { final String filePath = file.getAbsolutePath(); try { if (StringUtil.endsWithIgnoreCase(filePath, CLASS_FILE_EXT)) { scanClassFile(filePath, rootPath, file, true); } else if (includeResources) { scanClassFile(filePath, rootPath, file, false); } } catch (RuntimeException rex) { if (!ignoreException) { throw rex; } } } }\n\n    ### Response:", "ground_truth": "Scans single classpath directory.\n@see #onEntry(ClassPathEntry)", "predict": "Scans all objects in the given root and its parent objects and generates icon font objects"}, {"ID": 746, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function isEmptyArray($input) { if (!is_array($input)) { return false; } $empty = true; foreach (new RecursiveIteratorIterator(new RecursiveArrayIterator($input), RecursiveIteratorIterator::LEAVES_ONLY) as $key => $value) { $empty = (empty($value) && $value !== '0' && $value !== 0); if (!$empty) { return false; } } return $empty; }\n\n    ### Response: Check wether an array is empty and if it is the value of the repeater is set to null.\n\n@param array $input\n\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static byte[] bytecodeSignatureOfType(final Class type) { final String name = 'L' + type.getName().replace('.', '/') + ';'; return name.getBytes(); }\n\n    ### Response:", "ground_truth": "Returns type signature bytes used for searching in class file.", "predict": "The given method generates the signature of the given class in its native form in order to use it for signature verification of the given class file."}, {"ID": 747, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def create(self, validated_data): \"\"\"Override ``create`` to provide a user via request.user by default. This is required since the read_only ``user`` field is not included by default anymore since https://github.com/encode/django-rest-framework/pull/5886. \"\"\" if 'user' not in validated_data: validated_data['user'] = self.context['request'].user return super(RefreshTokenSerializer, self).create(validated_data)\n\n    ### Response: Override ``create`` to provide a user via request.user by default.\n\n        This is required since the read_only ``user`` field is not included by\n        default anymore since\n        https://github.com/encode/django-rest-framework/pull/5886..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ClassScanner scan(final String... paths) { for (final String path : paths) { filesToScan.add(new File(path)); } return this; }\n\n    ### Response:", "ground_truth": "Scans provided paths.", "predict": "Scans all given strings as locations of java class files to be compiled and loaded into the ClassCache"}, {"ID": 748, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function matching(callable $criteriaDefinitionCallback) { $criteria = $this->chart->getDataSource()->criteria(); $criteriaDefinitionCallback($criteria); call_user_func($this->callback, new ChartWidget($this->name, $this->label, $this->authSystem, $this->requiredPermissions, $this->chart, $criteria)); }\n\n    ### Response: Defines the chart criteria for the widget.\n\nExample:\n\n->matching(function (ChartCriteria $criteria) {\n$criteria->where('column', '>', 500);\n});\n\n\n@see ChartCriteria\n\n@param callable $criteriaDefinitionCallback\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void start() { if (detectEntriesMode) { rulesEntries.detectMode(); } filesToScan.forEach(file -> { final String path = file.getAbsolutePath(); if (StringUtil.endsWithIgnoreCase(path, JAR_FILE_EXT)) { if (!acceptJar(file)) { return; } scanJarFile(file); } else if (file.isDirectory()) { scanClassPath(file); } }); }\n\n    ### Response:", "ground_truth": "Starts with the scanner.", "predict": "Starts the Scanner for given entries and scans all given JAR Files and ClassPath Files for Rule Violations."}, {"ID": 749, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function isKnownFeed() { if (empty(config(\"{$this->configBase}.feeds.{$this->feedName}\"))) { $this->warningCount++; Log::warning( \"The feed referred as '{$this->feedName}' is not configured in the collector \" . config(\"{$this->configBase}.collector.name\") . ' therefore skipping processing of this e-mail' ); return false; } else { return true; } }\n\n    ### Response: Check if the feed specified is known in the collector config.\n@return Boolean Returns true or false.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected JtxTransaction createNewTransaction(final JtxTransactionMode tm, final Object scope, final boolean active) { return new DbJtxTransaction(this, tm, scope, active); }\n\n    ### Response:", "ground_truth": "Builds new transaction instance.", "predict": "Override the default behavior of the TransactionAdapter and create a transaction for the given transaction manager and other arguments to perform the specific transaction behavior for the given transaction manager and arguments"}, {"ID": 750, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def list_uplink_dvportgroup(dvs, service_instance=None): ''' Returns the uplink portgroup of a distributed virtual switch. dvs Name of the DVS containing the portgroup. service_instance Service instance (vim.ServiceInstance) of the vCenter. Default is None. .. code-block:: bash salt '*' vsphere.list_uplink_dvportgroup dvs=dvs_name ''' proxy_type = get_proxy_type() if proxy_type == 'esxdatacenter': datacenter = __salt__['esxdatacenter.get_details']()['datacenter'] dc_ref = _get_proxy_target(service_instance) elif proxy_type == 'esxcluster': datacenter = __salt__['esxcluster.get_details']()['datacenter'] dc_ref = salt.utils.vmware.get_datacenter(service_instance, datacenter) dvs_refs = salt.utils.vmware.get_dvss(dc_ref, dvs_names=[dvs]) if not dvs_refs: raise VMwareObjectRetrievalError('DVS \\'{0}\\' was not ' 'retrieved'.format(dvs)) uplink_pg_ref = salt.utils.vmware.get_uplink_dvportgroup(dvs_refs[0]) return _get_dvportgroup_dict(uplink_pg_ref)\n\n    ### Response: Returns the uplink portgroup of a distributed virtual switch.\n\n    dvs\n        Name of the DVS containing the portgroup.\n\n    service_instance\n        Service instance (vim.ServiceInstance) of the vCenter.\n        Default is None.\n\n    .. code-block:: bash\n\n        salt '*' vsphere.list_uplink_dvportgroup dvs=dvs_name.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public <S extends MadvocScope> S defaultOrScopeType(final Class<S> scopeClass) { if (scopeClass == null) { return (S) getOrInitScope(RequestScope.class); } return (S) getOrInitScope(scopeClass); }\n\n    ### Response:", "ground_truth": "Lookups the scope instance of given scope annotation.\nIf instance does not exist, it will be created, cached and returned.", "predict": "\n    @SuppressWarnings(\"unchecked\")\n    public S defaultOrScopeType(Class<S> scopeClass)\n    {\n        // If the given scopeClass parameter is null\n        // defaultOrScopeType()\n        // invokes the default scope function\n        // to retrieve the default Scope Object\n        // (RequestScope) for the given scopeType\n        // If the given parameter is non null\n        // defaultOrScopeType()\n        // invokes the default scope function to retrieve\n        // the Scope Object of the given scopeClass\n        return (S) defaultOrRequestScope(scopeClass);\n    }"}, {"ID": 751, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def create(self, key, value): \"\"\"Create method of CRUD operation for working with KeyValue DB. This method will automatically determine the variable type and call the appropriate method to write the data. If a non standard type is provided the data will be written as RAW data. Args: key (string): The variable to write to the DB. value (any): The data to write to the DB. Returns: (string): Result string of DB write. \"\"\" data = None if key is not None: key = key.strip() self.tcex.log.debug(u'create variable {}'.format(key)) # bcs - only for debugging or binary might cause issues # self.tcex.log.debug(u'variable value: {}'.format(value)) parsed_key = self.parse_variable(key.strip()) variable_type = parsed_key['type'] if variable_type in self.read_data_types: data = self.create_data_types[variable_type](key, value) else: data = self.create_raw(key, value) return data\n\n    ### Response: Create method of CRUD operation for working with KeyValue DB.\n\n        This method will automatically determine the variable type and\n        call the appropriate method to write the data.  If a non standard\n        type is provided the data will be written as RAW data.\n\n        Args:\n            key (string): The variable to write to the DB.\n            value (any): The data to write to the DB.\n\n        Returns:\n            (string): Result string of DB write..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected MadvocScope getOrInitScope(final Class<? extends MadvocScope> madvocScopeType) { for (final MadvocScope s : allScopes) { if (s.getClass().equals(madvocScopeType)) { return s; } } // new scope detected final MadvocScope newScope; try { newScope = madpc.createBean(madvocScopeType); } catch (Exception ex) { throw new MadvocException(\"Unable to create scope: \" + madvocScopeType, ex); } allScopes.add(newScope); return newScope; }\n\n    ### Response:", "ground_truth": "Performs search for the scope class and returns it's instance.", "predict": "\n    protected MadvocScope getOrInitScope(Class<? extends MadvocScope>madvocScopeType)\n    {\n        // Check if there is a scope of this type defined\n        for (MadvocScope s : allScopes)\n        {\n            // If there is, return it\n            if (s.getClass().equals(madvocScopeType))\n            {\n                return s;\n            }\n            \n            // If there's no defined scope of this type,\n            // init the first defined\n            // and remember its reference\n            if (madocScopeType instanceof MadvocBundle)\n            {\n                MadvocBundle bundle = (MadvocBundle) s;\n                MadvocBundle nextBundle = (MadvocBundle)madocScopeType;\n                \n                // Forbid to init the first bundle because there's\n                // no defined bundle of this type\n                nextBundle.initBundle( bundle.getName"}, {"ID": 752, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (me *Logger) Warnf(format string, v ...interface{}) { me.printf(Pwarn, format, v...) }\n\n    ### Response: // Warnf prints to the standard logger with the Warn level..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void forScope(final Class<? extends MadvocScope> scopeType, final Consumer<MadvocScope> madvocScopeConsumer) { final MadvocScope scope = getOrInitScope(scopeType); madvocScopeConsumer.accept(scope); }\n\n    ### Response:", "ground_truth": "Finds a given scope and consumes it.", "predict": "// Initiates and tracks objects of the specified scopeType for the given scope consumer"}, {"ID": 753, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void unscheduleTask() { if (unschedule.compareAndSet(false, true)) { scheduledFuture.cancel(false); scheduledFuture = null; } }\n\n    ### Response: Unschedule task if active, and cancel thread to inform it must be interrupted in a proper way..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static byte[] decode(final char[] arr) { int length = arr.length; if (length == 0) { return new byte[0]; } int sndx = 0, endx = length - 1; int pad = arr[endx] == '=' ? (arr[endx - 1] == '=' ? 2 : 1) : 0; int cnt = endx - sndx + 1; int sepCnt = length > 76 ? (arr[76] == '\\r' ? cnt / 78 : 0) << 1 : 0; int len = ((cnt - sepCnt) * 6 >> 3) - pad; byte[] dest = new byte[len]; int d = 0; for (int cc = 0, eLen = (len / 3) * 3; d < eLen;) { int i = INV[arr[sndx++]] << 18 | INV[arr[sndx++]] << 12 | INV[arr[sndx++]] << 6 | INV[arr[sndx++]]; dest[d++] = (byte) (i >> 16); dest[d++] = (byte) (i >> 8); dest[d++] = (byte) i; if (sepCnt > 0 && ++cc == 19) { sndx += 2; cc = 0; } } if (d < len) { int i = 0; for (int j = 0; sndx <= endx - pad; j++) { i |= INV[arr[sndx++]] << (18 - j * 6); } for (int r = 16; d < len; r -= 8) { dest[d++] = (byte) (i >> r); } } return dest; }\n\n    ### Response:", "ground_truth": "Decodes a BASE64 encoded char array.", "predict": "Decodes UTF8 string from given range to destination length, aligning padding bytes to 7 bits and aligning multiples of four bytes to long words if necessary to produce output bytes with proper values of leading, constant, middle, constant, and trailing bytes of UTF8 multiples of four bytes of UTF8 multiples of four bytes of UTF8 multiples of four bytes of UTF8 multiples of four bytes of UTF8 multiples of four bytes of UTF8 multiples of four bytes of UTF8 multiples of four bytes of UTF8 multiples of four bytes of UTF8 multiples of four bytes of UTF8 multiples of four bytes of UTF8 multiples of four bytes of UTF8 multiples of four bytes of UTF8 multiples of four bytes of UTF8 multiples of four bytes of UTF8 multiples of four bytes of UTF8 multiples of four bytes of UTF8 multiples of four bytes of UTF8 multiples of four bytes of UTF8 multiples of four bytes of UTF8 multiples of four bytes of UTF8 multi"}, {"ID": 754, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function addList(DOMElement $parent, array $extensions) : void { if (empty($extensions)) { return; } $extElement = $parent->ownerDocument->createElementNS(Constants::NS_SAMLP, 'samlp:Extensions'); $parent->appendChild($extElement); foreach ($extensions as $ext) { $ext->toXML($extElement); } }\n\n    ### Response: Add a list of Extensions to the given element.\n\n@param \\DOMElement $parent The element we should add the extensions to.\n@param \\SAML2\\XML\\Chunk[] $extensions List of extension objects.\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"unchecked\"}) public static String prepareCsrfToken(final HttpSession session, final int timeToLive) { Set<Token> tokenSet = (Set<Token>) session.getAttribute(CSRF_TOKEN_SET); if (tokenSet == null) { tokenSet = new HashSet<>(); session.setAttribute(CSRF_TOKEN_SET, tokenSet); } String value; boolean unique; do { value = RandomString.get().randomAlphaNumeric(32); assureSize(tokenSet); unique = tokenSet.add(new Token(value, timeToLive)); } while (!unique); return value; }\n\n    ### Response:", "ground_truth": "Generates new CSRF token and puts it in the session. Returns generated token value.", "predict": "Prepares and returns a CSRF token to mitigate Cross site request forgery attacks."}, {"ID": 755, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (k *kubernetesMethod) readJWT() (string, error) { // load configured token path if set, default to serviceAccountFile tokenFilePath := serviceAccountFile if k.tokenPath != \"\" { tokenFilePath = k.tokenPath } data := k.jwtData // k.jwtData should only be non-nil in tests if data == nil { f, err := os.Open(tokenFilePath) if err != nil { return \"\", err } data = f } defer data.Close() contentBytes, err := ioutil.ReadAll(data) if err != nil { return \"\", err } return strings.TrimSpace(string(contentBytes)), nil }\n\n    ### Response: // readJWT reads the JWT data for the Agent to submit to Vault. The default is\n// to read the JWT from the default service account location, defined by the\n// constant serviceAccountFile. In normal use k.jwtData is nil at invocation and\n// the method falls back to reading the token path with os.Open, opening a file\n// from either the default location or from the token_path path specified in\n// configuration..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static void assureSize(final Set<Token> tokenSet) { if (tokenSet.size() < maxTokensPerSession) { return; } long validUntilMin = Long.MAX_VALUE; Token tokenToRemove = null; Iterator<Token> iterator = tokenSet.iterator(); while (iterator.hasNext()) { Token token = iterator.next(); if (token.isExpired()) { iterator.remove(); continue; } if (token.validUntil < validUntilMin) { validUntilMin = token.validUntil; tokenToRemove = token; } } if ((tokenToRemove != null) && (tokenSet.size() >= maxTokensPerSession)) { tokenSet.remove(tokenToRemove); } }\n\n    ### Response:", "ground_truth": "Removes expired tokens if token set is full.\n@see #setMaxTokensPerSession(int)", "predict": "// This method assures that the given token set contains no\n// less than MaxTokensPerSession tokens, by removing tokens that\n// are no longer valid, plus the maximum MaxTokensPerSession\n// tokens if there are too few tokens in the set to begin\n// with."}, {"ID": 756, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int getCharOffsetXElem(int pos) { if (text != null) { FontMetrics fm = g.getFontMetrics(); if (pos <= textStart) return 0; else if (pos > textStart && pos < textEnd) return stringWidth(fm, text.substring(textStart, pos)); else return stringWidth(fm, text.substring(textStart, textEnd)); } else return 0; }\n\n    ### Response: Computes the X pixel offset of the given character of the box text. The character position is specified within the\nwhole source text node.\n@param pos the character position in the string absolutely within the source text node (0 is the first character in the node)\n@return the X offset in pixels or 0 when the position does not fit to this box.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"unchecked\"}) public static boolean checkCsrfToken(final HttpSession session, final String tokenValue) { Set<Token> tokenSet = (Set<Token>) session.getAttribute(CSRF_TOKEN_SET); if ((tokenSet == null) && (tokenValue == null)) { return true; } if ((tokenSet == null) || (tokenValue == null)) { return false; } boolean found = false; Iterator<Token> it = tokenSet.iterator(); while (it.hasNext()) { Token t = it.next(); if (t.isExpired()) { it.remove(); continue; } if (t.getValue().equals(tokenValue)) { it.remove(); found = true; } } return found; }\n\n    ### Response:", "ground_truth": "Checks token value.\nC", "predict": "Checks if the given token belongs to the given session or not by examining the set of tokens stored in the session. If\nthere is no set or if the token does not match the given token value, true is returned indicating that the token does not\nbelong to the session. Otherwise, the token may be expired, thus the token may be removed from the set and the method\nreturns true indicating that the token belongs to the session."}, {"ID": 757, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function prepare_links( $term ) { $base = $this->namespace . '/' . $this->rest_base; $links = array( 'self' => array( 'href' => rest_url( trailingslashit( $base ) . $term->term_id ), ), 'collection' => array( 'href' => rest_url( $base ), ), 'about' => array( 'href' => rest_url( sprintf( 'wp/v2/taxonomies/%s', $this->taxonomy ) ), ), ); if ( $term->parent ) { $parent_term = get_term( (int) $term->parent, $term->taxonomy ); if ( $parent_term ) { $links['up'] = array( 'href' => rest_url( trailingslashit( $base ) . $parent_term->term_id ), 'embeddable' => true, ); } } $taxonomy_obj = get_taxonomy( $term->taxonomy ); if ( empty( $taxonomy_obj->object_type ) ) { return $links; } $post_type_links = array(); foreach ( $taxonomy_obj->object_type as $type ) { $post_type_object = get_post_type_object( $type ); if ( empty( $post_type_object->show_in_rest ) ) { continue; } $rest_base = ! empty( $post_type_object->rest_base ) ? $post_type_object->rest_base : $post_type_object->name; $post_type_links[] = array( 'href' => add_query_arg( $this->rest_base, $term->term_id, rest_url( sprintf( 'wp/v2/%s', $rest_base ) ) ), ); } if ( ! empty( $post_type_links ) ) { $links['https://api.w.org/post_type'] = $post_type_links; } return $links; }\n\n    ### Response: Prepares links for the request.\n\n@param object $term Term object.\n@return array Links for the given term..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static BeanCopy from(final Object source) { BeanCopy beanCopy = new BeanCopy(source); beanCopy.isSourceMap = source instanceof Map; return beanCopy; }\n\n    ### Response:", "ground_truth": "Defines source, detects a map.", "predict": "Creates BeanCopy objects from objects or maps of objects with bean attributes marked with the @BeanCopy annotation or from objects with bean attributes marked with the @AutoCopy annotation or from objects with bean attributes marked with the @AutoCopyAnnotation annotation or from objects with bean attributes marked with the @AutoAnnotation annotation or from objects with bean attributes marked with the @AutoAnnotationAnnotation annotation or from objects with bean attributes marked with the annotation of annotation of annotation of annotation of annotation of annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation annotation"}, {"ID": 758, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def reload_handler(self, c, e): \"\"\"This handles reloads.\"\"\" cmd = self.is_reload(e) cmdchar = self.config['core']['cmdchar'] if cmd is not None: # If we're in a minimal reload state, only the owner can do stuff, as we can't rely on the db working. if self.reload_event.set(): admins = [self.config['auth']['owner']] else: with self.handler.db.session_scope() as session: admins = [x.nick for x in session.query(orm.Permissions).all()] if e.source.nick not in admins: c.privmsg(self.get_target(e), \"Nope, not gonna do it.\") return importlib.reload(reloader) self.reload_event.set() cmdargs = cmd[len('%sreload' % cmdchar) + 1:] try: if reloader.do_reload(self, e, cmdargs): if self.config.getboolean('feature', 'server'): self.server = server.init_server(self) self.reload_event.clear() logging.info(\"Successfully reloaded\") except Exception as ex: backtrace.handle_traceback(ex, c, self.get_target(e), self.config)\n\n    ### Response: This handles reloads..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void copy() { beanUtil = new BeanUtilBean() .declared(declared) .forced(forced) .silent(true); visit(); }\n\n    ### Response:", "ground_truth": "Performs the copying.", "predict": "Decorates objects with BeanUtil annotations to add reflection behavior to the objects, and copies objects to the output collection during the visit()."}, {"ID": 759, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def addClass(self, cn): '''Add the specific class names to the class set and return ``self``. ''' if cn: if isinstance(cn, (tuple, list, set, frozenset)): add = self.addClass for c in cn: add(c) else: classes = self._classes if classes is None: self._extra['classes'] = classes = set() add = classes.add for cn in cn.split(): add(slugify(cn)) return self\n\n    ### Response: Add the specific class names to the class set and return ``self``..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected boolean visitProperty(String name, final Object value) { if (isTargetMap) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET; } beanUtil.setProperty(destination, name, value); return true; }\n\n    ### Response:", "ground_truth": "Copies single property to the destination.\nExceptions are ignored, so copying continues if\ndestination does not have some of the sources properties.", "predict": "Override visitProperty to set the given Map to the given destination Map if `isTargetMap` is true and the given Map names contains the given name and corresponding Value of this property."}, {"ID": 760, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function pivotTable(): string { if (!empty($this->option(Record::PIVOT_TABLE))) { return $this->option(Record::PIVOT_TABLE); } $source = $this->definition->sourceContext(); $target = $this->definition->targetContext(); //Generating pivot table name $names = [$source->getRole(), $target->getRole()]; asort($names); return implode('_', $names) . static::PIVOT_POSTFIX; }\n\n    ### Response: Generate name of pivot table or fetch if from schema.\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void init(final TemplateData templateData) { super.init(templateData); if (entity != null) { ded = lookupType(entity); } else { Object object = templateData.getObjectReference(entityName); if (object != null) { ded = lookupType(resolveClass(object)); } else { ded = lookupName(entityName); } } String tableReference = this.tableReference; if (tableReference == null) { tableReference = tableAlias; } if (tableReference == null) { tableReference = entityName; } if (tableReference == null) { tableReference = ded.getEntityName(); } templateData.registerTableReference(tableReference, ded, tableAlias); }\n\n    ### Response:", "ground_truth": "Resolves and registers table references.", "predict": "Override default behavior to generate tableReference and resolve Class and names to DDL names"}, {"ID": 761, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function load($locale) { if (isset($this->cache[$locale])) { return $this->cache[$locale]; } // New Translator array $trans = []; // Split the language: language, region, locale, etc $parts = string_split($locale, '-'); do { // Create a path for this set of parts $path = implode(DS, $parts); // Remove the last part if ($files = $this->findLanguageFile($path)) { $trans = $this->loadMessages($files, $trans); } array_pop($parts); } while ($parts); // Cache the Translator table locally return $this->cache[$locale] = $trans; }\n\n    ### Response: Returns the Translator array for a given language.\n\n// Get all defined Spanish messages\n$messages = $trans->load('es');\n\n@param string $locale language to load\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public <S extends Scope> S resolveScope(final Class<S> scopeType) { S scope = (S) scopes.get(scopeType); if (scope == null) { try { scope = newInternalInstance(scopeType, (PetiteContainer) this); } catch (Exception ex) { throw new PetiteException(\"Invalid Petite scope: \" + scopeType.getName(), ex); } registerScope(scopeType, scope); scopes.put(scopeType, scope); } return scope; }\n\n    ### Response:", "ground_truth": "Resolves and registers scope from a scope type.", "predict": "Resolves the given scope given its Class and creates an instance of it or looks for the given scope in the given Scope registry and returns it if found."}, {"ID": 762, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (priv *PrivateKey) Precompute() { if priv.Precomputed.Dp != nil { return } priv.Precomputed.Dp = new(big.Int).Sub(priv.Primes[0], bigOne) priv.Precomputed.Dp.Mod(priv.D, priv.Precomputed.Dp) priv.Precomputed.Dq = new(big.Int).Sub(priv.Primes[1], bigOne) priv.Precomputed.Dq.Mod(priv.D, priv.Precomputed.Dq) priv.Precomputed.Qinv = new(big.Int).ModInverse(priv.Primes[1], priv.Primes[0]) r := new(big.Int).Mul(priv.Primes[0], priv.Primes[1]) priv.Precomputed.CRTValues = make([]CRTValue, len(priv.Primes)-2) for i := 2; i < len(priv.Primes); i++ { prime := priv.Primes[i] values := &priv.Precomputed.CRTValues[i-2] values.Exp = new(big.Int).Sub(prime, bigOne) values.Exp.Mod(priv.D, values.Exp) values.R = new(big.Int).Set(r) values.Coeff = new(big.Int).ModInverse(r, prime) r.Mul(r, prime) } }\n\n    ### Response: // Precompute performs some calculations that speed up private key operations\n// in the future..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> BeanDefinition<T> registerPetiteBean( final Class<T> type, String name, Class<? extends Scope> scopeType, WiringMode wiringMode, final boolean define, final Consumer<T> consumer ) { if (name == null) { name = resolveBeanName(type); } if (wiringMode == null) { wiringMode = annotationResolver.resolveBeanWiringMode(type); } if (wiringMode == WiringMode.DEFAULT) { wiringMode = petiteConfig.getDefaultWiringMode(); } if (scopeType == null) { scopeType = annotationResolver.resolveBeanScopeType(type); } if (scopeType == null) { scopeType = SingletonScope.class; } // remove existing bean BeanDefinition existing = removeBean(name); if (existing != null) { if (petiteConfig.getDetectDuplicatedBeanNames()) { throw new PetiteException( \"Duplicated bean name detected while registering class '\" + type.getName() + \"'. Petite bean class '\" + existing.type.getName() + \"' is already registered with the name: \" + name); } } // check if type is valid if (type.isInterface()) { throw new PetiteException(\"PetiteBean can not be an interface: \" + type.getName()); } // registration if (log.isDebugEnabled()) { log.info(\"Petite bean: [\" + name + \"] --> \" + type.getName() + \" @ \" + scopeType.getSimpleName() + \":\" + wiringMode.toString()); } // register Scope scope = resolveScope(scopeType); BeanDefinition<T> beanDefinition = createBeanDefinitionForRegistration(name, type, scope, wiringMode, consumer); registerBean(name, beanDefinition); // providers ProviderDefinition[] providerDefinitions = petiteResolvers.resolveProviderDefinitions(type, name); if (providerDefinitions != null) { for (ProviderDefinition providerDefinition : providerDefinitions) { providers.put(providerDefinition.name, providerDefinition); } } // define if (define) { beanDefinition.ctor = petiteResolvers.resolveCtorInjectionPoint(beanDefinition.type()); beanDefinition.properties = PropertyInjectionPoint.EMPTY; beanDefinition.methods = MethodInjectionPoint.EMPTY; beanDefinition.initMethods = InitMethodPoint.EMPTY; beanDefinition.destroyMethods = DestroyMethodPoint.EMPTY; } // return return beanDefinition; }\n\n    ### Response:", "ground_truth": "Registers or defines a bean.\n\n@param type bean type, must be specified\n@param name bean name, if null it will be resolved from the class (name or annotation)\n@param scopeType bean scope, if null it will be resolved from the class (annotation or default one)\n@param wiringMode wiring mode, if null it will be resolved from the class (annotation or default one)\n@param define when set to true bean will be defined - all injection points will be set to none", "predict": "// Precomputes bean definition for given bean class // Checks existence of bean definition // Resolves bean names // Resolves bean scope // Resolves bean wiring mode // Resolves bean consumers // Resolves bean definition consumers // Resolves bean definition constructor // Resolves bean definition bean attributes // Resolves bean definition bean method // Resolves bean definition bean init and destroy methods // Resolves bean definition bean lifecycle // Resolves bean definition bean SPI // Resolves bean definition bean SPI consumers // Resolves bean definition bean SPI consumed objects // Resolves bean definition bean SPI consumed objects consumed objects // Resolves bean definition bean SPI consumed objects consumed objects consumed objects // Resolves bean definition bean SPI consumed objects consumed objects consumed objects // Resolves bean definition bean SPI consumed objects consumed objects consumed objects // Resolves bean definition bean SPI consumed objects consumed objects consumed objects // Resolves bean definition bean SPI consumed objects consumed objects consumed objects // Resolves"}, {"ID": 763, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function recursiveUTF8Decode($result) { if (is_array($result)) { foreach ($result as &$value) { $value = $this->recursiveUTF8Decode($value); } return $result; } else { return utf8_decode($result); } }\n\n    ### Response: recursively decode utf8.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void registerBean(final String name, final BeanDefinition beanDefinition) { beans.put(name, beanDefinition); if (!petiteConfig.isUseAltBeanNames()) { return; } Class type = beanDefinition.type(); if (annotationResolver.beanHasAnnotationName(type)) { return; } Class[] interfaces = ClassUtil.resolveAllInterfaces(type); for (Class anInterface : interfaces) { String altName = annotationResolver.resolveBeanName(anInterface, petiteConfig.getUseFullTypeNames()); if (name.equals(altName)) { continue; } if (beans.containsKey(altName)) { continue; } if (beansAlt.containsKey(altName)) { BeanDefinition existing = beansAlt.get(altName); if (existing != null) { beansAlt.put(altName, null); // store null as value to mark that alt name is duplicate } } else { beansAlt.put(altName, beanDefinition); } } }\n\n    ### Response:", "ground_truth": "Registers bean definition by putting it in the beans map. If bean does\nnot have petite name explicitly defined, alternative bean names\nwill be registered.", "predict": "Register beans of given names and annotations with Spring."}, {"ID": 764, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private ReliabilitySubset createNonPersistentSubset(Reliability reliability) { if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.entry( tc, \"createNonPersistentSubset\", new Object[] { reliability }); ReliabilitySubset subset = new ReliabilitySubset(reliability, initialData); subsets[getIndex(reliability)] = subset; subsetIDs[getIndex(reliability)] = NO_ID; if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.exit(tc, \"createNonPersistentSubset\", subset); return subset; }\n\n    ### Response: Create a new ReliabilitySubset for the given Reliability but do not\npersist it.\n\n@param reliability.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void removeBean(final Class type) { // collect bean names Set<String> beanNames = new HashSet<>(); for (BeanDefinition def : beans.values()) { if (def.type.equals(type)) { beanNames.add(def.name); } } // remove collected bean names for (String beanName : beanNames) { removeBean(beanName); } }\n\n    ### Response:", "ground_truth": "Removes all petite beans of provided type. Bean name is not resolved from a type!\nInstead, all beans are iterated and only beans with equal types are removed.\n@see #removeBean(String)", "predict": "Remove Bean from Spring Context for the given Class but do not\npersist it."}, {"ID": 765, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function checkLogFile($path) { $status = true; $filename = basename($path); $message = \"The log file [$filename] is valid.\"; if ($this->isSingleLogFile($filename)) { $this->status = $status = false; $this->messages['files'][$filename] = $message = \"You have a single log file in your application, you should split the [$filename] into separate log files.\"; } elseif ($this->isInvalidLogDate($filename)) { $this->status = $status = false; $this->messages['files'][$filename] = $message = \"The log file [$filename] has an invalid date, the format must be like laravel-YYYY-MM-DD.log.\"; } $this->files[$filename] = compact('filename', 'status', 'message', 'path'); }\n\n    ### Response: Check a log file.\n\n@param  string  $path.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String[] resolveBeanNamesForType(final Class type) { String[] beanNames = beanCollections.get(type); if (beanNames != null) { return beanNames; } ArrayList<String> list = new ArrayList<>(); for (Map.Entry<String, BeanDefinition> entry : beans.entrySet()) { BeanDefinition beanDefinition = entry.getValue(); if (ClassUtil.isTypeOf(beanDefinition.type, type)) { String beanName = entry.getKey(); list.add(beanName); } } if (list.isEmpty()) { beanNames = StringPool.EMPTY_ARRAY; } else { beanNames = list.toArray(new String[0]); } beanCollections.put(type, beanNames); return beanNames; }\n\n    ### Response:", "ground_truth": "Resolves bean names for give type.", "predict": "Resolves BeanNames for given Bean Type"}, {"ID": 766, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function mustLoadStoredRoutine(): bool { // If this is the first time we see the source file it must be loaded. if (!isset($this->phpStratumOldMetadata)) return true; // If the source file has changed the source file must be loaded. if ($this->phpStratumOldMetadata['timestamp']!=$this->filemtime) return true; // If the value of a placeholder has changed the source file must be loaded. foreach ($this->phpStratumOldMetadata['replace'] as $place_holder => $old_value) { if (!isset($this->replacePairs[strtoupper($place_holder)]) || $this->replacePairs[strtoupper($place_holder)]!==$old_value) { return true; } } // If stored routine not exists in database the source file must be loaded. if (!isset($this->rdbmsOldRoutineMetadata)) return true; // If current sql-mode is different the source file must reload. if ($this->rdbmsOldRoutineMetadata['sql_mode']!=$this->sqlMode) return true; // If current character set is different the source file must reload. if ($this->rdbmsOldRoutineMetadata['character_set_client']!=$this->characterSet) return true; // If current collation is different the source file must reload. if ($this->rdbmsOldRoutineMetadata['collation_connection']!=$this->collate) return true; return false; }\n\n    ### Response: Returns true if the source file must be load or reloaded. Otherwise returns false.\n\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerPetiteCtorInjectionPoint(final String beanName, final Class[] paramTypes, final String[] references) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); Constructor constructor = null; if (paramTypes == null) { CtorDescriptor[] ctors = cd.getAllCtorDescriptors(); if (ctors != null && ctors.length > 0) { if (ctors.length > 1) { throw new PetiteException(ctors.length + \" suitable constructor found as injection point for: \" + beanDefinition.type.getName()); } constructor = ctors[0].getConstructor(); } } else { CtorDescriptor ctorDescriptor = cd.getCtorDescriptor(paramTypes, true); if (ctorDescriptor != null) { constructor = ctorDescriptor.getConstructor(); } } if (constructor == null) { throw new PetiteException(\"Constructor not found: \" + beanDefinition.type.getName()); } BeanReferences[] ref = referencesResolver.resolveReferenceFromValues(constructor, references); beanDefinition.ctor = new CtorInjectionPoint(constructor, ref); }\n\n    ### Response:", "ground_truth": "Registers constructor injection point.\n\n@param beanName bean name\n@param paramTypes constructor parameter types, may be null\n@param references references for arguments", "predict": "Injection point registration for the given bean definition. If no constructor arguments or arguments don't match annotations of the bean definition, exception may be thrown."}, {"ID": 767, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function cmdInstallModule() { $result = $this->module_model->install($this->getParam(0)); if ($result !== true) { $this->errorAndExit($result); } $this->output(); }\n\n    ### Response: Callback for \"module-install\" command.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerPetitePropertyInjectionPoint(final String beanName, final String property, final String reference) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); PropertyDescriptor propertyDescriptor = cd.getPropertyDescriptor(property, true); if (propertyDescriptor == null) { throw new PetiteException(\"Property not found: \" + beanDefinition.type.getName() + '#' + property); } BeanReferences ref = referencesResolver.resolveReferenceFromValue(propertyDescriptor, reference); PropertyInjectionPoint pip = new PropertyInjectionPoint(propertyDescriptor, ref); beanDefinition.addPropertyInjectionPoint(pip); }\n\n    ### Response:", "ground_truth": "Registers property injection point.\n\n@param beanName bean name\n@param property property name\n@param reference explicit injection reference, may be null", "predict": "Injection point for the property of the bean of name \"{ beanName }\" for the reference \"{ reference }\""}, {"ID": 768, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function add(Distance $b) { return Distance::m(bcadd($this->m, $b->m), static::$s); }\n\n    ### Response: Adds another distance to this instance and returns a new instance with\nthe sum.\n\n@param Distance $b Distance to add\n\n@return static Sum of the two distances.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerPetiteSetInjectionPoint(final String beanName, final String property) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); PropertyDescriptor propertyDescriptor = cd.getPropertyDescriptor(property, true); if (propertyDescriptor == null) { throw new PetiteException(\"Property not found: \" + beanDefinition.type.getName() + '#' + property); } SetInjectionPoint sip = new SetInjectionPoint(propertyDescriptor); beanDefinition.addSetInjectionPoint(sip); }\n\n    ### Response:", "ground_truth": "Registers set injection point.\n\n@param beanName bean name\n@param property set property name", "predict": "Injects an instance to the given bean to the given property of the bean."}, {"ID": 769, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (l *loki) shouldBreakThings() bool { l.Lock() defer l.Unlock() l.callcount++ if l.callcount > 15 { l.callcount = 0 return false } if l.callcount > 10 { return true } return false }\n\n    ### Response: // this is just a function that will return true\n// the last 5 out of every 15 times called.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerPetiteMethodInjectionPoint(final String beanName, final String methodName, final Class[] arguments, final String[] references) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); Method method = null; if (arguments == null) { MethodDescriptor[] methods = cd.getAllMethodDescriptors(methodName); if (methods != null && methods.length > 0) { if (methods.length > 1) { throw new PetiteException(methods.length + \" suitable methods found as injection points for: \" + beanDefinition.type.getName() + '#' + methodName); } method = methods[0].getMethod(); } } else { MethodDescriptor md = cd.getMethodDescriptor(methodName, arguments, true); if (md != null) { method = md.getMethod(); } } if (method == null) { throw new PetiteException(\"Method not found: \" + beanDefinition.type.getName() + '#' + methodName); } BeanReferences[] ref = referencesResolver.resolveReferenceFromValues(method, references); MethodInjectionPoint mip = new MethodInjectionPoint(method, ref); beanDefinition.addMethodInjectionPoint(mip); }\n\n    ### Response:", "ground_truth": "Registers method injection point.\n\n@param beanName bean name\n@param methodName method name\n@param arguments method arguments, may be null\n@param references injection references", "predict": "// this method uses Spring's BeanReference Resolver to resolve references to Spring beans in the arguments of the method being registered\n// It looks for an appropriate Spring bean to resolve the references to by inspecting the BeanDescriptor of the Spring bean being invoked\n// It uses Spring's BeanReference Resolver to translate the BeanReference objects it receives to actual Spring beans objects\n// Finally, this method registers the Spring bean to Spring's SpringContext using Spring's BeanReference Resolver"}, {"ID": 770, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func CheckPassword(h Hasher, cleartext, encoded string) bool { return h.Verify(cleartext, encoded) }\n\n    ### Response: // CheckPassword verifies the given cleartext password against the given\n// encoded string using the given hasher..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerPetiteInitMethods(final String beanName, final InitMethodInvocationStrategy invocationStrategy, String... initMethodNames) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); if (initMethodNames == null) { initMethodNames = StringPool.EMPTY_ARRAY; } int total = initMethodNames.length; InitMethodPoint[] initMethodPoints = new InitMethodPoint[total]; int i; for (i = 0; i < initMethodNames.length; i++) { MethodDescriptor md = cd.getMethodDescriptor(initMethodNames[i], ClassUtil.EMPTY_CLASS_ARRAY, true); if (md == null) { throw new PetiteException(\"Init method not found: \" + beanDefinition.type.getName() + '#' + initMethodNames[i]); } initMethodPoints[i] = new InitMethodPoint(md.getMethod(), i, invocationStrategy); } beanDefinition.addInitMethodPoints(initMethodPoints); }\n\n    ### Response:", "ground_truth": "Registers init method.\n\n@param beanName bean name\n@param invocationStrategy moment of invocation\n@param initMethodNames init method names", "predict": "// RegisterPetiteInitMethods creates BeanDefinition and populates its initMethods array // with given names of init methods of the given bean // to add them to the BeanDescriptor // of the bean // It also populates the corresponding BeanDescriptor // with other information // related to init methods // of the bean // It also populates // BeanDescriptor // with other // information // related to init // methods of the bean"}, {"ID": 771, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean initPosTagger(String modelDir){ try{ this.vnPosTagger = new MaxentTagger(modelDir); } catch (Exception e){ System.out.println(\"Error while initializing POS TAgger\"); vnPosTagger = null; return false; } return true; }\n\n    ### Response: Initialize the pos tagger for Vietnamese.\n\n@param modelDir the model dir\n@return true if the initialization is successful and false otherwise.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerPetiteDestroyMethods(final String beanName, String... destroyMethodNames) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); if (destroyMethodNames == null) { destroyMethodNames = StringPool.EMPTY_ARRAY; } int total = destroyMethodNames.length; DestroyMethodPoint[] destroyMethodPoints = new DestroyMethodPoint[total]; int i; for (i = 0; i < destroyMethodNames.length; i++) { MethodDescriptor md = cd.getMethodDescriptor(destroyMethodNames[i], ClassUtil.EMPTY_CLASS_ARRAY, true); if (md == null) { throw new PetiteException(\"Destroy method not found: \" + beanDefinition.type.getName() + '#' + destroyMethodNames[i]); } destroyMethodPoints[i] = new DestroyMethodPoint(md.getMethod()); } beanDefinition.addDestroyMethodPoints(destroyMethodPoints); }\n\n    ### Response:", "ground_truth": "Registers destroy method.\n\n@param beanName bean name\n@param destroyMethodNames destroy method names", "predict": "Register the given bean to the Petite Framework to add the given destroy methods to the bean for graceful de-instantiation of the bean objects during garbage collection of the application."}, {"ID": 772, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func suffixMatchLen(a, b []byte) int { if len(b) > len(a) { b = b[:len(a)] } // i is how much of b to try to match for i := len(b); i > 0; i-- { // j is how many chars we've compared j := 0 for ; j < i; j++ { if b[i-1-j] != a[len(a)-1-j] { goto shorter } } return j shorter: } return 0 }\n\n    ### Response: // Looking for b at the end of a..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerPetiteProvider(final String providerName, final String beanName, final String methodName, final Class[] arguments) { BeanDefinition beanDefinition = lookupBeanDefinition(beanName); if (beanDefinition == null) { throw new PetiteException(\"Bean not found: \" + beanName); } Class beanType = beanDefinition.type; ClassDescriptor cd = ClassIntrospector.get().lookup(beanType); MethodDescriptor md = cd.getMethodDescriptor(methodName, arguments, true); if (md == null) { throw new PetiteException(\"Provider method not found: \" + methodName); } ProviderDefinition providerDefinition = new ProviderDefinition(providerName, beanName, md.getMethod()); providers.put(providerName, providerDefinition); }\n\n    ### Response:", "ground_truth": "Registers instance method provider.\n\n@param providerName provider name\n@param beanName bean name\n@param methodName instance method name\n@param arguments method argument types", "predict": "// Registers the given Petite bean to the given provider and looks for the given method in the bean to run the given arguments and writes into the Petite registry"}, {"ID": 773, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _name_exists(self, name): \"\"\" Checks if we already have an opened tab with the same name. \"\"\" for i in range(self.count()): if self.tabText(i) == name: return True return False\n\n    ### Response: Checks if we already have an opened tab with the same name..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerPetiteProvider(final String providerName, final Class type, final String staticMethodName, final Class[] arguments) { ClassDescriptor cd = ClassIntrospector.get().lookup(type); MethodDescriptor md = cd.getMethodDescriptor(staticMethodName, arguments, true); if (md == null) { throw new PetiteException(\"Provider method not found: \" + staticMethodName); } ProviderDefinition providerDefinition = new ProviderDefinition(providerName, md.getMethod()); providers.put(providerName, providerDefinition); }\n\n    ### Response:", "ground_truth": "Registers static method provider.\n\n@param providerName provider name\n@param type class type\n@param staticMethodName static method name\n@param arguments method argument types", "predict": "The above method registers the given provider to Petite using the given provider name, its corresponding method, arguments, and its corresponding metadata. It makes sure that the given method exists by verifying that its metadata matches the given arguments of the method. If the given method does not exist, an exception is thrown. Finally, it adds the given provider to Petite's list of providers with the given provider name."}, {"ID": 774, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static float getShadowWidth(@NonNull final Context context, final int elevation, @NonNull final Orientation orientation, final boolean parallelLight) { float referenceElevationWidth = (float) elevation / (float) REFERENCE_ELEVATION * REFERENCE_SHADOW_WIDTH; float shadowWidth; if (parallelLight) { shadowWidth = referenceElevationWidth * BOTTOM_SCALE_FACTOR; } else { switch (orientation) { case LEFT: shadowWidth = referenceElevationWidth * LEFT_SCALE_FACTOR; break; case TOP: shadowWidth = referenceElevationWidth * TOP_SCALE_FACTOR; break; case RIGHT: shadowWidth = referenceElevationWidth * RIGHT_SCALE_FACTOR; break; case BOTTOM: shadowWidth = referenceElevationWidth * BOTTOM_SCALE_FACTOR; break; default: throw new IllegalArgumentException(\"Invalid orientation: \" + orientation); } } return dpToPixels(context, shadowWidth); }\n\n    ### Response: Returns the width of a shadow, which is located besides an edge of an elevated view.\n\n@param context\nThe context, which should be used, as an instance of the class {@link Context}. The\ncontext may not be null\n@param elevation\nThe elevation, which should be emulated, in dp as an {@link Integer} value. The\nelevation must be at least 0 and at maximum the value of the constant\nMAX_ELEVATION\n@param orientation\nThe orientation of the shadow in relation to the elevated view as a value of the enum\n{@link Orientation}. The orientation may either be LEFT,\nTOP, RIGHT or BOTTOM\n@param parallelLight\nTrue, if parallel light should be emulated, false otherwise\n@return The width of the shadow in pixels as a {@link Float} value.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void forEachBeanType(final Class type, final Consumer<String> beanNameConsumer) { forEachBean(bd -> { if (ClassUtil.isTypeOf(bd.type, type)) { beanNameConsumer.accept(bd.name); } }); }\n\n    ### Response:", "ground_truth": "Iterates all beans that are of given type.", "predict": "The function iterates over objects of the given bean type and\nprovides the name of objects to the given consumer.<P>This function iterates over objects of the given bean\ntype and\nprovides the name of objects to the given consumer.<P>This function iterates over objects of the given bean\ntype and\nprovides the name of objects to the given consumer.<P>This function iterates over objects of the given bean\ntype and\nprovides the name of objects to the given consumer.<P>This function iterates over objects of the given bean\ntype and\nprovides the name of objects to the given consumer.<P>This function iterates over objects of the given bean\ntype and\nprovides the name of objects to the given consumer.<P>This function iterates over objects of the given bean\ntype and\nprovides the name of objects to the given consumer.<P>This function iterates over objects of the given bean\ntype and\nprovides the name of objects to the given consumer.<P>This"}, {"ID": 775, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function (cb) { this.swfClient.registerWorkflowType({ \"domain\": this.config.domain, \"name\": this.config.workflowType.name, \"version\": this.config.workflowType.version }, cb); }\n\n    ### Response: register the workflow\n@param {Function} [cb].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void defineParameters(final Map<?, ?> properties) { for (Map.Entry<?, ?> entry : properties.entrySet()) { defineParameter(entry.getKey().toString(), entry.getValue()); } }\n\n    ### Response:", "ground_truth": "Defines many parameters at once.", "predict": "Defines parameters for the workflow"}, {"ID": 776, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (b *BaseBody) CreatedAt() *strfmt.DateTime { t := strfmt.DateTime(b.StructCreatedAt) return &t }\n\n    ### Response: // CreatedAt returns the body's CreatedAt.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Object intercept(final ActionRequest actionRequest) throws Exception { printBefore(actionRequest); long startTime = System.currentTimeMillis(); Object result = null; try { result = actionRequest.invoke(); } catch (Exception ex) { result = \"<exception>\"; throw ex; } catch (Throwable th) { result = \"<throwable>\"; throw new Exception(th); } finally { long executionTime = System.currentTimeMillis() - startTime; printAfter(actionRequest, executionTime, result); } return result; }\n\n    ### Response:", "ground_truth": "Measure action invocation time.", "predict": "// Override extends the functionality of the original method to record its execution time and log its results."}, {"ID": 777, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (q *Query) WithMetrics(m metrics.Metrics) *Query { q.metrics = m return q }\n\n    ### Response: // WithMetrics sets the metrics collection to add evaluation metrics to. This\n// is optional..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int resolveJavaVersion(final int version) { final int javaVersionNumber = SystemUtil.info().getJavaVersionNumber(); final int platformVersion = javaVersionNumber - 8 + 52; return version > platformVersion ? version : platformVersion; }\n\n    ### Response:", "ground_truth": "Resolves Java version from current version.", "predict": "// Resolves the given java version to the proper platform version to enable proper\n// evaluation of the program"}, {"ID": 778, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function wrap(Filter $filter, Range $range = null) { if (null === $range) { return $filter; } return new self($filter, $range); }\n\n    ### Response: utility method that wraps given filter with given range\n\n@param   \\stubbles\\input\\Filter              $filter  decorated filter\n@param   \\stubbles\\input\\filter\\range\\Range  $range   range definition\n@return  \\stubbles\\input\\Filter.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void pushInt(final MethodVisitor mv, final int value) { if (value <= 5) { mv.visitInsn(ICONST_0 + value); } else if (value <= Byte.MAX_VALUE) { mv.visitIntInsn(BIPUSH, value); } else { mv.visitIntInsn(SIPUSH, value); } }\n\n    ### Response:", "ground_truth": "Pushes int value in an optimal way.", "predict": "generates int values from 0 to 5 and from 0 to int_max for arguments lesser or equal to int_max"}, {"ID": 779, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def string( element_name, # type: Text attribute=None, # type: Optional[Text] required=True, # type: bool alias=None, # type: Optional[Text] default='', # type: Optional[Text] omit_empty=False, # type: bool strip_whitespace=True, # type: bool hooks=None # type: Optional[Hooks] ): # type: (...) -> Processor \"\"\" Create a processor for string values. :param strip_whitespace: Indicates whether leading and trailing whitespace should be stripped from parsed string values. See also :func:`declxml.boolean` \"\"\" value_parser = _string_parser(strip_whitespace) return _PrimitiveValue( element_name, value_parser, attribute, required, alias, default, omit_empty, hooks )\n\n    ### Response: Create a processor for string values.\n\n    :param strip_whitespace: Indicates whether leading and trailing whitespace should be stripped\n        from parsed string values.\n\n    See also :func:`declxml.boolean`.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void checkArgumentIndex(final MethodInfo methodInfo, final int argIndex) { if ((argIndex < 1) || (argIndex > methodInfo.getArgumentsCount())) { throw new ProxettaException(\"Invalid argument index: \" + argIndex); } }\n\n    ### Response:", "ground_truth": "Validates argument index.", "predict": "\n    Checks that the argument index provided is in the correct range and\n    generates an exception message if the argument index is invalid."}, {"ID": 780, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *AffinityGroupService) NewCreateAffinityGroupParams(name string, affinityGroupType string) *CreateAffinityGroupParams { p := &CreateAffinityGroupParams{} p.p = make(map[string]interface{}) p.p[\"name\"] = name p.p[\"type\"] = affinityGroupType return p }\n\n    ### Response: // You should always use this function to get a new CreateAffinityGroupParams instance,\n// as then you are sure you have configured all required params.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String adviceFieldName(final String name, final int index) { return ProxettaNames.fieldPrefix + name + ProxettaNames.fieldDivider + index; }\n\n    ### Response:", "ground_truth": "Builds advice field name.", "predict": "// This function generates an AdviceFieldName string for the given name and index.\n    // It uses the ProxettaNames namespace for its fields prefix, and appends the given name and index to it to form the generated string."}, {"ID": 781, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function passwordResetHasFailed($response) { $message = trans($response); $token = Request::input('token'); return $this->redirectWithMessage(handles(\"orchestra::forgot/reset/{$token}\"), $message, 'error'); }\n\n    ### Response: Response when reset password failed.\n\n@param  string  $response\n\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String adviceMethodName(final String name, final int index) { return ProxettaNames.methodPrefix + name + ProxettaNames.methodDivider + index; }\n\n    ### Response:", "ground_truth": "Builds advice method name.", "predict": "Generates method names to add to the proxy for advice methods to add decorators to the objects of the advice target method."}, {"ID": 782, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def trigger(cls, streams): \"\"\" Given a list of streams, collect all the stream parameters into a dictionary and pass it to the union set of subscribers. Passing multiple streams at once to trigger can be useful when a subscriber may be set multiple times across streams but only needs to be called once. \"\"\" # Union of stream contents items = [stream.contents.items() for stream in set(streams)] union = [kv for kvs in items for kv in kvs] klist = [k for k, _ in union] key_clashes = set([k for k in klist if klist.count(k) > 1]) if key_clashes: clashes = [] dicts = [dict(kvs) for kvs in items] for clash in key_clashes: values = set(d[clash] for d in dicts if clash in d) if len(values) > 1: clashes.append((clash, values)) if clashes: msg = ', '.join(['%r has values %r' % (k, v) for k, v in clashes]) print('Parameter value clashes where %s' % msg) # Group subscribers by precedence while keeping the ordering # within each group subscriber_precedence = defaultdict(list) for stream in streams: stream._on_trigger() for precedence, subscriber in stream._subscribers: subscriber_precedence[precedence].append(subscriber) sorted_subscribers = sorted(subscriber_precedence.items(), key=lambda x: x[0]) subscribers = util.unique_iterator([s for _, subscribers in sorted_subscribers for s in subscribers]) with triggering_streams(streams): for subscriber in subscribers: subscriber(**dict(union)) for stream in streams: with util.disable_constant(stream): if stream.transient: stream.reset()\n\n    ### Response: Given a list of streams, collect all the stream parameters into\n        a dictionary and pass it to the union set of subscribers.\n\n        Passing multiple streams at once to trigger can be useful when a\n        subscriber may be set multiple times across streams but only\n        needs to be called once..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void loadSpecialMethodArguments(final MethodVisitor mv, final MethodInfo methodInfo) { mv.visitVarInsn(ALOAD, 0); for (int i = 1; i <= methodInfo.getArgumentsCount(); i++) { loadMethodArgument(mv, methodInfo, i); } }\n\n    ### Response:", "ground_truth": "Loads all method arguments before INVOKESPECIAL call.", "predict": "The given java Code generates method-level\n    comment which states that given an instance of an object,\n    an instruction to visit its fields and values and\n    ultimately generate arguments for a given method. It\n    also states that arguments are loaded from 0 to\n    methodInfo.getArgumentsCount() inclusive and finally\n    closes the loop by iterating over arguments of the\n    given method."}, {"ID": 783, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void makeWiring(WebSphereBeanDeploymentArchive wireFromBda, WebSphereBeanDeploymentArchive wireToBda, ClassLoader wireToBdaCL, ClassLoader wireFromBdaCL) { while (wireFromBdaCL != null) { if (wireFromBdaCL == wireToBdaCL) { wireFromBda.addBeanDeploymentArchive(wireToBda); break; } else { wireFromBdaCL = wireFromBdaCL.getParent(); } } //if we are here, it means the wireToBdaCL is root classloader, loading java.xx classes. All other bdas should be accessible to this new bda. if (wireFromBdaCL == wireToBdaCL) { wireFromBda.addBeanDeploymentArchive(wireToBda); } }\n\n    ### Response: Make a wiring from the wireFromBda to the wireToBda if the wireFromBda's classloader is the descendant of the wireToBda's classloader\n\n@param wireFromBda\n@param wireToBda\n@param wireToBdaCL\n@param wireFromBdaCL.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void loadStaticMethodArguments(final MethodVisitor mv, final MethodInfo methodInfo) { for (int i = 0; i < methodInfo.getArgumentsCount(); i++) { loadMethodArgument(mv, methodInfo, i); } }\n\n    ### Response:", "ground_truth": "Loads all method arguments before INVOKESTATIC call.", "predict": "Loads arguments of the given method into the given MethodVisitor."}, {"ID": 784, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def hangup(self, unique_id, configs=None): \"\"\" Issue a signal to hangup the specified process :Parameter unique_id: the name of the process \"\"\" self._send_signal(unique_id, signal.SIGHUP, configs)\n\n    ### Response: Issue a signal to hangup the specified process\n\n    :Parameter unique_id: the name of the process.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void loadVirtualMethodArguments(final MethodVisitor mv, final MethodInfo methodInfo) { for (int i = 1; i <= methodInfo.getArgumentsCount(); i++) { loadMethodArgument(mv, methodInfo, i); } }\n\n    ### Response:", "ground_truth": "Loads all method arguments before INVOKEVIRTUAL call.", "predict": "\n    Helper method to load arguments of the given method into the code for later resolution during function calls. It reads arguments from the Stack frame of the function invocation order and populates arguments into the Code for later resolution during function invocation. It reads arguments from the Stack frame of the function invocation order and populates arguments into the Code for later resolution during function invocation. It reads arguments from the Stack frame of the function invocation order and populates arguments into the Code for later resolution during function invocation. It reads arguments from the Stack frame of the function invocation order and populates arguments into the Code for later resolution during function invocation. It reads arguments from the Stack frame of the function invocation order and populates arguments into the Code for later resolution during function invocation. It reads arguments from the Stack frame of the function invocation order and populates arguments into the Code for later resolution during function invocation. It reads arguments from the Stack frame of the function invocation order and populates arguments into the Code for later resolution during function inv"}, {"ID": 785, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    async def _set_get_started(self): \"\"\" Set the \"get started\" action for all configured pages. \"\"\" page = self.settings() if 'get_started' in page: payload = page['get_started'] else: payload = {'action': 'get_started'} await self._send_to_messenger_profile(page, { 'get_started': { 'payload': ujson.dumps(payload), }, }) logger.info('Get started set for page %s', page['page_id'])\n\n    ### Response: Set the \"get started\" action for all configured pages..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void loadMethodArgument(final MethodVisitor mv, final MethodInfo methodInfo, final int index) { int offset = methodInfo.getArgumentOffset(index); int type = methodInfo.getArgument(index).getOpcode(); switch (type) { case 'V': break; case 'B': case 'C': case 'S': case 'I': case 'Z': mv.visitVarInsn(ILOAD, offset); break; case 'J': mv.visitVarInsn(LLOAD, offset); break; case 'F': mv.visitVarInsn(FLOAD, offset); break; case 'D': mv.visitVarInsn(DLOAD, offset); break; default: mv.visitVarInsn(ALOAD, offset); } }\n\n    ### Response:", "ground_truth": "Loads one argument. Index is 1-based. No conversion occurs.", "predict": "Loads an argument onto the stack of the specified method.."}, {"ID": 786, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void createItemAndRequestSubscription(BareJid jid, String name, String[] groups) throws NotLoggedInException, NoResponseException, XMPPErrorException, NotConnectedException, InterruptedException { createItem(jid, name, groups); sendSubscriptionRequest(jid); }\n\n    ### Response: Creates a new roster entry and presence subscription. The server will asynchronously\nupdate the roster with the subscription status.\n\n@param jid the XMPP address of the contact (e.g. johndoe@jabber.org)\n@param name   the nickname of the user.\n@param groups the list of group names the entry will belong to, or null if the\nthe roster entry won't belong to a group.\n@throws NoResponseException if there was no response from the server.\n@throws XMPPErrorException if an XMPP exception occurs.\n@throws NotLoggedInException If not logged in.\n@throws NotConnectedException\n@throws InterruptedException\n@since 4.4.0.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void storeMethodArgument(final MethodVisitor mv, final MethodInfo methodInfo, final int index) { int offset = methodInfo.getArgumentOffset(index); int type = methodInfo.getArgument(index).getOpcode(); switch (type) { case 'V': break; case 'B': case 'C': case 'S': case 'I': case 'Z': mv.visitVarInsn(ISTORE, offset); break; case 'J': mv.visitVarInsn(LSTORE, offset); break; case 'F': mv.visitVarInsn(FSTORE, offset); break; case 'D': mv.visitVarInsn(DSTORE, offset); break; default: mv.visitVarInsn(ASTORE, offset); } }\n\n    ### Response:", "ground_truth": "Stores one argument. Index is 1-based. No conversion occurs.", "predict": "Stores an int argument onto the stack frame of the specified method invocation."}, {"ID": 787, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Task unmountDiskMapping_Task(VsanHostDiskMapping[] mapping) throws InvalidState, RuntimeFault, VsanFault, RemoteException { return new Task(getServerConnection(), getVimService().unmountDiskMapping_Task(getMOR(), mapping)); }\n\n    ### Response: Unmount the mounted DiskMapping. An unmounted volume cannot be used for any VSAN operations. In contrast to\nRemoveDiskMapping_Task, this operation does not destroy or alter VSAN data on the disks. AddDisks_Task and\nInitializeDisks_Task can be used to re-mount the diskMapping.\n\n@param mapping Mapping\n@return This method returns a Task object with which to monitor the operation.\n@throws InvalidState\n@throws RuntimeFault\n@throws VsanFault\n@throws RemoteException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void prepareReturnValue(final MethodVisitor mv, final MethodInfo methodInfo, int varOffset) { varOffset += methodInfo.getAllArgumentsSize(); switch (methodInfo.getReturnType().getOpcode()) { case 'V': mv.visitInsn(ACONST_NULL); break; case 'B': AsmUtil.valueOfByte(mv); break; case 'C': AsmUtil.valueOfCharacter(mv); break; case 'S': AsmUtil.valueOfShort(mv); break; case 'I': AsmUtil.valueOfInteger(mv); break; case 'Z': AsmUtil.valueOfBoolean(mv); break; case 'J': AsmUtil.valueOfLong(mv); break; case 'F': AsmUtil.valueOfFloat(mv); break; case 'D': AsmUtil.valueOfDouble(mv); break; } }\n\n    ### Response:", "ground_truth": "Prepares return value.", "predict": "Prepares the return value for the given method to be returned to the caller of the method. It sets the contents of the return value to the appropriate values according to the method signature arguments and returns back to the caller of the method."}, {"ID": 788, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function() { this.numTrainingExamples = 0; this.groupFrequencyCount = new Object(); this.numWords = 0; this.wordFrequencyCount = new Object(); this.groupWordTotal = new Object(); this.groupWordFrequencyCount = new Object(); }\n\n    ### Response: Storage for the input parameters for the model.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String createMethodSignaturesKey(final int access, final String methodName, final String description, final String className) { return new StringBand(7) .append(access) .append(COLON) .append(description) .append(StringPool.UNDERSCORE) .append(className) .append(StringPool.HASH) .append(methodName) .toString(); }\n\n    ### Response:", "ground_truth": "Creates unique key for method signatures map.", "predict": "Allows for creating an accessor method for the given method to retrieve the signature string of the method described above it in the source code."}, {"ID": 789, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function create() { $data = Ensure::Input(func_get_args()); $url = URIResource::Make($this->path); $id = Locator::Find($this->client->post($url, $data->get())); $data->add(\"id\", $id); return Constructor::Make($this, $data->get(), TRUE); }\n\n    ### Response: General purpose create\n\n@param args for model's create\nsee object for more.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void newArray(final MethodVisitor mv, final Class componentType) { if (componentType == int.class) { mv.visitIntInsn(NEWARRAY, T_INT); return; } if (componentType == long.class) { mv.visitIntInsn(NEWARRAY, T_LONG); return; } if (componentType == float.class) { mv.visitIntInsn(NEWARRAY, T_FLOAT); return; } if (componentType == double.class) { mv.visitIntInsn(NEWARRAY, T_DOUBLE); return; } if (componentType == byte.class) { mv.visitIntInsn(NEWARRAY, T_BYTE); return; } if (componentType == short.class) { mv.visitIntInsn(NEWARRAY, T_SHORT); return; } if (componentType == boolean.class) { mv.visitIntInsn(NEWARRAY, T_BOOLEAN); return; } if (componentType == char.class) { mv.visitIntInsn(NEWARRAY, T_CHAR); return; } mv.visitTypeInsn(ANEWARRAY, AsmUtil.typeToSignature(componentType)); }\n\n    ### Response:", "ground_truth": "Creates new array.", "predict": "Generates an empty array of given componentType"}, {"ID": 790, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void modifyButtonsBasedOnScrollableContent(boolean scrollable) { if (getView() == null) { return; } View vButtonDivider = getView().findViewById(R.id.sdl_button_divider); View vButtonsBottomSpace = getView().findViewById(R.id.sdl_buttons_bottom_space); View vDefaultButtons = getView().findViewById(R.id.sdl_buttons_default); View vStackedButtons = getView().findViewById(R.id.sdl_buttons_stacked); if (vDefaultButtons.getVisibility() == View.GONE && vStackedButtons.getVisibility() == View.GONE) { // no buttons vButtonDivider.setVisibility(View.GONE); vButtonsBottomSpace.setVisibility(View.GONE); } else if (scrollable) { vButtonDivider.setVisibility(View.VISIBLE); vButtonsBottomSpace.setVisibility(View.GONE); } else { vButtonDivider.setVisibility(View.GONE); vButtonsBottomSpace.setVisibility(View.VISIBLE); } }\n\n    ### Response: Button divider should be shown only if the content is scrollable..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void storeIntoArray(final MethodVisitor mv, final Class componentType) { if (componentType == int.class) { mv.visitInsn(IASTORE); return; } if (componentType == long.class) { mv.visitInsn(LASTORE); return; } if (componentType == float.class) { mv.visitInsn(FASTORE); return; } if (componentType == double.class) { mv.visitInsn(DASTORE); return; } if (componentType == byte.class) { mv.visitInsn(BASTORE); return; } if (componentType == short.class) { mv.visitInsn(SASTORE); return; } if (componentType == boolean.class) { mv.visitInsn(BASTORE); return; } if (componentType == char.class) { mv.visitInsn(CASTORE); return; } mv.visitInsn(AASTORE); }\n\n    ### Response:", "ground_truth": "Stores element on stack into an array.", "predict": "Store values of given type into given array"}, {"ID": 791, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (m *Attitude) Pack() []byte { data := new(bytes.Buffer) binary.Write(data, binary.LittleEndian, m.TIME_BOOT_MS) binary.Write(data, binary.LittleEndian, m.ROLL) binary.Write(data, binary.LittleEndian, m.PITCH) binary.Write(data, binary.LittleEndian, m.YAW) binary.Write(data, binary.LittleEndian, m.ROLLSPEED) binary.Write(data, binary.LittleEndian, m.PITCHSPEED) binary.Write(data, binary.LittleEndian, m.YAWSPEED) return data.Bytes() }\n\n    ### Response: // Pack returns a packed byte array which represents a Attitude payload.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String extractEncoding(final String contentType, String defaultEncoding) { String encoding = extractEncoding(contentType); if (encoding == null) { if (defaultEncoding == null) { defaultEncoding = JoddCore.encoding; } encoding = defaultEncoding; } return encoding; }\n\n    ### Response:", "ground_truth": "Extracts encoding from a given content type.\n\n@param contentType     content type.\n@param defaultEncoding Default encoding to be used if extract returns {@code null}.\nIf defaultEncoding is {@code null}, {@link JoddCore#encoding} will be used.\n@return Encoding from the content type.\n@see #extractEncoding(String)", "predict": "// extractEncoding extracts the encoding from the given Content-Type header string.\n    If no Content-Type header string or its encoding can be determined, the defaultEncoding can be used."}, {"ID": 792, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def detector_50_Cent(text): \"\"\"Determine whether 50 Cent is a topic.\"\"\" keywords = [ \"50 Cent\", \"rap\", \"hip hop\", \"Curtis James Jackson III\", \"Curtis Jackson\", \"Eminem\", \"Dre\", \"Get Rich or Die Tryin'\", \"G-Unit\", \"Street King Immortal\", \"In da Club\", \"Interscope\", ] num_keywords = sum(word in text for word in keywords) return (\"50 Cent\", float(num_keywords > 2))\n\n    ### Response: Determine whether 50 Cent is a topic..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isEmptyFlags(Flags flags) { if (flags == null) return true; Flags.Flag[] systemFlags = flags.getSystemFlags(); if (systemFlags != null && systemFlags.length > 0) { return false; } String[] userFlags = flags.getUserFlags(); if (userFlags != null && userFlags.length > 0) { return false; } return true; }\n\n    ### Response:", "ground_truth": "Check whether flags is a empty flags\n@param flags a flags of message to check\n@return whether the flags is empty", "predict": "The method-level comment for the above java Code should say,\n    The method isEmptyFlags() determines whether the Flags objects contains any values or not. It first checks if the Flags objects is null, and if so, returns true since technically Flags objects could be empty but still be non null objects. If the Flags objects is not null, it next checks if there any systemFlags (Flags objects with system values) or any values in the custom Flags objects. Finally, it returns true if there is any values and false otherwise."}, {"ID": 793, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getColumnDeclarationSQL($name, array $field) { if (isset($field['columnDefinition'])) { $columnDef = $this->getCustomTypeDeclarationSQL($field); } else { $default = $this->getDefaultValueDeclarationSQL($field); $charset = isset($field['charset']) && $field['charset'] ? ' ' . $this->getColumnCharsetDeclarationSQL($field['charset']) : ''; $collation = isset($field['collation']) && $field['collation'] ? ' ' . $this->getColumnCollationDeclarationSQL($field['collation']) : ''; $notnull = isset($field['notnull']) && $field['notnull'] ? ' NOT NULL' : ''; $unique = isset($field['unique']) && $field['unique'] ? ' ' . $this->getUniqueFieldDeclarationSQL() : ''; $check = isset($field['check']) && $field['check'] ? ' ' . $field['check'] : ''; $typeDecl = $field['type']->getSQLDeclaration($field, $this); $columnDef = $typeDecl . $charset . $default . $notnull . $unique . $check . $collation; if ($this->supportsInlineColumnComments() && isset($field['comment']) && $field['comment'] !== '') { $columnDef .= ' ' . $this->getInlineColumnCommentSQL($field['comment']); } } return $name . ' ' . $columnDef; }\n\n    ### Response: Obtains DBMS specific SQL code portion needed to declare a generic type\nfield to be used in statements like CREATE TABLE.\n\n@param string  $name  The name the field to be declared.\n@param mixed[] $field An associative array with the name of the properties\nof the field being declared as array indexes. Currently, the types\nof supported field properties are as follows:\n\nlength\nInteger value that determines the maximum length of the text\nfield. If this argument is missing the field should be\ndeclared to have the longest length allowed by the DBMS.\n\ndefault\nText value to be used as default for this field.\n\nnotnull\nBoolean flag that indicates whether this field is constrained\nto not be set to null.\ncharset\nText value with the default CHARACTER SET for this field.\ncollation\nText value with the default COLLATION for this field.\nunique\nunique constraint\ncheck\ncolumn check constraint\ncolumnDefinition\na string that defines the complete column\n\n@return string DBMS specific SQL code portion that should be used to declare the column..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String resolveAuthBearerToken(final HttpServletRequest request) { String header = request.getHeader(HEADER_AUTHORIZATION); if (header == null) { return null; } int ndx = header.indexOf(\"Bearer \"); if (ndx == -1) { return null; } return header.substring(ndx + 7).trim(); }\n\n    ### Response:", "ground_truth": "Returns Bearer token.", "predict": "Resolves an HTTP bearer token included in an HTTP request to an access token to be used in subsequent API calls."}, {"ID": 794, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _build_error_report( self, message, report_location=None, http_context=None, user=None ): \"\"\"Builds the Error Reporting object to report. This builds the object according to https://cloud.google.com/error-reporting/docs/formatting-error-messages :type message: str :param message: The stack trace that was reported or logged by the service. :type report_location: dict :param report_location: The location in the source code where the decision was made to report the error, usually the place where it was logged. For a logged exception this would be the source line where the exception is logged, usually close to the place where it was caught. This should be a Python dict that contains the keys 'filePath', 'lineNumber', and 'functionName' :type http_context: :class`google.cloud.error_reporting.HTTPContext` :param http_context: The HTTP request which was processed when the error was triggered. :type user: str :param user: The user who caused or was affected by the crash. This can be a user ID, an email address, or an arbitrary token that uniquely identifies the user. When sending an error report, leave this field empty if the user was not logged in. In this case the Error Reporting system will use other data, such as remote IP address, to distinguish affected users. :rtype: dict :returns: A dict payload ready to be serialized to JSON and sent to the API. \"\"\" payload = { \"serviceContext\": {\"service\": self.service}, \"message\": \"{0}\".format(message), } if self.version: payload[\"serviceContext\"][\"version\"] = self.version if report_location or http_context or user: payload[\"context\"] = {} if report_location: payload[\"context\"][\"reportLocation\"] = report_location if http_context: http_context_dict = http_context.__dict__ # strip out None values payload[\"context\"][\"httpRequest\"] = { key: value for key, value in six.iteritems(http_context_dict) if value is not None } if user: payload[\"context\"][\"user\"] = user return payload\n\n    ### Response: Builds the Error Reporting object to report.\n\n        This builds the object according to\n\n        https://cloud.google.com/error-reporting/docs/formatting-error-messages\n\n        :type message: str\n        :param message: The stack trace that was reported or logged by the\n                   service.\n\n        :type report_location: dict\n        :param report_location:  The location in the source code where the\n               decision was made to report the error, usually the place\n               where it was logged. For a logged exception this would be the\n               source line where the exception is logged, usually close to\n               the place where it was caught.\n\n               This should be a Python dict that contains the keys 'filePath',\n               'lineNumber', and 'functionName'\n\n        :type http_context: :class`google.cloud.error_reporting.HTTPContext`\n        :param http_context: The HTTP request which was processed when the\n                             error was triggered.\n\n        :type user: str\n        :param user: The user who caused or was affected by the crash. This can\n                     be a user ID, an email address, or an arbitrary token that\n                     uniquely identifies the user. When sending an error\n                     report, leave this field empty if the user was not\n                     logged in. In this  case the Error Reporting system will\n                     use other data, such as remote IP address,\n                     to distinguish affected users.\n        :rtype: dict\n        :returns: A dict payload ready to be serialized to JSON and sent to\n                  the API..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void requireAuthentication(final HttpServletResponse resp, final String realm) throws IOException { resp.setHeader(WWW_AUTHENTICATE, \"Basic realm=\\\"\" + realm + '\\\"'); resp.sendError(HttpServletResponse.SC_UNAUTHORIZED); }\n\n    ### Response:", "ground_truth": "Sends correct headers to require basic authentication for the given realm.", "predict": "\n    Requires Authentication\n\n    The above method sets the response header to include the realm name in the\n    request authentication request. If the client does not send the correct\n    authorization credentials, the response code of HTTP_UNAUTHORIZED status code\n    will be sent to the client."}, {"ID": 795, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setMinNbColumns($minNbColumns) { $this->minNbColumns = $minNbColumns; $this->maxNbColumns = max($this->maxNbColumns, $minNbColumns); return $this; }\n\n    ### Response: Sets the minimum number of columns in the grid.\n\nThe default minimum is 4.\n\n@param int $minNbColumns The minimum number of columns.\n\n@return static The current instance..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void prepareDownload(final HttpServletResponse response, final File file, final String mimeType) { if (!file.exists()) { throw new IllegalArgumentException(\"File not found: \" + file); } if (file.length() > Integer.MAX_VALUE) { throw new IllegalArgumentException(\"File too big: \" + file); } prepareResponse(response, file.getAbsolutePath(), mimeType, (int) file.length()); }\n\n    ### Response:", "ground_truth": "Prepares response for file download with provided mime type.", "predict": "Prepares and sends the download file to the client."}, {"ID": 796, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <K, V> Map<K, V> zipMapPartial(Iterable<K> keys, Iterable<V> values) { Map<K, V> retVal = new LinkedHashMap<>(); Iterator<K> keysIter = keys.iterator(); Iterator<V> valsIter = values.iterator(); while (keysIter.hasNext()) { final K key = keysIter.next(); if(valsIter.hasNext()) retVal.put(key, valsIter.next()); else break; } return retVal; }\n\n    ### Response: Create a Map from iterables of keys and values. If there are more keys than values, or more values than keys,\nthe excess will be omitted..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void prepareResponse(final HttpServletResponse response, final String fileName, String mimeType, final int fileSize) { if ((mimeType == null) && (fileName != null)) { String extension = FileNameUtil.getExtension(fileName); mimeType = MimeTypes.getMimeType(extension); } if (mimeType != null) { response.setContentType(mimeType); } if (fileSize >= 0) { response.setContentLength(fileSize); } // support internationalization // See https://tools.ietf.org/html/rfc6266#section-5 for more information. if (fileName != null) { String name = FileNameUtil.getName(fileName); String encodedFileName = URLCoder.encode(name); response.setHeader(CONTENT_DISPOSITION, \"attachment;filename=\\\"\" + name + \"\\\";filename*=utf8''\" + encodedFileName); } }\n\n    ### Response:", "ground_truth": "null\n@param fileSize if less then 0 it will be ignored", "predict": "Prepares the given HTTP response to serve the specified file to the client in an appropriate manner\n    If there is no mimeType specified or if there is no file specified,\n    nothing should be sent in the response.\n    If there is a mimeType specified and no corresponding file,\n    nothing should be sent in the response but a Content-Type header should be added to the response to notify the client of the mimeType of the resource to be provided if requested.\n    If there is a corresponding file and its size is known,\n    its length should be added to the Content-Length header to notify the client of the total size of the resource to be provided if requested.\n    If there is a corresponding file to serve to the client and its name is known to the server,\n    its name should be included in the Content-Disposition header to notify the client of the name of the resource to be provided if requested."}, {"ID": 797, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void copyValue(MutableBigInteger src) { int len = src.intLen; if (value.length < len) value = new int[len]; System.arraycopy(src.value, src.offset, value, 0, len); intLen = len; offset = 0; }\n\n    ### Response: Sets this MutableBigInteger's value array to a copy of the specified\narray. The intLen is set to the length of the new array..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Cookie[] getAllCookies(final HttpServletRequest request, final String cookieName) { Cookie[] cookies = request.getCookies(); if (cookies == null) { return null; } ArrayList<Cookie> list = new ArrayList<>(cookies.length); for (Cookie cookie : cookies) { if (cookie.getName().equals(cookieName)) { list.add(cookie); } } if (list.isEmpty()) { return null; } return list.toArray(new Cookie[0]); }\n\n    ### Response:", "ground_truth": "", "predict": "Gets an array of cookies with the given name from the given HTTP request."}, {"ID": 798, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _traverse_tree(tree, path): \"\"\"Traverses the permission tree, returning the permission at given permission path.\"\"\" path_steps = (step for step in path.split('.') if step != '') # Special handling for first step, because the first step isn't under 'objects' first_step = path_steps.next() subtree = tree[first_step] for step in path_steps: subtree = subtree['children'][step] return subtree\n\n    ### Response: Traverses the permission tree, returning the permission at given permission path..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String readRequestBodyFromReader(final HttpServletRequest request) throws IOException { BufferedReader buff = request.getReader(); StringWriter out = new StringWriter(); StreamUtil.copy(buff, out); return out.toString(); }\n\n    ### Response:", "ground_truth": "Reads HTTP request body using the request reader. Once body is read,\nit cannot be read again!", "predict": "Reads request body from reader and writes into string writer."}, {"ID": 799, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def cmp_private_numbers(pn1, pn2): \"\"\" Compare 2 sets of private numbers. This is for comparing 2 private RSA keys. :param pn1: The set of values belonging to the 1st key :param pn2: The set of values belonging to the 2nd key :return: True is the sets are the same otherwise False. \"\"\" if not cmp_public_numbers(pn1.public_numbers, pn2.public_numbers): return False for param in ['d', 'p', 'q']: if getattr(pn1, param) != getattr(pn2, param): return False return True\n\n    ### Response: Compare 2 sets of private numbers. This is for comparing 2\n    private RSA keys.\n\n    :param pn1: The set of values belonging to the 1st key\n    :param pn2: The set of values belonging to the 2nd key\n    :return: True is the sets are the same otherwise False..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String readRequestBodyFromStream(final HttpServletRequest request) throws IOException { String charEncoding = request.getCharacterEncoding(); if (charEncoding == null) { charEncoding = JoddCore.encoding; } CharArrayWriter charArrayWriter = new CharArrayWriter(); BufferedReader bufferedReader = null; try { InputStream inputStream = request.getInputStream(); if (inputStream != null) { bufferedReader = new BufferedReader(new InputStreamReader(inputStream, charEncoding)); StreamUtil.copy(bufferedReader, charArrayWriter); } else { return StringPool.EMPTY; } } finally { StreamUtil.close(bufferedReader); } return charArrayWriter.toString(); }\n\n    ### Response:", "ground_truth": "Reads HTTP request body using the request stream. Once body is read,\nit cannot be read again!", "predict": "\n    Read Request Body From Stream\n    If Character encoding of Request body is null, default Character encoding of JoddLibrary, CharArrayWriter and BufferedReader objects are used for converting Request body to String stream. Otherwise, Character encoding of Request body is used for same purpose. Finally, returned String stream contains Request body in its original format, as provided by client, or empty string in case of error during request body read operation."}, {"ID": 800, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def mark_job_as_canceling(self, job_id): \"\"\" Mark the job as requested for canceling. Does not actually try to cancel a running job. :param job_id: the job to be marked as canceling. :return: the job object \"\"\" job, _ = self._update_job_state(job_id, State.CANCELING) return job\n\n    ### Response: Mark the job as requested for canceling. Does not actually try to cancel a running job.\n\n        :param job_id: the job to be marked as canceling.\n        :return: the job object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void storeContextPath(final PageContext pageContext, final String contextPathVariableName) { String ctxPath = getContextPath(pageContext); HttpServletRequest request = (HttpServletRequest) pageContext.getRequest(); request.setAttribute(contextPathVariableName, ctxPath); ServletContext servletContext = pageContext.getServletContext(); servletContext.setAttribute(contextPathVariableName, ctxPath); }\n\n    ### Response:", "ground_truth": "Stores context path in server context and request scope.", "predict": "Stores the context path in the page context and request attributes of the specified page context."}, {"ID": 801, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (h *HTTPBin) Delay(w http.ResponseWriter, r *http.Request) { parts := strings.Split(r.URL.Path, \"/\") if len(parts) != 3 { http.Error(w, \"Not found\", http.StatusNotFound) return } delay, err := parseBoundedDuration(parts[2], 0, h.MaxDuration) if err != nil { http.Error(w, \"Invalid duration\", http.StatusBadRequest) return } select { case <-r.Context().Done(): return case <-time.After(delay): } h.RequestWithBody(w, r) }\n\n    ### Response: // Delay waits for a given amount of time before responding, where the time may\n// be specified as a golang-style duration or seconds in floating point..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void storeContextPath(final ServletContext servletContext, final String contextPathVariableName) { String ctxPath = getContextPath(servletContext); servletContext.setAttribute(contextPathVariableName, ctxPath); }\n\n    ### Response:", "ground_truth": "Stores context path in page context and request scope.", "predict": "// Stores the given context path in an attribute of the given servlet context."}, {"ID": 802, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _get_jar(self, command, alts=None, allow_missing=False): \"\"\"Retrieve the jar for running the specified command. \"\"\" dirs = [] for bdir in [self._gatk_dir, self._picard_ref]: dirs.extend([bdir, os.path.join(bdir, os.pardir, \"gatk\")]) if alts is None: alts = [] for check_cmd in [command] + alts: for dir_check in dirs: try: check_file = config_utils.get_jar(check_cmd, dir_check) return check_file except ValueError as msg: if str(msg).find(\"multiple\") > 0: raise else: pass if allow_missing: return None else: raise ValueError(\"Could not find jar %s in %s:%s\" % (command, self._picard_ref, self._gatk_dir))\n\n    ### Response: Retrieve the jar for running the specified command..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean isGetParameter(final HttpServletRequest request, String name) { name = URLCoder.encodeQueryParam(name) + '='; String query = request.getQueryString(); String[] nameValuePairs = StringUtil.splitc(query, '&'); for (String nameValuePair : nameValuePairs) { if (nameValuePair.startsWith(name)) { return true; } } return false; }\n\n    ### Response:", "ground_truth": "Checks if some parameter is in GET parameters.", "predict": "The above method retrieves parameter from the given url string by deconstructing the url string and looking for the given parameter in the query string of the url string."}, {"ID": 803, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def name_backbone(name, rank=None, kingdom=None, phylum=None, clazz=None, order=None, family=None, genus=None, strict=False, verbose=False, offset=None, limit=100, **kwargs): ''' Lookup names in the GBIF backbone taxonomy. :param name: [str] Full scientific name potentially with authorship (required) :param rank: [str] The rank given as our rank enum. (optional) :param kingdom: [str] If provided default matching will also try to match against this if no direct match is found for the name alone. (optional) :param phylum: [str] If provided default matching will also try to match against this if no direct match is found for the name alone. (optional) :param class: [str] If provided default matching will also try to match against this if no direct match is found for the name alone. (optional) :param order: [str] If provided default matching will also try to match against this if no direct match is found for the name alone. (optional) :param family: [str] If provided default matching will also try to match against this if no direct match is found for the name alone. (optional) :param genus: [str] If provided default matching will also try to match against this if no direct match is found for the name alone. (optional) :param strict: [bool] If True it (fuzzy) matches only the given name, but never a taxon in the upper classification (optional) :param verbose: [bool] If True show alternative matches considered which had been rejected. :param offset: [int] Record to start at. Default: ``0`` :param limit: [int] Number of results to return. Default: ``100`` A list for a single taxon with many slots (with ``verbose=False`` - default), or a list of length two, first element for the suggested taxon match, and a data.frame with alternative name suggestions resulting from fuzzy matching (with ``verbose=True``). If you don't get a match GBIF gives back a list of length 3 with slots synonym, confidence, and ``matchType='NONE'``. reference: http://www.gbif.org/developer/species#searching Usage:: from pygbif import species species.name_backbone(name='Helianthus annuus', kingdom='plants') species.name_backbone(name='Helianthus', rank='genus', kingdom='plants') species.name_backbone(name='Poa', rank='genus', family='Poaceae') # Verbose - gives back alternatives species.name_backbone(name='Helianthus annuus', kingdom='plants', verbose=True) # Strictness species.name_backbone(name='Poa', kingdom='plants', verbose=True, strict=False) species.name_backbone(name='Helianthus annuus', kingdom='plants', verbose=True, strict=True) # Non-existent name species.name_backbone(name='Aso') # Multiple equal matches species.name_backbone(name='Oenante') ''' url = gbif_baseurl + 'species/match' args = {'name': name, 'rank': rank, 'kingdom': kingdom, 'phylum': phylum, 'class': clazz, 'order': order, 'family': family, 'genus': genus, 'strict': strict, 'verbose': verbose, 'offset': offset, 'limit': limit} tt = gbif_GET(url, args, **kwargs) return tt\n\n    ### Response: Lookup names in the GBIF backbone taxonomy.\n\n  :param name: [str] Full scientific name potentially with authorship (required)\n  :param rank: [str] The rank given as our rank enum. (optional)\n  :param kingdom: [str] If provided default matching will also try to match against this\n     if no direct match is found for the name alone. (optional)\n  :param phylum: [str] If provided default matching will also try to match against this\n     if no direct match is found for the name alone. (optional)\n  :param class: [str] If provided default matching will also try to match against this\n     if no direct match is found for the name alone. (optional)\n  :param order: [str] If provided default matching will also try to match against this\n     if no direct match is found for the name alone. (optional)\n  :param family: [str] If provided default matching will also try to match against this\n     if no direct match is found for the name alone. (optional)\n  :param genus: [str] If provided default matching will also try to match against this\n     if no direct match is found for the name alone. (optional)\n  :param strict: [bool] If True it (fuzzy) matches only the given name, but never a\n     taxon in the upper classification (optional)\n  :param verbose: [bool] If True show alternative matches considered which had been rejected.\n  :param offset: [int] Record to start at. Default: ``0``\n  :param limit: [int] Number of results to return. Default: ``100``\n\n  A list for a single taxon with many slots (with ``verbose=False`` - default), or a\n  list of length two, first element for the suggested taxon match, and a data.frame\n  with alternative name suggestions resulting from fuzzy matching (with ``verbose=True``).\n\n  If you don't get a match GBIF gives back a list of length 3 with slots synonym,\n  confidence, and ``matchType='NONE'``.\n\n  reference: http://www.gbif.org/developer/species#searching\n\n  Usage::\n\n      from pygbif import species\n      species.name_backbone(name='Helianthus annuus', kingdom='plants')\n      species.name_backbone(name='Helianthus', rank='genus', kingdom='plants')\n      species.name_backbone(name='Poa', rank='genus', family='Poaceae')\n\n      # Verbose - gives back alternatives\n      species.name_backbone(name='Helianthus annuus', kingdom='plants', verbose=True)\n\n      # Strictness\n      species.name_backbone(name='Poa', kingdom='plants', verbose=True, strict=False)\n      species.name_backbone(name='Helianthus annuus', kingdom='plants', verbose=True, strict=True)\n\n      # Non-existent name\n      species.name_backbone(name='Aso')\n\n      # Multiple equal matches\n      species.name_backbone(name='Oenante').\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String[] prepareParameters( final String[] paramValues, final boolean treatEmptyParamsAsNull, final boolean ignoreEmptyRequestParams) { if (treatEmptyParamsAsNull || ignoreEmptyRequestParams) { int emptyCount = 0; int total = paramValues.length; for (int i = 0; i < paramValues.length; i++) { String paramValue = paramValues[i]; if (paramValue == null) { emptyCount++; continue; } if (paramValue.length() == 0) { emptyCount++; if (treatEmptyParamsAsNull) { paramValue = null; } } paramValues[i] = paramValue; } if ((ignoreEmptyRequestParams) && (emptyCount == total", "ground_truth": "Prepares parameters for further processing.\n@param paramValues\tstring array of param values\n@param treatEmptyParamsAsNull\tempty parameters should be treated as null\n@param ignoreEmptyRequestParams\tif all parameters are empty, return null", "predict": ")) { return paramValues; } return paramValues; } return null;"}, {"ID": 804, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func IsNil(uuid Implementation) bool { if uuid == nil { return true } for _, v := range uuid.Bytes() { if v != 0 { return false } } return true }\n\n    ### Response: // IsNil returns true if Implementation UUID is all zeros?.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void copyParamsToAttributes( final HttpServletRequest servletRequest, final boolean treatEmptyParamsAsNull, final boolean ignoreEmptyRequestParams) { Enumeration paramNames = servletRequest.getParameterNames(); while (paramNames.hasMoreElements()) { String paramName = (String) paramNames.nextElement(); if (servletRequest.getAttribute(paramName) != null) { continue; } String[] paramValues = servletRequest.getParameterValues(paramName); paramValues = prepareParameters(paramValues, treatEmptyParamsAsNull, ignoreEmptyRequestParams); if (paramValues == null) { continue; } servletRequest.setAttribute(paramName, paramValues.length == 1 ? paramValues[0] : paramValues); } // multipart if (!(servletRequest instanceof MultipartRequestWrapper)) { return; } MultipartRequestWrapper multipartRequest = (MultipartRequestWrapper) servletRequest; if (!multipartRequest.isMultipart()) { return; } paramNames = multipartRequest.getFileParameterNames(); while (paramNames.hasMoreElements()) { String paramName = (String) paramNames.nextElement(); if (servletRequest.getAttribute(paramName) != null) { continue; } FileUpload[] paramValues = multipartRequest.getFiles(paramName); servletRequest.setAttribute(paramName, paramValues.length == 1 ? paramValues[0] : paramValues); } }\n\n    ### Response:", "ground_truth": "Copies all request parameters to attributes.", "predict": "// Copies parameter values from the query string or form data to attributes of the given HTTP request"}, {"ID": 805, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def finalize(self, **kwargs): \"\"\" Add the title, legend, and other visual final touches to the plot. \"\"\" # Set the title of the figure self.set_title('Cross Validation Scores for {}'.format(self.name)) # Add the legend loc = kwargs.pop(\"loc\", \"best\") edgecolor = kwargs.pop(\"edgecolor\", \"k\") self.ax.legend(frameon=True, loc=loc, edgecolor=edgecolor) # set spacing between the x ticks self.ax.xaxis.set_major_locator(ticker.MultipleLocator(1)) # Set the axis labels self.ax.set_xlabel('Training Instances') self.ax.set_ylabel('Score')\n\n    ### Response: Add the title, legend, and other visual final touches to the plot..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void invokeBody(final JspFragment body) throws JspException { if (body == null) { return; } try { body.invoke(null); } catch (IOException ioex) { throw new JspException(\"Tag body failed\", ioex); } }\n\n    ### Response:", "ground_truth": "Invokes tag body.", "predict": "Invoke the body of the JSP page"}, {"ID": 806, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Convert_v1alpha1_GroupResource_To_v1_GroupResource(in *v1alpha1.GroupResource, out *v1.GroupResource, s conversion.Scope) error { return autoConvert_v1alpha1_GroupResource_To_v1_GroupResource(in, out, s) }\n\n    ### Response: // Convert_v1alpha1_GroupResource_To_v1_GroupResource is an autogenerated conversion function..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static char[] renderBody(final JspFragment body) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter(); invokeBody(body, writer); return writer.toCharArray(); }\n\n    ### Response:", "ground_truth": "Renders tag body to char array.", "predict": "// The function generates a String representation of the JspFragment and invokes the body to do the actual rendering of the Jsp page"}, {"ID": 807, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static private boolean isIdentChar(char x) { return (x == '$') || ((x >= 'a') && (x <= 'z')) || ((x >= 'A') && (x <= 'Z')) || ((x >= '0') && (x <= '9')) || (x == '_'); }\n\n    ### Response: Passes only valid placeholder name characters.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String renderBodyToString(final JspFragment body) throws JspException { char[] result = renderBody(body); return new String(result); }\n\n    ### Response:", "ground_truth": "Renders tag body to string.\n@see #renderBody(javax.servlet.jsp.tagext.JspFragment)", "predict": "Render the given JspFragment to its corresponding string representation with escape sequences rendered properly to ensure proper rendering of the document in the servlet container"}, {"ID": 808, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (v *Volume) MountPoint() string { if len(v.Attachments) == 0 { return \"\" } return v.Attachments[0].MountPoint }\n\n    ### Response: // MountPoint returns the volume's mount point, if one is present..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void invokeInitMethods(final InitMethodInvocationStrategy invocationStrategy) { for (final InitMethodPoint initMethod : beanDefinition.initMethodPoints()) { if (invocationStrategy != initMethod.invocationStrategy) { continue; } try { initMethod.method.invoke(bean); } catch (Exception ex) { throw new PetiteException(\"Invalid init method: \" + initMethod, ex); } } }\n\n    ### Response:", "ground_truth": "Invokes init methods.", "predict": "// InvokeInitMethods invokes init methods of the bean defined in the Spring config, filtered by the given invocationStrategy parameter.."}, {"ID": 809, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function ProfileController_BeforeProfileOptions_Handler($Sender, $Args) { if (!$Sender->EditMode && Gdn::Session()->IsValid() && Gdn::Session()->UserID != $Sender->User->UserID) $Sender->EventArguments['MemberOptions'][] = array( 'Text' => Sprite('SpMessage').' '.T('Message'), 'Url' => '/messages/add/'.$Sender->User->Name, 'CssClass' => 'MessageUser' ); }\n\n    ### Response: Add \"Message\" option to profile options..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void callDestroyMethods() { for (final DestroyMethodPoint destroyMethodPoint : beanDefinition.destroyMethodPoints()) { try { destroyMethodPoint.method.invoke(bean); } catch (Exception ex) { throw new PetiteException(\"Invalid destroy method: \" + destroyMethodPoint.method, ex); } } }\n\n    ### Response:", "ground_truth": "Calls destroy methods on given BeanData. Destroy methods are called\nwithout any order.", "predict": "Destroy Bean method points and invoke destroy methods"}, {"ID": 810, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function get_status_message($code) { if (!isset(static::$status_messages[$code])) { $code = self::STATUS_INTERNAL_SERVER_ERROR; } $message = static::$status_messages[$code]; return $message; }\n\n    ### Response: get the describing message of the status code\n\n@param  int    $code i.e. 404\n@return string       i.e. 'Not found'.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object newBeanInstance() { if (beanDefinition.ctor == CtorInjectionPoint.EMPTY) { throw new PetiteException(\"No constructor (annotated, single or default) founded as injection point for: \" + beanDefinition.type.getName()); } int paramNo = beanDefinition.ctor.references.length; Object[] args = new Object[paramNo]; // wiring if (beanDefinition.wiringMode != WiringMode.NONE) { for (int i = 0; i < paramNo; i++) { args[i] = pc.getBean(beanDefinition.ctor.references[i]); if (args[i] == null) { if ((beanDefinition.wiringMode == WiringMode.STRICT)) { throw new PetiteException( \"Wiring constructor failed. References '\" + beanDefinition.ctor.references[i] + \"' not found for constructor: \" + beanDefinition.ctor.constructor); } } } } // create instance final Object bean; try { bean = beanDefinition.ctor.constructor.newInstance(args); } catch (Exception ex) { throw new PetiteException(\"Failed to create new bean instance '\" + beanDefinition.type.getName() + \"' using constructor: \" + beanDefinition.ctor.constructor, ex); } return bean; }\n\n    ### Response:", "ground_truth": "Creates a new instance.", "predict": "Create and return an instance of the bean defined in the Spring config"}, {"ID": 811, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function stop($marker) { if (array_key_exists($marker, $this->timers)) { $this->timers[$marker]->stop(); } }\n\n    ### Response: Stop timer with a specific marker.\n\n@param string $marker.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void injectParams(final ParamManager paramManager, final boolean implicitParamInjection) { if (beanDefinition.name == null) { return; } if (implicitParamInjection) { // implicit final int len = beanDefinition.name.length() + 1; for (final String param : beanDefinition.params) { final Object value = paramManager.get(param); final String destination = param.substring(len); try { BeanUtil.declared.setProperty(bean, destination, value); } catch (Exception ex) { throw new PetiteException(\"Unable to set parameter: '\" + param + \"' to bean: \" + beanDefinition.name, ex); } } } // explicit for (final ValueInjectionPoint pip : beanDefinition.values) { final String value = paramManager.parseKeyTemplate(pip.valueTemplate); try { BeanUtil.declared.setProperty(bean, pip.property, value); } catch (Exception ex) { throw new PetiteException(\"Unable to set value for: '\" + pip.valueTemplate + \"' to bean: \" + beanDefinition.name, ex); } } }\n\n    ### Response:", "ground_truth": "Injects all parameters.", "predict": "Inject params to bean definition given by beanDefinition.name. If implicit paramInjection, extends the given bean to the given params plus an extra string with name corresponding to the bean definition plus an extra character of length of the given bean definition params plus an extra character of length of the given bean definition params plus an extra character of length of the given bean definition params plus an extra character of length of the given bean definition params plus an extra character of length of the given bean definition params plus an extra character of length of the given bean definition params plus an extra character of length of the given bean definition params plus an extra character of length of the given bean definition params plus an extra character of length of the given bean definition params plus an extra character of length of the given bean definition params plus an extra character of length of the given bean definition params plus an extra character of length of the given bean definition params plus an extra character of length of the given bean definition params plus an extra character of length of the given bean definition params plus an extra character of length of the given bean"}, {"ID": 812, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def default_motifs(): \"\"\"Return list of Motif instances from default motif database.\"\"\" config = MotifConfig() d = config.get_motif_dir() m = config.get_default_params()['motif_db'] if not d or not m: raise ValueError(\"default motif database not configured\") fname = os.path.join(d, m) with open(fname) as f: motifs = read_motifs(f) return motifs\n\n    ### Response: Return list of Motif instances from default motif database..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"UnusedDeclaration\"}) public String rewrite(final HttpServletRequest servletRequest, final String actionPath, final String httpMethod) { return actionPath; }\n\n    ### Response:", "ground_truth": "Rewrites action path.", "predict": "Do not use this method because of @SuppressWarnings(\"UnusedDeclaration\") annotations, but to rewrite the given HTTP method and path and to translate them to the equivalent REST API method and path"}, {"ID": 813, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function requestSms($authyId, $force = false) { $data = array( 'authy_id' => $authyId, 'force' => $force, ); $result = $this->apiCall('sms', $data); if ($result === false) { $this->lastError = 'AUTHY_SERVER_ERROR'; return false; } if (isset($result->errors)) { $this->lastError = 'AUTHY_SERVER_INVALID_DATA'; return false; } return true; }\n\n    ### Response: Request SMS token.\n\n@param int $authyId\nAuthy ID to request SMS token for.\n\n@param bool $force\nForce sending of SMS even for users with App.\n\n@return boolean\nReturns true if SMS request was OK. false if not..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void addHeader(final String name, final String value) { List<String> valuesList = super.getAll(name); if (valuesList.isEmpty()) { super.add(name, value); return; } super.remove(name); valuesList.add(value); super.addAll(name, valuesList); }\n\n    ### Response:", "ground_truth": "Adds new header value. If existing value exist, it will be removed\nso the store the new key value.", "predict": "Add header to response objects"}, {"ID": 814, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function addClassmap(string $packageName, array $paths): self { $this->paths['classmap'][$packageName] = $paths; return $this; }\n\n    ### Response: Add composer classmap paths.\n\n@param string $packageName\n@param array  $paths\n\n@return \\Narrowspark\\Automatic\\Common\\ClassFinder.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void put(final String profile, final Map<String, PropsEntry> map, final String key, final String value, final boolean append) { String realValue = value; if (append || appendDuplicateProps) { PropsEntry pv = map.get(key); if (pv != null) { realValue = pv.value + APPEND_SEPARATOR + realValue; } } PropsEntry propsEntry = new PropsEntry(key, realValue, profile, this); // update position pointers if (first == null) { first = propsEntry; } else { last.next = propsEntry; } last = propsEntry; // add to the map map.put(key, propsEntry); }\n\n    ### Response:", "ground_truth": "Puts key-value pair into the map, with respect of appending duplicate properties", "predict": "Store and manage composer configuration values in the composer config file"}, {"ID": 815, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function validateHash(FileIDHelper $helper, ParsedFileID $parsedFileID, Filesystem $filesystem) { // We assumme that hashless parsed file ID are always valid if (!$parsedFileID->getHash()) { return true; } // Check if the physical hash of the file starts with our parsed file ID hash $actualHash = $this->findHashOf($helper, $parsedFileID, $filesystem); return strpos($actualHash, $parsedFileID->getHash()) === 0; }\n\n    ### Response: Try to validate the hash of a physical file against the expected hash from the parsed file ID.\n@param FileIDHelper $helper\n@param ParsedFileID $parsedFileID\n@param Filesystem $filesystem\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void putBaseProperty(final String key, final String value, final boolean append) { put(null, baseProperties, key, value, append); }\n\n    ### Response:", "ground_truth": "Adds base property.", "predict": "Store the given values in the given Map and add it to the given Map of Base Properties"}, {"ID": 816, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setVoucherDiscount($dDiscount) { $this->_oVoucherDiscount = oxNew(\\OxidEsales\\Eshop\\Core\\Price::class); $this->_oVoucherDiscount->setBruttoPriceMode(); $this->_oVoucherDiscount->add($dDiscount); }\n\n    ### Response: Voucher discount setter\n\n@param double $dDiscount voucher discount value.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void putProfileProperty(final String key, final String value, final String profile, final boolean append) { Map<String, PropsEntry> map = profileProperties.computeIfAbsent(profile, k -> new HashMap<>()); put(profile, map, key, value, append); }\n\n    ### Response:", "ground_truth": "Adds profile property.", "predict": "Store values for given profiles\n\n@param Map<String, PropsEntry> map Map of profiles to values to store\n\n@param Map<String, PropsEntry> map Map of profiles to values to store\n@param String key Key of the given profile to store values for\n@param String value Value to store\n@param String profile Profile to associate the values to\n@param boolean append If values should be appended or added to existing values\n    "}, {"ID": 817, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (fs *fakeFs) TempFile(dir, prefix string) (File, error) { file, err := fs.a.TempFile(dir, prefix) if err != nil { return nil, err } return &fakeFile{file}, nil }\n\n    ### Response: // TempFile via afero.TempFile.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public PropsEntry getProfileProperty(final String profile, final String key) { final Map<String, PropsEntry> profileMap = profileProperties.get(profile); if (profileMap == null) { return null; } return profileMap.get(key); }\n\n    ### Response:", "ground_truth": "Returns profile property.", "predict": "//getProfileProperty via profiles.getProfileProperty()."}, {"ID": 818, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def user(self): \"\"\" Returns the current user set by current context \"\"\" return self.users.get(self.contexts[self.current_context].get(\"user\", \"\"), {})\n\n    ### Response: Returns the current user set by current context.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String resolveMacros(String value, final String... profiles) { // create string template parser that will be used internally StringTemplateParser stringTemplateParser = new StringTemplateParser(); stringTemplateParser.setResolveEscapes(false); if (!ignoreMissingMacros) { stringTemplateParser.setReplaceMissingKey(false); } else { stringTemplateParser.setReplaceMissingKey(true); stringTemplateParser.setMissingKeyReplacement(StringPool.EMPTY); } final Function<String, String> macroResolver = macroName -> { String[] lookupProfiles = profiles; int leftIndex = macroName.indexOf('<'); if (leftIndex != -1) { int rightIndex = macroName.indexOf('>'); String profiles1 = macroName.substring(leftIndex + 1, rightIndex); macroName = macroName.substring(0, leftIndex).concat(macroName.substring(rightIndex + 1)); lookupProfiles = StringUtil.splitc(profiles1, ','); StringUtil.trimAll(lookupProfiles); } return lookupValue(macroName, lookupProfiles); }; // start parsing int loopCount = 0; while (loopCount++ < MAX_INNER_MACROS) { final String newValue = stringTemplateParser.parse(value, macroResolver); if (newValue.equals(value)) { break; } if (skipEmptyProps) { if (newValue.length() == 0) { return null; } } value = newValue; } return value; }\n\n    ### Response:", "ground_truth": "Resolves all macros in this props set. Called on property lookup.", "predict": "Resolves macro values in the given string and returns the resolved string or null if there were no macros to resolve or the given string didn't contain any macros to resolve"}, {"ID": 819, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _check_accept_keywords(approved, flag): '''check compatibility of accept_keywords''' if flag in approved: return False elif (flag.startswith('~') and flag[1:] in approved) \\ or ('~'+flag in approved): return False else: return True\n\n    ### Response: check compatibility of accept_keywords.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Map extract(Map target, final String[] profiles, final String[] wildcardPatterns, String prefix) { if (target == null) { target = new HashMap(); } // make sure prefix ends with a dot if (prefix != null) { if (!StringUtil.endsWithChar(prefix, '.')) { prefix += StringPool.DOT; } } if (profiles != null) { for (String profile : profiles) { while (true) { final Map<String, PropsEntry> map = this.profileProperties.get(profile); if (map != null) { extractMap(target, map, profiles, wildcardPatterns, prefix); } final int ndx = profile.lastIndexOf('.'); if (ndx == -1) { break; } profile = profile.substring(0, ndx); } } } extractMap(target, this.baseProperties, profiles, wildcardPatterns, prefix); return target; }\n\n    ### Response:", "ground_truth": "Extracts props to target map. This is all-in-one method, that does many things at once.", "predict": "extract profiles and wildcard patterns from the given string and prepare for extraction of values and values patterns of the given profiles and wildcard patterns into the target Map and prepare for extraction of values and values patterns of the given profiles and wildcard patterns into the target Map"}, {"ID": 820, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function setBreadcrumbEditProductClass() { $breadcrumbs = array(); $breadcrumbs[] = array( 'url' => $this->url('admin'), 'text' => $this->text('Dashboard') ); $breadcrumbs[] = array( 'text' => $this->text('Product classes'), 'url' => $this->url('admin/content/product-class') ); $this->setBreadcrumbs($breadcrumbs); }\n\n    ### Response: Sets breadcrumbs on the edit product class page.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static int streamtoword(byte[] data, int[] offp) { int i; int word = 0; int off = offp[0]; for (i = 0; i < 4; i++) { word = (word << 8) | (data[off] & 0xff); off = (off + 1) % data.length; } offp[0] = off; return word; }\n\n    ### Response:", "ground_truth": "Cycically extract a word of key material.\n\n@param data the string to extract the data from\n@param offp a \"pointer\" (as a one-entry array) to the\ncurrent offset into data\n@return the next word of material from data", "predict": "Streams bytes to words in Littleendian order."}, {"ID": 821, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def urlopen(link): \"\"\"Return urllib2 urlopen \"\"\" try: return urllib2.urlopen(link) except urllib2.URLError: pass except ValueError: return \"\" except KeyboardInterrupt: print(\"\") raise SystemExit()\n\n    ### Response: Return urllib2 urlopen.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String hashpw(String password, String salt) { BCrypt B; String real_salt; byte[] passwordb, saltb, hashed; char minor = (char) 0; int rounds, off; StringBuffer rs = new StringBuffer(); if (salt.charAt(0) != '$' || salt.charAt(1) != '2') { throw new IllegalArgumentException(\"Invalid salt version\"); } if (salt.charAt(2) == '$') { off = 3; } else { minor = salt.charAt(2); if (minor != 'a' || salt.charAt(3) != '$') { throw new IllegalArgumentException(\"Invalid salt revision\"); } off = 4; } // Extract number of rounds if (salt.charAt(off + 2) > '$') { throw new IllegalArgumentException(\"Missing salt rounds\"); } rounds = Integer.parseInt(salt.substring(off, off + 2)); real_salt = salt.substring(off + 3, off + 25); try { passwordb = (password + (minor >= 'a' ? \"\\000\" : \"\")).getBytes(\"UTF-8\"); } catch (UnsupportedEncodingException uee) { throw new AssertionError(\"UTF-8 is not supported\"); } saltb = decode_base64(real_salt, BCRYPT_SALT_LEN); B = new BCrypt(); hashed = B.crypt_raw(passwordb, saltb, rounds, (int[]) bf_crypt_ciphertext.clone()); rs.append(\"$2\"); if (minor >= 'a') { rs.append(minor); } rs.append('$'); if (rounds < 10) { rs.append('0'); } if (rounds > 30) { throw new IllegalArgumentException( \"rounds exceeds maximum (30)\"); } rs.append(rounds) .append('$') .append(encode_base64(saltb, saltb.length)) .append(encode_base64(hashed, bf_crypt_ciphertext.length * 4 - 1)); return rs.toString(); }\n\n    ### Response:", "ground_truth": "Hash a password using the OpenBSD bcrypt scheme.\n\n@param password the password to hash\n@param salt the salt to hash with (perhaps generated\nusing BCrypt.gensalt)\n@return the hashed password", "predict": "Return urllib2 urlopen."}, {"ID": 822, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function expand(DOMNode $basenode = null) { if (null === $basenode) { $basenode = new DomDocument(); } if ($basenode instanceof DOMDocument) { $doc = $basenode; } else { $doc = $basenode->ownerDocument; } if (false === $node = $this->reader->expand($basenode)) { throw new BadMethodCallException('Unable to expand node.'); } if ($node->ownerDocument !== $doc) { $node = $doc->importNode($node, true); } return $node; }\n\n    ### Response: XMLReader expand node and import it into a DOMNode with a DOMDocument\n\nThis is for example useful for DOMDocument::saveXML() @see readOuterXml\nor getting a SimpleXMLElement out of it @see getSimpleXMLElement\n\n@throws BadMethodCallException\n@param DOMNode $basenode\n@return DOMNode.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean checkpw(String plaintext, String hashed) { byte[] hashed_bytes; byte[] try_bytes; try { String try_pw = hashpw(plaintext, hashed); hashed_bytes = hashed.getBytes(\"UTF-8\"); try_bytes = try_pw.getBytes(\"UTF-8\"); } catch (UnsupportedEncodingException uee) { return false; } if (hashed_bytes.length != try_bytes.length) { return false; } byte ret = 0; for (int i = 0; i < try_bytes.length; i++) { ret |= hashed_bytes[i] ^ try_bytes[i]; } return ret == 0; }\n\n    ### Response:", "ground_truth": "Check that a plaintext password matches a previously hashed\none.\n\n@param plaintext the plaintext password to verify\n@param hashed the previously-hashed password\n@return true if the passwords match, false otherwise", "predict": "Precomputes the hash of the given plaintext to be able to compare it to the hash of the given hashed string"}, {"ID": 823, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void addColumnNotNull(String column) { // PAW // SelectionCriteria c = ValueCriteria.buildNotNullCriteria(column, getAlias()); SelectionCriteria c = ValueCriteria.buildNotNullCriteria(column, getUserAlias(column)); c.setTranslateAttribute(false); addSelectionCriteria(c); }\n\n    ### Response: Adds not Null criteria,\ncustomer_id is not Null\nThe attribute will NOT be translated into column name\n\n@param  column   The column name to be used without translation.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int copyAll(final OutputStream out) throws IOException { int count = 0; while (true) { byte b = readByte(); if (isBoundary(b)) { break; } out.write(b); count++; } return count; }\n\n    ### Response:", "ground_truth": "Copies bytes from this stream to some output until boundary is\nreached. Returns number of copied bytes. It will throw an exception\nfor any irregular behaviour.", "predict": "reads from input stream and copies it to output stream\n    BLOCKING\n    reads from input stream\n    copies data to output stream\n    updates count of read bytes\n    returns number of copied bytes\n    NO_INPUT_EOF"}, {"ID": 824, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def fetch(code) : \"\"\" Fetch keywords by Code \"\"\" ret = {} code = KeywordFetcher._remove_strings(code) result = KeywordFetcher.prog.findall(code) for keyword in result : if len(keyword) <= 1: continue # Ignore single-length word if keyword.isdigit(): continue # Ignore number if keyword[0] == '-' or keyword[0] == '*' : keyword = keyword[1:] # Remove first char if string is starting by '-' or '*' (Pointer or Negative numbers) if keyword[-1] == '-' or keyword[-1] == '*' : keyword = keyword[0:-1] # Remove last char if string is finished by '-' or '*' if len(keyword) <= 1: continue ret[ keyword ] = ret.get(keyword, 0) + 1 # `ret[ keyword ] += 1` with initial value return ret\n\n    ### Response: Fetch keywords by Code.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int copyMax(final OutputStream out, final int maxBytes) throws IOException { int count = 0; while (true) { byte b = readByte(); if (isBoundary(b)) { break; } out.write(b); count++; if (count == maxBytes) { return count; } } return count; }\n\n    ### Response:", "ground_truth": "Copies max or less number of bytes to output stream. Useful for determining\nif uploaded file is larger then expected.", "predict": "\n    The above method reads bytes from an InputStream and copies it to an OutputStream until a certain number of bytes have been copied or until an End of Stream marker has been reached. It handles boundary conditions gracefully to maximize data transfer efficiency without any unnecessary bytes getting copied."}, {"ID": 825, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def has_change_permission(self, page, lang, method=None): \"\"\"Return ``True`` if the current user has permission to change the page.\"\"\" # the user has always the right to look at a page content # if he doesn't try to modify it. if method != 'POST': return True # right to change all the pages if self.change_page(): return True if lang: # try the global language permission first perm = self.user.has_perm( 'pages.can_manage_%s' % lang.replace('-', '_') ) if perm: return True # then per object permission perm_func = getattr(self, 'manage (%s)_page' % lang) if perm_func(page): return True # last hierarchic permissions because it's more expensive perm_func = getattr(self, 'manage hierarchy_page') if perm_func(page): return True else: for ancestor in page.get_ancestors(): if perm_func(ancestor): return True # everything else failed, no permissions return False\n\n    ### Response: Return ``True`` if the current user has permission to\n        change the page..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ActionRuntime parse(final Class<?> actionClass, final Method actionMethod, ActionDefinition actionDefinition) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues(actionMethod); final ActionConfig actionConfig = resolveActionConfig(annotationValues); // interceptors ActionInterceptor[] actionInterceptors = parseActionInterceptors(actionClass, actionMethod, actionConfig); // filters ActionFilter[] actionFilters = parseActionFilters(actionClass, actionMethod, actionConfig); // build action definition when not provided if (actionDefinition == null) { actionDefinition = parseActionDefinition(actionClass, actionMethod); } detectAndRegisterAlias(annotationValues, actionDefinition); final boolean async = parseMethodAsyncFlag(actionMethod); final boolean auth = parseMethodAuthFlag(actionMethod); final Class<? extends ActionResult> actionResult = parseActionResult(actionMethod); final Class<? extends ActionResult> defaultActionResult = actionConfig.getActionResult(); return createActionRuntime( null, actionClass, actionMethod, actionResult, defaultActionResult, actionFilters, actionInterceptors, actionDefinition, async, auth); }\n\n    ### Response:", "ground_truth": "Parses java action method annotation and returns its action runtime.\n\n@param actionClass action class\n@param actionMethod action method\n@param actionDefinition optional action def, usually null so to be parsed", "predict": "Parses the given method to generate an appropriate\n        action runtime to perform the given action defined in the\n        specified action definition."}, {"ID": 826, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def restore_directory_state(self, fname): \"\"\"Restore directory expanded state\"\"\" root = osp.normpath(to_text_string(fname)) if not osp.exists(root): # Directory has been (re)moved outside Spyder return for basename in os.listdir(root): path = osp.normpath(osp.join(root, basename)) if osp.isdir(path) and path in self.__expanded_state: self.__expanded_state.pop(self.__expanded_state.index(path)) if self._to_be_loaded is None: self._to_be_loaded = [] self._to_be_loaded.append(path) self.setExpanded(self.get_index(path), True) if not self.__expanded_state: self.fsmodel.directoryLoaded.disconnect(self.restore_directory_state)\n\n    ### Response: Restore directory expanded state.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected ActionConfig resolveActionConfig(final ActionAnnotationValues annotationValues) { final Class<? extends Annotation> annotationType; if (annotationValues == null) { annotationType = Action.class; } else { annotationType = annotationValues.annotationType(); } return actionConfigManager.lookup(annotationType); }\n\n    ### Response:", "ground_truth": "Resolves action config.", "predict": "Resolves an action configuration given an annotation values object and its corresponding action annotation."}, {"ID": 827, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function toMultipart() { $data = []; foreach ($this->payload as $key => $value) { if($key!='file') { $data[] = ['name' => $key, 'contents' => $value]; } else { $data[] = $value; } } return $data; }\n\n    ### Response: Create Multipart array\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void detectAndRegisterAlias(final ActionAnnotationValues annotationValues, final ActionDefinition actionDefinition) { final String alias = parseMethodAlias(annotationValues); if (alias != null) { String aliasPath = StringUtil.cutToIndexOf(actionDefinition.actionPath(), StringPool.HASH); actionsManager.registerPathAlias(alias, aliasPath); } }\n\n    ### Response:", "ground_truth": "Detects if alias is defined in annotation and registers it if so.", "predict": "Detect and Register Alias\n\nParses method alias from annotation values and registers the alias in the actions manager."}, {"ID": 828, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func InitSeccomp(config *configs.Seccomp) error { if config == nil { return fmt.Errorf(\"cannot initialize Seccomp - nil config passed\") } defaultAction, err := getAction(config.DefaultAction) if err != nil { return fmt.Errorf(\"error initializing seccomp - invalid default action\") } filter, err := libseccomp.NewFilter(defaultAction) if err != nil { return fmt.Errorf(\"error creating filter: %s\", err) } // Add extra architectures for _, arch := range config.Architectures { scmpArch, err := libseccomp.GetArchFromString(arch) if err != nil { return fmt.Errorf(\"error validating Seccomp architecture: %s\", err) } if err := filter.AddArch(scmpArch); err != nil { return fmt.Errorf(\"error adding architecture to seccomp filter: %s\", err) } } // Unset no new privs bit if err := filter.SetNoNewPrivsBit(false); err != nil { return fmt.Errorf(\"error setting no new privileges: %s\", err) } // Add a rule for each syscall for _, call := range config.Syscalls { if call == nil { return fmt.Errorf(\"encountered nil syscall while initializing Seccomp\") } if err = matchCall(filter, call); err != nil { return err } } if err = filter.Load(); err != nil { return fmt.Errorf(\"error loading seccomp filter into kernel: %s\", err) } return nil }\n\n    ### Response: // Filters given syscalls in a container, preventing them from being used\n// Started in the container init process, and carried over to all child processes\n// Setns calls, however, require a separate invocation, as they are not children\n// of the init until they join the namespace.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Class<? extends ActionInterceptor>[] readActionInterceptors(final AnnotatedElement actionClassOrMethod) { Class<? extends ActionInterceptor>[] result = null; InterceptedBy interceptedBy = actionClassOrMethod.getAnnotation(InterceptedBy.class); if (interceptedBy != null) { result = interceptedBy.value(); if (result.length == 0) { result = null; } } return result; }\n\n    ### Response:", "ground_truth": "Reads class or method annotation for action interceptors.", "predict": "// Intercept and filter system calls in the given action for the given method of the given action class"}, {"ID": 829, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function retrievefromCache(){ if (class_exists('\\\\Cache')) { $cache_key = 'laravel-4-freegeoip-'. $this->ip; if (\\Cache::has($cache_key)) $this->geoip_data = \\Cache::get($cache_key); else { $this->geoip_data = $this->resolve($this->ip); \\Cache::put($cache_key, $this->geoip_data , 60*60); } } else $this->geoip_data = $this->resolve($this->ip); }\n\n    ### Response: check if the Cache class exists and use caching mechanism if there is, otherwise just call the API directly.\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Class<? extends ActionFilter>[] readActionFilters(final AnnotatedElement actionClassOrMethod) { Class<? extends ActionFilter>[] result = null; FilteredBy filteredBy = actionClassOrMethod.getAnnotation(FilteredBy.class); if (filteredBy != null) { result = filteredBy.value(); if (result.length == 0) { result = null; } } return result; }\n\n    ### Response:", "ground_truth": "Reads class or method annotation for action filters.", "predict": "Filters the given ActionClass or method by its annotations to retrieve the list of ActionFilters to be used in the given ActionClass or method."}, {"ID": 830, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function cvd (value, field) { const domain = _.find(field.domain.codedValues, (d) => { return value === d.code }) return domain ? domain.name : value }\n\n    ### Response: Looks up a value from a coded domain\n\n@params {integer} value - The original field value\n@params {object} field - metadata describing the attribute field\n@returns {string/integerfloat} - The decoded field value.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String[] readPackageActionPath(final Class actionClass) { Package actionPackage = actionClass.getPackage(); final String actionPackageName = actionPackage.getName(); // 1 - read annotations first String packageActionPathFromAnnotation; mainloop: while (true) { MadvocAction madvocActionAnnotation = actionPackage.getAnnotation(MadvocAction.class); packageActionPathFromAnnotation = madvocActionAnnotation != null ? madvocActionAnnotation.value().trim() : null; if (StringUtil.isEmpty(packageActionPathFromAnnotation)) { packageActionPathFromAnnotation = null; } if (packageActionPathFromAnnotation == null) { // next package String newPackage = actionPackage.getName(); actionPackage = null; while (actionPackage == null) { final int ndx = newPackage.lastIndexOf('.'); if (ndx == -1) { // end of hierarchy, nothing found break mainloop; } newPackage = newPackage.substring(0, ndx); actionPackage = Packages.of(actionClass.getClassLoader(), newPackage); } } else { // annotation found, register root rootPackages.addRootPackage(actionPackage.getName(), packageActionPathFromAnnotation); break; } } // 2 - read root package String packagePath = rootPackages.findPackagePathForActionPackage(actionPackageName); if (packagePath == null) { return ArraysUtil.array(null, null); } return ArraysUtil.array( StringUtil.stripChar(packagePath, '/'), StringUtil.surround(packagePath, StringPool.SLASH) ); }\n\n    ### Response:", "ground_truth": "Reads action path for package.\nIf annotation is not set on package-level, class package will be used for\npackage action path part.", "predict": "reads annotation values from the given actionClass to retrieve the path of the given action to its root package, and then looks up the given action from its root package to retrieve its path in the given domain"}, {"ID": 831, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def log_output return unless @logger # only log the first level parameters, subcommands will log # their own output. output = current.reject { |k, v| v.is_a?(Hash) || internal_key?(k) } log_info_hash(output, ActionCommand::LOG_KIND_COMMAND_OUTPUT) end\n\n    ### Response: Used internally to log the output parameters for a command..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String[] readMethodActionPath(final String methodName, final ActionAnnotationValues annotationValues, final ActionConfig actionConfig) { // read annotation String methodActionPath = annotationValues != null ? annotationValues.value() : null; if (methodActionPath == null) { methodActionPath = methodName; } else { if (methodActionPath.equals(Action.NONE)) { return ArraysUtil.array(null, null); } } // check for defaults for (String path : actionConfig.getActionMethodNames()) { if (methodActionPath.equals(path)) { methodActionPath = null; break; } } return ArraysUtil.array(methodName, methodActionPath); }\n\n    ### Response:", "ground_truth": "Reads action path from the action method.", "predict": "reads annotation values to determine the path of the method to run and applies any overrides defined in the config"}, {"ID": 832, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ProjectTopicName deleteTopic(String topicId) throws Exception { // [START pubsub_delete_topic] try (TopicAdminClient topicAdminClient = TopicAdminClient.create()) { ProjectTopicName topicName = ProjectTopicName.of(projectId, topicId); topicAdminClient.deleteTopic(topicName); return topicName; } // [END pubsub_delete_topic] }\n\n    ### Response: Example of deleting a topic..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String parseMethodAlias(final ActionAnnotationValues annotationValues) { String alias = null; if (annotationValues != null) { alias = annotationValues.alias(); } return alias; }\n\n    ### Response:", "ground_truth": "Reads method's alias value.", "predict": "Parses method arguments to extract an alias for the method."}, {"ID": 833, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (pq *priorityQueue) Push(x interface{}) { pq.Lock() defer pq.Unlock() item := x.(*queueItem) item.index = len(pq.queue) pq.queue = append(pq.queue, item) pq.itemMap[item.purgeInfo.ConvID.String()] = item }\n\n    ### Response: // Note this method should not be used directly since we only want each\n// conversation to appear once in the heap. Use\n// `BackgroundEphemeralPurger.update` instead since it handles this as\n// intended..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ActionRuntime createActionRuntime( final ActionHandler actionHandler, final Class actionClass, final Method actionClassMethod, final Class<? extends ActionResult> actionResult, final Class<? extends ActionResult> defaultActionResult, final ActionFilter[] filters, final ActionInterceptor[] interceptors, final ActionDefinition actionDefinition, final boolean async, final boolean auth) { if (actionHandler != null) { return new ActionRuntime( actionHandler, actionClass, actionClassMethod, filters, interceptors, actionDefinition, NoneActionResult.class, NoneActionResult.class, async, auth, null, null); } final ScopeData scopeData = scopeDataInspector.inspectClassScopes(actionClass); // find ins and outs final Class[] paramTypes = actionClassMethod.getParameterTypes(); final MethodParam[] params = new MethodParam[paramTypes.length]; final Annotation[][] paramAnns = actionClassMethod.getParameterAnnotations(); String[] methodParamNames = null; // for all elements: action and method arguments... for (int ndx = 0; ndx < paramTypes.length; ndx++) { Class paramType = paramTypes[ndx]; // lazy init to postpone bytecode usage, when method has no arguments if (methodParamNames == null) { methodParamNames = actionMethodParamNameResolver.resolveParamNames(actionClassMethod); } final String paramName = methodParamNames[ndx]; final Annotation[] parameterAnnotations = paramAnns[ndx]; final ScopeData paramsScopeData = scopeDataInspector.inspectMethodParameterScopes(paramName, paramType, parameterAnnotations); MapperFunction mapperFunction = null; for (final Annotation annotation : parameterAnnotations) { if (annotation instanceof Mapper) { mapperFunction = MapperFunctionInstances.get().lookup(((Mapper) annotation).value()); break; } } params[ndx] = new MethodParam( paramTypes[ndx], paramName, scopeDataInspector.detectAnnotationType(parameterAnnotations), paramsScopeData, mapperFunction ); } return new ActionRuntime( null, actionClass, actionClassMethod, filters, interceptors, actionDefinition, actionResult, defaultActionResult, async, auth, scopeData, params); }\n\n    ### Response:", "ground_truth": "Creates new instance of action runtime configuration.\nInitialize caches.", "predict": "// Create and inspect action and method arguments and parameter annotations\n\n    // Resolve parameter names to action arguments\n    String[] methodParamsAndParamsAnnotationResolutions = actionMethodParamsAndParamsAnnotationResolutions(actionMethodParamsAndParamsAnnotationResolutions);\n    ScopeData scopeDataInspector.inspectMethodParameterScopes(paramName, paramType, parameterAnnotations);\n    ScopeData paramsScopeDataInspector.inspectMethodParameterScopes(paramName, paramType, parameterAnnotations);\n    // Create and inspect action and method arguments and parameter annotations\n    return generateActionRuntime(actionHandler, actionClass, actionClassMethod, methodParamsAndParamsAnnotationResolutions, paramsScopeDataInspector, methodParamsAndParamsAnnotationResolutions);"}, {"ID": 834, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Matrix calculateEdgeSimMatrix( final List<Edge> edgeList, final SparseMatrix sm) { final int numEdges = edgeList.size(); final Matrix edgeSimMatrix = new SparseSymmetricMatrix( new SparseHashMatrix(numEdges, numEdges)); Object key = workQueue.registerTaskGroup(numEdges); for (int i = 0; i < numEdges; ++i) { final int row = i; workQueue.add(key, new Runnable() { public void run() { for (int j = row; j < numEdges; ++j) { Edge e1 = edgeList.get(row); Edge e2 = edgeList.get(j); double sim = getEdgeSimilarity(sm, e1, e2); if (sim > 0) { // The symmetric matrix handles the (j,i) case edgeSimMatrix.set(row, j, sim); } } } }); } workQueue.await(key); return edgeSimMatrix; }\n\n    ### Response: Calculates the similarity matrix for the edges.  The similarity matrix is\nsymmetric.\n\n@param edgeList the list of all edges known to the system\n@param sm a square matrix whose values denote edges between the rows.\n\n@return the similarity matrix.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected void preResponseCommit() { long lastModified = lastModifiedData.getLastModified(); long ifModifiedSince = request.getDateHeader(\"If-Modified-Since\"); if (lastModified > -1 && !response.containsHeader(\"Last-Modified\")) { if (ifModifiedSince < (lastModified / 1000 * 1000)) { response.setDateHeader(\"Last-Modified\", lastModified); } else { response.reset(); response.setStatus(HttpServletResponse.SC_NOT_MODIFIED); } } }\n\n    ### Response:", "ground_truth": "todo move to BufferResponseWrapper ?", "predict": "Prepares the response to be sent to the client in case of a modified resource by checking for modified date of the resource and of the request. If the resource has been modified since the request is made, the response sends back a HTTP status code of 200 and sets the Last-Modified header to the modified date of the resource. Otherwise, the response sets the status code of HTTP 304 Not Modified to signal that no change has been made to the resource since the request is made."}, {"ID": 835, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def smart_storage(self): \"\"\"This property gets the object for smart storage. This property gets the object for smart storage. There is no collection for smart storages. :returns: an instance of smart storage \"\"\" return hpe_smart_storage.HPESmartStorage( self._conn, utils.get_subresource_path_by( self, ['Oem', 'Hpe', 'Links', 'SmartStorage']), redfish_version=self.redfish_version)\n\n    ### Response: This property gets the object for smart storage.\n\n        This property gets the object for smart storage.\n        There is no collection for smart storages.\n        :returns: an instance of smart storage.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> T applyAdvice(final Class<T> targetClass) { Class adviceClass = cache.get(targetClass); if (adviceClass == null) { // advice not yet created adviceClass = PROXY_PROXETTA.proxy().setTarget(targetClass).define(); cache.put(targetClass, adviceClass); } // create new advice instance and injects target instance to it try { Object advice = ClassUtil.newInstance(adviceClass); Field field = adviceClass.getField(\"$___target$0\"); field.set(advice, targetClass); return (T) advice; } catch (Exception ex) { throw new ProxettaException(ex); } }\n\n    ### Response:", "ground_truth": "Applies advice on given target class and returns proxy instance.", "predict": "\n    The above method generates advice for the given targetClass to add behavior to its methods to avoid dependency of advice implementation to any concrete implementation of the targetClass or any other dependencies of the targetClass such as Spring, EJB and Hibernate and any other frameworks of design patterns for design and develop application for distributed environment to avoid any type of error during run time of the application. The above method generates advice for the given targetClass to add behavior to its methods to avoid dependency of advice implementation to any concrete implementation of the targetClass or any other dependencies of the targetClass such as Spring, EJB and Hibernate and any other frameworks of design patterns for design and develop application for distributed environment to avoid any type of error during run time of the application. The above method generates advice for the given targetClass to add behavior to its methods to avoid dependency of advice implementation to any concrete implementation of the targetClass or any other dependencies of the targetClass such as Spring, EJB and Hibernate and any other frameworks of design patterns for design and develop application for distributed environment to avoid any type of"}, {"ID": 836, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void parameterizeChannel(Channel channel) { LocalProperties current = channel.getLocalProperties(); if (isMetBy(current)) { // we are met, all is good channel.setLocalStrategy(LocalStrategy.NONE); } else if (this.ordering != null) { channel.setLocalStrategy(LocalStrategy.SORT, this.ordering.getInvolvedIndexes(), this.ordering.getFieldSortDirections()); } else if (this.groupedFields != null) { boolean[] dirs = new boolean[this.groupedFields.size()]; Arrays.fill(dirs, true); channel.setLocalStrategy(LocalStrategy.SORT, Utils.createOrderedFromSet(this.groupedFields), dirs); } else { channel.setLocalStrategy(LocalStrategy.NONE); } }\n\n    ### Response: Parametrizes the local strategy fields of a channel such that the channel produces the desired local properties.\n\n@param channel The channel to parametrize..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void injectTargetIntoProxy(final Object proxy, final Object target) { Class proxyClass = proxy.getClass(); try { Field field = proxyClass.getField(\"$___target$0\"); field.set(proxy, target); } catch (Exception ex) { throw new ProxettaException(ex); } }\n\n    ### Response:", "ground_truth": "Injects target into proxy.", "predict": "Injects the target into the proxy such that the proxy produces the given target for all calls to its methods"}, {"ID": 837, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") private void verifyBeanValidation(Object as) throws Exception { if (beanValidation != null) { ValidatorFactory vf = null; try { vf = beanValidation.getValidatorFactory(); Validator v = vf.getValidator(); Collection<String> l = bvGroups; if (l == null || l.isEmpty()) l = Arrays.asList(javax.validation.groups.Default.class.getName()); Collection<Class<?>> groups = new ArrayList<>(); for (String clz : l) { groups.add(Class.forName(clz, true, resourceAdapter.getClass().getClassLoader())); } Set failures = v.validate(as, groups.toArray(new Class<?>[groups.size()])); if (!failures.isEmpty()) { throw new ConstraintViolationException(\"Violation for \" + as, failures); } } finally { if (vf != null) vf.close(); } } }\n\n    ### Response: Verify activation spec against bean validation\n@param as The activation spec\n@exception Exception Thrown in case of a violation.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) { if (fv != null) { return fv.visitAnnotation(descriptor, visible); } return null; }\n\n    ### Response:", "ground_truth": "Visits an annotation of the field.\n\n@param descriptor the class descriptor of the annotation class.\n@param visible {@literal true} if the annotation is visible at runtime.\n@return a visitor to visit the annotation values, or {@literal null} if this visitor is not\ninterested in visiting this annotation.", "predict": "Visitor for annotation processing"}, {"ID": 838, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def find_outer_region(im, r=0): r\"\"\" Finds regions of the image that are outside of the solid matrix. This function uses the rolling ball method to define where the outer region ends and the void space begins. This function is particularly useful for samples that do not fill the entire rectangular image, such as cylindrical cores or samples with non- parallel faces. Parameters ---------- im : ND-array Image of the porous material with 1's for void and 0's for solid r : scalar The radius of the rolling ball to use. If not specified then a value is calculated as twice maximum of the distance transform. The image size is padded by this amount in all directions, so the image can become quite large and unwieldy if too large a value is given. Returns ------- image : ND-array A boolean mask the same shape as ``im``, containing True in all voxels identified as *outside* the sample. \"\"\" if r == 0: dt = spim.distance_transform_edt(input=im) r = int(sp.amax(dt)) * 2 im_padded = sp.pad(array=im, pad_width=r, mode='constant', constant_values=True) dt = spim.distance_transform_edt(input=im_padded) seeds = (dt >= r) + get_border(shape=im_padded.shape) # Remove seeds not connected to edges labels = spim.label(seeds)[0] mask = labels == 1 # Assume label of 1 on edges, assured by adding border dt = spim.distance_transform_edt(~mask) outer_region = dt < r outer_region = extract_subsection(im=outer_region, shape=im.shape) return outer_region\n\n    ### Response: r\"\"\"\n    Finds regions of the image that are outside of the solid matrix.\n\n    This function uses the rolling ball method to define where the outer region\n    ends and the void space begins.\n\n    This function is particularly useful for samples that do not fill the\n    entire rectangular image, such as cylindrical cores or samples with non-\n    parallel faces.\n\n    Parameters\n    ----------\n    im : ND-array\n        Image of the porous material with 1's for void and 0's for solid\n\n    r : scalar\n        The radius of the rolling ball to use.  If not specified then a value\n        is calculated as twice maximum of the distance transform.  The image\n        size is padded by this amount in all directions, so the image can\n        become quite large and unwieldy if too large a value is given.\n\n    Returns\n    -------\n    image : ND-array\n        A boolean mask the same shape as ``im``, containing True in all voxels\n        identified as *outside* the sample..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String resolveRealName(final String jsonName) { if (jsonNames == null) { return jsonName; } int jsonIndex = ArraysUtil.indexOf(jsonNames, jsonName); if (jsonIndex == -1) { return jsonName; } return realNames[jsonIndex]; }\n\n    ### Response:", "ground_truth": "Resolves real name from JSON name.", "predict": "Resolves the given JSON name to its corresponding human readable name by consulting the mapping of human readable names to corresponding JSON names stored in an indexed array."}, {"ID": 839, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def bootstrap_add(self, peer, *peers, **kwargs): \"\"\"Adds peers to the bootstrap list. Parameters ---------- peer : str IPFS MultiAddr of a peer to add to the list Returns ------- dict \"\"\" args = (peer,) + peers return self._client.request('/bootstrap/add', args, decoder='json', **kwargs)\n\n    ### Response: Adds peers to the bootstrap list.\n\n        Parameters\n        ----------\n        peer : str\n            IPFS MultiAddr of a peer to add to the list\n\n        Returns\n        -------\n            dict.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String resolveJsonName(final String realName) { if (realNames == null) { return realName; } int realIndex = ArraysUtil.indexOf(realNames, realName); if (realIndex == -1) { return realName; } return jsonNames[realIndex]; }\n\n    ### Response:", "ground_truth": "Resolves JSON name from real name.", "predict": "Resolves the given JSON name to its matching Java name."}, {"ID": 840, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function removeOwnerFromUsersWorkspaces(User $user) { /** @var Workspace $workspace */ foreach ($this->workspaceRepository->findByOwner($user) as $workspace) { $workspace->setOwner(null); $this->workspaceRepository->update($workspace); } }\n\n    ### Response: Removes ownership of all workspaces currently owned by the given user\n\n@param User $user The user currently owning workspaces\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public TypeData lookupTypeData(final Class type) { TypeData typeData = typeDataMap.get(type); if (typeData == null) { if (serializationSubclassAware) { typeData = findSubclassTypeData(type); } if (typeData == null) { typeData = scanClassForAnnotations(type); typeDataMap.put(type, typeData); } } return typeData; }\n\n    ### Response:", "ground_truth": "Returns all includes for given type. Returns an empty array\nwhen no includes are defined.", "predict": "Locates the appropriate TypeData for the given Class and returns it\n    If the given Class contains annotations, look for the corresponding annotation on the method signature to determine the proper TypeData for the given Class. Otherwise look in the Map of known Classes to the appropriate TypeData objects for the given Class and add it to the Map of known Classes to the appropriate objects in case it does not exist in the Map already."}, {"ID": 841, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *UpdateFleetInput) SetDeleteVpcConfig(v bool) *UpdateFleetInput { s.DeleteVpcConfig = &v return s }\n\n    ### Response: // SetDeleteVpcConfig sets the DeleteVpcConfig field's value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected TypeData _lookupTypeData(final Class type) { TypeData typeData = typeDataMap.get(type); if (typeData == null) { typeData = scanClassForAnnotations(type); typeDataMap.put(type, typeData); } return typeData; }\n\n    ### Response:", "ground_truth": "Lookups type data and creates one if missing.", "predict": "// The lookupTypeData method scans the given class for annotations of the TypeData annotation class to generate the TypeData object and stores it in the Map. It then returns the corresponding Value object stored in the Map for the given Class."}, {"ID": 842, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def findNestedClassLike(self, lst): ''' Recursive helper function for finding nested classes and structs. If this node is a class or struct, it is appended to ``lst``. Each node also calls each of its child ``findNestedClassLike`` with the same list. :Parameters: ``lst`` (list) The list each class or struct node is to be appended to. ''' if self.kind == \"class\" or self.kind == \"struct\": lst.append(self) for c in self.children: c.findNestedClassLike(lst)\n\n    ### Response: Recursive helper function for finding nested classes and structs.  If this node\n        is a class or struct, it is appended to ``lst``.  Each node also calls each of\n        its child ``findNestedClassLike`` with the same list.\n\n        :Parameters:\n            ``lst`` (list)\n                The list each class or struct node is to be appended to..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected TypeData findSubclassTypeData(final Class type) { final Class<? extends Annotation> defaultAnnotation = jsonAnnotation; if (type.getAnnotation(defaultAnnotation) != null) { // current type has annotation, don't find anything, let type data be created return null; } ClassDescriptor cd = ClassIntrospector.get().lookup(type); // lookup superclasses Class[] superClasses = cd.getAllSuperclasses(); for (Class superClass : superClasses) { if (superClass.getAnnotation(defaultAnnotation) != null) { // annotated subclass founded! return _lookupTypeData(superClass); } } Class[] interfaces = cd.getAllInterfaces(); for (Class interfaze : interfaces) { if (interfaze.getAnnotation(defaultAnnotation) != null) { // annotated subclass founded! return _lookupTypeData(interfaze); } } return null; }\n\n    ### Response:", "ground_truth": "Finds type data of first annotated superclass or interface.", "predict": "\n    The given method declares a recursive algorithm to find the superclass and interfaces of the given type and to check if any of these contains the given annotation, so that the given annotation can be propagated to the given type and its subtypes and interfaces and so on until the whole inheritance graph of the given type is explored and the given annotation can be propagated to the whole inheritance graph of the given type and its supertypes and implemented interfaces of the given type and so on until the whole inheritance graph of the given type is explored and the given annotation can be propagated to the whole inheritance graph of the given type and its supertypes and implemented interfaces of the given type and so on until the whole inheritance graph of the given type is explored and the given annotation can be propagated to the whole inheritance graph of the given type and its supertypes and implemented interfaces of the given type and so on until the whole inheritance graph of the given type is explored and the given annotation can be propagated to the whole inheritance graph of the given type and its super"}, {"ID": 843, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function getConfig(): string { $filePath = $this->app->configPath('app.php'); if (! File::exists($filePath)) { $this->app->abort(400, 'The file config/app.php not found'); } return File::get($filePath); }\n\n    ### Response: Returns the config file contents..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String resolveJsonName(final Class type, final String name) { TypeData typeData = lookupTypeData(type); return typeData.resolveJsonName(name); }\n\n    ### Response:", "ground_truth": "Returns different name of a property if set by annotation.", "predict": "Resolves the given JsonName to the given Class"}, {"ID": 844, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Connector createBaseListener(Configuration conf) throws IOException { Connector ret; if (conf.getBoolean(\"hadoop.http.bio\", false)) { SocketConnector conn = new SocketConnector(); conn.setAcceptQueueSize(4096); conn.setResolveNames(false); ret = conn; } else { SelectChannelConnector conn = new SelectChannelConnector(); conn.setAcceptQueueSize(128); conn.setResolveNames(false); conn.setUseDirectBuffers(false); ret = conn; } ret.setLowResourceMaxIdleTime(10000); ret.setHeaderBufferSize(conf.getInt(\"hadoop.http.header.buffer.size\", 4096)); ret.setMaxIdleTime(conf.getInt(\"dfs.http.timeout\", 200000)); return ret; }\n\n    ### Response: Create a required listener for the Jetty instance listening on the port\nprovided. This wrapper and all subclasses must create at least one\nlistener..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String resolveRealName(final Class type, final String jsonName) { TypeData typeData = lookupTypeData(type); return typeData.resolveRealName(jsonName); }\n\n    ### Response:", "ground_truth": "Returns real property name for given JSON property.", "predict": "Resolves the given JSON name to its corresponding human readable names for the given type."}, {"ID": 845, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function getStyle (vnode, checkChild) { var res = {}; var styleData; if (checkChild) { var childNode = vnode; while (childNode.componentInstance) { childNode = childNode.componentInstance._vnode; if ( childNode && childNode.data && (styleData = normalizeStyleData(childNode.data)) ) { extend(res, styleData); } } } if ((styleData = normalizeStyleData(vnode.data))) { extend(res, styleData); } var parentNode = vnode; while ((parentNode = parentNode.parent)) { if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) { extend(res, styleData); } } return res }\n\n    ### Response: parent component style should be after child's\nso that parent component's style could override it.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public byte[] getFileContent() throws IOException { if (data != null) { return data; } if (tempFile != null) { return FileUtil.readBytes(tempFile); } return null; }\n\n    ### Response:", "ground_truth": "Returns the content of file upload item.", "predict": "Override reads file content from either internal or external source and returns it in its native form."}, {"ID": 846, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewAllocatorCIDRRange(cidr *net.IPNet, allocatorFactory allocator.AllocatorFactory) *Range { max := RangeSize(cidr) base := bigForIP(cidr.IP) rangeSpec := cidr.String() r := Range{ net: cidr, base: base.Add(base, big.NewInt(1)), // don't use the network base max: maximum(0, int(max-2)), // don't use the network broadcast, } r.alloc = allocatorFactory(r.max, rangeSpec) return &r }\n\n    ### Response: // NewAllocatorCIDRRange creates a Range over a net.IPNet, calling allocatorFactory to construct the backing store..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void copyBootstrapMethods(final ClassReader classReader, final char[] charBuffer) { // Find attributOffset of the 'bootstrap_methods' array. byte[] inputBytes = classReader.b; int currentAttributeOffset = classReader.getFirstAttributeOffset(); for (int i = classReader.readUnsignedShort(currentAttributeOffset - 2); i > 0; --i) { String attributeName = classReader.readUTF8(currentAttributeOffset, charBuffer); if (Constants.BOOTSTRAP_METHODS.equals(attributeName)) { bootstrapMethodCount = classReader.readUnsignedShort(currentAttributeOffset + 6); break; } currentAttributeOffset += 6 + classReader.readInt(currentAttributeOffset + 2); } if (bootstrapMethodCount > 0) { // Compute the offset and the length of the BootstrapMethods 'bootstrap_methods' array. int bootstrapMethodsOffset = currentAttributeOffset + 8; int bootstrapMethodsLength = classReader.readInt(currentAttributeOffset + 2) - 2; bootstrapMethods = new ByteVector(bootstrapMethodsLength); bootstrapMethods.putByteArray(inputBytes, bootstrapMethodsOffset, bootstrapMethodsLength); // Add each bootstrap method in the symbol table entries. int currentOffset = bootstrapMethodsOffset; for (int i = 0; i < bootstrapMethodCount; i++) { int offset = currentOffset - bootstrapMethodsOffset; int bootstrapMethodRef = classReader.readUnsignedShort(currentOffset); currentOffset += 2; int numBootstrapArguments = classReader.readUnsignedShort(currentOffset); currentOffset += 2; int hashCode = classReader.readConst(bootstrapMethodRef, charBuffer).hashCode(); while (numBootstrapArguments-- > 0) { int bootstrapArgument = classReader.readUnsignedShort(currentOffset); currentOffset += 2; hashCode ^= classReader.readConst(bootstrapArgument, charBuffer).hashCode(); } add(new Entry(i, Symbol.BOOTSTRAP_METHOD_TAG, offset, hashCode & 0x7FFFFFFF)); } } }\n\n    ### Response:", "ground_truth": "Read the BootstrapMethods 'bootstrap_methods' array binary content and add them as entries of\nthe SymbolTable.\n\n@param classReader the ClassReader whose bootstrap methods must be copied to initialize the\nSymbolTable.\n@param charBuffer a buffer used to read strings in the constant pool.", "predict": "// This class copies the contents of the BootstrapMethods array from the input bytes to its symbol Table // It copies over all bootstrap methods, and hash codes of these methods // It copies over the length of the BootstrapMethods array // It copies over the addresses of each bootstrap method in the order in which they appear in the array // It copies over the addresses of the bootstrap arguments of each bootstrap method in the order in which they appear in the array"}, {"ID": 847, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function compare(PersistentObject $a, PersistentObject $b) { // we compare for each criteria and sum the results for $a, $b // afterwards we compare the sums and return -1,0,1 appropriate $sumA = 0; $sumB = 0; $maxWeight = sizeOf($this->sortCriteria); $i = 0; foreach ($this->sortCriteria as $criteria => $sortType) { $weightedValue = ($maxWeight-$i)*($maxWeight-$i); $aGreaterB = 0; // sort by id if ($criteria == self::ATTRIB_OID) { if ($a->getOID() != $b->getOID()) { ($a->getOID() > $b->getOID()) ? $aGreaterB = 1 : $aGreaterB = -1; } } // sort by type else if ($criteria == self::ATTRIB_TYPE) { if ($a->getType() != $b->getType()) { ($a->getType() > $b->getType()) ? $aGreaterB = 1 : $aGreaterB = -1; } } // sort by value else if($a->getValue($criteria) != null || $b->getValue($criteria) != null) { $aValue = strToLower($a->getValue($criteria)); $bValue = strToLower($b->getValue($criteria)); if ($aValue != $bValue) { ($aValue > $bValue) ? $aGreaterB = 1 : $aGreaterB = -1; } } // sort by property else if($a->getProperty($criteria) != null || $b->getProperty($criteria) != null) { $aProperty = strToLower($a->getProperty($criteria)); $bProperty = strToLower($b->getProperty($criteria)); if ($aProperty != $bProperty) { ($aProperty > $bProperty) ? $aGreaterB = 1 : $aGreaterB = -1; } } // calculate result of current criteria depending on current sorttype if ($sortType == self::SORTTYPE_ASC) { if ($aGreaterB == 1) { $sumA += $weightedValue; } else if ($aGreaterB == -1) { $sumB += $weightedValue; } } else if ($sortType == self::SORTTYPE_DESC) { if ($aGreaterB == 1) { $sumB += $weightedValue; } else if ($aGreaterB == -1) { $sumA += $weightedValue; } } else { throw new IllegalArgumentException(\"Unknown SORTTYPE.\"); } $i++; } if ($sumA == $sumB) { return 0; } return ($sumA > $sumB) ? 1 : -1; }\n\n    ### Response: Compare function for sorting PersitentObject instances by the list of criterias\n@param $a First PersitentObject instance\n@param $b First PersitentObject instance\n@return -1, 0 or 1 whether a is less, equal or greater than b\nin respect of the criteria.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    int setMajorVersionAndClassName(final int majorVersion, final String className) { this.majorVersion = majorVersion; this.className = className; return addConstantClass(className).index; }\n\n    ### Response:", "ground_truth": "Sets the major version and the name of the class to which this symbol table belongs. Also adds\nthe class name to the constant pool.\n\n@param majorVersion a major ClassFile version number.\n@param className an internal class name.\n@return the constant pool index of a new or already existing Symbol with the given class name.", "predict": "The method setMajorVersionAndClassName sets the major version of the PersistentObject and its corresponding class name to the values provided by the parameter, and returns the name of the ConstantClass for which the given class name belongs to."}, {"ID": 848, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setMax(int $value) { $this->max = $value; $this->addValidationRule('max:' . $value); return $this; }\n\n    ### Response: Set maximum number.\n\n@param int $value\n\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void putConstantPool(final ByteVector output) { output.putShort(constantPoolCount).putByteArray(constantPool.data, 0, constantPool.length); }\n\n    ### Response:", "ground_truth": "Puts this symbol table's constant_pool array in the given ByteVector, preceded by the\nconstant_pool_count value.\n\n@param output where the JVMS ClassFile's constant_pool array must be put.", "predict": "Puts constant pool data into the output ByteVector."}, {"ID": 849, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def Analyze(self, hashes): \"\"\"Looks up hashes in Viper using the Viper HTTP API. Args: hashes (list[str]): hashes to look up. Returns: list[HashAnalysis]: hash analysis. Raises: RuntimeError: If no host has been set for Viper. \"\"\" hash_analyses = [] for digest in hashes: json_response = self._QueryHash(digest) hash_analysis = interface.HashAnalysis(digest, json_response) hash_analyses.append(hash_analysis) return hash_analyses\n\n    ### Response: Looks up hashes in Viper using the Viper HTTP API.\n\n    Args:\n      hashes (list[str]): hashes to look up.\n\n    Returns:\n      list[HashAnalysis]: hash analysis.\n\n    Raises:\n      RuntimeError: If no host has been set for Viper..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void putBootstrapMethods(final ByteVector output) { if (bootstrapMethods != null) { output .putShort(addConstantUtf8(Constants.BOOTSTRAP_METHODS)) .putInt(bootstrapMethods.length + 2) .putShort(bootstrapMethodCount) .putByteArray(bootstrapMethods.data, 0, bootstrapMethods.length); } }\n\n    ### Response:", "ground_truth": "Puts this symbol table's BootstrapMethods attribute in the given ByteVector. This includes the\n6 attribute header bytes and the num_bootstrap_methods value.\n\n@param output where the JVMS BootstrapMethods attribute must be put.", "predict": "Stores bootstrap methods in the output ByteVector. If bootstrapMethods is non null, copies it to the output ByteVector. If bootstrapMethods is null, sets int values for bootstrapMethods length, number of bootstrap methods, and empty string for bootstrapMethods data to be filled in during bootstrap invocation to zero length string of length 2, plus length of bootstrapMethods, plus length of constant string of length 0 plus length of bootstrapMethods to be copied to output ByteVector."}, {"ID": 850, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _execute_insert(self, conn, keys, data_iter): \"\"\"Execute SQL statement inserting data Parameters ---------- conn : sqlalchemy.engine.Engine or sqlalchemy.engine.Connection keys : list of str Column names data_iter : generator of list Each item contains a list of values to be inserted \"\"\" data = [dict(zip(keys, row)) for row in data_iter] conn.execute(self.table.insert(), data)\n\n    ### Response: Execute SQL statement inserting data\n\n        Parameters\n        ----------\n        conn : sqlalchemy.engine.Engine or sqlalchemy.engine.Connection\n        keys : list of str\n           Column names\n        data_iter : generator of list\n           Each item contains a list of values to be inserted.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    Symbol addConstantFieldref(final String owner, final String name, final String descriptor) { return addConstantMemberReference(Symbol.CONSTANT_FIELDREF_TAG, owner, name, descriptor); }\n\n    ### Response:", "ground_truth": "Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table. Does nothing if the\nconstant pool already contains a similar item.\n\n@param owner the internal name of a class.\n@param name a field name.\n@param descriptor a field descriptor.\n@return a new or already existing Symbol with the given value.", "predict": "addConstantFieldref - add constant member reference to the specified constant tag\n\n        Parameters\n        ----------\n        owner : string\n             The string holding constant tag\n        name : string\n             The string holding constant name\n        descriptor : string\n             The string holding constant constant\n                       type and constant value\n\n        Returns\n        -------\n        The constant tag holding constant member reference"}, {"ID": 851, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def find_all(options = {}) response = JSON.parse(@client.get('charges', options).body) charges = response.key?('charges') ? response['charges'] : [] charges.map { |attributes| Promisepay::Charge.new(@client, attributes) } end\n\n    ### Response: List all charges\n\n @see https://reference.promisepay.com/#list-charges\n\n @param options [Hash] Optional options.\n @option options [Integer] :limit Can ask for up to 200 charges. default: 10\n @option options [Integer] :offset Pagination help. default: 0\n\n @return [Array] List all charges..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    Symbol addConstantMethodref( final String owner, final String name, final String descriptor, final boolean isInterface) { int tag = isInterface ? Symbol.CONSTANT_INTERFACE_METHODREF_TAG : Symbol.CONSTANT_METHODREF_TAG; return addConstantMemberReference(tag, owner, name, descriptor); }\n\n    ### Response:", "ground_truth": "Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this\nsymbol table. Does nothing if the constant pool already contains a similar item.\n\n@param owner the internal name of a class.\n@param name a method name.\n@param descriptor a method descriptor.\n@param isInterface whether owner is an interface or not.\n@return a new or already existing Symbol with the given value.", "predict": "Adds constant method references to the symbol table\n\n @see https://java.decompiler.freezable.org/documentation/classindex.html\n\n @param tag int Constant tag for method references\n @param owner String The name of the referencing class\n @param name String The name of the method to add\n @param descriptor String The method signature\n\n int ConstantPool index( Symbol symbol) { int symbolOffset = symbol.info.length - ConstantPool.info.length; int symbolPointer = ConstantPool.infoOffset - symbolOffset; int symbolPointerBackUp = symbolPointer - ConstantPool.indexPointer; int symbolPointerBackUpUp = symbolPointerBackUp - ConstantPool.indexPointerBackUp; int symbolPointerBackUpBackUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUpUp"}, {"ID": 852, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewRBForwarder(config Config) *RBForwarder { produces := make(chan *utils.Message, config.QueueSize) retries := make(chan *utils.Message, config.QueueSize) reports := make(chan *utils.Message, config.QueueSize) f := &RBForwarder{ working: 1, p: newPipeline(produces, retries, reports), r: newReporter( config.Retries, config.Backoff, reports, retries, ), } fields := logrus.Fields{ \"retries\": config.Retries, \"backoff_time\": config.Backoff, \"queue_size\": config.QueueSize, } Logger.WithFields(fields).Debug(\"Initialized rB Forwarder\") return f }\n\n    ### Response: // NewRBForwarder creates a new Forwarder object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Entry addConstantMemberReference( final int tag, final String owner, final String name, final String descriptor) { int hashCode = hash(tag, owner, name, descriptor); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.owner.equals(owner) && entry.name.equals(name) && entry.value.equals(descriptor)) { return entry; } entry = entry.next; } constantPool.put122( tag, addConstantClass(owner).index, addConstantNameAndType(name, descriptor)); return put(new Entry(constantPoolCount++, tag, owner, name, descriptor, 0, hashCode)); }\n\n    ### Response:", "ground_truth": "Adds a CONSTANT_Fieldref_info, CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to\nthe constant pool of this symbol table. Does nothing if the constant pool already contains a\nsimilar item.\n\n@param tag one of {@link Symbol#CONSTANT_FIELDREF_TAG}, {@link Symbol#CONSTANT_METHODREF_TAG}\nor {@link Symbol#CONSTANT_INTERFACE_METHODREF_TAG}.\n@param owner the internal name of a class.\n@param name a field or method name.\n@param descriptor a field or method descriptor.\n@return a new or already existing Symbol with the given value.", "predict": "// This method creates an entry for the given ConstantPoolTag, ConstantPoolOwner, ConstantPoolName and ConstantPoolDescriptor."}, {"ID": 853, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewLoadBalancer(ctx context.Context, frontend NetAddr, backends ...NetAddr) (*LoadBalancer, error) { if ctx == nil { return nil, trace.BadParameter(\"missing parameter context\") } waitCtx, waitCancel := context.WithCancel(ctx) return &LoadBalancer{ frontend: frontend, ctx: ctx, backends: backends, currentIndex: -1, waitCtx: waitCtx, waitCancel: waitCancel, Entry: log.WithFields(log.Fields{ trace.Component: \"loadbalancer\", trace.ComponentFields: log.Fields{ \"listen\": frontend.String(), }, }), connections: make(map[NetAddr]map[int64]net.Conn), }, nil }\n\n    ### Response: // NewLoadBalancer returns new load balancer listening on frontend\n// and redirecting requests to backends using round robin algo.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addConstantMemberReference( final int index, final int tag, final String owner, final String name, final String descriptor) { add(new Entry(index, tag, owner, name, descriptor, 0, hash(tag, owner, name, descriptor))); }\n\n    ### Response:", "ground_truth": "Adds a new CONSTANT_Fieldref_info, CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info\nto the constant pool of this symbol table.\n\n@param index the constant pool index of the new Symbol.\n@param tag one of {@link Symbol#CONSTANT_FIELDREF_TAG}, {@link Symbol#CONSTANT_METHODREF_TAG}\nor {@link Symbol#CONSTANT_INTERFACE_METHODREF_TAG}.\n@param owner the internal name of a class.\n@param name a field or method name.\n@param descriptor a field or method descriptor.", "predict": "// addConstantMemberReference - add constant member reference for given index, tag, owner, name and descriptor\n    // It populates an indexed member reference for given constant member for given index, tag, owner, name and descriptor\n    // It populates an indexed member reference for given constant member for given index, tag, owner, name and descriptor\n    // It populates an indexed member reference for given constant member for given index, tag, owner, name and descriptor\n    // It populates an indexed member reference for given constant member for given index, tag, owner, name and descriptor\n    // It populates an indexed member reference for given constant member for given index, tag, owner, name and descriptor\n    // It populates an indexed member reference for given constant member for given index, tag, owner, name and descriptor\n    // It populates an indexed member reference for given constant member for given index, tag, owner, name and descriptor\n    // It populates an indexed member reference for"}, {"ID": 854, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _maintain_dep_graph(self, p_todo): \"\"\" Makes sure that the dependency graph is consistent according to the given todo. \"\"\" dep_id = p_todo.tag_value('id') # maintain dependency graph if dep_id: self._parentdict[dep_id] = p_todo self._depgraph.add_node(hash(p_todo)) # connect all tasks we have in memory so far that refer to this # task for dep in \\ [dep for dep in self._todos if dep.has_tag('p', dep_id)]: self._add_edge(p_todo, dep, dep_id) for dep_id in p_todo.tag_values('p'): try: parent = self._parentdict[dep_id] self._add_edge(parent, p_todo, dep_id) except KeyError: pass\n\n    ### Response: Makes sure that the dependency graph is consistent according to the\n        given todo..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Symbol addConstantIntegerOrFloat(final int tag, final int value) { int hashCode = hash(tag, value); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.data == value) { return entry; } entry = entry.next; } constantPool.putByte(tag).putInt(value); return put(new Entry(constantPoolCount++, tag, value, hashCode)); }\n\n    ### Response:", "ground_truth": "Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table.\nDoes nothing if the constant pool already contains a similar item.\n\n@param tag one of {@link Symbol#CONSTANT_INTEGER_TAG} or {@link Symbol#CONSTANT_FLOAT_TAG}.\n@param value an int or float.\n@return a constant pool constant with the given tag and primitive values.", "predict": "Adds an int or float to the ConstantPool Table and returns the constant symbol."}, {"ID": 855, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Context) CheckFramebufferStatus(target int) int { return c.Call(\"checkFramebufferStatus\", target).Int() }\n\n    ### Response: // Returns whether the currently bound WebGLFramebuffer is complete.\n// If not complete, returns the reason why..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addConstantIntegerOrFloat(final int index, final int tag, final int value) { add(new Entry(index, tag, value, hash(tag, value))); }\n\n    ### Response:", "ground_truth": "Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol\ntable.\n\n@param index the constant pool index of the new Symbol.\n@param tag one of {@link Symbol#CONSTANT_INTEGER_TAG} or {@link Symbol#CONSTANT_FLOAT_TAG}.\n@param value an int or float.", "predict": "// Adds an indexed entry to the ConstantPool Table with the given tag and int value.\n// If the given tag and int value has been added to the ConstantPool Table already,\n// the given indexed entry overrides the existing indexed entry with the given tag and int value.\n// Otherwise, the given indexed entry may add an indexed entry with the given tag and int value to the ConstantPool Table for the first time."}, {"ID": 856, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void characters(char[] ch, int start, int length) { if (ignore) return; String content = new String(ch, start, length); // System.err.println(\"'\" + content + \"'\"); if (content.trim().length() == 0 && content.indexOf(' ') < 0) { return; } StringBuffer buf = new StringBuffer(); int len = content.length(); char character; boolean newline = false; for (int i = 0; i < len; i++) { switch (character = content.charAt(i)) { case ' ': if (!newline) { buf.append(character); } break; case '\\n': if (i > 0) { newline = true; buf.append(' '); } break; case '\\r': break; case '\\t': break; default: newline = false; buf.append(character); } } if (currentChunk == null) { if (bf == null) { currentChunk = new Chunk(buf.toString()); } else { currentChunk = new Chunk(buf.toString(), new Font(this.bf)); } } else { currentChunk.append(buf.toString()); } }\n\n    ### Response: This method gets called when characters are encountered.\n\n@param ch\nan array of characters\n@param start\nthe start position in the array\n@param length\nthe number of characters to read from the array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Symbol addConstantLongOrDouble(final int tag, final long value) { int hashCode = hash(tag, value); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.data == value) { return entry; } entry = entry.next; } int index = constantPoolCount; constantPool.putByte(tag).putLong(value); constantPoolCount += 2; return put(new Entry(index, tag, value, hashCode)); }\n\n    ### Response:", "ground_truth": "Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table.\nDoes nothing if the constant pool already contains a similar item.\n\n@param tag one of {@link Symbol#CONSTANT_LONG_TAG} or {@link Symbol#CONSTANT_DOUBLE_TAG}.\n@param value a long or double.\n@return a constant pool constant with the given tag and primitive values.", "predict": "The method addConstantLongOrDouble adds a constant to the ConstantPool Table and returns the appropriate ConstantPoolEntry."}, {"ID": 857, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def build_expressions(verb): \"\"\" Build expressions for helper verbs Parameters ---------- verb : verb A verb with a *functions* attribute. Returns ------- out : tuple (List of Expressions, New columns). The expressions and the new columns in which the results of those expressions will be stored. Even when a result will stored in a column with an existing label, that column is still considered new, i.e An expression ``x='x+1'``, will create a new_column `x` to replace an old column `x`. \"\"\" def partial(func, col, *args, **kwargs): \"\"\" Make a function that acts on a column in a dataframe Parameters ---------- func : callable Function col : str Column args : tuple Arguments to pass to func kwargs : dict Keyword arguments to func Results ------- new_func : callable Function that takes a dataframe, and calls the original function on a column in the dataframe. \"\"\" def new_func(gdf): return func(gdf[col], *args, **kwargs) return new_func def make_statement(func, col): \"\"\" A statement of function called on a column in a dataframe Parameters ---------- func : str or callable Function to call on a dataframe column col : str Column \"\"\" if isinstance(func, str): expr = '{}({})'.format(func, col) elif callable(func): expr = partial(func, col, *verb.args, **verb.kwargs) else: raise TypeError(\"{} is not a function\".format(func)) return expr def func_name(func): \"\"\" Return name of a function. If the function is `np.sin`, we return `sin`. \"\"\" if isinstance(func, str): return func try: return func.__name__ except AttributeError: return '' # Generate function names. They act as identifiers (postfixed # to the original columns) in the new_column names. if isinstance(verb.functions, (tuple, list)): names = (func_name(func) for func in verb.functions) names_and_functions = zip(names, verb.functions) else: names_and_functions = verb.functions.items() # Create statements for the expressions # and postfix identifiers columns = Selector.get(verb) # columns to act on postfixes = [] stmts = [] for name, func in names_and_functions: postfixes.append(name) for col in columns: stmts.append(make_statement(func, col)) if not stmts: stmts = columns # Names of the new columns # e.g col1_mean, col2_mean, col1_std, col2_std add_postfix = (isinstance(verb.functions, dict) or len(verb.functions) > 1) if add_postfix: fmt = '{}_{}'.format new_columns = [fmt(c, p) for p in postfixes for c in columns] else: new_columns = columns expressions = [Expression(stmt, col) for stmt, col in zip(stmts, new_columns)] return expressions, new_columns\n\n    ### Response: Build expressions for helper verbs\n\n    Parameters\n    ----------\n    verb : verb\n        A verb with a *functions* attribute.\n\n    Returns\n    -------\n    out : tuple\n        (List of Expressions, New columns). The expressions and the\n        new columns in which the results of those expressions will\n        be stored. Even when a result will stored in a column with\n        an existing label, that column is still considered new,\n        i.e An expression ``x='x+1'``, will create a new_column `x`\n        to replace an old column `x`..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addConstantLongOrDouble(final int index, final int tag, final long value) { add(new Entry(index, tag, value, hash(tag, value))); }\n\n    ### Response:", "ground_truth": "Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol\ntable.\n\n@param index the constant pool index of the new Symbol.\n@param tag one of {@link Symbol#CONSTANT_LONG_TAG} or {@link Symbol#CONSTANT_DOUBLE_TAG}.\n@param value a long or double.", "predict": "\n    Parameters\n    ----------\n    int index, int tag, int value, int hash\n    int hash(int tag, int value);\n    int hash(int tag, int value);\n    int hash(int tag, int value);\n    int hash(int tag, int value);\n    int hash(int tag, int value);\n    int hash(int tag, int value);\n    int hash(int tag, int value);\n    int hash(int tag, int value);\n    int hash(int tag, int value);\n    int hash(int tag, int value);\n    int hash(int tag, int value);\n    int hash(int tag, int value);\n    int hash(int tag, int value);\n    int hash(int tag, int value);\n    int hash(int tag, int value);\n    int hash(int tag, int value);\n    int hash(int tag, int value);\n    int hash(int tag"}, {"ID": 858, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function getInstance() { $driver = static::getLibrary(); try { $instance = self::factory($driver, AnnotationsInterface::class); } catch (\\Exception $e) { throw new AnnotationsException($e->getMessage()); } return $instance; }\n\n    ### Response: Create an instance of a annotations driver.\n\n@throws AnnotationsException\n@return AnnotationsInterface.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    int addConstantNameAndType(final String name, final String descriptor) { final int tag = Symbol.CONSTANT_NAME_AND_TYPE_TAG; int hashCode = hash(tag, name, descriptor); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.name.equals(name) && entry.value.equals(descriptor)) { return entry.index; } entry = entry.next; } constantPool.put122(tag, addConstantUtf8(name), addConstantUtf8(descriptor)); return put(new Entry(constantPoolCount++, tag, name, descriptor, hashCode)).index; }\n\n    ### Response:", "ground_truth": "Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table. Does nothing if the\nconstant pool already contains a similar item.\n\n@param name a field or method name.\n@param descriptor a field or method descriptor.\n@return a new or already existing Symbol with the given value.", "predict": "Function to add constant to the Constant Pool Table of contents of the program"}, {"ID": 859, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void updateNextIndex(MemberState member, AppendRequest request) { // If the match index was set, update the next index to be greater than the match index if necessary. if (!request.entries().isEmpty()) { member.setNextIndex(request.entries().get(request.entries().size()-1).getIndex()+1); } }\n\n    ### Response: Updates the next index when the match index is updated..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addConstantNameAndType(final int index, final String name, final String descriptor) { final int tag = Symbol.CONSTANT_NAME_AND_TYPE_TAG; add(new Entry(index, tag, name, descriptor, hash(tag, name, descriptor))); }\n\n    ### Response:", "ground_truth": "Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table.\n\n@param index the constant pool index of the new Symbol.\n@param name a field or method name.\n@param descriptor a field or method descriptor.", "predict": "Associates an indexed constant name and its type to the indexed location in the enum ConstantPool."}, {"ID": 860, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def build_label(self, ident, cls): \"\"\" match nodes by a label \"\"\" ident_w_label = ident + ':' + cls.__label__ self._ast['match'].append('({0})'.format(ident_w_label)) self._ast['return'] = ident self._ast['result_class'] = cls return ident\n\n    ### Response: match nodes by a label.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    int addConstantUtf8(final String value) { int hashCode = hash(Symbol.CONSTANT_UTF8_TAG, value); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == Symbol.CONSTANT_UTF8_TAG && entry.hashCode == hashCode && entry.value.equals(value)) { return entry.index; } entry = entry.next; } constantPool.putByte(Symbol.CONSTANT_UTF8_TAG).putUTF8(value); return put(new Entry(constantPoolCount++, Symbol.CONSTANT_UTF8_TAG, value, hashCode)).index; }\n\n    ### Response:", "ground_truth": "Adds a CONSTANT_Utf8_info to the constant pool of this symbol table. Does nothing if the\nconstant pool already contains a similar item.\n\n@param value a string.\n@return a new or already existing Symbol with the given value.", "predict": "The function addConstantUtf8() adds an UTF8 string to the constant pool of the Java program with the given value and returns the corresponding index of the added string."}, {"ID": 861, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (l *Client) Get(endpoint string, params url.Values, body interface{}, response, data interface{}) error { method := \"GET\" // get the formatted endpoint url path, err := l.PrepUrl(endpoint, params, false) if err != nil { return err } payload, err := prepRequestBody(body) if err != nil { return err } // build the request r, _ := http.NewRequest(method, path, payload) // execute the request err = l.Do(r, response, data) if err != nil { return err } return nil }\n\n    ### Response: // Get prepares a get request and then executes using the Do method.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addConstantUtf8(final int index, final String value) { add(new Entry(index, Symbol.CONSTANT_UTF8_TAG, value, hash(Symbol.CONSTANT_UTF8_TAG, value))); }\n\n    ### Response:", "ground_truth": "Adds a new CONSTANT_String_info to the constant pool of this symbol table.\n\n@param index the constant pool index of the new Symbol.\n@param value a string.", "predict": "// This method adds an UTF8 constant to the symbol table with the given index and value."}, {"ID": 862, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function init($config = []) { if (isset($config['session_cache'])) { $session_type = $config['session_cache']; } else { $session_type = $config['cache_type']; } /** * initialize the current Cache */ $param = new \\stdClass(); $param->type = (string)$session_type; $param->credentials = (($s = Config::get('session_cache_settings') == '') ? Config::get('cache_settings') : $s); // write it to the cache $this->engine = CacheManager::getInstance($param); if (!$this->engine || !$this->engine->isConnected()) return false; return true; }\n\n    ### Response: init method to add tables or other needed behaviour\n\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    Symbol addConstantMethodHandle( final int referenceKind, final String owner, final String name, final String descriptor, final boolean isInterface) { final int tag = Symbol.CONSTANT_METHOD_HANDLE_TAG; // Note that we don't need to include isInterface in the hash computation, because it is // redundant with owner (we can't have the same owner with different isInterface values). int hashCode = hash(tag, owner, name, descriptor, referenceKind); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.data == referenceKind && entry.owner.equals(owner) && entry.name.equals(name) && entry.value.equals(descriptor)) { return entry; } entry = entry.next; } if (referenceKind <= Opcodes.H_PUTSTATIC) { constantPool.put112(tag, referenceKind, addConstantFieldref(owner, name, descriptor).index); } else { constantPool.put112( tag, referenceKind, addConstantMethodref(owner, name, descriptor, isInterface).index); } return put( new Entry(constantPoolCount++, tag, owner, name, descriptor, referenceKind, hashCode)); }\n\n    ### Response:", "ground_truth": "Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table. Does nothing if\nthe constant pool already contains a similar item.\n\n@param referenceKind one of {@link Opcodes#H_GETFIELD}, {@link Opcodes#H_GETSTATIC}, {@link\nOpcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL}, {@link\nOpcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL}, {@link\nOpcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}.\n@param owner the internal name of a class of interface.\n@param name a field or method name.\n@param descriptor a field or method descriptor.\n@param isInterface whether owner is an interface or not.\n@return a new or already existing Symbol with the given value.", "predict": "addConstantMethodHandle to add constant behavior to the program"}, {"ID": 863, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function forIn(object, callback) { if ((typeof object === 'undefined' ? 'undefined' : _typeof(object)) !== 'object') return; forEach(Object.keys(object), _forKey.bind(null, object, callback)); return object; }\n\n    ### Response: Callback to apply on element.\n@callback forElementsCallback\n@param {Window | document | HTMLElement | SVGElement | Text} element\n@param {number} index - Index of element in elements.\n \nIterates over object's keys and apply callback on each one.\n@param {Object} object - The iterable.\n@param {forInCallback} callback - The function to call for each key-value pair.\n@return {Object} object - The iterable for chaining.\n@example //esnext\nimport { forIn } from 'chirashi'\nconst californiaRoll = { name: 'California Roll', price: 4.25, recipe: ['avocado', 'cucumber', 'crab', 'mayonnaise', 'sushi rice', 'seaweed'] }\nforIn(californiaRoll, (key, value) => {\nconsole.log(`${key} -> ${value}`)\n}) //returns: { name: 'California Roll', price: 4.25, recipe: ['avocado', 'cucumber', 'crab', 'mayonnaise', 'sushi rice', 'seaweed'] }\n// LOGS:\n// name -> California Roll\n// price -> 4.25\n// recipe -> ['avocado', 'cucumber', 'crab', 'mayonnaise', 'sushi rice', 'seaweed']\n@example //es5\nvar californiaRoll = { name: 'California Roll', price: 4.25, recipe: ['avocado', 'cucumber', 'crab', 'mayonnaise', 'sushi rice', 'seaweed'] }\nChirashi.forIn(californiaRoll, (key, value) => {\nconsole.log(key + ' -> ' + value)\n}) //returns: { name: 'California Roll', price: 4.25, recipe: ['avocado', 'cucumber', 'crab', 'mayonnaise', 'sushi rice', 'seaweed'] }\n// LOGS:\n// name -> California Roll\n// price -> 4.25\n// recipe -> ['avocado', 'cucumber', 'crab', 'mayonnaise', 'sushi rice', 'seaweed'].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addConstantMethodHandle( final int index, final int referenceKind, final String owner, final String name, final String descriptor) { final int tag = Symbol.CONSTANT_METHOD_HANDLE_TAG; int hashCode = hash(tag, owner, name, descriptor, referenceKind); add(new Entry(index, tag, owner, name, descriptor, referenceKind, hashCode)); }\n\n    ### Response:", "ground_truth": "Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table.\n\n@param index the constant pool index of the new Symbol.\n@param referenceKind one of {@link Opcodes#H_GETFIELD}, {@link Opcodes#H_GETSTATIC}, {@link\nOpcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL}, {@link\nOpcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL}, {@link\nOpcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}.\n@param owner the internal name of a class of interface.\n@param name a field or method name.\n@param descriptor a field or method descriptor.", "predict": "ConstantHandleGenerator for given constant names and signature"}, {"ID": 864, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void unfold(View coverView, View detailsView) { if (this.coverView == coverView && this.detailsView == detailsView) { scrollToPosition(1); // Starting unfold animation return; } if ((this.coverView != null && this.coverView != coverView) || (this.detailsView != null && this.detailsView != detailsView)) { // Cover or details view is differ - closing details and schedule reopening scheduledCoverView = coverView; scheduledDetailsView = detailsView; foldBack(); return; } // Enabling children clipping, it will be needed if cover view is bigger then half // of details view, see CoverHolderLayout#onMeasyre() method. ViewGroup parent = (ViewGroup) getParent(); // In old versions we can't know if children clipping is enabled, we'll assume it's enabled origClipChildren = true; if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) { origClipChildren = parent.getClipChildren(); } parent.setClipChildren(false); // Initializing foldable views setCoverViewInternal(coverView); setDetailsViewInternal(detailsView); setAdapter(adapter); setState(STATE_UNFOLDING); scrollToPosition(1); // starting unfold animation }\n\n    ### Response: Starting unfold animation for given views..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    Symbol addConstantDynamic( final String name, final String descriptor, final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) { Symbol bootstrapMethod = addBootstrapMethod(bootstrapMethodHandle, bootstrapMethodArguments); return addConstantDynamicOrInvokeDynamicReference( Symbol.CONSTANT_DYNAMIC_TAG, name, descriptor, bootstrapMethod.index); }\n\n    ### Response:", "ground_truth": "Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table. Also adds the related\nbootstrap method to the BootstrapMethods of this symbol table. Does nothing if the constant\npool already contains a similar item.\n\n@param name a method name.\n@param descriptor a field descriptor.\n@param bootstrapMethodHandle a bootstrap method handle.\n@param bootstrapMethodArguments the bootstrap method arguments.\n@return a new or already existing Symbol with the given value.", "predict": "Adds constant or invoke dynamic reference to the specified name and descriptor arguments and returns the symbol for reference."}, {"ID": 865, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function registerPolicy($config) { $modeloM = ucfirst(basename($config['modelo'])); $modelo = strtolower($modeloM); $policyName = $modeloM . 'Policy'; $path = str_finish(str_replace([ \"/\"], [ \"\\\\\"], app_path('Providers/AuthServiceProvider.php')), '.php'); $policyPath = app_path('Policies/' . str_finish($policyName, \".php\")); $policyPath = str_finish(str_replace([ \"/\"], [ \"\\\\\"], $policyPath), '.php'); if (file_exists($path) && file_exists($policyPath)) { $modeloM = basename($config['modelo']); $contents = file($path); $inicio = -1; $fin = -1; $encontrado = -1; foreach ($contents as $index => $line) { if (strpos($line, '$policies = [') !== false) { $inicio = $index; } if (strpos($line, $config['modelo']) !== false && $inicio >= 0 && $fin == -1) { $encontrado = $index; } if (strpos($line, \"];\") !== false && $inicio >= 0 && $fin == -1) { $fin = $index; } } $newTexto = chr(9) . \"'\" . $config['modelo'] . \"' => 'App\\\\Policies\\\\\" . $policyName . \"', \" . chr(13) . chr(10); if ($encontrado >= 0) { $contents[$encontrado] = $newTexto; } elseif ($inicio >= 0 && $fin >= 0) { $newContent = array_slice($contents, 0, $fin); $newContent[] = $newTexto; foreach (array_slice($contents, $fin) as $linea) { $newContent[] = $linea; } $contents = $newContent; } $contents = file_put_contents($path, $contents); } else { $contents = false; } return $contents; }\n\n    ### Response: Register a Model Policy in AuthServiceProvider using a config Array\n\nAssumed Policy Class Name is {Model}Policy, and assumed Policy path is /app/Policies/{Model}Policy.php\n\n@param array $config Array\n@return boolean If the policy was registered or not.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    Symbol addConstantInvokeDynamic( final String name, final String descriptor, final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) { Symbol bootstrapMethod = addBootstrapMethod(bootstrapMethodHandle, bootstrapMethodArguments); return addConstantDynamicOrInvokeDynamicReference( Symbol.CONSTANT_INVOKE_DYNAMIC_TAG, name, descriptor, bootstrapMethod.index); }\n\n    ### Response:", "ground_truth": "Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table. Also adds the\nrelated bootstrap method to the BootstrapMethods of this symbol table. Does nothing if the\nconstant pool already contains a similar item.\n\n@param name a method name.\n@param descriptor a method descriptor.\n@param bootstrapMethodHandle a bootstrap method handle.\n@param bootstrapMethodArguments the bootstrap method arguments.\n@return a new or already existing Symbol with the given value.", "predict": "Invoke the bootstrap method passing in the given arguments to addConstantInvokeDynamic to add a Constant to the Class using the invoke_dynamic instruction in the bootstrap method."}, {"ID": 866, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _get_response_message(self, request, result, input_chat): \"\"\" Extracts the response message known a request and Update result. The request may also be the ID of the message to match. If ``request is None`` this method returns ``{id: message}``. If ``request.random_id`` is a list, this method returns a list too. \"\"\" if isinstance(result, types.UpdateShort): updates = [result.update] entities = {} elif isinstance(result, (types.Updates, types.UpdatesCombined)): updates = result.updates entities = {utils.get_peer_id(x): x for x in itertools.chain(result.users, result.chats)} else: return None random_to_id = {} id_to_message = {} for update in updates: if isinstance(update, types.UpdateMessageID): random_to_id[update.random_id] = update.id elif isinstance(update, ( types.UpdateNewChannelMessage, types.UpdateNewMessage)): update.message._finish_init(self, entities, input_chat) id_to_message[update.message.id] = update.message elif (isinstance(update, types.UpdateEditMessage) and not isinstance(request.peer, types.InputPeerChannel)): if request.id == update.message.id: update.message._finish_init(self, entities, input_chat) return update.message elif (isinstance(update, types.UpdateEditChannelMessage) and utils.get_peer_id(request.peer) == utils.get_peer_id(update.message.to_id)): if request.id == update.message.id: update.message._finish_init(self, entities, input_chat) return update.message if request is None: return id_to_message random_id = request if isinstance(request, int) else request.random_id if not utils.is_list_like(random_id): if random_id in random_to_id: return id_to_message[random_to_id[random_id]] else: return None else: # ``rnd in random_to_id`` is needed because trying to forward only # deleted messages causes `MESSAGE_ID_INVALID`, but forwarding # valid and invalid messages in the same call makes the call # succeed, although the API won't return those messages thus # `random_to_id[rnd]` would `KeyError`. return [id_to_message[random_to_id[rnd]] if rnd in random_to_id else None for rnd in random_id]\n\n    ### Response: Extracts the response message known a request and Update result.\n        The request may also be the ID of the message to match.\n\n        If ``request is None`` this method returns ``{id: message}``.\n\n        If ``request.random_id`` is a list, this method returns a list too..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Symbol addConstantDynamicOrInvokeDynamicReference( final int tag, final String name, final String descriptor, final int bootstrapMethodIndex) { int hashCode = hash(tag, name, descriptor, bootstrapMethodIndex); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.data == bootstrapMethodIndex && entry.name.equals(name) && entry.value.equals(descriptor)) { return entry; } entry = entry.next; } constantPool.put122(tag, bootstrapMethodIndex, addConstantNameAndType(name, descriptor)); return put( new Entry( constantPoolCount++, tag, null, name, descriptor, bootstrapMethodIndex, hashCode)); }\n\n    ### Response:", "ground_truth": "Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol\ntable. Does nothing if the constant pool already contains a similar item.\n\n@param tag one of {@link Symbol#CONSTANT_DYNAMIC_TAG} or {@link\nSymbol#CONSTANT_INVOKE_DYNAMIC_TAG}.\n@param name a method name.\n@param descriptor a field descriptor for CONSTANT_DYNAMIC_TAG) or a method descriptor for\nCONSTANT_INVOKE_DYNAMIC_TAG.\n@param bootstrapMethodIndex the index of a bootstrap method in the BootstrapMethods attribute.\n@return a new or already existing Symbol with the given value.", "predict": "\n    This method generates an appropriate method level comment for the above java Code. The above java Code defines a method called addConstantDynamicOrInvokeDynamicReference which adds a Constant or an InvokeDynamic reference to the Constant Pool of the specified tag, name, and descriptor. It first checks if there is an existing Constant or an InvokeDynamic reference with the given tag, name, and descriptor in the Constant Pool. If there is no existing Constant or an InvokeDynamic reference, then the Constant Pool gets updated by adding the given Constant or an InvokeDynamic reference to the Constant Pool of the specified tag, name, and descriptor. Finally, the returned object contains the updated Constant Pool which contains the given Constant or an InvokeDynamic reference with the given tag, name, and descriptor."}, {"ID": 867, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getBannersFromBannerZoneCode($bannerZoneCode, LanguageInterface $language = null) { return $this ->bannerRepository ->getBannerByZone($bannerZoneCode, $language); }\n\n    ### Response: Get banners from a bannerZone code, given a language.\n\n@param string            $bannerZoneCode Banner zone code\n@param LanguageInterface $language       Language\n\n@return Collection banners.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addConstantDynamicOrInvokeDynamicReference( final int tag, final int index, final String name, final String descriptor, final int bootstrapMethodIndex) { int hashCode = hash(tag, name, descriptor, bootstrapMethodIndex); add(new Entry(index, tag, null, name, descriptor, bootstrapMethodIndex, hashCode)); }\n\n    ### Response:", "ground_truth": "Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this\nsymbol table.\n\n@param tag one of {@link Symbol#CONSTANT_DYNAMIC_TAG} or {@link\nSymbol#CONSTANT_INVOKE_DYNAMIC_TAG}.\n@param index the constant pool index of the new Symbol.\n@param name a method name.\n@param descriptor a field descriptor for CONSTANT_DYNAMIC_TAG or a method descriptor for\nCONSTANT_INVOKE_DYNAMIC_TAG.\n@param bootstrapMethodIndex the index of a bootstrap method in the BootstrapMethods attribute.", "predict": "Adds a ConstantDynamicOrInvokeDynamicReference to the ConstantPool during the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter loop of the interpreter"}, {"ID": 868, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getBreadcrumb(Page $page = null, $breadcrumb = array()) { if (null === $this->breadcrumb) { $page = (null !== $page) ? $page : $this; $breadcrumb[] = $page; if (null !== $page->getParent()) { return $this->getBreadcrumb($page->getParent(), $breadcrumb); } else { $this->breadcrumb = $breadcrumb; } } return $this->breadcrumb; }\n\n    ### Response: Returns an array of the ascendants.\n\n@param  Page                 $page\n@param  array                $breadcrumb\n\n@return Page[]\n\n@deprecated.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Symbol addConstantUtf8Reference(final int tag, final String value) { int hashCode = hash(tag, value); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.value.equals(value)) { return entry; } entry = entry.next; } constantPool.put12(tag, addConstantUtf8(value)); return put(new Entry(constantPoolCount++, tag, value, hashCode)); }\n\n    ### Response:", "ground_truth": "Adds a CONSTANT_Class_info, CONSTANT_String_info, CONSTANT_MethodType_info,\nCONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table. Does\nnothing if the constant pool already contains a similar item.\n\n@param tag one of {@link Symbol#CONSTANT_CLASS_TAG}, {@link Symbol#CONSTANT_STRING_TAG}, {@link\nSymbol#CONSTANT_METHOD_TYPE_TAG}, {@link Symbol#CONSTANT_MODULE_TAG} or {@link\nSymbol#CONSTANT_PACKAGE_TAG}.\n@param value an internal class name, an arbitrary string, a method descriptor, a module or a\npackage name, depending on tag.\n@return a new or already existing Symbol with the given value.", "predict": "Adds an UTF8 Constant Value to the Constant Pool Table and returns its hash code."}, {"ID": 869, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def distributeParams(self,param_name,param_count,center,spread,dist_type): ''' Distributes heterogeneous values of one parameter to the AgentTypes in self.agents. Parameters ---------- param_name : string Name of the parameter to be assigned. param_count : int Number of different values the parameter will take on. center : float A measure of centrality for the distribution of the parameter. spread : float A measure of spread or diffusion for the distribution of the parameter. dist_type : string The type of distribution to be used. Can be \"lognormal\" or \"uniform\" (can expand). Returns ------- None ''' # Get a list of discrete values for the parameter if dist_type == 'uniform': # If uniform, center is middle of distribution, spread is distance to either edge param_dist = approxUniform(N=param_count,bot=center-spread,top=center+spread) elif dist_type == 'lognormal': # If lognormal, center is the mean and spread is the standard deviation (in log) tail_N = 3 param_dist = approxLognormal(N=param_count-tail_N,mu=np.log(center)-0.5*spread**2,sigma=spread,tail_N=tail_N,tail_bound=[0.0,0.9], tail_order=np.e) # Distribute the parameters to the various types, assigning consecutive types the same # value if there are more types than values replication_factor = len(self.agents) // param_count # Note: the double division is intenger division in Python 3 and 2.7, this makes it explicit j = 0 b = 0 while j < len(self.agents): for n in range(replication_factor): self.agents[j](AgentCount = int(self.Population*param_dist[0][b]*self.TypeWeight[n])) exec('self.agents[j](' + param_name + '= param_dist[1][b])') j += 1 b += 1\n\n    ### Response: Distributes heterogeneous values of one parameter to the AgentTypes in self.agents.\n\n        Parameters\n        ----------\n        param_name : string\n            Name of the parameter to be assigned.\n        param_count : int\n            Number of different values the parameter will take on.\n        center : float\n            A measure of centrality for the distribution of the parameter.\n        spread : float\n            A measure of spread or diffusion for the distribution of the parameter.\n        dist_type : string\n            The type of distribution to be used.  Can be \"lognormal\" or \"uniform\" (can expand).\n\n        Returns\n        -------\n        None.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addConstantUtf8Reference(final int index, final int tag, final String value) { add(new Entry(index, tag, value, hash(tag, value))); }\n\n    ### Response:", "ground_truth": "Adds a new CONSTANT_Class_info, CONSTANT_String_info, CONSTANT_MethodType_info,\nCONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table.\n\n@param index the constant pool index of the new Symbol.\n@param tag one of {@link Symbol#CONSTANT_CLASS_TAG}, {@link Symbol#CONSTANT_STRING_TAG}, {@link\nSymbol#CONSTANT_METHOD_TYPE_TAG}, {@link Symbol#CONSTANT_MODULE_TAG} or {@link\nSymbol#CONSTANT_PACKAGE_TAG}.\n@param value an internal class name, an arbitrary string, a method descriptor, a module or a\npackage name, depending on tag.", "predict": "Adds an UTF8 string to the Unicode table with the given tag and corresponding hash code to the Unicode table."}, {"ID": 870, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ConfigOptionBuilder setCommandLineOptionWithArgument( CommandLineOption commandLineOption, StringConverter converter ) { co.setCommandLineOption( commandLineOption ); return setStringConverter( converter ); }\n\n    ### Response: if you want to parse an argument, you need a converter from String to Object\n\n@param commandLineOption specification of the command line options\n@param converter how to convert your String value to a castable Object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    Symbol addBootstrapMethod( final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) { ByteVector bootstrapMethodsAttribute = bootstrapMethods; if (bootstrapMethodsAttribute == null) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector(); } // The bootstrap method arguments can be Constant_Dynamic values, which reference other // bootstrap methods. We must therefore add the bootstrap method arguments to the constant pool // and BootstrapMethods attribute first, so that the BootstrapMethods attribute is not modified // while adding the given bootstrap method to it, in the rest of this method. for (Object bootstrapMethodArgument : bootstrapMethodArguments) { addConstant(bootstrapMethodArgument); } // Write the bootstrap method in the BootstrapMethods table. This is necessary to be able to // compare it with existing ones, and will be reverted below if there is already a similar // bootstrap method. int bootstrapMethodOffset = bootstrapMethodsAttribute.length; bootstrapMethodsAttribute.putShort( addConstantMethodHandle( bootstrapMethodHandle.getTag(), bootstrapMethodHandle.getOwner(), bootstrapMethodHandle.getName(), bootstrapMethodHandle.getDesc(), bootstrapMethodHandle.isInterface()) .index); int numBootstrapArguments = bootstrapMethodArguments.length; bootstrapMethodsAttribute.putShort(numBootstrapArguments); for (Object bootstrapMethodArgument : bootstrapMethodArguments) { bootstrapMethodsAttribute.putShort(addConstant(bootstrapMethodArgument).index); } // Compute the length and the hash code of the bootstrap method. int bootstrapMethodlength = bootstrapMethodsAttribute.length - bootstrapMethodOffset; int hashCode = bootstrapMethodHandle.hashCode(); for (Object bootstrapMethodArgument : bootstrapMethodArguments) { hashCode ^= bootstrapMethodArgument.hashCode(); } hashCode &= 0x7FFFFFFF; // Add the bootstrap method to the symbol table or revert the above changes. return addBootstrapMethod(bootstrapMethodOffset, bootstrapMethodlength, hashCode); }\n\n    ### Response:", "ground_truth": "Adds a bootstrap method to the BootstrapMethods attribute of this symbol table. Does nothing if\nthe BootstrapMethods already contains a similar bootstrap method.\n\n@param bootstrapMethodHandle a bootstrap method handle.\n@param bootstrapMethodArguments the bootstrap method arguments.\n@return a new or already existing Symbol with the given value.", "predict": "The bootstrap mechanism provides a way for classes to register static members to be invoked during the loading of the classes, to aid in code reuse and reflection. The bootstrap methods can be invoked during the loading of the classes to add static member to the symbol table of the classes, to aid in reflection and code reuse of the static member during the lifetimes of the classes loaded during the bootstrap invocation. The bootstrap arguments can be Constant_Dynamic values, which reference other bootstrap arguments, so we must add the arguments to the Constant Pool first to avoid changing the values during the invocation of other bootstrap arguments, to avoid conflicting references to the bootstrap arguments during the invocation of other bootstrap arguments of the same class during the lifetimes of the classes loaded during the bootstrap invocation. Finally, we compute the length of the bootstrap method to add to the Constant Pool to correctly align the bootstrap arguments to the bootstrap arguments of other bootstrap arguments of the same class during the lifetimes of the classes loaded during the bootstrap invocation, and add the bootstrap method to the Constant Pool of"}, {"ID": 871, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static byte[] transform(final InputStream body) throws IOException { final SAXSource source = new SAXSource(new InputSource(body)); final ByteArrayOutputStream result = new ByteArrayOutputStream(); try { final XMLReader xmlreader = SAXParserFactory.newInstance() .newSAXParser().getXMLReader(); source.setXMLReader(xmlreader); xmlreader.setFeature( RsPrettyXml.LOAD_EXTERNAL_DTD, false ); final String yes = \"yes\"; final Transformer transformer = TransformerFactory.newInstance() .newTransformer(); // @checkstyle MultipleStringLiteralsCheck (2 line) transformer.setOutputProperty( OutputKeys.OMIT_XML_DECLARATION, yes ); RsPrettyXml.prepareDocType(body, transformer); transformer.setOutputProperty(OutputKeys.INDENT, yes); transformer.transform(source, new StreamResult(result)); } catch (final TransformerException | ParserConfigurationException | SAXException ex) { throw new IOException(ex); } return result.toByteArray(); }\n\n    ### Response: Format body with proper indents using SAX.\n@param body Response body\n@return New properly formatted body\n@throws IOException If fails.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    int addMergedType(final int typeTableIndex1, final int typeTableIndex2) { // TODO sort the arguments? The merge result should be independent of their order. long data = typeTableIndex1 | (((long) typeTableIndex2) << 32); int hashCode = hash(Symbol.MERGED_TYPE_TAG, typeTableIndex1 + typeTableIndex2); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == Symbol.MERGED_TYPE_TAG && entry.hashCode == hashCode && entry.data == data) { return entry.info; } entry = entry.next; } String type1 = typeTable[typeTableIndex1].value; String type2 = typeTable[typeTableIndex2].value; int commonSuperTypeIndex = addType(classWriter.getCommonSuperClass(type1, type2)); put(new Entry(typeCount, Symbol.MERGED_TYPE_TAG, data, hashCode)).info = commonSuperTypeIndex; return commonSuperTypeIndex; }\n\n    ### Response:", "ground_truth": "Adds a merged type in the type table of this symbol table. Does nothing if the type table\nalready contains a similar type.\n\n@param typeTableIndex1 a {@link Symbol#TYPE_TAG} type, specified by its index in the type\ntable.\n@param typeTableIndex2 another {@link Symbol#TYPE_TAG} type, specified by its index in the type\ntable.\n@return the index of a new or already existing {@link Symbol#TYPE_TAG} type Symbol,\ncorresponding to the common super class of the given types.", "predict": "Merges the arguments and uses the Result to generate the merge Result"}, {"ID": 872, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_hacr_channels(db=None, gps=None, connection=None, **conectkwargs): \"\"\"Return the names of all channels present in the given HACR database \"\"\" # connect if needed if connection is None: if gps is None: gps = from_gps('now') if db is None: db = get_database_names(gps, gps)[0] connection = connect(db=db, **conectkwargs) # query out = query(\"select channel from job where monitorName = 'chacr'\") return [r[0] for r in out]\n\n    ### Response: Return the names of all channels present in the given HACR database.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private int hash(final String name) { int h = 0; for (int i = name.length() - 1; i >= 0; i--) { char c = name.charAt(i); if (!caseSensitive) { if (c >= 'A' && c <= 'Z') { c += 32; } } h = 31 * h + c; } if (h > 0) { return h; } if (h == Integer.MIN_VALUE) { return Integer.MAX_VALUE; } return -h; }\n\n    ### Response:", "ground_truth": "Calculates hash value of the input string.", "predict": "Precomputes the hash for each name to maximize speed of the hash function by reducing the number of computations necessary to compute the hash for any given name"}, {"ID": 873, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function fetchConfig() { if (Cache::has($this->getCacheKey())) { return Cache::get($this->getCacheKey()); } return null; }\n\n    ### Response: Fetch the stored config from the cache.\n\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpMultiMap<V> clear() { for (int i = 0; i < entries.length; i++) { entries[i] = null; } head.before = head.after = head; return this; }\n\n    ### Response:", "ground_truth": "Clears the map.", "predict": "Remove all values from the MultiMap."}, {"ID": 874, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getRealClass($stack, $extensionNamespace) { $stackPath = \\Staq\\Util::convertNamespaceToPath($stack); $absolutePath = realpath($this->extensions[$extensionNamespace] . '/Stack/' . $stackPath . '.php'); if (is_file($absolutePath)) { $realClass = $extensionNamespace . '\\\\Stack\\\\' . $stack; return $realClass; } }\n\n    ### Response: \"stack\" is now a part of the namespace, there is no burgers left at my bakery.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<V> getAll(final String name) { LinkedList<V> values = new LinkedList<>(); int h = hash(name); int i = index(h); MapEntry<V> e = entries[i]; while (e != null) { if (e.hash == h && eq(name, e.key)) { values.addFirst(e.getValue()); } e = e.next; } return values; }\n\n    ### Response:", "ground_truth": "Returns all values associated with the name.", "predict": "Pre-process the string to remove unnecessary spaces and convert to lower case to match standard naming convention of the project"}, {"ID": 875, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function appendFile($sourceFilePath) { // open the new uploaded chunk if (!$in = @fopen($sourceFilePath, 'rb')) { @fclose($this->destinationFile); throw new ChunkSaveException('Failed to open input stream', 101); } // read and write in buffs while ($buff = fread($in, 4096)) { fwrite($this->destinationFile, $buff); } @fclose($in); return $this; }\n\n    ### Response: Appends given file.\n\n@param string $sourceFilePath\n\n@return $this\n\n@throws ChunkSaveException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Iterator<Map.Entry<String, V>> iterator() { final MapEntry[] e = {head.after}; return new Iterator<Map.Entry<String, V>>() { @Override public boolean hasNext() { return e[0] != head; } @Override @SuppressWarnings(\"unchecked\") public Map.Entry<String, V> next() { if (!hasNext()) { throw new NoSuchElementException(\"No next() entry in the iteration\"); } MapEntry<V> next = e[0]; e[0] = e[0].after; return next; } @Override public void remove() { throw new UnsupportedOperationException(); } }; }\n\n    ### Response:", "ground_truth": "Returns iterator of all entries.", "predict": "The iterator iterates over the contents of the map. It keeps track of the current head Map.Entry and its after property to know which Map.Entry comes next in the iteration order. It also keeps track of the Map.Entry which came first in the iteration by setting the first Map.Entry as head Map.Entry."}, {"ID": 876, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public V remove(Object key) { clean(); ValueRef<K, V> valueRef = mValues.remove(key); V value; if (valueRef != null && (value = valueRef.get()) != null) { valueRef.clear(); return value; } return null; }\n\n    ### Response: Manually remove a value, returning the old value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<Map.Entry<String, V>> entries() { List<Map.Entry<String, V>> all = new LinkedList<>(); MapEntry<V> e = head.after; while (e != head) { all.add(e); e = e.after; } return all; }\n\n    ### Response:", "ground_truth": "Returns all the entries of this map. Case sensitivity does not influence\nthe returned list, it always contains all of the values.", "predict": "Returns a list of map entries with values from the Map."}, {"ID": 877, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function createInstanceFor($constraintName) { if (!isset($this->constraintMap[$constraintName])) { throw new InvalidArgumentException('Unknown constraint ' . $constraintName); } if (!isset($this->instanceCache[$constraintName])) { $this->instanceCache[$constraintName] = new $this->constraintMap[$constraintName]($this); } return clone $this->instanceCache[$constraintName]; }\n\n    ### Response: Create a constraint instance for the given constraint name.\n\n@param string $constraintName\n\n@throws InvalidArgumentException if is not possible create the constraint instance\n\n@return ConstraintInterface|ObjectConstraint.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void grow(final int minCapacity) { final int oldCapacity = buffer.length; int newCapacity = oldCapacity << 1; if (newCapacity - minCapacity < 0) { // special case, min capacity is larger then a grow newCapacity = minCapacity + 512; } buffer = Arrays.copyOf(buffer, newCapacity); }\n\n    ### Response:", "ground_truth": "Grows the buffer.", "predict": "Grow the capacity of the buffer to min Capacity plus 512"}, {"ID": 878, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def process_increase_expression_amount(self): \"\"\"Looks for Positive_Regulation events with a specified Cause and a Gene_Expression theme, and processes them into INDRA statements. \"\"\" statements = [] pwcs = self.find_event_parent_with_event_child( 'Positive_regulation', 'Gene_expression') for pair in pwcs: pos_reg = pair[0] expression = pair[1] cause = self.get_entity_text_for_relation(pos_reg, 'Cause') target = self.get_entity_text_for_relation(expression, 'Theme') if cause is not None and target is not None: theme_node = self.get_related_node(expression, 'Theme') assert(theme_node is not None) evidence = self.node_to_evidence(theme_node, is_direct=False) statements.append(IncreaseAmount(s2a(cause), s2a(target), evidence=evidence)) return statements\n\n    ### Response: Looks for Positive_Regulation events with a specified Cause\n        and a Gene_Expression theme, and processes them into INDRA statements..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public FastCharBuffer append(final CharSequence csq, final int start, final int end) { for (int i = start; i < end; i++) { append(csq.charAt(i)); } return this; }\n\n    ### Response:", "ground_truth": "Appends character sequence to buffer.", "predict": "Override the FastCharBuffer.append() method to appends specified number of characters from the CharSequence and returns this FastCharBuffer object"}, {"ID": 879, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function handleRequest(HTTPRequest $request) { if ($this->brokenOnConstruct) { user_error( sprintf( \"parent::__construct() needs to be called on %s::__construct()\", __CLASS__ ), E_USER_WARNING ); } $this->setRequest($request); $fieldData = $this->getRequest()->requestVar($this->getName()); /** @skipUpgrade */ if ($fieldData && isset($fieldData['GridState'])) { $this->getState(false)->setValue($fieldData['GridState']); } foreach ($this->getComponents() as $component) { if ($component instanceof GridField_URLHandler && $urlHandlers = $component->getURLHandlers($this)) { foreach ($urlHandlers as $rule => $action) { if ($params = $request->match($rule, true)) { // Actions can reference URL parameters. // e.g. '$Action/$ID/$OtherID' \u2192 '$Action' if ($action[0] == '$') { $action = $params[substr($action, 1)]; } if (!method_exists($component, 'checkAccessAction') || $component->checkAccessAction($action)) { if (!$action) { $action = \"index\"; } if (!is_string($action)) { throw new LogicException(sprintf( 'Non-string method name: %s', var_export($action, true) )); } try { $result = $component->$action($this, $request); } catch (HTTPResponse_Exception $responseException) { $result = $responseException->getResponse(); } if ($result instanceof HTTPResponse && $result->isError()) { return $result; } if ($this !== $result && !$request->isEmptyPattern($rule) && ($result instanceof RequestHandler || $result instanceof HasRequestHandler) ) { if ($result instanceof HasRequestHandler) { $result = $result->getRequestHandler(); } $returnValue = $result->handleRequest($request); if (is_array($returnValue)) { throw new LogicException( 'GridField_URLHandler handlers can\\'t return arrays' ); } return $returnValue; } if ($request->allParsed()) { return $result; } return $this->httpError( 404, sprintf( 'I can\\'t handle sub-URLs of a %s object.', get_class($result) ) ); } } } } } return parent::handleRequest($request); }\n\n    ### Response: Custom request handler that will check component handlers before proceeding to the default\nimplementation.\n\n@todo copy less code from RequestHandler.\n\n@param HTTPRequest $request\n@return array|RequestHandler|HTTPResponse|string\n@throws HTTPResponse_Exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public AnnotationVisitor visitAnnotation(final String desc, final boolean visible) { AnnotationVisitor destAnn = methodVisitor.visitAnnotation(desc, visible); // [A4] return new AnnotationVisitorAdapter(destAnn); }\n\n    ### Response:", "ground_truth": "Copies target method annotations.", "predict": "Override of the visitAnnotation method to translate from the method signature annotation into an appropriate method visitor annotation for the compiler to translate to code during annotation processing of the generated class file."}, {"ID": 880, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public int exitValue() throws ManagedProcessException { try { return resultHandler.getExitValue(); } catch (IllegalStateException e) { throw new ManagedProcessException(\"Exit Value not (yet) available for \" + getProcLongName(), e); } }\n\n    ### Response: Returns the exit value for the subprocess.\n\n@return the exit value of the subprocess represented by this Process object. by\nconvention, the value 0 indicates normal termination.\n@exception ManagedProcessException if the subprocess represented by this\nManagedProcess object has not yet terminated..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void visitEnd() { createFirstChainDelegate_Continue(tmd); for (int p = 0; p < tmd.proxyData.length; p++) { tmd.selectCurrentProxy(p); createProxyMethod(tmd); } }\n\n    ### Response:", "ground_truth": "Finally, builds proxy methods if applied to current method.", "predict": "Visit the endpoints of the chain of proxies of this managed objects and run the necessary processing for each of them"}, {"ID": 881, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def library(self) -> Library: \"\"\"Return the library object. .. versionadded:: 1.0 Scriptable: Yes \"\"\" assert self.__app.document_model return Library(self.__app.document_model)\n\n    ### Response: Return the library object.\n\n        .. versionadded:: 1.0\n\n        Scriptable: Yes.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void createFirstChainDelegate_Start() { // check invalid access flags int access = msign.getAccessFlags(); if (!wd.allowFinalMethods) { if ((access & AsmUtil.ACC_FINAL) != 0) { // detect final throw new ProxettaException( \"Unable to create proxy for final method: \" + msign + \". Remove final modifier or change the pointcut definition.\"); } } // create proxy methods tmd = new TargetMethodData(msign, aspectList); access &= ~ACC_NATIVE; access &= ~ACC_ABSTRACT; methodVisitor = wd.dest.visitMethod( access, tmd.msign.getMethodName(), tmd.msign.getDescription(), tmd.msign.getAsmMethodSignature(), null); }\n\n    ### Response:", "ground_truth": "Starts creation of first chain delegate.", "predict": "\n    Check invalid access flags\n\n    If access does not allow writing to or reading from fields of the objects on which the method is invoked\n    or the method makes changes to objects on which the method is invoked\n    or the method makes changes to objects on which the method is invoked\n    or the method makes changes to objects on which the method is invoked\n    or the method makes changes to objects on which the method is invoked\n    or the method makes changes to objects on which the method is invoked\n    or the method makes changes to objects on which the method is invoked\n    or the method makes changes to objects on which the method is invoked\n    or the method makes changes to objects on which the method is invoked\n    or the method makes changes to objects on which the method is invoked\n    or the method makes changes to objects on which the method is invoked\n    or the method makes changes to objects on which the method is invoked\n    or the method makes changes to objects on which the method is invoked\n    or the method makes changes"}, {"ID": 882, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (m AttributeMap) Pop(name string, dst interface{}, opts ...mapdecode.Option) (bool, error) { ok, err := m.Get(name, dst, opts...) if ok { delete(m, name) } return ok, err }\n\n    ### Response: // Pop removes the named key from the AttributeMap and decodes the value into\n// the dst interface..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void createFirstChainDelegate_Continue(final TargetMethodData tmd) { methodVisitor.visitCode(); if (tmd.msign.isStatic) { loadStaticMethodArguments(methodVisitor, tmd.msign); methodVisitor.visitMethodInsn( INVOKESTATIC, wd.thisReference, tmd.firstMethodName(), tmd.msign.getDescription(), false); } else { loadSpecialMethodArguments(methodVisitor, tmd.msign); methodVisitor.visitMethodInsn( INVOKESPECIAL, wd.thisReference, tmd.firstMethodName(), tmd.msign.getDescription(), false); } visitReturn(methodVisitor, tmd.msign, false); methodVisitor.visitMaxs(0, 0); methodVisitor.visitEnd(); }\n\n    ### Response:", "ground_truth": "Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method.\nThis method mirrors the target method.", "predict": "The above method populates the chain for the first chain listener of the chain listener listener and\n// invokes the chain listener listener for the given chain listener"}, {"ID": 883, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def iterbusinessdays(self, d1, d2): \"\"\" Date iterator returning dates in d1 <= x < d2, excluding weekends and holidays \"\"\" assert d2 >= d1 if d1.date() == d2.date() and d2.time() < self.business_hours[0]: return first = True for dt in self.iterdays(d1, d2): if first and d1.time() > self.business_hours[1]: first = False continue first = False if not self.isweekend(dt) and not self.isholiday(dt): yield dt\n\n    ### Response: Date iterator returning dates in d1 <= x < d2, excluding weekends and holidays.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Path parse(final String path) { return path == null ? new Path() : new Path(StringUtil.splitc(path, '.')); }\n\n    ### Response:", "ground_truth": "Parses input dot-separated string that represents a path.", "predict": "Parses the given string as a path or returns an empty path if the given string is null or an empty string."}, {"ID": 884, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static OgmCollectionPersister getInverseCollectionPersister(OgmCollectionPersister mainSidePersister) { if ( mainSidePersister.isInverse() || !mainSidePersister.isManyToMany() || !mainSidePersister.getElementType().isEntityType() ) { return null; } EntityPersister inverseSidePersister = mainSidePersister.getElementPersister(); // process collection-typed properties of inverse side and try to find association back to main side for ( Type type : inverseSidePersister.getPropertyTypes() ) { if ( type.isCollectionType() ) { OgmCollectionPersister inverseCollectionPersister = getPersister( mainSidePersister.getFactory(), (CollectionType) type ); if ( isCollectionMatching( mainSidePersister, inverseCollectionPersister ) ) { return inverseCollectionPersister; } } } return null; }\n\n    ### Response: Returns the given collection persister for the inverse side in case the given persister represents the main side\nof a bi-directional many-to-many association.\n\n@param mainSidePersister the collection persister on the main side of a bi-directional many-to-many association\n@return the collection persister for the inverse side of the given persister or {@code null} in case it\nrepresents the inverse side itself or the association is uni-directional.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Path push(final CharSequence field) { _push(field); if (altPath != null) { altPath.push(field); } return this; }\n\n    ### Response:", "ground_truth": "Push element to the path.", "predict": "Increment the stack frame for the given path by pushing the given string to the top of the stack\nand makes sure to push an extra path on the top of the stack to memorize the given string for later\ndecrementing of the stack frame when the string is retrieved back."}, {"ID": 885, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _link_or_update_vars(self): \"\"\" Creates or updates the symlink to group_vars and returns None. :returns: None \"\"\" for d, source in self.links.items(): target = os.path.join(self.inventory_directory, d) source = os.path.join(self._config.scenario.directory, source) if not os.path.exists(source): msg = \"The source path '{}' does not exist.\".format(source) util.sysexit_with_message(msg) msg = \"Inventory {} linked to {}\".format(source, target) LOG.info(msg) os.symlink(source, target)\n\n    ### Response: Creates or updates the symlink to group_vars and returns None.\n\n        :returns: None.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void configureServletContext(final ServletContext servletContext) { servletContext.addListener(jodd.servlet.RequestContextListener.class); if (decoraEnabled) { final FilterRegistration filter = servletContext.addFilter(\"decora\", jodd.decora.DecoraServletFilter.class); filter.addMappingForUrlPatterns(null, true, contextPath); } final FilterRegistration filter = servletContext.addFilter(\"madvoc\", jodd.madvoc.MadvocServletFilter.class); filter.addMappingForUrlPatterns(madvocDispatcherTypes, true, contextPath); }\n\n    ### Response:", "ground_truth": "Configures servlet context.", "predict": "\n    Private method to configure the servlet context with listener for the given servlet context and any other necessary configurations to serve the given application."}, {"ID": 886, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *MutableTLSCreds) ClientHandshake(ctx context.Context, addr string, rawConn net.Conn) (net.Conn, credentials.AuthInfo, error) { // borrow all the code from the original TLS credentials c.Lock() if c.config.ServerName == \"\" { colonPos := strings.LastIndex(addr, \":\") if colonPos == -1 { colonPos = len(addr) } c.config.ServerName = addr[:colonPos] } conn := tls.Client(rawConn, c.config) // Need to allow conn.Handshake to have access to config, // would create a deadlock otherwise c.Unlock() var err error errChannel := make(chan error, 1) go func() { errChannel <- conn.Handshake() }() select { case err = <-errChannel: case <-ctx.Done(): err = ctx.Err() } if err != nil { rawConn.Close() return nil, nil, err } return conn, nil, nil }\n\n    ### Response: // ClientHandshake implements the credentials.TransportCredentials interface.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object execute() { String methodName = targetMethodName(); Class returnType = returnType(); Object next = pathref.continueWith(this, methodName, returnType); return ProxyTarget.returnValue(next); }\n\n    ### Response:", "ground_truth": "Reads method name and appends it. Creates object for next call and\nreturns that value. If next object is unsupported, it will return null;", "predict": "The execute() method of the Proxy class implements the logic to invoke the specified method on the remote object and returns the result back to the calling application."}, {"ID": 887, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function warnings(array $stores = null) { global $CFG; if ($stores === null) { require_once($CFG->dirroot.'/cache/locallib.php'); $stores = cache_administration_helper::get_store_instance_summaries(); } $warnings = array(); foreach ($stores as $store) { if (!empty($store['warnings'])) { $warnings = array_merge($warnings, $store['warnings']); } } return $warnings; }\n\n    ### Response: Returns an array of warnings from the cache API.\n\nThe warning returned here are for things like conflicting store instance configurations etc.\nThese get shown on the admin notifications page for example.\n\n@param array|null $stores An array of stores to get warnings for, or null for all.\n@return string[].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public FieldDescriptor[] getAllFieldDescriptors() { if (allFields == null) { FieldDescriptor[] allFields = new FieldDescriptor[fieldsMap.size()]; int index = 0; for (FieldDescriptor fieldDescriptor : fieldsMap.values()) { allFields[index] = fieldDescriptor; index++; } Arrays.sort(allFields, Comparator.comparing(fd -> fd.getField().getName())); this.allFields = allFields; } return allFields; }\n\n    ### Response:", "ground_truth": "Returns all fields of this collection. Returns empty array\nif no fields exist. Initialized lazy.", "predict": "Get an ordered array of FieldDescriptor objects for all fields of the document type"}, {"ID": 888, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function isEmpty() { return empty($this->shortDescription) && empty($this->longDescription) && $this->tags->size() == 0; }\n\n    ### Response: Returns true when there is no content in the docblock\n\n@return boolean.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") @Override protected <T> BeanDefinition<T> createBeanDefinitionForRegistration( final String name, Class<T> type, final Scope scope, final WiringMode wiringMode, final Consumer<T> consumer) { if (proxetta != null) { final Class originalType = type; final ProxettaFactory builder = proxetta.proxy(); builder.setTarget(type); type = builder.define(); return new ProxettaBeanDefinition( name, type, scope, wiringMode, originalType, proxetta.getAspects(new ProxyAspect[0]), consumer); } return super.createBeanDefinitionForRegistration(name, type, scope, wiringMode, consumer); }\n\n    ### Response:", "ground_truth": "Applies proxetta on bean class before bean registration.", "predict": "Override the default behavior of Spring to generate proxies for the given bean definition to introduce custom behavior for the given bean definition"}, {"ID": 889, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function setLastVisitedUrl($url){ if(empty($url)){ throw new common_Exception('Cannot register an empty URL for the last visited extension'); } $success = false; $userUri = common_session_SessionManager::getSession()->getUserUri(); if (!empty($userUri)) { $user = new \\core_kernel_classes_Resource($userUri); $user = new core_kernel_classes_Resource($userUri); if ($user->exists()) { // user in ontology //clean up what's stored $url = str_replace(ROOT_URL, '', $url); $success = $user->editPropertyValues(new core_kernel_classes_Property(TaoOntology::PROPERTY_USER_LAST_EXTENSION), $url); } // else we fail; } return $success; }\n\n    ### Response: Set the URL of the last visited extension to a user.\n@param string $url a non empty URL where the user was the last time\n@param core_kernel_classes_Resource $user a user or the current user if null/not set (optional)\n@throws common_Exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static DbTransactionMode convertToDbMode(final JtxTransactionMode txMode) { final int isolation; switch (txMode.getIsolationLevel()) { case ISOLATION_DEFAULT: isolation = DbTransactionMode.ISOLATION_DEFAULT; break; case ISOLATION_NONE: isolation = DbTransactionMode.ISOLATION_NONE; break; case ISOLATION_READ_COMMITTED: isolation = DbTransactionMode.ISOLATION_READ_COMMITTED; break; case ISOLATION_READ_UNCOMMITTED: isolation = DbTransactionMode.ISOLATION_READ_UNCOMMITTED; break; case ISOLATION_REPEATABLE_READ: isolation = DbTransactionMode.ISOLATION_REPEATABLE_READ; break; case ISOLATION_SERIALIZABLE: isolation = DbTransactionMode.ISOLATION_SERIALIZABLE; break; default: throw new IllegalArgumentException(); } return new DbTransactionMode(isolation, txMode.isReadOnly()); }\n\n    ### Response:", "ground_truth": "Converter JTX transaction mode to DB transaction mode.", "predict": "The function converts transaction mode values from the Spring transaction manager into corresponding SQL ISOLATION level values to ensure proper SQL behavior for the given transactional operation"}, {"ID": 890, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def render_vis(model, objective_f, param_f=None, optimizer=None, transforms=None, thresholds=(512,), print_objectives=None, verbose=True, relu_gradient_override=True, use_fixed_seed=False): \"\"\"Flexible optimization-base feature vis. There's a lot of ways one might wish to customize otpimization-based feature visualization. It's hard to create an abstraction that stands up to all the things one might wish to try. This function probably can't do *everything* you want, but it's much more flexible than a naive attempt. The basic abstraction is to split the problem into several parts. Consider the rguments: Args: model: The model to be visualized, from Alex' modelzoo. objective_f: The objective our visualization maximizes. See the objectives module for more details. param_f: Paramaterization of the image we're optimizing. See the paramaterization module for more details. Defaults to a naively paramaterized [1, 128, 128, 3] image. optimizer: Optimizer to optimize with. Either tf.train.Optimizer instance, or a function from (graph, sess) to such an instance. Defaults to Adam with lr .05. transforms: A list of stochastic transformations that get composed, which our visualization should robustly activate the network against. See the transform module for more details. Defaults to [transform.jitter(8)]. thresholds: A list of numbers of optimization steps, at which we should save (and display if verbose=True) the visualization. print_objectives: A list of objectives separate from those being optimized, whose values get logged during the optimization. verbose: Should we display the visualization when we hit a threshold? This should only be used in IPython. relu_gradient_override: Whether to use the gradient override scheme described in lucid/misc/redirected_relu_grad.py. On by default! use_fixed_seed: Seed the RNG with a fixed value so results are reproducible. Off by default. As of tf 1.8 this does not work as intended, see: https://github.com/tensorflow/tensorflow/issues/9171 Returns: 2D array of optimization results containing of evaluations of supplied param_f snapshotted at specified thresholds. Usually that will mean one or multiple channel visualizations stacked on top of each other. \"\"\" with tf.Graph().as_default() as graph, tf.Session() as sess: if use_fixed_seed: # does not mean results are reproducible, see Args doc tf.set_random_seed(0) T = make_vis_T(model, objective_f, param_f, optimizer, transforms, relu_gradient_override) print_objective_func = make_print_objective_func(print_objectives, T) loss, vis_op, t_image = T(\"loss\"), T(\"vis_op\"), T(\"input\") tf.global_variables_initializer().run() images = [] try: for i in range(max(thresholds)+1): loss_, _ = sess.run([loss, vis_op]) if i in thresholds: vis = t_image.eval() images.append(vis) if verbose: print(i, loss_) print_objective_func(sess) show(np.hstack(vis)) except KeyboardInterrupt: log.warning(\"Interrupted optimization at step {:d}.\".format(i+1)) vis = t_image.eval() show(np.hstack(vis)) return images\n\n    ### Response: Flexible optimization-base feature vis.\n\n  There's a lot of ways one might wish to customize otpimization-based\n  feature visualization. It's hard to create an abstraction that stands up\n  to all the things one might wish to try.\n\n  This function probably can't do *everything* you want, but it's much more\n  flexible than a naive attempt. The basic abstraction is to split the problem\n  into several parts. Consider the rguments:\n\n  Args:\n    model: The model to be visualized, from Alex' modelzoo.\n    objective_f: The objective our visualization maximizes.\n      See the objectives module for more details.\n    param_f: Paramaterization of the image we're optimizing.\n      See the paramaterization module for more details.\n      Defaults to a naively paramaterized [1, 128, 128, 3] image.\n    optimizer: Optimizer to optimize with. Either tf.train.Optimizer instance,\n      or a function from (graph, sess) to such an instance.\n      Defaults to Adam with lr .05.\n    transforms: A list of stochastic transformations that get composed,\n      which our visualization should robustly activate the network against.\n      See the transform module for more details.\n      Defaults to [transform.jitter(8)].\n    thresholds: A list of numbers of optimization steps, at which we should\n      save (and display if verbose=True) the visualization.\n    print_objectives: A list of objectives separate from those being optimized,\n      whose values get logged during the optimization.\n    verbose: Should we display the visualization when we hit a threshold?\n      This should only be used in IPython.\n    relu_gradient_override: Whether to use the gradient override scheme\n      described in lucid/misc/redirected_relu_grad.py. On by default!\n    use_fixed_seed: Seed the RNG with a fixed value so results are reproducible.\n      Off by default. As of tf 1.8 this does not work as intended, see:\n      https://github.com/tensorflow/tensorflow/issues/9171\n  Returns:\n    2D array of optimization results containing of evaluations of supplied\n    param_f snapshotted at specified thresholds. Usually that will mean one or\n    multiple channel visualizations stacked on top of each other..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Object readProperty(final Object source, final PropertyDescriptor propertyDescriptor) { Getter getter = propertyDescriptor.getGetter(declared); if (getter != null) { try { return getter.invokeGetter(source); } catch (Exception ex) { throw new JsonException(ex); } } return null; }\n\n    ### Response:", "ground_truth": "Reads property using property descriptor.", "predict": "\n    Private method to retrieve the contents of a given source object at the given location determined by the specified PropertyDescriptor. It reads the contents of the source object and invokes the corresponding method defined in the PropertyDescriptor to retrieve the contents of the given location in the source object."}, {"ID": 891, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function sort_categories() { $this->attach_nodes_to_categories(); $tempcategories = array(); foreach ($this->categories as $category) { $after = $category->after; if ($after == null) { // Can go anywhere in the tree. $category->sort_nodes(); $tempcategories = array_merge($tempcategories, array($category->name => $category), $this->find_categories_after($category)); } } if (count($tempcategories) !== count($this->categories)) { // Orphan categories found. throw new \\coding_exception('Some of the categories specified contains invalid \\'after\\' property'); } $this->categories = $tempcategories; }\n\n    ### Response: Sort categories and nodes. Builds the tree structure that would be displayed to the user.\n\n@throws \\coding_exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void putAll(final Map t) { for (Object o : t.entrySet()) { Map.Entry e = (Map.Entry) o; put(e.getKey(), e.getValue()); } }\n\n    ### Response:", "ground_truth": "Copies all of the mappings from the specified map to this one.\nThese mappings replace any mappings that this map had for any of the\nkeys currently in the specified Map.\n\n@param t Mappings to be stored in this map.", "predict": "Override the default behavior of the Map and add values from the given Map t to the Map being constructed."}, {"ID": 892, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visit(final WebApp webApp) { NullArgumentException.validateNotNull(webApp, \"Web app\"); bundleClassLoader = new BundleClassLoader(webApp.getBundle()); httpContext = new WebAppHttpContext( httpService.createDefaultHttpContext(), webApp.getRootPath(), webApp.getBundle(), webApp.getMimeMappings()); try { LOG.info(\"Pax Web not available. Skipping context params registration\"); httpService.registerResources(\"/\", \"default\", httpContext); //CHECKSTYLE:OFF } catch (Throwable ignore) { LOG.error(\"Registration exception. Skipping.\", ignore); } //CHECKSTYLE:ON }\n\n    ### Response: Creates a default context that will be used for all following\nregistrations and registers a resource for root of war.\n\n@throws NullArgumentException if web app is null\n@see WebAppVisitor#visit(WebApp).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Buffer append(final Buffer buffer) { if (buffer.list.isEmpty()) { // nothing to append return buffer; } list.addAll(buffer.list); last = buffer.last; size += buffer.size; return this; }\n\n    ### Response:", "ground_truth": "Appends other buffer to this one.", "predict": "Append items to the given list and returns this Buffer object\n    \"\"\"\n    Append items to the given list and returns this Buffer object\n    \"\"\""}, {"ID": 893, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _new_conn(self): \"\"\" Establish a new connection via the SOCKS proxy. \"\"\" extra_kw = {} if self.source_address: extra_kw['source_address'] = self.source_address if self.socket_options: extra_kw['socket_options'] = self.socket_options try: conn = socks.create_connection( (self.host, self.port), proxy_type=self._socks_options['socks_version'], proxy_addr=self._socks_options['proxy_host'], proxy_port=self._socks_options['proxy_port'], proxy_username=self._socks_options['username'], proxy_password=self._socks_options['password'], proxy_rdns=self._socks_options['rdns'], timeout=self.timeout, **extra_kw ) except SocketTimeout as e: raise ConnectTimeoutError( self, \"Connection to %s timed out. (connect timeout=%s)\" % (self.host, self.timeout)) except socks.ProxyError as e: # This is fragile as hell, but it seems to be the only way to raise # useful errors here. if e.socket_err: error = e.socket_err if isinstance(error, SocketTimeout): raise ConnectTimeoutError( self, \"Connection to %s timed out. (connect timeout=%s)\" % (self.host, self.timeout) ) else: raise NewConnectionError( self, \"Failed to establish a new connection: %s\" % error ) else: raise NewConnectionError( self, \"Failed to establish a new connection: %s\" % e ) except SocketError as e: # Defensive: PySocks should catch all these. raise NewConnectionError( self, \"Failed to establish a new connection: %s\" % e) return conn\n\n    ### Response: Establish a new connection via the SOCKS proxy..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void writeTo(final Writer writer) throws IOException { for (Object o : list) { if (o instanceof FastByteBuffer) { FastByteBuffer fastByteBuffer = (FastByteBuffer) o; byte[] array = fastByteBuffer.toArray(); writer.write(new String(array, StringPool.ISO_8859_1)); } else if (o instanceof Uploadable) { Uploadable uploadable = (Uploadable) o; InputStream inputStream = uploadable.openInputStream(); try { StreamUtil.copy(inputStream, writer, StringPool.ISO_8859_1); } finally { StreamUtil.close(inputStream); } } } }\n\n    ### Response:", "ground_truth": "Writes content to the writer.", "predict": "Writes objects to the specified writer."}, {"ID": 894, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getConfig(string $configKey): APIConfig { if ($this->hasConfig($configKey)) { return $this->configs[$configKey]; } throw ConfigException::noConfig($configKey); }\n\n    ### Response: Returns the config with specified config key.\n\n@throws \\Netgen\\BlockManager\\Exception\\API\\ConfigException If the config does not exist.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void writeTo(final OutputStream out) throws IOException { for (Object o : list) { if (o instanceof FastByteBuffer) { FastByteBuffer fastByteBuffer = (FastByteBuffer) o; out.write(fastByteBuffer.toArray()); } else if (o instanceof Uploadable) { Uploadable uploadable = (Uploadable) o; InputStream inputStream = uploadable.openInputStream(); try { StreamUtil.copy(inputStream, out); } finally { StreamUtil.close(inputStream); } } } }\n\n    ### Response:", "ground_truth": "Writes content to the output stream.", "predict": "Writes objects to the output stream provided."}, {"ID": 895, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function runBackups($disk = null) { try { $backupJob = BackupJobFactory::createFromArray(config('laravel-backup')); if ( ! is_null($disk)) { $backupJob->onlyBackupTo($disk); } $backupJob->run(); } catch (\\Exception $ex) { return false; } return true; }\n\n    ### Response: Run the backups.\n\n@param  string|null  $disk\n\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void writeTo(final OutputStream out, final HttpProgressListener progressListener) throws IOException { // start final int size = size(); final int callbackSize = progressListener.callbackSize(size); int count = 0; // total count int step = 0; // step is offset in current chunk progressListener.transferred(count); // loop for (Object o : list) { if (o instanceof FastByteBuffer) { FastByteBuffer fastByteBuffer = (FastByteBuffer) o; byte[] bytes = fastByteBuffer.toArray(); int offset = 0; while (offset < bytes.length) { // calc the remaining sending chunk size int chunk = callbackSize - step; // check if this chunk size fits the bytes array if (offset + chunk > bytes.length) { chunk = bytes.length - offset; } // writes the chunk out.write(bytes, offset, chunk); offset += chunk; step += chunk; count += chunk; // listener if (step >= callbackSize) { progressListener.transferred(count); step -= callbackSize; } } } else if (o instanceof Uploadable) { Uploadable uploadable = (Uploadable) o; InputStream inputStream = uploadable.openInputStream(); int remaining = uploadable.getSize(); try { while (remaining > 0) { // calc the remaining sending chunk size int chunk = callbackSize - step; // check if this chunk size fits the remaining size if (chunk > remaining) { chunk = remaining; } // writes remaining chunk StreamUtil.copy(inputStream, out, chunk); remaining -= chunk; step += chunk; count += chunk; // listener if (step >= callbackSize) { progressListener.transferred(count); step -= callbackSize; } } } finally { StreamUtil.close(inputStream); } } } // end if (step != 0) { progressListener.transferred(count); } }\n\n    ### Response:", "ground_truth": "Writes content to the output stream, using progress listener to track the sending progress.", "predict": "\n    Writes objects to the given output stream."}, {"ID": 896, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Geometry removeDuplicateCoordinates(Geometry geom, double tolerance) throws SQLException { if (geom == null) { return null; } else if (geom.isEmpty()) { return geom; } else if (geom instanceof Point) { return geom; } else if (geom instanceof MultiPoint) { return geom; } else if (geom instanceof LineString) { return removeDuplicateCoordinates((LineString) geom, tolerance); } else if (geom instanceof MultiLineString) { return removeDuplicateCoordinates((MultiLineString) geom, tolerance); } else if (geom instanceof Polygon) { return removeDuplicateCoordinates((Polygon) geom, tolerance); } else if (geom instanceof MultiPolygon) { return removeDuplicateCoordinates((MultiPolygon) geom, tolerance); } else if (geom instanceof GeometryCollection) { return removeDuplicateCoordinates((GeometryCollection) geom, tolerance); } return null; }\n\n    ### Response: Removes duplicated points within a geometry.\n\n@param geom\n@param tolerance to delete the coordinates\n@return\n@throws java.sql.SQLException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getString(final String key) { CharSequence cs = (CharSequence) map.get(key); return cs == null ? null : cs.toString(); }\n\n    ### Response:", "ground_truth": "Returns the string value with the specified key.", "predict": "Retrieves a specific value from the Map and converts it to its appropriate type to produce a String representation of it."}, {"ID": 897, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _poll_slapd(self, timeout=DEFAULT_STARTUP_DELAY): \"\"\"Poll slapd port until available.\"\"\" begin = time.time() time.sleep(0.5) while time.time() < begin + timeout: if self._process.poll() is not None: raise RuntimeError(\"LDAP server has exited before starting listen.\") s = socket.socket() try: s.connect(('localhost', self.port)) except socket.error: # Not ready yet, sleep time.sleep(0.5) else: return finally: s.close() raise RuntimeError(\"LDAP server not responding within %s seconds.\" % timeout)\n\n    ### Response: Poll slapd port until available..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Integer getInteger(final String key) { Number number = (Number) map.get(key); if (number == null) { return null; } if (number instanceof Integer) { return (Integer) number; } return number.intValue(); }\n\n    ### Response:", "ground_truth": "returns the integer value with the specified key.", "predict": "Gets an int from the given Map or returns null if the Map does not contain the given key."}, {"ID": 898, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private ImmutableFunctionalTerm getTermTypeAtom(String string, Object type, String joinCond) { if (type.equals(R2RMLVocabulary.iri)) { return getURIFunction(string, joinCond); } else if (type.equals(R2RMLVocabulary.blankNode)) { return getTypedFunction(string, 2, joinCond); } else if (type.equals(R2RMLVocabulary.literal)) { return getTypedFunction(trim(string), 3, joinCond); } return null; }\n\n    ### Response: get a typed atom of a specific type\n\n@param type\n- iri, blanknode or literal\n@param string\n- the atom as string\n@return the contructed Function atom.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Long getLong(final String key) { Number number = (Number) map.get(key); if (number == null) { return null; } if (number instanceof Long) { return (Long) number; } return number.longValue(); }\n\n    ### Response:", "ground_truth": "Returns the long value with the specified key.", "predict": "\n    Long function to retrieve the Long values of the given string key from the Map."}, {"ID": 899, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public ConfigurationStore getStore(final String name) throws ConfigException { try { final File dir = new File(dirPath); final String newPath = dirPath + name; final File[] files = dir.listFiles(new DirsOnly()); for (final File f: files) { if (f.getName().equals(name)) { return new ConfigurationFileStore(newPath); } } final File newDir = new File(newPath); if (!newDir.mkdir()) { throw new ConfigException(\"Unable to create directory \" + newPath); } return new ConfigurationFileStore(newPath); } catch (final Throwable t) { throw new ConfigException(t); } }\n\n    ### Response: Get the named store. Create it if it does not exist\n\n@param name of config\n@return store\n@throws ConfigException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Double getDouble(final String key) { Number number = (Number) map.get(key); if (number == null) { return null; } if (number instanceof Double) { return (Double) number; } return number.doubleValue(); }\n\n    ### Response:", "ground_truth": "Returns the double value with the specified key.", "predict": "Get the given double from the given Map"}, {"ID": 900, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function exportWishlistForWebsiteInSingle(\\Magento\\Store\\Api\\Data\\WebsiteInterface $website) { //transactional data limit $limit = $this->helper->getWebsiteConfig( \\Dotdigitalgroup\\Email\\Helper\\Config::XML_PATH_CONNECTOR_TRANSACTIONAL_DATA_SYNC_LIMIT, $website ); $collection = $this->getModifiedWishlistToImport( $website, $limit ); $this->wishlistIds = []; //email_wishlist wishlist ids $wishlistIds = $collection->getColumnValues('wishlist_id'); $wishlistCollection = $this->wishlist->create() ->getWishlistByIds($wishlistIds); foreach ($wishlistCollection as $wishlist) { $wishlistId = $wishlist->getid(); $wishlistItems = $this->itemCollection->create() ->addWishlistFilter($wishlist); $connectorWishlist = $this->wishlistFactory->create(); $connectorWishlist->setId($wishlistId) ->setUpdatedAt($wishlist->getUpdatedAt()) ->setCustomerId($wishlist->getCustomerId()) ->setEmail($wishlist->getEmail()); if ($wishlistItems->getSize()) { /** @var \\Magento\\Wishlist\\Model\\Item $item */ foreach ($wishlistItems as $item) { try { $product = $item->getProduct(); $connectorWishlistItem = $this->createConnectorWishlistItem($product, $item); if ($connectorWishlistItem) { $connectorWishlist->setItem($connectorWishlistItem); } $this->countWishlists++; } catch (\\Exception $e) { //Product does not exist. Continue to next item continue; } } //send wishlist as transactional data $this->start = microtime(true); //register in queue with importer $check = $this->importerFactory->create() ->registerQueue( Importer::IMPORT_TYPE_WISHLIST, $connectorWishlist->expose(), Importer::MODE_SINGLE, $website->getId() ); if ($check) { $this->wishlistIds[] = $wishlistId; } } else { //register in queue with importer $check = $this->importerFactory->create() ->registerQueue( Importer::IMPORT_TYPE_WISHLIST, [$wishlist->getId()], Importer::MODE_SINGLE_DELETE, $website->getId() ); if ($check) { $this->wishlistIds[] = $wishlistId; } } } if (! empty($this->wishlistIds)) { $this->setImported($this->wishlistIds, true); } }\n\n    ### Response: Export single wishlist for website.\n\n@param \\Magento\\Store\\Api\\Data\\WebsiteInterface $website\n\n@return null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Float getFloat(final String key) { Number number = (Number) map.get(key); if (number == null) { return null; } if (number instanceof Float) { return (Float) number; } return number.floatValue(); }\n\n    ### Response:", "ground_truth": "Returns the float value with the specified key.", "predict": "Get and convert to float from given string key of given Map Object"}, {"ID": 901, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def add_root_match(self, lst_idx, root_idx): \"\"\"Adds a match for the elements avaialble at lst_idx and root_idx.\"\"\" self.root_matches[lst_idx] = root_idx if lst_idx in self.in_result_idx: return self.not_in_result_root_match_idx.add(lst_idx)\n\n    ### Response: Adds a match for the elements avaialble at lst_idx and root_idx..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public <T> T getValue(final String key) { T val = (T) map.get(key); if (val instanceof Map) { return (T) new JsonObject((Map) val); } if (val instanceof List) { return (T) new JsonArray((List) val); } return val; }\n\n    ### Response:", "ground_truth": "Returns the value with the specified key, as an object.", "predict": "Gets the Value of the given Map or List or Object from the Map"}, {"ID": 902, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def send(self, url, http_method, json_body=None, http_header=None): \"\"\" Executes Batch SQL query in a CARTO server :param url: Endpoint url :param http_method: The method used to make the request to the API :param json_body: The information that needs to be sent, by default is set to None :param http_header: The header used to make write requests to the API, by default is none :type url: str :type http_method: str :type json_body: dict :type http_header: str :return: Response data, either as json or as a regular response.content object :rtype: object :raise: CartoException \"\"\" try: data = self.client.send(url, http_method=http_method, headers=http_header, json=json_body) data_json = self.client.get_response_data(data) except CartoRateLimitException as e: raise e except Exception as e: raise CartoException(e) return data_json\n\n    ### Response: Executes Batch SQL query in a CARTO server\n\n        :param url: Endpoint url\n        :param http_method: The method used to make the request to the API\n        :param json_body: The information that needs to be sent, by default\n                            is set to None\n        :param http_header: The header used to make write requests to the API,\n                            by default is none\n        :type url: str\n        :type http_method: str\n        :type json_body: dict\n        :type http_header: str\n\n        :return: Response data, either as json or as a regular response.content\n                object\n        :rtype: object\n\n        :raise: CartoException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public JsonObject put(final String key, final String value) { Objects.requireNonNull(key); map.put(key, value); return this; }\n\n    ### Response:", "ground_truth": "Puts a string into the JSON object with the specified key.", "predict": "\n    Put an arbitrary string to the given Map and returns this JsonObject with the updated Map"}, {"ID": 903, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function createCollection(array $data = []) { $collection = new Images(); foreach ($data as $item) { $collection->add(null, $this->create($item)); } return $collection; }\n\n    ### Response: Create generic collection\n\n@param  array  $data\n@return Images.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void useFolder(final String folderName) { closeFolderIfOpened(folder); try { this.folderName = folderName; this.folder = getService().getFolder(folderName); try { folder.open(Folder.READ_WRITE); } catch (final MailException ignore) { folder.open(Folder.READ_ONLY); } } catch (final MessagingException msgexc) { throw new MailException(\"Failed to connect to folder: \" + folderName, msgexc); } }\n\n    ### Response:", "ground_truth": "Opens new folder and closes previously opened folder.\n\n@param folderName Folder to open", "predict": "Use folder to manage received emails\n\n// Closes folder if already opened\n// Attempts to open folder in read/write or read-only access\n// If folder cannot be accessed, tries to open in read-only\n// If exception thrown, throws exception stating unable to connect to folder\n// If folder successfully opens, tries to open appropirately\n// If exception thrown, throws exception stating unable to connect to folder"}, {"ID": 904, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def move_edge_source(self, edge_id, node_a, node_b): \"\"\"Moves an edge originating from node_a so that it originates from node_b.\"\"\" # Grab the edge edge = self.get_edge(edge_id) # Alter the vertices edge['vertices'] = (node_b, edge['vertices'][1]) # Remove the edge from node_a node = self.get_node(node_a) node['edges'].remove(edge_id) # Add the edge to node_b node = self.get_node(node_b) node['edges'].append(edge_id)\n\n    ### Response: Moves an edge originating from node_a so that it originates from node_b..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    ReceivedEmail[] receiveMessages( final EmailFilter filter, final Flags flagsToSet, final Flags flagsToUnset, final boolean envelope, final Consumer<Message[]> processedMessageConsumer) { useAndOpenFolderIfNotSet(); final Message[] messages; try { if (filter == null) { messages = folder.getMessages(); } else { messages = folder.search(filter.getSearchTerm()); } if (messages.length == 0) { return ReceivedEmail.EMPTY_ARRAY; } if (envelope) { final FetchProfile fetchProfile = new FetchProfile(); fetchProfile.add(FetchProfile.Item.ENVELOPE); fetchProfile.add(FetchProfile.Item.FLAGS); folder.fetch(messages, fetchProfile); } // process messages final ReceivedEmail[] emails = new ReceivedEmail[messages.length]; for (int i = 0; i < messages.length; i++) { final Message msg = messages[i]; // we need to parse message BEFORE flags are set! emails[i] = new ReceivedEmail(msg, envelope, attachmentStorage); if (!EmailUtil.isEmptyFlags(flagsToSet)) { emails[i].flags(flagsToSet); msg.setFlags(flagsToSet, true); } if (!EmailUtil.isEmptyFlags(flagsToUnset)) { emails[i].flags().remove(flagsToUnset); msg.setFlags(flagsToUnset, false); } if (EmailUtil.isEmptyFlags(flagsToSet) && !emails[i].isSeen()) { msg.setFlag(Flags.Flag.SEEN, false); } } if (processedMessageConsumer != null) { processedMessageConsumer.accept(messages); } // if messages were marked to be deleted, we need to expunge the folder if (!EmailUtil.isEmptyFlags(flagsToSet)) { if (flagsToSet.contains(Flags.Flag.DELETED)) { folder.expunge(); } } return emails; } catch (final MessagingException msgexc) { throw new MailException(\"Failed to fetch messages\", msgexc); } }\n\n    ### Response:", "ground_truth": "The main email receiving method.", "predict": "The method receives an EmailFilter parameter to filter messages to fetch and an EmailFlags parameter to determine if the received emails should be marked as seen and deleted and an envelope parameter to determine if attachments should be fetched and an onConsumer callback to notify of the received emails"}, {"ID": 905, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function downloadMissingGeoIpDb() { $this->dieIfGeolocationAdminIsDisabled(); Piwik::checkUserHasSuperUserAccess(); if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { try { $this->checkTokenInUrl(); Json::sendHeaderJSON(); // based on the database type (provided by the 'key' query param) determine the // url & output file name $key = Common::getRequestVar('key', null, 'string'); if ($this->isGeoIp2Enabled()) { $url = GeoIP2AutoUpdater::getConfiguredUrl($key); $ext = GeoIP2AutoUpdater::getGeoIPUrlExtension($url); $filename = GeoIp2::$dbNames[$key][0] . '.' . $ext; $outputPath = GeoIp2::getPathForGeoIpDatabase($filename); } else { $url = GeoIPAutoUpdater::getConfiguredUrl($key); $ext = GeoIPAutoUpdater::getGeoIPUrlExtension($url); $filename = GeoIp::$dbNames[$key][0] . '.' . $ext; if (substr($filename, 0, 15) == 'GeoLiteCity.dat') { $filename = 'GeoIPCity.dat' . substr($filename, 15); } $outputPath = GeoIp::getPathForGeoIpDatabase($filename); } // download part of the file $result = Http::downloadChunk( $url, $outputPath, Common::getRequestVar('continue', true, 'int')); // if the file is done if ($result['current_size'] >= $result['expected_file_size']) { if ($this->isGeoIp2Enabled()) { GeoIP2AutoUpdater::unzipDownloadedFile($outputPath, $key, $unlink = true); } else { GeoIPAutoUpdater::unzipDownloadedFile($outputPath, $unlink = true); } $info = $this->getNextMissingDbUrlInfo(); if ($info !== false) { return json_encode($info); } } return json_encode($result); } catch (Exception $ex) { return json_encode(array('error' => $ex->getMessage())); } } }\n\n    ### Response: Starts or continues a download for a missing GeoIP database. A database is missing if\nit has an update URL configured, but the actual database is not available in the misc\ndirectory.\n\nInput:\n'url' - The URL to download the database from.\n'continue' - 1 if we're continuing a download, 0 if we're starting one.\n\nOutput:\n'error' - If an error occurs this describes the error.\n'to_download' - The URL of a missing database that should be downloaded next (if any).\n'to_download_label' - The label to use w/ the progress bar that describes what we're\ndownloading.\n'current_size' - Size of the current file on disk.\n'expected_file_size' - Size of the completely downloaded file..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void updateEmailFlags(final ReceivedEmail receivedEmail) { useAndOpenFolderIfNotSet(); try { folder.setFlags(new int[] {receivedEmail.messageNumber()}, receivedEmail.flags(),true); } catch (MessagingException mex) { throw new MailException(\"Failed to fetch messages\", mex); } }\n\n    ### Response:", "ground_truth": "Updates the email flags on the server.", "predict": "Updates the flags of a received email message to the values provided by the receivedEmail argument."}, {"ID": 906, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ApiPlatform fromKeyToApiPlatform(int key) { if(keyToPlatform.get() == null) { Map<Integer, ApiPlatform> map = new HashMap<>(); for (ApiPlatform apiPlatform : ApiPlatform.values()) { map.put(apiPlatform.getKey(), apiPlatform); } keyToPlatform.set(Collections.unmodifiableMap(map)); } return keyToPlatform.get().get(key); }\n\n    ### Response: get the api platform given it's integer key value.\n@param key the platform key\n@return platform enum entry..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void closeFolderIfOpened(final Folder folder) { if (folder != null) { try { folder.close(true); } catch (final MessagingException ignore) { } } }\n\n    ### Response:", "ground_truth": "Closes folder if opened and expunge deleted messages.", "predict": "Closes the given folder, if it's been previously been opened, or ignores the exception in the case of a closed folder."}, {"ID": 907, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def mk_dir(self) : \"\"\"If this FSNode doesn't currently exist, then make a directory with this name.\"\"\" if not os.path.exists(self.abs) : os.makedirs(self.abs)\n\n    ### Response: If this FSNode doesn't currently exist, then make a directory with this name..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    DbQueryNamedParameter lookupNamedParameter(final String name) { DbQueryNamedParameter p = rootNP; while (p != null) { if (p.equalsName(name)) { return p; } p = p.next; } return null; }\n\n    ### Response:", "ground_truth": "Lookup for named parameter.", "predict": "The lookupNamedParameter() method looks up the parameter with the given name from the root and the child objects of the root and returns the parameter if found, otherwise returns null."}, {"ID": 908, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<String[]> getTabularData() throws OWLException, InterruptedException { if (tabularData == null) { tabularData = new ArrayList<>(); String[] columnName = results.getSignature().toArray(new String[numcols]); // Append the column names tabularData.add(columnName); while(this.isFetching){ Thread.sleep(10); } if(stopFetching) return null; // Append first the already fetched tuples tabularData.addAll(resultsTable); // Append the rest while (!stopFetching && results.hasNext()) { final OWLBindingSet bindingSet = results.next(); String[] crow = new String[numcols]; for (int j = 0; j < numcols; j++) { OWLPropertyAssertionObject constant = bindingSet.getOWLPropertyAssertionObject(j + 1); if (constant != null) { crow[j] = constant.toString(); } else { crow[j] = \"\"; } } tabularData.add(crow); } } return tabularData; }\n\n    ### Response: Fetch all the tuples returned by the result set..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String alias(final String target) { return StringPool.LEFT_CHEV.concat(target).concat(StringPool.RIGHT_CHEV); }\n\n    ### Response:", "ground_truth": "Creates alias.", "predict": "Pre-Parsing & Parsing of string"}, {"ID": 909, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (whisper *Whisper) Start(*p2p.Server) error { log.Info(\"started whisper v.\" + ProtocolVersionStr) go whisper.update() numCPU := runtime.NumCPU() for i := 0; i < numCPU; i++ { go whisper.processQueue() } return nil }\n\n    ### Response: // Start implements node.Service, starting the background data propagation thread\n// of the Whisper protocol..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected boolean validateAction(final String... profiles) { prepareValidator(); vtor.useProfiles(profiles); vtor.validate(this); vtor.resetProfiles(); List<Violation> violations = vtor.getViolations(); return violations == null; }\n\n    ### Response:", "ground_truth": "Validates action. Profiles are reset after the invocation.\n@return true if validation is successful, otherwise returns false", "predict": "// ValidateAction implements node.Validate, checking for validity of the given profiles\n// of the given action"}, {"ID": 910, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    boolean runResumeReadWrite() { boolean ret = false; if(anyAreSet(state, FLAG_SHOULD_RESUME_WRITES)) { responseChannel.runResume(); ret = true; } if(anyAreSet(state, FLAG_SHOULD_RESUME_READS)) { requestChannel.runResume(); ret = true; } return ret; }\n\n    ### Response: Actually resumes reads or writes, if the relevant method has been called.\n\n@return true if reads or writes were resumed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void addViolation(final String name, final Object invalidValue) { prepareValidator(); vtor.addViolation(new Violation(name, this, invalidValue)); }\n\n    ### Response:", "ground_truth": "Adds action violation.", "predict": "Prepares the validator and checks for violations of the specified name and invalidValue."}, {"ID": 911, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function create(callback) { /* jslint validthis: true */ for (var queue = this, args = [], info = { id: {}, fn: callback, ar: args }, i = 1; i < arguments.length; i++ ) args[i - 1] = arguments[i]; return infoId(queue, info) || (queue.push(info), info.id); }\n\n    ### Response: create a unique id and returns it if the callback with same extra arguments was already scheduled, then returns same id.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RawData as(final String mimeOrExtension) { if (mimeOrExtension.contains(StringPool.SLASH)) { this.mimeType = mimeOrExtension; } else { this.mimeType = MimeTypes.getMimeType(mimeOrExtension); } return this; }\n\n    ### Response:", "ground_truth": "Defines mime type by providing real mime type or just extension!", "predict": "This method generates the appropriate HTTP request based on the given arguments and returns the corresponding HTTP response"}, {"ID": 912, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function prepare(Mapper $mapper) { if ($this->isPrepared()) { throw new DataSetPreparationException('DataSet is already prepared'); } //Split each row of the dataSet into inputs and outputs based on the mapper and the policies //Then re-parse the dataSet to fill in all the fields that used special policies (like Avg) and create the instances $this->map($mapper)->createInstances(); //mark the dataSet as prepared $this->isPrepared = true; }\n\n    ### Response: Prepare data to be trained. MUST be called prior to any call\n@param Mapper $mapper Data Mapper\n@throws DataSetPreparationException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RawData downloadableAs(final String downloadFileName) { this.downloadFileName = downloadFileName; this.mimeType = MimeTypes.getMimeType(FileNameUtil.getExtension(downloadFileName)); return this; }\n\n    ### Response:", "ground_truth": "Defines download file name and mime type from the name extension.", "predict": "Download and convert data to downloadable format"}, {"ID": 913, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _integrate_mpwrap(ts_and_pks, integrate, fopts): \"\"\" Take a zipped timeseries and peaks found in it and integrate it to return peaks. Used to allow multiprocessing support. \"\"\" ts, tpks = ts_and_pks pks = integrate(ts, tpks, **fopts) # for p in pks: # p.info['mz'] = str(ts.name) return pks\n\n    ### Response: Take a zipped timeseries and peaks found in it\n    and integrate it to return peaks. Used to allow\n    multiprocessing support..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected T setTarget(final InputStream target) { assertTargetIsNotDefined(); targetInputStream = target; targetClass = null; targetClassName = null; return _this(); }\n\n    ### Response:", "ground_truth": "Defines class input stream as a target.", "predict": "\n    The method setTarget(InputStream target) sets the internal target for the Test instance to the given stream. It first checks if the given stream has been set to the internal target and, if not, sets the internal target to the given stream and saves its name and class to be able to retrieve it later for reporting purposes."}, {"ID": 914, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def div(a, b): \"\"\" Divide two values, ignoring None \"\"\" if a is None: if b is None: return None else: return 1 / b elif b is None: return a return a / b\n\n    ### Response: Divide two values, ignoring None.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected T setTarget(final String targetName) { assertTargetIsNotDefined(); try { targetInputStream = ClassLoaderUtil.getClassAsStream(targetName); if (targetInputStream == null) { throw new ProxettaException(\"Target class not found: \" + targetName); } targetClassName = targetName; targetClass = null; } catch (IOException ioex) { StreamUtil.close(targetInputStream); throw new ProxettaException(\"Unable to get stream class name: \" + targetName, ioex); } return _this(); }\n\n    ### Response:", "ground_truth": "Defines class name as a target.\nClass will not be loaded by classloader!", "predict": "Defines a method to set the target for the given proxy and verifies if the target has been defined or not. If the target has been defined, tries to retrieve its class name and its corresponding class object to be used in the later phases of the method invocation pipeline of the Proxy class of Spring Framework. If any of these verifications succeeds, the method returns the proxy object otherwise, it throws exception to notify the caller of the method of the error and to stop the further invocation of the method pipeline of the Proxy class of Spring Framework."}, {"ID": 915, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_label(self, lang=None): \"\"\" Return label for given lang or any default :param lang: Language to request :return: Label value :rtype: Literal \"\"\" x = None if lang is None: for obj in self.graph.objects(self.asNode(), RDFS.label): return obj for obj in self.graph.objects(self.asNode(), RDFS.label): x = obj if x.language == lang: return x return x\n\n    ### Response: Return label for given lang or any default\n\n        :param lang: Language to request\n        :return: Label value\n        :rtype: Literal.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T setTarget(final Class target) { assertTargetIsNotDefined(); try { targetInputStream = ClassLoaderUtil.getClassAsStream(target); if (targetInputStream == null) { throw new ProxettaException(\"Target class not found: \" + target.getName()); } targetClass = target; targetClassName = target.getName(); } catch (IOException ioex) { StreamUtil.close(targetInputStream); throw new ProxettaException(\"Unable to stream class: \" + target.getName(), ioex); } return _this(); }\n\n    ### Response:", "ground_truth": "Defines class as a target.", "predict": "\n    * Sets the target for the given proxy *\n    * If the targetClass cannot be found, or if the stream of its contents cannot be read, *\n    * an exception of type ProxettaException is raised *\n    * If the targetClass cannot be found, or if the stream of its contents cannot be read, *\n    * an exception of type ProxettaException is raised"}, {"ID": 916, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function filterByRoutename($routename = null, $comparison = null) { if (null === $comparison) { if (is_array($routename)) { $comparison = Criteria::IN; } } return $this->addUsingAlias(MxmapTableMap::COL_ROUTENAME, $routename, $comparison); }\n\n    ### Response: Filter the query on the routeName column\n\nExample usage:\n\n$query->filterByRoutename('fooValue');   // WHERE routeName = 'fooValue'\n$query->filterByRoutename('%fooValue%', Criteria::LIKE); // WHERE routeName LIKE '%fooValue%'\n\n\n@param     string $routename The value to use as filter.\n@param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL\n\n@return $this|ChildMxmapQuery The current query, for fluid interface.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void process() { if (targetInputStream == null) { throw new ProxettaException(\"Target missing: \" + targetClassName); } // create class reader final ClassReader classReader; try { classReader = new ClassReader(targetInputStream); } catch (IOException ioex) { throw new ProxettaException(\"Error reading class input stream\", ioex); } // reads information final TargetClassInfoReader targetClassInfoReader = new TargetClassInfoReader(proxetta.getClassLoader()); classReader.accept(targetClassInfoReader, 0); this.destClassWriter = new ClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES); // create proxy if (log.isDebugEnabled()) { log.debug(\"processing: \" + classReader.getClassName()); } WorkData wd = process(classReader, targetClassInfoReader); // store important data proxyApplied = wd.proxyApplied; proxyClassName = wd.thisReference.replace('/', '.'); }\n\n    ### Response:", "ground_truth": "Reads the target and creates destination class.", "predict": "The given method reads information about the given class and processes it to generate a proxy for it"}, {"ID": 917, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def model_sizes(m:nn.Module, size:tuple=(64,64))->Tuple[Sizes,Tensor,Hooks]: \"Pass a dummy input through the model `m` to get the various sizes of activations.\" with hook_outputs(m) as hooks: x = dummy_eval(m, size) return [o.stored.shape for o in hooks]\n\n    ### Response: Pass a dummy input through the model `m` to get the various sizes of activations..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public byte[] create() { process(); byte[] result = toByteArray(); dumpClassInDebugFolder(result); if ((!proxetta.isForced()) && (!isProxyApplied())) { if (log.isDebugEnabled()) { log.debug(\"Proxy not applied: \" + StringUtil.toSafeString(targetClassName)); } return null; } if (log.isDebugEnabled()) { log.debug(\"Proxy created \" + StringUtil.toSafeString(targetClassName)); } return result; }\n\n    ### Response:", "ground_truth": "Returns byte array of created class.", "predict": "Creates and applies the given Proxy to the given Class and writes its result to the given Output Byte Array. If Proxy wasn`t applied previously, dump the Class into debug folder and applies Proxy for debug purposes."}, {"ID": 918, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def update_tree(root, executed_acts, total_rew): \"\"\" Given the tree, a list of actions that were executed before the game ended, and a reward, update the tree so that the path formed by the executed actions are all updated to the new reward. \"\"\" root.value = max(total_rew, root.value) root.visits += 1 new_nodes = 0 node = root for step, act in enumerate(executed_acts): if act not in node.children: node.children[act] = Node() new_nodes += 1 node = node.children[act] node.value = max(total_rew, node.value) node.visits += 1 return new_nodes\n\n    ### Response: Given the tree, a list of actions that were executed before the game ended, and a reward, update the tree\n    so that the path formed by the executed actions are all updated to the new reward..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Class define() { process(); if ((!proxetta.isForced()) && (!isProxyApplied())) { if (log.isDebugEnabled()) { log.debug(\"Proxy not applied: \" + StringUtil.toSafeString(targetClassName)); } if (targetClass != null) { return targetClass; } if (targetClassName != null) { try { return ClassLoaderUtil.loadClass(targetClassName); } catch (ClassNotFoundException cnfex) { throw new ProxettaException(cnfex); } } } if (log.isDebugEnabled()) { log.debug(\"Proxy created: \" + StringUtil.toSafeString(targetClassName)); } try { ClassLoader classLoader = proxetta.getClassLoader(); if (classLoader == null) { classLoader = ClassLoaderUtil.getDefaultClassLoader(); if ((classLoader == null) && (targetClass != null)) { classLoader = targetClass.getClassLoader(); } } final byte[] bytes = toByteArray(); dumpClassInDebugFolder(bytes); return DefineClass.of(getProxyClassName(), bytes, classLoader); } catch (Exception ex) { throw new ProxettaException(\"Class definition failed\", ex); } }\n\n    ### Response:", "ground_truth": "Defines class.", "predict": "Defines a proxy for the given targetClass to intercept its method invocations and translate the invocations to the actual method invocations of the targetClass for processing"}, {"ID": 919, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def build_mock_open_side_effect(string_d, stream_d): \"\"\" Build a mock open side effect using a dictionary of content for the files. :param string_d: keys are file names, values are string file contents :param stream_d: keys are file names, values are stream of contents \"\"\" assert(len(set(string_d.keys()).intersection(set(stream_d.keys()))) == 0) def mock_open_side_effect(*args, **kwargs): if args[0] in string_d: return StringIO.StringIO(string_d[args[0]]) elif args[0] in stream_d: return stream_d[args[0]] else: raise IOError(\"No such file: \" + args[0]) return mock_open_side_effect\n\n    ### Response: Build a mock open side effect using a dictionary of content for the files.\n\n  :param string_d: keys are file names, values are string file contents\n  :param stream_d: keys are file names, values are stream of contents.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object newInstance() { Class type = define(); try { return ClassUtil.newInstance(type); } catch (Exception ex) { throw new ProxettaException(\"Invalid Proxetta class\", ex); } }\n\n    ### Response:", "ground_truth": "Creates new instance of created class.\nAssumes default no-arg constructor.", "predict": "Defines and creates an instance of an arbitrary class defined in an external jar file or on the filesystem."}, {"ID": 920, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function init($secret, $options = array()) { self::assert($secret, \"Segment::init() requires secret\"); self::$client = new Segment_Client($secret, $options); }\n\n    ### Response: Initializes the default client to use. Uses the libcurl consumer by default.\n@param  string $secret   your project's secret key\n@param  array  $options  passed straight to the client.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void dumpClassInDebugFolder(final byte[] bytes) { File debugFolder = proxetta.getDebugFolder(); if (debugFolder == null) { return; } if (!debugFolder.exists() || !debugFolder.isDirectory()) { log.warn(\"Invalid debug folder: \" + debugFolder); } String fileName = proxyClassName; if (fileName == null) { fileName = \"proxetta-\" + System.currentTimeMillis(); } fileName += \".class\"; File file = new File(debugFolder, fileName); try { FileUtil.writeBytes(file, bytes); } catch (IOException ioex) { log.warn(\"Error writing class as \" + file, ioex); } }\n\n    ### Response:", "ground_truth": "Writes created class content to output folder for debugging purposes.", "predict": "Dumps the given class into the given debug folder. If the given debug folder does not exist or does not exist as a directory, the method exits without writing anything to the given debug folder. If the given debug folder does exist and exists as a directory, the given class is written to a file with the given name and its name appended to the timestamp of the current system time to form an unique file name in the given debug folder."}, {"ID": 921, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def concat other_frames raise TypeError unless other_frames.kind_of?(Frames) # data this_data = Tempfile.new 'this', binmode: true self.frames_data_as_io this_data other_data = Tempfile.new 'other', binmode: true other_frames.frames_data_as_io other_data this_size = this_data.size other_data.rewind while d = other_data.read(BUFFER_SIZE) do this_data.print d end other_data.close! # meta other_meta = other_frames.meta.collect do |m| x = m.dup x[:offset] += this_size x end @meta.concat other_meta # close overwrite this_data this_data.close! self end\n\n    ### Response: Appends the frames in the other Frames into the tail of self.\n It is destructive like Array does..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T from(final String personalName, final String from) { return from(new EmailAddress(personalName, from)); }\n\n    ### Response:", "ground_truth": "Sets the FROM address by providing personal name and address.\n\n@param personalName personal name.\n@param from         email address.\n@return this\n@see #from(EmailAddress)", "predict": "Creates an EmailAddress from the given arguments and returns its representation of type T."}, {"ID": 922, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function display($id) { if (!$this->locking) { readfile($this->path . '/' . $id); return; } $fp = fopen($this->path . '/' . $id, 'rb'); flock($fp, LOCK_SH); fpassthru($fp); flock($fp, LOCK_UN); fclose($fp); }\n\n    ### Response: Send the cached content to output\n\n@param string $id cache id (e.g. a filename).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T to(final EmailAddress to) { this.to = ArraysUtil.append(this.to, to); return _this(); }\n\n    ### Response:", "ground_truth": "Appends TO address.\n\n@param to {@link EmailAddress} to add.\n@return this", "predict": "Append to the given to array"}, {"ID": 923, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *ListExportsOutput) SetExports(v []*Export) *ListExportsOutput { s.Exports = v return s }\n\n    ### Response: // SetExports sets the Exports field's value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T to(final String personalName, final String to) { return to(new EmailAddress(personalName, to)); }\n\n    ### Response:", "ground_truth": "Appends TO address by personal name and email address.\n\n@param personalName personal name.\n@param to           email address.\n@return this\n@see #to(EmailAddress)", "predict": "// to converts an email address from the given personalName to the given to .."}, {"ID": 924, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function generateOptions() { $generated = []; array_walk($this->options, function ($value, $key) use (&$generated) { $result = \"\"; switch ($key) { case \"singlePage\": $result = $value ? \"-c\" : \"-s\"; break; case \"imageJpeg\": $result = \"-fmt \".($value ? \"jpg\" : \"png\"); break; case \"zoom\": $result = \"-zoom \".$value; break; case \"ignoreImages\": $result = $value ? \"-i\" : \"\"; break; case 'noFrames': $result = $value ? '-noframes' : ''; break; } $generated[] = $result; }); return implode(\" \", $generated); }\n\n    ### Response: generate options based on the preserved options\n@return string options that will be passed on running the command.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T replyTo(final EmailAddress... replyTo) { this.replyTo = ArraysUtil.join(this.replyTo, valueOrEmptyArray(replyTo)); return _this(); }\n\n    ### Response:", "ground_truth": "Appends REPLY-TO addresses.\n\n@param replyTo vararg of {@link EmailAddress}es to set.\n@return this", "predict": "generates an email address string from the given arguments"}, {"ID": 925, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function aroundLockProductsStock( \\Magento\\CatalogInventory\\Model\\ResourceModel\\Stock $subject, \\Closure $proceed, $productIds, $stockId ) { if (empty($productIds)) { return []; } /** @var \\Magento\\Framework\\DB\\Adapter\\AdapterInterface $conn */ $conn = $subject->getConnection(); $itemTable = $subject->getTable('cataloginventory_stock_item'); $productTable = $subject->getTable('catalog_product_entity'); /** @var \\Magento\\Framework\\DB\\Select $select */ $select = $conn->select(); $select->from(['si' => $itemTable]); $select->join(['p' => $productTable], 'p.entity_id=si.product_id', ['type_id']); $select->where('product_id IN(?)', $productIds); $select->forUpdate(true); /* MOBI-375 add filter by $stockId */ $select->where('stock_id=?', $stockId); /* select data */ $result = $conn->fetchAll($select); return $result; }\n\n    ### Response: Filter locked items by stock ID.\n\n@param \\Magento\\CatalogInventory\\Model\\ResourceModel\\Stock $subject\n@param \\Closure $proceed\n@param int[] $productIds\n@param int $stockId defined in \\Praxigento\\Warehouse\\Plugin\\Magento\\CatalogInventory\\Model\\StockManagement::aroundRegisterProductsSale\n@return array found stock items data as an associative array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T cc(final EmailAddress... ccs) { this.cc = ArraysUtil.join(this.cc, valueOrEmptyArray(ccs)); return _this(); }\n\n    ### Response:", "ground_truth": "Appends CC addresses.\n\n@param ccs vararg of {@link EmailAddress}es to set.\n@return this", "predict": "Combine CC addresses given by arguments and add to CC array of email addresses of recipient."}, {"ID": 926, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public MatcherController add(Class<?> tableClassType, SubType subType, String pattern, int patternCode) { this.addTableClass(tableClassType); this.addMatcherPattern(subType, pattern, patternCode); return this; }\n\n    ### Response: Register a class for table. And registers a pattern for UriMatcher.\n@param tableClassType\nRegister a class for table.\n@param subType\nContents to be registered in the pattern, specify single or multiple. This is used\nin the MIME types. * ITEM : If the URI pattern is for a single row :\nvnd.android.cursor.item/ * DIRECTORY : If the URI pattern is for more than one row\n: vnd.android.cursor.dir/\n@param pattern\nregisters a pattern for UriMatcher. Note: Must not contain the name of path here.\nex) content://com.example.app.provider/table1 : pattern = \"\"\ncontent://com.example.app.provider/table1/# : pattern = \"#\"\ncontent://com.example.app.provider/table1/dataset2 : pattern = \"dataset2\"\n@param patternCode\nUriMatcher code is returned\n@return Instance of the MatcherController class..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T textMessage(final String text, final String encoding) { return message(new EmailMessage(text, MimeTypes.MIME_TEXT_PLAIN, encoding)); }\n\n    ### Response:", "ground_truth": "Adds plain message text.\n\n@param text     The text to add as a {@link String}.\n@param encoding The encoding as a {@link String}.\n@return this\n@see #message(EmailMessage)", "predict": "Convert given string to an email message with given encoding and deliver to the callback."}, {"ID": 927, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (code AggregateOpcode) MarshalJSON() ([]byte, error) { return ([]byte)(fmt.Sprintf(\"\\\"%s\\\"\", code.String())), nil }\n\n    ### Response: // MarshalJSON serializes the AggregateOpcode as a JSON string.\n// It's used for testing and diagnostics..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T htmlMessage(final String html, final String encoding) { return message(new EmailMessage(html, MimeTypes.MIME_TEXT_HTML, encoding)); }\n\n    ### Response:", "ground_truth": "Adds HTML message.\n\n@param html     The HTML to add as a {@link String}.\n@param encoding The encoding as a {@link String}.\n@return this\n@see #message(EmailMessage)", "predict": "// This method generates an email message with an HTML content from the given html string and encoding."}, {"ID": 928, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(statusChange, hasEffect, posIn, posOut) { var self = this, result = false; if (!h.isVisible(self.dom.container)) { // If the container is not visible, the transitionEnd // event will not occur and MixItUp will hang result = false; } else if ( (statusChange !== 'none' && hasEffect) || posIn.x !== posOut.x || posIn.y !== posOut.y ) { // If opacity and/or translate will change result = true; } else if (self.config.animation.animateResizeTargets) { // Check if width, height or margins will change result = ( posIn.width !== posOut.width || posIn.height !== posOut.height || posIn.marginRight !== posOut.marginRight || posIn.marginTop !== posOut.marginTop ); } else { result = false; } return self.callFilters('resultWillTransition', result, arguments); }\n\n    ### Response: Determines if a target element will transition in\nsome fasion and therefore requires binding of\ntransitionEnd\n\n@private\n@instance\n@since   3.0.0\n@param   {string}        statusChange\n@param   {boolean}       hasEffect\n@param   {StyleData}     posIn\n@param   {StyleData}     posOut\n@return  {boolean}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T header(final String name, final String value) { headers.put(name, value); return _this(); }\n\n    ### Response:", "ground_truth": "Sets header value.\n\n@param name  The name of the header.\n@param value The value of the header.\n@return this", "predict": "\n    Helper method to add header to the HTTP request\n    If the given header has been added to the cache previously\n    It'll be retrieved from there; otherwise its value should be set\n    To the given header for the given name"}, {"ID": 929, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (_class VMPPClass) SetArchiveTargetType(sessionID SessionRef, self VMPPRef, value VmppArchiveTargetType) (_err error) { _method := \"VMPP.set_archive_target_type\" _sessionIDArg, _err := convertSessionRefToXen(fmt.Sprintf(\"%s(%s)\", _method, \"session_id\"), sessionID) if _err != nil { return } _selfArg, _err := convertVMPPRefToXen(fmt.Sprintf(\"%s(%s)\", _method, \"self\"), self) if _err != nil { return } _valueArg, _err := convertEnumVmppArchiveTargetTypeToXen(fmt.Sprintf(\"%s(%s)\", _method, \"value\"), value) if _err != nil { return } _, _err = _class.client.APICall(_method, _sessionIDArg, _selfArg, _valueArg) return }\n\n    ### Response: // Set the value of the archive_target_config_type field.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String get(final String name, final String defaultValue) { Objects.requireNonNull(name); String value = null; try { if (System.getSecurityManager() == null) { value = System.getProperty(name); } else { value = AccessController.doPrivileged((PrivilegedAction<String>) () -> System.getProperty(name)); } } catch (Exception ignore) { } if (value == null) { return defaultValue; } return value; }\n\n    ### Response:", "ground_truth": "Returns system property. If key is not available, returns the default value.", "predict": "// Retrieves the value of the given system property or its default value if the property does not exist or cannot be retrieved\n\n    "}, {"ID": 930, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func DumpPrivateMetadata( codec kbfscodec.Codec, serializedPMDLength int, pmd PrivateMetadata) (string, error) { s := fmt.Sprintf(\"Size: %d bytes\\n\", serializedPMDLength) eq, err := kbfscodec.Equal(codec, pmd, PrivateMetadata{}) if err != nil { return \"\", err } if eq { s += \"<Undecryptable>\\n\" } else { c := kbfsmd.DumpConfig() // Hardcode the indent level, which depends on the // position of the Ops list. indent := strings.Repeat(c.Indent, 4) var pmdCopy PrivateMetadata kbfscodec.Update(codec, &pmdCopy, pmd) ops := pmdCopy.Changes.Ops for i, op := range ops { ops[i] = verboseOp{op, indent} } s += c.Sdump(pmdCopy) } return s, nil }\n\n    ### Response: // DumpPrivateMetadata returns a detailed dump of the given\n// PrivateMetadata's contents..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean getBoolean(final String name, final boolean defaultValue) { String value = get(name); if (value == null) { return defaultValue; } value = value.trim().toLowerCase(); switch (value) { case \"true\" : case \"yes\" : case \"1\" : case \"on\" : return true; case \"false\": case \"no\" : case \"0\" : case \"off\" : return false; default: return defaultValue; } }\n\n    ### Response:", "ground_truth": "Returns system property as boolean.", "predict": "// This method returns true or false, depending on\n// the given boolean parameter's value."}, {"ID": 931, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setHeaders() { $this->response->getHeaders()->addHeaders([ 'User-Agent' => 'BoltPay/Magento-'.$this->configHelper->getStoreVersion() . '/' . $this->configHelper->getModuleVersion(), 'X-Bolt-Plugin-Version' => $this->configHelper->getModuleVersion(), ]); }\n\n    ### Response: Set additional response headers.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long getInt(final String name, final int defaultValue) { String value = get(name); if (value == null) { return defaultValue; } value = value.trim().toLowerCase(); try { return Integer.parseInt(value); } catch (NumberFormatException nfex) { return defaultValue; } }\n\n    ### Response:", "ground_truth": "Returns system property as an int.", "predict": "Get int from given string or default int if given string is null, empty, or has invalid int values"}, {"ID": 932, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getJavascriptCallback() { $regex = $this->getConfig(); if ($pos = strpos($regex, 'u', strrpos($regex, '/'))) { $regex = substr($regex, 0, $pos) . substr($regex, $pos + 1); $regex = preg_replace('/(?<!\\\\\\\\)(?>\\\\\\\\\\\\\\\\)*\\\\\\\\x{([a-fA-F0-9]+)}/', '\\\\u$1', $regex); } return \"function() { var regex = {$regex}; var value = \" . $this->owner->getJavascriptValue() . \"; return value == '' || regex.test(value); }\"; }\n\n    ### Response: Returns the client-side validation callback\n\nFor this to work properly, slashes have to be used as regex delimiters.\nThe method takes care of transforming PHP unicode escapes in regexps to\nJS unicode escapes if using 'u' modifier (see bug #12376)\n\n@return   string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long getLong(final String name, final long defaultValue) { String value = get(name); if (value == null) { return defaultValue; } value = value.trim().toLowerCase(); try { return Long.parseLong(value); } catch (NumberFormatException nfex) { return defaultValue; } }\n\n    ### Response:", "ground_truth": "Returns system property as a long.", "predict": "Parses the given string to retrieve its corresponding Long value or the defaultValue if the corresponding string could not be parsed to Long."}, {"ID": 933, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function help() { echo PHP_EOL; $output = new Output; $output->write('Available Commands', [ 'color' => 'red', 'bold' => true, 'underline' => true, ]); echo PHP_EOL; $maxlen = 0; foreach ($this->supportedArgs as $key => $description) { $len = strlen($key); if ($len > $maxlen) { $maxlen = $len; } } foreach ($this->supportedArgs as $key => $description) { $len = strlen($key); $output->write(' ') ->write($key, ['color' => 'yellow']) ->write(str_repeat(' ', $maxlen - $len)) ->write(' - ') ->write($description); echo PHP_EOL; } echo PHP_EOL; }\n\n    ### Response: Outputs the help menu.\n\n@return PhpCli\\Parser Returns $this, for object-chaining..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    MethodParameter[] getResolvedParameters() { if (paramExtractor == null) { return MethodParameter.EMPTY_ARRAY; } if (!paramExtractor.debugInfoPresent) { throw new ParamoException(\"Parameter names not available for method: \" + declaringClass.getName() + '#' + methodName); } return paramExtractor.getMethodParameters(); }\n\n    ### Response:", "ground_truth": "Returns method parameters once when method is parsed.\nIf method has no parameters, an empty array is returned.", "predict": "Returns the resolved parameter names of the given method, or an empty array if parameter names could not be retrieved for the given method."}, {"ID": 934, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def find_component_tarball(bucket, comp_name, comp_config): \"\"\" Returns True if the component tarball is found in the bucket. Otherwise, returns False. \"\"\" values = { 'name': comp_name, 'version': comp_config['version'], 'platform': comp_config['platform'], } template = comp_config.get('archive_template') if template: key_name = template % values else: key_name = '%(name)s/%(name)s-%(version)s.tar.gz' % values if not bucket.get_key(key_name): log.error('%s not found' % key_name) return False return True\n\n    ### Response: Returns True if the component tarball is found in the bucket.\n\n    Otherwise, returns False..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected int serializeKeyValue(final JsonContext jsonContext, final Path currentPath, final Object key, final Object value, int count) { if ((value == null) && jsonContext.isExcludeNulls()) { return count; } if (key != null) { currentPath.push(key.toString()); } else { currentPath.push(StringPool.NULL); } // check if we should include the field boolean include = true; if (value != null) { // + all collections are not serialized by default include = jsonContext.matchIgnoredPropertyTypes(value.getClass(), false, include); // + path queries: excludes/includes include = jsonContext.matchPathToQueries(include); } // done if (!include) { currentPath.pop(); return count; } if (key == null) { jsonContext.pushName(null, count > 0); } else { jsonContext.pushName(key.toString(), count > 0); } jsonContext.serialize(value); if (jsonContext.isNamePopped()) { count++; } currentPath.pop(); return count; }\n\n    ### Response:", "ground_truth": "Serializes key and a value.", "predict": "Serialize the given JsonContext to the given path and values and optionally to the given count and ignoring null values and path queries"}, {"ID": 935, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static function attachUserList( AdWordsServices $adWordsServices, AdWordsSession $session, AdGroup $adGroup, $userListId ) { $adGroupCriterionService = $adWordsServices->get($session, AdGroupCriterionService::class); // Creates criterion user list. $userList = new CriterionUserList(); $userList->setUserListId($userListId); // Creates ad group criterion. $adGroupCriterion = new BiddableAdGroupCriterion(); $adGroupCriterion->setCriterion($userList); $adGroupCriterion->setAdGroupId($adGroup->getId()); // Creates operation. $adGroupCriterionOperation = new AdGroupCriterionOperation(); $adGroupCriterionOperation->setOperand($adGroupCriterion); $adGroupCriterionOperation->setOperator(Operator::ADD); // Makes the mutate request. $adGroupCriterionAddResult = $adGroupCriterionService->mutate([$adGroupCriterionOperation]); $adGroupCriterion = $adGroupCriterionAddResult->getValue()[0]; return $adGroupCriterion; }\n\n    ### Response: Attaches a user list to an ad group. The user list provides positive\ntargeting and feed information to drive the dynamic content of the ad.\n\nNote: User lists are only supported at the ad group level for\npositive targeting in dynamic remarketing campaigns.\n\n@param AdWordsServices $adWordsServices the AdWords services\n@param AdWordsSession $session the AdWords session\n@param AdGroup $adGroup the ad group to attach the user list used for\ndynamic feed content\n@param int $userListId the user list ID to use for targeting and dynamic\ncontent.\n@return BiddableAdGroupCriterion the attached ad group criterion.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String lookupAlias(final String alias) { String value = actionsManager.lookupPathAlias(alias); if (value == null) { ActionRuntime cfg = actionsManager.lookup(alias); if (cfg != null) { value = cfg.getActionPath(); } } return value; }\n\n    ### Response:", "ground_truth": "Lookups value as an alias and, if not found, as a default alias.", "predict": "Lookup an alias to its corresponding path or its Value object\n\nNote: If an alias cannot be found in the path hierarchy, the Value objects of the corresponding resource may be accessed by passing the alias to the Value objects directly."}, {"ID": 936, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func transformPaymentStellar(mctx libkb.MetaContext, acctID stellar1.AccountID, p stellar1.PaymentSummaryStellar, oc OwnAccountLookupCache) (*stellar1.PaymentLocal, error) { loc, err := newPaymentLocal(mctx, p.TxID, p.Ctime, p.Amount, p.Asset) if err != nil { return nil, err } isSender := p.From.Eq(acctID) isRecipient := p.To.Eq(acctID) switch { case isSender && isRecipient: loc.Delta = stellar1.BalanceDelta_NONE case isSender: loc.Delta = stellar1.BalanceDelta_DECREASE case isRecipient: loc.Delta = stellar1.BalanceDelta_INCREASE } loc.FromAccountID = p.From loc.FromType = stellar1.ParticipantType_STELLAR loc.ToAccountID = &p.To loc.ToType = stellar1.ParticipantType_STELLAR fillOwnAccounts(mctx, loc, oc) loc.StatusSimplified = stellar1.PaymentStatus_COMPLETED loc.StatusDescription = strings.ToLower(loc.StatusSimplified.String()) loc.Unread = p.Unread loc.IsInflation = p.IsInflation loc.InflationSource = p.InflationSource return loc, nil }\n\n    ### Response: // transformPaymentStellar converts a stellar1.PaymentSummaryStellar into a stellar1.PaymentLocal..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String resolveAlias(final String value) { final StringBuilder result = new StringBuilder(value.length()); int i = 0; int len = value.length(); while (i < len) { int ndx = value.indexOf('<', i); if (ndx == -1) { // alias markers not found if (i == 0) { // try whole string as an alias String alias = lookupAlias(value); return (alias != null ? alias : value); } else { result.append(value.substring(i)); } break; } // alias marked found result.append(value.substring(i, ndx)); ndx++; int ndx2 = value.indexOf('>', ndx); String aliasName = (ndx2 == -1 ? value.substring(ndx) : value.substring(ndx, ndx2)); // process alias String alias = lookupAlias(aliasName); if (alias != null) { result.append(alias); } else { // alias not found if (log.isWarnEnabled()) { log.warn(\"Alias not found: \" + aliasName); } } i = ndx2 + 1; } // fix prefix '//' - may happened when aliases are used i = 0; len = result.length(); while (i < len) { if (result.charAt(i) != '/') { break; } i++; } if (i > 1) { return result.substring(i - 1, len); } return result.toString(); }\n\n    ### Response:", "ground_truth": "Returns resolved alias result value or passed on, if alias doesn't exist.", "predict": "The resolveAlias method resolves an alias string (which may contain an expression involving other aliases and substitution values) to its corresponding string or to an empty string if no corresponding string is found."}, {"ID": 937, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _apply_scope(self, config, tags): \"\"\"Add locally scoped tags to config\"\"\" if isinstance(config, dict): # Recursively _apply_scope for each item in the config for val in config.values(): self._apply_scope(val, tags) elif isinstance(config, list): # Recursively _apply_scope for each item in the config for item in config: self._apply_scope(item, tags) elif isinstance(config, TaggedValue): tagged_value = config # add all local tags tagged_value.tags |= set(tags) for tag in tags: if not hasattr(tagged_value, tag): setattr(tagged_value, tag, False)\n\n    ### Response: Add locally scoped tags to config.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ResultPath resolveResultPath(String path, String value) { boolean absolutePath = false; if (value != null) { // [*] resolve alias in value value = resolveAlias(value); // [*] absolute paths if (StringUtil.startsWithChar(value, '/')) { absolutePath = true; int dotNdx = value.indexOf(\"..\"); if (dotNdx != -1) { path = value.substring(0, dotNdx); value = value.substring(dotNdx + 2); } else { path = value; value = null; } } else { // [*] resolve # in value and path int i = 0; while (i < value.length()) { if (value.charAt(i) != '#') { break; } int dotNdx = MadvocUtil.lastIndexOfSlashDot(path); if (dotNdx != -1) { // dot found path = path.substring(0, dotNdx); } i++; } if (i > 0) { // remove # from value value = value.substring(i); // [*] update path and value if (StringUtil.startsWithChar(value, '.')) { value = value.substring(1); } else { int dotNdx = value.indexOf(\"..\"); if (dotNdx != -1) { path += '.' + value.substring(0, dotNdx); value = value.substring(dotNdx + 2); } else { if (value.length() > 0) { if (StringUtil.endsWithChar(path, '/')) { path += value; } else { path += '.' + value; } } value = null; } } } } } if (!absolutePath) { if (resultPathPrefix != null) { path = resultPathPrefix + path; } } return new ResultPath(path, value); }\n\n    ### Response:", "ground_truth": "Resolves result path.", "predict": "Resolve ResultPath"}, {"ID": 938, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getDownStub() { switch($this->action) { case 'add': case 'insert': // then we to remove columns in reverse $downMethod = $this->file->get(__DIR__ . '/templates/migration/migration-down.txt'); $fields = $this->fields ? $this->setFields('dropColumn') : ''; break; case 'remove': case 'drop': case 'delete': // then we need to add the columns in reverse $downMethod = $this->file->get(__DIR__ . '/templates/migration/migration-down.txt'); $fields = $this->fields ? $this->setFields('addColumn') : ''; break; case 'destroy': // then we need to create the table in reverse $downMethod = $this->file->get(__DIR__ . '/templates/migration/migration-down-create.txt'); $fields = $this->fields ? $this->setFields('addColumn') : ''; break; case 'create': case 'make': default: // then we need to drop the table in reverse $downMethod = $this->file->get(__DIR__ . '/templates/migration/migration-down-drop.txt'); $fields = $this->fields ? $this->setFields('dropColumn') : ''; break; } // Replace the tableName in the template $downMethod = str_replace('{{tableName}}', $this->tableName, $downMethod); // Insert the schema into the down method return str_replace('{{methods}}', $fields, $downMethod); }\n\n    ### Response: Grab down method stub and replace template vars\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String resolveResultPathString(final String path, final String value) { final ResultPath resultPath = resolveResultPath(path, value); final String result = resultPath.pathValue(); return resolveAlias(result); }\n\n    ### Response:", "ground_truth": "Resolves result path as a string, when parts are not important\nand when only full string matters. Additional alias resolving\non full path is done.", "predict": "Resolves ResultPath given by the parameter and returns corresponding ResultPath Value and Result string"}, {"ID": 939, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def kwargstr(self): '''Concatenate keyword arguments into a string.''' temp = [' [--' + k + (' ' + str(v) if v is not False else '') + ']' for k, v in self.defaults.items()] return ''.join(temp)\n\n    ### Response: Concatenate keyword arguments into a string..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int lastIndexOfSlashDot(final String str) { int slashNdx = str.lastIndexOf('/'); int dotNdx = StringUtil.lastIndexOf(str, '.', str.length(), slashNdx); if (dotNdx == -1) { if (slashNdx == -1) { return -1; } slashNdx++; if (slashNdx < str.length() - 1) { dotNdx = slashNdx; } else { dotNdx = -1; } } return dotNdx; }\n\n    ### Response:", "ground_truth": "Locates last dot after the last slash or just slash.", "predict": "The function lastIndexOfSlashDot takes in a string argument and returns the index of the last occurrence of slash ('/') and the last occurrence of dot ('.'). It first looks for the occurrence of slash and then of dot, to see if there is a leading or trailing slash, and if there is, sets the corresponding indices to -1 to indicate that there is no leading or trailing slash and hence the string does not contains any slash and dots respectively. Finally, it returns the corresponding indices plus 1, which indicates that the returned indices are inclusive of the corresponding slash and dots, but not of the leading and trailing slash and dots respectively, to get the absolute indices of these dots and slashes in the string.<P>This function makes use of the fact that, slash and dots (and any other character for that sake) are case sensitive in regular expressions, so these dots and slashes cannot appear to the left or to the right of the string and hence these indices -1 and -1 are used to indicate"}, {"ID": 940, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c Client) abortMultipartUpload(ctx context.Context, bucketName, objectName, uploadID string) error { // Input validation. if err := s3utils.CheckValidBucketName(bucketName); err != nil { return err } if err := s3utils.CheckValidObjectName(objectName); err != nil { return err } // Initialize url queries. urlValues := make(url.Values) urlValues.Set(\"uploadId\", uploadID) // Execute DELETE on multipart upload. resp, err := c.executeMethod(ctx, \"DELETE\", requestMetadata{ bucketName: bucketName, objectName: objectName, queryValues: urlValues, contentSHA256Hex: emptySHA256Hex, }) defer closeResponse(resp) if err != nil { return err } if resp != nil { if resp.StatusCode != http.StatusNoContent { // Abort has no response body, handle it for any errors. var errorResponse ErrorResponse switch resp.StatusCode { case http.StatusNotFound: // This is needed specifically for abort and it cannot // be converged into default case. errorResponse = ErrorResponse{ Code: \"NoSuchUpload\", Message: \"The specified multipart upload does not exist.\", BucketName: bucketName, Key: objectName, RequestID: resp.Header.Get(\"x-amz-request-id\"), HostID: resp.Header.Get(\"x-amz-id-2\"), Region: resp.Header.Get(\"x-amz-bucket-region\"), } default: return httpRespToErrorResponse(resp, bucketName, objectName) } return errorResponse } } return nil }\n\n    ### Response: // abortMultipartUpload aborts a multipart upload for the given\n// uploadID, all previously uploaded parts are deleted..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int lastIndexOfDotAfterSlash(final String str) { int slashNdx = str.lastIndexOf('/'); slashNdx++; return StringUtil.lastIndexOf(str, '.', str.length(), slashNdx); }\n\n    ### Response:", "ground_truth": "Locates last index of dot after the optional last slash.", "predict": "// This function returns int which contains the position of first '.', after slash, in the given url string."}, {"ID": 941, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function vignette($amount = 20, $background = 'white', $blurmode = 'gaussian') { $options = [ 'a' => $amount, 'b' => $background, 'm' => $blurmode ]; // call TransformationMixin function $this->setTransformUrl('vignette', $options); return $this; }\n\n    ### Response: Set this Filelink's transform_url to include the vignette task\n\n@param int       $amount         The opacity of the vignette effect (0-100)\n@param string    $background     Sets the background color to display behind\nthe image. This can be the word for a color,\nor the hex color code, e.g. ('red' or 'FF0000')\n@param string    $blurmode       linear or gaussian\nControls the type of blur applied to the\nvignette - linear or gaussian. The vignette\neffect uses gaussian blur by default because\nit produces a more defined vignette around\nthe image. Specifying linear is faster,\nbut produces a less-defined blur effect,\neven at higher amounts.\n\n@throws FilestackException   if API call fails, e.g 404 file not found\n\n@return Filestack/Filelink.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int indexOfDotAfterSlash(final String str) { int slashNdx = str.lastIndexOf('/'); if (slashNdx == -1) { slashNdx = 0; } return str.indexOf('.', slashNdx); }\n\n    ### Response:", "ground_truth": "Locates first dot after the last slash.", "predict": "Locate the first dot after slash, inclusive of slash, in the given string\n\n// This function locates the first dot after slash, inclusive of slash, in the given string\nint Filestack/Filelink.indexOfDotAfterSlash(String str) {\n int slashNdx = str.lastIndexOf('/');\n int dpSepSgn = str.indexOf('.', slashNdx);\n return dpSepSgn;\n};"}, {"ID": 942, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def checksum(path): \"\"\"Calculcate checksum for a file.\"\"\" hasher = hashlib.sha1() with open(path, 'rb') as stream: buf = stream.read(BLOCKSIZE) while len(buf) > 0: hasher.update(buf) buf = stream.read(BLOCKSIZE) return hasher.hexdigest()\n\n    ### Response: Calculcate checksum for a file..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String stripLastCamelWord(String name) { int ndx = name.length() - 1; while (ndx >= 0) { if (CharUtil.isUppercaseAlpha(name.charAt(ndx))) { break; } ndx--; } if (ndx >= 0) { name = name.substring(0, ndx); } return name; }\n\n    ### Response:", "ground_truth": "Removes last CamelWord", "predict": "Strip the last camel word from the given string.."}, {"ID": 943, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func parseUserFromCode(code string) (user *User) { if len(code) <= tool.TIME_LIMIT_CODE_LENGTH { return nil } // Use tail hex username to query user hexStr := code[tool.TIME_LIMIT_CODE_LENGTH:] if b, err := hex.DecodeString(hexStr); err == nil { if user, err = GetUserByName(string(b)); user != nil { return user } else if !errors.IsUserNotExist(err) { log.Error(2, \"GetUserByName: %v\", err) } } return nil }\n\n    ### Response: // parseUserFromCode returns user by username encoded in code.\n// It returns nil if code or username is invalid..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String resolveSchemaName(final Class<?> type, final String defaultSchemaName) { String schemaName = null; final DbTable dbTable = type.getAnnotation(DbTable.class); if (dbTable != null) { schemaName = dbTable.schema().trim(); } if ((schemaName == null) || (schemaName.length() == 0)) { schemaName = defaultSchemaName; } return schemaName; }\n\n    ### Response:", "ground_truth": "Resolves schema name from a type. Uses default schema name if not specified.", "predict": "// Resolves schema name from the given dbTable annotation or defaultSCHEMANAME if annotation is missing or empty"}, {"ID": 944, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function generateForm(array $data) { /** @var Form $form */ $form = new $this->formClass; if (array_key_exists('attributes', $data)) { $form->setAttributes($data['attributes']); } if (array_key_exists('content', $data)) { $content = $this->generate($data['content']); $form->setContents($content); } return $form; }\n\n    ### Response: Attempts to generate a form from the given\n\n@param array $data\n\n@return Form\n\n@since 2.0.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static DbEntityColumnDescriptor resolveColumnDescriptors( final DbEntityDescriptor dbEntityDescriptor, final PropertyDescriptor property, final boolean isAnnotated, final ColumnNamingStrategy columnNamingStrategy) { String columnName = null; boolean isId = false; Class<? extends SqlType> sqlTypeClass = null; // read ID annotation DbId dbId = null; if (property.getFieldDescriptor() != null) { dbId = property.getFieldDescriptor().getField().getAnnotation(DbId.class); } if (dbId == null && property.getReadMethodDescriptor() != null) { dbId = property.getReadMethodDescriptor().getMethod().getAnnotation(DbId.class); } if (dbId == null && property.getWriteMethodDescriptor() != null) { dbId = property.getWriteMethodDescriptor().getMethod().getAnnotation(DbId.class); } if (dbId != null) { columnName = dbId.value().trim(); sqlTypeClass = dbId.sqlType(); isId = true; } else { DbColumn dbColumn = null; if (property.getFieldDescriptor() != null) { dbColumn = property.getFieldDescriptor().getField().getAnnotation(DbColumn.class); } if (dbColumn == null && property.getReadMethodDescriptor() != null) { dbColumn = property.getReadMethodDescriptor().getMethod().getAnnotation(DbColumn.class); } if (dbColumn == null && property.getWriteMethodDescriptor() != null) { dbColumn = property.getWriteMethodDescriptor().getMethod().getAnnotation(DbColumn.class); } if (dbColumn != null) { columnName = dbColumn.value().trim(); sqlTypeClass = dbColumn.sqlType(); } else { if (isAnnotated) { return null; } } } if (StringUtil.isEmpty(columnName)) { // default annotation value columnName = columnNamingStrategy.convertPropertyNameToColumnName(property.getName()); } else { if (!columnNamingStrategy.isStrictAnnotationNames()) { columnName = columnNamingStrategy.applyToColumnName(columnName); } } if (sqlTypeClass == SqlType.class) { sqlTypeClass = null; } return new DbEntityColumnDescriptor( dbEntityDescriptor, quoteIfRequired(columnName, columnNamingStrategy.isAlwaysQuoteNames(), columnNamingStrategy.getQuoteChar()), property.getName(), property.getType(), isId, sqlTypeClass); }\n\n    ### Response:", "ground_truth": "Resolves column descriptor from property. If property is annotated value will be read\nfrom annotation. If property is not annotated, then property will be ignored\nif entity is annotated. Otherwise, column name is generated from the property name.", "predict": "Resolves the DB column names of the given entity and\n\nproperty and applies the given naming convention to them"}, {"ID": 945, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func newPlanner(s *Server) (*planner, error) { // Create a plan queue planQueue, err := NewPlanQueue() if err != nil { return nil, err } return &planner{ Server: s, log: s.logger.Named(\"planner\"), planQueue: planQueue, }, nil }\n\n    ### Response: // newPlanner returns a new planner to be used for managing allocation plans..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void init(final long[] key, final long[] tweak) { final int newNw = key.length; // only create new arrays if the value of N{w} changes (different key size) if (nw != newNw) { nw = newNw; switch (nw) { case WORDS_4: pi = PI4; rpi = RPI4; r = R4; break; case WORDS_8: pi = PI8; rpi = RPI8; r = R8; break; case WORDS_16: pi = PI16; rpi = RPI16; r = R16; break; default: throw new RuntimeException(\"Invalid threefish key\"); } this.k = new long[nw + 1]; // instantiation of these fields here for performance reasons vd = new long[nw]; // v is the intermediate value v{d} at round d ed = new long[nw]; // ed is the value of e{d} at round d fd = new long[nw]; // fd is the value of f{d} at round d ksd = new long[nw]; // ksd is the value of k{s} at round d } System.arraycopy(key, 0, this.k, 0, key.length); long knw = EXTENDED_KEY_SCHEDULE_CONST; for (int i = 0; i < nw; i++) { knw ^= this.k[i]; } this.k[nw] = knw; // set tweak values t[0] = tweak[0]; t[1] = tweak[1]; t[2] = t[0] ^ t[1]; }\n\n    ### Response:", "ground_truth": "Initialize the cipher using the key and the tweak value.\n\n@param key the Threefish key to use\n@param tweak the tweak values to use", "predict": "// Initialize the given threefish keys and tweaks and prepare for computation\n\n    "}, {"ID": 946, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function tryAddingExtensions(candidate, extensions, failedLookupLocation, onlyRecordFailures, state) { if (!onlyRecordFailures) { // check if containing folder exists - if it doesn't then just record failures for all supported extensions without disk probing var directory = ts.getDirectoryPath(candidate); if (directory) { onlyRecordFailures = !directoryProbablyExists(directory, state.host); } } return ts.forEach(extensions, function (ext) { return !(state.skipTsx && ts.isJsxOrTsxExtension(ext)) && tryFile(candidate + ext, failedLookupLocation, onlyRecordFailures, state); }); }\n\n    ### Response: Try to return an existing file that adds one of the `extensions` to `candidate`..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void mix(final int j, final int d) { y[0] = x[0] + x[1]; final long rotl = r[d % DEPTH_OF_D_IN_R][j]; // java left rotation for a long y[1] = (x[1] << rotl) | (x[1] >>> (Long.SIZE - rotl)); y[1] ^= y[0]; }\n\n    ### Response:", "ground_truth": "Implementation of the MIX function.\n\n@param j the index in the rotation constants\n@param d the round", "predict": "Rotates values in the given variables and stores the results in other variables"}, {"ID": 947, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function toString($str = '') { $str .= \"<{$this->name} xmlns='{$this->ns}' \"; foreach ($this->attrs as $key => $value) { if ($key !== 'xmlns') { $value = htmlspecialchars($value); $str .= \"$key='$value' \"; } } $str .= \">\"; foreach ($this->subs as $sub) { $str .= $sub->toString(); } $body = htmlspecialchars($this->data); $str .= \"$body</{$this->name}>\"; return $str; }\n\n    ### Response: Return this XML Object in xml notation\n\n@param string $str.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void demix(final int j, final int d) { y[1] ^= y[0]; final long rotr = r[d % DEPTH_OF_D_IN_R][j]; // NOTE performance: darn, creation on stack! // right shift x[1] = (y[1] << (Long.SIZE - rotr)) | (y[1] >>> rotr); x[0] = y[0] - x[1]; }\n\n    ### Response:", "ground_truth": "Implementation of the un-MIX function.", "predict": "Rotate an unsigned long left d times and add an unsigned int to an unsigned int and store the result in x and y"}, {"ID": 948, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getWorkflowStatesForLayout(Layout $layout) { $states = array(); foreach ($this->findBy(array('_layout' => null)) as $state) { $states[$state->getCode()] = $state; } foreach ($this->findBy(array('_layout' => $layout)) as $state) { $states[$state->getCode()] = $state; } ksort($states); return $states; }\n\n    ### Response: Returns an array of available workflow states for the provided layout.\n\n@param \\BackBee\\Site\\Layout $layout\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void keySchedule(final int s) { for (int i = 0; i < nw; i++) { // just put in the main key first ksd[i] = k[(s + i) % (nw + 1)]; // don't add anything for i = 0,...,Nw - 4 if (i == nw - 3) { // second to last ksd[i] += t[s % TWEAK_VALUES]; } else if (i == nw - 2) { // first to last ksd[i] += t[(s + 1) % TWEAK_VALUES]; } else if (i == nw - 1) { // last ksd[i] += s; } } }\n\n    ### Response:", "ground_truth": "Creates the subkeys.\n\n@param s the value of the round devided by 4", "predict": "Precomputes and stores intermediate values for later reuse to reduce computation time for given S and NW"}, {"ID": 949, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(curve, location) { var cc = _getCurveFunctions(curve.length - 1), _x = 0, _y = 0; for (var i = 0; i < curve.length ; i++) { _x = _x + (curve[i].x * cc[i](location)); _y = _y + (curve[i].y * cc[i](location)); } return {x:_x, y:_y}; }\n\n    ### Response: calculates a point on the curve, for a Bezier of arbitrary order.\n@param curve an array of control points, eg [{x:10,y:20}, {x:50,y:50}, {x:100,y:100}, {x:120,y:100}].  For a cubic bezier this should have four points.\n@param location a decimal indicating the distance along the curve the point should be located at.  this is the distance along the curve as it travels, taking the way it bends into account.  should be a number from 0 to 1, inclusive..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void init(final String keyMessage, final long tweak1, final long tweak2) { long[] tweak = new long[] {tweak1, tweak2}; byte[] key = new byte[blockSize / Byte.SIZE]; byte[] keyData = StringUtil.getBytes(keyMessage); System.arraycopy(keyData, 0, key, 0, key.length < keyData.length ? key.length : keyData.length); init(bytesToLongs(key), tweak); }\n\n    ### Response:", "ground_truth": "Initializes cipher in a simple way.", "predict": "generates an initialization vector for an asymmetric key"}, {"ID": 950, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (mr *MockServerInfoSourceMockRecorder) AgentMetadata(arg0 interface{}) *gomock.Call { return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"AgentMetadata\", reflect.TypeOf((*MockServerInfoSource)(nil).AgentMetadata), arg0) }\n\n    ### Response: // AgentMetadata indicates an expected call of AgentMetadata.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public byte[] encryptBlock(final byte[] content, final int offset) { long[] contentBlock = bytesToLongs(content, offset, blockSizeInBytes); long[] encryptedBlock = new long[blockSize / Long.SIZE]; blockEncrypt(contentBlock, encryptedBlock); return longsToBytes(encryptedBlock); }\n\n    ### Response:", "ground_truth": "Encrypts a block.", "predict": "// Override indicates an overriding behavior of another method, encryptedBlock indicates encrypted blocks of given length, bytesToLong and longsToBytes indicate corresponding type conversions of given bytes to corresponding values of given type, BlockEncrypt indicates corresponding algorithm for given blocks of bytes to encrypted blocks of given length, BlockSize indicates corresponding size of given blocks of bytes in bytes, BlockOffset indicates corresponding position of given blocks of bytes in given bytes, Finally, Bytes indicates given bytes to be encrypted and Block indicates given blocks of bytes to be encrypted"}, {"ID": 951, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func wait(pid int, rusage *syscall.Rusage) (int, *syscall.WaitStatus, error) { var status syscall.WaitStatus var siginfo [128]byte // If we can block until Wait4 will succeed immediately, do so. psig := &siginfo[0] _, _, e := syscall.Syscall6(syscall.SYS_WAITID, 1, uintptr(pid), uintptr(unsafe.Pointer(psig)), syscall.WEXITED|syscall.WNOWAIT, 0, 0) // psig may be garbage collected before // syscall, KeepAlive make it alive util // sysacll return. runtime.KeepAlive(psig) if e != 0 { if e != syscall.ENOSYS { return 0, nil, os.NewSyscallError(\"waitid\", e) } } wpid, err := syscall.Wait4(pid, &status, 0, rusage) // for rusage collect if err != nil { return 0, nil, err } return wpid, &status, err }\n\n    ### Response: // workaround use this wait will not get exit status 3 error..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static long[] bytesToLongs(final byte[] ba, final int offset, final int size) { long[] result = new long[size >> 3]; int i8 = offset; for (int i = 0; i < result.length; i++) { result[i] = Bits.getLong(ba, i8); i8 += 8; } return result; }\n\n    ### Response:", "ground_truth": "Converts segment of byte array into long array.", "predict": "// convert given bytes to corresponding int values and concatenate to // create int arrays"}, {"ID": 952, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *CloudPersister) GetUser(id int64) (*models.User, error) { ctx := context.Background() k := datastore.NewKey(ctx, \"User\", \"\", id, nil) User := &models.User{} if err := c.DatastoreClient().Get(ctx, k, User); err != nil { return nil, fmt.Errorf(\"datastoredb: could not get User: %v\", err) } User.ID = id return User, nil }\n\n    ### Response: // GetUser retrieves a User by its ID..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static String removeAnyBounding(final char s, final char e, final String str) { if (str == null || str.length() < 2) { return str; } if (str.startsWith(String.valueOf(s)) && str.endsWith(String.valueOf(e))) { return str.substring(1, str.length() - 1); } return str; }\n\n    ### Response:", "ground_truth": "If the string starts and ends with start and end char, remove them,\notherwise return the string as it was passed in.", "predict": "// This function removes any leading and ending characters of the string s to e (inclusive), from the string str."}, {"ID": 953, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewStream(preAuth RequestStream, processor Processor, postAuth ResultStream) Stream { if processor == nil { processor = newMemoryProcessor() } if preAuth != nil { linkRequest(preAuth, processor) } if postAuth != nil { linkResult(processor, postAuth) linkResult(postAuth, terminator{}) } else { linkResult(processor, terminator{}) } if preAuth != nil { return newStreamHead(preAuth) } return newStreamHead(processor) }\n\n    ### Response: // NewStream creates an auth processor and connect the Result output\n// into the provided ResultStream's and returns a terminated Stream\n// that will return the Result of a Request back to the Requestor..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String path() { if (methref != null) { final String methodName = methref.ref(); return target.getName() + '#' + methodName; } return path; }\n\n    ### Response:", "ground_truth": "Returns path value.", "predict": "// This method returns the full path of the method, including its name\n    // It looks up the name of the method in the target object and\n    // concatenates it to the path of this method to form the full path\n    // of this method to the target objects"}, {"ID": 954, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void connectAndLogin() throws IOException { if (!ftpClient.isConnected()) { ftpClient.connect(getEndpointConfiguration().getHost(), getEndpointConfiguration().getPort()); if (log.isDebugEnabled()) { log.debug(\"Connected to FTP server: \" + ftpClient.getReplyString()); } int reply = ftpClient.getReplyCode(); if (!FTPReply.isPositiveCompletion(reply)) { throw new CitrusRuntimeException(\"FTP server refused connection.\"); } log.info(\"Opened connection to FTP server\"); if (getEndpointConfiguration().getUser() != null) { if (log.isDebugEnabled()) { log.debug(String.format(\"Login as user: '%s'\", getEndpointConfiguration().getUser())); } boolean login = ftpClient.login(getEndpointConfiguration().getUser(), getEndpointConfiguration().getPassword()); if (!login) { throw new CitrusRuntimeException(String.format(\"Failed to login to FTP server using credentials: %s:%s\", getEndpointConfiguration().getUser(), getEndpointConfiguration().getPassword())); } } if (getEndpointConfiguration().isLocalPassiveMode()) { ftpClient.enterLocalPassiveMode(); } } }\n\n    ### Response: Opens a new connection and performs login with user name and password if set.\n@throws IOException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static File zlib(final File file) throws IOException { if (file.isDirectory()) { throw new IOException(\"Can't zlib folder\"); } FileInputStream fis = new FileInputStream(file); Deflater deflater = new Deflater(Deflater.BEST_COMPRESSION); String zlibFileName = file.getAbsolutePath() + ZLIB_EXT; DeflaterOutputStream dos = new DeflaterOutputStream(new FileOutputStream(zlibFileName), deflater); try { StreamUtil.copy(fis, dos); } finally { StreamUtil.close(dos); StreamUtil.close(fis); } return new File(zlibFileName); }\n\n    ### Response:", "ground_truth": "Compresses a file into zlib archive.", "predict": "Compresses given directory to zipped file with gzip compression format"}, {"ID": 955, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setLanguage($language) { $language = $language ?: $this->language; if (!in_array($language, $this->getSupportedLanguages())) { throw new LanguageNotSupportedException(sprintf('Language [%s] is not supported', $language)); } $this->language = $language; $this->changeBaseApi(); return true; }\n\n    ### Response: Set the language the api should use\n@param string $language.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static File gzip(final File file) throws IOException { if (file.isDirectory()) { throw new IOException(\"Can't gzip folder\"); } FileInputStream fis = new FileInputStream(file); String gzipName = file.getAbsolutePath() + GZIP_EXT; GZIPOutputStream gzos = new GZIPOutputStream(new FileOutputStream(gzipName)); try { StreamUtil.copy(fis, gzos); } finally { StreamUtil.close(gzos); StreamUtil.close(fis); } return new File(gzipName); }\n\n    ### Response:", "ground_truth": "Compresses a file into gzip archive.", "predict": "Compresses given directory to gz file"}, {"ID": 956, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function validateTargetAudienceSettings() { $errorMessages = []; // @TODO: Enable validation after CRM is updated. return []; // Age is in the range from Target Audience Setting from Campaign. $validateAge = $this->validateMemberAge(); if (!$validateAge['status']) { $errorMessages[] = $validateAge['error']; } // Member type match Target Audience Setting from Campaign. $validateMemberUnitType = $this->validateMemberUnitType(); if (!$validateMemberUnitType['status']) { $errorMessages[] = $validateMemberUnitType['error']; } // Branch is one of the selected in the Target Audience Setting from Campaign. $validateMemberBranch = $this->validateMemberBranch(); if (!$validateMemberBranch['status']) { $errorMessages[] = $validateMemberBranch['error']; } return $errorMessages; }\n\n    ### Response: Validate by Target Audience Settings from Campaign.\n\n@return array Array of error messages. Will be empty if validation passed..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static File ungzip(final File file) throws IOException { String outFileName = FileNameUtil.removeExtension(file.getAbsolutePath()); File out = new File(outFileName); out.createNewFile(); FileOutputStream fos = new FileOutputStream(out); GZIPInputStream gzis = new GZIPInputStream(new FileInputStream(file)); try { StreamUtil.copy(gzis, fos); } finally { StreamUtil.close(fos); StreamUtil.close(gzis); } return out; }\n\n    ### Response:", "ground_truth": "Decompress gzip archive.", "predict": "Validate by Target Audience Settings from Campaign."}, {"ID": 957, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function findBySlug($slug) { //@var $command Guzzle\\Service\\Command\\AbstractCommand $command = $this->client->getCommand('FindBySlug', array('slug' => $slug)); return $this->executeCommand($command); }\n\n    ### Response: Get channel. Show data channel by slug\n\n@param int $slug  Channel to retrieve by SLUG\n\n@return array|string Associative array with channel data | Message with error in json format\n\n@throws InvalidArgumentException This exception is thrown if any parameter has errors\n\n@throws ApiException This exception is thrown if server send one error\n\n@examples\n\n\n$your_api_instance->showChannel(update-channel-name);\n//Sample Ouput\n\narray(\n\"id\" =>96\n\"name\" =>\"update channel name\",\n\"slug\" =>\"update-channel-name\",\n\"title\" =>\"API - Channel title\",\n\"description\" =>\"This is channel about loves, friends and others\",\n\"owner\" => array(\n\"id\" =>1\n\"username\" =>\"alex\"\n),\n\"channel_type\" => array(\n\"name\" =>\"love\"\n),\n\"_links\" => array(\n\"self\" => array(\n\"href\" =>\"https://api.chatsfree.net/api/channels/96\"\n),\n\"fans\" => array(\n\"href\" =>\"https://api.chatsfree.net/api/channels/96/fans\"\n),\n\"owner\" => array(\n\"href\" =>\"https://api.chatsfree.net/api/users/1\"\n)\n)\n);\n.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static List<String> listZip(final File zipFile) throws IOException { List<String> entries = new ArrayList<>(); ZipFile zip = new ZipFile(zipFile); Enumeration zipEntries = zip.entries(); while (zipEntries.hasMoreElements()) { ZipEntry entry = (ZipEntry) zipEntries.nextElement(); String entryName = entry.getName(); entries.add(entryName); } return Collections.unmodifiableList(entries); }\n\n    ### Response:", "ground_truth": "Lists zip content.", "predict": "Get channel names from given zip file\n    List<String> entries;\n    ZipInputStream zis;\n    try {\n    //open given zip file\n    zis = new ZipInputStream(new FileInputStream(zipFile));\n    //iterate over zip entries\n    while (zis.getNextEntry() != null) {\n    //add names to list\n    entries.add(zis.getName());\n    }\n    //close input stream\n    zis.close();\n    } catch (IOException e) {\n    e.printStackTrace();\n    }\n    return entries;"}, {"ID": 958, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def slice(*keys, **options) keys.zip(values_at(*keys, **options)).reject do |_, value| value == nil end end\n\n    ### Response: Returns a collection of key-value pairs corresponding to those supplied\n keys which are present in the key-value store, and their associated\n values.  Only those keys present in the store will have pairs in the\n return value.  The return value can be any enumerable object that yields\n pairs, so it could be a hash, but needn't be.\n\n @note The keys in the return value may be the same objects that were\n   supplied (i.e. {Object#equal?}), or may simply be equal (i.e.\n   {Object#==}).\n\n @note Some adapters may implement this method atomically. The default\n   implmentation uses {#values_at}.\n\n @param (see #values_at)\n @option options (see #values_at)\n @return [] A collection of key-value pairs\n @api public.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void unzip(final String zipFile, final String destDir, final String... patterns) throws IOException { unzip(new File(zipFile), new File(destDir), patterns); }\n\n    ### Response:", "ground_truth": "Extracts zip file content to the target directory.\n@see #unzip(java.io.File, java.io.File, String...)", "predict": "The given zip file is extracted into the given destDir. The patterns parameter may optionally be given to control what should be extracted and where to extract it to (default behavior being to extract all files with any of the given patterns into destDir/); ignoring this parameter sets the patterns to \"*.*\" for all given zip archives"}, {"ID": 959, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func RecordChangeCause(obj runtime.Object, changeCause string) error { meta, err := api.ObjectMetaFor(obj) if err != nil { return err } if meta.Annotations == nil { meta.Annotations = make(map[string]string) } meta.Annotations[kubectl.ChangeCauseAnnotation] = changeCause return nil }\n\n    ### Response: // RecordChangeCause annotate change-cause to input runtime object..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void addToZip(final ZipOutputStream zos, final File file, String path, final String comment, final boolean recursive) throws IOException { if (!file.exists()) { throw new FileNotFoundException(file.toString()); } if (path == null) { path = file.getName(); } while (path.length() != 0 && path.charAt(0) == '/') { path = path.substring(1); } boolean isDir = file.isDirectory(); if (isDir) { // add folder record if (!StringUtil.endsWithChar(path, '/')) { path += '/'; } } ZipEntry zipEntry = new ZipEntry(path); zipEntry.setTime(file.lastModified()); if (comment != null) { zipEntry.setComment(comment); } if (isDir) { zipEntry.setSize(0); zipEntry.setCrc(0); } zos.putNextEntry(zipEntry); if (!isDir) { InputStream is = new FileInputStream(file); try { StreamUtil.copy(is, zos); } finally { StreamUtil.close(is); } } zos.closeEntry(); // continue adding if (recursive && file.isDirectory()) { boolean noRelativePath = StringUtil.isEmpty(path); final File[] children = file.listFiles(); if (children != null && children.length != 0) { for (File child : children) { String childRelativePath = (noRelativePath ? StringPool.EMPTY : path) + child.getName(); addToZip(zos, child, childRelativePath, comment, recursive); } } } }\n\n    ### Response:", "ground_truth": "Adds single entry to ZIP output stream.\n\n@param zos zip output stream\n@param file file or folder to add\n@param path relative path of file entry; if null files name will be used instead\n@param comment optional comment\n@param recursive when set to true content of added folders will be added, too", "predict": "// Add given directory and/or objects to zip archive specifying zip path and comment, and recursive mode\n\nNote that there should be no leading slash '/', but slash may appear in the path string because of folder name contains '/'."}, {"ID": 960, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (r *RollingUpdateInstanceGroup) Delete() error { if r.CloudGroup == nil { return fmt.Errorf(\"group has to be set\") } // TODO: Leaving func in place in order to cordon nd drain nodes return r.Cloud.DeleteGroup(r.CloudGroup) }\n\n    ### Response: // Delete a CloudInstanceGroups.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void addToZip(final ZipOutputStream zos, final byte[] content, String path, final String comment) throws IOException { while (path.length() != 0 && path.charAt(0) == '/') { path = path.substring(1); } if (StringUtil.endsWithChar(path, '/')) { path = path.substring(0, path.length() - 1); } ZipEntry zipEntry = new ZipEntry(path); zipEntry.setTime(System.currentTimeMillis()); if (comment != null) { zipEntry.setComment(comment); } zos.putNextEntry(zipEntry); InputStream is = new ByteArrayInputStream(content); try { StreamUtil.copy(is, zos); } finally { StreamUtil.close(is); } zos.closeEntry(); }\n\n    ### Response:", "ground_truth": "Adds byte content into the zip as a file.", "predict": "// Add given content to given zip archive under given path and comment."}, {"ID": 961, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getContractNamespace($withApp = true) { // get path from settings $path = config('generators.settings.contract.namespace') . '\\\\'; // dont add the default namespace if specified not to in config $path .= str_replace('/', '\\\\', $this->getArgumentPath()); $pieces = array_map('ucfirst', explode('/', $path)); $namespace = ($withApp === true ? $this->getAppNamespace() : '') . implode('\\\\', $pieces); $namespace = rtrim(ltrim(str_replace('\\\\\\\\', '\\\\', $namespace), '\\\\'), '\\\\'); return $namespace; }\n\n    ### Response: Get the namespace of where contract was created\n@param bool $withApp\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public FieldDescriptor getFieldDescriptor(final String name, final boolean declared) { final FieldDescriptor fieldDescriptor = getFields().getFieldDescriptor(name); if (fieldDescriptor != null) { if (!fieldDescriptor.matchDeclared(declared)) { return null; } } return fieldDescriptor; }\n\n    ### Response:", "ground_truth": "Returns field descriptor.", "predict": "Get the FieldDescriptor of the given FieldName, from either the declared or the populated Map of FieldDescriptor objects"}, {"ID": 962, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private synchronized void removeDistributedStatistics() { if (distributedStatistics != null) { listeners.remove((NotificationListener)distributedStatistics); distributedStatistics.setTransport(null); distributedStatistics = null; } }\n\n    ### Response: Remove distributed statistics.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public PropertyDescriptor getPropertyDescriptor(final String name, final boolean declared) { PropertyDescriptor propertyDescriptor = getProperties().getPropertyDescriptor(name); if ((propertyDescriptor != null) && propertyDescriptor.matchDeclared(declared)) { return propertyDescriptor; } return null; }\n\n    ### Response:", "ground_truth": "Returns property descriptor. Declared flag is matched on both read and write\nmethods.", "predict": "Get Property Descriptor of given name from Properties and Filter the Result according to given Condition of Declaration of Value of the given Property."}, {"ID": 963, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Emulation) SetNavigatorOverrides(platform string) (*gcdmessage.ChromeResponse, error) { var v EmulationSetNavigatorOverridesParams v.Platform = platform return c.SetNavigatorOverridesWithParams(&v) }\n\n    ### Response: // SetNavigatorOverrides - Overrides value returned by the javascript navigator object.\n// platform - The platform navigator.platform should return..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void setRequestBundleName(final ServletRequest request, final String bundleName) { if (log.isDebugEnabled()) { log.debug(\"Bundle name for this request: \" + bundleName); } request.setAttribute(REQUEST_BUNDLE_NAME_ATTR, bundleName); }\n\n    ### Response:", "ground_truth": "Sets bundle name for provided servlet request.", "predict": "// setRequestBundleName - Override the default bundle name for the given request with the given bundle name."}, {"ID": 964, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (list RequestCostList) decode() requestCostTable { table := make(requestCostTable) for _, e := range list { table[e.MsgCode] = &requestCosts{ baseCost: e.BaseCost, reqCost: e.ReqCost, } } return table }\n\n    ### Response: // decode converts a cost list to a cost table.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void setSessionLocale(final HttpSession session, final String localeCode) { if (log.isDebugEnabled()) { log.debug(\"Locale stored to session: \" + localeCode); } Locale locale = Locale.forLanguageTag(localeCode); session.setAttribute(SESSION_LOCALE_ATTR, locale); }\n\n    ### Response:", "ground_truth": "Saves Locale to HTTP session.", "predict": "// Stores Locale to Session to translate messages for given locale\n    // If debug logs are enabled log.debug(\"Locale stored to session: \" + localeCode);\n    // Stores Locale to Session to translate messages for given locale\n    // If debug logs are enabled log.debug(\"Locale stored to session: \" + localeCode);"}, {"ID": 965, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function not($selector) { $result = $this->createChildInstance(); if ($this->length > 0) { if (\\is_callable($selector)) { foreach ($this->nodes as $index => $node) { if (!$selector($node, $index)) { $result->addDomNode($node); } } } else { $selection = self::create($this->document)->find($selector); if ($selection->length > 0) { foreach ($this->nodes as $node) { $matched = false; foreach ($selection as $result_node) { if ($result_node->isSameNode($node)) { $matched = true; break 1; } } if (!$matched) { $result->addDomNode($node); } } } else { $result->addNodes($this->nodes); } } } return $result; }\n\n    ### Response: Remove elements from the set of matched elements.\n\n@param string|self|callable|\\DOMNodeList|\\DOMNode $selector\n\n@return self.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Locale getSessionLocale(final HttpSession session) { Locale locale = (Locale) session.getAttribute(SESSION_LOCALE_ATTR); return locale == null ? MESSAGE_RESOLVER.getFallbackLocale() : locale; }\n\n    ### Response:", "ground_truth": "Returns current locale from session.\ns", "predict": "Get the locale set in the HTTP session or default to the fallback locale defined in the resource bundle."}, {"ID": 966, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def to_dict(self): \"\"\"Transform the date-range to a dict.\"\"\" d = {} d['start'] = date_to_str(self.start) d['end'] = date_to_str(self.end) return d\n\n    ### Response: Transform the date-range to a dict..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String[] filterParametersForBeanName(String beanName, final boolean resolveReferenceParams) { beanName = beanName + '.'; List<String> list = new ArrayList<>(); for (Map.Entry<String, Object> entry : params.entrySet()) { String key = entry.getKey(); if (!key.startsWith(beanName)) { continue; } list.add(key); if (!resolveReferenceParams) { continue; } // resolve all references String value = PropertiesUtil.resolveProperty(params, key); entry.setValue(value); } if (list.isEmpty()) { return StringPool.EMPTY_ARRAY; } else { return list.toArray(new String[0]); } }\n\n    ### Response:", "ground_truth": "Returns an array of param keys that belongs to provided bean.\nOptionally resolves the value of returned parameters.", "predict": "Filters the given parameters to produce an appropriate bean name to pass to the bean to retrieve the values of the given parameters.<BR> <BR> If resolveReferenceParams parameter is set to true, then the values of the objects referenced in the given parameters string array are resolved to produce an appropriate bean name to pass to the bean to retrieve the values of the given parameters.<BR> <BR> If resolveReferenceParams parameter is set to false, then the given parameters string array is returned as is.<BR> <BR> If no bean names appear in the given string array and resolveReferenceParams parameter is set to false, then an empty string array is returned.<BR> <BR> If bean names appear but no objects to resolve exist in the given string array and resolveReferenceParams parameter is set to false, then an empty string array is returned.<BR> <BR> If bean names appear but objects to resolve cannot be found in the given string array and resolveReferenceParams parameter is set to false, then an empty string array is returned.<BR> <BR>"}, {"ID": 967, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function otherFields(array $fields): array { $unused = array_diff(self::OTHER_ADVANCED_FIELDS, array_keys($fields)); $other_fileds = []; foreach ($unused as $tag) { $other_fileds[$tag] = GedcomTag::getLabel($tag); } return $other_fileds; }\n\n    ### Response: Extra search fields to add to the advanced search\n\n@param string[] $fields\n\n@return string[].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public PropsEntries profile(final String... profiles) { if (profiles == null) { return this; } for (String profile : profiles) { addProfiles(profile); } return this; }\n\n    ### Response:", "ground_truth": "Enables profiles to iterate.", "predict": "Profile Fields Management"}, {"ID": 968, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function filterByMySQL($mySQL = null, $comparison = null) { if (is_object($mySQL)) { $mySQL = serialize($mySQL); } return $this->addUsingAlias(RemoteHistoryContaoPeer::MYSQL, $mySQL, $comparison); }\n\n    ### Response: Filter the query on the mysql column\n\n@param     mixed $mySQL The value to use as filter\n@param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL\n\n@return RemoteHistoryContaoQuery The current query, for fluid interface.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long getLongLittleEndian(final byte[] buf, final int offset) { return ((long) buf[offset + 7] << 56) // no mask needed | ((buf[offset + 6] & 0xffL) << 48) | ((buf[offset + 5] & 0xffL) << 40) | ((buf[offset + 4] & 0xffL) << 32) | ((buf[offset + 3] & 0xffL) << 24) | ((buf[offset + 2] & 0xffL) << 16) | ((buf[offset + 1] & 0xffL) << 8) | ((buf[offset] & 0xffL)); // no shift needed }\n\n    ### Response:", "ground_truth": "Gets a long from a byte buffer in little endian byte order.", "predict": "Long big to little endian conversion"}, {"ID": 969, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function VehicleDescriptor(properties) { if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]; }\n\n    ### Response: Properties of a VehicleDescriptor.\n@memberof transit_realtime\n@interface IVehicleDescriptor\n@property {string|null} [id] VehicleDescriptor id\n@property {string|null} [label] VehicleDescriptor label\n@property {string|null} [licensePlate] VehicleDescriptor licensePlate\n \nConstructs a new VehicleDescriptor.\n@memberof transit_realtime\n@classdesc Represents a VehicleDescriptor.\n@implements IVehicleDescriptor\n@constructor\n@param {transit_realtime.IVehicleDescriptor=} [properties] Properties to set.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static byte[] readStream(final InputStream inputStream, final boolean close) throws IOException { if (inputStream == null) { throw new IOException(\"Class not found\"); } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); byte[] data = new byte[INPUT_STREAM_DATA_CHUNK_SIZE]; int bytesRead; while ((bytesRead = inputStream.read(data, 0, data.length)) != -1) { outputStream.write(data, 0, bytesRead); } outputStream.flush(); return outputStream.toByteArray(); } finally { if (close) { inputStream.close(); } } }\n\n    ### Response:", "ground_truth": "Reads the given input stream and returns its content as a byte array.\n\n@param inputStream an input stream.\n@param close true to close the input stream after reading.\n@return the content of the given input stream.\n@throws IOException if a problem occurs during reading.", "predict": "Stream contents can be read from this method."}, {"ID": 970, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <C extends Change> List getObjectsByChangeType(final Class<C> type) { argumentIsNotNull(type); return Lists.transform(getChangesByType(type), input -> input.getAffectedObject().<JaversException>orElseThrow(() -> new JaversException(AFFECTED_CDO_IS_NOT_AVAILABLE))); }\n\n    ### Response: Selects new, removed or changed objects\n\n@throws JaversException AFFECTED_CDO_IS_NOT_AVAILABLE if diff is restored from a repository.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Label readLabel(final int bytecodeOffset, final Label[] labels) { if (labels[bytecodeOffset] == null) { labels[bytecodeOffset] = new Label(); } return labels[bytecodeOffset]; }\n\n    ### Response:", "ground_truth": "Returns the label corresponding to the given bytecode offset. The default implementation of\nthis method creates a label for the given offset if it has not been already created.\n\n@param bytecodeOffset a bytecode offset in a method.\n@param labels the already created labels, indexed by their offset. If a label already exists\nfor bytecodeOffset this method must not create a new one. Otherwise it must store the new\nlabel in this array.\n@return a non null Label, which must be equal to labels[bytecodeOffset].", "predict": "Precomputed labels for faster access\n    ### Comment for readLabel() method\n    Precomputed labels reduce the number of labels accessed during program execution by storing values at specific locations in the program code for faster lookup times. readLabel() reads the contents of an indexed location in the program code to produce the corresponding label for faster access."}, {"ID": 971, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def render(self, path, **context): \"\"\" Render a template with context. \"\"\" funcs = self.functions ctx = dict(self.functions, jdebug=lambda: dict( (k, v) for k, v in ctx.items() if k not in funcs and k != 'jdebug')) for provider in self.providers: _ctx = yield from provider() ctx.update(_ctx) ctx.update(context) template = self.env.get_template(path) return self.env.render(template, **ctx)\n\n    ### Response: Render a template with context..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private int getTypeAnnotationBytecodeOffset( final int[] typeAnnotationOffsets, final int typeAnnotationIndex) { if (typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets.length || readByte(typeAnnotationOffsets[typeAnnotationIndex]) < TypeReference.INSTANCEOF) { return -1; } return readUnsignedShort(typeAnnotationOffsets[typeAnnotationIndex] + 1); }\n\n    ### Response:", "ground_truth": "Returns the bytecode offset corresponding to the specified JVMS 'type_annotation' structure, or\n-1 if there is no such type_annotation of if it does not have a bytecode offset.\n\n@param typeAnnotationOffsets the offset of each 'type_annotation' entry in a\nRuntime[In]VisibleTypeAnnotations attribute, or null.\n@param typeAnnotationIndex the index a 'type_annotation' entry in typeAnnotationOffsets.\n@return bytecode offset corresponding to the specified JVMS 'type_annotation' structure, or -1\nif there is no such type_annotation of if it does not have a bytecode offset.", "predict": "Get the offset of the given type annotation from the start of the method at the given position, or -1 if the annotation is not found or invalid"}, {"ID": 972, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (m *MockContainerAPIClient) ContainerDiff(ctx context.Context, container string) ([]containerpkg.ContainerChangeResponseItem, error) { ret := m.ctrl.Call(m, \"ContainerDiff\", ctx, container) ret0, _ := ret[0].([]containerpkg.ContainerChangeResponseItem) ret1, _ := ret[1].(error) return ret0, ret1 }\n\n    ### Response: // ContainerDiff mocks base method.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private int readElementValues( final AnnotationVisitor annotationVisitor, final int annotationOffset, final boolean named, final char[] charBuffer) { int currentOffset = annotationOffset; // Read the num_element_value_pairs field (or num_values field for an array_value). int numElementValuePairs = readUnsignedShort(currentOffset); currentOffset += 2; if (named) { // Parse the element_value_pairs array. while (numElementValuePairs-- > 0) { String elementName = readUTF8(currentOffset, charBuffer); currentOffset = readElementValue(annotationVisitor, currentOffset + 2, elementName, charBuffer); } } else { // Parse the array_value array. while (numElementValuePairs-- > 0) { currentOffset = readElementValue(annotationVisitor, currentOffset, /* named = */ null, charBuffer); } } if (annotationVisitor != null) { annotationVisitor.visitEnd(); } return currentOffset; }\n\n    ### Response:", "ground_truth": "Reads the element values of a JVMS 'annotation' structure and makes the given visitor visit\nthem. This method can also be used to read the values of the JVMS 'array_value' field of an\nannotation's 'element_value'.\n\n@param annotationVisitor the visitor that must visit the values.\n@param annotationOffset the start offset of an 'annotation' structure (excluding its type_index\nfield) or of an 'array_value' structure.\n@param named if the annotation values are named or not. This should be true to parse the values\nof a JVMS 'annotation' structure, and false to parse the JVMS 'array_value' of an\nannotation's element_value.\n@param charBuffer the buffer used to read strings in the constant pool.\n@return the end offset of the JVMS 'annotation' or 'array_value' structure.", "predict": "// Parses an element_value_list or an array_value of an annotation"}, {"ID": 973, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (deploymentStrategy) Validate(ctx context.Context, obj runtime.Object) field.ErrorList { deployment := obj.(*apps.Deployment) allErrs := validation.ValidateDeployment(deployment) allErrs = append(allErrs, corevalidation.ValidateConditionalPodTemplate(&deployment.Spec.Template, nil, field.NewPath(\"spec.template\"))...) return allErrs }\n\n    ### Response: // Validate validates a new deployment..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private int readVerificationTypeInfo( final int verificationTypeInfoOffset, final Object[] frame, final int index, final char[] charBuffer, final Label[] labels) { int currentOffset = verificationTypeInfoOffset; int tag = b[currentOffset++] & 0xFF; switch (tag) { case Frame.ITEM_TOP: frame[index] = Opcodes.TOP; break; case Frame.ITEM_INTEGER: frame[index] = Opcodes.INTEGER; break; case Frame.ITEM_FLOAT: frame[index] = Opcodes.FLOAT; break; case Frame.ITEM_DOUBLE: frame[index] = Opcodes.DOUBLE; break; case Frame.ITEM_LONG: frame[index] = Opcodes.LONG; break; case Frame.ITEM_NULL: frame[index] = Opcodes.NULL; break; case Frame.ITEM_UNINITIALIZED_THIS: frame[index] = Opcodes.UNINITIALIZED_THIS; break; case Frame.ITEM_OBJECT: frame[index] = readClass(currentOffset, charBuffer); currentOffset += 2; break; case Frame.ITEM_UNINITIALIZED: frame[index] = createLabel(readUnsignedShort(currentOffset), labels); currentOffset += 2; break; default: throw new IllegalArgumentException(); } return currentOffset; }\n\n    ### Response:", "ground_truth": "Reads a JVMS 'verification_type_info' structure and stores it at the given index in the given\narray.\n\n@param verificationTypeInfoOffset the start offset of the 'verification_type_info' structure to\nread.\n@param frame the array where the parsed type must be stored.\n@param index the index in 'frame' where the parsed type must be stored.\n@param charBuffer the buffer used to read strings in the constant pool.\n@param labels the labels of the method currently being parsed, indexed by their offset. If the\nparsed type is an ITEM_Uninitialized, a new label for the corresponding NEW instruction is\nstored in this array if it does not already exist.\n@return the end offset of the JVMS 'verification_type_info' structure.", "predict": "The verificationTypeInfoOffset parameter contains information about the type of verification being performed, such as whether the verification relates to a top or a local variable, or to objects or primitives of a given type. The verificationTypeInfoOffset parameter can be used to customize the verification behavior for the given verification scenario by passing information such as the name of the verification method to custom verification frameworks to determine the specific verification behavior for the given verification scenario"}, {"ID": 974, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewCmdNamespace(streams genericclioptions.IOStreams) *cobra.Command { o := NewNamespaceOptions(streams) cmd := &cobra.Command{ Use: \"ns [new-namespace] [flags]\", Short: \"View or set the current namespace\", Example: fmt.Sprintf(namespaceExample, \"kubectl\"), SilenceUsage: true, RunE: func(c *cobra.Command, args []string) error { if err := o.Complete(c, args); err != nil { return err } if err := o.Validate(); err != nil { return err } if err := o.Run(); err != nil { return err } return nil }, } cmd.Flags().BoolVar(&o.listNamespaces, \"list\", o.listNamespaces, \"if true, print the list of all namespaces in the current KUBECONFIG\") o.configFlags.AddFlags(cmd.Flags()) return cmd }\n\n    ### Response: // NewCmdNamespace provides a cobra command wrapping NamespaceOptions.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private int[] readBootstrapMethodsAttribute(final int maxStringLength) { char[] charBuffer = new char[maxStringLength]; int currentAttributeOffset = getFirstAttributeOffset(); int[] currentBootstrapMethodOffsets = null; for (int i = readUnsignedShort(currentAttributeOffset - 2); i > 0; --i) { // Read the attribute_info's attribute_name and attribute_length fields. String attributeName = readUTF8(currentAttributeOffset, charBuffer); int attributeLength = readInt(currentAttributeOffset + 2); currentAttributeOffset += 6; if (Constants.BOOTSTRAP_METHODS.equals(attributeName)) { // Read the num_bootstrap_methods field and create an array of this size. currentBootstrapMethodOffsets = new int[readUnsignedShort(currentAttributeOffset)]; // Compute and store the offset of each 'bootstrap_methods' array field entry. int currentBootstrapMethodOffset = currentAttributeOffset + 2; for (int j = 0; j < currentBootstrapMethodOffsets.length; ++j) { currentBootstrapMethodOffsets[j] = currentBootstrapMethodOffset; // Skip the bootstrap_method_ref and num_bootstrap_arguments fields (2 bytes each), // as well as the bootstrap_arguments array field (of size num_bootstrap_arguments * 2). currentBootstrapMethodOffset += 4 + readUnsignedShort(currentBootstrapMethodOffset + 2) * 2; } return currentBootstrapMethodOffsets; } currentAttributeOffset += attributeLength; } return null; }\n\n    ### Response:", "ground_truth": "Reads the BootstrapMethods attribute to compute the offset of each bootstrap method.\n\n@param maxStringLength a conservative estimate of the maximum length of the strings contained\nin the constant pool of the class.\n@return the offsets of the bootstrap methods or null.", "predict": "// The above method reads the contents of the BootstrapMethods attributes from the input file into int arrays."}, {"ID": 975, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (p *Pool) GetContext(ctx context.Context) (Conn, error) { pc, err := p.get(ctx) if err != nil { return errorConn{err}, err } return &activeConn{p: p, pc: pc}, nil }\n\n    ### Response: // GetContext gets a connection using the provided context.\n//\n// The provided Context must be non-nil. If the context expires before the\n// connection is complete, an error is returned. Any expiration on the context\n// will not affect the returned connection.\n//\n// If the function completes without error, then the application must close the\n// returned connection..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected CtorDescriptor[] inspectConstructors() { Class type = classDescriptor.getType(); Constructor[] ctors = type.getDeclaredConstructors(); CtorDescriptor[] allCtors = new CtorDescriptor[ctors.length]; for (int i = 0; i < ctors.length; i++) { Constructor ctor = ctors[i]; CtorDescriptor ctorDescriptor = createCtorDescriptor(ctor); allCtors[i] = ctorDescriptor; if (ctorDescriptor.isDefault()) { defaultCtor = ctorDescriptor; } } return allCtors; }\n\n    ### Response:", "ground_truth": "Inspects all declared constructors of a target type.", "predict": "The inspectConstructors() method inspects all constructors of the given class to generate information about its constructors for the purpose of generating the constructor table of the Javadoc page of the class. It takes in an instance of the Class object of the given class as an argument. It creates CtorDescriptor objects for each of the constructors of the given class and populates information about the constructor into the objects such as its parameter names, parameter types, parameter annotations, parameter order, parameter values, constructor annotations, constructor body, signature, access, visibility, parameterized constructor annotations, constructor overriding annotations, and constructor chaining annotations of the constructor into the objects. It then populates the information into the constructor objects into an array of CtorDescriptor objects and returns it."}, {"ID": 976, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function loadClassMetadata(EventArgs $eventArgs) { if ( ! $eventArgs instanceof CommonEventArgs && ! $eventArgs instanceof OrmEventArgs ) { throw InvalidArgumentException::create( 'Doctrine\\Common\\Persistence\\Event\\LoadClassMetadataEventArgs', $eventArgs ); } $ea = $this->getEventAdapter($eventArgs); $this->loadMetadataForObjectClass($ea->getObjectManager(), $eventArgs->getClassMetadata()); }\n\n    ### Response: Mapps additional metadata\n\n@param EventArgs $eventArgs\n@return void\n@throws InvalidArgumentException IF $eventArgs is not an instance of\nDoctrine\\Common\\Persistence\\Event\\LoadClassMetadataEventArgs or\nDoctrine\\ORM\\Event\\LoadClassMetadataEventArgs.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public CtorDescriptor getCtorDescriptor(final Class... args) { ctors: for (CtorDescriptor ctorDescriptor : allCtors) { Class[] arg = ctorDescriptor.getParameters(); if (arg.length != args.length) { continue; } for (int j = 0; j < arg.length; j++) { if (arg[j] != args[j]) { continue ctors; } } return ctorDescriptor; } return null; }\n\n    ### Response:", "ground_truth": "Finds constructor description that matches given argument types.", "predict": "Describes how to retrieve the constructor of the given class given an ordered list of arguments to pass to the constructor\n\nconst allCtors = (new ReflectionClass(class))\n    ->getMethods(ReflectionMethod::IS_PUBLIC);\n\nconst allParams = ReflectionParameter::getConstructorParams(class);\n\nconst allParamsSortedByPosAndIndex = allParams.stream().\n    orderBy(rp -> rp.getClass()::getModifiers()\n    ).\n    toDictionary(rp -> rp);\n\nconst allParamsShoredByPosAndIndexShoredByPosAndIndexShoredByPosAndIndexShoredByPosAndIndexShoredByPosAndIndexShoredByPosAndIndexShoredByPosAndIndexShoredByPosAndIndexShoredByPosAndIndexShoredByPosAndIndexShoredByPosAndIndexShoredByPosAndIndexShoredByPosAndIndexShor"}, {"ID": 977, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function AppendRendered($path = '', $media = 'all', $doNotMinify = FALSE) { return $this->Append($path, $media, TRUE, $doNotMinify); }\n\n    ### Response: Append style sheet after all group stylesheets for later render process with php tags executing in given file\n@param  string  $path\n@param  string  $media\n@param  boolean $doNotMinify\n@return \\MvcCore\\Ext\\Views\\Helpers\\CssHelper.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") protected Map<String, TransientBeanData> getRequestMap(final HttpServletRequest servletRequest) { return (Map<String, TransientBeanData>) servletRequest.getAttribute(ATTR_NAME); }\n\n    ### Response:", "ground_truth": "", "predict": "Gets Map of all attributes of given HTTP request and stores into given Map."}, {"ID": 978, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getConfigTreeBuilder(): TreeBuilder { $rootName = $this->getRootName(); if (method_exists(TreeBuilder::class, 'getRootNode')) { $treeBuilder = /* @scrutinizer ignore-call */ new TreeBuilder($rootName); $rootNode = /* @scrutinizer ignore-call */ $treeBuilder->getRootNode(); } else { $treeBuilder = new TreeBuilder(); $rootNode = $treeBuilder->Root($rootName); } $this->build($rootNode); return $treeBuilder; }\n\n    ### Response: Verify configuration.\n\n@return TreeBuilder.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Map<String, TransientBeanData> createRequestMap(final HttpServletRequest servletRequest) { Map<String, TransientBeanData> map = new HashMap<>(); servletRequest.setAttribute(ATTR_NAME, map); return map; }\n\n    ### Response:", "ground_truth": "Creates instance map and stores it in the request.", "predict": "Map attributes of the HttpServletRequest to an internal Map to provide access from other parts of the application."}, {"ID": 979, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final void setLink(Attributes attributes) { lineValues[GpxMetadata.LINELINK_HREF] = attributes.getValue(GPXTags.HREF); }\n\n    ### Response: Set a link to additional information about the route or the track.\n\n@param attributes The current attributes being parsed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected long[] convertArrayToArray(final Object value) { final Class valueComponentType = value.getClass().getComponentType(); final long[] result; if (valueComponentType.isPrimitive()) { result = convertPrimitiveArrayToArray(value, valueComponentType); } else { // convert object array to target array final Object[] array = (Object[]) value; result = new long[array.length]; for (int i = 0; i < array.length; i++) { result[i] = convertType(array[i]); } } return result; }\n\n    ### Response:", "ground_truth": "Converts array value to array.", "predict": "The function converts an Object array to an int[]. The function first checks if the given Object array contains any primitive values, in which case the function uses the appropriate method to convert to int; otherwise it converts the objects in the Object array to int using the int constructor of the Object array."}, {"ID": 980, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function configure(PDOInterface $pdo): void { $sslMode = $pdo->getAttribute(PDO::CRATE_ATTR_SSL_MODE); $protocol = $sslMode === PDO::CRATE_ATTR_SSL_MODE_DISABLED ? 'http' : 'https'; $options = [ RequestOptions::TIMEOUT => $pdo->getAttribute(PDO::ATTR_TIMEOUT), RequestOptions::CONNECT_TIMEOUT => $pdo->getAttribute(PDO::ATTR_TIMEOUT), RequestOptions::AUTH => $pdo->getAttribute(PDO::CRATE_ATTR_HTTP_BASIC_AUTH) ?: null, RequestOptions::HEADERS => [ 'Default-Schema' => $pdo->getAttribute(PDO::CRATE_ATTR_DEFAULT_SCHEMA), ], ]; if ($sslMode === PDO::CRATE_ATTR_SSL_MODE_ENABLED_BUT_WITHOUT_HOST_VERIFICATION) { $options['verify'] = false; } $ca = $pdo->getAttribute(PDO::CRATE_ATTR_SSL_CA_PATH); $caPassword = $pdo->getAttribute(PDO::CRATE_ATTR_SSL_CA_PASSWORD); if ($ca) { if ($caPassword) { $options[RequestOptions::VERIFY] = [$ca, $caPassword]; } else { $options[RequestOptions::VERIFY] = $ca; } } $cert = $pdo->getAttribute(PDO::CRATE_ATTR_SSL_CERT_PATH); $certPassword = $pdo->getAttribute(PDO::CRATE_ATTR_SSL_CERT_PASSWORD); if ($cert) { if ($certPassword) { $options[RequestOptions::CERT] = [$cert, $certPassword]; } else { $options[RequestOptions::CERT] = $cert; } } $key = $pdo->getAttribute(PDO::CRATE_ATTR_SSL_KEY_PATH); $keyPassword = $pdo->getAttribute(PDO::CRATE_ATTR_SSL_KEY_PASSWORD); if ($key) { if ($keyPassword) { $options[RequestOptions::SSL_KEY] = [$key, $keyPassword]; } else { $options[RequestOptions::SSL_KEY] = $key; } } $this->protocol = $protocol; $this->httpOptions = $options; }\n\n    ### Response: Reconfigure the the server pool based on the attributes in PDO\n\n@param PDOInterface $pdo.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void init(final FilterConfig filterConfig) throws ServletException { // final String decoraManagerClass = filterConfig.getInitParameter(PARAM_DECORA_MANAGER); if (decoraManagerClass != null) { try { final Class decoraManagerType = ClassLoaderUtil.loadClass(decoraManagerClass); decoraManager = (DecoraManager) ClassUtil.newInstance(decoraManagerType); } catch (Exception ex) { log.error(\"Unable to load Decora manager class: \" + decoraManagerClass, ex); throw new ServletException(ex); } } else { decoraManager = createDecoraManager(); } // final String decoraParserClass = filterConfig.getInitParameter(PARAM_DECORA_PARSER); if (decoraParserClass != null) { try { final Class decoraParserType = ClassLoaderUtil.loadClass(decoraParserClass); decoraParser = (DecoraParser) ClassUtil.newInstance(decoraParserType); } catch (Exception ex) { log.error(\"Unable to load Decora parser class: \" + decoraParserClass, ex); throw new ServletException(ex); } } else { decoraParser = createDecoraParser(); } // final String decoraCache = filterConfig.getInitParameter(PARAM_DECORA_CACHE); if (decoraCache != null) { cached = Converter.get().toBoolean(decoraCache, false); } }\n\n    ### Response:", "ground_truth": "Initializes Decora filter. Loads manager and parser from init parameters.", "predict": "Initialize the server and parser objects to the values defined in the parameters of the FilterConfig."}, {"ID": 981, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function Buf(buffer) { this._initialSize = 64 * 1024; this._stepSize = this._initialSize; this._pos = 0; if (typeof buffer === 'number') { this._initialSize = buffer; } if (buffer instanceof Buffer) { this._buf = buffer; } else { this._buf = new Buffer(this._initialSize); } }\n\n    ### Response: Helper class to read and write from Buffer object.\n\n@constructor.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public FindFile onFile(final Consumer<File> fileConsumer) { if (consumers == null) { consumers = Consumers.of(fileConsumer); } else { consumers.add(fileConsumer); } return this; }\n\n    ### Response:", "ground_truth": "Registers file consumer", "predict": "Allows consumers to react to file found event and provides consumers list for consumers to react to other file found event"}, {"ID": 982, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean asBoolean(Object value) { if (value == null) { return false; } if (value instanceof Boolean) { return (Boolean) value; } return true; }\n\n    ### Response: Convert `value` to a boolean. Note that only `nil` and `false`\nare `false`, all other values are `true`.\n\n@param value\nthe value to convert.\n\n@return `value` as a boolean..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public FindFile searchPath(final URI searchPath) { File file; try { file = new File(searchPath); } catch (Exception ex) { throw new FindFileException(\"URI error: \" + searchPath, ex); } addPath(file); return this; }\n\n    ### Response:", "ground_truth": "Specifies the search path. Throws an exception if URI is invalid.", "predict": "Find and add the given search path to the search path string of this FindFile instance\nand returns this FindFile object for chaining of method calls\n\n@param searchPath The given search path to add to this objects search path string\n\n@return this objects for chaining of method calls\n\n// This method may throw an exception during its internal logic\n// so the method may be marked as throwing FindFileException"}, {"ID": 983, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function email($val, $id = 'email') { if (!preg_match(\"/^([_a-z0-9+-]+)(\\.[_a-z0-9-]+)*@([a-z0-9-]+)(\\.[a-z0-9-]+)*(\\.[a-z]{2,4})$/i\", $val)) { $this->add($id, 'The email address you entered is not valid.'); return false; } return true; }\n\n    ### Response: Is an email address valid?.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public FindFile searchPath(final URL searchPath) { File file = FileUtil.toContainerFile(searchPath); if (file == null) { throw new FindFileException(\"URL error: \" + searchPath); } addPath(file); return this; }\n\n    ### Response:", "ground_truth": "Specifies the search path. Throws an exception if URL is invalid.", "predict": "Checks if the given url points to a file and adds it to the search path"}, {"ID": 984, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setClassname(final String className) { Object proc = null; try { final Class<?> implClass = ProjectDef.class.getClassLoader().loadClass(className); try { final Method getInstance = implClass.getMethod(\"getInstance\"); proc = getInstance.invoke(null); } catch (final Exception ex) { proc = implClass.newInstance(); } } catch (final Exception ex) { throw new BuildException(ex); } this.projectWriter = (ProjectWriter) proc; }\n\n    ### Response: Class name for a user-supplied project writer. Use the \"type\"\nattribute to specify built-in project writer implementations.\n\n@param className\nfull class name.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public FindFile include(final String... patterns) { for (String pattern : patterns) { rules.include(pattern); } return this; }\n\n    ### Response:", "ground_truth": "Defines include patterns.", "predict": "Include specified patterns in regular expression searches of project resources"}, {"ID": 985, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void resetAllValues() { logic = new FilterFieldStringData(CommonFilterConstants.LOGIC_FILTER_VAR, CommonFilterConstants.LOGIC_FILTER_VAR_DESC); filterVars.clear(); filterVars.add(logic); }\n\n    ### Response: Reset all of the Field Variables to their default values..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public FindFile exclude(final String... patterns) { for (String pattern : patterns) { rules.exclude(pattern); } return this; }\n\n    ### Response:", "ground_truth": "Defines exclude patterns.", "predict": "Excludes objects that matches any of the given patterns"}, {"ID": 986, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (in Verbs) DeepCopy() Verbs { if in == nil { return nil } out := new(Verbs) in.DeepCopyInto(out) return *out }\n\n    ### Response: // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Verbs..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void addPath(final File path) { if (!path.exists()) { return; } if (pathList == null) { pathList = new LinkedList<>(); } pathList.add(path); }\n\n    ### Response:", "ground_truth": "Adds existing search path to the file list.\nNon existing files are ignored.\nIf path is a folder, it will be scanned for all files.", "predict": "// addPath copies a given file into the given pathList"}, {"ID": 987, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function add_footer() { $screen = get_current_screen(); if ( ! isset( $screen->parent_file ) ) { return; } if ( 'themes.php' !== $screen->parent_file ) { return; } if ( ! $this->product->is_theme() ) { return; } $version = $this->get_rollback(); if ( empty( $version ) ) { return; } ?> <script type=\"text/javascript\"> jQuery(document).ready(function ($) { setInterval(checkTheme, 500); function checkTheme() { var theme = '<?php echo esc_attr( $this->product->get_slug() ); ?>-action'; if (jQuery('#' + theme).length > 0) { if (jQuery('.theme-overlay.active').is(':visible')) { if (jQuery('#' + theme + '-rollback').length === 0) { jQuery('.theme-actions .active-theme').prepend('<a class=\"button\" style=\"float:left\" id=\"' + theme + '-rollback\" href=\"<?php echo esc_url( wp_nonce_url( admin_url( 'admin-post.php?action=' . $this->product->get_key() . '_rollback' ), $this->product->get_key() . '_rollback' ) ); ?>\">Rollback to v<?php echo esc_attr( $version['version'] ); ?></a>') } } } } }) </script> <?php }\n\n    ### Response: Add js scripts for themes rollback..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<File> findAll() { List<File> allFiles = new ArrayList<>(); File file; while ((file = nextFile()) != null) { allFiles.add(file); } return allFiles; }\n\n    ### Response:", "ground_truth": "Finds all files and returns list of founded files.", "predict": "The function reads through all objects of file type from the given directory."}, {"ID": 988, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static SelectStatement forSelection(CFMetaData cfm, Selection selection) { return new SelectStatement(cfm, 0, defaultParameters, selection, null); }\n\n    ### Response: queried data through processColumnFamily..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void init() { rules.detectMode(); todoFiles = new LinkedList<>(); todoFolders = new LinkedList<>(); if (pathList == null) { pathList = new LinkedList<>(); return; } if (pathListOriginal == null) { pathListOriginal = (LinkedList<File>) pathList.clone(); } String[] files = new String[pathList.size()]; int index = 0; Iterator<File> iterator = pathList.iterator(); while (iterator.hasNext()) { File file = iterator.next(); if (file.isFile()) { files[index++] = file.getAbsolutePath(); iterator.remove(); } } if (index != 0) { FilesIterator filesIterator = new FilesIterator(files); todoFiles.add(filesIterator); } }\n\n    ### Response:", "ground_truth": "Initializes file walking.\nSeparates input files and folders.", "predict": "Pre-process columns and values to detect schema changes and produce appropriate error messages to the user."}, {"ID": 989, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def updated(self, user, options): \"\"\" True if the issue was commented by given user \"\"\" for comment in self.comments: created = dateutil.parser.parse(comment[\"created\"]).date() try: if (comment[\"author\"][\"emailAddress\"] == user.email and created >= options.since.date and created < options.until.date): return True except KeyError: pass return False\n\n    ### Response: True if the issue was commented by given user.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Iterator<File> iterator() { return new Iterator<File>() { private File nextFile; @Override public boolean hasNext() { nextFile = nextFile(); return nextFile != null; } @Override public File next() { if (nextFile == null) { throw new NoSuchElementException(); } return nextFile; } @Override public void remove() { throw new UnsupportedOperationException(); } }; }\n\n    ### Response:", "ground_truth": "Returns file walking iterator.", "predict": "The iterator iterates over all objects of type File in the order in which they were added to the listener. It does not support the remove() method because file objects cannot be removed once added to the listener."}, {"ID": 990, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function attachPublicCacheLimiterHeader(ResponseInterface $response, int $time): ResponseInterface { $cache_expire = session_cache_expire(); $max_age = $cache_expire * 60; $expires = gmdate(self::DATE_FORMAT, $time + $max_age); $cache_control = \"public, max-age={$max_age}\"; $last_modified = gmdate(self::DATE_FORMAT, $time); return $response ->withAddedHeader('Expires', $expires) ->withAddedHeader('Cache-Control', $cache_control) ->withAddedHeader('Last-Modified', $last_modified); }\n\n    ### Response: Attach a public cache limiter header to the given response.\n\n@param \\Psr\\Http\\Message\\ResponseInterface   $response\n@param int                                   $time\n@return \\Psr\\Http\\Message\\ResponseInterface\n\n@see https://github.com/php/php-src/blob/PHP-7.0/ext/session/session.c#L1267-L1284.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public WiringMode resolveBeanWiringMode(final Class type) { PetiteBean petiteBean = ((Class<?>) type).getAnnotation(PetiteBean.class); return petiteBean != null ? petiteBean.wiring() : WiringMode.DEFAULT; }\n\n    ### Response:", "ground_truth": "Resolves bean's auto-wire flag from the annotation. Returns default auto-wire if annotation doesn't exist.", "predict": "Resolves the wiring mode of the given bean to one of the following values: default, singleton and prototype."}, {"ID": 991, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private ResourceBundle getBundle() { String bundleKey = getBundleKey(); if (bundles.containsKey(bundleKey)) { return bundles.get(bundleKey); } else { ResourceBundle bundle = loadBundle(); bundles.put(bundleKey, bundle); return bundle; } }\n\n    ### Response: Gets a bundle.  First tries to find one in the cache, then loads it if\nit can't find one..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String resolveBeanName(final Class type, final boolean useLongTypeName) { PetiteBean petiteBean = ((Class<?>)type).getAnnotation(PetiteBean.class); String name = null; if (petiteBean != null) { name = petiteBean.value().trim(); } if ((name == null) || (name.length() == 0)) { if (useLongTypeName) { name = type.getName(); } else { name = StringUtil.uncapitalize(type.getSimpleName()); } } return name; }\n\n    ### Response:", "ground_truth": "Resolves bean's name from bean annotation or type name. May be used for resolving bean name\nof base type during registration of bean subclass.", "predict": "Resolves the bean name of the given bean to the given class or component, or\nreturns an empty string for null arguments.."}, {"ID": 992, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get(cls, rkey): \"\"\"Get image previously registered with key rkey. If key not exist, raise StockImageException \"\"\" if rkey in cls._cached: logger.info('Resource %s is in cache.' % rkey) return cls._cached[rkey] if rkey in cls._stock: img = cls._load_image(rkey) return img else: raise StockImageException('StockImage: %s not registered.' % rkey)\n\n    ### Response: Get image previously registered with key rkey.\n        If key not exist, raise StockImageException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public PrintWriter getWriter() { if (outWriter == null) { if (outStream != null) { throw new IllegalStateException(\"Can't call getWriter() after getOutputStream()\"); } bufferedWriter = new FastCharArrayWriter(); outWriter = new PrintWriter(bufferedWriter) { @Override public void close() { // do not close the print writer after rendering // since it will remove reference to bufferedWriter } }; } return outWriter; }\n\n    ### Response:", "ground_truth": "Returns a writer.", "predict": "Get output stream or create PrintWriter for rendering"}, {"ID": 993, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Convert_v1_MetricSpec_To_autoscaling_MetricSpec(in *v1.MetricSpec, out *autoscaling.MetricSpec, s conversion.Scope) error { return autoConvert_v1_MetricSpec_To_autoscaling_MetricSpec(in, out, s) }\n\n    ### Response: // Convert_v1_MetricSpec_To_autoscaling_MetricSpec is an autogenerated conversion function..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ServletOutputStream getOutputStream() { if (outStream == null) { if (outWriter != null) { throw new IllegalStateException(\"Can't call getOutputStream() after getWriter()\"); } bufferOutputStream = new FastByteArrayServletOutputStream(); outStream = bufferOutputStream; } return outStream; }\n\n    ### Response:", "ground_truth": "Returns a servlet output stream.", "predict": "The method returns a wrapper around a fast ByteArrayOutputStream to provide a simple output stream for the servlet to send its response to the client.."}, {"ID": 994, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (v Vocabulary) PartOfSpeech(w string) ([]PartOfSpeech, error) { if v.c.WordnikApiKey == \"\" { return []PartOfSpeech{}, Error(\"WordnikApiKey required.\") } contents, err := makeReq(fmt.Sprintf(partOfSpeechApiUrl, w, v.c.WordnikApiKey)) if err != nil { return []PartOfSpeech{}, err } var result []PartOfSpeech err = json.Unmarshal(contents, &result) if err != nil { return []PartOfSpeech{}, err } return result, nil }\n\n    ### Response: // Returns a list of PartOfSpeech structs representing the POS of the given word..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getClassName() { switch (sort) { case VOID: return \"void\"; case BOOLEAN: return \"boolean\"; case CHAR: return \"char\"; case BYTE: return \"byte\"; case SHORT: return \"short\"; case INT: return \"int\"; case FLOAT: return \"float\"; case LONG: return \"long\"; case DOUBLE: return \"double\"; case ARRAY: StringBuilder stringBuilder = new StringBuilder(getElementType().getClassName()); for (int i = getDimensions(); i > 0; --i) { stringBuilder.append(\"[]\"); } return stringBuilder.toString(); case OBJECT: case INTERNAL: return valueBuffer.substring(valueBegin, valueEnd).replace('/', '.'); default: throw new AssertionError(); } }\n\n    ### Response:", "ground_truth": "Returns the binary name of the class corresponding to this type. This method must not be used\non method types.\n\n@return the binary name of the class corresponding to this type.", "predict": "// Returns the name of the given sort, either VOID, BOOLEAN, CHAR, BYTE, SHORT, INT, \n    //  FLOAT, LONG, DOUBLE, ARRAY, or OBJECT/INTERNAL"}, {"ID": 995, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getDashletFields() { /** * if you want to use jQuery color picker instead of HTML5 * <input type='color' />, uncomment out the lined which add * the extra class, and comment out the lines which are setting * the attribute to type => color */ $extraClasses = MultiValueTextField::create('ExtraClasses'); $fields = new FieldList(new TextField('Title', _t('Dashlet.TITLE', 'Title')), $extraClasses); $this->extend('updateDashletFields', $fields); return $fields; }\n\n    ### Response: Gets the fields used for editing this dashlet on the frontend\n\n@return FieldSet.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String getConstructorDescriptor(final Constructor<?> constructor) { StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append('('); Class<?>[] parameters = constructor.getParameterTypes(); for (Class<?> parameter : parameters) { appendDescriptor(parameter, stringBuilder); } return stringBuilder.append(\")V\").toString(); }\n\n    ### Response:", "ground_truth": "Returns the descriptor corresponding to the given constructor.\n\n@param constructor a {@link Constructor} object.\n@return the descriptor of the given constructor.", "predict": "Get the constructor descriptor string of the given constructor\n    static String getConstructorDescriptor(Constructor<?> constructor) {\n        StringBuilder stringBuilder = new StringBuilder();\n        stringBuilder.append('(');\n        Class<?>[] parameters = constructor.getParameterTypes();\n        for (Class<?> parameter : parameters) {\n            appendDescriptor(parameter, stringBuilder);\n        }\n        return stringBuilder.append(\")V\").toString();\n    }\n\n    static void appendDescriptor(Class<?> parameter, StringBuilder stringBuilder) {\n        stringBuilder.append(parameter.getName());\n    }"}, {"ID": 996, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function withExtensionRequest(Extensions $extensions): self { $obj = clone $this; if (!isset($obj->_attributes)) { $obj->_attributes = new Attributes(); } $obj->_attributes = $obj->_attributes->withUnique( Attribute::fromAttributeValues( new ExtensionRequestValue($extensions))); return $obj; }\n\n    ### Response: Get self with extension request attribute.\n\n@param Extensions $extensions Extensions to request\n@return self.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String getMethodDescriptor(final Type returnType, final Type... argumentTypes) { StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append('('); for (Type argumentType : argumentTypes) { argumentType.appendDescriptor(stringBuilder); } stringBuilder.append(')'); returnType.appendDescriptor(stringBuilder); return stringBuilder.toString(); }\n\n    ### Response:", "ground_truth": "Returns the descriptor corresponding to the given argument and return types.\n\n@param returnType the return type of the method.\n@param argumentTypes the argument types of the method.\n@return the descriptor corresponding to the given argument and return types.", "predict": "Generates method level signature string of the given method."}, {"ID": 997, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def run(self): \"\"\"Fetch remote code.\"\"\" link = self.content[0] try: r = requests.get(link) r.raise_for_status() self.content = [r.text] return super(RemoteCodeBlock, self).run() except Exception: document = self.state.document err = 'Unable to resolve ' + link return [document.reporter.warning(str(err), line=self.lineno)]\n\n    ### Response: Fetch remote code..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String getMethodDescriptor(final Method method) { StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append('('); Class<?>[] parameters = method.getParameterTypes(); for (Class<?> parameter : parameters) { appendDescriptor(parameter, stringBuilder); } stringBuilder.append(')'); appendDescriptor(method.getReturnType(), stringBuilder); return stringBuilder.toString(); }\n\n    ### Response:", "ground_truth": "Returns the descriptor corresponding to the given method.\n\n@param method a {@link Method} object.\n@return the descriptor of the given method.", "predict": "The method generates the signature for the given method in the specified order of inputs and output and appends it to the stringBuilder."}, {"ID": 998, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String nextId() { String id = \"-1\"; do { // when we reach max int, reset to zero if (nextId.get() == Integer.MAX_VALUE) { nextId.set(0); } id = String.format(\"%d\", nextId.getAndIncrement()); } while (hasClient(id)); return id; }\n\n    ### Response: Return next client id\n\n@return Next client id.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void appendDescriptor(final StringBuilder stringBuilder) { if (sort == OBJECT) { stringBuilder.append(valueBuffer, valueBegin - 1, valueEnd + 1); } else if (sort == INTERNAL) { stringBuilder.append('L').append(valueBuffer, valueBegin, valueEnd).append(';'); } else { stringBuilder.append(valueBuffer, valueBegin, valueEnd); } }\n\n    ### Response:", "ground_truth": "Appends the descriptor corresponding to this type to the given string buffer.\n\n@param stringBuilder the string builder to which the descriptor must be appended.", "predict": "Append the given sort to the given stringBuilder"}, {"ID": 999, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def ping(payload, &blk) send(type: :ping, stream: 0, payload: payload) once(:ack, &blk) if blk end\n\n    ### Response: Sends PING frame to the peer.\n\n @param payload [String] optional payload must be 8 bytes long\n @param blk [Proc] callback to execute when PONG is received.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int getSize() { switch (sort) { case VOID: return 0; case BOOLEAN: case CHAR: case BYTE: case SHORT: case INT: case FLOAT: case ARRAY: case OBJECT: case INTERNAL: return 1; case LONG: case DOUBLE: return 2; default: throw new AssertionError(); } }\n\n    ### Response:", "ground_truth": "Returns the size of values of this type. This method must not be used for method types.\n\n@return the size of values of this type, i.e., 2 for {@code long} and {@code double}, 0 for\n{@code void} and 1 otherwise.", "predict": "Get the Size of an Object in terms of its internal representation"}, {"ID": 1000, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getControllers() { $controllers = new Collection; if ($controller = $this->option('use-controller')) { $this->addControllerIfNotExists($controllers, app($controller)); return $controllers; } foreach ($this->router->getRoutes() as $collections) { foreach ($collections as $route) { if ($controller = $route->getControllerInstance()) { $this->addControllerIfNotExists($controllers, $controller); } } } return $controllers; }\n\n    ### Response: Get all the controller instances.\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int getArgumentsAndReturnSizes(final String methodDescriptor) { int argumentsSize = 1; // Skip the first character, which is always a '('. int currentOffset = 1; int currentChar = methodDescriptor.charAt(currentOffset); // Parse the argument types and compute their size, one at a each loop iteration. while (currentChar != ')') { if (currentChar == 'J' || currentChar == 'D') { currentOffset++; argumentsSize += 2; } else { while (methodDescriptor.charAt(currentOffset) == '[') { currentOffset++; } if (methodDescriptor.charAt(currentOffset++) == 'L') { // Skip the argument descriptor content. currentOffset = methodDescriptor.indexOf(';', currentOffset) + 1; } argumentsSize += 1; } currentChar = methodDescriptor.charAt(currentOffset); } currentChar = methodDescriptor.charAt(currentOffset + 1); if (currentChar == 'V') { return argumentsSize << 2; } else { int returnSize = (currentChar == 'J' || currentChar == 'D') ? 2 : 1; return argumentsSize << 2 | returnSize; } }\n\n    ### Response:", "ground_truth": "Computes the size of the arguments and of the return value of a method.\n\n@param methodDescriptor a method descriptor.\n@return the size of the arguments of the method (plus one for the implicit this argument),\nargumentsSize, and the size of its return value, returnSize, packed into a single int i =\n{@code (argumentsSize << 2) | returnSize} (argumentsSize is therefore equal to {@code\ni >> 2}, and returnSize to {@code i & 0x03}).", "predict": "Parses argument and return size of the given method."}, {"ID": 1001, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected JCTree resource() { int startPos = token.pos; if (token.kind == FINAL || token.kind == MONKEYS_AT) { JCModifiers mods = optFinal(Flags.FINAL); JCExpression t = parseType(); return variableDeclaratorRest(token.pos, mods, t, ident(), true, null); } JCExpression t = term(EXPR | TYPE); if ((lastmode & TYPE) != 0 && LAX_IDENTIFIER.accepts(token.kind)) { JCModifiers mods = toP(F.at(startPos).Modifiers(Flags.FINAL)); return variableDeclaratorRest(token.pos, mods, t, ident(), true, null); } else { checkVariableInTryWithResources(startPos); if (!t.hasTag(IDENT) && !t.hasTag(SELECT)) { log.error(t.pos(), \"try.with.resources.expr.needs.var\"); } return t; } }\n\n    ### Response: Resource = VariableModifiersOpt Type VariableDeclaratorId \"=\" Expression\n| Expression.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setRollbackOnly(final Throwable th) { if (!isNoTransaction()) { if ((status != STATUS_MARKED_ROLLBACK) && (status != STATUS_ACTIVE)) { throw new JtxException(\"TNo active TX that can be marked as rollback only\"); } } rollbackCause = th; status = STATUS_MARKED_ROLLBACK; }\n\n    ### Response:", "ground_truth": "Modify the transaction associated with the target object such that the only possible outcome\nof the transaction is to roll back the transaction.", "predict": "The setRollbackOnly() method sets the status of the transaction to STATUS_MARKED_ROLLBACK and stores the exception, if any, in the rollbackCause object if the transaction is not in the STATUS_ACTIVE status."}, {"ID": 1002, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func MemBytes(m int64) optionSetter { return func(o *options) error { if m < 0 { return fmt.Errorf(\"MemBytes should be >= 0\") } o.memBytes = m return nil } }\n\n    ### Response: // MemBytes specifies the largest buffer to hold in RAM before writing to disk, default is 1MB.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void commitOrRollback(boolean doCommit) { if (log.isDebugEnabled()) { if (doCommit) { log.debug(\"Commit JTX\"); } else { log.debug(\"Rollback JTX\"); } } boolean forcedRollback = false; if (!isNoTransaction()) { if (isRollbackOnly()) { if (doCommit) { doCommit = false; forcedRollback = true; } } else if (!isActive()) { if (isCompleted()) { throw new JtxException(\"TX is already completed, commit or rollback should be called once per TX\"); } throw new JtxException(\"No active TX to \" + (doCommit ? \"commit\" : \"rollback\")); } } if (doCommit) { commitAllResources(); } else { rollbackAllResources(forcedRollback); } }\n\n    ### Response:", "ground_truth": "Performs either commit or rollback on all transaction resources.", "predict": "The method-level comment describes what the method does and its parameters and also provides information on its execution flows and its error states to help the reader better understand the method and its use in the program."}, {"ID": 1003, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (db *Database) Table(table string) *Database { db = db.clone() db.tables = append(db.tables, handleIdentifier(table)) return db }\n\n    ### Response: // Table appends the table string to FROM. It has the same behavior of Model, but\n// passing the tablename directly as a string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void rollbackAllResources(final boolean wasForced) { status = STATUS_ROLLING_BACK; Exception lastException = null; Iterator<JtxResource> it = resources.iterator(); while (it.hasNext()) { JtxResource resource = it.next(); try { resource.rollbackTransaction(); } catch (Exception ex) { lastException = ex; } finally { it.remove(); } } txManager.removeTransaction(this); status = STATUS_ROLLEDBACK; if (lastException != null) { status = STATUS_UNKNOWN; throw new JtxException(\"Rollback failed: one or more TX resources couldn't rollback a TX\", lastException); } if (wasForced) { throw new JtxException(\"TX rolled back because it has been marked as rollback-only\", rollbackCause); } }\n\n    ### Response:", "ground_truth": "Rollbacks all attached resources. Resource will be closed. and detached from this transaction.\nIf exception occurs, it will be rethrown at the end.", "predict": "// This method may rollback the transaction and its child transaction(s) of the given transaction. It may fail to rollback the transaction because of the following reasons\n// 1. The given transaction may be marked as rollback-only transaction\n// 2. The given transaction may be the first transaction of the transaction hierarchy, hence the first child transaction may fail to rollback because there may be a second child transaction\n// 3. The given transaction may be the first transaction of the transaction hierarchy, hence the first child transaction may fail to rollback because there may be a second child transaction\n// 4. The given transaction may be the first transaction of the transaction hierarchy, hence the first child transaction may fail to rollback because there may be a second child transaction\n// 5. The given transaction may be the first transaction of the transaction hierarchy, hence the first child transaction may fail to rollback because there may be a second child transaction\n// 6. The given transaction may be the first transaction of the transaction hierarchy, hence the first child"}, {"ID": 1004, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function determineDateForPrefix($startDate, $endDate) { // The default date value should look like \"*/*/*\" after joining $dateParts = array_fill_keys(['Y', 'm', 'd'], self::PREFIX_WILDCARD); // Narrow down the date by replacing the WILDCARDs with values if they // are the same for the start and end date. if ($startDate && $endDate) { foreach ($dateParts as $key => &$value) { $candidateValue = date($key, $startDate); if ($candidateValue === date($key, $endDate)) { $value = $candidateValue; } else { break; } } } return join('/', $dateParts); }\n\n    ### Response: Uses the provided date values to determine the date portion of the prefix.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <E> E requestResource(final Class<E> resourceType) { if (isCompleted()) { throw new JtxException(\"TX is already completed, resource are not available after commit or rollback\"); } if (isRollbackOnly()) { throw new JtxException(\"TX is marked as rollback only, resource are not available\", rollbackCause); } if (!isNoTransaction() && !isActive()) { throw new JtxException(\"Resources are not available since TX is not active\"); } checkTimeout(); E resource = lookupResource(resourceType); if (resource == null) { int maxResources = txManager.getMaxResourcesPerTransaction(); if ((maxResources != -1) && (resources.size() >= maxResources)) { throw new JtxException(\"TX already has attached max. number of resources\"); } JtxResourceManager<E> resourceManager = txManager.lookupResourceManager(resourceType); resource = resourceManager.beginTransaction(mode, isActive()); resources.add(new JtxResource<>(this, resourceManager, resource)); } return resource; }\n\n    ### Response:", "ground_truth": "Requests a resource. If resource is not found, it will be created and new transaction will be started on it.", "predict": "Attaches the given resource to the transaction and checks for potential timeouts and other error states"}, {"ID": 1005, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getRecommendations() { if (null !== $this->recommendations) { return $this->recommendations; } if (null === $this->data) { $this->initializeProfile(); } if (!isset($this->data['recommendations']['tests'])) { return $this->recommendations = array(); } $this->recommendations = array(); foreach ($this->data['recommendations']['tests'] as $test) { $this->recommendations[] = new Test($test['name'], $test['state'], isset($test['failures']) ? $test['failures'] : array()); } return $this->recommendations; }\n\n    ### Response: Returns recommendations associated with this profile.\n\n@return Test[].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void popName() { if (isPushed) { if (pushedComma) { writeComma(); } String name = pushedName; pushedName = null; isPushed = false; writeName(name); } }\n\n    ### Response:", "ground_truth": "Writes stored name to JSON string. Cleans storage.", "predict": "Populates the name of the function on the stack."}, {"ID": 1006, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def exists(project, credentials): \"\"\"Check if the project exists\"\"\" user, oauth_access_token = parsecredentials(credentials) #pylint: disable=unused-variable printdebug(\"Checking if project \" + project + \" exists for \" + user) return os.path.isdir(Project.path(project, user))\n\n    ### Response: Check if the project exists.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void writeString(final String value) { popName(); write(StringPool.QUOTE); int len = value.length(); for (int i = 0; i < len; i++) { char c = value.charAt(i); switch (c) { case '\"': write(\"\\\\\\\"\"); break; case '\\\\': write(\"\\\\\\\\\"); break; case '/': if (strictStringEncoding) { write(\"\\\\/\"); } else { write(c); } break; case '\\b': write(\"\\\\b\"); break; case '\\f': write(\"\\\\f\"); break; case '\\n': write(\"\\\\n\"); break; case '\\r': write(\"\\\\r\"); break; case '\\t': write(\"\\\\t\"); break; default: if (Character.isISOControl(c)) { unicode(c); } else { write(c); } } } write(StringPool.QUOTE); }\n\n    ### Response:", "ground_truth": "Write a quoted and escaped value to the output.", "predict": "Writes the given string to the output. If strictStringEncoding is true, escape sequences for control characters, newline, tab, backspace, space, formfeed, escape, bell, and carriage return are replaced by the corresponding character codes, otherwise these escape sequences may produce an output with control characters or newline symbols in the output string"}, {"ID": 1007, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getGroups(Communicator $communicator = null): ClassValidationArray { if ($communicator !== null) { $groupsJSON = $communicator->get('api/contacts/'.$this->contactID. '/groups'); $groupStd = json_decode($groupsJSON); $groups = RecipientFactory::createProcessedGroupsFromStdClassArray($groupStd); $this->groups = $groups; $this->fetchedGroups = true; } return $this->groups; }\n\n    ### Response: Returns an array of all the Groups the group is referenced in.\nIf a communicator is not provided it will not fetch memberships from the API\nbut return those that has been fetched, if any.\n@param Communicator $communicator Used to fetch Groups from the API.\n@return ClassValidationArray An array of Group objects..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void unicode(final char c) { write(\"\\\\u\"); int n = c; for (int i = 0; i < 4; ++i) { int digit = (n & 0xf000) >> 12; char hex = CharUtil.int2hex(digit); write(hex); n <<= 4; } }\n\n    ### Response:", "ground_truth": "Writes unicode representation of a character.", "predict": "Writes the UTF8 representation of the UTF16 character provided in the form of an escape string to the output stream"}, {"ID": 1008, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func increaseDelay(oldDelay time.Duration, factor float64, min, max time.Duration) time.Duration { delay := time.Duration(float64(oldDelay) * factor) if delay < min { delay = min } if delay > max { delay = max } return delay }\n\n    ### Response: // increaseDelay returns an delay, increased from an old delay with a given\n// factor, limited to given min & max..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void write(final CharSequence charSequence) { popName(); try { out.append(charSequence); } catch (IOException ioex) { throw new JsonException(ioex); } }\n\n    ### Response:", "ground_truth": "Appends char sequence to the buffer. Used for numbers, nulls, booleans, etc.", "predict": "// Writes the given CharSequence to the output stream, replacing the previous\n// name with an underscore (_) when writing to a name field."}, {"ID": 1009, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def FromFile(f, more_formatters=lambda x: None, more_predicates=lambda x: None, _constructor=None): \"\"\"Parse a template from a file, using a simple file format. This is useful when you want to include template options in a data file, rather than in the source code. The format is similar to HTTP or E-mail headers. The first lines of the file can specify template options, such as the metacharacters to use. One blank line must separate the options from the template body. Example: default-formatter: none meta: {{}} format-char: : <blank line required> Template goes here: {{variable:html}} Args: f: A file handle to read from. Caller is responsible for opening and closing it. \"\"\" _constructor = _constructor or Template options = {} # Parse lines until the first one that doesn't look like an option while 1: line = f.readline() match = _OPTION_RE.match(line) if match: name, value = match.group(1), match.group(2) # Accept something like 'Default-Formatter: raw'. This syntax is like # HTTP/E-mail headers. name = name.lower() # In Python 2.4, kwargs must be plain strings name = name.encode('utf-8') if name in _OPTION_NAMES: name = name.replace('-', '_') value = value.strip() if name == 'default_formatter' and value.lower() == 'none': value = None options[name] = value else: break else: break if options: if line.strip(): raise CompilationError( 'Must be one blank line between template options and body (got %r)' % line) body = f.read() else: # There were no options, so no blank line is necessary. body = line + f.read() return _constructor(body, more_formatters=more_formatters, more_predicates=more_predicates, **options)\n\n    ### Response: Parse a template from a file, using a simple file format.\n\n  This is useful when you want to include template options in a data file,\n  rather than in the source code.\n\n  The format is similar to HTTP or E-mail headers.  The first lines of the file\n  can specify template options, such as the metacharacters to use.  One blank\n  line must separate the options from the template body.\n\n  Example:\n\n    default-formatter: none\n    meta: {{}}\n    format-char: :\n    \n    Template goes here: {{variable:html}}\n\n  Args:\n    f: A file handle to read from.  Caller is responsible for opening and\n    closing it..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public LagartoDomBuilderConfig setParsingErrorLogLevelName(String logLevel) { logLevel = logLevel.trim().toUpperCase(); parsingErrorLogLevel = Logger.Level.valueOf(logLevel); return this; }\n\n    ### Response:", "ground_truth": "Sets parsing error log level as a name.", "predict": "\n    Sets the name of the log level for Parsing Errors in the Lagarto Dom Builder log."}, {"ID": 1010, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function (sep) { var nonEncodedSep = []; for (var i = 0, len = sep.length; i < len; i++) { if (sep[i] == encodeURIComponent(sep[i])) { nonEncodedSep.push(sep[i]); } } return nonEncodedSep; }\n\n    ### Response: Return the array of separators that cannot be encoded\n@param {Array} sep Array of separators\n@return {Array} array of non encodable separators.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void startRegion(final int start, final int tagLen, final int deepLevel) { this.regionStart = start + tagLen; this.regionLength = 0; this.regionTagStart = start; this.deepLevel = deepLevel; }\n\n    ### Response:", "ground_truth": "Starts defining region by setting the start index and reset region length to zero.", "predict": "Initiates the start of an anonymous region with the given parameters\n\npublic void startRegion(int start, int tagLen, int deepLevel);\n\nSets the start of an anonymous region to the given values of start, tag length, and deep level;\n\nSets the values of regionStart to the given start, regionLength to 0, and regionTagStart to the given start;\n\nSets the values of deepLevel to the given deep level;"}, {"ID": 1011, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setWorkflowStageToPublished(PublishEvent $event) { $document = $event->getDocument(); if (!$this->supports($event)) { return; } $this->setWorkflowStage($document, $event->getAccessor(), WorkflowStage::PUBLISHED, $event->getLocale(), true); }\n\n    ### Response: Sets the workflow stage for the passed document to published.\n\n@param PublishEvent $event.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean isContaining(final String include) { if (value == null) { return false; } if (splits == null) { splits = StringUtil.splitc(value, ' '); } for (String s: splits) { if (s.equals(include)) { return true; } } return false; }\n\n    ### Response:", "ground_truth": "Returns true if attribute is containing some value.", "predict": "Checks if the given string is contained in the given string or string split string values (whose values could be normalized to lower case and split to spaces and tabulation symbols to form a string set to check against the given string to see if it is contained in this set of values of the string to check against the given string to see if it is contained in this set of values of the string to check against the given string to see if it is contained in this set of values of the string to check against the given string to see if it is contained in this set of values of the string to check against the given string to see if it is contained in this set of values of the string to check against the given string to see if it is contained in this set of values of the string to check against the given string to see if it is contained in this set of values of the string to check against the given string to see if it is contained in this set of values of the string to check against the given string to see if it is contained in this set"}, {"ID": 1012, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def handle(self, *args, **options): \"\"\" With no arguments, find the first user in the system with the is_superuser or is_staff flag set to true, or just the first user in the system period. With a single argument, look for the user with that value as the USERNAME_FIELD value. When a user is found, print out a URL slug you can paste into your browser to login as the user. \"\"\" user_model = get_user_model() if len(args) == 0: # find the first superuser, or staff member or user filters = [{\"is_superuser\": True}, {\"is_staff\": True}, {}] user = None for f in filters: try: user = user_model._default_manager.filter(**f).order_by(\"pk\").first() if user: break except FieldError as e: pass if user is None: raise CommandError(\"No users found!\") elif len(args) == 1: # find the user with the USERNAME_FIELD equal to the command line # argument try: user = user_model._default_manager.get_by_natural_key(args[0]) except user_model.DoesNotExist as e: raise CommandError(\"The user does not exist\") else: raise CommandError(\"You passed me too many arguments\") signer = TimestampSigner() signature = signer.sign(str(user.pk)) self.stdout.write(reverse(login, args=(signature,)))\n\n    ### Response: With no arguments, find the first user in the system with the\n        is_superuser or is_staff flag set to true, or just the first user in\n        the system period.\n\n        With a single argument, look for the user with that value as the\n        USERNAME_FIELD value.\n\n        When a user is found, print out a URL slug you can paste into your\n        browser to login as the user..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void registerPseudoFunction(final Class<? extends PseudoFunction> pseudoFunctionType) { PseudoFunction pseudoFunction; try { pseudoFunction = ClassUtil.newInstance(pseudoFunctionType); } catch (Exception ex) { throw new CSSellyException(ex); } PSEUDO_FUNCTION_MAP.put(pseudoFunction.getPseudoFunctionName(), pseudoFunction); }\n\n    ### Response:", "ground_truth": "Registers pseudo function.", "predict": "\n    Public static void registerPseudoFunction(Class<? extends PseudoFunction> pseudoFunctionType)\n    throws Exception\n    {\n        PseudoFunctionPseudoFunctionName pseudofunctionName;\n        try\n        {\n            pseudofunctionName = ClassUtil.newInstace(pseudoFunctionType);\n            PSEUDO_FUNCTION_MAP.put(pseudofunctionName.getPseudoFunctionName(), pseudofunctionName);\n        }\n        catch (Exception ex)\n        {\n            throw new Exception(ex);\n        }\n    }"}, {"ID": 1013, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function hasher() { is_null($this->hasher) and $this->hasher = new \\PHPSecLib\\Crypt_Hash(); return $this->hasher; }\n\n    ### Response: Returns the hash object and creates it if necessary\n\n@return  PHPSecLib\\Crypt_Hash.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static PseudoFunction<?> lookupPseudoFunction(final String pseudoFunctionName) { PseudoFunction pseudoFunction = PSEUDO_FUNCTION_MAP.get(pseudoFunctionName); if (pseudoFunction == null) { throw new CSSellyException(\"Unsupported pseudo function: \" + pseudoFunctionName); } return pseudoFunction; }\n\n    ### Response:", "ground_truth": "Lookups pseudo function for given pseudo function name.", "predict": "Returns the hash object and creates it if necessary\n\nPseudo function \"PSEUDO_FUNCTION_NAME\" looks up in the cache and returns the corresponding PseudoFunction object if found; otherwise, throws an Exception."}, {"ID": 1014, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewConstrain(operator, version string) *Constraint { constraint := new(Constraint) constraint.SetOperator(operator) constraint.SetVersion(version) return constraint }\n\n    ### Response: // Return a new Constrain and sets operator and version to compare.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void visit(final int version, int access, final String name, final String signature, final String superName, final String[] interfaces) { wd.init(name, superName, this.suffix, this.reqProxyClassName); // change access of destination access &= ~AsmUtil.ACC_ABSTRACT; // write destination class final int v = ProxettaAsmUtil.resolveJavaVersion(version); wd.dest.visit(v, access, wd.thisReference, signature, wd.superName, null); wd.proxyAspects = new ProxyAspectData[aspects.length]; for (int i = 0; i < aspects.length; i++) { wd.proxyAspects[i] = new ProxyAspectData(wd, aspects[i], i); } }\n\n    ### Response:", "ground_truth": "Creates destination subclass header from current target class. Destination name is created from targets by\nadding a suffix and, optionally, a number. Destination extends the target.", "predict": "// Override default behavior of visited method and change access for visited method to public and change signature and destination access for visited method to ~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~(~("}, {"ID": 1015, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def decktape(): '''Install DeckTape. DeckTape is a \"high-quality PDF exporter for HTML5 presentation frameworks\". It can be used to create PDFs from reveal.js presentations. More info: https://github.com/astefanutti/decktape https://github.com/hakimel/reveal.js/issues/1252#issuecomment-198270915 ''' run('mkdir -p ~/bin/decktape') if not exists('~/bin/decktape/decktape-1.0.0'): print_msg('\\n## download decktape 1.0.0\\n') run('cd ~/bin/decktape && ' 'curl -L https://github.com/astefanutti/decktape/archive/' 'v1.0.0.tar.gz | tar -xz --exclude phantomjs') run('cd ~/bin/decktape/decktape-1.0.0 && ' 'curl -L https://github.com/astefanutti/decktape/releases/' 'download/v1.0.0/phantomjs-linux-x86-64 -o phantomjs') run('cd ~/bin/decktape/decktape-1.0.0 && ' 'chmod +x phantomjs') run('ln -snf ~/bin/decktape/decktape-1.0.0 ~/bin/decktape/active', msg='\\n## link installed decktape version as active') print_msg('\\nCreate PDF from reveal.js presentation:\\n\\n ' '# serve presentation:\\n ' 'cd ~/repos/my_presi/reveal.js/ && npm start\\n\\n ' '# create pdf in another shell:\\n ' 'cd ~/bin/decktape/active && \\\\\\n ' './phantomjs decktape.js --size 1280x800 localhost:8000 ' '~/repos/my_presi/my_presi.pdf')\n\n    ### Response: Install DeckTape.\n\n    DeckTape is a \"high-quality PDF exporter for HTML5 presentation\n    frameworks\".  It can be used to create PDFs from reveal.js presentations.\n\n    More info:\n      https://github.com/astefanutti/decktape\n      https://github.com/hakimel/reveal.js/issues/1252#issuecomment-198270915.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public AnnotationVisitor visitAnnotation(final String desc, final boolean visible) { AnnotationVisitor destAnn = wd.dest.visitAnnotation(desc, visible); // [A3] return new AnnotationVisitorAdapter(destAnn); }\n\n    ### Response:", "ground_truth": "Copies all destination type annotations to the target.", "predict": "\n    Override public <data_type_name> <method_name>(<data_type_name>) {\n\n     AnnotationVisitor destAnn = wd.dest.<data_type_name>.visitAnnotation(<data_type_name>.desc, <data_type_name>.visible);\n\n     return wd.<data_type_name>.newAnnotationVisitorAdapter(destAnn);\n    }"}, {"ID": 1016, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function splitEscaped(src, separator) { let escapeFlag = false, token = '', result = []; src.split('').forEach(letter => { if (escapeFlag) { token += letter; escapeFlag = false; } else if (letter === '\\\\') { escapeFlag = true; } else if (letter === separator) { result.push(token); token = ''; } else { token += letter; } }); if (token.length > 0) { result.push(token); } return result; }\n\n    ### Response: Split a string using a separator, if not preceded by a backslash.\nFor simplicity, this does not correctly handle two preceding backslashes\n@param src {String} value to parse\n@param separator {String} single character separator\n@returns [].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void makeStaticInitBlock() { if (wd.adviceClinits != null) { MethodVisitor mv = wd.dest.visitMethod(AsmUtil.ACC_STATIC, CLINIT, DESC_VOID, null, null); mv.visitCode(); for (String name : wd.adviceClinits) { mv.visitMethodInsn( INVOKESTATIC, wd.thisReference, name, DESC_VOID, false); } mv.visitInsn(RETURN); mv.visitMaxs(0, 0); mv.visitEnd(); } }\n\n    ### Response:", "ground_truth": "Creates static initialization block that simply calls all\nadvice static init methods in correct order.", "predict": "Static constructor to initialize advice annotations\npublic class Advisor{\n\n protected void makeStaticInitBlock() {\n     // Static constructor to initialize advice annotations\n     // If advice annotations exist, add them\n     // Otherwise, do nothing\n     // Use wd. advisorCLinit for advice annotations\n }\n\n     static {\n         // Use wd. advisorCLinit for advice annotations\n         // If advice annotations exist, add them\n         // Otherwise, do nothing\n    }\n\n     static{\n         // Use wd. advisorCLinit for advice annotations\n         // If advice annotations exist, add them\n         // Otherwise, do nothing\n    }\n\n     static{\n         // Use wd. advisorCLinit for advice annotations\n         // If advice annotations exist, add them\n         // Otherwise, do nothing\n    }\n\n     static{\n         // Use wd. advisorCLinit for advice annotations\n         // If advice annotations exist, add them\n         // Otherwise"}, {"ID": 1017, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def create_web_forward(self, zone_name, request_to, redirect_to, forward_type): \"\"\"Create a web forward record. Arguments: zone_name -- The zone in which the web forward is to be created. request_to -- The URL to be redirected. You may use http:// and ftp://. forward_type -- The type of forward. Valid options include: Framed HTTP_301_REDIRECT HTTP_302_REDIRECT HTTP_303_REDIRECT HTTP_307_REDIRECT \"\"\" web_forward = {\"requestTo\": request_to, \"defaultRedirectTo\": redirect_to, \"defaultForwardType\": forward_type} return self.rest_api_connection.post(\"/v1/zones/\" + zone_name + \"/webforwards\", json.dumps(web_forward))\n\n    ### Response: Create a web forward record.\n\n        Arguments:\n        zone_name -- The zone in which the web forward is to be created.\n        request_to -- The URL to be redirected. You may use http:// and ftp://.\n        forward_type -- The type of forward. Valid options include:\n                                   Framed\n                                   HTTP_301_REDIRECT\n                                   HTTP_302_REDIRECT\n                                   HTTP_303_REDIRECT\n                                   HTTP_307_REDIRECT.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void makeProxyConstructor() { MethodVisitor mv = wd.dest.visitMethod(AsmUtil.ACC_PRIVATE | AsmUtil.ACC_FINAL, ProxettaNames.initMethodName, DESC_VOID, null, null); mv.visitCode(); if (wd.adviceInits != null) { for (String name : wd.adviceInits) { mv.visitVarInsn(ALOAD, 0); mv.visitMethodInsn (INVOKESPECIAL, wd.thisReference, name, DESC_VOID, false); } } mv.visitInsn(RETURN); mv.visitMaxs(0, 0); mv.visitEnd(); }\n\n    ### Response:", "ground_truth": "Creates init method that simply calls all advice constructor methods in correct order.\nThis created init method is called from each destination's constructor.", "predict": "Initiates the proxy for the given method and arguments"}, {"ID": 1018, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *StanServer) replicateSubSentAndAck(sub *subState) { var data []byte sr := s.ssarepl sub.Lock() r := sub.replicate if r != nil && len(r.sent)+len(r.ack) > 0 { data = createSubSentAndAckProto(sub, r) r.sent = r.sent[:0] r.ack = r.ack[:0] r.applying = true } sub.Unlock() if data != nil { if testSubSentAndAckSlowApply { time.Sleep(100 * time.Millisecond) } s.raft.Apply(data, 0) sub.Lock() r = sub.replicate // If r is nil it means either that the leader lost leadrship, // in which case we don't do anything, or the sub/conn is being // closed and endSubSentAndAckReplication() is waiting on a // channel stored in \"gates\" map. If we find it, signal. if r == nil { if c, ok := sr.gates.Load(sub); ok { sr.gates.Delete(sub) signalCh(c.(chan struct{})) } } else { r.applying = false } sub.Unlock() } }\n\n    ### Response: // Replicates through RAFT.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void processSuperMethods() { for (ClassReader cr : targetClassInfo.superClassReaders) { cr.accept(new EmptyClassVisitor() { String declaredClassName; @Override public void visit(final int version, final int access, final String name, final String signature, final String superName, final String[] interfaces) { declaredClassName = name; } @Override public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) { if (name.equals(INIT) || name.equals(CLINIT)) { return null; } MethodSignatureVisitor msign = targetClassInfo.lookupMethodSignatureVisitor(access, name, desc, declaredClassName); if (msign == null) { return null; } return applyProxy(msign); } }, 0); } }\n\n    ### Response:", "ground_truth": "Checks for all public super methods that are not overridden.", "predict": "// Processes supermethods of the given class through RAFT and looks for the given name and signature of the given method to determine whether to intercept it or not."}, {"ID": 1019, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function doRefund($array) { $WSRequest = array( 'transactionID' => $array['transactionID'], 'payment' => $this->payment($array['payment']), 'comment' => $array['comment'], 'privateDataList' => $this->privateData, 'details' => $this->orderDetails, 'sequenceNumber' => $array['sequenceNumber'] ); return $this->webServiceRequest($array, $WSRequest, self::DIRECT_API, 'doRefund'); }\n\n    ### Response: calls doRefund web service\n\n@param array $array\nassociative array containing doRefund parameters.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int findLast(int low, int high) { int ndx = -1; while (low <= high) { int mid = (low + high) >>> 1; int delta = compare(mid); if (delta > 0) { high = mid - 1; } else { if (delta == 0) { ndx = mid; } low = mid + 1; } } if (ndx == -1) { return -(low + 1); } return ndx; }\n\n    ### Response:", "ground_truth": "Finds very last index of given element in inclusive index range. Returns negative\nvalue if element is not found.", "predict": "\n    Find the last index of the given values (inclusive low and exclusive high values) \n    Utilizes the division operator to split the range of values in halves and compares values on each of these halves to locate the corresponding indices of the given values; If the given values are located on the first or the second divide, returns the corresponding indices; Otherwise, returns (-(low + 1), -(high + 1)) which indicates that the given values are not found"}, {"ID": 1020, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *Spritesheet) Drawables() []Drawable { drawables := make([]Drawable, s.CellCount()) for i := 0; i < s.CellCount(); i++ { drawables[i] = s.Drawable(i) } return drawables }\n\n    ### Response: // Drawables returns all the drawables on the sheet.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String on(final String string) { if (!enabled) { return string; } final StringBuilder sb = new StringBuilder(); if (prefix != null) { sb.append(prefix).append(\"m\"); } sb.append(string); if (suffix != null) { sb.append(suffix).append(\"m\"); } return sb.toString(); }\n\n    ### Response:", "ground_truth": "Returns chalked string.", "predict": "Drawables returns all the drawables on the sheet. DrawableProcessor processes Drawable objects and generates the appropriate Drawable objects for the specified Spritesheet"}, {"ID": 1021, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func InitNetworkPlugin(plugins []NetworkPlugin, networkPluginName string, host Host, hairpinMode kubeletconfig.HairpinMode, nonMasqueradeCIDR string, mtu int) (NetworkPlugin, error) { if networkPluginName == \"\" { // default to the no_op plugin plug := &NoopNetworkPlugin{} plug.Sysctl = utilsysctl.New() if err := plug.Init(host, hairpinMode, nonMasqueradeCIDR, mtu); err != nil { return nil, err } return plug, nil } pluginMap := map[string]NetworkPlugin{} allErrs := []error{} for _, plugin := range plugins { name := plugin.Name() if errs := validation.IsQualifiedName(name); len(errs) != 0 { allErrs = append(allErrs, fmt.Errorf(\"network plugin has invalid name: %q: %s\", name, strings.Join(errs, \";\"))) continue } if _, found := pluginMap[name]; found { allErrs = append(allErrs, fmt.Errorf(\"network plugin %q was registered more than once\", name)) continue } pluginMap[name] = plugin } chosenPlugin := pluginMap[networkPluginName] if chosenPlugin != nil { err := chosenPlugin.Init(host, hairpinMode, nonMasqueradeCIDR, mtu) if err != nil { allErrs = append(allErrs, fmt.Errorf(\"Network plugin %q failed init: %v\", networkPluginName, err)) } else { klog.V(1).Infof(\"Loaded network plugin %q\", networkPluginName) } } else { allErrs = append(allErrs, fmt.Errorf(\"Network plugin %q not found.\", networkPluginName)) } return chosenPlugin, utilerrors.NewAggregate(allErrs) }\n\n    ### Response: // InitNetworkPlugin inits the plugin that matches networkPluginName. Plugins must have unique names..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private byte[] replaceAsmInstructions(final byte[] classFile, final boolean hasFrames) { final Attribute[] attributes = getAttributePrototypes(); firstField = null; lastField = null; firstMethod = null; lastMethod = null; lastRuntimeVisibleAnnotation = null; lastRuntimeInvisibleAnnotation = null; lastRuntimeVisibleTypeAnnotation = null; lastRuntimeInvisibleTypeAnnotation = null; moduleWriter = null; nestHostClassIndex = 0; numberOfNestMemberClasses = 0; nestMemberClasses = null; firstAttribute = null; compute = hasFrames ? MethodWriter.COMPUTE_INSERTED_FRAMES : MethodWriter.COMPUTE_NOTHING; new ClassReader(classFile, 0, /* checkClassVersion = */ false) .accept( this, attributes, (hasFrames ? ClassReader.EXPAND_FRAMES : 0) | ClassReader.EXPAND_ASM_INSNS); return toByteArray(); }\n\n    ### Response:", "ground_truth": "Returns the equivalent of the given class file, with the ASM specific instructions replaced\nwith standard ones. This is done with a ClassReader -> ClassWriter round trip.\n\n@param classFile a class file containing ASM specific instructions, generated by this\nClassWriter.\n@param hasFrames whether there is at least one stack map frames in 'classFile'.\n@return an equivalent of 'classFile', with the ASM specific instructions replaced with standard\nones.", "predict": "// This method reads the attributes of the given class file and\n    // invokes the appropriate code for replacing the ASM instruction bytes\n    // with appropriate values determined by the given parameter."}, {"ID": 1022, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (w *wrapper) SetOptions(opts OptionsConfiguration) (Waiter, error) { w.mut.Lock() defer w.mut.Unlock() newCfg := w.cfg.Copy() newCfg.Options = opts.Copy() return w.replaceLocked(newCfg) }\n\n    ### Response: // SetOptions replaces the current options configuration object..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Attribute[] getAttributePrototypes() { Attribute.Set attributePrototypes = new Attribute.Set(); attributePrototypes.addAttributes(firstAttribute); FieldWriter fieldWriter = firstField; while (fieldWriter != null) { fieldWriter.collectAttributePrototypes(attributePrototypes); fieldWriter = (FieldWriter) fieldWriter.fv; } MethodWriter methodWriter = firstMethod; while (methodWriter != null) { methodWriter.collectAttributePrototypes(attributePrototypes); methodWriter = (MethodWriter) methodWriter.mv; } return attributePrototypes.toArray(); }\n\n    ### Response:", "ground_truth": "Returns the prototypes of the attributes used by this class, its fields and its methods.\n\n@return the prototypes of the attributes used by this class, its fields and its methods.", "predict": "The method generates Attribute prototypes for firstField, firstMethod and firstAttribute of the wrapper class"}, {"ID": 1023, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function action_executed($actionname, \\core_analytics\\local\\target\\base $target) { global $USER, $DB; $context = \\context::instance_by_id($this->get_prediction_data()->contextid, IGNORE_MISSING); if (!$context) { throw new \\moodle_exception('errorpredictioncontextnotavailable', 'analytics'); } // Check that the provided action exists. $actions = $target->prediction_actions($this, true); foreach ($actions as $action) { if ($action->get_action_name() === $actionname) { $found = true; } } if (empty($found)) { throw new \\moodle_exception('errorunknownaction', 'analytics'); } $predictionid = $this->get_prediction_data()->id; $action = new \\stdClass(); $action->predictionid = $predictionid; $action->userid = $USER->id; $action->actionname = $actionname; $action->timecreated = time(); $DB->insert_record('analytics_prediction_actions', $action); $eventdata = array ( 'context' => $context, 'objectid' => $predictionid, 'other' => array('actionname' => $actionname) ); \\core\\event\\prediction_action_started::create($eventdata)->trigger(); }\n\n    ### Response: Stores the executed action.\n\nPrediction instances should be retrieved using \\core_analytics\\manager::get_prediction,\nIt is the caller responsability to check that the user can see the prediction.\n\n@param string $actionname\n@param \\core_analytics\\local\\target\\base $target.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerDefaults() { register(Integer.class, IntegerSqlType.class); register(int.class, IntegerSqlType.class); register(MutableInteger.class, IntegerSqlType.class); register(Float.class, FloatSqlType.class); register(float.class, FloatSqlType.class); register(MutableFloat.class, FloatSqlType.class); register(Double.class, DoubleSqlType.class); register(double.class, DoubleSqlType.class); register(MutableDouble.class, DoubleSqlType.class); register(Byte.class, ByteSqlType.class); register(byte.class, ByteSqlType.class); register(MutableByte.class, ByteSqlType.class); register(Boolean.class, BooleanSqlType.class); register(boolean.class, BooleanSqlType.class); register(MutableBoolean.class, BooleanSqlType.class); register(Long.class, LongSqlType.class); register(long.class, LongSqlType.class); register(MutableLong.class, LongSqlType.class); register(Short.class, ShortSqlType.class); register(short.class, ShortSqlType.class); register(MutableShort.class, ShortSqlType.class); register(Character.class, CharacterSqlType.class); register(char.class, CharacterSqlType.class); register(BigDecimal.class, BigDecimalSqlType.class); register(BigInteger.class, BigIntegerSqlType.class); register(String.class, StringSqlType.class); register(LocalDateTime.class, LocalDateTimeSqlType.class); register(LocalDate.class, LocalDateSqlType.class); register(LocalTime.class, LocalTimeSqlType.class); register(Date.class, SqlDateSqlType.class); register(Timestamp.class, TimestampSqlType.class); register(Time.class, TimeSqlType.class); register(java.util.Date.class, DateSqlType.class); register(JulianDate.class, JulianDateSqlType.class); register(byte[].class, ByteArraySqlType.class); register(URL.class, URLSqlType.class); register(Blob.class, BlobSqlType.class); register(Clob.class, ClobSqlType.class); register(Array.class, SqlArraySqlType.class); register(Ref.class, SqlRefSqlType.class); }\n\n    ### Response:", "ground_truth": "Registers default set of SQL types.", "predict": "Stores the SQLType for various types of columns in the SQL Table"}, {"ID": 1024, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _dump_stats(self): ''' Dumps the stats out ''' extras = {} if 'total' in self.stats_dict: self.logger.debug(\"Compiling total/fail dump stats\") for key in self.stats_dict['total']: final = 'total_{t}'.format(t=key) extras[final] = self.stats_dict['total'][key].value() for key in self.stats_dict['fail']: final = 'fail_{t}'.format(t=key) extras[final] = self.stats_dict['fail'][key].value() if 'plugins' in self.stats_dict: self.logger.debug(\"Compiling plugin dump stats\") for name in self.stats_dict['plugins']: for key in self.stats_dict['plugins'][name]: final = 'plugin_{n}_{t}'.format(n=name, t=key) extras[final] = self.stats_dict['plugins'][name][key].value() if not self.logger.json: self.logger.info('Kafka Monitor Stats Dump:\\n{0}'.format( json.dumps(extras, indent=4, sort_keys=True))) else: self.logger.info('Kafka Monitor Stats Dump', extra=extras)\n\n    ### Response: Dumps the stats out.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void register(final Class type, final Class<? extends SqlType> sqlTypeClass) { types.put(type, lookupSqlType(sqlTypeClass)); }\n\n    ### Response:", "ground_truth": "Registers sql type for provided type.", "predict": "\n    A registration method to add an SQLType for the given Class to the Map of SQLType and Classes."}, {"ID": 1025, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function get_rowcount_text($all=0, $curr_count=0, $page=1) { if (!$curr_count) { $out = $this->enigma->gettext('nokeysfound'); } else { $pagesize = $this->rc->config->get('pagesize', 100); $first = ($page - 1) * $pagesize; $out = $this->enigma->gettext(array( 'name' => 'keysfromto', 'vars' => array( 'from' => $first + 1, 'to' => $first + $curr_count, 'count' => $all) )); } return $out; }\n\n    ### Response: Returns text representation of list records counter.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public SqlType lookup(final Class clazz) { SqlType sqlType; for (Class x = clazz; x != null; x = x.getSuperclass()) { sqlType = types.get(clazz); if (sqlType != null) { return sqlType; } Class[] interfaces = x.getInterfaces(); for (Class i : interfaces) { sqlType = types.get(i); if (sqlType != null) { return sqlType; } } } return null; }\n\n    ### Response:", "ground_truth": "Retrieves SQL type for provided type. All subclasses and interfaces are examined\nfor matching sql type.", "predict": "Returns SQLType for given Class"}, {"ID": 1026, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static xen reboot(nitro_service client, xen resource) throws Exception { return ((xen[]) resource.perform_operation(client, \"reboot\"))[0]; }\n\n    ### Response: Use this operation to reboot XenServer..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public SqlType lookupSqlType(final Class<? extends SqlType> sqlTypeClass) { SqlType sqlType = sqlTypes.get(sqlTypeClass); if (sqlType == null) { try { sqlType = ClassUtil.newInstance(sqlTypeClass); } catch (Exception ex) { throw new DbSqlException(\"SQL type not found: \" + sqlTypeClass.getSimpleName(), ex); } sqlTypes.put(sqlTypeClass, sqlType); } return sqlType; }\n\n    ### Response:", "ground_truth": "Returns sql type instance. Instances are stored for better performances.", "predict": "Lookup SqlType for given SQLTypeClass"}, {"ID": 1027, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (n *node) addChild(c nodeContent) (*node, error) { if !n.isAllowed(c, false) { return nil, errors.New(ErrDuplicate, errorMessages) } child := &node{ container: n.container, parent: n, content: c, } n.children = append(n.children, child) return child, nil }\n\n    ### Response: // addChild adds a child node depending on allowed duplicates..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ProxyInfo socks4Proxy(final String proxyAddress, final int proxyPort, final String proxyUser) { return new ProxyInfo(ProxyType.SOCKS4, proxyAddress, proxyPort, proxyUser, null); }\n\n    ### Response:", "ground_truth": "Creates SOCKS4 proxy.", "predict": "// This method creates a ProxyInfo object with given parameters to represent a SOCKS4 proxy."}, {"ID": 1028, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (cfs *cacheFSObjects) Get(ctx context.Context, bucket, object string, startOffset int64, length int64, writer io.Writer, etag string, opts ObjectOptions) (err error) { return cfs.GetObject(ctx, bucket, object, startOffset, length, writer, etag, opts) }\n\n    ### Response: // Returns the handle for the cached object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ProxyInfo socks5Proxy(final String proxyAddress, final int proxyPort, final String proxyUser, final String proxyPassword) { return new ProxyInfo(ProxyType.SOCKS5, proxyAddress, proxyPort, proxyUser, proxyPassword); }\n\n    ### Response:", "ground_truth": "Creates SOCKS5 proxy.", "predict": "// Allows clients to connect to the given Web server via SOCKS5 proxy server\n    // at the given address and port\n    // It provides credentials to connect to the given Web server\n    // If the credentials are incorrect, the method may\n    // throw an exception"}, {"ID": 1029, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (token Token) ExpiresBefore(timeBuffer time.Duration) (bool, error) { parts := strings.Split(token.Access, \".\") decodedToken, err := jwt.DecodeSegment(parts[1]) if err != nil { return false, TokenDecodeError } parsedJson := make(map[string]interface{}) err = json.Unmarshal(decodedToken, &parsedJson) if err != nil { return false, JSONParseError } tokenExpiration := parsedJson[\"exp\"].(float64) bufferedExpiration := time.Unix(int64(tokenExpiration), 0).Add(timeBuffer) return bufferedExpiration.Before(time.Now()), nil }\n\n    ### Response: // Determines if the token expires by the current time plus the time buffer.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ProxyInfo httpProxy(final String proxyAddress, final int proxyPort, final String proxyUser, final String proxyPassword) { return new ProxyInfo(ProxyType.HTTP, proxyAddress, proxyPort, proxyUser, proxyPassword); }\n\n    ### Response:", "ground_truth": "Creates HTTP proxy.", "predict": "// Allows configuration of a proxy for a given address and port."}, {"ID": 1030, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getInsertDimensions() { $width = $this->owner->getWidth(); $height = $this->owner->getHeight(); if (!$height || !$width) { return null; } $maxWidth = $this->owner->config()->get('insert_width'); $maxHeight = $this->owner->config()->get('insert_height'); // Within bounds if ($width < $maxWidth && $height < $maxHeight) { return [ 'width' => $width, 'height' => $height, ]; } // Check if sizing by height or width if (($width * $maxHeight) < ($height * $maxWidth)) { // Size by height return [ 'width' => intval(($width * $maxHeight) / $height + 0.5), 'height' => $maxHeight, ]; } else { // Size by width return [ 'width' => $maxWidth, 'height' => intval(($height * $maxWidth) / $width + 0.5), ]; } }\n\n    ### Response: Get dimensions of this image sized within insert_width x insert_height\n\n@return array|null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int totalThreadTransactions() { ArrayList<JtxTransaction> txList = txStack.get(); if (txList == null) { return 0; } return txList.size(); }\n\n    ### Response:", "ground_truth": "Returns total number of transactions associated with current thread.", "predict": "Get the total number of transaction objects in the transaction stack."}, {"ID": 1031, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function confirmClear($cachesNames) { $this->stdout(\"The following cache components will be flushed:\\n\\n\", Console::FG_YELLOW); foreach ($cachesNames as $name) { $this->stdout(\"\\t* $name \\n\", Console::FG_GREEN); } return $this->confirm(\"\\nFlush above cache components?\"); }\n\n    ### Response: Prompts user with confirmation if caches should be cleared.\n@param array $cachesNames\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int totalThreadTransactionsWithStatus(final JtxStatus status) { ArrayList<JtxTransaction> txlist = txStack.get(); if (txlist == null) { return 0; } int count = 0; for (JtxTransaction tx : txlist) { if (tx.getStatus() == status) { count++; } } return count; }\n\n    ### Response:", "ground_truth": "Returns total number of transactions of the specified status associated with current thread.", "predict": "Count transaction with given status in transaction Stack."}, {"ID": 1032, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def ListHuntApprovals(context=None): \"\"\"List all hunt approvals belonging to requesting user.\"\"\" items = context.SendIteratorRequest(\"ListHuntApprovals\", hunt_pb2.ApiListHuntApprovalsArgs()) def MapHuntApproval(data): return HuntApproval(data=data, username=context.username, context=context) return utils.MapItemsIterator(MapHuntApproval, items)\n\n    ### Response: List all hunt approvals belonging to requesting user..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void associateTransaction(final JtxTransaction tx) { totalTransactions++; ArrayList<JtxTransaction> txList = txStack.get(); if (txList == null) { txList = new ArrayList<>(); txStack.set(txList); } txList.add(tx); // add last }\n\n    ### Response:", "ground_truth": "Associate transaction to current thread.", "predict": "Associates transaction with the given transaction counter and maintains a Stack of transaction objects to track the order of transaction processing"}, {"ID": 1033, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function makeDefinition() { //Find only first level children stored in the same collection $children = $this->findChildren(true, true); if (empty($children)) { //Nothing to inherit return $this->schema->getClass(); } //We must sort child in order or unique fields uasort($children, [$this, 'sortChildren']); //Fields which are common for parent and child models $commonFields = $this->schema->getReflection()->getSchema(); $definition = []; foreach ($children as $schema) { //Child document fields $fields = $schema->getReflection()->getSchema(); if (empty($fields)) { throw new DefinitionException( \"Child document '{$schema->getClass()}' of '{$this->schema->getClass()}' does not have any fields\" ); } $uniqueField = null; if (empty($commonFields)) { //Parent did not declare any fields, happen sometimes $commonFields = $fields; $uniqueField = key($fields); } else { foreach ($fields as $field => $type) { if (!isset($commonFields[$field])) { if (empty($uniqueField)) { $uniqueField = $field; } //New non unique field (must be excluded from analysis) $commonFields[$field] = true; } } } if (empty($uniqueField)) { throw new DefinitionException( \"Child document '{$schema->getClass()}' of '{$this->schema->getClass()}' does not have any unique field\" ); } $definition[$uniqueField] = $schema->getClass(); } return $definition; }\n\n    ### Response: Compile information required to resolve class instance using given set of fields. Fields\nbased definition will analyze unique fields in every child model to create association\nbetween model class and required set of fields. Only document from same collection will be\ninvolved in definition creation. Definition built only for child of first order.\n\n@return array|string\n\n@throws DefinitionException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void continueTx(final JtxTransaction sourceTx, final JtxTransactionMode destMode) { if (!validateExistingTransaction) { return; } JtxTransactionMode sourceMode = sourceTx.getTransactionMode(); JtxIsolationLevel destIsolationLevel = destMode.getIsolationLevel(); if (destIsolationLevel != ISOLATION_DEFAULT) { JtxIsolationLevel currentIsolationLevel = sourceMode.getIsolationLevel(); if (currentIsolationLevel != destIsolationLevel) { throw new JtxException(\"Participating TX specifies isolation level: \" + destIsolationLevel + \" which is incompatible with existing TX: \" + currentIsolationLevel); } } if ((!destMode.isReadOnly()) && (sourceMode.isReadOnly())) { throw new JtxException(\"Participating TX is not marked as read-only, but existing TX is\"); } }\n\n    ### Response:", "ground_truth": "Check if propagation of a transaction is possible, due to source and destination transaction modes.\n@see #setValidateExistingTransaction(boolean)", "predict": "Validate existing transaction first to avoid potential conflict with other transaction and to ensure proper isolation level for participating transaction"}, {"ID": 1034, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def grid(self,EdgeAttribute=None,network=None,NodeAttribute=None,\\ nodeHorizontalSpacing=None,nodeList=None,nodeVerticalSpacing=None,verbose=None): \"\"\" Execute the Grid Layout on a network. :param EdgeAttribute (string, optional): The name of the edge column contai ning numeric values that will be used as weights in the layout algor ithm. Only columns containing numeric values are shown :param network (string, optional): Specifies a network by name, or by SUID if the prefix SUID: is used. The keyword CURRENT, or a blank value c an also be used to specify the current network. :param NodeAttribute (string, optional): The name of the node column contai ning numeric values that will be used as weights in the layout algor ithm. Only columns containing numeric values are shown :param nodeHorizontalSpacing (string, optional): Horizontal spacing between nodes, in numeric value :param nodeList (string, optional): Specifies a list of nodes. The keywords all, selected, or unselected can be used to specify nodes by their selection state. The pattern COLUMN:VALUE sets this parameter to any rows that contain the specified column value; if the COLUMN prefix is not used, the NAME column is matched by default. A list of COLUMN :VALUE pairs of the format COLUMN1:VALUE1,COLUMN2:VALUE2,... can be used to match multiple values. :param nodeVerticalSpacing (string, optional): Vertical spacing between nod es, in numeric value \"\"\" network=check_network(self,network,verbose=verbose) PARAMS=set_param(['EdgeAttribute','network','NodeAttribute',\\ 'nodeHorizontalSpacing','nodeList','nodeVerticalSpacing'],\\ [EdgeAttribute,network,NodeAttribute,nodeHorizontalSpacing,nodeList,\\ nodeVerticalSpacing]) response=api(url=self.__url+\"/grid\", PARAMS=PARAMS, method=\"POST\", verbose=verbose) return response\n\n    ### Response: Execute the Grid Layout on a network.\n\n\t\t:param EdgeAttribute (string, optional): The name of the edge column contai\n\t\t\tning numeric values that will be used as weights in the layout algor\n\t\t\tithm. Only columns containing numeric values are shown\n\t\t:param network (string, optional): Specifies a network by name, or by SUID\n\t\t\tif the prefix SUID: is used. The keyword CURRENT, or a blank value c\n\t\t\tan also be used to specify the current network.\n\t\t:param NodeAttribute (string, optional): The name of the node column contai\n\t\t\tning numeric values that will be used as weights in the layout algor\n\t\t\tithm. Only columns containing numeric values are shown\n\t\t:param nodeHorizontalSpacing (string, optional): Horizontal spacing between\n\t\t\t\tnodes, in numeric value\n\t\t:param nodeList (string, optional): Specifies a list of nodes. The keywords\n\t\t\t\tall, selected, or unselected can be used to specify nodes by their\n\t\t\tselection state. The pattern COLUMN:VALUE sets this parameter to any\n\t\t\t\trows that contain the specified column value; if the COLUMN prefix\n\t\t\tis not used, the NAME column is matched by default. A list of COLUMN\n\t\t\t:VALUE pairs of the format COLUMN1:VALUE1,COLUMN2:VALUE2,... can be\n\t\t\tused to match multiple values.\n\t\t:param nodeVerticalSpacing (string, optional): Vertical spacing between nod\n\t\t\tes, in numeric value.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected <E> JtxResourceManager<E> lookupResourceManager(final Class<E> resourceType) { //noinspection unchecked JtxResourceManager<E> resourceManager = this.resourceManagers.get(resourceType); if (resourceManager == null) { throw new JtxException(\"No registered resource manager for resource type: \" + resourceType.getSimpleName()); } return resourceManager; }\n\n    ### Response:", "ground_truth": "Lookups resource manager for provided type. Throws an exception if provider doesn't exists.", "predict": "\n\t\t\t\t\t\t\t     </E> JtxResourceManager resourceManager; //noinspection unchecked JtxResourceManager resourceManager; //TODO: Document resourceType"}, {"ID": 1035, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function addMethods(array $methods) { foreach ($methods as $key => $method) { $this->addMethod($method, $key); } return $this; }\n\n    ### Response: Add multiple methods\n\n@param  array $methods Array of Zend_Server_Method_Definition objects or arrays\n@return Zend_Server_Definition.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected C createProxyObject(Class<C> target) { target = ProxettaUtil.resolveTargetClass(target); Class proxyClass = cache.get(target); if (proxyClass == null) { proxyClass = proxetta.defineProxy(target); cache.put(target, proxyClass); } C proxy; try { proxy = (C) ClassUtil.newInstance(proxyClass); } catch (Exception ex) { throw new PathrefException(ex); } return proxy; }\n\n    ### Response:", "ground_truth": "Creates proxy object.", "predict": "Creates and returns a proxy objects for the given target objects"}, {"ID": 1036, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (cache *schedulerCache) finishBinding(pod *v1.Pod, now time.Time) error { key, err := schedulernodeinfo.GetPodKey(pod) if err != nil { return err } cache.mu.RLock() defer cache.mu.RUnlock() klog.V(5).Infof(\"Finished binding for pod %v. Can be expired.\", key) currState, ok := cache.podStates[key] if ok && cache.assumedPods[key] { dl := now.Add(cache.ttl) currState.bindingFinished = true currState.deadline = &dl } return nil }\n\n    ### Response: // finishBinding exists to make tests determinitistic by injecting now as an argument.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void append(final String methodName) { if (path.length() != 0) { path += StringPool.DOT; } if (methodName.startsWith(StringPool.LEFT_SQ_BRACKET)) { path = StringUtil.substring(path, 0, -1); } path += methodName; }\n\n    ### Response:", "ground_truth": "Appends method name to existing path.", "predict": "The append() method appends an element onto the end of the path string to form a fully-qualified method name. It makes sure that the path string does not already contain an element by trimming the first character of the method name to an under score (_), or by trimming the leading left square bracket []. It then appends the method name to the end of the path string to form the fully-qualified method name."}, {"ID": 1037, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function Get32s($val1, $val2, $val3, $val4) { $val1 = ord($val1); $val2 = ord($val2); $val3 = ord($val3); $val4 = ord($val4); if ($this->MotorolaOrder) { return (($val1 << 24) | ($val2 << 16) | ($val3 << 8) | ($val4 << 0)); } else { return (($val4 << 24) | ($val3 << 16) | ($val2 << 8) | ($val1 << 0)); } }\n\n    ### Response: Converts 4-byte number into its equivalent integer\n\n@param   int\n@param   int\n@param   int\n@param   int\n\n@return int.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String alignLeftAndPad(final String text, final int size) { int textLength = text.length(); if (textLength > size) { return text.substring(0, size); } final StringBuilder sb = new StringBuilder(size); sb.append(text); while (textLength++ < size) { sb.append(' '); } return sb.toString(); }\n\n    ### Response:", "ground_truth": "Puts the text to the left and pads with spaces until the size is reached.", "predict": "Aligns the given string to the given width by padding it to the left with spaces to match the given width\n\npublic static String alignLeftAndPad(String text, int size) {\n int textLength = text.length();\n if (textLength > size) {\n return text.substring(0, size);\n }\n\n final StringBuilder sb = new StringBuilder(size);\n sb.append(text);\n\n int paddingRequired = size - textLength;\n int paddingRequiredCount = paddingRequired;\n int paddingRequiredIndex = 0;\n int paddingRequiredWidth = paddingRequired;\n int paddingRequiredWidthCount = paddingRequiredWidth;\n int paddingRequiredWidthIndex = paddingRequiredWidth;\n int paddingRequiredWidthWidth = paddingRequiredWidth;\n int paddingRequiredWidthWidthCount = paddingRequiredWidthWidth;\n int paddingRequiredWidthWidthCountCount = paddingRequiredWidthWidthCount;\n int paddingRequiredWidthWidthCountCountCount = paddingRequiredWidthWidthCountCount;\n int paddingRequiredWidthWidthCountCountCountCountCount ="}, {"ID": 1038, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function appendBuffer(Buffer $buf, $indent = 0) { if ($indent) { $this->setIndent($indent); $lines = $buf->lines(); foreach ($lines as $line) { $this->appendLine($line); } } else { $this->content .= $buf->__toString(); } }\n\n    ### Response: Append a buffer object\n\n@param Buffer $buf\n@param int $indent = 0.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String toPrettyString(final Object value) { if (value == null) { return StringPool.NULL; } final Class<?> type = value.getClass(); if (type.isArray()) { final Class componentType = type.getComponentType(); if (componentType.isPrimitive()) { final StringBuilder sb = new StringBuilder(); sb.append('['); if (componentType == int.class) { sb.append(ArraysUtil.toString((int[]) value)); } else if (componentType == long.class) { sb.append(ArraysUtil.toString((long[]) value)); } else if (componentType == double.class) { sb.append(ArraysUtil.toString((double[]) value)); } else if (componentType == float.class) { sb.append(ArraysUtil.toString((float[]) value)); } else if (componentType == boolean.class) { sb.append(ArraysUtil.toString((boolean[]) value)); } else if (componentType == short.class) { sb.append(ArraysUtil.toString((short[]) value)); } else if (componentType == byte.class) { sb.append(ArraysUtil.toString((byte[]) value)); } else { throw new IllegalArgumentException(); } sb.append(']'); return sb.toString(); } else { final StringBuilder sb = new StringBuilder(); sb.append('['); final Object[] array = (Object[]) value; for (int i = 0; i < array.length; i++) { if (i > 0) { sb.append(','); } sb.append(toPrettyString(array[i])); } sb.append(']'); return sb.toString(); } } else if (value instanceof Iterable) { final Iterable iterable = (Iterable) value; final StringBuilder sb = new StringBuilder(); sb.append('{'); int i = 0; for (final Object o : iterable) { if (i > 0) { sb.append(','); } sb.append(toPrettyString(o)); i++; } sb.append('}'); return sb.toString(); } return value.toString(); }\n\n    ### Response:", "ground_truth": "Converts object into pretty string. All arrays are iterated.", "predict": "Pretty prints objects"}, {"ID": 1039, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (g *Git) SubmoduleForeach(command *command.Model) *command.Model { args := []string{\"submodule\", \"foreach\"} args = append(args, command.GetCmd().Args...) return g.command(args...) }\n\n    ### Response: // SubmoduleForeach evaluates an arbitrary git command in each checked out\n// submodule..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String toCamelCase(final String input, final boolean firstCharUppercase, final char separator) { final int length = input.length(); final StringBuilder sb = new StringBuilder(length); boolean upperCase = firstCharUppercase; for (int i = 0; i < length; i++) { final char ch = input.charAt(i); if (ch == separator) { upperCase = true; } else if (upperCase) { sb.append(Character.toUpperCase(ch)); upperCase = false; } else { sb.append(ch); } } return sb.toString(); }\n\n    ### Response:", "ground_truth": "Converts separated string value to CamelCase.", "predict": "// This method converts string to camel case by concatenating first\n    // letter of each word to first letter of the string and replacing\n    // separator by first letter of first string of case insensitive stringified\n    // words of the string to camel case"}, {"ID": 1040, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func cachedStatsFunc(podStats []statsapi.PodStats) statsFunc { uid2PodStats := map[string]statsapi.PodStats{} for i := range podStats { uid2PodStats[podStats[i].PodRef.UID] = podStats[i] } return func(pod *v1.Pod) (statsapi.PodStats, bool) { stats, found := uid2PodStats[string(pod.UID)] return stats, found } }\n\n    ### Response: // cachedStatsFunc returns a statsFunc based on the provided pod stats..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String formatParagraph(final String src, final int len, final boolean breakOnWhitespace) { StringBuilder str = new StringBuilder(); int total = src.length(); int from = 0; while (from < total) { int to = from + len; if (to >= total) { to = total; } else if (breakOnWhitespace) { int ndx = StringUtil.lastIndexOfWhitespace(src, to - 1, from); if (ndx != -1) { to = ndx + 1; } } int cutFrom = StringUtil.indexOfNonWhitespace(src, from, to); if (cutFrom != -1) { int cutTo = StringUtil.lastIndexOfNonWhitespace(src, to - 1, from) + 1; str.append(src, cutFrom, cutTo); } str.append('\\n'); from = to; } return str.toString(); }\n\n    ### Response:", "ground_truth": "Formats provided string as paragraph.", "predict": "// This method formats paragraph of given source string and given length by breaking it on given break on whitespace parameter and concatenates it to given StringBuilder object with given indentation level of 4"}, {"ID": 1041, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def zrevrange(self, key, start, stop, withscores=False, encoding=_NOTSET): \"\"\"Return a range of members in a sorted set, by index, with scores ordered from high to low. :raises TypeError: if start or stop is not int \"\"\" if not isinstance(start, int): raise TypeError(\"start argument must be int\") if not isinstance(stop, int): raise TypeError(\"stop argument must be int\") if withscores: args = [b'WITHSCORES'] else: args = [] fut = self.execute(b'ZREVRANGE', key, start, stop, *args, encoding=encoding) if withscores: return wait_convert(fut, pairs_int_or_float) return fut\n\n    ### Response: Return a range of members in a sorted set, by index,\n        with scores ordered from high to low.\n\n        :raises TypeError: if start or stop is not int.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String convertTabsToSpaces(final String line, final int tabWidth) { int tab_index, tab_size; int last_tab_index = 0; int added_chars = 0; if (tabWidth == 0) { return StringUtil.remove(line, '\\t'); } StringBuilder result = new StringBuilder(); while ((tab_index = line.indexOf('\\t', last_tab_index)) != -1) { tab_size = tabWidth - ((tab_index + added_chars) % tabWidth); if (tab_size == 0) { tab_size = tabWidth; } added_chars += tab_size - 1; result.append(line, last_tab_index, tab_index); result.append(StringUtil.repeat(' ', tab_size)); last_tab_index = tab_index+1; } if (last_tab_index == 0) { return line; } result.append(line.substring(last_tab_index)); return result.toString(); }\n\n    ### Response:", "ground_truth": "Converts all tabs on a line to spaces according to the provided tab width.\nThis is not a simple tab to spaces replacement, since the resulting\nindentation remains the same.", "predict": "\n    This method converts tabs to spaces in the given string by replacing\n    an arbitrary number of consecutive tabs with an equal number of\n    single spaces of equal width to the tab stop, plus any leading\n    and/or trailing characters of the string to produce a string with\n    equal indents of equal width regardless of tab stop width."}, {"ID": 1042, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def atomic_with_signals(func): \"\"\" Atomic decorator with transaction signals. \"\"\" try: from reversion.revisions import create_revision return transaction.atomic(create_revision()(transaction_signals(func))) except ImportError: return transaction.atomic(transaction_signals(func))\n\n    ### Response: Atomic decorator with transaction signals..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String escapeJava(final String string) { int strLen = string.length(); StringBuilder sb = new StringBuilder(strLen); for (int i = 0; i < strLen; i++) { char c = string.charAt(i); switch (c) { case '\\b' : sb.append(\"\\\\b\"); break; case '\\t' : sb.append(\"\\\\t\"); break; case '\\n' : sb.append(\"\\\\n\"); break; case '\\f' : sb.append(\"\\\\f\"); break; case '\\r' : sb.append(\"\\\\r\"); break; case '\\\"' : sb.append(\"\\\\\\\"\"); break; case '\\\\' : sb.append(\"\\\\\\\\\"); break; default: if ((c < 32) || (c > 127)) { String hex = Integer.toHexString(c); sb.append(\"\\\\u\"); for (int k = hex.length(); k < 4; k++) { sb.append('0'); } sb.append(hex); } else { sb.append(c); } } } return sb.toString(); }\n\n    ### Response:", "ground_truth": "Escapes a string using java rules.", "predict": "Pretty prints strings to match Javadoc standard"}, {"ID": 1043, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function execute(InputInterface $input, OutputInterface $output) { $io = new SymfonyStyle($input, $output); if (!$this->metadata) { try { $this->metadata = $this->retrieveMetadatas($input->getArgument('name')); } catch (\\Exception $e) { $io->error($e->getMessage()); return; } } $metadatas = $this->metadata->getMetadata(); $namespace = str_replace('\\\\Entity', '', $this->metadata->getNamespace()); $path = $this->metadata->getPath(); $basePath = sprintf( '%s/%s', $path, str_replace('\\\\', '/', $namespace) ); $appDir = $this->getContainer()->getParameter('kernel.root_dir'); $adminGenerator = new AdminGenerator($appDir); $managerGenerator = new ManagerGenerator($appDir); $adminCtlGenerator = new AdminControllerGenerator($appDir); $servicesGenerator = new ServicesGenerator($appDir); $transGenerator = new TranslationsGenerator($appDir); foreach ($metadatas as $metadata) { $entityName = $this->getEntityNameFromMetadata($metadata); $output->writeln(''); $output->writeln(sprintf('Generate files for entity %s', $entityName)); // generate Admin class $output->writeln($adminGenerator->generate($namespace, $basePath, $metadata)); // generate Manager class $output->writeln($managerGenerator->generate($namespace, $basePath, $metadata)); // generate AdminController class $output->writeln($adminCtlGenerator->generate($namespace, $basePath, $metadata)); // update translations $transGenerator->setBundleName($this->getBundleNameFromEntity($metadata->rootEntityName)); $output->writeln($transGenerator->generate($namespace, $basePath, $metadata)); // update services.yml $servicesGenerator->setBundleName($this->getBundleNameFromEntity($metadata->rootEntityName)); $output->writeln($servicesGenerator->generate($namespace, $basePath, $metadata)); } }\n\n    ### Response: execute command.\n\n@param InputInterface $input InputInterface instance\n@param OutputInterface $output OutputInterface instance\n@return int|null|void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String unescapeJava(final String str) { char[] chars = str.toCharArray(); StringBuilder sb = new StringBuilder(str.length()); for (int i = 0; i < chars.length; i++) { char c = chars[i]; if (c != '\\\\') { sb.append(c); continue; } i++; c = chars[i]; switch (c) { case 'b': sb.append('\\b'); break; case 't': sb.append('\\t'); break; case 'n': sb.append('\\n'); break; case 'f': sb.append('\\f'); break; case 'r': sb.append('\\r'); break; case '\"': sb.append('\\\"'); break; case '\\\\': sb.append('\\\\'); break; case 'u' : char hex = (char) Integer.parseInt(new String(chars, i + 1, 4), 16); sb.append(hex); i += 4; break; default: throw new IllegalArgumentException(\"Invalid escaping character: \" + c); } } return sb.toString(); }\n\n    ### Response:", "ground_truth": "Unescapes a string using java rules.", "predict": "escape and unescape string"}, {"ID": 1044, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def add_doc_to_update(self, action, update_spec, action_buffer_index): \"\"\" Prepare document for update based on Elasticsearch response. Set flag if document needs to be retrieved from Elasticsearch \"\"\" doc = { \"_index\": action[\"_index\"], \"_type\": action[\"_type\"], \"_id\": action[\"_id\"], } # If get_from_ES == True -> get document's source from Elasticsearch get_from_ES = self.should_get_id(action) self.doc_to_update.append((doc, update_spec, action_buffer_index, get_from_ES))\n\n    ### Response: Prepare document for update based on Elasticsearch response.\n        Set flag if document needs to be retrieved from Elasticsearch.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"unchecked\"}) public <T> T getBean(final Class<T> type) { String name = resolveBeanName(type); return (T) getBean(name); }\n\n    ### Response:", "ground_truth": "Returns Petite bean instance. Bean name will be resolved from provided type.", "predict": "Get an instance of an object of specified type from Spring's bean factory."}, {"ID": 1045, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function confirmation() { $confirmation = array('title' => '', 'fields' => array(array('title' => MODULE_PAYMENT_PAYPALDP_TEXT_CREDIT_CARD_FIRSTNAME, 'field' => $_POST['paypalwpp_cc_firstname']), array('title' => MODULE_PAYMENT_PAYPALDP_TEXT_CREDIT_CARD_LASTNAME, 'field' => $_POST['paypalwpp_cc_lastname']), array('title' => MODULE_PAYMENT_PAYPALDP_TEXT_CREDIT_CARD_TYPE, 'field' => $this->cc_card_type), array('title' => MODULE_PAYMENT_PAYPALDP_TEXT_CREDIT_CARD_NUMBER, 'field' => substr($_POST['paypalwpp_cc_number'], 0, 4) . str_repeat('X', (strlen($_POST['paypalwpp_cc_number']) - 8)) . substr($_POST['paypalwpp_cc_number'], -4)), array('title' => MODULE_PAYMENT_PAYPALDP_TEXT_CREDIT_CARD_EXPIRES, 'field' => strftime('%B, %Y', mktime(0,0,0,$_POST['paypalwpp_cc_expires_month'], 1, '20' . $_POST['paypalwpp_cc_expires_year'])), (isset($_POST['paypalwpp_cc_issuenumber']) ? array('title' => MODULE_PAYMENT_PAYPALDP_TEXT_ISSUE_NUMBER, 'field' => $_POST['paypalwpp_cc_issuenumber']) : '') ))); // 3D-Secure if (MODULE_PAYMENT_PAYPALDP_MERCHANT_COUNTRY == 'UK' && $this->requiresLookup($_POST['paypalwpp_cc_number']) == true) { $confirmation['fields'][count($confirmation['fields'])] = array( 'title' => '', 'field' => '<div id=\"' . $this->code.'-cc-securetext\"><p>' . '<a href=\"javascript:void window.open(\\'vbv_learn_more.html\\',\\'vbv_service\\',\\'width=550,height=450\\')\">' . zen_image(DIR_WS_IMAGES.'3ds/vbv_learn_more.gif') . '</a>' . '<a href=\"javascript:void window.open(\\'mcs_learn_more.html\\',\\'mcsc_service\\',\\'width=550,height=450\\')\">' . zen_image(DIR_WS_IMAGES.'3ds/mcsc_learn_more.gif') . '</a></p>' . '<p>' . TEXT_3DS_CARD_MAY_BE_ENROLLED . '</p></div>'); } return $confirmation; }\n\n    ### Response: Display Credit Card Information for review on the Checkout Confirmation Page.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> T getBean(final String name) { // Lookup for registered bean definition. BeanDefinition def = lookupBeanDefinition(name); if (def == null) { // try provider ProviderDefinition providerDefinition = providers.get(name); if (providerDefinition != null) { return (T) invokeProvider(providerDefinition); } return null; } // Find the bean in its scope Object bean = def.scopeLookup(); if (bean == null) { // Create new bean in the scope initBeanDefinition(def); final BeanData beanData = new BeanData(this, def); registerBeanAndWireAndInjectParamsAndInvokeInitMethods(beanData); bean = beanData.bean(); } return (T) bean; }\n\n    ### Response:", "ground_truth": "Returns Petite bean instance.\nPetite container will find the bean in corresponding scope and all its dependencies,\neither by constructor or property injection. When using constructor injection, cyclic dependencies\ncan not be prevented, but at least they are detected.\n\n@see PetiteContainer#createBean(Class)", "predict": "The function looks up for registered bean definition of the given name and invokes its corresponding init methods to initialize the bean in its scope. It may create and initialize the bean in its scope or retrieve and re-initialize the bean from its scope. It may invoke its init methods or wiring and parameterizing of the bean during its initialization in its scope or retrieve and re-initialize the bean from its scope. It may invoke its init methods or wiring and parameterizing of the bean during its initialization in its scope or retrieve and re-initialize the bean from its scope. It may invoke its init methods or wiring and parameterizing of the bean during its initialization in its scope or retrieve and re-initialize the bean from its scope. It may invoke its init methods or wiring and parameterizing of the bean during its initialization in its scope or retrieve and re-initialize the bean from its scope. It may invoke its init methods or wiring and parameterizing of the bean during its initialization in its scope or retrieve and re-initialize the bean from its scope. It may"}, {"ID": 1046, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def traverse_inventory(self, item_filter=None): \"\"\"Generates market Item objects for each inventory item. :param str item_filter: See `TAG_ITEM_CLASS_` contants from .market module. \"\"\" not self._intentory_raw and self._get_inventory_raw() for item in self._intentory_raw['rgDescriptions'].values(): tags = item['tags'] for tag in tags: internal_name = tag['internal_name'] if item_filter is None or internal_name == item_filter: item_type = Item if internal_name == TAG_ITEM_CLASS_CARD: item_type = Card appid = item['market_fee_app'] title = item['name'] yield item_type(appid, title)\n\n    ### Response: Generates market Item objects for each inventory item.\n\n        :param str item_filter: See `TAG_ITEM_CLASS_` contants from .market module..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void initBeanDefinition(final BeanDefinition def) { // init methods if (def.initMethods == null) { def.initMethods = petiteResolvers.resolveInitMethodPoint(def.type); } // destroy methods if (def.destroyMethods == null) { def.destroyMethods = petiteResolvers.resolveDestroyMethodPoint(def.type); } // properties if (def.properties == null) { def.properties = petiteResolvers.resolvePropertyInjectionPoint(def.type, def.wiringMode == WiringMode.AUTOWIRE); } // methods if (def.methods == null) { def.methods = petiteResolvers.resolveMethodInjectionPoint(def.type); } // ctors if (def.ctor == null) { def.ctor = petiteResolvers.resolveCtorInjectionPoint(def.type); } // values if (def.values == null) { def.values = paramManager.resolveParamInjectionPoints(def.type); } // sets if (def.sets == null) { def.sets = petiteResolvers.resolveSetInjectionPoint(def.type, def.wiringMode == WiringMode.AUTOWIRE); } // params if (def.params == null) { def.params = paramManager.filterParametersForBeanName(def.name, petiteConfig.getResolveReferenceParameters()); } }\n\n    ### Response:", "ground_truth": "Resolves and initializes bean definition. May be called multiple times.", "predict": "Initiates and wires fields and setters of the bean to the Spring context during initialization of the bean definition. It also wires the bean to Spring context during destruction of the bean definition for proper disposal of the bean during Spring context disposal. It wires fields to Spring context during initialization of the bean definition for proper bean field values during Spring context initialization of the bean definition. It wires setters to Spring context during initialization of the bean definition for proper bean property values during Spring context initialization of the bean definition. It wires Bean attributes to Spring context during initialization of the bean definition for proper bean attributes during Spring context initialization of the bean definition. It wires Bean annotations to Spring context during initialization of the bean definition for proper bean annotations during Spring context initialization of the bean definition. It wires Bean constructor to Spring context during initialization of the bean definition for proper bean constructor during Spring context initialization of the bean definition. It wires Bean setters to Spring context during initialization of the bean definition for proper bean setters during Spring context initialization"}, {"ID": 1047, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func startProcessingOnUDP(s *Server, protocol string, addr *net.UDPAddr, pool *sync.Pool, proc udpProcessor) net.Addr { reusePort := s.numReaders != 1 // If we're reusing the port, make sure we're listening on the // exact same address always; this is mostly relevant for // tests, where port is typically 0 and the initial ListenUDP // call results in a contrete port. if reusePort { sock, err := NewSocket(addr, s.RcvbufBytes, reusePort) if err != nil { panic(fmt.Sprintf(\"couldn't listen on UDP socket %v: %v\", addr, err)) } defer sock.Close() addr = sock.LocalAddr().(*net.UDPAddr) } addrChan := make(chan net.Addr, 1) once := sync.Once{} for i := 0; i < s.numReaders; i++ { go func() { defer func() { ConsumePanic(s.Sentry, s.TraceClient, s.Hostname, recover()) }() // each goroutine gets its own socket // if the sockets support SO_REUSEPORT, then this will cause the // kernel to distribute datagrams across them, for better read // performance sock, err := NewSocket(addr, s.RcvbufBytes, reusePort) if err != nil { // if any goroutine fails to create the socket, we can't really // recover, so we just blow up // this probably indicates a systemic issue, eg lack of // SO_REUSEPORT support panic(fmt.Sprintf(\"couldn't listen on UDP socket %v: %v\", addr, err)) } // Pass the address that we are listening on // back to whoever spawned this goroutine so // it can return that address. once.Do(func() { addrChan <- sock.LocalAddr() log.WithFields(logrus.Fields{ \"address\": sock.LocalAddr(), \"protocol\": protocol, \"listeners\": s.numReaders, }).Info(\"Listening on UDP address\") close(addrChan) }) proc(sock, pool) }() } return <-addrChan }\n\n    ### Response: // startProcessingOnUDP starts network num_readers listeners on the\n// given address in one goroutine each, using the passed pool. When\n// the listener is established, it starts the udpProcessor with the\n// listener..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Object invokeProvider(final ProviderDefinition provider) { if (provider.method != null) { final Object bean; if (provider.beanName != null) { // instance factory method bean = getBean(provider.beanName); } else { // static factory method bean = null; } try { return provider.method.invoke(bean); } catch (Exception ex) { throw new PetiteException(\"Invalid provider method: \" + provider.method.getName(), ex); } } throw new PetiteException(\"Invalid provider\"); }\n\n    ### Response:", "ground_truth": "Invokes provider to get a bean.", "predict": "The method InvokeProvider invokes the given ProviderDefinition to generate an Object for the given beanName or bean instance, and catches exception during invocation of the method of the given bean to generate an Invalid Provider exception."}, {"ID": 1048, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def authenticate(self, username, password): \"\"\" Authenticate user on server. :param username: Username used to be authenticated. :type username: six.string_types :param password: Password used to be authenticated. :type password: six.string_types :return: True if successful. :raises: InvalidCredentials, AuthenticationNotSupported, MemcachedException :rtype: bool \"\"\" self._username = username self._password = password # Reopen the connection with the new credentials. self.disconnect() self._open_connection() return self.authenticated\n\n    ### Response: Authenticate user on server.\n\n        :param username: Username used to be authenticated.\n        :type username: six.string_types\n        :param password: Password used to be authenticated.\n        :type password: six.string_types\n        :return: True if successful.\n        :raises: InvalidCredentials, AuthenticationNotSupported, MemcachedException\n        :rtype: bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void addBean(final String name, final Object bean, WiringMode wiringMode) { wiringMode = petiteConfig.resolveWiringMode(wiringMode); registerPetiteBean(bean.getClass(), name, SingletonScope.class, wiringMode, false, null); BeanDefinition def = lookupExistingBeanDefinition(name); registerBeanAndWireAndInjectParamsAndInvokeInitMethods(new BeanData(this, def, bean)); }\n\n    ### Response:", "ground_truth": "Adds object instance to the container as singleton bean.", "predict": "\n    WiringMode resolveWiringMode(WiringMode wiringMode);\n    BeanDefinition lookUpExistingBeanDefinition(String beanName);\n    BeanData lookUpBeanData(Class beanType, String beanName);\n    void lookUpBean(Class beanType, String beanName);\n    void lookUpBean(Class beanType, String beanName, WiringMode wiringMode);\n    void lookUpBean(Class beanType, String beanName, WiringMode wiringMode, boolean strict);\n    void lookUpBean(Class beanType, String beanName, WiringMode wiringMode, boolean strict, Map<String, Object> params);\n    void lookUpBean(Class beanType, String beanName);\n    void lookUpBean(Class beanType, String beanName, WiringMode wiringMode);\n    void lookUpBean(Class beanType, String beanName, WiringMode wiringMode, boolean strict);\n    void lookUpBean(Class"}, {"ID": 1049, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getNewInstance() { $className = $this->objectMetadata->getName(); if (class_exists($className) === false) { throw new \\RuntimeException('Unable to create new instance of ' . $className); } return new $className; }\n\n    ### Response: Return a new instance of the object\n\n@return object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setBeanProperty(final String name, final Object value) { Object bean = null; int ndx = name.length(); while (true) { ndx = name.lastIndexOf('.', ndx); if (ndx == -1) { break; } String beanName = name.substring(0, ndx); bean = getBean(beanName); if (bean != null) { break; } ndx--; } if (bean == null) { throw new PetiteException(\"Invalid bean property: \" + name); } try { BeanUtil.declared.setProperty(bean, name.substring(ndx + 1), value); } catch (Exception ex) { throw new PetiteException(\"Invalid bean property: \" + name, ex); } }\n\n    ### Response:", "ground_truth": "Sets petite bean property.", "predict": "\n    Sets the bean property of the given bean to the given value\n\nPetite bean property setter"}, {"ID": 1050, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def add_messages(self, validation): \"\"\" Adds all the messages in the specified `Validation` object to this instance's messages array. Args: validation (Validation): An object containing the messages to add to this instance's messages. \"\"\" if not isinstance(validation, Validation): raise TypeError(\"Argument must be of type Validation\") self.messages.extend(validation.messages)\n\n    ### Response: Adds all the messages in the specified `Validation` object to this instance's\n        messages array.\n\n        Args:\n            validation (Validation): An object containing the messages to add to this instance's messages..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object getBeanProperty(final String name) { int ndx = name.indexOf('.'); if (ndx == -1) { throw new PetiteException(\"Only bean name is specified, missing property name: \" + name); } String beanName = name.substring(0, ndx); Object bean = getBean(beanName); if (bean == null) { throw new PetiteException(\"Bean doesn't exist: \" + name); } try { return BeanUtil.declared.getProperty(bean, name.substring(ndx + 1)); } catch (Exception ex) { throw new PetiteException(\"Invalid bean property: \" + name, ex); } }\n\n    ### Response:", "ground_truth": "Returns petite bean property value.", "predict": "\n    Gets the specified bean property from the specified bean name. It first looks up the bean name in the Spring bean definition, and if the bean does not exist,\n    an exception is thrown. Afterwards, the bean property is retrieved from the Spring bean definition and returned to the caller."}, {"ID": 1051, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func WithStepMetrics(i admission.Interface) admission.Interface { return WithMetrics(i, Metrics.ObserveAdmissionStep) }\n\n    ### Response: // WithStepMetrics is a decorator for a whole admission phase, i.e. admit or validation.admission step..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void shutdown() { scopes.forEachValue(Scope::shutdown); externalsCache.clear(); beans.clear(); beansAlt.clear(); scopes.clear(); providers.clear(); beanCollections.clear(); }\n\n    ### Response:", "ground_truth": "Shutdowns container. After container is down, it can't be used anymore.", "predict": "The given method declares a single, single-line comment, but no method-level description, so we will generate an appropriate one.: The given method declares a single, single-line comment, but no method-level description, so we will generate an appropriate one.: The given method declares a single, single-line comment, but no method-level description, so we will generate an appropriate one.: The given method declares a single, single-line comment, but no method-level description, so we will generate an appropriate one.: The given method declares a single, single-line comment, but no method-level description, so we will generate an appropriate one.: The given method declares a single, single-line comment, but no method-level description, so we will generate an appropriate one.: The given method declares a single, single-line comment, but no method-level description, so we will generate an appropriate one.: The given method declares a single, single-line comment, but no method-level description,"}, {"ID": 1052, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static function callbackRetrievedStaticFunction($patternKey, $model) { $patternPrefixesOptions = self::getFunctionalPatternPrefixesOptions(); $patternKeyPrefix = self::getPatternKeyPrefix($patternKey); $patternKeyValue = self::getPatternKeyValue($patternKey); $patternPrefixFunctionName = ArrayHelper::getValue($patternPrefixesOptions, $patternKeyPrefix); if (!method_exists(__CLASS__, $patternPrefixFunctionName)) { throw new InvalidConfigException('\"'.__CLASS__.'\" does not exist function with name \"'.$patternPrefixFunctionName.'\"'); } return call_user_func([__CLASS__, $patternPrefixFunctionName], $patternKeyValue, $model); }\n\n    ### Response: Callback retrieved function based on callback pattern key prefix.\n\n@param $patternKey\n@param $model\n\n@return mixed\n@throws InvalidConfigException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static MethodParameter[] resolveParameters(final AccessibleObject methodOrCtor) { Class[] paramTypes; Class declaringClass; String name; if (methodOrCtor instanceof Method) { Method method = (Method) methodOrCtor; paramTypes = method.getParameterTypes(); name = method.getName(); declaringClass = method.getDeclaringClass(); } else { Constructor constructor = (Constructor) methodOrCtor; paramTypes = constructor.getParameterTypes(); declaringClass = constructor.getDeclaringClass(); name = CTOR_METHOD; } if (paramTypes.length == 0) { return MethodParameter.EMPTY_ARRAY; } InputStream stream; try { stream = ClassLoaderUtil.getClassAsStream(declaringClass); } catch (IOException ioex) { throw new ParamoException(\"Failed to read class bytes: \" + declaringClass.getName(), ioex); } if (stream == null) { throw new ParamoException(\"Class not found: \" + declaringClass); } try { ClassReader reader = new ClassReader(stream); MethodFinder visitor = new MethodFinder(declaringClass, name, paramTypes); reader.accept(visitor, 0); return visitor.getResolvedParameters(); } catch (IOException ioex) { throw new ParamoException(ioex); } finally { StreamUtil.close(stream); } }\n\n    ### Response:", "ground_truth": "Resolves method parameters from a method or constructor.\nReturns an empty array when target does not contain any parameter.\nNo caching is involved in this process, i.e. class bytecode\nis examined every time this method is called.", "predict": "Resolves parameter values of a given method or constructor of an object to be invoked or constructed given parameter names and parameter types of the method or constructor."}, {"ID": 1053, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Integer delete(CMAEnvironment environment) { assertNotNull(environment.getSpaceId(), \"spaceId\"); assertNotNull(environment.getId(), \"environmentId\"); return service.delete( getVersionOrThrow(environment, \"version\"), environment.getSpaceId(), environment.getId() ).blockingFirst().code(); }\n\n    ### Response: Delete an environment.\n\n@param environment the environment to be deleted\n@return Integer representing the result (204, or an error code)\n@throws IllegalArgumentException if environment's space id is null.\n@throws IllegalArgumentException if environment's id is null.\n@throws IllegalArgumentException if environment's version is null..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public int doAfterBody() throws JspException { BodyContent body = getBodyContent(); JspWriter out = body.getEnclosingWriter(); String bodytext = populateForm(body.getString(), name -> value(name, pageContext)); try { out.print(bodytext); } catch (IOException ioex) { throw new JspException(ioex); } return SKIP_BODY; }\n\n    ### Response:", "ground_truth": "Performs smart form population.", "predict": "Populates the body of the document with the given contents and writes it to the output stream."}, {"ID": 1054, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Type getUpperBound(Type type, Types types) { if (type.hasTag(TypeTag.WILDCARD)) { return types.wildUpperBound(type); } if (type.hasTag(TypeTag.TYPEVAR) && ((TypeVar) type).isCaptured()) { return types.cvarUpperBound(type); } if (type.getUpperBound() != null) { return type.getUpperBound(); } // concrete type, e.g. java.lang.String, or a case we haven't considered return type; }\n\n    ### Response: Returns the upper bound of a type if it has one, or the type itself if not. Correctly handles\nwildcards and capture variables..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getValue(final String... profiles) { if (hasMacro) { return propsData.resolveMacros(value, profiles); } return value; }\n\n    ### Response:", "ground_truth": "Returns the property value, with replaced macros.", "predict": "Resolves an interpolated string to its evaluated form and returns it or the original string if there were no macros to resolve.."}, {"ID": 1055, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def init_dirs(main_dir: Path, logfilepath: Path): \"\"\" Initialize the main directories. :param main_dir: main directory :type main_dir: ~pathlib.Path :param logfilepath: log file :type logfilepath: ~pathlib.Path \"\"\" global MAIN_DIR, TEMP_DIR, DOWNLOAD_DIR, SAVESTAT_DIR, LOGFILE_PATH MAIN_DIR = main_dir TEMP_DIR = MAIN_DIR.joinpath(Path('temp/')) DOWNLOAD_DIR = MAIN_DIR.joinpath(Path('downloads/')) SAVESTAT_DIR = MAIN_DIR.joinpath(Path('savestates/')) LOGFILE_PATH = MAIN_DIR.joinpath(logfilepath)\n\n    ### Response: Initialize the main directories.\n\n    :param main_dir: main directory\n    :type main_dir: ~pathlib.Path\n    :param logfilepath: log file\n    :type logfilepath: ~pathlib.Path.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void end() { if (parentNode != rootNode) { Node thisNode = parentNode; while (thisNode != rootNode) { if (domBuilder.config.isImpliedEndTags()) { if (implRules.implicitlyCloseTagOnEOF(thisNode.getNodeName())) { thisNode = thisNode.getParentNode(); continue; } } error(\"Unclosed tag closed: <\" + thisNode.getNodeName() + \">\"); thisNode = thisNode.getParentNode(); } } // remove whitespaces if (domBuilder.config.isIgnoreWhitespacesBetweenTags()) { removeLastChildNodeIfEmptyText(parentNode, true); } // foster if (domBuilder.config.isUseFosterRules()) { HtmlFosterRules fosterRules = new HtmlFosterRules(); fosterRules.fixFosterElements(rootNode); } // elapsed rootNode.end(); if (log.isDebugEnabled()) { log.debug(\"LagartoDom tree created in \" + rootNode.getElapsedTime() + \" ms\"); } }\n\n    ### Response:", "ground_truth": "Finishes the tree building. Closes unclosed tags.", "predict": "\n    When the document type of the document is XML, the document must contains an XML declaration with its name and its version, although these can be implied in the document by omitting them in the document declaration. If these elements are missing in the document, <?xml version=\"1.0\"?><html><head><meta /><head></html> document must be flagged as validation error because these elements are required in an XML document but missing in this document. If you omit <?xml version=\"1.0\"?><html><head><meta /><head></html>, <?xml version=\"1.0\"?><html><head><meta /><head></html> document may produce an output but no validation can be performed because there is no DTD or other document type declaration which can be used to determine if the document contains any validation error or not because there is no DTD or other document type declaration which can be used to determine if the document contains any validation error or not because there is no DTD or other document type declaration which can"}, {"ID": 1056, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function userInfo(string $username): Lastfm { $this->query = array_merge($this->query, [ 'method' => 'user.getInfo', 'user' => $username, ]); $this->pluck = 'user'; return $this; }\n\n    ### Response: Get an array with user information.\n\n@param string $username\n\n@return Lastfm.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Element createElementNode(final Tag tag) { boolean hasVoidTags = htmlVoidRules != null; boolean isVoid = false; boolean selfClosed = false; if (hasVoidTags) { isVoid = htmlVoidRules.isVoidTag(tag.getName()); // HTML and XHTML if (isVoid) { // it's void tag, lookup the flag selfClosed = domBuilder.config.isSelfCloseVoidTags(); } } else { // XML, no voids, lookup the flag selfClosed = domBuilder.config.isSelfCloseVoidTags(); } return new Element(rootNode, tag, isVoid, selfClosed); }\n\n    ### Response:", "ground_truth": "Creates new element with correct configuration.", "predict": "Creates an Element node with given tag and attributes and flags."}, {"ID": 1057, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function datasetName($project, $location, $dataset) { return self::getDatasetNameTemplate()->render([ 'project' => $project, 'location' => $location, 'dataset' => $dataset, ]); }\n\n    ### Response: Formats a string containing the fully-qualified path to represent\na dataset resource.\n\n@param string $project\n@param string $location\n@param string $dataset\n\n@return string The formatted dataset resource.\n@experimental.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void tag(final Tag tag) { if (!enabled) { return; } TagType tagType = tag.getType(); Element node; switch (tagType) { case START: if (domBuilder.config.isIgnoreWhitespacesBetweenTags()) { removeLastChildNodeIfEmptyText(parentNode, false); } node = createElementNode(tag); if (domBuilder.config.isImpliedEndTags()) { while (true) { String parentNodeName = parentNode.getNodeName(); if (!implRules.implicitlyCloseParentTagOnNewTag(parentNodeName, node.getNodeName())) { break; } parentNode = parentNode.getParentNode(); if (log.isDebugEnabled()) { log.debug(\"Implicitly closed tag <\" + node.getNodeName() + \"> \"); } } } parentNode.addChild(node); if (!node.isVoidElement()) { parentNode = node; } break; case END: if (domBuilder.config.isIgnoreWhitespacesBetweenTags()) { removeLastChildNodeIfEmptyText(parentNode, true); } String tagName = tag.getName().toString(); Node matchingParent = findMatchingParentOpenTag(tagName); if (matchingParent == parentNode) { // regular situation parentNode = parentNode.getParentNode(); break; } if (matchingParent == null) { // matching open tag not found, remove it error(\"Orphan closed tag ignored: </\" + tagName + \"> \" + tag.getTagPosition()); break; } // try to close it implicitly if (domBuilder.config.isImpliedEndTags()) { boolean fixed = false; while (implRules.implicitlyCloseParentTagOnTagEnd(parentNode.getNodeName(), tagName)) { parentNode = parentNode.getParentNode(); if (log.isDebugEnabled()) { log.debug(\"Implicitly closed tag <\" + tagName + \">\"); } if (parentNode == matchingParent) { parentNode = matchingParent.parentNode; fixed = true; break; } } if (fixed) { break; } } // matching tag found, but it is not a regular situation // therefore close all unclosed tags in between fixUnclosedTagsUpToMatchingParent(tag, matchingParent); break; case SELF_CLOSING: if (domBuilder.config.isIgnoreWhitespacesBetweenTags()) { removeLastChildNodeIfEmptyText(parentNode, false); } node = createElementNode(tag); parentNode.addChild(node); break; } }\n\n    ### Response:", "ground_truth": "Visits tags.", "predict": "Closes the given tag and fixes the document structure by\nclosing any other unclosed tag in the document in order of\nimplicit-nesting-level until the matching parent tag of the given\ntag is reached."}, {"ID": 1058, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def strict(*types): \"\"\"Decorator, type check production rule output\"\"\" def decorate(func): @wraps(func) def wrapper(self, p): func(self, p) if not isinstance(p[0], types): raise YAMLStrictTypeError(p[0], types, func) wrapper.co_firstlineno = func.__code__.co_firstlineno return wrapper return decorate\n\n    ### Response: Decorator, type check production rule output.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void removeLastChildNodeIfEmptyText(final Node parentNode, final boolean closedTag) { if (parentNode == null) { return; } Node lastChild = parentNode.getLastChild(); if (lastChild == null) { return; } if (lastChild.getNodeType() != Node.NodeType.TEXT) { return; } if (closedTag) { if (parentNode.getChildNodesCount() == 1) { return; } } Text text = (Text) lastChild; if (text.isBlank()) { lastChild.detachFromParent(); } }\n\n    ### Response:", "ground_truth": "Removes last child node if contains just empty text.", "predict": "The method-level comment of the above java Code declares the method, its parameters, its action and its caveat, i.e., its potential error condition and corresponding action to take in the case of the error condition arising during its execution. It also provides an overview of the method by stating its action and its utility to the program in general. It may also include its design parameters to illustrate how the method satisfies its design goal and any other information that may be useful for a reader to understand the method in its proper context in the program."}, {"ID": 1059, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getUnpacked() { $tries = 0; $obj = $this->_original; while ($this->_dataLooksZipped($obj)) { $unpacked = gzdecode($obj); if (null === $unpacked || false === $unpacked) { // If anything went wrong with decoding, return result of previous iteration return $obj; } $obj = $unpacked; $tries++; if ($this->_maxDepthReached($tries)) { // Zipped ridiculously deep? Screw that, return the original return $this->_original; } } return $obj; }\n\n    ### Response: Get unzipped data. Will recursively unpack data until it looks like it's no longer gzipped\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getQueryString() { if (sqlTemplate == null) { return toString(); } if (parameterValues == null) { return sqlTemplate; } final StringBuilder sb = new StringBuilder(); int qMarkCount = 0; final StringTokenizer tok = new StringTokenizer(sqlTemplate + ' ', \"?\"); while (tok.hasMoreTokens()) { final String oneChunk = tok.nextToken(); sb.append(oneChunk); try { Object value = null; if (parameterValues.size() > 1 + qMarkCount) { value = parameterValues.get(1 + qMarkCount); qMarkCount++; } else { if (!tok.hasMoreTokens()) { value = \"\"; } } if (value == null) { value = \"?\"; } sb.append(value); } catch (Throwable th) { sb.append(\"--- Building query failed: \").append(th.toString()); } } return sb.toString().trim(); }\n\n    ### Response:", "ground_truth": "Returns the query string.", "predict": "Get query string of SQL string with placeholders and values appended to it"}, {"ID": 1060, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def covariance_points(self,x0,y0,xother,yother): \"\"\" Get the covariance between point x0,y0 and the points contained in xother, yother. Parameters ---------- x0 : (float) x-coordinate y0 : (float) y-coordinate xother : (iterable of floats) x-coordinate of other points yother : (iterable of floats) y-coordinate of other points Returns ------- cov : numpy.ndarray a 1-D array of covariance between point x0,y0 and the points contained in xother, yother. len(cov) = len(xother) = len(yother) \"\"\" cov = np.zeros((len(xother))) + self.nugget for v in self.variograms: cov += v.covariance_points(x0,y0,xother,yother) return cov\n\n    ### Response: Get the covariance between point x0,y0 and the points\n        contained in xother, yother.\n\n        Parameters\n        ----------\n        x0 : (float)\n            x-coordinate\n        y0 : (float)\n            y-coordinate\n        xother : (iterable of floats)\n            x-coordinate of other points\n        yother : (iterable of floats)\n            y-coordinate of other points\n\n        Returns\n        -------\n        cov : numpy.ndarray\n            a 1-D array of covariance between point x0,y0 and the\n            points contained in xother, yother.  len(cov) = len(xother) =\n            len(yother).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String getActionClassName(final Object action) { Class clazz = action.getClass(); clazz = ProxettaUtil.resolveTargetClass(clazz); return clazz.getName(); }\n\n    ### Response:", "ground_truth": "Returns correct action class name. Detects Proxetta classes.", "predict": "Get the actionClassName from the given Object action. The returned string contains the name of the actionClass of the given Object."}, {"ID": 1061, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    async def data( self, message: Union[str, bytes], timeout: DefaultNumType = _default ) -> SMTPResponse: \"\"\" Send an SMTP DATA command, followed by the message given. This method transfers the actual email content to the server. :raises SMTPDataError: on unexpected server response code :raises SMTPServerDisconnected: connection lost \"\"\" await self._ehlo_or_helo_if_needed() # As data accesses protocol directly, some handling is required self._raise_error_if_disconnected() if timeout is _default: timeout = self.timeout # type: ignore if isinstance(message, str): message = message.encode(\"ascii\") async with self._command_lock: start_response = await self.execute_command(b\"DATA\", timeout=timeout) if start_response.code != SMTPStatus.start_input: raise SMTPDataError(start_response.code, start_response.message) try: await self.protocol.write_message_data( # type: ignore message, timeout=timeout ) response = await self.protocol.read_response( # type: ignore timeout=timeout ) except SMTPServerDisconnected as exc: self.close() raise exc if response.code != SMTPStatus.completed: raise SMTPDataError(response.code, response.message) return response\n\n    ### Response: Send an SMTP DATA command, followed by the message given.\n        This method transfers the actual email content to the server.\n\n        :raises SMTPDataError: on unexpected server response code\n        :raises SMTPServerDisconnected: connection lost.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected int calculateTo(final int from, final int count, final int size) { int to = size; if (count != -1) { to = from + count; if (to > size) { to = size; } } return to; }\n\n    ### Response:", "ground_truth": "Calculates 'TO'.", "predict": "\n    Calculate the total number of items to move from the source to the destination, given the source indices, source size, dest indices and dest size arguments."}, {"ID": 1062, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function hasNestedProperty(obj, propertyPath, returnVal = false) { if (!propertyPath) return false; // strip the leading dot propertyPath = propertyPath.replace(/^\\./, ''); const properties = propertyPath.split('.'); for (var i = 0; i < properties.length; i++) { var prop = properties[i]; if (!obj || !obj.hasOwnProperty(prop)) { return returnVal ? null : false; } else { obj = obj[prop]; } } return returnVal ? obj : true; }\n\n    ### Response: Checks to see whether an object has a deeply nested path\n@param {Object} target\n@param {String} propertyPath\n@param {Boolean} returnVal\n@returns {Boolean || Any} will return either true/false for existance or the actual value.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void iterateCollection(final Collection collection, final int from, final int count, final PageContext pageContext) throws JspException { JspFragment body = getJspBody(); Iterator iter = collection.iterator(); int i = 0; int to = calculateTo(from, count, collection.size()); while (i < to) { Object item = iter.next(); if (i >= from) { if (status != null) { iteratorStatus.next(!iter.hasNext()); } TagUtil.setScopeAttribute(var, item, scope, pageContext); TagUtil.invokeBody(body); } i++; } }\n\n    ### Response:", "ground_truth": "Iterates collection.", "predict": "iterates over the given collection and invokes the specified listener for objects found"}, {"ID": 1063, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def max_paths(self, **kwargs): \"\"\"Set BGP max paths property. Args: vrf (str): The VRF for this BGP process. rbridge_id (str): The rbridge ID of the device on which BGP will be configured in a VCS fabric. paths (str): Number of paths for BGP ECMP (default: 8). afi (str): Address family to configure. (ipv4, ipv6) get (bool): Get config instead of editing config. (True, False) callback (function): A function executed upon completion of the method. The only parameter passed to `callback` will be the ``ElementTree`` `config`. Returns: Return value of `callback`. Raises: ``AttributeError``: When `afi` is not one of ['ipv4', 'ipv6'] Examples: >>> import pynos.device >>> conn = ('10.24.39.203', '22') >>> auth = ('admin', 'password') >>> with pynos.device.Device(conn=conn, auth=auth) as dev: ... output = dev.bgp.max_paths(paths='8', ... rbridge_id='225') ... output = dev.bgp.max_paths(paths='8', ... rbridge_id='225', get=True) ... output = dev.bgp.max_paths(paths='8', ... rbridge_id='225', delete=True) ... output = dev.bgp.max_paths(paths='8', afi='ipv6', ... rbridge_id='225') ... output = dev.bgp.max_paths(paths='8', afi='ipv6', ... rbridge_id='225', get=True) ... output = dev.bgp.max_paths(paths='8', afi='ipv6', ... rbridge_id='225', delete=True) ... output = dev.bgp.max_paths(paths='8', afi='ipv5', ... rbridge_id='225') # doctest: +IGNORE_EXCEPTION_DETAIL Traceback (most recent call last): AttributeError \"\"\" afi = kwargs.pop('afi', 'ipv4') callback = kwargs.pop('callback', self._callback) if afi not in ['ipv4', 'ipv6']: raise AttributeError('Invalid AFI.') args = dict(rbridge_id=kwargs.pop('rbridge_id', '1'), load_sharing_value=kwargs.pop('paths', '8')) max_paths = getattr(self._rbridge, 'rbridge_id_router_router_bgp_address_family_{0}_' '{0}_unicast_default_vrf_af_common_cmds_holder_' 'maximum_paths_load_sharing_value'.format(afi)) config = max_paths(**args) if kwargs.pop('get', False): return callback(config, handler='get_config') if kwargs.pop('delete', False): tag = 'maximum-paths' config.find('.//*%s' % tag).set('operation', 'delete') return callback(config)\n\n    ### Response: Set BGP max paths property.\n\n        Args:\n            vrf (str): The VRF for this BGP process.\n            rbridge_id (str): The rbridge ID of the device on which BGP will be\n                configured in a VCS fabric.\n            paths (str): Number of paths for BGP ECMP (default: 8).\n            afi (str): Address family to configure. (ipv4, ipv6)\n            get (bool): Get config instead of editing config. (True, False)\n            callback (function): A function executed upon completion of the\n                method.  The only parameter passed to `callback` will be the\n                ``ElementTree`` `config`.\n\n        Returns:\n            Return value of `callback`.\n\n        Raises:\n            ``AttributeError``: When `afi` is not one of ['ipv4', 'ipv6']\n\n        Examples:\n            >>> import pynos.device\n            >>> conn = ('10.24.39.203', '22')\n            >>> auth = ('admin', 'password')\n            >>> with pynos.device.Device(conn=conn, auth=auth) as dev:\n            ...     output = dev.bgp.max_paths(paths='8',\n            ...     rbridge_id='225')\n            ...     output = dev.bgp.max_paths(paths='8',\n            ...     rbridge_id='225', get=True)\n            ...     output = dev.bgp.max_paths(paths='8',\n            ...     rbridge_id='225', delete=True)\n            ...     output = dev.bgp.max_paths(paths='8', afi='ipv6',\n            ...     rbridge_id='225')\n            ...     output = dev.bgp.max_paths(paths='8', afi='ipv6',\n            ...     rbridge_id='225', get=True)\n            ...     output = dev.bgp.max_paths(paths='8', afi='ipv6',\n            ...     rbridge_id='225', delete=True)\n            ...     output = dev.bgp.max_paths(paths='8', afi='ipv5',\n            ...     rbridge_id='225') # doctest: +IGNORE_EXCEPTION_DETAIL\n            Traceback (most recent call last):\n            AttributeError.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void iterateArray(final Object[] array, final int from, final int count, final PageContext pageContext) throws JspException { JspFragment body = getJspBody(); int len = array.length; int to = calculateTo(from, count, len); int last = to - 1; for (int i = from; i < to; i++) { Object item = array[i]; if (status != null) { iteratorStatus.next(i == last); } TagUtil.setScopeAttribute(var, item, scope, pageContext); TagUtil.invokeBody(body); } }\n\n    ### Response:", "ground_truth": "Iterates arrays.", "predict": "\n    iterated through objects array with indices 0 to count-1, inclusive, and printed\n    objects status and updated objects scope attributes"}, {"ID": 1064, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Client) GetWorkSubmit(data string) (bool, error) { return c.GetWorkSubmitAsync(data).Receive() }\n\n    ### Response: // GetWorkSubmit submits a block header which is a solution to previously\n// requested data and returns whether or not the solution was accepted.\n//\n// See GetWork to request data to work on..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String replace(final String s, final String sub, final String with) { if (sub.isEmpty()) { return s; } int c = 0; int i = s.indexOf(sub, c); if (i == -1) { return s; } int length = s.length(); StringBuilder sb = new StringBuilder(length + with.length()); do { sb.append(s, c, i); sb.append(with); c = i + sub.length(); } while ((i = s.indexOf(sub, c)) != -1); if (c < length) { sb.append(s, c, length); } return sb.toString(); }\n\n    ### Response:", "ground_truth": "Replaces all occurrences of a certain pattern in a string with a\nreplacement string. This is the fastest replace function known to author.\n\n@param s      string to be inspected\n@param sub    string pattern to be replaced\n@param with   string that should go where the pattern was", "predict": "// This method replaces string sub with string with in the given string s.\n    // It first seeks string s from the given startingIndex to see if there is any occurrence of string s and\n    // if there is no occurrence of string s, its simply returns the string s otherwise it seeks string s to\n    // the given endingIndex and appends string with to the string s and returns the new string s with string with\n    // appended to it."}, {"ID": 1065, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (p *ycc) YCbCr() *image.YCbCr { ycbcr := image.NewYCbCr(p.Rect, p.SubsampleRatio) switch ycbcr.SubsampleRatio { case ycbcrSubsampleRatio422: return p.ycbcr422(ycbcr) case ycbcrSubsampleRatio420: return p.ycbcr420(ycbcr) case ycbcrSubsampleRatio440: return p.ycbcr440(ycbcr) case ycbcrSubsampleRatio444: return p.ycbcr444(ycbcr) case ycbcrSubsampleRatio411: return p.ycbcr411(ycbcr) case ycbcrSubsampleRatio410: return p.ycbcr410(ycbcr) } return ycbcr }\n\n    ### Response: // YCbCr converts ycc to a YCbCr image with the same subsample ratio\n// as the YCbCr image that ycc was generated from..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String replaceChar(final String s, final char sub, final char with) { int startIndex = s.indexOf(sub); if (startIndex == -1) { return s; } char[] str = s.toCharArray(); for (int i = startIndex; i < str.length; i++) { if (str[i] == sub) { str[i] = with; } } return new String(str); }\n\n    ### Response:", "ground_truth": "Replaces all occurrences of a character in a string.\n\n@param s      input string\n@param sub    character to replace\n@param with   character to replace with", "predict": "// This function replaces an arbitrary character (given by parameter 'sub') in the input string (given by parameter 's') by its corresponding replacement character ('given by parameter 'with'). It first searches the string s from start to find the first occurrence of the given character and then replaces it with the corresponding replacement character in the string s itself."}, {"ID": 1066, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function asArray() { $array = []; foreach ($this as $key => $val) { if ($val instanceof self) { $val = $val->asArray(); } $array[$key] = $val; } return $array; }\n\n    ### Response: Convert the current instance to a basic array.\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String replaceChars(final String s, final char[] sub, final char[] with) { char[] str = s.toCharArray(); for (int i = 0; i < str.length; i++) { char c = str[i]; for (int j = 0; j < sub.length; j++) { if (c == sub[j]) { str[i] = with[j]; break; } } } return new String(str); }\n\n    ### Response:", "ground_truth": "Replaces all occurrences of a characters in a string.\n\n@param s      input string\n@param sub    characters to replace\n@param with   characters to replace with", "predict": "Replaces characters in the string s with corresponding values of the given arrays of characters."}, {"ID": 1067, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @WillNotClose public static Optional<InterruptedException> uninterruptibleSleepFor(long timeout, TimeUnit unit) { try { unit.sleep(timeout); return Optional.absent(); } catch (InterruptedException e) { return Optional.of(e); } }\n\n    ### Response: Uninterruptible sleep of the current thread\n\nWARNING: you must propagate the exception or interrupt the current thread\n\n@param timeout with unit, the maximum length of time that callers are willing to wait\n@param unit with timeout, the maximum length of time that callers are willing to wait\n@return true if was interrupted or false if not\n\n@see TimeUnit#sleep(long).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String replaceFirst(final String s, final String sub, final String with) { int i = s.indexOf(sub); if (i == -1) { return s; } return s.substring(0, i) + with + s.substring(i + sub.length()); }\n\n    ### Response:", "ground_truth": "Replaces the very first occurrence of a substring with supplied string.\n\n@param s      source string\n@param sub    substring to replace\n@param with   substring to replace with", "predict": "\n    This method replaces the first occurrence of the string \u201csub\u201d in the input string \u201cs\u201d with the string \u201cwith\u201d."}, {"ID": 1068, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def return_type(rettype): \"\"\" Decorate a function to automatically convert its return type to a string using a custom function. Web-based service functions must return text to the client. Tangelo contains default logic to convert many kinds of values into string, but this decorator allows the service writer to specify custom behavior falling outside of the default. If the conversion fails, an appropriate server error will be raised. \"\"\" def wrap(f): @functools.wraps(f) def converter(*pargs, **kwargs): # Run the function to capture the output. result = f(*pargs, **kwargs) # Convert the result using the return type function. try: result = rettype(result) except ValueError as e: http_status(500, \"Return Value Conversion Failed\") content_type(\"application/json\") return {\"error\": str(e)} return result return converter return wrap\n\n    ### Response: Decorate a function to automatically convert its return type to a string\n    using a custom function.\n\n    Web-based service functions must return text to the client.  Tangelo\n    contains default logic to convert many kinds of values into string, but this\n    decorator allows the service writer to specify custom behavior falling\n    outside of the default.  If the conversion fails, an appropriate server\n    error will be raised..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String replaceFirst(final String s, final char sub, final char with) { int index = s.indexOf(sub); if (index == -1) { return s; } char[] str = s.toCharArray(); str[index] = with; return new String(str); }\n\n    ### Response:", "ground_truth": "Replaces the very first occurrence of a character in a string.\n\n@param s      string\n@param sub    char to replace\n@param with   char to replace with", "predict": "\n    This method replaces the first occurrence of the given sub-character (which may be a single character) with the given replacement character in the input string."}, {"ID": 1069, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void initializeData(DateFormatSymbols dfs) { this.eras = dfs.eras; this.eraNames = dfs.eraNames; this.narrowEras = dfs.narrowEras; this.months = dfs.months; this.shortMonths = dfs.shortMonths; this.narrowMonths = dfs.narrowMonths; this.standaloneMonths = dfs.standaloneMonths; this.standaloneShortMonths = dfs.standaloneShortMonths; this.standaloneNarrowMonths = dfs.standaloneNarrowMonths; this.weekdays = dfs.weekdays; this.shortWeekdays = dfs.shortWeekdays; this.shorterWeekdays = dfs.shorterWeekdays; this.narrowWeekdays = dfs.narrowWeekdays; this.standaloneWeekdays = dfs.standaloneWeekdays; this.standaloneShortWeekdays = dfs.standaloneShortWeekdays; this.standaloneShorterWeekdays = dfs.standaloneShorterWeekdays; this.standaloneNarrowWeekdays = dfs.standaloneNarrowWeekdays; this.ampms = dfs.ampms; this.ampmsNarrow = dfs.ampmsNarrow; this.timeSeparator = dfs.timeSeparator; this.shortQuarters = dfs.shortQuarters; this.quarters = dfs.quarters; this.standaloneShortQuarters = dfs.standaloneShortQuarters; this.standaloneQuarters = dfs.standaloneQuarters; this.leapMonthPatterns = dfs.leapMonthPatterns; this.shortYearNames = dfs.shortYearNames; this.shortZodiacNames = dfs.shortZodiacNames; this.abbreviatedDayPeriods = dfs.abbreviatedDayPeriods; this.wideDayPeriods = dfs.wideDayPeriods; this.narrowDayPeriods = dfs.narrowDayPeriods; this.standaloneAbbreviatedDayPeriods = dfs.standaloneAbbreviatedDayPeriods; this.standaloneWideDayPeriods = dfs.standaloneWideDayPeriods; this.standaloneNarrowDayPeriods = dfs.standaloneNarrowDayPeriods; this.zoneStrings = dfs.zoneStrings; // always null at initialization time for now this.localPatternChars = dfs.localPatternChars; this.capitalization = dfs.capitalization; this.actualLocale = dfs.actualLocale; this.validLocale = dfs.validLocale; this.requestedLocale = dfs.requestedLocale; }\n\n    ### Response: Initializes format symbols using another instance.\n\nTODO Clean up initialization methods for subclasses.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String replaceLast(final String s, final String sub, final String with) { int i = s.lastIndexOf(sub); if (i == -1) { return s; } return s.substring(0, i) + with + s.substring(i + sub.length()); }\n\n    ### Response:", "ground_truth": "Replaces the very last occurrence of a substring with supplied string.\n\n@param s      source string\n@param sub    substring to replace\n@param with   substring to replace with", "predict": "\n    The given method replaces the last occurrence of the given string with another string in the given string s. It takes as arguments the string to be replaced, the string to insert and the string to insert with the substring of the source string after the replaced string to form the new string s."}, {"ID": 1070, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getRandomCaptchaText($length = null) { if (empty($length)) { $length = rand($this->minWordLength, $this->maxWordLength); } $words = \"abcdefghijlmnopqrstvwyz\"; $vocals = \"aeiou\"; $text = \"\"; $vocal = rand(0, 1); for ($i=0; $i<$length; $i++) { if ($vocal) { $text .= substr($vocals, mt_rand(0, 4), 1); } else { $text .= substr($words, mt_rand(0, 22), 1); } $vocal = !$vocal; } return $text; }\n\n    ### Response: Random text generation\n\n@param int|null Text length\n@return string Text.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String replaceLast(final String s, final char sub, final char with) { int index = s.lastIndexOf(sub); if (index == -1) { return s; } char[] str = s.toCharArray(); str[index] = with; return new String(str); }\n\n    ### Response:", "ground_truth": "Replaces the very last occurrence of a character in a string.\n\n@param s      string\n@param sub    char to replace\n@param with   char to replace with", "predict": "\n    This method generates a string with the given sub-character replaced by another given character at the end of the string s."}, {"ID": 1071, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func bindArray(bindType int, query string, arg interface{}, m *reflectx.Mapper) (string, []interface{}, error) { // do the initial binding with QUESTION; if bindType is not question, // we can rebind it at the end. bound, names, err := compileNamedQuery([]byte(query), QUESTION) if err != nil { return \"\", []interface{}{}, err } arrayValue := reflect.ValueOf(arg) arrayLen := arrayValue.Len() if arrayLen == 0 { return \"\", []interface{}{}, fmt.Errorf(\"length of array is 0: %#v\", arg) } var arglist []interface{} for i := 0; i < arrayLen; i++ { elemArglist, err := bindArgs(names, arrayValue.Index(i).Interface(), m) if err != nil { return \"\", []interface{}{}, err } arglist = append(arglist, elemArglist...) } if arrayLen > 1 { bound = fixBound(bound, arrayLen) } // adjust binding type if we weren't on question if bindType != QUESTION { bound = Rebind(bindType, bound) } return bound, arglist, nil }\n\n    ### Response: // bindArray binds a named parameter query with fields from an array or slice of\n// structs argument..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String remove(final String s, final String sub) { int c = 0; int sublen = sub.length(); if (sublen == 0) { return s; } int i = s.indexOf(sub, c); if (i == -1) { return s; } StringBuilder sb = new StringBuilder(s.length()); do { sb.append(s, c, i); c = i + sublen; } while ((i = s.indexOf(sub, c)) != -1); if (c < s.length()) { sb.append(s, c, s.length()); } return sb.toString(); }\n\n    ### Response:", "ground_truth": "Removes all substring occurrences from the string.\n\n@param s      source string\n@param sub    substring to remove", "predict": "// This method removes an arbitrary string from the given string s by replacing it\n    // with an empty string of the given length"}, {"ID": 1072, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def after_func_accept_retry_state(fn): \"\"\"Wrap \"after\" function to accept \"retry_state\".\"\"\" if not six.callable(fn): return fn if func_takes_retry_state(fn): return fn @_utils.wraps(fn) def wrapped_after_sleep_func(retry_state): # func, trial_number, trial_time_taken warn_about_non_retry_state_deprecation('after', fn, stacklevel=4) return fn( retry_state.fn, retry_state.attempt_number, retry_state.seconds_since_start) return wrapped_after_sleep_func\n\n    ### Response: Wrap \"after\" function to accept \"retry_state\"..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String remove(final String string, final char ch) { int stringLen = string.length(); char[] result = new char[stringLen]; int offset = 0; for (int i = 0; i < stringLen; i++) { char c = string.charAt(i); if (c == ch) { continue; } result[offset] = c; offset++; } if (offset == stringLen) { return string; // no changes } return new String(result, 0, offset); }\n\n    ### Response:", "ground_truth": "Removes a single character from string.\n\n@param string    source string\n@param ch  character to remove", "predict": "Wrap \"after\" function to accept \"retry_state\"..\n\n    "}, {"ID": 1073, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def show_member(self, member, **_params): \"\"\"Fetches information of a certain load balancer member.\"\"\" return self.get(self.member_path % (member), params=_params)\n\n    ### Response: Fetches information of a certain load balancer member..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isAllEmpty(final String... strings) { for (String string : strings) { if (!isEmpty(string)) { return false; } } return true; }\n\n    ### Response:", "ground_truth": "Determines if string array contains empty strings.\n@see #isEmpty(CharSequence)", "predict": "Checks if all arguments provided to the method\n    ///  are empty, i.e., contain no non-whitespace characters.\n    ///\n    /// If arguments contain non-whitespace, the method\n    /// returns false; otherwise, it returns true."}, {"ID": 1074, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") @VisibleForTesting Map<String, Class<? extends Service>> mapEventSources() throws IOException { /* Obtains all classpath's top level classes */ ClassLoader classLoader = Thread.currentThread().getContextClassLoader(); Set<ClassPath.ClassInfo> classes = ClassPath.from(classLoader).getAllClasses(); ClassLoaderRepository repository = new ClassLoaderRepository(classLoader); LOGGER.info(\"Scanning classpath for EventHandlers....\"); /* iterates over all classes, filter by HandlesEvent annotation and transforms stream to needed form */ Map<String, Class<? extends Service>> collected = classes.parallelStream() /* loads class infos */ .map(classInfo -> { try { /* sometimes exception occurs during class loading. Return empty/absent in this case */ return Optional.of(repository.loadClass(classInfo.getName())); } catch (ClassNotFoundException e) { LOGGER.trace(\"Class cannot be loaded: {}\", classInfo.getName(), e); return Optional.<JavaClass>empty(); } }) /* filters classes which is present and marked with EventSource annotation */ .filter(((Predicate<Optional<JavaClass>>) Optional::isPresent) .and(javaClassOptional -> { return Arrays.stream(javaClassOptional.get().getAnnotationEntries()).anyMatch(annotationEntry -> { return Type.getType(annotationEntry.getAnnotationType()).toString().equals(EventSource.class.getCanonicalName()); }); }) .and(javaClassOptional -> { try { return Arrays.stream(javaClassOptional.get().getAllInterfaces()).anyMatch(iface -> { return iface.getClassName().equals(Service.class.getCanonicalName()); }); } catch (ClassNotFoundException e) { LOGGER.trace(\"Class annotations cannot be loaded: {}\", javaClassOptional.get().getClassName(), e); return false; } })) /* transforms from Optional<JavaClass> to Class (obtaining values from Optionals) */ .map(javaClassOptional -> { try { return (Class<? extends Service>) classLoader.loadClass(javaClassOptional.get().getClassName()); } catch (ClassNotFoundException e) { LOGGER.trace(\"Class cannot be loaded: {}\", javaClassOptional.get().getClassName(), e); return null; } }) .filter(Objects::nonNull) .collect(Collectors.toMap(clazz -> clazz.getAnnotation(EventSource.class).value(), clazz -> clazz)); LOGGER.info(\"Found {} event handlers\", collected.size()); return collected; }\n\n    ### Response: Scans whole application classpath and finds events sources\n\n@return 'event source name' -> 'event handler class' map\n@throws IOException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isAllBlank(final String... strings) { for (String string : strings) { if (!isBlank(string)) { return false; } } return true; }\n\n    ### Response:", "ground_truth": "Determines if string array contains just blank strings.", "predict": "All arguments must be null, empty, or completely blank string"}, {"ID": 1075, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *Segment) recordStatusCode(statusCode int) { switch { case statusCode == http.StatusTooManyRequests: s.Throttle = true case statusCode >= 400 && statusCode < 500: s.Fault = true case statusCode >= 500: s.Error = true } }\n\n    ### Response: // recordStatusCode sets Throttle, Fault, Error\n//\n// It is expected that the mutex has already been locked when calling this method..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String[] toStringArray(final Object value) { if (value == null) { return new String[0]; } Class<?> type = value.getClass(); if (!type.isArray()) { return new String[] {value.toString()}; } Class componentType = type.getComponentType(); if (componentType.isPrimitive()) { if (componentType == int.class) { return ArraysUtil.toStringArray((int[]) value); } else if (componentType == long.class) { return ArraysUtil.toStringArray((long[]) value); } else if (componentType == double.class) { return ArraysUtil.toStringArray((double[]) value); } else if (componentType == float.class) { return ArraysUtil.toStringArray((float[]) value); } else if (componentType == boolean.class) { return ArraysUtil.toStringArray((boolean[]) value); } else if (componentType == short.class) { return ArraysUtil.toStringArray((short[]) value); } else if (componentType == byte.class) { return ArraysUtil.toStringArray((byte[]) value); } else { throw new IllegalArgumentException(); } } else { return ArraysUtil.toStringArray((Object[]) value); } }\n\n    ### Response:", "ground_truth": "Converts an array object to array of strings, where every element\nof input array is converted to a string. If input is not an array,\nthe result will still be an array with one element.", "predict": "// convert objects to string arrays\n//\n// If objects aren't objects, convert to string\n// If objects aren't objects, convert to string"}, {"ID": 1076, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def enable_busy_cursor(self): \"\"\"Set the hourglass enabled.\"\"\" QgsApplication.instance().setOverrideCursor( QtGui.QCursor(QtCore.Qt.WaitCursor) )\n\n    ### Response: Set the hourglass enabled..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static String changeFirstCharacterCase(final boolean capitalize, final String string) { int strLen = string.length(); if (strLen == 0) { return string; } char ch = string.charAt(0); char modifiedCh; if (capitalize) { modifiedCh = Character.toUpperCase(ch); } else { modifiedCh = Character.toLowerCase(ch); } if (modifiedCh == ch) { // no change, return unchanged string return string; } char[] chars = string.toCharArray(); chars[0] = modifiedCh; return new String(chars); }\n\n    ### Response:", "ground_truth": "Internal method for changing the first character case.", "predict": "This method changes the first character of the string to its \n    ///  case-equivalent, depending on the capitalization setting of the program."}, {"ID": 1077, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setHasVisibleSubCats($blHasVisibleSubcats) { if ($blHasVisibleSubcats && !$this->_blHasVisibleSubCats) { unset($this->_blIsVisible); if ($this->_oParent instanceof \\OxidEsales\\Eshop\\Application\\Model\\Category) { $this->_oParent->setHasVisibleSubCats(true); } } $this->_blHasVisibleSubCats = $blHasVisibleSubcats; }\n\n    ### Response: sets the state of has visible sub categories for the category\n\n@param bool $blHasVisibleSubcats marker if category has visible subcategories.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String title(final String string) { char[] chars = string.toCharArray(); boolean wasWhitespace = true; for (int i = 0; i < chars.length; i++) { char c = chars[i]; if (CharUtil.isWhitespace(c)) { wasWhitespace = true; } else { if (wasWhitespace) { chars[i] = Character.toUpperCase(c); } else { chars[i] = Character.toLowerCase(c); } wasWhitespace = false; } } return new String(chars); }\n\n    ### Response:", "ground_truth": "Makes a title-cased string from given input.", "predict": "generates an appropriate title string from the given string"}, {"ID": 1078, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setOnClick(String onClick) { _theadTag.registerAttribute(AbstractHtmlState.ATTR_JAVASCRIPT, HtmlConstants.ONCLICK, onClick); }\n\n    ### Response: Sets the onClick JavaScript event for the HTML thead tag.\n\n@param onClick the onClick event.\n@jsptagref.attributedescription The onClick JavaScript event for the HTML thead tag.\n@jsptagref.attributesyntaxvalue string_onClick\n@netui:attribute required=\"false\" rtexprvalue=\"true\" description=\"The onClick JavaScript event for the HTML thead tag.\".\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String compressChars(final String s, final char c) { int len = s.length(); StringBuilder sb = new StringBuilder(len); boolean wasChar = false; for (int i = 0; i < len; i++) { char c1 = s.charAt(i); if (c1 == c) { if (wasChar) { continue; } wasChar = true; } else { wasChar = false; } sb.append(c1); } if (sb.length() == len) { return s; } return sb.toString(); }\n\n    ### Response:", "ground_truth": "Compress multiple occurrences of given char into one appearance.", "predict": "Compresses single character repeats in the given string s to the single character of interest plus an extra character of the string's choice (typically, an alpha character of s's alphabet), e.g. given s = \u201chello\u201d, compressing \u201chello\u201d to \u201chel\u201d, and given s = \u201cabcd\u201d, compressing \u201cabcd\u201d to \u201cabc\u201d."}, {"ID": 1079, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function array2list($arr, $type = null) { if (!is_array($arr)) { return $this->quote($arr, $type); } foreach ($arr as $idx => $item) { $arr[$idx] = $this->quote($item, $type); } return implode(',', $arr); }\n\n    ### Response: Return list of elements for use with SQL's IN clause\n\n@param array  $arr  Input array\n@param string $type Type of data (integer, bool, ident)\n\n@return string Comma-separated list of quoted values for use in query.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean startsWithIgnoreCase(final String src, final String subS, final int startIndex) { String sub = subS.toLowerCase(); int sublen = sub.length(); if (startIndex + sublen > src.length()) { return false; } int j = 0; int i = startIndex; while (j < sublen) { char source = Character.toLowerCase(src.charAt(i)); if (sub.charAt(j) != source) { return false; } j++; i++; } return true; }\n\n    ### Response:", "ground_truth": "Tests if this string starts with the specified prefix with ignored case\nand with the specified prefix beginning a specified index.\n\n@param src        source string to test\n@param subS       starting substring\n@param startIndex index from where to test\n\n@return true if the character sequence represented by the argument is\na prefix of the character sequence represented by this string;\nfalse otherwise.", "predict": "Comparator to determine whether string begins with case insensitively with the given string"}, {"ID": 1080, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get(self, include_backups=False): \"\"\" Parse the lease file and return a list of Lease instances. \"\"\" leases = [] with open(self.filename) if not self.gzip else gzip.open(self.filename) as lease_file: lease_data = lease_file.read() if self.gzip: lease_data = lease_data.decode('utf-8') for match in self.regex_leaseblock.finditer(lease_data): block = match.groupdict() properties, options, sets = _extract_properties(block['config']) if 'hardware' not in properties and not include_backups: # E.g. rows like {'binding': 'state abandoned', ...} continue lease = Lease(block['ip'], properties=properties, options=options, sets=sets) leases.append(lease) for match in self.regex_leaseblock6.finditer(lease_data): block = match.groupdict() properties, options, sets = _extract_properties(block['config']) host_identifier = block['id'] block_type = block['type'] last_client_communication = parse_time(properties['cltt']) for address_block in self.regex_iaaddr.finditer(block['config']): block = address_block.groupdict() properties, options, sets = _extract_properties(block['config']) lease = Lease6(block['ip'], properties, last_client_communication, host_identifier, block_type, options=options, sets=sets) leases.append(lease) return leases\n\n    ### Response: Parse the lease file and return a list of Lease instances..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean endsWithChar(final String s, final char c) { if (s.length() == 0) { return false; } return s.charAt(s.length() - 1) == c; }\n\n    ### Response:", "ground_truth": "Returns if string ends with provided character.", "predict": "Boolean method to check if the given string ends with the given character\n\n    "}, {"ID": 1081, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function fetch($permlink, $timeout = 10) { if (!$permlink || !function_exists('curl_init')) { return; } $uri = 'https://api-ssl.bitly.com/v3/shorten'. '?login='.urlencode($this->login). '&apiKey='.urlencode($this->apikey). '&longUrl='.urlencode($permlink). '&format=txt'; $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $uri); curl_setopt($ch, CURLOPT_FAILONERROR, 1); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout); curl_setopt($ch, CURLOPT_TIMEOUT, $timeout); $bitcode = curl_exec($ch); curl_close($ch); return $bitcode && strpos($bitcode, 'http') === 0 ? txpspecialchars(trim($bitcode)) : ''; }\n\n    ### Response: Fetches a Bitly short URL.\n\n@param  string $permlink The long URL to shorten\n@param  int    $timeout  Timeout in seconds\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int countIgnoreCase(final String source, final String sub) { int count = 0; int j = 0; int sublen = sub.length(); if (sublen == 0) { return 0; } while (true) { int i = indexOfIgnoreCase(source, sub, j); if (i == -1) { break; } count++; j = i + sublen; } return count; }\n\n    ### Response:", "ground_truth": "Count substring occurrences in a source string, ignoring case.\n\n@param source\tsource string\n@param sub\t\tsubstring to count\n@return\t\t\tnumber of substring occurrences", "predict": "Count the number of occurrences of a string (case insensitively) in another string."}, {"ID": 1082, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Map<String, Object> generateContent() { Map<String, Object> content = extractContent(toPropertySource()); postProcessContent(content); return content; }\n\n    ### Response: Extract the content to contribute to the info endpoint.\n@return the content to expose\n@see #extractContent(PropertySource)\n@see #postProcessContent(Map).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean equalsIgnoreCase(final String[] as, final String[] as1) { if (as.length != as1.length) { return false; } for (int i = 0; i < as.length; i++) { if (!as[i].equalsIgnoreCase(as1[i])) { return false; } } return true; }\n\n    ### Response:", "ground_truth": "Compares two string arrays.\n\n@param as     first string array\n@param as1    second string array\n\n@return true if all array elements matches", "predict": "Compares the contents of the given string arrays to see if they are equal, but ignoring the case sensitivity of the characters in the string arrays\n\n// This method seeks to determine whether the contents of the given string arrays (which must be of the same length)\n// are equal, but without taking into account the case sensitiviy of the characters in the string arrays\n\n// If the contents of the arrays are determined to be equal, the method returns true\n\n// If the contents of the arrays are determined to be non-equal, the method returns false\n\n// If the given arrays contain any null values, the method returns false\n\n// If any of the given arrays is shorter in length than the other, the method returns false\n\n// If any of the given arrays is longer in length than the other, the method returns false\n\n// If any of the given arrays contains any of the string values of the other array, the method returns true\n\n// If any of the given arrays contains any string values that the"}, {"ID": 1083, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getCompiledBaseCss() { $mergedAsset = new InMemoryUIAsset(); $assetMerger = new StylesheetUIAssetMerger($mergedAsset, $this->minimalStylesheetFetcher, $this->cacheBuster); $assetMerger->generateFile(); return $mergedAsset; }\n\n    ### Response: Return the base.less compiled to css\n\n@return UIAsset.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int indexOfWhitespace(final String string, final int startindex, final int endindex) { for (int i = startindex; i < endindex; i++) { if (CharUtil.isWhitespace(string.charAt(i))) { return i; } } return -1; }\n\n    ### Response:", "ground_truth": "Returns first index of a whitespace character, starting from specified index offset.", "predict": "Find first occurrence of whitespace (i.e., Character 0x20, 0xd, 0xf) in the given string from start to end indices inclusive\n\n//Return first occurrence of whitespace (i.e., Character 0x20, 0xd, 0xf) in the given string from start to end indices inclusive\nint FindWhitespace(string, int startindex, int endindex);"}, {"ID": 1084, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def dump(stuff, filename, verbose=True, protocol=3): \"\"\"Store an object to file by pickling Parameters ---------- stuff : object to be pickled filename : path verbose : bool protocol : 1,2,3 (default = 3) Protocol used by Pickler, higher number means more recent version of Python is needed to read the pickle produced. Default is protocol=3, which only works with Python 3+ Return ------ path Path where pickled object was saved. \"\"\" filename = os.path.normcase(filename) dir_path = os.path.dirname(filename) if not os.path.exists(dir_path): os.makedirs(dir_path) with open(filename, 'wb') as f: p = pickle.Pickler(f, protocol=protocol) p.dump(stuff) if verbose: print('Written {} items to pickled binary file: {}'.format(len(stuff), filename)) return filename\n\n    ### Response: Store an object to file by pickling\n\n    Parameters\n    ----------\n    stuff : object to be pickled\n    filename : path\n    verbose : bool\n    protocol : 1,2,3 (default = 3)\n        Protocol used by Pickler, higher number means more recent version of Python is needed to read the pickle\n        produced. Default is protocol=3, which only works with Python 3+\n\n    Return\n    ------\n    path\n        Path where pickled object was saved..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String stripLeadingChar(final String string, final char c) { if (string.length() > 0) { if (string.charAt(0) == c) { return string.substring(1); } } return string; }\n\n    ### Response:", "ground_truth": "Strips leading char if string starts with one.", "predict": "Strip leading character from string\n\n    Parameters\n    ----------\n    string : string to strip leading character\n    c       : character to strip\n    \n    Returns\n    ------\n    String with leading character stripped\n    \"\"\"\n    string = string.charAt(0)\n    string_without_first_char = string.toString().replace(string, '')\n    return string_without_first_char;"}, {"ID": 1085, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function throwJsonException() { if (JSON_ERROR_NONE === json_last_error()) { return; } switch (json_last_error()) { case JSON_ERROR_DEPTH: $error = 'The maximum stack depth has been exceeded'; break; case JSON_ERROR_STATE_MISMATCH: $error = 'Invalid or malformed JSON'; break; case JSON_ERROR_CTRL_CHAR: $error = 'Control character error, possibly incorrectly encoded'; break; case JSON_ERROR_SYNTAX: $error = 'Syntax error'; break; case JSON_ERROR_UTF8: $error = 'Malformed UTF-8 characters, possibly incorrectly encoded'; break; case JSON_ERROR_RECURSION: $error = 'One or more recursive references in the value to be encoded'; break; case JSON_ERROR_INF_OR_NAN: $error = 'One or more NAN or INF values in the value to be encoded'; break; case JSON_ERROR_UNSUPPORTED_TYPE: $error = 'A value of a type that cannot be encoded was given'; break; default: $error = 'Occurred error.'; break; } throw new InvalidArgumentException($error); }\n\n    ### Response: Throw Json exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String stripTrailingChar(final String string, final char c) { if (string.length() > 0) { if (string.charAt(string.length() - 1) == c) { return string.substring(0, string.length() - 1); } } return string; }\n\n    ### Response:", "ground_truth": "Strips trailing char if string ends with one.", "predict": "Strip trailing character from string."}, {"ID": 1086, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _generate_extended_matches(self, extended_ngrams, highest_n, work, siglum, label): \"\"\"Returns extended match data derived from `extended_ngrams`. This extended match data are the counts for all intermediate n-grams within each extended n-gram. :param extended_ngrams: extended n-grams :type extended_ngrams: `list` of `str` :param highest_n: the highest degree of n-grams in the original results :type highest_n: `int` :param work: name of the work bearing `extended_ngrams` :type work: `str` :param siglum: siglum of the text bearing `extended_ngrams` :type siglum: `str` :param label: label associated with the text :type label: `str` :rtype: `pandas.DataFrame` \"\"\" # Add data for each n-gram within each extended n-gram. Since # this treats each extended piece of text separately, the same # n-gram may be generated more than once, so the complete set # of new possible matches for this filename needs to combine # the counts for such. rows_list = [] for extended_ngram in extended_ngrams: text = Text(extended_ngram, self._tokenizer) for size, ngrams in text.get_ngrams(highest_n+1, len(text.get_tokens())): data = [{constants.WORK_FIELDNAME: work, constants.SIGLUM_FIELDNAME: siglum, constants.LABEL_FIELDNAME: label, constants.SIZE_FIELDNAME: size, constants.NGRAM_FIELDNAME: ngram, constants.COUNT_FIELDNAME: count} for ngram, count in ngrams.items()] rows_list.extend(data) self._logger.debug('Number of extended results: {}'.format( len(rows_list))) extended_matches = pd.DataFrame(rows_list) rows_list = None self._logger.debug('Finished generating intermediate extended matches') # extended_matches may be an empty DataFrame, in which case # manipulating it on the basis of non-existing columns is not # going to go well. groupby_fields = [constants.NGRAM_FIELDNAME, constants.WORK_FIELDNAME, constants.SIGLUM_FIELDNAME, constants.SIZE_FIELDNAME, constants.LABEL_FIELDNAME] if constants.NGRAM_FIELDNAME in extended_matches: extended_matches = extended_matches.groupby( groupby_fields, sort=False).sum().reset_index() return extended_matches\n\n    ### Response: Returns extended match data derived from `extended_ngrams`.\n\n        This extended match data are the counts for all intermediate\n        n-grams within each extended n-gram.\n\n        :param extended_ngrams: extended n-grams\n        :type extended_ngrams: `list` of `str`\n        :param highest_n: the highest degree of n-grams in the original results\n        :type highest_n: `int`\n        :param work: name of the work bearing `extended_ngrams`\n        :type work: `str`\n        :param siglum: siglum of the text bearing `extended_ngrams`\n        :type siglum: `str`\n        :param label: label associated with the text\n        :type label: `str`\n        :rtype: `pandas.DataFrame`.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String stripChar(final String string, final char c) { if (string.length() == 0) { return string; } if (string.length() == 1) { if (string.charAt(0) == c) { return StringPool.EMPTY; } return string; } int left = 0; int right = string.length(); if (string.charAt(left) == c) { left++; } if (string.charAt(right - 1) == c) { right--; } return string.substring(left, right); }\n\n    ### Response:", "ground_truth": "Strips leading and trailing char from given string.", "predict": "Strips leading and trailing characters of the input string\n    \"\"\"\n    Strips leading and trailing characters of the input string\n    \"\"\"\n    public static String stripChar(String string, char c) {\n        // Strip leading and trailing characters of the input string\n        int left = 0; int right = string.length();\n        if (string.charAt(left) == c) {\n            left++;\n        }\n        if (string.charAt(right - 1) == c) {\n            right--;\n        }\n        return string.substring(left, right);\n    }"}, {"ID": 1087, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getFieldLayouts(&$context) { $context['fieldLayouts'] = []; foreach ($context['fields'] as $field) { $layouts = []; foreach ($this->_getRelatedLayoutIds($field) as $row) { $layouts[] = $this->_getLayoutData($row); } $context['fieldLayouts'][] = [ 'field' => $field, 'layouts' => $layouts, ]; } }\n\n    ### Response: Collect all layouts based on existing fields.\n\n@param array  &$context  The current template context.\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String stripToChar(final String string, final char c) { int ndx = string.indexOf(c); if (ndx == -1) { return string; } return string.substring(ndx); }\n\n    ### Response:", "ground_truth": "Strips everything up to the first appearance of given char.\nCharacter IS included in the returned string.", "predict": "Strip leading and ending characters of string and returns the remaining string"}, {"ID": 1088, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function input($name, array $attr) { /** * Si le for n'est pas pr\u00e9cis\u00e9 dans le label pr\u00e9c\u00e9dent * il devient automatiquement l'id de la balise courante. */ $previous = end($this->form); if ($previous && $previous[ 'type' ] == 'label' && !isset($previous[ 'attr' ][ 'for' ]) && isset($attr[ 'attr' ][ 'id' ])) { $this->form[ key($this->form) ][ 'attr' ][ 'for' ] = $attr[ 'attr' ][ 'id' ]; } $this->form[ $name ] = $attr; return $this; }\n\n    ### Response: Enregistre un input.\n\n@param string $name Cl\u00e9 unique.\n@param array  $attr Options des champs et attributs de la balise.\n\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String stripFromChar(final String string, final char c) { int ndx = string.indexOf(c); if (ndx == -1) { return string; } return string.substring(0, ndx); }\n\n    ### Response:", "ground_truth": "Strips everything from the first appearance of given char.\nCharacter IS NOT included in the returned string.", "predict": "Remove la caract\u00e8re.\n\npublic static String stripFromChar(String s, char ch) {\n int idx = s.indexOf(ch);\n if (idx == -1) {\n return s;\n }\n return s.substring(0, idx);\n}"}, {"ID": 1089, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def create(self): \"\"\"Creates the Docker container.\"\"\" try: image_infos = yield from self._get_image_information() except DockerHttp404Error: log.info(\"Image %s is missing pulling it from docker hub\", self._image) yield from self.pull_image(self._image) image_infos = yield from self._get_image_information() if image_infos is None: raise DockerError(\"Can't get image informations, please try again.\") params = { \"Hostname\": self._name, \"Name\": self._name, \"Image\": self._image, \"NetworkDisabled\": True, \"Tty\": True, \"OpenStdin\": True, \"StdinOnce\": False, \"HostConfig\": { \"CapAdd\": [\"ALL\"], \"Privileged\": True, \"Binds\": self._mount_binds(image_infos) }, \"Volumes\": {}, \"Env\": [\"container=docker\"], # Systemd compliant: https://github.com/GNS3/gns3-server/issues/573 \"Cmd\": [], \"Entrypoint\": image_infos.get(\"Config\", {\"Entrypoint\": []})[\"Entrypoint\"] } if params[\"Entrypoint\"] is None: params[\"Entrypoint\"] = [] if self._start_command: params[\"Cmd\"] = shlex.split(self._start_command) if len(params[\"Cmd\"]) == 0: params[\"Cmd\"] = image_infos.get(\"Config\", {\"Cmd\": []})[\"Cmd\"] if params[\"Cmd\"] is None: params[\"Cmd\"] = [] if len(params[\"Cmd\"]) == 0 and len(params[\"Entrypoint\"]) == 0: params[\"Cmd\"] = [\"/bin/sh\"] params[\"Entrypoint\"].insert(0, \"/gns3/init.sh\") # FIXME /gns3/init.sh is not found? # Give the information to the container on how many interface should be inside params[\"Env\"].append(\"GNS3_MAX_ETHERNET=eth{}\".format(self.adapters - 1)) # Give the information to the container the list of volume path mounted params[\"Env\"].append(\"GNS3_VOLUMES={}\".format(\":\".join(self._volumes))) if self._environment: for e in self._environment.strip().split(\"\\n\"): e = e.strip() if not e.startswith(\"GNS3_\"): params[\"Env\"].append(e) if self._console_type == \"vnc\": yield from self._start_vnc() params[\"Env\"].append(\"QT_GRAPHICSSYSTEM=native\") # To fix a Qt issue: https://github.com/GNS3/gns3-server/issues/556 params[\"Env\"].append(\"DISPLAY=:{}\".format(self._display)) params[\"HostConfig\"][\"Binds\"].append(\"/tmp/.X11-unix/:/tmp/.X11-unix/\") result = yield from self.manager.query(\"POST\", \"containers/create\", data=params) self._cid = result['Id'] log.info(\"Docker container '{name}' [{id}] created\".format( name=self._name, id=self._id)) return True\n\n    ### Response: Creates the Docker container..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void cropAll(final String... strings) { for (int i = 0; i < strings.length; i++) { String string = strings[i]; if (string != null) { string = crop(strings[i]); } strings[i] = string; } }\n\n    ### Response:", "ground_truth": "Crops all elements of string array.", "predict": "\n    The function crops all arguments of this method to remove leading or trailing whitespace, or to match a given width or length of string arguments"}, {"ID": 1090, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setAuthorLink($author_link): self { return $this->setAuthor($this->author_name, $author_link, $this->author_icon); }\n\n    ### Response: Sets the author link URI.\n\n@param string|UriInterface $author_link\n\nDEPRECATION WARNING! This method will be removed in the next major point release\n\n@deprecated deprecated since version 2.1.0\n@see Attachment::setAuthor\n\n@return self.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String trimLeft(final String src) { int len = src.length(); int st = 0; while ((st < len) && (CharUtil.isWhitespace(src.charAt(st)))) { st++; } return st > 0 ? src.substring(st) : src; }\n\n    ### Response:", "ground_truth": "Trim whitespaces from the left.", "predict": "Trims leading whitespaces from the string."}, {"ID": 1091, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *EventHistoryCollector) fillPage(size int) { c.pos = 0 l := c.page.Len() delta := size - l if delta < 0 { // Shrink ring size c.page = c.page.Unlink(-delta) return } matches := 0 mpage := c.m.page page := c.page if delta != 0 { // Grow ring size c.page = c.page.Link(ring.New(delta)) } for i := 0; i < maxPageSize; i++ { event, ok := mpage.Value.(types.BaseEvent) mpage = mpage.Prev() if !ok { continue } if c.eventMatches(event) { page.Value = event page = page.Prev() matches++ if matches == size { break } } } }\n\n    ### Response: // filePage copies the manager's latest events into the collector's page with Filter applied..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String trimRight(final String src) { int len = src.length(); int count = len; while ((len > 0) && (CharUtil.isWhitespace(src.charAt(len - 1)))) { len--; } return (len < count) ? src.substring(0, len) : src; }\n\n    ### Response:", "ground_truth": "Trim whitespaces from the right.", "predict": "// This method trims the trailing whitespaces from the given source string."}, {"ID": 1092, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getRouteByUrl($url) { $url = str_replace($this->rootNode, '', $url); $nodes = explode(self::ROUTE_SEPARATOR, $url); $routeTree = $this->routeTree; $ids = []; $route = []; $countNodes = count($nodes); $uid = null; // Lookup route ... for ($i = 0; $i < $countNodes; ++$i) { // Is regular route way/node ? if (is_array($routeTree) && isset($routeTree[$nodes[$i]])) { $routeTree = $routeTree[$nodes[$i]]; } elseif (preg_match('/{{(.*)}}/i', key($routeTree), $variable) > 0) { // maybe its a variable node value $nodes[$i] = '{{'.$variable[1].'}}'; $id = $this->extractId($variable[1]); if ($id !== null) { $uid = $id; } $ids[] = $nodes[$i]; $routeTree = $routeTree[$nodes[$i]]; } else { throw new Doozr_Base_Presenter_Rest_Exception( 'Route for URL \"'.$url.'\" seems wrong. It could not be resolved.', 400 ); } $route[] = $nodes[$i]; if ($i === ($countNodes - 1)) { if (is_object($routeTree) === true) { // Inject Ids for reverse lookup /* @var $routeTree Doozr_Base_Presenter_Rest_Config */ $routeTree ->id($uid) ->ids($ids) ->url($url) ->realRoute($route) ->rootNode($this->rootNode); } else { // In this case we ended up before we got configuration! throw new Doozr_Base_Presenter_Rest_Exception( 'Route for URL \"'.$url.'\" seems incomplete.', 406 ); } } } return $routeTree; }\n\n    ### Response: Returns the route matched by URL including configuration and extracted Ids ...\nWe do only throws exceptions here instead of sending header directives like 404 405 406.\nThis is responsibility of the implementing application cause here too high level.\n\n@param string $url The URL to return route for.\n\n@author Benjamin Carl \n\n@return Doozr_Base_Presenter_Rest_Config|false The configuration if route could be revsolved,\nfalse if route could not be resolved\n\n@throws Doozr_Base_Presenter_Rest_Exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int[] indexOfRegion(final String string, final String leftBoundary, final String rightBoundary, final int offset) { int ndx = offset; int[] res = new int[4]; ndx = string.indexOf(leftBoundary, ndx); if (ndx == -1) { return null; } res[0] = ndx; ndx += leftBoundary.length(); res[1] = ndx; ndx = string.indexOf(rightBoundary, ndx); if (ndx == -1) { return null; } res[2] = ndx; res[3] = ndx + rightBoundary.length(); return res; }\n\n    ### Response:", "ground_truth": "Returns indexes of the first region without escaping character.\n@see #indexOfRegion(String, String, String, char, int)", "predict": "The function identifies the first occurrence of the left and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the first and the"}, {"ID": 1093, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public E take() throws InterruptedException { E e = transferer.transfer(null, false, 0); if (e != null) return e; Thread.interrupted(); throw new InterruptedException(); }\n\n    ### Response: Retrieves and removes the head of this queue, waiting if necessary\nfor another thread to insert it.\n\n@return the head of this queue\n@throws InterruptedException {@inheritDoc}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String join(final Collection collection, final char separator) { if (collection == null) { return null; } if (collection.size() == 0) { return StringPool.EMPTY; } final StringBuilder sb = new StringBuilder(collection.size() * 16); final Iterator it = collection.iterator(); for (int i = 0; i < collection.size(); i++) { if (i > 0) { sb.append(separator); } sb.append(it.next()); } return sb.toString(); }\n\n    ### Response:", "ground_truth": "Joins an collection of objects into one string with separator.", "predict": "Joins string values from the given Collection to one string with given separator\n\n@saferetic \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"}, {"ID": 1094, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getResults($single = false) { $customAttributes = call_user_func($this->model.\"::getAppendFields\"); // Laravel's $appends adds attributes always to the output. With this method, // we can specify which attributes are to be included $appends = []; $fields = $this->parser->getFields(); foreach ($fields as $key => $field) { if (in_array($field, $customAttributes)) { $appends[] = $field; unset($fields[$key]); } else { // Add table name to fields to prevent ambiguous column issues $fields[$key] = $this->table . \".\" . $field; } } $this->parser->setFields($fields); if (!$single) { /** @var Collection $results */ $results = $this->query->select($fields)->get(); } else { /** @var Collection $results */ $results = $this->query->select($fields)->skip(0)->take(1)->get(); if ($results->count() == 0) { throw new ResourceNotFoundException(); } } foreach($results as $result) { $result->setAppends($appends); } $this->processAppends($results); $this->results = $results; return $results; }\n\n    ### Response: Runs query and fetches results\n\n@param bool $single\n@return Collection\n@throws ResourceNotFoundException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String join(final Object[] array, final String separator) { if (array == null) { return null; } if (array.length == 0) { return StringPool.EMPTY; } if (array.length == 1) { return String.valueOf(array[0]); } final StringBuilder sb = new StringBuilder(array.length * 16); for (int i = 0; i < array.length; i++) { if (i > 0) { sb.append(separator); } sb.append(array[i]); } return sb.toString(); }\n\n    ### Response:", "ground_truth": "Joins an array of objects into one string with separator.", "predict": "Joins objects to generate string"}, {"ID": 1095, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function info($section = null) { if ($section) { return $this->client->info($section); } return $this->client->info(); }\n\n    ### Response: get information block for the sentinel instance\n\n@param string|NUll $section\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String convertCharset(final String source, final String srcCharsetName, final String newCharsetName) { if (srcCharsetName.equals(newCharsetName)) { return source; } return StringUtil.newString(StringUtil.getBytes(source, srcCharsetName), newCharsetName); }\n\n    ### Response:", "ground_truth": "Converts string charset. If charset names are the same, the same string is returned.", "predict": "convert source from source charset to dest charset\n\n* If source charset name is the same as dest charset name\n* Else convert source to dest charset first\n* And then convert to dest charset"}, {"ID": 1096, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function (header) { /** * This property is the mimetype for the file * * @property mime * @type {String} */ this.mime = null; /** * This is the file size in bytes * * @type {Number} */ this.size = null; /** * This is a Date object which represents the last time this file was modified * * @type {Date} */ this.lastModified = null; /** * This is the HTTP header as an Object for the file. * * @type {Object} */ this.httpHeader = null; if (header) this.setFromHTTPHeader(header); }\n\n    ### Response: FileMeta is a class which will hold file meta data. Each LoaderBase contains a FileMeta object\nthat you can use to query.\n\n@class FileMeta\n@constructor\n@param {String} header HTTP Header sent when loading this file.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isCharAtEqual(final String string, final int index, final char charToCompare) { if ((index < 0) || (index >= string.length())) { return false; } return string.charAt(index) == charToCompare; }\n\n    ### Response:", "ground_truth": "Safely compares provided char with char on given location.", "predict": "Boolean indicates if the character at the given index of the string is equal to the given char to compare\n    @class Boolean\n    @public\n    @since JDK1.8\n    @default false\n    @param {String} string The string to compare\n    @param {int} index The index of the string to compare\n    @param {char} ch the character to compare\n    @return {Boolean} indicates if the corresponding characters of the string and the given parameter ch match"}, {"ID": 1097, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected VelocityContext createContext() { VelocityContext context = new VelocityContext(); context.put(META_KEY, META); context.put(UTILS_KEY, UTILS); context.put(MESSAGES_KEY, MESSAGES); return context; }\n\n    ### Response: Helper method that creates a Velocity context and initialises it\nwith a reference to the ReportNG utils, report metadata and localised messages.\n@return An initialised Velocity context..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String surround(String string, final String prefix, final String suffix) { if (!string.startsWith(prefix)) { string = prefix + string; } if (!string.endsWith(suffix)) { string += suffix; } return string; }\n\n    ### Response:", "ground_truth": "Surrounds the string with provided prefix and suffix if such missing from string.", "predict": "Helper method to surround a string with prefix and suffix"}, {"ID": 1098, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def read_chunks(stream, block_size=2**10): \"\"\" Given a byte stream with reader, yield chunks of block_size until the stream is consusmed. \"\"\" while True: chunk = stream.read(block_size) if not chunk: break yield chunk\n\n    ### Response: Given a byte stream with reader, yield chunks of block_size\n    until the stream is consusmed..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String prefix(String string, final String prefix) { if (!string.startsWith(prefix)) { string = prefix + string; } return string; }\n\n    ### Response:", "ground_truth": "Inserts prefix if doesn't exist.", "predict": "Strips the leading characters of the string and returns the resulting string if the leading characters of the string don't match the given prefix, otherwise returns the original string intact."}, {"ID": 1099, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def handle_error(error) case error when Savon::SOAPFault return UnknownApiError.new(error.message) when Savon::HTTPError if error.to_hash[:code] == 401 return AccountError.new(\"Unauthorized: invalid credentials\") end return UnknownApiError.new(error.message) when Excon::Errors::Error return HttpError.new(\"Error making HTTP request: #{error.message}\") end error end\n\n    ### Response: There's a potential bug in the creditsafe API where they actually return\n an HTTP 401 if you're unauthorized, hence the sad special case below\n\n rubocop:disable Metrics/MethodLength.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String suffix(String string, final String suffix) { if (!string.endsWith(suffix)) { string += suffix; } return string; }\n\n    ### Response:", "ground_truth": "Appends suffix if doesn't exist.", "predict": "This method appends the given string to the end of the input string\n    \"\"\"\n    Helps to append the given string to the end of the input string\n    \"\"\""}, {"ID": 1100, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private String[] selectColumnNames(List<String> names, ColumnType[] types) { List<String> header = new ArrayList<>(); for (int i = 0; i < types.length; i++) { if (types[i] != SKIP) { String name = names.get(i); name = name.trim(); header.add(name); } } String[] result = new String[header.size()]; return header.toArray(result); }\n\n    ### Response: Reads column names from header, skipping any for which the type == SKIP.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String cutToIndexOf(String string, final String substring) { int i = string.indexOf(substring); if (i != -1) { string = string.substring(0, i); } return string; }\n\n    ### Response:", "ground_truth": "Cuts the string from beginning to the first index of provided substring.", "predict": "Helper method to trim the input string of the given substring if it is found."}, {"ID": 1101, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void deleteUIDMeta(final UIDMeta meta) { if (search != null) { search.deleteUIDMeta(meta).addErrback(new PluginError()); } }\n\n    ### Response: Delete the UID meta object from the search index\n@param meta The UID meta object to delete\n@since 2.0.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String cutFromIndexOf(String string, final String substring) { int i = string.indexOf(substring); if (i != -1) { string = string.substring(i); } return string; }\n\n    ### Response:", "ground_truth": "Cuts the string from the first index of provided substring to the end.", "predict": "Remove the given substring from the given string"}, {"ID": 1102, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func asInt(param string) int64 { i, err := strconv.ParseInt(param, 0, 64) panicIf(err) return i }\n\n    ### Response: // asInt returns the parameter as a int64\n// or panics if it can't convert.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String cutPrefix(String string, final String prefix) { if (string.startsWith(prefix)) { string = string.substring(prefix.length()); } return string; }\n\n    ### Response:", "ground_truth": "Cuts prefix if exists.", "predict": "//cutPrefix - returns the given string prefix, or the first prefix chars of the string\n    // If the given string does not start with the given prefix, returns an empty string"}, {"ID": 1103, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static Map<String, IDLProxyObject> doCreate(ProtoFile protoFile, boolean multi, boolean debug, File path, boolean generateSouceOnly, File sourceOutputDir, List<CodeDependent> cds, Map<String, String> uniMappedName, boolean isUniName) throws IOException { return doCreatePro(Arrays.asList(protoFile), multi, debug, path, generateSouceOnly, sourceOutputDir, cds, new HashSet<String>(), uniMappedName, isUniName); }\n\n    ### Response: Do create.\n\n@param protoFile the proto file\n@param multi the multi\n@param debug the debug\n@param path the path\n@param generateSouceOnly the generate souce only\n@param sourceOutputDir the source output dir\n@param cds the cds\n@param uniMappedName the uni mapped name\n@param isUniName the is uni name\n@return the map\n@throws IOException Signals that an I/O exception has occurred..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String cutSuffix(String string, final String suffix) { if (string.endsWith(suffix)) { string = string.substring(0, string.length() - suffix.length()); } return string; }\n\n    ### Response:", "ground_truth": "Cuts sufix if exists.", "predict": "\n    Do nothing, but generates the given string as its method level comment\n    \"\"\"\n    \n     * Do nothing, but generates the given string as its method level\n     * comment\n    \"\"\"\n    public static String cutSuffix(String string, final String suffix) {\n    // If string ends with suffix\n    if (string.endsWith(suffix)) {\n    // generate new string by cutting suffix\n    string = string.substring(0, string.length() - suffix.length());\n    }\n    // return new string\n    return string;\n    }"}, {"ID": 1104, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Paragraph<PS, SEG, S> setParagraphStyle(PS paragraphStyle) { return new Paragraph<>(paragraphStyle, segmentOps, segments, styles); }\n\n    ### Response: Creates a new Paragraph which has the same contents as the current Paragraph,\nbut the given paragraph style.\n\nNote that because Paragraph is immutable, a new Paragraph is returned.\nDespite the setX name, the current object is unchanged.\n\n@param paragraphStyle The new paragraph style\n@return A new paragraph with the same segment contents, but a new paragraph style..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String cutSurrounding(final String string, final String prefix, final String suffix) { int start = 0; int end = string.length(); if (string.startsWith(prefix)) { start = prefix.length(); } if (string.endsWith(suffix)) { end -= suffix.length(); } if (end <= start) { return StringPool.EMPTY; } return string.substring(start, end); }\n\n    ### Response:", "ground_truth": "Removes surrounding prefix and suffixes.", "predict": "\n    This method returns a trimmed string which contains the given prefix and suffix,\nstarting from the given string's startingIndex and ending to its endingIndex (excluded)"}, {"ID": 1105, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static public int obtainNextIncrementInteger(Connection connection, ColumnData autoIncrementIntegerColumn) throws Exception { try { String sqlQuery = \"SELECT nextval(?);\"; // Create SQL command PreparedStatement pstmt = null; { pstmt = connection.prepareStatement(sqlQuery); // Populate prepared statement pstmt.setString(1, autoIncrementIntegerColumn.getAutoIncrementSequence()); } if( pstmt.execute() ) { ResultSet rs = pstmt.getResultSet(); if( rs.next() ) { int nextValue = rs.getInt(1); return nextValue; } else { throw new Exception(\"Empty result returned by SQL: \"+sqlQuery); } } else { throw new Exception(\"No result returned by SQL: \"+sqlQuery); } } catch( Exception e ) { throw new Exception(\"Error while attempting to get a auto increment integer value for: \"+ autoIncrementIntegerColumn.getColumnName()+ \" (\"+autoIncrementIntegerColumn.getAutoIncrementSequence()+\")\",e); } }\n\n    ### Response: Performs a database query to find the next integer in the sequence reserved for\nthe given column.\n@param autoIncrementIntegerColumn Column data where a new integer is required\n@return The next integer in sequence\n@throws Exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String insert(final String src, final String insert, int offset) { if (offset < 0) { offset = 0; } if (offset > src.length()) { offset = src.length(); } StringBuilder sb = new StringBuilder(src); sb.insert(offset, insert); return sb.toString(); }\n\n    ### Response:", "ground_truth": "Inserts a string on provided offset.", "predict": "Inserts an insert string at an arbitrary position into the source string."}, {"ID": 1106, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def integer_binning(data=None, **kwargs) -> StaticBinning: \"\"\"Construct fixed-width binning schema with bins centered around integers. Parameters ---------- range: Optional[Tuple[int]] min (included) and max integer (excluded) bin bin_width: Optional[int] group \"bin_width\" integers into one bin (not recommended) \"\"\" if \"range\" in kwargs: kwargs[\"range\"] = tuple(r - 0.5 for r in kwargs[\"range\"]) return fixed_width_binning(data=data, bin_width=kwargs.pop(\"bin_width\", 1), align=True, bin_shift=0.5, **kwargs)\n\n    ### Response: Construct fixed-width binning schema with bins centered around integers.\n\n    Parameters\n    ----------\n    range: Optional[Tuple[int]]\n        min (included) and max integer (excluded) bin\n    bin_width: Optional[int]\n        group \"bin_width\" integers into one bin (not recommended).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String repeat(final String source, int count) { StringBand result = new StringBand(count); while (count > 0) { result.append(source); count--; } return result.toString(); }\n\n    ### Response:", "ground_truth": "Creates a new string that contains the provided string a number of times.", "predict": "Repeat string with given count and concatenates it to the returned string"}, {"ID": 1107, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String findUniqueName( final String baseName, final String containerDN, final ChaiProvider provider ) throws ChaiOperationException, ChaiUnavailableException { char ch; final StringBuilder cnStripped = new StringBuilder(); final String effectiveBasename = ( baseName == null ) ? \"\" : baseName; // First boil down the root name. Preserve only the alpha-numerics. for ( int i = 0; i < effectiveBasename.length(); i++ ) { ch = effectiveBasename.charAt( i ); if ( Character.isLetterOrDigit( ch ) ) { cnStripped.append( ch ); } } if ( cnStripped.length() == 0 ) { // Generate a random seed to runServer with, how about the current date cnStripped.append( System.currentTimeMillis() ); } // Now we have a base name, let's runServer testing it... String uniqueCN; StringBuilder filter; final Random randomNumber = new Random(); String stringCounter = null; // Start with a random 3 digit number int counter = randomNumber.nextInt() % 1000; while ( true ) { // Initialize the String Buffer and Unique DN. filter = new StringBuilder( 64 ); if ( stringCounter != null ) { uniqueCN = cnStripped.append( stringCounter ).toString(); } else { uniqueCN = cnStripped.toString(); } filter.append( \"(\" ).append( ChaiConstant.ATTR_LDAP_COMMON_NAME ).append( \"=\" ).append( uniqueCN ).append( \")\" ); final Map<String, Map<String, String>> results = provider.search( containerDN, filter.toString(), null, SearchScope.ONE ); if ( results.size() == 0 ) { // No object found! break; } else { // Increment it every time stringCounter = Integer.toString( counter++ ); } } return uniqueCN; }\n\n    ### Response: Derives a unique entry name for an ldap container.  Assumes CN as the naming attribute.\n\n@param baseName    A text name that will be used for the base of the obejct name. Punctuation and spaces will be stripped.\n@param containerDN Directory container in which to check for a unique name\n@param provider    ChaiProvider to use for ldap connection\n@return Fully qualified unique object name for the container specified.\n@throws ChaiOperationException   If there is an error during the operation\n@throws ChaiUnavailableException If the directory server(s) are unavailable.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String reverse(final String s) { StringBuilder result = new StringBuilder(s.length()); for (int i = s.length() -1; i >= 0; i--) { result.append(s.charAt(i)); } return result.toString(); }\n\n    ### Response:", "ground_truth": "Reverse a string.", "predict": "Reverses the characters of the given string"}, {"ID": 1108, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static void byte2hex(byte b, StringBuffer buf) { char[] hexChars = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' }; int high = ((b & 0xf0) >> 4); int low = (b & 0x0f); buf.append(hexChars[high]); buf.append(hexChars[low]); }\n\n    ### Response: Converts a byte to hex digit and writes to the supplied buffer.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String maxCommonPrefix(final String one, final String two) { final int minLength = Math.min(one.length(), two.length()); final StringBuilder sb = new StringBuilder(minLength); for (int pos = 0; pos < minLength; pos++) { final char currentChar = one.charAt(pos); if (currentChar != two.charAt(pos)) { break; } sb.append(currentChar); } return sb.toString(); }\n\n    ### Response:", "ground_truth": "Returns max common prefix of two strings.", "predict": "Find the common prefix of the given string which is of length minLength and writes it to the given StringBuilder."}, {"ID": 1109, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function withDegree(Integer $degree, Number $coeff): self { $degrees = $this->degrees->put( $degree->value(), new Degree($degree, $coeff) ); return new self( $this->intercept, ...$degrees->values() ); }\n\n    ### Response: Create a new polynom with this added degree\n\n@param Integer $degree\n@param Number $coeff\n\n@return self.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String findCommonPrefix(final String... strings) { StringBuilder prefix = new StringBuilder(); int index = 0; char c = 0; loop: while (true) { for (int i = 0; i < strings.length; i++) { String s = strings[i]; if (index == s.length()) { break loop; } if (i == 0) { c = s.charAt(index); } else { if (s.charAt(index) != c) { break loop; } } } index++; prefix.append(c); } return prefix.length() == 0 ? StringPool.EMPTY : prefix.toString(); }\n\n    ### Response:", "ground_truth": "Finds common prefix for several strings. Returns an empty string if\narguments do not have a common prefix.", "predict": "Find the common prefix of the given string"}, {"ID": 1110, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *FakeInstanceGroups) List(opts v1.ListOptions) (result *v1alpha1.InstanceGroupList, err error) { obj, err := c.Fake. Invokes(testing.NewListAction(instancegroupsResource, instancegroupsKind, c.ns, opts), &v1alpha1.InstanceGroupList{}) if obj == nil { return nil, err } label, _, _ := testing.ExtractFromListOptions(opts) if label == nil { label = labels.Everything() } list := &v1alpha1.InstanceGroupList{ListMeta: obj.(*v1alpha1.InstanceGroupList).ListMeta} for _, item := range obj.(*v1alpha1.InstanceGroupList).Items { if label.Matches(labels.Set(item.Labels)) { list.Items = append(list.Items, item) } } return list, err }\n\n    ### Response: // List takes label and field selectors, and returns the list of InstanceGroups that match those selectors..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String shorten(String s, int length, final String suffix) { length -= suffix.length(); if (s.length() > length) { for (int j = length; j >= 0; j--) { if (CharUtil.isWhitespace(s.charAt(j))) { length = j; break; } } String temp = s.substring(0, length); s = temp.concat(suffix); } return s; }\n\n    ### Response:", "ground_truth": "Shorten string to given length.", "predict": "// This method returns a shortened string s by replacing its last suffix suffix of length length with an empty string suffix of length 0 .."}, {"ID": 1111, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getOptionsForSeries( $series ) { $seriesTitle = $this->getSeriesTitle( $series ); if (! isset( $this->options['seriesStorage'][$seriesTitle] ) ) { throw new \\Exception( 'Series not registered with JsWriter' ); } return $this->options['seriesStorage'][$seriesTitle]; }\n\n    ### Response: Returns the options for a series\n@param \\Altamira\\Series|string $series\n@throws \\Exception\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String toUpperCase(final String s, Locale locale) { if (s == null) { return null; } StringBuilder sb = null; for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); if (c > 127) { // found non-ascii char, fallback to the slow unicode detection if (locale == null) { locale = Locale.getDefault(); } return s.toUpperCase(locale); } if ((c >= 'a') && (c <= 'z')) { if (sb == null) { sb = new StringBuilder(s); } sb.setCharAt(i, (char)(c - 32)); } } if (sb == null) { return s; } return sb.toString(); }\n\n    ### Response:", "ground_truth": "Converts all of the characters in the string to upper case, based on the\nlocale.\n\n@param  s the string to convert\n@param  locale apply this locale's rules\n@return the string, converted to upper case, or null if the\nstring is null", "predict": "To convert string to Upper Case"}, {"ID": 1112, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private double getParamDouble(String key, double defaultValue) { String value = values.get(key); if (value==null || value.isEmpty()) { return defaultValue; } try { return Double.valueOf(value); } catch (NumberFormatException e) { throw new RuntimeException(\"Invalid double value: >>>\"+value+\"<<<\", e); } }\n\n    ### Response: Returns the double, or the default is absent. Throws if the double is specified but invalid..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String removeQuotes(final String string) { if ( (startsWithChar(string, '\\'') && endsWithChar(string, '\\'')) || (startsWithChar(string, '\"') && endsWithChar(string, '\"')) || (startsWithChar(string, '`') && endsWithChar(string, '`')) ) { return substring(string, 1, -1); } return string; }\n\n    ### Response:", "ground_truth": "Removes starting and ending single or double quotes.", "predict": "Remove leading and ending double quotes from the given string.."}, {"ID": 1113, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def imageSchema(self): \"\"\" Returns the image schema. :return: a :class:`StructType` with a single column of images named \"image\" (nullable) and having the same type returned by :meth:`columnSchema`. .. versionadded:: 2.3.0 \"\"\" if self._imageSchema is None: ctx = SparkContext._active_spark_context jschema = ctx._jvm.org.apache.spark.ml.image.ImageSchema.imageSchema() self._imageSchema = _parse_datatype_json_string(jschema.json()) return self._imageSchema\n\n    ### Response: Returns the image schema.\n\n        :return: a :class:`StructType` with a single column of images\n               named \"image\" (nullable) and having the same type returned by :meth:`columnSchema`.\n\n        .. versionadded:: 2.3.0.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String toHexString(final byte[] bytes) { char[] chars = new char[bytes.length * 2]; int i = 0; for (byte b : bytes) { chars[i++] = CharUtil.int2hex((b & 0xF0) >> 4); chars[i++] = CharUtil.int2hex(b & 0x0F); } return new String(chars); }\n\n    ### Response:", "ground_truth": "Converts bytes to hex string.", "predict": "\n    Returns the hexadecimal representation of an arbitrary number of bytes of arbitrary length of arbitrary type in a human-readable form."}, {"ID": 1114, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def build_application_map(vertices_applications, placements, allocations, core_resource=Cores): \"\"\"Build a mapping from application to a list of cores where the application is used. This utility function assumes that each vertex is associated with a specific application. Parameters ---------- vertices_applications : {vertex: application, ...} Applications are represented by the path of their APLX file. placements : {vertex: (x, y), ...} allocations : {vertex: {resource: slice, ...}, ...} One of these resources should match the `core_resource` argument. core_resource : object The resource identifier which represents cores. Returns ------- {application: {(x, y) : set([c, ...]), ...}, ...} For each application, for each used chip a set of core numbers onto which the application should be loaded. \"\"\" application_map = defaultdict(lambda: defaultdict(set)) for vertex, application in iteritems(vertices_applications): chip_cores = application_map[application][placements[vertex]] core_slice = allocations[vertex].get(core_resource, slice(0, 0)) chip_cores.update(range(core_slice.start, core_slice.stop)) return application_map\n\n    ### Response: Build a mapping from application to a list of cores where the\n    application is used.\n\n    This utility function assumes that each vertex is associated with a\n    specific application.\n\n    Parameters\n    ----------\n    vertices_applications : {vertex: application, ...}\n        Applications are represented by the path of their APLX file.\n    placements : {vertex: (x, y), ...}\n    allocations : {vertex: {resource: slice, ...}, ...}\n        One of these resources should match the `core_resource` argument.\n    core_resource : object\n        The resource identifier which represents cores.\n\n    Returns\n    -------\n    {application: {(x, y) : set([c, ...]), ...}, ...}\n        For each application, for each used chip a set of core numbers onto\n        which the application should be loaded..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static byte[] getBytes(final String string) { try { return string.getBytes(JoddCore.encoding); } catch (UnsupportedEncodingException e) { throw new RuntimeException(e); } }\n\n    ### Response:", "ground_truth": "Returns String bytes using Jodds default encoding.", "predict": "Get the bytes of the given string in the given encoding."}, {"ID": 1115, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function encodeCall($method, $data = array()) { $xml = new XMLWriter(); $xml->openMemory(); $xml->setIndent(false); $xml->startDocument('1.0', $this->encoding); $xml->startElement(\"methodCall\"); $xml->writeElement(\"methodName\", trim($method)); $xml->startElement(\"params\"); try { foreach ( $data as $d ) { $xml->startElement(\"param\"); $xml->startElement(\"value\"); $this->encodeValue($xml, $d); $xml->endElement(); $xml->endElement(); } } catch (XmlrpcException $xe) { throw $xe; } $xml->endElement(); $xml->endElement(); $xml->endDocument(); return trim($xml->outputMemory()); }\n\n    ### Response: Encode an xmlrpc call\n\nIt expects an array of values as $data and will try to encode it as a valid xmlrpc call.\n\n@param   string  $method\n@param   array   $data\n\n@return  string  xmlrpc formatted call\n\n@throws  \\Comodojo\\Exception\\XmlrpcException\n@throws  \\Exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static char detectQuoteChar(final String str) { if (str.length() < 2) { return 0; } final char c = str.charAt(0); if (c != str.charAt(str.length() - 1)) { return 0; } if (c == '\\'' || c == '\"' || c == '`') { return c; } return 0; }\n\n    ### Response:", "ground_truth": "Detects quote character or return 0.", "predict": "Detect quote character\n\nIt detects the quote character of a given string of characters and returns it or 0 if there is no quote character."}, {"ID": 1116, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (m *Mrb) LoadString(code string) (*MrbValue, error) { cs := C.CString(code) defer C.free(unsafe.Pointer(cs)) value := C._go_mrb_load_string(m.state, cs) if exc := checkException(m.state); exc != nil { return nil, exc } return newValue(m.state, value), nil }\n\n    ### Response: // LoadString loads the given code, executes it, and returns its final\n// value that it might return..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visit(final String name, final Object value) { if (av != null) { av.visit(name, value); } }\n\n    ### Response:", "ground_truth": "Visits a primitive value of the annotation.\n\n@param name the value name.\n@param value the actual value, whose type must be {@link Byte}, {@link Boolean}, {@link\nCharacter}, {@link Short}, {@link Integer} , {@link Long}, {@link Float}, {@link Double},\n{@link String} or {@link Type} of {@link Type#OBJECT} or {@link Type#ARRAY} sort. This\nvalue can also be an array of byte, boolean, short, char, int, long, float or double values\n(this is equivalent to using {@link #visitArray} and visiting each array element in turn,\nbut is more convenient).", "predict": "The given method accepts an arbitrary string as an argument, and\n// visits the given string as well as any objects it may refer to in the program.\n\n// It may optionally take an additional parameter to pass an object to\n// visit, but this parameter is not used in this implementation."}, {"ID": 1117, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function placeholder_image_fallback($html, $post_id, $post_thumbnail_id, $size, $attr) { if ($html === '' && Config::get('images.placeholder_dir') !== false) { $html = $this->image_service->get_placeholder_image($post_id, $post_thumbnail_id, $size, $attr); } return $html; }\n\n    ### Response: If no post_thumbnail was found, find the corresponding placeholder image and return the image HTML.\n\n@since 1.0.0\n\n@param  string       $html              The post thumbnail HTML.\n@param  int          $post_id           The post ID.\n@param  string       $post_thumbnail_id The post thumbnail ID.\n@param  string|array $size              The post thumbnail size. Image size or array of width and height\nvalues (in that order). Default 'post-thumbnail'.\n@param  string       $attr              Query string of attributes.\n@return string The image HTML.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visitEnum(final String name, final String descriptor, final String value) { if (av != null) { av.visitEnum(name, descriptor, value); } }\n\n    ### Response:", "ground_truth": "Visits an enumeration value of the annotation.\n\n@param name the value name.\n@param descriptor the class descriptor of the enumeration class.\n@param value the actual enumeration value.", "predict": "Visit an enum during code generation of an API"}, {"ID": 1118, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function receivedNothing(int $invocation = 1): bool { $received = $this->invocations->argumentsOf($invocation); if (count($received) === 0) { return true; } throw new ArgumentMismatch(sprintf( 'Argument count for invocation #%d of %s is too' . ' high: received %d argument(s), expected no arguments.', $invocation, $this->invocations->name(), count($received) )); }\n\n    ### Response: verifies that the method received nothing on the given invocation\n\n@api\n@param   int  $invocation  optional  nth invocation to check, defaults to 1 aka first invocation\n@return  bool\n@throws  \\bovigo\\callmap\\ArgumentMismatch.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public AnnotationVisitor visitAnnotation(final String name, final String descriptor) { if (av != null) { return av.visitAnnotation(name, descriptor); } return null; }\n\n    ### Response:", "ground_truth": "Visits a nested annotation value of the annotation.\n\n@param name the value name.\n@param descriptor the class descriptor of the nested annotation class.\n@return a visitor to visit the actual nested annotation value, or {@literal null} if this\nvisitor is not interested in visiting this nested annotation. The nested annotation\nvalue must be fully visited before calling other methods on this annotation visitor.", "predict": "verifies that the method visitAnnotation verifies that the annotation visited by the visitor matches the given annotation name and annotation descriptor"}, {"ID": 1119, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def fit_2dgaussian(data, error=None, mask=None): \"\"\" Fit a 2D Gaussian plus a constant to a 2D image. Invalid values (e.g. NaNs or infs) in the ``data`` or ``error`` arrays are automatically masked. The mask for invalid values represents the combination of the invalid-value masks for the ``data`` and ``error`` arrays. Parameters ---------- data : array_like The 2D array of the image. error : array_like, optional The 2D array of the 1-sigma errors of the input ``data``. mask : array_like (bool), optional A boolean mask, with the same shape as ``data``, where a `True` value indicates the corresponding element of ``data`` is masked. Returns ------- result : A `GaussianConst2D` model instance. The best-fitting Gaussian 2D model. \"\"\" from ..morphology import data_properties # prevent circular imports data = np.ma.asanyarray(data) if mask is not None and mask is not np.ma.nomask: mask = np.asanyarray(mask) if data.shape != mask.shape: raise ValueError('data and mask must have the same shape.') data.mask |= mask if np.any(~np.isfinite(data)): data = np.ma.masked_invalid(data) warnings.warn('Input data contains input values (e.g. NaNs or infs), ' 'which were automatically masked.', AstropyUserWarning) if error is not None: error = np.ma.masked_invalid(error) if data.shape != error.shape: raise ValueError('data and error must have the same shape.') data.mask |= error.mask weights = 1.0 / error.clip(min=1.e-30) else: weights = np.ones(data.shape) if np.ma.count(data) < 7: raise ValueError('Input data must have a least 7 unmasked values to ' 'fit a 2D Gaussian plus a constant.') # assign zero weight to masked pixels if data.mask is not np.ma.nomask: weights[data.mask] = 0. mask = data.mask data.fill_value = 0.0 data = data.filled() # Subtract the minimum of the data as a crude background estimate. # This will also make the data values positive, preventing issues with # the moment estimation in data_properties (moments from negative data # values can yield undefined Gaussian parameters, e.g. x/y_stddev). props = data_properties(data - np.min(data), mask=mask) init_const = 0. # subtracted data minimum above init_amplitude = np.ptp(data) g_init = GaussianConst2D(constant=init_const, amplitude=init_amplitude, x_mean=props.xcentroid.value, y_mean=props.ycentroid.value, x_stddev=props.semimajor_axis_sigma.value, y_stddev=props.semiminor_axis_sigma.value, theta=props.orientation.value) fitter = LevMarLSQFitter() y, x = np.indices(data.shape) gfit = fitter(g_init, x, y, data, weights=weights) return gfit\n\n    ### Response: Fit a 2D Gaussian plus a constant to a 2D image.\n\n    Invalid values (e.g. NaNs or infs) in the ``data`` or ``error``\n    arrays are automatically masked.  The mask for invalid values\n    represents the combination of the invalid-value masks for the\n    ``data`` and ``error`` arrays.\n\n    Parameters\n    ----------\n    data : array_like\n        The 2D array of the image.\n\n    error : array_like, optional\n        The 2D array of the 1-sigma errors of the input ``data``.\n\n    mask : array_like (bool), optional\n        A boolean mask, with the same shape as ``data``, where a `True`\n        value indicates the corresponding element of ``data`` is masked.\n\n    Returns\n    -------\n    result : A `GaussianConst2D` model instance.\n        The best-fitting Gaussian 2D model..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <E> DbEntityDescriptor<E> registerType(final Class<E> type) { DbEntityDescriptor<E> ded = createDbEntityDescriptor(type); DbEntityDescriptor<E> existing = descriptorsMap.put(type, ded); if (log.isDebugEnabled()) { log.debug(\"Register \" + type.getName() + \" as \" + ded.getTableName()); } if (existing != null) { if (ded.getType() == type) { return ded; } throw new DbOomException(\"Type already registered: \" + existing.getType()); } existing = entityNamesMap.put(ded.getEntityName(), ded); if (existing != null) { throw new DbOomException(\"Name '\" + ded.getEntityName() + \"' already mapped to an entity: \" + existing.getType()); } return ded; }\n\n    ### Response:", "ground_truth": "Registers just type and entity names. Enough for most usages.", "predict": "\n    The function registers an entity of the given type to the database and\n    maps the entity to the given table name and entity names map."}, {"ID": 1120, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function (selector, root) { if (!isElement(root)) { return null } var Closest = Element.prototype.closest || function (sel) { var element = this; if (!document.documentElement.contains(element)) { return null } do { if (element.matches(sel)) { return element } element = element.parentElement; } while (element !== null) return null }; var el = Closest.call(root, selector); return el === root ? null : el }\n\n    ### Response: Finds closest element matching selector..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <E> DbEntityDescriptor<E> registerEntity(final Class<E> type, final boolean force) { if (force) { removeEntity(type); } return registerEntity(type); }\n\n    ### Response:", "ground_truth": "Registers entity. Existing entity will be removed if exist, so no exception will be thrown.", "predict": "Register and unregister entity for given entity type"}, {"ID": 1121, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public SmartBinder drop(String name) { int index = signature().argOffset(name); return new SmartBinder(this, signature().dropArg(index), binder.drop(index)); }\n\n    ### Response: Drop the argument with the given name.\n\n@param name the name of the argument to drop\n@return a new SmartBinder with the drop applied.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <E> DbEntityDescriptor<E> removeEntity(final Class<E> type) { DbEntityDescriptor<E> ded = descriptorsMap.remove(type); if (ded == null) { ded = createDbEntityDescriptor(type); } entityNamesMap.remove(ded.getEntityName()); tableNamesMap.remove(ded.getTableName()); return ded; }\n\n    ### Response:", "ground_truth": "Removes entity and returns removed descriptor.", "predict": "Remove the given entity from the given database and metadata maps."}, {"ID": 1122, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Client) Reply(req *Packet, hwAddr net.HardwareAddr, ip net.IP) error { p, err := NewPacket(OperationReply, hwAddr, ip, req.SenderHardwareAddr, req.SenderIP) if err != nil { return err } return c.WriteTo(p, req.SenderHardwareAddr) }\n\n    ### Response: // Reply constructs and sends a reply to an ARP request. On the ARP\n// layer, it will be addressed to the sender address of the packet. On\n// the ethernet layer, it will be sent to the actual remote address\n// from which the request was received.\n//\n// For more fine-grained control, use WriteTo to write a custom\n// response..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <E> E createEntityInstance(final Class<E> type) { try { return ClassUtil.newInstance(type); } catch (Exception ex) { throw new DbOomException(ex); } }\n\n    ### Response:", "ground_truth": "Creates new entity instances.", "predict": "// Creates and returns an instance of the given entity\n    // The given entity must be a concrete implementation of the given\n    // Class, or a subtype thereof\n    // Throws an exception in the case of any error during instantiation\n    // of the given entity\n    // If the given entity cannot be instantiated, the exception contains\n    // details of the error"}, {"ID": 1123, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function createFromArguments(array $args) { $profiledNames = []; $profile = false; // Consume and register all given names and profiles while (count($args)) { $profiledNames[] = self::consumeProfiledName($args, $profile); } return new ProfiledNamesList($profiledNames); }\n\n    ### Response: Create a list of profiled names from method arguments\n\nThe method takes an arbitrary number of arguments and tries to parse them as profiled names. Arguments\nmay be strings, arrays or objects.\n\nString values are interpreted as names \u2014 with one exception: If the first two arguments are both strings,\nthe second one is taken as profile IRI. Optionally following string arguments are taken as names again,\nassuming to share the same profile:\n\ncreateFromArguments($name1 [, $profile])\ncreateFromArguments($name1, $profile1, $name2, $profile2 ...)\n\nArrays arguments are expected to have at least one argument which is taken as name. If present, the\nsecond argument is used as profile (otherwise an empty profile is assumed):\n\ncreateFromArguments(array($name [, $profile]))\n\nObject values are expected to have a \"name\" and an optional \"profile\" property:\n\ncreateFromArguments((object)array('name' => $name [, 'profile' => $profile]))\n\nWhen an array or object argument is consumed, the profile value will be used for any following string\nargument. You can \"reset\" the profile to another value by specifying another array or object value in\nthis case.\n\ncreateFromArguments(array($name1, $profile1), $name2, $name3 ...)\n\n@param array $args Arguments\n\n@return ProfiledNamesList Profiled names\n@see Item::isOfType()\n@see Item::getFirstProperty()\n@see ItemList::getFirstItem()\n@see ItemList::getItems().\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public WrapperProxettaFactory setTargetInterface(final Class targetInterface) { if (!targetInterface.isInterface()) { throw new ProxettaException(\"Not an interface: \" + targetInterface.getName()); } this.targetInterface = targetInterface; return this; }\n\n    ### Response:", "ground_truth": "Defines the interface of the resulting class.", "predict": "Wrap objects to enable proxying\n\nThis method wraps objects to enable proxying of their methods to other objects of the same interface. The\nobjects to be proxied must be of an interface, so the method may throw an exception if the given objects\ndoes not implement an interface. The given objects must already be objects, so the method may throw an\nexception if the given objects is not an instance of any other objects but directly of its own class\n(which makes no sense to proxy and therefore may be caught during runtime by the wrapper factory to\nprevent unnecessary proxying of useless objects and thus reducing unnecessary load and potential\nperformance decrease of the server.)."}, {"ID": 1124, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private float measureStringWidth(String text) { Paint mPaint = new Paint(); mPaint.setTextSize(baselineDropDownViewFontSize * bootstrapSize); return (float) (DimenUtils.dpToPixels(mPaint.measureText(text))); }\n\n    ### Response: Calculating string width\n\n@param text String to calculate\n@return width of String in pixels.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void injectTargetIntoWrapper(final Object target, final Object wrapper) { ProxettaUtil.injectTargetIntoWrapper(target, wrapper, targetFieldName); }\n\n    ### Response:", "ground_truth": "Injects target into wrapper.", "predict": "Inject target into wrapper\n\n* Target Object\n* Wrapper Object\n* Target FIeld Name"}, {"ID": 1125, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setHeader (File header) { try { _header = StreamUtil.toString(new FileReader(header)); } catch (IOException ioe) { System.err.println(\"Unabled to load header '\" + header + \": \" + ioe.getMessage()); } }\n\n    ### Response: Configures us with a header file that we'll prepend to all\ngenerated source files..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected PropertyDescriptor[] lookupAnnotatedProperties(final Class type) { PropertyDescriptor[] properties = annotatedProperties.get(type); if (properties != null) { return properties; } ClassDescriptor cd = ClassIntrospector.get().lookup(type); PropertyDescriptor[] allProperties = cd.getAllPropertyDescriptors(); List<PropertyDescriptor> list = new ArrayList<>(); for (PropertyDescriptor propertyDescriptor : allProperties) { Annotation ann = null; if (propertyDescriptor.getFieldDescriptor() != null) { ann = propertyDescriptor.getFieldDescriptor().getField().getAnnotation(annotations); } if (ann == null && propertyDescriptor.getWriteMethodDescriptor() != null) { ann = propertyDescriptor.getWriteMethodDescriptor().getMethod().getAnnotation(annotations); } if (ann == null && propertyDescriptor.getReadMethodDescriptor() != null) { ann = propertyDescriptor.getReadMethodDescriptor().getMethod().getAnnotation(annotations); } if (ann != null) { list.add(propertyDescriptor); } } if (list.isEmpty()) { properties = EMPTY; } else { properties = list.toArray(new PropertyDescriptor[0]); } annotatedProperties.put(type, properties); return properties; }\n\n    ### Response:", "ground_truth": "Lookups for annotated properties. Caches all annotated properties on the first\naction class scan.", "predict": "Find and load annotation attributes from the given class to\nprovide information about its fields to the Autowiring annotations processor\nduring code generation of Spring ApplicationContext objects."}, {"ID": 1126, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function() { var captures = this.scanIndentation(); if (captures) { var indents = captures[1].length; this.incrementLine(1); this.consume(indents + 1); if (' ' == this.input[0] || '\\t' == this.input[0]) { this.error('INVALID_INDENTATION', 'Invalid indentation, you can use tabs or spaces but not both'); } // blank line if ('\\n' == this.input[0]) { this.interpolationAllowed = true; return this.tok('newline'); } // outdent if (indents < this.indentStack[0]) { while (this.indentStack[0] > indents) { if (this.indentStack[1] < indents) { this.error('INCONSISTENT_INDENTATION', 'Inconsistent indentation. Expecting either ' + this.indentStack[1] + ' or ' + this.indentStack[0] + ' spaces/tabs.'); } this.colno = this.indentStack[1] + 1; this.tokens.push(this.tok('outdent')); this.indentStack.shift(); } // indent } else if (indents && indents != this.indentStack[0]) { this.tokens.push(this.tok('indent', indents)); this.colno = 1 + indents; this.indentStack.unshift(indents); // newline } else { this.tokens.push(this.tok('newline')); this.colno = 1 + (this.indentStack[0] || 0); } this.interpolationAllowed = true; return true; } }\n\n    ### Response: Indent | Outdent | Newline..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DbServer detectDatabaseAndConfigureDbOom( final ConnectionProvider cp, final DbOomConfig dbOomConfig) { cp.init(); final Connection connection = cp.getConnection(); final DbServer dbServer = detectDatabase(connection); cp.closeConnection(connection); dbServer.accept(dbOomConfig); return dbServer; }\n\n    ### Response:", "ground_truth": "Detects database and configure DbOom engine.", "predict": "Detect and configure the DB for OOM"}, {"ID": 1127, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def has_linguist_args(self, args): \"\"\" Parses the given args and returns True if they contain linguist lookups. \"\"\" linguist_args = [] for arg in args: condition = self._get_linguist_condition(arg) if condition: linguist_args.append(condition) return bool(linguist_args)\n\n    ### Response: Parses the given args and returns True if they contain\n        linguist lookups..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void close() throws IOException { if (closed) { return; } if (gzipstream != null) { flushToGZip(); gzipstream.close(); gzipstream = null; } else { if (bufferCount > 0) { output.write(buffer, 0, bufferCount); bufferCount = 0; } } output.close(); closed = true; }\n\n    ### Response:", "ground_truth": "Closes this output stream, causing any buffered data to be flushed and any\nfurther output data to throw an IOException.", "predict": "Closes the output stream, flushing if necessary, and\n    closes the gzip stream if present."}, {"ID": 1128, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def AUC_analysis(AUC): \"\"\" Analysis AUC with interpretation table. :param AUC: area under the ROC curve :type AUC : float :return: interpretation result as str \"\"\" try: if AUC == \"None\": return \"None\" if AUC < 0.6: return \"Poor\" if AUC >= 0.6 and AUC < 0.7: return \"Fair\" if AUC >= 0.7 and AUC < 0.8: return \"Good\" if AUC >= 0.8 and AUC < 0.9: return \"Very Good\" return \"Excellent\" except Exception: # pragma: no cover return \"None\"\n\n    ### Response: Analysis AUC with interpretation table.\n\n    :param AUC: area under the ROC curve\n    :type AUC : float\n    :return: interpretation result as str.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void write(final int b) throws IOException { if (closed) { throw new IOException(\"Cannot write to a closed output stream\"); } if (bufferCount >= buffer.length) { flushToGZip(); } buffer[bufferCount++] = (byte) b; }\n\n    ### Response:", "ground_truth": "Writes the specified byte to our output stream.", "predict": "Override to write an int to the gzip stream."}, {"ID": 1129, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NameFromCommandArgs(cmd *cobra.Command, args []string) (string, error) { argsLen := cmd.ArgsLenAtDash() // ArgsLenAtDash returns -1 when -- was not specified if argsLen == -1 { argsLen = len(args) } if argsLen != 1 { return \"\", cmdutil.UsageErrorf(cmd, \"exactly one NAME is required, got %d\", argsLen) } return args[0], nil }\n\n    ### Response: // NameFromCommandArgs is a utility function for commands that assume the first argument is a resource name.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void doFilter(final ServletRequest request, final ServletResponse response, final FilterChain chain) throws IOException, ServletException { HttpServletRequest httpRequest = (HttpServletRequest) request; HttpServletResponse httpResponse = (HttpServletResponse) response; if (isRequestedSessionIdFromURL(httpRequest)) { HttpSession session = httpRequest.getSession(false); if (session != null) { session.invalidate(); // clear session if session id in URL } } // wrap response to remove URL encoding HttpServletResponseWrapper wrappedResponse = new HttpServletResponseWrapper(httpResponse) { @Override public String encodeRedirectUrl(final String url) { return url; } @Override public String encodeRedirectURL(final String url) { return url; } @Override public String encodeUrl(final String url) { return url; } @Override public String encodeURL(final String url) { return url; } }; chain.doFilter(request, wrappedResponse); }\n\n    ### Response:", "ground_truth": "Filters requests to remove URL-based session identifiers.", "predict": "DoFilter handles the case of a requested session ID in the request URI, by calling session.invalidate(). It then wraps the output in order to remove any potential HTTP request encoding"}, {"ID": 1130, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean isWhiteSpace(Token token) { return token.kind == Token.Kind.NewLine || isLineSpace(token); }\n\n    ### Response: Define what is considered to be whitespace.\n\n@param token\n@return.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getEncodedName() { if (name == null) { return null; } try { return MimeUtility.encodeText(name); } catch (final UnsupportedEncodingException ueex) { throw new MailException(ueex); } }\n\n    ### Response:", "ground_truth": "Returns encoded attachment name.\n\n@return encoded attachment name. Value may be {@code null}.", "predict": "Get the name in an encoded form suitable for sending in email"}, {"ID": 1131, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func parseLangKey(rawKey string) string { if len(rawKey) < 2 { return \"\" } return strings.ToLower(string(rawKey[0:2])) }\n\n    ### Response: // parseLangKey return the first 2 characters of a string in lowercase. If the string is empty or has only 1 character, and empty string is returned.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public byte[] toByteArray() { final FastByteArrayOutputStream out; if (size != -1) { out = new FastByteArrayOutputStream(size); } else { out = new FastByteArrayOutputStream(); } writeToStream(out); return out.toByteArray(); }\n\n    ### Response:", "ground_truth": "Returns byte content of the attachment.\n\n@return byte array with content of the attachment.", "predict": "// toByteArray convert objects to its corresponding bytes and return it."}, {"ID": 1132, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function dropColumn($column, $table = null) { return $this->db->alterTable($this->getTable($table)) ->dropColumn($column) ->execute(); }\n\n    ### Response: Drops a column\n\n@param string $column Column name\n@param string $table Table name. By default it uses mapper's table\n@return boolean.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void writeToFile(final File destination) { InputStream input = null; final OutputStream output; try { input = getDataSource().getInputStream(); output = new FileOutputStream(destination); StreamUtil.copy(input, output); } catch (final IOException ioex) { throw new MailException(ioex); } finally { StreamUtil.close(input); } }\n\n    ### Response:", "ground_truth": "Saves attachment to a file.\n\n@param destination The destination file to be written.", "predict": "Writes data to file\n\n/**\n * Writes data to file\n *\n * @param File file The file to write to\n * @param final InputStream source The source to read data from\n * @param final OutputStream target The output stream to write data to\n * @return boolean If successful\n * @throws IOException If something goes wrong\n * @since JPAM 1.1\n */\npublic void writeToFile(File file, final InputStream source, final OutputStream target)\n    throws IOException\n{\n    StreamUtil.copy(source, target);\n    StreamUtil.close(source);\n    StreamUtil.close(target);\n    \n    boolean success;\n    try\n    {\n        // delete temp file\n        deleteFile(file);\n    }\n    catch (IOException ioex)\n    {\n        LOG.error(ioex);\n    }\n    catch (Throwable th)\n    {\n        LOG.error(th);\n    }"}, {"ID": 1133, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewMockSendAlgorithm(ctrl *gomock.Controller) *MockSendAlgorithm { mock := &MockSendAlgorithm{ctrl: ctrl} mock.recorder = &MockSendAlgorithmMockRecorder{mock} return mock }\n\n    ### Response: // NewMockSendAlgorithm creates a new mock instance.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void writeToStream(final OutputStream out) { InputStream input = null; try { input = getDataSource().getInputStream(); StreamUtil.copy(input, out); } catch (final IOException ioex) { throw new MailException(ioex); } finally { StreamUtil.close(input); } }\n\n    ### Response:", "ground_truth": "Saves attachment to the output stream.\n\n@param out OutputStream where attachment should be copied to.", "predict": "// writes data from the given input stream to the output stream"}, {"ID": 1134, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def transfer(self, transfer_payload=None, *, from_user, to_user): \"\"\"Transfer this entity to another owner on the backing persistence layer Args: transfer_payload (dict): Payload for the transfer from_user (any): A user based on the model specified by the persistence layer to_user (any): A user based on the model specified by the persistence layer Returns: str: Id of the resulting transfer action on the persistence layer Raises: :exc:`~.EntityNotYetPersistedError`: If the entity being transferred is not associated with an id on the persistence layer (:attr:`~Entity.persist_id`) yet :exc:`~.EntityNotFoundError`: If the entity could not be found on the persistence layer :exc:`~.EntityTransferError`: If the entity fails to be transferred on the persistence layer :exc:`~.PersistenceError`: If any other unhandled error in the plugin occurred \"\"\" if self.persist_id is None: raise EntityNotYetPersistedError(('Entities cannot be transferred ' 'until they have been ' 'persisted')) return self.plugin.transfer(self.persist_id, transfer_payload, from_user=from_user, to_user=to_user)\n\n    ### Response: Transfer this entity to another owner on the backing\n        persistence layer\n\n        Args:\n            transfer_payload (dict): Payload for the transfer\n            from_user (any): A user based on the model specified by the\n                persistence layer\n            to_user (any): A user based on the model specified by the\n                persistence layer\n\n        Returns:\n            str: Id of the resulting transfer action on the persistence\n            layer\n\n        Raises:\n            :exc:`~.EntityNotYetPersistedError`: If the entity being\n                transferred is not associated with an id on the\n                persistence layer (:attr:`~Entity.persist_id`) yet\n            :exc:`~.EntityNotFoundError`: If the entity could not be\n                found on the persistence layer\n            :exc:`~.EntityTransferError`: If the entity fails to be\n                transferred on the persistence layer\n            :exc:`~.PersistenceError`: If any other unhandled error\n                in the plugin occurred.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static String appendArgument(final String desc, final String type) { int ndx = desc.indexOf(')'); return desc.substring(0, ndx) + type + desc.substring(ndx); }\n\n    ### Response:", "ground_truth": "Appends argument to the existing description.", "predict": "Append an argument to the given string description with the given\n    ///     argument string of its corresponding type\n\n    Args:\n             *desc* (String): The string to append an argument to\n             *type* (String): The argument string of its corresponding\n             ///     type\n    Returns:\n             *AppendArgument* (String): The updated string with an\n             ///     argument appended\n    Raises: None"}, {"ID": 1135, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function diffInMonths($date = null, $absolute = true) { $date = $this->resolveCarbon($date); return $this->diffInYears($date, $absolute) * static::MONTHS_PER_YEAR + (int) $this->diff($date, $absolute)->format('%r%m'); }\n\n    ### Response: Get the difference in months\n\n@param Carbon|\\DateTimeInterface|string|null $date\n@param bool                                  $absolute Get the absolute of the difference\n\n@return int.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static String prependArgument(final String desc, final String type) { int ndx = desc.indexOf('('); ndx++; return desc.substring(0, ndx) + type + desc.substring(ndx); }\n\n    ### Response:", "ground_truth": "Prepends argument to the existing description.", "predict": "Prepares arguments of the method by appending the corresponding parameter names to the method description string"}, {"ID": 1136, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static KeyStore load(InputStream in, char[] password) { try { KeyStore myTrustStore = KeyStore.getInstance(KeyStore.getDefaultType()); myTrustStore.load(in, password); return myTrustStore; } catch (CertificateException | NoSuchAlgorithmException | KeyStoreException | IOException e) { throw new TrustManagerLoadFailedException(e); } finally { Closeables.closeQuietly(in); } }\n\n    ### Response: Load keystore from InputStream, close the stream after load succeed or failed..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static String changeReturnType(final String desc, final String type) { int ndx = desc.indexOf(')'); return desc.substring(0, ndx + 1) + type; }\n\n    ### Response:", "ground_truth": "Changes return type.", "predict": "Describe method signature, function and its usage\n    The above method changes the returned type of the given string from its original form to an appropriate type determined by the given string parameter. It takes in a string description as its first parameter followed by its corresponding return type as its second parameter to determine how to modify the returned string to match the given parameter. It then returns the modified string with its returned parameter replaced with the given string parameter."}, {"ID": 1137, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def wait_for_healthy( raiden: 'RaidenService', node_address: Address, retry_timeout: float, ) -> None: \"\"\"Wait until `node_address` becomes healthy. Note: This does not time out, use gevent.Timeout. \"\"\" network_statuses = views.get_networkstatuses( views.state_from_raiden(raiden), ) while network_statuses.get(node_address) != NODE_NETWORK_REACHABLE: gevent.sleep(retry_timeout) network_statuses = views.get_networkstatuses( views.state_from_raiden(raiden), )\n\n    ### Response: Wait until `node_address` becomes healthy.\n\n    Note:\n        This does not time out, use gevent.Timeout..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void text(final CharSequence text) { if (!strip) { super.text(text); return; } int textLength = text.length(); char[] dest = new char[textLength]; int ndx = 0; boolean regularChar = true; for (int i = 0; i < textLength; i++) { char c = text.charAt(i); if (CharUtil.isWhitespace(c)) { if (regularChar) { regularChar = false; c = ' '; } else { continue; } } else { regularChar = true; } dest[ndx] = c; ndx++; } if (regularChar || (ndx != 1)) { super.text(CharBuffer.wrap(dest, 0, ndx)); strippedCharsCount += textLength - ndx; } else { strippedCharsCount += textLength; } }\n\n    ### Response:", "ground_truth": "Cleans unnecessary whitespaces.", "predict": "Override public void text(CharSequence text)\n    If the strip parameter of the method is set to true,\n    an assignment of an empty string (\"\") may be added to the beginning of the string to be printed to the log.\n    If regularChar parameter of the method is set to true,\n    an assignment of an empty string (\"\") may be added to the first character of the string to be printed to the log\n    Otherwise, an assignment of an empty string (\"\") may be added to the first character of the string to be printed to the log\n    If regularChar parameter of the method is set to false,\n    an assignment of an empty string (\"\") may be added to the first character of the string to be printed to the log\n    If regularChar parameter of the method is set to true,\n    an assignment of an empty string (\"\") may be added to the first character of the string to be printed to the log\n    If regularChar parameter of the method is set to true,\n    an assignment"}, {"ID": 1138, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function maxValueNode(root) { var current = root; while (current.right) { current = current.right; } return current; }\n\n    ### Response: Gets the maximum value node, rooted in a particular node.\n\n@private\n@param {Node} root The node to search.\n@return {Node} The node with the maximum key in the tree..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> void register(final Class<T> type, final TypeConverter<T> typeConverter) { converters.put(type, typeConverter); }\n\n    ### Response:", "ground_truth": "Registers a converter for specified type.\nUser must register converter for all super-classes as well.\n\n@param type\t\tclass that converter is for\n@param typeConverter\tconverter for provided class", "predict": "Allows for registration of custom type converters for given types of objects of given types"}, {"ID": 1139, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void storeSettings(FacebookSettings settings) { int destinationId = settings.getDestinationId(); String accountName = settings.getAccountName(); String albumName = settings.getAlbumName(); String albumGraphPath = settings.getAlbumGraphPath(); String pageAccessToken = settings.optPageAccessToken(); String photoPrivacy = settings.optPhotoPrivacy(); Editor editor = PreferenceManager.getDefaultSharedPreferences(mContext).edit(); editor.putInt(mContext.getString(R.string.wings_facebook__destination_id_key), destinationId); editor.putString(mContext.getString(R.string.wings_facebook__account_name_key), accountName); editor.putString(mContext.getString(R.string.wings_facebook__album_name_key), albumName); editor.putString(mContext.getString(R.string.wings_facebook__album_graph_path_key), albumGraphPath); if (!TextUtils.isEmpty(pageAccessToken)) { editor.putString(mContext.getString(R.string.wings_facebook__page_access_token_key), pageAccessToken); } if (!TextUtils.isEmpty(photoPrivacy)) { editor.putString(mContext.getString(R.string.wings_facebook__photo_privacy_key), photoPrivacy); } // Set preference to linked. editor.putBoolean(mContext.getString(R.string.wings_facebook__link_key), true); editor.apply(); }\n\n    ### Response: Stores the link settings in persisted storage.\n\n@param settings the {@link com.groundupworks.wings.facebook.FacebookSettings}..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> TypeConverter<T> lookup(final Class<T> type) { return converters.get(type); }\n\n    ### Response:", "ground_truth": "Retrieves converter for provided type. Only registered types are matched,\ntherefore subclasses must be also registered.\n\n@return founded converter or null", "predict": "Provide an appropriate method level comment for the above method."}, {"ID": 1140, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isUnpackedSRE(File directory) { File manifestFile = new File(directory, \"META-INF\"); //$NON-NLS-1$ manifestFile = new File(manifestFile, \"MANIFEST.MF\"); //$NON-NLS-1$ if (manifestFile.canRead()) { try (InputStream manifestStream = new FileInputStream(manifestFile)) { final Manifest manifest = new Manifest(manifestStream); final Attributes sarlSection = manifest.getAttributes(SREConstants.MANIFEST_SECTION_SRE); if (sarlSection == null) { return false; } final String sarlVersion = sarlSection.getValue(SREConstants.MANIFEST_SARL_SPEC_VERSION); if (sarlVersion == null || sarlVersion.isEmpty()) { return false; } final Version sarlVer = Version.parseVersion(sarlVersion); return sarlVer != null; } catch (IOException exception) { return false; } } return false; }\n\n    ### Response: Replies if the given directory contains a SRE.\n\n@param directory the directory.\n@return true if the given directory contains a SRE. Otherwise false.\n@see #isPackedSRE(File).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<Node> select(final String query) { Collection<List<CssSelector>> selectorsCollection = CSSelly.parse(query); return select(selectorsCollection); }\n\n    ### Response:", "ground_truth": "Selects nodes using CSS3 selector query.", "predict": "The given method selects nodes in the document corresponding to the given query string. It makes use of the CSSelly parser to translate the given query string into a list of CssSelector objects which are used to select nodes in the document matching the given query string"}, {"ID": 1141, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DeltaCRLIndicatorExtension getDeltaCRLIndicatorExtension() throws IOException { Object obj = getExtension(PKIXExtensions.DeltaCRLIndicator_Id); return (DeltaCRLIndicatorExtension)obj; }\n\n    ### Response: return the DeltaCRLIndicatorExtension, if any.\n\n@returns DeltaCRLIndicatorExtension or null (if no such extension)\n@throws IOException on error.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<Node> select(final Collection<List<CssSelector>> selectorsCollection) { List<Node> results = new ArrayList<>(); for (List<CssSelector> selectors : selectorsCollection) { processSelectors(results, selectors); } return results; }\n\n    ### Response:", "ground_truth": "Selected nodes using pre-parsed CSS selectors. Take in consideration\ncollection type for results grouping order.", "predict": "\n    Select nodes matching any of the given selectors and processes them in order of increasing specificity of the given selectors"}, {"ID": 1142, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def traverse(self, attr_name = None, attr_value = None): \"\"\"traverse the whole sprite tree and return child sprites which have the attribute and it's set to the specified value. If falue is None, will return all sprites that have the attribute \"\"\" for sprite in self.sprites: if (attr_name is None) or \\ (attr_value is None and hasattr(sprite, attr_name)) or \\ (attr_value is not None and getattr(sprite, attr_name, None) == attr_value): yield sprite for child in sprite.traverse(attr_name, attr_value): yield child\n\n    ### Response: traverse the whole sprite tree and return child sprites which have the\n        attribute and it's set to the specified value.\n        If falue is None, will return all sprites that have the attribute.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void processSelectors(final List<Node> results, final List<CssSelector> selectors) { List<Node> selectedNodes = select(rootNode, selectors); for (Node selectedNode : selectedNodes) { if (!results.contains(selectedNode)) { results.add(selectedNode); } } }\n\n    ### Response:", "ground_truth": "Process selectors and keep adding results.", "predict": "\n    The given method processes the given list of selectors and returns the list of nodes that were selected by the given selectors and the given root node. It makes sure that the given root node and given list of selectors were proper and then selects the given root node and given list of selectors and processes it to add the selected nodes to the given results list."}, {"ID": 1143, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setData($data) { $this->data = $data; if (is_string($this->data)) { $this->data = json_decode($this->data, true); } else if (is_object($data)) { $this->data = json_decode(json_encode($this->data), true); } else if (!is_array($data)) { throw new \\InvalidArgumentException(sprintf('Invalid data type in JsonStore. Expected object, array or string, got %s', gettype($data))); } }\n\n    ### Response: Sets JsonStore's manipulated data\n@param string|array|\\stdClass $data.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Node selectFirst(final String query) { List<Node> selectedNodes = select(query); if (selectedNodes.isEmpty()) { return null; } return selectedNodes.get(0); }\n\n    ### Response:", "ground_truth": "Selects nodes using CSS3 selector query and returns the very first one.", "predict": "Select first matching node from given query"}, {"ID": 1144, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _call_exception_handlers(exception): \"\"\"Calls any installed exception handlers.\"\"\" for handler in EXCEPTION_HANDLERS: try: if handler.wants(exception): handler.handle(exception) except: # pylint: disable=bare-except try: # We don't want to stop for exceptions in the exception handlers but # we shouldn't hide them either. logging.error(traceback.format_exc()) except: # pylint: disable=bare-except # In case even the logging statement fails, ignore. pass\n\n    ### Response: Calls any installed exception handlers..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void walkDescendantsIteratively(final LinkedList<Node> nodes, final CssSelector cssSelector, final List<Node> result) { while (!nodes.isEmpty()) { Node node = nodes.removeFirst(); selectAndAdd(node, cssSelector, result); // append children in walking order to be processed right after this node int childCount = node.getChildNodesCount(); for (int i = childCount - 1; i >= 0; i--) { nodes.addFirst(node.getChild(i)); } } }\n\n    ### Response:", "ground_truth": "Walks over the child notes, maintaining the tree order and not using recursion.", "predict": "Walk the given nodes in order of walking and add the matching nodes to the given result list"}, {"ID": 1145, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def strip_spaces(value, sep=None, join=True): \"\"\"Cleans trailing whitespaces and replaces also multiple whitespaces with a single space.\"\"\" value = value.strip() value = [v.strip() for v in value.split(sep)] join_sep = sep or ' ' return join_sep.join(value) if join else value\n\n    ### Response: Cleans trailing whitespaces and replaces also multiple whitespaces with a single space..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void walk(final Node rootNode, final CssSelector cssSelector, final List<Node> result) { // previous combinator determines the behavior CssSelector previousCssSelector = cssSelector.getPrevCssSelector(); Combinator combinator = previousCssSelector != null ? previousCssSelector.getCombinator() : Combinator.DESCENDANT; switch (combinator) { case DESCENDANT: LinkedList<Node> nodes = new LinkedList<>(); int childCount = rootNode.getChildNodesCount(); for (int i = 0; i < childCount; i++) { nodes.add(rootNode.getChild(i)); // recursive // selectAndAdd(node, cssSelector, result); // walk(node, cssSelector, result); } walkDescendantsIteratively(nodes, cssSelector, result); break; case CHILD: childCount = rootNode.getChildNodesCount(); for (int i = 0; i < childCount; i++) { Node node = rootNode.getChild(i); selectAndAdd(node, cssSelector, result); } break; case ADJACENT_SIBLING: Node node = rootNode.getNextSiblingElement(); if (node != null) { selectAndAdd(node, cssSelector, result); } break; case GENERAL_SIBLING: node = rootNode; while (true) { node = node.getNextSiblingElement(); if (node == null) { break; } selectAndAdd(node, cssSelector, result); } break; } }\n\n    ### Response:", "ground_truth": "Finds nodes in the tree that matches single selector.", "predict": "The given method defines behavior of the Walker combinator of the CSS selectors specification, it selects nodes of the document matching the given CSS selector and add these nodes to the given list of results objects"}, {"ID": 1146, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ModelNode translateOperationForProxy(final ModelNode op) { return translateOperationForProxy(op, PathAddress.pathAddress(op.get(OP_ADDR))); }\n\n    ### Response: Translate the operation address.\n\n@param op the operation\n@return the new operation.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void selectAndAdd(final Node node, final CssSelector cssSelector, final List<Node> result) { // ignore all nodes that are not elements if (node.getNodeType() != Node.NodeType.ELEMENT) { return; } boolean matched = cssSelector.accept(node); if (matched) { // check for duplicates if (result.contains(node)) { return; } // no duplicate found, add it to the results result.add(node); } }\n\n    ### Response:", "ground_truth": "Selects single node for single selector and appends it to the results.", "predict": "Select and add nodes to the given results given the given conditions."}, {"ID": 1147, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function warnAttrNotSupported(className) { var parts = className.split(\"-\"); return [\"$log\", function($log) { $log.warn(className + \"has been deprecated. Please use a `\" + parts[0] + \"-gt-<xxx>` variant.\"); return angular.noop; }]; }\n\n    ### Response: Provide console warning that this layout attribute has been deprecated.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected boolean filter(final List<Node> currentResults, final Node node, final CssSelector cssSelector, final int index) { return cssSelector.accept(currentResults, node, index); }\n\n    ### Response:", "ground_truth": "Filter nodes.", "predict": "Filter function to determine whether the given node matches the given css selector and returns true or false."}, {"ID": 1148, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Register(name string, params map[string]string) error { return volumeDriverRegistry.Register(name, params) }\n\n    ### Response: // Register registers a new driver..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static char [] zzUnpackCMap(final String packed) { char [] map = new char[0x110000]; int i = 0; /* index in packed string */ int j = 0; /* index in unpacked array */ while (i < 128) { int count = packed.charAt(i++); char value = packed.charAt(i++); do map[j++] = value; while (--count > 0); } return map; }\n\n    ### Response:", "ground_truth": "Unpacks the compressed character translation table.\n\n@param packed   the packed character translation table\n@return         the unpacked character translation table", "predict": "// Unpacks the given packed string to generate an indexed char array. It reads four characters of the string and populates corresponding indices of the indexed char array. It reads backwards to fill up the indexed arrays with values from the given string"}, {"ID": 1149, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def init(): \"\"\"Init config file.\"\"\" default_config_path = path.join( (os.environ.get('TLDR_CONFIG_DIR') or path.expanduser('~')), '.tldrrc') if path.exists(default_config_path): click.echo(\"There is already a config file exists, \" \"skip initializing it.\") else: repo_path = click.prompt(\"Input the tldr repo path(absolute path)\") if not path.exists(repo_path): sys.exit(\"Repo path not exist, clone it first.\") platform = click.prompt(\"Input your platform(linux, osx or sunos)\") if platform not in ['linux', 'osx', 'sunos']: sys.exit(\"Platform should be in linux, osx or sunos.\") colors = { \"description\": \"blue\", \"usage\": \"green\", \"command\": \"cyan\" } config = { \"repo_directory\": repo_path, \"colors\": colors, \"platform\": platform } with open(default_config_path, 'w') as f: f.write(yaml.safe_dump(config, default_flow_style=False)) click.echo(\"Initializing the config file at {0}\".format( default_config_path))\n\n    ### Response: Init config file..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean zzRefill() { if (zzBuffer == null) { zzBuffer = zzChars; zzEndRead += zzChars.length; return false; } return true; }\n\n    ### Response:", "ground_truth": "Refills the input buffer.\n\n@return      false, iff there was new input.", "predict": "Refills the input string with characters from the zzChars string."}, {"ID": 1150, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def parse_from_parent( self, parent, # type: ET.Element state # type: _ProcessorState ): # type: (...) -> Any \"\"\"Parse the primitive value under the parent XML element.\"\"\" element = parent.find(self.element_path) if element is None and self.required: state.raise_error( MissingValue, 'Missing required element \"{}\"'.format(self.element_path) ) elif element is not None: return self.parse_at_element(element, state) return _hooks_apply_after_parse(self._hooks, state, self._default)\n\n    ### Response: Parse the primitive value under the parent XML element..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected <T> PageData<T> page(String sql, final Map params, final int page, final int pageSize, final String sortColumnName, final boolean ascending, final Class[] target) { if (sortColumnName != null) { sql = buildOrderSql(sql, sortColumnName, ascending); } int from = (page - 1) * pageSize; String pageSql = buildPageSql(sql, from, pageSize); DbSqlBuilder dbsql = sql(pageSql); DbOomQuery query = query(dbsql); query.setMaxRows(pageSize); query.setFetchSize(pageSize); query.setMap(params); List<T> list = query.list(pageSize, target); query.close(); String countSql = buildCountSql(sql); dbsql = sql(countSql); query = query(dbsql); query.setMap(params); long count = query.executeCount(); query.close(); return new PageData<>(page, (int) count, pageSize, list); }\n\n    ### Response:", "ground_truth": "Pages given page.\n\n@param sql sql query that lists all items\n@param params map of SQL parameters\n@param page current page to show\n@param pageSize number of items to show\n@param sortColumnName name of sorting column, null for no sorting\n@param ascending true for ascending order\n@param target db entities for mapping (sa usual in DbOom)", "predict": "Parses a SQL string to retrieve data objects of the given target type and page indices and page size and sorts and filters the objects according to the given conditions to produce a page of objects with details about the objects and total objects retrieved"}, {"ID": 1151, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *FakePodDisruptionBudgets) Get(name string, options v1.GetOptions) (result *v1beta1.PodDisruptionBudget, err error) { obj, err := c.Fake. Invokes(testing.NewGetAction(poddisruptionbudgetsResource, c.ns, name), &v1beta1.PodDisruptionBudget{}) if obj == nil { return nil, err } return obj.(*v1beta1.PodDisruptionBudget), err }\n\n    ### Response: // Get takes name of the podDisruptionBudget, and returns the corresponding podDisruptionBudget object, and an error if there is any..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String removeSelect(String sql) { int ndx = StringUtil.indexOfIgnoreCase(sql, \"select\"); if (ndx != -1) { sql = sql.substring(ndx + 6); // select.length() } return sql; }\n\n    ### Response:", "ground_truth": "Removes the first 'select' from the sql query.", "predict": "The removeSelect() method removes the 'select' keyword from the given SQL string. It first searches the string for the 'select' keyword and then remove the corresponding substring of length 6 (\"select.length()\") from the string."}, {"ID": 1152, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (stub *ChaincodeStub) GetPrivateDataByRange(collection, startKey, endKey string) (StateQueryIteratorInterface, error) { if collection == \"\" { return nil, fmt.Errorf(\"collection must not be an empty string\") } if startKey == \"\" { startKey = emptyKeySubstitute } if err := validateSimpleKeys(startKey, endKey); err != nil { return nil, err } // ignore QueryResponseMetadata as it is not applicable for a range query without pagination iterator, _, err := stub.handleGetStateByRange(collection, startKey, endKey, nil) return iterator, err }\n\n    ### Response: // GetPrivateDataByRange documentation can be found in interfaces.go.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String removeToFrom(String sql) { int from = 0; int fromCount = 1; int selectCount = 0; int lastNdx = 0; while (true) { int ndx = StringUtil.indexOfIgnoreCase(sql, \"from\", from); if (ndx == -1) { break; } // count selects in left part String left = sql.substring(lastNdx, ndx); selectCount += StringUtil.countIgnoreCase(left, \"select\"); if (fromCount >= selectCount) { sql = sql.substring(ndx); break; } // find next 'from' lastNdx = ndx; from = ndx + 4; fromCount++; } return sql; }\n\n    ### Response:", "ground_truth": "Removes the first part of the sql up to the relevant 'from'.\nTries to detect sub-queries in the 'select' part.", "predict": "The function removes from the SQL string the from and to parameters and any selects and counts and returns the modified string."}, {"ID": 1153, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function bundleArray(target, src, name, notSelf) { var srcValues, targetValues; if (src[name]) { srcValues = src[name] || []; targetValues = target[name] || []; target[name] = uniq(targetValues.concat(srcValues.filter(function(d) { return !notSelf || d !== target.name; }))); } }\n\n    ### Response: Bundle all dependencies from the source into the target, but only after removing the circular dependency itself..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String removeLastOrderBy(String sql) { int ndx = StringUtil.lastIndexOfIgnoreCase(sql, \"order by\"); if (ndx != -1) { int ndx2 = sql.lastIndexOf(sql, ')'); if (ndx > ndx2) { sql = sql.substring(0, ndx); } } return sql; }\n\n    ### Response:", "ground_truth": "Removes everything from last \"order by\".", "predict": "Remove the last order by clause from the given sql string by replacing it with an empty string and trimming of the trailing parentheses"}, {"ID": 1154, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def generate_files! # iterate through the templates in reverse, so files in the templates # loaded last override the previously templates. @templates.reverse_each do |template| # copy in the static files first template.each_file(@markup) do |dest,file| generate_file dest, file end # then render the templates template.each_template(@markup) do |dest,file| generate_file dest, file, template: true end end @generated_files.each_value do |path| dir = path.split(File::SEPARATOR,2).first if dir == 'bin' chmod path, 0755 end end end\n\n    ### Response: Copies static files and renders templates in the template directories..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String decode(final String html) { int ndx = html.indexOf('&'); if (ndx == -1) { return html; } StringBuilder result = new StringBuilder(html.length()); int lastIndex = 0; int len = html.length(); mainloop: while (ndx != -1) { result.append(html.substring(lastIndex, ndx)); lastIndex = ndx; while (html.charAt(lastIndex) != ';') { lastIndex++; if (lastIndex == len) { lastIndex = ndx; break mainloop; } } if (html.charAt(ndx + 1) == '#') { // decimal/hex char c = html.charAt(ndx + 2); int radix; if ((c == 'x') || (c == 'X')) { radix = 16; ndx += 3; } else { radix = 10; ndx += 2; } String number = html.substring(ndx, lastIndex); int i = Integer.parseInt(number, radix); result.append((char) i); lastIndex++; } else { // token String encodeToken = html.substring(ndx + 1, lastIndex); char[] replacement = ENTITY_MAP.get(encodeToken); if (replacement == null) { result.append('&'); lastIndex = ndx + 1; } else { result.append(replacement); lastIndex++; } } ndx = html.indexOf('&', lastIndex); } result.append(html.substring(lastIndex)); return result.toString(); }\n\n    ### Response:", "ground_truth": "Decodes HTML text. Assumes that all character references are properly closed with semi-colon.", "predict": "Decodes a string of html entities into an actual document structure"}, {"ID": 1155, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (r *ForwarderRequest) Complete(sendReset bool) { r.mu.Lock() defer r.mu.Unlock() if r.segment == nil { panic(\"Completing already completed forwarder request\") } // Remove request from the forwarder. r.forwarder.mu.Lock() delete(r.forwarder.inFlight, r.segment.id) r.forwarder.mu.Unlock() // If the caller requested, send a reset. if sendReset { replyWithReset(r.segment) } // Release all resources. r.segment.decRef() r.segment = nil r.forwarder = nil }\n\n    ### Response: // Complete completes the request, and optionally sends a RST segment back to the\n// sender..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String detectName(final char[] input, int ndx) { final Ptr ptr = new Ptr(); int firstIndex = 0; int lastIndex = ENTITY_NAMES.length - 1; int len = input.length; char[] lastName = null; final BinarySearchBase binarySearch = new BinarySearchBase() { @Override protected int compare(final int index) { char[] name = ENTITY_NAMES[index]; if (ptr.offset >= name.length) { return -1; } return name[ptr.offset] - ptr.c; } }; while (true) { ptr.c = input[ndx]; if (!CharUtil.isAlphaOrDigit(ptr.c)) { return lastName != null ? new String(lastName) : null; } firstIndex = binarySearch.findFirst(firstIndex, lastIndex); if (firstIndex < 0) { return lastName != null ? new String(lastName) : null; } char[] element = ENTITY_NAMES[firstIndex]; if (element.length == ptr.offset + 1) { // total match, remember position, continue for finding the longer name lastName = ENTITY_NAMES[firstIndex]; } lastIndex = binarySearch.findLast(firstIndex, lastIndex); if (firstIndex == lastIndex) { // only one element found, check the rest for (int i = ptr.offset; i < element.length; i++) { if (element[i] != input[ndx]) { return lastName != null ? new String(lastName) : null; } ndx++; } return new String(element); } ptr.offset++; ndx++; if (ndx == len) { return lastName != null ? new String(lastName) : null; } } }\n\n    ### Response:", "ground_truth": "Detects the longest character reference name on given position in char array.", "predict": "The function detectName detects the name of the entity corresponding to the given input string at the given position of the string. It identifies the corresponding name from an enum array of names and compares it with the input string to see if there is a match of total length of the name and the substring at the given position of the string. If there is a match of total length of the name and the substring, the function remember the position of the name in the string and continues to look for the corresponding names of longer length to see if there is a corresponding match of the whole string of names with the given substring of the string. If there is no corresponding match of total length of names and the substring, the function returns null. Otherwise, it returns the corresponding names of shorter length and continues to look for corresponding names of longer length until there is no corresponding match of names with the given substring of the string or there is no corresponding names of shorter length to look for corresponding names of longer length of names with the given substring of the string."}, {"ID": 1156, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def make_model_info(self, modelkey): \"\"\" Build a dictionary with the information for a particular model. Parameters ---------- modelkey : str Key used to identify this particular model Return `ModelInfo` \"\"\" model = self.read_model_yaml(modelkey) sources = model['sources'] components = OrderedDict() spec_model_yaml = self._name_factory.fullpath(localpath=model['spectral_models']) self._spec_lib.update(yaml.safe_load(open(spec_model_yaml))) for source, source_info in sources.items(): model_type = source_info.get('model_type', None) par_overrides = source_info.get('par_overides', None) version = source_info['version'] spec_type = source_info['SpectrumType'] edisp_disable = source_info.get('edisp_disable', False) sourcekey = \"%s_%s\" % (source, version) if model_type == 'galprop_rings': comp_info_dict = self.gmm.diffuse_comp_info_dicts(version) def_spec_type = spec_type['default'] for comp_key, comp_info in comp_info_dict.items(): model_comp = ModelComponent(info=comp_info, spectrum=\\ self._spec_lib[spec_type.get(comp_key, def_spec_type)], par_overrides=par_overrides, edisp_disable=edisp_disable) components[comp_key] = model_comp elif model_type == 'Catalog': comp_info_dict = self.csm.split_comp_info_dict(source, version) def_spec_type = spec_type['default'] for comp_key, comp_info in comp_info_dict.items(): model_comp = ModelComponent(info=comp_info, spectrum=\\ self._spec_lib[spec_type.get(comp_key, def_spec_type)], par_overrides=par_overrides, edisp_disable=edisp_disable) components[comp_key] = model_comp else: comp_info = self.dmm.diffuse_comp_info(sourcekey) model_comp = ModelComponent(info=comp_info, spectrum=self._spec_lib[spec_type], par_overrides=par_overrides, edisp_disable=edisp_disable) components[sourcekey] = model_comp ret_val = ModelInfo(model_name=modelkey, model_components=components) self._models[modelkey] = ret_val return ret_val\n\n    ### Response: Build a dictionary with the information for a particular model.\n\n        Parameters\n        ----------\n\n        modelkey : str\n            Key used to identify this particular model\n\n        Return `ModelInfo`.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected String buildOrderSql(String sql, final String column, final boolean ascending) { sql += \" order by \" + column; if (!ascending) { sql += \" desc\"; } return sql; }\n\n    ### Response:", "ground_truth": "Appends ORDER BY keyword.", "predict": "Override the default behavior of the orderBy clause to customize the order of the results returned by the query."}, {"ID": 1157, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Collection<Issue> getIssues(IssueFilter filter, boolean includeSubprojects) { filter = (filter != null) ? filter : new IssueFilter(); return getInstance().get().issues( getFilter(filter, includeSubprojects)); }\n\n    ### Response: Get Issues in this Project filtered as specified in the passed in filter.\n\n@param filter             Criteria to filter on. Project will be set automatically.\nIf null, all Issues in the project are returned.\n@param includeSubprojects Specifies whether to include items from sub\nproject or not. This only adds open sub projects.\n@return A read only Collection of Issues..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected String buildPageSql(String sql, final int from, final int pageSize) { sql = removeSelect(sql); return \"select LIMIT \" + from + ' ' + pageSize + sql; }\n\n    ### Response:", "ground_truth": "Builds page sql using LIMIT keyword after the SELECT.", "predict": "Override to customize page SQL for given page size"}, {"ID": 1158, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def list_billing(region, filter_by_kwargs): \"\"\"List available billing metrics\"\"\" conn = boto.ec2.cloudwatch.connect_to_region(region) metrics = conn.list_metrics(metric_name='EstimatedCharges') # Filtering is based on metric Dimensions. Only really valuable one is # ServiceName. if filter_by_kwargs: filter_key = filter_by_kwargs.keys()[0] filter_value = filter_by_kwargs.values()[0] if filter_value: filtered_metrics = [x for x in metrics if x.dimensions.get(filter_key) and x.dimensions.get(filter_key)[0] == filter_value] else: # ServiceName='' filtered_metrics = [x for x in metrics if not x.dimensions.get(filter_key)] else: filtered_metrics = metrics return filtered_metrics\n\n    ### Response: List available billing metrics.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void resolveColumnsAndProperties(final Class type) { PropertyDescriptor[] allProperties = ClassIntrospector.get().lookup(type).getAllPropertyDescriptors(); List<DbEntityColumnDescriptor> decList = new ArrayList<>(allProperties.length); int idcount = 0; HashSet<String> names = new HashSet<>(allProperties.length); for (PropertyDescriptor propertyDescriptor : allProperties) { DbEntityColumnDescriptor dec = DbMetaUtil.resolveColumnDescriptors(this, propertyDescriptor, isAnnotated, columnNamingStrategy); if (dec != null) { if (!names.add(dec.getColumnName())) { throw new DbOomException(\"Duplicate column name: \" + dec.getColumnName()); } decList.add(dec); if (dec.isId) { idcount++; } } } if (decList.isEmpty()) { throw new DbOomException(\"No column mappings in entity: \" + type); } columnDescriptors = decList.toArray(new DbEntityColumnDescriptor[0]); Arrays.sort(columnDescriptors); // extract ids from sorted list if (idcount > 0) { idColumnDescriptors = new DbEntityColumnDescriptor[idcount]; idcount = 0; for (DbEntityColumnDescriptor dec : columnDescriptors) { if (dec.isId) { idColumnDescriptors[idcount++] = dec; } } } }\n\n    ### Response:", "ground_truth": "Resolves list of all columns and properties.", "predict": "Resolves columns and properties of the given entity to the corresponding DB columns and properties to ensure proper mapping of values to the DB during the insertion and fetching of values."}, {"ID": 1159, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _csv_header(self): \"\"\" Extract the expected CSV header from the exposure metadata \"\"\" fields = ['id', 'number', 'taxonomy', 'lon', 'lat'] for name in self.cost_types['name']: fields.append(name) if 'per_area' in self.cost_types['type']: fields.append('area') if self.occupancy_periods: fields.extend(self.occupancy_periods.split()) fields.extend(self.tagcol.tagnames) return set(fields)\n\n    ### Response: Extract the expected CSV header from the exposure metadata.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DbEntityColumnDescriptor findByColumnName(final String columnName) { if (columnName == null) { return null; } init(); for (DbEntityColumnDescriptor columnDescriptor : columnDescriptors) { if (columnDescriptor.columnName.equalsIgnoreCase(columnName)) { return columnDescriptor; } } return null; }\n\n    ### Response:", "ground_truth": "Finds column descriptor by column name. Case is ignored.", "predict": "Find the DB Entity Column Descriptor given the column name or null if no matching columnDescriptor found."}, {"ID": 1160, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def touch_empty_backreferences(app, what, name, obj, options, lines): \"\"\"Generate empty back-reference example files This avoids inclusion errors/warnings if there are no gallery examples for a class / module that is being parsed by autodoc\"\"\" if not bool(app.config.sphinx_gallery_conf['backreferences_dir']): return examples_path = os.path.join(app.srcdir, app.config.sphinx_gallery_conf[ \"backreferences_dir\"], \"%s.examples\" % name) if not os.path.exists(examples_path): # touch file open(examples_path, 'w').close()\n\n    ### Response: Generate empty back-reference example files\n\n    This avoids inclusion errors/warnings if there are no gallery\n    examples for a class / module that is being parsed by autodoc.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DbEntityColumnDescriptor findByPropertyName(final String propertyName) { if (propertyName == null) { return null; } init(); for (DbEntityColumnDescriptor columnDescriptor : columnDescriptors) { if (columnDescriptor.propertyName.equals(propertyName)) { return columnDescriptor; } } return null; }\n\n    ### Response:", "ground_truth": "Finds column descriptor by property name.", "predict": "\n    Find an entity column by its property name\n    If the given parameter is null, the function\n    returns null;\n    Otherwise it first initiates the entity and\n    then iterates over the column descriptors of the entity to\n    look for the given parameter;\n    Finally it returns the corresponding column\n    descriptor or null if no matching column\n    is found"}, {"ID": 1161, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"checkstyle:abbreviationaswordinname\") public URL constructURL() { String params = encodeQueryParams(); String stringUri = url; if (params.length() > 0) { stringUri += \"?\" + params; } try { URI uri = new URI(stringUri); return uri.toURL(); } catch (final URISyntaxException e) { throw new ApiException(\"Bad URI: \" + stringUri, e); } catch (final MalformedURLException e) { throw new ApiException(\"Bad URL: \" + stringUri, e); } }\n\n    ### Response: Build the URL for the request.\n\n@return URL for the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getPropertyName(final String columnName) { DbEntityColumnDescriptor dec = findByColumnName(columnName); return dec == null ? null : dec.propertyName; }\n\n    ### Response:", "ground_truth": "Returns property name for specified column name.", "predict": "Get the property name of the given columnName from the database table."}, {"ID": 1162, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function newInstanceOf($class, array $arguments = [], bool $dependencyInjection = true) { try { // Reflection of class $reflectionClass = new \\ReflectionClass($class); if (!is_null($constructor = $reflectionClass->getConstructor())) { // Dependency injection? if ($dependencyInjection) { $arguments = $this->getDependencyInjectionParameters($constructor->getParameters(), $arguments); } } } catch (\\Exception $e) { throw new InstantiatorException(sprintf('Error during dependency injection of class \"%s\"', $class), 0, $e); } if (is_null($constructor)) { return $reflectionClass->newInstanceWithoutConstructor(); } else { return $reflectionClass->newInstanceArgs($arguments); } }\n\n    ### Response: Create new instance of a class.\n\n@param object|string $class               Class name or object\n@param array         $arguments           Arguments\n@param bool          $dependencyInjection Dependency injection? (default: true)\n\n@return mixed\n@throws \\Berlioz\\ServiceContainer\\Exception\\InstantiatorException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getColumnName(final String propertyName) { DbEntityColumnDescriptor dec = findByPropertyName(propertyName); return dec == null ? null : dec.columnName; }\n\n    ### Response:", "ground_truth": "Returns column name for specified property name..", "predict": "Get the column name of the given property from the database table schema."}, {"ID": 1163, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _initialize_with_array(self, data, rowBased=True): \"\"\"Set the matrix values from a two dimensional list.\"\"\" if rowBased: self.matrix = [] if len(data) != self._rows: raise ValueError(\"Size of Matrix does not match\") for col in xrange(self._columns): self.matrix.append([]) for row in xrange(self._rows): if len(data[row]) != self._columns: raise ValueError(\"Size of Matrix does not match\") self.matrix[col].append(data[row][col]) else: if len(data) != self._columns: raise ValueError(\"Size of Matrix does not match\") for col in data: if len(col) != self._rows: raise ValueError(\"Size of Matrix does not match\") self.matrix = copy.deepcopy(data)\n\n    ### Response: Set the matrix values from a two dimensional list..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object getIdValue(final E object) { final String propertyName = getIdPropertyName(); return BeanUtil.declared.getProperty(object, propertyName); }\n\n    ### Response:", "ground_truth": "Returns ID value for given entity instance.", "predict": "Get the Id Value of an Object of type E by resolving the given objects property name to the corresponding Bean property and retrieve its Value"}, {"ID": 1164, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function mdCalendarYearDirective() { return { require: ['^^mdCalendar', '^^mdCalendarYear', 'mdCalendarYearBody'], scope: { offset: '=mdYearOffset' }, controller: CalendarYearBodyCtrl, controllerAs: 'mdYearBodyCtrl', bindToController: true, link: function(scope, element, attrs, controllers) { var calendarCtrl = controllers[0]; var yearCtrl = controllers[1]; var yearBodyCtrl = controllers[2]; yearBodyCtrl.calendarCtrl = calendarCtrl; yearBodyCtrl.yearCtrl = yearCtrl; scope.$watch(function() { return yearBodyCtrl.offset; }, function(offset) { if (angular.isNumber(offset)) { yearBodyCtrl.generateContent(); } }); } }; }\n\n    ### Response: Private component, consumed by the md-calendar-year, which separates the DOM construction logic\nand allows for the year view to use md-virtual-repeat..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setIdValue(final E object, final Object value) { final String propertyName = getIdPropertyName(); BeanUtil.declared.setProperty(object, propertyName, value); }\n\n    ### Response:", "ground_truth": "Sets ID value for given entity.", "predict": "Decorates the setter for the id property to set the property to the given value and convert the given value to the appropriate type for the property being set to ensure proper object state is maintained"}, {"ID": 1165, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (h *HistoricalWeatherData) HistoryByCoord(location *Coordinates, hp *HistoricalParameters) error { response, err := h.client.Get(fmt.Sprintf(fmt.Sprintf(historyURL, \"appid=%s&lat=%f&lon=%f&start=%d&end=%d\"), h.Key, location.Latitude, location.Longitude, hp.Start, hp.End)) if err != nil { return err } defer response.Body.Close() if err = json.NewDecoder(response.Body).Decode(&h); err != nil { return err } return nil }\n\n    ### Response: // HistoryByCoord will return the history for the provided coordinates.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getKeyValue(final E object) { Object idValue = getIdValue(object); String idValueString = idValue == null ? StringPool.NULL : idValue.toString(); return type.getName().concat(StringPool.COLON).concat(idValueString); }\n\n    ### Response:", "ground_truth": "Returns unique key for this entity. Returned key\nis built from entity class and id value.", "predict": "// The method getKeyValue extract the key and corresponding value from an object and convert it to its string form for later usage."}, {"ID": 1166, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private LinkedHashSet<Formula> condenseOperandsOr(final Collection<? extends Formula> operands) { final LinkedHashSet<Formula> ops = new LinkedHashSet<>(); this.cnfCheck = true; for (final Formula form : operands) if (form.type() == OR) { for (final Formula f : ((NAryOperator) form).operands) { this.addFormulaOr(ops, f); if (!this.formulaAdditionResult[0]) return null; if (!this.formulaAdditionResult[1]) this.cnfCheck = false; } } else { this.addFormulaOr(ops, form); if (!this.formulaAdditionResult[0]) return null; if (!this.formulaAdditionResult[1]) this.cnfCheck = false; } return ops; }\n\n    ### Response: Returns a condensed array of operands for a given n-ary disjunction.\n@param operands the formulas\n@return a condensed array of operands.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public StringBand append(String s) { if (s == null) { s = StringPool.NULL; } if (index >= array.length) { expandCapacity(); } array[index++] = s; length += s.length(); return this; }\n\n    ### Response:", "ground_truth": "Appends a string.", "predict": "Appends string to the end of this string band."}, {"ID": 1167, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def download_file(url, file_name): \"\"\" Helper for downloading a remote file to disk. \"\"\" logger.info(\"Downloading URL: %s\", url) file_size = 0 if not os.path.isfile(file_name): response = requests.get(url, stream=True) with open(file_name, \"wb\") as fp: if not response.ok: raise Exception(\"Download exception. Will fail.\") for block in response.iter_content(1024): if not block: break fp.write(block) file_size += len(block) logger.info(\"Download finished, size is %d bytes.\", file_size) return file_size\n\n    ### Response: Helper for downloading a remote file to disk..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setIndex(final int newIndex) { if (newIndex < 0) { throw new ArrayIndexOutOfBoundsException(newIndex); } if (newIndex > array.length) { String[] newArray = new String[newIndex]; System.arraycopy(array, 0, newArray, 0, index); array = newArray; } if (newIndex > index) { for (int i = index; i < newIndex; i++) { array[i] = StringPool.EMPTY; } } else if (newIndex < index) { for (int i = newIndex; i < index; i++) { array[i] = null; } } index = newIndex; length = calculateLength(); }\n\n    ### Response:", "ground_truth": "Specifies the new index.", "predict": "Helper for downloading a remote file to disk..\n\n    "}, {"ID": 1168, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def set_consumer_offsets( kafka_client, group, new_offsets, raise_on_error=True, ): \"\"\"Set consumer offsets to the specified offsets. This method does not validate the specified offsets, it is up to the caller to specify valid offsets within a topic partition. If any partition leader is not available, the request fails for all the other topics. This is the tradeoff of sending all topic requests in batch and save both in performance and Kafka load. :param kafka_client: a connected KafkaToolClient :param group: kafka group_id :param topics: dict {<topic>: {<partition>: <offset>}} :param raise_on_error: if False the method does not raise exceptions on errors encountered. It may still fail on the request send. :returns: a list of errors for each partition offset update that failed. :rtype: list [OffsetCommitError] :raises: :py:class:`kafka_utils.util.error.UnknownTopic`: upon missing topics and raise_on_error=True :py:class:`kafka_utils.util.error.UnknownPartition`: upon missing partitions and raise_on_error=True :py:class:`exceptions.TypeError`: upon badly formatted input new_offsets FailedPayloadsError: upon send request error. \"\"\" valid_new_offsets = _verify_commit_offsets_requests( kafka_client, new_offsets, raise_on_error ) group_offset_reqs = [ OffsetCommitRequestPayload( topic, partition, offset, metadata='', ) for topic, new_partition_offsets in six.iteritems(valid_new_offsets) for partition, offset in six.iteritems(new_partition_offsets) ] send_api = kafka_client.send_offset_commit_request_kafka status = [] if group_offset_reqs: status = send_api( group, group_offset_reqs, raise_on_error, callback=_check_commit_response_error ) return [_f for _f in status if _f and _f.error != 0]\n\n    ### Response: Set consumer offsets to the specified offsets.\n\n    This method does not validate the specified offsets, it is up to\n    the caller to specify valid offsets within a topic partition.\n\n    If any partition leader is not available, the request fails for all the\n    other topics. This is the tradeoff of sending all topic requests in batch\n    and save both in performance and Kafka load.\n\n    :param kafka_client: a connected KafkaToolClient\n    :param group: kafka group_id\n    :param topics: dict {: {: }}\n    :param raise_on_error: if False the method does not raise exceptions\n      on errors encountered. It may still fail on the request send.\n    :returns: a list of errors for each partition offset update that failed.\n    :rtype: list [OffsetCommitError]\n    :raises:\n      :py:class:`kafka_utils.util.error.UnknownTopic`: upon missing\n      topics and raise_on_error=True\n\n      :py:class:`kafka_utils.util.error.UnknownPartition`: upon missing\n      partitions and raise_on_error=True\n\n      :py:class:`exceptions.TypeError`: upon badly formatted input\n      new_offsets\n\n      FailedPayloadsError: upon send request error..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void expandCapacity() { String[] newArray = new String[array.length << 1]; System.arraycopy(array, 0, newArray, 0, index); array = newArray; }\n\n    ### Response:", "ground_truth": "Expands internal string array by multiplying its size by 2.", "predict": "\n    protected void expandCapacity() {\n    // Allocate an array of size array.length * 2 (index * 2 since startIndex and endIndex are inclusive in two's-complement representation)\n    String[] newArray = new String[array.length << 1];\n    // Use System.arraycopy() to copy values from old to new array\n    System.arraycopy(array, 0, newArray, 0, index);\n    // Point array to the new array\n    array = newArray;\n    }"}, {"ID": 1169, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *TelegrafConfigService) FindTelegrafConfigByID(ctx context.Context, id influxdb.ID) (*influxdb.TelegrafConfig, error) { tc, err := s.s.FindTelegrafConfigByID(ctx, id) if err != nil { return nil, err } if err := authorizeReadTelegraf(ctx, tc.OrganizationID, id); err != nil { return nil, err } return tc, nil }\n\n    ### Response: // FindTelegrafConfigByID checks to see if the authorizer on context has read access to the id provided..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected int calculateLength() { int len = 0; for (int i = 0; i < index; i++) { len += array[i].length(); } return len; }\n\n    ### Response:", "ground_truth": "Calculates string length.", "predict": "// CalculateLength calculates the length of an indexed array of strings"}, {"ID": 1170, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def num_mode_groups(self): \"\"\"Most devices only provide a single mode group, however devices such as the Wacom Cintiq 22HD provide two mode groups. If multiple mode groups are available, a caller should use :meth:`~libinput.define.TabletPadModeGroup.has_button`, :meth:`~libinput.define.TabletPadModeGroup.has_ring` and :meth:`~libinput.define.TabletPadModeGroup.has_strip` to associate each button, ring and strip with the correct mode group. Returns: int: The number of mode groups available on this device. Raises: AttributeError \"\"\" num = self._libinput.libinput_device_tablet_pad_get_num_mode_groups( self._handle) if num < 0: raise AttributeError('This device is not a tablet pad device') return num\n\n    ### Response: Most devices only provide a single mode group, however devices\n\t\tsuch as the Wacom Cintiq 22HD provide two mode groups.\n\n\t\tIf multiple mode groups are available, a caller should use\n\t\t:meth:`~libinput.define.TabletPadModeGroup.has_button`,\n\t\t:meth:`~libinput.define.TabletPadModeGroup.has_ring`\n\t\tand :meth:`~libinput.define.TabletPadModeGroup.has_strip` to associate\n\t\teach button, ring and strip with the correct mode group.\n\n\t\tReturns:\n\t\t\tint: The number of mode groups available on this device.\n\t\tRaises:\n\t\t\tAttributeError.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String createMixingMessage(final BeanDefinition targetBeanDefinition, final BeanDefinition refBeanDefinition) { return \"Scopes mixing detected: \" + refBeanDefinition.name + \"@\" + refBeanDefinition.scope.getClass().getSimpleName() + \" -> \" + targetBeanDefinition.name + \"@\" + targetBeanDefinition.scope.getClass().getSimpleName(); }\n\n    ### Response:", "ground_truth": "Creates mixed scope message.", "predict": "Scopes mixing detected: FooBean/@annotation_class -> FooBean/@annotation_class_literal."}, {"ID": 1171, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def insert_source_info(result): \"\"\"Adds info about source of test result if available.\"\"\" comment = result.get(\"comment\") # don't change comment if it already exists if comment: return source = result.get(\"source\") job_name = result.get(\"job_name\") run = result.get(\"run\") source_list = [source, job_name, run] if not all(source_list): return source_note = \"/\".join(source_list) source_note = \"Source: {}\".format(source_note) result[\"comment\"] = source_note\n\n    ### Response: Adds info about source of test result if available..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Object createScopedProxyBean(final PetiteContainer petiteContainer, final BeanDefinition refBeanDefinition) { Class beanType = refBeanDefinition.type; Class proxyClass = proxyClasses.get(beanType); if (proxyClass == null) { // create proxy class only once if (refBeanDefinition instanceof ProxettaBeanDefinition) { // special case, double proxy! ProxettaBeanDefinition pbd = (ProxettaBeanDefinition) refBeanDefinition; ProxyProxetta proxetta = Proxetta.proxyProxetta().withAspects(ArraysUtil.insert(pbd.proxyAspects, aspect, 0)); proxetta.setClassNameSuffix(\"$ScopedProxy\"); proxetta.setVariableClassName(true); ProxyProxettaFactory builder = proxetta.proxy().setTarget(pbd.originalTarget); proxyClass = builder.define(); proxyClasses.put(beanType, proxyClass); } else { ProxyProxetta proxetta = Proxetta.proxyProxetta().withAspect(aspect); proxetta.setClassNameSuffix(\"$ScopedProxy\"); proxetta.setVariableClassName(true); ProxyProxettaFactory builder = proxetta.proxy().setTarget(beanType); proxyClass = builder.define(); proxyClasses.put(beanType, proxyClass); } } Object proxy; try { proxy = ClassUtil.newInstance(proxyClass); Field field = proxyClass.getField(\"$__petiteContainer$0\"); field.set(proxy, petiteContainer); field = proxyClass.getField(\"$__name$0\"); field.set(proxy, refBeanDefinition.name); } catch (Exception ex) { throw new PetiteException(ex); } return proxy; }\n\n    ### Response:", "ground_truth": "Creates scoped proxy bean for given bean definition.", "predict": "Creates and returns an instance of the given bean definition populated with the given bean definition and the given PetiteContainer and BeanDefinition names"}, {"ID": 1172, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def calculateBestIntervals(self): \"\"\"Calcule valid intervals of a city.\"\"\" self.__intervals = [] self.__readAPI(self.__getURL()) today = datetime.datetime.now().date() self.__validInterval(datetime.date(2008, 1, 1), today) self.__logger.info(\"Total number of intervals: \" + str(len(self.__intervals))) self.__lastDay = today.strftime(\"%Y-%m-%d\")\n\n    ### Response: Calcule valid intervals of a city..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void loopBody() throws JspException { JspFragment body = getJspBody(); if (body == null) { return; } LoopIterator loopIterator = new LoopIterator(start, end, step, modulus); if (status != null) { getJspContext().setAttribute(status, loopIterator); } while (loopIterator.next()) { TagUtil.invokeBody(body); } if (status != null) { getJspContext().removeAttribute(status); } }\n\n    ### Response:", "ground_truth": "Loops body.", "predict": "Loops over the given range and invokes the specified body for each iteration of the loop"}, {"ID": 1173, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def generate_tags(self): \"\"\" Generates the tags with collection with hosts \"\"\" self.tags = dict() for section in self.sections(): if self.has_option(section, 'tags'): tags = self.get(section, 'tags') for tag in [str(t).strip() for t in tags.split(',')]: if tag not in self.tags: self.tags[tag] = list() self.tags[tag].append(section.split(':')[1])\n\n    ### Response: Generates the tags with collection with hosts.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void init() { File[] filesArray = dir.listFiles(); filesCount = 0; if (filesArray != null) { filesCount = filesArray.length; for (File file : filesArray) { if (!acceptFile(file)) { continue; } map.put(file, new MutableLong(file.lastModified())); } } }\n\n    ### Response:", "ground_truth": "Initializes dir watcher by reading all files\nfrom watched folder.", "predict": "Initiates the program and scans all objects of given directory to add into the Map and initialize the Map"}, {"ID": 1174, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private String getUniqueName(String dn, String entityType, Attributes attrs) throws WIMException { final String METHODNAME = \"getUniqueName\"; String uniqueName = null; dn = iLdapConfigMgr.switchToNode(dn); if (iLdapConfigMgr.needTranslateRDN() && iLdapConfigMgr.needTranslateRDN(entityType)) { try { if (entityType != null) { LdapEntity ldapEntity = iLdapConfigMgr.getLdapEntity(entityType); if (ldapEntity != null) { String[] rdnName = LdapHelper.getRDNAttributes(dn); String[][] rdnWIMProps = ldapEntity.getWIMRDNProperties(); String[][] rdnWIMAttrs = ldapEntity.getWIMRDNAttributes(); String[][] rdnAttrs = ldapEntity.getRDNAttributes(); Attribute[] rdnAttributes = new Attribute[rdnWIMProps.length]; String[] rdnAttrValues = new String[rdnWIMProps.length]; for (int i = 0; i < rdnAttrs.length; i++) { String[] rdnAttr = rdnAttrs[i]; boolean isRDN = true; for (int j = 0; j < rdnAttr.length; j++) { if (!rdnAttr[j].equalsIgnoreCase(rdnName[j])) { isRDN = false; } } if (isRDN) { String[] rdnWIMProp = rdnWIMProps[i]; String[] rdnWIMAttr = rdnWIMAttrs[i]; boolean retrieveRDNs = false; if (attrs == null) { retrieveRDNs = true; } else { for (int k = 0; k < rdnWIMAttr.length; k++) { if (attrs.get(rdnWIMAttr[k]) == null) { retrieveRDNs = true; break; } } } if (retrieveRDNs) { attrs = getAttributes(dn, rdnWIMAttr); } for (int k = 0; k < rdnWIMAttr.length; k++) { rdnAttributes[k] = attrs.get(rdnWIMAttr[k]); if (rdnAttributes[k] != null) { rdnAttrValues[k] = (String) rdnAttributes[k].get(); } } uniqueName = LdapHelper.replaceRDN(dn, rdnWIMProp, rdnAttrValues); } } } } } catch (NamingException e) { String msg = Tr.formatMessage(tc, WIMMessageKey.NAMING_EXCEPTION, WIMMessageHelper.generateMsgParms(e.toString(true))); throw new WIMSystemException(WIMMessageKey.NAMING_EXCEPTION, msg, e); } } if (uniqueName == null) { uniqueName = dn; } else { if (tc.isDebugEnabled()) { Tr.debug(tc, METHODNAME + \" Translated uniqueName: \" + uniqueName); } } return uniqueName; }\n\n    ### Response: Get the unique name for the specified distinguished name.\n\n@param dn The distinguished name.\n@param entityType The entity type for the distinguished name.\n@param attrs The attributes for the entity.\n@return The unique name.\n@throws WIMException If there was an error retrieving portions of the unique name..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected boolean acceptFile(final File file) { if (!file.isFile()) { return false; // ignore non-files } String fileName = file.getName(); if (ignoreDotFiles) { if (fileName.startsWith(StringPool.DOT)) { return false; // ignore hidden files } } if (patterns == null) { return true; } return Wildcard.matchOne(fileName, patterns) != -1; }\n\n    ### Response:", "ground_truth": "Accepts if a file is going to be watched.", "predict": "Check if the given file matches the given patterns or ignores hidden files and dots (.* and .) in the name of the file"}, {"ID": 1175, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function executeWrapper(array $args) { if (!method_exists($this, 'execute')) { $cmd = $this->createCommand(Help::class); $cmd->executeWrapper([$this->name()]); return; } // Validating arguments foreach ($this->getArguments() as $k => $argument) { if (!isset($args[$k])) { if ($argument->isRequired()) { throw new RequireValueException(\"Argument pos {$k} '{$argument->name()}' requires a value.\"); } continue; } if (!$argument->validate($args[$k])) { $this->logger->error(\"Invalid argument {$args[$k]}\"); return; } $args[$k] = $argument->getValue(); } $refMethod = new \\ReflectionMethod($this, 'execute'); $requiredNumber = $refMethod->getNumberOfRequiredParameters(); $count = count($args); if ($count < $requiredNumber) { throw new CommandArgumentNotEnoughException($this, $count, $requiredNumber); } foreach ($this->extensions as $extension) { $extension->execute(); } $this->execute(...$args); }\n\n    ### Response: Execute command object, this is a wrapper method for execution.\n\nIn this method, we check the command arguments by the Reflection feature\nprovided by PHP.\n\n@param  array $args command argument list (not associative array).\n\n@throws CommandArgumentNotEnoughException\n@throws RequireValueException\n@throws \\ReflectionException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DirWatcher useWatchFile(final String name) { watchFile = new File(dir, name); if (!watchFile.isFile() || !watchFile.exists()) { try { FileUtil.touch(watchFile); } catch (IOException ioex) { throw new DirWatcherException(\"Invalid watch file: \" + name, ioex); } } watchFileLastAccessTime = watchFile.lastModified(); return this; }\n\n    ### Response:", "ground_truth": "Enables usage of provided watch file.", "predict": "Use and monitor the given file for modifications and saves its updated time to the DirWatcher object."}, {"ID": 1176, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function initHttp() { $this->di->mapService('core.http', '\\Core\\Http\\Http', [ 'core.http.cookie', 'core.http.header' ]); $this->di->mapService('core.http.cookie', '\\Core\\Http\\Cookie\\CookieHandler'); $this->di->mapService('core.http.header', '\\Core\\Http\\Header\\HeaderHandler'); $this->http = $this->di->get('core.http'); }\n\n    ### Response: Inits the http library system for cookie and header handling.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void start(final long pollingInterval) { if (timer == null) { if (!startBlank) { init(); } timer = new Timer(true); timer.schedule(new WatchTask(), 0, pollingInterval); } }\n\n    ### Response:", "ground_truth": "Starts the watcher.", "predict": "Starts the HTTP Poller using the given interval."}, {"ID": 1177, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function optimizeLeadingText() { $strings = $this->getTextContent('firstChild'); if (empty($strings)) { return; } $len = $this->getPrefixLength($strings); if ($len) { $this->adjustTextNodes('firstChild', $len); $this->choose->parentNode->insertBefore( $this->createText(substr($strings[0], 0, $len)), $this->choose ); } }\n\n    ### Response: Move common leading text outside of current choose\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void onChange(final DirWatcherEvent.Type type, final File file) { listeners.accept(new DirWatcherEvent(type, file)); }\n\n    ### Response:", "ground_truth": "Triggers listeners on file change.", "predict": "On change listener for given file"}, {"ID": 1178, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void forEach(Consumer<? super P_OUT> action) { evaluate(ForEachOps.makeRef(action, false)); }\n\n    ### Response: Terminal operations from Stream.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void add(final Enumeration<T> enumeration) { if (allEnumerations.contains(enumeration)) { throw new IllegalArgumentException(\"Duplicate enumeration\"); } allEnumerations.add(enumeration); }\n\n    ### Response:", "ground_truth": "Adds an enumeration to this composite.", "predict": "Check for duplicate objects during iteration of an Enumeration"}, {"ID": 1179, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (tableNode *routingTableNode) Split() { prefixLen := tableNode.KBucket().prefix.Size if prefixLen == maxPrefixLength { return } for i := 0; i < 2; i++ { tableNode.SetChild(i, newRoutingTableNode(newBitmapFrom( tableNode.KBucket().prefix, prefixLen+1))) } tableNode.Lock() tableNode.children[1].bucket.prefix.Set(prefixLen) tableNode.Unlock() for e := range tableNode.KBucket().nodes.Iter() { nd := e.Value.(*node) tableNode.Child(nd.id.Bit(prefixLen)).KBucket().nodes.PushBack(nd) } for e := range tableNode.KBucket().candidates.Iter() { nd := e.Value.(*node) tableNode.Child(nd.id.Bit(prefixLen)).KBucket().candidates.PushBack(nd) } for i := 0; i < 2; i++ { tableNode.Child(i).KBucket().UpdateTimestamp() } }\n\n    ### Response: // Split splits current routingTableNode and sets it's two children..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    int computeFieldInfoSize() { // The access_flags, name_index, descriptor_index and attributes_count fields use 8 bytes. int size = 8; // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS. if (constantValueIndex != 0) { // ConstantValue attributes always use 8 bytes. symbolTable.addConstantUtf8(Constants.CONSTANT_VALUE); size += 8; } // Before Java 1.5, synthetic fields are represented with a Synthetic attribute. if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && symbolTable.getMajorVersion() < Opcodes.V1_5) { // Synthetic attributes always use 6 bytes. symbolTable.addConstantUtf8(Constants.SYNTHETIC); size += 6; } if (signatureIndex != 0) { // Signature attributes always use 8 bytes. symbolTable.addConstantUtf8(Constants.SIGNATURE); size += 8; } // ACC_DEPRECATED is ASM specific, the ClassFile format uses a Deprecated attribute instead. if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) { // Deprecated attributes always use 6 bytes. symbolTable.addConstantUtf8(Constants.DEPRECATED); size += 6; } if (lastRuntimeVisibleAnnotation != null) { size += lastRuntimeVisibleAnnotation.computeAnnotationsSize( Constants.RUNTIME_VISIBLE_ANNOTATIONS); } if (lastRuntimeInvisibleAnnotation != null) { size += lastRuntimeInvisibleAnnotation.computeAnnotationsSize( Constants.RUNTIME_INVISIBLE_ANNOTATIONS); } if (lastRuntimeVisibleTypeAnnotation != null) { size += lastRuntimeVisibleTypeAnnotation.computeAnnotationsSize( Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS); } if (lastRuntimeInvisibleTypeAnnotation != null) { size += lastRuntimeInvisibleTypeAnnotation.computeAnnotationsSize( Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS); } if (firstAttribute != null) { size += firstAttribute.computeAttributesSize(symbolTable); } return size; }\n\n    ### Response:", "ground_truth": "Returns the size of the field_info JVMS structure generated by this FieldWriter. Also adds the\nnames of the attributes of this field in the constant pool.\n\n@return the size in bytes of the field_info JVMS structure.", "predict": "// Computes the total number of bytes of an AccessFlags, name_index, descriptor_index and attributes_count fields plus constant values plus signature attributes plus annotation attributes plus visibility annotations plus type annotations of this method."}, {"ID": 1180, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (b *bridge) Sleep(call otto.FunctionCall) (response otto.Value) { if call.Argument(0).IsNumber() { sleep, _ := call.Argument(0).ToInteger() time.Sleep(time.Duration(sleep) * time.Second) return otto.TrueValue() } return throwJSException(\"usage: sleep(<number of seconds>)\") }\n\n    ### Response: // Sleep will block the console for the specified number of seconds..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void putFieldInfo(final ByteVector output) { boolean useSyntheticAttribute = symbolTable.getMajorVersion() < Opcodes.V1_5; // Put the access_flags, name_index and descriptor_index fields. int mask = useSyntheticAttribute ? Opcodes.ACC_SYNTHETIC : 0; output.putShort(accessFlags & ~mask).putShort(nameIndex).putShort(descriptorIndex); // Compute and put the attributes_count field. // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS. int attributesCount = 0; if (constantValueIndex != 0) { ++attributesCount; } if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && useSyntheticAttribute) { ++attributesCount; } if (signatureIndex != 0) { ++attributesCount; } if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) { ++attributesCount; } if (lastRuntimeVisibleAnnotation != null) { ++attributesCount; } if (lastRuntimeInvisibleAnnotation != null) { ++attributesCount; } if (lastRuntimeVisibleTypeAnnotation != null) { ++attributesCount; } if (lastRuntimeInvisibleTypeAnnotation != null) { ++attributesCount; } if (firstAttribute != null) { attributesCount += firstAttribute.getAttributeCount(); } output.putShort(attributesCount); // Put the field_info attributes. // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS. if (constantValueIndex != 0) { output .putShort(symbolTable.addConstantUtf8(Constants.CONSTANT_VALUE)) .putInt(2) .putShort(constantValueIndex); } if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && useSyntheticAttribute) { output.putShort(symbolTable.addConstantUtf8(Constants.SYNTHETIC)).putInt(0); } if (signatureIndex != 0) { output .putShort(symbolTable.addConstantUtf8(Constants.SIGNATURE)) .putInt(2) .putShort(signatureIndex); } if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) { output.putShort(symbolTable.addConstantUtf8(Constants.DEPRECATED)).putInt(0); } if (lastRuntimeVisibleAnnotation != null) { lastRuntimeVisibleAnnotation.putAnnotations( symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_ANNOTATIONS), output); } if (lastRuntimeInvisibleAnnotation != null) { lastRuntimeInvisibleAnnotation.putAnnotations( symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_ANNOTATIONS), output); } if (lastRuntimeVisibleTypeAnnotation != null) { lastRuntimeVisibleTypeAnnotation.putAnnotations( symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS), output); } if (lastRuntimeInvisibleTypeAnnotation != null) { lastRuntimeInvisibleTypeAnnotation.putAnnotations( symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS), output); } if (firstAttribute != null) { firstAttribute.putAttributes(symbolTable, output); } }\n\n    ### Response:", "ground_truth": "Puts the content of the field_info JVMS structure generated by this FieldWriter into the given\nByteVector.\n\n@param output where the field_info structure must be put.", "predict": "// Sleep creates a temporary pool of threads to do its work but when it returns, the program may resume normal activity without interruption. It may optionally be used to put the program into an inactive state to reduce power consumption until needed again. It may be used to put the program into an inactive state to reduce power consumption until needed again. It may optionally be used to put the program into an inactive state to reduce power consumption until needed again. It may optionally be used to put the program into an inactive state to reduce power consumption until needed again. It may optionally be used to put the program into an inactive state to reduce power consumption until needed again. It may optionally be used to put the program into an inactive state to reduce power consumption until needed again. It may optionally be used to put the program into an inactive state to reduce power consumption until needed again. It may optionally be used to put the program into an inactive state to reduce power consumption until needed again. It may optionally be"}, {"ID": 1181, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def lazy_result(f): \"\"\"Decorate function to return LazyProxy.\"\"\" @wraps(f) def decorated(ctx, param, value): return LocalProxy(lambda: f(ctx, param, value)) return decorated\n\n    ### Response: Decorate function to return LazyProxy..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Target ofValue(final Object value, final ScopeData scopeData) { return new Target(value, null, scopeData, null, VALUE_INSTANCE_CREATOR); }\n\n    ### Response:", "ground_truth": "Creates a common target over a value, with known scope data.", "predict": "Decorates objects to enable automated dependency discovery of fields during object inspection.."}, {"ID": 1182, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function updateAllAction() { QC::executeSQL('SET FOREIGN_KEY_CHECKS = 0'); ModelOperator::getInstance(DC::getEnvironment()->getUserClassesRoot().'db/')->updateDBForAllModels(); ModelOperator::getInstance()->generateAllModelClasses(); $this->writeln('DB updated'); }\n\n    ### Response: Update database and models.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void writeValue(final InjectionPoint injectionPoint, final Object propertyValue, final boolean silent) { writeValue(injectionPoint.targetName(), propertyValue, silent); }\n\n    ### Response:", "ground_truth": "Writes value to this target. Depending on a flag, writing the value can be\ncompletely silent, when no exception is thrown and with top performances.\nOtherwise, an exception is thrown on a failure.", "predict": "Inject values into objects of given names"}, {"ID": 1183, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func GenerateNetplan(interfaces []network.InterfaceInfo) (string, error) { if len(interfaces) == 0 { return \"\", errors.Errorf(\"missing container network config\") } logger.Debugf(\"generating netplan from %#v\", interfaces) var netPlan netplan.Netplan netPlan.Network.Ethernets = make(map[string]netplan.Ethernet) netPlan.Network.Version = 2 for _, info := range interfaces { var iface netplan.Ethernet if cidr := info.CIDRAddress(); cidr != \"\" { iface.Addresses = append(iface.Addresses, cidr) } else if info.ConfigType == network.ConfigDHCP { t := true iface.DHCP4 = &t } for _, dns := range info.DNSServers { iface.Nameservers.Addresses = append(iface.Nameservers.Addresses, dns.Value) } iface.Nameservers.Search = append(iface.Nameservers.Search, info.DNSSearchDomains...) if info.GatewayAddress.Value != \"\" { switch { case info.GatewayAddress.Type == network.IPv4Address: iface.Gateway4 = info.GatewayAddress.Value case info.GatewayAddress.Type == network.IPv6Address: iface.Gateway6 = info.GatewayAddress.Value } } if info.MTU != 0 && info.MTU != 1500 { iface.MTU = info.MTU } if info.MACAddress != \"\" { iface.Match = map[string]string{\"macaddress\": info.MACAddress} } else { iface.Match = map[string]string{\"name\": info.InterfaceName} } for _, route := range info.Routes { route := netplan.Route{ To: route.DestinationCIDR, Via: route.GatewayIP, Metric: &route.Metric, } iface.Routes = append(iface.Routes, route) } netPlan.Network.Ethernets[info.InterfaceName] = iface } out, err := netplan.Marshal(&netPlan) if err != nil { return \"\", errors.Trace(err) } return string(out), nil }\n\n    ### Response: // GenerateNetplan renders a netplan file for one or more network\n// interfaces, using the given non-empty list of interfaces..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void decorate(final Writer writer, final char[] pageContent, final char[] decoraContent) throws IOException { DecoraTag[] decoraTags = parseDecorator(decoraContent); parsePage(pageContent, decoraTags); writeDecoratedPage(writer, decoraContent, pageContent, decoraTags); }\n\n    ### Response:", "ground_truth": "Decorates page content with decorator template and outputs the result.", "predict": "// Decorates the given document with decorators described in the given string of decorators."}, {"ID": 1184, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function attachmentsMetadata() { if ($this->attachmentsMetadata === null) { $this->attachmentsMetadata = []; $metadata = $this->metadata(); if (isset($metadata['attachments'])) { $this->attachmentsMetadata = $this->mergePresets($metadata['attachments']); } } return $this->attachmentsMetadata; }\n\n    ### Response: Retrieve the attachments configuration from this object's metadata.\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void parsePage(final char[] pageContent, final DecoraTag[] decoraTags) { LagartoParser lagartoParser = new LagartoParser(pageContent); PageRegionExtractor writer = new PageRegionExtractor(decoraTags); lagartoParser.parse(writer); }\n\n    ### Response:", "ground_truth": "Parses target page and extracts Decora regions for replacements.", "predict": "Parses the document into page regions and tag metadata"}, {"ID": 1185, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function keyExistsByFingerprint($fingerprint) { foreach ($this->api()->getClient()->getSshKeys() as $existingKey) { if ($existingKey->fingerprint === $fingerprint) { return true; } } return false; }\n\n    ### Response: Check whether the SSH key already exists in the user's account.\n\n@param string $fingerprint The public key fingerprint (as an MD5 hash).\n\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void writeDecoratedPage(final Writer out, final char[] decoratorContent, final char[] pageContent, final DecoraTag[] decoraTags) throws IOException { int ndx = 0; for (DecoraTag decoraTag : decoraTags) { // [1] just copy content before the Decora tag int decoratorLen = decoraTag.getStartIndex() - ndx; if (decoratorLen <= 0) { continue; } out.write(decoratorContent, ndx, decoratorLen); ndx = decoraTag.getEndIndex(); // [2] now write region at the place of Decora tag int regionLen = decoraTag.getRegionLength(); if (regionLen == 0) { if (decoraTag.hasDefaultValue()) { out.write(decoratorContent, decoraTag.getDefaultValueStart(), decoraTag.getDefaultValueLength()); } } else { writeRegion(out, pageContent, decoraTag, decoraTags); } } // write remaining content out.write(decoratorContent, ndx, decoratorContent.length - ndx); }\n\n    ### Response:", "ground_truth": "Writes decorated content.", "predict": "Decorates the given page content with decorators described in the given DecorataTags and writes it to the output stream with appropriate indents and decorators"}, {"ID": 1186, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function insertRow(string $table, array $colVals): InsertResult { $result = $this->insertBatch($table, [$colVals]); $ids = $result->getIds(); $id = empty($ids) ? 0 : $ids[0]; return new InsertResult($id, $result->getAffected()); }\n\n    ### Response: Inserts one row.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void writeRegion(final Writer out, final char[] pageContent, final DecoraTag decoraTag, final DecoraTag[] decoraTags) throws IOException { int regionStart = decoraTag.getRegionStart(); int regionLen = decoraTag.getRegionLength(); int regionEnd = regionStart + regionLen; for (DecoraTag innerDecoraTag : decoraTags) { if (decoraTag == innerDecoraTag) { continue; } if (decoraTag.isRegionUndefined()) { continue; } if (innerDecoraTag.isInsideOtherTagRegion(decoraTag)) { // write everything from region start to the inner Decora tag out.write(pageContent, regionStart, innerDecoraTag.getRegionTagStart() - regionStart); regionStart = innerDecoraTag.getRegionTagEnd(); } } // write remaining content of the region out.write(pageContent, regionStart, regionEnd - regionStart); }\n\n    ### Response:", "ground_truth": "Writes region to output, but extracts all inner regions.", "predict": "Writes an area of the document defined by the given start and length parameters to the output stream and ignores the content of other Decor attributes in the given region of the document"}, {"ID": 1187, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (b ICMPv6) SetChecksum(checksum uint16) { binary.BigEndian.PutUint16(b[2:], checksum) }\n\n    ### Response: // SetChecksum calculates and sets the ICMP checksum field..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void start() throws IOException { serverSocket = new ServerSocket(listenPort, socketBacklog); serverSocket.setReuseAddress(true); executorService = Executors.newFixedThreadPool(threadPoolSize); running = true; while (running) { Socket socket = serverSocket.accept(); socket.setKeepAlive(false); executorService.execute(onSocketConnection(socket)); } executorService.shutdown(); }\n\n    ### Response:", "ground_truth": "Starts HTTP tunnel. Method ends when the tunnel is stopped.", "predict": "The start() method of the SocketListener class implements the logic to accept incoming \n    ###             TCP/IP connections on the specified port and to run the appropriate listener logic\n    ###             for each incoming connection."}, {"ID": 1188, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function encode($value) { if (is_array($value)) { return array_map([$this, 'encode'], $value); } else { return str_replace(['+', '%7E'], [' ', '~'], rawurlencode($value)); } }\n\n    ### Response: Encode according to RFC 3986.\n\n@param string|array $value Value to be normalized.\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ProcessResult run(final Process process) throws InterruptedException { final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final StreamGobbler outputGobbler = new StreamGobbler(process.getInputStream(), baos, OUTPUT_PREFIX); final StreamGobbler errorGobbler = new StreamGobbler(process.getErrorStream(), baos, ERROR_PREFIX); outputGobbler.start(); errorGobbler.start(); final int result = process.waitFor(); outputGobbler.waitFor(); errorGobbler.waitFor(); return new ProcessResult(result, baos.toString()); }\n\n    ### Response:", "ground_truth": "Executes a process and returns the process output and exit code.", "predict": "Stdout and Stderr output normalized and available in baos"}, {"ID": 1189, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean isMatchingTopic(String topic) { if (isFixedTopics()) { return getFixedTopics().contains(topic); } else { return topicPattern.matcher(topic).matches(); } }\n\n    ### Response: Check if the input topic matches the topics described by this KafkaTopicDescriptor.\n\n@return true if found a match..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected IMAPSSLStore getStore(final Session session) { SimpleAuthenticator simpleAuthenticator = (SimpleAuthenticator) authenticator; final URLName url; if (simpleAuthenticator == null) { url = new URLName( PROTOCOL_IMAP, host, port, StringPool.EMPTY, null, null); } else { final PasswordAuthentication pa = simpleAuthenticator.getPasswordAuthentication(); url = new URLName( PROTOCOL_IMAP, host, port, StringPool.EMPTY, pa.getUserName(), pa.getPassword()); } return new IMAPSSLStore(session, url); }\n\n    ### Response:", "ground_truth": "Returns email store.\n\n@param session {@link Session}\n@return {@link com.sun.mail.imap.IMAPSSLStore}", "predict": "Get the Store for the given Session from the given url. The Store handles encrypted communication to the mailbox server to send and receive email."}, {"ID": 1190, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def fromstring(text, schema=None): \"\"\"Parses a KML text string This function parses a KML text string and optionally validates it against a provided schema object\"\"\" if schema: parser = objectify.makeparser(schema = schema.schema) return objectify.fromstring(text, parser=parser) else: return objectify.fromstring(text)\n\n    ### Response: Parses a KML text string\n    \n    This function parses a KML text string and optionally validates it against \n    a provided schema object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ServletOutputStream createOutputStream() throws IOException { GzipResponseStream gzstream = new GzipResponseStream(origResponse); gzstream.setBuffer(threshold); return gzstream; }\n\n    ### Response:", "ground_truth": "Creates and returns a ServletOutputStream to write the content associated\nwith this Response.", "predict": "Creates an output stream to send compressed gzip data to the client"}, {"ID": 1191, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getFirst($name) { $names = func_get_args(); foreach ($names as $name) { if (isset($this->data[$name])) { return $this->data[$name]; } } }\n\n    ### Response: Get first set symbol value.\n\n@param string $name\n@param string ...$name\n\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void init(final TemplateData templateData) { super.init(templateData); if (hint != null) { templateData.incrementHintsCount(); } }\n\n    ### Response:", "ground_truth": "Counts actual real hints.", "predict": "Override init to increment hints count on template data."}, {"ID": 1192, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function (polygon, x, y) { var nn = polygon.length; var prevIndex = nn - 2; var inside = false; for (var ii = 0; ii < nn; ii += 2) { var vertexY = polygon[ii + 1]; var prevY = polygon[prevIndex + 1]; if ((vertexY < y && prevY >= y) || (prevY < y && vertexY >= y)) { var vertexX = polygon[ii]; if (vertexX + (y - vertexY) / (prevY - vertexY) * (polygon[prevIndex] - vertexX) < x) inside = !inside; } prevIndex = ii; } return inside; }\n\n    ### Response: Returns true if the polygon contains the point..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void appendAlias(final StringBuilder query, final DbEntityDescriptor ded, final DbEntityColumnDescriptor dec) { final ColumnAliasType columnAliasType = templateData.getColumnAliasType(); if (columnAliasType == null || columnAliasType == ColumnAliasType.TABLE_REFERENCE) { final String tableName = ded.getTableName(); final String columnName = dec.getColumnNameForQuery(); templateData.registerColumnDataForTableRef(tableRef, tableName); query.append(tableRef).append(columnAliasSeparator).append(columnName); } else if (columnAliasType == ColumnAliasType.COLUMN_CODE) { final String tableName = ded.getTableName(); final String columnName = dec.getColumnName(); final String code = templateData.registerColumnDataForColumnCode(tableName, columnName); query.append(code); } else if (columnAliasType == ColumnAliasType.TABLE_NAME) { final String tableName = ded.getTableNameForQuery(); final String columnName = dec.getColumnNameForQuery(); query.append(tableName).append(columnAliasSeparator).append(columnName); } }\n\n    ### Response:", "ground_truth": "Appends alias.", "predict": "Prepares an SQL statement to join two tables and filter values according to the given predicate"}, {"ID": 1193, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _parse_args(self, args): \"\"\"Parses any supplied command-line args and provides help text. \"\"\" parser = ArgumentParser(description=\"Runs pylint recursively on a directory\") parser.add_argument( \"-v\", \"--verbose\", dest=\"verbose\", action=\"store_true\", default=False, help=\"Verbose mode (report which files were found for testing).\", ) parser.add_argument( \"--rcfile\", dest=\"rcfile\", action=\"store\", default=\".pylintrc\", help=\"A relative or absolute path to your pylint rcfile. Defaults to\\ `.pylintrc` at the current working directory\", ) parser.add_argument( \"-V\", \"--version\", action=\"version\", version=\"%(prog)s ({0}) for Python {1}\".format(__version__, PYTHON_VERSION), ) options, _ = parser.parse_known_args(args) self.verbose = options.verbose if options.rcfile: if not os.path.isfile(options.rcfile): options.rcfile = os.getcwd() + \"/\" + options.rcfile self.rcfile = options.rcfile return options\n\n    ### Response: Parses any supplied command-line args and provides help text..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void appendColumnName(final StringBuilder query, final DbEntityDescriptor ded, final DbEntityColumnDescriptor dec) { query.append(resolveTable(tableRef, ded)).append('.').append(dec.getColumnName()); if (templateData.getColumnAliasType() != null) { // create column aliases query.append(AS); switch (templateData.getColumnAliasType()) { case TABLE_NAME: { final String tableName = ded.getTableNameForQuery(); query.append(tableName).append(columnAliasSeparator).append(dec.getColumnNameForQuery()); break; } case TABLE_REFERENCE: { final String tableName = ded.getTableName(); templateData.registerColumnDataForTableRef(tableRef, tableName); query.append(tableRef).append(columnAliasSeparator).append(dec.getColumnNameForQuery()); break; } case COLUMN_CODE: { final String tableName = ded.getTableName(); final String code = templateData.registerColumnDataForColumnCode(tableName, dec.getColumnName()); query.append(code); break; } } } }\n\n    ### Response:", "ground_truth": "Simply appends column name with optional table reference and alias.", "predict": "Resolves the table for the given SQL query to the given database table and appends it to the SQL statement to produce the SQL for the given database table and column name of the given database column."}, {"ID": 1194, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function createCidrRule($protocol, $cidr_ips, $from_port, $to_port = null) { $params = array_merge($this->getCommonRuleParams($protocol, $from_port, $to_port), array( 'security_group_rule[source_type]' => 'cidr_ips', 'security_group_rule[cidr_ips]' => $cidr_ips ) ); $this->executeCommand('security_group_rules_create', $params); }\n\n    ### Response: Creates a CIDR based security group rule.  Requires that security group already be created\nor shown.\n\n@param string $protocol Which protocol for the rule.  One of \"tcp\", \"udp\", or \"icmp\"\n@param string $cidr_ips An IP range in CIDR notation. @see http://en.wikipedia.org/wiki/CIDR_notation\n@param int $from_port The starting port of a range of ports, or the ICMP type.  If $to_port is null, this port will be used as the start and end of the range, effectively opening only this port number\n@param mixed $to_port The ending port of a range of ports, the ICMP code or null.  If null is specified, this should default to the same as $from_port.\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void addRule(final D ruleDefinition, final boolean include) { if (rules == null) { rules = new ArrayList<>(); } if (include) { includesCount++; } else { excludesCount++; } Rule<R> newRule = new Rule<>(makeRule(ruleDefinition), include); if (rules.contains(newRule)) { return; } rules.add(newRule); }\n\n    ### Response:", "ground_truth": "Adds a rule. Duplicates are not allowed and will be ignored.", "predict": "Increment the count of Rules included and excluded and add the Rule to the list of Rules"}, {"ID": 1195, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def to_array(self): \"\"\" Serializes this Location to a dictionary. :return: dictionary representation of this object. :rtype: dict \"\"\" array = super(Location, self).to_array() array['longitude'] = float(self.longitude) # type float array['latitude'] = float(self.latitude) # type float return array\n\n    ### Response: Serializes this Location to a dictionary.\n\n        :return: dictionary representation of this object.\n        :rtype: dict.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean apply(final V value, final boolean blacklist, boolean flag) { if (rules == null) { return flag; } if (blacklist) { flag = processExcludes(value, flag); flag = processIncludes(value, flag); } else { flag = processIncludes(value, flag); flag = processExcludes(value, flag); } return flag; }\n\n    ### Response:", "ground_truth": "Applies rules on given flag. Flag is only changed if at least one rule\nmatched. Otherwise, the same value is returned. This way you can\nchain several rules and have the rule engine change the flag\nonly when a rule is matched.", "predict": "\n    The function applies the given value and its corresponding flags to the given list of Rules to produce a boolean result. The function may optionally filter values and flags based on predetermined conditions to produce an enhanced output and may do other processing to produce the output boolean flag."}, {"ID": 1196, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function deleteUser($userLogin) { Piwik::checkUserHasSuperUserAccess(); $this->checkUserIsNotAnonymous($userLogin); $this->checkUserExist($userLogin); if ($this->isUserTheOnlyUserHavingSuperUserAccess($userLogin)) { $message = Piwik::translate(\"UsersManager_ExceptionDeleteOnlyUserWithSuperUserAccess\", $userLogin) . \" \" . Piwik::translate(\"UsersManager_ExceptionYouMustGrantSuperUserAccessFirst\"); throw new Exception($message); } $this->model->deleteUserOnly($userLogin); $this->model->deleteUserAccess($userLogin); Cache::deleteTrackerCache(); }\n\n    ### Response: Delete one or more users and all its access, given its login.\n\n@param string $userLogin the user login(s).\n\n@throws Exception if the user doesn't exist or if deleting the users would leave no superusers.\n\n@return bool true on success.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected boolean processIncludes(final V value, boolean include) { if (includesCount > 0) { if (!include) { for (Rule<R> rule : rules) { if (!rule.include) { continue; } if (inExRuleMatcher.accept(value, rule.value, true)) { include = true; break; } } } } return include; }\n\n    ### Response:", "ground_truth": "Process includes rules.", "predict": "Include values in the result given by the Rule<R>::INCLUDING predicate and given by the Rule<R>::IN_EX_RULE_MATCHER predicate and given by the Rule<R>::INCLUDING predicate and given by the Rule<R>::IN_EX_RULE_MATCHER predicate and given by the Rule<R>::INCLUDING predicate and given by the Rule<R>::IN_EX_RULE_MATCHER predicate and given by the Rule<R>::INCLUDING predicate and given by the Rule<R>::IN_EX_RULE_MATCHER predicate and given by the Rule<R>::INCLUDING predicate and given by the Rule<R>::IN_EX_RULE_MATCHER predicate and given by the Rule<R>::INCLUDING predicate and given by the Rule<R>::IN_EX_RULE_MATCHER predicate and given by the Rule<R>::INCLUDING predicate and given by the Rule<"}, {"ID": 1197, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function removeTrainingSlash($url) { if (null === $url || strlen($url) <= 2) { return $url; } return (substr($url, -1, 1) == '/')? substr($url, 0, -1) : $url; }\n\n    ### Response: Removes a trailing slash from an url string.\n\n@param string $url\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected boolean processExcludes(final V value, boolean include) { if (excludesCount > 0) { if (include) { for (Rule<R> rule : rules) { if (rule.include) { continue; } if (inExRuleMatcher.accept(value, rule.value, false)) { include = false; break; } } } } return include; }\n\n    ### Response:", "ground_truth": "Process excludes rules.", "predict": "Processes and applies excludes given by the Rule<R> objects of the given Rule<R>::INCLUDING_RULE_NAMES set to the Value and returns true if excludes were applied, false otherwise."}, {"ID": 1198, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func UseProxy(w http.ResponseWriter, response interface{}) { Respond(w, http.StatusUseProxy, response) }\n\n    ### Response: // UseProxy writes a response with status code 305..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getPseudoClassName() { String name = getClass().getSimpleName().toLowerCase(); name = name.replace('_', '-'); return name; }\n\n    ### Response:", "ground_truth": "Returns pseudo-class name from simple class name.", "predict": "// This method generates a PseudoClass from the SimpleClass name of the given class."}, {"ID": 1199, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def plot_state_histogram(self, ax): \"\"\" Visualize the complex matrix elements of the estimated state. :param matplotlib.Axes ax: A matplotlib Axes object to plot into. \"\"\" title = \"Estimated state\" nqc = int(round(np.log2(self.rho_est.data.shape[0]))) labels = ut.basis_labels(nqc) return ut.state_histogram(self.rho_est, ax, title)\n\n    ### Response: Visualize the complex matrix elements of the estimated state.\n\n        :param matplotlib.Axes ax: A matplotlib Axes object to plot into..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public boolean addAll(final Collection<? extends E> c) { Iterator<? extends E> i = c.iterator(); boolean changed = false; while (i.hasNext()) { boolean ret = add(i.next()); if (!changed) { changed = ret; } } return changed; }\n\n    ### Response:", "ground_truth": "Add all of the elements in the given collection to this list.", "predict": "Override the default behavior of the addAll() method to check if the given collection contains any new objects to add to the set being constructed, but to do this check only once per collection being added to the set being constructed, to avoid unnecessary overhead and to avoid the possibility of running into a combinatorial explosion of the number of iterators processed in the case of very large collections being added to the set being constructed."}, {"ID": 1200, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def __FinalUrlValue(self, value, field): \"\"\"Encode value for the URL, using field to skip encoding for bytes.\"\"\" if isinstance(field, messages.BytesField) and value is not None: return base64.urlsafe_b64encode(value) elif isinstance(value, six.text_type): return value.encode('utf8') elif isinstance(value, six.binary_type): return value.decode('utf8') elif isinstance(value, datetime.datetime): return value.isoformat() return value\n\n    ### Response: Encode value for the URL, using field to skip encoding for bytes..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected int findInsertionPoint(final E o, int low, int high) { while (low <= high) { int mid = (low + high) >>> 1; int delta = compare(get(mid), o); if (delta > 0) { high = mid - 1; } else { low = mid + 1; } } return low; }\n\n    ### Response:", "ground_truth": "Conducts a binary search to find the index where Object\nshould be inserted.", "predict": "Finds an insertion point for an element o, given indices low and high to determine which of the two indices has the smallest difference with the given element o of type E, and returns the corresponding indices plus 1, i.e., findInsertionPoint(o, int low, int high) returns int mid and int delta, such that int delta = int (o - E) and int mid = int (delta * (high - int low) / 2); int mid may be int low or int high; int delta may be int -1, int 0, int int > 0, int int < 0; int mid may be int low - int int > 0 or int high - int int < 0; int mid may be int int > 0 and int delta may be int int > 0; int mid may be int int < 0 and int delta may be int int < 0; int mid may be int int > 0 and int delta may be int int > 0; int mid"}, {"ID": 1201, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static function replaceUrl($value, $url, $urlConv, $type) { if ($type == 'embedded') { $value = str_replace('\"'.$url.'\"', '\"'.$urlConv.'\"', $value); } else { $value = str_replace($url, $urlConv, $value); } return $value; }\n\n    ### Response: Replace the url in the given value\n@param $value\n@param $url\n@param $urlConv\n@param $type embedded or direct\n@return String.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void bindAnnotationConfig(final Class<? extends Annotation> annotationType, final Class<? extends ActionConfig> actionConfigClass) { final ActionConfig actionConfig = registerNewActionConfiguration(actionConfigClass); actionConfigs.put(annotationType, actionConfig); for (final AnnotationParser annotationParser : annotationParsers) { if (annotationType.equals(annotationParser.getAnnotationType())) { // parser already exists return; } } annotationParsers = ArraysUtil.append(annotationParsers, new AnnotationParser(annotationType, Action.class)); }\n\n    ### Response:", "ground_truth": "Binds action annotation and the action config. This can overwrite the default annotation\nconfiguration of an annotation.", "predict": "\n     *     Binds annotation to action configuration\n     *     Parses annotation into action annotations\n     *     Returns action annotations"}, {"ID": 1202, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private String getParserErrorMessage() { StringBuffer code = new StringBuffer(text); code = code.insert(maxPosition, \" >><< \"); String codeString = code.substring(maxPosition - 100 < 0 ? 0 : maxPosition - 100, maxPosition + 100 >= code.length() ? code.length() : maxPosition + 100); return \"Could not parse the input string near '\" + codeString + \"'!\"; }\n\n    ### Response: This message just generates a parser exception message to be returned\ncontaining the maximum position where the parser could not proceed. This\nshould be in most cases the position where the error within the text is\nlocated.\n\n@return.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected ActionConfig registerNewActionConfiguration(final Class<? extends ActionConfig> actionConfigClass) { final ActionConfig newActionConfig = createActionConfig(actionConfigClass); actionConfigs.put(actionConfigClass, newActionConfig); return newActionConfig; }\n\n    ### Response:", "ground_truth": "Registers action configuration for given type.", "predict": "The above method generates and registers a new action\nconfiguration for the given actionClass to the given actionConfigMap. It\ncreates and returns a new action configuration for the given actionClass and\nadds it to the given actionConfigMap."}, {"ID": 1203, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void shutdown() { // -------------------- BEGIN CRITICAL SECTION ------------------- synchronized (lock) { if (!isShutDown) { // mark as shutdown and release memory isShutDown = true; numNonAllocatedPages = 0; // go over all allocated segments and release them for (Set<MemorySegment> segments : allocatedSegments.values()) { for (MemorySegment seg : segments) { seg.free(); } } memoryPool.clear(); } } // -------------------- END CRITICAL SECTION ------------------- }\n\n    ### Response: Shuts the memory manager down, trying to release all the memory it managed. Depending\non implementation details, the memory does not necessarily become reclaimable by the\ngarbage collector, because there might still be references to allocated segments in the\ncode that allocated them from the memory manager..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ActionConfig lookup(final Class actionTypeOrAnnotationType) { final ActionConfig actionConfig = actionConfigs.get(actionTypeOrAnnotationType); if (actionConfig == null) { throw new MadvocException(\"ActionConfiguration not registered:\" + actionTypeOrAnnotationType.getName()); } return actionConfig; }\n\n    ### Response:", "ground_truth": "Lookup for the action configuration. Typically, the input argument is either the action type or annotation type.", "predict": "The lookup() method looks up an ActionConfig for the given actionTypeOrAnnotationType. If\nit does not exist, an exception is thrown."}, {"ID": 1204, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def registerDeferred(self, event, d): \"\"\" Register a defer to be fired at the firing of a specific event. :param string event: Currently supported values are `connect`. Another value may be `_dtor` which will register an event to fire when this object has been completely destroyed. :param event: The defered to fire when the event succeeds or failes :type event: :class:`Deferred` If this event has already fired, the deferred will be triggered asynchronously. Example:: def on_connect(*args): print(\"I'm connected\") def on_connect_err(*args): print(\"Connection failed\") d = Deferred() cb.registerDeferred('connect', d) d.addCallback(on_connect) d.addErrback(on_connect_err) :raise: :exc:`ValueError` if the event name is unrecognized \"\"\" try: self._evq[event].schedule(d) except KeyError: raise ValueError(\"No such event type\", event)\n\n    ### Response: Register a defer to be fired at the firing of a specific event.\n\n        :param string event: Currently supported values are `connect`. Another\n          value may be `_dtor` which will register an event to fire when this\n          object has been completely destroyed.\n\n        :param event: The defered to fire when the event succeeds or failes\n        :type event: :class:`Deferred`\n\n        If this event has already fired, the deferred will be triggered\n        asynchronously.\n\n        Example::\n\n          def on_connect(*args):\n              print(\"I'm connected\")\n          def on_connect_err(*args):\n              print(\"Connection failed\")\n\n          d = Deferred()\n          cb.registerDeferred('connect', d)\n          d.addCallback(on_connect)\n          d.addErrback(on_connect_err)\n\n        :raise: :exc:`ValueError` if the event name is unrecognized.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T extends ActionConfig> void with(final Class<T> actionConfigType, final Consumer<T> actionConfigConsumer) { final T actionConfig = (T) lookup(actionConfigType); actionConfigConsumer.accept(actionConfig); }\n\n    ### Response:", "ground_truth": "Fetch some action config and consumes it.", "predict": "\n    With this method, you can register an action to run whenever an action\n    with the specified action config type is run in your program. It\n    accept an action config as an argument and runs the specified\n    consumer on the given action config."}, {"ID": 1205, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function cmdAddOrder() { $submitted = $this->getParam(); $this->setSubmitted(null, $submitted); $this->setSubmittedJson('data'); $this->validateComponent('order'); if ($this->isError()) { $this->output(); } $id = $this->order->add($this->getSubmitted()); if (empty($id)) { $this->errorAndExit($this->text('Unexpected result')); } $this->line($id); $this->output(); }\n\n    ### Response: Callback for \"order-add\" command.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static void setupSystemMailProperties() { System.setProperty(\"mail.mime.encodefilename\", Boolean.valueOf(Defaults.mailMimeEncodefilename).toString()); System.setProperty(\"mail.mime.decodefilename\", Boolean.valueOf(Defaults.mailMimeDecodefilename).toString()); }\n\n    ### Response:", "ground_truth": "Setups the system email properties.", "predict": "Sets system environment properties for sending emails with attachments in MIME format."}, {"ID": 1206, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (db *DB) invalidateBlock(blockhash string) error { _, err := db.Exec(db.invalidateBlockSQL, blockhash) return db.filterError(err) }\n\n    ### Response: // Invalidate block with the given hash..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void validateWithin(final ValidationContext vctx, final Object value) { vtor.validate(vctx, value, name); }\n\n    ### Response:", "ground_truth": "Validates provided context and value withing this constraint content.", "predict": "// Validates the given Value within the given ValidationContext"}, {"ID": 1207, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def calculate_cardinality( angle, earthquake_hazard=None, place_exposure=None ): \"\"\"Simple postprocessor where we compute the cardinality of an angle. :param angle: Bearing angle. :type angle: float :param earthquake_hazard: The hazard to use. :type earthquake_hazard: str :param place_exposure: The exposure to use. :type place_exposure: str :return: Cardinality text. :rtype: str \"\"\" # this method could still be improved later, since the acquisition interval # is a bit strange, i.e the input angle of 22.499\u00b0 will return `N` even # though 22.5\u00b0 is the direction for `NNE` _ = earthquake_hazard, place_exposure # NOQA direction_list = tr( 'N,NNE,NE,ENE,E,ESE,SE,SSE,S,SSW,SW,WSW,W,WNW,NW,NNW' ).split(',') bearing = float(angle) direction_count = len(direction_list) direction_interval = 360. / direction_count index = int(floor(bearing / direction_interval)) index %= direction_count return direction_list[index]\n\n    ### Response: Simple postprocessor where we compute the cardinality of an angle.\n\n    :param angle: Bearing angle.\n    :type angle: float\n\n    :param earthquake_hazard: The hazard to use.\n    :type earthquake_hazard: str\n\n    :param place_exposure: The exposure to use.\n    :type place_exposure: str\n\n    :return: Cardinality text.\n    :rtype: str.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Element findLastTable(final Node node) { Node tableNode = node; while (tableNode != null) { if (tableNode.getNodeType() == Node.NodeType.ELEMENT) { String tableNodeName = tableNode.getNodeName().toLowerCase(); if (tableNodeName.equals(\"table\")) { break; } } tableNode = tableNode.getParentNode(); } return (Element) tableNode; }\n\n    ### Response:", "ground_truth": "Finds the last table in stack of open elements.", "predict": "\n    The given method makes use of the Node. NodeType.ELEMENT predicate to traverse the document in order to locate the first table element of the document and to break the loop once the table element has been found. It makes use of the Node.getNodeName() method to retrieve the table element's name in order to verify that it matches the given value of tableNodeName (\"table\"), and makes use of the Node.getParentNode() method to locate the parent of the found element in order to locate the immediate parent of the found element, which contains the found element itself. It makes use of Element.equals() method to verify that the found element matches the given value of tableNodeName (\"table\"), thus verifying that the given element indeed belongs to the given document's first table element. It makes use of Element.getParent() method to locate the parent of the found element in order to locate the immediate parent of the found element, which contains the found element itself. It makes use of Element.getParent() method to locate"}, {"ID": 1208, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String makeRequest(boolean includePassword) { StringBuffer buf = new StringBuffer(); buf.append(VERSION).append(CRLF); buf.append(COMMAND).append(String.valueOf(command)).append(CRLF); buf.append(USERNAME).append(this.username).append(CRLF); String pwd = getPassphrase(); buf.append(PASSPHRASE); if (includePassword) { if (pwd != null) { buf.append(pwd); } } else { for (int i=0;pwd != null && i<pwd.length();i++) { buf.append('*'); } } buf.append(CRLF); buf.append(LIFETIME).append(String.valueOf(lifetime)).append(CRLF); return buf.toString(); }\n\n    ### Response: Serializes the parameters into a MyProxy request.\nSubclasses should overwrite this function and\nappend the custom parameters to the output of\nthis function..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void fixElements() { for (Element fosterElement : fosterElements) { // find parent table Element lastTable = findLastTable(fosterElement); Node fosterElementParent = fosterElement.getParentNode(); // filter our foster element Node[] fosterChilds = fosterElement.getChildNodes(); for (Node fosterChild : fosterChilds) { if (fosterChild.getNodeType() == Node.NodeType.ELEMENT) { if (isOneOfTableElements((Element) fosterChild)) { // move all child table elements outside // the foster element fosterChild.detachFromParent(); fosterElementParent.insertBefore(fosterChild, fosterElement); } } } // finally, move foster element above the table fosterElement.detachFromParent(); lastTable.getParentNode().insertBefore(fosterElement, lastTable); } }\n\n    ### Response:", "ground_truth": "Performs the fix for elements.", "predict": "Moves elements from other tables to the table found above this element. It also moves the found element above other tables and fixes its position."}, {"ID": 1209, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function listCollection() { $this->actionListCollection(); $this->setTitleListCollection(); $this->setBreadcrumbListCollection(); $this->setFilterListCollection(); $this->setPagerListCollection(); $this->setData('collections', $this->getListCollection()); $this->setData('handlers', $this->collection->getHandlers()); $this->outputListCollection(); }\n\n    ### Response: Displays the collection overview page.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Map<String, BeanData> registerSessionBeans(final HttpSession httpSession) { SessionBeans sessionBeans = new SessionBeans(); httpSession.setAttribute(SESSION_BEANS_NAME, sessionBeans); return sessionBeans.getBeanMap(); }\n\n    ### Response:", "ground_truth": "Registers new session destroy callback if not already registered.", "predict": "Registers objects in the HTTP session to be accessed by other objects in the application."}, {"ID": 1210, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func contains(slice []string, str string) bool { for _, val := range slice { if val == strings.ToLower(str) { return true } } return false }\n\n    ### Response: // case-insensitive contains helper.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") protected Map<String, BeanData> getSessionMap(final HttpSession session) { SessionBeans sessionBeans = (SessionBeans) session.getAttribute(SESSION_BEANS_NAME); if (sessionBeans == null) { return null; } return sessionBeans.getBeanMap(); }\n\n    ### Response:", "ground_truth": "", "predict": "// reads SessionBeans from Session.\n    // reads SessionBeans from Session to retrieve Map of BeanName to BeanData objects."}, {"ID": 1211, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def push(self, line): \"\"\"Push a line to the interpreter. The line should not have a trailing newline; it may have internal newlines. The line is appended to a buffer and the interpreter's runsource() method is called with the concatenated contents of the buffer as source. If this indicates that the command was executed or invalid, the buffer is reset; otherwise, the command is incomplete, and the buffer is left as it was after the line was appended. The return value is 1 if more input is required, 0 if the line was dealt with in some way (this is the same as runsource()). \"\"\" self.buffer.append(line) source = \"\\n\".join(self.buffer) more = self.runsource(source, self.filename) if not more: self.resetbuffer() return more\n\n    ### Response: Push a line to the interpreter.\n\n        The line should not have a trailing newline; it may have\n        internal newlines.  The line is appended to a buffer and the\n        interpreter's runsource() method is called with the\n        concatenated contents of the buffer as source.  If this\n        indicates that the command was executed or invalid, the buffer\n        is reset; otherwise, the command is incomplete, and the buffer\n        is left as it was after the line was appended.  The return\n        value is 1 if more input is required, 0 if the line was dealt\n        with in some way (this is the same as runsource())..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void init(String name, final String superName, final String suffix, final String reqProxyClassName) { int lastSlash = name.lastIndexOf('/'); this.targetPackage = lastSlash == -1 ? StringPool.EMPTY : name.substring(0, lastSlash).replace('/', '.'); this.targetClassname = name.substring(lastSlash + 1); this.nextSupername = superName; this.superName = name; // create proxy name if (reqProxyClassName != null) { if (reqProxyClassName.startsWith(DOT)) { name = name.substring(0, lastSlash) + '/' + reqProxyClassName.substring(1); } else if (reqProxyClassName.endsWith(DOT)) { name = reqProxyClassName.replace('.', '/') + this.targetClassname; } else { name = reqProxyClassName.replace('.', '/'); } } // add optional suffix if (suffix != null) { name += suffix; } this.thisReference = name; this.superReference = this.superName; }\n\n    ### Response:", "ground_truth": "Work data initialization.", "predict": "Initiates an instance of the given class with the given\n    given name and its superclass name and any given suffix of the\n    name of this instance of the given class and its superclass\n    respectively. It creates an instance of the given class and\n    initializes its state to the given name of this instance of the\n    given class and its superclass and any given suffix of this\n    name and its superclass respectively. It sets the name of this\n    instance of the given class to the given name of this instance of\n    the given class and its superclass and any given suffix of this\n    name and its superclass respectively and sets the name of the\n    superclass of this instance of the given class to the given\n    superclass of this instance of the given class and any given\n    suffix of this superclass of this instance of the given class\n    respectively. Finally, it sets the name of the given superclass\n    of this instance of the given class to the given superclass of\n   "}, {"ID": 1212, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def extract_fasta( partition_file, fasta_file, output_dir, chunk_size=DEFAULT_CHUNK_SIZE, max_cores=DEFAULT_MAX_CORES, ): \"\"\"Extract sequences from bins Identify bins, extract chunks belonging to each bins and gather them in a single FASTA file. Parameters ---------- partition_file : file, str or pathlib.Path The file containing, for each chunk, the communities it was assigned to at each iteration. fasta_file : file, str or pathlib.Path The initial assembly from which chunks were initialized. output_dir : str or pathlib.Path The output directory to write the FASTA chunks into. chunk_size : int, optional The size of the chunks (in bp) used in the pipeline. Default is 1000. max_cores : int, optional How many bins to extract FASTA sequences from. Default is 100. \"\"\" genome = { record.id: record.seq for record in SeqIO.parse(fasta_file, \"fasta\") } data_chunks = list( zip(*np.genfromtxt(partition_file, usecols=(0, 1), dtype=None)) ) chunk_names = np.array(data_chunks[0], dtype=object) cores = np.array(data_chunks[1]) for core in set(cores): if core > max_cores: continue chunks_to_keep = chunk_names[cores == core] core_name = \"core_{}.fa\".format(core) core_file = os.path.join(output_dir, core_name) with open(core_file, \"w\") as core_handle: for name in chunks_to_keep: fields = name.split(\"_\") header_name = \"_\".join(fields[:-1]) chunk = int(fields[-1]) pos_start = chunk * chunk_size pos_end = min( (chunk + 1) * chunk_size, len(genome[header_name]) ) sequence = str(genome[header_name][pos_start:pos_end]) core_handle.write(\">{}\\n\".format(name)) core_handle.write(\"{}\\n\".format(sequence))\n\n    ### Response: Extract sequences from bins\n\n    Identify bins, extract chunks belonging to each bins and gather them\n    in a single FASTA file.\n\n    Parameters\n    ----------\n    partition_file : file, str or pathlib.Path\n        The file containing, for each chunk, the communities it was\n        assigned to at each iteration.\n    fasta_file : file, str or pathlib.Path\n        The initial assembly from which chunks were initialized.\n    output_dir : str or pathlib.Path\n        The output directory to write the FASTA chunks into.\n    chunk_size : int, optional\n        The size of the chunks (in bp) used in the pipeline. Default is 1000.\n    max_cores : int, optional\n        How many bins to extract FASTA sequences from. Default is 100..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void addAdviceInitMethod(final String name) { if (adviceInits == null) { adviceInits = new ArrayList<>(); } adviceInits.add(name); }\n\n    ### Response:", "ground_truth": "Saves used constructors of advices.", "predict": "add AdviceInit objects to an empty list and add objects to the list whenever specified names appear in the input string"}, {"ID": 1213, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function runAsyncBranch (index, currentBranch, options) { var { tree, args, signal, state, promise, start, services } = options; var promises = currentBranch .map(action => { var actionFunc = tree.actions[action.actionIndex]; var actionArgs = createActionArgs(args, action, state, true); var outputs = action.outputs ? Object.keys(action.outputs) : []; action.isExecuting = true; action.args = merge({}, args); var nextActionPromise; var foundResult = signal.asyncActionResults.find((result) => isEqualArrays(result.outputPath, action.path)); // If actions results provided, you run it in replay mode if (foundResult) { nextActionPromise = Promise.resolve(foundResult); } else { var next = createNextAsyncAction(actionFunc, outputs); actionFunc.apply(null, actionArgs.concat(next.fn, services)); nextActionPromise = next.promise; } return nextActionPromise .then(result => { action.hasExecuted = true; action.isExecuting = false; action.output = result.args; // Save short results snippet for replay signal.asyncActionResults.push({ outputPath: action.path, path: result.path, args: result.args }); merge(args, result.args); if (result.path) { action.outputPath = result.path; var output = action.outputs[result.path]; return runBranch(0, { args, signal, state, start, promise, services, tree: { actions: tree.actions, branches: output } }); } }) .catch((e) => promise.reject(e)); }); return Promise.all(promises) .then(() => runBranch(index + 1, options)); }\n\n    ### Response: Run async branch\n@param {Number} index\n@param {Object} currentBranch\n@param {Object} options\n@param {Object} options.tree\n@param {Object} options.args\n@param {Object} options.signal\n@param {Object} options.promise\n@param {Date}   options.start\n@param {Baobab} options.state\n@param {Object} options.services\n@returns {Promise}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void end() { if (newAction) { bundleId = bundlesManager.registerBundle(contextPath, actionPath, bundleId, bundleContentType, sources); } }\n\n    ### Response:", "ground_truth": "Called on end of parsing.", "predict": "Finishes the bundle registration\n@param {Bundle} bundleId\n@param {Path} actionPath\n@param {Bundle} bundleContentType\n@param {Sources} bundleSources\n\nCall start(data) to begin bundle registration\nCall bundleSources(data) to add bundle source\nCall bundlePath(data) to set bundle path\nCall bundleAction(data) to add bundle action\nCall bundleBundle(data) to add bundle bundle\nCall bundleBundle(data) to add bundle bundle\nCall bundleBundle(data) to add bundle bundle\nCall bundleBundle(data) to add bundle bundle\nCall bundleBundle(data) to add bundle bundle\nCall bundleBundle(data) to add bundle bundle\nCall bundleBundle(data) to add bundle bundle\nCall bundleBundle(data) to add bundle bundle\nCall bundleBundle(data) to add bundle bundle\nCall bundleBundle(data) to add bundle bundle\nCall bundleBundle(data) to add bundle bundle\nCall bundleBundle(data) to add bundle"}, {"ID": 1214, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _generateInsertStatement(self, dataset_name, cols): \"\"\"Generates a sql INSERT template\"\"\" col_names = [col[\"varname\"] for col in cols] # Generate question mark placeholders qms = ','.join(['?' for x in col_names]) return 'INSERT INTO %s (%s) values (%s)' % (dataset_name, ','.join(col_names), qms)\n\n    ### Response: Generates a sql INSERT template.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void add( final String section, final String key, final StringBuilder value, final boolean trim, final Operator operator) { // ignore lines without : or = if (key == null) { return; } String fullKey = key; if (section != null) { if (fullKey.length() != 0) { fullKey = section + '.' + fullKey; } else { fullKey = section; } } String v = value.toString(); if (trim) { if (valueTrimLeft && valueTrimRight) { v = v.trim(); } else if (valueTrimLeft) { v = StringUtil.trimLeft(v); } else { v = StringUtil.trimRight(v); } } if (v.length() == 0 && skipEmptyProps) { return; } extractProfilesAndAdd(fullKey, v, operator); }\n\n    ### Response:", "ground_truth": "Adds accumulated value to key and current section.", "predict": "Generates method-level comments for the following java Code. It generates method-level comments for the following java Code: generates an SQL INSERT template and generates method-level comments for the following java Code: ignores lines without : or =; generates an SQL INSERT template; generates method-level comments for the following java Code; generates method-level comments for the following java Code; generates method-level comments for the following java Code; generates method-level comments for the following java Code; generates method-level comments for the following java Code; generates method-level comments for the following java Code; generates method-level comments for the following java Code; generates method-level comments for the following java Code; generates method-level comments for the following java Code; generates method-level comments for the following java Code; generates method-level comments for the following java Code; generates method-level comments for the following java Code; generates method-level comments for the following java Code; generates method-level comments for the following java Code; generates method-level comments for the"}, {"ID": 1215, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function getDateTimeFromTimeuuidString($uuid) { $str = preg_replace(\"/[^a-f0-9]/is\", \"\", $uuid); // delete non hexadecimal if (strlen($str) !== (self::UUID_LENGTH * 2)) { return null; } $bin = pack(\"H*\", $str); if (ord($bin[6]) >> 4 == 1) { // Restore contiguous big-endian byte order $time = bin2hex($bin[6].$bin[7].$bin[4].$bin[5].$bin[0].$bin[1].$bin[2].$bin[3]); // Clear version flag $time[0] = \"0\"; // Do some reverse arithmetic to get a Unix timestamp $time = (hexdec($time) - self::INTERVAL) / 10000000; // in case of bad uuid time can be negative if ($time < 0) { return null; } return \\DateTime::createFromFormat('U', floor($time)); } return null; }\n\n    ### Response: Get a Datetime from a timeuuid string\n\n@param string $uuid\n\n@return \\DateTime|null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void extractProfilesAndAdd(final String key, final String value, final Operator operator) { String fullKey = key; int ndx = fullKey.indexOf(PROFILE_LEFT); if (ndx == -1) { justAdd(fullKey, value, null, operator); return; } // extract profiles ArrayList<String> keyProfiles = new ArrayList<>(); while (true) { ndx = fullKey.indexOf(PROFILE_LEFT); if (ndx == -1) { break; } final int len = fullKey.length(); int ndx2 = fullKey.indexOf(PROFILE_RIGHT, ndx + 1); if (ndx2 == -1) { ndx2 = len; } // remember profile final String profile = fullKey.substring(ndx + 1, ndx2); keyProfiles.add(profile); // extract profile from key ndx2++; final String right = (ndx2 == len) ? StringPool.EMPTY : fullKey.substring(ndx2); fullKey = fullKey.substring(0, ndx) + right; } if (fullKey.startsWith(StringPool.DOT)) { // check for special case when only profile is defined in section fullKey = fullKey.substring(1); } // add value to extracted profiles justAdd(fullKey, value, keyProfiles, operator); }\n\n    ### Response:", "ground_truth": "Extracts profiles from the key name and adds key-value to them.", "predict": "Extract profiles and add values to the profiles"}, {"ID": 1216, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function small($email, $default = null, $rating = null) { return $this->__invoke($email, $this->smallSize, $default, $rating); }\n\n    ### Response: Generate a small size Gravatar URL for a specified email address\n\n@param string $email The email address\n@param string $default The image type or URL when email do not have a Gravatar image\n@param string $rating The image rating\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void justAdd(final String key, final String value, final ArrayList<String> keyProfiles, final Operator operator) { if (operator == Operator.COPY) { HashMap<String,Object> target = new HashMap<>(); String[] profiles = null; if (keyProfiles != null) { profiles = keyProfiles.toArray(new String[0]); } String[] sources = StringUtil.splitc(value, ','); for (String source : sources) { source = source.trim(); // try to extract profile for parsing String[] lookupProfiles = profiles; String lookupProfilesString = null; int leftIndex = source.indexOf('<'); if (leftIndex != -1) { int rightIndex = source.indexOf('>'); lookupProfilesString = source.substring(leftIndex + 1, rightIndex); source = source.substring(0, leftIndex).concat(source.substring(rightIndex + 1)); lookupProfiles = StringUtil.splitc(lookupProfilesString, ','); StringUtil.trimAll(lookupProfiles); } String[] wildcards = new String[] {source + \".*\"}; propsData.extract(target, lookupProfiles, wildcards, null); for (Map.Entry<String, Object> entry : target.entrySet()) { String entryKey = entry.getKey(); String suffix = entryKey.substring(source.length()); String newKey = key + suffix; String newValue = \"${\" + entryKey; if (lookupProfilesString != null) { newValue += \"<\" + lookupProfilesString + \">\"; } newValue += \"}\"; if (profiles == null) { propsData.putBaseProperty(newKey, newValue, false); } else { for (final String p : profiles) { propsData.putProfileProperty(newKey, newValue, p, false); } } } } return; } boolean append = operator == Operator.QUICK_APPEND; if (keyProfiles == null) { propsData.putBaseProperty(key, value, append); return; } for (final String p : keyProfiles) { propsData.putProfileProperty(key, value, p, append); } }\n\n    ### Response:", "ground_truth": "Core key-value addition.", "predict": "\n    Generates a small size Gravatar url for the given email address and sets the default image for the case when there is no Gravatar image for the given email address"}, {"ID": 1217, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Object getFieldValue(final Field field) { Object field_value = AccessController.doPrivileged(new PrivilegedAction<Object>() { @Override public Object run() { try { Object value = field.get(_member); // Don't dump sensitive data boolean sensitive = _member.getClass().isAnnotationPresent(Sensitive.class) || field.isAnnotationPresent(Sensitive.class); if (value != null && sensitive) { value = DataFormatHelper.sensitiveToString(value); } return value; } catch (IllegalAccessException e) { // No FFDC code needed - we're in the middle of FFDC'ing! // Should not happen - if it does return a string :-) return \"/* Could not access \" + field.getName() + \" */\"; } } }); return field_value; }\n\n    ### Response: Return the value of the member's field\n\n@param field\nThe field to be queried\n@return The value of the field.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String typedesc2ClassName(final String desc) { String className = desc; switch (desc.charAt(0)) { case 'B': case 'C': case 'D': case 'F': case 'I': case 'J': case 'S': case 'Z': case 'V': if (desc.length() != 1) { throw new IllegalArgumentException(INVALID_BASE_TYPE + desc); } break; case 'L': className = className.substring(1, className.length() - 1); break; case '[': // uses less-known feature of class loaders for loading array types // using bytecode-like signatures. className = className.replace('/', '.'); break; default: throw new IllegalArgumentException(INVALID_TYPE_DESCRIPTION + desc); } return className; }\n\n    ### Response:", "ground_truth": "Converts bytecode-like description to java class name that can be loaded\nwith a classloader. Uses less-known feature of class loaders for loading\narray classes.\n\n@see #typedescToSignature(String, jodd.mutable.MutableInteger)", "predict": "Describe how to convert an informal type description into its corresponding class name, according to the specified rules\n\nINFORMAL_TYPE_DESCRIPTION - If the first character of the informal type description is an alphanumeric character other than an underscore ('_') or an asterisk ('*')\nINVALID_BASE_TYPE - If the informal type description does not start with an alphanumeric character\nINVALID_TYPE_DESCRIPTION - If the informal type description does not match any of the supported patterns\nINCOMPLETE_TYPE_DESCRIPTION - If the informal type description does not match any of the supported patterns and its length is less than 1"}, {"ID": 1218, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def split_file(path, chunk_size=50000): \"\"\" Splits the specified file into smaller files. \"\"\" with open(path) as f: for i, lines in enumerate(_chunks(f, chunk_size)): file_split = '{}.{}'.format(os.path.basename(path), i) chunk_path = os.path.join('/tmp', file_split) with open(chunk_path, 'w') as f: f.writelines(lines) yield chunk_path\n\n    ### Response: Splits the specified file into smaller files..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String typeref2Name(final String desc) { if (desc.charAt(0) != TYPE_REFERENCE) { throw new IllegalArgumentException(INVALID_TYPE_DESCRIPTION + desc); } String name = desc.substring(1, desc.length() - 1); return name.replace('/', '.'); }\n\n    ### Response:", "ground_truth": "Converts type reference to java-name.", "predict": "This method converts an input string which contains information about an API type to its corresponding human readable name"}, {"ID": 1219, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public StatementGroup findStatementGroup(String propertyIdValue) { if (this.claims.containsKey(propertyIdValue)) { return new StatementGroupImpl(this.claims.get(propertyIdValue)); } return null; }\n\n    ### Response: Find a statement group by its property id, without checking for\nequality with the site IRI. More efficient implementation than\nthe default one..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String typedescToSignature(final String desc, final MutableInteger from) { int fromIndex = from.get(); from.value++; // default usage for most cases switch (desc.charAt(fromIndex)) { case 'B': return \"byte\"; case 'C': return \"char\"; case 'D': return \"double\"; case 'F': return \"float\"; case 'I': return \"int\"; case 'J': return \"long\"; case 'S': return \"short\"; case 'Z': return \"boolean\"; case 'V': return \"void\"; case 'L': int index = desc.indexOf(';', fromIndex); if (index < 0) { throw new IllegalArgumentException(INVALID_TYPE_DESCRIPTION + desc); } from.set(index + 1); String str = desc.substring(fromIndex + 1, index); return str.replace('/', '.'); case 'T': return desc.substring(from.value); case '[': StringBuilder brackets = new StringBuilder(); int n = fromIndex; while (desc.charAt(n) == '[') { // count opening brackets brackets.append(\"[]\"); n++; } from.value = n; String type = typedescToSignature(desc, from); // the rest of the string denotes a `<field_type>' return type + brackets; default: if (from.value == 0) { throw new IllegalArgumentException(INVALID_TYPE_DESCRIPTION + desc); } // generics! return desc.substring(from.value); } }\n\n    ### Response:", "ground_truth": "Returns java-like signature of a bytecode-like description.\nOnly first description is parsed.\n\nThe field signature represents the value of an argument to a function or\nthe value of a variable. It is a series of bytes generated by the\nfollowing grammar:\n\n{@code\n ::= \n      ::= ||\n       ::= B|C|D|F|I|J|S|Z\n     ::= L;\n      ::= [\n\nThe meaning of the base types is as follows:\nB byte signed byte\nC char character\nD double double precision IEEE float\nF float single precision IEEE float\nI int integer\nJ long long integer\nL; ... an object of the given class\nS short signed short\nZ boolean true or false\n[ ... array\n}\n\nThis method converts this string into a Java type declaration such as\nString[].", "predict": "Transform from an informal type description string to its corresponding\nsignature string according to the JDK specification (-d option to javac), e.g.,\n\"integer\" -> int; \"integer array\" -> int[];"}, {"ID": 1220, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def inverse_exp_decay(max_step, min_value=0.01, step=None): \"\"\"Inverse-decay exponentially from 0.01 to 1.0 reached at max_step.\"\"\" inv_base = tf.exp(tf.log(min_value) / float(max_step)) if step is None: step = tf.train.get_global_step() if step is None: return 1.0 step = to_float(step) return inv_base**tf.maximum(float(max_step) - step, 0.0)\n\n    ### Response: Inverse-decay exponentially from 0.01 to 1.0 reached at max_step..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String typeToTyperef(final Class type) { if (!type.isArray()) { if (!type.isPrimitive()) { return 'L' + typeToSignature(type) + ';'; } if (type == int.class) { return \"I\"; } if (type == long.class) { return \"J\"; } if (type == boolean.class) { return \"Z\"; } if (type == double.class) { return \"D\"; } if (type == float.class) { return \"F\"; } if (type == short.class) { return \"S\"; } if (type == void.class) { return \"V\"; } if (type == byte.class) { return \"B\"; } if (type == char.class) { return \"C\"; } } return type.getName(); }\n\n    ### Response:", "ground_truth": "Converts type to byteccode type ref.", "predict": "Pretty prints the given method to generate its method level documentation\n\n    #"}, {"ID": 1221, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function elementAttribute(index, name, value, sanitizer) { if (value !== NO_CHANGE) { var element_1 = loadElement(index); if (value == null) { ngDevMode && ngDevMode.rendererRemoveAttribute++; isProceduralRenderer(renderer) ? renderer.removeAttribute(element_1.native, name) : element_1.native.removeAttribute(name); } else { ngDevMode && ngDevMode.rendererSetAttribute++; var strValue = sanitizer == null ? stringify$1(value) : sanitizer(value); isProceduralRenderer(renderer) ? renderer.setAttribute(element_1.native, name, strValue) : element_1.native.setAttribute(name, strValue); } } }\n\n    ### Response: Updates the value of removes an attribute on an Element.\n\n@param number index The index of the element in the data array\n@param name name The name of the attribute.\n@param value value The attribute is removed when value is `null` or `undefined`.\nOtherwise the attribute value is set to the stringified value.\n@param sanitizer An optional function used to sanitize the value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Consumers<T> addAll(final Consumer<T>... consumers) { Collections.addAll(consumerList, consumers); return this; }\n\n    ### Response:", "ground_truth": "Registers additional consumers.", "predict": "Allows consumers to add values to this consumers collection in bulk by passing in an array of consumers to add to this consumers collection in bulk."}, {"ID": 1222, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getCacheFile($cacheKey) { do_action(\"before_theme_get_cache_file\", $cacheKey); $filename = md5($_SERVER[\"HTTP_HOST\"] . $_SERVER[\"REQUEST_URI\"] . \"-\" . $cacheKey); do_action(\"after_theme_get_cache_file\", $filename); return $this->cachePath . $filename; }\n\n    ### Response: Get absolute path of cache file\n\n@param $cacheKey\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") protected Collection<T> createCollection(final int length) { if (collectionType.isInterface()) { if (collectionType == List.class) { if (length > 0) { return new ArrayList<>(length); } else { return new ArrayList<>(); } } if (collectionType == Set.class) { if (length > 0) { return new HashSet<>(length); } else { return new HashSet<>(); } } throw new TypeConversionException(\"Unknown collection: \" + collectionType.getName()); } if (length > 0) { try { Constructor<Collection<T>> ctor = (Constructor<Collection<T>>) collectionType.getConstructor(int.class); return ctor.newInstance(Integer.valueOf(length)); } catch (Exception ex) { // ignore exception } } try { return collectionType.getDeclaredConstructor().newInstance(); } catch (Exception ex) { throw new TypeConversionException(ex); } }\n\n    ### Response:", "ground_truth": "Creates new collection of target component type.\nDefault implementation uses reflection to create\nan collection of target type. Override it for better performances.", "predict": "Creates Collection with given length of given collectionType"}, {"ID": 1223, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void close() { try { if (is != null) is.close(); } catch (IOException e) { log.error(null, e); throw new RuntimeException(e); } isClosed = true; }\n\n    ### Response: Closes the Workbook manually..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Collection<T> convertToSingleElementCollection(final Object value) { Collection<T> collection = createCollection(0); //noinspection unchecked collection.add((T) value); return collection; }\n\n    ### Response:", "ground_truth": "Creates a collection with single element.", "predict": "Creates and returns a Collection with the given single Element and populates this Collection with the given Element (value)"}, {"ID": 1224, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function mail($from) { if ($this->_sess !== true) { /** * @see Zend_Mail_Protocol_Exception */ // require_once 'Zend/Mail/Protocol/Exception.php'; throw new Zend_Mail_Protocol_Exception('A valid session has not been started'); } $this->_send('MAIL FROM:<' . $from . '>'); $this->_expect(250, 300); // Timeout set for 5 minutes as per RFC 2821 4.5.3.2 // Set mail to true, clear recipients and any existing data flags as per 4.1.1.2 of RFC 2821 $this->_mail = true; $this->_rcpt = false; $this->_data = false; }\n\n    ### Response: Issues MAIL command\n\n@param  string $from Sender mailbox\n@throws Zend_Mail_Protocol_Exception\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Collection<T> convertValueToCollection(Object value) { if (value instanceof Iterable) { Iterable iterable = (Iterable) value; Collection<T> collection = createCollection(0); for (Object element : iterable) { collection.add(convertType(element)); } return collection; } if (value instanceof CharSequence) { value = CsvUtil.toStringArray(value.toString()); } Class type = value.getClass(); if (type.isArray()) { // convert arrays Class componentType = type.getComponentType(); if (componentType.isPrimitive()) { return convertPrimitiveArrayToCollection(value, componentType); } else { Object[] array = (Object[]) value; Collection<T> result = createCollection(array.length); for (Object a : array) { result.add(convertType(a)); } return result; } } // everything else: return convertToSingleElementCollection(value); }\n\n    ### Response:", "ground_truth": "Converts non-collection value to collection.", "predict": "Creates a Collection with values returned by convertType for each Element of the given Value and populates the Collection with values returned by convertType for each Element of the Value"}, {"ID": 1225, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def describe_autocomplete(self, service, operation, param): \"\"\"Describe operation and args needed for server side completion. :type service: str :param service: The AWS service name. :type operation: str :param operation: The AWS operation name. :type param: str :param param: The name of the parameter being completed. This must match the casing in the service model (e.g. InstanceIds, not --instance-ids). :rtype: ServerCompletion :return: A ServerCompletion object that describes what API call to make in order to complete the response. \"\"\" service_index = self._index[service] LOG.debug(service_index) if param not in service_index.get('operations', {}).get(operation, {}): LOG.debug(\"param not in index: %s\", param) return None p = service_index['operations'][operation][param] resource_name = p['resourceName'] resource_identifier = p['resourceIdentifier'] resource_index = service_index['resources'][resource_name] completion_operation = resource_index['operation'] path = resource_index['resourceIdentifier'][resource_identifier] return ServerCompletion(service=service, operation=completion_operation, params={}, path=path)\n\n    ### Response: Describe operation and args needed for server side completion.\n\n        :type service: str\n        :param service: The AWS service name.\n\n        :type operation: str\n        :param operation: The AWS operation name.\n\n        :type param: str\n        :param param: The name of the parameter being completed.  This must\n            match the casing in the service model (e.g. InstanceIds, not\n            --instance-ids).\n\n        :rtype: ServerCompletion\n        :return: A ServerCompletion object that describes what API call to make\n            in order to complete the response..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Collection<T> convertCollectionToCollection(final Collection value) { Collection<T> collection = createCollection(value.size()); for (Object v : value) { collection.add(convertType(v)); } return collection; }\n\n    ### Response:", "ground_truth": "Converts collection value to target collection.\nEach element is converted to target component type.", "predict": "\n    Defines a method to convert objects in the given collection to objects of type <classname>. The objects in the given collection must be of the same size as objects in the returned collection; otherwise, the returned objects may be partially populated or empty when the objects in the given collection are malformed or mis-indexed in the collection to be converted to objects of type <classname>."}, {"ID": 1226, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def sortino_ratio(self, threshold=0.0, ddof=0, freq=None): \"\"\"Return over a threshold per unit of downside deviation. A performance appraisal ratio that replaces standard deviation in the Sharpe ratio with downside deviation. [Source: CFA Institute] Parameters ---------- threshold : {float, TSeries, pd.Series}, default 0. While zero is the default, it is also customary to use a \"minimum acceptable return\" (MAR) or a risk-free rate. Note: this is assumed to be a *periodic*, not necessarily annualized, return. ddof : int, default 0 Degrees of freedom, passed to pd.Series.std(). freq : str or None, default None A frequency string used to create an annualization factor. If None, `self.freq` will be used. If that is also None, a frequency will be inferred. If none can be inferred, an exception is raised. It may be any frequency string or anchored offset string recognized by Pandas, such as 'D', '5D', 'Q', 'Q-DEC', or 'BQS-APR'. Returns ------- float \"\"\" stdev = self.semi_stdev(threshold=threshold, ddof=ddof, freq=freq) return (self.anlzd_ret() - threshold) / stdev\n\n    ### Response: Return over a threshold per unit of downside deviation.\n\n        A performance appraisal ratio that replaces standard deviation\n        in the Sharpe ratio with downside deviation.\n        [Source: CFA Institute]\n\n        Parameters\n        ----------\n        threshold : {float, TSeries, pd.Series}, default 0.\n            While zero is the default, it is also customary to use\n            a \"minimum acceptable return\" (MAR) or a risk-free rate.\n            Note: this is assumed to be a *periodic*, not necessarily\n            annualized, return.\n        ddof : int, default 0\n            Degrees of freedom, passed to pd.Series.std().\n        freq : str or None, default None\n            A frequency string used to create an annualization factor.\n            If None, `self.freq` will be used.  If that is also None,\n            a frequency will be inferred.  If none can be inferred,\n            an exception is raised.\n\n            It may be any frequency string or anchored offset string\n            recognized by Pandas, such as 'D', '5D', 'Q', 'Q-DEC', or\n            'BQS-APR'.\n\n        Returns\n        -------\n        float.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"AutoBoxing\") protected Collection<T> convertPrimitiveArrayToCollection(final Object value, final Class primitiveComponentType) { Collection<T> result = null; if (primitiveComponentType == int.class) { int[] array = (int[]) value; result = createCollection(array.length); for (int a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == long.class) { long[] array = (long[]) value; result = createCollection(array.length); for (long a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == float.class) { float[] array = (float[]) value; result = createCollection(array.length); for (float a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == double.class) { double[] array = (double[]) value; result = createCollection(array.length); for (double a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == short.class) { short[] array = (short[]) value; result = createCollection(array.length); for (short a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == byte.class) { byte[] array = (byte[]) value; result = createCollection(array.length); for (byte a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == char.class) { char[] array = (char[]) value; result = createCollection(array.length); for (char a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == boolean.class) { boolean[] array = (boolean[]) value; result = createCollection(array.length); for (boolean a : array) { result.add(convertType(a)); } } return result; }\n\n    ### Response:", "ground_truth": "Converts primitive array to target collection.", "predict": "\n    @SuppressWarnings(\"AutoBoxing\")\n    protected Collection<T> convertPrimitiveArrayToCollection(Object[] valuesAndTypes, Class componentType) {\n        Collection<T> result = null; // initialize to null since there may be none\n        int len = valuesAndTypes.length; // lengths of arrays vary\n        for (int i = 0; i < len; i++) { // iterate over arrays\n            int componentType; // variable to hold componentType for different arrays\n            int componentCount; // variable to hold number of objects in corresponding array\n            int j; // variable to iterate over objects in corresponding arrays\n            int k; // variable to iterate over objects in corresponding arrays\n            int l; // variable to iterate over objects in corresponding arrays\n            \n            switch (i) {\n                case 0:\n                    componentType = int.class;\n                    break;\n                case 1:\n                    componentType = int.class;\n                   "}, {"ID": 1227, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function names() { $camelCase = ucfirst(Str::camel($this->name)); $this->route = strtolower($camelCase); $this->path = strtolower($camelCase); $this->resource = strtolower($camelCase); $this->model = strtolower($camelCase); }\n\n    ### Response: Generate names for the views.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final void addLineNumber(final int lineNumber) { if (this.lineNumber == 0) { this.lineNumber = (short) lineNumber; } else { if (otherLineNumbers == null) { otherLineNumbers = new int[LINE_NUMBERS_CAPACITY_INCREMENT]; } int otherLineNumberIndex = ++otherLineNumbers[0]; if (otherLineNumberIndex >= otherLineNumbers.length) { int[] newLineNumbers = new int[otherLineNumbers.length + LINE_NUMBERS_CAPACITY_INCREMENT]; System.arraycopy(otherLineNumbers, 0, newLineNumbers, 0, otherLineNumbers.length); otherLineNumbers = newLineNumbers; } otherLineNumbers[otherLineNumberIndex] = lineNumber; } }\n\n    ### Response:", "ground_truth": "Adds a source line number corresponding to this label.\n\n@param lineNumber a source line number (which should be strictly positive).", "predict": "Generates names for the views"}, {"ID": 1228, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def create_agency(self): \"\"\"Create an agency text file of definitions.\"\"\" agency = self.agency links = self.find_table_links() definition_dict = self.find_definition_urls(links) with open(agency + '.txt', 'w') as f: f.write(str(definition_dict))\n\n    ### Response: Create an agency text file of definitions..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final void accept(final MethodVisitor methodVisitor, final boolean visitLineNumbers) { methodVisitor.visitLabel(this); if (visitLineNumbers && lineNumber != 0) { methodVisitor.visitLineNumber(lineNumber & 0xFFFF, this); if (otherLineNumbers != null) { for (int i = 1; i <= otherLineNumbers[0]; ++i) { methodVisitor.visitLineNumber(otherLineNumbers[i], this); } } } }\n\n    ### Response:", "ground_truth": "Makes the given visitor visit this label and its source line numbers, if applicable.\n\n@param methodVisitor a method visitor.\n@param visitLineNumbers whether to visit of the label's source line numbers, if any.", "predict": "Accept the given method and its arguments..\n    Accept the given method and its arguments..\n    If visitLineNumbers and lineNumber is nonzero,\n    visit the given line number of this method\n    and the otherLineNumbers array of the other method\n    You may supply an array of otherLineNumbers to\n    visit the corresponding other method line numbers\n    You may supply an array of otherLineNumbers to\n    visit corresponding other method"}, {"ID": 1229, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function validateCode($code, $initKey = null, $timestamp = null, $range = null) { if (strlen($code) !== $this->getCodeLength()) { throw new \\InvalidArgumentException('Incorrect code length'); } $range = ($range == null) ? $this->getRange() : $range; $timestamp = ($timestamp == null) ? $this->generateTimestamp() : $timestamp; $initKey = ($initKey == null) ? $this->getInitKey() : $initKey; $binary = $this->base32_decode($initKey); for ($time = ($timestamp - $range); $time <= ($timestamp + $range); $time++) { if ($this->generateOneTime($binary, $time) == $code) { return true; } } return false; }\n\n    ### Response: Validate the given code\n\n@param string $code Code entered by user\n@param string $initKey Initialization key\n@param string $timestamp Timestamp for calculation\n@param integer $range Seconds before/after to validate hash against\n@throws \\InvalidArgumentException If incorrect code length\n@return boolean Pass/fail of validation.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final void put( final ByteVector code, final int sourceInsnBytecodeOffset, final boolean wideReference) { if ((flags & FLAG_RESOLVED) == 0) { if (wideReference) { addForwardReference(sourceInsnBytecodeOffset, FORWARD_REFERENCE_TYPE_WIDE, code.length); code.putInt(-1); } else { addForwardReference(sourceInsnBytecodeOffset, FORWARD_REFERENCE_TYPE_SHORT, code.length); code.putShort(-1); } } else { if (wideReference) { code.putInt(bytecodeOffset - sourceInsnBytecodeOffset); } else { code.putShort(bytecodeOffset - sourceInsnBytecodeOffset); } } }\n\n    ### Response:", "ground_truth": "Puts a reference to this label in the bytecode of a method. If the bytecode offset of the label\nis known, the relative bytecode offset between the label and the instruction referencing it is\ncomputed and written directly. Otherwise, a null relative offset is written and a new forward\nreference is declared for this label.\n\n@param code the bytecode of the method. This is where the reference is appended.\n@param sourceInsnBytecodeOffset the bytecode offset of the instruction that contains the\nreference to be appended.\n@param wideReference whether the reference must be stored in 4 bytes (instead of 2 bytes).", "predict": "Store the given code into the given ByteVector"}, {"ID": 1230, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def is_valid_ip(ip: str) -> bool: \"\"\"Returns ``True`` if the given string is a well-formed IP address. Supports IPv4 and IPv6. \"\"\" if not ip or \"\\x00\" in ip: # getaddrinfo resolves empty strings to localhost, and truncates # on zero bytes. return False try: res = socket.getaddrinfo( ip, 0, socket.AF_UNSPEC, socket.SOCK_STREAM, 0, socket.AI_NUMERICHOST ) return bool(res) except socket.gaierror as e: if e.args[0] == socket.EAI_NONAME: return False raise return True\n\n    ### Response: Returns ``True`` if the given string is a well-formed IP address.\n\n    Supports IPv4 and IPv6..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addForwardReference( final int sourceInsnBytecodeOffset, final int referenceType, final int referenceHandle) { if (forwardReferences == null) { forwardReferences = new int[FORWARD_REFERENCES_CAPACITY_INCREMENT]; } int lastElementIndex = forwardReferences[0]; if (lastElementIndex + 2 >= forwardReferences.length) { int[] newValues = new int[forwardReferences.length + FORWARD_REFERENCES_CAPACITY_INCREMENT]; System.arraycopy(forwardReferences, 0, newValues, 0, forwardReferences.length); forwardReferences = newValues; } forwardReferences[++lastElementIndex] = sourceInsnBytecodeOffset; forwardReferences[++lastElementIndex] = referenceType | referenceHandle; forwardReferences[0] = lastElementIndex; }\n\n    ### Response:", "ground_truth": "Adds a forward reference to this label. This method must be called only for a true forward\nreference, i.e. only if this label is not resolved yet. For backward references, the relative\nbytecode offset of the reference can be, and must be, computed and stored directly.\n\n@param sourceInsnBytecodeOffset the bytecode offset of the instruction that contains the\nreference stored at referenceHandle.\n@param referenceType either {@link #FORWARD_REFERENCE_TYPE_SHORT} or {@link\n#FORWARD_REFERENCE_TYPE_WIDE}.\n@param referenceHandle the offset in the bytecode where the forward reference value must be\nstored.", "predict": "Prevents unnecessary allocations by keeping track of the number of references added to the Stack frame of the program.<BR /> Prevents unnecessary allocations by keeping track of the number of references added to the Stack frame of the program.<BR /> Prevents unnecessary allocations by keeping track of the number of references added to the Stack frame of the program.<BR /> Prevents unnecessary allocations by keeping track of the number of references added to the Stack frame of the program.<BR /> Prevents unnecessary allocations by keeping track of the number of references added to the Stack frame of the program.<BR /> Prevents unnecessary allocations by keeping track of the number of references added to the Stack frame of the program.<BR /> Prevents unnecessary allocations by keeping track of the number of references added to the Stack frame of the program.<BR /> Prevents unnecessary allocations by keeping track of the number of references added to the Stack frame of the program.<BR /> Prevents unnecessary allocations by keeping track of the number of references added to"}, {"ID": 1231, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def create_redis_client(self): \"\"\"Create a redis client.\"\"\" return ray.services.create_redis_client( self._redis_address, self._ray_params.redis_password)\n\n    ### Response: Create a redis client..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final boolean resolve(final byte[] code, final int bytecodeOffset) { this.flags |= FLAG_RESOLVED; this.bytecodeOffset = bytecodeOffset; if (forwardReferences == null) { return false; } boolean hasAsmInstructions = false; for (int i = forwardReferences[0]; i > 0; i -= 2) { final int sourceInsnBytecodeOffset = forwardReferences[i - 1]; final int reference = forwardReferences[i]; final int relativeOffset = bytecodeOffset - sourceInsnBytecodeOffset; int handle = reference & FORWARD_REFERENCE_HANDLE_MASK; if ((reference & FORWARD_REFERENCE_TYPE_MASK) == FORWARD_REFERENCE_TYPE_SHORT) { if (relativeOffset < Short.MIN_VALUE || relativeOffset > Short.MAX_VALUE) { // Change the opcode of the jump instruction, in order to be able to find it later in // ClassReader. These ASM specific opcodes are similar to jump instruction opcodes, except // that the 2 bytes offset is unsigned (and can therefore represent values from 0 to // 65535, which is sufficient since the size of a method is limited to 65535 bytes). int opcode = code[sourceInsnBytecodeOffset] & 0xFF; if (opcode < Opcodes.IFNULL) { // Change IFEQ ... JSR to ASM_IFEQ ... ASM_JSR. code[sourceInsnBytecodeOffset] = (byte) (opcode + Constants.ASM_OPCODE_DELTA); } else { // Change IFNULL and IFNONNULL to ASM_IFNULL and ASM_IFNONNULL. code[sourceInsnBytecodeOffset] = (byte) (opcode + Constants.ASM_IFNULL_OPCODE_DELTA); } hasAsmInstructions = true; } code[handle++] = (byte) (relativeOffset >>> 8); code[handle] = (byte) relativeOffset; } else { code[handle++] = (byte) (relativeOffset >>> 24); code[handle++] = (byte) (relativeOffset >>> 16); code[handle++] = (byte) (relativeOffset >>> 8); code[handle] = (byte) relativeOffset; } } return hasAsmInstructions; }\n\n    ### Response:", "ground_truth": "Sets the bytecode offset of this label to the given value and resolves the forward references\nto this label, if any. This method must be called when this label is added to the bytecode of\nthe method, i.e. when its bytecode offset becomes known. This method fills in the blanks that\nwhere left in the bytecode by each forward reference previously added to this label.\n\n@param code the bytecode of the method.\n@param bytecodeOffset the bytecode offset of this label.\n@return {@literal true} if a blank that was left for this label was too small to store the\noffset. In such a case the corresponding jump instruction is replaced with an equivalent\nASM specific instruction using an unsigned two bytes offset. These ASM specific\ninstructions are later replaced with standard bytecode instructions with wider offsets (4\nbytes instead of 2), in ClassReader.", "predict": "The method resolves a given set of bytes (typically instructions or op codes) to their proper addresses in the compiled program. It resolves relative references to other bytes or addresses in the program by consulting a Forward Reference Table stored in the program code. It also resolves jump instruction addresses to actual addresses of jump destinations in the program code. It handles various types of references, such as short and int references, and various types of jump destinations, such as local jump destinations and jump destinations across function or method invocations, to ensure proper resolution of references regardless of type or destination."}, {"ID": 1232, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static VoltType getNumericLiteralType(VoltType vt, String value) { try { Long.parseLong(value); } catch (NumberFormatException e) { // Our DECIMAL may not be bigger/smaller enough to store the constant value return VoltType.DECIMAL; } return vt; }\n\n    ### Response: If the type is NUMERIC from hsqldb, VoltDB has to decide its real type.\nIt's either INTEGER or DECIMAL according to the SQL Standard.\nThanks for Hsqldb 1.9, FLOAT literal values have been handled well with E sign.\n@param vt\n@param value\n@return.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final void markSubroutine(final short subroutineId) { // Data flow algorithm: put this basic block in a list of blocks to process (which are blocks // belonging to subroutine subroutineId) and, while there are blocks to process, remove one from // the list, mark it as belonging to the subroutine, and add its successor basic blocks in the // control flow graph to the list of blocks to process (if not already done). Label listOfBlocksToProcess = this; listOfBlocksToProcess.nextListElement = EMPTY_LIST; while (listOfBlocksToProcess != EMPTY_LIST) { // Remove a basic block from the list of blocks to process. Label basicBlock = listOfBlocksToProcess; listOfBlocksToProcess = listOfBlocksToProcess.nextListElement; basicBlock.nextListElement = null; // If it is not already marked as belonging to a subroutine, mark it as belonging to // subroutineId and add its successors to the list of blocks to process (unless already done). if (basicBlock.subroutineId == 0) { basicBlock.subroutineId = subroutineId; listOfBlocksToProcess = basicBlock.pushSuccessors(listOfBlocksToProcess); } } }\n\n    ### Response:", "ground_truth": "Finds the basic blocks that belong to the subroutine starting with the basic block\ncorresponding to this label, and marks these blocks as belonging to this subroutine. This\nmethod follows the control flow graph to find all the blocks that are reachable from the\ncurrent basic block WITHOUT following any jsr target.\n\nNote: a precondition and postcondition of this method is that all labels must have a null\n{@link #nextListElement}.\n\n@param subroutineId the id of the subroutine starting with the basic block corresponding to\nthis label.", "predict": "The above method declares a subroutine called markSubroutine to mark the blocks of the program which belong to the given subroutine (identified by the parameter,subroutineId ). It scans through the program to mark these blocks and add the successors of these blocks to the list of blocks to process (which contains the blocks of the program which are not yet marked and processed and which are not the immediate succeeding blocks of the given blocks to be marked and processed ). It scans and processes the blocks of the program sequentially until there is no blocks to process left in the list of blocks to process. It keeps track of the blocks of the program which belong to the givensubroutine and its successors in the list of blocks to process to be able to mark and process these blocks next during the next iteration of the loop. It makes sure that the blocks of the givensubroutine and its immediate succeeding blocks of the given blocks to be marked and processed are marked and processed first to avoid unnecessary jumping of the program control to"}, {"ID": 1233, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (acc *Accumulator) RandomData(n uint) []byte { seed := acc.tryReseeding() acc.genMutex.Lock() defer acc.genMutex.Unlock() if seed != nil { acc.gen.Reseed(seed) } return acc.gen.PseudoRandomData(n) }\n\n    ### Response: // RandomData returns a slice of n random bytes.  The result can be\n// used as a replacement for a sequence of uniformly distributed and\n// independent bytes, and will be difficult to guess for an attacker..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final void addSubroutineRetSuccessors(final Label subroutineCaller) { // Data flow algorithm: put this basic block in a list blocks to process (which are blocks // belonging to a subroutine starting with this label) and, while there are blocks to process, // remove one from the list, put it in a list of blocks that have been processed, add a return // edge to the successor of subroutineCaller if applicable, and add its successor basic blocks // in the control flow graph to the list of blocks to process (if not already done). Label listOfProcessedBlocks = EMPTY_LIST; Label listOfBlocksToProcess = this; listOfBlocksToProcess.nextListElement = EMPTY_LIST; while (listOfBlocksToProcess != EMPTY_LIST) { // Move a basic block from the list of blocks to process to the list of processed blocks. Label basicBlock = listOfBlocksToProcess; listOfBlocksToProcess = basicBlock.nextListElement; basicBlock.nextListElement = listOfProcessedBlocks; listOfProcessedBlocks = basicBlock; // Add an edge from this block to the successor of the caller basic block, if this block is // the end of a subroutine and if this block and subroutineCaller do not belong to the same // subroutine. if ((basicBlock.flags & FLAG_SUBROUTINE_END) != 0 && basicBlock.subroutineId != subroutineCaller.subroutineId) { basicBlock.outgoingEdges = new Edge( basicBlock.outputStackSize, // By construction, the first outgoing edge of a basic block that ends with a jsr // instruction leads to the jsr continuation block, i.e. where execution continues // when ret is called (see {@link #FLAG_SUBROUTINE_CALLER}). subroutineCaller.outgoingEdges.successor, basicBlock.outgoingEdges); } // Add its successors to the list of blocks to process. Note that {@link #pushSuccessors} does // not push basic blocks which are already in a list. Here this means either in the list of // blocks to process, or in the list of already processed blocks. This second list is // important to make sure we don't reprocess an already processed block. listOfBlocksToProcess = basicBlock.pushSuccessors(listOfBlocksToProcess); } // Reset the {@link #nextListElement} of all the basic blocks that have been processed to null, // so that this method can be called again with a different subroutine or subroutine caller. while (listOfProcessedBlocks != EMPTY_LIST) { Label newListOfProcessedBlocks = listOfProcessedBlocks.nextListElement; listOfProcessedBlocks.nextListElement = null; listOfProcessedBlocks = newListOfProcessedBlocks; } }\n\n    ### Response:", "ground_truth": "Finds the basic blocks that end a subroutine starting with the basic block corresponding to\nthis label and, for each one of them, adds an outgoing edge to the basic block following the\ngiven subroutine call. In other words, completes the control flow graph by adding the edges\ncorresponding to the return from this subroutine, when called from the given caller basic\nblock.\n\nNote: a precondition and postcondition of this method is that all labels must have a null\n{@link #nextListElement}.\n\n@param subroutineCaller a basic block that ends with a jsr to the basic block corresponding to\nthis label. This label is supposed to correspond to the start of a subroutine.", "predict": "The above method generates a random sequence of bytes which are difficult to guess for an attacker because it uses random data generated from the system's RNG (Read Only Memory) instead of using artificial distribution of values to produce the random data.. It resequences the generated random data to produce a random data set with a specific length of n bytes to be used in place of a true random data set of that length.. It resequences the generated random data to produce a random data set with a specific length of n bytes to be used in place of a true random data set of that length.. It resequences the generated random data to produce a random data set with a specific length of n bytes to be used in place of a true random data set of that length.. It resequences the generated random data to produce a random data set with a specific length of n bytes to be used in place of a true random data set of that length.. It resequences the generated random data to produce a random data set with a specific length of n bytes to be"}, {"ID": 1234, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(id) { var q = queues[id]; q.finished = true; if (q.aborted) { var msg = \"transaction \" + id + \" was aborted\"; _fail(id, msg); return; } // execute success callback if (q.onSuccess) { var sc=q.scope || q.win; q.onSuccess.call(sc, _returnData(q)); } }\n\n    ### Response: The request is complete, so executing the requester's callback\n@method _finish\n@param id {string} the id of the request\n@private.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected int[] compareDigits(final String str1, int ndx1, final String str2, int ndx2) { // iterate all digits in the first string int zeroCount1 = 0; while (charAt(str1, ndx1) == '0') { zeroCount1++; ndx1++; } int len1 = 0; while (true) { final char char1 = charAt(str1, ndx1); final boolean isDigitChar1 = CharUtil.isDigit(char1); if (!isDigitChar1) { break; } len1++; ndx1++; } // iterate all digits in the second string and compare with the first int zeroCount2 = 0; while (charAt(str2, ndx2) == '0') { zeroCount2++; ndx2++; } int len2 = 0; int ndx1_new = ndx1 - len1; int equalNumbers = 0; while (true) { final char char2 = charAt(str2, ndx2); final boolean isDigitChar2 = CharUtil.isDigit(char2); if (!isDigitChar2) { break; } if (equalNumbers == 0 && (ndx1_new < ndx1)) { equalNumbers = charAt(str1, ndx1_new++) - char2; } len2++; ndx2++; } // compare if (len1 != len2) { // numbers are not equals size return new int[] {len1 - len2}; } if (equalNumbers != 0) { return new int[] {equalNumbers}; } // numbers are equal, but number of zeros is different return new int[] {0, zeroCount1 - zeroCount2, ndx1, ndx2}; }\n\n    ### Response:", "ground_truth": "Compare digits at certain position in two strings.\nThe longest run of digits wins. That aside, the greatest\nvalue wins.\n@return if numbers are different, only 1 element is returned.", "predict": "The function iterates over the first string to locate the first number and then over the second string to compare the corresponding digits of the numbers and returns the result of the comparison"}, {"ID": 1235, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def tidy(args): \"\"\" %prog tidy fastafile Trim terminal Ns, normalize gap sizes and remove small components. \"\"\" p = OptionParser(tidy.__doc__) p.add_option(\"--gapsize\", dest=\"gapsize\", default=0, type=\"int\", help=\"Set all gaps to the same size [default: %default]\") p.add_option(\"--minlen\", dest=\"minlen\", default=100, type=\"int\", help=\"Minimum component size [default: %default]\") opts, args = p.parse_args(args) if len(args) != 1: sys.exit(not p.print_help()) fastafile, = args gapsize = opts.gapsize minlen = opts.minlen tidyfastafile = fastafile.rsplit(\".\", 1)[0] + \".tidy.fasta\" fw = must_open(tidyfastafile, \"w\") removed = normalized = 0 fasta = Fasta(fastafile, lazy=True) for name, rec in fasta.iteritems_ordered(): rec.seq = rec.seq.upper() if minlen: removed += remove_small_components(rec, minlen) trim_terminal_Ns(rec) if gapsize: normalized += normalize_gaps(rec, gapsize) if len(rec) == 0: logging.debug(\"Drop seq {0}\".format(rec.id)) continue SeqIO.write([rec], fw, \"fasta\") # Print statistics if removed: logging.debug(\"Total discarded bases: {0}\".format(removed)) if normalized: logging.debug(\"Gaps normalized: {0}\".format(normalized)) logging.debug(\"Tidy FASTA written to `{0}`.\".format(tidyfastafile)) fw.close() return tidyfastafile\n\n    ### Response: %prog tidy fastafile\n\n    Trim terminal Ns, normalize gap sizes and remove small components..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private char fixAccent(final char c) { for (int i = 0; i < ACCENT_CHARS.length; i+=2) { final char accentChar = ACCENT_CHARS[i]; if (accentChar == c) { return ACCENT_CHARS[i + 1]; } } return c; }\n\n    ### Response:", "ground_truth": "Fixes accent char.", "predict": "The function fixes non-canonical UTF characters (accented Latin, Greek, Cyrillic, etc.) in the input string by replacing the first occurrence of the character with an equivalent, unaccented Latin character of the same code point, or replacing the first and second occurrences of the character with an equivalent unaccented Latin character of the first code point plus the code point of the second occurrence of the character (or the first code point plus the code point of the first occurrence of the character if there is no second occurrence of the character in the string)."}, {"ID": 1236, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def make_body(content) key = content.respond_to?(:read) ? :body_stream : :body value = content.is_a?(Hash) ? content.to_json : content { key => value } end\n\n    ### Response: Create a hash with body content based on the type of `content`.\n @param content [Hash,#read,Object] Some kind of content to put into\n   the request body. Can be a Hash, stream object, or other kind of\n   object.\n @return [Hash{Symbol => Object}] A hash with the relevant body key\n   and value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ByteVector putByte(final int byteValue) { int currentLength = length; if (currentLength + 1 > data.length) { enlarge(1); } data[currentLength++] = (byte) byteValue; length = currentLength; return this; }\n\n    ### Response:", "ground_truth": "Puts a byte into this byte vector. The byte vector is automatically enlarged if necessary.\n\n@param byteValue a byte.\n@return this byte vector.", "predict": "Increment length by 1, add the int to data and\n   enlarge to accomodate it, then return this."}, {"ID": 1237, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (sub *subState) deleteFromList(sl []*subState) ([]*subState, bool) { for i := 0; i < len(sl); i++ { if sl[i] == sub { sl[i] = sl[len(sl)-1] sl[len(sl)-1] = nil sl = sl[:len(sl)-1] return shrinkSubListIfNeeded(sl), true } } return sl, false }\n\n    ### Response: // Delete a sub from a given list..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final ByteVector put11(final int byteValue1, final int byteValue2) { int currentLength = length; if (currentLength + 2 > data.length) { enlarge(2); } byte[] currentData = data; currentData[currentLength++] = (byte) byteValue1; currentData[currentLength++] = (byte) byteValue2; length = currentLength; return this; }\n\n    ### Response:", "ground_truth": "Puts two bytes into this byte vector. The byte vector is automatically enlarged if necessary.\n\n@param byteValue1 a byte.\n@param byteValue2 another byte.\n@return this byte vector.", "predict": "// Put an int and int into an already allocated ByteVector"}, {"ID": 1238, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Tag getControllerTag(Class<? extends Controller> controllerClass) { if (controllerClass.isAnnotationPresent(ApiOperations.class)) { ApiOperations annotation = controllerClass.getAnnotation(ApiOperations.class); io.swagger.models.Tag tag = new io.swagger.models.Tag(); tag.setName(Optional.fromNullable(Strings.emptyToNull(annotation.tag())).or(controllerClass.getSimpleName())); tag.setDescription(translate(annotation.descriptionKey(), annotation.description())); if (!Strings.isNullOrEmpty(annotation.externalDocs())) { ExternalDocs docs = new ExternalDocs(); docs.setUrl(annotation.externalDocs()); tag.setExternalDocs(docs); } if (!Strings.isNullOrEmpty(tag.getDescription())) { return tag; } } return null; }\n\n    ### Response: Returns the Tag for a controller.\n\n@param controllerClass\n@return a controller tag or null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ByteVector putShort(final int shortValue) { int currentLength = length; if (currentLength + 2 > data.length) { enlarge(2); } byte[] currentData = data; currentData[currentLength++] = (byte) (shortValue >>> 8); currentData[currentLength++] = (byte) shortValue; length = currentLength; return this; }\n\n    ### Response:", "ground_truth": "Puts a short into this byte vector. The byte vector is automatically enlarged if necessary.\n\n@param shortValue a short.\n@return this byte vector.", "predict": "Increment length by 2, store int shortValue in bytes 0 and 1 of returned ByteVector and returns this."}, {"ID": 1239, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def on_view_change_complete(self): \"\"\" View change completes for a replica when it has been decided which was the last ppSeqNo and state and txn root for previous view \"\"\" self.future_primaries_handler.set_node_state() if not self.replicas.all_instances_have_primary: raise LogicError( \"{} Not all replicas have \" \"primaries: {}\".format(self, self.replicas.primary_name_by_inst_id) ) self._cancel(self._check_view_change_completed) for replica in self.replicas.values(): replica.on_view_change_done() self.view_changer.last_completed_view_no = self.view_changer.view_no # Remove already ordered requests from requests list after view change # If view change happen when one half of nodes ordered on master # instance and backup but other only on master then we need to clear # requests list. We do this to stop transactions ordering on backup # replicas that have already been ordered on master. # Test for this case in plenum/test/view_change/ # test_no_propagate_request_on_different_last_ordered_before_vc.py for replica in self.replicas.values(): replica.clear_requests_and_fix_last_ordered() self.monitor.reset()\n\n    ### Response: View change completes for a replica when it has been decided which was\n        the last ppSeqNo and state and txn root for previous view.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final ByteVector put12(final int byteValue, final int shortValue) { int currentLength = length; if (currentLength + 3 > data.length) { enlarge(3); } byte[] currentData = data; currentData[currentLength++] = (byte) byteValue; currentData[currentLength++] = (byte) (shortValue >>> 8); currentData[currentLength++] = (byte) shortValue; length = currentLength; return this; }\n\n    ### Response:", "ground_truth": "Puts a byte and a short into this byte vector. The byte vector is automatically enlarged if\nnecessary.\n\n@param byteValue a byte.\n@param shortValue a short.\n@return this byte vector.", "predict": "Final ByteVector put12() method appends int and int values to ByteVector data and returns this updated ByteVector object"}, {"ID": 1240, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    HashMap readFormat6() throws IOException { HashMap h = new HashMap(); rf.skipBytes(4); int start_code = rf.readUnsignedShort(); int code_count = rf.readUnsignedShort(); for (int k = 0; k < code_count; ++k) { int r[] = new int[2]; r[0] = rf.readUnsignedShort(); r[1] = getGlyphWidth(r[0]); h.put(Integer.valueOf(k + start_code), r); } return h; }\n\n    ### Response: The information in the maps of the table 'cmap' is coded in several formats.\nFormat 6 is a trimmed table mapping. It is similar to format 0 but can have\nless than 256 entries.\n@return a HashMap representing this map\n@throws IOException the font file could not be read.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final ByteVector put112(final int byteValue1, final int byteValue2, final int shortValue) { int currentLength = length; if (currentLength + 4 > data.length) { enlarge(4); } byte[] currentData = data; currentData[currentLength++] = (byte) byteValue1; currentData[currentLength++] = (byte) byteValue2; currentData[currentLength++] = (byte) (shortValue >>> 8); currentData[currentLength++] = (byte) shortValue; length = currentLength; return this; }\n\n    ### Response:", "ground_truth": "Puts two bytes and a short into this byte vector. The byte vector is automatically enlarged if\nnecessary.\n\n@param byteValue1 a byte.\n@param byteValue2 another byte.\n@param shortValue a short.\n@return this byte vector.", "predict": "The put112() method writes an int, int and int to the specified location in the ByteVector."}, {"ID": 1241, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void doCustomServerIdentityCheck(X509Certificate cert) throws CertificateException{ if (EndpointIdentificationAlgorithm.APIS == identityAlg) { APINameChecker.verifyAndThrow(trustedNameSet, cert); } }\n\n    ### Response: check server identify as per tls.trustedNames in client.yml.\n\nNotes: this method should only be applied to verify server certificates on the client side.\n\n@param cert\n@throws CertificateException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ByteVector putInt(final int intValue) { int currentLength = length; if (currentLength + 4 > data.length) { enlarge(4); } byte[] currentData = data; currentData[currentLength++] = (byte) (intValue >>> 24); currentData[currentLength++] = (byte) (intValue >>> 16); currentData[currentLength++] = (byte) (intValue >>> 8); currentData[currentLength++] = (byte) intValue; length = currentLength; return this; }\n\n    ### Response:", "ground_truth": "Puts an int into this byte vector. The byte vector is automatically enlarged if necessary.\n\n@param intValue an int.\n@return this byte vector.", "predict": "This method enlarges the ByteVector to accomodate int values of intValue if intValue > int(data.length/4) and copies intValue to int(data.length/4) successive bytes of intData."}, {"ID": 1242, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function forget(string $key, string $storage = 'global'): void { $fileKey = self::key($key); if (self::has($key)) { @unlink(self::$path . '/' . $storage . '/' . $fileKey); } }\n\n    ### Response: Forget key.\n\n@param string $key\n@param string $storage Default 'global'..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final ByteVector put122(final int byteValue, final int shortValue1, final int shortValue2) { int currentLength = length; if (currentLength + 5 > data.length) { enlarge(5); } byte[] currentData = data; currentData[currentLength++] = (byte) byteValue; currentData[currentLength++] = (byte) (shortValue1 >>> 8); currentData[currentLength++] = (byte) shortValue1; currentData[currentLength++] = (byte) (shortValue2 >>> 8); currentData[currentLength++] = (byte) shortValue2; length = currentLength; return this; }\n\n    ### Response:", "ground_truth": "Puts one byte and two shorts into this byte vector. The byte vector is automatically enlarged\nif necessary.\n\n@param byteValue a byte.\n@param shortValue1 a short.\n@param shortValue2 another short.\n@return this byte vector.", "predict": "Store int values of 1, 2 and 2 bytes, respectively, at given indices of ByteVector data structure to produce output of length 5 bytes"}, {"ID": 1243, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getValuesFromKeyMap( $key ) { if ( empty( $key ) || empty( $this->keyMap[$key] ) ) { return null; } return $this->keyMap[$key]; }\n\n    ### Response: Fetches values needed for testing stored on mapping\n\n@param string $key (Unique) Identifier key on the array\n\n@return mixed|null Mapped value or null if not found.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ByteVector putLong(final long longValue) { int currentLength = length; if (currentLength + 8 > data.length) { enlarge(8); } byte[] currentData = data; int intValue = (int) (longValue >>> 32); currentData[currentLength++] = (byte) (intValue >>> 24); currentData[currentLength++] = (byte) (intValue >>> 16); currentData[currentLength++] = (byte) (intValue >>> 8); currentData[currentLength++] = (byte) intValue; intValue = (int) longValue; currentData[currentLength++] = (byte) (intValue >>> 24); currentData[currentLength++] = (byte) (intValue >>> 16); currentData[currentLength++] = (byte) (intValue >>> 8); currentData[currentLength++] = (byte) intValue; length = currentLength; return this; }\n\n    ### Response:", "ground_truth": "Puts a long into this byte vector. The byte vector is automatically enlarged if necessary.\n\n@param longValue a long.\n@return this byte vector.", "predict": "Stores values in the given ByteVector"}, {"ID": 1244, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Map<String, Object> collect() { Map<String, Object> infos = new TreeMap<String, Object>(); systemInfo(infos); memInfo(infos); threadInfo(infos); gcInfo(infos); runtimeInfo(infos); return infos; }\n\n    ### Response: Collects all available infos in one map.\n\n@return the map populated with the information..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ByteVector putByteArray( final byte[] byteArrayValue, final int byteOffset, final int byteLength) { if (length + byteLength > data.length) { enlarge(byteLength); } if (byteArrayValue != null) { System.arraycopy(byteArrayValue, byteOffset, data, length, byteLength); } length += byteLength; return this; }\n\n    ### Response:", "ground_truth": "Puts an array of bytes into this byte vector. The byte vector is automatically enlarged if\nnecessary.\n\n@param byteArrayValue an array of bytes. May be {@literal null} to put {@code byteLength} null\nbytes into this byte vector.\n@param byteOffset index of the first byte of byteArrayValue that must be copied.\n@param byteLength number of bytes of byteArrayValue that must be copied.\n@return this byte vector.", "predict": "Stores the given bytes starting at the given offset and of the given length into the ByteVector at its given position."}, {"ID": 1245, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Preference createSingleTextPreference(String name, String label) { return createSingleTextPreference( name, \"attribute.displayName.\" + name, TextDisplay.TEXT, null); }\n\n    ### Response: Define a single-valued text input preferences. This method is a convenient wrapper for the\nmost common expected use case and assumes null values for the default value and a predictable\nlabel.\n\n@param name\n@param label\n@return.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void enlarge(final int size) { int doubleCapacity = 2 * data.length; int minimalCapacity = length + size; byte[] newData = new byte[doubleCapacity > minimalCapacity ? doubleCapacity : minimalCapacity]; System.arraycopy(data, 0, newData, 0, length); data = newData; }\n\n    ### Response:", "ground_truth": "Enlarges this byte vector so that it can receive 'size' more bytes.\n\n@param size number of additional bytes that this byte vector should be able to receive.", "predict": "Increment an object\u2019s capacity to hold an additional item of its type to avoid unnecessary garbage\ncollection and reallocation of internal arrays when new items are added to it."}, {"ID": 1246, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function toString() { $stringAttr = array(); foreach ($this->attributes as $name => $value) { $stringAttr[] = $name.'='.$this->escape($value); } return implode(',', $stringAttr); }\n\n    ### Response: Returns the distinguished name as string.\n\nAttribute values are always enquoted with '\"'. Quotation marks and\nbackslashes are escaped with a prefix backslash in the values.\n\n@return string The string form of the distinguished name..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected T authenticateUserViaHttpSession(final ActionRequest actionRequest) { final HttpServletRequest servletRequest = actionRequest.getHttpServletRequest(); final UserSession<T> userSession = UserSession.get(servletRequest); if (userSession == null) { return null; } final T authToken = userSession.getAuthToken(); if (authToken == null) { return null; } // granted final T newAuthToken = userAuth().rotateToken(authToken); if (newAuthToken != authToken) { final UserSession<T> newUserSesion = new UserSession<>(newAuthToken, userAuth().tokenValue(newAuthToken)); newUserSesion.start(servletRequest, actionRequest.getHttpServletResponse()); } return newAuthToken; }\n\n    ### Response:", "ground_truth": "Tries to authenticate user via HTTP session. Returns the token if user is authenticated.\nReturned token may be rotated.", "predict": "Rotates the authentication token and saves the new token to the session to persist across multiple calls to the protected method."}, {"ID": 1247, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function month($fieldName, array $options = []) { $options = $this->_singleDatetime($options, 'month'); if (isset($options['val']) && $options['val'] > 0 && $options['val'] <= 12) { $options['val'] = [ 'year' => date('Y'), 'month' => (int)$options['val'], 'day' => date('d') ]; } return $this->dateTime($fieldName, $options); }\n\n    ### Response: Returns a SELECT element for months.\n\n### Options:\n\n- `monthNames` - If false, 2 digit numbers will be used instead of text.\nIf an array, the given array will be used.\n- `empty` - If true, the empty select option is shown. If a string,\nthat string is displayed as the empty element.\n- `value` The selected value of the input.\n\n@param string $fieldName Prefix name for the SELECT element\n@param array $options Attributes for the select element\n@return string A generated month select dropdown.\n@link https://book.cakephp.org/3.0/en/views/helpers/form.html#creating-month-inputs.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected T authenticateUserViaToken(final ActionRequest actionRequest) { final HttpServletRequest servletRequest = actionRequest.getHttpServletRequest(); // then try the auth token final String token = ServletUtil.resolveAuthBearerToken(servletRequest); if (token == null) { return null; } final T authToken = userAuth().validateToken(token); if (authToken == null) { return null; } // granted final T newAuthToken = userAuth().rotateToken(authToken); actionRequest.getHttpServletResponse().setHeader(\"Authentication\", \"Bearer: \" + userAuth().tokenValue(newAuthToken)); return newAuthToken; }\n\n    ### Response:", "ground_truth": "Tries to authenticate user via token. Returns the token if user is authenticated.\nReturned token may be rotated.", "predict": "Authentication via bearer tokens"}, {"ID": 1248, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c oauthClient) Membership(membershipID uint) (wl.Membership, error) { if membershipID == 0 { return wl.Membership{}, errors.New(\"membershipID must be > 0\") } url := fmt.Sprintf( \"%s/memberships/%d\", c.apiURL, membershipID, ) req, err := c.newGetRequest(url) if err != nil { return wl.Membership{}, err } resp, err := c.do(req) if err != nil { return wl.Membership{}, err } if resp.StatusCode != http.StatusOK { return wl.Membership{}, fmt.Errorf(\"Unexpected response code %d - expected %d\", resp.StatusCode, http.StatusOK) } membership := wl.Membership{} err = json.NewDecoder(resp.Body).Decode(&membership) if err != nil { return wl.Membership{}, err } return membership, nil }\n\n    ### Response: // Membership returns the Membership associated with the provided membershipID..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected T authenticateUserViaBasicAuth(final ActionRequest actionRequest) { final HttpServletRequest servletRequest = actionRequest.getHttpServletRequest(); final String username = ServletUtil.resolveAuthUsername(servletRequest); if (username == null) { return null; } final String password = ServletUtil.resolveAuthPassword(servletRequest); final T authToken = userAuth().login(username, password); if (authToken == null) { return null; } return authToken; }\n\n    ### Response:", "ground_truth": "Tires to authenticate user via the basic authentication. Returns the token if user is authenticated.", "predict": "// Authentication via Basic Authentication.."}, {"ID": 1249, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def pbt_top_parent record = self return nil unless record.pbt_parent no_repeat = PolyBelongsTo::SingletonSet.new while !no_repeat.include?(record.pbt_parent) && !record.pbt_parent.nil? no_repeat.add?(record) record = record.pbt_parent end record end\n\n    ### Response: Climb up each parent object in the hierarchy until the top is reached.\n   This has a no-repeat safety built in.  Polymorphic parents have priority.\n @return [Object, nil] top parent ActiveRecord object instace.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String findDefaultMessage(final Locale locale, final String key) { String indexedKey = calcIndexKey(key); String msg = getMessage(fallbackBundlename, locale, key, indexedKey); if (msg != null) { return msg; } for (String bname : defaultBundles) { msg = getMessage(bname, locale, key, indexedKey); if (msg != null) { return msg; } } return null; }\n\n    ### Response:", "ground_truth": "Finds message in default bundles only, starting from fallback bundlename.", "predict": "Find the default message string given the locale, key and indexed key string arguments."}, {"ID": 1250, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def recon_err(data, F, W): \"\"\"Calcuate reconstruction error Parameters ---------- data : 2D array True data to recover. F : 2D array HTFA factor matrix. W : 2D array HTFA weight matrix. Returns ------- float Returns root mean squared reconstruction error. \"\"\" recon = F.dot(W).ravel() err = mean_squared_error( data.ravel(), recon, multioutput='uniform_average') return math.sqrt(err)\n\n    ### Response: Calcuate reconstruction error\n\n    Parameters\n    ----------\n\n    data : 2D array \n        True data to recover.\n\n    F : 2D array \n        HTFA factor matrix.\n\n    W : 2D array \n        HTFA weight matrix.\n   \n\n    Returns\n    -------\n    float \n        Returns root mean squared reconstruction error..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected ResourceBundle getBundle(final String bundleName, final Locale locale, final ClassLoader classLoader) { return ResourceBundle.getBundle(bundleName, locale, classLoader); }\n\n    ### Response:", "ground_truth": "Returns specified bundle. Invoked every time if cache is disabled.\nInput arguments are always valid.", "predict": "Get resource objects from the given resource bundle for the given locale and class loader."}, {"ID": 1251, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void addSetCookie(String name, String value) { _header.addSetCookie(new Cookie(name,value)); }\n\n    ### Response: Add a Set-Cookie field..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected K get(final K[] array, final int index) { return (K) Array.get(array, index); }\n\n    ### Response:", "ground_truth": "Returns array's element at given index.", "predict": "Get an element from an array at an indexed location."}, {"ID": 1252, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static function encodeHost(string $host): string { // http://tools.ietf.org/html/rfc3986#section-3.2.2 // IP-literal = \"[\" ( IPv6address / IPvFuture ) \"]\" // IPvFuture = \"v\" 1*HEXDIG \".\" 1*( unreserved / sub-delims / \":\" ) if ($host[0] === '[') { $excluded = static::UNRESERVED_SET.static::SUB_DELIMS_SET.'\\[\\]:'; return static::encode($host, $excluded); } // http://tools.ietf.org/html/rfc3986#section-3.2.2 // NOTE: characters in IPv4 address are all in the unreserved set // IPv4address = dec-octet \".\" dec-octet \".\" dec-octet \".\" dec-octet // reg-name = *( unreserved / pct-encoded / sub-delims ) $excluded = static::UNRESERVED_SET.static::SUB_DELIMS_SET; return static::encode($host, $excluded); }\n\n    ### Response: Encodes the host\n\n@param string $host The host\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected <E, ID> void setEntityId(final DbEntityDescriptor<E> ded, final E entity, final ID newIdValue) { ded.setIdValue(entity, newIdValue); }\n\n    ### Response:", "ground_truth": "Sets new ID value for entity.", "predict": "Sets the entity id\n\n/**\n * Sets the entity id of the given entity to the given new id value.<br>\n * The given entity must be in the given descriptor.<br>\n * The given new id value must be in the given descriptor.<br>\n * The given new id must be in the given domain.<br>\n * The given domain must be in the given domain registry.<br>\n * The given domain registry must be in the given registry.<br>\n * The given registry must be in the given authority.<br>\n * The given authority must be in the given authority registry.<br>\n * The given authority registry must be in the given registry.<br>\n * The given registry must be in the given system.<br>\n * The given system must be in the given system registry.<br>\n * The given system registry must be in the given database.<br>\n * The given database must be in the given database system.<br>\n * The given database system must be"}, {"ID": 1253, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function authenticate(options) { options = options || {}; var authenticators = [ passport.authenticate(['copress-oauth2-bearer', 'copress-oauth2-mac'], options)]; if (options.scopes || options.scope) { authenticators.push(scopeValidator(options)); } authenticators.push(oauth2Provider.errorHandler()); return authenticators; }\n\n    ### Response: Return the middleware chain to enforce oAuth 2.0 authentication and\nauthorization\n@param {Object} [options] Options object\n- scope\n- jwt.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void save(final Object entity) { final DbQuery q = query(dbOom.entities().insert(entity)); q.autoClose().executeUpdate(); }\n\n    ### Response:", "ground_truth": "Simply inserts object into the database.", "predict": "Store the given Object into the database"}, {"ID": 1254, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def close(self): \"\"\"Close the client. This includes closing the Session and CBS authentication layer as well as the Connection. If the client was opened using an external Connection, this will be left intact. No further messages can be sent or received and the client cannot be re-opened. All pending, unsent messages will remain uncleared to allow them to be inspected and queued to a new client. \"\"\" if self.message_handler: self.message_handler.destroy() self.message_handler = None self._shutdown = True if self._keep_alive_thread: self._keep_alive_thread.join() self._keep_alive_thread = None if not self._session: return # already closed. if not self._connection.cbs: _logger.debug(\"Closing non-CBS session.\") self._session.destroy() else: _logger.debug(\"CBS session pending.\") self._session = None if not self._ext_connection: _logger.debug(\"Closing exclusive connection.\") self._connection.destroy() else: _logger.debug(\"Shared connection remaining open.\") self._connection = None\n\n    ### Response: Close the client. This includes closing the Session\n        and CBS authentication layer as well as the Connection.\n        If the client was opened using an external Connection,\n        this will be left intact.\n\n        No further messages can be sent or received and the client\n        cannot be re-opened.\n\n        All pending, unsent messages will remain uncleared to allow\n        them to be inspected and queued to a new client..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void update(final Object entity) { query(dbOom.entities().updateAll(entity)).autoClose().executeUpdate(); }\n\n    ### Response:", "ground_truth": "Updates single entity.", "predict": "Updates the given entity in the database with the values provided in the arguments of this method."}, {"ID": 1255, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def overlap_correlation(wnd, hop): \"\"\" Overlap correlation percent for the given overlap hop in samples. \"\"\" return sum(wnd * Stream(wnd).skip(hop)) / sum(el ** 2 for el in wnd)\n\n    ### Response: Overlap correlation percent for the given overlap hop in samples..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <E> E updateProperty(final E entity, final String name, final Object newValue) { query(dbOom.entities().updateColumn(entity, name, newValue)).autoClose().executeUpdate(); BeanUtil.declared.setProperty(entity, name, newValue); return entity; }\n\n    ### Response:", "ground_truth": "Updates single property in database and in the bean.", "predict": "Updates the given entity with the newValue for the given property name"}, {"ID": 1256, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (e *Evaluator) Scope(data lang.Data, self addrs.Referenceable) *lang.Scope { return &lang.Scope{ Data: data, SelfAddr: self, PureOnly: e.Operation != walkApply && e.Operation != walkDestroy, BaseDir: \".\", // Always current working directory for now. } }\n\n    ### Response: // Scope creates an evaluation scope for the given module path and optional\n// resource.\n//\n// If the \"self\" argument is nil then the \"self\" object is not available\n// in evaluated expressions. Otherwise, it behaves as an alias for the given\n// address..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <E> E updateProperty(final E entity, final String name) { Object value = BeanUtil.declared.getProperty(entity, name); query(dbOom.entities().updateColumn(entity, name, value)).autoClose().executeUpdate(); return entity; }\n\n    ### Response:", "ground_truth": "Updates property in the database by storing the current property value.", "predict": "// Updates the given entity with the given new value of the given property\n    // If the given new value does not exist in the given entity, the method\n    // returns the original entity."}, {"ID": 1257, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getValidationMessage($attribute, $rule, $data = [], $type = null) { $path = Str::snake($rule); if ($type !== null) { $path .= '.' . $type; } if ($this->translator->has('validation.custom.' . $attribute . '.' . $path)) { $path = 'custom.' . $attribute . '.' . $path; } $niceName = $this->getValidationAttribute($attribute); return $this->translator->get('validation.' . $path, $data + ['attribute' => $niceName]); }\n\n    ### Response: Get user friendly validation message.\n\n@param string $attribute\n@param string $rule\n@param array $data\n@param string $type\n@return string\n@see Illuminate\\Validation\\Validator::getMessage().\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <E, ID> E findById(final Class<E> entityType, final ID id) { return query(dbOom.entities().findById(entityType, id)).autoClose().find(entityType); }\n\n    ### Response:", "ground_truth": "Finds single entity by its id.", "predict": "Find and load an entity with the given ID."}, {"ID": 1258, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def leaveoneout(self): \"\"\"Train & Test using leave one out\"\"\" traintestfile = self.fileprefix + '.train' options = \"-F \" + self.format + \" \" + self.timbloptions + \" -t leave_one_out\" if sys.version < '3': self.api = timblapi.TimblAPI(b(options), b\"\") else: self.api = timblapi.TimblAPI(options, \"\") if self.debug: print(\"Enabling debug for timblapi\",file=stderr) self.api.enableDebug() print(\"Calling Timbl API : \" + options,file=stderr) if sys.version < '3': self.api.learn(b(traintestfile)) self.api.test(b(traintestfile), b(self.fileprefix + '.out'),b'') else: self.api.learn(u(traintestfile)) self.api.test(u(traintestfile), u(self.fileprefix + '.out'),'') return self.api.getAccuracy()\n\n    ### Response: Train & Test using leave one out.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <E> E findOneByProperty(final Class<E> entityType, final String name, final Object value) { return query(dbOom.entities().findByColumn(entityType, name, value)).autoClose().find(entityType); }\n\n    ### Response:", "ground_truth": "Finds single entity by matching property.", "predict": "Find an entity by its property values of the given names and values."}, {"ID": 1259, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static int getYIndex(PatternFinderUser def, int y, Segment<PrimitiveParameter> lastMatch) { int skipEnd = def.getSkipEnd(); if (lastMatch != null && skipEnd > 0) { return Math.max(y, lastMatch.getLastIndex() + skipEnd); } else if (lastMatch != null && def.getSkip() > 0) { return Math.max(y, lastMatch.getLastIndex() + def.getSkip()); } else { return y; } }\n\n    ### Response: Return the last value of the next segment to be searched.\n\n@param y\nthe last value of the most recently searched segment.\n@param lastMatch\nthe most recent segment to match this rule.\n@return the last value of the next segment to search..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"unchecked\"}) public <E> E findOne(final Object criteria) { return (E) query(dbOom.entities().find(criteria)).autoClose().find(criteria.getClass()); }\n\n    ### Response:", "ground_truth": "Finds one entity for given criteria.", "predict": "Find and translate the given criteria to an appropriate SQL statement to run on the database to retrieve the first matching element of the given criteria."}, {"ID": 1260, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    async def send_script_message(self, message, context): \"\"\"Handle a send_script message. See :meth:`AbstractDeviceAdapter.send_script`. \"\"\" script = message.get('script') conn_string = message.get('connection_string') client_id = context.user_data if message.get('fragment_count') != 1: raise DeviceServerError(client_id, conn_string, 'send_script', 'fragmented scripts are not yet supported') await self.send_script(client_id, conn_string, script)\n\n    ### Response: Handle a send_script message.\n\n        See :meth:`AbstractDeviceAdapter.send_script`..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <ID> void deleteById(final Class entityType, final ID id) { query(dbOom.entities().deleteById(entityType, id)).autoClose().executeUpdate(); }\n\n    ### Response:", "ground_truth": "Deleted single entity by its id.", "predict": "\n    This method deletes an entity of the given type with the given id from the database. It makes use of the ActiveRecord implementation of the Spring Data JPA project to execute the SQL statement and automatically close the DB resources on its own."}, {"ID": 1261, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def is_unprocessed_local_replica(pid): \"\"\"Is local replica with status \"queued\".\"\"\" return d1_gmn.app.models.LocalReplica.objects.filter( pid__did=pid, info__status__status='queued' ).exists()\n\n    ### Response: Is local replica with status \"queued\"..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void deleteById(final Object entity) { if (entity != null) { int result = query(dbOom.entities().deleteById(entity)).autoClose().executeUpdate(); if (result != 0) { // now reset the ID value Class type = entity.getClass(); DbEntityDescriptor ded = dbOom.entityManager().lookupType(type); setEntityId(ded, entity, 0); } } }\n\n    ### Response:", "ground_truth": "Delete single object by its id. Resets ID value.", "predict": "The above method deletes an entity from the database by its id and resets the id for the next run of the program"}, {"ID": 1262, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *VideoParameters) SetDisplayAspectRatio(v string) *VideoParameters { s.DisplayAspectRatio = &v return s }\n\n    ### Response: // SetDisplayAspectRatio sets the DisplayAspectRatio field's value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public long count(final Class entityType) { return query(dbOom.entities().count(entityType)).autoClose().executeCount(); }\n\n    ### Response:", "ground_truth": "Counts number of all entities.", "predict": "// Count returns the total number of objects of the given entityType which are stored in the database and indexed by the Index. It uses the ResultSet to translate the ResultSet to the given entityType and applies the given function for computing the count of objects of this entityType to this ResultSet to retrieve the count of objects of this entityType in the database and indexed by the Index."}, {"ID": 1263, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function fire($event, $key, array $payload = []) { $payload[] = $this->context; if ($this->isEventsEnabled()) { $this->dispatcher->fire(\"settings.{$event}: {$key}\", $payload); } }\n\n    ### Response: Fire settings event.\n\n@param string $event\n@param string $key\n@param array $payload.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <ID> void increaseProperty(final Class entityType, final ID id, final String name, final Number delta) { query(dbOom.entities().increaseColumn(entityType, id, name, delta, true)).autoClose().executeUpdate(); }\n\n    ### Response:", "ground_truth": "Increases a property.", "predict": "Increment the given entity ID s  property with the given delta"}, {"ID": 1264, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function _parseConditionGroup($condition = null) { $result = 'AND'; if (empty($condition)) { return $result; } $condition = (string)mb_convert_case($condition, MB_CASE_UPPER); if (in_array($condition, ['AND', 'OR', 'NOT'])) { $result = $condition; } return $result; }\n\n    ### Response: Return string of logical group condition.\n\n@param string $condition Group condition, can be one of:\n`AND`, `OR`, `NOT`.\n@return string Group condition from input string,\nor string `AND` on failure..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <ID> void decreaseProperty(final Class entityType, final ID id, final String name, final Number delta) { query(dbOom.entities().increaseColumn(entityType, id, name, delta, false)).autoClose().executeUpdate(); }\n\n    ### Response:", "ground_truth": "Decreases a property.", "predict": "Decrement given column of given entity by given amount and run the SQL update statement to apply it"}, {"ID": 1265, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func APISchema(api *design.APIDefinition) *JSONSchema { api.IterateResources(func(r *design.ResourceDefinition) error { GenerateResourceDefinition(api, r) return nil }) scheme := \"http\" if len(api.Schemes) > 0 { scheme = api.Schemes[0] } u := url.URL{Scheme: scheme, Host: api.Host} href := u.String() links := []*JSONLink{ { Href: href, Rel: \"self\", }, { Href: \"/schema\", Method: \"GET\", Rel: \"self\", TargetSchema: &JSONSchema{ Schema: SchemaRef, AdditionalProperties: true, }, }, } s := JSONSchema{ ID: fmt.Sprintf(\"%s/schema\", href), Title: api.Title, Description: api.Description, Type: JSONObject, Definitions: Definitions, Properties: propertiesFromDefs(Definitions, \"#/definitions/\"), Links: links, } return &s }\n\n    ### Response: // APISchema produces the API JSON hyper schema..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <E> List<E> findRelated(final Class<E> target, final Object source) { return query(dbOom.entities().findForeign(target, source)).autoClose().list(target); }\n\n    ### Response:", "ground_truth": "Finds related entity.", "predict": "The method generates a list of objects of the given target type from the given source. It uses the foreign keys of the objects in the given source to filter objects in the database to produce the objects in the given target type."}, {"ID": 1266, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (l *Lexer) NextDynamicToken() (t token.Token) { // calculate anything, even spaces. // numbers lit := l.readNumber() if lit != \"\" { return l.newToken(token.INT, lit) } lit = l.readIdentifierFuncArgument() return l.newToken(token.IDENT, lit) }\n\n    ### Response: // NextDynamicToken doesn't cares about the grammar.\n// It reads numbers or any unknown symbol,\n// it's being used by parser to skip all characters\n// between parameter function's arguments inside parenthesis,\n// in order to allow custom regexp on the end-language too.\n//\n// It moves the cursor forward..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <E> List<E> listAll(final Class<E> target) { return query(dbOom.entities().from(target)).autoClose().list(target); }\n\n    ### Response:", "ground_truth": "List all entities.", "predict": "// This method uses the DBOOM library to retrieve objects of type E from the database // It uses the target parameter to filter objects to retrieve and the listAutoClose() // and list() methods to translate the objects to objects // of type List and add them to the returned list"}, {"ID": 1267, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setExpireDate(DateTimeInterface $dt) { $this->expire_time = (int)$dt->format('U') - time(); return $this; }\n\n    ### Response: Set the exact moment when the cache should expire.\n@param DateTimeInterface $dt When the cache should expire\n@return CachePolicy Provides fluent interface.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void clear() { entries = null; Iterator<String> keys = getAttributeNames(); while (keys.hasNext()) { removeAttribute(keys.next()); } }\n\n    ### Response:", "ground_truth": "Removes all attributes from the request as well as clears entries in this map.", "predict": "Override the default behavior of the CacheAdapter to delete all objects from the cache when the cache is being wiped."}, {"ID": 1268, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function processBlockquote($text, $inline = false) { if ($inline) { $length = 0; $text = str_replace(self::BLOCKQUOTE_INLINE_START, '', $text); // remove bq. } else { $length = strlen(self::BLOCKQUOTE_BLOCK_START); $text = mb_substr($text, $length); // remove first {quote} } $end = $this->findBlockquoteEnd($text, $inline); $blockquote = mb_substr($text, 0, $end); $this->wrapInNode(self::NODE_BLOCKQUOTE, function () use ($blockquote) { $this->processInline($blockquote); }); return mb_substr($text, $end + $length); }\n\n    ### Response: Processes text wrapped in markup saying it's emphasized\n\n@param  string $text   text to be processed into a  tag\n@param  bool   $inline flag telling if it's an inline blockquote or not\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Set<Entry<String, Object>> entrySet() { if (entries == null) { entries = new HashSet<>(); Iterator<String> iterator = getAttributeNames(); while (iterator.hasNext()) { final String key = iterator.next(); final Object value = getAttribute(key); entries.add(new Entry<String, Object>() { @Override public boolean equals(final Object obj) { if (obj == null) { return false; } if (this.getClass() != obj.getClass()) { return false; } Entry entry = (Entry) obj; return ((key == null) ? (entry.getKey() == null) : key.equals(entry.getKey())) && ((value == null) ? (entry.getValue() == null) : value.equals(entry.getValue())); } @Override public int hashCode() { return ((key == null) ? 0 : key.hashCode()) ^ ((value == null) ? 0 : value.hashCode()); } @Override public String getKey() { return key; } @Override public Object getValue() { return value; } @Override public Object setValue(final Object obj) { setAttribute(key, obj); return value; } }); } } return entries; }\n\n    ### Response:", "ground_truth": "", "predict": "Returns an entry set of all the keys and values of the attributes of the document"}, {"ID": 1269, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function hasCsrfProtectionTokens() { $sessionDataContainer = $this->objectManager->get(SessionDataContainer::class); $csrfProtectionTokens = $sessionDataContainer->getCsrfProtectionTokens(); return count($csrfProtectionTokens) > 0; }\n\n    ### Response: Returns true if the context has CSRF protection tokens.\n\n@return boolean true, if the token is valid. false otherwise..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Object put(final String key, final Object value) { entries = null; Object previous = get(key); setAttribute(key, value); return previous; }\n\n    ### Response:", "ground_truth": "Saves an attribute in the request.", "predict": "Override the default behavior of the Map and add the given key and values to the Map attributes"}, {"ID": 1270, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def start(self, timeout_secs=60): \"\"\"Start the heroku local subprocess group and verify that it has started successfully. The subprocess output is checked for a line matching 'success_regex' to indicate success. If no match is seen after 'timeout_secs', a HerokuTimeoutError is raised. \"\"\" def _handle_timeout(signum, frame): raise HerokuTimeoutError( \"Failed to start after {} seconds.\".format(timeout_secs, self._record) ) if self.is_running: self.out.log(\"Local Heroku is already running.\") return signal.signal(signal.SIGALRM, _handle_timeout) signal.alarm(timeout_secs) self._boot() try: success = self._verify_startup() finally: signal.alarm(0) if not success: self.stop(signal.SIGKILL) raise HerokuStartupError( \"Failed to start for unknown reason: {}\".format(self._record) ) return True\n\n    ### Response: Start the heroku local subprocess group and verify that\n        it has started successfully.\n\n        The subprocess output is checked for a line matching 'success_regex'\n        to indicate success. If no match is seen after 'timeout_secs',\n        a HerokuTimeoutError is raised..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Object remove(final Object key) { entries = null; Object value = get(key); removeAttribute(key.toString()); return value; }\n\n    ### Response:", "ground_truth": "Removes the specified request attribute.", "predict": "Override the default behavior of the Map interface to\n        implement the remove() method to delete the given key and its\n        corresponding values from the Map."}, {"ID": 1271, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def parsecapp(self, other): '''Returns a parser that applies the produced value of this parser to the produced value of `other`.''' # pylint: disable=unnecessary-lambda return self.bind(lambda res: other.parsecmap(lambda x: res(x)))\n\n    ### Response: Returns a parser that applies the produced value of this parser to the produced value of `other`..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"ThrowCaughtLocally\"}) public static StackTraceElement[] getCurrentStackTrace() { StackTraceElement[] ste = new Exception().getStackTrace(); if (ste.length > 1) { StackTraceElement[] result = new StackTraceElement[ste.length - 1]; System.arraycopy(ste, 1, result, 0, ste.length - 1); return result; } else { return ste; } }\n\n    ### Response:", "ground_truth": "Returns current stack trace in form of array of stack trace elements.\nFirst stack trace element is removed.\nSince an exception is thrown internally, this method is slow.", "predict": "The above method generates the StackTraceElement[] of the current method. It first copies the first Element of the StackTrace from the Exception and then copies the remaining elements of the StackTrace to generate the output StackTraceElement[] array of the current method."}, {"ID": 1272, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function index(NovaRequest $request) { $fields = $request->newResource() ->availableFields($request); $field = $fields->firstWhere('attribute', $request->field); if(!$field) { $rowField = $fields->firstWhere('component', 'nova-fields-row'); $fields = collect($rowField->meta['fields']); $field = $fields->firstWhere('attribute', $request->field); } $withTrashed = $this->shouldIncludeTrashed( $request, $associatedResource = $field->resourceClass ); return [ 'resources' => $field->buildAssociatableQuery($request, $withTrashed)->get() ->mapInto($field->resourceClass) ->filter->authorizedToAdd($request, $request->model()) ->map(function ($resource) use ($request, $field) { return $field->formatAssociatableResource($request, $resource); })->sortBy('display')->values(), 'softDeletes' => $associatedResource::softDeletes(), 'withTrashed' => $withTrashed, ]; }\n\n    ### Response: List the available related resources for a given resource.\n\n@param  \\Laravel\\Nova\\Http\\Requests\\NovaRequest  $request\n@return \\Illuminate\\Http\\Response.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static StackTraceElement[] getStackTrace(final Throwable t, final String[] allow, final String[] deny) { StackTraceElement[] st = t.getStackTrace(); ArrayList<StackTraceElement> result = new ArrayList<>(st.length); elementLoop: for (StackTraceElement element : st) { String className = element.getClassName(); if (allow != null) { boolean validElemenet = false; for (String filter : allow) { if (className.contains(filter)) { validElemenet = true; break; } } if (!validElemenet) { continue; } } if (deny != null) { for (String filter : deny) { if (className.contains(filter)) { continue elementLoop; } } } result.add(element); } st = new StackTraceElement[result.size()]; return result.toArray(st); }\n\n    ### Response:", "ground_truth": "Returns stack trace filtered by class names.", "predict": "Get the StackTrace of the given exception and filter by given allow and deny patterns"}, {"ID": 1273, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func newClient(endpoint string) *gomarathon.Client { url := endpoint if endpoint != \"\" { url = endpoint } log.Printf(\"Marathon Endpoint: %s\", url) c, err := gomarathon.NewClient(url, nil) if err != nil { log.Fatal(err) } return c }\n\n    ### Response: // Creates a client connection to Marathon on the provided endpoint..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static StackTraceElement[][] getStackTraceChain(Throwable t, final String[] allow, final String[] deny) { ArrayList<StackTraceElement[]> result = new ArrayList<>(); while (t != null) { StackTraceElement[] stack = getStackTrace(t, allow, deny); result.add(stack); t = t.getCause(); } StackTraceElement[][] allStacks = new StackTraceElement[result.size()][]; for (int i = 0; i < allStacks.length; i++) { allStacks[i] = result.get(i); } return allStacks; }\n\n    ### Response:", "ground_truth": "Returns stack trace chain filtered by class names.", "predict": "// Gets the chain of caller stack traces from the given exception."}, {"ID": 1274, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def format_auto_patching_settings(result): ''' Formats the AutoPatchingSettings object removing arguments that are empty ''' from collections import OrderedDict # Only display parameters that have content order_dict = OrderedDict() if result.enable is not None: order_dict['enable'] = result.enable if result.day_of_week is not None: order_dict['dayOfWeek'] = result.day_of_week if result.maintenance_window_starting_hour is not None: order_dict['maintenanceWindowStartingHour'] = result.maintenance_window_starting_hour if result.maintenance_window_duration is not None: order_dict['maintenanceWindowDuration'] = result.maintenance_window_duration return order_dict\n\n    ### Response: Formats the AutoPatchingSettings object removing arguments that are empty.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Throwable[] getExceptionChain(Throwable throwable) { ArrayList<Throwable> list = new ArrayList<>(); list.add(throwable); while ((throwable = throwable.getCause()) != null) { list.add(throwable); } Throwable[] result = new Throwable[list.size()]; return list.toArray(result); }\n\n    ### Response:", "ground_truth": "Returns exception chain starting from top up to root cause.", "predict": "Gets the exception chain of the given exception."}, {"ID": 1275, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def starter(cls): \"\"\"Pick last one in a list of archive pages.\"\"\" archive = cls.url + 'archive.html' data = getPageContent(archive, cls.session) search = compile(tagre(\"a\", \"href\", r\"(\\d\\d\\d\\d-\\d\\d.html)\")) archivepages = search.findall(data) return cls.url + archivepages[-1]\n\n    ### Response: Pick last one in a list of archive pages..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String exceptionStackTraceToString(final Throwable t) { StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw, true); t.printStackTrace(pw); StreamUtil.close(pw); StreamUtil.close(sw); return sw.toString(); }\n\n    ### Response:", "ground_truth": "Prints stack trace into a String.", "predict": "The exceptionStackTraceToString() method generates a comma delimited string of the StackTrace of the exception provided to the method."}, {"ID": 1276, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c CloudstackClient) QueryAsyncJobResult(jobid string) (QueryAsyncJobResultResponse, error) { var resp QueryAsyncJobResultResponse params := url.Values{} params.Set(\"jobid\", jobid) response, err := NewRequest(c, \"queryAsyncJobResult\", params) if err != nil { return resp, err } resp = response.(QueryAsyncJobResultResponse) return resp, nil }\n\n    ### Response: // Query Cloudstack for the state of a scheduled job.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String exceptionChainToString(Throwable t) { StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw, true); while (t != null) { t.printStackTrace(pw); t = t.getCause(); } StreamUtil.close(pw); StreamUtil.close(sw); return sw.toString(); }\n\n    ### Response:", "ground_truth": "Prints full exception stack trace, from top to root cause, into a String.", "predict": "// This method generates the chain of exceptions string from the given exception."}, {"ID": 1277, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def handle_one_of(schema, field, validator, parent_schema): \"\"\"Adds the validation logic for ``marshmallow.validate.OneOf`` by setting the JSONSchema `enum` property to the allowed choices in the validator. Args: schema (dict): The original JSON schema we generated. This is what we want to post-process. field (fields.Field): The field that generated the original schema and who this post-processor belongs to. validator (marshmallow.validate.OneOf): The validator attached to the passed in field. parent_schema (marshmallow.Schema): The Schema instance that the field belongs to. Returns: dict: A, possibly, new JSON Schema that has been post processed and altered. \"\"\" if validator.choices: schema['enum'] = list(validator.choices) schema['enumNames'] = list(validator.labels) return schema\n\n    ### Response: Adds the validation logic for ``marshmallow.validate.OneOf`` by setting\n    the JSONSchema `enum` property to the allowed choices in the validator.\n\n    Args:\n        schema (dict): The original JSON schema we generated. This is what we\n            want to post-process.\n        field (fields.Field): The field that generated the original schema and\n            who this post-processor belongs to.\n        validator (marshmallow.validate.OneOf): The validator attached to the\n            passed in field.\n        parent_schema (marshmallow.Schema): The Schema instance that the field\n            belongs to.\n\n    Returns:\n        dict: A, possibly, new JSON Schema that has been post processed and\n            altered..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String buildMessage(final String message, Throwable cause) { if (cause != null) { cause = getRootCause(cause); StringBuilder buf = new StringBuilder(); if (message != null) { buf.append(message).append(\"; \"); } buf.append(\"<--- \").append(cause); return buf.toString(); } else { return message; } }\n\n    ### Response:", "ground_truth": "Build a message for the given base message and its cause.", "predict": "Generates a message string with details of the exception, or an empty string\n    // If exception occurred, generates a message string with details of exception\n    // If exception didn't occurred, generates an empty string\n    // Uses StringBuilder for concatenating the message and details of exception\n    // Uses <----- for concatenating details of exception\n    // Uses either message or details of exception to generate message string"}, {"ID": 1278, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (o *Organizations) findOrg(query chronograf.OrganizationQuery) (*chronograf.Organization, string, error) { // Because the entire org information is not known at this point, we need // to try to find the name of the file through matching the ID or name in the org // content with the ID passed. files, err := o.ReadDir(o.Dir) if err != nil { return nil, \"\", err } for _, f := range files { if path.Ext(f.Name()) != OrgExt { continue } file := path.Join(o.Dir, f.Name()) var org chronograf.Organization if err := o.Load(file, &org); err != nil { return nil, \"\", err } if query.ID != nil && org.ID == *query.ID { return &org, file, nil } if query.Name != nil && org.Name == *query.Name { return &org, file, nil } } return nil, \"\", chronograf.ErrOrganizationNotFound }\n\n    ### Response: // findOrg takes an OrganizationQuery and finds the associated filename.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Throwable unwrapThrowable(final Throwable wrappedThrowable) { Throwable unwrapped = wrappedThrowable; while (true) { if (unwrapped instanceof InvocationTargetException) { unwrapped = ((InvocationTargetException) unwrapped).getTargetException(); } else if (unwrapped instanceof UndeclaredThrowableException) { unwrapped = ((UndeclaredThrowableException) unwrapped).getUndeclaredThrowable(); } else { return unwrapped; } } }\n\n    ### Response:", "ground_truth": "Unwraps invocation and undeclared exceptions to real cause.", "predict": "// This method unwraps any exception that may be wrapped in the exception provided."}, {"ID": 1279, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def fetch(self, card_id, data={}, **kwargs): \"\"\"\" Fetch Card for given Id Args: card_id : Id for which card object has to be retrieved Returns: Card dict for given card Id \"\"\" return super(Card, self).fetch(card_id, data, **kwargs)\n\n    ### Response: Fetch Card for given Id\n\n        Args:\n            card_id : Id for which card object has to be retrieved\n\n        Returns:\n            Card dict for given card Id.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void registerAsConsumer(final ClassScanner classScanner) { classScanner.registerEntryConsumer(classPathEntry -> { final String entryName = classPathEntry.name(); if (entryName.endsWith(actionClassSuffix)) { try { acceptActionClass(classPathEntry.loadClass()); } catch (Exception ex) { log.debug(\"Invalid Madvoc action, ignoring: \" + entryName); } } else if (classPathEntry.isTypeSignatureInUse(MADVOC_COMPONENT_ANNOTATION)) { try { acceptMadvocComponentClass(classPathEntry.loadClass()); } catch (Exception ex) { log.debug(\"Invalid Madvoc component ignoring: {}\" + entryName); } } }); }\n\n    ### Response:", "ground_truth": "Parses class name that matches madvoc-related names.", "predict": "\n    The above piece of code defines a method to register action and\n     component classes of Madvoc library during code scanning of the\n     application codebase. It scans for action and component annotation\n     on the given class and registers corresponding action and\n     component for given ClassPathEntry."}, {"ID": 1280, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (b *BlockedEvals) watchCapacity(stopCh <-chan struct{}, changeCh <-chan *capacityUpdate) { for { select { case <-stopCh: return case update := <-changeCh: b.unblock(update.computedClass, update.quotaChange, update.index) } } }\n\n    ### Response: // watchCapacity is a long lived function that watches for capacity changes in\n// nodes and unblocks the correct set of evals..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void acceptMadvocComponentClass(final Class componentClass) { if (componentClass == null) { return; } if (!checkClass(componentClass)) { return; } madvocComponents.add(() -> madvocContainer.registerComponent(componentClass)); }\n\n    ### Response:", "ground_truth": "Registers new Madvoc component.", "predict": "// Checks that the given componentClass matches the pre-requisites of MadVoc and\n// If the given componentClass matches and there are no other blocks, add the component to the list of\n// MadVoc components to be registered and run the relevant MadVoc handlers"}, {"ID": 1281, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def remover(self, id_logicalenvironment): \"\"\"Remove Logical Environment from by the identifier. :param id_logicalenvironment: Identifier of the Logical Environment. Integer value and greater than zero. :return: None :raise InvalidParameterError: The identifier of Logical Environment is null and invalid. :raise AmbienteLogicoNaoExisteError: Logical Environment not registered. :raise DataBaseError: Networkapi failed to access the database. :raise XMLError: Networkapi failed to generate the XML response. \"\"\" if not is_valid_int_param(id_logicalenvironment): raise InvalidParameterError( u'The identifier of Logical Environment is invalid or was not informed.') url = 'logicalenvironment/' + str(id_logicalenvironment) + '/' code, xml = self.submit(None, 'DELETE', url) return self.response(code, xml)\n\n    ### Response: Remove Logical Environment from by the identifier.\n\n        :param id_logicalenvironment: Identifier of the Logical Environment. Integer value and greater than zero.\n\n        :return: None\n\n        :raise InvalidParameterError: The identifier of Logical Environment is null and invalid.\n        :raise AmbienteLogicoNaoExisteError: Logical Environment not registered.\n        :raise DataBaseError: Networkapi failed to access the database.\n        :raise XMLError: Networkapi failed to generate the XML response..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ClassLoader getSystemClassLoader() { if (System.getSecurityManager() == null) { return ClassLoader.getSystemClassLoader(); } else { return AccessController.doPrivileged( (PrivilegedAction<ClassLoader>) ClassLoader::getSystemClassLoader); } }\n\n    ### Response:", "ground_truth": "Returns system class loader.", "predict": "The method returns the system class loader or the default system class loader for the given thread. If the current thread does not have a security manager installed, this method returns the system class loader. Otherwise, this method delegates the request to the AccessController which runs under the privileges of the current thread to retrieve the system class loader for the given thread."}, {"ID": 1282, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _get_distance_scaling(self, C, mag, rhypo): \"\"\" Returns the distance scalig term \"\"\" return (C[\"a3\"] * np.log(rhypo)) + (C[\"a4\"] + C[\"a5\"] * mag) * rhypo\n\n    ### Response: Returns the distance scalig term.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static InputStream getResourceAsStream(final String resourceName, final ClassLoader callingClass) throws IOException { URL url = getResourceUrl(resourceName, callingClass); if (url != null) { return url.openStream(); } return null; }\n\n    ### Response:", "ground_truth": "Opens a resource of the specified name for reading.\n@see #getResourceUrl(String, ClassLoader)", "predict": "Get resource as stream of specified name from given callingClass."}, {"ID": 1283, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public JDBCAppendTableSinkBuilder setParameterTypes(TypeInformation<?>... types) { int[] ty = new int[types.length]; for (int i = 0; i < types.length; ++i) { ty[i] = JDBCTypeUtil.typeInformationToSqlType(types[i]); } this.parameterTypes = ty; return this; }\n\n    ### Response: Specify the type of the rows that the sink will be accepting.\n@param types the type of each field.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static InputStream getResourceAsStream(final String resourceName, final ClassLoader callingClass, final boolean useCache) throws IOException { URL url = getResourceUrl(resourceName, callingClass); if (url != null) { URLConnection urlConnection = url.openConnection(); urlConnection.setUseCaches(useCache); return urlConnection.getInputStream(); } return null; }\n\n    ### Response:", "ground_truth": "Opens a resource of the specified name for reading. Controls caching,\nthat is important when the same jar is reloaded using custom classloader.", "predict": "Get resource as stream from given resource name loaded from given callingClass."}, {"ID": 1284, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def json_class_decoder_hook(d: Dict) -> Any: \"\"\" Provides a JSON decoder that converts dictionaries to Python objects if suitable methods are found in our ``TYPE_MAP``. \"\"\" if TYPE_LABEL in d: typename = d.get(TYPE_LABEL) if typename in TYPE_MAP: if DEBUG: log.debug(\"Deserializing: {!r}\", d) d.pop(TYPE_LABEL) descriptor = TYPE_MAP[typename] obj = descriptor.to_obj(d) if DEBUG: log.debug(\"... to: {!r}\", obj) return obj return d\n\n    ### Response: Provides a JSON decoder that converts dictionaries to Python objects if\n    suitable methods are found in our ``TYPE_MAP``..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static InputStream getClassAsStream(final Class clazz) throws IOException { return getResourceAsStream(ClassUtil.convertClassNameToFileName(clazz), clazz.getClassLoader()); }\n\n    ### Response:", "ground_truth": "Opens a class of the specified name for reading using class classloader.\n@see #getResourceAsStream(String, ClassLoader)", "predict": "Provide an InputStream for the given class name, or the resource associated to the given class name if found"}, {"ID": 1285, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function pageResourceMapper($resourceId) { if (!$this->resourceName->isPagesResourceId($resourceId)) { return null; } $resources = explode('.', $resourceId); if (empty($resources[1])) { return null; } $siteResourceId = $this->resourceName->get(self::RESOURCE_SITES, $resources[1]); $return = [ 'resourceId' => $resourceId, 'parentResourceId' => $siteResourceId, ]; if ($this->resourceName->isPageResourceId($resourceId)) { $pagesResourceId = $this->resourceName->get(self::RESOURCE_SITES, $resources[1], self::RESOURCE_PAGES); $return['parentResourceId'] = $pagesResourceId; } return array_merge( $this->resources[self::RESOURCE_PAGES], $return ); }\n\n    ### Response: Page Resource Mapper\n\n@param string $resourceId Resource Id to search\n\n@return array|null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static InputStream getClassAsStream(final String className, final ClassLoader classLoader) throws IOException { return getResourceAsStream(ClassUtil.convertClassNameToFileName(className), classLoader); }\n\n    ### Response:", "ground_truth": "Opens a class of the specified name for reading using provided class loader.", "predict": "GetClassAsStream - Get resource of specified class as stream\n\n* If resource name contains '/', class loader should be specified\n* If resource name does not contains '/', class loader of current class can be used\n* If resource name contains '/', resource name without '/' can be used to search corresponding resource in parent class loader"}, {"ID": 1286, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def write_PIA0_A_data(self, cpu_cycles, op_address, address, value): \"\"\" write to 0xff00 -> PIA 0 A side Data reg. \"\"\" log.error(\"%04x| write $%02x (%s) to $%04x -> PIA 0 A side Data reg.\\t|%s\", op_address, value, byte2bit_string(value), address, self.cfg.mem_info.get_shortest(op_address) ) self.pia_0_A_register.set(value)\n\n    ### Response: write to 0xff00 -> PIA 0 A side Data reg..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RouteChunk add(final String newValue) { RouteChunk routeChunk = new RouteChunk(routes, this, newValue); if (children == null) { children = new RouteChunk[] {routeChunk}; } else { children = ArraysUtil.append(children, routeChunk); } return routeChunk; }\n\n    ### Response:", "ground_truth": "Adds a new child to the tree.", "predict": "add(newValue) creates a RouteChunk and appends it to the list of children of this Route."}, {"ID": 1287, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _render_picking(self, **kwargs): \"\"\"Render the scene in picking mode, returning a 2D array of visual IDs. \"\"\" try: self._scene.picking = True img = self.render(bgcolor=(0, 0, 0, 0), **kwargs) finally: self._scene.picking = False img = img.astype('int32') * [2**0, 2**8, 2**16, 2**24] id_ = img.sum(axis=2).astype('int32') return id_\n\n    ### Response: Render the scene in picking mode, returning a 2D array of visual \n        IDs..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RouteChunk findOrCreateChild(final String value) { if (children != null) { for (RouteChunk child : children) { if (child.get().equals(value)) { return child; } } } return add(value); }\n\n    ### Response:", "ground_truth": "Finds existing chunk or creates a new one if does not exist.", "predict": "Find or create child of given value.."}, {"ID": 1288, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function (viewMatrix) { Matrix4.copy(this.viewMatrix, viewMatrix); Matrix4.invert(this.worldTransform, viewMatrix); this.decomposeWorldTransform(); }\n\n    ### Response: Set camera view matrix.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void parseRequest() throws IOException { if (ServletUtil.isMultipartRequest(request)) { parseRequestStream(request.getInputStream(), characterEncoding); } else { Enumeration names = request.getParameterNames(); while (names.hasMoreElements()) { String paramName = (String) names.nextElement(); String[] values = request.getParameterValues(paramName); putParameters(paramName, values); } } }\n\n    ### Response:", "ground_truth": "Checks if request if multi-part and parse it. If request is not multi-part it\ncopies all parameters, to make usage the same in both cases.\n\n@see MultipartRequestWrapper", "predict": "Parses request parameters and sets values in parameters map."}, {"ID": 1289, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func filecmd(h FileCmder, r *Request, pkt requestPacket) responsePacket { switch p := pkt.(type) { case *sshFxpFsetstatPacket: r.Flags = p.Flags r.Attrs = p.Attrs.([]byte) } err := h.Filecmd(r) return statusFromError(pkt, err) }\n\n    ### Response: // wrap FileCmder handler.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") protected Object convertToCollection(final Object value, final Class destinationType, final Class componentType) { return typeConverterManager.convertToCollection(value, destinationType, componentType); }\n\n    ### Response:", "ground_truth": "Converter to collection.", "predict": "// convert objects to collections of given types"}, {"ID": 1290, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function createFolders() { foreach ($this->getFolderStructure() as $folder) { $newFolder = $this->twigStringRenderer->renderToString($folder, $this->data); $this->fs->mkdir($this->targetPath.DIRECTORY_SEPARATOR.$newFolder, self::DIRECTORY_MODE); $msg = '[mkdir] '.$this->targetPath.DIRECTORY_SEPARATOR.$newFolder; if ($this->reportingEnabled) { $this->report[] =$msg; } } }\n\n    ### Response: Creates all folders specified by getFolderStructure within the target\nlocation..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Object invokeSetter(final Setter setter, final BeanProperty bp, Object value) { try { final MapperFunction setterMapperFunction = setter.getMapperFunction(); if (setterMapperFunction != null) { value = setterMapperFunction.apply(value); } final Class type = setter.getSetterRawType(); if (ClassUtil.isTypeOf(type, Collection.class)) { Class componentType = setter.getSetterRawComponentType(); value = convertToCollection(value, type, componentType); } else { // no collections value = convertType(value, type); } setter.invokeSetter(bp.bean, value); } catch (Exception ex) { if (isSilent) { return null; } throw new BeanException(\"Setter failed: \" + setter, ex); } return value; }\n\n    ### Response:", "ground_truth": "Invokes setter, but first converts type to match the setter type.", "predict": "Invoke the setter of the given bean to set the given value to the given bean"}, {"ID": 1291, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected int computeFernValue(float c_x, float c_y, float rectWidth , float rectHeight , TldFernDescription fern ) { rectWidth -= 1; rectHeight -= 1; int desc = 0; for( int i = 0; i < fern.pairs.length; i++ ) { Point2D_F32 p_a = fern.pairs[i].a; Point2D_F32 p_b = fern.pairs[i].b; float valA = interpolate.get_fast(c_x + p_a.x * rectWidth, c_y + p_a.y * rectHeight); float valB = interpolate.get_fast(c_x + p_b.x * rectWidth, c_y + p_b.y * rectHeight); desc *= 2; if( valA < valB ) { desc += 1; } } return desc; }\n\n    ### Response: Computes the value of the specified fern at the specified location in the image..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void arrayForcedSet(final BeanProperty bp, Object array, final int index, Object value) { Class componentType = array.getClass().getComponentType(); array = ensureArraySize(bp, array, componentType, index); value = convertType(value, componentType); Array.set(array, index, value); }\n\n    ### Response:", "ground_truth": "Sets the array element forced. If index is greater then arrays length, array will be expanded to the index.\nIf speed is critical, it is better to allocate an array with proper size before using this method.", "predict": "Allows to set an element of an array to the given value at the given index."}, {"ID": 1292, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function create($type, $content) { if (empty($type)) { throw new AlertTypeException('Unable to create message with invalid type.'); } if (empty($content)) { throw new AlertContentException('Unable to create message with invalid content.'); } return new self($type, $content); }\n\n    ### Response: Create a new alerter instance.\n\n@param string $type\n@param string $content\n\n@return self\n\n@throws \\Cornford\\Alerter\\Exceptions\\AlertContentException\n@throws \\Cornford\\Alerter\\Exceptions\\AlertTypeException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Object createBeanProperty(final BeanProperty bp) { Setter setter = bp.getSetter(true); if (setter == null) { return null; } Class type = setter.getSetterRawType(); Object newInstance; try { newInstance = ClassUtil.newInstance(type); } catch (Exception ex) { if (isSilent) { return null; } throw new BeanException(\"Invalid property: \" + bp.name, bp, ex); } newInstance = invokeSetter(setter, bp, newInstance); return newInstance; }\n\n    ### Response:", "ground_truth": "Creates new instance for current property name through its setter.\nIt uses default constructor!", "predict": "Create and initialize an object member of the bean with the given bean property name and type."}, {"ID": 1293, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function getMessageForError($value) { if (self::isValidName($value)) { $value = self::getNameValue($value); } return isset(self::$messages[$value]) ? self::$messages[$value] : null; }\n\n    ### Response: Get the helpful error message for a specific error if it exists.\n\n@param mixed $value\n@return string|null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Class extractType(final BeanProperty bp) { Getter getter = bp.getGetter(isDeclared); if (getter != null) { if (bp.index != null) { Class type = getter.getGetterRawComponentType(); return type == null ? Object.class : type; } return getter.getGetterRawType(); } return null; // this should not happens }\n\n    ### Response:", "ground_truth": "Extracts type of current property.", "predict": "Extract the bean property type from the bean property and its getter, or the bean property itself or default to ObjectType if the beanproperty does not exist or does not have a getter defined for it or the beanproperty does not have an indexed access or the beanproperty does not exist or does not have a getter defined for it or the beanproperty does not have an indexed access or the beanproperty does not exist or does not have a getter defined for it or the beanproperty does not exist or does not have a getter defined for it or the beanproperty does not exist or does not have a getter defined for it or the beanproperty does not exist or does not have a getter defined for it or the beanproperty does not exist or does not have a getter defined for it or the beanproperty does not exist or does not have a getter defined for it or the beanproperty does not exist or does not have a getter defined for it or the beanproperty does not exist or does not have a getter defined for it or"}, {"ID": 1294, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *AssumeRoleWithSAMLInput) SetSAMLAssertion(v string) *AssumeRoleWithSAMLInput { s.SAMLAssertion = &v return s }\n\n    ### Response: // SetSAMLAssertion sets the SAMLAssertion field's value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void stop(final HttpServletRequest servletRequest, final HttpServletResponse servletResponse) { final HttpSession httpSession = servletRequest.getSession(false); if (httpSession != null) { httpSession.removeAttribute(AUTH_SESSION_NAME); } final Cookie cookie = ServletUtil.getCookie(servletRequest, AUTH_COOKIE_NAME); if (cookie == null) { return; } cookie.setMaxAge(0); cookie.setPath(\"/\"); servletResponse.addCookie(cookie); }\n\n    ### Response:", "ground_truth": "", "predict": "// Stops the authentication process by removing the session attributes,\n    // destroying the authentication cookie,\n    // and by setting the cookie to be ineffective in the given path."}, {"ID": 1295, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def redirect_request(self, req, fp, code, msg, headers, newurl): \"\"\"Return a Request or None in response to a redirect. This is called by the http_error_30x methods when a redirection response is received. If a redirection should take place, return a new Request to allow http_error_30x to perform the redirect. Otherwise, raise HTTPError if no-one else should try to handle this url. Return None if you can't but another Handler might. \"\"\" m = req.get_method() if (not (code in (301, 302, 303, 307) and m in (\"GET\", \"HEAD\") or code in (301, 302, 303) and m == \"POST\")): raise HTTPError(req.full_url, code, msg, headers, fp) # Strictly (according to RFC 2616), 301 or 302 in response to # a POST MUST NOT cause a redirection without confirmation # from the user (of urllib.request, in this case). In practice, # essentially all clients do redirect in this case, so we do # the same. # be conciliant with URIs containing a space newurl = newurl.replace(' ', '%20') CONTENT_HEADERS = (\"content-length\", \"content-type\") newheaders = dict((k, v) for k, v in req.headers.items() if k.lower() not in CONTENT_HEADERS) return Request(newurl, headers=newheaders, origin_req_host=req.origin_req_host, unverifiable=True)\n\n    ### Response: Return a Request or None in response to a redirect.\n\n        This is called by the http_error_30x methods when a\n        redirection response is received.  If a redirection should\n        take place, return a new Request to allow http_error_30x to\n        perform the redirect.  Otherwise, raise HTTPError if no-one\n        else should try to handle this url.  Return None if you can't\n        but another Handler might..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void start(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) { final HttpSession httpSession = httpServletRequest.getSession(true); httpSession.setAttribute(AUTH_SESSION_NAME, this); final Cookie cookie = new Cookie(AUTH_COOKIE_NAME, authTokenValue); //cookie.setDomain(SSORealm.SSO_DOMAIN); cookie.setMaxAge(cookieMaxAge); cookie.setPath(\"/\"); httpServletResponse.addCookie(cookie); }\n\n    ### Response:", "ground_truth": "Starts new user session.", "predict": "\n    The start() method of this listener handles the authentication\n    of the given HTTP session request. It first checks if there\n    is an authorization token in the request's session. If\n    present, the token is verified and the listener\n    authentication success/failure status is updated in the\n    session. Finally, if authentication succeeds,\n    an authorization cookie is added to the response to\n    remember the listener authentication success in\n    subsequent server calls until the cookie\n    expires, or until the session is\n    invalidated."}, {"ID": 1296, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public com.google.api.ads.admanager.axis.v201808.ChangeHistoryEntityType getEntityType() { return entityType; }\n\n    ### Response: Gets the entityType value for this ChangeHistoryValue.\n\n@return entityType.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Date toDate(final LocalDate localDate) { return Date.from(localDate.atStartOfDay(ZoneId.systemDefault()).toInstant()); }\n\n    ### Response:", "ground_truth": "Converts local date to Date.", "predict": "Creates an instance of java.time.LocalDate and converts it to its corresponding java.time.Instant to generate its corresponding java.time.Date object."}, {"ID": 1297, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected boolean isExpired(OAuthProviderTokenImpl authToken) { if (authToken.isAccessToken()) { if ((authToken.getTimestamp() + (getAccessTokenValiditySeconds() * 1000L)) < System.currentTimeMillis()) { return true; } } else { if ((authToken.getTimestamp() + (getRequestTokenValiditySeconds() * 1000L)) < System.currentTimeMillis()) { return true; } } return false; }\n\n    ### Response: Whether the auth token is expired.\n\n@param authToken The auth token to check for expiration.\n@return Whether the auth token is expired..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Calendar toCalendar(final LocalDateTime localDateTime) { return GregorianCalendar.from(ZonedDateTime.of(localDateTime, ZoneId.systemDefault())); }\n\n    ### Response:", "ground_truth": "Converts local date time to Calendar.", "predict": "The function converts the given LocalDateTime to its corresponding Calendar object with ZoneId of ZoneOffset(0)."}, {"ID": 1298, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_square_axes_limits(coords, margin=0.05): \"\"\"Return N-dimensional square's limits ## Arguments # 'coords': list of coordinates of poins to be plotted # 'margin': margin to be added from boundaries of the square. - 'margin' can be negative if one wants to reduce the square size. ## Example if 'coords' was given as [x,y,z], then the resulting square's limits are given by: (xlim, ylim, zlim) where, xlim == (x_mid - max_width, x_mid + max_width) ylim == (y_mid - max_width, y_mid + max_width) zlim == (z_mid - max_width, z_mid + max_width) x_mid = 0.5 * (min(x) + max(x)) (and so on) max_width = max([x_width, y_width, z_width]) where x_width = 0.5 * (max(x) - min(x)) (and so on) \"\"\" #coords = [x,y,z] try: coords = [np.array(coord) for coord in coords] except: raise Exception(\"Failed to convert elements of 'coords' into numpy.array\") lims = [(coord.min(), coord.max()) for coord in coords] mids = [0.5 * (lim[0] + lim[1]) for lim in lims] widths = [0.5 * (lim[1] - lim[0]) for lim in lims] max_width = max(widths) max_width += max_width * margin ax_lims = tuple((mid - max_width, mid + max_width) for mid in mids) #xlim, ylim, zlim = ax_lims return ax_lims\n\n    ### Response: Return N-dimensional square's limits\n\n    ## Arguments\n    # 'coords': list of coordinates of poins to be plotted\n    # 'margin': margin to be added from boundaries of the square.\n    - 'margin' can be negative if one wants to reduce the square size.\n\n    ## Example\n    if 'coords' was given as [x,y,z],\n\n    then the resulting square's limits are given by:\n\n    (xlim, ylim, zlim)\n\n    where,\n\n    xlim == (x_mid - max_width, x_mid + max_width)\n    ylim == (y_mid - max_width, y_mid + max_width)\n    zlim == (z_mid - max_width, z_mid + max_width)\n\n    x_mid = 0.5 * (min(x) + max(x)) (and so on)\n\n    max_width = max([x_width, y_width, z_width])\n\n    where x_width = 0.5 * (max(x) - min(x)) (and so on).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Class defineProxy(final Class target) { ProxyProxettaFactory builder = proxetta.proxy(); builder.setTarget(target); return builder.define(); }\n\n    ### Response:", "ground_truth": "Generates new class.", "predict": "Defines a proxy for the given target class to enable intercepting its method invocations and fields modifications"}, {"ID": 1299, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def free_function( self, name=None, function=None, return_type=None, arg_types=None, header_dir=None, header_file=None, recursive=None): \"\"\" Returns reference to free function declaration that matches a defined criteria. \"\"\" return ( self._find_single( scopedef.scopedef_t._impl_matchers[namespace_t.free_function], name=name, function=function, decl_type=self._impl_decl_types[namespace_t.free_function], return_type=return_type, arg_types=arg_types, header_dir=header_dir, header_file=header_file, recursive=recursive) )\n\n    ### Response: Returns reference to free function declaration that matches\n        a defined criteria..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void add(final Check check) { String name = check.getName(); List<Check> list = map.computeIfAbsent(name, k -> new ArrayList<>()); list.add(check); }\n\n    ### Response:", "ground_truth": "Adds validation checks.", "predict": "\n    //Returns reference to free function declaration that matches defined criteria\n    public void add(Check check) {\n    //Returns reference to free function declaration that matches defined criteria\n    CheckName checkName; //CheckName can be defined globally or locally, depending on usage\n    List<Check> checkList; //Check can be defined globally or locally, depending on usage\n    CheckName checkName; //CheckName can be defined globally or locally, depending on usage\n    List<Check> checkList; //Check can be defined globally or locally, depending on usage\n    CheckName checkName; //CheckName can be defined globally or locally, depending on usage\n    List<Check> checkList; //Check can be defined globally or locally, depending on usage\n    CheckName checkName; //CheckName can be defined globally or locally, depending on usage\n    List<Check> checkList; //Check can be defined globally or locally, depending on usage\n    CheckName checkName"}, {"ID": 1300, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function createOptimizerSearchContainerTable(SchemaSetupInterface $setup) { if (!$setup->getConnection()->isTableExists($setup->getTable(OptimizerInterface::TABLE_NAME_SEARCH_CONTAINER))) { $table = $setup->getConnection() ->newTable($setup->getTable(OptimizerInterface::TABLE_NAME_SEARCH_CONTAINER)) ->addColumn( OptimizerInterface::OPTIMIZER_ID, \\Magento\\Framework\\DB\\Ddl\\Table::TYPE_SMALLINT, null, ['nullable' => false, 'primary' => true], 'Optimizer ID' ) ->addColumn( OptimizerInterface::SEARCH_CONTAINER, \\Magento\\Framework\\DB\\Ddl\\Table::TYPE_TEXT, 255, ['nullable' => false, 'primary' => true], 'Search Container' ) ->addColumn( 'apply_to', \\Magento\\Framework\\DB\\Ddl\\Table::TYPE_BOOLEAN, null, ['nullable' => false, 'default' => 0], 'If this optimizer applies to specific entities or not.' ) ->addIndex( $setup->getIdxName(OptimizerInterface::TABLE_NAME, [OptimizerInterface::SEARCH_CONTAINER]), [OptimizerInterface::SEARCH_CONTAINER] ) ->addForeignKey( $setup->getFkName( OptimizerInterface::TABLE_NAME_SEARCH_CONTAINER, OptimizerInterface::OPTIMIZER_ID, OptimizerInterface::TABLE_NAME, OptimizerInterface::OPTIMIZER_ID ), OptimizerInterface::OPTIMIZER_ID, $setup->getTable(OptimizerInterface::TABLE_NAME), OptimizerInterface::OPTIMIZER_ID, \\Magento\\Framework\\DB\\Ddl\\Table::ACTION_CASCADE ) ->setComment('Query type per optimizer table'); $setup->getConnection()->createTable($table); } }\n\n    ### Response: Create Optimizer Query table.\n\n@param \\Magento\\Framework\\Setup\\SchemaSetupInterface $setup Setup instance.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ValidationContext resolveFor(final Class<?> target) { ValidationContext vc = new ValidationContext(); vc.addClassChecks(target); return vc; }\n\n    ### Response:", "ground_truth": "Resolve validation context for provided target class.\n@see #addClassChecks(Class)", "predict": "Resolves and applies validations context for given target Class."}, {"ID": 1301, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void executeQueuedCallbacks() { if (VERBOSE) Log.i(TAG, String.format(\"Executing %d queued callbacks\", mCallbackQueue.size())); for (OAuthCallback cb : mCallbackQueue) { cb.onSuccess(getRequestFactoryFromCachedCredentials()); } }\n\n    ### Response: Execute queued callbacks once valid OAuth\ncredentials are acquired..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void addClassChecks(final Class target) { final List<Check> list = cache.get(target, () -> { final List<Check> newList = new ArrayList<>(); final ClassDescriptor cd = ClassIntrospector.get().lookup(target); final PropertyDescriptor[] allProperties = cd.getAllPropertyDescriptors(); for (PropertyDescriptor propertyDescriptor : allProperties) { collectPropertyAnnotationChecks(newList, propertyDescriptor); } return newList; }); addAll(list); }\n\n    ### Response:", "ground_truth": "Parses class annotations and adds all checks.\n@see #resolveFor(Class)", "predict": "Adds checks to the given target class from its annotations, during construction of the target and during run time of the target"}, {"ID": 1302, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def make_exporter_resources(nb_name, out_folder, images_folder=None): \"\"\" Creates resources dict for the exporter \"\"\" resources = defaultdict(str) resources['metadata'] = defaultdict(str) resources['metadata']['name'] = nb_name resources['metadata']['path'] = out_folder # This results in images like AB_5_1.png for a notebook called AB.ipynb resources['unique_key'] = nb_name resources['output_files_dir'] = images_folder return resources\n\n    ### Response: Creates resources dict for the exporter.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void collectPropertyAnnotationChecks(final List<Check> annChecks, final PropertyDescriptor propertyDescriptor) { FieldDescriptor fd = propertyDescriptor.getFieldDescriptor(); if (fd != null) { Annotation[] annotations = fd.getField().getAnnotations(); collectAnnotationChecks(annChecks, propertyDescriptor.getType(), propertyDescriptor.getName(), annotations); } MethodDescriptor md = propertyDescriptor.getReadMethodDescriptor(); if (md != null) { Annotation[] annotations = md.getMethod().getAnnotations(); collectAnnotationChecks(annChecks, propertyDescriptor.getType(), propertyDescriptor.getName(), annotations); } md = propertyDescriptor.getWriteMethodDescriptor(); if (md != null) { Annotation[] annotations = md.getMethod().getAnnotations(); collectAnnotationChecks(annChecks, propertyDescriptor.getType(), propertyDescriptor.getName(), annotations); } }\n\n    ### Response:", "ground_truth": "Process all annotations of provided properties.", "predict": "\n    The method generates annotations for fields and methods of the given PropertyDescriptor to add annotations for the annotations defined on fields and methods of the given PropertyDescriptor to the given list of annotations annChecks to enforce the annotations defined in the fields and methods of the PropertyDescriptor to be added to the annotations of the fields and methods of the given PropertyDescriptor to ensure proper functioning of the annotations defined in fields and methods of the PropertyDescriptor during the code coverage of the annotations defined in fields and methods of the PropertyDescriptor during code coverage of the annotations defined in fields and methods of the PropertyDescriptor during code coverage of the annotations defined in fields and methods of the PropertyDescriptor during code coverage of the annotations defined in fields and methods of the PropertyDescriptor during code coverage of the annotations defined in fields and methods of the PropertyDescriptor during code coverage of the annotations defined in fields and methods of the PropertyDescriptor during code coverage of the annotations defined in fields and methods of the PropertyDescriptor during code coverage of the annotations defined in fields and methods of the PropertyDescriptor during code coverage of the annotations defined"}, {"ID": 1303, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function generateTermsOfUsePdf($customer) { $this->set('customer', $customer); $this->set('saveParam', 'I'); $this->RequestHandler->renderAs($this, 'pdf'); return $this->render('generateTermsOfUsePdf'); }\n\n    ### Response: generates pdf on-the-fly.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"unchecked\"}) protected void collectAnnotationChecks(final List<Check> annChecks, final Class targetType, final String targetName, final Annotation[] annotations) { for (Annotation annotation : annotations) { Constraint c = annotation.annotationType().getAnnotation(Constraint.class); Class<? extends ValidationConstraint> constraintClass; if (c == null) { // if constraint is not available, try lookup String constraintClassName = annotation.annotationType().getName() + \"Constraint\"; try { constraintClass = ClassLoaderUtil.loadClass(constraintClassName, this.getClass().getClassLoader()); } catch (ClassNotFoundException ingore) { continue; } } else { constraintClass = c.value(); } ValidationConstraint vc; try { vc = newConstraint(constraintClass, targetType); } catch (Exception ex) { throw new VtorException(\"Invalid constraint: \" + constraintClass.getClass().getName(), ex); } vc.configure(annotation); Check check = new Check(targetName, vc); copyDefaultCheckProperties(check, annotation); annChecks.add(check); } }\n\n    ### Response:", "ground_truth": "Collect annotations for some target.", "predict": "generates annotation constraint and checks for target Class and annotations of the constraint during collection of annotations of the targetClass to add to the list of constraint annotations of the targetClass to add to the list of constraint annotations of the targetClass to add to the list of constraint annotations of the targetClass to add to the list of constraint annotations of the targetClass to add to the list of constraint annotations of the targetClass to add to the list of constraint annotations of the targetClass to add to the list of constraint annotations of the targetClass to add to the list of constraint annotations of the targetClass to add to the list of constraint annotations of the targetClass to add to the list of constraint annotations of the targetClass to add to the list of constraint annotations of the targetClass to add to the list of constraint annotations of the targetClass to add to the list of constraint annotations of the targetClass to add to the list of constraint annotations of the targetClass to add to the list of constraint annotations of the targetClass to add to the list of constraint annotations of the targetClass to add to"}, {"ID": 1304, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func remoteTimeout(t crossdock.T, dispatcher *yarpc.Dispatcher) { assert := crossdock.Assert(t) token := random.Bytes(5) _, _, err := rawCall(dispatcher, nil, \"handlertimeout/raw\", token) if skipOnConnRefused(t, err) { return } if !assert.Error(err, \"expected an error\") { return } if yarpcerrors.FromError(err).Code() == yarpcerrors.CodeInvalidArgument { t.Skipf(\"handlertimeout/raw procedure not implemented: %v\", err) return } assert.Equal(yarpcerrors.CodeDeadlineExceeded, yarpcerrors.FromError(err).Code(), \"is an error with code CodeDeadlineExceeded: %v\", err) }\n\n    ### Response: // remoteTimeout tests if a yarpc client returns a remote timeout error behind\n// the TimeoutError interface when a remote tchannel handler returns a handler\n// timeout..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void copyDefaultCheckProperties(final Check destCheck, final Annotation annotation) { Integer severity = (Integer) ClassUtil.readAnnotationValue(annotation, ANN_SEVERITY); destCheck.setSeverity(severity.intValue()); String[] profiles = (String[]) ClassUtil.readAnnotationValue(annotation, ANN_PROFILES); destCheck.setProfiles(profiles); String message = (String) ClassUtil.readAnnotationValue(annotation, ANN_MESSAGE); destCheck.setMessage(message); }\n\n    ### Response:", "ground_truth": "Copies default properties from annotation to the check.", "predict": "// This method reads the annotations on the Check class to determine\n// its configuration properties such as severity, profiles and message."}, {"ID": 1305, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean resolveAllRenditions(Media media, Asset asset, MediaArgs mediaArgs) { boolean allMandatory = mediaArgs.isMediaFormatsMandatory(); boolean allResolved = true; boolean anyResolved = false; List<Rendition> resolvedRenditions = new ArrayList<>(); for (MediaFormat mediaFormat : mediaArgs.getMediaFormats()) { MediaArgs renditionMediaArgs = mediaArgs.clone(); renditionMediaArgs.mediaFormat(mediaFormat); renditionMediaArgs.mediaFormatsMandatory(false); Rendition rendition = asset.getRendition(renditionMediaArgs); if (rendition != null) { resolvedRenditions.add(rendition); anyResolved = true; } else { allResolved = false; } } media.setRenditions(resolvedRenditions); if (!resolvedRenditions.isEmpty()) { media.setUrl(resolvedRenditions.get(0).getUrl()); } if (allMandatory) { return allResolved; } else { return anyResolved; } }\n\n    ### Response: Iterates over all defined media format and tries to find a matching rendition for each of them\nin combination with the other media args.\n@param media Media\n@param asset Asset\n@param mediaArgs Media args\n@return true if for all mandatory or for at least one media formats a rendition could be found..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static String encodeUriComponent(final String source, final String encoding, final URIPart uriPart) { if (source == null) { return null; } byte[] bytes = encodeBytes(StringUtil.getBytes(source, encoding), uriPart); char[] chars = new char[bytes.length]; for (int i = 0; i < bytes.length; i++) { chars[i] = (char) bytes[i]; } return new String(chars); }\n\n    ### Response:", "ground_truth": "Encodes single URI component.", "predict": "This method converts a given source to its corresponding UTF8 representation and encodes it to its corresponding HTTP Part, given its URI Part"}, {"ID": 1306, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (form FormImpl) Render(ws *websocket.Conn, app *App, params []string) error { log.Println(\"FormImpl Render\") return nil }\n\n    ### Response: //Render form start.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String encode(final String string, final String encoding) { return encodeUriComponent(string, encoding, URIPart.UNRESERVED); }\n\n    ### Response:", "ground_truth": "Encodes string using default RFCP rules.", "predict": "//encode URI component of string start."}, {"ID": 1307, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(db) { var views_uuid = uuid(); debug.assert(views_uuid).is('uuid'); return db.query('CREATE SEQUENCE views_seq') .query(['CREATE TABLE IF NOT EXISTS views (', \" id uuid PRIMARY KEY NOT NULL default uuid_generate_v5('\"+views_uuid+\"', nextval('views_seq'::regclass)::text),\", ' types_id uuid REFERENCES types,', ' type text NOT NULL,', ' name text NOT NULL,', ' meta json NOT NULL,', ' active BOOLEAN NOT NULL DEFAULT TRUE,', ' created timestamptz NOT NULL default now(),', ' modified timestamptz NOT NULL default now()', ')' ].join('\\n')) .query('ALTER SEQUENCE views_seq OWNED BY views.id') .query('CREATE INDEX views_types_id ON views (types_id)') .query('CREATE INDEX views_types_id_name ON views (types_id,name)') .query('CREATE INDEX views_type ON views (type)') .query('CREATE INDEX views_type_name ON views (type,name)') .query('CREATE UNIQUE INDEX ON views USING btree(types_id, name);') .query('CREATE TRIGGER views_modified BEFORE UPDATE ON views FOR EACH ROW EXECUTE PROCEDURE moddatetime (modified)') ; }\n\n    ### Response: The views table.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String encodeScheme(final String scheme, final String encoding) { return encodeUriComponent(scheme, encoding, URIPart.SCHEME); }\n\n    ### Response:", "ground_truth": "Encodes the given URI scheme with the given encoding.", "predict": "The function generates a normalized URI component for the given schemes/encodings."}, {"ID": 1308, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (api *API) GetNodeInfo() (*GetNodeInfoResponse, error) { cmd := &GetNodeInfoCommand{Command: Command{GetNodeInfoCmd}} rsp := &GetNodeInfoResponse{} if err := api.provider.Send(cmd, rsp); err != nil { return nil, err } return rsp, nil }\n\n    ### Response: // GetNodeInfo returns information about the connected node..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String encodeHost(final String host, final String encoding) { return encodeUriComponent(host, encoding, URIPart.HOST); }\n\n    ### Response:", "ground_truth": "Encodes the given URI host with the given encoding.", "predict": "// This method encodes the given host string to be used in the query string of a url. It uses the given encoding for parameter values in the query string to avoid mis-interpreatation of non-ASCII values in the url path."}, {"ID": 1309, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function translateLayout(LayoutInterface $template, $locale, TranslatorInterface $translator = null) { if (null === $template->getTranslationDomain()) { $template = $template->getTranslation($locale); } elseif (null !== $translator) { static::injectTranslatorValues($translator, $template); } return $template; }\n\n    ### Response: Translate the layout template with the translator.\n\n@param LayoutInterface          $template   The template\n@param string                   $locale     The locale\n@param null|TranslatorInterface $translator The translator\n\n@return LayoutInterface.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String encodePort(final String port, final String encoding) { return encodeUriComponent(port, encoding, URIPart.PORT); }\n\n    ### Response:", "ground_truth": "Encodes the given URI port with the given encoding.", "predict": "The function generates a HTTP-friendly string for the given port. It uses the given encoding to convert the port to its corresponding HTTP-friendly string."}, {"ID": 1310, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Convert_v1_APIServiceList_To_apiregistration_APIServiceList(in *APIServiceList, out *apiregistration.APIServiceList, s conversion.Scope) error { return autoConvert_v1_APIServiceList_To_apiregistration_APIServiceList(in, out, s) }\n\n    ### Response: // Convert_v1_APIServiceList_To_apiregistration_APIServiceList is an autogenerated conversion function..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String encodePath(final String path, final String encoding) { return encodeUriComponent(path, encoding, URIPart.PATH); }\n\n    ### Response:", "ground_truth": "Encodes the given URI path with the given encoding.", "predict": "//encodePath() encodes the given path string to the given encoding and returns the encoded path string.."}, {"ID": 1311, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function bulkUploadField($gridField) { $fileRelationName = $this->getFileRelationName($gridField); $fieldName = $fileRelationName . '_' . $this->getRecordClassName($gridField) . '_BU'; $uploadField = BulkUploadField::create($gridField, $fieldName, '') ->setForm($gridField->getForm()) ->setRecord(DataObject::create()) // avoid UploadField to get auto-config from the Page (e.g fix allowedMaxFileNumber) ; //UploadField setup foreach ($this->ufSetup as $fn => $param) { $uploadField->{$fn}($param); } $schema['data']['createFileEndpoint'] = [ 'url' => $gridField->Link('bulkupload/upload'), 'method' => 'post', 'payloadFormat' => 'urlencoded', ]; $schema['data']['attachFileEndpoint'] = [ 'url' => $gridField->Link('bulkupload/attach'), 'method' => 'post' ]; $uploadField->setSchemaData($schema); return $uploadField; }\n\n    ### Response: Returned a configured UploadField instance\nembedded in the gridfield heard.\n\n@param GridField $gridField Current GridField\n\n@return UploadField Configured UploadField instance.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String encodeQuery(final String query, final String encoding) { return encodeUriComponent(query, encoding, URIPart.QUERY); }\n\n    ### Response:", "ground_truth": "Encodes the given URI query with the given encoding.", "predict": "The function generates a query string from the given input string and stores it in the output string parameter"}, {"ID": 1312, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getOrderedNumber() { $orderedProductsNumber = Order::find()->select('count')->joinWith('orderProducts')->where(['product_id' => $this->id])->sum('count'); return $orderedProductsNumber ?? 0; }\n\n    ### Response: Gets number of units that have already bought.\n@return int|mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String encodeQueryParam(final String queryParam, final String encoding) { return encodeUriComponent(queryParam, encoding, URIPart.QUERY_PARAM); }\n\n    ### Response:", "ground_truth": "Encodes the given URI query parameter with the given encoding.", "predict": "Stores the given query parameter in the form of a normalized string suitable for use in a querystring."}, {"ID": 1313, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def Convert(self, values, start_index=0, end_index=None): \"\"\"Converts given collection to exported values. This method uses a threadpool to do the conversion in parallel. It blocks for up to one hour until everything is converted. Args: values: Iterable object with values to convert. start_index: Start from this index in the collection. end_index: Finish processing on the (index - 1) element of the collection. If None, work till the end of the collection. Returns: Nothing. ConvertedBatch() should handle the results. \"\"\" if not values: return try: total_batch_count = len(values) // self.batch_size except TypeError: total_batch_count = -1 pool = ThreadPool.Factory(self.threadpool_prefix, self.threadpool_size) val_iterator = itertools.islice(values, start_index, end_index) pool.Start() try: for batch_index, batch in enumerate( collection.Batch(val_iterator, self.batch_size)): logging.debug(\"Processing batch %d out of %d\", batch_index, total_batch_count) pool.AddTask( target=self.ConvertBatch, args=(batch,), name=\"batch_%d\" % batch_index, inline=False) finally: pool.Stop(join_timeout=3600)\n\n    ### Response: Converts given collection to exported values.\n\n    This method uses a threadpool to do the conversion in parallel. It\n    blocks for up to one hour until everything is converted.\n\n    Args:\n      values: Iterable object with values to convert.\n      start_index: Start from this index in the collection.\n      end_index: Finish processing on the (index - 1) element of the collection.\n        If None, work till the end of the collection.\n\n    Returns:\n      Nothing. ConvertedBatch() should handle the results..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String encodeFragment(final String fragment, final String encoding) { return encodeUriComponent(fragment, encoding, URIPart.FRAGMENT); }\n\n    ### Response:", "ground_truth": "Encodes the given URI fragment with the given encoding.", "predict": "\n    The function generates an HTTP fragment from the given fragment string and given encoding string. The HTTP fragment contains just the fragment part of the given url, i.e, after the # symbol. It uses the given encoding to convert the fragment to its corresponding character codes and then encodes it to generate an HTTP-friendly fragment with the # symbol replaced by ''. The returned string can be used in the request line of a GET request to retrieve the given fragment of the url."}, {"ID": 1314, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def select_param(param_name, default=None): \"\"\" Returns an effect that drops the current value and returns the parameter with the specified name instead, or the specified default value if the parameter is not specified. \"\"\" def select_param(_value, _context, **params): return params.pop(param_name, default) return select_param\n\n    ### Response: Returns an effect that drops the current value and returns the parameter\n    with the specified name instead, or the specified default value if the\n    parameter is not specified..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected HashMap<String, PropertyDescriptor> inspectProperties() { boolean scanAccessible = classDescriptor.isScanAccessible(); Class type = classDescriptor.getType(); HashMap<String, PropertyDescriptor> map = new HashMap<>(); Method[] methods = scanAccessible ? ClassUtil.getAccessibleMethods(type) : ClassUtil.getSupportedMethods(type); for (int iteration = 0; iteration < 2; iteration++) { // first find the getters, and then the setters! for (Method method : methods) { if (Modifier.isStatic(method.getModifiers())) { continue; // ignore static methods } boolean add = false; boolean issetter = false; String propertyName; if (iteration == 0) { propertyName = ClassUtil.getBeanPropertyGetterName(method); if (propertyName != null) { add = true; issetter = false; } } else { propertyName = ClassUtil.getBeanPropertySetterName(method); if (propertyName != null) { add = true; issetter = true; } } if (add) { MethodDescriptor methodDescriptor = classDescriptor.getMethodDescriptor(method.getName(), method.getParameterTypes(), true); addProperty(map, propertyName, methodDescriptor, issetter); } } } if (classDescriptor.isIncludeFieldsAsProperties()) { FieldDescriptor[] fieldDescriptors = classDescriptor.getAllFieldDescriptors(); String[] prefix = classDescriptor.getPropertyFieldPrefix(); for (FieldDescriptor fieldDescriptor : fieldDescriptors) { Field field = fieldDescriptor.getField(); if (Modifier.isStatic(field.getModifiers())) { continue; // ignore static fields } String name = field.getName(); if (prefix != null) { for (String p : prefix) { if (!name.startsWith(p)) { continue; } name = name.substring(p.length()); break; } } if (!map.containsKey(name)) { // add missing field as a potential property map.put(name, createPropertyDescriptor(name, fieldDescriptor)); } } } return map; }\n\n    ### Response:", "ground_truth": "Inspects all properties of target type.", "predict": "\n    The inspectProperties() method scans the given class for fields and methods to determine if any of its fields or methods are bean attributes or bean setters and field getters of other fields of the bean. It creates a Map of fields and fields of other fields to the bean attributes and bean setters of these fields of other fields of the bean to add these fields to the bean attributes Map of the bean for reflection-based getters and setters of fields of the bean to add these fields to the bean attributes Map of the bean for reflection-based getters and setters of fields of other fields of the bean to add these fields to the bean attributes Map of the bean for reflection-based getters and setters of fields of the bean to add these fields to the bean attributes Map of the bean for reflection-based getters and setters of fields of other fields of the bean to add these fields to the bean attributes Map of the bean for reflection-based getters and setters of fields of the bean to add these fields to the bean attributes Map"}, {"ID": 1315, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def projection(table, exprs): \"\"\" Compute new table expression with the indicated column expressions from this table. Parameters ---------- exprs : column expression, or string, or list of column expressions and strings. If strings passed, must be columns in the table already Returns ------- projection : TableExpr Notes ----- Passing an aggregate function to this method will broadcast the aggregate's value over the number of rows in the table. See the examples section for more details. Examples -------- Simple projection >>> import ibis >>> fields = [('a', 'int64'), ('b', 'double')] >>> t = ibis.table(fields, name='t') >>> proj = t.projection([t.a, (t.b + 1).name('b_plus_1')]) >>> proj # doctest: +NORMALIZE_WHITESPACE ref_0 UnboundTable[table] name: t schema: a : int64 b : float64 <BLANKLINE> Selection[table] table: Table: ref_0 selections: a = Column[int64*] 'a' from table ref_0 b_plus_1 = Add[float64*] left: b = Column[float64*] 'b' from table ref_0 right: Literal[int8] 1 >>> proj2 = t[t.a, (t.b + 1).name('b_plus_1')] >>> proj.equals(proj2) True Aggregate projection >>> agg_proj = t[t.a.sum().name('sum_a'), t.b.mean().name('mean_b')] >>> agg_proj # doctest: +NORMALIZE_WHITESPACE, +ELLIPSIS ref_0 UnboundTable[table] name: t schema: a : int64 b : float64 <BLANKLINE> Selection[table] table: Table: ref_0 selections: sum_a = WindowOp[int64*] sum_a = Sum[int64] a = Column[int64*] 'a' from table ref_0 where: None <ibis.expr.window.Window object at 0x...> mean_b = WindowOp[float64*] mean_b = Mean[float64] b = Column[float64*] 'b' from table ref_0 where: None <ibis.expr.window.Window object at 0x...> Note the ``<ibis.expr.window.Window>`` objects here, their existence means that the result of the aggregation will be broadcast across the number of rows in the input column. The purpose of this expression rewrite is to make it easy to write column/scalar-aggregate operations like .. code-block:: python t[(t.a - t.a.mean()).name('demeaned_a')] \"\"\" import ibis.expr.analysis as L if isinstance(exprs, (Expr, str)): exprs = [exprs] projector = L.Projector(table, exprs) op = projector.get_result() return op.to_expr()\n\n    ### Response: Compute new table expression with the indicated column expressions from\n    this table.\n\n    Parameters\n    ----------\n    exprs : column expression, or string, or list of column expressions and\n      strings. If strings passed, must be columns in the table already\n\n    Returns\n    -------\n    projection : TableExpr\n\n    Notes\n    -----\n    Passing an aggregate function to this method will broadcast the aggregate's\n    value over the number of rows in the table. See the examples section for\n    more details.\n\n    Examples\n    --------\n    Simple projection\n\n    >>> import ibis\n    >>> fields = [('a', 'int64'), ('b', 'double')]\n    >>> t = ibis.table(fields, name='t')\n    >>> proj = t.projection([t.a, (t.b + 1).name('b_plus_1')])\n    >>> proj  # doctest: +NORMALIZE_WHITESPACE\n    ref_0\n    UnboundTable[table]\n      name: t\n      schema:\n        a : int64\n        b : float64\n    \n    Selection[table]\n      table:\n        Table: ref_0\n      selections:\n        a = Column[int64*] 'a' from table\n          ref_0\n        b_plus_1 = Add[float64*]\n          left:\n            b = Column[float64*] 'b' from table\n              ref_0\n          right:\n            Literal[int8]\n              1\n    >>> proj2 = t[t.a, (t.b + 1).name('b_plus_1')]\n    >>> proj.equals(proj2)\n    True\n\n    Aggregate projection\n\n    >>> agg_proj = t[t.a.sum().name('sum_a'), t.b.mean().name('mean_b')]\n    >>> agg_proj  # doctest: +NORMALIZE_WHITESPACE, +ELLIPSIS\n    ref_0\n    UnboundTable[table]\n      name: t\n      schema:\n        a : int64\n        b : float64\n    \n    Selection[table]\n      table:\n        Table: ref_0\n      selections:\n        sum_a = WindowOp[int64*]\n          sum_a = Sum[int64]\n            a = Column[int64*] 'a' from table\n              ref_0\n            where:\n              None\n          \n        mean_b = WindowOp[float64*]\n          mean_b = Mean[float64]\n            b = Column[float64*] 'b' from table\n              ref_0\n            where:\n              None\n          \n\n    Note the ```` objects here, their existence means\n    that the result of the aggregation will be broadcast across the number of\n    rows in the input column. The purpose of this expression rewrite is to make\n    it easy to write column/scalar-aggregate operations like\n\n    .. code-block:: python\n\n       t[(t.a - t.a.mean()).name('demeaned_a')].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public PropertyDescriptor[] getAllPropertyDescriptors() { if (allProperties == null) { PropertyDescriptor[] allProperties = new PropertyDescriptor[propertyDescriptors.size()]; int index = 0; for (PropertyDescriptor propertyDescriptor : propertyDescriptors.values()) { allProperties[index] = propertyDescriptor; index++; } Arrays.sort(allProperties, new Comparator<PropertyDescriptor>() { @Override public int compare(final PropertyDescriptor pd1, final PropertyDescriptor pd2) { return pd1.getName().compareTo(pd2.getName()); } }); this.allProperties = allProperties; } return allProperties; }\n\n    ### Response:", "ground_truth": "Returns all property descriptors.\nProperties are sorted by name.", "predict": "Get all PropertyDescriptors of this MBean."}, {"ID": 1316, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func newApp() *todoApp { result := &todoApp{} //init the list, setting our own object as the joiner (we meet //the interface Joiner) result.todos = s5.NewList(result) //create initial values of attributes result.numNotDone = s5.NewIntegerSimple(0) result.plural = s5.NewStringSimple(\"\") result.someDone = s5.NewBooleanSimple(false) result.numDone = s5.NewIntegerSimple(0) //done create app object return result }\n\n    ### Response: //newApp creates a new instance of the application object, properly\n//initialized.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Cookie[] cookies() { List<String> newCookies = headers(\"set-cookie\"); if (newCookies == null) { return new Cookie[0]; } List<Cookie> cookieList = new ArrayList<>(newCookies.size()); for (String cookieValue : newCookies) { try { Cookie cookie = new Cookie(cookieValue); cookieList.add(cookie); } catch (Exception ex) { // ignore } } return cookieList.toArray(new Cookie[0]); }\n\n    ### Response:", "ground_truth": "Returns list of valid cookies sent from server.\nIf no cookie found, returns an empty array. Invalid cookies are ignored.", "predict": "//This method reads the \"set-cookie\" header of the request, and creates an //array of Cookie objects to add to the response objects."}, {"ID": 1317, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_signature(func): \"\"\" Gathers information about the call signature of `func`. \"\"\" code = func.__code__ # Names of regular parameters parameters = tuple(code.co_varnames[:code.co_argcount]) # Flags has_varargs = bool(code.co_flags & inspect.CO_VARARGS) has_varkw = bool(code.co_flags & inspect.CO_VARKEYWORDS) has_kwonly = bool(code.co_kwonlyargcount) # A mapping of parameter names to default values default_values = func.__defaults__ or () defaults = dict(zip(parameters[-len(default_values):], default_values)) # Type annotations for all parameters type_hints = typing.get_type_hints(func) if typing else func.__annotations__ types = tuple(normalize_type(type_hints.get(param, AnyType)) for param in parameters) # Type annotations for required parameters required = types[:-len(defaults)] if defaults else types # Complexity complexity = tuple(map(type_complexity, types)) if typing else None return Signature(parameters, types, complexity, defaults, required, has_varargs, has_varkw, has_kwonly)\n\n    ### Response: Gathers information about the call signature of `func`..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpResponse unzip() { String contentEncoding = contentEncoding(); if (contentEncoding != null && contentEncoding().equals(\"gzip\")) { if (body != null) { headerRemove(HEADER_CONTENT_ENCODING); try { ByteArrayInputStream in = new ByteArrayInputStream(body.getBytes(StringPool.ISO_8859_1)); GZIPInputStream gzipInputStream = new GZIPInputStream(in); ByteArrayOutputStream out = new ByteArrayOutputStream(); StreamUtil.copy(gzipInputStream, out); body(out.toString(StringPool.ISO_8859_1)); } catch (IOException ioex) { throw new HttpException(ioex); } } } return this; }\n\n    ### Response:", "ground_truth": "Unzips GZip-ed body content, removes the content-encoding header\nand sets the new content-length value.", "predict": "The method unzip() extracts the gzip compressed contents of the given request body if its Content-Encoding header indicates gzip compression. If no Content-Encoding header is given or its value does not match gzip, or if the request body is null, then no compression is performed and its original state is preserved in the output stream of this method."}, {"ID": 1318, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function open($filename) { $pathInfo = pathinfo($filename); if (!key_exists('extension', $pathInfo) || !in_array($pathInfo['extension'], $this->settings->getExtraFiletypes())) { parent::open($filename); } }\n\n    ### Response: Open image for processing\n\n@param string $filename\n@return void\n@throws \\OverflowException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpResponse close() { HttpConnection httpConnection = httpRequest.httpConnection; if (httpConnection != null) { httpConnection.close(); httpRequest.httpConnection = null; } return this; }\n\n    ### Response:", "ground_truth": "Closes requests connection if it was open.\nShould be called when using keep-alive connections.\nOtherwise, connection will be already closed.", "predict": "Closes the Http Request"}, {"ID": 1319, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected final void writeBEInt(int v) throws IOException { ensureAvailableBytes(4); this.buffer.order(ByteOrder.BIG_ENDIAN); this.buffer.putInt(v); }\n\n    ### Response: Write a big endian 4-byte integer.\n\n@param v is a big endian 4-byte integer.\n@throws IOException in case of error..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public boolean accept(final Scope referenceScope) { Class<? extends Scope> refScopeType = referenceScope.getClass(); if (refScopeType == ProtoScope.class) { return true; } if (refScopeType == SingletonScope.class) { return true; } if (refScopeType == ThreadLocalScope.class) { return true; } return false; }\n\n    ### Response:", "ground_truth": "Defines allowed referenced scopes that can be injected into the\nthread-local scoped bean.", "predict": "Override the default behavior of ScopeFilter and determine whether the given Scope matches the given ScopeType"}, {"ID": 1320, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function hasIterator($obj) { $hasIterator = false; foreach ($obj as $key => $dummy) { $hasIterator = true; break; } return $hasIterator; }\n\n    ### Response: Check that object have iterator\n\n@param Object $obj\n@return bool $hasIterator.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void printRoutes(final int width) { final ActionsManager actionsManager = webApp.madvocContainer().lookupComponent(ActionsManager.class); final List<ActionRuntime> actions = actionsManager.getAllActionRuntimes(); final Map<String, String> aliases = actionsManager.getAllAliases(); if (actions.isEmpty()) { return; } final Print print = new Print(); print.line(\"Routes\", width); actions.stream() .sorted(Comparator.comparing( actionRuntime -> actionRuntime.getActionPath() + ' ' + actionRuntime.getActionMethod())) .forEach(ar -> { final String actionMethod = ar.getActionMethod(); print.out(Chalk256.chalk().yellow(), actionMethod == null ? \"*\" : actionMethod, 7); print.space(); final String signature = ClassUtil.getShortClassName( ProxettaUtil.resolveTargetClass(ar.getActionClass()), 2) + '#' + ar.getActionClassMethod().getName(); print.outLeftRightNewLine( Chalk256.chalk().green(), ar.getActionPath(), Chalk256.chalk().blue(), signature, width - 7 - 1 ); }); if (!aliases.isEmpty()) { print.line(\"Aliases\", width); actions.stream() .sorted(Comparator.comparing( actionRuntime -> actionRuntime.getActionPath() + ' ' + actionRuntime.getActionMethod())) .forEach(ar -> { final String actionPath = ar.getActionPath(); for (final Map.Entry<String, String> entry : aliases.entrySet()) { if (entry.getValue().equals(actionPath)) { print.space(8); print.outLeftRightNewLine( Chalk256.chalk().green(), entry.getValue(), Chalk256.chalk().blue(), entry.getKey(), width - 8 ); } } }); } print.line(width); }\n\n    ### Response:", "ground_truth": "Prints routes to console.", "predict": "Print routed and aliases of objects"}, {"ID": 1321, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function create($org, $name, array $repoNames = array(), $permission = '') { // Build the request path. $path = '/orgs/' . $org . '/teams'; $data = array( 'name' => $name, ); if ($repoNames) { $data['repo_names'] = $repoNames; } if ($permission) { if (\\in_array($permission, array('pull', 'push', 'admin')) == false) { throw new \\UnexpectedValueException('Permissions must be either \"pull\", \"push\", or \"admin\".'); } $data['permission'] = $permission; } return $this->processResponse( $this->client->post($this->fetchUrl($path), $data), 201 ); }\n\n    ### Response: Create team.\n\nIn order to create a team, the authenticated user must be an owner of the organization.\n\n@param   string  $org         The name of the organization.\n@param   string  $name        The name of the team.\n@param   array   $repoNames   Repository names.\n@param   string  $permission  The permission. (Deprecated)\npull - team members can pull, but not push to or administer these repositories. Default\npush - team members can pull and push, but not administer these repositories.\nadmin - team members can pull, push and administer these repositories.\n\n@return  object\n\n@since   1.0\n@throws  \\UnexpectedValueException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public byte[] encrypt(final byte[] content) { FastByteBuffer fbb = new FastByteBuffer(); int length = content.length + 1; int blockCount = length / blockSizeInBytes; int remaining = length; int offset = 0; for (int i = 0; i < blockCount; i++) { if (remaining == blockSizeInBytes) { break; } byte[] encrypted = encryptBlock(content, offset); fbb.append(encrypted); offset += blockSizeInBytes; remaining -= blockSizeInBytes; } if (remaining != 0) { // process remaining bytes byte[] block = new byte[blockSizeInBytes]; System.arraycopy(content, offset, block, 0, remaining - 1); block[remaining - 1] = TERMINATOR; byte[] encrypted = encryptBlock(block, 0); fbb.append(encrypted); } return fbb.toArray(); }\n\n    ### Response:", "ground_truth": "Encrypts complete content, block by block.", "predict": "\n     * Fast ByteBuffer implementation to encrypt given bytes *   Block size in bytes *   Block size *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block type *   Block"}, {"ID": 1322, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func SimpleGet(cli client.Client, key string, recursive bool) (*client.Response, error) { k := client.NewKeysAPI(cli) return k.Get(dctx(), key, &client.GetOptions{Recursive: recursive}) }\n\n    ### Response: // SimpleGet performs the common base-line get, using a default context.\n//\n// This can be used in cases where no special contextual concerns apply..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public byte[] decrypt(final byte[] encryptedContent) { FastByteBuffer fbb = new FastByteBuffer(); int length = encryptedContent.length; int blockCount = length / blockSizeInBytes; int offset = 0; for (int i = 0; i < blockCount - 1; i++) { byte[] decrypted = decryptBlock(encryptedContent, offset); fbb.append(decrypted); offset += blockSizeInBytes; } // process last block byte[] decrypted = decryptBlock(encryptedContent, offset); // find terminator int ndx = blockSizeInBytes - 1; while (ndx >= 0) { if (decrypted[ndx] == TERMINATOR) { break; } ndx--; } fbb.append(decrypted, 0, ndx); return fbb.toArray(); }\n\n    ### Response:", "ground_truth": "Decrypts the whole content, block by block.", "predict": "// Decrypt performs the common basic decryption of encrypted blocks of data, using a given IV (Initialization Vector) and Key Size."}, {"ID": 1323, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def rehash(self, password): \"\"\"Recreates the internal hash.\"\"\" self.hash = self._new(password, self.desired_rounds) self.rounds = self.desired_rounds\n\n    ### Response: Recreates the internal hash..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object map2bean(final Map map, Class targetType) { Object target = null; // create targets type String className = (String) map.get(classMetadataName); if (className == null) { if (targetType == null) { // nothing to do, no information about target type found target = map; } } else { checkClassName(jsonParser.classnameWhitelist, className); try { targetType = ClassLoaderUtil.loadClass(className); } catch (ClassNotFoundException cnfex) { throw new JsonException(cnfex); } } if (target == null) { target = jsonParser.newObjectInstance(targetType); } ClassDescriptor cd = ClassIntrospector.get().lookup(target.getClass()); boolean targetIsMap = target instanceof Map; for (Object key : map.keySet()) { String keyName = key.toString(); if (classMetadataName != null) { if (keyName.equals(classMetadataName)) { continue; } } PropertyDescriptor pd = cd.getPropertyDescriptor(keyName, declared); if (!targetIsMap && pd == null) { // target property does not exist, continue continue; } // value is one of JSON basic types, like Number, Map, List... Object value = map.get(key); Class propertyType = pd == null ? null : pd.getType(); Class componentType = pd == null ? null : pd.resolveComponentType(true); if (value != null) { if (value instanceof List) { if (componentType != null && componentType != String.class) { value = generifyList((List) value, componentType); } } else if (value instanceof Map) { // if the value we want to inject is a Map... if (!ClassUtil.isTypeOf(propertyType, Map.class)) { // ... and if target is NOT a map value = map2bean((Map) value, propertyType); } else { // target is also a Map, but we might need to generify it Class keyType = pd == null ? null : pd.resolveKeyType(true); if (keyType != String.class || componentType != String.class) { // generify value = generifyMap((Map) value, keyType, componentType); } } } } if (targetIsMap) { ((Map)target).put(keyName, value); } else { try { setValue(target, pd, value); } catch (Exception ignore) { ignore.printStackTrace(); } } } return target; }\n\n    ### Response:", "ground_truth": "Converts map to target type.", "predict": "Creates targets of specified type and populates them with values of corresponding Map entries of the given Map."}, {"ID": 1324, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(dataModelObject) { this.dataModelObject = dataModelObject; this.columns = []; this.rows = []; this.filters = []; this.cells = []; this.accelerationNamespace = dataModelObject.dataModel.isAccelerated() ? dataModelObject.dataModel.name : null; this.run = utils.bind(this, this.run); this.pivot = utils.bind(this, this.pivot); }\n\n    ### Response: Constructor for a pivot specification.\n\n@constructor\n@param {splunkjs.Service.DataModel} parentDataModel The `DataModel` that owns this data model object.\n\n@method splunkjs.Service.PivotSpecification.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Object generifyList(final List list, final Class componentType) { for (int i = 0; i < list.size(); i++) { Object element = list.get(i); if (element != null) { if (element instanceof Map) { Object bean = map2bean((Map) element, componentType); list.set(i, bean); } else { Object value = convert(element, componentType); list.set(i, value); } } } return list; }\n\n    ### Response:", "ground_truth": "Converts type of all list elements to match the component type.", "predict": "Generates an ordered and populated copy of the given list with objects of the specified componentType cast to that type and populated with values corresponding to the given list values."}, {"ID": 1325, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def compile_compiler_bridge(self, context): \"\"\"Compile the compiler bridge to be used by zinc, using our scala bootstrapper. It will compile and cache the jar, and materialize it if not already there. :param context: The context of the task trying to compile the bridge. This is mostly needed to use its scheduler to create digests of the relevant jars. :return: The absolute path to the compiled scala-compiler-bridge jar. \"\"\" bridge_jar_name = 'scala-compiler-bridge.jar' bridge_jar = os.path.join(self._compiler_bridge_cache_dir, bridge_jar_name) global_bridge_cache_dir = os.path.join(self._zinc_factory.get_options().pants_bootstrapdir, fast_relpath(self._compiler_bridge_cache_dir, self._workdir())) globally_cached_bridge_jar = os.path.join(global_bridge_cache_dir, bridge_jar_name) # Workaround to avoid recompiling the bridge for every integration test # We check the bootstrapdir (.cache) for the bridge. # If it exists, we make a copy to the buildroot. # # TODO Remove when action caches are implemented. if os.path.exists(globally_cached_bridge_jar): # Cache the bridge jar under buildroot, to allow snapshotting safe_mkdir(self._relative_to_buildroot(self._compiler_bridge_cache_dir)) safe_hardlink_or_copy(globally_cached_bridge_jar, bridge_jar) if not os.path.exists(bridge_jar): res = self._run_bootstrapper(bridge_jar, context) context._scheduler.materialize_directories(( DirectoryToMaterialize(get_buildroot(), res.output_directory_digest), )) # For the workaround above to work, we need to store a copy of the bridge in # the bootstrapdir cache (.cache). safe_mkdir(global_bridge_cache_dir) safe_hardlink_or_copy(bridge_jar, globally_cached_bridge_jar) return ClasspathEntry(bridge_jar, res.output_directory_digest) else: bridge_jar_snapshot = context._scheduler.capture_snapshots((PathGlobsAndRoot( PathGlobs((self._relative_to_buildroot(bridge_jar),)), text_type(get_buildroot()) ),))[0] bridge_jar_digest = bridge_jar_snapshot.directory_digest return ClasspathEntry(bridge_jar, bridge_jar_digest)\n\n    ### Response: Compile the compiler bridge to be used by zinc, using our scala bootstrapper.\n    It will compile and cache the jar, and materialize it if not already there.\n\n    :param context: The context of the task trying to compile the bridge.\n                    This is mostly needed to use its scheduler to create digests of the relevant jars.\n    :return: The absolute path to the compiled scala-compiler-bridge jar..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void setValue(final Object target, final PropertyDescriptor pd, Object value) throws InvocationTargetException, IllegalAccessException { Class propertyType; Setter setter = pd.getSetter(true); if (setter != null) { if (value != null) { propertyType = setter.getSetterRawType(); value = jsonParser.convertType(value, propertyType); } setter.invokeSetter(target, value); } }\n\n    ### Response:", "ground_truth": "Sets the property value.", "predict": "\n    Private method to set the Value of an Object to the given Value and Type, and convert the Value if necessary to the given Value Type."}, {"ID": 1326, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static base_response update(nitro_service client, aaaparameter resource) throws Exception { aaaparameter updateresource = new aaaparameter(); updateresource.enablestaticpagecaching = resource.enablestaticpagecaching; updateresource.enableenhancedauthfeedback = resource.enableenhancedauthfeedback; updateresource.defaultauthtype = resource.defaultauthtype; updateresource.maxaaausers = resource.maxaaausers; updateresource.maxloginattempts = resource.maxloginattempts; updateresource.failedlogintimeout = resource.failedlogintimeout; updateresource.aaadnatip = resource.aaadnatip; return updateresource.update_resource(client); }\n\n    ### Response: Use this API to update aaaparameter..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected <K,V> Map<K, V> generifyMap(final Map<Object, Object> map, final Class<K> keyType, final Class<V> valueType) { if (keyType == String.class) { // only value type is changed, we can make value replacements for (Map.Entry<Object, Object> entry : map.entrySet()) { Object value = entry.getValue(); Object newValue = convert(value, valueType); if (value != newValue) { entry.setValue(newValue); } } return (Map<K, V>) map; } // key is changed too, we need a new map Map<K, V> newMap = new HashMap<>(map.size()); for (Map.Entry<Object, Object> entry : map.entrySet()) { Object key = entry.getKey(); Object newKey = convert(key, keyType); Object value = entry.getValue(); Object newValue = convert(value, valueType); newMap.put((K)newKey, (V)newValue); } return newMap; }\n\n    ### Response:", "ground_truth": "Change map elements to match key and value types.", "predict": "This method generates generic Map from given Map but only values (objects) in given Map must be changed, otherwise original Map may be used and returned back without any change"}, {"ID": 1327, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (in *SecretSpec) DeepCopy() *SecretSpec { if in == nil { return nil } out := new(SecretSpec) in.DeepCopyInto(out) return out }\n\n    ### Response: // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecretSpec..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public int compareTo(final Object o) { DbEntityColumnDescriptor that = (DbEntityColumnDescriptor) o; if (this.isId != that.isId) { return this.isId ? -1 : 1; // IDs should be the first in the array } return this.columnName.compareTo(that.columnName); }\n\n    ### Response:", "ground_truth": "Compares two column descriptors. Identity columns should be the first on the list.\nEach group then will be sorted by column name.", "predict": "The compareTo() method of the DbEntityColumnDescriptor class compares the ID values of the objects to determine the relative position of objects in the ordered collection of objects of the same type. It first checks if the objects contain the same ID values by checking if the objects contain the ID values of the objects to compare and ignoring the ID values of objects with the same names but different values (objects with the same names but different values should be ordered based on the values of the other fields of the objects to compare to determine the relative position of objects with the same names but different values.). If the objects contain the same ID values, the ID values of objects with the same names but different values should be ordered based on the values of other fields of objects to compare to determine the relative position of objects with the same names but different values and the ID values of objects with the same names but different values should be ordered based on the values of other fields of objects to compare to determine the relative position of objects with the same names but different values and the ID values of objects with the"}, {"ID": 1328, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func getInitConfigurationFromCluster(kubeconfigDir string, client clientset.Interface, newControlPlane bool) (*kubeadmapi.InitConfiguration, error) { // Also, the config map really should be KubeadmConfigConfigMap... configMap, err := client.CoreV1().ConfigMaps(metav1.NamespaceSystem).Get(constants.KubeadmConfigConfigMap, metav1.GetOptions{}) if err != nil { return nil, errors.Wrap(err, \"failed to get config map\") } // InitConfiguration is composed with data from different places initcfg := &kubeadmapi.InitConfiguration{} // gets ClusterConfiguration from kubeadm-config clusterConfigurationData, ok := configMap.Data[constants.ClusterConfigurationConfigMapKey] if !ok { return nil, errors.Errorf(\"unexpected error when reading kubeadm-config ConfigMap: %s key value pair missing\", constants.ClusterConfigurationConfigMapKey) } if err := runtime.DecodeInto(kubeadmscheme.Codecs.UniversalDecoder(), []byte(clusterConfigurationData), &initcfg.ClusterConfiguration); err != nil { return nil, errors.Wrap(err, \"failed to decode cluster configuration data\") } // gets the component configs from the corresponding config maps if err := getComponentConfigs(client, &initcfg.ClusterConfiguration); err != nil { return nil, errors.Wrap(err, \"failed to get component configs\") } // if this isn't a new controlplane instance (e.g. in case of kubeadm upgrades) // get nodes specific information as well if !newControlPlane { // gets the nodeRegistration for the current from the node object if err := getNodeRegistration(kubeconfigDir, client, &initcfg.NodeRegistration); err != nil { return nil, errors.Wrap(err, \"failed to get node registration\") } // gets the APIEndpoint for the current node from then ClusterStatus in the kubeadm-config ConfigMap if err := getAPIEndpoint(configMap.Data, initcfg.NodeRegistration.Name, &initcfg.LocalAPIEndpoint); err != nil { return nil, errors.Wrap(err, \"failed to getAPIEndpoint\") } } else { // In the case where newControlPlane is true we don't go through getNodeRegistration() and initcfg.NodeRegistration.CRISocket is empty. // This forces DetectCRISocket() to be called later on, and if there is more than one CRI installed on the system, it will error out, // while asking for the user to provide an override for the CRI socket. Even if the user provides an override, the call to // DetectCRISocket() can happen too early and thus ignore it (while still erroring out). // However, if newControlPlane == true, initcfg.NodeRegistration is not used at all and it's overwritten later on. // Thus it's necessary to supply some default value, that will avoid the call to DetectCRISocket() and as // initcfg.NodeRegistration is discarded, setting whatever value here is harmless. initcfg.NodeRegistration.CRISocket = constants.DefaultDockerCRISocket } return initcfg, nil }\n\n    ### Response: // getInitConfigurationFromCluster is separate only for testing purposes, don't call it directly, use FetchInitConfigurationFromCluster instead.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpBrowser setDefaultHeader(final String name, final String value) { defaultHeaders.addHeader(name, value); return this; }\n\n    ### Response:", "ground_truth": "Adds default header to all requests.", "predict": "The method setDefaultHeader accepts a header name as string parameter, and sets its corresponding value to the given header map of this instance of HttpBrowser."}, {"ID": 1329, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @GwtIncompatible(\"Array.newInstance(Class, int)\") public static <T> T[] toArray(Iterable<? extends T> iterable, Class<T> type) { Collection<? extends T> collection = toCollection(iterable); T[] array = ObjectArrays.newArray(type, collection.size()); return collection.toArray(array); }\n\n    ### Response: Copies an iterable's elements into an array.\n\n@param iterable the iterable to copy\n@param type the type of the elements\n@return a newly-allocated array into which all the elements of the iterable\nhave been copied.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpResponse sendRequest(HttpRequest httpRequest) { elapsedTime = System.currentTimeMillis(); // send request httpRequest.followRedirects(false); while (true) { this.httpRequest = httpRequest; HttpResponse previousResponse = this.httpResponse; this.httpResponse = null; addDefaultHeaders(httpRequest); addCookies(httpRequest); // send request if (catchTransportExceptions) { try { this.httpResponse = _sendRequest(httpRequest, previousResponse); } catch (HttpException httpException) { httpResponse = new HttpResponse(); httpResponse.assignHttpRequest(httpRequest); httpResponse.statusCode(503); httpResponse.statusPhrase(\"Service unavailable. \" + ExceptionUtil.message(httpException)); } } else { this.httpResponse =_sendRequest(httpRequest, previousResponse); } readCookies(httpResponse); int statusCode = httpResponse.statusCode(); // 301: moved permanently if (statusCode == 301) { String newPath = httpResponse.location(); if (newPath == null) { break; } httpRequest = HttpRequest.get(newPath); continue; } // 302: redirect, 303: see other if (statusCode == 302 || statusCode == 303) { String newPath = httpResponse.location(); if (newPath == null) { break; } httpRequest = HttpRequest.get(newPath); continue; } // 307: temporary redirect, 308: permanent redirect if (statusCode == 307 || statusCode == 308) { String newPath = httpResponse.location(); if (newPath == null) { break; } String originalMethod = httpRequest.method(); httpRequest = new HttpRequest() .method(originalMethod) .set(newPath); continue; } break; } elapsedTime = System.currentTimeMillis() - elapsedTime; return this.httpResponse; }\n\n    ### Response:", "ground_truth": "Sends new request as a browser. Before sending,\nall browser cookies are added to the request.\nAfter sending, the cookies are read from the response.\nMoreover, status codes 301 and 302 are automatically\nhandled. Returns very last response.", "predict": "The given method sends a request to the given url and processes the response to fetch data and images of the given url. It processes the given url by following certain HTTP protocol and sends request to the given url. It processes the received data and images and sends it back to the caller of this method. It keeps track of time elapsed by the method and sends the time elapsed to the caller of this method. It sends the received data and images back to the caller of this method. It sends the given url again by following certain HTTP protocol and sends request to the given url until the given url does not produce any error code, which indicates that data and images have been fetched completely for the given url. It sends the received data and images back to the caller of this method until there is no error code and receives data and images of the given url completely. It sends the received data and images back to the caller of this method until there is no error code and receives data and images of the given url completely. It sends the received data and images back to the caller"}, {"ID": 1330, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(obj) { var regExp = arguments[1]; var keys = regExp instanceof RegExp ? conbo.filter(conbo.keys(obj), function(key) { return regExp.test(key); }) : (arguments.length > 1 ? conbo.rest(arguments) : conbo.keys(obj)); keys.forEach(function(key) { var descriptor = Object.getOwnPropertyDescriptor(obj, key) || {value:obj[key], configurable:true, writable:true}; descriptor.enumerable = false; Object.defineProperty(obj, key, descriptor); }); }\n\n    ### Response: Convert enumerable properties of the specified object into non-enumerable ones\n@private.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected HttpResponse _sendRequest(final HttpRequest httpRequest, final HttpResponse previouseResponse) { if (!keepAlive) { httpRequest.open(httpConnectionProvider); } else { // keeping alive if (previouseResponse == null) { httpRequest.open(httpConnectionProvider).connectionKeepAlive(true); } else { httpRequest.keepAlive(previouseResponse, true); } } return httpRequest.send(); }\n\n    ### Response:", "ground_truth": "Opens connection and sends a response.", "predict": "Prevents Web Socket handshake when sending new request but allows existing Web Socket handshake to stay open"}, {"ID": 1331, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (api *API) RecalculateCaches(ctx context.Context) error { span, _ := tracing.StartSpanFromContext(ctx, \"API.RecalculateCaches\") defer span.Finish() if err := api.validate(apiRecalculateCaches); err != nil { return errors.Wrap(err, \"validating api method\") } err := api.server.SendSync(&RecalculateCaches{}) if err != nil { return errors.Wrap(err, \"broacasting message\") } api.holder.recalculateCaches() return nil }\n\n    ### Response: // RecalculateCaches forces all TopN caches to be updated. Used mainly for integration tests..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void addDefaultHeaders(final HttpRequest httpRequest) { for (Map.Entry<String, String> entry : defaultHeaders.entries()) { String name = entry.getKey(); if (!httpRequest.headers.contains(name)) { httpRequest.headers.add(name, entry.getValue()); } } }\n\n    ### Response:", "ground_truth": "Add default headers to the request. If request already has a header set,\ndefault header will be ignored.", "predict": "// This method populates the default HTTP header values in the given HTTP request with values from the given Map of default HTTP header names to values."}, {"ID": 1332, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function authNtlm() { if ( !ezcBaseFeatures::hasExtensionSupport( 'mcrypt' ) ) { throw new ezcBaseExtensionNotFoundException( 'mcrypt', null, \"PHP not compiled with --with-mcrypt.\" ); } // Send NTLM type 1 message $msg1 = base64_encode( $this->authNtlmMessageType1( $this->senderHost, $this->serverHost ) ); $this->sendData( \"AUTH NTLM {$msg1}\" ); if ( $this->getReplyCode( $serverResponse ) !== '334' ) { throw new ezcMailTransportSmtpException( 'SMTP server does not accept AUTH NTLM.' ); } // Parse NTLM type 2 message $msg2 = base64_decode( trim( substr( $serverResponse, 4 ) ) ); $parts = array( substr( $msg2, 0, 8 ), // Signature (\"NTLMSSP\\0\") substr( $msg2, 8, 4 ), // Message type substr( $msg2, 12, 8 ), // Target name (security buffer) substr( $msg2, 20, 4 ), // Flags substr( $msg2, 24, 8 ), // Challenge substr( $msg2, 32 ) // The rest of information ); $challenge = $parts[4]; // Send NTLM type 3 message $msg3 = base64_encode( $this->authNtlmMessageType3( $challenge, $this->user, $this->password, $this->senderHost, $this->serverHost ) ); $this->sendData( $msg3 ); if ( $this->getReplyCode( $serverResponse ) !== '235' ) { throw new ezcMailTransportSmtpException( 'SMTP server did not allow NTLM authentication.' ); } }\n\n    ### Response: Tries to login to the SMTP server with 'AUTH NTLM' and returns true if\nsuccessful.\n\n@throws ezcMailTransportSmtpException\nif the SMTP server returned an error\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void readCookies(final HttpResponse httpResponse) { Cookie[] newCookies = httpResponse.cookies(); for (Cookie cookie : newCookies) { cookies.add(cookie.getName(), cookie); } }\n\n    ### Response:", "ground_truth": "Reads cookies from response and adds to cookies list.", "predict": "reads the cookies included in the given HTTP response and\nadds these to the given array of cookies objects."}, {"ID": 1333, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function actionDisable($class) { try { if (Yii::$app->rhoone->ext->disable($class)) { echo \"Disabled.\"; } else { echo \"Failed to disable.\"; } } catch (\\Exception $ex) { throw new Exception($ex->getMessage()); } return 0; }\n\n    ### Response: Disable an extension.\n@param string $class\n@return int.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void addCookies(final HttpRequest httpRequest) { // prepare all cookies List<Cookie> cookiesList = new ArrayList<>(); if (!cookies.isEmpty()) { for (Map.Entry<String, Cookie> cookieEntry : cookies) { cookiesList.add(cookieEntry.getValue()); } httpRequest.cookies(cookiesList.toArray(new Cookie[0])); } }\n\n    ### Response:", "ground_truth": "Add cookies to the request.", "predict": "Prepares and sets cookies in the given HTTP request."}, {"ID": 1334, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public synchronized void startTransfer(DataSource source, TransferContext context, int connections, boolean reusable) throws ServerException { // things would get messed up if more than 1 file was transfered // simultaneously with the same transfer manager if (transferThreadCount != 0) { throw new ServerException( ServerException.PREVIOUS_TRANSFER_ACTIVE); } for (int i = 0; i < connections; i++) { logger.debug( \"checking out a socket; total cached sockets = \" + socketPool.count() + \"; free = \" + socketPool.countFree() + \"; busy = \" + socketPool.countBusy()); SocketBox sbox = socketPool.checkOut(); if (sbox == null) { logger.debug(\"No free sockets available, aborting.\"); return; } ((ManagedSocketBox) sbox).setReusable(reusable); Task task = new ActiveStartTransferTask(source, localControlChannel, sbox, gSession, dataChannelFactory, context); runTask(task); } }\n\n    ### Response: This should be used once the remote active server connected to us.\nThis method starts transfer threads that will\nread data from the source and send.\n\n@param reusable if set to false, the sockets will not be reused after\nthe transfer.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String sendMail(final Email email) { try { final MimeMessage msg = createMessage(email); getService().sendMessage(msg, msg.getAllRecipients()); return msg.getMessageID(); } catch (final MessagingException msgexc) { throw new MailException(\"Failed to send email: \" + email, msgexc); } }\n\n    ### Response:", "ground_truth": "Prepares message and sends it. Returns Message ID of sent email.\n\n@param email {@link Email} to send.\n@return String representing message ID.", "predict": "The method sends an email to the given email address."}, {"ID": 1335, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (gc *gossipChannel) GetPeers() []discovery.NetworkMember { var members []discovery.NetworkMember if gc.hasLeftChannel() { return members } for _, member := range gc.GetMembership() { if !gc.EligibleForChannel(member) { continue } stateInf := gc.stateInfoMsgStore.MsgByID(member.PKIid) if stateInf == nil { continue } props := stateInf.GetStateInfo().Properties if props != nil && props.LeftChannel { continue } member.Properties = stateInf.GetStateInfo().Properties member.Envelope = stateInf.Envelope members = append(members, member) } return members }\n\n    ### Response: // GetPeers returns a list of peers with metadata as published by them.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void setSubject(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { if (emailWithData.subjectEncoding() != null) { msgToSet.setSubject(emailWithData.subject(), emailWithData.subjectEncoding()); } else { msgToSet.setSubject(emailWithData.subject()); } }\n\n    ### Response:", "ground_truth": "Sets subject in msgToSet from subject in emailWithData.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure", "predict": "// Sets the subject of the given email to the given subject and optionally to its UTF8 representation if supported by the mail client"}, {"ID": 1336, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function () { this._closeTooltip(); var firePreviewChange = true; if (this._tentativeRating <= 0) { firePreviewChange = false; } else { if (this._tentativeRating > 0) { this._tentativeRating--; } else if (this._tentativeRating === -1) { if (this._userRating !== 0) { if (this._userRating > 0) { this._tentativeRating = this._userRating - 1; } else { this._tentativeRating = 0; } } else { this._tentativeRating = 0; } } if ((this._tentativeRating === 0) && !this._enableClear) { this._tentativeRating = 1; firePreviewChange = false; } } this._showTentativeRating(firePreviewChange, \"keyboard\"); }\n\n    ### Response: decrement tentative rating by one.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void setSentDate(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { Date date = emailWithData.sentDate(); if (date == null) { date = new Date(); } msgToSet.setSentDate(date); }\n\n    ### Response:", "ground_truth": "Sets sent date in msgToSet with sent date from emailWithData.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure", "predict": "Sets the SentDate for the given email to the current date."}, {"ID": 1337, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function beforePrepare(Event $event) { $command = $event['command']; $operation = $command->getOperation(); if ($command->getName() !== 'updateEntity' && $command->offsetExists('_id') === true) return; $operation->addParam(new Parameter(array( 'name' => 'body_id', 'location' => 'json', 'type' => 'string', 'default' => $command->offsetGet('_id'), 'static' => true, 'sentAs' => '_id' ))); }\n\n    ### Response: Add the entity's _id to the request body.\n\n@param  Guzzle\\Common\\Event\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void setHeaders(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { final Map<String, String> headers = emailWithData.headers(); if (headers != null) { for (final Map.Entry<String, String> entry : headers.entrySet()) { msgToSet.setHeader(entry.getKey(), entry.getValue()); } } }\n\n    ### Response:", "ground_truth": "Sets headers in msgToSet with headers from emailWithData.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure", "predict": "Sets header values from an email to the given message."}, {"ID": 1338, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(type, n, id, url, win, qlength, trackfn) { var f = trackfn || _next; // IE supports the readystatechange event for script and css nodes if (ua.ie) { n.onreadystatechange = function() { var rs = this.readyState; if (\"loaded\" === rs || \"complete\" === rs) { n.onreadystatechange = null; f(id, url); } }; // webkit prior to 3.x is problemmatic } else if (ua.webkit) { if (type === \"script\") { // Safari 3.x supports the load event for script nodes (DOM2) if (ua.webkit >= 420) { n.addEventListener(\"load\", function() { f(id, url); }); // Nothing can be done with Safari < 3.x except to pause and hope // for the best, particularly after last script is inserted. The // scripts will always execute in the order they arrive, not // necessarily the order in which they were inserted. To support // script nodes with complete reliability in these browsers, script // nodes either need to invoke a function in the window once they // are loaded or the implementer needs to provide a well-known // property that the utility can poll for. } else { // Poll for the existence of the named variable, if it // was supplied. var q = queues[id]; if (q.varName) { var freq=YAHOO.util.Get.POLL_FREQ; q.maxattempts = YAHOO.util.Get.TIMEOUT/freq; q.attempts = 0; q._cache = q.varName[0].split(\".\"); q.timer = lang.later(freq, q, function(o) { var a=this._cache, l=a.length, w=this.win, i; for (i=0; i<l; i=i+1) { w = w[a[i]]; if (!w) { // if we have exausted our attempts, give up this.attempts++; if (this.attempts++ > this.maxattempts) { var msg = \"Over retry limit, giving up\"; q.timer.cancel(); _fail(id, msg); } else { } return; } } q.timer.cancel(); f(id, url); }, null, true); } else { lang.later(YAHOO.util.Get.POLL_FREQ, null, f, [id, url]); } } } // FireFox and Opera support onload (but not DOM2 in FF) handlers for // script nodes. Opera, but not FF, supports the onload event for link // nodes. } else { n.onload = function() { f(id, url); }; } }\n\n    ### Response: Detects when a node has been loaded.  In the case of\nscript nodes, this does not guarantee that contained\nscript is ready to use.\n@method _track\n@param type {string} the type of node to track\n@param n {HTMLElement} the node to track\n@param id {string} the id of the request\n@param url {string} the url that is being loaded\n@param win {Window} the targeted window\n@param qlength the number of remaining items in the queue,\nincluding this one\n@param trackfn {Function} function to execute when finished\nthe default is _next\n@private.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void setPeople(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { msgToSet.setFrom(emailWithData.from().toInternetAddress()); msgToSet.setReplyTo(EmailAddress.convert(emailWithData.replyTo())); setRecipients(emailWithData, msgToSet); }\n\n    ### Response:", "ground_truth": "Sets FROM, REPLY-TO and recipients.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure", "predict": "\n    Sends an email message with the given data to the given recipient(s) and sets any applicable header fields in the message."}, {"ID": 1339, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getTrace($trace = array()) { $traceMessage = ''; foreach ($trace as $t) { $traceMessage .= sprintf(' at %s line %s', $t['file'], $t['line']) . \"\\n\"; } return $traceMessage; }\n\n    ### Response: Implodes the trace into a readable string representation\n@param  array  $trace\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void setRecipients(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { // TO final InternetAddress[] to = EmailAddress.convert(emailWithData.to()); if (to.length > 0) { msgToSet.setRecipients(RecipientType.TO, to); } // CC final InternetAddress[] cc = EmailAddress.convert(emailWithData.cc()); if (cc.length > 0) { msgToSet.setRecipients(RecipientType.CC, cc); } // BCC final InternetAddress[] bcc = EmailAddress.convert(emailWithData.bcc()); if (bcc.length > 0) { msgToSet.setRecipients(RecipientType.BCC, bcc); } }\n\n    ### Response:", "ground_truth": "Sets TO, CC and BCC in msgToSet with TO, CC and BCC from emailWithData.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure.", "predict": "Sends an email to recipient given by emailWithData to the given destinations to and cc and bcc"}, {"ID": 1340, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func StrListSubset(super, sub []string) bool { for _, item := range sub { if !StrListContains(super, item) { return false } } return true }\n\n    ### Response: // StrListSubset checks if a given list is a subset\n// of another set.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addBodyData(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { final List<EmailMessage> messages = emailWithData.messages(); final int totalMessages = messages.size(); // Need to use new list since filterEmbeddedAttachments(List) removes attachments from the source List final List<EmailAttachment<? extends DataSource>> attachments = new ArrayList<>(emailWithData.attachments()); if (attachments.isEmpty() && totalMessages == 1) { // special case: no attachments and just one content setContent(messages.get(0), msgToSet); } else { final MimeMultipart multipart = new MimeMultipart(); final MimeMultipart msgMultipart = new MimeMultipart(ALTERNATIVE); multipart.addBodyPart(getBaseBodyPart(msgMultipart)); for (final EmailMessage emailMessage : messages) { msgMultipart.addBodyPart(getBodyPart(emailMessage, attachments)); } addAnyAttachments(attachments, multipart); msgToSet.setContent(multipart); } }\n\n    ### Response:", "ground_truth": "Adds message data and attachments.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure.", "predict": "// addBodyData populates the given Message with attachments and any other attachments\n// in the given Email and sets its Content to the given EmailMessages"}, {"ID": 1341, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func DeriveFromFields(format string, fields ...string) FieldFormatterFunc { return func(input interface{}, _ FieldOperation) (interface{}, error) { if record, ok := input.(*Record); ok { values := make([]interface{}, len(fields)) for i, field := range fields { values[i] = record.Get(field) } return fmt.Sprintf(format, values...), nil } else { return nil, fmt.Errorf(\"DeriveFromFields formatter requires a *dal.Record argument, got %T\", input) } } }\n\n    ### Response: // Extracts values from the given Record and generates a deterministic output based on those values..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void setContent(final EmailMessage emailWithData, final Part partToSet) throws MessagingException { partToSet.setContent(emailWithData.getContent(), emailWithData.getMimeType() + CHARSET + emailWithData.getEncoding()); }\n\n    ### Response:", "ground_truth": "Sets emailWithData content into msgToSet.\n\n@param emailWithData {@link EmailMessage} with data.\n@param partToSet     {@link Part} to set data into.\n@throws MessagingException if there is a failure.", "predict": "// Sets the Content, MIMEType and encoding of the given Part to those of the given EmailMessage"}, {"ID": 1342, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setBodyText($txt, $charset = null, $encoding = Zend_Mime::ENCODING_QUOTEDPRINTABLE) { if ($charset === null) { $charset = $this->_charset; } $mp = new Zend_Mime_Part($txt); $mp->encoding = $encoding; $mp->type = Zend_Mime::TYPE_TEXT; $mp->disposition = Zend_Mime::DISPOSITION_INLINE; $mp->charset = $charset; $this->_bodyText = $mp; return $this; }\n\n    ### Response: Sets the text body for the message.\n\n@param  string $txt\n@param  string $charset\n@param  string $encoding\n@return Zend_Mail Provides fluent interface.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected MimeBodyPart createAttachmentBodyPart(final EmailAttachment<? extends DataSource> attachment) throws MessagingException { final MimeBodyPart part = new MimeBodyPart(); final String attachmentName = attachment.getEncodedName(); if (attachmentName != null) { part.setFileName(attachmentName); } part.setDataHandler(new DataHandler(attachment.getDataSource())); if (attachment.getContentId() != null) { part.setContentID(StringPool.LEFT_CHEV + attachment.getContentId() + StringPool.RIGHT_CHEV); } if (attachment.isInline()) { part.setDisposition(INLINE); } return part; }\n\n    ### Response:", "ground_truth": "Creates attachment body part. Handles regular and inline attachments.\n\n@param attachment Body part {@link EmailAttachment}.\n@return {@link MimeBodyPart} which represents body part attachment.\n@throws MessagingException if there is a failure.", "predict": "Creates an inline attachement bodypart with given name and given content-id and disposition."}, {"ID": 1343, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function checkFormat(opt_clangOptions, opt_clangFormat, opt_gulpOptions) { var optsStr = getOptsString(opt_clangOptions); var actualClangFormat = opt_clangFormat || clangFormat; opt_gulpOptions = opt_gulpOptions || {}; var filePaths = []; var pipe = combine.obj(format(opt_clangOptions, opt_clangFormat), diff()); if (opt_gulpOptions.verbose) { pipe = combine.obj(pipe, diff.reporter({fail: false})); } pipe = combine.obj( pipe, through2({objectMode: true}, function(f, enc, done) { if (f.diff && Object.keys(f.diff).length) filePaths.push(path.relative(process.cwd(), f.path)); done(null, f); }, function(done) { if (filePaths.length) { var clangFormatBin = path.relative(process.cwd(), actualClangFormat.location); log('WARNING: Files are not properly formatted. Please run'); log(' ' + clangFormatBin + ' -i -style=\"' + optsStr + '\" ' + filePaths.join(' ')); log(' (using clang-format version ' + actualClangFormat.version + ')'); var level = opt_gulpOptions.fail ? 'error' : 'warning'; pipe.emit(level, new PluginError('gulp-clang-format', 'files not formatted')); } done(); })); return pipe; }\n\n    ### Response: Verifies that files are already in the format produced by clang-format.\nPrints a warning to the console for any file which isn't formatted.\n\n@param {(string|Object)=} opt_clangOptions the string 'file' to search for a\n'.clang-format' file, or an object literal containing clang-format options\nhttp://clang.llvm.org/docs/ClangFormatStyleOptions.html#configurable-format-style-options\n@param {Object=} opt_clangFormat A clang-format module to optionally use.\n@param {Object=} opt_gulpOptions Options for the gulp process. Options are\n'verbose', which toggles a verbose diff report.\n'fail', whether to fail in case of a diff..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private String getContentType(final String dataHeader) { String token = \"Content-Type:\"; int start = dataHeader.indexOf(token); if (start == -1) { return StringPool.EMPTY; } start += token.length(); return dataHeader.substring(start).trim(); }\n\n    ### Response:", "ground_truth": "Strips content type information from requests data header.\n@param dataHeader data header string\n@return content type or an empty string if no content type defined", "predict": "Get the Content-Type header from the given data header string."}, {"ID": 1344, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String getKey(String hostName, String contextPath) { return String.format(\"%s/%s\", (hostName == null ? EMPTY : hostName), (contextPath == null ? EMPTY : contextPath)); }\n\n    ### Response: Return scope key. Scope key consists of host name concatenated with context path by slash symbol\n\n@param hostName\nHost name\n@param contextPath\nContext path\n@return Scope key as string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void saveResultSet(final ResultSet rs) { if (resultSets == null) { resultSets = new HashSet<>(); } resultSets.add(rs); }\n\n    ### Response:", "ground_truth": "Stores result set.", "predict": "Store Result Sets in an internal collection to avoid unnecessary duplicate Result Sets"}, {"ID": 1345, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function getBundleDefinitionInstance($bundle): BundleInterface { if (!is_object($bundle)) { $bundle = new $bundle($this); } if (!$bundle instanceof BundleInterface) { throw new BundleDependencyException(get_class($bundle)); } return $bundle; }\n\n    ### Response: Given a bundle instance or a namespace, return the instance.\nEach bundle is instanced with the Kernel as the first element of the\nconstruction, by default.\n\n@param BundleInterface|string $bundle\n\n@return BundleInterface\n\n@throws BundleDependencyException Is not a BundleInterface implementation.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Q closeAllResultSets() { final SQLException sex = closeQueryResultSets(); if (sex != null) { throw new DbSqlException(\"Close associated ResultSets error\", sex); } return _this(); }\n\n    ### Response:", "ground_truth": "Closes all result sets created by this query. Query remains active.", "predict": "Closes and releases any ResultSets associated with the current operation."}, {"ID": 1346, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _print_single_file(self, path, apps_models): \"\"\" Print apps_models which contains a list of 2-tuples containing apps and their models into a single file. \"\"\" if path: outfile = codecs.open(path, 'w', encoding='utf-8') self._print = lambda s: outfile.write(s + '\\n') self._print(self._diagram_start) for app, app_models in apps_models: self._print_app(app, app_models) self._print(self._diagram_end) if path: outfile.close()\n\n    ### Response: Print apps_models which contains a list of 2-tuples containing apps and their models\n        into a single file..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected SQLException closeQuery() { SQLException sqlException = closeQueryResultSets(); if (statement != null) { try { statement.close(); } catch (SQLException sex) { if (sqlException == null) { sqlException = sex; } else { sqlException.setNextException(sex); } } statement = null; } query = null; queryState = CLOSED; return sqlException; }\n\n    ### Response:", "ground_truth": "Closes all assigned result sets and then closes the query. Query becomes closed.", "predict": "Closes the Result Sets of the previous query and saves the Result Sets of the current statement to the Result Sets of the next statement"}, {"ID": 1347, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean repositoryDescriptionFileExists(RestRepositoryConnectionProxy proxy) { boolean exists = false; try { URL propertiesFileURL = getPropertiesFileLocation(); // Are we accessing the properties file (from DHE) using a proxy ? if (proxy != null) { if (proxy.isHTTPorHTTPS()) { Proxy javaNetProxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxy.getProxyURL().getHost(), proxy.getProxyURL().getPort())); URLConnection connection = propertiesFileURL.openConnection(javaNetProxy); InputStream is = connection.getInputStream(); exists = true; is.close(); if (connection instanceof HttpURLConnection) { ((HttpURLConnection) connection).disconnect(); } } else { // The proxy is not an HTTP or HTTPS proxy we do not support this UnsupportedOperationException ue = new UnsupportedOperationException(\"Non-HTTP proxy not supported\"); throw new IOException(ue); } } else { // not using a proxy InputStream is = propertiesFileURL.openStream(); exists = true; is.close(); } } catch (MalformedURLException e) { // ignore } catch (IOException e) { // ignore } return exists; }\n\n    ### Response: Tests if the repository description properties file exists as defined by the\nlocation override system property or at the default location\n\n@return true if the properties file exists, otherwise false.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override @SuppressWarnings({\"ClassReferencesSubclass\"}) public void close() { final SQLException sqlException = closeQuery(); connection = null; if (this.session != null) { this.session.detachQuery(this); } if (sqlException != null) { throw new DbSqlException(\"Close query error\", sqlException); } }\n\n    ### Response:", "ground_truth": "Closes the query and all created results sets and detaches itself from the session.", "predict": "Closes the SQL session, or the corresponding DB connection resource, if\nit exists, or the DB session or corresponding resource of the parent session, or\nthrow an error."}, {"ID": 1348, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *UIDCache) Add(uid types.UID) { c.mutex.Lock() defer c.mutex.Unlock() c.cache.Add(uid, nil) }\n\n    ### Response: // Add adds a uid to the cache..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Q setFetchSize(final int rows) { checkNotClosed(); this.fetchSize = rows; if (statement != null) { try { statement.setFetchSize(fetchSize); } catch (SQLException sex) { throw new DbSqlException(this, \"Unable to set fetch size: \" + fetchSize, sex); } } return _this(); }\n\n    ### Response:", "ground_truth": "Gives the JDBC driver a hint as to the number of rows that should be fetched from the database when\nmore rows are needed. The number of rows specified affects only result sets created using this statement.\nIf the value specified is zero, then the hint is ignored. The default value is zero.\n@see Statement#setFetchSize(int)", "predict": "// Sets fetch size of ResultSets returned by SELECT statement"}, {"ID": 1349, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function Stack(parameters) { parameters = parameters || new composites.Parameters(new Catalog()); if (!parameters.getParameter('$type')) parameters.setParameter('$type', '/bali/collections/Stack/v1'); abstractions.Collection.call(this, utilities.types.STACK, parameters); // the capacity and array are private attributes so methods that use it are // defined in the constructor var capacity = 1024; // default capacity if (parameters) { const value = parameters.getParameter('$capacity', 2); if (value) capacity = value.toNumber(); } const array = []; this.acceptVisitor = function(visitor) { visitor.visitStack(this); }; this.toArray = function() { return array.slice(); // copy the array }; this.getSize = function() { return array.length; }; this.addItem = function(item) { if (array.length < capacity) { item = this.convert(item); array.push(item); return true; } throw new utilities.Exception({ $module: '/bali/collections/Stack', $procedure: '$addItem', $exception: '$resourceLimit', $capacity: capacity, $text: '\"The stack has reached its maximum capacity.\"' }); }; this.removeItem = function() { if (array.length > 0) { return array.pop(); } throw new utilities.Exception({ $module: '/bali/collections/Stack', $procedure: '$removeItem', $exception: '$emptyStack', $text: '\"Attempted to remove an item from an empty stack.\"' }); }; this.getTop = function() { if (array.length > 0) { return array.peek(); } throw new utilities.Exception({ $module: '/bali/collections/Stack', $procedure: '$getTop', $exception: '$emptyStack', $text: '\"Attempted to access an item on an empty stack.\"' }); }; this.deleteAll = function() { array.splice(0); }; return this; }\n\n    ### Response: PUBLIC CONSTRUCTORS \nThis constructor creates a new stack component with optional parameters that are\nused to parameterize its type.\n\n@param {Parameters} parameters Optional parameters used to parameterize this collection.\n@returns {Stack} The new stack..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Q setMaxRows(final int maxRows) { checkNotClosed(); this.maxRows = maxRows; if (statement != null) { try { statement.setMaxRows(maxRows); } catch (SQLException sex) { throw new DbSqlException(this, \"Unable to set max rows: \" + maxRows, sex); } } return _this(); }\n\n    ### Response:", "ground_truth": "Sets the limit for the maximum number of rows that any ResultSet object can contain to the given number.\nIf the limit is exceeded, the excess rows are silently dropped. Zero means there is no limit.\n@see Statement#setMaxRows(int)", "predict": "\n    The Q.setMaxRows() method sets the maximum number of rows in Result Sets returned by the SELECT statement to the given value and may be used to control the number of rows returned to the Application when a Result Set is generated."}, {"ID": 1350, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function onJobCreated(JobEvent $e) { $job = $e->getJobEntity(); $this->sendMail( $job, 'mail/job-created', /*@translate*/ 'A new job opening was created', /*adminMail*/ true ); $this->sendMail( $job, 'mail/job-pending', /*@translate*/ 'Your Job have been wrapped up for approval' ); }\n\n    ### Response: Callback for the job created event.\n\n@param JobEvent $e.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected int executeUpdate(final boolean closeQuery) { start = System.currentTimeMillis(); init(); final int result; if (log.isDebugEnabled()) { log.debug(\"Executing update: \" + getQueryString()); } try { if (preparedStatement == null) { if (generatedColumns != null) { if (generatedColumns.length == 0) { result = statement.executeUpdate(query.sql, Statement.RETURN_GENERATED_KEYS); } else { result = statement.executeUpdate(query.sql, generatedColumns); } } else { result = statement.executeUpdate(query.sql); } } else { result = preparedStatement.executeUpdate(); } } catch (SQLException sex) { throw new DbSqlException(this, \"Query execution failed\", sex); } if (closeQuery) { close(); } elapsed = System.currentTimeMillis() - start; if (log.isDebugEnabled()) { log.debug(\"execution time: \" + elapsed + \"ms\"); } return result; }\n\n    ### Response:", "ground_truth": "Executes UPDATE, INSERT or DELETE queries and optionally closes the query.\n@see Statement#executeUpdate(String)", "predict": "Executing an SQL UPDATE statement and optionally fetching the generated keys of the affected records if applicable"}, {"ID": 1351, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function replaceContext(string $format, array $context): string { $msg = preg_replace_callback('`({[^\\s{}]+})`', function ($m) use ($context) { $field = trim($m[1], '{}'); if (array_key_exists($field, $context)) { return $context[$field]; } else { return $m[1]; } }, $format); return $msg; }\n\n    ### Response: Replace a message format with context information.\n\nThe message format contains fields wrapped in curly braces.\n\n@param string $format The message format to replace.\n@param array $context The context data.\n@return string Returns the formatted message..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected long executeCount(final boolean close) { start = System.currentTimeMillis(); init(); ResultSet rs = null; if (log.isDebugEnabled()) { log.debug(\"Executing prepared count: \" + getQueryString()); } try { if (preparedStatement == null) { rs = statement.executeQuery(query.sql); } else { rs = preparedStatement.executeQuery(); } final long firstLong = DbUtil.getFirstLong(rs); elapsed = System.currentTimeMillis() - start; if (log.isDebugEnabled()) { log.debug(\"execution time: \" + elapsed + \"ms\"); } return firstLong; } catch (SQLException sex) { throw new DbSqlException(this, \"Count query failed\", sex); } finally { DbUtil.close(rs); if (close) { close(); } } }\n\n    ### Response:", "ground_truth": "Executes count queries and optionally closes query afterwards.", "predict": "Execute the count of the given SQL statement and prepare for the next operation by closing the ResultSet and other resources acquired during the count operation."}, {"ID": 1352, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EJBModuleMetaDataImpl createEJBModuleMetaDataImpl(EJBApplicationMetaData ejbAMD, // F743-4950 ModuleInitData mid, SfFailoverCache statefulFailoverCache, EJSContainer container) { final boolean isTraceOn = TraceComponent.isAnyTracingEnabled(); if (isTraceOn && tc.isEntryEnabled()) Tr.entry(tc, \"createEJBModuleMetaDataImpl\"); EJBJar ejbJar = mid.ivEJBJar; EJBModuleMetaDataImpl mmd = mid.createModuleMetaData(ejbAMD); mmd.ivInitData = mid; mmd.ivMetadataComplete = mid.ivMetadataComplete; mmd.ivJ2EEName = mid.ivJ2EEName; mmd.ivName = mid.ivName; mmd.ivAppName = mid.ivAppName; mmd.ivLogicalName = mid.ivLogicalName; mmd.ivApplicationExceptionMap = createApplicationExceptionMap(ejbJar); mmd.ivModuleVersion = ejbJar == null ? BeanMetaData.J2EE_EJB_VERSION_3_0 : ejbJar.getVersionID(); // Determine if the SetRollbackOnly behavior should be as it was in 2.x // modules (where SetRollbackOnly would need to be invoked within the // actual EJB instance), or use the 3.x behavior (where // SetRollbackOnly can be invoke within and ejb instance that is itself // invoked from within the ejb instance that began the transaction). // For EJB 3.x applications, the LimitSetRollbackOnlyBehaviorToInstanceFor property // is usd to indicate that the 2.x behavior should be used. // Likewise, 2.x applications can use the ExtendSetRollbackOnlyBehaviorBeyondInstanceFor // property to get the 3.x behavior. // d461917.1 if (mmd.ivModuleVersion >= BeanMetaData.J2EE_EJB_VERSION_3_0) { if ((LimitSetRollbackOnlyBehaviorToInstanceFor == null) || (!LimitSetRollbackOnlyBehaviorToInstanceFor.contains(mmd.ivAppName))) { mmd.ivUseExtendedSetRollbackOnlyBehavior = true; } } else { // not a 3.0 module if ((ExtendSetRollbackOnlyBehaviorBeyondInstanceFor != null) && (ExtendSetRollbackOnlyBehaviorBeyondInstanceFor.contains(\"*\") || ExtendSetRollbackOnlyBehaviorBeyondInstanceFor.contains(mmd.ivAppName))) { mmd.ivUseExtendedSetRollbackOnlyBehavior = true; } } // Get the failover instance ID and SFSB Failover value to use for this module if // a SfFailoverCache object was created. if (statefulFailoverCache != null) { mmd.ivSfsbFailover = getSFSBFailover(mmd, container); mmd.ivFailoverInstanceId = getFailoverInstanceId(mmd, statefulFailoverCache); } if (isTraceOn && tc.isEntryEnabled()) Tr.exit(tc, \"createEJBModuleMetaDataImpl: \" + mmd); return mmd; }\n\n    ### Response: Create the EJB Container's internal module metadata object and fill in the data from\nthe metadata framework's generic ModuleDataObject. This occurs at application start\ntime.\n\n@param ejbAMD is the container's metadata for the application containing this module\n@param mid the data needed to initialize a bean module.\n@param statefulFailoverCache is an EJB Container configuration object that indicates whether\nor not SFSB failover is active for this module.\n@param container used to obtain container-level SFSB failover values.\n\n@return EJBModuleMetaDataImpl is the Container's internal format for module\nconfiguration data..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ResultSet getGeneratedColumns() { checkInitialized(); if (generatedColumns == null) { throw new DbSqlException(this, \"No column is specified as auto-generated\"); } final ResultSet rs; try { rs = statement.getGeneratedKeys(); } catch (SQLException sex) { throw new DbSqlException(this, \"No generated keys\", sex); } saveResultSet(rs); totalOpenResultSetCount++; return rs; }\n\n    ### Response:", "ground_truth": "Returns generated columns.", "predict": "The ResultSet returned by this method contains details of the generated columns of the table specified in the first parameter of this method. The ResultSet contains details of the generated columns but does not actually contain values for these generated columns because these values are generated automatically by the database when values are added or deleted in the table specified in the first parameter of this method. The ResultSet contains details of the generated columns but does not actually contain values for these generated columns because these values are generated automatically by the database when values are added or deleted in the table specified in the first parameter of this method. The ResultSet contains details of the generated columns but does not actually contain values for these generated columns because these values are generated automatically by the database when values are added or deleted in the table specified in the first parameter of this method. The ResultSet contains details of the generated columns but does not actually contain values for these generated columns because these values are generated automatically by the database when values are added or deleted in the table specified in the first parameter of this method. The ResultSet contains details of the"}, {"ID": 1353, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function createMenu(Menu $menu, $menuIterator, $startDepth) { foreach ($menuIterator as $childNode) { $this->addNodeToMenu($menu, $childNode, $startDepth); } return $menu; }\n\n    ### Response: Creates a full menu based on the starting point given.\n\n@param Menu $menu\n@param array $menuIterator\n@param int $startDepth\n\n@return Menu.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getQueryString() { if (debug) { if ((callableStatement != null)) { if (preparedStatement instanceof LoggableCallableStatement) { return ((LoggableCallableStatement) callableStatement).getQueryString(); } } if (preparedStatement != null) { if (preparedStatement instanceof LoggablePreparedStatement) { return ((LoggablePreparedStatement) preparedStatement).getQueryString(); } } } if (query != null) { return query.sql; } return sqlString; }\n\n    ### Response:", "ground_truth": "Returns query SQL string. For prepared statements, returned sql string with quick-and-dirty replaced values.", "predict": "Get the query string of the query or its underlying statement objects or its SQL string or its SQL string produced by its query provider"}, {"ID": 1354, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function addIssueInput(serial_number){ total_amount += issue_amount; var input = { type: \"issue\", amount: issue_amount, serial_number: serial_number }; if (bMultiAuthored) input.address = issuer_address; var objInputWithProof = {input: input}; if (objAsset && objAsset.is_private){ var spend_proof = objectHash.getBase64Hash({ asset: asset, amount: issue_amount, denomination: 1, address: issuer_address, serial_number: serial_number }); var objSpendProof = {spend_proof: spend_proof}; if (bMultiAuthored) objSpendProof.address = input.address; objInputWithProof.spend_proof = objSpendProof; } arrInputsWithProofs.push(objInputWithProof); var bFound = is_base ? (total_amount > required_amount) : (total_amount >= required_amount); bFound ? onDone(arrInputsWithProofs, total_amount) : finish(); }\n\n    ### Response: 1 currency unit in case required_amount = total_amount.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public static <T> T proxyOf(final T target, final Class<? extends Aspect> aspectClass) { final Aspect aspect; try { aspect = ClassUtil.newInstance(aspectClass, target); } catch (Exception e) { throw new IllegalArgumentException(\"Can't create new instance of aspect class\", e); } return (T) newProxyInstance(target.getClass().getClassLoader(), aspect, target.getClass().getInterfaces()); }\n\n    ### Response:", "ground_truth": "Creates a proxy of given target and the aspect.", "predict": "Allows for creating a proxy for a Spring bean to introduce method level aspects to it"}, {"ID": 1355, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void execute() throws IOException { // collect types try { collectTypes(); } catch (Exception e) { throw new QueryException(e); } // go through supertypes Set<Supertype> additions = Sets.newHashSet(); for (Map.Entry<Class<?>, EntityType> entry : allTypes.entrySet()) { EntityType entityType = entry.getValue(); if (entityType.getSuperType() != null && !allTypes.containsKey(entityType.getSuperType().getType().getJavaClass())) { additions.add(entityType.getSuperType()); } } for (Supertype type : additions) { type.setEntityType(createEntityType(type.getType(), this.superTypes)); } // merge supertype fields into subtypes Set<EntityType> handled = new HashSet<EntityType>(); for (EntityType type : superTypes.values()) { addSupertypeFields(type, allTypes, handled); } for (EntityType type : entityTypes.values()) { addSupertypeFields(type, allTypes, handled); } for (EntityType type : embeddableTypes.values()) { addSupertypeFields(type, allTypes, handled); } // serialize them serialize(superTypes, supertypeSerializer); serialize(embeddableTypes, embeddableSerializer); serialize(entityTypes, entitySerializer); }\n\n    ### Response: Export the contents\n\n@throws IOException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> Collection<T> collectionOf(final Iterator<? extends T> iterator) { final List<T> list = new ArrayList<>(); while (iterator.hasNext()) { list.add(iterator.next()); } return list; }\n\n    ### Response:", "ground_truth": "Returns a collection containing all elements of the iterator.", "predict": "Exports contents\n\nThis method iterates over an iterator of objects of type <typeparamname>. It creates a list of objects and returns it as a Collection of objects of type <typeparamname>."}, {"ID": 1356, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def mesh(mesh, T_mesh_world=RigidTransform(from_frame='obj', to_frame='world'), style='surface', smooth=False, color=(0.5,0.5,0.5), name=None): \"\"\"Visualize a 3D triangular mesh. Parameters ---------- mesh : trimesh.Trimesh The mesh to visualize. T_mesh_world : autolab_core.RigidTransform The pose of the mesh, specified as a transformation from mesh frame to world frame. style : str Triangular mesh style, either 'surface' or 'wireframe'. smooth : bool If true, the mesh is smoothed before rendering. color : 3-tuple Color tuple. name : str A name for the object to be added. \"\"\" if not isinstance(mesh, trimesh.Trimesh): raise ValueError('Must provide a trimesh.Trimesh object') mp = MaterialProperties( color = np.array(color), k_a = 0.5, k_d = 0.3, k_s = 0.1, alpha = 10.0, smooth=smooth, wireframe=(style == 'wireframe') ) obj = SceneObject(mesh, T_mesh_world, mp) if name is None: name = str(uuid.uuid4()) Visualizer3D._scene.add_object(name, obj)\n\n    ### Response: Visualize a 3D triangular mesh.\n\n        Parameters\n        ----------\n        mesh : trimesh.Trimesh\n            The mesh to visualize.\n        T_mesh_world : autolab_core.RigidTransform\n            The pose of the mesh, specified as a transformation from mesh frame to world frame.\n        style : str\n            Triangular mesh style, either 'surface' or 'wireframe'.\n        smooth : bool\n            If true, the mesh is smoothed before rendering.\n        color : 3-tuple\n            Color tuple.\n        name : str\n            A name for the object to be added..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> Stream<T> streamOf(final Iterator<T> iterator) { return StreamSupport.stream(((Iterable<T>) () -> iterator).spliterator(), false); }\n\n    ### Response:", "ground_truth": "Converts iterator to a stream.", "predict": "Stream generated from an iterator"}, {"ID": 1357, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void assignSubToCenters(KDTreeNode node, Instances centers, int[] centList, int[] assignments) throws Exception { // todo: undecided situations int numCent = centList.length; // WARNING: assignments is \"input/output-parameter\" // should not be null and the following should not happen if (assignments == null) { assignments = new int[m_Instances.numInstances()]; for (int i = 0; i < assignments.length; i++) { assignments[i] = -1; } } // set assignments for all instances of this node for (int i = node.m_Start; i <= node.m_End; i++) { int instIndex = m_InstList[i]; Instance inst = m_Instances.instance(instIndex); // if (instList[i] == 664) System.out.println(\"664***\"); int newC = m_EuclideanDistance.closestPoint(inst, centers, centList); // int newC = clusterProcessedInstance(inst, centers); assignments[instIndex] = newC; } }\n\n    ### Response: Assigns instances of this node to center. Center to be assign to is decided\nby the distance function.\n\n@param node The KDTreeNode whose instances are to be assigned.\n@param centers\tall the input centers\n@param centList\tthe list of centers to work with\n@param assignments\tindex list of last assignments\n@throws Exception If there is error assigning the instances..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public int compare(final T o1, final T o2) { for (Comparator<T> comparator : comparators) { int result = comparator.compare(o1, o2); if (result != 0) { return result; } } return 0; }\n\n    ### Response:", "ground_truth": "Compares two objects starting with first comparator; if they are equals\nproceeds to the next comparator and so on.", "predict": "Compares objects of type T and return 0 if objects are identical, \n    1 if objects are in the first case but not in the second case and -1 otherwise."}, {"ID": 1358, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void releaseEglResources() { mReadyForFrames = false; if (mInputWindowSurface != null) { mInputWindowSurface.release(); mInputWindowSurface = null; } if (mFullScreen != null) { mFullScreen.release(); mFullScreen = null; } if (mEglCore != null) { mEglCore.release(); mEglCore = null; } mSurfaceTexture = null; }\n\n    ### Response: Release all recording-specific resources.\nThe Encoder, EGLCore and FullFrameRect are tied to capture resolution,\nand other parameters..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public PetiteConfig setDefaultWiringMode(final WiringMode defaultWiringMode) { if ((defaultWiringMode == null) || (defaultWiringMode == WiringMode.DEFAULT)) { throw new PetiteException(\"Invalid default wiring mode: \" + defaultWiringMode); } this.defaultWiringMode = defaultWiringMode; return this; }\n\n    ### Response:", "ground_truth": "Specifies default wiring mode.", "predict": "Sets the default wiring mode of the Petite configuration. The default wiring mode can be changed to customize the behaviour of the Petite configuration when the wiring mode of the chosen wired device does not match the chosen wiring mode of the Petite configuration."}, {"ID": 1359, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function cache(Closure $callback, $lifetime = null, $returnObj = false) { if ($this->imageCache === null) { // create imagecache $this->imageCache = new ImageCache($this); } // run callback if (\\is_callable($callback)) { $callback($this->imageCache); } return $this->imageCache->get($lifetime, $returnObj); }\n\n    ### Response: Create new cached image and run callback\n\n@param Closure $callback\n@param int $lifetime\n@param boolean $returnObj\n\n@return Image\n@throws MissingDependencyException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void print(final Level level, final String message, final Throwable throwable) { if (!isEnabled(level)) { return; } StringBuilder msg = new StringBuilder() .append(slf.getElapsedTime()).append(' ').append('[') .append(level).append(']').append(' ') .append(getCallerClass()).append(' ').append('-') .append(' ').append(message); System.out.println(msg.toString()); if (throwable != null) { throwable.printStackTrace(System.out); } }\n\n    ### Response:", "ground_truth": "Prints error message if level is enabled.", "predict": "Draw time and message for the level and caller\n\n/**\n * Draw time and message for the level and caller\n *\n * @param Level level The level of message to draw\n * @param String message The message to draw\n * @param Throwable exception The exception to draw\n *\n * @return void Draw time and message for the level and caller\n *\n * @author SLFP <info@slf.io>\n * @author MySven <mysven.moesenberg@gmail.com>\n * @since 1.0\n * @see Draw time\n * @see Draw message\n * @see Draw exception\n * @see Draw Level\n * @see Draw caller\n * @see Draw time and message\n * @see Draw Level and caller\n * @see Draw Level and message\n * @see Draw Level and exception\n * @see Draw Level and message\n * @see Draw Level and exception\n * @see Draw Level and message\n * @see Draw Level and exception\n * @see"}, {"ID": 1360, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def __get_untitled_file_name(self): \"\"\" Returns an untitled file name. :return: Untitled file name. :rtype: unicode \"\"\" untitledNameId = Editor._Editor__untitled_name_id for file in self.list_files(): if not os.path.dirname(file) == self.__default_session_directory: continue search = re.search(r\"\\d+\", os.path.basename(file)) if not search: continue untitledNameId = max(int(search.group(0)), untitledNameId) + 1 name = \"{0} {1}.{2}\".format(self.__default_file_name, untitledNameId, self.__default_file_extension) Editor._Editor__untitled_name_id += 1 LOGGER.debug(\"> Next untitled file name: '{0}'.\".format(name)) return name\n\n    ### Response: Returns an untitled file name.\n\n        :return: Untitled file name.\n        :rtype: unicode.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String getCallerClass() { Exception exception = new Exception(); StackTraceElement[] stackTrace = exception.getStackTrace(); for (StackTraceElement stackTraceElement : stackTrace) { String className = stackTraceElement.getClassName(); if (className.equals(SimpleLoggerProvider.class.getName())) { continue; } if (className.equals(SimpleLogger.class.getName())) { continue; } if (className.equals(Logger.class.getName())) { continue; } return shortenClassName(className) + '.' + stackTraceElement.getMethodName() + ':' + stackTraceElement.getLineNumber(); } return \"N/A\"; }\n\n    ### Response:", "ground_truth": "Returns called class.", "predict": "\n    Returns the name of the caller class of the specified method, or 'N/A' if the method does not have a caller."}, {"ID": 1361, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function normalize( $s ) { global $wgAllUnicodeFixes; $s = UtfNormal::cleanUp( $s ); if ( $wgAllUnicodeFixes ) { $s = $this->transformUsingPairFile( 'normalize-ar.ser', $s ); $s = $this->transformUsingPairFile( 'normalize-ml.ser', $s ); } return $s; }\n\n    ### Response: Convert a UTF-8 string to normal form C. In Malayalam and Arabic, this\nalso cleans up certain backwards-compatible sequences, converting them\nto the modern Unicode equivalent.\n\nThis is language-specific for performance reasons only.\n\n@param $s string\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String shortenClassName(final String className) { int lastDotIndex = className.lastIndexOf('.'); if (lastDotIndex == -1) { return className; } StringBuilder shortClassName = new StringBuilder(className.length()); int start = 0; while(true) { shortClassName.append(className.charAt(start)); int next = className.indexOf('.', start); if (next == lastDotIndex) { break; } start = next + 1; shortClassName.append('.'); } shortClassName.append(className.substring(lastDotIndex)); return shortClassName.toString(); }\n\n    ### Response:", "ground_truth": "Returns shorten class name.", "predict": "Shorten the name of the given class to remove the leading package name\nand to convert any trailing dots to an under score (.)."}, {"ID": 1362, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function rangeBoundaries($pRange = 'A1:A1') { // Ensure $pRange is a valid range if (empty($pRange)) { $pRange = self::DEFAULT_RANGE; } // Uppercase coordinate $pRange = strtoupper($pRange); // Extract range if (strpos($pRange, ':') === false) { $rangeA = $rangeB = $pRange; } else { list($rangeA, $rangeB) = explode(':', $pRange); } // Calculate range outer borders $rangeStart = self::coordinateFromString($rangeA); $rangeEnd = self::coordinateFromString($rangeB); // Translate column into index $rangeStart[0] = self::columnIndexFromString($rangeStart[0]); $rangeEnd[0] = self::columnIndexFromString($rangeEnd[0]); return array($rangeStart, $rangeEnd); }\n\n    ### Response: Calculate range boundaries\n\n@param    string    $pRange        Cell range (e.g. A1:A1)\n@return    array    Range coordinates array(Start Cell, End Cell)\nwhere Start Cell and End Cell are arrays (Column Number, Row Number).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public JsonSerializer excludeTypes(final Class... types) { if (excludedTypes == null) { excludedTypes = types; } else { excludedTypes = ArraysUtil.join(excludedTypes, types); } return this; }\n\n    ### Response:", "ground_truth": "Excludes types. Supports interfaces and subclasses as well.", "predict": "Excludes objects of given types from serialization"}, {"ID": 1363, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def expand_commutators_leibniz(expr, expand_expr=True): \"\"\"Recursively expand commutators in `expr` according to the Leibniz rule. .. math:: [A B, C] = A [B, C] + [A, C] B .. math:: [A, B C] = [A, B] C + B [A, C] If `expand_expr` is True, expand products of sums in `expr`, as well as in the result. \"\"\" recurse = partial(expand_commutators_leibniz, expand_expr=expand_expr) A = wc('A', head=Operator) C = wc('C', head=Operator) AB = wc('AB', head=OperatorTimes) BC = wc('BC', head=OperatorTimes) def leibniz_right(A, BC): \"\"\"[A, BC] -> [A, B] C + B [A, C]\"\"\" B = BC.operands[0] C = OperatorTimes.create(*BC.operands[1:]) return Commutator.create(A, B) * C + B * Commutator.create(A, C) def leibniz_left(AB, C): \"\"\"[AB, C] -> A [B, C] C + [A, C] B\"\"\" A = AB.operands[0] B = OperatorTimes(*AB.operands[1:]) return A * Commutator.create(B, C) + Commutator.create(A, C) * B rules = OrderedDict([ ('leibniz1', ( pattern(Commutator, A, BC), lambda A, BC: recurse(leibniz_right(A, BC).expand()))), ('leibniz2', ( pattern(Commutator, AB, C), lambda AB, C: recurse(leibniz_left(AB, C).expand())))]) if expand_expr: res = _apply_rules(expr.expand(), rules).expand() else: res = _apply_rules(expr, rules) return res\n\n    ### Response: Recursively expand commutators in `expr` according to the Leibniz rule.\n\n    .. math::\n\n        [A B, C] = A [B, C] + [A, C] B\n\n    .. math::\n\n        [A, B C] = [A, B] C + B [A, C]\n\n    If `expand_expr` is True, expand products of sums in `expr`, as well as in\n    the result..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void serialize(final Object source, final Appendable target) { JsonContext jsonContext = createJsonContext(target); jsonContext.serialize(source); }\n\n    ### Response:", "ground_truth": "Serializes object into provided appendable.", "predict": "Serialize an object to a string or bytes representation with Jackson's JacksonContext. The serialized objects may then be written to or appended to a string or bytes representation of arbitrary size with Jackson's JacksonContext."}, {"ID": 1364, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getParameter($index) { if (!is_string($index) && !is_numeric($index)) { return null; } if (array_key_exists($index, $this->_parameterNameMap)) { $index = $this->_parameterNameMap[$index]; } if (array_key_exists($index, $this->_parameters)) { return $this->_parameters[$index]; } return null; }\n\n    ### Response: Retrieve a single parameter by name or index\n\n@param  string|int $index\n@return null|Zend_Server_Method_Parameter.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String serialize(final Object source) { FastCharBuffer fastCharBuffer = new FastCharBuffer(); serialize(source, fastCharBuffer); return fastCharBuffer.toString(); }\n\n    ### Response:", "ground_truth": "Serializes object into source.", "predict": "Serialize an Object to a String"}, {"ID": 1365, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function col_full_name(string $col, $table = '', $escaped = false): ?string { return $this->language->col_full_name($col, $table, $escaped); }\n\n    ### Response: Return column's full name.\n\n```php\n\\bbn\\x::dump($db->col_full_name(\"name\", \"table_users\"));\n// (string)  table_users.name\n\\bbn\\x::dump($db->col_full_name(\"name\", \"table_users\", true));\n// (string) \\`table_users\\`.\\`name\\`\n```\n\n@param string $col The column's name (escaped or not)\n@param string $table The table's name (escaped or not)\n@param bool $escaped If set to true the returned string will be escaped\n@return string | false.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T extends Serializable> T cloneViaSerialization(final T obj) throws IOException, ClassNotFoundException { FastByteArrayOutputStream bos = new FastByteArrayOutputStream(); ObjectOutputStream out = null; ObjectInputStream in = null; Object objCopy = null; try { out = new ObjectOutputStream(bos); out.writeObject(obj); out.flush(); byte[] bytes = bos.toByteArray(); in = new ObjectInputStream(new ByteArrayInputStream(bytes)); objCopy = in.readObject(); } finally { StreamUtil.close(out); StreamUtil.close(in); } return (T) objCopy; }\n\n    ### Response:", "ground_truth": "Create object copy using serialization mechanism.", "predict": "Clone an object via serialization."}, {"ID": 1366, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def result(self, couchdb_response_text): \"\"\" Return whether a REST couchdb operation was successful or not. On error will raise a RESTException \"\"\" result = json.loads(couchdb_response_text) if result.get(\"ok\"): return True elif result.get(\"error\"): raise RESTException( \"%s: %s\" % (result.get(\"error\"), result.get(\"reason\")) ) return result\n\n    ### Response: Return whether a REST couchdb operation was successful or not.\n\n    On error will raise a RESTException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void writeObject(final File dest, final Object object) throws IOException { FileOutputStream fos = null; BufferedOutputStream bos = null; ObjectOutputStream oos = null; try { fos = new FileOutputStream(dest); bos = new BufferedOutputStream(fos); oos = new ObjectOutputStream(bos); oos.writeObject(object); } finally { StreamUtil.close(oos); StreamUtil.close(bos); StreamUtil.close(fos); } }\n\n    ### Response:", "ground_truth": "Writes serializable object to a file. Existing file will be overwritten.", "predict": "Writes an Object to file dest of given name and type IOException may be raised during writing"}, {"ID": 1367, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def send_quick_chat_from_agent(self, team_only, quick_chat): \"\"\" Passes the agents quick chats to the game, and also to other python bots. This does perform limiting. You are limited to 5 quick chats in a 2 second period starting from the first chat. This means you can spread your chats out to be even within that 2 second period. You could spam them in the first little bit but then will be throttled. \"\"\" # Send the quick chat to the game rlbot_status = send_quick_chat_flat(self.game_interface, self.index, self.team, team_only, quick_chat) if rlbot_status == RLBotCoreStatus.QuickChatRateExceeded: self.logger.debug('quick chat disabled') else: # Make the quick chat visible to other python bots. Unfortunately other languages can't see it. send_quick_chat(self.quick_chat_queue_holder, self.index, self.team, team_only, quick_chat)\n\n    ### Response: Passes the agents quick chats to the game, and also to other python bots.\n        This does perform limiting.\n        You are limited to 5 quick chats in a 2 second period starting from the first chat.\n        This means you can spread your chats out to be even within that 2 second period.\n        You could spam them in the first little bit but then will be throttled..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Object readObject(final File source) throws IOException, ClassNotFoundException { Object result = null; FileInputStream fis = null; BufferedInputStream bis = null; ObjectInputStream ois = null; try { fis = new FileInputStream(source); bis = new BufferedInputStream(fis); ois = new ObjectInputStream(bis); result = ois.readObject(); } finally { StreamUtil.close(ois); StreamUtil.close(bis); StreamUtil.close(fis); } return result; }\n\n    ### Response:", "ground_truth": "Reads serialized object from the file.", "predict": "Object readObject reads objects from file into objects of arbitrary type, supported file formats include serialized objects, binary objects, and plain text objects."}, {"ID": 1368, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _correctNoise(self, image): ''' denoise using non-local-means with guessing best parameters ''' from skimage.restoration import denoise_nl_means # save startup time image[np.isnan(image)] = 0 # otherwise result =nan out = denoise_nl_means(image, patch_size=7, patch_distance=11, #h=signalStd(image) * 0.1 ) return out\n\n    ### Response: denoise using non-local-means\r\n        with guessing best parameters.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static byte[] objectToByteArray(final Object obj) throws IOException { FastByteArrayOutputStream bos = new FastByteArrayOutputStream(); ObjectOutputStream oos = null; try { oos = new ObjectOutputStream(bos); oos.writeObject(obj); } finally { StreamUtil.close(oos); } return bos.toByteArray(); }\n\n    ### Response:", "ground_truth": "Serialize an object to byte array.", "predict": "converts objects to bytes and back"}, {"ID": 1369, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function addIndex($name, $cols) { if (empty($name)) { return Yii::t('podium/flash', 'Installation aborted! Index name missing.'); } if (empty($cols)) { return Yii::t('podium/flash', 'Installation aborted! Index columns missing.'); } try { $this->db->createCommand()->createIndex($this->getIndexName($name), $this->table, $cols)->execute(); return $this->returnSuccess(Yii::t('podium/flash', 'Table index {name} has been added', [ 'name' => $this->getIndexName($name) ])); } catch (Exception $e) { return $this->returnError($e->getMessage(), __METHOD__, Yii::t('podium/flash', 'Error during table index {name} adding', [ 'name' => $this->getIndexName($name) ]) ); } }\n\n    ### Response: Creates database table index.\n@param string $name index name\n@param array $cols columns\n@return string result message\n@since 0.2.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Object byteArrayToObject(final byte[] data) throws IOException, ClassNotFoundException { Object retObj = null; ByteArrayInputStream bais = new ByteArrayInputStream(data); ObjectInputStream ois = null; try { ois = new ObjectInputStream(bais); retObj = ois.readObject(); } finally { StreamUtil.close(ois); } return retObj; }\n\n    ### Response:", "ground_truth": "De-serialize an object from byte array.", "predict": "Decodes and returns the given bytes as an Object"}, {"ID": 1370, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static JavacNode injectField(JavacNode typeNode, JCVariableDecl field) { return injectField(typeNode, field, false); }\n\n    ### Response: Adds the given new field declaration to the provided type AST Node.\n\nAlso takes care of updating the JavacAST..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String[][] resolveMappedTypesTableNames(final Class[] types) { if (cachedMappedNames == null) { String[][] names = new String[types.length][]; for (int i = 0; i < types.length; i++) { Class type = types[i]; if (type != null) { DbEntityDescriptor ded = cachedDbEntityDescriptors[i]; if (ded != null) { Class[] mappedTypes = ded.getMappedTypes(); if (mappedTypes != null) { names[i] = createTypesTableNames(mappedTypes); } } } } cachedMappedNames = names; } return cachedMappedNames; }\n\n    ### Response:", "ground_truth": "Resolved mapped type names for each type.", "predict": "Resolves the given mapped types Table names given the provided Class array of types"}, {"ID": 1371, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def reduce_base(amount: int, base: int) -> tuple: \"\"\" Compute the reduced base of the given parameters :param amount: the amount value :param base: current base value :return: tuple containing computed (amount, base) \"\"\" if amount == 0: return 0, 0 next_amount = amount next_base = base next_amount_is_integer = True while next_amount_is_integer: amount = next_amount base = next_base if next_amount % 10 == 0: next_amount = int(next_amount / 10) next_base += 1 else: next_amount_is_integer = False return int(amount), int(base)\n\n    ### Response: Compute the reduced base of the given parameters\n\n    :param amount: the amount value\n    :param base: current base value\n\n    :return: tuple containing computed (amount, base).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String[] createTypesTableNames(final Class[] types) { String[] names = new String[types.length]; for (int i = 0; i < types.length; i++) { if (types[i] == null) { names[i] = null; continue; } DbEntityDescriptor ded = dbEntityManager.lookupType(types[i]); if (ded != null) { String tableName = ded.getTableName(); tableName = tableName.toUpperCase(); names[i] = tableName; } } return names; }\n\n    ### Response:", "ground_truth": "Creates table names for given types.", "predict": "Creates names for the tables of the given types"}, {"ID": 1372, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function Delete($Name) { $Parsed = $this->Parse($Name); // Throw an event so that plugins that have stored the file somewhere else can delete it. $this->EventArguments['Parsed'] =& $Parsed; $Handled = FALSE; $this->EventArguments['Handled'] =& $Handled; $this->FireAs('Gdn_Upload')->FireEvent('Delete'); if (!$Handled) { $Path = PATH_UPLOADS.'/'.ltrim($Name, '/'); @unlink($Path); } }\n\n    ### Response: Delete an uploaded file.\n\n@param string $Name The name of the upload as saved in the database..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"unchecked\"}) protected Object readColumnValue(final int colNdx, final Class destinationType, final Class<? extends SqlType> sqlTypeClass, final int columnDbSqlType) { if (colNdx != cachedColumnNdx) { try { SqlType sqlType; if (sqlTypeClass != null) { sqlType = SqlTypeManager.get().lookupSqlType(sqlTypeClass); } else { sqlType = SqlTypeManager.get().lookup(destinationType); } if (sqlType != null) { cachedColumnValue = sqlType.readValue(resultSet, colNdx + 1, destinationType, columnDbSqlType); } else { cachedColumnValue = resultSet.getObject(colNdx + 1); cachedColumnValue = TypeConverterManager.get().convertType(cachedColumnValue, destinationType); } } catch (SQLException sex) { throw new DbOomException(dbOomQuery, \"Invalid value for column #\" + (colNdx + 1), sex); } cachedColumnNdx = colNdx; } return cachedColumnValue; }\n\n    ### Response:", "ground_truth": "Reads column value from result set. Since this method may be called more then once for\nthe same column, it caches column values.", "predict": "reads the contents of the specified column from the ResultSet and converts it to the given destinationType"}, {"ID": 1373, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def py_log_level(self, default='none'): ''' Set the log level for python Bokeh code. ''' level = self._get_str(\"PY_LOG_LEVEL\", default, \"debug\") LEVELS = {'trace': logging.TRACE, 'debug': logging.DEBUG, 'info' : logging.INFO, 'warn' : logging.WARNING, 'error': logging.ERROR, 'fatal': logging.CRITICAL, 'none' : None} return LEVELS[level]\n\n    ### Response: Set the log level for python Bokeh code..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void cacheResultSetEntities(final Object[] result) { if (entitiesCache == null) { entitiesCache = new HashMap<>(); } for (int i = 0; i < result.length; i++) { Object object = result[i]; if (object == null) { continue; } DbEntityDescriptor ded = cachedDbEntityDescriptors[i]; if (ded == null) { // not a type, continue continue; } // calculate key Object key; if (ded.hasIdColumn()) { //noinspection unchecked key = ded.getKeyValue(object); } else { key = object; } Object cachedObject = entitiesCache.get(key); if (cachedObject == null) { // object is not in the cache, add it entitiesCache.put(key, object); } else { // object is in the cache, replace it result[i] = cachedObject; } } }\n\n    ### Response:", "ground_truth": "Caches returned entities. Replaces new instances with existing ones.", "predict": "Prevent unnecessary SQL selects by storing the result objects in an LRU cache and replacing objects in the cache whenever possible.."}, {"ID": 1374, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def filter_event(tag, data, defaults): ''' Accept a tag, a dict and a list of default keys to return from the dict, and check them against the cloud configuration for that tag ''' ret = {} keys = [] use_defaults = True for ktag in __opts__.get('filter_events', {}): if tag != ktag: continue keys = __opts__['filter_events'][ktag]['keys'] use_defaults = __opts__['filter_events'][ktag].get('use_defaults', True) if use_defaults is False: defaults = [] # For PY3, if something like \".keys()\" or \".values()\" is used on a dictionary, # it returns a dict_view and not a list like in PY2. \"defaults\" should be passed # in with the correct data type, but don't stack-trace in case it wasn't. if not isinstance(defaults, list): defaults = list(defaults) defaults = list(set(defaults + keys)) for key in defaults: if key in data: ret[key] = data[key] return ret\n\n    ### Response: Accept a tag, a dict and a list of default keys to return from the dict, and\n    check them against the cloud configuration for that tag.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ProviderDefinition[] resolve(final Class type, final String name) { ClassDescriptor cd = ClassIntrospector.get().lookup(type); MethodDescriptor[] methods = cd.getAllMethodDescriptors(); List<ProviderDefinition> list = new ArrayList<>(); for (MethodDescriptor methodDescriptor : methods) { Method method = methodDescriptor.getMethod(); PetiteProvider petiteProvider = method.getAnnotation(PetiteProvider.class); if (petiteProvider == null) { continue; } String providerName = petiteProvider.value(); if (StringUtil.isBlank(providerName)) { // default provider name providerName = method.getName(); if (providerName.endsWith(\"Provider\")) { providerName = StringUtil.substring(providerName, 0, -8); } } ProviderDefinition providerDefinition; if (Modifier.isStatic(method.getModifiers())) { providerDefinition = new ProviderDefinition(providerName, method); } else { providerDefinition = new ProviderDefinition(providerName, name, method); } list.add(providerDefinition); } ProviderDefinition[] providers; if (list.isEmpty()) { providers = ProviderDefinition.EMPTY; } else { providers = list.toArray(new ProviderDefinition[0]); } return providers; }\n\n    ### Response:", "ground_truth": "Resolves all providers in the class", "predict": "Resolve the given provider for the given method of the given class of given name and signature"}, {"ID": 1375, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (f *Frees) Update() { f.m.Lock() defer f.m.Unlock() runtime.ReadMemStats(&f.mem) f.d.Update(int64(f.mem.Frees)) }\n\n    ### Response: // Update updates the number of frees..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String applyToTableName(final String tableName) { String entityName = convertTableNameToEntityName(tableName); return convertEntityNameToTableName(entityName); }\n\n    ### Response:", "ground_truth": "Applies table naming strategy to given table name hint.\nReturns full table name.", "predict": "// This method applies an operator to the given table name and\n    // converts the result to an entity name corresponding to the given table\n    // name\n    // It uses the convertTableNameToEntityName and\n    // convertEntityNameToTableName methods to carry\n    //out the conversions"}, {"ID": 1376, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def do_asg(self,args): \"\"\"Go to the specified auto scaling group. asg -h for detailed help\"\"\" parser = CommandArgumentParser(\"asg\") parser.add_argument(dest='asg',help='asg index or name'); args = vars(parser.parse_args(args)) print \"loading auto scaling group {}\".format(args['asg']) try: index = int(args['asg']) asgSummary = self.wrappedStack['resourcesByTypeIndex']['AWS::AutoScaling::AutoScalingGroup'][index] except: asgSummary = self.wrappedStack['resourcesByTypeName']['AWS::AutoScaling::AutoScalingGroup'][args['asg']] self.stackResource(asgSummary.stack_name,asgSummary.logical_id)\n\n    ### Response: Go to the specified auto scaling group. asg -h for detailed help.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean isConnectionValid(final ConnectionData connectionData, final long now) { if (!validateConnection) { return true; } if (now < connectionData.lastUsed + validationTimeout) { return true; } Connection conn = connectionData.connection; if (validationQuery == null) { try { return !conn.isClosed(); } catch (SQLException sex) { return false; } } boolean valid = true; Statement st = null; try { st = conn.createStatement(); st.execute(validationQuery); } catch (SQLException sex) { valid = false; } finally { if (st != null) { try { st.close(); } catch (SQLException ignore) { } } } return valid; }\n\n    ### Response:", "ground_truth": "Checks if existing connection is valid and available. It may happens\nthat if connection is not used for a while it becomes inactive,\nalthough not technically closed.", "predict": "Validates the given Connection by running the given query on the Connection and by verifying if the Connection is open and active."}, {"ID": 1377, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    async def put(self, key, value, *args): \"\"\"Edits a data entry.\"\"\" self._db[key] = value await self.save()\n\n    ### Response: Edits a data entry..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected void renderView(final ActionRequest actionRequest, final String target) throws Exception { HttpServletRequest request = actionRequest.getHttpServletRequest(); HttpServletResponse response = actionRequest.getHttpServletResponse(); RequestDispatcher dispatcher = request.getRequestDispatcher(target); if (dispatcher == null) { response.sendError(SC_NOT_FOUND, \"Result not found: \" + target); // should never happened return; } // If we're included, then include the view, otherwise do forward. // This allow the page to, for example, set content type. if (DispatcherUtil.isPageIncluded(request, response)) { dispatcher.include(request, response); } else { dispatcher.forward(request, response); } }\n\n    ### Response:", "ground_truth": "Renders the view by dispatching to the target JSP.", "predict": "Render this View according to the specified HTTP method and url path."}, {"ID": 1378, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function formActionForSelect(ContaoBackendViewTemplate $template) { $environment = $this->getEnvironment(); if (!$template->get('select') || ('select' !== $environment->getInputProvider()->getParameter('act')) ) { return; } $actionUrlEvent = new AddToUrlEvent('select=properties'); $environment->getEventDispatcher()->dispatch(ContaoEvents::BACKEND_ADD_TO_URL, $actionUrlEvent); $template->set('action', $actionUrlEvent->getUrl()); }\n\n    ### Response: Add the form action url for input parameter action is select.\n\n@param ContaoBackendViewTemplate $template The template.\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected String locateTarget(final ActionRequest actionRequest, String path) { String target; if (path.endsWith(StringPool.SLASH)) { path = path + defaultViewPageName; } for (final String ext : defaultViewExtensions) { target = path + ext; if (targetExists(actionRequest, target)) { return target; } } return null; }\n\n    ### Response:", "ground_truth": "Locates target using path with various extensions appended.", "predict": "Locates the target page of the given action request given its path. It looks first into the given path and if that does not produce any result, it looks into the default pages and into the given extension of the given path and checks if that exists and returns it. If no path or target or extension or path extension is given, nothing will be returned and null will be returned."}, {"ID": 1379, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (a *StandardEWMA) Tick() { count := atomic.LoadInt64(&a.uncounted) atomic.AddInt64(&a.uncounted, -count) instantRate := float64(count) / float64(5e9) a.mutex.Lock() defer a.mutex.Unlock() if a.init { a.rate += a.alpha * (instantRate - a.rate) } else { a.init = true a.rate = instantRate } }\n\n    ### Response: // Tick ticks the clock to update the moving average.  It assumes it is called\n// every five seconds..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public PrintWriter getWriter() throws IOException { preResponseCommit(); if (buffer == null) { return getResponse().getWriter(); } return buffer.getWriter(); }\n\n    ### Response:", "ground_truth": "Returns buffered writer if buffering is enabled,\notherwise returns the original writer.", "predict": "// Override to getWriter() first checks for preResponseCommit() and writes\n// the necessary items to the buffer first. If there is no buffer,\n// or if there is insufficient items in the buffer,\n// it writes directly to the response"}, {"ID": 1380, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def mpi(value): \"\"\"Serialize multipresicion integer using GPG format.\"\"\" bits = value.bit_length() data_size = (bits + 7) // 8 data_bytes = bytearray(data_size) for i in range(data_size): data_bytes[i] = value & 0xFF value = value >> 8 data_bytes.reverse() return struct.pack('>H', bits) + bytes(data_bytes)\n\n    ### Response: Serialize multipresicion integer using GPG format..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public ServletOutputStream getOutputStream() throws IOException { preResponseCommit(); if (buffer == null) { return getResponse().getOutputStream(); } return buffer.getOutputStream(); }\n\n    ### Response:", "ground_truth": "Returns buffered output stream if buffering is enabled,\notherwise returns the original stream.", "predict": "Override to prepare response prior to send; If no buffer provided, return output stream of response; Otherwise, return buffered output stream."}, {"ID": 1381, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def download(self, filename, action='download', x_filename='', x_sendfile=None, real_filename=''): \"\"\" action will be \"download\", \"inline\" and if the request.GET has 'action', then the action will be replaced by it. \"\"\" from uliweb import request from uliweb.utils.common import safe_str from uliweb.utils.filedown import filedown s = settings.GLOBAL action = request.GET.get('action', action) if not real_filename: real_filename = self.get_filename(filename, True, convert=False) else: real_filename = files.encode_filename(real_filename, to_encoding=s.FILESYSTEM_ENCODING) if not x_filename: x_filename = safe_str(filename, s.FILESYSTEM_ENCODING) if self.x_file_prefix: x_filename = os.path.normpath(os.path.join(self.x_file_prefix, x_filename)).replace('\\\\', '/') xsend_flag = bool(self.x_sendfile) if x_sendfile is None else x_sendfile return filedown(request.environ, filename, action=action, x_sendfile=xsend_flag, x_header_name=self.x_header_name, x_filename=x_filename, real_filename=real_filename)\n\n    ### Response: action will be \"download\", \"inline\"\r\n        and if the request.GET has 'action', then the action will be replaced by it..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void writeContentToResponse(final char[] content) throws IOException { if (buffer == null) { return; } if (buffer.isUsingStream()) { ServletOutputStream outputStream = getResponse().getOutputStream(); String encoding = getContentTypeEncoding(); if (encoding == null) { outputStream.write(CharUtil.toByteArray(content)); } else { outputStream.write(CharUtil.toByteArray(content, encoding)); } outputStream.flush(); } else { Writer out = getResponse().getWriter(); out.write(content); out.flush(); } }\n\n    ### Response:", "ground_truth": "Writes content to original output stream, using either output stream or writer, depending\non how the content was buffered. It is assumed that provided content is a modified\nwrapped content.", "predict": "Writes the given contents to the output stream of the response"}, {"ID": 1382, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void writeProperties(JsonGenerator jsonGenerator, ResultSet rs) throws IOException, SQLException { if (columnCountProperties != -1) { jsonGenerator.writeObjectFieldStart(\"properties\"); for (Map.Entry<String, Integer> entry : cachedColumnNames.entrySet()) { String string = entry.getKey(); string = string.toLowerCase(); Integer fieldId = entry.getValue(); if (rs.getObject(fieldId) instanceof Object[]) { Object[] array = (Object[]) rs.getObject(fieldId); jsonGenerator.writeArrayFieldStart(string); writeArray(jsonGenerator, array, true); jsonGenerator.writeEndArray(); } else if (rs.getObject(fieldId) != null && rs.getObject(fieldId).equals(\"{}\")){ jsonGenerator.writeObjectFieldStart(string); jsonGenerator.writeEndObject(); } else if (rs.getObject(fieldId) == \"null\") { jsonGenerator.writeFieldName(string); jsonGenerator.writeNull(); } else { jsonGenerator.writeObjectField(string, rs.getObject(fieldId)); } } jsonGenerator.writeEndObject(); } }\n\n    ### Response: Write the GeoJSON properties.\n\n@param jsonGenerator\n@param rs\n@throws IOException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void setContentType(final String type) { super.setContentType(type); contentTypeResolver = new ContentTypeHeaderResolver(type); if (bufferContentType(type, contentTypeResolver.getMimeType(), contentTypeResolver.getEncoding())) { enableBuffering(); } else { disableBuffering(); } }\n\n    ### Response:", "ground_truth": "Sets the content type and enables or disables buffering.", "predict": "Resolves the ContentType of the document based on its extension and set the appropriate values for ETag, Last Modified, Buffering and Flushing"}, {"ID": 1383, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_document( self, name, mask=None, transaction=None, read_time=None, retry=google.api_core.gapic_v1.method.DEFAULT, timeout=google.api_core.gapic_v1.method.DEFAULT, metadata=None, ): \"\"\" Gets a single document. Example: >>> from google.cloud import firestore_v1beta1 >>> >>> client = firestore_v1beta1.FirestoreClient() >>> >>> name = client.any_path_path('[PROJECT]', '[DATABASE]', '[DOCUMENT]', '[ANY_PATH]') >>> >>> response = client.get_document(name) Args: name (str): The resource name of the Document to get. In the format: ``projects/{project_id}/databases/{database_id}/documents/{document_path}``. mask (Union[dict, ~google.cloud.firestore_v1beta1.types.DocumentMask]): The fields to return. If not set, returns all fields. If the document has a field that is not present in this mask, that field will not be returned in the response. If a dict is provided, it must be of the same form as the protobuf message :class:`~google.cloud.firestore_v1beta1.types.DocumentMask` transaction (bytes): Reads the document in a transaction. read_time (Union[dict, ~google.cloud.firestore_v1beta1.types.Timestamp]): Reads the version of the document at the given time. This may not be older than 60 seconds. If a dict is provided, it must be of the same form as the protobuf message :class:`~google.cloud.firestore_v1beta1.types.Timestamp` retry (Optional[google.api_core.retry.Retry]): A retry object used to retry requests. If ``None`` is specified, requests will not be retried. timeout (Optional[float]): The amount of time, in seconds, to wait for the request to complete. Note that if ``retry`` is specified, the timeout applies to each individual attempt. metadata (Optional[Sequence[Tuple[str, str]]]): Additional metadata that is provided to the method. Returns: A :class:`~google.cloud.firestore_v1beta1.types.Document` instance. Raises: google.api_core.exceptions.GoogleAPICallError: If the request failed for any reason. google.api_core.exceptions.RetryError: If the request failed due to a retryable error and retry attempts failed. ValueError: If the parameters are invalid. \"\"\" # Wrap the transport method to add retry and timeout logic. if \"get_document\" not in self._inner_api_calls: self._inner_api_calls[ \"get_document\" ] = google.api_core.gapic_v1.method.wrap_method( self.transport.get_document, default_retry=self._method_configs[\"GetDocument\"].retry, default_timeout=self._method_configs[\"GetDocument\"].timeout, client_info=self._client_info, ) # Sanity check: We have some fields which are mutually exclusive; # raise ValueError if more than one is sent. google.api_core.protobuf_helpers.check_oneof( transaction=transaction, read_time=read_time ) request = firestore_pb2.GetDocumentRequest( name=name, mask=mask, transaction=transaction, read_time=read_time ) if metadata is None: metadata = [] metadata = list(metadata) try: routing_header = [(\"name\", name)] except AttributeError: pass else: routing_metadata = google.api_core.gapic_v1.routing_header.to_grpc_metadata( routing_header ) metadata.append(routing_metadata) return self._inner_api_calls[\"get_document\"]( request, retry=retry, timeout=timeout, metadata=metadata )\n\n    ### Response: Gets a single document.\n\n        Example:\n            >>> from google.cloud import firestore_v1beta1\n            >>>\n            >>> client = firestore_v1beta1.FirestoreClient()\n            >>>\n            >>> name = client.any_path_path('[PROJECT]', '[DATABASE]', '[DOCUMENT]', '[ANY_PATH]')\n            >>>\n            >>> response = client.get_document(name)\n\n        Args:\n            name (str): The resource name of the Document to get. In the format:\n                ``projects/{project_id}/databases/{database_id}/documents/{document_path}``.\n            mask (Union[dict, ~google.cloud.firestore_v1beta1.types.DocumentMask]): The fields to return. If not set, returns all fields.\n\n                If the document has a field that is not present in this mask, that field\n                will not be returned in the response.\n\n                If a dict is provided, it must be of the same form as the protobuf\n                message :class:`~google.cloud.firestore_v1beta1.types.DocumentMask`\n            transaction (bytes): Reads the document in a transaction.\n            read_time (Union[dict, ~google.cloud.firestore_v1beta1.types.Timestamp]): Reads the version of the document at the given time.\n                This may not be older than 60 seconds.\n\n                If a dict is provided, it must be of the same form as the protobuf\n                message :class:`~google.cloud.firestore_v1beta1.types.Timestamp`\n            retry (Optional[google.api_core.retry.Retry]):  A retry object used\n                to retry requests. If ``None`` is specified, requests will not\n                be retried.\n            timeout (Optional[float]): The amount of time, in seconds, to wait\n                for the request to complete. Note that if ``retry`` is\n                specified, the timeout applies to each individual attempt.\n            metadata (Optional[Sequence[Tuple[str, str]]]): Additional metadata\n                that is provided to the method.\n\n        Returns:\n            A :class:`~google.cloud.firestore_v1beta1.types.Document` instance.\n\n        Raises:\n            google.api_core.exceptions.GoogleAPICallError: If the request\n                    failed for any reason.\n            google.api_core.exceptions.RetryError: If the request failed due\n                    to a retryable error and retry attempts failed.\n            ValueError: If the parameters are invalid..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void print(final String string) throws IOException { if (isBufferStreamBased()) { String encoding = getContentTypeEncoding(); byte[] bytes; if (encoding == null) { bytes = string.getBytes(); } else { bytes = string.getBytes(encoding); } buffer.getOutputStream().write(bytes); return; } // make sure at least writer is initialized buffer.getWriter().write(string); }\n\n    ### Response:", "ground_truth": "Appends string to the buffer.", "predict": "Prints the given string to the output stream of the document or\n    throws an IOException if the document does not support writing to its\n    output stream or the given string cannot be converted to its output\n    stream's encoding."}, {"ID": 1384, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def unsure_pyname(pyname, unbound=True): \"\"\"Return `True` if we don't know what this name references\"\"\" if pyname is None: return True if unbound and not isinstance(pyname, pynames.UnboundName): return False if pyname.get_object() == pyobjects.get_unknown(): return True\n\n    ### Response: Return `True` if we don't know what this name references.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected JsonResult login() { T authToken; authToken = loginViaBasicAuth(servletRequest); if (authToken == null) { authToken = loginViaRequestParams(servletRequest); } if (authToken == null) { log.warn(\"Login failed.\"); return JsonResult.of(HttpStatus.error401().unauthorized(\"Login failed.\")); } log.info(\"login OK!\"); final UserSession<T> userSession = new UserSession<>(authToken, userAuth.tokenValue(authToken)); userSession.start(servletRequest, servletResponse); // return token return tokenAsJson(authToken); }\n\n    ### Response:", "ground_truth": "Authenticate user and start user session.", "predict": "Login via Basic Authentication, Request Parameters and Token Based Authentication"}, {"ID": 1385, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (cond *TimeoutCond) Interrupt() { cond.L.Lock() defer cond.L.Unlock() close(cond.signal) cond.signal = make(chan int, 0) }\n\n    ### Response: // Interrupt goroutine wait on this TimeoutCond.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected JsonResult tokenAsJson(final T authToken) { final JsonObject jsonObject = new JsonObject(); jsonObject.put(\"token\", userAuth.tokenValue(authToken)); return JsonResult.of(jsonObject); }\n\n    ### Response:", "ground_truth": "Prepares the JSON payload that carries on the token value.", "predict": "// convert token to its corresponding Json representation"}, {"ID": 1386, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void checkEncoding(String encoding) throws IOException { try { URLEncoder.encode(\"\", encoding); } catch (UnsupportedEncodingException e) { throw new IOException(\"invalid encoding [\" + encoding + \"]\"); } }\n\n    ### Response: check if given encoding is ok\n\n@param encoding\n@throws PageException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected T loginViaBasicAuth(final HttpServletRequest servletRequest) { final String username = ServletUtil.resolveAuthUsername(servletRequest); if (username == null) { return null; } final String password = ServletUtil.resolveAuthPassword(servletRequest); return userAuth.login(username, password); }\n\n    ### Response:", "ground_truth": "Tries to login user with basic authentication.", "predict": "Login via basic auth"}, {"ID": 1387, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def register(self): \"\"\" Registers a new device with the name entity_id. This device has permissions for services like subscribe, publish and access historical data. \"\"\" register_url = self.base_url + \"api/0.1.0/register\" register_headers = { \"apikey\": str(self.owner_api_key), \"resourceID\": str(self.entity_id), \"serviceType\": \"publish,subscribe,historicData\" } with self.no_ssl_verification(): r = requests.get(register_url, {}, headers=register_headers) response = r.content.decode(\"utf-8\") if \"APIKey\" in str(r.content.decode(\"utf-8\")): response = json.loads(response[:-331] + \"}\") # Temporary fix to a middleware bug, should be removed in future response[\"Registration\"] = \"success\" else: response = json.loads(response) response[\"Registration\"] = \"failure\" return response\n\n    ### Response: Registers a new device with the name entity_id. This device has permissions for services like subscribe,\n        publish and access historical data..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected JsonResult logout() { log.debug(\"logout user\"); UserSession.stop(servletRequest, servletResponse); return JsonResult.of(HttpStatus.ok()); }\n\n    ### Response:", "ground_truth": "Logout hook.", "predict": "logout logout logout_success_response_status_code_description_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs_const_lhs"}, {"ID": 1388, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_tags(self): \"\"\" Get all tags and post count of each tag. :return: dict_item(tag_name, Pair(count_all, count_published)) \"\"\" posts = self.get_posts(include_draft=True) result = {} for post in posts: for tag_name in set(post.tags): result[tag_name] = result.setdefault( tag_name, Pair(0, 0)) + Pair(1, 0 if post.is_draft else 1) return list(result.items())\n\n    ### Response: Get all tags and post count of each tag.\n\n        :return: dict_item(tag_name, Pair(count_all, count_published)).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static File toContainerFile(final URL url) { String protocol = url.getProtocol(); if (protocol.equals(FILE_PROTOCOL)) { return toFile(url); } String path = url.getPath(); return new File(URI.create( path.substring(ZERO, path.lastIndexOf(\"!/\")))); }\n\n    ### Response:", "ground_truth": "Returns a file of either a folder or a containing archive.", "predict": "The method toContainerFile takes in a url and returns a file or container file corresponding to the given url."}, {"ID": 1389, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func daemonSetHealth(dsStatus *apps.DaemonSetStatus) error { if dsStatus.CurrentNumberScheduled != dsStatus.DesiredNumberScheduled { return errors.Errorf(\"current number of scheduled Pods ('%d') doesn't match the amount of desired Pods ('%d')\", dsStatus.CurrentNumberScheduled, dsStatus.DesiredNumberScheduled) } if dsStatus.NumberAvailable == 0 { return errors.New(\"no available Pods for DaemonSet\") } if dsStatus.NumberReady == 0 { return errors.New(\"no ready Pods for DaemonSet\") } return nil }\n\n    ### Response: // daemonSetHealth is a helper function for getting the health of a DaemonSet's status.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static File mkdirs(final File dirs) throws IOException { if (dirs.exists()) { checkIsDirectory(dirs); return dirs; } return checkCreateDirectory(dirs); }\n\n    ### Response:", "ground_truth": "Creates all directories at once.\n\n@param dirs Directories to make.\n@throws IOException if cannot create directory.", "predict": "// mkdirs creates directories given by parameter and returns the result."}, {"ID": 1390, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func RegisterFormat(f Format) { if _, ok := formatsByName[f.Name]; ok { panic(fmt.Errorf(\"format %s is allready registered\", f.Name)) } formatsByName[f.Name] = &f for _, m := range f.Ext { if sf, ok := formatsByExt[m]; ok { panic(fmt.Errorf(\"format %s is allready registered with MIME %s\", sf.Name, m)) } formatsByExt[m] = &f } for _, m := range f.Mime { if sf, ok := formatsByMime[m]; ok { panic(fmt.Errorf(\"format %s is allready registered with MIME %s\", sf.Name, m)) } formatsByMime[m] = &f } }\n\n    ### Response: // RegisterFormat registers a new quad-file format..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static File mkdir(final File dir) throws IOException { if (dir.exists()) { checkIsDirectory(dir); return dir; } return checkCreateDirectory(dir); }\n\n    ### Response:", "ground_truth": "Creates single directory.\n\n@throws IOException if cannot create directory.", "predict": "// This method creates a directory given its absolute path."}, {"ID": 1391, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function registerGeoIp() { $this->singleton(Contracts\\GeoIP::class, function ($app) { /** @var \\Illuminate\\Contracts\\Config\\Repository $config */ $config = $app['config']; return new GeoIP( $app[Contracts\\GeoIPDriver::class], $app[Contracts\\GeoIPCache::class], Arr::only($config->get('geoip', []), ['cache', 'location', 'currencies']) ); }); }\n\n    ### Response: Register the GeoIP..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static void _copyFile(final File srcFile, final File destFile) throws IOException { if (destFile.exists()) { if (destFile.isDirectory()) { throw new IOException(\"Destination '\" + destFile + \"' is a directory\"); } } // do copy file FileInputStream input = null; FileOutputStream output = null; try { input = new FileInputStream(srcFile); output = new FileOutputStream(destFile, false); StreamUtil.copy(input, output); } finally { StreamUtil.close(output); StreamUtil.close(input); } // done if (srcFile.length() != destFile.length()) { throw new IOException(\"Copy file failed of '\" + srcFile + \"' to '\" + destFile + \"' due to different sizes\"); } destFile.setLastModified(srcFile.lastModified()); }\n\n    ### Response:", "ground_truth": "Internal file copy when most of the pre-checking has passed.\n\n@param srcFile  Source {@link File}.\n@param destFile Destination {@link File}.\n@throws IOException if cannot copy", "predict": "Copy file from source to destination\n\n    "}, {"ID": 1392, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function loadTemplate($strFilename) { if(file_exists($strFilename)) { $template = new PHPWord_Template($strFilename); return $template; } else { trigger_error('Template file '.$strFilename.' not found.', E_ERROR); } }\n\n    ### Response: Load a Template File\n\n@param string $strFilename\n@return PHPWord_Template.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void copyDir(final File srcDir, final File destDir) throws IOException { checkDirCopy(srcDir, destDir); _copyDirectory(srcDir, destDir); }\n\n    ### Response:", "ground_truth": "Copies directory with specified copy params.\n\n@see #_copyDirectory(File, File)", "predict": "\n    Copy directory given by source to destination directory given by destDir. The method first verifies if destDir exists and has the proper\n    permissions to support directory copy and if the given source and destDir names match and if there\n    are any folder name mapping specified and if there any folder name mapping specified\n    and if there any folder name mapping specified and if there any folder name mapping specified\n    and if there any folder name mapping specified and if there any folder name mapping specified\n    and if there any folder name mapping specified and if there any folder name mapping specified\n    and if there any folder name mapping specified and if there any folder name mapping specified\n    and if there any folder name mapping specified and if there any folder name mapping specified\n    and if there any folder name mapping specified and if there any folder name mapping specified\n    and if there any folder name mapping specified and if there any folder name mapping specified\n    and if there any folder name mapping specified and if there any folder name mapping specified\n    and if there any folder"}, {"ID": 1393, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def bind_context(context_filename): \"\"\" loads context from file and binds to it :param: context_filename absolute path of the context file called by featuredjango.startup.select_product prior to selecting the individual features \"\"\" global PRODUCT_CONTEXT if PRODUCT_CONTEXT is None: with open(context_filename) as contextfile: try: context = json.loads(contextfile.read()) except ValueError as e: raise ContextParseError('Error parsing %s: %s' % (context_filename, str(e))) context['PRODUCT_CONTEXT_FILENAME'] = context_filename context['PRODUCT_EQUATION_FILENAME'] = os.environ['PRODUCT_EQUATION_FILENAME'] context['PRODUCT_NAME'] = os.environ['PRODUCT_NAME'] context['CONTAINER_NAME'] = os.environ['CONTAINER_NAME'] context['PRODUCT_DIR'] = os.environ['PRODUCT_DIR'] context['CONTAINER_DIR'] = os.environ['CONTAINER_DIR'] context['APE_ROOT_DIR'] = os.environ['APE_ROOT_DIR'] context['APE_GLOBAL_DIR'] = os.environ['APE_GLOBAL_DIR'] PRODUCT_CONTEXT = ContextAccessor(context) else: # bind_context called but context already bound # harmless rebind (with same file) is ignored # otherwise this is a serious error if PRODUCT_CONTEXT.PRODUCT_CONTEXT_FILENAME != context_filename: raise ContextBindingError('product context bound multiple times using different data!')\n\n    ### Response: loads context from file and binds to it\n\n    :param: context_filename absolute path of the context file\n\n    called by featuredjango.startup.select_product\n    prior to selecting the individual features.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static File moveFileToDir(final File srcFile, final File destDir) throws IOException { checkExistsAndDirectory(destDir); return moveFile(srcFile, file(destDir, srcFile.getName())); }\n\n    ### Response:", "ground_truth": "Moves a file to a directory.\n\n@param srcFile Source {@link File}.\n@param destDir Destination directory.\n@throws IOException if there is an error during move.", "predict": "\n    Moves a file from its original location to the given directory. The source file must already exist for this method to work."}, {"ID": 1394, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def volume_absent(name, volume_name=None, volume_id=None, instance_name=None, instance_id=None, device=None, region=None, key=None, keyid=None, profile=None): ''' Ensure the EC2 volume is detached and absent. .. versionadded:: 2016.11.0 name State definition name. volume_name Name tag associated with the volume. For safety, if this matches more than one volume, the state will refuse to apply. volume_id Resource ID of the volume. instance_name Only remove volume if it is attached to instance with this Name tag. Exclusive with 'instance_id'. Requires 'device'. instance_id Only remove volume if it is attached to this instance. Exclusive with 'instance_name'. Requires 'device'. device Match by device rather than ID. Requires one of 'instance_name' or 'instance_id'. region Region to connect to. key Secret key to be used. keyid Access key to be used. profile A dict with region, key and keyid, or a pillar key (string) that contains a dict with region, key and keyid. ''' ret = {'name': name, 'result': True, 'comment': '', 'changes': {} } filters = {} running_states = ('pending', 'rebooting', 'running', 'stopping', 'stopped') if not salt.utils.data.exactly_one((volume_name, volume_id, instance_name, instance_id)): raise SaltInvocationError(\"Exactly one of 'volume_name', 'volume_id', \" \"'instance_name', or 'instance_id' must be provided.\") if (instance_name or instance_id) and not device: raise SaltInvocationError(\"Parameter 'device' is required when either \" \"'instance_name' or 'instance_id' is specified.\") if volume_id: filters.update({'volume-id': volume_id}) if volume_name: filters.update({'tag:Name': volume_name}) if instance_name: instance_id = __salt__['boto_ec2.get_id']( name=instance_name, region=region, key=key, keyid=keyid, profile=profile, in_states=running_states) if not instance_id: ret['comment'] = ('Instance with Name {0} not found. Assuming ' 'associated volumes gone.'.format(instance_name)) return ret if instance_id: filters.update({'attachment.instance-id': instance_id}) if device: filters.update({'attachment.device': device}) args = {'region': region, 'key': key, 'keyid': keyid, 'profile': profile} vols = __salt__['boto_ec2.get_all_volumes'](filters=filters, **args) if not vols: ret['comment'] = 'Volume matching criteria not found, assuming already absent' return ret if len(vols) > 1: msg = \"More than one volume matched criteria, can't continue in state {0}\".format(name) log.error(msg) ret['comment'] = msg ret['result'] = False return ret vol = vols[0] log.info('Matched Volume ID %s', vol) if __opts__['test']: ret['comment'] = 'The volume {0} is set to be deleted.'.format(vol) ret['result'] = None return ret if __salt__['boto_ec2.delete_volume'](volume_id=vol, force=True, **args): ret['comment'] = 'Volume {0} deleted.'.format(vol) ret['changes'] = {'old': {'volume_id': vol}, 'new': {'volume_id': None}} else: ret['comment'] = 'Error deleting volume {0}.'.format(vol) ret['result'] = False return ret\n\n    ### Response: Ensure the EC2 volume is detached and absent.\n\n    .. versionadded:: 2016.11.0\n\n    name\n        State definition name.\n\n    volume_name\n        Name tag associated with the volume.  For safety, if this matches more than\n        one volume, the state will refuse to apply.\n\n    volume_id\n        Resource ID of the volume.\n\n    instance_name\n        Only remove volume if it is attached to instance with this Name tag.\n        Exclusive with 'instance_id'.  Requires 'device'.\n\n    instance_id\n        Only remove volume if it is attached to this instance.\n        Exclusive with 'instance_name'.  Requires 'device'.\n\n    device\n        Match by device rather than ID.  Requires one of 'instance_name' or\n        'instance_id'.\n\n    region\n        Region to connect to.\n\n    key\n        Secret key to be used.\n\n    keyid\n        Access key to be used.\n\n    profile\n        A dict with region, key and keyid, or a pillar key (string)\n        that contains a dict with region, key and keyid..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static void _moveDirectory(final File srcDest, File destDir) throws IOException { if (destDir.exists()) { checkIsDirectory(destDir); destDir = file(destDir, destDir.getName()); destDir.mkdir(); } final boolean rename = srcDest.renameTo(destDir); if (!rename) { _copyDirectory(srcDest, destDir); deleteDir(srcDest); } }\n\n    ### Response:", "ground_truth": "Moves a directory.\n\n@param srcDest Source directory\n@param destDir Destination directory.\n@throws IOException if there is an error during move.", "predict": "\n    The moveDirectory() method moves a source directory onto the provided destination directory. The source directory must already exist, and the destination directory must already exist and be writable. The move succeeds if the source directory and destination directory names match, or if the source directory name matches the name of the destination directory and its contents are copied over to the destination directory."}, {"ID": 1395, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def grading_means_passed(self): ''' Information if the given grading means passed. Non-graded assignments are always passed. ''' if self.assignment.is_graded(): if self.grading and self.grading.means_passed: return True else: return False else: return True\n\n    ### Response: Information if the given grading means passed.\n        Non-graded assignments are always passed..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void cleanDir(final File destDir) throws IOException { checkExists(destDir); checkIsDirectory(destDir); File[] files = destDir.listFiles(); if (files == null) { throw new IOException(\"Failed to list contents of: \" + destDir); } IOException exception = null; for (File file : files) { try { if (file.isDirectory()) { deleteDir(file); } else { file.delete(); } } catch (IOException ioex) { exception = ioex; continue; } } if (exception != null) { throw exception; } }\n\n    ### Response:", "ground_truth": "Cleans a directory without deleting it.\n\n@param destDir destination to clean.\n@throws IOException if something went wrong.", "predict": "\n    The cleanDir method deletes directories and files from the given destDir directory. It first checks if the destDir directory exists and is a directory, and next checks if any of the directories it contains exist and are directories. Finally it deletes directories and files in the destDir directory."}, {"ID": 1396, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function deleteLabel(string $name): bool { $this->getApi()->request($this->getApi() ->sprintf('/repos/:owner/:repo/labels/:name', $this->getIssues()->getOwner(), $this->getIssues()->getRepo(), $name)); if ($this->getApi()->getHeaders()['Status'] == '204 No Content') { return true; } return false; }\n\n    ### Response: Delete a label\n\n@link https://developer.github.com/v3/issues/labels/#delete-a-label\n\n@param string $name\n\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static char[] readUTFChars(final File file) throws IOException { checkExists(file); checkIsFile(file); UnicodeInputStream in = unicodeInputStreamOf(file); try { return StreamUtil.readChars(in, detectEncoding(in)); } finally { StreamUtil.close(in); } }\n\n    ### Response:", "ground_truth": "Reads UTF file content as char array.\n\n@param file {@link File} to read.\n@return array of characters.\n@throws IOException if something went wrong.", "predict": "read UTF chars from file\n\nReads UTF chars from file."}, {"ID": 1397, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _coerce_point_to_string(point, output_format=\"%(lat)s,%(lon)s\"): \"\"\" Do the right thing on \"point\" input. For geocoders with reverse methods. \"\"\" try: if not isinstance(point, Point): point = Point(point) except ValueError as e: if isinstance(point, string_compare): warnings.warn( 'Unable to parse the string as Point: \"%s\". Using the value ' 'as-is for the query. In geopy 2.0 this will become an ' 'exception.' % str(e), DeprecationWarning, stacklevel=3 ) return point raise else: # Altitude is silently dropped. return output_format % dict(lat=point.latitude, lon=point.longitude)\n\n    ### Response: Do the right thing on \"point\" input. For geocoders with reverse\n        methods..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static char[] readChars(final File file, final String encoding) throws IOException { checkExists(file); checkIsFile(file); InputStream in = streamOf(file, encoding); try { return StreamUtil.readChars(in, encoding); } finally { StreamUtil.close(in); } }\n\n    ### Response:", "ground_truth": "Reads file content as char array.\n\n@param file     {@link File} to read.\n@param encoding Encoding to use.\n@return array of characters.\n@throws IOException if something went wrong.", "predict": "\n    Reading chars from file..."}, {"ID": 1398, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func SetFlorenceIdentity(ctx context.Context, user string) context.Context { return context.WithValue(ctx, FlorenceIdentityKey, user) }\n\n    ### Response: // SetFlorenceIdentity sets the florence identity for authentication.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void writeChars(final File dest, final char[] data, final String encoding) throws IOException { outChars(dest, data, encoding, false); }\n\n    ### Response:", "ground_truth": "Write characters. append = false\n\n@see #outChars(File, char[], String, boolean)", "predict": "// Writes specified chars to dest file."}, {"ID": 1399, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Config) Load(confFile string) error { metaData, err := toml.DecodeFile(confFile, c) if c.TokenLimit <= 0 { c.TokenLimit = 1000 } // If any items in confFile file are not mapped into the Config struct, issue // an error and stop the server from starting. undecoded := metaData.Undecoded() if len(undecoded) > 0 && err == nil { var undecodedItems []string for _, item := range undecoded { undecodedItems = append(undecodedItems, item.String()) } err = &ErrConfigValidationFailed{fmt.Sprintf(\"config file %s contained unknown configuration options: %s\", confFile, strings.Join(undecodedItems, \", \"))} } return err }\n\n    ### Response: // Load loads config options from a toml file..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void writeString(final File dest, final String data, final String encoding) throws IOException { outString(dest, data, encoding, false); }\n\n    ### Response:", "ground_truth": "Writes String. append = false\n\n@see #outString(File, String, String, boolean)", "predict": "// Writes a string to file\n    // If encoding wasn't given, writes as UTF8 Bytes // If encoding wasn't given, writes as UTF8 Bytes"}, {"ID": 1400, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def json(**kwargs): \"\"\" Adds the specified data to the the output display window with the specified key. This allows the user to make available arbitrary JSON-compatible data to the display for runtime use. :param kwargs: Each keyword argument is added to the CD.data object with the specified key and value. \"\"\" r = _get_report() r.append_body(render.json(**kwargs)) r.stdout_interceptor.write_source( '{}\\n'.format(_json_io.dumps(kwargs, indent=2)) )\n\n    ### Response: Adds the specified data to the the output display window with the\n    specified key. This allows the user to make available arbitrary\n    JSON-compatible data to the display for runtime use.\n\n    :param kwargs:\n        Each keyword argument is added to the CD.data object with the\n        specified key and value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void appendString(final File dest, final String data, final String encoding) throws IOException { outString(dest, data, encoding, true); }\n\n    ### Response:", "ground_truth": "Appends String. append = true\n\n@see #outString(File, String, String, boolean)", "predict": "\n    Append the given string to the given file with the given encoding. If\n    true, writes a BOM; otherwise, writes UTF8 BOM first."}, {"ID": 1401, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void checkStates( INotificationMngr notificationMngr ) { // Check the status of scoped instances Collection<Instance> scopedInstances = InstanceHelpers.findAllScopedInstances( this.application ); for( Instance scopedInstance : scopedInstances ) { // Never started instances, // or scoped instances that have been stopped by an agent, // are not processed anymore here if( scopedInstance.getStatus() == InstanceStatus.NOT_DEPLOYED || scopedInstance.getStatus() == InstanceStatus.DEPLOYING || scopedInstance.getStatus() == InstanceStatus.UNDEPLOYING ) { scopedInstance.data.remove( MISSED_HEARTBEATS ); continue; } // Otherwise String countAs = scopedInstance.data.get( MISSED_HEARTBEATS ); int count = countAs == null ? 0 : Integer.parseInt( countAs ); if( ++ count > THRESHOLD ) { scopedInstance.setStatus( InstanceStatus.PROBLEM ); notificationMngr.instance( scopedInstance, this.application, EventType.CHANGED ); this.logger.severe( \"Agent \" + InstanceHelpers.computeInstancePath( scopedInstance ) + \" has not sent heart beats for quite a long time. Status changed to PROBLEM.\" ); } scopedInstance.data.put( MISSED_HEARTBEATS, String.valueOf( count )); } }\n\n    ### Response: Check the scoped instances states with respect to missed heart beats.\n@param notificationMngr.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static byte[] readBytes(final File file, final int count) throws IOException { checkExists(file); checkIsFile(file); long numToRead = file.length(); if (numToRead >= Integer.MAX_VALUE) { throw new IOException(\"File is larger then max array size\"); } if (count > NEGATIVE_ONE && count < numToRead) { numToRead = count; } byte[] bytes = new byte[(int) numToRead]; RandomAccessFile randomAccessFile = new RandomAccessFile(file, \"r\"); randomAccessFile.readFully(bytes); randomAccessFile.close(); return bytes; }\n\n    ### Response:", "ground_truth": "Read file and returns byte array with contents.\n\n@param file  {@link File} to read\n@param count number of bytes to read\n@return byte array from {@link File} contents.\n@throws IOException if not a {@link File} or {@link File} does not exist or file size is\nlarger than {@link Integer#MAX_VALUE}.", "predict": "Read and convert given number of bytes from file to given destination array."}, {"ID": 1402, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void activateOptions() { if (!isActive()) { try { remoteInfo = topicFactoryName + \":\" + topicName; Context ctx = null; if (jndiPath == null || jndiPath.equals(\"\")) { ctx = new InitialContext(); } else { FileInputStream is = new FileInputStream(jndiPath); Properties p = new Properties(); p.load(is); is.close(); ctx = new InitialContext(p); } // give some more flexibility about the choice of a tab name providerUrl = (String)ctx.getEnvironment().get(Context.PROVIDER_URL); TopicConnectionFactory topicConnectionFactory; topicConnectionFactory = (TopicConnectionFactory) lookup(ctx, topicFactoryName); if (userId != null && password != null) { topicConnection = topicConnectionFactory.createTopicConnection(userId, password); } else { topicConnection = topicConnectionFactory.createTopicConnection(); } TopicSession topicSession = topicConnection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE); Topic topic = (Topic)ctx.lookup(topicName); TopicSubscriber topicSubscriber = topicSession.createSubscriber(topic); topicSubscriber.setMessageListener(this); topicConnection.start(); setActive(true); } catch(Exception e) { setActive(false); if (topicConnection != null) { try { topicConnection.close(); } catch (Exception e2) { // do nothing } topicConnection = null; } getLogger().error(\"Could not start JMSReceiver.\", e); } } }\n\n    ### Response: Starts the JMSReceiver with the current options..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void writeBytes(final File dest, final byte[] data, final int off, final int len) throws IOException { outBytes(dest, data, off, len, false); }\n\n    ### Response:", "ground_truth": "Write bytes. append = false\n\n@see #outBytes(File, byte[], int, int, boolean)", "predict": "Stores the given bytes starting from the given offset and length in the given file."}, {"ID": 1403, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def validate_broker_ids_subset(broker_ids, subset_ids): \"\"\"Validate that user specified broker ids to restart exist in the broker ids retrieved from cluster config. :param broker_ids: all broker IDs in a cluster :type broker_ids: list of integers :param subset_ids: broker IDs specified by user :type subset_ids: list of integers :returns: bool \"\"\" all_ids = set(broker_ids) valid = True for subset_id in subset_ids: valid = valid and subset_id in all_ids if subset_id not in all_ids: print(\"Error: user specified broker id {0} does not exist in cluster.\".format(subset_id)) return valid\n\n    ### Response: Validate that user specified broker ids to restart exist in the broker ids retrieved\n    from cluster config.\n\n    :param broker_ids: all broker IDs in a cluster\n    :type broker_ids: list of integers\n    :param subset_ids: broker IDs specified by user\n    :type subset_ids: list of integers\n    :returns: bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void appendBytes(final File dest, final byte[] data, final int off, final int len) throws IOException { outBytes(dest, data, off, len, true); }\n\n    ### Response:", "ground_truth": "Appends bytes. append = true\n\n@see #outBytes(File, byte[], int, int, boolean)", "predict": "Append given bytes to dest file."}, {"ID": 1404, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def datasets_list(self, project_id=None, max_results=0, page_token=None): \"\"\"Issues a request to list the datasets in the project. Args: project_id: the project id to use to fetch the results; use None for the default project. max_results: an optional maximum number of tables to retrieve. page_token: an optional token to continue the retrieval. Returns: A parsed result object. Raises: Exception if there is an error performing the operation. \"\"\" if project_id is None: project_id = self._project_id url = Api._ENDPOINT + (Api._DATASETS_PATH % (project_id, '')) args = {} if max_results != 0: args['maxResults'] = max_results if page_token is not None: args['pageToken'] = page_token return datalab.utils.Http.request(url, args=args, credentials=self._credentials)\n\n    ### Response: Issues a request to list the datasets in the project.\n\n    Args:\n      project_id: the project id to use to fetch the results; use None for the default project.\n      max_results: an optional maximum number of tables to retrieve.\n      page_token: an optional token to continue the retrieval.\n    Returns:\n      A parsed result object.\n    Raises:\n      Exception if there is an error performing the operation..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void copy(final File src, final File dest) throws IOException { if (src.isDirectory()) { copyDir(src, dest); return; } if (dest.isDirectory()) { copyFileToDir(src, dest); return; } copyFile(src, dest); }\n\n    ### Response:", "ground_truth": "Smart copy. If source is a directory, copy it to destination.\nOtherwise, if destination is directory, copy source file to it.\nOtherwise, try to copy source file to destination file.\n\n@param src  source {@link File}\n@param dest destination {@link File}\n@throws IOException if there is an error copying.\n@see #copyDir(File, File)\n@see #copyFileToDir(File, File)\n@see #copyFile(File, File)", "predict": "\n    Public static void moveOrCopyFilesOrDir(File source, File dest) {\n    //Move directory if its empty\n    if(!source.isDirectory()&&!dest.isDirectory()&&(dest.length()==0||source.length()==0))\n    {\n    moveDirOrFile(source, dest);\n    return;\n    }\n    //Move directory\n    moveDirOrFile(source, dest);\n    //Copy directory\n    moveOrCopyDirOrFile(source, dest);\n    }\n    //Move directory\n    private static void moveDirOrFile(File source, File dest) {\n    dest.mkdirs();\n    dest.deleteOnExit();\n    String[] list = source.list();\n    //Check if source directory contains any files\n    boolean recursiveDirMoveRequired = list!=null;\n    //Check if destdirectory does exist\n    recursiveDirMoveRequired &= dest.mkdirs();\n    recursiveDirMoveRequired &="}, {"ID": 1405, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (w *Ware) CreateContext() *context { c := &context{inject.New(), w.handlers, w.action, nil, 0} c.SetParent(w) c.MapTo(c, (*Context)(nil)) return c }\n\n    ### Response: // Creates a context..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void delete(final File dest) throws IOException { if (dest.isDirectory()) { deleteDir(dest); return; } deleteFile(dest); }\n\n    ### Response:", "ground_truth": "Smart delete of destination file or directory.\n\n@throws IOException if there is an issue deleting the file/directory.\n@see #deleteFile(File)\n@see #deleteDir(File)", "predict": "// Deletes a given directory or file."}, {"ID": 1406, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get(self, path, params=None, headers=None): \"\"\"Perform a GET request, optionally providing query-string params. Args: path (str): A path that gets appended to ``base_url``. params (dict, optional): Dictionary of param names to values. Example: api_client.get('/users', params={'active': True}) Returns: A requests ``Response`` object. \"\"\" response = requests.get( self._url_for(path), params=params, headers=self._headers(headers) ) self._handle_errors(response) return response\n\n    ### Response: Perform a GET request, optionally providing query-string params.\n\n        Args:\n          path (str): A path that gets appended to ``base_url``.\n          params (dict, optional): Dictionary of param names to values.\n\n        Example:\n          api_client.get('/users', params={'active': True})\n\n        Returns:\n          A requests ``Response`` object..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static File createTempDirectory(final String prefix, final String suffix, final File tempDir) throws IOException { File file = createTempFile(prefix, suffix, tempDir); file.delete(); file.mkdir(); return file; }\n\n    ### Response:", "ground_truth": "Creates temporary directory.\n\n@see #createTempFile(String, String, File)", "predict": "\n    Creates a temporary directory with the given name and returns its absolute path."}, {"ID": 1407, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s rwsetKeys) String() string { var buffer bytes.Buffer for k := range s { buffer.WriteString(fmt.Sprintf(\"%s\\n\", k.String())) } return buffer.String() }\n\n    ### Response: // String returns a string representation of the rwsetKeys.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isBinary(final File file) throws IOException { byte[] bytes = readBytes(file, 128); for (byte b : bytes) { if (b < 32 && b != 9 && b != 10 && b != 13) { return true; } } return false; }\n\n    ### Response:", "ground_truth": "Checks the start of the file for ASCII control characters\n\n@param file {@link File}\n@return true if the the start of the {@link File} is ASCII control characters.", "predict": "// Checks if file contains any non-binary data (bytes lesser than 32, 9, 10, 13)"}, {"ID": 1408, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function filterByEndPositionId($endPositionId = null, $comparison = null) { if (is_array($endPositionId)) { $useMinMax = false; if (isset($endPositionId['min'])) { $this->addUsingAlias(SkillVersionTableMap::COL_END_POSITION_ID, $endPositionId['min'], Criteria::GREATER_EQUAL); $useMinMax = true; } if (isset($endPositionId['max'])) { $this->addUsingAlias(SkillVersionTableMap::COL_END_POSITION_ID, $endPositionId['max'], Criteria::LESS_EQUAL); $useMinMax = true; } if ($useMinMax) { return $this; } if (null === $comparison) { $comparison = Criteria::IN; } } return $this->addUsingAlias(SkillVersionTableMap::COL_END_POSITION_ID, $endPositionId, $comparison); }\n\n    ### Response: Filter the query on the end_position_id column\n\nExample usage:\n\n$query->filterByEndPositionId(1234); // WHERE end_position_id = 1234\n$query->filterByEndPositionId(array(12, 34)); // WHERE end_position_id IN (12, 34)\n$query->filterByEndPositionId(array('min' => 12)); // WHERE end_position_id > 12\n\n\n@param     mixed $endPositionId The value to use as filter.\nUse scalar values for equality.\nUse array values for in_array() equivalent.\nUse associative array('min' => $minValue, 'max' => $maxValue) for intervals.\n@param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL\n\n@return $this|ChildSkillVersionQuery The current query, for fluid interface.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static void checkDirCopy(final File srcDir, final File destDir) throws IOException { checkExists(srcDir); checkIsDirectory(srcDir); if (equals(srcDir, destDir)) { throw new IOException(\"Source '\" + srcDir + \"' and destination '\" + destDir + \"' are equal\"); } }\n\n    ### Response:", "ground_truth": "Checks that srcDir exists, that it is a directory and if srcDir and destDir are not equal.\n\n@param srcDir  Source directory\n@param destDir Destination directory\n@throws IOException if any of the above conditions are not true.", "predict": "Check that the source directory and destination directory exist and that they are directories\n    Check that the source directory and destination directory exist and that they are directories"}, {"ID": 1409, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_resource(self, resource, **kwargs): \"\"\"Returns a new instance of the resource class passed in as resource. This is a helper to make future-compatibility easier when new arguments get added to the constructor. :param resource: Resource class to instantiate. Gets called with the named arguments as required for the constructor. :type resource: :class:`Resource` :param kwargs: Additional named arguments to pass to the constructor function. :type kwargs: dict \"\"\" return resource(request=self.request, response=self.response, path_params=self.path_params, application=self.application, **kwargs)\n\n    ### Response: Returns a new instance of the resource class passed in as resource.\n        This is a helper to make future-compatibility easier when new\n        arguments get added to the constructor.\n\n        :param resource: Resource class to instantiate. Gets called with the\n                         named arguments as required for the constructor.\n        :type resource: :class:`Resource`\n        :param kwargs: Additional named arguments to pass to the constructor\n                       function.\n        :type kwargs: dict.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static void checkFileCopy(final File srcFile, final File destFile) throws IOException { checkExists(srcFile); checkIsFile(srcFile); if (equals(srcFile, destFile)) { throw new IOException(\"Files '\" + srcFile + \"' and '\" + destFile + \"' are equal\"); } File destParent = destFile.getParentFile(); if (destParent != null && !destParent.exists()) { checkCreateDirectory(destParent); } }\n\n    ### Response:", "ground_truth": "Checks that file copy can occur.\n\n@param srcFile  Source {@link File}\n@param destFile Destination {@link File}\n@throws IOException if srcFile does not exist or is not a file or\nsrcFile and destFile are equal or cannot create ancestor directories.", "predict": "\n    Private static void checkFileCopy(File srcFile, File destFile) throws IOException{\n    // Check existence of source file\n    checkExists(srcFile);\n    // Check if file is of type file\n    checkIsFile(srcFile);\n    // If equality of objects\n    // If equality of objects\n    // If objects are of same file, throw exception\n    // Else, do nothing\n    destFile.getParentFile();\n    // Check existence of dest directory\n    // If directory does not exist,\n    // Create it\n    checkCreateDirectory(destFile.getParentFile());\n    }"}, {"ID": 1410, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def show_usage (docstring, short, stream, exitcode): \"\"\"Print program usage information and exit. :arg str docstring: the program help text This function just prints *docstring* and exits. In most cases, the function :func:`check_usage` should be used: it automatically checks :data:`sys.argv` for a sole \"-h\" or \"--help\" argument and invokes this function. This function is provided in case there are instances where the user should get a friendly usage message that :func:`check_usage` doesn't catch. It can be contrasted with :func:`wrong_usage`, which prints a terser usage message and exits with an error code. \"\"\" if stream is None: from sys import stdout as stream if not short: print ('Usage:', docstring.strip (), file=stream) else: intext = False for l in docstring.splitlines (): if intext: if not len (l): break print (l, file=stream) elif len (l): intext = True print ('Usage:', l, file=stream) print ('\\nRun with a sole argument --help for more detailed ' 'usage information.', file=stream) raise SystemExit (exitcode)\n\n    ### Response: Print program usage information and exit.\n\n    :arg str docstring: the program help text\n\n    This function just prints *docstring* and exits. In most cases, the\n    function :func:`check_usage` should be used: it automatically checks\n    :data:`sys.argv` for a sole \"-h\" or \"--help\" argument and invokes this\n    function.\n\n    This function is provided in case there are instances where the user\n    should get a friendly usage message that :func:`check_usage` doesn't catch.\n    It can be contrasted with :func:`wrong_usage`, which prints a terser usage\n    message and exits with an error code..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void printUsage(final String commandName) { final StringBuilder usage = new StringBuilder(commandName); for (final Option option : options) { if (option.shortName != null) { usage.append(\" [-\").append(option.shortName).append(\"]\"); } else if (option.longName != null) { usage.append(\" [--\").append(option.longName).append(\"]\"); } } for (final Param param : params) { usage.append(\" \").append(param.label); } System.out.println(usage); }\n\n    ### Response:", "ground_truth": "Prints the usage line.", "predict": "\n    Prints usage information of the program or command, or of its\n    individual options and parameters, to stdout."}, {"ID": 1411, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function findMissing($instanceName, Google_Service_RemoteBuildExecution_BuildBazelRemoteExecutionV2FindMissingBlobsRequest $postBody, $optParams = array()) { $params = array('instanceName' => $instanceName, 'postBody' => $postBody); $params = array_merge($params, $optParams); return $this->call('findMissing', array($params), \"Google_Service_RemoteBuildExecution_BuildBazelRemoteExecutionV2FindMissingBlobsResponse\"); }\n\n    ### Response: Determine if blobs are present in the CAS.\n\nClients can use this API before uploading blobs to determine which ones are\nalready present in the CAS and do not need to be uploaded again.\n\nThere are no method-specific errors. (blobs.findMissing)\n\n@param string $instanceName The instance of the execution system to operate\nagainst. A server may support multiple instances of the execution system\n(with their own workers, storage, caches, etc.). The server MAY require use\nof this field to select between them in an implementation-defined fashion,\notherwise it can be omitted.\n@param Google_Service_RemoteBuildExecution_BuildBazelRemoteExecutionV2FindMissingBlobsRequest $postBody\n@param array $optParams Optional parameters.\n@return Google_Service_RemoteBuildExecution_BuildBazelRemoteExecutionV2FindMissingBlobsResponse.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Method resolveActionMethod(final Class<?> actionClass, final String methodName) { MethodDescriptor methodDescriptor = ClassIntrospector.get().lookup(actionClass).getMethodDescriptor(methodName, false); if (methodDescriptor == null) { throw new MadvocException(\"Public method not found: \" + actionClass.getSimpleName() + \"#\" + methodName); } return methodDescriptor.getMethod(); }\n\n    ### Response:", "ground_truth": "Resolves action method for given action class ane method name.", "predict": "Resolves public method of specified actionClass to specified methodName.\n\nAction Class may implement public method but the method may or may\nnot be invoked directly by the Madvoc server, hence the need to resolve\nit first to ensure proper invocation of the method for given method\nname of the actionClass. The resolve action method resolves public\nmethods of specified actionClass to specified methodName to ensure\nthat proper public method of the actionClass is invoked for given\noperation and given methodName of the actionClass."}, {"ID": 1412, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def select(yerrs, amps, amp_errs, widths): \"\"\" criteria for keeping an object \"\"\" keep_1 = np.logical_and(amps < 0, widths > 1) keep_2 = np.logical_and(np.abs(amps) > 3*yerrs, amp_errs < 3*np.abs(amps)) keep = np.logical_and(keep_1, keep_2) return keep\n\n    ### Response: criteria for keeping an object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ActionRuntime registerAction(final Class actionClass, final String actionMethodName, final ActionDefinition actionDefinition) { Method actionMethod = resolveActionMethod(actionClass, actionMethodName); return registerAction(actionClass, actionMethod, actionDefinition); }\n\n    ### Response:", "ground_truth": "Registers action with provided action class and method name.\n@see #registerAction(Class, Method, ActionDefinition)", "predict": "The above method registers an action for the given actionClass and actionMethodName of the specified actionDefinition. It resolves the action method of the specified actionClass and actionMethodName to the appropriate method of the specified actionDefinition to be registered and returns the appropriate output."}, {"ID": 1413, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function _assignParentDependFields() { $sParent = $this->getParentArticle(); if ($sParent) { foreach ($this->_getCopyParentFields() as $sField) { $this->$sField = new \\OxidEsales\\Eshop\\Core\\Field($sParent->$sField->value); } } }\n\n    ### Response: Set parent field value to child - variants.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerPathAlias(final String alias, final String path) { final String existing = pathAliases.put(alias, path); if (existing != null) { throw new MadvocException(\"Duplicated alias detected: [\" + alias + \"] for paths: \" + path + \", \" + existing); } }\n\n    ### Response:", "ground_truth": "Registers new path alias.", "predict": "Register an alias for a given path."}, {"ID": 1414, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def split(self, bitindex): \"\"\"Split a promise into two promises. A tail bit, and the 'rest'. Same operation as the one on TDOPromise, except this works with a collection of promises and splits the appropriate one. Returns: The 'Rest' and the 'Tail'. The 'Rest' is TDOPromiseCollection containing the first chunk of the original TDOPromiseCollection. The 'Tail' is a single bit sub promise for the final bit in the operation If the 'Rest' would have a length of 0, None is returned \"\"\" if bitindex < 0: raise ValueError(\"bitindex must be larger or equal to 0.\") if bitindex == 0: return None, self lastend = 0 split_promise = False for splitindex, p in enumerate(self._promises): if bitindex in range(lastend, p._bitstart): split_promise = False break if bitindex in range(p._bitstart, p._bitend): if bitindex-p._bitstart == 0: split_promise = False else: split_promise = True break lastend = p._bitend else: raise Exception(\"Should be impossible\") processed_left = TDOPromiseCollection(self._chain) processed_right = TDOPromiseCollection(self._chain) if split_promise: left, right = p.split(bitindex-p._bitstart) for i in range(splitindex): processed_left.add(self._promises[i], 0) processed_left.add(left, 0) processed_right.add(right, 0) for tmpprim in self._promises[splitindex+1:]: processed_right.add(tmpprim, -bitindex) return processed_left, processed_right else: for i in range(splitindex): processed_left.add(self._promises[i], 0) for i in range(splitindex, len(self._promises)): processed_right.add(self._promises[i], -bitindex) return processed_left, processed_right\n\n    ### Response: Split a promise into two promises. A tail bit, and the 'rest'.\n\n        Same operation as the one on TDOPromise, except this works\n        with a collection of promises and splits the appropriate one.\n\n        Returns:\n            The 'Rest' and the 'Tail'.\n            The 'Rest' is TDOPromiseCollection containing the first\n              chunk of the original TDOPromiseCollection.\n            The 'Tail' is a single bit sub promise for the final bit\n              in the operation\n\n            If the 'Rest' would have a length of 0, None is returned.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean next() { if (!looping) { return false; } if (last) { return false; } if (count == 0) { value = start; first = true; } else { value += step; first = false; } count++; last = isLastIteration(value + step); return true; }\n\n    ### Response:", "ground_truth": "Iterates to next value at the beginning of the loop.", "predict": "The function iterates over the given range, stepping\n    /// an arbitrary number of items and updating the looping and\n    /// first variables to reflect the current state of the iteration\n    /// cycle\n    /// It may return true to signal that there is no need to\n    /// iterate any farther because the desired number of items have\n    /// been found\n    /// Finally, it may return false to signal that there is no more\n    /// items to iterate over because the given range has been\n    /// exhausted\n    /// It may also signal other conditions by setting the looping\n    /// and first variables to the appropriate values\n    /// It may raise an exception to signal other conditions\n    /// It may raise other exception to signal other conditions"}, {"ID": 1415, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function bySystemReferenceTypeBySystemReferenceIdAndByOrganization($systemReferenceType , $systemReferenceId, $organizationId, $databaseConnectionName = null) { if(empty($databaseConnectionName)) { $databaseConnectionName = $this->databaseConnectionName; } return $this->File->setConnection($databaseConnectionName) ->where('system_reference_type', '=', $systemReferenceType) ->where('system_reference_id', '=', $systemReferenceId) ->where('organization_id', '=', $organizationId) ->get(); }\n\n    ### Response: Retrieve files by system reference type and system reference id\n\n@param  int $id parent id\n\n@return Illuminate\\Database\\Eloquent\\Collection.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static CharArraySequence from(final char[] value, final int offset, final int len) { final char[] buffer = new char[value.length]; System.arraycopy(value, offset, buffer, 0, len); return new CharArraySequence(buffer); }\n\n    ### Response:", "ground_truth": "Static constructor that creates a char sequence by making a copy of provided char array.", "predict": "Creates a CharSequence from an array of characters and an offset and length"}, {"ID": 1416, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def endpoint(request): \"\"\"Endpoint that SNS accesses. Includes logic verifying request\"\"\" # pylint: disable=too-many-return-statements,too-many-branches # In order to 'hide' the endpoint, all non-POST requests should return # the site's default HTTP404 if request.method != 'POST': raise Http404 # If necessary, check that the topic is correct if hasattr(settings, 'BOUNCY_TOPIC_ARN'): # Confirm that the proper topic header was sent if 'HTTP_X_AMZ_SNS_TOPIC_ARN' not in request.META: return HttpResponseBadRequest('No TopicArn Header') # Check to see if the topic is in the settings # Because you can have bounces and complaints coming from multiple # topics, BOUNCY_TOPIC_ARN is a list if (not request.META['HTTP_X_AMZ_SNS_TOPIC_ARN'] in settings.BOUNCY_TOPIC_ARN): return HttpResponseBadRequest('Bad Topic') # Load the JSON POST Body if isinstance(request.body, str): # requests return str in python 2.7 request_body = request.body else: # and return bytes in python 3.4 request_body = request.body.decode() try: data = json.loads(request_body) except ValueError: logger.warning('Notification Not Valid JSON: {}'.format(request_body)) return HttpResponseBadRequest('Not Valid JSON') # Ensure that the JSON we're provided contains all the keys we expect # Comparison code from http://stackoverflow.com/questions/1285911/ if not set(VITAL_NOTIFICATION_FIELDS) <= set(data): logger.warning('Request Missing Necessary Keys') return HttpResponseBadRequest('Request Missing Necessary Keys') # Ensure that the type of notification is one we'll accept if not data['Type'] in ALLOWED_TYPES: logger.info('Notification Type Not Known %s', data['Type']) return HttpResponseBadRequest('Unknown Notification Type') # Confirm that the signing certificate is hosted on a correct domain # AWS by default uses sns.{region}.amazonaws.com # On the off chance you need this to be a different domain, allow the # regex to be overridden in settings domain = urlparse(data['SigningCertURL']).netloc pattern = getattr( settings, 'BOUNCY_CERT_DOMAIN_REGEX', r\"sns.[a-z0-9\\-]+.amazonaws.com$\" ) if not re.search(pattern, domain): logger.warning( 'Improper Certificate Location %s', data['SigningCertURL']) return HttpResponseBadRequest('Improper Certificate Location') # Verify that the notification is signed by Amazon if (getattr(settings, 'BOUNCY_VERIFY_CERTIFICATE', True) and not verify_notification(data)): logger.error('Verification Failure %s', ) return HttpResponseBadRequest('Improper Signature') # Send a signal to say a valid notification has been received signals.notification.send( sender='bouncy_endpoint', notification=data, request=request) # Handle subscription-based messages. if data['Type'] == 'SubscriptionConfirmation': # Allow the disabling of the auto-subscription feature if not getattr(settings, 'BOUNCY_AUTO_SUBSCRIBE', True): raise Http404 return approve_subscription(data) elif data['Type'] == 'UnsubscribeConfirmation': # We won't handle unsubscribe requests here. Return a 200 status code # so Amazon won't redeliver the request. If you want to remove this # endpoint, remove it either via the API or the AWS Console logger.info('UnsubscribeConfirmation Not Handled') return HttpResponse('UnsubscribeConfirmation Not Handled') try: message = json.loads(data['Message']) except ValueError: # This message is not JSON. But we need to return a 200 status code # so that Amazon doesn't attempt to deliver the message again logger.info('Non-Valid JSON Message Received') return HttpResponse('Message is not valid JSON') return process_message(message, data)\n\n    ### Response: Endpoint that SNS accesses. Includes logic verifying request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object execute() throws Exception { String methodName = ProxyTarget.targetMethodName(); Class[] argTypes = ProxyTarget.createArgumentsClassArray(); Object[] args = ProxyTarget.createArgumentsArray(); // lookup method on target object class (and not #targetClass!() Class type = _target.getClass(); Method method = type.getMethod(methodName, argTypes); // remember context classloader ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader(); Object result; try { // change class loader Thread.currentThread().setContextClassLoader(type.getClassLoader()); // invoke result = method.invoke(_target, args); } finally { // return context classloader Thread.currentThread().setContextClassLoader(contextClassLoader); } return ProxyTarget.returnValue(result); }\n\n    ### Response:", "ground_truth": "Looks up for method in target object and invokes it using reflection.", "predict": "Includes logic verifying request and executing the given method on the target object"}, {"ID": 1417, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def save(self, obj, run_id): \"\"\" Save a workflow obj - instance of a workflow to save run_id - unique id to give the run \"\"\" id_code = self.generate_save_identifier(obj, run_id) self.store.save(obj, id_code)\n\n    ### Response: Save a workflow\n        obj - instance of a workflow to save\n        run_id - unique id to give the run.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final boolean matchUpperCase(final char[] uppercaseTarget) { if (ndx + uppercaseTarget.length > total) { return false; } int j = ndx; for (int i = 0; i < uppercaseTarget.length; i++, j++) { final char c = CharUtil.toUpperAscii(input[j]); if (c != uppercaseTarget[i]) { return false; } } return true; }\n\n    ### Response:", "ground_truth": "Matches char buffer given in uppercase with content at current location, that will\nbe converted to upper case to make case-insensitive matching.", "predict": "MatchUpperCase - function to check if the given string matches the given upper case string"}, {"ID": 1418, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function init() { // {{{2 /** * Class constructor * * @method constructor * @internal */ O.inherited(this)(); this.setMaxListeners(Consts.coreListeners); this.subjectState = this.SUBJECT_STATE.INIT; this.peers = {}; this.shards = {}; }\n\n    ### Response: shards {{{2\nObject containing shards indexed by `sid`\n\n@property shards\n@type Object\n@internal\n Public {{{1.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected final CharSequence charSequence(final int from, final int to) { if (from == to) { return CharArraySequence.EMPTY; } return CharArraySequence.of(input, from, to - from); }\n\n    ### Response:", "ground_truth": "Creates char sub-sequence from the input.", "predict": "Returns an immutable sequence of characters from the given range of the source string `input`. If the given range contains fewer that one character, returns an empty sequence; If the given range contains more that one character, returns an immutable sequence of characters covering that range of the source string; Otherwise, returns the source string itself with its characters reindexed to the given range of the source string."}, {"ID": 1419, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Cache) Age() time.Duration { c.mu.RLock() defer c.mu.RUnlock() return time.Since(c.lastSnapshot) }\n\n    ### Response: // Age returns the age of the cache, which is the duration since it was last\n// snapshotted..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static URL[] of(ClassLoader classLoader, Class clazz) { if (clazz == null) { clazz = ClassPathURLs.class; } if (classLoader == null) { classLoader = clazz.getClassLoader(); } final Set<URL> urls = new LinkedHashSet<>(); while (classLoader != null) { if (classLoader instanceof URLClassLoader) { URLClassLoader urlClassLoader = (URLClassLoader) classLoader; URL[] allURLS = urlClassLoader.getURLs(); Collections.addAll(urls, allURLS); break; } URL classUrl = classModuleUrl(classLoader, clazz); if (classUrl != null) { urls.add(classUrl); } classUrl = classModuleUrl(classLoader, ClassPathURLs.class); if (classUrl != null) { urls.add(classUrl); } ModuleDescriptor moduleDescriptor = clazz.getModule().getDescriptor(); if (moduleDescriptor != null) { moduleDescriptor.requires().forEach(req -> { ModuleLayer.boot() .findModule(req.name()) .ifPresent(mod -> { ClassLoader moduleClassLoader = mod.getClassLoader(); if (moduleClassLoader != null) { URL url = moduleClassLoader.getResource(MANIFEST); if (url != null) { url = fixManifestUrl(url); urls.add(url); } } }); }); } classLoader = classLoader.getParent(); } return urls.toArray(new URL[0]); }\n\n    ### Response:", "ground_truth": "Returns urls for the classloader.\n\n@param classLoader classloader in which to find urls\n@return list of urls or {@code null} if not found", "predict": "The method ofClassPath provides access to the ClassPath resources loaded from the ClassPath file. It scans the dependencies of the specifiedClassPath and its dependencies to discover all of the ClassPath resources loaded from theClassPath file. It then populates an array of URLs with the ClassPath resources it discovers."}, {"ID": 1420, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (builder *SSMLTextBuilder) AppendProsody(text, rate, pitch, volume string) *SSMLTextBuilder { builder.buffer.WriteString(fmt.Sprintf(\"<prosody rate=\\\"%s\\\" pitch=\\\"%s\\\" volume=\\\"%s\\\">%s</prosody>\", rate, pitch, volume, text)) return builder }\n\n    ### Response: // AppendProsody provides a way to modify the rate, pitch, and volume of a piece of spoken text..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Email bcc(final EmailAddress... bccs) { this.bcc = ArraysUtil.join(this.bcc, valueOrEmptyArray(bccs)); return _this(); }\n\n    ### Response:", "ground_truth": "Appends one or more BCC addresses.\n\n@param bccs vararg of {@link EmailAddress}es to set.\n@return this", "predict": "// This method provides a way to add an email address to an email message to ensure it does not appear in the recipient list.."}, {"ID": 1421, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (n *Notification) Acknowledge(c context.Context) error { if n.service != nil { // may be nil if Notification is generated in tests return n.service.ackMessages(c, n.subscription, n.ackIDs) } return nil }\n\n    ### Response: // Acknowledge tells PubSub to stop redelivering this notification..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void register(final Class type, final TypeJsonSerializer typeJsonSerializer) { map.put(type, typeJsonSerializer); cache.clear(); }\n\n    ### Response:", "ground_truth": "Registers new serializer.", "predict": "// Register the given Class and its Json serializer for the given Map and cache"}, {"ID": 1422, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *scene) Store(key string, prop interface{}) error { return s.StoreClean(key, prop, nil) }\n\n    ### Response: // Store is specified on the Scene interface..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected TypeJsonSerializer lookupSerializer(final Class type) { TypeJsonSerializer tjs = map.get(type); if (tjs == null) { if (defaultSerializerMap != null) { tjs = defaultSerializerMap.map.get(type); } } return tjs; }\n\n    ### Response:", "ground_truth": "Get type serializer from map. First the current map is used.\nIf element is missing, default map will be used, if exist.", "predict": "// This function looks up the appropriate JsonSerializer for the given type.."}, {"ID": 1423, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _accumulate_ips_from_plugins(self, ip_type_name, plugin_queue_lookup, ip_accumulator): \"\"\" Retrieve all IPs of a given type from all sub-plugins. ip_type_name: A name of the type of IP we are working with. Used for nice log messages. Example 'failed', 'questionable'. plugin_queue_lookup: Dictionary to lookup the queues (of a given type) for a plugins, by plugin name. ip_accumulator: An expiring data set for this type of IP address. Returns either a set of addresses to send out on our own reporting queues, or None. \"\"\" all_reported_ips = set() for pname, q in plugin_queue_lookup.items(): # Get all the IPs of the specified type from all the plugins. ips = utils.read_last_msg_from_queue(q) if ips: logging.debug(\"Sub-plugin '%s' reported %d \" \"%s IPs: %s\" % (pname, len(ips), ip_type_name, \",\".join(ips))) all_reported_ips.update(ips) # merge all the lists else: logging.debug(\"Sub-plugin '%s' reported no \" \"%s IPs.\" % (pname, ip_type_name)) # Send out the combined list of reported IPs. The receiver of this # message expects this list to always be the full list of IPs. So, IF # they get a message, it needs to be complete, since otherwise any IP # not mentioned in this update is considered healthy. # # Since different sub-plugins may report different IPs at different # times (and not always at the same time), we need to accumulate those # IPs that are recorded by different sub-plugins over time. # # We use an 'expiring data set' to store those: If any plugin refreshes # an IP as failed then the entry remains, otherwise, it will expire # after some time. The expiring data set therefore, is an accumulation # of recently reported IPs. We always report this set, whenever we send # out an update of IPs. # # Each type of IP (for example, 'failed' or 'questionable') has its own # accumulator, which was passed in to this function. if all_reported_ips: ip_accumulator.update(all_reported_ips) current_ips = ip_accumulator.get() logging.info(\"Multi-plugin health monitor: \" \"Reporting combined list of %s \" \"IPs: %s\" % (ip_type_name, \",\".join(current_ips))) return current_ips else: logging.debug(\"No failed IPs to report.\") return None\n\n    ### Response: Retrieve all IPs of a given type from all sub-plugins.\n\n        ip_type_name:        A name of the type of IP we are working with.\n                             Used for nice log messages. Example 'failed',\n                             'questionable'.\n        plugin_queue_lookup: Dictionary to lookup the queues (of a given type)\n                             for a plugins, by plugin name.\n        ip_accumulator:      An expiring data set for this type of IP address.\n\n        Returns either a set of addresses to send out on our own reporting\n        queues, or None..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void parseRequestStream(final InputStream inputStream, final String encoding) throws IOException { setParsed(); MultipartRequestInputStream input = new MultipartRequestInputStream(inputStream); input.readBoundary(); while (true) { FileUploadHeader header = input.readDataHeader(encoding); if (header == null) { break; } if (header.isFile) { String fileName = header.fileName; if (fileName.length() > 0) { if (header.contentType.indexOf(\"application/x-macbinary\") > 0) { input.skipBytes(128); } } FileUpload newFile = fileUploadFactory.create(input); newFile.processStream(); if (fileName.length() == 0) { // file was specified, but no name was provided, therefore it was not uploaded if (newFile.getSize() == 0) { newFile.size = -1; } } putFile(header.formFieldName, newFile); } else { // no file, therefore it is regular form parameter. FastByteArrayOutputStream fbos = new FastByteArrayOutputStream(); input.copyAll(fbos); String value = encoding != null ? new String(fbos.toByteArray(), encoding) : new String(fbos.toByteArray()); putParameter(header.formFieldName, value); } input.skipBytes(1); input.mark(1); // read byte, but may be end of stream int nextByte = input.read(); if (nextByte == -1 || nextByte == '-') { input.reset(); break; } input.reset(); } }\n\n    ### Response:", "ground_truth": "Extracts uploaded files and parameters from the request data.", "predict": "Parses a request stream of a given encoding. It first sets its internal state to parsed and reads data from the input stream. It reads FastByteArrayOutputStream from the given stream and copies it to its internal FastByteArrayOutputStream to parse regular form parameters of the given encoding. It reads MultipartRequestInputStream to parse multi-part request and reads its FormDataHeaders to parse files of given name and content of given encoding of regular and multi-part request and processes its upload and upload speed and upload size of given FormDataHeaders of given name of regular and multi-part request of given name of given FormDataHeaders of given name of given FormDataHeaders of given name of given FormDataHeaders of given name of given FormDataHeaders of given name of given FormDataHeaders of given name of given FormDataHeaders of given name of given FormDataHeaders of given name of given FormDataHeaders of given name of given FormDataHeaders of given name of given FormDataHeaders of given name of given FormDataHeaders of given name of given FormDataHeaders of given"}, {"ID": 1424, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setStatus($status) { if (!in_array($status, $this->getStatusses())) { throw new Exception(sprintf('Illegal status %1$s given. Must be one of %2$s', $status, implode(', ', $this->getStatusses()))); } $this->status = $status; return $this; }\n\n    ### Response: Set the status for this response\n\n@param string $status\n\n@throws \\Exception\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getParameter(final String paramName) { if (requestParameters == null) { return null; } String[] values = requestParameters.get(paramName); if ((values != null) && (values.length > 0)) { return values[0]; } return null; }\n\n    ### Response:", "ground_truth": "Returns single value of a parameter. If parameter name is used for\nmore then one parameter, only the first one will be returned.\n\n@return parameter value, or null if not found", "predict": "Get parameter values given parameter names\n\n@param string paramName\n\n@return string values;\n\n    "}, {"ID": 1425, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"static-method\") protected void generateStyles(IXmlStyleAppendable it) { it.appendTag(\"style\", //$NON-NLS-1$ \"id\", \"comment\", //$NON-NLS-1$ //$NON-NLS-2$ \"_name\", \"Comment\", //$NON-NLS-1$ //$NON-NLS-2$ \"map-to\", \"def:comment\"); //$NON-NLS-1$ //$NON-NLS-2$ it.appendTag(\"style\", //$NON-NLS-1$ \"id\", \"error\", //$NON-NLS-1$ //$NON-NLS-2$ \"_name\", \"Error\", //$NON-NLS-1$ //$NON-NLS-2$ \"map-to\", \"def:error\"); //$NON-NLS-1$ //$NON-NLS-2$ it.appendTag(\"style\", //$NON-NLS-1$ \"id\", \"escaped-character\", //$NON-NLS-1$ //$NON-NLS-2$ \"_name\", \"Escaped Character\", //$NON-NLS-1$ //$NON-NLS-2$ \"map-to\", \"def:special-char\"); //$NON-NLS-1$ //$NON-NLS-2$ it.appendTag(\"style\", //$NON-NLS-1$ \"id\", \"string\", //$NON-NLS-1$ //$NON-NLS-2$ \"_name\", \"String\", //$NON-NLS-1$ //$NON-NLS-2$ \"map-to\", \"def:string\"); //$NON-NLS-1$ //$NON-NLS-2$ it.appendTag(\"style\", //$NON-NLS-1$ \"id\", \"keyword\", //$NON-NLS-1$ //$NON-NLS-2$ \"_name\", \"Keyword\", //$NON-NLS-1$ //$NON-NLS-2$ \"map-to\", \"def:keyword\"); //$NON-NLS-1$ //$NON-NLS-2$ it.appendTag(\"style\", //$NON-NLS-1$ \"id\", \"literal\", //$NON-NLS-1$ //$NON-NLS-2$ \"_name\", \"Literal\", //$NON-NLS-1$ //$NON-NLS-2$ \"map-to\", \"def:special-constant\"); //$NON-NLS-1$ //$NON-NLS-2$ it.appendTag(\"style\", //$NON-NLS-1$ \"id\", \"number\", //$NON-NLS-1$ //$NON-NLS-2$ \"_name\", \"Number\", //$NON-NLS-1$ //$NON-NLS-2$ \"map-to\", \"def:number\"); //$NON-NLS-1$ //$NON-NLS-2$ it.appendTag(\"style\", //$NON-NLS-1$ \"id\", \"operator\", //$NON-NLS-1$ //$NON-NLS-2$ \"_name\", \"Operator\", //$NON-NLS-1$ //$NON-NLS-2$ \"map-to\", \"def:operator\"); //$NON-NLS-1$ //$NON-NLS-2$ it.appendTag(\"style\", //$NON-NLS-1$ \"id\", \"identifier\", //$NON-NLS-1$ //$NON-NLS-2$ \"_name\", \"Identifier\", //$NON-NLS-1$ //$NON-NLS-2$ \"map-to\", \"def:text\"); //$NON-NLS-1$ //$NON-NLS-2$ it.appendTag(\"style\", //$NON-NLS-1$ \"id\", \"annotation\", //$NON-NLS-1$ //$NON-NLS-2$ \"_name\", \"Annotation\", //$NON-NLS-1$ //$NON-NLS-2$ \"map-to\", \"def:preprocessor\"); //$NON-NLS-1$ //$NON-NLS-2$ }\n\n    ### Response: Generate the style section.\n\n@param it the appendable.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String[] getParameterValues(final String paramName) { if (requestParameters == null) { return null; } return requestParameters.get(paramName); }\n\n    ### Response:", "ground_truth": "Returns all values all of the values the given request parameter has.", "predict": "The method generates an array of values of the given parameter name from the given request parameters."}, {"ID": 1426, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function _loadLanguageItems() { $this->_languageItems = LanguageSource::find() ->joinWith(['languageTranslate' => function ($query) { $query->where(['language' => $this->_languageId]); }, ]) ->where(['category' => Scanner::CATEGORY_JAVASCRIPT]) ->all(); }\n\n    ### Response: Loads language elements in JavaScript category..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public FileUpload getFile(final String paramName) { if (requestFiles == null) { return null; } FileUpload[] values = requestFiles.get(paramName); if ((values != null) && (values.length > 0)) { return values[0]; } return null; }\n\n    ### Response:", "ground_truth": "Returns uploaded file.\n@param paramName parameter name of the uploaded file\n@return uploaded file or null if parameter name not found", "predict": "Retrieves file from given parameter name and returns its first found entry or null if no matching entry found"}, {"ID": 1427, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static synchronized void websocket(String url, AbstractReceiveListener endpoint) { checkStarted(); instance().endpoints.add(HandlerUtil.websocket(url, endpoint)); }\n\n    ### Response: Define a Websocket endpoint. Supports path variables\n\n@param url      The relative URL to be map this endpoint.\n@param endpoint The endpoint handler.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public FileUpload[] getFiles(final String paramName) { if (requestFiles == null) { return null; } return requestFiles.get(paramName); }\n\n    ### Response:", "ground_truth": "Returns all uploaded files the given request parameter has.", "predict": "Get and store uploaded files\n    If no files have been uploaded, returns null\n    If a parameter name has been specified, retrieve and store the corresponding uploaded file\n    Use RequestFiles to temporarily store and manage uploaded objects"}, {"ID": 1428, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function isEmpty() { return $this->y === 0 && $this->m === 0 && $this->d === 0 && $this->h === 0 && $this->i === 0 && $this->s === 0; }\n\n    ### Response: Is this interval empty?\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void init(final FilterConfig filterConfig) { this.filterConfig = filterConfig; this.encoding = filterConfig.getInitParameter(\"encoding\"); if (this.encoding == null) { this.encoding = JoddCore.encoding; } this.ignore = Converter.get().toBooleanValue(filterConfig.getInitParameter(\"ignore\"), true); }\n\n    ### Response:", "ground_truth": "Place this filter into service.\n\n@param filterConfig The filter configuration object", "predict": "Override the init(FilterConfig) method to initialize this filter with values set in FilterConfig. Initialize this filter with values set in FilterConfig. If initParameter(\"encoding\") or initParameter(\"ignore\") or both of them is null, initialize this filter to default values determined by JoddFilterFactory."}, {"ID": 1429, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function unserialize($data) { $data = unserialize($data); $args = self::parseArray($data); $this->__construct($args['name']); foreach ($args as $property => $value) { if (!empty($value)) $this->set($property, $value); } return $col; }\n\n    ### Response: Restore the column from its serialize form\n@param string $data The serialized data.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void parse(final DbSqlBuilder sqlBuilder, final String template) { int length = template.length(); int last = 0; while (true) { int mark = template.indexOf('$', last); if (mark == -1) { if (last < length) { sqlBuilder.appendRaw(template.substring(last)); } break; } int escapesCount = countEscapes(template, mark); // check if escaped if (escapesCount > 0) { boolean isEscaped = escapesCount % 2 != 0; int escapesToAdd = escapesCount >> 1; sqlBuilder.appendRaw(template.substring(last, mark - escapesCount + escapesToAdd) + '$'); if (isEscaped) { last = mark + 1; continue; } } else { sqlBuilder.appendRaw(template.substring(last, mark)); } int end; if (template.startsWith(MACRO_TABLE, mark)) { mark += MACRO_TABLE.length(); end = findMacroEnd(template, mark); onTable(sqlBuilder, template.substring(mark, end)); } else if (template.startsWith(MACRO_COLUMN, mark)) { mark += MACRO_COLUMN.length(); end = findMacroEnd(template, mark); onColumn(sqlBuilder, template.substring(mark, end)); } else if (template.startsWith(MACRO_MATCH, mark)) { mark += MACRO_MATCH.length(); end = findMacroEnd(template, mark); onMatch(sqlBuilder, template.substring(mark, end)); } else if (template.startsWith(MACRO_VALUE, mark)) { mark += MACRO_VALUE.length(); end = findMacroEnd(template, mark); onValue(sqlBuilder, template.substring(mark, end)); } else { mark++; // reference found end = mark; // find macro end while (end < length) { if (!isReferenceChar(template, end)) { break; } end++; } onReference(sqlBuilder, template.substring(mark, end)); end--; } end++; last = end; } }\n\n    ### Response:", "ground_truth": "Parses template and returns generated sql builder.", "predict": "Restore the column from its serialized form\npublic function parse(string $data) {\n    int length = $data->length;\n    int last = 0;\n    while (true) {\n        int mark = $data->indexOf('$', last);\n        if (mark == -1) {\n            if (last < length) {\n                $data->appendRaw($data->substring(last));\n            }\n            break;\n        }\n        int escapesCount = countEscapes($data, mark); // check if escaped\n        // record the number of escaped and subtract from count of '$'\n        int escapesToAdd = escapesCount / 2;\n        $data->appendRaw($data->substring(last, mark - escapesCount - escapesToAdd) . '$');\n        if (isEscaped) {\n            last = mark + 1;\n            continue;\n        }\n        int end;\n        if ($data->"}, {"ID": 1430, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func IPLess(a, b net.IP) bool { b = b.To4() for i, ai := range a.To4() { if ai != b[i] { return ai < b[i] } } return false }\n\n    ### Response: // IPLess returns where IP a is less than IP b..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected int findMacroEnd(final String template, final int fromIndex) { int endIndex = template.indexOf('}', fromIndex); if (endIndex == -1) { throw new DbSqlBuilderException(\"Template syntax error, some macros are not closed. Error at: '...\" + template.substring(fromIndex)); } return endIndex; }\n\n    ### Response:", "ground_truth": "Finds macros end.", "predict": "// This function returns int which contains ending location of macro string from given string string and int parameter which represent starting location of macro string in given string string. It looks for closing } of macro string and returns ending location of macro string from given string string. It handles macro string may or may not be closed and handles any error during its parsing and returns appropriate error message."}, {"ID": 1431, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _pruning_base(self, axis=None, hs_dims=None): \"\"\"Gets margin if across CAT dimension. Gets counts if across items. Categorical variables are pruned based on their marginal values. If the marginal is a 0 or a NaN, the corresponding row/column is pruned. In case of a subvars (items) dimension, we only prune if all the counts of the corresponding row/column are zero. \"\"\" if not self._is_axis_allowed(axis): # In case we encountered axis that would go across items dimension, # we need to return at least some result, to prevent explicitly # checking for this condition, wherever self._margin is used return self.as_array(weighted=False, include_transforms_for_dims=hs_dims) # In case of allowed axis, just return the normal API margin. This call # would throw an exception when directly invoked with bad axis. This is # intended, because we want to be as explicit as possible. Margins # across items are not allowed. return self.margin( axis=axis, weighted=False, include_transforms_for_dims=hs_dims )\n\n    ### Response: Gets margin if across CAT dimension. Gets counts if across items.\n\n        Categorical variables are pruned based on their marginal values. If the\n        marginal is a 0 or a NaN, the corresponding row/column is pruned. In\n        case of a subvars (items) dimension, we only prune if all the counts\n        of the corresponding row/column are zero..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected int countEscapes(final String template, int macroIndex) { macroIndex--; int escapeCount = 0; while (macroIndex >= 0) { if (template.charAt(macroIndex) != ESCAPE_CHARACTER) { break; } escapeCount++; macroIndex--; } return escapeCount; }\n\n    ### Response:", "ground_truth": "Count escapes to the left.", "predict": "Counts number of escaped characters in the given string."}, {"ID": 1432, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function deploy(mode, target, system, containerDef, container, out, cb) { var executor = prepareAndGetExecutor(target, out, 'deploying'); executor.deploy(mode, target, system, containerDef, container, out, function(err) { cb(err); }); }\n\n    ### Response: deploy the container\ntarget - target to deploy to\nsystem - the target system defintinion\ncdef - the contianer definition\ncontainer - the container as defined in the system topology\nout - ouput stream\ncb - complete callback.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String buildQuery(final HttpMultiMap<?> queryMap, final String encoding) { if (queryMap.isEmpty()) { return StringPool.EMPTY; } int queryMapSize = queryMap.size(); StringBand query = new StringBand(queryMapSize * 4); int count = 0; for (Map.Entry<String, ?> entry : queryMap) { String key = entry.getKey(); key = URLCoder.encodeQueryParam(key, encoding); Object value = entry.getValue(); if (value == null) { if (count != 0) { query.append('&'); } query.append(key); count++; } else { if (count != 0) { query.append('&'); } query.append(key); count++; query.append('='); String valueString = URLCoder.encodeQueryParam(value.toString(), encoding); query.append(valueString); } } return query.toString(); }\n\n    ### Response:", "ground_truth": "Builds a query string from given query map.", "predict": "generates a query string given an HTTP multi map and an encoding"}, {"ID": 1433, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function controlAccessAdmin() { if ($this->is_backend && !$this->isSuperadmin()) { if (empty($this->current_user['role_status']) || !$this->access('admin')) { $this->redirect('/', $this->text('No access'), 'warning'); } if (isset($this->current_route['access']) && !$this->access($this->current_route['access'])) { $this->setHttpStatus(403); } } }\n\n    ### Response: Controls access to admin pages.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static HttpMultiMap<String> parseQuery(final String query, final boolean decode) { final HttpMultiMap<String> queryMap = HttpMultiMap.newCaseInsensitiveMap(); if (StringUtil.isBlank(query)) { return queryMap; } int lastNdx = 0; while (lastNdx < query.length()) { int ndx = query.indexOf('&', lastNdx); if (ndx == -1) { ndx = query.length(); } final String paramAndValue = query.substring(lastNdx, ndx); ndx = paramAndValue.indexOf('='); if (ndx == -1) { queryMap.add(paramAndValue, null); } else { String name = paramAndValue.substring(0, ndx); if (decode) { name = URLDecoder.decodeQuery(name); } String value = paramAndValue.substring(ndx + 1); if (decode) { value = URLDecoder.decodeQuery(value); } queryMap.add(name, value); } lastNdx += paramAndValue.length() + 1; } return queryMap; }\n\n    ### Response:", "ground_truth": "Parses query from give query string. Values are optionally decoded.", "predict": "Parses a query string to generate an HTTP multi map of parameters and values"}, {"ID": 1434, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function callObjectMethod($object, $name, Array $args = NULL) { $args = (array) $args; /* funky switch da wir performance wollen */ switch (count($args)) { case 0: return $object->$name(); case 1: return $object->$name($args[0]); case 2: return $object->$name($args[0],$args[1]); case 3: return $object->$name($args[0],$args[1],$args[2]); case 4: return $object->$name($args[0],$args[1],$args[2],$args[3]); case 5: return $object->$name($args[0],$args[1],$args[2],$args[3],$args[4]); case 6: return $object->$name($args[0],$args[1],$args[2],$args[3],$args[4],$args[5]); case 7: return $object->$name($args[0],$args[1],$args[2],$args[3],$args[4],$args[5],$args[6]); case 8: return $object->$name($args[0],$args[1],$args[2],$args[3],$args[4],$args[5],$args[6],$args[7]); default: // use call_user_func_array evil return call_user_func_array(array($object,$name),$args); } }\n\n    ### Response: Ruft eine Methode auf einem Objekt auf\n\n@param object $object\n@param string $name der Name der Methode die aufgerufen werden soll\n@param array $arg\n@return Object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String prepareHeaderParameterName(final String headerName) { // special cases if (headerName.equals(\"etag\")) { return HttpBase.HEADER_ETAG; } if (headerName.equals(\"www-authenticate\")) { return \"WWW-Authenticate\"; } char[] name = headerName.toCharArray(); boolean capitalize = true; for (int i = 0; i < name.length; i++) { char c = name[i]; if (c == '-') { capitalize = true; continue; } if (capitalize) { name[i] = Character.toUpperCase(c); capitalize = false; } else { name[i] = Character.toLowerCase(c); } } return new String(name); }\n\n    ### Response:", "ground_truth": "Makes nice header names.", "predict": "Prepaer eines Parameternamens auf Basis eines Http-Headers"}, {"ID": 1435, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def resume_all(self): \"\"\"Resumes all service instances.\"\"\" for alias, service in self._service_objects.items(): with expects.expect_no_raises( 'Failed to pause service \"%s\".' % alias): service.resume()\n\n    ### Response: Resumes all service instances..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String extractMediaType(final String contentType) { int index = contentType.indexOf(';'); if (index == -1) { return contentType; } return contentType.substring(0, index); }\n\n    ### Response:", "ground_truth": "Extracts media-type from value of \"Content Type\" header.", "predict": "Extracts the media type from the given contentType."}, {"ID": 1436, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *AwsSecurityFindingFilters) SetSeverityProduct(v []*NumberFilter) *AwsSecurityFindingFilters { s.SeverityProduct = v return s }\n\n    ### Response: // SetSeverityProduct sets the SeverityProduct field's value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String toHtml(final Node node, final Appendable appendable) { NodeVisitor renderer = createRenderer(appendable); node.visit(renderer); return appendable.toString(); }\n\n    ### Response:", "ground_truth": "Renders node to appendable.", "predict": "// This method generates an HTML representation of the given node.."}, {"ID": 1437, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function remove($class, $method) { $callback = $class . '::' . $method; if (isset($this->configs['instances'][$callback])) { unset($this->configs['instances'][$callback], $this->configs['log'][$callback]); App::$Properties->writeConfig('Cron', $this->configs); } }\n\n    ### Response: Remove registered cron task from configs\n@param string $class\n@param string $method.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String toInnerHtml(final Node node, final Appendable appendable) { NodeVisitor renderer = createRenderer(appendable); node.visitChildren(renderer); return appendable.toString(); }\n\n    ### Response:", "ground_truth": "Renders node children to appendable.", "predict": "Render the given node to inner HTML string"}, {"ID": 1438, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getTaxClass() { $taxClass = $this->entity->getTaxClass(); if ($taxClass) { return new TaxClass($this->entity->getTaxClass(), $this->locale); } return null; }\n\n    ### Response: Returns the tax class of the product.\n\n@VirtualProperty\n@SerializedName(\"taxClass\")\n\n@return TaxClass The status of the product.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void configureWith(final ServletContext servletContext) { webAppClassName = servletContext.getInitParameter(PARAM_MADVOC_WEBAPP); paramsFiles = Converter.get().toStringArray(servletContext.getInitParameter(PARAM_MADVOC_PARAMS)); madvocConfiguratorClassName = servletContext.getInitParameter(PARAM_MADVOC_CONFIGURATOR); }\n\n    ### Response:", "ground_truth": "Configures Madvoc by reading context init parameters.", "predict": "The configureWith() method reads parameters from the server initialization parameters file and initialize the MadVocation library for the given server."}, {"ID": 1439, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def add_dialogue(self, query, response): \"\"\"Add dialogue to channel. :param query: query string :param response: response string \"\"\" self._dialogues['__default__'][to_bytes(query)] = to_bytes(response)\n\n    ### Response: Add dialogue to channel.\n\n        :param query: query string\n        :param response: response string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void reset() { this.ndx = 0; this.textLen = 0; this.path = new Path(); this.notFirstObject = false; if (useAltPaths) { path.altPath = new Path(); } if (classMetadataName != null) { mapToBean = createMapToBean(classMetadataName); } }\n\n    ### Response:", "ground_truth": "Resets JSON parser, so it can be reused.", "predict": "\n    /*\n     * Reset the token stream back to its original\n     * initialization\n     */\n    protected void reset() {\n        this.index = 0;\n        this.inputLen = 0;\n        this.lineOffset = 0;\n        this.lineEndOffset = 0;\n        this.charOffset = 0;\n        this.charEndOffset = 0;\n        this.charBeginOffset = 0;\n        this.charBeginOffset_DELETED = 0;\n        this.charRangeBeginOffset_DELETED = 0;\n        this.charRangeBeginOffset_DELETED_DELETED = 0;\n        this.charRangeEndOffset_DELETED_DELETED = 0;\n        this.charRangeBeginOffset_DELETED_DELETED_DELETED = 0;\n        this.charRangeBeginOffset_DELE"}, {"ID": 1440, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def setup_owner(self, name, new_owner=default, transact={}): \"\"\" Set the owner of the supplied name to `new_owner`. For typical scenarios, you'll never need to call this method directly, simply call :meth:`setup_name` or :meth:`setup_address`. This method does *not* set up the name to point to an address. If `new_owner` is not supplied, then this will assume you want the same owner as the parent domain. If the caller owns ``parentname.eth`` with no subdomains and calls this method with ``sub.parentname.eth``, then ``sub`` will be created as part of this call. :param str name: ENS name to set up :param new_owner: account that will own `name`. If ``None``, set owner to empty addr. If not specified, name will point to the parent domain owner's address. :param dict transact: the transaction configuration, like in :meth:`~web3.eth.Eth.sendTransaction` :raises InvalidName: if `name` has invalid syntax :raises UnauthorizedError: if ``'from'`` in `transact` does not own `name` :returns: the new owner's address \"\"\" (super_owner, unowned, owned) = self._first_owner(name) if new_owner is default: new_owner = super_owner elif not new_owner: new_owner = EMPTY_ADDR_HEX else: new_owner = to_checksum_address(new_owner) current_owner = self.owner(name) if new_owner == EMPTY_ADDR_HEX and not current_owner: return None elif current_owner == new_owner: return current_owner else: self._assert_control(super_owner, name, owned) self._claim_ownership(new_owner, unowned, owned, super_owner, transact=transact) return new_owner\n\n    ### Response: Set the owner of the supplied name to `new_owner`.\n\n        For typical scenarios, you'll never need to call this method directly,\n        simply call :meth:`setup_name` or :meth:`setup_address`. This method does *not*\n        set up the name to point to an address.\n\n        If `new_owner` is not supplied, then this will assume you\n        want the same owner as the parent domain.\n\n        If the caller owns ``parentname.eth`` with no subdomains\n        and calls this method with ``sub.parentname.eth``,\n        then ``sub`` will be created as part of this call.\n\n        :param str name: ENS name to set up\n        :param new_owner: account that will own `name`. If ``None``, set owner to empty addr.\n            If not specified, name will point to the parent domain owner's address.\n        :param dict transact: the transaction configuration, like in\n            :meth:`~web3.eth.Eth.sendTransaction`\n        :raises InvalidName: if `name` has invalid syntax\n        :raises UnauthorizedError: if ``'from'`` in `transact` does not own `name`\n        :returns: the new owner's address.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public JsonParser lazy(final boolean lazy) { this.lazy = lazy; this.mapSupplier = lazy ? LAZYMAP_SUPPLIER : HASHMAP_SUPPLIER; this.listSupplier = lazy ? LAZYLIST_SUPPLIER : ARRAYLIST_SUPPLIER; return this; }\n\n    ### Response:", "ground_truth": "Defines how JSON parser works. In non-lazy mode, the whole JSON is parsed as it is.\nIn the lazy mode, not everything is parsed, but some things are left lazy.\nThis way we gain performance, especially on partial usage of the whole JSON.\nHowever, be aware that parser holds the input memory until the returned\nobjects are disposed.", "predict": "The JsonParser constructor provides options to customize how the parser generates objects and arrays of arbitrary values (objects and arrays of string values or objects and arrays of other parsers), such as determining whether to generate objects and arrays lazily (on demand) or eagerly (during parser initialization), and to customize how these objects and arrays are generated (supplied by custom delegates or generated directly by the JsonParser)"}, {"ID": 1441, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void queue(DtmfEventImpl evt) { if (queue.size() == size) { queue.poll(); } queue.offer(evt); logger.info(String.format(\"(%s) Buffer size: %d\", detectorImpl.getName(), queue.size())); }\n\n    ### Response: Queues specified event.\n\n@param evt the event to be queued..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Class replaceWithMappedTypeForPath(final Class target) { if (mappings == null) { return target; } Class newType; // first try alt paths Path altPath = path.getAltPath(); if (altPath != null) { if (!altPath.equals(path)) { newType = mappings.get(altPath); if (newType != null) { return newType; } } } // now check regular paths newType = mappings.get(path); if (newType != null) { return newType; } return target; }\n\n    ### Response:", "ground_truth": "Replaces type with mapped type for current path.", "predict": "Replaces target Class with mappedClass for given path and alt path"}, {"ID": 1442, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setPageTitleOnPersist(PersistEvent $event) { $document = $event->getDocument(); if (!$document instanceof ArticleInterface) { return; } $document->setPageTitle($this->getPageTitle($document)); }\n\n    ### Response: Set page-title on persist event.\n\n@param PersistEvent $event.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> List<T> parseAsList(final String string, final Class<T> componentType) { return new JsonParser() .map(JsonParser.VALUES, componentType) .parse(string); }\n\n    ### Response:", "ground_truth": "Parses input JSON to a list with specified component type.", "predict": "Parses given string to list of objects of given componentType."}, {"ID": 1443, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def clean(self, tol=None): \"\"\" Clean actor's polydata. Can also be used to decimate a mesh if ``tol`` is large. If ``tol=None`` only removes coincident points. :param tol: defines how far should be the points from each other in terms of fraction of the bounding box length. .. hint:: |moving_least_squares1D| |moving_least_squares1D.py|_ |recosurface| |recosurface.py|_ \"\"\" poly = self.polydata(False) cleanPolyData = vtk.vtkCleanPolyData() cleanPolyData.PointMergingOn() cleanPolyData.ConvertLinesToPointsOn() cleanPolyData.ConvertPolysToLinesOn() cleanPolyData.SetInputData(poly) if tol: cleanPolyData.SetTolerance(tol) cleanPolyData.Update() return self.updateMesh(cleanPolyData.GetOutput())\n\n    ### Response: Clean actor's polydata. Can also be used to decimate a mesh if ``tol`` is large.\n        If ``tol=None`` only removes coincident points.\n\n        :param tol: defines how far should be the points from each other in terms of fraction\n            of the bounding box length.\n\n        .. hint:: |moving_least_squares1D| |moving_least_squares1D.py|_\n\n            |recosurface| |recosurface.py|_.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <K, V> Map<K, V> parseAsMap( final String string, final Class<K> keyType, final Class<V> valueType) { return new JsonParser() .map(JsonParser.KEYS, keyType) .map(JsonParser.VALUES, valueType) .parse(string); }\n\n    ### Response:", "ground_truth": "Parses input JSON to a list with specified key and value types.", "predict": "\n    Parses the given string as Map<Key, Value>, where Key and Value are defined by the parameterized Map<Key, Value> class."}, {"ID": 1444, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function registerTypesAndConfig(ConfigurationService $config) { $services = $this->container->getServiceIds(); foreach ($services as $service) { if (substr($service, 0, 14) == \"midnight_type.\") { if (!$config->has(\"type\", $service)) { $this->container->get($service)->initialize(); $config->set(\"type\", $service, $this->container->get($service)->getCacheLevel()); } } elseif (substr($service, 0, 16) == \"midnight_config.\") { $serv = $this->container->get($service); $c = $serv->getConfiguration(); foreach ($c as $key => $data) { if (!$config->has(\"configuration\", $key)) { $config->set(\"configuration\", $key, $data[\"default\"]); } } $toolbar = $serv->addToolbar($this->container->get(\"router\")); foreach($toolbar as $name => $path){ if (!$config->has(\"toolbar\", $name)) { $config->set(\"toolbar\", $name, $path); } } $templates = $serv->registerTemplate(); foreach($templates as $name => $template){ if (!$config->has(\"template\", $template)) { $config->set(\"template\", $name, $template); } } } } }\n\n    ### Response: loads all possible page type and configuration\n@param ConfigurationService $config.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Object resolveLazyValue(Object value) { if (value instanceof Supplier) { value = ((Supplier)value).get(); } return value; }\n\n    ### Response:", "ground_truth": "Resolves lazy value during the parsing runtime.", "predict": "Resolves any lazily loaded objects during the function execution"}, {"ID": 1445, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def should_add_ServerHello(self): \"\"\" Selecting a cipher suite should be no trouble as we already caught the None case previously. Also, we do not manage extensions at all. \"\"\" if isinstance(self.mykey, PrivKeyRSA): kx = \"RSA\" elif isinstance(self.mykey, PrivKeyECDSA): kx = \"ECDSA\" usable_suites = get_usable_ciphersuites(self.cur_pkt.ciphers, kx) c = usable_suites[0] if self.preferred_ciphersuite in usable_suites: c = self.preferred_ciphersuite self.add_msg(TLSServerHello(cipher=c)) raise self.ADDED_SERVERHELLO()\n\n    ### Response: Selecting a cipher suite should be no trouble as we already caught\n        the None case previously.\n\n        Also, we do not manage extensions at all..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void skipObject() { int bracketCount = 1; boolean insideString = false; while (ndx < total) { final char c = input[ndx]; if (insideString) { if (c == '\\\"' && notPrecededByEvenNumberOfBackslashes()) { insideString = false; } } else if (c == '\\\"') { insideString = true; } else if (c == '{') { bracketCount++; } else if (c == '}') { bracketCount--; if (bracketCount == 0) { ndx++; return; } } ndx++; } }\n\n    ### Response:", "ground_truth": "Skips over complete object. It is not parsed, just skipped. It will be\nparsed later, but only if required.", "predict": "The function skips over an arbitrary number of UTF8 encoded Unicode objects (such as strings of text and escape sequences) by keeping track of the balance of brackets and quoted strings seen since the function was invoked. It makes its decision to move on to the next token by examining the balance of brackets and quoted strings seen since the function was invoked. If there is an even number of brackets since the function was invoked, or if there is a quoted string following an even number of brackets since the function was invoked, the function moves on to the next token; otherwise the function skips over the token since there must be an odd number of brackets since the function was invoked since there must be an even number of brackets since the function was invoked since there must be an even number of brackets since the function was invoked since there must be an even number of brackets since the function was invoked since there must be an even number of brackets since the function was invoked since there must be an even number of brackets since the function was invoked since there must be an even number of brackets since the function"}, {"ID": 1446, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def motion_from_params(param_file,motion_file,individual=True,rms=True): '''calculate a motion regressor from the params file given by 3dAllineate Basically just calculates the rms change in the translation and rotation components. Returns the 6 motion vector (if ``individual`` is ``True``) and the RMS difference (if ``rms`` is ``True``).''' with open(param_file) as inf: translate_rotate = np.array([[float(y) for y in x.strip().split()[:6]] for x in inf.readlines() if x[0]!='#']) motion = np.array([]) if individual: motion = np.vstack((np.zeros(translate_rotate.shape[1]),np.diff(translate_rotate,axis=0))) if rms: translate = [sqrt(sum([x**2 for x in y[:3]])) for y in translate_rotate] rotate = [sqrt(sum([x**2 for x in y[3:]])) for y in translate_rotate] translate_rotate = np.array(map(add,translate,rotate)) translate_rotate_diff = np.hstack(([0],np.diff(translate_rotate,axis=0))) if motion.shape==(0,): motion = rms_motion else: motion = np.column_stack((motion,translate_rotate_diff)) with open(motion_file,'w') as outf: outf.write('\\n'.join(['\\t'.join([str(y) for y in x]) for x in motion]))\n\n    ### Response: calculate a motion regressor from the params file given by 3dAllineate\n\n    Basically just calculates the rms change in the translation and rotation components. Returns the 6 motion vector (if ``individual`` is ``True``) and the RMS difference (if ``rms`` is ``True``)..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String parseString() { char quote = '\\\"'; if (looseMode) { quote = consumeOneOf('\\\"', '\\''); if (quote == 0) { return parseUnquotedStringContent(); } } else { consume(quote); } return parseStringContent(quote); }\n\n    ### Response:", "ground_truth": "Parses a string.", "predict": "Parses a string with quoted and unquoted contents and returns the corresponding string values"}, {"ID": 1447, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *Streamer) run() { go func() { for { select { case cl := <-s.connecting: s.clients[cl] = true case cl := <-s.disconnecting: delete(s.clients, cl) case event := <-s.event: for cl := range s.clients { // TODO: non-blocking broadcast //select { //case cl <- event: // Try to send event to client //default: // fmt.Println(\"Channel full. Discarding value\") //} cl <- event } } } }() }\n\n    ### Response: // run starts a goroutine to handle client connects and broadcast events..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String parseStringContent(final char quote) { final int startNdx = ndx; // roll-out until the end of the string or the escape char while (true) { final char c = input[ndx]; if (c == quote) { // no escapes found, just use existing string ndx++; return new String(input, startNdx, ndx - 1 - startNdx); } if (c == '\\\\') { break; } ndx++; } // escapes found, proceed differently textLen = ndx - startNdx; growEmpty(); // for (int i = startNdx, j = 0; j < textLen; i++, j++) { // text[j] = input[i]; // } System.arraycopy(input, startNdx, text, 0, textLen); // escape char, process everything until the end while (true) { char c = input[ndx]; if (c == quote) { // done ndx++; final String str = new String(text, 0, textLen); textLen = 0; return str; } if (c == '\\\\') { // escape char found ndx++; c = input[ndx]; switch (c) { case '\\\"' : c = '\\\"'; break; case '\\\\' : c = '\\\\'; break; case '/' : c = '/'; break; case 'b' : c = '\\b'; break; case 'f' : c = '\\f'; break; case 'n' : c = '\\n'; break; case 'r' : c = '\\r'; break; case 't' : c = '\\t'; break; case 'u' : ndx++; c = parseUnicode(); break; default: if (looseMode) { if (c != '\\'') { c = '\\\\'; ndx--; } } else { syntaxError(\"Invalid escape char: \" + c); } } } text[textLen] = c; textLen++; growAndCopy(); ndx++; } }\n\n    ### Response:", "ground_truth": "Parses string content, once when starting quote has been consumed.", "predict": "// parseStringContent reads a quoted string of comma delimited tokens and escape sequences and translate to proper UTF8 string"}, {"ID": 1448, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public boolean isServerPrimary(ServerBartender server) { for (int i = 0; i < Math.min(1, _owners.length); i++) { ServerBartender serverBar = server(i); if (serverBar == null) { continue; } else if (serverBar.isSameServer(server)) { return true; } } return false; }\n\n    ### Response: Test if the server is the primary for the node..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected char parseUnicode() { int i0 = CharUtil.hex2int(input[ndx++]); int i1 = CharUtil.hex2int(input[ndx++]); int i2 = CharUtil.hex2int(input[ndx++]); int i3 = CharUtil.hex2int(input[ndx]); return (char) ((i0 << 12) + (i1 << 8) + (i2 << 4) + i3); }\n\n    ### Response:", "ground_truth": "Parses 4 characters and returns unicode character.", "predict": "Parses Unicode character codes from the input string."}, {"ID": 1449, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void deleteFilesRecursively( File... files ) throws IOException { if( files == null ) return; List<File> filesToDelete = new ArrayList<> (); filesToDelete.addAll( Arrays.asList( files )); while( ! filesToDelete.isEmpty()) { File currentFile = filesToDelete.remove( 0 ); if( currentFile == null || ! currentFile.exists()) continue; // Non-empty directory: add sub-files and reinsert the current directory after File[] subFiles = currentFile.listFiles(); if( subFiles != null && subFiles.length > 0 ) { filesToDelete.add( 0, currentFile ); filesToDelete.addAll( 0, Arrays.asList( subFiles )); } // Existing file or empty directory => delete it else if( ! currentFile.delete()) throw new IOException( currentFile.getAbsolutePath() + \" could not be deleted.\" ); } }\n\n    ### Response: Deletes files recursively.\n@param files the files to delete\n@throws IOException if a file could not be deleted.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String parseUnquotedStringContent() { final int startNdx = ndx; while (true) { final char c = input[ndx]; if (c <= ' ' || CharUtil.equalsOne(c, UNQUOTED_DELIMETERS)) { final int currentNdx = ndx; // done skipWhiteSpaces(); return new String(input, startNdx, currentNdx - startNdx); } ndx++; } }\n\n    ### Response:", "ground_truth": "Parses un-quoted string content.", "predict": "Parses unquoted string content of an XML document."}, {"ID": 1450, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def cli( # pylint: disable=too-many-arguments ctx, target, config, c, commits, extra_path, ignore, msg_filename, verbose, silent, debug, ): \"\"\" Git lint tool, checks your git commit messages for styling issues \"\"\" try: if debug: logging.getLogger(\"gitlint\").setLevel(logging.DEBUG) log_system_info() # Get the lint config from the commandline parameters and # store it in the context (click allows storing an arbitrary object in ctx.obj). config, config_builder = build_config(ctx, target, config, c, extra_path, ignore, verbose, silent, debug) LOG.debug(u\"Configuration\\n%s\", ustr(config)) ctx.obj = (config, config_builder, commits, msg_filename) # If no subcommand is specified, then just lint if ctx.invoked_subcommand is None: ctx.invoke(lint) except GitContextError as e: click.echo(ustr(e)) ctx.exit(GIT_CONTEXT_ERROR_CODE)\n\n    ### Response: Git lint tool, checks your git commit messages for styling issues.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Number parseNumber() { final int startIndex = ndx; char c = input[ndx]; boolean isDouble = false; boolean isExp = false; if (c == '-') { ndx++; } while (true) { if (isEOF()) { break; } c = input[ndx]; if (c >= '0' && c <= '9') { ndx++; continue; } if (c <= 32) { // white space break; } if (c == ',' || c == '}' || c == ']') { // delimiter break; } if (c == '.') { isDouble = true; } else if (c == 'e' || c == 'E') { isExp = true; } ndx++; } final String value = new String(input, startIndex, ndx - startIndex); if (isDouble) { return Double.valueOf(value); } long longNumber; if (isExp) { longNumber = Double.valueOf(value).longValue(); } else { if (value.length() >= 19) { // if string is 19 chars and longer, it can be over the limit BigInteger bigInteger = new BigInteger(value); if (isGreaterThanLong(bigInteger)) { return bigInteger; } longNumber = bigInteger.longValue(); } else { longNumber = Long.parseLong(value); } } if ((longNumber >= Integer.MIN_VALUE) && (longNumber <= Integer.MAX_VALUE)) { return (int) longNumber; } return longNumber; }\n\n    ### Response:", "ground_truth": "Parses JSON numbers.", "predict": "Parses a single number (integer or double) from the input string to int or double"}, {"ID": 1451, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def cancel(self, orderNumbers, account=None, **kwargs): \"\"\" Cancels an order you have placed in a given market. Requires only the \"orderNumbers\". An order number takes the form ``1.7.xxx``. :param str orderNumbers: The Order Object ide of the form ``1.7.xxxx`` \"\"\" if not account: if \"default_account\" in self.config: account = self.config[\"default_account\"] if not account: raise ValueError(\"You need to provide an account\") account = Account(account, full=False, blockchain_instance=self) if not isinstance(orderNumbers, (list, set, tuple)): orderNumbers = {orderNumbers} op = [] for order in orderNumbers: op.append( operations.Limit_order_cancel( **{ \"fee\": {\"amount\": 0, \"asset_id\": \"1.3.0\"}, \"fee_paying_account\": account[\"id\"], \"order\": order, \"extensions\": [], \"prefix\": self.prefix, } ) ) return self.finalizeOp(op, account[\"name\"], \"active\", **kwargs)\n\n    ### Response: Cancels an order you have placed in a given market. Requires\n            only the \"orderNumbers\". An order number takes the form\n            ``1.7.xxx``.\n\n            :param str orderNumbers: The Order Object ide of the form\n                ``1.7.xxxx``.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Object parseArrayContent(Class targetType, Class componentType) { // detect special case if (targetType == Object.class) { targetType = List.class; } // continue targetType = replaceWithMappedTypeForPath(targetType); if (componentType == null && targetType != null && targetType.isArray()) { componentType = targetType.getComponentType(); } path.push(VALUES); componentType = replaceWithMappedTypeForPath(componentType); Collection<Object> target = newArrayInstance(targetType); boolean koma = false; mainloop: while (true) { skipWhiteSpaces(); char c = input[ndx]; if (c == ']') { if (koma) { syntaxError(\"Trailing comma\"); } ndx++; path.pop(); return target; } Object value = parseValue(componentType, null, null); target.add(value); skipWhiteSpaces(); c = input[ndx]; switch (c) { case ']': ndx++; break mainloop; case ',': ndx++; koma = true; break; default: syntaxError(\"Invalid char: expected ] or ,\"); } } path.pop(); if (targetType != null) { return convertType(target, targetType); } return target; }\n\n    ### Response:", "ground_truth": "Parses arrays, once when open bracket has been consumed.", "predict": "Parses an ordered sequence of comma delimited values of any type to its corresponding objects of any type determined by the given Class object targetType and componentType parameter of the same order of comma delimited values of any type determined by the given Class objects targetType and componentType parameter of the same order of comma delimited values of any type determined by the given Class objects targetType and componentType parameter of the same order of comma delimited values of any type determined by the given Class objects targetType and componentType parameter of the same order of comma delimited values of any type determined by the given Class objects targetType and componentType parameter of the same order of comma delimited values of any type determined by the given Class objects targetType and componentType parameter of the same order of comma delimited values of any type determined by the given Class objects targetType and componentType parameter of the same order of comma delimited values of any type determined by the given Class objects targetType and componentType parameter of the same order of comma del"}, {"ID": 1452, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def records(cls, fqdn, sort_by=None, text=False): \"\"\"Display records information about a domain.\"\"\" meta = cls.get_fqdn_info(fqdn) url = meta['domain_records_href'] kwargs = {} if text: kwargs = {'headers': {'Accept': 'text/plain'}} return cls.json_get(cls.get_sort_url(url, sort_by), **kwargs)\n\n    ### Response: Display records information about a domain..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void createEmptyCtor() { final MethodVisitor mv = wd.dest.visitMethod(AsmUtil.ACC_PUBLIC, INIT, \"()V\", null, null); mv.visitCode(); mv.visitVarInsn(Opcodes.ALOAD, 0); mv.visitMethodInsn( Opcodes.INVOKESPECIAL, AsmUtil.SIGNATURE_JAVA_LANG_OBJECT, INIT, \"()V\", false); mv.visitInsn(Opcodes.RETURN); mv.visitMaxs(1, 1); mv.visitEnd(); }\n\n    ### Response:", "ground_truth": "Created empty default constructor.", "predict": "The constructor of an empty domain generates an invocation of the default constructor of an Object with the empty argument list of an empty domain"}, {"ID": 1453, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function createTodoListItem(todo) { var checkbox = document.createElement('input'); checkbox.className = 'toggle'; checkbox.type = 'checkbox'; checkbox.addEventListener('change', checkboxChanged.bind(this, todo)); var label = document.createElement('label'); label.appendChild( document.createTextNode(todo.title)); label.addEventListener('dblclick', todoDblClicked.bind(this, todo)); var deleteLink = document.createElement('button'); deleteLink.className = 'destroy'; deleteLink.addEventListener( 'click', deleteButtonPressed.bind(this, todo)); var divDisplay = document.createElement('div'); divDisplay.className = 'view'; divDisplay.appendChild(checkbox); divDisplay.appendChild(label); divDisplay.appendChild(deleteLink); var inputEditTodo = document.createElement('input'); inputEditTodo.id = 'input_' + todo._id; inputEditTodo.className = 'edit'; inputEditTodo.value = todo.title; inputEditTodo.addEventListener('keypress', todoKeyPressed.bind(this, todo)); inputEditTodo.addEventListener('blur', todoBlurred.bind(this, todo)); var li = document.createElement('li'); li.id = 'li_' + todo._id; li.appendChild(divDisplay); li.appendChild(inputEditTodo); if (todo.completed) { li.className += 'complete'; checkbox.checked = true; } return li; }\n\n    ### Response: Given an object representing a todo, this will create a list item to display it..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void createSimpleMethodWrapper(final MethodSignatureVisitor msign) { int access = msign.getAccessFlags(); access &= ~ACC_ABSTRACT; access &= ~ACC_NATIVE; MethodVisitor mv = wd.dest.visitMethod( access, msign.getMethodName(), msign.getDescription(), msign.getAsmMethodSignature(), msign.getExceptions()); mv.visitCode(); mv.visitVarInsn(ALOAD, 0); mv.visitFieldInsn(GETFIELD, wd.thisReference, wd.wrapperRef, wd.wrapperType); loadVirtualMethodArguments(mv, msign); if (wd.wrapInterface) { mv.visitMethodInsn( INVOKEINTERFACE, wd.wrapperType.substring(1, wd.wrapperType.length() - 1), msign.getMethodName(), msign.getDescription(), true); } else { mv.visitMethodInsn( INVOKEVIRTUAL, wd.wrapperType.substring(1, wd.wrapperType.length() - 1), msign.getMethodName(), msign.getDescription(), false); } ProxettaAsmUtil.prepareReturnValue(mv, msign, 0); visitReturn(mv, msign, true); mv.visitMaxs(0, 0); mv.visitEnd(); }\n\n    ### Response:", "ground_truth": "Creates simple method wrapper without proxy.", "predict": "The given method wraps a given method signature and generates appropriate code to execute the given method signature given an instance of an object of the given wrapper class"}, {"ID": 1454, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Payload decode(String base64) { JsonObject json = decodeToJson(base64); Payload payload = new Payload(); json.keySet().forEach(key -> { switch (key) { case \"iss\": payload.issuer = json.getString(key); break; case \"sub\": payload.subject = json.getString(key); break; case \"aud\": payload.audience = json.getString(key); break; case \"exp\": payload.expires = new Long(json.get(key).toString()); break; case \"nbf\": payload.notBefore = new Long(json.get(key).toString()); break; case \"iat\": payload.issuedAt = new Long(json.get(key).toString()); break; case \"jti\": payload.jwtId = json.getString(key); break; default: payload.add(key, json.getString(key)); } }); return payload; }\n\n    ### Response: Decode the base64-string to Payload.\n\n@param base64 the base64-string to be decoded\n@return the payload instance.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private String resolveRawTypeName(String typeName) { if (typeName == null) { return null; } boolean isArray = typeName.startsWith(StringPool.LEFT_SQ_BRACKET); if (isArray) { typeName = typeName.substring(1); } String rawTypeName; if (generics.containsKey(typeName)) { rawTypeName = generics.get(typeName); } else { rawTypeName = declaredTypeGeneric.getOrDefault(typeName, typeName); } if (isArray) { rawTypeName = '[' + rawTypeName; } return rawTypeName; }\n\n    ### Response:", "ground_truth": "Resolves raw type name using the generics information from the class\nor method information.", "predict": "Resolve the given rawTypeName to its actual type and generate its method level annotation."}, {"ID": 1455, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function generateSite(config, useServer) { var fileMap = new FileMap(config) , siteBuilder = new SiteBuilder(config) , server = require(__dirname + '/server')(siteBuilder); fileMap.walk(); fileMap.on('ready', function() { siteBuilder.fileMap = fileMap; siteBuilder.build(); }); siteBuilder.once('ready', function() { if (useServer) { server.run(); server.watch(); } }); return siteBuilder; }\n\n    ### Response: Runs `FileMap` and `SiteBuilder` based on the config.\n\n@params {Object} Configuration options\n@params {Boolean} Use a HTTP sever?\n@return {SiteBuilder} A `SiteBuilder` instance.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public BeanReferences resolveReferenceFromValue(final PropertyDescriptor propertyDescriptor, final String refName) { BeanReferences references; if (refName == null || refName.isEmpty()) { references = buildDefaultReference(propertyDescriptor); } else { references = BeanReferences.of(refName); } references = references.removeDuplicateNames(); return references; }\n\n    ### Response:", "ground_truth": "Resolves reference from given values. Returns bean reference of given value or defaults\nif given name is blank.", "predict": "Resolves an external value to its corresponding BeanReference objects and returns it if the given reference names is null or empty, or returns the corresponding BeanReference objects of the given reference names otherwise."}, {"ID": 1456, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (lex *GotestLexer) Scan() bool { if !lex.scanner.Scan() { return false } if lex.scanner.Err() != nil { return false } line := lex.scanner.Text() lnum := lex.scanner.Line() found := false for _, typ := range gtTypes { if typ.re.MatchString(line) { found = true lex.tok = &Token{lnum, typ.typ, line} break } } if !found { lex.tok = &Token{lnum, DataToken, line} } return true }\n\n    ### Response: // Scan scans the next token. Return true if there's a new one.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public BeanReferences[] resolveReferenceFromValues(final Executable methodOrCtor, final String... parameterReferences) { BeanReferences[] references = convertRefToReferences(parameterReferences); if (references == null || references.length == 0) { references = buildDefaultReferences(methodOrCtor); } if (methodOrCtor.getParameterTypes().length != references.length) { throw new PetiteException(\"Different number of method parameters and references for: \" + methodOrCtor.getDeclaringClass().getName() + '#' + methodOrCtor.getName()); } removeAllDuplicateNames(references); return references; }\n\n    ### Response:", "ground_truth": "Takes given parameters references and returns reference set for given method or constructor.", "predict": "// ResolveReferenceFromValues resolves parameter references in the given method signature to actual objects in the method invocation arguments. It may add references to objects that were not in the method signature arguments but could be retrieved from objects in the method invocation arguments. It may also add references to objects that were in the method signature arguments but could be retrieved from objects in the method invocation arguments without affecting the functioning of the method because of overload resolution of method invocations in the Java Virtual Machine specification. It may add references to objects that could be retrieved from objects in the method invocation arguments but could impact the functioning of the method because of overload resolution of method invocations in the specification because there may be ambiguity in resolving references to objects in the method invocation arguments without affecting the functioning of the method because of overload resolution of method invocations in the specification because there may be ambiguity in resolving references to objects in the method invocation arguments without affecting the functioning of the method because of overload resolution"}, {"ID": 1457, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_max_instability(self, min_voltage=None, max_voltage=None): \"\"\" The maximum instability along a path for a specific voltage range. Args: min_voltage: The minimum allowable voltage. max_voltage: The maximum allowable voltage. Returns: Maximum decomposition energy of all compounds along the insertion path (a subset of the path can be chosen by the optional arguments) \"\"\" data = [] for pair in self._select_in_voltage_range(min_voltage, max_voltage): if pair.decomp_e_charge is not None: data.append(pair.decomp_e_charge) if pair.decomp_e_discharge is not None: data.append(pair.decomp_e_discharge) return max(data) if len(data) > 0 else None\n\n    ### Response: The maximum instability along a path for a specific voltage range.\n\n        Args:\n            min_voltage: The minimum allowable voltage.\n            max_voltage: The maximum allowable voltage.\n\n        Returns:\n            Maximum decomposition energy of all compounds along the insertion\n            path (a subset of the path can be chosen by the optional arguments).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public BeanReferences[] readAllReferencesFromAnnotation(final Executable methodOrCtor) { PetiteInject petiteInject = methodOrCtor.getAnnotation(PetiteInject.class); final Parameter[] parameters = methodOrCtor.getParameters(); BeanReferences[] references; final boolean hasAnnotationOnMethodOrCtor; if (petiteInject != null) { references = convertAnnValueToReferences(petiteInject.value()); hasAnnotationOnMethodOrCtor = true; } else { references = new BeanReferences[parameters.length]; hasAnnotationOnMethodOrCtor = false; } int parametersWithAnnotationCount = 0; for (int i = 0; i < parameters.length; i++) { Parameter parameter = parameters[i]; petiteInject = parameter.getAnnotation(PetiteInject.class); if (petiteInject == null) { // no annotation on argument continue; } // there is annotation on argument, override values String annotationValue = readAnnotationValue(petiteInject); if (annotationValue != null) { references[i] = BeanReferences.of(annotationValue); } parametersWithAnnotationCount++; } if (!hasAnnotationOnMethodOrCtor) { if (parametersWithAnnotationCount == 0) { return null; } if (parametersWithAnnotationCount != parameters.length) { throw new PetiteException(\"All arguments must be annotated with PetiteInject\"); } } references = updateReferencesWithDefaultsIfNeeded(methodOrCtor, references); removeAllDuplicateNames(references); return references; }\n\n    ### Response:", "ground_truth": "Extracts references from method or constructor annotation.", "predict": "The BeanReferences array returned by this method contains references to the objects that should be injected into the objects of the parameterized method or constructor of the specified class. It uses reflection to translate the annotations on the method or constructor arguments into objects to be injected into the objects of the parameterized method or constructor of the specified class."}, {"ID": 1458, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (l *ServiceListener) getStateRequests(logger *log.Entry, stateIDs []string) ([]StateRequest, bool) { reqs := make([]StateRequest, len(stateIDs)) ok := true for i, stateID := range stateIDs { hostID, serviceID, instanceID, err := ParseStateID(stateID) if err != nil { // This shouldn't happen logger.WithField(\"stateid\", stateID).WithError(err).Warn(\"Unexpected error trying to parse state id\") ok = false continue } reqs[i] = StateRequest{ PoolID: l.poolid, HostID: hostID, ServiceID: serviceID, InstanceID: instanceID, } } return reqs, ok }\n\n    ### Response: // getStateRequests returns a list of state requests.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private BeanReferences[] buildDefaultReferences(final Executable methodOrCtor) { final boolean useParamo = petiteConfig.getUseParamo(); final PetiteReferenceType[] lookupReferences = petiteConfig.getLookupReferences(); MethodParameter[] methodParameters = null; if (useParamo) { methodParameters = Paramo.resolveParameters(methodOrCtor); } final Class[] paramTypes = methodOrCtor.getParameterTypes(); final BeanReferences[] references = new BeanReferences[paramTypes.length]; for (int j = 0; j < paramTypes.length; j++) { String[] ref = new String[lookupReferences.length]; references[j] = BeanReferences.of(ref); for (int i = 0; i < ref.length; i++) { switch (lookupReferences[i]) { case NAME: ref[i] = methodParameters != null ? methodParameters[j].getName() : null; break; case TYPE_SHORT_NAME: ref[i] = StringUtil.uncapitalize(paramTypes[j].getSimpleName()); break; case TYPE_FULL_NAME: ref[i] = paramTypes[j].getName(); break; } } } return references; }\n\n    ### Response:", "ground_truth": "Builds default method references.", "predict": "// This method resolves BeanReference from the method signature and creates an // appropriate BeanReference for the given method signature // It uses the Petite Resolver library // If Petite Resolver wasn't used, BeanReference for the method // arguments would be constructed from the method signature // It uses the following lookup references: name, // short and full names of the given method // It uses the following BeanReference // Resolvers: name Resolver, // short Resolver and full Resolver"}, {"ID": 1459, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> Callable<T> recover(Callable<T> callable, Function<Exception, T> exceptionHandler){ return () -> { try{ return callable.call(); }catch (Exception exception){ return exceptionHandler.apply(exception); } }; }\n\n    ### Response: Returns a composed function that first executes the Callable and optionally recovers from an exception.\n\n@param  return type of after\n@param exceptionHandler the exception handler\n@return a function composed of callable and exceptionHandler.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public BeanReferences buildDefaultReference(final PropertyDescriptor propertyDescriptor) { final PetiteReferenceType[] lookupReferences = petiteConfig.getLookupReferences(); final String[] references = new String[lookupReferences.length]; for (int i = 0; i < references.length; i++) { switch (lookupReferences[i]) { case NAME: references[i] = propertyDescriptor.getName(); break; case TYPE_SHORT_NAME: references[i] = StringUtil.uncapitalize(propertyDescriptor.getType().getSimpleName()); break; case TYPE_FULL_NAME: references[i] = propertyDescriptor.getType().getName(); break; } } return BeanReferences.of(references); }\n\n    ### Response:", "ground_truth": "Builds default field references.", "predict": "Creates and returns an array of string names of the given PropertyDescriptor to form the default BeanReference for the given Petite instance."}, {"ID": 1460, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function register() { $this->commands([ 'Synga\\PhpStormMeta\\Laravel\\Command\\ExcludeCommand', 'Synga\\PhpStormMeta\\Laravel\\Command\\IncludeCommand', 'Synga\\PhpStormMeta\\Laravel\\Command\\GenerateCommand', ]); $this->app->singleton('Synga\\InheritanceFinder\\InheritanceFinderInterface', function(){ if(!file_exists(storage_path('class_cache'))){ mkdir(storage_path('class_cache')); } $config = new \\Synga\\InheritanceFinder\\File\\FileConfig(); $config->setApplicationRoot(base_path()); $config->setCacheDirectory(storage_path('class_cache')); return InheritanceFinderFactory::getInheritanceFinder($config); }); }\n\n    ### Response: Registers the commands.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void removeAllDuplicateNames(final BeanReferences[] allBeanReferences) { for (int i = 0; i < allBeanReferences.length; i++) { BeanReferences references = allBeanReferences[i]; allBeanReferences[i] = references.removeDuplicateNames(); } }\n\n    ### Response:", "ground_truth": "Removes duplicate names from bean references.", "predict": "Removes the duplicate names of objects referenced in the BeanReferences array."}, {"ID": 1461, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getImagesQuery($data, $inputs) { foreach ($inputs as $input) { $data[] = $this->setData(['image' => ['url' => $input->getImage()]], 'input'); } return $data; }\n\n    ### Response: Generates Image search query and adds it to existing data\n\n@param $data\n@param Input[] $inputs\n\n@return array $data.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private BeanReferences[] convertRefToReferences(final String[] references) { if (references == null) { return null; } BeanReferences[] ref = new BeanReferences[references.length]; for (int i = 0; i < references.length; i++) { ref[i] = BeanReferences.of(references[i]); } return ref; }\n\n    ### Response:", "ground_truth": "Converts single string array to an array of bean references.", "predict": "Creates BeanReference objects from given string references\n\nBeanReferences[] convertRefToReferences(String[] references);"}, {"ID": 1462, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def execute(self, eopatch): \"\"\"Returns the EOPatch with renamed features. :param eopatch: input EOPatch :type eopatch: EOPatch :return: input EOPatch with the renamed features :rtype: EOPatch \"\"\" for feature_type, feature_name, new_feature_name in self.feature_gen(eopatch): eopatch[feature_type][new_feature_name] = eopatch[feature_type][feature_name] del eopatch[feature_type][feature_name] return eopatch\n\n    ### Response: Returns the EOPatch with renamed features.\n\n        :param eopatch: input EOPatch\n        :type eopatch: EOPatch\n        :return: input EOPatch with the renamed features\n        :rtype: EOPatch.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private BeanReferences[] convertAnnValueToReferences(String value) { if (value == null) { return null; } value = value.trim(); if (value.length() == 0) { return null; } String[] refNames = Converter.get().toStringArray(value); BeanReferences[] references = new BeanReferences[refNames.length]; for (int i = 0; i < refNames.length; i++) { references[i] = BeanReferences.of(refNames[i].trim()); } return references; }\n\n    ### Response:", "ground_truth": "Converts comma-separated string into array of Bean references.", "predict": "\n    Private BeanReferences[] convertAnnValueToReferences(String value)\n    If the given string contains any leading or trailing spaces, or contains only spaces, then the method\n    returns null;\n    Otherwise, trim the string to remove leading and trailing spaces and convert to an array of string names\n    of objects to be referred to; Finally, create an array of references to refer to these objects and\n    return it;"}, {"ID": 1463, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (q *Query) SelectOrInsert(values ...interface{}) (inserted bool, _ error) { if q.stickyErr != nil { return false, q.stickyErr } var insertq *Query var insertErr error for i := 0; i < 5; i++ { if i >= 2 { time.Sleep(internal.RetryBackoff(i-2, 250*time.Millisecond, 5*time.Second)) } err := q.Select(values...) if err == nil { return false, nil } if err != internal.ErrNoRows { return false, err } if insertq == nil { insertq = q if len(insertq.columns) > 0 { insertq = insertq.Copy() insertq.columns = nil } } res, err := insertq.Insert(values...) if err != nil { insertErr = err if err == internal.ErrNoRows { continue } if pgErr, ok := err.(internal.PGError); ok { if pgErr.IntegrityViolation() { continue } if pgErr.Field('C') == \"55000\" { // Retry on \"#55000 attempted to delete invisible tuple\". continue } } return false, err } if res.RowsAffected() == 1 { return true, nil } } err := fmt.Errorf( \"pg: SelectOrInsert: select returns no rows (insert fails with err=%q)\", insertErr) return false, err }\n\n    ### Response: // SelectOrInsert selects the model inserting one if it does not exist.\n// It returns true when model was inserted..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void runJoy(final Consumer<JoddJoyRuntime> consumer) { final JoddJoy joddJoy = new JoddJoy(); final JoddJoyRuntime joyRuntime = joddJoy.startOnlyBackend(); joddJoy.withDb(joyDb -> setJtxManager(joyRuntime.getJtxManager())); final JtxTransaction tx = startRwTx(); final Print print = new Print(); try { print.line(\"START\", 80); print.newLine(); consumer.accept(joyRuntime); print.newLine(); print.line(\"END\", 80); if (tx != null) { tx.commit(); } } catch (Throwable throwable) { throwable.printStackTrace(); if (tx != null) { tx.rollback(); } } joddJoy.stop(); }\n\n    ### Response:", "ground_truth": "Runs JOY in standalone mode, with only backend.", "predict": "// Starts and runs the joy connected to the database and completes the run of joy and its transaction\n\n    "}, {"ID": 1464, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function isInterface(PHP_CodeSniffer_File $phpcsFile) { $checkFile = \"\". $phpcsFile->getFilename(); if (isset($this->isFileInterface[$checkFile])) { return (bool) $this->isFileInterface[$checkFile]; } $interface = $phpcsFile->findNext(T_INTERFACE, 0); return $this->isFileInterface[$checkFile] = (bool)(empty($interface) == false); }\n\n    ### Response: Test if this a PHP Interface File\n\n@param PHP_CodeSniffer_File $phpcsFile\n\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Method findMethod(final Class c, final String methodName) { return findDeclaredMethod(c, methodName, true); }\n\n    ### Response:", "ground_truth": "Returns method from an object, matched by name. This may be considered as\na slow operation, since methods are matched one by one.\nReturns only accessible methods.\nOnly first method is matched.\n\n@param c          class to examine\n@param methodName Full name of the method.\n@return null if method not found", "predict": "Find the given method from the given class."}, {"ID": 1465, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (a *imageLimitRangerPlugin) SupportsAttributes(attr admission.Attributes) bool { if attr.GetSubresource() != \"\" { return false } gk := attr.GetKind().GroupKind() return image.Kind(\"ImageStreamMapping\") == gk || legacy.Kind(\"ImageStreamMapping\") == gk }\n\n    ### Response: // SupportsAttributes is a helper that returns true if the resource is supported by the plugin.\n// Implements the LimitRangerActions interface..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> Constructor<T> findConstructor(final Class<T> clazz, final Class<?>... parameterTypes) { final Constructor<?>[] constructors = clazz.getConstructors(); Class<?>[] pts; for (Constructor<?> constructor : constructors) { pts = constructor.getParameterTypes(); if (isAllAssignableFrom(pts, parameterTypes)) { return (Constructor<T>) constructor; } } return null; }\n\n    ### Response:", "ground_truth": "Finds constructor with given parameter types. First matched ctor is returned.", "predict": "The function identifies the first constructor of the given class that accepts arguments of the given parameter types and returns its reference."}, {"ID": 1466, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected PrimitiveProtocol protocol() { PrimitiveProtocol protocol = this.protocol; if (protocol == null) { PrimitiveProtocolConfig<?> protocolConfig = config.getProtocolConfig(); if (protocolConfig == null) { Collection<PartitionGroup> partitionGroups = managementService.getPartitionService().getPartitionGroups(); if (partitionGroups.size() == 1) { protocol = partitionGroups.iterator().next().newProtocol(); } else { String groups = Joiner.on(\", \").join(partitionGroups.stream() .map(group -> group.name()) .collect(Collectors.toList())); throw new ConfigurationException(String.format(\"Primitive protocol is ambiguous: %d partition groups found (%s)\", partitionGroups.size(), groups)); } } else { protocol = protocolConfig.getType().newProtocol(protocolConfig); } } return protocol; }\n\n    ### Response: Returns the primitive protocol.\n\n@return the primitive protocol.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Class[] resolveAllInterfaces(final Class type) { Set<Class> bag = new LinkedHashSet<>(); _resolveAllInterfaces(type, bag); return bag.toArray(new Class[0]); }\n\n    ### Response:", "ground_truth": "Resolves all interfaces of a type. No duplicates are returned.\nDirect interfaces are prior the interfaces of subclasses in\nthe returned array.", "predict": "Resolves all of the superclass of the given type to an Interface of that type\n\n*Resolves all of the superclass of the given type to an Interface of that type*"}, {"ID": 1467, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_center(self, element): \"\"\"Get center coordinates of an element :param element: either a WebElement, PageElement or element locator as a tuple (locator_type, locator_value) :returns: dict with center coordinates \"\"\" web_element = self.get_web_element(element) location = web_element.location size = web_element.size return {'x': location['x'] + (size['width'] / 2), 'y': location['y'] + (size['height'] / 2)}\n\n    ### Response: Get center coordinates of an element\n\n        :param element: either a WebElement, PageElement or element locator as a tuple (locator_type, locator_value)\n        :returns: dict with center coordinates.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean compareParameters(final Class[] first, final Class[] second) { if (first.length != second.length) { return false; } for (int i = 0; i < first.length; i++) { if (first[i] != second[i]) { return false; } } return true; }\n\n    ### Response:", "ground_truth": "Compares classes, usually method or ctor parameters.", "predict": "Compares two arrays of objects to see if they contain the same objects but ordered differently\n\n     * If the objects in first and second arrays are the same, but ordered differently\n     * return true\n     * Otherwise\n     * return false"}, {"ID": 1468, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def code(app_reference) code = '' templates.each_pair do |name, template| binding_code = [] if template['bindings'] template['bindings'].each_pair do |key, value| binding_code << \"#{key.inspect} => [#{value.join(', ')}]\" end end binding_code = \"{#{binding_code.join(', ')}}\" code << \"#{app_reference}.add_template(#{name.inspect}, #{template['html'].inspect}, #{binding_code})\\n\" end code end\n\n    ### Response: Generate code for the view that can be evaled..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void forceAccess(final AccessibleObject accObject) { try { if (System.getSecurityManager() == null) accObject.setAccessible(true); else { AccessController.doPrivileged((PrivilegedAction) () -> { accObject.setAccessible(true); return null; }); } } catch (SecurityException sex) { // ignore } }\n\n    ### Response:", "ground_truth": "Suppress access check against a reflection object. SecurityException is silently ignored.\nChecks first if the object is already accessible.", "predict": "Force objects to make their fields and methods readable by providing a mechanism to bypass the security manager of the system"}, {"ID": 1469, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def parse_theta2_report (self, fh): \"\"\" Parse the final THetA2 log file. \"\"\" parsed_data = {} for l in fh: if l.startswith('#'): continue else: s = l.split(\"\\t\") purities = s[1].split(',') parsed_data['proportion_germline'] = float(purities[0]) * 100.0 for i, v in enumerate(purities[1:]): if i <= 5: parsed_data['proportion_tumour_{}'.format(i+1)] = float(v) * 100.0 else: parsed_data['proportion_tumour_gt5'] = (float(v) * 100.0) + parsed_data.get('proportion_tumour_gt5', 0) break return parsed_data\n\n    ### Response: Parse the final THetA2 log file..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public static <T> T newInstance(final Class<T> clazz, final Object... params) throws InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException { if (params.length == 0) { return newInstance(clazz); } final Class<?>[] paramTypes = getClasses(params); final Constructor<?> constructor = findConstructor(clazz, paramTypes); if (constructor == null) { throw new InstantiationException(\"No constructor matched parameter types.\"); } return (T) constructor.newInstance(params); }\n\n    ### Response:", "ground_truth": "Creates new instance of given class with given optional arguments.", "predict": "Allows for the construction of an instance of the given Class from arguments of any type, given an ordered list of arguments and the Class to be constructed."}, {"ID": 1470, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void initialize() { if(this.initialized) { return; } if (LoggingUtil.SESSION_LOGGER_CORE.isLoggable(Level.INFO)) { if (this.sessionStoreService==null) { LoggingUtil.SESSION_LOGGER_CORE.logp(Level.INFO, methodClassName, \"initialize\", \"SessionMgrComponentImpl.noPersistence\"); } else { String modeName = \"sessionPersistenceMode\"; Object modeValue = this.mergedConfiguration.get(modeName); LoggingUtil.SESSION_LOGGER_CORE.logp(Level.INFO, methodClassName, \"initialize\", \"SessionMgrComponentImpl.persistenceMode\", new Object[] { modeValue }); } } SessionProperties.setPropertiesInSMC(this.serverLevelSessionManagerConfig, this.mergedConfiguration); String cloneId = SessionManagerConfig.getCloneId(); if (cloneId == null) { if (this.sessionStoreService==null && SessionManagerConfig.isTurnOffCloneId()) { /*- * In tWAS, WsSessionAffinityManager sets the CloneID to -1 when two conditions are both met: * A) Running in a standalone server (com.ibm.ws.runtime.service.WLM#getMemberUID()==null) * B) The HttpSessionCloneId custom property is not explicitly set * * In addition, tWAS will set the CloneID to \"\" (the empty String) if a third condition is also met: * C) The NoAdditionalSessionInfo custom property is set to \"true\" * * In lWAS, there's no notion of a \"standalone\" server, because potentially any lWAS server * could require a CloneID for session affinity. As a result, our logic for using an * empty Clone ID on lWAS needs to be different than our logic on tWAS. * * Since most customers who specify a session store will be interested in session affinity, * we'll assume that these customers are always interested in a non-empty Clone ID. * * We'll also assume that customers who do not specify a session store who also explicitly * set the noAdditionalInfo property to \"true\" would prefer an empty Clone ID. * * All customers can always explicitly set the cloneId property to override these assumptions. */ cloneId = \"\"; } else { String serverId = getServerId(); // never returns null if (TraceComponent.isAnyTracingEnabled() && LoggingUtil.SESSION_LOGGER_CORE.isLoggable(Level.FINE)) { LoggingUtil.SESSION_LOGGER_CORE.logp(Level.FINE, methodClassName, \"initialize\", \"serverId=\" + serverId); } SessionManagerConfig.setServerId(serverId); cloneId = EncodeCloneID.encodeString(serverId); // never returns null } SessionManagerConfig.setCloneId(cloneId); } this.initialized=true; }\n\n    ### Response: Delay initialization until a public method of this service is called.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Class[] getSuperclasses(final Class type) { int i = 0; for (Class x = type.getSuperclass(); x != null; x = x.getSuperclass()) { i++; } Class[] result = new Class[i]; i = 0; for (Class x = type.getSuperclass(); x != null; x = x.getSuperclass()) { result[i] = x; i++; } return result; }\n\n    ### Response:", "ground_truth": "Returns all superclasses.", "predict": "Get the list of superclass of the given class and prepare an array to hold this information."}, {"ID": 1471, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public synchronized void close() throws IOException { // // Kill running tasks. Do this in a 2nd vector, called 'tasksToClose', // because calling jobHasFinished() may result in an edit to 'tasks'. // TreeMap<TaskAttemptID, TaskInProgress> tasksToClose = new TreeMap<TaskAttemptID, TaskInProgress>(); tasksToClose.putAll(tasks); for (TaskInProgress tip : tasksToClose.values()) { tip.jobHasFinished(false); } this.running = false; if (pulseChecker != null) { pulseChecker.shutdown(); } if (versionBeanName != null) { MBeanUtil.unregisterMBean(versionBeanName); } // Clear local storage if (asyncDiskService != null) { // Clear local storage asyncDiskService.cleanupAllVolumes(); // Shutdown all async deletion threads with up to 10 seconds of delay asyncDiskService.shutdown(); try { if (!asyncDiskService.awaitTermination(10000)) { asyncDiskService.shutdownNow(); asyncDiskService = null; } } catch (InterruptedException e) { asyncDiskService.shutdownNow(); asyncDiskService = null; } } // Shutdown the fetcher thread if (this.mapEventsFetcher != null) { this.mapEventsFetcher.interrupt(); } // Stop the launchers this.mapLauncher.interrupt(); this.reduceLauncher.interrupt(); if (this.heartbeatMonitor != null) { this.heartbeatMonitor.interrupt(); } // Stop memory manager thread if (this.taskMemoryManager != null) { this.taskMemoryManager.shutdown(); } // Stop cgroup memory watcher this.cgroupMemoryWatcher.shutdown(); // All tasks are killed. So, they are removed from TaskLog monitoring also. // Interrupt the monitor. getTaskLogsMonitor().interrupt(); jvmManager.stop(); // shutdown RPC connections RPC.stopProxy(jobClient); // wait for the fetcher thread to exit for (boolean done = false; !done; ) { try { if (this.mapEventsFetcher != null) { this.mapEventsFetcher.join(); } done = true; } catch (InterruptedException e) { } } if (taskReportServer != null) { taskReportServer.stop(); taskReportServer = null; } if (healthChecker != null) { //stop node health checker service healthChecker.stop(); healthChecker = null; } if (this.server != null) { try { LOG.info(\"Shutting down StatusHttpServer\"); this.server.stop(); LOG.info(\"Shutting down Netty MapOutput Server\"); if (this.nettyMapOutputServer != null) { this.nettyMapOutputServer.stop(); } } catch (Exception e) { LOG.warn(\"Exception shutting down TaskTracker\", e); } } }\n\n    ### Response: Close down the TaskTracker and all its components.  We must also shutdown\nany running tasks or threads, and cleanup disk space.  A new TaskTracker\nwithin the same process space might be restarted, so everything must be\nclean..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Class<?> childClassOf(final Class<?> parentClass, final Object instance) { if (instance == null || instance == Object.class) { return null; } if (parentClass != null) { if (parentClass.isInterface()) { return null; } } Class<?> childClass = instance.getClass(); while (true) { Class<?> parent = childClass.getSuperclass(); if (parent == parentClass) { return childClass; } if (parent == null) { return null; } childClass = parent; } }\n\n    ### Response:", "ground_truth": "Returns the class of the immediate subclass of the given parent class for\nthe given object instance; or null if such immediate subclass cannot be\nuniquely identified for the given object instance.", "predict": "The childClass function checks if the given instance is the instance of the parentClass or its superclass, and returns the childClass of the given instance, or null if the instance does not inherit from the parentClass or any of its superclass(es)."}, {"ID": 1472, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setViewOptions($template, array $view_data = array()) { $this->view_options = $view_data; $this->view_template = $template; return $this; }\n\n    ### Response: Compiles the options to use for the view\n\n@param string $template\n@param array $view_data\n@return \\JaegerApp\\Email.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static JarFile jarFileOf(final Class<?> klass) { URL url = klass.getResource( \"/\" + klass.getName().replace('.', '/') + \".class\"); if (url == null) { return null; } String s = url.getFile(); int beginIndex = s.indexOf(\"file:\") + \"file:\".length(); int endIndex = s.indexOf(\".jar!\"); if (endIndex == -1) { return null; } endIndex += \".jar\".length(); String f = s.substring(beginIndex, endIndex); // decode URL string - it may contain encoded chars (e.g. whitespaces) which are not supported for file-instances f = URLDecoder.decode(f, \"UTF-8\"); File file = new File(f); try { return file.exists() ? new JarFile(file) : null; } catch (IOException e) { throw new IllegalStateException(e); } }\n\n    ### Response:", "ground_truth": "Returns the jar file from which the given class is loaded; or null\nif no such jar file can be located.", "predict": "Retrieves the contents of the JAR file of the given class\n    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"}, {"ID": 1473, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def copy(self): \"\"\" Safely get a copy of the current point cloud. Copied objects will have emptied caches to avoid memory issues and so may be slow on initial operations until caches are regenerated. Current object will *not* have its cache cleared. Returns --------- copied : trimesh.PointCloud Copy of current point cloud \"\"\" copied = PointCloud(vertices=None) # copy vertex and face data copied._data.data = copy.deepcopy(self._data.data) # get metadata copied.metadata = copy.deepcopy(self.metadata) # make sure cache is set from here copied._cache.clear() return copied\n\n    ### Response: Safely get a copy of the current point cloud.\n\n        Copied objects will have emptied caches to avoid memory\n        issues and so may be slow on initial operations until\n        caches are regenerated.\n\n        Current object will *not* have its cache cleared.\n\n        Returns\n        ---------\n        copied : trimesh.PointCloud\n          Copy of current point cloud.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void sleep(final long ms) { try { Thread.sleep(ms); } catch (InterruptedException iex) { Thread.currentThread().interrupt(); } }\n\n    ### Response:", "ground_truth": "Puts a thread to sleep, without throwing an InterruptedException.\n\n@param ms     the length of time to sleep in milliseconds", "predict": "Stops the program execution and waits for the given millisecods (in ms). The program may be interrupted but Thread.interrupt() must be used to intentionally stop the program."}, {"ID": 1474, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (ad *AttributeDecoder) String() string { if ad.err != nil { return \"\" } return nlenc.String(ad.data()) }\n\n    ### Response: // String returns the string representation of the current Attribute's data..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void sleep() { try { Thread.sleep(Long.MAX_VALUE); } catch (InterruptedException iex) { Thread.currentThread().interrupt(); } }\n\n    ### Response:", "ground_truth": "Puts a thread to sleep forever.", "predict": "// Stops the currently executing Thread until Thread.currentThread().interrupt() is invoked, useful for waiting without blocking the UI thread.."}, {"ID": 1475, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(scripts, cb) { // Reduce the list to scripts that haven't been loaded var existingScripts = _findExistingScripts(); var loadingScripts = Object.keys(_loadingScripts); scripts = jQuery.grep(scripts, function(url) { return url && (jQuery.inArray(url, existingScripts) === -1 || jQuery.inArray(url, loadingScripts) !== -1); }); // Attempt to use the user provided method if (_config.loadScripts) { return _config.loadScripts(scripts, cb); } if (!scripts.length) { return cb(); } var doc = window.document; var scriptCount = scripts.length; var scriptsLoaded = 0; //http://caniuse.com/#feat=script-async // var supportsAsync = 'async' in doc.createElement('script') || 'MozAppearance' in doc.documentElement.style || window.opera; var head = doc && (doc['head'] || doc.getElementsByTagName('head')[0]); // to keep IE from crying, we need to put scripts before any // <base> elements, but after any <meta>. this should do it: var insertBeforeEl = head && head.getElementsByTagName('base')[0] || null; // Check for IE10+ so that we don't rely on onreadystatechange, readyStates for IE6-9 var readyStates = 'addEventListener' in window ? {} : { 'loaded': true, 'complete': true }; // Log and emit event for the failed (400,500) scripts var _error = function(e) { setTimeout(function() { var evtData = { src: e.target.src, appId: appConfigs[0].appId }; // Send error to console F2.log('Script defined in \\'' + evtData.appId + '\\' failed to load \\'' + evtData.src + '\\''); // TODO: deprecate, see #222 F2.Events.emit(F2.Constants.Events.RESOURCE_FAILED_TO_LOAD, evtData); if (!_bUsesAppHandlers) { _appScriptLoadFailed(appConfigs[0], evtData.src); } else { F2.AppHandlers.__trigger( _sAppHandlerToken, F2.Constants.AppHandlers.APP_SCRIPT_LOAD_FAILED, appConfigs[0], evtData.src ); } }, _config.scriptErrorTimeout); // Defaults to 7000 }; var _checkComplete = function() { // Are we done loading all scripts for this app? if (++scriptsLoaded === scriptCount) { // success cb(); } }; var _emptyWaitlist = function(resourceKey, errorEvt) { var waiting, waitlist = _loadingScripts[resourceKey]; if (!waitlist) { return; } for (var i=0; i<waitlist.length; i++) { waiting = waitlist [i]; if (errorEvt) { waiting.error(errorEvt); } else { waiting.success(); } } _loadingScripts[resourceKey] = null; }; // Load scripts and eval inlines once complete jQuery.each(scripts, function(i, e) { var script = doc.createElement('script'), resourceUrl = e, resourceKey = resourceUrl.toLowerCase(); // this script is actively loading, add this app to the wait list if (_loadingScripts[resourceKey]) { _loadingScripts[resourceKey].push({ success: _checkComplete, error: _error }); return; } // create the waitlist _loadingScripts[resourceKey] = []; // If in debugMode, add cache buster to each script URL if (_config.debugMode) { resourceUrl += '?cachebuster=' + new Date().getTime(); } // Scripts are loaded asynchronously and executed in order // in supported browsers: http://caniuse.com/#feat=script-async script.async = false; script.type = 'text/javascript'; script.charset = 'utf-8'; script.onerror = function(e) { _error(e); _emptyWaitlist(resourceKey, e); }; // Use a closure for the load event so that we can dereference the original script script.onload = script.onreadystatechange = function(e) { e = e || window.event; // For older IE // detect when it's done loading // ev.type == 'load' is for all browsers except IE6-9 // IE6-9 need to use onreadystatechange and look for // el.readyState in {loaded, complete} (yes, we need both) if (e.type == 'load' || readyStates[script.readyState]) { // Done, cleanup script.onload = script.onreadystatechange = script.onerror = ''; // increment and check if scripts are done _checkComplete(); // empty wait list _emptyWaitlist(resourceKey); // Dereference script script = null; } }; //set the src, start loading script.src = resourceUrl; //<head> really is the best head.insertBefore(script, insertBeforeEl); }); }\n\n    ### Response: For loading AppManifest.scripts Parts derived from curljs, headjs, requirejs, dojo.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void wait(final Object obj) { synchronized (obj) { try { obj.wait(); } catch (InterruptedException inex) { Thread.currentThread().interrupt(); } } }\n\n    ### Response:", "ground_truth": "Waits for a object for synchronization purposes.", "predict": "Stubborn Waiting! Wait for an Object to become available to do whatever needs to be done!"}, {"ID": 1476, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func GetRegisteredContacts() ([]Contact, error) { lc, err := client.GetLocalContacts() if err != nil { return nil, fmt.Errorf(\"could not get local contacts :%s\\n\", err) } tokens := make([]string, len(lc)) m := make(map[string]Contact) for i, c := range lc { t := telToToken(c.Tel) tokens[i] = t m[t] = c } contacts := make(map[string][]string) contacts[\"contacts\"] = tokens body, err := json.MarshalIndent(contacts, \"\", \" \") if err != nil { return nil, err } resp, err := transport.putJSON(directoryTokensPath, body) if err != nil { return nil, err } if resp.isError() { return nil, resp } dec := json.NewDecoder(resp.Body) var jc map[string][]jsonContact dec.Decode(&jc) lc = make([]Contact, len(jc[\"contacts\"])) for i, c := range jc[\"contacts\"] { lc[i] = m[c.Token] } return lc, nil }\n\n    ### Response: // GetRegisteredContacts returns the subset of the local contacts\n// that are also registered with the server.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ThreadFactory daemonThreadFactory(final String name, final int priority) { return new ThreadFactory() { private AtomicInteger count = new AtomicInteger(); @Override public Thread newThread(final Runnable r) { Thread thread = new Thread(r); thread.setName(name + '-' + count.incrementAndGet()); thread.setDaemon(true); thread.setPriority(priority); return thread; } }; }\n\n    ### Response:", "ground_truth": "Creates new daemon thread factory.", "predict": "// This class generates Daemon threads with custom names\n    // for the given priority\n    // It uses an internal counter to generate the names"}, {"ID": 1477, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void decryptBlock(byte[] data, int offset, byte[] dest, int destOffset) { // w128_t x; // x.q[0] = ((uint64_t *) blk)[0] ^ key->k[9].q[0]; // x.q[1] = ((uint64_t *) blk)[1] ^ key->k[9].q[1]; Kuz128 x = new Kuz128(); x.setQ(0, ByteStrings.bytesToLong(data, offset) ^ key.getK()[9].getQ(0)); x.setQ(1, ByteStrings.bytesToLong(data, offset + 8) ^ key.getK()[9].getQ(1)); for (int i = 8; i >= 0; i--) { // kuz_l_inv(&x); KuznechikMath.kuz_l_inv(x); for (int j = 0; j < 16; j++) { // x.b[j] = kuz_pi_inv[x.b[j]]; x.getB()[j] = KuznechikTables.kuz_pi_inv[x.getB()[j] & 0xFF]; } // x.q[0] ^= key->k[i].q[0]; x.setQ(0, x.getQ(0) ^ key.getK()[i].getQ(0)); // x.q[1] ^= key->k[i].q[1]; x.setQ(1, x.getQ(1) ^ key.getK()[i].getQ(1)); } // ((uint64_t *) blk)[0] = x.q[0]; // ((uint64_t *) blk)[1] = x.q[1]; ByteStrings.write(dest, destOffset, ByteStrings.longToBytes(x.getQ(0)), 0, 8); ByteStrings.write(dest, destOffset + 8, ByteStrings.longToBytes(x.getQ(1)), 0, 8); }\n\n    ### Response: Decrypting block with Kuznechik encryption\n\n@param data       source data for decryption\n@param offset     offset in data\n@param dest       destination array\n@param destOffset destination offset.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public T get() { if (!initialized) { synchronized (this) { if (!initialized) { final T t = supplier.get(); value = t; initialized = true; supplier = null; return t; } } } return value; }\n\n    ### Response:", "ground_truth": "Returns the value. Value will be computed on first call.", "predict": "The method returns an Optional which stores the result of the supplier lambda expression (t) and stores its reference in the \"value\" member so that subsequent calls to the method do not do unnecessary work by trying to retrieve the Optional for the current thread's reference for the supplier lambda expression (t) again."}, {"ID": 1478, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getScopeCounts() { if ( ! $this->areScopesEnabled()) { return []; } $info = $this->getModelInformation(); if ( ! $info->list->scopes || ! count($info->list->scopes)) { // @codeCoverageIgnoreStart return []; // @codeCoverageIgnoreEnd } $counts = []; $repository = $this->getModelRepository(); foreach (array_keys($info->list->scopes) as $key) { $this->applyScope($repository, $key); $query = $this->getModelRepository()->query(); $this->applyListParentToQuery($query); $counts[ $key ] = $query->count(); } return $counts; }\n\n    ### Response: Returns total amount of matches for each available scope.\n\n@return int[]    assoc, keyed by scope key.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visitParameter(final String name, final int access) { if (api < Opcodes.ASM5) { throw new UnsupportedOperationException(REQUIRES_ASM5); } if (mv != null) { mv.visitParameter(name, access); } }\n\n    ### Response:", "ground_truth": "Visits a parameter of this method.\n\n@param name parameter name or null if none is provided.\n@param access the parameter's access flags, only {@code ACC_FINAL}, {@code ACC_SYNTHETIC}\nor/and {@code ACC_MANDATED} are allowed (see {@link Opcodes}).", "predict": "Visitor method to visit parameter of given access level, of given name, of given method."}, {"ID": 1479, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static FieldMapping getFieldMapping(IDataType type) { switch (type.getTypeCategory()) { case CLASS: case TRAIT: return ((HierarchicalType)type).fieldMapping(); case STRUCT: return ((StructType)type).fieldMapping(); default: throw new IllegalArgumentException(\"Type \" + type + \" doesn't have any fields!\"); } }\n\n    ### Response: Get the field mappings for the specified data type.\nField mappings are only relevant for CLASS, TRAIT, and STRUCT types.\n\n@param type\n@return {@link FieldMapping} for the specified type\n@throws IllegalArgumentException if type is not a CLASS, TRAIT, or STRUCT type..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) { if (mv != null) { return mv.visitAnnotation(descriptor, visible); } return null; }\n\n    ### Response:", "ground_truth": "Visits an annotation of this method.\n\n@param descriptor the class descriptor of the annotation class.\n@param visible {@literal true} if the annotation is visible at runtime.\n@return a visitor to visit the annotation values, or {@literal null} if this visitor is not\ninterested in visiting this annotation.", "predict": "Visitor for visiting annotations, visible indicates if annotation is visible to the visitor"}, {"ID": 1480, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (e *Expfmt) Encode(mfs []*dto.MetricFamily) ([]byte, error) { return EncodeExpfmt(mfs, e.Format) }\n\n    ### Response: // Encode encodes metrics into prometheus exposition format bytes..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public AnnotationVisitor visitTypeAnnotation( final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) { if (api < Opcodes.ASM5) { throw new UnsupportedOperationException(REQUIRES_ASM5); } if (mv != null) { return mv.visitTypeAnnotation(typeRef, typePath, descriptor, visible); } return null; }\n\n    ### Response:", "ground_truth": "Visits an annotation on a type in the method signature.\n\n@param typeRef a reference to the annotated type. The sort of this type reference must be\n{@link TypeReference#METHOD_TYPE_PARAMETER}, {@link\nTypeReference#METHOD_TYPE_PARAMETER_BOUND}, {@link TypeReference#METHOD_RETURN}, {@link\nTypeReference#METHOD_RECEIVER}, {@link TypeReference#METHOD_FORMAL_PARAMETER} or {@link\nTypeReference#THROWS}. See {@link TypeReference}.\n@param typePath the path to the annotated type argument, wildcard bound, array element type, or\nstatic inner type within 'typeRef'. May be {@literal null} if the annotation targets\n'typeRef' as a whole.\n@param descriptor the class descriptor of the annotation class.\n@param visible {@literal true} if the annotation is visible at runtime.\n@return a visitor to visit the annotation values, or {@literal null} if this visitor is not\ninterested in visiting this annotation.", "predict": "The above method generates an annotation for the given type, i.e., an element of the TypeAnnotations array of the visited method, given an int which represents the type reference, a TypePath object which contains the information about the type arguments, and the given string which represents the annotation descriptor. It also accepts a boolean parameter which indicates if the annotation should be visible or not in the generated code.."}, {"ID": 1481, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def all(self): \"\"\" Return all destinations for this rule. Elements returned are of the object type for the given element for further introspection. Search the fields in rule:: for sources in rule.sources.all(): print('My source: %s' % sources) :return: elements by resolved object type :rtype: list(Element) \"\"\" if not self.is_any and not self.is_none: return [Element.from_href(href) for href in self.get(self.typeof)] return []\n\n    ### Response: Return all destinations for this rule. Elements returned\n        are of the object type for the given element for further\n        introspection.\n\n        Search the fields in rule::\n\n            for sources in rule.sources.all():\n                print('My source: %s' % sources)\n\n        :return: elements by resolved object type\n        :rtype: list(Element).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public AnnotationVisitor visitParameterAnnotation( final int parameter, final String descriptor, final boolean visible) { if (mv != null) { return mv.visitParameterAnnotation(parameter, descriptor, visible); } return null; }\n\n    ### Response:", "ground_truth": "Visits an annotation of a parameter this method.\n\n@param parameter the parameter index. This index must be strictly smaller than the number of\nparameters in the method descriptor, and strictly smaller than the parameter count\nspecified in {@link #visitAnnotableParameterCount}. Important note: a parameter index i\nis not required to correspond to the i'th parameter descriptor in the method\ndescriptor", "predict": "Visitor method to visit parameter annotation of the method signature\n    \"\"\"\n    If parameter annotation is given, this method\n    generates appropriate verification annotations\n    for the given parameter and\n    sets appropriate visibility for the annotation\n    \"\"\""}, {"ID": 1482, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function compare($known, $user) { if (strlen($known) !== strlen($user)) { return false; } $result = 0; $knownLength = strlen($known); for ($i = 0; $i < $knownLength; $i++) { $result |= ord($known[$i]) ^ ord($user[$i]); } return $result == 0; }\n\n    ### Response: Compares two strings securely.\n\n@link http://blog.astrumfutura.com/2010/10/nanosecond-scale-remote-timing-attacks-on-php-applications-time-to-take-them-seriously/ Implementation source\n\n@param string $known\n@param string $user\n\n@return boolean.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visitFieldInsn( final int opcode, final String owner, final String name, final String descriptor) { if (mv != null) { mv.visitFieldInsn(opcode, owner, name, descriptor); } }\n\n    ### Response:", "ground_truth": "Visits a field instruction. A field instruction is an instruction that loads or stores the\nvalue of a field of an object.\n\n@param opcode the opcode of the type instruction to be visited. This opcode is either\nGETSTATIC, PUTSTATIC, GETFIELD or PUTFIELD.\n@param owner the internal name of the field's owner class (see {@link Type#getInternalName()}).\n@param name the field's name.\n@param descriptor the field's descriptor (see {@link Type}).", "predict": "Visitor method to implement FieldInstruction of the JVM"}, {"ID": 1483, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_queryset(self, request): \"\"\"Constructs a query set. :param request: :return: \"\"\" self._hierarchy.hook_get_queryset(self, request) return super(HierarchicalChangeList, self).get_queryset(request)\n\n    ### Response: Constructs a query set.\n\n        :param request:\n        :return:.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visitMethodInsn( final int opcode, final String owner, final String name, final String descriptor, final boolean isInterface) { if (api < Opcodes.ASM5) { if (isInterface != (opcode == Opcodes.INVOKEINTERFACE)) { throw new IllegalArgumentException(\"INVOKESPECIAL/STATIC on interfaces requires ASM5\"); } visitMethodInsn(opcode, owner, name, descriptor); return; } if (mv != null) { mv.visitMethodInsn(opcode, owner, name, descriptor, isInterface); } }\n\n    ### Response:", "ground_truth": "Visits a method instruction. A method instruction is an instruction that invokes a method.\n\n@param opcode the opcode of the type instruction to be visited. This opcode is either\nINVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or INVOKEINTERFACE.\n@param owner the internal name of the method's owner class (see {@link\nType#getInternalName()}).\n@param name the method's name.\n@param descriptor the method's descriptor (see {@link Type}).\n@param isInterface if the method's owner class is an interface.", "predict": "\n    The visitedMethod() method of the visitor class generates the given instruction for the given method invocation, where api and mv represent intance variables of the visitor class, owning and name describe the method name and its parameter, and descriptor and isInterface describe its parameter signature and its behavior in the context of interfaces, respectively. Finally, visitMethodInsn() represents the instruction to actually generate the given instruction for the given method invocation."}, {"ID": 1484, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function make(string $namespace, array $arguments = []) { $class = $this->getClassNameFromNamespace($namespace); /* * If instance of the class already created and stored into * stack then simply return from here */ if ($this->has($class)) { return $this->get($class); } $reflectionClass = $this->reflection->setClass($namespace)->getReflectionClass(); $this->throwExceptionIfNotInstantiable($namespace, $reflectionClass); $constructor = null; $constructorArgsCount = 0; list($constructor, $constructorArgsCount) = $this->getConstructorArgs($reflectionClass, $constructorArgsCount); // if class does not have explicitly defined constructor or constructor // does not have parameters get the new instance if (!isset($constructor) && is_null($constructor) || $constructorArgsCount < 1) { return $this[$class] = $reflectionClass->newInstance(); } $dependencies = $constructor->getParameters(); $constructorArgs = $this->createMethodArgument($dependencies, $arguments); return $this[$class] = $reflectionClass->newInstanceArgs($constructorArgs); }\n\n    ### Response: Resolve all dependencies of your class and return instance of\nyour class.\n\n@param $class\n@throws \\Cygnite\\Container\\Exceptions\\ContainerException\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visitInvokeDynamicInsn( final String name, final String descriptor, final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) { if (api < Opcodes.ASM5) { throw new UnsupportedOperationException(REQUIRES_ASM5); } if (mv != null) { mv.visitInvokeDynamicInsn(name, descriptor, bootstrapMethodHandle, bootstrapMethodArguments); } }\n\n    ### Response:", "ground_truth": "Visits an invokedynamic instruction.\n\n@param name the method's name.\n@param descriptor the method's descriptor (see {@link Type}).\n@param bootstrapMethodHandle the bootstrap method.\n@param bootstrapMethodArguments the bootstrap method constant arguments. Each argument must be\nan {@link Integer}, {@link Float}, {@link Long}, {@link Double}, {@link String}, {@link\nType}, {@link Handle} or {@link ConstantDynamic} value. This method is allowed to modify\nthe content of the array so a caller should expect that this array may change.", "predict": "Invoke the given method from the given descriptor string and arguments on the given bootstrap method handle."}, {"ID": 1485, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static FMDate fromString(String value) { return StringUtils.isEmpty(value) ? null : new FMDate(value); }\n\n    ### Response: Converts a string value to a FM date.\n\n@param value The string value to convert.\n@return A FM date..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visitJumpInsn(final int opcode, final Label label) { if (mv != null) { mv.visitJumpInsn(opcode, label); } }\n\n    ### Response:", "ground_truth": "Visits a jump instruction. A jump instruction is an instruction that may jump to another\ninstruction.\n\n@param opcode the opcode of the type instruction to be visited. This opcode is either IFEQ,\nIFNE, IFLT, IFGE, IFGT, IFLE, IF_ICMPEQ, IF_ICMPNE, IF_ICMPLT, IF_ICMPGE, IF_ICMPGT,\nIF_ICMPLE, IF_ACMPEQ, IF_ACMPNE, GOTO, JSR, IFNULL or IFNONNULL.\n@param label the operand of the instruction to be visited. This operand is a label that\ndesignates the instruction to which the jump instruction may jump.", "predict": "Visits an instruction consisting of an opcode and a target Label. If an instruction pointer mv is provided, the instruction will be added to it; otherwise, the instruction will be added to the method stack frame."}, {"ID": 1486, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void probe(ImmutableMember member) { LOGGER.trace(\"{} - Probing {}\", localMember.id(), member); bootstrapService.getMessagingService().sendAndReceive( member.address(), MEMBERSHIP_PROBE, SERIALIZER.encode(Pair.of(localMember.copy(), member)), false, config.getProbeTimeout()) .whenCompleteAsync((response, error) -> { if (error == null) { updateState(SERIALIZER.decode(response)); } else { LOGGER.debug(\"{} - Failed to probe {}\", this.localMember.id(), member, error); // Verify that the local member term has not changed and request probes from peers. SwimMember swimMember = members.get(member.id()); if (swimMember != null && swimMember.getIncarnationNumber() == member.incarnationNumber()) { requestProbes(swimMember.copy()); } } }, swimScheduler); }\n\n    ### Response: Probes the given member.\n\n@param member the member to probe.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visitMultiANewArrayInsn(final String descriptor, final int numDimensions) { if (mv != null) { mv.visitMultiANewArrayInsn(descriptor, numDimensions); } }\n\n    ### Response:", "ground_truth": "Visits a MULTIANEWARRAY instruction.\n\n@param descriptor an array type descriptor (see {@link Type}).\n@param numDimensions the number of dimensions of the array to allocate.", "predict": "Creates a new array with the given descriptor and number of dimensions of given size."}, {"ID": 1487, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public GetConnectorDefinitionResult getConnectorDefinition(GetConnectorDefinitionRequest request) { request = beforeClientExecution(request); return executeGetConnectorDefinition(request); }\n\n    ### Response: Retrieves information about a connector definition.\n\n@param getConnectorDefinitionRequest\n@return Result of the GetConnectorDefinition operation returned by the service.\n@throws BadRequestException\ninvalid request\n@sample AWSGreengrass.GetConnectorDefinition\n@see AWS API Documentation.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visitTryCatchBlock( final Label start, final Label end, final Label handler, final String type) { if (mv != null) { mv.visitTryCatchBlock(start, end, handler, type); } }\n\n    ### Response:", "ground_truth": "Visits a try catch block.\n\n@param start the beginning of the exception handler's scope (inclusive).\n@param end the end of the exception handler's scope (exclusive).\n@param handler the beginning of the exception handler's code.\n@param type the internal name of the type of exceptions handled by the handler, or {@literal\nnull} to catch any exceptions (for \"finally\" blocks).\n@throws IllegalArgumentException if one of the labels has already been visited by this visitor\n(by the {@link #visitLabel} method).", "predict": "Visitor method to handle try catch blocks of the program"}, {"ID": 1488, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_max_input_output_length(supported_max_seq_len_source: Optional[int], supported_max_seq_len_target: Optional[int], training_max_seq_len_source: Optional[int], length_ratio_mean: float, length_ratio_std: float, num_stds: int, forced_max_input_len: Optional[int] = None, forced_max_output_len: Optional[int] = None) -> Tuple[int, Callable]: \"\"\" Returns a function to compute maximum output length given a fixed number of standard deviations as a safety margin, and the current input length. It takes into account optional maximum source and target lengths. :param supported_max_seq_len_source: The maximum source length supported by the models. :param supported_max_seq_len_target: The maximum target length supported by the models. :param training_max_seq_len_source: The maximum source length observed during training. :param length_ratio_mean: The mean of the length ratio that was calculated on the raw sequences with special symbols such as EOS or BOS. :param length_ratio_std: The standard deviation of the length ratio. :param num_stds: The number of standard deviations the target length may exceed the mean target length (as long as the supported maximum length allows for this). :param forced_max_input_len: An optional overwrite of the maximum input length. :param forced_max_output_len: An optional overwrite of the maximum out length. :return: The maximum input length and a function to get the output length given the input length. \"\"\" space_for_bos = 1 space_for_eos = 1 if num_stds < 0: factor = C.TARGET_MAX_LENGTH_FACTOR # type: float else: factor = length_ratio_mean + (length_ratio_std * num_stds) if forced_max_input_len is None: # Make sure that if there is a hard constraint on the maximum source or target length we never exceed this # constraint. This is for example the case for learned positional embeddings, which are only defined for the # maximum source and target sequence length observed during training. if supported_max_seq_len_source is not None and supported_max_seq_len_target is None: max_input_len = supported_max_seq_len_source elif supported_max_seq_len_source is None and supported_max_seq_len_target is not None: max_output_len = supported_max_seq_len_target - space_for_bos - space_for_eos if np.ceil(factor * training_max_seq_len_source) > max_output_len: max_input_len = int(np.floor(max_output_len / factor)) else: max_input_len = training_max_seq_len_source elif supported_max_seq_len_source is not None or supported_max_seq_len_target is not None: max_output_len = supported_max_seq_len_target - space_for_bos - space_for_eos if np.ceil(factor * supported_max_seq_len_source) > max_output_len: max_input_len = int(np.floor(max_output_len / factor)) else: max_input_len = supported_max_seq_len_source else: # Any source/target length is supported and max_input_len was not manually set, therefore we use the # maximum length from training. max_input_len = training_max_seq_len_source else: max_input_len = forced_max_input_len def get_max_output_length(input_length: int): \"\"\" Returns the maximum output length for inference given the input length. Explicitly includes space for BOS and EOS sentence symbols in the target sequence, because we assume that the mean length ratio computed on the training data do not include these special symbols. (see data_io.analyze_sequence_lengths) \"\"\" if forced_max_output_len is not None: return forced_max_output_len else: return int(np.ceil(factor * input_length)) + space_for_bos + space_for_eos return max_input_len, get_max_output_length\n\n    ### Response: Returns a function to compute maximum output length given a fixed number of standard deviations as a\n    safety margin, and the current input length. It takes into account optional maximum source and target lengths.\n\n    :param supported_max_seq_len_source: The maximum source length supported by the models.\n    :param supported_max_seq_len_target: The maximum target length supported by the models.\n    :param training_max_seq_len_source: The maximum source length observed during training.\n    :param length_ratio_mean: The mean of the length ratio that was calculated on the raw sequences with special\n           symbols such as EOS or BOS.\n    :param length_ratio_std: The standard deviation of the length ratio.\n    :param num_stds: The number of standard deviations the target length may exceed the mean target length (as long as\n           the supported maximum length allows for this).\n    :param forced_max_input_len: An optional overwrite of the maximum input length.\n    :param forced_max_output_len: An optional overwrite of the maximum out length.\n    :return: The maximum input length and a function to get the output length given the input length..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public AnnotationVisitor visitLocalVariableAnnotation( final int typeRef, final TypePath typePath, final Label[] start, final Label[] end, final int[] index, final String descriptor, final boolean visible) { if (api < Opcodes.ASM5) { throw new UnsupportedOperationException(REQUIRES_ASM5); } if (mv != null) { return mv.visitLocalVariableAnnotation( typeRef, typePath, start, end, index, descriptor, visible); } return null; }\n\n    ### Response:", "ground_truth": "Visits an annotation on a local variable type.\n\n@param typeRef a reference to the annotated type. The sort of this type reference must be\n{@link TypeReference#LOCAL_VARIABLE} or {@link TypeReference#RESOURCE_VARIABLE}. See {@link\nTypeReference}.\n@param typePath the path to the annotated type argument, wildcard bound, array element type, or\nstatic inner type within 'typeRef'. May be {@literal null} if the annotation targets\n'typeRef' as a whole.\n@param start the fist instructions corresponding to the continuous ranges that make the scope\nof this local variable (inclusive).\n@param end the last instructions corresponding to the continuous ranges that make the scope of\nthis local variable (exclusive). This array must have the same size as the 'start' array.\n@param index the local variable's index in each range. This array must have the same size as\nthe 'start' array.\n@param descriptor the class descriptor of the annotation class.\n@param visible {@literal true} if the annotation is visible at runtime.\n@return a visitor to visit the annotation values, or {@literal null} if this visitor is not\ninterested in visiting this annotation.", "predict": "\n    *This method provides access to the Local Variable Annotation API, available only in ASM 5.*\n    *This method requires ASM 5, since ASM 6 uses the method RenamedLocalVariables(LocalVariableRenamingPolicy),\n    which makes the information provided by this method obsolete.*"}, {"ID": 1489, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def add(self, *args, **kwargs): \"\"\"Add a new record to the section\"\"\" if self.start and self.start.state == 'done' and kwargs.get('log_action') != 'done': raise ProgressLoggingError(\"Can't add -- process section is done\") self.augment_args(args, kwargs) kwargs['log_action'] = kwargs.get('log_action', 'add') rec = Process(**kwargs) self._session.add(rec) self.rec = rec if self._logger: self._logger.info(self.rec.log_str) self._session.commit() self._ai_rec_id = None return self.rec.id\n\n    ### Response: Add a new record to the section.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void convertToWriter(final Writer writer, final Properties properties, final Map<String, Properties> profiles) throws IOException { final BufferedWriter bw = getBufferedWriter(writer); writeBaseAndProfileProperties(bw, properties, profiles); writeProfilePropertiesThatAreNotInTheBase(bw, properties, profiles); bw.flush(); }\n\n    ### Response:", "ground_truth": "Convert Java Properties to Jodd Props format\n\n@param writer     Writer to write Props formatted file content to\n@param properties Properties to convert to Props format\n@param profiles   Properties per profile to convert and add to the Props format\n@throws IOException On any I/O error when writing to the writer", "predict": "Writes profiles that are not in the base and profiles of the given Properties to the givenWriter."}, {"ID": 1490, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _validate_response(url, response): \"\"\"Validates that the response from Google was successful.\"\"\" if response['status'] not in [GooglePlaces.RESPONSE_STATUS_OK, GooglePlaces.RESPONSE_STATUS_ZERO_RESULTS]: error_detail = ('Request to URL %s failed with response code: %s' % (url, response['status'])) raise GooglePlacesError(error_detail)\n\n    ### Response: Validates that the response from Google was successful..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void processStream() throws IOException { FastByteArrayOutputStream out = new FastByteArrayOutputStream(); size = 0; if (maxFileSize == -1) { size += input.copyAll(out); } else { size += input.copyMax(out, maxFileSize + 1); // one more byte to detect larger files if (size > maxFileSize) { fileTooBig = true; valid = false; input.skipToBoundary(); return; } } data = out.toByteArray(); size = data.length; valid = true; }\n\n    ### Response:", "ground_truth": "Reads data from input stream into byte array and stores file size.", "predict": "Override public void processStream() throws IOException to implement Fast Byte Array Output Stream for faster file download..."}, {"ID": 1491, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static MethodDescriptor getMethodDescriptor(JavaClass jclass, Method method) { return DescriptorFactory.instance().getMethodDescriptor(jclass.getClassName().replace('.', '/'), method.getName(), method.getSignature(), method.isStatic()); }\n\n    ### Response: Construct a MethodDescriptor from JavaClass and method.\n\n@param jclass\na JavaClass\n@param method\na Method belonging to the JavaClass\n@return a MethodDescriptor identifying the method.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public T next() { if (hasNext == null) { hasNext = Boolean.valueOf(moveToNext()); } if (hasNext == false) { throw new NoSuchElementException(); } if (!entityAwareMode) { hasNext = null; return newElement; } count++; T result = previousElement; previousElement = newElement; hasNext = null; return result; }\n\n    ### Response:", "ground_truth": "Returns next mapped object.", "predict": "Override the default behavior of the iterator to check for the existence of the next element during iteration by overriding the next() method to check for the existence of the next element during iteration by overriding the next() method to check for the existence of the next element during iteration and to translate the result to either true or false and to translate the result to either true or false and to translate the result to either Element or Element Awareness Mode and to translate the result to either Element or Element Awareness Mode"}, {"ID": 1492, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def tempdir(): \"\"\"Creates a temporary directory\"\"\" directory_path = tempfile.mkdtemp() def clean_up(): # pylint: disable=missing-docstring shutil.rmtree(directory_path, onerror=on_error) with cd(directory_path, clean_up): yield directory_path\n\n    ### Response: Creates a temporary directory.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean moveToNext() { if (last) { // last has been set to true, so no more rows to iterate - close everything if (closeOnEnd) { query.close(); } else { query.closeResultSet(resultSetMapper.getResultSet()); } return false; } while (true) { if (!resultSetMapper.next()) { // no more rows, no more parsing, previousElement is the last one to iterate last = true; return entityAwareMode; } // parse row Object[] objects = resultSetMapper.parseObjects(types); Object row = query.resolveRowResults(objects); newElement = (T) row; if (entityAwareMode) { if (count == 0 && previousElement == null) { previousElement = newElement; continue; } if (previousElement != null && newElement != null) { boolean equals; if (newElement.getClass().isArray()) { equals = Arrays.equals((Object[]) previousElement, (Object[]) newElement); } else { equals = previousElement.equals(newElement); } if (equals) { continue; } } } break; } return true; }\n\n    ### Response:", "ground_truth": "Moves to next element.", "predict": "Creates a temporary directory and moves onto the next iteration of the loop. It may close the previous Result Set and Result SetMapper and open the next Result Set and Result SetMapper for parsing the next iteration of the loop. It may also close the Result Sets and Result SetMappers of the loop and may do other housekeeping tasks to prepare for the next iteration of the loop. It may also determine if there is no more items to iterate and may determine if there is a previous and next Element for the loop to compare and may determine if the objects to compare were retrieved from the same Result Sets and Result SetMappers of the loop and may determine if the objects were retrieved from the same Result Sets and Result SetMappers of the loop and may determine if the objects were retrieved from the same Result Sets and Result SetMapppers of the loop and may determine if the objects were retrieved from the same Result Sets and Result SetMapppers of the loop and may determine if the objects were retrieved from the same Result Sets and Result SetMapppers"}, {"ID": 1493, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EvacuateAction evacuate(String serverId, String host) { return evacuate(serverId, host, null, null); }\n\n    ### Response: Evacuates the server to a new host. The caller can supply the host name or id.\n\n@param serverId\nThe server to be evacuated\n@param host\nThe host name or ID of the target host (where the server is to be moved to).\n@return The action to be performed\n@see #evacuate(String, String, String, Boolean).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"unchecked\"}) public static <T> T[] join(T[]... arrays) { Class<T> componentType = (Class<T>) arrays.getClass().getComponentType().getComponentType(); return join(componentType, arrays); }\n\n    ### Response:", "ground_truth": "Joins arrays. Component type is resolved from the array argument.", "predict": "Combines multiple arrays of objects of the same type into a single array of objects of the same type."}, {"ID": 1494, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getMimeType() { if ($this->isUploaded() && $this->mime_type === null) { $temp_file_name = $this->getTempFileName(); if (file_exists($temp_file_name)) { if (extension_loaded('fileinfo')) { // Use the fileinfo extension if available. $finfo = $this->getFinfo(); $this->mime_type = explode( ';', $finfo->file($temp_file_name) )[0]; } elseif (function_exists('mime_content_type')) { // Fall back to mime_content_type() if available. $this->mime_type = mime_content_type($temp_file_name); } // No mime-detection functions, or mime-detection function // failed to detect the type. Default to // 'application/octet-stream'. Relying on HTTP headers could // be a security problem so we never fall back to that option. if ($this->mime_type == '') { $this->mime_type = 'application/octet-stream'; } } else { $this->mime_type = $this->file['type']; } } return $this->mime_type; }\n\n    ### Response: Gets the mime type of the uploaded file\n\n@return mixed the mime type of the uploaded file or null if no file was\nuploaded..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"unchecked\"}) public static <T> T[] join(Class<T> componentType, T[][] arrays) { if (arrays.length == 1) { return arrays[0]; } int length = 0; for (T[] array : arrays) { length += array.length; } T[] result = (T[]) Array.newInstance(componentType, length); length = 0; for (T[] array : arrays) { System.arraycopy(array, 0, result, length, array.length); length += array.length; } return result; }\n\n    ### Response:", "ground_truth": "Joins arrays using provided component type.", "predict": "Combination of arrays of arrays"}, {"ID": 1495, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function move_callback($from, $to) { if (static::$with_ftp) { return static::$with_ftp->upload($from, $to, \\Config::get('upload.ftp_mode'), \\Config::get('upload.ftp_permissions')); } return false; }\n\n    ### Response: Move callback function, custom method to move an uploaded file. In Fuel 1.x\nthis method is used for FTP uploads only\n\n@param  string  $file  The FQFN of the file to move\n@param  string  $file  The FQFN of the file destination\n\n@return  bool  Result of the move operation.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> T[] resize(T[] buffer, int newSize) { Class<T> componentType = (Class<T>) buffer.getClass().getComponentType(); T[] temp = (T[]) Array.newInstance(componentType, newSize); System.arraycopy(buffer, 0, temp, 0, buffer.length >= newSize ? newSize : buffer.length); return temp; }\n\n    ### Response:", "ground_truth": "Resizes an array.", "predict": "Function to resize an array to a given size"}, {"ID": 1496, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (w *tarWriter) Write(fileName, name string) error { fileInfo, err := os.Lstat(fileName) if err != nil { return err } link := \"\" if fileInfo.Mode()&os.ModeSymlink != 0 { if link, err = os.Readlink(fileName); err != nil { return err } } header, err := tar.FileInfoHeader(fileInfo, link) if err != nil { return err } header.Name = name if err := w.writer.WriteHeader(header); err != nil { return err } if header.Typeflag != tar.TypeReg && header.Typeflag != tar.TypeRegA { return nil } file, err := os.Open(fileName) if err != nil { return err } defer file.Close() _, err = io.Copy(w.writer, file) return err }\n\n    ### Response: // Write writes a file from disk into a tar file..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> T[] append(T[] buffer, T newElement) { T[] t = resize(buffer, buffer.length + 1); t[buffer.length] = newElement; return t; }\n\n    ### Response:", "ground_truth": "Appends an element to array.", "predict": "// Append appends an element to the end of an existing array"}, {"ID": 1497, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static function addGuest($ip, $url) { $activity = static::find()->where(['ip' => $ip, 'user_id' => null])->limit(1)->one(); if (empty($activity)) { $activity = new static; $activity->ip = $ip; } $activity->url = $url; return $activity->save(); }\n\n    ### Response: Adds guest activity.\n@param string $ip\n@param string $url\n@return bool\n@since 0.6.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"unchecked\"}) public static <T> T[] remove(T[] buffer, int offset, int length, Class<T> componentType) { int len2 = buffer.length - length; T[] temp = (T[]) Array.newInstance(componentType, len2); System.arraycopy(buffer, 0, temp, 0, offset); System.arraycopy(buffer, offset + length, temp, offset, len2 - offset); return temp; }\n\n    ### Response:", "ground_truth": "Removes sub-array.", "predict": "Remove from given range given length of given componentType objects from given array."}, {"ID": 1498, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function buildRandomIntegers($count, $max = null, $excludes = [], $unique = true) { $max = $max ?: $count; // If it should not be unique do the simple task if (!$unique) { $numbers = []; for ($i = 0; $i < $count; ++$i) { $numbers[] = rand(0, $max - 1); } return $numbers; } if ($count > $max && $unique) { throw new InvalidArgumentException(\"An array with $count unique values with more items than max ($max) is impossible\"); } // Generate numbers until max $numbers = range(0, $max - 1); // Remove all excludes from the numbers foreach ($excludes as $exclude) { if (isset($numbers[$exclude])) { unset($numbers[$exclude]); } } // If the numbers are less than count, add the excludes back until count $i = 0; while (count($numbers) < $count) { $numbers[] = $excludes[$i]; ++$i; } shuffle($numbers); $slice = []; for ($i = 0, $n = 0; $i < $count; ++$i) { $slice[] = array_pop($numbers); } return $slice; }\n\n    ### Response: Create some random integers.\n\n@param int  $count\n@param int  $max    (optional)\n@param bool $unique (optional)\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int indexOf(char[] array, char value) { for (int i = 0; i < array.length; i++) { if (array[i] == value) { return i; } } return -1; }\n\n    ### Response:", "ground_truth": "Finds the first occurrence of an element in an array.", "predict": "Find the first index of the given value in an array of characters\n\npublic static int indexOf(char[] array, char value)\n{\n for (int i = 0; i < array.length; i++)\n {\n if (array[i] == value)\n {\n return i;\n }\n }\n return -1;\n}"}, {"ID": 1499, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String shapeToString(IntBuffer buffer) { val shapeBuff = shapeOf(buffer); int rank = Shape.rank(buffer); val strideBuff = stride(buffer); StringBuilder sb = new StringBuilder(); sb.append(\"Rank: \" + rank + \",\"); sb.append(\"Offset: \" + Shape.offset(buffer) + \"\\n\"); sb.append(\" Order: \" + Shape.order(buffer)); sb.append(\" Shape: [\"); for (int i = 0; i < rank; i++) { sb.append(shapeBuff.get(i)); if (i < rank - 1) sb.append(\",\"); } sb.append(\"], \"); sb.append(\" stride: [\"); for (int i = 0; i < rank; i++) { sb.append(strideBuff.get(i)); if (i < rank - 1) sb.append(\",\"); } sb.append(\"]\"); return sb.toString(); }\n\n    ### Response: Prints the shape\nfor this shape information\n@param buffer the shape information to print\n@return the shape information to string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int indexOf(Object[] array, Object value) { for (int i = 0; i < array.length; i++) { if (array[i].equals(value)) { return i; } } return -1; }\n\n    ### Response:", "ground_truth": "Finds the first occurrence in an array.", "predict": "Find the first index of the given value in the given array\nfor the given value and returns the corresponding index or -1 if the given value is not found in the given array"}, {"ID": 1500, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c CloudinaryService) Resources() ([]*gocloud.Resource, error) { if c.Service != nil { return nil, ErrNotFoundCloudinary } return c.Service.Resources(gocloud.ImageType) }\n\n    ### Response: // Resources returns cloudinary uploaded resources.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int indexOf(byte[] array, byte[] sub, int startIndex) { return indexOf(array, sub, startIndex, array.length); }\n\n    ### Response:", "ground_truth": "Finds the first occurrence in an array from specified given position.", "predict": "// Returns index of first occurrence of given substring in the given range (exclusive), or -1 if string is not found."}, {"ID": 1501, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Conn) recvSynAck() (err error) { mu.Lock() defer mu.Unlock() c.waitAck(1) if c.err != nil { err = c.err } c.synAcked = true c.updateCanWrite() return err }\n\n    ### Response: // Waits for sent SYN to be ACKed. Returns any errors..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public LagartoDOMBuilder enableXhtmlMode() { config.ignoreWhitespacesBetweenTags = false; // collect all whitespaces config.setCaseSensitive(true); // XHTML is case sensitive config.setEnableRawTextModes(false); // all tags are parsed in the same way config.enabledVoidTags = true; // list of void tags config.selfCloseVoidTags = true; // self close void tags config.impliedEndTags = false; // no implied tag ends config.setEnableConditionalComments(false); // don't enable IE conditional comments config.setParseXmlTags(false); // enable XML mode in parsing return this; }\n\n    ### Response:", "ground_truth": "Enables XHTML mode.", "predict": "// Enables XHTML parsing modes in LagartoDOMBuilder // config.ignoreWhitespaceBetweenTags and // config.caseSensitive // enableSXS and // impliedEndTags modes // of parsing"}, {"ID": 1502, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int[] makeLut() { int numKnots = x.length; float[] nx = new float[numKnots + 2]; float[] ny = new float[numKnots + 2]; System.arraycopy(x, 0, nx, 1, numKnots); System.arraycopy(y, 0, ny, 1, numKnots); nx[0] = nx[1]; ny[0] = ny[1]; nx[numKnots + 1] = nx[numKnots]; ny[numKnots + 1] = ny[numKnots]; int[] table = new int[256]; for (int i = 0; i < 1024; i++) { float f = i / 1024.0f; int x = (int) (255 * Curve.Spline(f, nx.length, nx) + 0.5f); int y = (int) (255 * Curve.Spline(f, nx.length, ny) + 0.5f); x = x > 255 ? 255 : x; x = x < 0 ? 0 : x; y = y > 255 ? 255 : y; y = y < 0 ? 0 : y; table[x] = y; } return table; }\n\n    ### Response: Create LUT.\n\n@return LUT..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Document parse(final char[] content) { LagartoParser lagartoParser = new LagartoParser(content); return doParse(lagartoParser); }\n\n    ### Response:", "ground_truth": "Creates DOM tree from provided content.", "predict": "Parses document with Lagarto Parser."}, {"ID": 1503, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def sendAppliedToOwner(self, context={}): \"\"\" Sent to project owner when user applies to a project \"\"\" super(ApplyMail, self).__init__(self.apply.project.owner.email, self.async, self.apply.project.owner.locale) return self.sendEmail('volunteerApplied-ToOwner', 'New volunteer', context)\n\n    ### Response: Sent to project owner when user applies to a project.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Document doParse(final LagartoParser lagartoParser) { lagartoParser.setConfig(config); LagartoDOMBuilderTagVisitor domBuilderTagVisitor = new LagartoDOMBuilderTagVisitor(this); lagartoParser.parse(domBuilderTagVisitor); return domBuilderTagVisitor.getDocument(); }\n\n    ### Response:", "ground_truth": "Parses the content using provided lagarto parser.", "predict": "Parses document with Lagarto Parser and sets config for parsing and produces document with document builder."}, {"ID": 1504, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected ConversionDirectionType getCatalysisDirection(Control cont) { if (cont instanceof Catalysis) { CatalysisDirectionType catDir = ((Catalysis) cont).getCatalysisDirection(); if (catDir == CatalysisDirectionType.LEFT_TO_RIGHT) { return ConversionDirectionType.LEFT_TO_RIGHT; } else if (catDir == CatalysisDirectionType.RIGHT_TO_LEFT) { return ConversionDirectionType.RIGHT_TO_LEFT; } } return null; }\n\n    ### Response: Gets the direction of the Control, if exists.\n@param cont Control to get its direction\n@return the direction of the Control.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void endCurrentBasicBlockWithNoSuccessor() { if (compute == COMPUTE_ALL_FRAMES) { Label nextBasicBlock = new Label(); nextBasicBlock.frame = new Frame(nextBasicBlock); nextBasicBlock.resolve(code.data, code.length); lastBasicBlock.nextBasicBlock = nextBasicBlock; lastBasicBlock = nextBasicBlock; currentBasicBlock = null; } else if (compute == COMPUTE_MAX_STACK_AND_LOCAL) { currentBasicBlock.outputStackMax = (short) maxRelativeStackSize; currentBasicBlock = null; } }\n\n    ### Response:", "ground_truth": "Ends the current basic block. This method must be used in the case where the current basic\nblock does not have any successor.\n\nWARNING: this method must be called after the currently visited instruction has been put in\n{@link #code} (if frames are computed, this method inserts a new Label to start a new basic\nblock after the current instruction).", "predict": "Finishes the current basic block of the program with no successors."}, {"ID": 1505, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _build(self): \"\"\" Build ggplot for rendering. Notes ----- This method modifies the ggplot object. The caller is responsible for making a copy and using that to make the method call. \"\"\" if not self.layers: self += geom_blank() self.layout = Layout() layers = self.layers scales = self.scales layout = self.layout # Give each layer a copy of the data that it will need layers.generate_data(self.data) # Initialise panels, add extra data for margins & missing # facetting variables, and add on a PANEL variable to data layout.setup(layers, self) # Compute aesthetics to produce data with generalised # variable names layers.compute_aesthetics(self) # Transform data using all scales layers.transform(scales) # Map and train positions so that statistics have access # to ranges and all positions are numeric layout.train_position(layers, scales.x, scales.y) layout.map_position(layers) # Apply and map statistics layers.compute_statistic(layout) layers.map_statistic(self) # Make sure missing (but required) aesthetics are added scales.add_missing(('x', 'y')) # Prepare data in geoms # e.g. from y and width to ymin and ymax layers.setup_data() # Apply position adjustments layers.compute_position(layout) # Reset position scales, then re-train and map. This # ensures that facets have control over the range of # a plot. layout.reset_position_scales() layout.train_position(layers, scales.x, scales.y) layout.map_position(layers) # Train and map non-position scales npscales = scales.non_position_scales() if len(npscales): layers.train(npscales) layers.map(npscales) # Train coordinate system layout.setup_panel_params(self.coordinates) # fill in the defaults layers.use_defaults() # Allow stats to modify the layer data layers.finish_statistics() # Allow layout to modify data before rendering layout.finish_data(layers)\n\n    ### Response: Build ggplot for rendering.\n\n        Notes\n        -----\n        This method modifies the ggplot object. The caller is\n        responsible for making a copy and using that to make\n        the method call..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final void collectAttributePrototypes(final Attribute.Set attributePrototypes) { attributePrototypes.addAttributes(firstAttribute); attributePrototypes.addAttributes(firstCodeAttribute); }\n\n    ### Response:", "ground_truth": "Collects the attributes of this method into the given set of attribute prototypes.\n\n@param attributePrototypes a set of attribute prototypes.", "predict": "The method generates an Attribute Prototype from an AttributeSet and adds attributes to it to complete its construction"}, {"ID": 1506, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T providerOfType(final String providerName) throws ExecutionServiceException { if (null == providerName) { throw new NullPointerException(\"provider name was null for Service: \" + getName()); } if (isCacheInstances()) { if (null == instanceregistry.get(providerName)) { T instance = createProviderInstanceOfType(providerName); instanceregistry.put(providerName, instance); return instance; } return instanceregistry.get(providerName); } else { return createProviderInstanceOfType(providerName); } }\n\n    ### Response: Return the provider instance of the given name..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void injectContext(final Object targetObject) { final Class targetType = targetObject.getClass(); final ScopeData scopeData = scopeDataInspector.inspectClassScopesWithCache(targetType); final Targets targets = new Targets(targetObject, scopeData); // inject no context scopeResolver.forEachScope(madvocScope -> madvocScope.inject(targets)); // inject special case scopeResolver.forScope(ParamsScope.class, scope -> scope.inject(targets)); // inject servlet context final ServletContext servletContext = madvocController.getApplicationContext(); if (servletContext != null) { scopeResolver.forEachScope(madvocScope -> madvocScope.inject(servletContext, targets)); } }\n\n    ### Response:", "ground_truth": "Inject context into target.", "predict": "Inject the given objects into the given scope and into the given objects.."}, {"ID": 1507, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function all() : array { return array_merge([ 'category' => $this->forCategories(), 'brands' => array_count_values($this->products->pluck('brand')->all()), 'conditions' => array_count_values($this->products->pluck('condition')->all()), ], $this->forFeatures()); }\n\n    ### Response: Returns the parsed filters.\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void registerPseudoClass(final Class<? extends PseudoClass> pseudoClassType) { PseudoClass pseudoClass; try { pseudoClass = ClassUtil.newInstance(pseudoClassType); } catch (Exception ex) { throw new CSSellyException(ex); } PSEUDO_CLASS_MAP.put(pseudoClass.getPseudoClassName(), pseudoClass); }\n\n    ### Response:", "ground_truth": "Registers pseudo class.", "predict": "Registers the PseudoClass into the PseudoClass Map."}, {"ID": 1508, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func SetExportRootClients( ctx context.Context, client api.Client, id int, addrs ...string) error { return ExportUpdate(ctx, client, &Export{ID: id, RootClients: &addrs}) }\n\n    ### Response: // SetExportRootClients sets an Export's root_clients property..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static PseudoClass lookupPseudoClass(final String pseudoClassName) { PseudoClass pseudoClass = PSEUDO_CLASS_MAP.get(pseudoClassName); if (pseudoClass == null) { throw new CSSellyException(\"Unsupported pseudo class: \" + pseudoClassName); } return pseudoClass; }\n\n    ### Response:", "ground_truth": "Lookups pseudo class for given pseudo class name.", "predict": "// The lookupPseudoClass method maps an arbitrary string to its corresponding PseudoClass object.."}, {"ID": 1509, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _remap(object, name, value, safe=True): \"\"\"Prevent accidental assignment of existing members Arguments: object (object): Parent of new attribute name (str): Name of new attribute value (object): Value of new attribute safe (bool): Whether or not to guarantee that the new attribute was not overwritten. Can be set to False under condition that it is superseded by extensive testing. \"\"\" if os.getenv(\"QT_TESTING\") is not None and safe: # Cannot alter original binding. if hasattr(object, name): raise AttributeError(\"Cannot override existing name: \" \"%s.%s\" % (object.__name__, name)) # Cannot alter classes of functions if type(object).__name__ != \"module\": raise AttributeError(\"%s != 'module': Cannot alter \" \"anything but modules\" % object) elif hasattr(object, name): # Keep track of modifications self.__modified__.append(name) self.__remapped__.append(name) setattr(object, name, value)\n\n    ### Response: Prevent accidental assignment of existing members\n\n    Arguments:\n        object (object): Parent of new attribute\n        name (str): Name of new attribute\n        value (object): Value of new attribute\n        safe (bool): Whether or not to guarantee that\n            the new attribute was not overwritten.\n            Can be set to False under condition that\n            it is superseded by extensive testing..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void invoke(final ActionRequest actionRequest) { if (executorService == null) { throw new MadvocException(\"No action is marked as async!\"); } final HttpServletRequest servletRequest = actionRequest.getHttpServletRequest(); log.debug(() -> \"Async call to: \" + actionRequest); final AsyncContext asyncContext = servletRequest.startAsync(); executorService.submit(() -> { try { actionRequest.invoke(); } catch (Exception ex) { log.error(\"Invoking async action path failed: \" , ExceptionUtil.unwrapThrowable(ex)); } finally { asyncContext.complete(); } }); }\n\n    ### Response:", "ground_truth": "Invokes an action asynchronously by submitting it to the thread pool.", "predict": "Prevent accidental assignment of existing members\n\n    Arguments:\n        actionRequest (ActionRequest): The action to be invoked\n            (ActionRequest) parameter\n            (ActionRequest) parameter\n            (ActionRequest) parameter\n            (ActionRequest) parameter\n            (ActionRequest) parameter\n            (ActionRequest) parameter\n            (ActionRequest) parameter\n            (ActionRequest) parameter\n            (ActionRequest) parameter\n            (ActionRequest) parameter\n            (ActionRequest) parameter\n            (ActionRequest) parameter\n            (ActionRequest) parameter\n            (ActionRequest) parameter\n            (ActionRequest) parameter\n            (ActionRequest) parameter\n            (ActionRequest) parameter\n            (ActionRequest) parameter\n            (ActionRequest) parameter\n            (ActionRequest) parameter\n            (ActionRequest) parameter\n            (ActionRequest) parameter\n            (ActionRequest) parameter\n            (ActionRequest) parameter\n            (ActionRequest) parameter\n            (ActionRequest) parameter\n            (ActionRequest) parameter"}, {"ID": 1510, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_record(identifier) doc = client.get!(CGI.escape(identifier)).body.to_json @record_class.build(mint_id(identifier), doc, 'application/json') end\n\n    ### Response: Retrieves a specific document from CouchDB.\n\n Uses Analysand::Database#get!, which raises an exception if the\n document cannot be found.\n\n @see Analysand::Database#get!.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String[] getAllBeanPropertyNames(final Class type, final boolean declared) { ClassDescriptor classDescriptor = ClassIntrospector.get().lookup(type); PropertyDescriptor[] propertyDescriptors = classDescriptor.getAllPropertyDescriptors(); ArrayList<String> names = new ArrayList<>(propertyDescriptors.length); for (PropertyDescriptor propertyDescriptor : propertyDescriptors) { MethodDescriptor getter = propertyDescriptor.getReadMethodDescriptor(); if (getter != null) { if (getter.matchDeclared(declared)) { names.add(propertyDescriptor.getName()); } } else if (includeFields) { FieldDescriptor field = propertyDescriptor.getFieldDescriptor(); if (field != null) { if (field.matchDeclared(declared)) { names.add(field.getName()); } } } } return names.toArray(new String[0]); }\n\n    ### Response:", "ground_truth": "Returns all bean property names.", "predict": "Get all bean property names of the given bean type, optionally filtered by declared visibility\n\n Uses BeanIntrospector to retrieve all bean property names of the given bean type, optionally filtered by declared visibility\n\n Uses BeanDescriptor and BeanDescriptor.getAllPropertyDescriptors to retrieve all bean property names of the given bean\n\n Uses BeanDescriptor and BeanDescriptor.getReadMethodDescriptor to retrieve bean property names of the given bean\n\n Uses BeanDescriptor and BeanDescriptor.getFieldDescriptor to retrieve bean field names of the given bean\n\n Uses BeanDescriptor to determine whether to filter bean names by declared visibility\n\n Uses BeanDescriptor to determine whether to filter bean names by declared visibility\n\n Uses BeanDescriptor to determine whether to filter bean names by declared visibility"}, {"ID": 1511, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def handle(self, **kwargs): \"\"\" Simply re-saves all objects from models listed in settings.TIMELINE_MODELS. Since the timeline app is now following these models, it will register each item as it is re-saved. The purpose of this script is to register content in your database that existed prior to installing the timeline app. \"\"\" for item in settings.ACTIVITY_MONITOR_MODELS: app_label, model = item['model'].split('.', 1) content_type = ContentType.objects.get(app_label=app_label, model=model) model = content_type.model_class() objects = model.objects.all() for object in objects: try: object.save() except Exception as e: print(\"Error saving: {}\".format(e))\n\n    ### Response: Simply re-saves all objects from models listed in settings.TIMELINE_MODELS. Since the timeline\n      app is now following these models, it will register each item as it is re-saved. The purpose of this\n      script is to register content in your database that existed prior to installing the timeline app..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visit() { String[] properties = resolveProperties(source, declared); for (String name : properties) { if (name == null) { continue; } if (!rules.match(name, blacklist)) { continue; } Object value; String propertyName = name; if (isSourceMap) { propertyName = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET; } if (declared) { value = BeanUtil.declared.getProperty(source, propertyName); } else { value = BeanUtil.pojo.getProperty(source, propertyName); } if (value == null && ignoreNullValues) { continue; } if (value instanceof String && StringUtil.isEmpty((String) value)) { continue; } visitProperty(name, value); } }\n\n    ### Response:", "ground_truth": "Starts visiting properties.", "predict": "The visitor method visits each property of the source object and makes sure it meets the specified\n    ### criteria of the visitor method. It first resolves the given source to see if any of its fields or\n    ### annotations were explicitly listed in the given source to be inspected and ignores fields that were\n    ### explicitly listed to be ignored in the given source. After resolving the source, the visitor\n    ### iterates over each of its fields and makes sure that they match the given regular expressions of the\n    ### given source to see if any of its fields or annotations were explicitly listed to be inspected and\n    ### ignores fields that were explicitly listed to be ignored in the given source. After resolving the\n    ### source and iterating over its fields, the visitor makes sure that the given regular expressions of\n    ### the given source match the given fields of the source to see if any of its fields or annotations were\n    ### explicitly listed to be inspected and ignores fields that were explicitly listed to be ignored in the"}, {"ID": 1512, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Formatter format(String format, Object ... args) { return format(l, format, args); }\n\n    ### Response: Writes a formatted string to this object's destination using the\nspecified format string and arguments.  The locale used is the one\ndefined during the construction of this formatter.\n\n@param  format\nA format string as described in Format string\nsyntax.\n\n@param  args\nArguments referenced by the format specifiers in the format\nstring.  If there are more arguments than format specifiers, the\nextra arguments are ignored.  The maximum number of arguments is\nlimited by the maximum dimension of a Java array as defined by\nThe Java&trade; Virtual Machine Specification.\n\n@throws  IllegalFormatException\nIf a format string contains an illegal syntax, a format\nspecifier that is incompatible with the given arguments,\ninsufficient arguments given the format string, or other\nillegal conditions.  For specification of all possible\nformatting errors, see the Details\nsection of the formatter class specification.\n\n@throws  FormatterClosedException\nIf this formatter has been closed by invoking its {@link\n#close()} method\n\n@return  This formatter.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public boolean accept(final String propertyName, final String rule, final boolean include) { return propertyName.equals(rule); }\n\n    ### Response:", "ground_truth": "Compares property name to the rules.", "predict": "Override the default behavior of the regular\nexpression pattern matching behavior to check if the given\nrule matches the given property name or not."}, {"ID": 1513, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def verify_url_path(url_path, query_args, secret_key, salt_arg='_', max_expiry=None, digest=None): # type: (str, Dict[str, str], bytes, str, int, Callable) -> bool \"\"\" Verify a URL path is correctly signed. :param url_path: URL path :param secret_key: Signing key :param query_args: Arguments that make up the query string :param salt_arg: Argument required for salt (set to None to disable) :param max_expiry: Maximum length of time an expiry value can be for (set to None to disable) :param digest: Specify the digest function to use; default is sha256 from hashlib :rtype: bool :raises: URLError \"\"\" try: supplied_signature = query_args.pop('signature') except KeyError: raise SigningError(\"Signature missing.\") if salt_arg is not None and salt_arg not in query_args: raise SigningError(\"No salt used.\") if max_expiry is not None and 'expires' not in query_args: raise SigningError(\"Expiry time is required.\") # Validate signature signature = _generate_signature(url_path, secret_key, query_args, digest) if not hmac.compare_digest(signature, supplied_signature): raise SigningError('Signature not valid.') # Check expiry try: expiry_time = int(query_args.pop('expires')) except KeyError: pass # URL doesn't have an expire time except ValueError: raise SigningError(\"Invalid expiry value.\") else: expiry_delta = expiry_time - time() if expiry_delta < 0: raise SigningError(\"Signature has expired.\") if max_expiry and expiry_delta > max_expiry: raise SigningError(\"Expiry time out of range.\") return True\n\n    ### Response: Verify a URL path is correctly signed.\n\n    :param url_path: URL path\n    :param secret_key: Signing key\n    :param query_args: Arguments that make up the query string\n    :param salt_arg: Argument required for salt (set to None to disable)\n    :param max_expiry: Maximum length of time an expiry value can be for (set to None to disable)\n    :param digest: Specify the digest function to use; default is sha256 from hashlib\n    :rtype: bool\n    :raises: URLError.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public MethodInjectionPoint[] resolve(final Class type) { // lookup methods ClassDescriptor cd = ClassIntrospector.get().lookup(type); List<MethodInjectionPoint> list = new ArrayList<>(); MethodDescriptor[] allMethods = cd.getAllMethodDescriptors(); for (MethodDescriptor methodDescriptor : allMethods) { Method method = methodDescriptor.getMethod(); if (ClassUtil.isBeanPropertySetter(method)) { // ignore setters continue; } if (method.getParameterTypes().length == 0) { // ignore methods with no argument continue; } BeanReferences[] references = referencesResolver.readAllReferencesFromAnnotation(method); if (references != null) { MethodInjectionPoint methodInjectionPoint = new MethodInjectionPoint(method, references); list.add(methodInjectionPoint); } } final MethodInjectionPoint[] methodInjectionPoints; if (list.isEmpty()) { methodInjectionPoints = MethodInjectionPoint.EMPTY; } else { methodInjectionPoints = list.toArray(new MethodInjectionPoint[0]); } return methodInjectionPoints; }\n\n    ### Response:", "ground_truth": "Resolve method injection points in given class.", "predict": "Resolve methods of the given type\n\n    :param type: The type to resolve methods for\n    :type type: Class<?>\n    :rtype: List<MethodInjectionPoint>\n    :returns: The resolved list of method points or an empty list if no points could be found"}, {"ID": 1514, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_response(self, environ=None): \"\"\"Get a list of headers.\"\"\" response = super(SameContentException, self).get_response( environ=environ ) if self.etag is not None: response.set_etag(self.etag) if self.last_modified is not None: response.headers['Last-Modified'] = http_date(self.last_modified) return response\n\n    ### Response: Get a list of headers..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void readFilterConfigParameters(final FilterConfig filterConfig, final Object target, final String... parameters) { for (String parameter : parameters) { String value = filterConfig.getInitParameter(parameter); if (value != null) { BeanUtil.declared.setProperty(target, parameter, value); } } }\n\n    ### Response:", "ground_truth": "Reads filter config parameters and set into destination target.", "predict": "The readFilterConfigParameters method reads the init parameters of the FilterConfig object and sets the corresponding BeanUtil properties of the target object."}, {"ID": 1515, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _get_home(): \"\"\"Find user's home directory if possible. Otherwise, returns None. :see: http://mail.python.org/pipermail/python-list/2005-February/325395.html This function is copied from matplotlib version 1.4.3, Jan 2016 \"\"\" try: if six.PY2 and sys.platform == 'win32': path = os.path.expanduser(b\"~\").decode(sys.getfilesystemencoding()) else: path = os.path.expanduser(\"~\") except ImportError: # This happens on Google App Engine (pwd module is not present). pass else: if os.path.isdir(path): return path for evar in ('HOME', 'USERPROFILE', 'TMP'): path = os.environ.get(evar) if path is not None and os.path.isdir(path): return path return None\n\n    ### Response: Find user's home directory if possible.\n    Otherwise, returns None.\n\n    :see:  http://mail.python.org/pipermail/python-list/2005-February/325395.html\n\n    This function is copied from matplotlib version 1.4.3, Jan 2016.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void sendBundleFile(final HttpServletResponse resp, final File bundleFile) throws IOException { OutputStream out = resp.getOutputStream(); FileInputStream fileInputStream = new FileInputStream(bundleFile); try { StreamUtil.copy(fileInputStream, out); } finally { StreamUtil.close(fileInputStream); } }\n\n    ### Response:", "ground_truth": "Outputs bundle file to the response.", "predict": "\n    The above method sends a file (in this case, a bundle file) over HTTP to the client in chunks of bytes following HTTP protocol standards of sending a Representational State Transfer (REST) request to the server to accept the file. The Content-Type of the request must indicate that this file contains a document in order to avoid any HTTP request forgery attacks. Finally, this method closes the output stream of the HTTP response to signal to the client that no additional data is coming, but to wait for any potential feedback to finish sending this resource to the client."}, {"ID": 1516, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Cluster) GetService(input string, insertDefaults bool) (types.Service, error) { var service *swarmapi.Service if err := c.lockedManagerAction(func(ctx context.Context, state nodeState) error { s, err := getService(ctx, state.controlClient, input, insertDefaults) if err != nil { return err } service = s return nil }); err != nil { return types.Service{}, err } svc, err := convert.ServiceFromGRPC(*service) if err != nil { return types.Service{}, err } return svc, nil }\n\n    ### Response: // GetService returns a service based on an ID or name..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public File lookupBundleFile(String bundleId) { if ((mirrors != null) && (!mirrors.isEmpty())) { String realBundleId = mirrors.remove(bundleId); if (realBundleId != null) { bundleId = realBundleId; } } return createBundleFile(bundleId); }\n\n    ### Response:", "ground_truth": "Lookups for bundle file.", "predict": "// The lookupBundleFile method looks up the file for the given bundle ID and\n    // returns it or the corresponding bundle ID if no corresponding file could be found."}, {"ID": 1517, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final public function getObjectByCachedList($class, $property, $value) { $app = Application::getInstance(); $cacheName = $class . 'ObjectList'; if (!$app->issetState($cacheName)) { $app->setState($cacheName, $class::getAllObjects()); } foreach ($app->getState($cacheName) as $object) { if ($object->$property == $value) { return $object; } } return NULL; }\n\n    ### Response: Load all records in a table from the DB and store them in the Application cache,\nthen look for the required property in this list. It is very useful for repeated\nsearches on small tables of the DB, eg. less than 1000 records.\n\n@param\tstring\tClass name.\n@param\tstring\tProperty name.\n@param\tmixed\tProperty value. If not unique property, return the first table item.\n\n@return\tActiveRecord|NULL.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public File lookupGzipBundleFile(final File file) throws IOException { String path = file.getPath() + ZipUtil.GZIP_EXT; File gzipFile = new File(path); if (!gzipFile.exists()) { if (log.isDebugEnabled()) { log.debug(\"gzip bundle to \" + path); } ZipUtil.gzip(file); } return gzipFile; }\n\n    ### Response:", "ground_truth": "Locates gzipped version of bundle file. If gzip file\ndoes not exist, it will be created.", "predict": "Loads the gzip bundle from the given file. If the gzip bundle does not exist or cannot be loaded,\nreturn the original file."}, {"ID": 1518, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static BuildRetention createBuildRetention(Run build, boolean discardOldArtifacts) { BuildRetention buildRetention = new BuildRetention(discardOldArtifacts); LogRotator rotator = null; BuildDiscarder buildDiscarder = build.getParent().getBuildDiscarder(); if (buildDiscarder != null && buildDiscarder instanceof LogRotator) { rotator = (LogRotator) buildDiscarder; } if (rotator == null) { return buildRetention; } if (rotator.getNumToKeep() > -1) { buildRetention.setCount(rotator.getNumToKeep()); } if (rotator.getDaysToKeep() > -1) { Calendar calendar = Calendar.getInstance(); calendar.add(Calendar.DAY_OF_YEAR, -rotator.getDaysToKeep()); buildRetention.setMinimumBuildDate(new Date(calendar.getTimeInMillis())); } List<String> notToBeDeleted = ExtractorUtils.getBuildNumbersNotToBeDeleted(build); buildRetention.setBuildNumbersNotToBeDiscarded(notToBeDeleted); return buildRetention; }\n\n    ### Response: Create a Build retention object out of the build\n\n@param build               The build to create the build retention out of\n@param discardOldArtifacts Flag whether to discard artifacts of those builds that are to be discarded.\n@return a new Build retention.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public synchronized String registerBundle(final String contextPath, final String actionPath, final String tempBundleId, final String bundleContentType, final List<String> sources) { if (tempBundleId == null || sources.isEmpty()) { if (strategy == Strategy.ACTION_MANAGED) { // page does not include any resource source file actionBundles.put(actionPath, StringPool.EMPTY); } return null; } // create unique digest from the collected sources String[] sourcesArray = sources.toArray(new String[0]); for (int i = 0, sourcesArrayLength = sourcesArray.length; i < sourcesArrayLength; i++) { sourcesArray[i] = sourcesArray[i].trim().toLowerCase(); } if (sortResources) { Arrays.sort(sourcesArray); } StringBand sb = new StringBand(sourcesArray.length); for (String src : sourcesArray) { sb.append(src); } String sourcesString = sb.toString(); String bundleId = createDigest(sourcesString); bundleId += '.' + bundleContentType; // bundle appears for the first time, create the bundle if (strategy == Strategy.ACTION_MANAGED) { actionBundles.put(actionPath, bundleId); mirrors.put(tempBundleId, bundleId); } try { createBundle(contextPath, actionPath, bundleId, sources); } catch (IOException ioex) { throw new HtmlStaplerException(\"Can't create bundle\", ioex); } return bundleId; }\n\n    ### Response:", "ground_truth": "Registers new bundle that consist of provided list of source paths.\nReturns the real bundle id, as provided one is just a temporary bundle id.", "predict": "Create a temporary bundle ID to hold the given bundle of resources\n\n@param contextPath              The URI of the web resource to hold the bundle\n@param actionPath              The URI of the web resource to hold the bundle\n@param bundleId                 The generated bundle ID\n@param sources                 The given list of resources to hold in the bundle\n\n@return The generated bundle ID"}, {"ID": 1519, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func GetLightStepAccessToken(tracer opentracing.Tracer) (string, error) { switch lsTracer := tracer.(type) { case Tracer: return lsTracer.Options().AccessToken, nil case *tracerv0_14: return GetLightStepAccessToken(lsTracer.Tracer) default: return \"\", newEventUnsupportedTracer(tracer) } }\n\n    ### Response: // GetLightStepAccessToken returns the currently configured AccessToken..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String createDigest(final String source) { final DigestEngine digestEngine = DigestEngine.sha256(); final byte[] bytes = digestEngine.digest(CharUtil.toSimpleByteArray(source)); String digest = Base32.encode(bytes); if (uniqueDigestKey != null) { digest += uniqueDigestKey; } return digest; }\n\n    ### Response:", "ground_truth": "Creates digest i.e. bundle id from given string.\nReturned digest must be filename safe, for all platforms.", "predict": "// This method creates a digest of the given source string using SHA-256 hashing technique.."}, {"ID": 1520, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void warnAddOnsAndExtensionsNoLongerRunnable() { final AddOnLoader addOnLoader = ExtensionFactory.getAddOnLoader(); List<String> idsAddOnsNoLongerRunning = addOnLoader.getIdsAddOnsWithRunningIssuesSinceLastRun(); if (idsAddOnsNoLongerRunning.isEmpty()) { return; } List<AddOn> addOnsNoLongerRunning = new ArrayList<>(idsAddOnsNoLongerRunning.size()); for (String id : idsAddOnsNoLongerRunning) { addOnsNoLongerRunning.add(addOnLoader.getAddOnCollection().getAddOn(id)); } for (AddOn addOn : addOnsNoLongerRunning) { AddOn.AddOnRunRequirements requirements = addOn .calculateRunRequirements(addOnLoader.getAddOnCollection().getAddOns()); List<String> issues = AddOnRunIssuesUtils.getRunningIssues(requirements); if (issues.isEmpty()) { issues = AddOnRunIssuesUtils.getExtensionsRunningIssues(requirements); } getLogger().warn( \"Add-on \\\"\" + addOn.getId() + \"\\\" or its extensions will no longer be run until its requirements are restored: \" + issues); } }\n\n    ### Response: Warns, through logging, about add-ons and extensions that are no longer runnable because of changes in its dependencies..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void createBundle(final String contextPath, final String actionPath, final String bundleId, final List<String>sources) throws IOException { final File bundleFile = createBundleFile(bundleId); if (bundleFile.exists()) { return; } StringBand sb = new StringBand(sources.size() * 2); for (String src : sources) { if (sb.length() != 0) { sb.append(StringPool.NEWLINE); } String content; if (isExternalResource(src)) { content = downloadString(src); } else { if (!downloadLocal) { // load local resource from file system String localFile = webRoot; if (src.startsWith(contextPath + '/')) { src = src.substring(contextPath.length()); } if (src.startsWith(StringPool.SLASH)) { // absolute path localFile += src; } else { // relative path localFile += '/' + FileNameUtil.getPathNoEndSeparator(actionPath) + '/' + src; } // trim link parameters, if any int qmndx = localFile.indexOf('?'); if (qmndx != -1) { localFile = localFile.substring(0, qmndx); } try { content = FileUtil.readString(localFile); } catch (IOException ioex) { if (notFoundExceptionEnabled) { throw ioex; } if (log.isWarnEnabled()) { log.warn(ioex.getMessage()); } content = null; } } else { // download local resource String localUrl = localAddressAndPort; if (src.startsWith(StringPool.SLASH)) { localUrl += contextPath + src; } else { localUrl += contextPath + FileNameUtil.getPath(actionPath) + '/' + src; } content = downloadString(localUrl); } if (content != null) { if (isCssResource(src)) { content = fixCssRelativeUrls(content, src); } } } if (content != null) { content = onResourceContent(content); sb.append(content); } } FileUtil.writeString(bundleFile, sb.toString()); if (log.isInfoEnabled()) { log.info(\"Bundle created: \" + bundleId); } }\n\n    ### Response:", "ground_truth": "Creates bundle file by loading resource files content. If bundle file already\nexist it will not be recreated!", "predict": "Creates and writes a bundle file to disk."}, {"ID": 1521, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function __soapCall( $function_name, $arguments, $options = null, $input_headers = null, &$output_headers = null ) { $class = get_class($this); $service = strtr(substr($class, strrpos($class, '\\\\') + 1), ['ServiceService' => 'Service']); $this->__setCookie('timestamp', $timestamp = time()); $this->__setCookie('nonce', $nonce = uniqid('', true)); $this->__setCookie('signature', $this->urlEncode($this->sign(array_merge($arguments, [ '__method' => $function_name, '__service' => $service, '__hostname' => $this->endpoint, '__timestamp' => $timestamp, '__nonce' => $nonce, ])))); return parent::__soapCall($function_name, $arguments, $options, $input_headers, $output_headers); }\n\n    ### Response: Extended soap call that implements the TransIP request signing logic.\n@param string $function_name\n@param array $arguments\n@param null $options\n@param null $input_headers\n@param null $output_headers\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public synchronized void reset() { if (strategy == Strategy.ACTION_MANAGED) { actionBundles.clear(); mirrors.clear(); } final FindFile ff = new FindFile(); ff.includeDirs(false); ff.searchPath(new File(bundleFolder, staplerPath)); File f; int count = 0; while ((f = ff.nextFile()) != null) { f.delete(); count++; } if (log.isInfoEnabled()) { log.info(\"reset: \" + count + \" bundle files deleted.\"); } }\n\n    ### Response:", "ground_truth": "Clears all settings and removes all created bundle files from file system.", "predict": "The reset() method resets the build environment by deleting the build bundle and its dependencies of the specified project."}, {"ID": 1522, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function filterQuery(&$selects) { $model = $this->config->getDataModel(); $joins = $where = ''; $columnName = $this->getOption('column_name'); $nested = $this->getOption('nested'); $num_pieces = sizeof($nested['pieces']); //if there is more than one nested relationship, we need to join all the tables if ($num_pieces > 1) { for ($i = 1; $i < $num_pieces; $i++) { $model = $nested['models'][$i]; $relationship = $model->{$nested['pieces'][$i]}(); $relationship_model = $relationship->getRelated(); $table = $this->tablePrefix . $relationship_model->getTable(); $alias = $columnName . '_' . $table; $last_alias = $columnName . '_' . $this->tablePrefix . $model->getTable(); $joins .= ' LEFT JOIN ' . $table . ' AS ' . $alias . ' ON ' . $alias . '.' . $relationship->getOtherKey() . ' = ' . $last_alias . '.' . $relationship->getForeignKey(); } } $first_model = $nested['models'][0]; $first_piece = $nested['pieces'][0]; $first_relationship = $first_model->{$first_piece}(); $relationship_model = $first_relationship->getRelated(); $from_table = $this->tablePrefix . $relationship_model->getTable(); $field_table = $columnName . '_' . $from_table; $where = $this->tablePrefix . $first_model->getTable() . '.' . $first_relationship->getForeignKey() . ' = ' . $field_table . '.' . $first_relationship->getOtherKey(); $selects[] = $this->db->raw(\"(SELECT \" . $this->getOption('select') . \" FROM \" . $from_table.\" AS \" . $field_table . ' ' . $joins . \" WHERE \" . $where . \") AS \" . $this->db->getQueryGrammar()->wrap($columnName)); }\n\n    ### Response: Adds selects to a query\n\n@param array \t$selects\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String fixCssRelativeUrls(final String content, final String src) { final String path = FileNameUtil.getPath(src); final Matcher matcher = CSS_URL_PATTERN.matcher(content); final StringBuilder sb = new StringBuilder(content.length()); int start = 0; while (matcher.find()) { sb.append(content, start, matcher.start()); final String matchedUrl = StringUtil.removeChars(matcher.group(1), \"'\\\"\"); final String url; if (matchedUrl.startsWith(\"https://\") || matchedUrl.startsWith(\"http://\") || matchedUrl.startsWith(\"data:\")) { url = \"url('\" + matchedUrl + \"')\"; } else { url = fixRelativeUrl(matchedUrl, path); } sb.append(url); start = matcher.end(); } sb.append(content.substring(start)); return sb.toString(); }\n\n    ### Response:", "ground_truth": "Returns the content with all relative URLs fixed.", "predict": "Resolves relative links in css files"}, {"ID": 1523, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *stack) PeekInt(idx int32) (scriptNum, error) { so, err := s.PeekByteArray(idx) if err != nil { return 0, err } return makeScriptNum(so, s.verifyMinimalData, defaultScriptNumLen) }\n\n    ### Response: // PeekInt returns the Nth item on the stack as a script num without removing\n// it.  The act of converting to a script num enforces the consensus rules\n// imposed on data interpreted as numbers..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DbSqlBuilder updateColumn(final Object entity, final String columnRef) { final Object value = BeanUtil.pojo.getProperty(entity, columnRef); return updateColumn(entity, columnRef, value); }\n\n    ### Response:", "ground_truth": "Reads property value and updates the DB.", "predict": "The updateColumn() method updates the given column of the given entity to the given value"}, {"ID": 1524, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (bv *Values) Remove(value interface{}, n int) bool { return bv.remove(reflect.TypeOf(value), n) }\n\n    ### Response: // Remove unbinds a binding value based on the type,\n// it returns true if at least one field is not binded anymore.\n//\n// The \"n\" indicates the number of elements to remove, if <=0 then it's 1,\n// this is useful because you may have bind more than one value to two or more fields\n// with the same type..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static String createTableRefName(final Object entity) { Class type = entity.getClass(); type = (type == Class.class ? (Class) entity : type); return (type.getSimpleName() + '_'); }\n\n    ### Response:", "ground_truth": "Creates table reference name from entity type.\nAlways appends an underscore to reference name in order\nto circumvent SQL compatibility issues when entity class name\nequals to a reserved word.", "predict": "// Creates a reference to the table for the given entity,\n// It uses the simple name of the entity to generate the reference,\n// It uses the import from the Entity into the method to ensure the proper names\n// can be used to generate the reference names"}, {"ID": 1525, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static function get_pro_suffix($name) { foreach (self::$dict['suffixes']['prof'] as $suffix) { if (preg_match(\"/,[\\s]*$suffix\\b/i\", $name, $matches)) { return $matches[0]; } } return false; }\n\n    ### Response: Checks for the existence of, and returns professional suffix\n\n@param string $name the name you wish to test\n@return mixed returns the suffix if exists, false otherwise.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public DbSession getDbSession() { log.debug(\"Requesting db TX manager session\"); final DbJtxTransaction jtx = (DbJtxTransaction) jtxTxManager.getTransaction(); if (jtx == null) { throw new DbSqlException( \"No transaction is in progress and DbSession can't be provided. \" + \"It seems that transaction manager is not used to begin a transaction.\"); } return jtx.requestResource(); }\n\n    ### Response:", "ground_truth": "Returns session from JTX transaction manager and started transaction.", "predict": "Provide db session during transaction"}, {"ID": 1526, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def custom_prefix_strict(instance): \"\"\"Ensure custom content follows strict naming style conventions. \"\"\" for error in chain(custom_object_prefix_strict(instance), custom_property_prefix_strict(instance), custom_observable_object_prefix_strict(instance), custom_object_extension_prefix_strict(instance), custom_observable_properties_prefix_strict(instance)): yield error\n\n    ### Response: Ensure custom content follows strict naming style conventions..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected T[] convertToSingleElementArray(final Object value) { T[] singleElementArray = createArray(1); singleElementArray[0] = convertType(value); return singleElementArray; }\n\n    ### Response:", "ground_truth": "Creates an array with single element.", "predict": "Preconditions\n    This method converts an arbitrary object to an array of size 1 containing the given objects internal representation of the given objects type cast to its given type."}, {"ID": 1527, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def pop(self, i=None): \"\"\"remove the ith term from the term list Parameters --------- i : int, optional term to remove from term list by default the last term is popped. Returns ------- term : Term \"\"\" if i == None: i = len(self) - 1 if i >= len(self._terms) or i < 0: raise ValueError('requested pop {}th term, but found only {} terms'\\ .format(i, len(self._terms))) term = self._terms[i] self._terms = self._terms[:i] + self._terms[i+1:] return term\n\n    ### Response: remove the ith term from the term list\n\n        Parameters\n        ---------\n        i : int, optional\n            term to remove from term list\n\n            by default the last term is popped.\n\n        Returns\n        -------\n        term : Term.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Map<String, String> parseSignatureForGenerics(final String signature, final boolean isInterface) { if (signature == null) { return Collections.emptyMap(); } final Map<String, String> genericsMap = new HashMap<>(); SignatureReader sr = new SignatureReader(signature); StringBuilder sb = new StringBuilder(); TraceSignatureVisitor v = new TraceSignatureVisitor(sb, isInterface) { String genericName; @Override public void visitFormalTypeParameter(final String name) { genericName = name; super.visitFormalTypeParameter(name); } @Override public void visitClassType(final String name) { if (genericName != null) { genericsMap.put(genericName, 'L' + name + ';'); genericName = null; } super.visitClassType(name); } }; sr.accept(v); return genericsMap; }\n\n    ### Response:", "ground_truth": "Parses signature for generic information and returns a map where key is generic name\nand value is raw type. Returns an empty map if signature does not define any generics.", "predict": "generates Map of string to string"}, {"ID": 1528, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _summarize_combined(samples, vkey): \"\"\"Prepare summarized CSV and plot files for samples to combine together. Helps handle cases where we want to summarize over multiple samples. \"\"\" validate_dir = utils.safe_makedir(os.path.join(samples[0][\"dirs\"][\"work\"], vkey)) combined, _ = _group_validate_samples(samples, vkey, [[\"metadata\", \"validate_combine\"]]) for vname, vitems in combined.items(): if vname: cur_combined = collections.defaultdict(int) for data in sorted(vitems, key=lambda x: x.get(\"lane\", dd.get_sample_name(x))): validations = [variant.get(vkey) for variant in data.get(\"variants\", [])] validations = [v for v in validations if v] if len(validations) == 0 and vkey in data: validations = [data.get(vkey)] for validate in validations: with open(validate[\"summary\"]) as in_handle: reader = csv.reader(in_handle) next(reader) # header for _, caller, vtype, metric, value in reader: cur_combined[(caller, vtype, metric)] += int(value) out_csv = os.path.join(validate_dir, \"grading-summary-%s.csv\" % vname) with open(out_csv, \"w\") as out_handle: writer = csv.writer(out_handle) header = [\"sample\", \"caller\", \"vtype\", \"metric\", \"value\"] writer.writerow(header) for (caller, variant_type, category), val in cur_combined.items(): writer.writerow([\"combined-%s\" % vname, caller, variant_type, category, val]) plots = validateplot.classifyplot_from_valfile(out_csv)\n\n    ### Response: Prepare summarized CSV and plot files for samples to combine together.\n\n    Helps handle cases where we want to summarize over multiple samples..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public SetInjectionPoint[] resolve(final Class type, final boolean autowire) { ClassDescriptor cd = ClassIntrospector.get().lookup(type); List<SetInjectionPoint> list = new ArrayList<>(); PropertyDescriptor[] allProperties = cd.getAllPropertyDescriptors(); for (PropertyDescriptor propertyDescriptor : allProperties) { if (propertyDescriptor.isGetterOnly()) { continue; } Class propertyType = propertyDescriptor.getType(); if (!ClassUtil.isTypeOf(propertyType, Collection.class)) { continue; } MethodDescriptor writeMethodDescriptor = propertyDescriptor.getWriteMethodDescriptor(); FieldDescriptor fieldDescriptor = propertyDescriptor.getFieldDescriptor(); PetiteInject ref = null; if (writeMethodDescriptor != null) { ref = writeMethodDescriptor.getMethod().getAnnotation(PetiteInject.class); } if (ref == null && fieldDescriptor != null) { ref = fieldDescriptor.getField().getAnnotation(PetiteInject.class); } if ((!autowire) && (ref == null)) { continue; } list.add(new SetInjectionPoint(propertyDescriptor)); } SetInjectionPoint[] fields; if (list.isEmpty()) { fields = SetInjectionPoint.EMPTY; } else { fields = list.toArray(new SetInjectionPoint[0]); } return fields; }\n\n    ### Response:", "ground_truth": "Resolves all collections for given type.", "predict": "Resolves set injection points for the given class and autowire status to generate appropriate annotations for set injection points of the given class"}, {"ID": 1529, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void refine(PermutationGroup group, Partition coarser) { int vertexCount = getVertexCount(); Partition finer = equitableRefiner.refine(coarser); int firstNonDiscreteCell = finer.getIndexOfFirstNonDiscreteCell(); if (firstNonDiscreteCell == -1) { firstNonDiscreteCell = vertexCount; } Permutation pi1 = new Permutation(firstNonDiscreteCell); Result result = Result.BETTER; if (bestExist) { pi1 = finer.setAsPermutation(firstNonDiscreteCell); result = compareRowwise(pi1); } // partition is discrete if (finer.size() == vertexCount) { if (!bestExist) { best = finer.toPermutation(); first = finer.toPermutation(); bestExist = true; } else { if (result == Result.BETTER) { best = new Permutation(pi1); } else if (result == Result.EQUAL) { group.enter(pi1.multiply(best.invert())); } } } else { if (result != Result.WORSE) { Set<Integer> blockCopy = finer.copyBlock(firstNonDiscreteCell); for (int vertexInBlock = 0; vertexInBlock < vertexCount; vertexInBlock++) { if (blockCopy.contains(vertexInBlock)) { Partition nextPartition = finer.splitBefore(firstNonDiscreteCell, vertexInBlock); this.refine(group, nextPartition); int[] permF = new int[vertexCount]; int[] invF = new int[vertexCount]; for (int i = 0; i < vertexCount; i++) { permF[i] = i; invF[i] = i; } for (int j = 0; j <= firstNonDiscreteCell; j++) { int x = nextPartition.getFirstInCell(j); int i = invF[x]; int h = permF[j]; permF[j] = x; permF[i] = h; invF[h] = i; invF[x] = j; } Permutation pPermF = new Permutation(permF); group.changeBase(pPermF); for (int j = 0; j < vertexCount; j++) { Permutation g = group.get(firstNonDiscreteCell, j); if (g != null) { blockCopy.remove(g.get(vertexInBlock)); } } } } } } }\n\n    ### Response: Does the work of the class, that refines a coarse partition into a finer\none using the supplied automorphism group to prune the search.\n\n@param group the automorphism group of the graph\n@param coarser the partition to refine.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean matchIgnoredPropertyTypes(final Class propertyType, final boolean excludeMaps, final boolean include) { if (!include) { return false; } if (propertyType != null) { if (!jsonSerializer.deep) { ClassDescriptor propertyTypeClassDescriptor = ClassIntrospector.get().lookup(propertyType); if (propertyTypeClassDescriptor.isArray()) { return false; } if (propertyTypeClassDescriptor.isCollection()) { return false; } if (excludeMaps) { if (propertyTypeClassDescriptor.isMap()) { return false; } } } // still not excluded, continue with excluded types and type names // + excluded types if (jsonSerializer.excludedTypes != null) { for (Class excludedType : jsonSerializer.excludedTypes) { if (ClassUtil.isTypeOf(propertyType, excludedType)) { return false; } } } // + exclude type names final String propertyTypeName = propertyType.getName(); if (jsonSerializer.excludedTypeNames != null) { for (String excludedTypeName : jsonSerializer.excludedTypeNames) { if (Wildcard.match(propertyTypeName, excludedTypeName)) { return false; } } } } return true; }\n\n    ### Response:", "ground_truth": "Matches property types that are ignored by default.", "predict": "Matches the given parameter to the given patterns to see if it\nshould be included or excluded in the serialized objects"}, {"ID": 1530, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(name, value, description) { var prefs = name; if (typeof name === 'string') { prefs = {}; prefs[name] = { value: value, description: description }; } Object.keys(prefs).forEach(function(k) { var v = prefs[k]; defaults[k] = isValueObj(v) ? v : {value: v}; }); }\n\n    ### Response: Creates new preference item with default value\n@param {String} name Preference name. You can also pass object\nwith many options\n@param {Object} value Preference default value\n@param {String} description Item textual description\n@memberOf preferences.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void openConnectionForQuery() { if (connection == null) { connection = connectionProvider.getConnection(); txActive = false; // txAction should already be false try { connection.setAutoCommit(true); } catch (SQLException sex) { throw new DbSqlException(\"Failed to open non-TX connection\", sex); } } }\n\n    ### Response:", "ground_truth": "Opens connection in auto-commit mode, if already not opened.", "predict": "Prepares and opens a transaction for a read-only operation\n@param {ConnectionProvider} connectionProvider The provider of the transaction connection objects\n@memberOf preferences.connections.ReadOnlyTransactionSpi.ReadOnlyTransactionSpiProcessors.ReadOnlyTransactionSpiProcessorsProcessors.ReadOnlyTransactionSpiProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessorsProcessors"}, {"ID": 1531, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function( property, value, asString ) { if ( asString ) return cssVendorPrefix + property + ':' + value + ';' + property + ':' + value; var ret = {}; ret[ property ] = value; ret[ cssVendorPrefix + property ] = value; return ret; }\n\n    ### Response: Generates an object or a string containing vendor-specific and vendor-free CSS properties.\n\nCKEDITOR.tools.cssVendorPrefix( 'border-radius', '0', true );\n// On Firefox: '-moz-border-radius:0;border-radius:0'\n// On Chrome: '-webkit-border-radius:0;border-radius:0'\n\n@param {String} property The CSS property name.\n@param {String} value The CSS value.\n@param {Boolean} [asString=false] If `true`, then the returned value will be a CSS string.\n@returns {Object/String} The object containing CSS properties or its stringified version..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void openTx() { if (connection == null) { connection = connectionProvider.getConnection(); } txActive = true; try { connection.setAutoCommit(false); if (txMode.getIsolation() != DbTransactionMode.ISOLATION_DEFAULT) { connection.setTransactionIsolation(txMode.getIsolation()); } connection.setReadOnly(txMode.isReadOnly()); } catch (SQLException sex) { throw new DbSqlException(\"Open TX failed\", sex); } }\n\n    ### Response:", "ground_truth": "Opens a transaction.", "predict": "Starts a transaction to perform read-only read-write or read-only read-modify-write operations in the database"}, {"ID": 1532, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def lock(self, resource_id, region, account_id=None): \"\"\"Lock a given resource \"\"\" account_id = self.get_account_id(account_id) return self.http.post( \"%s/%s/locks/%s/lock\" % (self.endpoint, account_id, resource_id), json={'region': region}, auth=self.get_api_auth())\n\n    ### Response: Lock a given resource.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void closeTx() { txActive = false; try { connection.setAutoCommit(true); } catch (SQLException sex) { throw new DbSqlException(\"Close TX failed\", sex); } }\n\n    ### Response:", "ground_truth": "Closes current transaction.", "predict": "Closes the transaction"}, {"ID": 1533, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def logfile_generator(self): \"\"\"Yield each line of the file, or the next line if several files.\"\"\" if not self.args['exclude']: # ask all filters for a start_limit and fast-forward to the maximum start_limits = [f.start_limit for f in self.filters if hasattr(f, 'start_limit')] if start_limits: for logfile in self.args['logfile']: logfile.fast_forward(max(start_limits)) if len(self.args['logfile']) > 1: # merge log files by time for logevent in self._merge_logfiles(): yield logevent else: # only one file for logevent in self.args['logfile'][0]: if self.args['timezone'][0] != 0 and logevent.datetime: logevent._datetime = (logevent.datetime + timedelta(hours=self .args['timezone'][0])) yield logevent\n\n    ### Response: Yield each line of the file, or the next line if several files..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void commitTransaction() { log.debug(\"Committing transaction\"); assertTxIsActive(); try { connection.commit(); } catch (SQLException sex) { throw new DbSqlException(\"Commit TX failed\", sex); } finally { closeTx(); } }\n\n    ### Response:", "ground_truth": "Commit the current transaction, writing any unflushed changes to the database.\nTransaction mode is closed.", "predict": "Yield each line of the file, or the next line if several files..\n    Yield each line of the file, or the next line if several files."}, {"ID": 1534, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def clear_key_before(self, key, namespace=None, timestamp=None): \"\"\"Clear all data before `timestamp` for a given key. Note that the timestamp is rounded down to the nearest block boundary\"\"\" block_size = self.config.block_size if namespace is None: namespace = self.config.namespace if timestamp is not None: offset, remainder = divmod(timestamp, block_size) if remainder: raise ValueError('timestamp must be on a block boundary') if offset == 0: raise ValueError('cannot delete before offset zero') offset -= 1 self.driver.clear_key_before(key, namespace, offset, timestamp) else: self.driver.clear_key_before(key, namespace)\n\n    ### Response: Clear all data before `timestamp` for a given key. Note that the\n        timestamp is rounded down to the nearest block boundary.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void rollbackTransaction() { log.debug(\"Rolling-back transaction\"); assertTxIsActive(); try { connection.rollback(); } catch (SQLException sex) { throw new DbSqlException(\"Rollback TX failed\", sex); } finally { closeTx(); } }\n\n    ### Response:", "ground_truth": "Roll back the current transaction. Transaction mode is closed.", "predict": "Rollback transaction"}, {"ID": 1535, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def create_cache_directories(self): \"\"\"Ensure that SourceProcessor cache directories exist.\"\"\" if not os.path.isdir(self.package_cache_dir): if not os.path.isdir(self.stacker_cache_dir): os.mkdir(self.stacker_cache_dir) os.mkdir(self.package_cache_dir)\n\n    ### Response: Ensure that SourceProcessor cache directories exist..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Properties createFromFile(final File file) throws IOException { Properties prop = new Properties(); loadFromFile(prop, file); return prop; }\n\n    ### Response:", "ground_truth": "Create properties from the file.\n\n@param file properties file to load", "predict": "Properties file reader\n    public static Properties createFromFile(File file) throws IOException{\n    Properties prop=new Properties();\n    loadFromFile(prop, file);\n    return prop;\n    }"}, {"ID": 1536, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (p *Pattern) geoTriangles() { scale := utils.HexVal(p.Hash, 0, 1) sideLength := utils.Map(scale, 0, 15, 15, 80) triangleHeight := sideLength / 2 * math.Sqrt(3) triangle := shapes.BuildTriangle(sideLength, triangleHeight) p.Svg.SetHeight(int(triangleHeight * 6)) p.Svg.SetWidth(int(sideLength * 3)) i := 0 for y := 0; y <= 5; y++ { for x := 0; x <= 5; x++ { val := utils.HexVal(p.Hash, i, 1) opacity := utils.Opacity(val) fill := utils.FillColor(val) styles := make(map[string]interface{}) styles[\"fill\"] = fill styles[\"fill-opacity\"] = opacity styles[\"stroke\"] = utils.StrokeColor styles[\"stroke-opacity\"] = utils.StrokeOpacity var rotation int if y%2 == 0 { if x%2 == 0 { rotation = 180 } } else { if x%2 != 0 { rotation = 180 } } style := make(map[string]interface{}) style[\"transform\"] = fmt.Sprintf(\"translate(%v, %v) rotate(%v, %v, %v)\", float64(x)*sideLength*0.5-sideLength/2, triangleHeight*float64(y), rotation, sideLength/2, triangleHeight/2) p.Svg.Polyline(triangle, utils.Merge(styles, style)) if x == 0 { style[\"transform\"] = fmt.Sprintf(\"translate(%v, %v) rotate(%v, %v, %v)\", 6*sideLength*0.5-sideLength/2, triangleHeight*float64(y), rotation, sideLength/2, triangleHeight/2) p.Svg.Polyline(triangle, utils.Merge(styles, style)) } i = i + 1 } } }\n\n    ### Response: // geoTriangles build the triangles SVG pattern.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Properties createFromString(final String data) throws IOException { Properties p = new Properties(); loadFromString(p, data); return p; }\n\n    ### Response:", "ground_truth": "Creates properties from string.", "predict": "// Creates an Properties objects from the given string."}, {"ID": 1537, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ResourcePageImpl nextPage(ResultCapture<Object> extractor) { if (getNextToken() == null) { throw new NoSuchElementException(\"There is no next page\"); } ActionResult result = ActionUtils.perform( context, listActionModel, request, extractor, getNextToken()); return new ResourcePageImpl( context, listActionModel, request, result); }\n\n    ### Response: Makes a request to the service to retrieve the next page of resources\nin the collection.\n\n@param extractor an optional result extractor object\n@return the next page of results.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void loadFromString(final Properties p, final String data) throws IOException { try (ByteArrayInputStream is = new ByteArrayInputStream(data.getBytes(StringPool.ISO_8859_1))) { p.load(is); } }\n\n    ### Response:", "ground_truth": "Loads properties from string.", "predict": "Loads the contents of the given string into the Properties objects internal representation."}, {"ID": 1538, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function read() { $buff = @fread($this->socket, 1024); if(!$buff) { if($this->reconnect) { $this->doReconnect(); } else { fclose($this->socket); return false; } } $this->log->log(\"RECV: $buff\", Net_XMPP_XMPPHP_Log::LEVEL_VERBOSE); xml_parse($this->parser, $buff, false); }\n\n    ### Response: Read from socket.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Properties subset(final Properties p, String prefix, final boolean stripPrefix) { if (StringUtil.isBlank(prefix)) { return p; } if (!prefix.endsWith(StringPool.DOT)) { prefix += '.'; } Properties result = new Properties(); int baseLen = prefix.length(); for (Object o : p.keySet()) { String key = (String) o; if (key.startsWith(prefix)) { result.setProperty(stripPrefix ? key.substring(baseLen) : key, p.getProperty(key)); } } return result; }\n\n    ### Response:", "ground_truth": "Creates new Properties object from the original one, by copying\nthose properties that have specified first part of the key name.\nPrefix may be optionally stripped during this process.\n\n@param p         source properties, from which new object will be created\n@param prefix    key names prefix\n\n@return subset properties", "predict": "Subsets of Properties objects given by the given Properties objects and the given string of characters of the Properties objects to filter on should produce the given Properties objects returned in the given method."}, {"ID": 1539, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_full_dir_name(self): \"\"\" Function returns a full dir name \"\"\" return os.path.join(self.dir_name.get_text(), self.entry_project_name.get_text())\n\n    ### Response: Function returns a full dir name.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Properties createFromClasspath(final String... rootTemplate) { Properties p = new Properties(); return loadFromClasspath(p, rootTemplate); }\n\n    ### Response:", "ground_truth": "Creates properties from classpath.", "predict": "Function to create Properties from given rootTemplate string values loaded from the given rootTemplate string values loaded from the given rootTemplate string values loaded from the given rootTemplate string values loaded from the given rootTemplate string values loaded from the given rootTemplate string values loaded from the given rootTemplate string values loaded from the given rootTemplate string values loaded from the given rootTemplate string values loaded from the given rootTemplate string values loaded from the given rootTemplate string values loaded from the given rootTemplate string values loaded from the given rootTemplate string values loaded from the given rootTemplate string values loaded from the given rootTemplate string values loaded from the given rootTemplate string values loaded from the given rootTemplate string values loaded from the given rootTemplate string values loaded from the given rootTemplate string values loaded from the given rootTemplate string values loaded from the given rootTemplate string values loaded from the given rootTemplate string values loaded from the given rootTemplate string values loaded from the given rootTemplate string values loaded from the given rootTemplate string values loaded from the given rootTemplate string values loaded from the given rootTemplate"}, {"ID": 1540, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def setup(build=True, installdir=\"MalmoPlatform\"): \"\"\"Set up Minecraft for use with the MalmoEnv gym environment\"\"\" gradlew = './gradlew' if os.name == 'nt': gradlew = 'gradlew.bat' cwd = os.getcwd() os.chdir(installdir) os.chdir(\"Minecraft\") try: # Create the version properties file. pathlib.Path(\"src/main/resources/version.properties\").write_text(\"malmomod.version={}\\n\".format(malmo_version)) # Optionally do a test build. if build: subprocess.check_call([gradlew, \"setupDecompWorkspace\", \"build\", \"testClasses\", \"-x\", \"test\", \"--stacktrace\", \"-Pversion={}\".format(malmo_version)]) minecraft_dir = os.getcwd() finally: os.chdir(cwd) return minecraft_dir\n\n    ### Response: Set up Minecraft for use with the MalmoEnv gym environment.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String getProperty(final Map map, final String key, final String defaultValue) { Object val = map.get(key); return (val instanceof String) ? (String) val : defaultValue; }\n\n    ### Response:", "ground_truth": "Returns String property from a map.\n@see #getProperty(java.util.Map, String)", "predict": "Gets the property from the given Map and provides a default value if the corresponding key does not exist in the Map."}, {"ID": 1541, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void onClose(AbstractSocket socket) { synchronized(sockets) { if(sockets.remove(socket.getId()) == null) throw new AssertionError(\"Socket not part of this context. onClose called twice?\"); } }\n\n    ### Response: Called by a socket when it is closed.\nThis will only be called once..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void resolveAllVariables(final Properties prop) { for (Object o : prop.keySet()) { String key = (String) o; String value = resolveProperty(prop, key); prop.setProperty(key, value); } }\n\n    ### Response:", "ground_truth": "Resolves all variables.", "predict": "Resolves any ambiguous or misleading property names to ensure they are unambiguous across the project"}, {"ID": 1542, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func RemovePlan(p Plan) error { parents := p.GetParents() children := p.GetChildren() if len(parents) > 1 || len(children) != 1 { return SystemInternalErrorType.Gen(\"can't remove this plan\") } if len(parents) == 0 { child := children[0] child.SetParents() return nil } parent, child := parents[0], children[0] err := parent.ReplaceChild(p, child) if err != nil { return errors.Trace(err) } err = child.ReplaceParent(p, parent) return errors.Trace(err) }\n\n    ### Response: // RemovePlan means removing a plan..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String resolveProperty(final Map map, final String key) { String value = getProperty(map, key); if (value == null) { return null; } value = stp.parse(value, macroName -> getProperty(map, macroName)); return value; }\n\n    ### Response:", "ground_truth": "Returns property with resolved variables.", "predict": "The function resolves a given Map to retrieve the corresponding property or macro defined in the Map or its values and returns its resolved value."}, {"ID": 1543, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function schemaByIndex($index) { $schema = array(); foreach ($this->collection->schema() as $value) { $schema[] = $value; } return (empty($schema[$index])) ? null : $schema[$index]; }\n\n    ### Response: Get schema configuration by offset name.\n\n@method schemaByIndex\n\n@param string $index\n\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String resolveScope(final Class type, final String methodName) { if (scopePattern == null) { return null; } String ctx = scopePattern; ctx = StringUtil.replace(ctx, JTXCTX_PATTERN_CLASS, type.getName()); ctx = StringUtil.replace(ctx, JTXCTX_PATTERN_METHOD, methodName); return ctx; }\n\n    ### Response:", "ground_truth": "Resolves tx scope from scope pattern.", "predict": "Resolves the scope pattern string to the given method and parameter names of the specified type."}, {"ID": 1544, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def remove_leading_garbage_lines_from_reference_section(ref_sectn): \"\"\"Sometimes, the first lines of the extracted references are completely blank or email addresses. These must be removed as they are not references. @param ref_sectn: (list) of strings - the reference section lines @return: (list) of strings - the reference section without leading blank lines or email addresses. \"\"\" p_email = re.compile(ur'^\\s*e\\-?mail', re.UNICODE) while ref_sectn and (ref_sectn[0].isspace() or p_email.match(ref_sectn[0])): ref_sectn.pop(0) return ref_sectn\n\n    ### Response: Sometimes, the first lines of the extracted references are completely\n       blank or email addresses. These must be removed as they are not\n       references.\n       @param ref_sectn: (list) of strings - the reference section lines\n       @return: (list) of strings - the reference section without leading\n        blank lines or email addresses..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public synchronized JtxTransactionMode getTxMode(final Class type, final String methodName, final Class[] methodArgTypes, final String unique) { String signature = type.getName() + '#' + methodName + '%' + unique; JtxTransactionMode txMode = txmap.get(signature); if (txMode == null) { if (!txmap.containsKey(signature)) { final Method m; try { m = type.getMethod(methodName, methodArgTypes); } catch (NoSuchMethodException nsmex) { throw new ProxettaException(nsmex); } final TransactionAnnotationValues txAnn = readTransactionAnnotation(m); if (txAnn != null) { txMode = new JtxTransactionMode( txAnn.propagation(), txAnn.isolation(), txAnn.readOnly(), txAnn.timeout() ); } else { txMode = defaultTransactionMode; } txmap.put(signature, txMode); } } return txMode; }\n\n    ### Response:", "ground_truth": "Reads transaction mode from method annotation. Annotations are cached for better performances.\n@param type target class\n@param methodName target method name over which the transaction should be wrapped\n@param methodArgTypes types of arguments, used to find the method\n@param unique unique method fingerprint that contains return and arguments type information", "predict": "The above method reads the transaction attributes of the specified transaction method annotation, and uses these attributes to determine the transaction behavior of the method execution."}, {"ID": 1545, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *Signatory) Verify(chartpath, sigpath string) (*Verification, error) { ver := &Verification{} for _, fname := range []string{chartpath, sigpath} { if fi, err := os.Stat(fname); err != nil { return ver, err } else if fi.IsDir() { return ver, fmt.Errorf(\"%s cannot be a directory\", fname) } } // First verify the signature sig, err := s.decodeSignature(sigpath) if err != nil { return ver, fmt.Errorf(\"failed to decode signature: %s\", err) } by, err := s.verifySignature(sig) if err != nil { return ver, err } ver.SignedBy = by // Second, verify the hash of the tarball. sum, err := DigestFile(chartpath) if err != nil { return ver, err } _, sums, err := parseMessageBlock(sig.Plaintext) if err != nil { return ver, err } sum = \"sha256:\" + sum basename := filepath.Base(chartpath) if sha, ok := sums.Files[basename]; !ok { return ver, fmt.Errorf(\"provenance does not contain a SHA for a file named %q\", basename) } else if sha != sum { return ver, fmt.Errorf(\"sha256 sum does not match for %s: %q != %q\", basename, sha, sum) } ver.FileHash = sum ver.FileName = basename // TODO: when image signing is added, verify that here. return ver, nil }\n\n    ### Response: // Verify checks a signature and verifies that it is legit for a chart..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings( {\"unchecked\"}) public void registerAnnotations(final Class<? extends Annotation>[] annotations) { this.annotations = annotations; this.annotationParsers = new AnnotationParser[annotations.length]; for (int i = 0; i < annotations.length; i++) { annotationParsers[i] = TransactionAnnotationValues.parserFor(annotations[i]); } }\n\n    ### Response:", "ground_truth": "Registers new TX annotations.", "predict": "// Register annotations handles annotations for transaction processing"}, {"ID": 1546, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func lpcwstrToString(ptr *uint16) string { if ptr == nil { return \"\" } var len = 0 for tmp := ptr; *tmp != 0; tmp = (*uint16)(unsafe.Pointer((uintptr(unsafe.Pointer(tmp)) + 2))) { len++ } raw := ptrUcs2Slice(ptr, len) return string(utf16.Decode(raw)) }\n\n    ### Response: // lpcwstrToString converts a nul-terminated Windows wide string to a Go string,.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected TransactionAnnotationValues readTransactionAnnotation(final Method method) { for (AnnotationParser annotationParser : annotationParsers) { TransactionAnnotationValues tad = TransactionAnnotationValues.of(annotationParser, method); if (tad != null) { return tad; } } return null; }\n\n    ### Response:", "ground_truth": "Finds TX annotation.", "predict": "// readTransactionAnnotation reads transaction annotation values from the given method. It looks for transaction annotations on the method level and checks if there any values defined for the annotation, and if there are values defined, populates transactionAnnotationValues with them."}, {"ID": 1547, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def addTrail(self, offset=None, maxlength=None, n=25, c=None, alpha=None, lw=1): \"\"\"Add a trailing line to actor. :param offset: set an offset vector from the object center. :param maxlength: length of trailing line in absolute units :param n: number of segments to control precision :param lw: line width of the trail .. hint:: |trail| |trail.py|_ \"\"\" if maxlength is None: maxlength = self.diagonalSize() * 20 if maxlength == 0: maxlength = 1 if self.trail is None: pos = self.GetPosition() self.trailPoints = [None] * n self.trailSegmentSize = maxlength / n self.trailOffset = offset ppoints = vtk.vtkPoints() # Generate the polyline poly = vtk.vtkPolyData() ppoints.SetData(numpy_to_vtk([pos] * n)) poly.SetPoints(ppoints) lines = vtk.vtkCellArray() lines.InsertNextCell(n) for i in range(n): lines.InsertCellPoint(i) poly.SetPoints(ppoints) poly.SetLines(lines) mapper = vtk.vtkPolyDataMapper() if c is None: if hasattr(self, \"GetProperty\"): col = self.GetProperty().GetColor() else: col = (0.1, 0.1, 0.1) else: col = colors.getColor(c) if alpha is None: alpha = 1 if hasattr(self, \"GetProperty\"): alpha = self.GetProperty().GetOpacity() mapper.SetInputData(poly) tline = Actor() tline.SetMapper(mapper) tline.GetProperty().SetColor(col) tline.GetProperty().SetOpacity(alpha) tline.GetProperty().SetLineWidth(lw) self.trail = tline # holds the vtkActor return self\n\n    ### Response: Add a trailing line to actor.\n\n        :param offset: set an offset vector from the object center.\n        :param maxlength: length of trailing line in absolute units\n        :param n: number of segments to control precision\n        :param lw: line width of the trail\n\n        .. hint:: |trail| |trail.py|_.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public boolean accept(final Node node) { // match element name with node name if (!matchElement(node)) { return false; } // match attributes int totalSelectors = selectorsCount(); for (int i = 0; i < totalSelectors; i++) { Selector selector = getSelector(i); // just attr name existence switch (selector.getType()) { case ATTRIBUTE: if (!((AttributeSelector) selector).accept(node)) { return false; } break; case PSEUDO_CLASS: if (!((PseudoClassSelector) selector).accept(node)) { return false; } break; case PSEUDO_FUNCTION: if (!((PseudoFunctionSelector) selector).accept(node)) { return false; } break; } } return true; }\n\n    ### Response:", "ground_truth": "Accepts single node.", "predict": "\n    Matches an element name (tag name in XML, selector in CSS, XPath path in XML/XHTML documents) of the node to the name of the selector to determine if the node matches the selector criteria described in the selector attributes (in this case element attributes and CSS styles and XPath conditions of the node and the selector respectively) and thus matches the node in terms of its attributes and CSS styles and XPath conditions of the node and the selector respectively"}, {"ID": 1548, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Mul(a, b *T) T { q := T{ a[3]*b[0] + a[0]*b[3] + a[1]*b[2] - a[2]*b[1], a[3]*b[1] + a[1]*b[3] + a[2]*b[0] - a[0]*b[2], a[3]*b[2] + a[2]*b[3] + a[0]*b[1] - a[1]*b[0], a[3]*b[3] - a[0]*b[0] - a[1]*b[1] - a[2]*b[2], } return q.Normalized() }\n\n    ### Response: // Mul multiplies two quaternions..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected boolean matchElement(final Node node) { if (node.getNodeType() != Node.NodeType.ELEMENT) { return false; } String element = getElement(); String nodeName = node.getNodeName(); return element.equals(StringPool.STAR) || element.equals(nodeName); }\n\n    ### Response:", "ground_truth": "Matches element to css selector. All non-element types are ignored.", "predict": "// Matches an element by its name or its content string"}, {"ID": 1549, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _read_para_cert(self, code, cbit, clen, *, desc, length, version): \"\"\"Read HIP CERT parameter. Structure of HIP CERT parameter [RFC 7401]: 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Type | Length | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | CERT group | CERT count | CERT ID | CERT type | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Certificate / +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ / | Padding (variable length) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Octets Bits Name Description 0 0 cert.type Parameter Type 1 15 cert.critical Critical Bit 2 16 cert.length Length of Contents 4 32 cert.group CERT Group 5 40 cert.count CERT Count 6 48 cert.id CERT ID 7 56 cert.cert_type CERT Type 8 64 cert.certificate Certificate ? ? - Padding \"\"\" _ctgp = self._read_unpack(1) _ctct = self._read_unpack(1) _ctid = self._read_unpack(1) _cttp = self._read_unpack(1) _ctdt = self._read_fileng(clen-4) cert = dict( type=desc, critical=cbit, length=clen, group=_GROUP_ID.get(_ctgp, 'Unassigned'), count=_ctct, id=_ctid, cert_type=_CERT_TYPE.get(_cttp, 'Unassigned'), certificate=_ctdt, ) _plen = length - clen if _plen: self._read_fileng(_plen) return cert\n\n    ### Response: Read HIP CERT parameter.\n\n        Structure of HIP CERT parameter [RFC 7401]:\n             0                   1                   2                   3\n             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n            |             Type              |             Length            |\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n            |  CERT group   |  CERT count   |    CERT ID    |   CERT type   |\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n            |                          Certificate                          /\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n            /                               |   Padding (variable length)   |\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n            Octets      Bits        Name                Description\n              0           0     cert.type           Parameter Type\n              1          15     cert.critical       Critical Bit\n              2          16     cert.length         Length of Contents\n              4          32     cert.group          CERT Group\n              5          40     cert.count          CERT Count\n              6          48     cert.id             CERT ID\n              7          56     cert.cert_type      CERT Type\n              8          64     cert.certificate    Certificate\n              ?           ?     -                   Padding.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean accept(final List<Node> currentResults, final Node node, final int index) { // match attributes int totalSelectors = selectorsCount(); for (int i = 0; i < totalSelectors; i++) { Selector selector = getSelector(i); // just attr name existence switch (selector.getType()) { case PSEUDO_FUNCTION: if (!((PseudoFunctionSelector) selector).accept(currentResults, node, index)) { return false; } break; case PSEUDO_CLASS: if (!((PseudoClassSelector) selector).accept(currentResults, node, index)) { return false; } break; default: } } return true; }\n\n    ### Response:", "ground_truth": "Accepts node within current results.", "predict": "\n    Match attributes of the given node to the given results list and to the given index of the results list and decide if the given node matches the given attributes of the given results list and to the given index of the results list or not."}, {"ID": 1550, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function getFiles($directory) { $fileList = []; $files = scandir($directory); $this->log(sprintf(\"Scanning dir %s, found %d files\", $directory, count($files))); foreach ($files as $index => $file) { // recursive retrieve files in subdirectories if (true === is_dir($directory . DIRECTORY_SEPARATOR . $file) && !in_array($file, [\".\", \"..\"])) { $fileList = array_merge( $fileList, $this->getFiles($directory . DIRECTORY_SEPARATOR . $file) ); continue; } // not the file we want if (false === $this->isRequiredFile($file)) { $this->log(sprintf(\"Files %s is not required\", $directory . DIRECTORY_SEPARATOR . $file)); continue; } $this->log(sprintf(\"Collected %s\", $directory . DIRECTORY_SEPARATOR . $file)); $fileList[] = $directory . DIRECTORY_SEPARATOR . $file; } return $fileList; }\n\n    ### Response: Scan a directory and list all files that correspond to given criteria\n@param string $directory\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String unescape(final String value) { if (value.indexOf('\\\\') == -1) { return value; } return StringUtil.remove(value, '\\\\'); }\n\n    ### Response:", "ground_truth": "Unescapes CSS string by removing all backslash characters from it.", "predict": "Remove escape sequences from given string"}, {"ID": 1551, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void unblockCancel(CancelException event) { ArrayList<AsyncWorkListener<T,TError>> listeners; synchronized (this) { if (unblocked) return; unblocked = true; this.cancel = event; if (listenersInline == null) { this.notifyAll(); return; } listeners = listenersInline; listenersInline = new ArrayList<>(2); } Logger log = LCCore.getApplication().getLoggerFactory().getLogger(SynchronizationPoint.class); while (true) { if (!log.debug()) for (int i = 0; i < listeners.size(); ++i) try { listeners.get(i).cancelled(event); } catch (Throwable t) { log.error( \"Exception thrown by an inline listener of AsyncWork: \" + listeners.get(i), t); } else for (int i = 0; i < listeners.size(); ++i) { long start = System.nanoTime(); try { listeners.get(i).cancelled(event); } catch (Throwable t) { log.error( \"Exception thrown by an inline listener of AsyncWork: \" + listeners.get(i), t); } long time = System.nanoTime() - start; if (time > 1000000) // more than 1ms log.debug(\"Listener cancelled took \" + (time / 1000000.0d) + \"ms: \" + listeners.get(i)); } synchronized (this) { if (listenersInline.isEmpty()) { listenersInline = null; listeners = null; this.notifyAll(); break; } listeners.clear(); ArrayList<AsyncWorkListener<T,TError>> tmp = listeners; listeners = listenersInline; listenersInline = tmp; } } }\n\n    ### Response: Cancel this AsyncWork. Equivalent to the method cancel..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private String[] buildJrePackages(final int javaVersionNumber) { final ArrayList<String> packages = new ArrayList<>(); switch (javaVersionNumber) { case 9: case 8: case 7: case 6: case 5: // in Java1.5, the apache stuff moved packages.add(\"com.sun.org.apache\"); // fall through... case 4: if (javaVersionNumber == 4) { packages.add(\"org.apache.crimson\"); packages.add(\"org.apache.xalan\"); packages.add(\"org.apache.xml\"); packages.add(\"org.apache.xpath\"); } packages.add(\"org.ietf.jgss\"); packages.add(\"org.w3c.dom\"); packages.add(\"org.xml.sax\"); // fall through... case 3: packages.add(\"org.omg\"); packages.add(\"com.sun.corba\"); packages.add(\"com.sun.jndi\"); packages.add(\"com.sun.media\"); packages.add(\"com.sun.naming\"); packages.add(\"com.sun.org.omg\"); packages.add(\"com.sun.rmi\"); packages.add(\"sunw.io\"); packages.add(\"sunw.util\"); // fall through... case 2: packages.add(\"com.sun.java\"); packages.add(\"com.sun.image\"); // fall through... case 1: default: // core stuff packages.add(\"sun\"); packages.add(\"java\"); packages.add(\"javax\"); break; } return packages.toArray(new String[0]); }\n\n    ### Response:", "ground_truth": "Builds a set of java core packages.", "predict": "Built packages for corresponding java version numbers to ensure compatibility of apis and code"}, {"ID": 1552, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function log(LoggedQuery $query) { if (!empty($query->params)) { $query->query = $this->_interpolate($query); } $this->_log($query); }\n\n    ### Response: Writes a LoggedQuery into a log\n\n@param \\Cake\\Database\\Log\\LoggedQuery $query to be written in log\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected <T extends Node> T cloneTo(final T dest) { // dest.nodeValue = nodeValue; // already in clone implementations! dest.parentNode = parentNode; if (attributes != null) { dest.attributes = new ArrayList<>(attributes.size()); for (int i = 0, attributesSize = attributes.size(); i < attributesSize; i++) { Attribute attr = attributes.get(i); dest.attributes.add(attr.clone()); } } if (childNodes != null) { dest.childNodes = new ArrayList<>(childNodes.size()); for (int i = 0, childNodesSize = childNodes.size(); i < childNodesSize; i++) { Node child = childNodes.get(i); Node childClone = child.clone(); childClone.parentNode = dest; // fix parent! dest.childNodes.add(childClone); } } return dest; }\n\n    ### Response:", "ground_truth": "Copies all non-final values to the empty cloned object.\nCache-related values are not copied.", "predict": "Clone into dest"}, {"ID": 1553, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func replaceSettings(db Database, collection, key string, values map[string]interface{}) error { op, _, err := replaceSettingsOp(db, collection, key, values) if err != nil { return errors.Annotatef(err, \"settings %q\", key) } err = db.RunTransaction([]txn.Op{op}) if err == txn.ErrAborted { return errors.NotFoundf(\"settings\") } if err != nil { return fmt.Errorf(\"cannot replace settings: %v\", err) } return nil }\n\n    ### Response: // replaceSettings replaces the settings values for key..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void detachFromParent() { if (parentNode == null) { return; } if (parentNode.childNodes != null) { parentNode.childNodes.remove(siblingIndex); parentNode.reindexChildren(); } parentNode = null; }\n\n    ### Response:", "ground_truth": "Removes this node from DOM tree.", "predict": "The method detachFromParent detaches the node from its parent and recalls the child nodes for the parentNode to be recindexed"}, {"ID": 1554, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getProductCollectionFromIds($ids, $limit = false) { $productCollection = []; if (! empty($ids)) { $productCollection = $this->productFactory->create() ->getCollection() ->addIdFilter($ids) ->addAttributeToSelect( ['product_url', 'name', 'store_id', 'small_image', 'price'] ); if ($limit) { $productCollection->getSelect()->limit($limit); } } return $productCollection; }\n\n    ### Response: Get product collection from ids.\n\n@param array $ids\n@param int|bool $limit\n\n@return array|\\Magento\\Catalog\\Model\\ResourceModel\\Product\\Collection.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void addChild(final Node... nodes) { if (nodes.length == 0) { return; // nothing to add } for (Node node : nodes) { node.detachFromParent(); node.parentNode = this; initChildNodes(node); childNodes.add(node); } reindexChildrenOnAdd(nodes.length); }\n\n    ### Response:", "ground_truth": "Appends several child nodes at once.\nReindex is done only once, after all children are added.", "predict": "Add child nodes of given nodes to the document structure."}, {"ID": 1555, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function isPrimitiveType (obj) { return ( typeof obj === 'boolean' || typeof obj === 'number' || typeof obj === 'string' || obj === null || util.isDate(obj) || util.isArray(obj)); }\n\n    ### Response: Tells if an object is a primitive type or a \"real\" object\nArrays are considered primitive.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void insertChild(final Node node, final int index) { node.detachFromParent(); node.parentNode = this; try { initChildNodes(node); childNodes.add(index, node); } catch (IndexOutOfBoundsException ignore) { throw new LagartoDOMException(\"Invalid node index: \" + index); } reindexChildren(); }\n\n    ### Response:", "ground_truth": "Inserts node at given index.", "predict": "Inserts the given child node at the given position into the document order list of this document object."}, {"ID": 1556, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func HTTPRWDI() MiddlewareFunc { return func(b *Bubble) error { for idx, argT := range b.ArgumentTypes { if httpReqType.AssignableTo(argT) { b.Arguments[idx] = reflect.ValueOf(b.R) continue } if httpRespType.AssignableTo(argT) { b.Arguments[idx] = reflect.ValueOf(b.W) continue } } return b.Next() } }\n\n    ### Response: // HTTPRWDI injects Bubble.R and Bubble.W into the bubble.Arguments..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void insertBefore(final Node newChild, final Node refChild) { int siblingIndex = refChild.getSiblingIndex(); refChild.parentNode.insertChild(newChild, siblingIndex); }\n\n    ### Response:", "ground_truth": "Inserts node before provided node.", "predict": "// Inserts the given child node before the reference child node."}, {"ID": 1557, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (cs ClientsService) Create(client Client, secret, token string) error { _, err := newNetworkClient(cs.config).MakeRequest(network.Request{ Method: \"POST\", Path: \"/oauth/clients\", Authorization: network.NewTokenAuthorization(token), Body: network.NewJSONRequestBody(client.toDocument(secret)), AcceptableStatusCodes: []int{http.StatusCreated}, }) if err != nil { return translateError(err) } return nil }\n\n    ### Response: // Create will make a request to UAA to register a client with the given client resource and\n// A token with the \"clients.write\" or \"clients.admin\" scope is required..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void insertBefore(final Node[] newChilds, final Node refChild) { if (newChilds.length == 0) { return; } int siblingIndex = refChild.getSiblingIndex(); refChild.parentNode.insertChild(newChilds, siblingIndex); }\n\n    ### Response:", "ground_truth": "Inserts several child nodes before provided node.", "predict": "// Inserts the given child nodes before the reference child node. The reference child must have been inserted first."}, {"ID": 1558, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *RPCServer) AttachedToExistingProcess(arg AttachedToExistingProcessIn, out *AttachedToExistingProcessOut) error { if c.config.AttachPid != 0 { out.Answer = true } return nil }\n\n    ### Response: // AttachedToExistingProcess returns whether we attached to a running process or not.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void insertAfter(final Node newChild, final Node refChild) { int siblingIndex = refChild.getSiblingIndex() + 1; if (siblingIndex == refChild.parentNode.getChildNodesCount()) { refChild.parentNode.addChild(newChild); } else { refChild.parentNode.insertChild(newChild, siblingIndex); } }\n\n    ### Response:", "ground_truth": "Inserts node after provided node.", "predict": "// Inserts the new child node after the reference child node."}, {"ID": 1559, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function detachShared(SharedEventManagerInterface $events) { if ($events->detach($this->listener,'Zend\\Mvc\\Application')) { $this->listener = null; } return $this; }\n\n    ### Response: Detach all our listeners from the event manager\n\n@param  SharedEventManagerInterface $events\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void insertAfter(final Node[] newChilds, final Node refChild) { if (newChilds.length == 0) { return; } int siblingIndex = refChild.getSiblingIndex() + 1; if (siblingIndex == refChild.parentNode.getChildNodesCount()) { refChild.parentNode.addChild(newChilds); } else { refChild.parentNode.insertChild(newChilds, siblingIndex); } }\n\n    ### Response:", "ground_truth": "Inserts several child nodes after referent node.", "predict": "Inserts the given child nodes after the reference child, moving the reference child after the last child of its parent, or at the end of the list if there is no sibling."}, {"ID": 1560, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def multinomLog2(selectors): \"\"\" Function calculates logarithm 2 of a kind of multinom. selectors: list of integers \"\"\" ln2 = 0.69314718055994528622 noAll = sum(selectors) lgNf = math.lgamma(noAll + 1.0) / ln2 # log2(N!) lgnFac = [] for selector in selectors: if selector == 0 or selector == 1: lgnFac.append(0.0) elif selector == 2: lgnFac.append(1.0) elif selector == noAll: lgnFac.append(lgNf) else: lgnFac.append(math.lgamma(selector + 1.0) / ln2) return lgNf - sum(lgnFac)\n\n    ### Response: Function calculates logarithm 2 of a kind of multinom.\n\n    selectors: list of integers.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void removeAllChilds() { List<Node> removedNodes = childNodes; childNodes = null; childElementNodes = null; childElementNodesCount = 0; if (removedNodes != null) { for (int i = 0, removedNodesSize = removedNodes.size(); i < removedNodesSize; i++) { Node removedNode = removedNodes.get(i); removedNode.detachFromParent(); } } }\n\n    ### Response:", "ground_truth": "Removes all child nodes. Each child node will be detached from this parent.", "predict": "The above method removes all child nodes of the parent node\n    \"\"\"Function removes all child nodes of the parent node\"\"\"\n    childNodes, childElementNodes, childElementNodesCount, and childNodesCount are reserved fields of the parent node. The first three fields store references to the child nodes of the parent node, while the latter stores the number of child nodes of the parent node. The method first resets the child nodes to null and sets the child nodes count to 0. After that it iterates over the child nodes and detaches the corresponding nodes from the parent node. Finally it sets the child nodes and child element nodes to null to free up the reserved fields of the parent node for reuse."}, {"ID": 1561, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    ContentCryptoScheme encryptionSchemeOf(Map<String,String> instructionFile) { if (instructionFile != null) { String cekAlgo = instructionFile.get(Headers.CRYPTO_CEK_ALGORITHM); return ContentCryptoScheme.fromCEKAlgo(cekAlgo); } ObjectMetadata meta = s3obj.getObjectMetadata(); Map<String, String> userMeta = meta.getUserMetadata(); String cekAlgo = userMeta.get(Headers.CRYPTO_CEK_ALGORITHM); return ContentCryptoScheme.fromCEKAlgo(cekAlgo); }\n\n    ### Response: Returns the original crypto scheme used for encryption, which may\ndiffer from the crypto scheme used for decryption during, for example,\na range-get operation.\n\n@param instructionFile\nthe instruction file of the s3 object; or null if there is\nnone..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Node findChildNodeWithName(final String name) { if (childNodes == null) { return null; } for (final Node childNode : childNodes) { if (childNode.getNodeName().equals(name)) { return childNode; } } return null; }\n\n    ### Response:", "ground_truth": "Finds the first child node with given node name.", "predict": "Find the child node of given name from child nodes of the parent node\n\n// Given parameter name,\n// If child nodes of parent node is null,\n// return null,\n// Else,\n// For each child node of parent node,\n// If name of child node matches given parameter,\n// Return child node,\n// Else,\n// Return null"}, {"ID": 1562, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def save(self, output=''): \"\"\"Save the document. If no output is provided the file will be saved in the same location. Otherwise output can determine a target directory or file. \"\"\" self.file = self._get_output_file(output) with open(self.file, 'w', encoding='utf-8') as f: self.write(f)\n\n    ### Response: Save the document.\n        If no output is provided the file will be saved in the same location. Otherwise output\n        can determine a target directory or file..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Node[] filterChildNodes(final Predicate<Node> nodePredicate) { if (childNodes == null) { return new Node[0]; } return childNodes.stream() .filter(nodePredicate) .toArray(Node[]::new); }\n\n    ### Response:", "ground_truth": "Filters child nodes.", "predict": "Filters child nodes of the given node to produce an output of child nodes filtered by the given predicate.<BR> If no child nodes exist for the given node, returns an output of child nodes of 0 length.<BR> If child nodes exist and the given predicate succeeds for some of the nodes, returns an output of child nodes with the filtered nodes.<BR> If child nodes exist and the given predicate succeeds for none of the nodes, returns an output of child nodes with the filtered nodes.<BR> If child nodes exist and the given predicate succeeds for some of the nodes and some of the nodes fail the predicate and vice versa, returns an output of child nodes with the filtered and non-filtered nodes.<BR> If child nodes exist and the given predicate succeeds for none of the nodes and some of the nodes succeed the predicate and vice versa and the given predicate succeeds for some of the nodes and vice versa and vice versa and vice versa and vice versa and vice versa and vice versa and vice versa"}, {"ID": 1563, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def CopyTree(self, selection, *args, **kwargs): \"\"\" Copy the tree while supporting a rootpy.tree.cut.Cut selection in addition to a simple string. \"\"\" return super(BaseTree, self).CopyTree(str(selection), *args, **kwargs)\n\n    ### Response: Copy the tree while supporting a rootpy.tree.cut.Cut selection in\n        addition to a simple string..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean check() { if (childNodes == null) { return true; } // children int siblingElementIndex = 0; for (int i = 0, childNodesSize = childNodes.size(); i < childNodesSize; i++) { Node childNode = childNodes.get(i); if (childNode.siblingIndex != i) { return false; } if (childNode.getNodeType() == NodeType.ELEMENT) { if (childNode.siblingElementIndex != siblingElementIndex) { return false; } siblingElementIndex++; } } if (childElementNodesCount != siblingElementIndex) { return false; } // child element nodes if (childElementNodes != null) { if (childElementNodes.length != childElementNodesCount) { return false; } int childCount = getChildNodesCount(); for (int i = 0; i < childCount; i++) { Node child = getChild(i); if (child.siblingElementIndex >= 0) { if (childElementNodes[child.siblingElementIndex] != child) { return false; } } } } // sibling names if (siblingNameIndex != -1) { List<Node> siblings = parentNode.childNodes; int index = 0; for (int i = 0, siblingsSize = siblings.size(); i < siblingsSize; i++) { Node sibling = siblings.get(i); if (sibling.siblingNameIndex == -1 && nodeType == NodeType.ELEMENT && nodeName.equals(sibling.getNodeName())) { if (sibling.siblingNameIndex != index++) { return false; } } } } // process children for (Node childNode : childNodes) { if (!childNode.check()) { return false; } } return true; }\n\n    ### Response:", "ground_truth": "Checks the health of child nodes. Useful during complex tree manipulation,\nto check if everything is OK. Not optimized for speed, should be used just\nfor testing purposes.", "predict": "\n    The function checks if the given document contains the given child nodes and names and if the child nodes and names match the given child nodes and names of the given document and the given child nodes and names of the given document and names of the given document and names of the given document and names of the given document and names of the given document and names of the given document and names of the given document and names of the given document and names of the given document and names of the given document and names of the given document and names of the given document and names of the given document and names of the given document and names of the given document and names of the given document and names of the given document and names of the given document and names of the given document and names of the given document and names of the given document and names of the given document and names of the given document and names of the given document and names of the given document and names of the given document and names of the given document and names of the given document and names of the given document and names of"}, {"ID": 1564, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def triangle_plots(self, basename=None, format='png', **kwargs): \"\"\"Returns two triangle plots, one with physical params, one observational :param basename: If basename is provided, then plots will be saved as \"[basename]_physical.[format]\" and \"[basename]_observed.[format]\" :param format: Format in which to save figures (e.g., 'png' or 'pdf') :param **kwargs: Additional keyword arguments passed to :func:`StarModel.triangle` and :func:`StarModel.prop_triangle` :return: * Physical parameters triangle plot (mass, radius, Teff, feh, age, distance) * Observed properties triangle plot. \"\"\" if self.fit_for_distance: fig1 = self.triangle(plot_datapoints=False, params=['mass','radius','Teff','logg','feh','age', 'distance','AV'], **kwargs) else: fig1 = self.triangle(plot_datapoints=False, params=['mass','radius','Teff','feh','age'], **kwargs) if basename is not None: plt.savefig('{}_physical.{}'.format(basename,format)) plt.close() fig2 = self.prop_triangle(**kwargs) if basename is not None: plt.savefig('{}_observed.{}'.format(basename,format)) plt.close() return fig1, fig2\n\n    ### Response: Returns two triangle plots, one with physical params, one observational\n\n        :param basename:\n            If basename is provided, then plots will be saved as\n            \"[basename]_physical.[format]\" and \"[basename]_observed.[format]\"\n\n        :param format:\n            Format in which to save figures (e.g., 'png' or 'pdf')\n\n        :param **kwargs:\n            Additional keyword arguments passed to :func:`StarModel.triangle`\n            and :func:`StarModel.prop_triangle`\n\n        :return:\n             * Physical parameters triangle plot (mass, radius, Teff, feh, age, distance)\n             * Observed properties triangle plot..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void initChildElementNodes() { if (childElementNodes == null) { childElementNodes = new Element[childElementNodesCount]; int childCount = getChildNodesCount(); for (int i = 0; i < childCount; i++) { Node child = getChild(i); if (child.siblingElementIndex >= 0) { childElementNodes[child.siblingElementIndex] = (Element) child; } } } }\n\n    ### Response:", "ground_truth": "Initializes list of child elements.", "predict": "\n    Defines an initialization method to add child Element nodes to the document structure during document construction. It creates an Element array to hold the child Element nodes and populates it with the child Element nodes of the document during document construction. It overrides the default behavior of the Document object to add child Element nodes during document construction to make sure that the document structure contains the child Element nodes during document construction for proper document rendering"}, {"ID": 1565, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void main(final String[] args) throws Exception { LOG.log(Level.INFO, \"Entering EvaluatorShimLauncher.main().\"); final Injector injector = Tang.Factory.getTang().newInjector(parseCommandLine(args)); final EvaluatorShimLauncher launcher = injector.getInstance(EvaluatorShimLauncher.class); launcher.launch(); }\n\n    ### Response: The starting point of the evaluator shim launcher..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void initSiblingNames() { if (siblingNameIndex == -1) { List<Node> siblings = parentNode.childNodes; int index = 0; for (int i = 0, siblingsSize = siblings.size(); i < siblingsSize; i++) { Node sibling = siblings.get(i); if (sibling.siblingNameIndex == -1 && nodeType == NodeType.ELEMENT && nodeName.equals(sibling.getNodeName())) { sibling.siblingNameIndex = index++; } } } }\n\n    ### Response:", "ground_truth": "Initializes siblings elements of the same name.", "predict": "Precomputing names of sibling nodes during document initialization to speed up document traversals"}, {"ID": 1566, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def convert_language_code(django_lang): \"\"\" Converts Django language codes \"ll-cc\" into ISO codes \"ll_CC\" or \"ll\" :param django_lang: Django language code as ll-cc :type django_lang: str :return: ISO language code as ll_CC :rtype: str \"\"\" lang_and_country = django_lang.split('-') try: return '_'.join((lang_and_country[0], lang_and_country[1].upper())) except IndexError: return lang_and_country[0]\n\n    ### Response: Converts Django language codes \"ll-cc\" into ISO codes \"ll_CC\" or \"ll\"\n\n    :param django_lang: Django language code as ll-cc\n    :type django_lang: str\n    :return: ISO language code as ll_CC\n    :rtype: str.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void initChildNodes(final Node newNode) { if (childNodes == null) { childNodes = new ArrayList<>(); } if (ownerDocument != null) { if (newNode.ownerDocument != ownerDocument) { changeOwnerDocument(newNode, ownerDocument); } } }\n\n    ### Response:", "ground_truth": "Initializes child nodes list when needed.\nAlso fix owner document for new node, if needed.", "predict": "Initiates child nodes of the given node and makes sure the child nodes and the owner document of the node match"}, {"ID": 1567, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getReadConnection(Server $preferredServer = null) : IConnection { if ($preferredServer !== null) { $this->addServer('custom', $preferredServer); $this->setReadConnection($preferredServer); } elseif ($this->readConnection == null) { $this->setReadConnection(); } return $this->readConnection; }\n\n    ### Response: Gets the connection used for read queries\n\n@param Server $preferredServer The preferred server to use\n@return IConnection The connection to use for reads\n@throws RuntimeException Thrown if the connection pool wasn't configured correctly.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void changeOwnerDocument(final Node node, final Document ownerDocument) { node.ownerDocument = ownerDocument; int childCount = node.getChildNodesCount(); for (int i = 0; i < childCount; i++) { Node child = node.getChild(i); changeOwnerDocument(child, ownerDocument); } }\n\n    ### Response:", "ground_truth": "Changes owner document for given node and all its children.", "predict": "Allows you to change the document for a node\n\n/**\n * Allows you to change the document for a node\n *\n * @param Node node The node to change\n * @param Document ownerDocument The document to change to\n * @throws Exception Thrown if the node does not exist\n * @since 1.5\n */\npublic void changeOwnerDocument(Node node, Document ownerDocument) {\n node.ownerDocument = ownerDocument;\n int childCount = node.getChildNodesCount();\n for (int i = 0; i < childCount; i++) {\n node.getChild(i).changeOwnerDocument(node, ownerDocument);\n };\n};"}, {"ID": 1568, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def predict(self, data, num_iteration=-1, raw_score=False, pred_leaf=False, pred_contrib=False, data_has_header=False, is_reshape=True): \"\"\"Predict logic. Parameters ---------- data : string, numpy array, pandas DataFrame, H2O DataTable's Frame or scipy.sparse Data source for prediction. When data type is string, it represents the path of txt file. num_iteration : int, optional (default=-1) Iteration used for prediction. raw_score : bool, optional (default=False) Whether to predict raw scores. pred_leaf : bool, optional (default=False) Whether to predict leaf index. pred_contrib : bool, optional (default=False) Whether to predict feature contributions. data_has_header : bool, optional (default=False) Whether data has header. Used only for txt data. is_reshape : bool, optional (default=True) Whether to reshape to (nrow, ncol). Returns ------- result : numpy array Prediction result. \"\"\" if isinstance(data, Dataset): raise TypeError(\"Cannot use Dataset instance for prediction, please use raw data instead\") data = _data_from_pandas(data, None, None, self.pandas_categorical)[0] predict_type = C_API_PREDICT_NORMAL if raw_score: predict_type = C_API_PREDICT_RAW_SCORE if pred_leaf: predict_type = C_API_PREDICT_LEAF_INDEX if pred_contrib: predict_type = C_API_PREDICT_CONTRIB int_data_has_header = 1 if data_has_header else 0 if num_iteration > self.num_total_iteration: num_iteration = self.num_total_iteration if isinstance(data, string_type): with _TempFile() as f: _safe_call(_LIB.LGBM_BoosterPredictForFile( self.handle, c_str(data), ctypes.c_int(int_data_has_header), ctypes.c_int(predict_type), ctypes.c_int(num_iteration), c_str(self.pred_parameter), c_str(f.name))) lines = f.readlines() nrow = len(lines) preds = [float(token) for line in lines for token in line.split('\\t')] preds = np.array(preds, dtype=np.float64, copy=False) elif isinstance(data, scipy.sparse.csr_matrix): preds, nrow = self.__pred_for_csr(data, num_iteration, predict_type) elif isinstance(data, scipy.sparse.csc_matrix): preds, nrow = self.__pred_for_csc(data, num_iteration, predict_type) elif isinstance(data, np.ndarray): preds, nrow = self.__pred_for_np2d(data, num_iteration, predict_type) elif isinstance(data, list): try: data = np.array(data) except BaseException: raise ValueError('Cannot convert data list to numpy array.') preds, nrow = self.__pred_for_np2d(data, num_iteration, predict_type) elif isinstance(data, DataTable): preds, nrow = self.__pred_for_np2d(data.to_numpy(), num_iteration, predict_type) else: try: warnings.warn('Converting data to scipy sparse matrix.') csr = scipy.sparse.csr_matrix(data) except BaseException: raise TypeError('Cannot predict data for type {}'.format(type(data).__name__)) preds, nrow = self.__pred_for_csr(csr, num_iteration, predict_type) if pred_leaf: preds = preds.astype(np.int32) if is_reshape and preds.size != nrow: if preds.size % nrow == 0: preds = preds.reshape(nrow, -1) else: raise ValueError('Length of predict result (%d) cannot be divide nrow (%d)' % (preds.size, nrow)) return preds\n\n    ### Response: Predict logic.\n\n        Parameters\n        ----------\n        data : string, numpy array, pandas DataFrame, H2O DataTable's Frame or scipy.sparse\n            Data source for prediction.\n            When data type is string, it represents the path of txt file.\n        num_iteration : int, optional (default=-1)\n            Iteration used for prediction.\n        raw_score : bool, optional (default=False)\n            Whether to predict raw scores.\n        pred_leaf : bool, optional (default=False)\n            Whether to predict leaf index.\n        pred_contrib : bool, optional (default=False)\n            Whether to predict feature contributions.\n        data_has_header : bool, optional (default=False)\n            Whether data has header.\n            Used only for txt data.\n        is_reshape : bool, optional (default=True)\n            Whether to reshape to (nrow, ncol).\n\n        Returns\n        -------\n        result : numpy array\n            Prediction result..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Node getPreviousSiblingName() { if (nodeName == null) { return null; } initSiblingNames(); int index = siblingNameIndex -1; for (int i = siblingIndex; i >= 0; i--) { Node sibling = parentNode.childNodes.get(i); if ((index == sibling.siblingNameIndex) && nodeName.equals(sibling.getNodeName())) { return sibling; } } return null; }\n\n    ### Response:", "ground_truth": "Returns this node's previous sibling element with the same name.", "predict": "Previous sibling names can be retrieved by the Node object by calling the method getPreviousSiblingName(). The method first checks if the Node object has been initialized and the names of its siblings have been retrieved by the Node.initSiblingNames() method. If the Node object has been initialized and the names of its siblings have been retrieved, the method traverses through the Node object's siblings by decrementing the parameterized parameter, int index, and checking if the name of the Node object's previous sibling matches the name of the Node object's sibling by calling the Node.nodeName.equals(sibling.getNodeName()) method. If the name of the Node object's previous sibling matches the name of the Node object's sibling, the Node object's previous sibling name is retrieved and returned by the method. Otherwise, the Node object's previous sibling name is set to null."}, {"ID": 1569, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public <E> E read(long sequence) { checkReadSequence(sequence); return (E) items[toIndex(sequence)]; }\n\n    ### Response: Reads one item from the ringbuffer.\n\n@param sequence the sequence of the item to read\n@param       ringbuffer item type\n@return the ringbuffer item\n@throws StaleSequenceException if the sequence is smaller then {@link #getHeadSequence()}\nor larger than {@link #getTailSequence()}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getTextContent() { StringBuilder sb = new StringBuilder(getChildNodesCount() + 1); appendTextContent(sb); return sb.toString(); }\n\n    ### Response:", "ground_truth": "Returns the text content of this node and its descendants.\n@see #appendTextContent(Appendable)", "predict": "Get the contents of this document as a String with normal document structure and proper indentation and newline values preserved"}, {"ID": 1570, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def select_best_candidate(candidate_models): \"\"\" Select and return the best candidate model based on r-squared and qualification. Parameters ---------- candidate_models : :any:`list` of :any:`eemeter.CalTRACKUsagePerDayCandidateModel` Candidate models to select from. Returns ------- (best_candidate, warnings) : :any:`tuple` of :any:`eemeter.CalTRACKUsagePerDayCandidateModel` or :any:`None` and :any:`list` of `eemeter.EEMeterWarning` Return the candidate model with highest r-squared or None if none meet the requirements, and a list of warnings about this selection (or lack of selection). \"\"\" best_r_squared_adj = -np.inf best_candidate = None # CalTrack 3.4.3.3 for candidate in candidate_models: if ( candidate.status == \"QUALIFIED\" and candidate.r_squared_adj > best_r_squared_adj ): best_candidate = candidate best_r_squared_adj = candidate.r_squared_adj if best_candidate is None: warnings = [ EEMeterWarning( qualified_name=\"eemeter.caltrack_daily.select_best_candidate.no_candidates\", description=\"No qualified model candidates available.\", data={ \"status_count:{}\".format(status): count for status, count in Counter( [c.status for c in candidate_models] ).items() }, ) ] return None, warnings return best_candidate, []\n\n    ### Response: Select and return the best candidate model based on r-squared and\n    qualification.\n\n    Parameters\n    ----------\n    candidate_models : :any:`list` of :any:`eemeter.CalTRACKUsagePerDayCandidateModel`\n        Candidate models to select from.\n\n    Returns\n    -------\n    (best_candidate, warnings) : :any:`tuple` of :any:`eemeter.CalTRACKUsagePerDayCandidateModel` or :any:`None` and :any:`list` of `eemeter.EEMeterWarning`\n        Return the candidate model with highest r-squared or None if none meet\n        the requirements, and a list of warnings about this selection (or lack\n        of selection)..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getHtml() { LagartoDomBuilderConfig lagartoDomBuilderConfig; if (ownerDocument == null) { lagartoDomBuilderConfig = ((Document) this).getConfig(); } else { lagartoDomBuilderConfig = ownerDocument.getConfig(); } LagartoHtmlRenderer lagartoHtmlRenderer = lagartoDomBuilderConfig.getLagartoHtmlRenderer(); return lagartoHtmlRenderer.toHtml(this, new StringBuilder()); }\n\n    ### Response:", "ground_truth": "Generates HTML.", "predict": "Get the HTML string of this document, or its document parent, as returned by the Lagarto HTML renderer."}, {"ID": 1571, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function convert($data, $from, $to, $safe_mode = false, $safe_char = 0xFFFC) { self::$safe_mode = ($safe_mode) ? true : false; self::$safe_char = ($safe_char) ? $safe_char : 0xFFFC; if (self::$safe_mode) self::$allow_overlong = true; if (!in_array($from, self::$mechs)) throw new Exception('Invalid input format specified'); if (!in_array($to, self::$mechs)) throw new Exception('Invalid output format specified'); if ($from != 'ucs4array') eval('$data = self::'.$from.'_ucs4array($data);'); if ($to != 'ucs4array') eval('$data = self::ucs4array_'.$to.'($data);'); return $data; }\n\n    ### Response: The actual conversion routine\n\n@param mixed $data  The data to convert, usually a string, array when converting from UCS-4 array\n@param string $from  Original encoding of the data\n@param string $to  Target encoding of the data\n@param bool $safe_mode  SafeMode tries to correct invalid codepoints\n@return mixed  False on failure, String or array on success, depending on target encoding\n@access public\n@since 0.0.1.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getInnerHtml() { LagartoDomBuilderConfig lagartoDomBuilderConfig; if (ownerDocument == null) { lagartoDomBuilderConfig = ((Document) this).getConfig(); } else { lagartoDomBuilderConfig = ownerDocument.getConfig(); } LagartoHtmlRenderer lagartoHtmlRenderer = lagartoDomBuilderConfig.getLagartoHtmlRenderer(); return lagartoHtmlRenderer.toInnerHtml(this, new StringBuilder()); }\n\n    ### Response:", "ground_truth": "Generates inner HTML.", "predict": "The method generates the innerHTML string of the document"}, {"ID": 1572, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Client) CurrentWrappingLookupFunc() WrappingLookupFunc { c.modifyLock.RLock() defer c.modifyLock.RUnlock() return c.wrappingLookupFunc }\n\n    ### Response: // CurrentWrappingLookupFunc sets a lookup function that returns desired wrap TTLs\n// for a given operation and path.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void visitChildren(final NodeVisitor nodeVisitor) { if (childNodes != null) { for (int i = 0, childNodesSize = childNodes.size(); i < childNodesSize; i++) { Node childNode = childNodes.get(i); childNode.visit(nodeVisitor); } } }\n\n    ### Response:", "ground_truth": "Visits children nodes.", "predict": "The given method iterates over its child nodes and visits each node in turn, passing it for inspection to the NodeVisitor parameter."}, {"ID": 1573, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def rebuild( self ): \"\"\" Clears out all the child widgets from this widget and creates the widget that best matches the column properties for this edit. \"\"\" plugins.init() self.blockSignals(True) self.setUpdatesEnabled(False) # clear the old editor if ( self._editor ): self._editor.close() self._editor.setParent(None) self._editor.deleteLater() self._editor = None # create a new widget plugin_class = plugins.widgets.get(self._columnType) if ( plugin_class ): self._editor = plugin_class(self) self.layout().addWidget(self._editor) self.blockSignals(False) self.setUpdatesEnabled(True)\n\n    ### Response: Clears out all the child widgets from this widget and creates the \r\n        widget that best matches the column properties for this edit..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getCssPath() { StringBuilder path = new StringBuilder(); Node node = this; while (node != null) { String nodeName = node.getNodeName(); if (nodeName != null) { StringBuilder sb = new StringBuilder(); sb.append(' ').append(nodeName); String id = node.getAttribute(\"id\"); if (id != null) { sb.append('#').append(id); } path.insert(0, sb); } node = node.getParentNode(); } if (path.charAt(0) == ' ') { return path.substring(1); } return path.toString(); }\n\n    ### Response:", "ground_truth": "Returns CSS path to this node from document root.", "predict": "The method generates the CSS path of the widget"}, {"ID": 1574, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void doBatchStart(String batch, Object args) { checkOpen(); JsonObject message = createMessage(args) .putString(\"batch\", batch) .putString(\"action\", \"startBatch\"); if (open && !paused) { if (log.isDebugEnabled()) { log.debug(String.format(\"%s - Batch start: Batch[batch=%s]\", this, batch)); } eventBus.send(inAddress, message); } checkFull(); }\n\n    ### Response: Sends a batch start message..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void onDecoraTag(final Tag tag) { String tagName = tag.getName().toString(); if (tag.getType() == TagType.SELF_CLOSING) { checkNestedDecoraTags(); decoraTagName = tagName.substring(7); decoraTagStart = tag.getTagPosition(); decoraTagEnd = tag.getTagPosition() + tag.getTagLength(); defineDecoraTag(); return; } if (tag.getType() == TagType.START) { checkNestedDecoraTags(); decoraTagName = tagName.substring(7); decoraTagStart = tag.getTagPosition(); decoraTagDefaultValueStart = tag.getTagPosition() + tag.getTagLength(); return; } // closed tag type decoraTagEnd = tag.getTagPosition() + tag.getTagLength(); decoraTagDefaultValueEnd = tag.getTagPosition(); defineDecoraTag(); }\n\n    ### Response:", "ground_truth": "Handle Decora tags.", "predict": "Defines the decora tag"}, {"ID": 1575, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String serviceName_pool_POST(String serviceName, String poolName) throws IOException { String qPath = \"/dedicated/ceph/{serviceName}/pool\"; StringBuilder sb = path(qPath, serviceName); HashMap<String, Object>o = new HashMap<String, Object>(); addBody(o, \"poolName\", poolName); String resp = exec(qPath, \"POST\", sb.toString(), o); return convertTo(resp, String.class); }\n\n    ### Response: Create a new ceph pool\n\nREST: POST /dedicated/ceph/{serviceName}/pool\n@param serviceName [required] ID of cluster\n@param poolName [required] Name of new pool\n\nAPI beta.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void onIdAttrStart(final Tag tag) { String id = tag.getId().toString().substring(7); String tagName; String idName; int dashIndex = id.indexOf('-'); if (dashIndex == -1) { tagName = id; idName = null; } else { tagName = id.substring(0, dashIndex); idName = id.substring(dashIndex + 1); } if (tag.getType() == TagType.SELF_CLOSING) { checkNestedDecoraTags(); decoraTagName = tagName; decoraIdName = idName; decoraTagStart = tag.getTagPosition(); decoraTagEnd = tag.getTagPosition() + tag.getTagLength(); defineDecoraTag(); return; } if (tag.getType() == TagType.START) { checkNestedDecoraTags(); decoraTagName = tagName; decoraIdName = idName; decoraTagStart = tag.getTagPosition(); decoraTagDefaultValueStart = tag.getTagPosition() + tag.getTagLength(); closingTagName = tag.getName().toString(); closingTagDeepLevel = tag.getDeepLevel(); } }\n\n    ### Response:", "ground_truth": "Handle open and empty ID attribute tags.", "predict": "ID: XXXXX\n     * Check for nested decorative tags\n     * Define decorative tag\n     * Check for ID and ID name"}, {"ID": 1576, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String get(String attributeName, String attributeNamespace) { return attributes.get(new XAttributeName(attributeName, attributeNamespace, null)); }\n\n    ### Response: Retrieve the specific attribute.\n@param attributeName the attribute name\n@param attributeNamespace the attribute namespace URI\n@return the attribute value or null if not present.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void defineDecoraTag() { DecoraTag decoraTag = decoraTagDefaultValueStart == 0 ? new DecoraTag(decoraTagName, decoraIdName, decoraTagStart, decoraTagEnd) : new DecoraTag( decoraTagName, decoraIdName, decoraTagStart, decoraTagEnd, decoraTagDefaultValueStart, decoraTagDefaultValueEnd - decoraTagDefaultValueStart); decoraTags.add(decoraTag); decoraTagName = null; decoraIdName = null; closingTagName = null; decoraTagDefaultValueStart = 0; }\n\n    ### Response:", "ground_truth": "Defines Decora tag position inside decorator content.\nResets current Decora tag tracking.", "predict": "Defines the Decora tag attributes and its values in the document \n    If the default values of the Decora attributes have been changed, the method may be invoked to refresh the values of the Decora attributes in the document"}, {"ID": 1577, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function (evt) { var args = (this._apply === true && ariaUtilsType.isArray(this._args)) ? this._args.slice() : [this._args]; var resIndex = (this._resIndex === undefined) ? 0 : this._resIndex; if (resIndex > -1) { args.splice(resIndex, 0, evt); } return this._function.apply(this._scope, args); }\n\n    ### Response: Execute the callback. It is equivalent to Callback.apply\n@param {Object} event.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public JoyProxetta addProxyAspect(final ProxyAspect proxyAspect) { requireNotStarted(proxetta); this.proxyAspects.add(proxyAspect); return this; }\n\n    ### Response:", "ground_truth": "Adds a proxy aspect.", "predict": "Override the default behavior of the method addProxyAspect to add the given ProxyAspect to the list of ProxyAspect objects of the Proxy object"}, {"ID": 1578, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def replace_records(self, domain, records, record_type=None, name=None): \"\"\"This will replace all records at the domain. Record type and record name can be provided to filter which records to replace. :param domain: the domain to replace records at :param records: the records you will be saving :param record_type: the type of records you want to replace (eg. only replace 'A' records) :param name: the name of records you want to replace (eg. only replace records with name 'test') :return: True if no exceptions occurred \"\"\" url = self._build_record_url(domain, name=name, record_type=record_type) self._put(url, json=records) # If we didn't get any exceptions, return True to let the user know return True\n\n    ### Response: This will replace all records at the domain.  Record type and record name can be provided to filter\n        which records to replace.\n\n        :param domain: the domain to replace records at\n        :param records: the records you will be saving\n        :param record_type: the type of records you want to replace (eg. only replace 'A' records)\n        :param name: the name of records you want to replace (eg. only replace records with name 'test')\n\n        :return: True if no exceptions occurred.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void addRootPackage(final String rootPackage, String mapping) { if (packages == null) { packages = new String[0]; } if (mappings == null) { mappings = new String[0]; } // fix mapping if (mapping.length() > 0) { // mapping must start with the slash if (!mapping.startsWith(StringPool.SLASH)) { mapping = StringPool.SLASH + mapping; } // mapping must NOT end with the slash if (mapping.endsWith(StringPool.SLASH)) { mapping = StringUtil.substring(mapping, 0, -1); } } // detect duplicates for (int i = 0; i < packages.length; i++) { if (packages[i].equals(rootPackage)) { if (mappings[i].equals(mapping)) { // both package and the mappings are the same return; } throw new MadvocException(\"Different mappings for the same root package: \" + rootPackage); } } packages = ArraysUtil.append(packages, rootPackage); mappings = ArraysUtil.append(mappings, mapping); }\n\n    ### Response:", "ground_truth": "Adds root package and its path mapping. Duplicate root packages\nare ignored, if mapping path is equals, otherwise exception is thrown.", "predict": "\n    The given method generates and updates the root package and corresponding mappings of the given application. The given method first creates an empty list of root packages and corresponding mappings of the given application if the parameter of the method, i.e., root package, does not exist in the given list of root packages and corresponding mappings of the given application. After creating an empty list of root packages and corresponding mappings of the given application, this method appends the given root package to the given list of root packages and corresponding mappings of the given application and updates corresponding mappings of the given root package to the given mapping of the given root package. If the given parameter of the method, i.e., root package, and corresponding parameter of the method, i.e., mappings, already exists in the given list of root packages and corresponding mappings of the given application, then the given parameter of the method, i.e., root package, and corresponding parameter of the method, i.e., mappings, are updated to the given parameter of the"}, {"ID": 1579, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function underscore($camel_cased_word){ $word = $camel_cased_word; $word = preg_replace('/\\\\\\/', '/', $word); $acronym_regex = static::inflections()->acronym_regex; $word = preg_replace_callback(\"/(?:([A-Za-z\\d])|^)({$acronym_regex})(?=\\b|[^a-z])/\", function($matches){ return \"{$matches[1]}\" . ($matches[1] ? '_' : '') . strtolower($matches[2]); }, $word); $word = preg_replace('/([A-Z\\d]+)([A-Z][a-z])/','$1_$2', $word); $word = preg_replace('/([a-z\\d])([A-Z])/','$1_$2', $word); $word = strtr($word, '-', '_'); $word = strtolower($word); return $word; }\n\n    ### Response: Makes an underscored, lowercase form from the expression in the string.\n\nChanges '\\' to '/' to convert namespaces to paths.\n\nExamples:\nunderscore(\"ActiveRecord\")         # => \"active_record\"\nunderscore(\"ActiveRecord\\Errors\")  # => \"active_record/errors\"\n\nAs a rule of thumb you can think of +underscore+ as the inverse of +camelize+,\nthough there are cases where that does not hold:\n\ncamelize(underscore(\"SSLError\")) # => \"SslError\"\n\n@param string $camel_cased_word\n@return string Underscored $camel_cased_word\n@author Koen Punt.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void addRootPackageOf(final Class actionClass, final String mapping) { addRootPackage(actionClass.getPackage().getName(), mapping); }\n\n    ### Response:", "ground_truth": "Sets root package to package of given class.", "predict": "Adds the given mapping to the given root package of the given actionClass."}, {"ID": 1580, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @NotNull public static List<String> toListWithEscaped(@Nullable final String stringList, @NotNull final String delimiter) { return new ArrayList<>(Arrays.asList(toArrayWithEscaped(stringList, delimiter))); }\n\n    ### Response: Splits the stringList by the delimiter into a List of strings without ignoring the escaped delimiters\n\n@param stringList the string to be split\n@param delimiter  the delimiter by which to split the stringArray\n@return a list of Strings.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String findRootPackageForActionPath(final String actionPath) { if (mappings == null) { return null; } int ndx = -1; int delta = Integer.MAX_VALUE; for (int i = 0; i < mappings.length; i++) { String mapping = mappings[i]; boolean found = false; if (actionPath.equals(mapping)) { found = true; } else { mapping += StringPool.SLASH; if (actionPath.startsWith(mapping)) { found = true; } } if (found) { int distance = actionPath.length() - mapping.length(); if (distance < delta) { ndx = i; delta = distance; } } } if (ndx == -1) { return null; } return packages[ndx]; }\n\n    ### Response:", "ground_truth": "Finds closest root package for the given action path.", "predict": "The function identifies the root package of the given action path by iterating over the mappings and testing if the given action path matches any of the mappings of the given bundle. If there is a match, the corresponding bundle indices of the matching mappings are returned to form the root package of the given action path. If there is no match, null is returned indicating that there is no matching root package for the given action path."}, {"ID": 1581, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def mkdir_interactive(dirpath): \"\"\" Create a directory if required. This will query the user for a confirmation. Args: dirname: The path to create. \"\"\" from benchbuild.utils.cmd import mkdir if os.path.exists(dirpath): return response = ui.ask( \"The directory {dirname} does not exist yet. \" \"Should I create it?\".format(dirname=dirpath), default_answer=True, default_answer_str=\"yes\") if response: mkdir(\"-p\", dirpath) print(\"Created directory {0}.\".format(dirpath))\n\n    ### Response: Create a directory if required.\n\n    This will query the user for a confirmation.\n\n    Args:\n        dirname: The path to create..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String resolveValidationMessage(final HttpServletRequest request, final Violation violation) { ValidationConstraint vc = violation.getConstraint(); String key = vc != null ? vc.getClass().getName() : violation.getName(); String msg = LocalizationUtil.findMessage(request, key); if (msg != null) { return beanTemplateParser.parseWithBean(msg, violation); } return null; }\n\n    ### Response:", "ground_truth": "Prepares validation messages.\nKey is either validation constraint class name or violation name.", "predict": "Resolves the given validation message from the given HTTP request. It looks up the corresponding bean definition to retrieve the message to display and returns it if found, otherwise returns null."}, {"ID": 1582, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def users(self): \"\"\" Access the users :returns: twilio.rest.chat.v2.service.user.UserList :rtype: twilio.rest.chat.v2.service.user.UserList \"\"\" if self._users is None: self._users = UserList(self._version, service_sid=self._solution['sid'], ) return self._users\n\n    ### Response: Access the users\n\n        :returns: twilio.rest.chat.v2.service.user.UserList\n        :rtype: twilio.rest.chat.v2.service.user.UserList.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public BeanReferences removeDuplicateNames() { if (names.length < 2) { return this; } int nullCount = 0; for (int i = 1; i < names.length; i++) { String thisRef = names[i]; if (thisRef == null) { nullCount++; continue; } for (int j = 0; j < i; j++) { if (names[j] == null) { continue; } if (thisRef.equals(names[j])) { names[i] = null; break; } } } if (nullCount == 0) { return this; } String[] newRefs = new String[names.length - nullCount]; int ndx = 0; for (String name : names) { if (name == null) { continue; } newRefs[ndx] = name; ndx++; } return new BeanReferences(newRefs); }\n\n    ### Response:", "ground_truth": "Removes later duplicated references in an array.\nReturns new instance of BeanReferences if there was changes,\notherwise returns the same instance.", "predict": "Remove duplicate names\n\n     If there are fewer names than necessary to produce a set with distinct values, the names must be manually pruned to produce a set with distinct values\n\n     If there are fewer names than necessary to produce a set with distinct values, the names must be manually pruned to produce a set with distinct values\n\n     If there are fewer names than necessary to produce a set with distinct values, the names must be manually pruned to produce a set with distinct values\n\n     If there are fewer names than necessary to produce a set with distinct values, the names must be manually pruned to produce a set with distinct values\n\n     If there are fewer names than necessary to produce a set with distinct values, the names must be manually pruned to produce a set with distinct values\n\n     If there are fewer names than necessary to produce a set with distinct values, the names must be manually pruned to produce a set with distinct values\n\n     If there are fewer names than necessary to produce a set with"}, {"ID": 1583, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *ColumnMetadata) SetIsAutoIncrement(v bool) *ColumnMetadata { s.IsAutoIncrement = &v return s }\n\n    ### Response: // SetIsAutoIncrement sets the IsAutoIncrement field's value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public JoyProps addPropsFile(final String namePattern) { requireNotStarted(props); this.propsNamePatterns.add(namePattern); return this; }\n\n    ### Response:", "ground_truth": "Adds props files or patterns.", "predict": "// Override addPropsFile adds the given name to the list of name patterns of the props object.."}, {"ID": 1584, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Convert_v1beta1_DaemonSetStatus_To_apps_DaemonSetStatus(in *v1beta1.DaemonSetStatus, out *apps.DaemonSetStatus, s conversion.Scope) error { return autoConvert_v1beta1_DaemonSetStatus_To_apps_DaemonSetStatus(in, out, s) }\n\n    ### Response: // Convert_v1beta1_DaemonSetStatus_To_apps_DaemonSetStatus is an autogenerated conversion function..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void forEachTarget(final Consumer<Target> targetConsumer) { for (final Target target : targets) { targetConsumer.accept(target); } }\n\n    ### Response:", "ground_truth": "Iterates all targets.", "predict": "The forEachTarget() method iterates over the given Target objects and invokes the targetConsumer callback function for each objects with the given arguments.."}, {"ID": 1585, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function getScope($name, $cls = null) { if (!$cls) { $cls = get_called_class(); } if (!array_key_exists($cls, self::$_scopes) || !array_key_exists($name, self::$_scopes[$cls]) ) { return null; } return self::$_scopes[$cls][$name]; }\n\n    ### Response: Return a scope\n\n@param string $name of scope\n@param string $cls  class of scope\n\n@return mixed scope.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void forEachTargetAndIn(final MadvocScope scope, final BiConsumer<Target, InjectionPoint> biConsumer) { for (final Target target : targets) { final ScopeData scopeData = target.scopeData(); if (scopeData.in() == null) { continue; } for (final InjectionPoint in : scopeData.in()) { if (in.scope() != scope) { continue; } biConsumer.accept(target, in); } } }\n\n    ### Response:", "ground_truth": "Iterates all targets and for each target iterates all IN injection points of given scope.", "predict": "For each target and its injections, execute the given closure"}, {"ID": 1586, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func SignV4(r *enr.Record, privkey *ecdsa.PrivateKey) error { // Copy r to avoid modifying it if signing fails. cpy := *r cpy.Set(enr.ID(\"v4\")) cpy.Set(Secp256k1(privkey.PublicKey)) h := sha3.NewLegacyKeccak256() rlp.Encode(h, cpy.AppendElements(nil)) sig, err := crypto.Sign(h.Sum(nil), privkey) if err != nil { return err } sig = sig[:len(sig)-1] // remove v if err = cpy.SetSig(V4ID{}, sig); err == nil { *r = cpy } return err }\n\n    ### Response: // SignV4 signs a record using the v4 scheme..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void forEachTargetAndOut(final MadvocScope scope, final BiConsumer<Target, InjectionPoint> biConsumer) { for (final Target target : targets) { final ScopeData scopeData = target.scopeData(); if (scopeData.out() == null) { continue; } for (final InjectionPoint out : scopeData.out()) { if (out.scope() != scope) { continue; } biConsumer.accept(target, out); } } }\n\n    ### Response:", "ground_truth": "Iterates all targets and for each target iterates all OUT injection points of given scope.", "predict": "The forEachTargetAndout method iterates over targets and processes any InjectionPoints found in the targets targetscope. Each InjectionPoint and its corresponding ScopeData object is retrieved and the InjectionPoint of the given ScopeData object of the targetscope is accessed to determine if the InjectionPoint's Scope matches the given scope parameter of this method. If the Scope does match the given scope parameter of this method, the InjectionPoint's InjectionType and InjectionPoint itself are accessed to determine what should be done with the InjectionPoint and its ScopeData objects (in this case, the given Out variable of the InjectionPoint's ScopeData objects should be accessed and the given Out variable of the InjectionPoint and its ScopeData objects should be consumed and the given Out variable of the InjectionPoint and its ScopeData objects should be consumed and the given Out variable of the InjectionPoint should be updated to the given Out variable of the InjectionPoint's ScopeData objects.). If"}, {"ID": 1587, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def period( start, end, absolute=False # type: DateTime # type: DateTime # type: bool ): # type: (...) -> Period \"\"\" Create a Period instance. \"\"\" return Period(start, end, absolute=absolute)\n\n    ### Response: Create a Period instance..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object[] extractParametersValues() { final Object[] values = new Object[targets.length - 1]; for (int i = 1; i < targets.length; i++) { values[i - 1] = targets[i].value(); } return values; }\n\n    ### Response:", "ground_truth": "Collects all parameters from target into an array.", "predict": "Extract values of the targets and store into objects of given length..."}, {"ID": 1588, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function defineProperties(obj, props) { props = angular.copy(props); angular.forEach(props, function (prop) { if (!('writable' in prop)) prop.writable = true; }); Object.defineProperties(obj, props); }\n\n    ### Response: Call Object.defineProperties but configure all properties as writable..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Target[] makeTargets(final Target actionTarget, final MethodParam[] methodParams) { if (methodParams == null) { // action does not have method parameters, so there is just one target return new Target[]{actionTarget}; } // action has method arguments, so there is more then one target final Target[] target = new Target[methodParams.length + 1]; target[0] = actionTarget; final Object action = actionTarget.value(); for (int i = 0; i < methodParams.length; i++) { final MethodParam methodParam = methodParams[i]; final Class paramType = methodParam.type(); final Target paramTarget; if (methodParam.annotationType() == null) { // parameter is NOT annotated, create new value for the target // the class itself will be a base class, and should be scanned final ScopeData newScopeData = methodParam.scopeData().inspector().inspectClassScopesWithCache(paramType); paramTarget = Target.ofValue(createActionMethodArgument(paramType, action), newScopeData); } else if (methodParam.annotationType() == Out.class) { // parameter is annotated with *only* OUT annotation // create the output value now AND to save the type paramTarget = Target.ofMethodParam(methodParam, createActionMethodArgument(paramType, action)); } else { // parameter is annotated with any IN annotation // create target with NO value, as the value will be created later paramTarget = Target.ofMethodParam(methodParam, type -> createActionMethodArgument(type, action)); } target[i + 1] = paramTarget; } return target; }\n\n    ### Response:", "ground_truth": "Joins action and parameters into one single array of Targets.", "predict": "The function makes sure that all arguments to the method have the appropriate annotations to enable the @Transactional annotations to do their job properly by inspecting the arguments to the method to determine whether the arguments should be run in a transaction or not and by inspecting the annotations on the arguments to determine the specific transaction attributes to enable for the arguments to the method to enable the @Transactional annotation to do its job properly to determine whether the arguments should be run in a transaction or not and to determine the specific transaction attributes to enable for the arguments to the method to enable the @Transactional annotation to do its job properly to determine whether the arguments should be run in a transaction or not and to determine the specific transaction attributes to enable for the arguments to the method to enable the @Transactional annotation to do its job properly to determine whether the arguments should be run in a transaction or not and to determine the specific transaction attributes to enable for the arguments to the method to enable the @Transactional annotation to do its job properly to determine whether the arguments should be run in a transaction or not and"}, {"ID": 1589, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function databaseFactory(array $configuration): Database { return (new Database($this->container->get(DatabaseConnectionManager::class)->connection($configuration['configuration']), $configuration['table'], $this->classWhitelist))->setPrefix($configuration['prefix'] ?? ''); }\n\n    ### Response: Database store factory.\n\n@param  array                       $configuration Configuration\n@return \\mako\\cache\\stores\\Database.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"unchecked\", \"NullArgumentToVariableArgMethod\"}) protected Object createActionMethodArgument(final Class type, final Object action) { try { if (type.getEnclosingClass() == null || Modifier.isStatic(type.getModifiers())) { // regular or static class return ClassUtil.newInstance(type); } else { // member class Constructor ctor = type.getDeclaredConstructor(type.getDeclaringClass()); ctor.setAccessible(true); return ctor.newInstance(action); } } catch (Exception ex) { throw new MadvocException(ex); } }\n\n    ### Response:", "ground_truth": "Creates action method arguments.", "predict": "Creates an argument for the given action method of the given type."}, {"ID": 1590, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function getCurrentRanking($length = -1, $offset = 0, $multicall = false) { if (!is_int($length)) { throw new InvalidArgumentException('length = ' . print_r($length, true)); } if (!is_int($offset)) { throw new InvalidArgumentException('offset = ' . print_r($offset, true)); } if ($multicall) { return $this->execute(ucfirst(__FUNCTION__), array($length, $offset), $this->structHandler('PlayerRanking', true)); } return Structures\\PlayerRanking::fromArrayOfArray($this->execute(ucfirst(__FUNCTION__), array($length, $offset))); }\n\n    ### Response: Returns the current rankings for the match in progress.\nIn script modes, scores aren't returned.\nIn team modes, the scores for the two teams are returned.\nIn other modes, it's the individual players' scores.\n@param int $length Maximum number of infos to be returned\n@param int $offset Starting index in the list\n@param bool $multicall\n@return Structures\\PlayerRanking[]\n@throws InvalidArgumentException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void sessionCreated(final HttpSessionEvent httpSessionEvent) { HttpSession session = httpSessionEvent.getSession(); sessionMap.putIfAbsent(session.getId(), session); for (HttpSessionListener listener : listeners) { listener.sessionCreated(httpSessionEvent); } }\n\n    ### Response:", "ground_truth": "Stores session in map and broadcasts event to registered listeners.", "predict": "Override the sessionCreated() method to add items to the session map. It accepts an HTTP session event and the listener may add items to the session map or modify existing items in the session map."}, {"ID": 1591, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static function arrayFlatten($array, $prefix = '') { $result = array(); foreach ($array as $key => $value) { if (is_array($value)) { $result = $result + self::arrayFlatten($value, $prefix . $key . '.'); } else { $result[$prefix . $key] = trim(preg_replace('/\\s+/', ' ', $value)); } } return $result; }\n\n    ### Response: convert a multidimensional array into a simple one-dimensional array\n\n@param array $array\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void sessionDestroyed(final HttpSessionEvent httpSessionEvent) { HttpSession session = httpSessionEvent.getSession(); sessionMap.remove(session.getId()); for (HttpSessionListener listener : listeners) { listener.sessionDestroyed(httpSessionEvent); } }\n\n    ### Response:", "ground_truth": "Removes session from a map and broadcasts event to registered listeners.", "predict": "Override the sessionDestroyed() method to delete the given session from the sessionMap map. Also notify the listener that the session has been destroyed."}, {"ID": 1592, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func DefaultImporter(path string, srcDir string) *ast.Package { bpkg, err := build.Default.Import(path, srcDir, 0) if err != nil { return nil } goFiles := make(map[string]bool) for _, f := range bpkg.GoFiles { goFiles[f] = true } for _, f := range bpkg.CgoFiles { goFiles[f] = true } shouldInclude := func(d os.FileInfo) bool { return goFiles[d.Name()] } pkgs, err := parser.ParseDir(FileSet, bpkg.Dir, shouldInclude, 0, DefaultImportPathToName) if err != nil { if Debug { switch err := err.(type) { case scanner.ErrorList: for _, e := range err { debugp(\"\\t%v: %s\", e.Pos, e.Msg) } default: debugp(\"\\terror parsing %s: %v\", bpkg.Dir, err) } } return nil } if pkg := pkgs[bpkg.Name]; pkg != nil { return pkg } if Debug { debugp(\"package not found by ParseDir!\") } return nil }\n\n    ### Response: // DefaultImporter looks for the package; if it finds it,\n// it parses and returns it. If no package was found, it returns nil..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public JsonArray add(Object value) { Objects.requireNonNull(value); value = JsonObject.resolveValue(value); list.add(value); return this; }\n\n    ### Response:", "ground_truth": "Adds an object to the JSON array.", "predict": "// This method adds an Object to the JsonArray; the Object may be resolved to its internal type first.."}, {"ID": 1593, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function load($id) { if (!$this->controller) { throw $this->exception('Unable to load model, setSource() must be set'); } if ($this->loaded()) { $this->unload(); } $this->hook('beforeLoad', array('load', array($id))); $this->controller->loadById($this, $id); $this->endLoad(); return $this; }\n\n    ### Response: Like tryLoad method but if the record not found, an exception is thrown.\n\n@param $id\n\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public JsonArray addAll(final JsonArray array) { Objects.requireNonNull(array); list.addAll(array.list); return this; }\n\n    ### Response:", "ground_truth": "Appends all of the elements in the specified array to the end of this JSON array.", "predict": "Add all objects in the given array to this object's list."}, {"ID": 1594, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setChildren(List<String> children) { addField(ConfigureNodeFields.children, FormField.Type.text_multi); setAnswer(ConfigureNodeFields.children.getFieldName(), children); }\n\n    ### Response: Set the list of child node ids that are associated with a collection node.\n\n@param children.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object remove(final int pos) { Object removed = list.remove(pos); if (removed instanceof Map) { return new JsonObject((Map) removed); } if (removed instanceof ArrayList) { return new JsonArray((List) removed); } return removed; }\n\n    ### Response:", "ground_truth": "Removes the value at the specified position in the JSON array.", "predict": "Remove an element from the given list and convert it to corresponding objects of JsonObject and JsonArray respectively"}, {"ID": 1595, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function getProcessedTemplateBeforeSave($result) { //saving array values if (empty($args)) { $this->getResultIfArgsEmptyForBeforeSave($result); } else { //saving string value $field = $args[0]; //compress the text body when is a dotmailer template if ($field == 'template_text' && ! $this->isStringCompressed($result) && $this->transactionalHelper->isDotmailerTemplate($this->templateCode) ) { $result = $this->compressString($result); } if ($field == 'template_id') { $this->saveTemplateIdInRegistry($result); } } return $result; }\n\n    ### Response: Get data before saving\n\n@param mixed $result\n\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String resolveTarget(final ActionRequest actionRequest, final String resultValue) { String resultBasePath = actionRequest.getActionRuntime().getResultBasePath(); ResultPath resultPath = resultMapper.resolveResultPath(resultBasePath, resultValue); String actionPath = resultPath.path(); String path = actionPath; String value = resultPath.value(); if (StringUtil.isEmpty(value)) { value = null; } String target; while (true) { // variant #1: with value if (value != null) { if (path == null) { // only value remains int lastSlashNdx = actionPath.lastIndexOf('/'); if (lastSlashNdx != -1) { target = actionPath.substring(0, lastSlashNdx + 1) + value; } else { target = '/' + value; } } else { target = path + '.' + value; } target = locateTarget(actionRequest, target); if (target != null) { break; } } if (path != null) { // variant #2: without value target = locateTarget(actionRequest, path); if (target != null) { break; } } // continue if (path == null) { // path not found return null; } int dotNdx = MadvocUtil.lastIndexOfDotAfterSlash(path); if (dotNdx == -1) { path = null; } else { path = path.substring(0, dotNdx); } } return target; }\n\n    ### Response:", "ground_truth": "Locates the target file from action path and the result value.", "predict": "Resolves the given ResultPath to its absolute path and saves its Value to the ResultPath Value Map to resolve the given ResultPath for the given Result Value"}, {"ID": 1596, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean isPossibleValue(PdfName value, PdfName[] accepted) { for (int i = 0; i < accepted.length; i++) { if (accepted[i].equals(value)) { return true; } } return false; }\n\n    ### Response: Checks if some value is valid for a certain key..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void targetNotFound(final ActionRequest actionRequest, final String actionAndResultPath) throws IOException { final HttpServletResponse response = actionRequest.getHttpServletResponse(); if (!response.isCommitted()) { response.sendError(SC_NOT_FOUND, \"Result not found: \" + actionAndResultPath); } }\n\n    ### Response:", "ground_truth": "Called when target not found. By default sends 404 to the response.", "predict": "Checks for the existence of the given path and sends an HTTP error code of 404 ('Not Found') if the path does not exist."}, {"ID": 1597, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def dereference(self, data, host=None): \"\"\"Dereferences RefObjects stuck in the hierarchy. This is a bit of an ugly hack.\"\"\" return self.deep_decode(self.deep_encode(data, host), deref=True)\n\n    ### Response: Dereferences RefObjects stuck in the hierarchy. This is a bit\n        of an ugly hack..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String valueToString(final String name, final Object valueObject) { if (!valueObject.getClass().isArray()) { return valueObject.toString(); } // array String[] array = (String[]) valueObject; if (valueNameIndexes == null) { valueNameIndexes = new HashMap<>(); } MutableInteger index = valueNameIndexes.get(name); if (index == null) { index = new MutableInteger(0); valueNameIndexes.put(name, index); } if (index.value >= array.length) { return null; } String result = array[index.value]; index.value++; return result; }\n\n    ### Response:", "ground_truth": "Converts value to a string.", "predict": "Detailed Description\n\n     * Detailed Description\n     * @param name Value for which to convert to String\n     * @param obj Value to convert to String\n     * @return Value in String form\n     * @since V3.5\n     * @see ValueConverter for details\n     * @see ValueConverterFactory for details\n     * @see ValueConverterFactory#getInstance for details\n     * @see ValueConverterFactory for details\n     * @see ValueConverter for details\n     * @see ValueConverter for details\n     * @see ValueConverter for details\n     * @see ValueConverter for details\n     * @see ValueConverter for details\n     * @see ValueConverter for details\n     * @see ValueConverter for details\n     * @see ValueConverter for details\n     * @see ValueConverter for details\n     * @see ValueConverter for details\n     * @see ValueConverter for details\n     * @see ValueConverter for details\n     * @see ValueConverter for details\n     * @see Value"}, {"ID": 1598, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s scoreSorter) Less(a, b int) bool { first := s[a] second := s[b] if first.Score > second.Score { return false } if first.Score < second.Score { return true } if first.Name == second.Name { v1, err := semver.NewVersion(first.Chart.Version) if err != nil { return true } v2, err := semver.NewVersion(second.Chart.Version) if err != nil { return true } // Sort so that the newest chart is higher than the oldest chart. This is // the opposite of what you'd expect in a function called Less. return v1.GreaterThan(v2) } return first.Name < second.Name }\n\n    ### Response: // Less compares a to b, and returns true if a is less than b..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public <T extends ActionFilter> MadvocRouter filter(final Class<T> actionFilterClass) { filtersManager.resolve(actionFilterClass); return this; }\n\n    ### Response:", "ground_truth": "Returns action filter instance for further configuration.", "predict": "// The MadvocRouter filter() method resolves the given actionFilterClass to // add specified action filter into this router's list of filters."}, {"ID": 1599, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private double readDoubleValue(byte[] bytes, int oid, String targetType) throws PSQLException { // currently implemented binary encoded fields switch (oid) { case Oid.INT2: return ByteConverter.int2(bytes, 0); case Oid.INT4: return ByteConverter.int4(bytes, 0); case Oid.INT8: // might not fit but there still should be no overflow checking return ByteConverter.int8(bytes, 0); case Oid.FLOAT4: return ByteConverter.float4(bytes, 0); case Oid.FLOAT8: return ByteConverter.float8(bytes, 0); } throw new PSQLException(GT.tr(\"Cannot convert the column of type {0} to requested type {1}.\", Oid.toString(oid), targetType), PSQLState.DATA_TYPE_MISMATCH); }\n\n    ### Response: Converts any numeric binary field to double value. This method does no overflow checking.\n\n@param bytes The bytes of the numeric field.\n@param oid The oid of the field.\n@param targetType The target type. Used for error reporting.\n@return The value as double.\n@throws PSQLException If the field type is not supported numeric type..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getPseudoFunctionName() { String name = getClass().getSimpleName().toLowerCase(); name = name.replace('_', '-'); return name; }\n\n    ### Response:", "ground_truth": "Returns pseudo-function name.", "predict": "The name of the method gives the name of the corresponding SQL function, toLowerCase() converts the name to lower case to match the standard function names and replacing '_' with '-' to match standard postgres function names"}, {"ID": 1600, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void complete() { if (this.configuration.isGeoTags()) { this.geoTagger.processBoundaries(); } NumberFormat nfMegabyte = NumberFormat.getInstance(); nfMegabyte.setMaximumFractionDigits(2); try { commit(); if (this.configuration.isFilterCategories()) { filterCategories(); } writeMetadata(); this.conn.close(); postProcess(); } catch (SQLException e) { e.printStackTrace(); } LOGGER.info(\"Added \" + nfCounts.format(this.poiAdded) + \" POIs.\"); this.progressManager.setMessage(\"Done.\"); LOGGER.info(\"Estimated memory consumption: \" + nfMegabyte.format(+((Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / Math .pow(1024, 2))) + \"MB\"); }\n\n    ### Response: Complete task..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public PropertyInjectionPoint[] resolve(Class type, final boolean autowire) { final List<PropertyInjectionPoint> list = new ArrayList<>(); final Set<String> usedPropertyNames = new HashSet<>(); // lookup fields while (type != Object.class) { final ClassDescriptor cd = ClassIntrospector.get().lookup(type); final PropertyDescriptor[] allPropertyDescriptors = cd.getAllPropertyDescriptors(); for (PropertyDescriptor propertyDescriptor : allPropertyDescriptors) { if (propertyDescriptor.isGetterOnly()) { continue; } if (usedPropertyNames.contains(propertyDescriptor.getName())) { continue; } Class propertyType = propertyDescriptor.getType(); if (ClassUtil.isTypeOf(propertyType, Collection.class)) { continue; } BeanReferences reference = referencesResolver.readReferenceFromAnnotation(propertyDescriptor); if (reference == null) { if (!autowire) { continue; } else { reference = referencesResolver.buildDefaultReference(propertyDescriptor); } } list.add(new PropertyInjectionPoint(propertyDescriptor, reference)); usedPropertyNames.add(propertyDescriptor.getName()); } // go to the supertype type = type.getSuperclass(); } final PropertyInjectionPoint[] fields; if (list.isEmpty()) { fields = PropertyInjectionPoint.EMPTY; } else { fields = list.toArray(new PropertyInjectionPoint[0]); } return fields; }\n\n    ### Response:", "ground_truth": "Resolves all properties for given type.", "predict": "Resolves fields of the given type and writes into fields of the given list of objects of this type and autowirtes the objects with the given references resolver and annotations of the fields of this objects and writes into objects of this list of objects of this type and autowirtes the objects with the given references resolver and annotations of the fields of this objects and writes into objects of this list of objects of this type and autowirtes the objects with the given references resolver and annotations of the fields of this objects and writes into objects of this list of objects of this type and autowirtes the objects with the given references resolver and annotations of the fields of this objects and writes into objects of this list of objects of this type and autowirtes the objects with the given references resolver and annotations of the fields of this objects and writes into objects of this list of objects of this type and autowirtes the objects with the given references resolver and annotations of the fields of this objects and writes into objects of this list of objects of"}, {"ID": 1601, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def by_phone(self, phone, cc=None): \"\"\" Perform a Yelp Phone API Search based on phone number given. Args: phone - Phone number to search by cc - ISO 3166-1 alpha-2 country code. (Optional) \"\"\" header, content = self._http_request(self.BASE_URL, phone=phone, cc=cc) return json.loads(content)\n\n    ### Response: Perform a Yelp Phone API Search based on phone number given.\n\n        Args:\n          phone    - Phone number to search by\n          cc       - ISO 3166-1 alpha-2 country code. (Optional).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Socket createSocks4ProxySocket(final String host, final int port) { Socket socket = null; final String proxyHost = proxy.getProxyAddress(); final int proxyPort = proxy.getProxyPort(); final String user = proxy.getProxyUsername(); try { socket = Sockets.connect(proxyHost, proxyPort, connectionTimeout); final InputStream in = socket.getInputStream(); final OutputStream out = socket.getOutputStream(); socket.setTcpNoDelay(true); byte[] buf = new byte[1024]; // 1) CONNECT int index = 0; buf[index++] = 4; buf[index++] = 1; buf[index++] = (byte) (port >>> 8); buf[index++] = (byte) (port & 0xff); InetAddress addr = InetAddress.getByName(host); byte[] byteAddress = addr.getAddress(); for (byte byteAddres : byteAddress) { buf[index++] = byteAddres; } if (user != null) { System.arraycopy(user.getBytes(), 0, buf, index, user.length()); index += user.length(); } buf[index++] = 0; out.write(buf, 0, index); // 2) RESPONSE int len = 6; int s = 0; while (s < len) { int i = in.read(buf, s, len - s); if (i <= 0) { throw new HttpException(ProxyInfo.ProxyType.SOCKS4, \"stream is closed\"); } s += i; } if (buf[0] != 0) { throw new HttpException(ProxyInfo.ProxyType.SOCKS4, \"proxy returned VN \" + buf[0]); } if (buf[1] != 90) { try { socket.close(); } catch (Exception ignore) { } throw new HttpException(ProxyInfo.ProxyType.SOCKS4, \"proxy returned CD \" + buf[1]); } byte[] temp = new byte[2]; in.read(temp, 0, 2); return socket; } catch (RuntimeException rtex) { closeSocket(socket); throw rtex; } catch (Exception ex) { closeSocket(socket); throw new HttpException(ProxyInfo.ProxyType.SOCKS4, ex.toString(), ex); } }\n\n    ### Response:", "ground_truth": "Connects to the SOCKS4 proxy and returns proxified socket.", "predict": "\n    Connect to Yelp via SOCKS4 and send GET request to perform a search based on the given phone number and country code."}, {"ID": 1602, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def download_folder(bucket_name, prefix, target, sagemaker_session): \"\"\"Download a folder from S3 to a local path Args: bucket_name (str): S3 bucket name prefix (str): S3 prefix within the bucket that will be downloaded. Can be a single file. target (str): destination path where the downloaded items will be placed sagemaker_session (:class:`sagemaker.session.Session`): a sagemaker session to interact with S3. \"\"\" boto_session = sagemaker_session.boto_session s3 = boto_session.resource('s3') bucket = s3.Bucket(bucket_name) prefix = prefix.lstrip('/') # there is a chance that the prefix points to a file and not a 'directory' if that is the case # we should just download it. objects = list(bucket.objects.filter(Prefix=prefix)) if len(objects) > 0 and objects[0].key == prefix and prefix[-1] != '/': s3.Object(bucket_name, prefix).download_file(os.path.join(target, os.path.basename(prefix))) return # the prefix points to an s3 'directory' download the whole thing for obj_sum in bucket.objects.filter(Prefix=prefix): # if obj_sum is a folder object skip it. if obj_sum.key != '' and obj_sum.key[-1] == '/': continue obj = s3.Object(obj_sum.bucket_name, obj_sum.key) s3_relative_path = obj_sum.key[len(prefix):].lstrip('/') file_path = os.path.join(target, s3_relative_path) try: os.makedirs(os.path.dirname(file_path)) except OSError as exc: # EEXIST means the folder already exists, this is safe to skip # anything else will be raised. if exc.errno != errno.EEXIST: raise obj.download_file(file_path)\n\n    ### Response: Download a folder from S3 to a local path\n\n    Args:\n        bucket_name (str): S3 bucket name\n        prefix (str): S3 prefix within the bucket that will be downloaded. Can be a single file.\n        target (str): destination path where the downloaded items will be placed\n        sagemaker_session (:class:`sagemaker.session.Session`): a sagemaker session to interact with S3..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final int getAttributeCount() { int count = 0; Attribute attribute = this; while (attribute != null) { count += 1; attribute = attribute.nextAttribute; } return count; }\n\n    ### Response:", "ground_truth": "Returns the number of attributes of the attribute list that begins with this attribute.\n\n@return the number of attributes of the attribute list that begins with this attribute.", "predict": "Count the number of attributes of this object"}, {"ID": 1603, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _get_url(self, session, uri): \"\"\" Helper method to get the full url \"\"\" url = session.url if uri: slash = '' if uri.startswith('/') else '/' url = \"%s%s%s\" % (session.url, slash, uri) return url\n\n    ### Response: Helper method to get the full url.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Set<ActionResult> getAllActionResults() { final Set<ActionResult> set = new HashSet<>(allResults.size()); allResults.forEachValue(set::add); return set; }\n\n    ### Response:", "ground_truth": "Returns all action results as new set.", "predict": "Get All Action Results"}, {"ID": 1604, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function getHeaderItems (uid, currentDate, prvniZaslani, overeni) { return { attributes: { uuid_zpravy: uid, dat_odesl: formatDate(currentDate), prvni_zaslani: formatBool(prvniZaslani, true), overeni: formatBool(overeni, false) } } }\n\n    ### Response: Vygeneruje polozky pro element Hlavicka..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean equalsOne(final char c, final CharSequence match) { for (int i = 0; i < match.length(); i++) { char aMatch = match.charAt(i); if (c == aMatch) { return true; } } return false; }\n\n    ### Response:", "ground_truth": "Match if one character equals to any of the given character.\n\n@return true if characters match any character from given array,\notherwise false", "predict": "Vygeneruje funkci EqualsOne - porovnac kladen s metodou zji\u0161t\u011bn\u00ed \u00e9galu s metodou str_equal()."}, {"ID": 1605, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function findWhereNotIn($field, array $values, $columns = ['*']) { $this->applyCriteria(); $this->applyScope(); $model = $this->model->whereNotIn($field, $values)->get($columns); $this->resetModel(); return $this->parserResult($model); }\n\n    ### Response: Find data by excluding multiple values in one field\n\n@param       $field\n@param array $values\n@param array $columns\n\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int findFirstEqual(final CharSequence source, final int index, final CharSequence match) { for (int i = index; i < source.length(); i++) { if (equalsOne(source.charAt(i), match)) { return i; } } return -1; }\n\n    ### Response:", "ground_truth": "Finds index of the first character in given charsequence the matches any from the\ngiven set of characters.\n\n@return index of matched character or -1", "predict": "Find first equality of string with given match string"}, {"ID": 1606, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def psd(data, dt, ndivide=1, window=hanning, overlap_half=False): \"\"\"Calculate power spectrum density of data. Args: data (np.ndarray): Input data. dt (float): Time between each data. ndivide (int): Do averaging (split data into ndivide, get psd of each, and average them). ax (matplotlib.axes): Axis you want to plot on. doplot (bool): Plot how averaging works. overlap_half (bool): Split data to half-overlapped regions. Returns: vk (np.ndarray): Frequency. psd (np.ndarray): PSD \"\"\" logger = getLogger('decode.utils.ndarray.psd') if overlap_half: step = int(len(data) / (ndivide + 1)) size = step * 2 else: step = int(len(data) / ndivide) size = step if bin(len(data)).count('1') != 1: logger.warning('warning: length of data is not power of 2: {}'.format(len(data))) size = int(len(data) / ndivide) if bin(size).count('1') != 1.: if overlap_half: logger.warning('warning: ((length of data) / (ndivide+1)) * 2 is not power of 2: {}'.format(size)) else: logger.warning('warning: (length of data) / ndivide is not power of 2: {}'.format(size)) psd = np.zeros(size) T = (size - 1) * dt vs = 1 / dt vk_ = fftfreq(size, dt) vk = vk_[np.where(vk_ >= 0)] for i in range(ndivide): d = data[i * step:i * step + size] if window is None: w = np.ones(size) corr = 1.0 else: w = window(size) corr = np.mean(w**2) psd = psd + 2 * (np.abs(fft(d * w)))**2 / size * dt / corr return vk, psd[:len(vk)] / ndivide\n\n    ### Response: Calculate power spectrum density of data.\n\n    Args:\n        data (np.ndarray): Input data.\n        dt (float): Time between each data.\n        ndivide (int): Do averaging (split data into ndivide, get psd of each, and average them).\n        ax (matplotlib.axes): Axis you want to plot on.\n        doplot (bool): Plot how averaging works.\n        overlap_half (bool): Split data to half-overlapped regions.\n\n    Returns:\n        vk (np.ndarray): Frequency.\n        psd (np.ndarray): PSD.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int findFirstEqual(final char[] source, final int index, final char match) { for (int i = index; i < source.length; i++) { if (source[i] == match) { return i; } } return -1; }\n\n    ### Response:", "ground_truth": "Finds index of the first character in given array the matches any from the\ngiven set of characters.\n\n@return index of matched character or -1", "predict": "Find first equality of the given string with the given match string starting from the given index of the source string."}, {"ID": 1607, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (i *Info) Watch(resourceVersion string) (watch.Interface, error) { return NewHelper(i.Client, i.Mapping).WatchSingle(i.Namespace, i.Name, resourceVersion) }\n\n    ### Response: // Watch returns server changes to this object after it was retrieved..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public CommandLine args(final String... arguments) { if (arguments != null && arguments.length > 0) { Collections.addAll(cmdLine, arguments); } return this; }\n\n    ### Response:", "ground_truth": "Adds several arguments.", "predict": "// This method accepts arguments on the commandline and adds them to the args array of the commandline object"}, {"ID": 1608, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func dropEmptyImportDeclarations(decl ast.Decl) bool { switch t := decl.(type) { case *ast.GenDecl: if t.Tok != token.IMPORT { return false } specs := []ast.Spec{} for _, s := range t.Specs { switch spec := s.(type) { case *ast.ImportSpec: if spec.Name != nil && spec.Name.Name == \"_\" { continue } specs = append(specs, spec) } } if len(specs) == 0 { return true } t.Specs = specs } return false }\n\n    ### Response: // dropEmptyImportDeclarations strips any generated but no-op imports from the generated code\n// to prevent generation from being able to define side-effects.  The function returns true\n// if the entire declaration should be dropped..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public CommandLine env(final String key, final String value) { if (env == null) { env = new HashMap<>(); } env.put(key, value); return this; }\n\n    ### Response:", "ground_truth": "Sets environment variable.", "predict": "// This method creates an environment variable with the given key and\n// sets its value to the given value."}, {"ID": 1609, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean isExistCmisObject(String path) { try { session.getObjectByPath(path); return true; } catch (CmisObjectNotFoundException e) { return false; } }\n\n    ### Response: Utility method for checking if CMIS object exists at defined path\n@param path path for object\n@return true if exists, false otherwise.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ProcessRunner.ProcessResult run() { ByteArrayOutputStream baos = new ByteArrayOutputStream(); out = err = baos; try { baos.write(StringUtil.join(cmdLine, ' ').getBytes()); baos.write(StringPool.BYTES_NEW_LINE); } catch (IOException ignore) { } ProcessBuilder processBuilder = new ProcessBuilder(); processBuilder.command(cmdLine); if (cleanEnvironment) { processBuilder.environment().clear(); } if (env != null) { processBuilder.environment().putAll(env); } processBuilder.directory(workingDirectory); Process process = null; try { process = processBuilder.start(); } catch (IOException ioex) { return writeException(baos, ioex); } StreamGobbler outputGobbler = new StreamGobbler(process.getInputStream(), out, outPrefix); StreamGobbler errorGobbler = new StreamGobbler(process.getErrorStream(), err, errPrefix); outputGobbler.start(); errorGobbler.start(); int result; try { result = process.waitFor(); } catch (InterruptedException iex) { return writeException(baos, iex); } outputGobbler.waitFor(); errorGobbler.waitFor(); return new ProcessRunner.ProcessResult(result, baos.toString()); }\n\n    ### Response:", "ground_truth": "Runs command and returns process result.", "predict": "Runs program with given command and arguments and prints its output and error"}, {"ID": 1610, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def send_headers(self): \"\"\"Assert, process, and send the HTTP response message-headers. You must set self.status, and self.outheaders before calling this. \"\"\" hkeys = [key.lower() for key, value in self.outheaders] status = int(self.status[:3]) if status == 413: # Request Entity Too Large. Close conn to avoid garbage. self.close_connection = True elif b'content-length' not in hkeys: # \"All 1xx (informational), 204 (no content), # and 304 (not modified) responses MUST NOT # include a message-body.\" So no point chunking. if status < 200 or status in (204, 205, 304): pass else: needs_chunked = ( self.response_protocol == 'HTTP/1.1' and self.method != b'HEAD' ) if needs_chunked: # Use the chunked transfer-coding self.chunked_write = True self.outheaders.append((b'Transfer-Encoding', b'chunked')) else: # Closing the conn is the only way to determine len. self.close_connection = True if b'connection' not in hkeys: if self.response_protocol == 'HTTP/1.1': # Both server and client are HTTP/1.1 or better if self.close_connection: self.outheaders.append((b'Connection', b'close')) else: # Server and/or client are HTTP/1.0 if not self.close_connection: self.outheaders.append((b'Connection', b'Keep-Alive')) if (not self.close_connection) and (not self.chunked_read): # Read any remaining request body data on the socket. # \"If an origin server receives a request that does not include an # Expect request-header field with the \"100-continue\" expectation, # the request includes a request body, and the server responds # with a final status code before reading the entire request body # from the transport connection, then the server SHOULD NOT close # the transport connection until it has read the entire request, # or until the client closes the connection. Otherwise, the client # might not reliably receive the response message. However, this # requirement is not be construed as preventing a server from # defending itself against denial-of-service attacks, or from # badly broken client implementations.\" remaining = getattr(self.rfile, 'remaining', 0) if remaining > 0: self.rfile.read(remaining) if b'date' not in hkeys: self.outheaders.append(( b'Date', email.utils.formatdate(usegmt=True).encode('ISO-8859-1'), )) if b'server' not in hkeys: self.outheaders.append(( b'Server', self.server.server_name.encode('ISO-8859-1'), )) proto = self.server.protocol.encode('ascii') buf = [proto + SPACE + self.status + CRLF] for k, v in self.outheaders: buf.append(k + COLON + SPACE + v + CRLF) buf.append(CRLF) self.conn.wfile.write(EMPTY.join(buf))\n\n    ### Response: Assert, process, and send the HTTP response message-headers.\n\n        You must set self.status, and self.outheaders before calling this..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void invoke(final Object listener, final Class listenerType) { if (listenerType == Init.class) { ((Init) listener).init(); return; } if (listenerType == Start.class) { ((Start) listener).start(); return; } if (listenerType == Ready.class) { ((Ready) listener).ready(); return; } if (listenerType == Stop.class) { ((Stop) listener).stop(); return; } throw new MadvocException(\"Invalid listener\"); }\n\n    ### Response:", "ground_truth": "Invoke the listener based on type.\nNot very OOP, but works.", "predict": "Invoke the listener method corresponding to the listenerClass provided. If the listenerType parameter matches the name of the listener class provided, the corresponding method of the listener is invoked; otherwise, an InvalidListener exception is raised."}, {"ID": 1611, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func identifyGroups(stmt *influxql.SelectStatement) ([]*groupInfo, error) { v := &groupVisitor{} influxql.Walk(v, stmt.Fields) if v.err != nil { return nil, v.err } // Attempt to take the calls and variables and put them into groups. if len(v.refs) > 0 { // If any of the calls are not selectors, we have an error message. for _, fn := range v.calls { if !influxql.IsSelector(fn.call) { return nil, errors.New(\"mixing aggregate and non-aggregate queries is not supported\") } } // All of the functions are selectors. If we have more than 1, then we have another error message. if len(v.calls) > 1 { return nil, errors.New(\"mixing multiple selector functions with tags or fields is not supported\") } // Otherwise, we create a single group. var call *influxql.Call if len(v.calls) == 1 { call = v.calls[0].call } return []*groupInfo{{ call: call, refs: v.refs, selector: true, // Always a selector if we are here. }}, nil } // We do not have any auxiliary fields so each of the function calls goes into // its own group. groups := make([]*groupInfo, 0, len(v.calls)) for _, fn := range v.calls { groups = append(groups, &groupInfo{call: fn.call}) } // If there is exactly one group and that contains a selector, then mark it as so. if len(groups) == 1 && influxql.IsSelector(groups[0].call) { groups[0].selector = true } return groups, nil }\n\n    ### Response: // identifyGroups will identify the groups for creating data access cursors..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final void copyFrom(final Frame frame) { inputLocals = frame.inputLocals; inputStack = frame.inputStack; outputStackStart = 0; outputLocals = frame.outputLocals; outputStack = frame.outputStack; outputStackTop = frame.outputStackTop; initializationCount = frame.initializationCount; initializations = frame.initializations; }\n\n    ### Response:", "ground_truth": "Sets this frame to the value of the given frame.\n\nWARNING: after this method is called the two frames share the same data structures. It is\nrecommended to discard the given frame to avoid unexpected side effects.\n\n@param frame The new frame value.", "predict": "// This function copies values from the input and output locations of another frame into this // frame's input and output locations to complete the stack frame switching operation."}, {"ID": 1612, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func newNurseryStore(chainHash *chainhash.Hash, db *channeldb.DB) (*nurseryStore, error) { // Prefix the provided chain hash with \"utxn\" to create the key for the // nursery store's root bucket, ensuring each one has proper chain // segmentation. pfxChainKey, err := prefixChainKey(utxnChainPrefix, chainHash) if err != nil { return nil, err } return &nurseryStore{ chainHash: *chainHash, db: db, pfxChainKey: pfxChainKey, }, nil }\n\n    ### Response: // newNurseryStore accepts a chain hash and a channeldb.DB instance, returning\n// an instance of nurseryStore who's database is properly segmented for the\n// given chain..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static int getAbstractTypeFromApiFormat(final SymbolTable symbolTable, final Object type) { if (type instanceof Integer) { return CONSTANT_KIND | ((Integer) type).intValue(); } else if (type instanceof String) { String descriptor = Type.getObjectType((String) type).getDescriptor(); return getAbstractTypeFromDescriptor(symbolTable, descriptor, 0); } else { return UNINITIALIZED_KIND | symbolTable.addUninitializedType(\"\", ((Label) type).bytecodeOffset); } }\n\n    ### Response:", "ground_truth": "Returns the abstract type corresponding to the given public API frame element type.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param type a frame element type described using the same format as in {@link\nMethodVisitor#visitFrame}, i.e. either {@link Opcodes#TOP}, {@link Opcodes#INTEGER}, {@link\nOpcodes#FLOAT}, {@link Opcodes#LONG}, {@link Opcodes#DOUBLE}, {@link Opcodes#NULL}, or\n{@link Opcodes#UNINITIALIZED_THIS}, or the internal name of a class, or a Label designating\na NEW instruction (for uninitialized types).\n@return the abstract type corresponding to the given frame element type.", "predict": "// This function extracts the AbstractType from an Object // type described in an API Format, given an // associated Symbol Table and an Object type. It first // checks for an Integral type by inspecting an Object // for an Integral class, and if found, extracts its // AbstractType from its integer value, otherwise it // checks for an API type by inspecting an Object // for an APIDescriptor, and extracting its // AbstractType from its metadata. Finally, // if no Integral or APIDescriptor were found, it // creates an AbstractType from an empty string // and returns it."}, {"ID": 1613, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function setURL($url) { $this->url = $url; $u = parse_url($url); foreach ($u as $k => $v) { $this->debug(\"parsed URL $k = $v\"); $this->$k = $v; } // add any GET params to path if (isset($u['query']) && $u['query'] != '') { $this->path .= '?' . $u['query']; } // set default port if (!isset($u['port'])) { if ($u['scheme'] == 'https') { $this->port = 443; } else { $this->port = 80; } } $this->uri = $this->path; $this->digest_uri = $this->uri; // build headers if (!isset($u['port'])) { $this->setHeader('Host', $this->host); } else { $this->setHeader('Host', $this->host . ':' . $this->port); } if (isset($u['user']) && $u['user'] != '') { $this->setCredentials(urldecode($u['user']), isset($u['pass']) ? urldecode($u['pass']) : ''); } }\n\n    ### Response: sets the URL to which to connect\n\n@param string $url The URL to which to connect\n\n@access private.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static int getAbstractTypeFromDescriptor( final SymbolTable symbolTable, final String buffer, final int offset) { String internalName; switch (buffer.charAt(offset)) { case 'V': return 0; case 'Z': case 'C': case 'B': case 'S': case 'I': return INTEGER; case 'F': return FLOAT; case 'J': return LONG; case 'D': return DOUBLE; case 'L': internalName = buffer.substring(offset + 1, buffer.length() - 1); return REFERENCE_KIND | symbolTable.addType(internalName); case '[': int elementDescriptorOffset = offset + 1; while (buffer.charAt(elementDescriptorOffset) == '[') { ++elementDescriptorOffset; } int typeValue; switch (buffer.charAt(elementDescriptorOffset)) { case 'Z': typeValue = BOOLEAN; break; case 'C': typeValue = CHAR; break; case 'B': typeValue = BYTE; break; case 'S': typeValue = SHORT; break; case 'I': typeValue = INTEGER; break; case 'F': typeValue = FLOAT; break; case 'J': typeValue = LONG; break; case 'D': typeValue = DOUBLE; break; case 'L': internalName = buffer.substring(elementDescriptorOffset + 1, buffer.length() - 1); typeValue = REFERENCE_KIND | symbolTable.addType(internalName); break; default: throw new IllegalArgumentException(); } return ((elementDescriptorOffset - offset) << DIM_SHIFT) | typeValue; default: throw new IllegalArgumentException(); } }\n\n    ### Response:", "ground_truth": "Returns the abstract type corresponding to the given type descriptor.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param buffer a string ending with a type descriptor.\n@param offset the start offset of the type descriptor in buffer.\n@return the abstract type corresponding to the given type descriptor.", "predict": "reads an abstract type from an input string"}, {"ID": 1614, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (engine *Engine) Iterate(bean interface{}, fun IterFunc) error { session := engine.NewSession() defer session.Close() return session.Iterate(bean, fun) }\n\n    ### Response: // Iterate record by record handle records from table, bean's non-empty fields\n// are conditions..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final void setInputFrameFromApiFormat( final SymbolTable symbolTable, final int numLocal, final Object[] local, final int numStack, final Object[] stack) { int inputLocalIndex = 0; for (int i = 0; i < numLocal; ++i) { inputLocals[inputLocalIndex++] = getAbstractTypeFromApiFormat(symbolTable, local[i]); if (local[i] == Opcodes.LONG || local[i] == Opcodes.DOUBLE) { inputLocals[inputLocalIndex++] = TOP; } } while (inputLocalIndex < inputLocals.length) { inputLocals[inputLocalIndex++] = TOP; } int numStackTop = 0; for (int i = 0; i < numStack; ++i) { if (stack[i] == Opcodes.LONG || stack[i] == Opcodes.DOUBLE) { ++numStackTop; } } inputStack = new int[numStack + numStackTop]; int inputStackIndex = 0; for (int i = 0; i < numStack; ++i) { inputStack[inputStackIndex++] = getAbstractTypeFromApiFormat(symbolTable, stack[i]); if (stack[i] == Opcodes.LONG || stack[i] == Opcodes.DOUBLE) { inputStack[inputStackIndex++] = TOP; } } outputStackTop = 0; initializationCount = 0; }\n\n    ### Response:", "ground_truth": "Sets the input frame from the given public API frame description.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param numLocal the number of local variables.\n@param local the local variable types, described using the same format as in {@link\nMethodVisitor#visitFrame}.\n@param numStack the number of operand stack elements.\n@param stack the operand stack types, described using the same format as in {@link\nMethodVisitor#visitFrame}.", "predict": "// set frame for given number of local and parameter values // iterate over given number of objects and // push values to output stack // iterate over objects and push values to input // and output stack"}, {"ID": 1615, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getAllClasses() { $returnValue = null; $returnValue = new core_kernel_classes_ContainerCollection(new core_kernel_classes_Container(__METHOD__),__METHOD__); $dbWrapper = core_kernel_classes_DbWrapper::singleton(); $query = \"SELECT DISTINCT subject FROM statements WHERE (predicate = ? AND object = ?) OR predicate = ?\"; $result = $dbWrapper->query($query, array( OntologyRdf::RDF_TYPE, OntologyRdfs::RDFS_CLASS, OntologyRdfs::RDFS_SUBCLASSOF )); while ($row = $result->fetch()) { $returnValue->add(new core_kernel_classes_Class($row['subject'])); } return $returnValue; }\n\n    ### Response: Short description of method getAllClasses\n\n@access public\n@author firstname and lastname of author, \n@return core_kernel_classes_ContainerCollection.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private int getLocal(final int localIndex) { if (outputLocals == null || localIndex >= outputLocals.length) { // If this local has never been assigned in this basic block, it is still equal to its value // in the input frame. return LOCAL_KIND | localIndex; } else { int abstractType = outputLocals[localIndex]; if (abstractType == 0) { // If this local has never been assigned in this basic block, so it is still equal to its // value in the input frame. abstractType = outputLocals[localIndex] = LOCAL_KIND | localIndex; } return abstractType; } }\n\n    ### Response:", "ground_truth": "Returns the abstract type stored at the given local variable index in the output frame.\n\n@param localIndex the index of the local variable whose value must be returned.\n@return the abstract type stored at the given local variable index in the output frame.", "predict": "Short description of method getLocal\n\nThis method returns the value of a local, given its index in the output frame of the basic block in which it is invoked."}, {"ID": 1616, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def single_index(idxm): \"\"\" Multi-index to single integer notation. Uses graded reverse lexicographical notation. Parameters ---------- idxm : numpy.ndarray Index in multi-index notation Returns ------- idx : int Integer index of `idxm` Examples -------- >>> for idx in range(3): ... print(chaospy.bertran.single_index(numpy.eye(3)[idx])) 1 2 3 \"\"\" if -1 in idxm: return 0 order = int(sum(idxm)) dim = len(idxm) if order == 0: return 0 return terms(order-1, dim) + single_index(idxm[1:])\n\n    ### Response: Multi-index to single integer notation.\n\n    Uses graded reverse lexicographical notation.\n\n    Parameters\n    ----------\n    idxm : numpy.ndarray\n        Index in multi-index notation\n\n    Returns\n    -------\n    idx : int\n        Integer index of `idxm`\n\n    Examples\n    --------\n    >>> for idx in range(3):\n    ...     print(chaospy.bertran.single_index(numpy.eye(3)[idx]))\n    1\n    2\n    3.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void setLocal(final int localIndex, final int abstractType) { // Create and/or resize the output local variables array if necessary. if (outputLocals == null) { outputLocals = new int[10]; } int outputLocalsLength = outputLocals.length; if (localIndex >= outputLocalsLength) { int[] newOutputLocals = new int[Math.max(localIndex + 1, 2 * outputLocalsLength)]; System.arraycopy(outputLocals, 0, newOutputLocals, 0, outputLocalsLength); outputLocals = newOutputLocals; } // Set the local variable. outputLocals[localIndex] = abstractType; }\n\n    ### Response:", "ground_truth": "Replaces the abstract type stored at the given local variable index in the output frame.\n\n@param localIndex the index of the output frame local variable that must be set.\n@param abstractType the value that must be set.", "predict": "\n    // Create and/or resize the output local variables array if necessary\n    // If there is no local indices, creates an output local indices array of size 10\n    // If indices local indices, creates indices indices of size corresponding to indices indices plus one\n    // If indices indices, sets corresponding indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices indices"}, {"ID": 1617, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void removePathMappingFromPathMap(JoinableResourceBundle bundle) { for (List<PathMapping> pathMappings : pathToResourceBundle.values()) { for (Iterator<PathMapping> iterator = pathMappings.iterator(); iterator.hasNext();) { PathMapping pathMapping = (PathMapping) iterator.next(); if (pathMapping.getBundle().getName().equals(bundle.getName())) { iterator.remove(); } } } }\n\n    ### Response: Removes the path mapping of the bundle given in parameter from map which\nlinks Path to resource bundle\n\n@param bundle\nthe bundle whose the path mapping should be removed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void push(final int abstractType) { // Create and/or resize the output stack array if necessary. if (outputStack == null) { outputStack = new int[10]; } int outputStackLength = outputStack.length; if (outputStackTop >= outputStackLength) { int[] newOutputStack = new int[Math.max(outputStackTop + 1, 2 * outputStackLength)]; System.arraycopy(outputStack, 0, newOutputStack, 0, outputStackLength); outputStack = newOutputStack; } // Pushes the abstract type on the output stack. outputStack[outputStackTop++] = abstractType; // Updates the maximum size reached by the output stack, if needed (note that this size is // relative to the input stack size, which is not known yet). short outputStackSize = (short) (outputStackStart + outputStackTop); if (outputStackSize > owner.outputStackMax) { owner.outputStackMax = outputStackSize; } }\n\n    ### Response:", "ground_truth": "Pushes the given abstract type on the output frame stack.\n\n@param abstractType an abstract type.", "predict": "Pushes an element on top of the output stack."}, {"ID": 1618, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (o *Me) CreateZFBAutoAssignment(child *ZFBAutoAssignment) *bambou.Error { return bambou.CurrentSession().CreateChild(o, child) }\n\n    ### Response: // CreateZFBAutoAssignment creates a new child ZFBAutoAssignment under the Me.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void push(final SymbolTable symbolTable, final String descriptor) { int typeDescriptorOffset = descriptor.charAt(0) == '(' ? descriptor.indexOf(')') + 1 : 0; int abstractType = getAbstractTypeFromDescriptor(symbolTable, descriptor, typeDescriptorOffset); if (abstractType != 0) { push(abstractType); if (abstractType == LONG || abstractType == DOUBLE) { push(TOP); } } }\n\n    ### Response:", "ground_truth": "Pushes the abstract type corresponding to the given descriptor on the output frame stack.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param descriptor a type or method descriptor (in which case its return type is pushed).", "predict": "// This function pushes an element onto the AbstractSymbolTable at the given descriptor. It looks first for the first parameter of the function to see if there is a corresponding argument on the AbstractSymbolTable and pushes that on first. Afterwards, it looks for the second parameter of the function to see if there is a corresponding argument on the AbstractSymbolTable and pushes that on second. Finally, it looks for the function name and pushes that on top of the AbstractSymbolTable."}, {"ID": 1619, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public ManagedSet parseStatements(Element element, ParserContext parserContext) { ManagedSet statements = new ManagedSet(); NodeList childNodes = element.getChildNodes(); for (int i = 0; i < childNodes.getLength(); i++) { Node child = childNodes.item(i); if (child.getNodeType() == Node.ELEMENT_NODE) { Element childElement = (Element) child; String localName = child.getLocalName(); if (\"statement\".equals(localName)) { BeanDefinition definition = parserContext.getDelegate().parseCustomElement(childElement); statements.add(definition); } else if (\"ref\".equals(localName)) { String ref = childElement.getAttribute(\"bean\"); statements.add(new RuntimeBeanReference(ref)); } } } return statements; }\n\n    ### Response: Parses out the individual statement elements for further processing.\n\n@param element\nthe esper-template context\n@param parserContext\nthe parser's context\n@return a set of initialized esper statements.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void pop(final int elements) { if (outputStackTop >= elements) { outputStackTop -= elements; } else { // If the number of elements to be popped is greater than the number of elements in the output // stack, clear it, and pop the remaining elements from the input stack. outputStackStart -= elements - outputStackTop; outputStackTop = 0; } }\n\n    ### Response:", "ground_truth": "Pops the given number of abstract types from the output frame stack.\n\n@param elements the number of abstract types that must be popped.", "predict": "Populates the output stack from the input stack when there is a shortage of objects to push onto the output stack because of insufficient input objects to cover the requested pop operation and makes corresponding changes to the output and input stack top indices to reflect the change in stack size"}, {"ID": 1620, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function setValue($entity, $value) { switch ($this->format) { case 'scalar': $this->property->setValue($entity, $value); break; //Unserialize classes and arrays before putting them back in the entity. case 'object': case 'array': $this->property->setValue($entity, unserialize($value)); break; //Decode Json from DB back into a regular assoc array before putting it into the entity. case 'json': $this->property->setValue($entity, json_decode($value, true)); break; //Create a date time object out of the db stored date before putting it into the entity. case 'date': $date = null; if ($value) { $date = new \\DateTime($value . ' UTC'); $date->setTimezone(new \\DateTimeZone(date_default_timezone_get())); } $this->property->setValue($entity, $date); break; } }\n\n    ### Response: Sets this property's value in the given entity.\n\n@param Relation|Node $entity The entity to set the property of.\n@param mixed $value The value to set it to..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void pop(final String descriptor) { char firstDescriptorChar = descriptor.charAt(0); if (firstDescriptorChar == '(') { pop((Type.getArgumentsAndReturnSizes(descriptor) >> 2) - 1); } else if (firstDescriptorChar == 'J' || firstDescriptorChar == 'D') { pop(2); } else { pop(1); } }\n\n    ### Response:", "ground_truth": "Pops as many abstract types from the output frame stack as described by the given descriptor.\n\n@param descriptor a type or method descriptor (in which case its argument types are popped).", "predict": "Populates the operand stack with arguments and return values of the given function descriptor, and then pop arguments and return values of the function until the function has returned, or there is no arguments and return values left on the stack."}, {"ID": 1621, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static double d(int[] x1, int[] x2) { int n1 = x1.length; int n2 = x2.length; double[][] table = new double[2][n2 + 1]; table[0][0] = 0; for (int i = 1; i <= n2; i++) { table[0][i] = Double.POSITIVE_INFINITY; } for (int i = 1; i <= n1; i++) { table[1][0] = Double.POSITIVE_INFINITY; for (int j = 1; j <= n2; j++) { double cost = Math.abs(x1[i-1] - x2[j-1]); double min = table[0][j - 1]; if (min > table[0][j]) { min = table[0][j]; } if (min > table[1][j - 1]) { min = table[1][j - 1]; } table[1][j] = cost + min; } double[] swap = table[0]; table[0] = table[1]; table[1] = swap; } return table[0][n2]; }\n\n    ### Response: Dynamic time warping without path constraints..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addInitializedType(final int abstractType) { // Create and/or resize the initializations array if necessary. if (initializations == null) { initializations = new int[2]; } int initializationsLength = initializations.length; if (initializationCount >= initializationsLength) { int[] newInitializations = new int[Math.max(initializationCount + 1, 2 * initializationsLength)]; System.arraycopy(initializations, 0, newInitializations, 0, initializationsLength); initializations = newInitializations; } // Store the abstract type. initializations[initializationCount++] = abstractType; }\n\n    ### Response:", "ground_truth": "Adds an abstract type to the list of types on which a constructor is invoked in the basic\nblock.\n\n@param abstractType an abstract type on a which a constructor is invoked.", "predict": "Pre-fills an initialization array to size 2 or size * initializationCount, whichever is greater; resizes the initialization array to size * initializationCount; stores the given parameter in an element of the initialization array; and incrementing the initialization counter."}, {"ID": 1622, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function afterDelete($event) { if (!$this->enableAuditField) { parent::afterDelete($event); return; } $date = time(); $auditModels = $this->getAuditModels(); $auditRequestId = $this->getAuditRequestId(); $userId = Yii::app()->user && Yii::app()->user->id ? Yii::app()->user->id : 0; $auditFields = array(); // prepare the logs $pk = $this->getModelPrimaryKeyString($this->auditModel); foreach ($auditModels as $auditModel) { $prefix = isset($auditModel['prefix']) ? $auditModel['prefix'] . '.' . $pk : ''; $auditFields[] = array( 'old_value' => '', 'new_value' => '', 'action' => 'DELETE', 'model_name' => $auditModel['model_name'], 'model_id' => $auditModel['model_id'], 'field' => $prefix . '*', 'created' => $date, 'user_id' => $userId, 'audit_request_id' => $auditRequestId, ); } // insert the audit_field records $this->addAuditFields($auditFields); parent::afterDelete($event); }\n\n    ### Response: Find changes to the model and save them as AuditField records.\nDo not call this method directly, it will be called after the model is deleted.\n@param CModelEvent $event.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private int getInitializedType(final SymbolTable symbolTable, final int abstractType) { if (abstractType == UNINITIALIZED_THIS || (abstractType & (DIM_MASK | KIND_MASK)) == UNINITIALIZED_KIND) { for (int i = 0; i < initializationCount; ++i) { int initializedType = initializations[i]; int dim = initializedType & DIM_MASK; int kind = initializedType & KIND_MASK; int value = initializedType & VALUE_MASK; if (kind == LOCAL_KIND) { initializedType = dim + inputLocals[value]; } else if (kind == STACK_KIND) { initializedType = dim + inputStack[inputStack.length - value]; } if (abstractType == initializedType) { if (abstractType == UNINITIALIZED_THIS) { return REFERENCE_KIND | symbolTable.addType(symbolTable.getClassName()); } else { return REFERENCE_KIND | symbolTable.addType(symbolTable.getType(abstractType & VALUE_MASK).value); } } } } return abstractType; }\n\n    ### Response:", "ground_truth": "Returns the \"initialized\" abstract type corresponding to the given abstract type.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param abstractType an abstract type.\n@return the REFERENCE_KIND abstract type corresponding to abstractType if it is\nUNINITIALIZED_THIS or an UNINITIALIZED_KIND abstract type for one of the types on which a\nconstructor is invoked in the basic block. Otherwise returns abstractType.", "predict": "Find the initializedType for the given AbstractType and return the appropriate initializedType for the AbstractType and AbstractType values of the method invocation arguments and the AbstractType for the AbstractType and AbstractType values of the method invocation arguments and the AbstractType for the AbstractType and AbstractType values of the method invocation arguments and the AbstractType for the AbstractType and AbstractType values of the method invocation arguments and the AbstractType for the AbstractType and AbstractType values of the method invocation arguments and the AbstractType for the AbstractType and AbstractType values of the method invocation arguments and the AbstractType for the AbstractType and AbstractType values of the method invocation arguments and the AbstractType for the AbstractType and AbstractType values of the method invocation arguments and the AbstractType for the AbstractType and AbstractType values of the method invocation arguments and the AbstractType for the AbstractType and AbstractType values of the method invocation arguments and the AbstractType for the AbstractType and AbstractType values of the method invocation arguments and the AbstractType for the Abstract"}, {"ID": 1623, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function classFulfills(classDefinition, protocol) { assertArgumentNotNullOrUndefined(classDefinition, ERROR_MESSAGES.NULL, 'Class', 'classFulfills'); assertArgumentNotNullOrUndefined(protocol, ERROR_MESSAGES.NULL, 'Protocol', 'classFulfills'); return fulfills(classDefinition.prototype, protocol); }\n\n    ### Response: Checks that a class provides a prototype that will fulfil a protocol.\n\n@memberOf topiarist\n@param {function} classDefinition\n@param {function|Object} protocol\n@returns {boolean}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static void putAbstractType( final SymbolTable symbolTable, final int abstractType, final ByteVector output) { int arrayDimensions = (abstractType & Frame.DIM_MASK) >> DIM_SHIFT; if (arrayDimensions == 0) { int typeValue = abstractType & VALUE_MASK; switch (abstractType & KIND_MASK) { case CONSTANT_KIND: output.putByte(typeValue); break; case REFERENCE_KIND: output .putByte(ITEM_OBJECT) .putShort(symbolTable.addConstantClass(symbolTable.getType(typeValue).value).index); break; case UNINITIALIZED_KIND: output.putByte(ITEM_UNINITIALIZED).putShort((int) symbolTable.getType(typeValue).data); break; default: throw new AssertionError(); } } else { // Case of an array type, we need to build its descriptor first. StringBuilder typeDescriptor = new StringBuilder(); while (arrayDimensions-- > 0) { typeDescriptor.append('['); } if ((abstractType & KIND_MASK) == REFERENCE_KIND) { typeDescriptor .append('L') .append(symbolTable.getType(abstractType & VALUE_MASK).value) .append(';'); } else { switch (abstractType & VALUE_MASK) { case Frame.ITEM_ASM_BOOLEAN: typeDescriptor.append('Z'); break; case Frame.ITEM_ASM_BYTE: typeDescriptor.append('B'); break; case Frame.ITEM_ASM_CHAR: typeDescriptor.append('C'); break; case Frame.ITEM_ASM_SHORT: typeDescriptor.append('S'); break; case Frame.ITEM_INTEGER: typeDescriptor.append('I'); break; case Frame.ITEM_FLOAT: typeDescriptor.append('F'); break; case Frame.ITEM_LONG: typeDescriptor.append('J'); break; case Frame.ITEM_DOUBLE: typeDescriptor.append('D'); break; default: throw new AssertionError(); } } output .putByte(ITEM_OBJECT) .putShort(symbolTable.addConstantClass(typeDescriptor.toString()).index); } }\n\n    ### Response:", "ground_truth": "Put the given abstract type in the given ByteVector, using the JVMS verification_type_info\nformat used in StackMapTable attributes.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param abstractType an abstract type, restricted to {@link Frame#CONSTANT_KIND}, {@link\nFrame#REFERENCE_KIND} or {@link Frame#UNINITIALIZED_KIND} types.\n@param output where the abstract type must be put.\n@see JVMS\n4.7.4", "predict": "Generates the method-level comment for the above java Code which generates an output for an AbstractType which contains an Array Element of other AbstractType Elements of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element of other AbstractType Element"}, {"ID": 1624, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function renderContent($name, $id) { if ($column = $this->getColumn($name)) { $column->render($id); } }\n\n    ### Response: Manage columns content.\n\n@param string $name\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected int pruneCache() { int count = 0; Iterator<CacheObject<K,V>> values = cacheMap.values().iterator(); while (values.hasNext()) { CacheObject co = values.next(); if (co.isExpired()) { values.remove(); count++; } } return count; }\n\n    ### Response:", "ground_truth": "Prunes expired elements from the cache. Returns the number of removed objects.", "predict": "Prune the cache and manage the expired objects"}, {"ID": 1625, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isSanitizedContentField(FieldDescriptor fieldDescriptor) { return fieldDescriptor.getType() == Type.MESSAGE && SAFE_PROTO_TYPES.contains(fieldDescriptor.getMessageType().getFullName()); }\n\n    ### Response: Returns true if fieldDescriptor holds a sanitized proto type..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void schedulePrune(final long delay) { if (pruneTimer != null) { pruneTimer.cancel(); } pruneTimer = new Timer(); pruneTimer.schedule( new TimerTask() { @Override public void run() { prune(); } }, delay, delay ); }\n\n    ### Response:", "ground_truth": "Schedules prune.", "predict": "Cancels and reschedules the prune operation to run after the given delay.."}, {"ID": 1626, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static function _parse_json($json) { $rval = json_decode($json); $error = json_last_error(); if($error === JSON_ERROR_NONE && $rval === null) { $error = JSON_ERROR_SYNTAX; } switch($error) { case JSON_ERROR_NONE: break; case JSON_ERROR_DEPTH: throw new JsonLdException( 'Could not parse JSON; the maximum stack depth has been exceeded.', 'jsonld.ParseError'); case JSON_ERROR_STATE_MISMATCH: throw new JsonLdException( 'Could not parse JSON; invalid or malformed JSON.', 'jsonld.ParseError'); case JSON_ERROR_CTRL_CHAR: case JSON_ERROR_SYNTAX: throw new JsonLdException( 'Could not parse JSON; syntax error, malformed JSON.', 'jsonld.ParseError'); case JSON_ERROR_UTF8: throw new JsonLdException( 'Could not parse JSON from URL; malformed UTF-8 characters.', 'jsonld.ParseError'); default: throw new JsonLdException( 'Could not parse JSON from URL; unknown error.', 'jsonld.ParseError'); } return $rval; }\n\n    ### Response: Parses JSON and sets an appropriate exception message on error.\n\n@param string $json the JSON to parse.\n\n@return mixed the parsed JSON object or array..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ModuleVisitor visitModule(final String name, final int access, final String version) { if (api < Opcodes.ASM6) { throw new UnsupportedOperationException(\"This feature requires ASM6\"); } if (cv != null) { return cv.visitModule(name, access, version); } return null; }\n\n    ### Response:", "ground_truth": "Visit the module corresponding to the class.\n\n@param name the fully qualified name (using dots) of the module.\n@param access the module access flags, among {@code ACC_OPEN}, {@code ACC_SYNTHETIC} and {@code\nACC_MANDATED}.\n@param version the module version, or {@literal null}.\n@return a visitor to visit the module values, or {@literal null} if this visitor is not\ninterested in visiting this module.", "predict": "Visitor method to visit a Module produced by the ASM library"}, {"ID": 1627, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void clearCachedEncodings() { cachedEncodedString = null; cachedPartialEncodedString = null; for (int i = 0; i < cachedEncoding.length; i++) cachedEncoding[i] = null; }\n\n    ### Response: This method should be called by all setter methods if they alter the state\ninformation of this destination. Doing so will cause the string encoded version\nof this destination to be recreated when necessary..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visitNestHost(final String nestHost) { if (api < Opcodes.ASM7) { throw new UnsupportedOperationException(\"This feature requires ASM7\"); } if (cv != null) { cv.visitNestHost(nestHost); } }\n\n    ### Response:", "ground_truth": "Visits the nest host class of the class. A nest is a set of classes of the same package that\nshare access to their private members. One of these classes, called the host, lists the other\nmembers of the nest, which in turn should link to the host of their nest. This method must be\ncalled only once and only if the visited class is a non-host member of a nest. A class is\nimplicitly its own nest, so it's invalid to call this method with the visited class name as\nargument.\n\n@param nestHost the internal name of the host class of the nest.", "predict": "The visitedNestHost() method of the Control Flow Graph creates the child\nenvironment for the given destination during its visit of this destination's instruction\nlist. It sets the childEnvironment on the Control Flow Graph which contains references to\nobjects which represent the child environment for this destination such that the Control Flow\nGraph can determine the impact of the given instruction list on the child environment of this\ndestination.."}, {"ID": 1628, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static byte[] digest(char[] plainBytes, byte[] salt, String algorithm, int iteration, int length) throws InvalidPasswordCipherException { if (logger.isLoggable(Level.FINE)) { logger.fine(\"algorithm : \" + algorithm + \" iteration : \" + iteration); logger.fine(\"input length: \" + plainBytes.length); logger.fine(\"salt length: \" + salt.length); logger.fine(\"output length: \" + length); } byte[] oBytes = null; if (plainBytes != null && plainBytes.length > 0 && algorithm != null && algorithm.length() > 0 && iteration > 0) { long begin = 0; if (logger.isLoggable(Level.FINE)) { begin = System.nanoTime(); } try { SecretKeyFactory skf = SecretKeyFactory.getInstance(algorithm); PBEKeySpec ks = new PBEKeySpec(plainBytes, salt, iteration, length); SecretKey s = skf.generateSecret(ks); oBytes = s.getEncoded(); } catch (Exception e) { throw (InvalidPasswordCipherException) new InvalidPasswordCipherException(e.getMessage()).initCause(e); } if (logger.isLoggable(Level.FINE)) { long elapsed = System.nanoTime() - begin; logger.fine(\"Elapsed time : \" + elapsed + \" ns \" + (elapsed / 1000000) + \" ms\"); //debug } } if ((logger.isLoggable(Level.FINE)) && oBytes != null) { logger.fine(\"digest length: \" + oBytes.length); logger.fine(hexDump(oBytes)); } return oBytes; }\n\n    ### Response: perform message digest and then append a salt at the end..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visitOuterClass(final String owner, final String name, final String descriptor) { if (cv != null) { cv.visitOuterClass(owner, name, descriptor); } }\n\n    ### Response:", "ground_truth": "Visits the enclosing class of the class. This method must be called only if the class has an\nenclosing class.\n\n@param owner internal name of the enclosing class of the class.\n@param name the name of the method that contains the class, or {@literal null} if the class is\nnot enclosed in a method of its enclosing class.\n@param descriptor the descriptor of the method that contains the class, or {@literal null} if\nthe class is not enclosed in a method of its enclosing class.", "predict": "Checks if the ClassVisitor object is not null and visits the outer class of this class."}, {"ID": 1629, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def CMY_to_RGB(cobj, target_rgb, *args, **kwargs): \"\"\" Converts CMY to RGB via simple subtraction. NOTE: Returned values are in the range of 0-255. \"\"\" rgb_r = 1.0 - cobj.cmy_c rgb_g = 1.0 - cobj.cmy_m rgb_b = 1.0 - cobj.cmy_y return target_rgb(rgb_r, rgb_g, rgb_b)\n\n    ### Response: Converts CMY to RGB via simple subtraction.\n\n    NOTE: Returned values are in the range of 0-255..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) { if (cv != null) { return cv.visitAnnotation(descriptor, visible); } return null; }\n\n    ### Response:", "ground_truth": "Visits an annotation of the class.\n\n@param descriptor the class descriptor of the annotation class.\n@param visible {@literal true} if the annotation is visible at runtime.\n@return a visitor to visit the annotation values, or {@literal null} if this visitor is not\ninterested in visiting this annotation.", "predict": "Visitor to visit annotation with specified annotation descriptor and boolean indicating visibility of annotation"}, {"ID": 1630, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function stats($type = '', $argument1 = '', $argument2 = '') { /** * stats <type> [noreply]\\r\\n * [TYPES <reset, malloc, maps, cachedump, slabs, items, sizes>] */ if ($type !== '') { $type = self::COMMAND_SEPARATOR . $type; } if ($argument1 !== '') { $argument1 = self::COMMAND_SEPARATOR . $argument1; } if ($argument2 !== '') { $argument2 = self::COMMAND_SEPARATOR . $argument2; } // Build packet to send ... $data = self::COMMAND_STATS . $type . $argument1 . $argument2 . self::COMMAND_TERMINATOR; // Generic stats requires us to fetch as long as data arrives ... if ($type === '') { // Initial fetch ... $result = $this->send(self::COMMAND_STATS, $data); // Now read until whole structure contains finally \"active_slabs\" key! while (isset($result['evictions']) === false) { // Issue stat command ... $memory = $this->send(self::COMMAND_STATS, $data); // Iterate Slabs from response foreach ($memory as $key => $value) { $result[$key] = $value; } } } elseif ($type === self::COMMAND_SEPARATOR . self::STATS_TYPE_SLABS) { // Initial fetch ... $result = $this->send(self::COMMAND_STATS, $data); // Now read until whole structure contains finally \"active_slabs\" key! while (isset($result['active_slabs']) === false) { // Issue stat command ... $memory = $this->send(self::COMMAND_STATS, $data); // Iterate Slabs from response foreach ($memory as $key => $value) { // Now check for slabId or meta-data key. Slab = numeric, otherwise String. if (is_numeric($key) === true) { // Slab! if (isset($result[$key]) === false) { $result[$key] = array(); } $result[$key] = array_merge($result[$key], $value); } else { // Meta! $result[$key] = $value; } } } } else { // Issue stat command ... $result = $this->send(self::COMMAND_STATS, $data); } /** * @ugly This is an ugly but required workaround. After issueing the <stats slabs> command * we need to fetch as long as we receive the last slabs package?! and afterwards the memcached * daemon returns nonsense? ... This here fixes it - but only temporary */ $uuid = $this->uuid($this->getHost(), $this->getPort()); fclose(self::$connections[$this->getPersistentId()][$uuid]); unset(self::$connections[$this->getPersistentId()][$uuid]); return $result; }\n\n    ### Response: Stats - sends the stats command with default or custom type to Memcached instance.\n\n@param string $type      The type to send to Memcached instance.\n@param string $argument1 Optional additional argument.\n@param string $argument2 Optional additional argument.\n\n@author Benjamin Carl \n@return mixed The response for command stats\n@access public.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visitNestMember(final String nestMember) { if (api < Opcodes.ASM7) { throw new UnsupportedOperationException(\"This feature requires ASM7\"); } if (cv != null) { cv.visitNestMember(nestMember); } }\n\n    ### Response:", "ground_truth": "Visits a member of the nest. A nest is a set of classes of the same package that share access\nto their private members. One of these classes, called the host, lists the other members of the\nnest, which in turn should link to the host of their nest. This method must be called only if\nthe visited class is the host of a nest. A nest host is implicitly a member of its own nest, so\nit's invalid to call this method with the visited class name as argument.\n\n@param nestMember the internal name of a nest member.", "predict": "The visitedNestMember() method visits the given member of the member variable and its access flags in the member field, if it's supported in the current ASM version or newer, or throws an exception stating otherwise. It's intended to be used to implement the visitNestMethod() method of the parent class, but may be overridden to do other things if needed."}, {"ID": 1631, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void run() { final boolean isTraceOn = TraceComponent.isAnyTracingEnabled(); if (isTraceOn && tc.isEntryEnabled()) // F743-425.CodRev Tr.entry(tc, \"run: \" + ivTimer.ivTaskId); // F743-425.CodRev if (serverStopping) { if (isTraceOn && tc.isEntryEnabled()) Tr.exit(tc, \"Server shutting down; aborting\"); return; } if (ivRetries == 0) // This is the first try { // F743-7591 - Calculate the next expiration before calling the timeout // method. This ensures that Timer.getNextTimeout will properly throw // NoMoreTimeoutsException. ivTimer.calculateNextExpiration(); } // Log a warning if this timer is starting late ivTimer.checkLateTimerThreshold(); try // F743-425.CodRev { // Call the timeout method; last chance effort to abort if cancelled if (!ivTimer.isIvDestroyed()) { doWork(); } else { if (isTraceOn && tc.isEntryEnabled()) Tr.exit(tc, \"Timer has been cancelled; aborting\"); return; } ivRetries = 0; // re-schedule the alarm to go off again if it needs to, // and if timer had not been canceled ivTimer.scheduleNext(); // RTC107334 } catch (Throwable ex) // F743-425.CodRev { // Do not FFDC... that has already been done when the method failed // All exceptions from timeout methods are system exceptions... // indicating the timeout method failed, and should be retried. d667153 if (isTraceOn && tc.isDebugEnabled()) { Tr.debug(tc, \"NP Timer failed : \" + ex.getClass().getName() + \":\" + ex.getMessage(), ex); } if ((ivRetryLimit != -1) && // not configured to retry indefinitely (ivRetries >= ivRetryLimit)) // and retry limit reached { // Note: ivRetryLimit==0 means no retries at all ivTimer.calculateNextExpiration(); ivTimer.scheduleNext(); ivRetries = 0; Tr.warning(tc, \"NP_TIMER_RETRY_LIMIT_REACHED_CNTR0179W\", ivRetryLimit); if (isTraceOn && tc.isEntryEnabled()) Tr.exit(tc, \"Timer retry limit has been reached; aborting\"); return; } ivRetries++; // begin 597753 if (ivRetries == 1) { // do first retry immediately, by re-entering this method run(); } else { // re-schedule the alarm to go off after the retry interval // (if timer had not been canceled) ivTimer.scheduleRetry(ivRetryInterval); // RTC107334 } } if (isTraceOn && tc.isEntryEnabled()) // F743-425.CodRev Tr.exit(tc, \"run\"); // F743-425.CodRev }\n\n    ### Response: Executes the timer work with configured retries.\n\nThe EJB 3.1 spec, section 18.4.3 says, \"If the transaction fails or\nis rolled back, the container must retry the timeout at least once.\"\nWe allow the user to configure a retry count of 0, which will cause\nNO retries to be performed. If the retry count is not set, we will\nretry once immediately, then every retryInterval, indefinitely..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visitInnerClass( final String name, final String outerName, final String innerName, final int access) { if (cv != null) { cv.visitInnerClass(name, outerName, innerName, access); } }\n\n    ### Response:", "ground_truth": "Visits information about an inner class. This inner class is not necessarily a member of the\nclass being visited.\n\n@param name the internal name of an inner class (see {@link Type#getInternalName()}).\n@param outerName the internal name of the class to which the inner class belongs (see {@link\nType#getInternalName()}). May be {@literal null} for not member classes.\n@param innerName the (simple) name of the inner class inside its enclosing class. May be\n{@literal null} for anonymous inner classes.\n@param access the access flags of the inner class as originally declared in the enclosing\nclass.", "predict": "Visitor method to visit an inner class of the program"}, {"ID": 1632, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function action_category_change_sortorder_down_one(\\core_course_category $category) { if (!$category->can_change_sortorder()) { throw new \\moodle_exception('permissiondenied', 'error', '', null, 'core_course_category::can_change_sortorder'); } return $category->change_sortorder_by_one(false); }\n\n    ### Response: Resort a categories subcategories shifting the given category down one.\n\n@param \\core_course_category $category\n@return bool\n@throws \\moodle_exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public FieldVisitor visitField( final int access, final String name, final String descriptor, final String signature, final Object value) { if (cv != null) { return cv.visitField(access, name, descriptor, signature, value); } return null; }\n\n    ### Response:", "ground_truth": "Visits a field of the class.\n\n@param access the field's access flags (see {@link Opcodes}). This parameter also indicates if\nthe field is synthetic and/or deprecated.\n@param name the field's name.\n@param descriptor the field's descriptor (see {@link Type}).\n@param signature the field's signature. May be {@literal null} if the field's type does not use\ngeneric types.\n@param value the field's initial value. This parameter, which may be {@literal null} if the\nfield does not have an initial value, must be an {@link Integer}, a {@link Float}, a {@link\nLong}, a {@link Double} or a {@link String} (for {@code int}, {@code float}, {@code long}\nor {@code String} fields respectively). This parameter is only used for static\nfields. Its value is ignored for non static fields, which must be initialized through\nbytecode instructions in constructors or methods.\n@return a visitor to visit field annotations and attributes, or {@literal null} if this class\nvisitor is not interested in visiting these annotations and attributes.", "predict": "Visit fields of the visited class determined by access, name, signature, and value"}, {"ID": 1633, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function Environment(options) { if (!(this instanceof Environment)) { return new Environment(options); } // defaults options = lodash.defaults(options || {}, { setup: true, }); this.env = jjv(); this.env.defaultOptions.checkRequired = true; this.env.defaultOptions.useDefault = true; this.env.defaultOptions.useCoerce = false; this._jjve = jjve(this.env); if (options.setup) this.setup(); }\n\n    ### Response: Initialize a new `Environment`.\n\n@param {Object} options\n@api public.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static DbThreadSession getThreadSession() { DbThreadSession session = (DbThreadSession) ThreadDbSessionHolder.get(); if (session == null) { session = new DbThreadSession(); } return session; }\n\n    ### Response:", "ground_truth": "Returns existing thread session, or new one if already not exist. If session doesn't exist, it will be created\nusing default connection provider.", "predict": "Get the singleton instance of `DbThreadSession` from the ThreadLocal Store."}, {"ID": 1634, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function resolveRule($rule) { $validation = []; if (is_array($rule)) { return $validation; } switch ($rule) { case 'required': $validation['required'] = 'required'; break; default: if (str_contains($rule, ':') && !str_contains($rule, 'unique')) { list($name, $value) = explode(':', $rule); $validation[\"data-{$name}length\"] = $value; } break; } return $validation; }\n\n    ### Response: resolve single form rule\n\n@param String $rule\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void closeThreadSession() { DbThreadSession session = (DbThreadSession) ThreadDbSessionHolder.get(); if (session != null) { session.closeSession(); } }\n\n    ### Response:", "ground_truth": "Closes thread session.", "predict": "Closes the db session of the given thread."}, {"ID": 1635, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (l *Logger) Warning(v ...interface{}) { l.output(sWarning, 0, fmt.Sprint(v...)) }\n\n    ### Response: // Warning logs with the Warning severity.\n// Arguments are handled in the manner of fmt.Print..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected ActionWrapper[] createExecutionArray() { int totalInterceptors = (this.actionRuntime.getInterceptors() != null ? this.actionRuntime.getInterceptors().length : 0); int totalFilters = (this.actionRuntime.getFilters() != null ? this.actionRuntime.getFilters().length : 0); ActionWrapper[] executionArray = new ActionWrapper[totalFilters + 1 + totalInterceptors + 1]; // filters int index = 0; if (totalFilters > 0) { System.arraycopy(actionRuntime.getFilters(), 0, executionArray, index, totalFilters); index += totalFilters; } // result is executed AFTER the action AND interceptors executionArray[index++] = actionRequest -> { Object actionResult = actionRequest.invoke(); ActionRequest.this.madvocController.render(ActionRequest.this, actionResult); return actionResult; }; // interceptors if (totalInterceptors > 0) { System.arraycopy(actionRuntime.getInterceptors(), 0, executionArray, index, totalInterceptors); index += totalInterceptors; } // action executionArray[index] = actionRequest -> { actionResult = invokeActionMethod(); return actionResult; }; return executionArray; }\n\n    ### Response:", "ground_truth": "Creates execution array that will invoke all filters, actions and results\nin correct order.", "predict": "// Creates an execution array to hold results of the action and its interceptors and runtimes // Interceptor and Filters may add items to the execution array // Uses reflection to add items to the execution array // Uses reflection to determine length of the execution array // Uses reflection to determine total number of Interceptors and Filters // Uses reflection to determine total number of Interceptors and Filters"}, {"ID": 1636, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def discretize(self, method, *args, **kwargs): \"\"\" Discretizes the continuous distribution into discrete probability masses using specified method. Parameters ---------- method: string, BaseDiscretizer instance A Discretizer Class from pgmpy.factors.discretize *args, **kwargs: values The parameters to be given to the Discretizer Class. Returns ------- An n-D array or a DiscreteFactor object according to the discretiztion method used. Examples -------- >>> import numpy as np >>> from scipy.special import beta >>> from pgmpy.factors.continuous import ContinuousFactor >>> from pgmpy.factors.continuous import RoundingDiscretizer >>> def dirichlet_pdf(x, y): ... return (np.power(x, 1) * np.power(y, 2)) / beta(x, y) >>> dirichlet_factor = ContinuousFactor(['x', 'y'], dirichlet_pdf) >>> dirichlet_factor.discretize(RoundingDiscretizer, ... low=1, high=2, cardinality=5) # TODO: finish this \"\"\" super(CustomDistribution, self).discretize(method, *args, **kwargs)\n\n    ### Response: Discretizes the continuous distribution into discrete\n        probability masses using specified method.\n\n        Parameters\n        ----------\n        method: string, BaseDiscretizer instance\n            A Discretizer Class from pgmpy.factors.discretize\n\n        *args, **kwargs: values\n            The parameters to be given to the Discretizer Class.\n\n        Returns\n        -------\n        An n-D array or a DiscreteFactor object according to the discretiztion\n        method used.\n\n        Examples\n        --------\n        >>> import numpy as np\n        >>> from scipy.special import beta\n        >>> from pgmpy.factors.continuous import ContinuousFactor\n        >>> from pgmpy.factors.continuous import RoundingDiscretizer\n        >>> def dirichlet_pdf(x, y):\n        ...     return (np.power(x, 1) * np.power(y, 2)) / beta(x, y)\n        >>> dirichlet_factor = ContinuousFactor(['x', 'y'], dirichlet_pdf)\n        >>> dirichlet_factor.discretize(RoundingDiscretizer,\n        ...                             low=1, high=2, cardinality=5)\n        # TODO: finish this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Object invokeActionMethod() throws Exception { if (actionRuntime.isActionHandlerDefined()) { actionRuntime.getActionHandler().handle(this); return null; } final Object[] params = targets.extractParametersValues(); try { return actionRuntime.getActionClassMethod().invoke(action, params); } catch(InvocationTargetException itex) { throw wrapToException(unwrapThrowable(itex)); } }\n\n    ### Response:", "ground_truth": "Invokes action method after starting all interceptors.\nAfter method invocation, all interceptors will finish, in opposite order.", "predict": "Invoke the action handler of the specified action and\n        extract its output values to the given objects targets and params arrays respectively."}, {"ID": 1637, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String getProxyPwd(Properties repoProperties) { if (repoProperties.getProperty(InstallConstants.REPO_PROPERTIES_PROXY_USERPWD) != null) return repoProperties.getProperty(InstallConstants.REPO_PROPERTIES_PROXY_USERPWD); else if (repoProperties.getProperty(InstallConstants.REPO_PROPERTIES_PROXY_PWD) != null) return repoProperties.getProperty(InstallConstants.REPO_PROPERTIES_PROXY_PWD); else return null; }\n\n    ### Response: Gets the Proxy user password.\n\n@param repoProperties the Repository Properties\n@return the user password.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String readRequestBody() { if (requestBody == null) { try { requestBody = ServletUtil.readRequestBodyFromStream(getHttpServletRequest()); } catch (IOException ioex) { requestBody = StringPool.EMPTY; } } return requestBody; }\n\n    ### Response:", "ground_truth": "Reads request body only once and returns it to user.", "predict": "Reads the contents of the request body."}, {"ID": 1638, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def system_error(self, msg_id=None, message=None, description=None, validation_timeout=False, exc_info=None, **kw): \"\"\"Add an error message for an unexpected exception in validator code, and move it to the front of the error message list. If `exc_info` is supplied, the error will be logged. If the error is a validation timeout, it is re-raised unless `msg_id` is \"validation_timeout\".\"\"\" if exc_info: if (isinstance(exc_info[1], validator.ValidationTimeout) and msg_id != 'validation_timeout'): # These should always propagate to the top-level exception # handler, and be reported only once. raise exc_info[1] log.error('Unexpected error during validation: %s: %s' % (exc_info[0].__name__, exc_info[1]), exc_info=exc_info) full_id = ('validator', 'unexpected_exception') if msg_id: full_id += (msg_id,) self.error(full_id, message or 'An unexpected error has occurred.', description or ('Validation was unable to complete successfully due ' 'to an unexpected error.', 'The error has been logged, but please consider ' 'filing an issue report here: ' 'https://bit.ly/1POrYYU'), tier=1, **kw) # Move the error message to the beginning of the list. self.errors.insert(0, self.errors.pop())\n\n    ### Response: Add an error message for an unexpected exception in validator\n        code, and move it to the front of the error message list. If\n        `exc_info` is supplied, the error will be logged.\n\n        If the error is a validation timeout, it is re-raised unless\n        `msg_id` is \"validation_timeout\"..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int calcFirstItemIndexOfPage(int page, final int pageSize, final int total) { if (total == 0) { return 0; } if (page < 1) { page = 1; } int first = (page - 1) * pageSize; if (first >= total) { first = ((total - 1) / pageSize) * pageSize; // first item on the last page } return first; }\n\n    ### Response:", "ground_truth": "Calculates the first item index of requested page.", "predict": "Calculate the first item index on the first page of a given\n    page size and total items, given the page number of the first\n    page of items to display and the total number of items in the\n    collection to display"}, {"ID": 1639, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function fixDatadirSymlinks($remote_host, $remote_dir, $target_dir) { $this->log('fixDatadirSymlinks', LOG_DEBUG); if (empty($this->data_dirs)) return; $this->log('Creating data dir symlinks:', LOG_DEBUG); $cmd = \"cd $remote_dir/{$target_dir}; php {$this->datadir_patcher} --datadir-prefix={$this->data_dir_prefix} --previous-dir={$this->last_remote_target_dir} \". implode(' ', $this->data_dirs); $output = array(); $return = null; $this->sshExec($remote_host, $cmd, $output, $return); $this->log($output); }\n\n    ### Response: Executes the datadir patcher to create symlinks to the data dirs.\n\n@param string $remote_host\n@param string $remote_dir\n@param string $target_dir.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int calcFirstItemIndexOfPage(final PageRequest pageRequest, final int total) { return calcFirstItemIndexOfPage(pageRequest.getPage(), pageRequest.getSize(), total); }\n\n    ### Response:", "ground_truth": "Calculates first item index of the page.", "predict": "Calculates first item index of the given page on the given page and total items of the given page and returns it."}, {"ID": 1640, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getUrl(array $data = []) { // Guess the what URL should be looked like $translation_guess = preg_replace(['/\\[([^\\[]+)\\]/is', '/{(\\w*?)}/is', '/{(\\w*?):(:?.*?)}/is'], '{$1}', $this->_path); $keys = []; preg_match_all('/{(\\w*?)}/is', $translation_guess, $keys); foreach ($keys[1] as $key) { $translation_guess = str_replace('{'.$key.'}', isset($data[$key]) ? $data[$key] : 'null', $translation_guess); } // Get raw pattern from route $translation = preg_replace(['/\\//is', '/\\[([^\\[]+)\\]/is', '/{(\\w*?)}/is'],['\\/', '(?:$1)?', '{$1:([^\\/]+)}'], $this->_path); $keyex = []; preg_match_all('/{(\\w*?):(.*?)}/', $translation, $keyex); $groups = array_map(function($val) { return '(' . trim(trim($val, ')'), '(') . ')'; }, $keyex[2]); $translation = str_replace($keyex[0], $groups, $translation); // Check if guess is valid $test = preg_match(\"#^$translation$#is\", $translation_guess, $vals); return $test ? $translation_guess : ''; }\n\n    ### Response: Get route URL with parameters passed on.\n\n@example\n// Url: /categories/pages/{page}\n$pretty->getUrl(['page' => 10]);\n// Ouput: /categories/pages/10\n\n@access  public\n@param   array   $data   URL parameters\n@return  string  Generated URL.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean match(final int value) { if (a == 0) { return value == b; } if (a > 0) { if (value < b) { return false; } return (value - b) % a == 0; } if (value > b) { return false; } return (b - value) % (-a) == 0; }\n\n    ### Response:", "ground_truth": "Matches expression with the value.", "predict": "Match given parameter to given pattern and returns true if match or false if no match."}, {"ID": 1641, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setMaxRedirect($maxRedirect) { $maxRedirect = intval($maxRedirect); if (!empty($maxRedirect)) { $this->maxRedirect = $maxRedirect; } }\n\n    ### Response: Set the maximum redirects allowed.\n\n@param int $maxRedirect.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static byte[] toRawByteArray(final char[] carr) { byte[] barr = new byte[carr.length << 1]; for (int i = 0, bpos = 0; i < carr.length; i++) { char c = carr[i]; barr[bpos++] = (byte) ((c & 0xFF00) >> 8); barr[bpos++] = (byte) (c & 0x00FF); } return barr; }\n\n    ### Response:", "ground_truth": "Converts char array into byte array by replacing each character with two bytes.", "predict": "Stores a string of characters in its corresponding bytes to prepare for sending over a network stream or file."}, {"ID": 1642, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function selectSingleArray($q, $args = array()) { $this->exec($q, $args); return $this->_sth ? $this->_sth->fetch(\\PDO::FETCH_ASSOC) : false; }\n\n    ### Response: Fetch a single row as associative array\n\nFetches the first row of results, so from the caller's side it's\nequivalent to selectArray()[0] however only the first row is ever\nfetched from the server.\n\nNote that if you're not selecting by a unique ID, a LIMIT of 1 should\nstill be specified in SQL for optimal performance.\n\n@param string $q    SQL query with '?' value placeholders\n@param array  $args (Optional) List of values corresponding to placeholders\n\n@return array Single associative row.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int findFirstDiff(final char[] source, final int index, final char[] match) { for (int i = index; i < source.length; i++) { if (!equalsOne(source[i], match)) { return i; } } return -1; }\n\n    ### Response:", "ground_truth": "Finds index of the first character in given array the differs from the\ngiven set of characters.\n\n@return index of matched character or -1", "predict": "Find first difference\n\nThis function iterates over the given string to detect the first\ndifference of the given string and the given match string of the\nsame length of the given string starting from the given\nindex of the string and returns the first difference found,\nor -1 if no difference could be found."}, {"ID": 1643, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def percent_bandwidth(data, period, std=2.0): \"\"\" Percent Bandwidth. Formula: %_bw = data() - l_bb() / bb_range() \"\"\" catch_errors.check_for_period_error(data, period) period = int(period) percent_bandwidth = ((np.array(data) - lower_bollinger_band(data, period, std)) / bb_range(data, period, std) ) return percent_bandwidth\n\n    ### Response: Percent Bandwidth.\n\n    Formula:\n    %_bw = data() - l_bb() / bb_range().\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String resolveNodeName(final Node node) { switch (tagCase) { case DEFAULT: return node.getNodeName(); case RAW: return node.getNodeRawName(); case LOWERCASE: return node.getNodeRawName().toLowerCase(); case UPPERCASE: return node.getNodeRawName().toUpperCase(); } return null; }\n\n    ### Response:", "ground_truth": "Renders node name.", "predict": "Resolves the given node name to its appropriate case for the given node."}, {"ID": 1644, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func idHash(rType, protocol string, toPort, fromPort int64, self bool) string { var buf bytes.Buffer buf.WriteString(fmt.Sprintf(\"%s-\", rType)) buf.WriteString(fmt.Sprintf(\"%d-\", toPort)) buf.WriteString(fmt.Sprintf(\"%d-\", fromPort)) buf.WriteString(fmt.Sprintf(\"%s-\", strings.ToLower(protocol))) buf.WriteString(fmt.Sprintf(\"%t-\", self)) return fmt.Sprintf(\"rule-%d\", hashcode.String(buf.String())) }\n\n    ### Response: // Creates a unique hash for the type, ports, and protocol, used as a key in\n// maps.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String resolveAttributeName(final Node node, final Attribute attribute) { switch (attributeCase) { case DEFAULT: return attribute.getName(); case RAW: return attribute.getRawName(); case LOWERCASE: return attribute.getRawName().toLowerCase(); case UPPERCASE: return attribute.getRawName().toUpperCase(); } return null; }\n\n    ### Response:", "ground_truth": "Renders attribute name.", "predict": "// Resolves an attribute name to the appropriate case for the given node\n    // case default: for the given attribute\n    // case raw for the given attribute\n    // case lower for the given attribute\n    // case upper for the given attribute\n    // case default for the given node\n    // case raw for the given node\n    // case lower for the given node\n    // case upper for the given node\n    // case default for the given attribute and node\n    // case default for the given node and attribute\n    // case default for the given node and attribute and case default for the given node\n    // case default for the given node and case default for the given node\n    // case default for the given node and case default for the given node\n    // case default for the given node and case default for the given node\n    // case default for the given node and case default for the given node\n    // case default for the given node and case default for the given node\n    // case default for the given node"}, {"ID": 1645, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (*Service) DeleteHost(c context.Context, req *crimson.DeleteHostRequest) (*empty.Empty, error) { if err := deleteHost(c, req.Name); err != nil { return nil, err } return &empty.Empty{}, nil }\n\n    ### Response: // DeleteHost handles a request to delete an existing host..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void renderAttribute(final Node node, final Attribute attribute, final Appendable appendable) throws IOException { String name = resolveAttributeName(node, attribute); String value = attribute.getValue(); appendable.append(name); if (value != null) { appendable.append('='); appendable.append('\\\"'); appendable.append(HtmlEncoder.attributeDoubleQuoted(value)); appendable.append('\\\"'); } }\n\n    ### Response:", "ground_truth": "Renders attribute.", "predict": "// Resolves the given attribute name to the appropriate output format and appends it to the given appendable."}, {"ID": 1646, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function register(callable $callback, $priority = null) { $priority = $this->getPriority($priority); if (!isset($this->callbacks[$priority])) { $this->callbacks[$priority] = []; } $this->callbacks[$priority][] = $callback; $this->lowestPriority = max($priority, $this->lowestPriority); }\n\n    ### Response: Registers a callback to be called on shutdown.\n\n@param callable $callback\n@param null|int $priority The priority of the callback. Lowest number means higher priority.\n\n@throws \\InvalidArgumentException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Props load(final File file) throws IOException { final String extension = FileNameUtil.getExtension(file.getAbsolutePath()); final String data; if (extension.equalsIgnoreCase(\"properties\")) { data = FileUtil.readString(file, StringPool.ISO_8859_1); } else { data = FileUtil.readString(file); } parse(data); return this; }\n\n    ### Response:", "ground_truth": "Loads props from the file. Assumes UTF8 encoding unless\nthe file ends with '.properties', than it uses ISO 8859-1.", "predict": "Parses the given Properties file and returns the loaded Properties objects"}, {"ID": 1647, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function doSign(params, xKey, message, generateHash) { // Let H be the hashing function and m the message: // Generate a random per-message value k where 1<k<q // Calculate r = (g^k mod p) mod q // In the unlikely case that r=0, start again with a different random k // Calculate s = k^(-1) * ( H (m) + xr) mod q // In the unlikely case that s=0, start again with a different random k // The signature is (r,s) // The first two steps amount to creating a new per-message key. The modular exponentiation here is the most // computationally expensive part of the signing operation, and it may be computed before the message hash is known. // The modular inverse k^(-1) mod q is the second most expensive part, and it may also be computed before the // message hash is known. It may be computed using the extended Euclidean algorithm or using Fermat's little theorem // as k^(q-2) mod q . let hash = generateHash(message); return hash.map(h => { let done = false; let r = 0; let s = 0; do { let k = 0; let kInverse = 0; do { // Generate a random per-message value k where 1<k<q k = params.q - Math.round(Math.random() * params.q); // Calculate r = (g^k mod p) mod q r = myNumbers.modPow(params.g, k, params.p) % params.q; // Calculate s = (k^(-1) * ( H (m) + xKey * r)) mod q // (k^(-1) x) mod q -- if q is prime --> x^(q-2) mod q if (r) kInverse = myNumbers.mInverse(k, params.q); } while (r === 0 || kInverse === 0); // In the unlikely case that r=0, start again with a different random k // Calculate s = (k^(-1) * ( H (m) + xKey * r)) mod q s = ( h + 1 + xKey * r ) * kInverse % params.q; if (s) done = true; } while (!done); return {r: r, s: s} }); }\n\n    ### Response: generates digital signature for data and hash function using private key and shared DSA params\n@param {{q: number, p: number, g: number}} params shared DSA params\n@param {{number}} xKey - private key\n@param {string} message - data to sign\n@param {function} generateHash - hash function (should accept {string} and return [number])\n@returns {[{r: number, s: number}]}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Props load(final File file, final String encoding) throws IOException { parse(FileUtil.readString(file, encoding)); return this; }\n\n    ### Response:", "ground_truth": "Loads properties from the file in provided encoding.", "predict": "Parses a text file and returns its contents as Properties objects"}, {"ID": 1648, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func runCommand(cmd *exec.Cmd) (stdout string, stderr string, exitCode int, err error) { var stderrBuffer bytes.Buffer var stdoutBuffer bytes.Buffer cmd.Stderr = &stderrBuffer cmd.Stdout = &stdoutBuffer cmdErr := cmd.Run() exitCode, success := utils.GetExitStatus(cmdErr) if success { cmdErr = nil } return stdoutBuffer.String(), stderrBuffer.String(), exitCode, cmdErr }\n\n    ### Response: // runCommand runs the command and returns the stdout, stderr, exit code, and error.\n// If the command ran but returned non-zero, the error is nil.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Props load(final InputStream in) throws IOException { final Writer out = new FastCharArrayWriter(); StreamUtil.copy(in, out); parse(out.toString()); return this; }\n\n    ### Response:", "ground_truth": "Loads properties from input stream. Stream is not closed at the end.", "predict": "// load reads an InputStream and creates a Properties instance with its contents loaded into fast char arrays."}, {"ID": 1649, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _read(name): \"\"\"read the yml file\"\"\" logging.debug(\"Reading config-file: %s\" % name) try: with open(name, \"r\") as config_file: prm_dict = yaml.load(config_file) except yaml.YAMLError: raise yaml.YAMLErrorr else: return prm_dict\n\n    ### Response: read the yml file.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Props load(final Map<?, ?> p) { for (final Map.Entry<?, ?> entry : p.entrySet()) { final String name = entry.getKey().toString(); final Object value = entry.getValue(); if (value == null) { continue; } data.putBaseProperty(name, value.toString(), false); } return this; }\n\n    ### Response:", "ground_truth": "Loads base properties from the provided java properties.\nNull values are ignored.", "predict": "\n    The load() method reads the given Map of configuration parameters to add to the objects internal Map of configuration parameters to prepare for configuration and potential runtime behavior of objects of this class. It iterates over the Map of configuration parameters, and for each parameter, its name and its Value (if the Value is non null) are added to objects internal Map of configuration parameters to prepare for configuration and potential runtime behavior of objects of this class. It returns this objects internal Map of configuration parameters to prepare for configuration and potential runtime behavior of objects of this class for chaining of calls to other method of this objects internal Map of configuration parameters to prepare for configuration and potential runtime behavior of objects of this class objects internal Map of configuration parameters to prepare for configuration and potential runtime behavior of objects of this class objects internal Map of configuration parameters to prepare for configuration and potential runtime behavior of objects of this class objects internal Map of configuration parameters to prepare for configuration and potential runtime behavior of objects of this class objects internal Map of configuration parameters to prepare for configuration and potential runtime behavior of objects of this class objects"}, {"ID": 1650, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function withWorkingPublicKeyAlgorithm(AlgorithmIdentifierType $algo): self { $state = clone $this; $state->_workingPublicKeyAlgorithm = $algo; return $state; }\n\n    ### Response: Get self with working_public_key_algorithm.\n\n@param AlgorithmIdentifierType $algo\n@return self.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public Props load(final Map<?, ?> map, final String prefix) { String realPrefix = prefix; realPrefix += '.'; for (final Map.Entry entry : map.entrySet()) { final String name = entry.getKey().toString(); final Object value = entry.getValue(); if (value == null) { continue; } data.putBaseProperty(realPrefix + name, value.toString(), false); } return this; }\n\n    ### Response:", "ground_truth": "Loads base properties from java Map using provided prefix.\nNull values are ignored.", "predict": "Loads objects with values from the given Map and the given prefix string"}, {"ID": 1651, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean okayToSendServerStarted() { if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.entry(tc, \"okayToSendServerStarted\", this); synchronized (lockObject) { if (!_sentServerStarted) { if ((_state == STATE_STARTED) && _mainImpl.isServerStarted()) { _sentServerStarted = true; } } } if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.exit(tc, \"okayToSendServerStarted\", new Boolean(_sentServerStarted)); return _sentServerStarted; }\n\n    ### Response: Determine whether the conditions permitting a \"server started\" notification\nto be sent are met.\n\n@return boolean a value indicating whether the notification can be sent.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Props loadFromClasspath(final String... patterns) { ClassScanner.create() .registerEntryConsumer(entryData -> { String usedEncoding = JoddCore.encoding; if (StringUtil.endsWithIgnoreCase(entryData.name(), \".properties\")) { usedEncoding = StringPool.ISO_8859_1; } final String encoding = usedEncoding; UncheckedException.runAndWrapException(() -> load(entryData.openInputStream(), encoding)); }) .includeResources(true) .ignoreException(true) .excludeCommonJars() .excludeAllEntries(true) .includeEntries(patterns) .scanDefaultClasspath() .start(); return this; }\n\n    ### Response:", "ground_truth": "Loads props and properties from the classpath.", "predict": "Loads the contents of the given patterns from the Classpath into the properties objects of this Properties instance."}, {"ID": 1652, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def count_frameshift_total(mut_df, bed_path, use_unmapped=False, to_zero_based=False): \"\"\"Count frameshifts for each gene. Parameters ---------- mut_df : pd.DataFrame mutation input bed_path : str path to BED file containing reference tx for genes use_unmapped : Bool flag indicating whether to include frameshifts not mapping to reference tx to_zero_based : Bool whether to convert end-coordinate to zero based for analysis Returns ------- fs_cts_df : pd.DataFrame contains both total frameshift counts and frameshift counts not mappable to the reference transcript. \"\"\" if to_zero_based: mut_df['Start_Position'] = mut_df['Start_Position'] - 1 fs_cts = {} # frameshift count information for each gene fs_df = indel.keep_frameshifts(mut_df) for bed in utils.bed_generator(bed_path): gene_df = fs_df[fs_df['Gene']==bed.gene_name] # find it frameshift actually is on gene annotation fs_pos = [] for ix, row in gene_df.iterrows(): indel_pos = [row['Start_Position'], row['End_Position']] coding_pos = bed.query_position(bed.strand, row['Chromosome'], indel_pos) fs_pos.append(coding_pos) # mark frameshifts that could not be mapped to reference tx gene_df['unmapped'] = [(1 if x is None else 0) for x in fs_pos] total_fs = len(gene_df) unmapped_fs = len(gene_df[gene_df['unmapped']==1]) # filter out frameshifts that did not match reference tx if not use_unmapped: gene_df = gene_df[gene_df['unmapped']==0] total_fs -= unmapped_fs info = [total_fs, unmapped_fs,] fs_cts[bed.gene_name] = info # prepare counts into a dataframe fs_cts_df = pd.DataFrame.from_dict(fs_cts, orient='index') cols = ['total', 'unmapped',] fs_cts_df.columns = cols return fs_cts_df\n\n    ### Response: Count frameshifts for each gene.\n\n    Parameters\n    ----------\n    mut_df : pd.DataFrame\n        mutation input\n    bed_path : str\n        path to BED file containing reference tx for genes\n    use_unmapped : Bool\n        flag indicating whether to include frameshifts not mapping\n        to reference tx\n    to_zero_based : Bool\n        whether to convert end-coordinate to zero based for analysis\n\n    Returns\n    -------\n    fs_cts_df : pd.DataFrame\n        contains both total frameshift counts and frameshift counts\n        not mappable to the reference transcript..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getValueOrDefault(final String key, final String defaultValue) { initialize(); final String value = data.lookupValue(key, activeProfiles); if (value == null) { return defaultValue; } return value; }\n\n    ### Response:", "ground_truth": "Returns value of property, using active profiles or default value if not found.", "predict": "Get the value of the given key or its default, depending on its existence in the given Map and active profiles of the instance of the application."}, {"ID": 1653, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function isMessageForCurrentDialog(userId, dialogId) { var result = false; if (dialogId == currentDialog._id || (dialogId === null && currentDialog.type == 3 && opponentId == userId)) { result = true; } return result; }\n\n    ### Response: filter for current dialog.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setValue(final String key, final String value, final String profile) { if (profile == null) { data.putBaseProperty(key, value, false); } else { data.putProfileProperty(key, value, profile, false); } initialized = false; }\n\n    ### Response:", "ground_truth": "Sets value on some profile.", "predict": "Sets the given key to the given value in the given profile or the default profile if no profile is given"}, {"ID": 1654, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    boolean setObserver(Observer observer) { // F16043 boolean success; Observer oldObserver; synchronized (this) { oldObserver = ivObserver; success = oldObserver != null || !isDone(); ivObserver = success ? observer : null; } if (oldObserver != null) { oldObserver.update(null, observer); } return success; }\n\n    ### Response: Sets the current observer and updates the pending one. If the result is\nalready available, the existing observer if any will be updated and\npassed the new observer as data. Otherwise, the observer will be updated\nwhen the result is available and will be passed null as data.\n\n@param observer the new observer\n@return true if the observer was set, or false if the result is available.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void extractProps(final Map target) { initialize(); data.extract(target, activeProfiles, null, null); }\n\n    ### Response:", "ground_truth": "Extracts props belonging to active profiles.", "predict": "Extracts objects to the given Map from objects with the given profiles and annotations, or\nobjects that match the given filter expressions and annotations if objects with profiles and annotations\nhave been exhausted and filter expressions pass the given filter function arguments and annotations\nevaluates to true and filter function arguments and annotations evaluate to objects with profiles and annotations\npass the given filter function arguments and annotations to the filter function and filter objects to the given Map"}, {"ID": 1655, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewMemFile(name string, rwMutex *sync.RWMutex, buf *[]byte) *MemFile { return &MemFile{ Buffer: NewBuffer(buf), mutex: rwMutex, name: name, } }\n\n    ### Response: // NewMemFile creates a Buffer which byte slice is safe from concurrent access,\n// the file itself is not thread-safe.\n//\n// This means multiple files can work safely on the same byte slice,\n// but multiple go routines working on the same file may corrupt the internal pointer structure..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void extractProps(final Map target, final String... profiles) { initialize(); data.extract(target, profiles, null, null); }\n\n    ### Response:", "ground_truth": "Extract props of given profiles.", "predict": "// extractProps extracts specified profiles from the given Map to the given Map target.\n// If there is no Map provided for target, its values are filled with the empty Map objects\n// If there is no profiles given, all profiles in the given Map data are extracted\n// If there is no profiles given and target Map is empty, empty Map objects are filled\n// If there is no profiles given and target Map is non empty, target Map may be partially populated\n// If there is no profiles given and target Map is non empty, target Map may be partially populated\n// If there is no profiles given and target Map is non empty, target Map may be partially populated"}, {"ID": 1656, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function transliterateFilename($finalTarget) { $targetFile = basename($finalTarget); if ($this->isTransliterateFilename()) { $filename = pathinfo($targetFile)['filename']; $finalTarget = str_replace( $filename, StringUtils::slug($filename), $finalTarget ); } return $finalTarget; }\n\n    ### Response: Transliterate filename.\n\n@param string $finalTarget\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void extractSubProps(final Map target, final String... wildcardPatterns) { initialize(); data.extract(target, activeProfiles, wildcardPatterns, null); }\n\n    ### Response:", "ground_truth": "Extracts subset of properties that matches given wildcards.", "predict": "Extracts objects with matching values from the given Map to the given target Map and profiles given patterns of wildcards and values to extract objects with matching values to the given target Map and profiles given patterns of wildcards and values to extract objects with matching values to the given target Map and profiles given patterns of wildcards and values to extract objects with matching values to the given target Map and profiles given patterns of wildcards and values to extract objects with matching values to the given target Map and profiles given patterns of wildcards and values to extract objects with matching values to the given target Map and profiles given patterns of wildcards and values to extract objects with matching values to the given target Map and profiles given patterns of wildcards and values to extract objects with matching values to the given target Map and profiles given patterns of wildcards and values to extract objects with matching values to the given target Map and profiles given patterns of wildcards and values to extract objects with matching values to the given target Map and profiles given patterns of wildcards and values to extract objects with matching values to the given target Map"}, {"ID": 1657, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function attributesArrayToText($attributes) { $text = \"\"; foreach ($attributes as $name => $value) { $text .= \"{$name}=\\\"{$value}\\\" \"; } $text = rtrim($text); return $text; }\n\n    ### Response: Convert the attributes array to a html text attributes\n\n@param  array $attributes\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public Map<String, Object> innerMap(final String prefix) { initialize(); return data.extract(null, activeProfiles, null, prefix); }\n\n    ### Response:", "ground_truth": "Returns inner map from the props with given prefix. Keys in returned map\nwill not have the prefix.", "predict": "Map attributes of the given prefix to objects"}, {"ID": 1658, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function addAction(Request $request) { $storage = new Storage(); /* @var $form Form */ $form = $this->createForm(new StorageForm(), $storage); if ($request->getMethod() == 'POST') { $form->handleRequest($request); if ($form->isValid()) { $em = $this->getDoctrine()->getManager(); $em->persist($storage); $em->flush(); return $this->redirect($this->generateUrl('storage_list')); } } return $this->render('AnimeDbCatalogBundle:Storage:add.html.twig', [ 'form' => $form->createView(), 'guide' => $this->get('anime_db.api.client')->getSiteUrl(self::GUIDE_LINK), ]); }\n\n    ### Response: Add storage.\n\n@param Request $request\n\n@return Response.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void addInnerMap(String prefix, final Map<?, ?> map, final String profile) { if (!StringUtil.endsWithChar(prefix, '.')) { prefix += StringPool.DOT; } for (Map.Entry<?, ?> entry : map.entrySet()) { String key = entry.getKey().toString(); key = prefix + key; setValue(key, entry.getValue().toString(), profile); } }\n\n    ### Response:", "ground_truth": "Adds child map to the props on given prefix.", "predict": "Adds an entry to the given Map and updates its profile if specified"}, {"ID": 1659, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def AddMonths(start_date, months): \"\"\"A simple convenience utility for adding months to a given start date. This increments the months by adding the number of days in the current month to the current month, for each month. Args: start_date: date The date months are being added to. months: int The number of months to add. Returns: A date equal to the start date incremented by the given number of months. \"\"\" current_date = start_date i = 0 while i < months: month_days = calendar.monthrange(current_date.year, current_date.month)[1] current_date += timedelta(days=month_days) i += 1 return current_date\n\n    ### Response: A simple convenience utility for adding months to a given start date.\n\n  This increments the months by adding the number of days in the current month\n  to the current month, for each month.\n\n  Args:\n    start_date: date The date months are being added to.\n    months: int The number of months to add.\n\n  Returns:\n    A date equal to the start date incremented by the given number of months..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void resolveActiveProfiles() { if (activeProfilesProp == null) { activeProfiles = null; return; } final PropsEntry pv = data.getBaseProperty(activeProfilesProp); if (pv == null) { // no active profile set as the property, exit return; } final String value = pv.getValue(); if (StringUtil.isBlank(value)) { activeProfiles = null; return; } activeProfiles = StringUtil.splitc(value, ','); StringUtil.trimAll(activeProfiles); }\n\n    ### Response:", "ground_truth": "Resolves active profiles from special property.\nThis property can be only a base property!\nIf default active property is not defined, nothing happens.\nOtherwise, it will replace currently active profiles.", "predict": "Resolves active profiles by inspecting the given active profiles property string to see if any profiles were set and to extract any profiles from the given string to add to the active profiles array."}, {"ID": 1660, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public String parseString(String expressionString, PortletRequest request) { return getValue(expressionString, request, String.class); }\n\n    ### Response: Primary method used assuming all defaults..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String[] getAllProfiles() { String[] profiles = new String[data.profileProperties.size()]; int index = 0; for (String profileName : data.profileProperties.keySet()) { profiles[index] = profileName; index++; } return profiles; }\n\n    ### Response:", "ground_truth": "Returns all profiles names.", "predict": "Gets profiles names from profilesProperties Map and populates an intialized array of profiles to be accessed and used by other methods of this class"}, {"ID": 1661, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static boolean optionExist(String args[], String opt) { for (String arg : args) { if (arg.equalsIgnoreCase(opt)) { return true; } } return false; }\n\n    ### Response: Check if the option exist in the given arguments..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String[] getProfilesFor(final String propKeyNameWildcard) { HashSet<String> profiles = new HashSet<>(); profile: for (Map.Entry<String, Map<String, PropsEntry>> entries : data.profileProperties.entrySet()) { String profileName = entries.getKey(); Map<String, PropsEntry> value = entries.getValue(); for (String propKeyName : value.keySet()) { if (Wildcard.equalsOrMatch(propKeyName, propKeyNameWildcard)) { profiles.add(profileName); continue profile; } } } return profiles.toArray(new String[0]); }\n\n    ### Response:", "ground_truth": "Returns all the profiles that define certain prop's key name.\nKey name is given as a wildcard, or it can be matched fully.", "predict": "Get profiles of given profiles from the profiles properties"}, {"ID": 1662, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _check_for_dictionary_key(self, logical_id, dictionary, keys): \"\"\" Checks a dictionary to make sure it has a specific key. If it does not, an InvalidResourceException is thrown. :param string logical_id: logical id of this resource :param dict dictionary: the dictionary to check :param list keys: list of keys that should exist in the dictionary \"\"\" for key in keys: if key not in dictionary: raise InvalidResourceException(logical_id, 'Resource is missing the required [{}] ' 'property.'.format(key))\n\n    ### Response: Checks a dictionary to make sure it has a specific key. If it does not, an\n        InvalidResourceException is thrown.\n\n        :param string logical_id: logical id of this resource\n        :param dict dictionary: the dictionary to check\n        :param list keys: list of keys that should exist in the dictionary.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void addPropertyInjectionPoint(final PropertyInjectionPoint pip) { if (properties == null) { properties = new PropertyInjectionPoint[1]; properties[0] = pip; } else { properties = ArraysUtil.append(properties, pip); } }\n\n    ### Response:", "ground_truth": "Adds property injection point.", "predict": "Injects specified PropertyInjectionPoint into the given Spring ApplicationContext. If Spring's default Property Broker already exists, the given PropertyInjectionPoint may be added to its existing collection of Property Injection Point objects. Otherwise, Spring's default Property Broker may be initialized to include the given PropertyInjectionPoint objects in its collection of objects to monitor for property changes."}, {"ID": 1663, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function uploadFile( \\stdClass $params ) { $this->checkParams( $params, array( 'site', 'parentid' ) ); $this->setLocale( $params->site ); if( ( $fileinfo = reset( $_FILES ) ) === false ) { throw new \\Aimeos\\Controller\\ExtJS\\Exception( 'No file was uploaded' ); } $config = $this->getContext()->getConfig(); /** controller/extjs/coupon/code/standard/uploaddir * Upload directory for text files that should be imported * * The upload directory must be an absolute path. Avoid a trailing slash * at the end of the upload directory string! * * @param string Absolute path including a leading slash * @since 2014.09 * @category Developer */ $dir = $config->get( 'controller/extjs/coupon/code/standard/uploaddir', 'uploads' ); /** controller/extjs/coupon/code/standard/enablecheck * Enables checking uploaded files if they are valid and not part of an attack * * This configuration option is for unit testing only! Please don't disable * the checks for uploaded files in production environments as this * would give attackers the possibility to infiltrate your installation! * * @param boolean True to enable, false to disable * @since 2014.09 * @category Developer */ if( $config->get( 'controller/extjs/coupon/code/standard/enablecheck', true ) ) { $this->checkFileUpload( $fileinfo['tmp_name'], $fileinfo['error'] ); } $fileext = pathinfo( $fileinfo['name'], PATHINFO_EXTENSION ); $dest = $dir . DIRECTORY_SEPARATOR . md5( $fileinfo['name'] . time() . getmypid() ) . '.' . $fileext; if( rename( $fileinfo['tmp_name'], $dest ) !== true ) { $msg = sprintf( 'Uploaded file could not be moved to upload directory \"%1$s\"', $dir ); throw new \\Aimeos\\Controller\\ExtJS\\Exception( $msg ); } /** controller/extjs/coupon/code/standard/fileperms * File permissions used when storing uploaded files * * The representation of the permissions is in octal notation (using 0-7) * with a leading zero. The first number after the leading zero are the * permissions for the web server creating the directory, the second is * for the primary group of the web server and the last number represents * the permissions for everyone else. * * You should use 0660 or 0600 for the permissions as the web server needs * to manage the files. The group permissions are important if you plan * to upload files directly via FTP or by other means because then the * web server needs to be able to read and manage those files. In this * case use 0660 as permissions, otherwise you can limit them to 0600. * * A more detailed description of the meaning of the Unix file permission * bits can be found in the Wikipedia article about * {@link https://en.wikipedia.org/wiki/File_system_permissions#Numeric_notation file system permissions} * * @param integer Octal Unix permission representation * @since 2014.09 * @category Developer */ $perms = $config->get( 'controller/extjs/coupon/code/standard/fileperms', 0660 ); if( chmod( $dest, $perms ) !== true ) { $msg = sprintf( 'Could not set permissions \"%1$s\" for file \"%2$s\"', $perms, $dest ); throw new \\Aimeos\\Controller\\ExtJS\\Exception( $msg ); } $result = (object) array( 'site' => $params->site, 'items' => array( (object) array( 'job.label' => 'Coupon code import: ' . $fileinfo['name'], 'job.method' => 'Coupon_Code.importFile', 'job.parameter' => array( 'site' => $params->site, 'parentid' => $params->parentid, 'items' => $dest, ), 'job.status' => 1, ), ), ); $jobController = \\Aimeos\\Controller\\ExtJS\\Admin\\Job\\Factory::createController( $this->getContext() ); $jobController->saveItems( $result ); return array( 'items' => $dest, 'success' => true, ); }\n\n    ### Response: Uploads a file with coupon codes and meta information.\n\n@param \\stdClass $params Object containing the properties.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void addSetInjectionPoint(final SetInjectionPoint sip) { if (sets == null) { sets = new SetInjectionPoint[1]; sets[0] = sip; } else { sets = ArraysUtil.append(sets, sip); } }\n\n    ### Response:", "ground_truth": "Adds set injection point.", "predict": "Injects objects into the given set of objects to add metadata to the objects for later retrieval by the metadata filter."}, {"ID": 1664, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void discardStream(InputStream is,int size) throws IOException { byte[] buffer = new byte[size]; while(is.read(buffer, 0, size) != -1) { } }\n\n    ### Response: throw away all bytes from stream argument\n@param is InputStream to read and discard\n@param size number of bytes to read at once from the stream\n@throws IOException when is throws one.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void addMethodInjectionPoint(final MethodInjectionPoint mip) { if (methods == null) { methods = new MethodInjectionPoint[1]; methods[0] = mip; } else { methods = ArraysUtil.append(methods, mip); } }\n\n    ### Response:", "ground_truth": "Adds method injection point.", "predict": "Inject annotations to given method arguments"}, {"ID": 1665, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function simplePaginator($items, $perPage, $currentPage, $options) { return Container::getInstance()->makeWith(Paginator::class, compact( 'items', 'perPage', 'currentPage', 'options' )); }\n\n    ### Response: Create a new simple paginator instance.\n\n@param  \\Illuminate\\Support\\Collection  $items\n@param  int $perPage\n@param  int $currentPage\n@param  array  $options\n@return \\Illuminate\\Pagination\\Paginator.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void addInitMethodPoints(final InitMethodPoint[] methods) { if (initMethods == null) { initMethods = methods; } else { initMethods = ArraysUtil.join(initMethods, methods); } }\n\n    ### Response:", "ground_truth": "Adds init methods.", "predict": "Populate the initMethods array with points of the given initMethods and add these points to the initMethods array."}, {"ID": 1666, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def follow_user(self, user, delegate): \"\"\"Follow the given user. Returns the user info back to the given delegate \"\"\" parser = txml.Users(delegate) return self.__postPage('/friendships/create/%s.xml' % (user), parser)\n\n    ### Response: Follow the given user.\n\n        Returns the user info back to the given delegate.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void addDestroyMethodPoints(final DestroyMethodPoint[] methods) { if (destroyMethods == null) { destroyMethods = methods; } else { destroyMethods = ArraysUtil.join(destroyMethods, methods); } }\n\n    ### Response:", "ground_truth": "Adds destroy methods.", "predict": "\n    Defines and maintains an ordered set of points to be added to the method signature during method analysis of the given method."}, {"ID": 1667, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def kde_histogram(events_x, events_y, xout=None, yout=None, bins=None): \"\"\" Histogram-based Kernel Density Estimation Parameters ---------- events_x, events_y: 1D ndarray The input points for kernel density estimation. Input is flattened automatically. xout, yout: ndarray The coordinates at which the KDE should be computed. If set to none, input coordinates are used. bins: tuple (binsx, binsy) The number of bins to use for the histogram. Returns ------- density: ndarray, same shape as `xout` The KDE for the points in (xout, yout) See Also -------- `numpy.histogram2d` `scipy.interpolate.RectBivariateSpline` \"\"\" valid_combi = ((xout is None and yout is None) or (xout is not None and yout is not None) ) if not valid_combi: raise ValueError(\"Both `xout` and `yout` must be (un)set.\") if yout is None and yout is None: xout = events_x yout = events_y if bins is None: bins = (max(5, bin_num_doane(events_x)), max(5, bin_num_doane(events_y))) # Compute the histogram hist2d, xedges, yedges = np.histogram2d(x=events_x, y=events_y, bins=bins, normed=True) xip = xedges[1:]-(xedges[1]-xedges[0])/2 yip = yedges[1:]-(yedges[1]-yedges[0])/2 estimator = RectBivariateSpline(x=xip, y=yip, z=hist2d) density = estimator.ev(xout, yout) density[density < 0] = 0 return density.reshape(xout.shape)\n\n    ### Response: Histogram-based Kernel Density Estimation\n\n    Parameters\n    ----------\n    events_x, events_y: 1D ndarray\n        The input points for kernel density estimation. Input\n        is flattened automatically.\n    xout, yout: ndarray\n        The coordinates at which the KDE should be computed.\n        If set to none, input coordinates are used.\n    bins: tuple (binsx, binsy)\n        The number of bins to use for the histogram.\n\n    Returns\n    -------\n    density: ndarray, same shape as `xout`\n        The KDE for the points in (xout, yout)\n\n    See Also\n    --------\n    `numpy.histogram2d`\n    `scipy.interpolate.RectBivariateSpline`.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Class resolveTargetClass(final Class proxy) { final String name = proxy.getName(); if (name.endsWith(ProxettaNames.proxyClassNameSuffix)) { return proxy.getSuperclass(); } if (name.endsWith(ProxettaNames.wrapperClassNameSuffix)) { return getTargetWrapperType(proxy); } return proxy; }\n\n    ### Response:", "ground_truth": "Returns target class if proxetta applied on given class.\nIf not, returns given class as result.", "predict": "Resolves the target class of the given proxy."}, {"ID": 1668, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewCmdApply(apf *applyPlanFlags) *cobra.Command { flags := &applyFlags{ applyPlanFlags: apf, imagePullTimeout: defaultImagePullTimeout, etcdUpgrade: true, renewCerts: true, // Don't set criSocket to a default value here, as this will override the setting in the stored config in RunApply below. } cmd := &cobra.Command{ Use: \"apply [version]\", DisableFlagsInUseLine: true, Short: \"Upgrade your Kubernetes cluster to the specified version\", Run: func(cmd *cobra.Command, args []string) { userVersion, err := getK8sVersionFromUserInput(flags.applyPlanFlags, args, true) kubeadmutil.CheckErr(err) err = runApply(flags, userVersion) kubeadmutil.CheckErr(err) }, } // Register the common flags for apply and plan addApplyPlanFlags(cmd.Flags(), flags.applyPlanFlags) // Specify the valid flags specific for apply cmd.Flags().BoolVarP(&flags.nonInteractiveMode, \"yes\", \"y\", flags.nonInteractiveMode, \"Perform the upgrade and do not prompt for confirmation (non-interactive mode).\") cmd.Flags().BoolVarP(&flags.force, \"force\", \"f\", flags.force, \"Force upgrading although some requirements might not be met. This also implies non-interactive mode.\") cmd.Flags().BoolVar(&flags.dryRun, options.DryRun, flags.dryRun, \"Do not change any state, just output what actions would be performed.\") cmd.Flags().BoolVar(&flags.etcdUpgrade, \"etcd-upgrade\", flags.etcdUpgrade, \"Perform the upgrade of etcd.\") cmd.Flags().BoolVar(&flags.renewCerts, \"certificate-renewal\", flags.renewCerts, \"Perform the renewal of certificates used by component changed during upgrades.\") cmd.Flags().DurationVar(&flags.imagePullTimeout, \"image-pull-timeout\", flags.imagePullTimeout, \"The maximum amount of time to wait for the control plane pods to be downloaded.\") // The CRI socket flag is deprecated here, since it should be taken from the NodeRegistrationOptions for the current // node instead of the command line. This prevents errors by the users (such as attempts to use wrong CRI during upgrade). cmdutil.AddCRISocketFlag(cmd.Flags(), &flags.criSocket) cmd.Flags().MarkDeprecated(options.NodeCRISocket, \"This flag is deprecated. Please, avoid using it.\") return cmd }\n\n    ### Response: // NewCmdApply returns the cobra command for `kubeadm upgrade apply`.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void injectTargetIntoWrapper(final Object target, final Object wrapper) { injectTargetIntoWrapper(target, wrapper, ProxettaNames.wrapperTargetFieldName); }\n\n    ### Response:", "ground_truth": "Injects target instance into proxy using default target field name.\n@see #injectTargetIntoWrapper(Object, Object, String)", "predict": "// Inject the given target into the given wrapper,\n    // delegating to the appropriate method for the given wrapper.\n    public static void injectTargetIntoWrapper(Object target, Object wrapper, String wrapperFieldName) {\n        Field wrapperField = wrapper.getClass().getDeclaredField(wrapperFieldName);\n        wrapperField.setAccessible(true);\n        Field targetField = target.getClass().getDeclaredField(ProxettaNames.targetFieldName);\n        targetField.setAccessible(true);\n        wrapperField.set(wrapper, targetField.get(target));\n    }"}, {"ID": 1669, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def move(self, u_function): \"\"\" Move a mesh by using an external function which prescribes the displacement at any point in space. Useful for manipulating ``dolfin`` meshes. \"\"\" if self.mesh: self.u = u_function delta = [u_function(p) for p in self.mesh.coordinates()] movedpts = self.mesh.coordinates() + delta self.polydata(False).GetPoints().SetData(numpy_to_vtk(movedpts)) self.poly.GetPoints().Modified() self.u_values = delta else: colors.printc(\"Warning: calling move() but actor.mesh is\", self.mesh, c=3) return self\n\n    ### Response: Move a mesh by using an external function which prescribes the displacement\n        at any point in space.\n        Useful for manipulating ``dolfin`` meshes..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Class getTargetWrapperType(final Class wrapperClass) { try { final Field field = wrapperClass.getDeclaredField(ProxettaNames.wrapperTargetFieldName); return field.getType(); } catch (NoSuchFieldException nsfex) { throw new ProxettaException(nsfex); } }\n\n    ### Response:", "ground_truth": "Returns wrapper target type.", "predict": "Get the wrapper type for the given wrapperClass"}, {"ID": 1670, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function replyTo(Message $message, $messageOrContent, $cost = 0, $messageId = null, $adjustCost = true) { // Return return $this->reply($message->id, $message->mobile, $messageOrContent, $cost, $messageId, $adjustCost); }\n\n    ### Response: Reply to a message.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected FieldDescriptor findField(final String fieldName) { FieldDescriptor fieldDescriptor = classDescriptor.getFieldDescriptor(fieldName, true); if (fieldDescriptor != null) { return fieldDescriptor; } // field descriptor not found in this class // try to locate it in the superclasses Class[] superclasses = classDescriptor.getAllSuperclasses(); for (Class superclass : superclasses) { ClassDescriptor classDescriptor = ClassIntrospector.get().lookup(superclass); fieldDescriptor = classDescriptor.getFieldDescriptor(fieldName, true); if (fieldDescriptor != null) { return fieldDescriptor; } } // nothing found return null; }\n\n    ### Response:", "ground_truth": "Locates property field. Field is being searched also in all\nsuperclasses of current class.", "predict": "Locates the given field in the given class or any of its superclass(es)."}, {"ID": 1671, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func availableAddresses(allAddrs []net.IP) (v4 []net.IP, v6 []net.IP) { for _, addr := range allAddrs { if addr.To4() != nil { v4 = append(v4, addr) } else { v6 = append(v6, addr) } } return }\n\n    ### Response: // availableAddresses takes a ValidationRecord and splits the AddressesResolved\n// into a list of IPv4 and IPv6 addresses..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Class getType() { if (type == null) { if (fieldDescriptor != null) { type = fieldDescriptor.getRawType(); } else if (readMethodDescriptor != null) { type = getGetter(true).getGetterRawType(); //type = readMethodDescriptor.getGetterRawType(); } else if (writeMethodDescriptor != null) { type = getSetter(true).getSetterRawType(); //type = writeMethodDescriptor.getSetterRawType(); } } return type; }\n\n    ### Response:", "ground_truth": "Returns property type. Raw types are detected.", "predict": "// This method returns the RawType of the type to which the FieldDescriptor and other Field Accessors refer to\n    // If there is no FieldDescriptor, then we look for the method to retrieve the Value of the Value, and\n    // Finally look for the Value to get the Value of Value"}, {"ID": 1672, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean add(String key, ModuleDepInfo info) { if (info == null) { throw new NullPointerException(); } boolean modified = false; ModuleDepInfo existing = get(key); if (!containsKey(key) || existing != info) { if (existing != null) { modified = existing.add(info); } else { super.put(key, info); modified = true; } } return modified; }\n\n    ### Response: Adds the specified pair to the map. If an entry for the key exists, then\nthe specified module dep info is added to the existing module dep info.\n\n@param key\nThe module name to associate with the dep info object\n@param info\nthe ModuleDepInfo object\n@return true if the map was modified.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Class resolveKeyType(final boolean declared) { Class keyType = null; Getter getter = getGetter(declared); if (getter != null) { keyType = getter.getGetterRawKeyComponentType(); } if (keyType == null) { FieldDescriptor fieldDescriptor = getFieldDescriptor(); if (fieldDescriptor != null) { keyType = fieldDescriptor.getRawKeyComponentType(); } } return keyType; }\n\n    ### Response:", "ground_truth": "Resolves key type for given property descriptor.", "predict": "Resolves the component type of the key for the given declared property of the entity to be retrieved\nand returns the resolved component type of the key."}, {"ID": 1673, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def metaphone_processor(words): '''Double metaphone word processor.''' for word in words: for w in double_metaphone(word): if w: w = w.strip() if w: yield w\n\n    ### Response: Double metaphone word processor..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Class resolveComponentType(final boolean declared) { Class componentType = null; Getter getter = getGetter(declared); if (getter != null) { componentType = getter.getGetterRawComponentType(); } if (componentType == null) { FieldDescriptor fieldDescriptor = getFieldDescriptor(); if (fieldDescriptor != null) { componentType = fieldDescriptor.getRawComponentType(); } } return componentType; }\n\n    ### Response:", "ground_truth": "Resolves component type for given property descriptor.", "predict": "Resolves the componentType for the given declared value and uses the following approaches to retrieve the componentType: The first approach uses the getGetter() method to retrieve the appropriate BeanUtils class to retrieve the componentType and the second approach uses the BeanUtils class directly to retrieve the componentType."}, {"ID": 1674, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function col_term_meta( $meta_key, array $args, $term_id ) { $vals = get_term_meta( $term_id, $meta_key, false ); $echo = []; sort( $vals ); if ( isset( $args['date_format'] ) ) { if ( true === $args['date_format'] ) { $args['date_format'] = get_option( 'date_format' ); } foreach ( $vals as $val ) { if ( is_numeric( $val ) ) { $echo[] = date( $args['date_format'], $val ); } elseif ( ! empty( $val ) ) { $echo[] = mysql2date( $args['date_format'], $val ); } } } else { foreach ( $vals as $val ) { if ( ! empty( $val ) || ( '0' === $val ) ) { $echo[] = $val; } } } if ( empty( $echo ) ) { echo '&#8212;'; } else { echo esc_html( implode( ', ', $echo ) ); } }\n\n    ### Response: Output column data for a term meta field.\n\n@param string $meta_key The term meta key\n@param array  $args     Array of arguments for this field\n@param int    $term_id  Term ID..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static JsonResult of(final Object object) { final String json = JsonSerializer.create().deep(true).serialize(object); return new JsonResult(json); }\n\n    ### Response:", "ground_truth": "Creates JSON result from given object. The object will be serialized to JSON.", "predict": "Serialize objects to and from JSON format"}, {"ID": 1675, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function startSession() { if (session_status() == PHP_SESSION_NONE) { session_start(); if(!$this->expireOnClose) { setcookie('planet_session', session_id(), time() + ($this->expireTime * 60 ), '/', null, false, false); } } }\n\n    ### Response: To start session.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static JsonResult of(final Exception exception) { final HashMap<String, Object> errorMap = new HashMap<>(); errorMap.put(\"message\", ExceptionUtil.message(exception)); errorMap.put(\"error\", exception.getClass().getName()); errorMap.put(\"cause\", exception.getCause() != null ? exception.getCause().getClass().getName() : null); final ArrayList<String> details = new ArrayList<>(); final StackTraceElement[] ste = ExceptionUtil.getStackTrace(exception, null, null); for (StackTraceElement stackTraceElement : ste) { details.add(stackTraceElement.toString()); } errorMap.put(\"details\", details); final String json = JsonSerializer.create().deep(true).serialize(errorMap); return new JsonResult(json).status(HttpStatus.error500().internalError()); }\n\n    ### Response:", "ground_truth": "Creates a JSON response from an exception. Response body will have information about the\nexception and response status will be set to 500.", "predict": "To convert exception into json format and return HTTP error response."}, {"ID": 1676, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _poll_upload(self, upload_key, action): \"\"\"Poll upload until quickkey is found upload_key -- upload_key returned by upload/* functions \"\"\" if len(upload_key) != UPLOAD_KEY_LENGTH: # not a regular 11-char-long upload key # There is no API to poll filedrop uploads return UploadResult( action=action, quickkey=None, hash_=None, filename=None, size=None, created=None, revision=None ) quick_key = None while quick_key is None: poll_result = self._api.upload_poll(upload_key) doupload = poll_result['doupload'] logger.debug(\"poll(%s): status=%d, description=%s, filename=%s,\" \" result=%d\", upload_key, int(doupload['status']), doupload['description'], doupload['filename'], int(doupload['result'])) if int(doupload['result']) != 0: break if doupload['fileerror'] != '': # TODO: we may have to handle this a bit more dramatically logger.warning(\"poll(%s): fileerror=%d\", upload_key, int(doupload['fileerror'])) break if int(doupload['status']) == STATUS_NO_MORE_REQUESTS: quick_key = doupload['quickkey'] elif int(doupload['status']) == STATUS_UPLOAD_IN_PROGRESS: # BUG: http://forum.mediafiredev.com/showthread.php?588 raise RetriableUploadError( \"Invalid state transition ({})\".format( doupload['description'] ) ) else: time.sleep(UPLOAD_POLL_INTERVAL) return UploadResult( action=action, quickkey=doupload['quickkey'], hash_=doupload['hash'], filename=doupload['filename'], size=doupload['size'], created=doupload['created'], revision=doupload['revision'] )\n\n    ### Response: Poll upload until quickkey is found\n\n        upload_key -- upload_key returned by upload/* functions.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String resolveHttpMethodFromMethodName(final String methodName) { int i = 0; while (i < methodName.length()) { if (CharUtil.isUppercaseAlpha(methodName.charAt(i))) { break; } i++; } final String name = methodName.substring(0, i).toUpperCase(); for (final HttpMethod httpMethod : HttpMethod.values()) { if (httpMethod.equalsName(name)) { return httpMethod.name(); } } return null; }\n\n    ### Response:", "ground_truth": "Resolves HTTP method name from method name.\nIf method name or first camel-case word of a method equals to\na HTTP method, it will be used as that HTTP methods.", "predict": "Resolves HTTP method from method name\n    Resolves HTTP method from method name"}, {"ID": 1677, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def set_role new_role value = make_valid_role new_role return false if !value store.set_role(value) end\n\n    ### Response: Set the role of the subject to a new role\n @param  [Symbol] the role to set\n @return [true, false, Error] true if ok, false if not valid, Error on some error.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static boolean match(final CharSequence string, final CharSequence pattern, int sNdx, int pNdx) { int pLen = pattern.length(); if (pLen == 1) { if (pattern.charAt(0) == '*') { // speed-up return true; } } int sLen = string.length(); boolean nextIsNotWildcard = false; while (true) { // check if end of string and/or pattern occurred if ((sNdx >= sLen)) { // end of string still may have pending '*' in pattern while ((pNdx < pLen) && (pattern.charAt(pNdx) == '*')) { pNdx++; } return pNdx >= pLen; } if (pNdx >= pLen) { // end of pattern, but not end of the string return false; } char p = pattern.charAt(pNdx); // pattern char // perform logic if (!nextIsNotWildcard) { if (p == '\\\\') { pNdx++; nextIsNotWildcard = true; continue; } if (p == '?') { sNdx++; pNdx++; continue; } if (p == '*') { char pNext = 0; // next pattern char if (pNdx + 1 < pLen) { pNext = pattern.charAt(pNdx + 1); } if (pNext == '*') { // double '*' have the same effect as one '*' pNdx++; continue; } int i; pNdx++; // find recursively if there is any substring from the end of the // line that matches the rest of the pattern !!! for (i = string.length(); i >= sNdx; i--) { if (match(string, pattern, i, pNdx)) { return true; } } return false; } } else { nextIsNotWildcard = false; } // check if pattern char and string char are equals if (p != string.charAt(sNdx)) { return false; } // everything matches for now, continue sNdx++; pNdx++; } }\n\n    ### Response:", "ground_truth": "Internal matching recursive function.", "predict": "Matches string with pattern and returns true if there is a match, false if there is no match and Error if there is some error during the matching procedure."}, {"ID": 1678, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static public WorkSheet unionWorkSheetsRowJoin(String w1FileName, String w2FileName, char delimitter, boolean secondSheetMetaData) throws Exception { WorkSheet w1 = WorkSheet.readCSV(w1FileName, delimitter); WorkSheet w2 = WorkSheet.readCSV(w2FileName, delimitter); return unionWorkSheetsRowJoin(w1, w2, secondSheetMetaData); }\n\n    ### Response: Combine two work sheets where you join based on rows. Rows that are found\nin one but not the other are removed. If the second sheet is meta data\nthen a meta data column will be added between the two joined columns\n\n@param w1FileName\n@param w2FileName\n@param delimitter\n@param secondSheetMetaData\n@return\n@throws Exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Loading resolveLoading(final boolean parentFirstStrategy, final String className) { boolean withParent = true; boolean withLoader = true; if (parentFirstStrategy) { if (isMatchingRules(className, loaderOnlyRules)) { withParent = false; } else if (isMatchingRules(className, parentOnlyRules)) { withLoader = false; } } else { if (isMatchingRules(className, parentOnlyRules)) { withLoader = false; } else if (isMatchingRules(className, loaderOnlyRules)) { withParent = false; } } return new Loading(withParent, withLoader); }\n\n    ### Response:", "ground_truth": "Resolves loading rules.", "predict": "Resolves the loading for the given resource and resolves the parent and child loader relationships"}, {"ID": 1679, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_holdings(self, account: SEPAAccount): \"\"\" Retrieve holdings of an account. :param account: SEPAAccount to retrieve holdings for. :return: List of Holding objects \"\"\" # init dialog with self._get_dialog() as dialog: hkwpd = self._find_highest_supported_command(HKWPD5, HKWPD6) responses = self._fetch_with_touchdowns( dialog, lambda touchdown: hkwpd( account=hkwpd._fields['account'].type.from_sepa_account(account), touchdown_point=touchdown, ), 'HIWPD' ) holdings = [] for resp in responses: if type(resp.holdings) == bytes: holding_str = resp.holdings.decode() else: holding_str = resp.holdings mt535_lines = str.splitlines(holding_str) # The first line is empty - drop it. del mt535_lines[0] mt535 = MT535_Miniparser() holdings.extend(mt535.parse(mt535_lines)) if not holdings: logger.debug('No HIWPD response segment found - maybe account has no holdings?') return holdings\n\n    ### Response: Retrieve holdings of an account.\n\n        :param account: SEPAAccount to retrieve holdings for.\n        :return: List of Holding objects.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Loading resolveResourceLoading(final boolean parentFirstStrategy, String resourceName) { if (matchResourcesAsPackages) { resourceName = StringUtil.replaceChar(resourceName, '/', '.'); } return resolveLoading(parentFirstStrategy, resourceName); }\n\n    ### Response:", "ground_truth": "Resolves resources.", "predict": "Resolve resource loading given specified conditions\n\n     * If resource name contains '/', first strip '/' and convert to '.'.\n     * If resource names contains '/', assume absolute path and load from its root.\n     * Otherwise assume relative path and look in parent first and then in current bundle for resource of given name."}, {"ID": 1680, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def temperature(self, what): \"\"\"Set temperature.\"\"\" self._temperature = units.validate_quantity(what, u.K)\n\n    ### Response: Set temperature..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected synchronized Class<?> loadClass(final String className, final boolean resolve) throws ClassNotFoundException { // check first if the class has already been loaded Class<?> c = findLoadedClass(className); if (c != null) { if (resolve) { resolveClass(c); } return c; } // class not loaded yet Loading loading = resolveLoading(parentFirst, className); if (parentFirst) { // PARENT FIRST if (loading.withParent) { try { c = parentClassLoader.loadClass(className); } catch (ClassNotFoundException ignore) { } } if (c == null) { if (loading.withLoader) { c = this.findClass(className); } else { throw new ClassNotFoundException(\"Class not found: \" + className); } } } else { // THIS FIRST if (loading.withLoader) { try { c = this.findClass(className); } catch (ClassNotFoundException ignore) { } } if (c == null) { if (loading.withParent) { c = parentClassLoader.loadClass(className); } else { throw new ClassNotFoundException(\"Class not found: \" + className); } } } if (resolve) { resolveClass(c); } return c; }\n\n    ### Response:", "ground_truth": "Loads class using parent-first or parent-last strategy.", "predict": "The above method overrides the default behavior of the ClassLoader to resolve the given class from the parent ClassLoader first; and from the child ClassLoader next; to ensure proper mixing of the dependencies of the given class across the various subsystem of the program. If the given class is not found in any of the parent and child ClassLoader, the exception of ClassNotFoundException is thrown. If the given class is found in any of the parent and child ClassLoader, the given class is resolved and returned to the caller of the method."}, {"ID": 1681, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def user_add_prj(self, *args, **kwargs): \"\"\"Add projects to the current user :returns: None :rtype: None :raises: None \"\"\" if not self.cur_user: return dialog = ProjectAdderDialog(user=self.cur_user) dialog.exec_() prjs = dialog.projects for prj in prjs: prjdata = djitemdata.ProjectItemData(prj) treemodel.TreeItem(prjdata, self.user_prj_model.root)\n\n    ### Response: Add projects to the current user\n\n        :returns: None\n        :rtype: None\n        :raises: None.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public URL getResource(final String resourceName) { URL url = null; Loading loading = resolveResourceLoading(parentFirst, resourceName); if (parentFirst) { // PARENT FIRST if (loading.withParent) { url = parentClassLoader.getResource(resourceName); } if (url == null) { if (loading.withLoader) { url = this.findResource(resourceName); } } } else { // THIS FIRST if (loading.withLoader) { url = this.findResource(resourceName); } if (url == null) { if (loading.withParent) { url = parentClassLoader.getResource(resourceName); } } } return url; }\n\n    ### Response:", "ground_truth": "Returns a resource using parent-first or parent-last strategy.", "predict": "Override public URL getResource(final String resourceName)\n    This method overrides the default behavior of the parent class to resolve the resource in the following order of preference:\n    parentBundle, parentBundle parentBundle and parentBundle loader, and finally this bundle and its loader."}, {"ID": 1682, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function hasMany(Model $related) { $table = ucfirst($related->getTable()); $column = \"shared{$table}List\"; $this->bean->$column[] = $related->getBean(); }\n\n    ### Response: Create many-to-many relationship\n@param Model $related.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void waitFor() { try { synchronized (lock) { if (!end) { lock.wait(); } } } catch (InterruptedException ignore) { Thread.currentThread().interrupt(); } }\n\n    ### Response:", "ground_truth": "Waits for gobbler to end.", "predict": "Wait until the resource becomes available\npublic void waitFor()\n{\n try\n {\n synchronized (lock)\n {\n if (!end)\n lock.wait();\n }\n }\n catch (InterruptedException ignore)\n {\n Thread.currentThread().interrupt();\n };\n};"}, {"ID": 1683, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function Property(node, print) { print.list(node.decorators, { separator: \"\" }); if (node.method || node.kind === \"get\" || node.kind === \"set\") { this._method(node, print); } else { if (node.computed) { this.push(\"[\"); print.plain(node.key); this.push(\"]\"); } else { // print `({ foo: foo = 5 } = {})` as `({ foo = 5 } = {});` if (t.isAssignmentPattern(node.value) && t.isIdentifier(node.key) && node.key.name === node.value.left.name) { print.plain(node.value); return; } print.plain(node.key); // shorthand! if (node.shorthand && t.isIdentifier(node.key) && t.isIdentifier(node.value) && node.key.name === node.value.name) { return; } } this.push(\":\"); this.space(); print.plain(node.value); } }\n\n    ### Response: Prints Property, prints decorators, key, and value, handles kind, computed, and shorthand..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Class<? extends Annotation> detectAnnotationType(final Annotation[] annotations) { for (final Annotation annotation : annotations) { if (annotation instanceof In) { return annotation.annotationType(); } else if (annotation instanceof Out) { return annotation.annotationType(); } } return null; }\n\n    ### Response:", "ground_truth": "Scans annotation and returns type of Madvoc annotations.", "predict": "Prints DetectAnnotationType, handles In and Out annotations, and handles null annotation type"}, {"ID": 1684, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RunnerDetail registerRunner(String token, String description, Boolean active, List<String> tagList, Boolean runUntagged, Boolean locked, Integer maximumTimeout) throws GitLabApiException { GitLabApiForm formData = new GitLabApiForm() .withParam(\"token\", token, true) .withParam(\"description\", description, false) .withParam(\"active\", active, false) .withParam(\"locked\", locked, false) .withParam(\"run_untagged\", runUntagged, false) .withParam(\"tag_list\", tagList, false) .withParam(\"maximum_timeout\", maximumTimeout, false); Response response = post(Response.Status.CREATED, formData.asMap(), \"runners\"); return (response.readEntity(RunnerDetail.class)); }\n\n    ### Response: Register a new runner for the gitlab instance.\n\nGitLab Endpoint: POST /runners/\n\n@param token       the token of the project (for project specific runners) or the token from the admin page\n@param description The description of a runner\n@param active      The state of a runner; can be set to true or false\n@param tagList     The list of tags for a runner; put array of tags, that should be finally assigned to a runner\n@param runUntagged Flag indicating the runner can execute untagged jobs\n@param locked      Flag indicating the runner is locked\n@param maximumTimeout the maximum timeout set when this Runner will handle the job\n@return RunnerDetail instance.\n@throws GitLabApiException if any exception occurs.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected InjectionPoint buildInjectionPoint( final String annotationValue, final String propertyName, final Class propertyType, final Class<? extends MadvocScope> scope) { final String value = annotationValue.trim(); final String name, targetName; if (StringUtil.isNotBlank(value)) { name = value; targetName = propertyName; } else { name = propertyName; targetName = null; } return new InjectionPoint(propertyType, name, targetName, scopeResolver.defaultOrScopeType(scope)); }\n\n    ### Response:", "ground_truth": "Builds injection point.", "predict": "Injection Point Builder for Madvoc annotations"}, {"ID": 1685, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def attribute_match?(attribute, value) hash_obj_matcher = lambda do |obj, k, v| value = obj.send(k) if !value.nil? && v.is_a?(Hash) v.all? { |k2,v2| hash_obj_matcher.call(value, k2, v2) } else value == v end end hash_obj_matcher.call(self, attribute, value) end\n\n    ### Response: checks if the square matches the attributes passed.\n\n @param [Symbol] attribute\n   the square's attribute.\n\n @param [Object,Hash] value\n   a value to match on. Can be a hash of attribute/value pairs for deep matching\n\n ==== Example:\n   # Check if square has a piece owned by player 1\n   square.attribute_match?(:piece, player_number: 1).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visit() { ClassDescriptor classDescriptor = ClassIntrospector.get().lookup(type); if (classMetadataName != null) { // process first 'meta' fields 'class' onProperty(classMetadataName, null, false); } PropertyDescriptor[] propertyDescriptors = classDescriptor.getAllPropertyDescriptors(); for (PropertyDescriptor propertyDescriptor : propertyDescriptors) { Getter getter = propertyDescriptor.getGetter(declared); if (getter != null) { String propertyName = propertyDescriptor.getName(); boolean isTransient = false; // check for transient flag FieldDescriptor fieldDescriptor = propertyDescriptor.getFieldDescriptor(); if (fieldDescriptor != null) { isTransient = Modifier.isTransient(fieldDescriptor.getField().getModifiers()); } onProperty(propertyName, propertyDescriptor, isTransient); } } }\n\n    ### Response:", "ground_truth": "Visits a type.", "predict": "Visit fields of the given class to determine if any have been set to the given value\n\n # Visit fields of the given class to determine if any have been set to the given value\n\n # Check first for fields labled 'meta'.\n\n # Check for fields labled by the given name and compare values\n\n # If the value matches, record the fact\n\n # If the value does not match, record the fact\n\n # If the value is marked as `transient`\n\n # do nothing\n\n # Finally, record the fact that the visit was a success\n\n # If the value is marked as `transient`\n\n # repeat the above steps"}, {"ID": 1686, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static function group($string) { $grouped = []; $chars = str_split($string); $prevChar = null; $i = 0; foreach ($chars as $char) { if ($prevChar === $char) { $grouped[$i - 1] .= $char; } else { $grouped[$i] = $char; ++$i; $prevChar = $char; } } return $grouped; }\n\n    ### Response: Group input by repeated characters.\n\n@param string $string\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static URL[] of(ClassLoader classLoader, Class clazz) { if (clazz == null) { clazz = ClassPathURLs.class; } if (classLoader == null) { classLoader = clazz.getClassLoader(); } final Set<URL> urls = new LinkedHashSet<>(); while (classLoader != null) { if (classLoader instanceof URLClassLoader) { final URLClassLoader urlClassLoader = (URLClassLoader) classLoader; return urlClassLoader.getURLs(); } final URL url = classModuleUrl(classLoader, clazz); if (url != null) { urls.add(url); } classLoader = classLoader.getParent(); } return urls.toArray(new URL[0]); }\n\n    ### Response:", "ground_truth": "Returns urls for the classloader\n\n@param classLoader classloader in which to find urls\n@return list of urls or {@code null} if not found", "predict": "Get all of the dependencies of the given class from the given ClassLoader."}, {"ID": 1687, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Response get(String url, Credentials credentials, Header[] requestHeaders) throws URISyntaxException, HttpException { return send(new HttpGet(url), credentials, requestHeaders); }\n\n    ### Response: Performs an HTTP GET on the given URL.\n\n@param url            The URL to connect to.\n@param credentials    instance implementing {@link Credentials} interface holding a set of credentials\n@param requestHeaders Additional HTTP headers added to the request\n@return The HTTP response as Response object.\n@throws URISyntaxException\n@throws HttpException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void setBean(final Object bean) { this.bean = bean; this.cd = (bean == null ? null : introspector.lookup(bean.getClass())); this.first = false; this.updateProperty = true; }\n\n    ### Response:", "ground_truth": "Sets new bean instance.", "predict": "Initiates the bean property change listener for the given bean. If the bean is null or the bean does not have any bean property change listener defined, the listener object will be set to null and the first property change listener check wll be disabled to avoid unnecessary listener registration for the bean during its initialization time. If the bean does not implement the BeanInterface, the BeanInterface property of the listener object will be set to null to avoid unnecessary listener registration for the bean during its initialization time. If the first parameter of the listener object is true, the listener object and its BeanInterface and introspector member variables of the listener object will be initialized to the given bean during its initialization time to avoid unnecessary listener registration for the bean during its initialization time. If the first parameter of the listener object is false, the BeanInterface and introspector member variables of the listener object will be initialized to the given bean during its initialization time to avoid unnecessary listener registration for the bean during its initialization time. If the first parameter of the listener object is true and its Be"}, {"ID": 1688, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _url(self, url, file_upload=False): \"\"\" Creates the request URL. \"\"\" host = self.api_url if file_upload: host = self.uploads_api_url protocol = 'https' if self.https else 'http' if url.endswith('/'): url = url[:-1] return '{0}://{1}/{2}'.format( protocol, host, url )\n\n    ### Response: Creates the request URL..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void updateBean(final Object bean) { this.setBean(bean); if (this.cd != null && this.cd.isSupplier()) { final Object newBean = ((Supplier)this.bean).get(); setBean(newBean); } }\n\n    ### Response:", "ground_truth": "Updates the bean. Detects special case of suppliers.", "predict": "Updates the bean and may invoke the bean's setter method to change the bean"}, {"ID": 1689, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void swap() { if (modeContext.equals(ModeContext.VIEW_MODE)) { modeContext = ModeContext.EDIT_MODE; } else { modeContext = ModeContext.VIEW_MODE; } }\n\n    ### Response: Swap the ModeContext..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void loadPropertyDescriptor() { if (updateProperty) { if (cd == null) { propertyDescriptor = null; } else { propertyDescriptor = cd.getPropertyDescriptor(name, true); } updateProperty = false; } }\n\n    ### Response:", "ground_truth": "Loads property descriptor, if property was updated.", "predict": "Loads the PropertyDescriptor and updates the Value"}, {"ID": 1690, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def chebyshev(x, y): \"\"\"Chebyshev or l-infinity distance. ..math:: D(x, y) = \\max_i |x_i - y_i| \"\"\" result = 0.0 for i in range(x.shape[0]): result = max(result, np.abs(x[i] - y[i])) return result\n\n    ### Response: Chebyshev or l-infinity distance.\n\n    ..math::\n        D(x, y) = \\max_i |x_i - y_i|.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Getter getGetter(final boolean declared) { loadPropertyDescriptor(); return propertyDescriptor != null ? propertyDescriptor.getGetter(declared) : null; }\n\n    ### Response:", "ground_truth": "Returns getter.", "predict": "The above method provides access to the getter method of the specified property of the specified object in the specified mode of access ('get' or 'set'). It first checks if the property has been loaded and loaded the corresponding PropertyDescriptor to avoid unnecessary overhead of looking up the PropertyDescriptor every time the method is called. It then checks if the given mode of access ('get' or 'set') matches the mode of access in which the PropertyDescriptor was loaded ('get' or 'set'). If the access mode matches, the PropertyDescriptor's getGetter() method is invoked to retrieve the actual getter method for the given property in the given mode of access ('get' or 'set'). Finally, the actual getter method of the given property in the given mode of access ('get' or 'set') is retrieved to return it to the caller of the method."}, {"ID": 1691, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function (entity, action, options) { var ret = {}, data = entity.compose(action, options), schemaDefinition, schemaType, isModel = entity instanceof Model, factory = entity.factory; for (var key in entity.schema) { if (entity.schema.hasOwnProperty(key) && (!isModel || (!options || !options.includeInIndex || _.contains(options.includeInIndex, key)))) { schemaDefinition = entity.schema[key]; schemaType = schemaDefinition.type; var value; if (data[key] && schemaDefinition.isReference && schemaType.classof && schemaType.classof(Entity) && !schemaType.classof(Model)) { value = {}; value[schemaType.prototype.idField] = data[key].identifier(); } else { value = this._getCompositionValue(data[key], key, action, options, entity); } if (value !== undefined) { ret[this._getReferenceKey(key, schemaType)] = value; } } } return ret; }\n\n    ### Response: Composes an entity, calls default compose method\n@param entity\n@param action\n@param options\n@return {JSON}\n@private.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Setter getSetter(final boolean declared) { loadPropertyDescriptor(); return propertyDescriptor != null ? propertyDescriptor.getSetter(declared) : null; }\n\n    ### Response:", "ground_truth": "Returns setter.", "predict": "Getter and setter for the given property of the given entity loaded from the propertyDescriptor object."}, {"ID": 1692, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def retry_connect(self): \"\"\"Will be called when new channels in the token network are detected. If the minimum number of channels was not yet established, it will try to open new channels. If the connection manager has no funds, this is a noop. \"\"\" with self.lock: if self._funds_remaining > 0 and not self._leaving_state: self._open_channels()\n\n    ### Response: Will be called when new channels in the token network are detected.\n        If the minimum number of channels was not yet established, it will try\n        to open new channels.\n\n        If the connection manager has no funds, this is a noop..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DbOom connect() { connectionProvider.init(); final DbDetector dbDetector = new DbDetector(); dbDetector.detectDatabaseAndConfigureDbOom(connectionProvider, dbOomConfig); return this; }\n\n    ### Response:", "ground_truth": "Initializes the DbOom by connecting to the database. Database will be detected\nand DbOom will be configured to match it.", "predict": "Initiates the connector and detects the database configuration of the connector to customize the connector for the specific connector configuration\n    \"\"\""}, {"ID": 1693, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def add_ds_ids_from_files(self): \"\"\"Check files for more dynamically discovered datasets.\"\"\" for file_handlers in self.file_handlers.values(): try: fh = file_handlers[0] avail_ids = fh.available_datasets() except NotImplementedError: continue # dynamically discover other available datasets for ds_id, ds_info in avail_ids: # don't overwrite an existing dataset # especially from the yaml config coordinates = ds_info.get('coordinates') if isinstance(coordinates, list): # xarray doesn't like concatenating attributes that are # lists: https://github.com/pydata/xarray/issues/2060 ds_info['coordinates'] = tuple(ds_info['coordinates']) self.ids.setdefault(ds_id, ds_info)\n\n    ### Response: Check files for more dynamically discovered datasets..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void add(final Iterator<T> iterator) { if (allIterators.contains(iterator)) { throw new IllegalArgumentException(\"Duplicate iterator\"); } allIterators.add(iterator); }\n\n    ### Response:", "ground_truth": "Adds an iterator to this composite.", "predict": "Do no duplicate items added during iteration of the given iterators."}, {"ID": 1694, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def service(name, ports=None, protocols=None): ''' Ensure the service exists and encompasses the specified ports and protocols. .. versionadded:: 2016.11.0 ''' ret = {'name': name, 'result': False, 'changes': {}, 'comment': ''} if name not in __salt__['firewalld.get_services'](): __salt__['firewalld.new_service'](name, restart=False) ports = ports or [] try: _current_ports = __salt__['firewalld.get_service_ports'](name) except CommandExecutionError as err: ret['comment'] = 'Error: {0}'.format(err) return ret new_ports = set(ports) - set(_current_ports) old_ports = set(_current_ports) - set(ports) for port in new_ports: if not __opts__['test']: try: __salt__['firewalld.add_service_port'](name, port) except CommandExecutionError as err: ret['comment'] = 'Error: {0}'.format(err) return ret for port in old_ports: if not __opts__['test']: try: __salt__['firewalld.remove_service_port'](name, port) except CommandExecutionError as err: ret['comment'] = 'Error: {0}'.format(err) return ret if new_ports or old_ports: ret['changes'].update({'ports': {'old': _current_ports, 'new': ports}}) protocols = protocols or [] try: _current_protocols = __salt__['firewalld.get_service_protocols'](name) except CommandExecutionError as err: ret['comment'] = 'Error: {0}'.format(err) return ret new_protocols = set(protocols) - set(_current_protocols) old_protocols = set(_current_protocols) - set(protocols) for protocol in new_protocols: if not __opts__['test']: try: __salt__['firewalld.add_service_protocol'](name, protocol) except CommandExecutionError as err: ret['comment'] = 'Error: {0}'.format(err) return ret for protocol in old_protocols: if not __opts__['test']: try: __salt__['firewalld.remove_service_protocol'](name, protocol) except CommandExecutionError as err: ret['comment'] = 'Error: {0}'.format(err) return ret if new_protocols or old_protocols: ret['changes'].update({'protocols': {'old': _current_protocols, 'new': protocols}}) if ret['changes'] != {}: __salt__['firewalld.reload_rules']() ret['result'] = True if ret['changes'] == {}: ret['comment'] = '\\'{0}\\' is already in the desired state.'.format( name) return ret if __opts__['test']: ret['result'] = None ret['comment'] = 'Configuration for \\'{0}\\' will change.'.format(name) return ret ret['comment'] = '\\'{0}\\' was configured.'.format(name) return ret\n\n    ### Response: Ensure the service exists and encompasses the specified ports and\n    protocols.\n\n    .. versionadded:: 2016.11.0.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void printLogo() { System.out.println(Chalk256.chalk().yellow().on(Jodd.JODD)); }\n\n    ### Response:", "ground_truth": "Prints a logo.", "predict": "\n    Print the JODD logo on the console."}, {"ID": 1695, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Seed(seed int64) { rng.Lock() defer rng.Unlock() rng.rand = rand.New(rand.NewSource(seed)) }\n\n    ### Response: // Seed seeds the rng with the provided seed..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void stop() { joyProps.stop(); try { joyDb.stop(); joyPetite.stop(); } catch (Exception ignore) { } if (log != null) { log.info(\"Joy is down. Bye, bye!\"); } }\n\n    ### Response:", "ground_truth": "Stops the Joy.", "predict": "// Stops the Joy components, and prints an info message."}, {"ID": 1696, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function cleanWww (projectRoot, locations) { var targetDir = path.relative(projectRoot, locations.www); events.emit('verbose', 'Cleaning ' + targetDir); // No source paths are specified, so mergeAndUpdateDir() will clear the target directory. FileUpdater.mergeAndUpdateDir( [], targetDir, { rootDir: projectRoot, all: true }, logFileOp); }\n\n    ### Response: Cleans all files from the platform 'www' directory..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Socket createSocket(final String host, final int port, final int connectionTimeout) throws IOException { final SocketFactory socketFactory = getSocketFactory(proxy, false, false, connectionTimeout); if (connectionTimeout < 0) { return socketFactory.createSocket(host, port); } else { // creates unconnected socket Socket socket = socketFactory.createSocket(); socket.connect(new InetSocketAddress(host, port), connectionTimeout); return socket; } }\n\n    ### Response:", "ground_truth": "Creates a socket using socket factory.", "predict": "Creates an unconnected Socket to the given Socket Factory and hosts given port."}, {"ID": 1697, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _try_load_module(path, import_name=None): \"\"\"Try to programmatically load a python module by path. Path should point to a python file (optionally without the .py) at the end. If it ends in a :<name> then name must point to an object defined in the module, which is returned instead of the module itself. Args: path (str): The path of the module to load import_name (str): The explicity name that the module should be given. If not specified, this defaults to being the basename() of path. However, if the module is inside of a support package, you should pass the correct name so that relative imports proceed correctly. Returns: str, object: The basename of the module loaded and the requested object. \"\"\" logger = logging.getLogger(__name__) obj_name = None if len(path) > 2 and ':' in path[2:]: # Don't flag windows C: type paths path, _, obj_name = path.rpartition(\":\") folder, basename = os.path.split(path) if folder == '': folder = './' if basename == '' or not os.path.exists(path): raise ArgumentError(\"Could not find python module to load extension\", path=path) basename, ext = os.path.splitext(basename) if ext not in (\".py\", \".pyc\", \"\"): raise ArgumentError(\"Attempted to load module is not a python package or module (.py or .pyc)\", path=path) if import_name is None: import_name = basename else: logger.debug(\"Importing module as subpackage: %s\", import_name) try: fileobj = None fileobj, pathname, description = imp.find_module(basename, [folder]) # Don't load modules twice if basename in sys.modules: mod = sys.modules[basename] else: mod = imp.load_module(import_name, fileobj, pathname, description) if obj_name is not None: if obj_name not in mod.__dict__: raise ArgumentError(\"Cannot find named object '%s' inside module '%s'\" % (obj_name, basename), path=path) mod = mod.__dict__[obj_name] return basename, mod finally: if fileobj is not None: fileobj.close()\n\n    ### Response: Try to programmatically load a python module by path.\n\n    Path should point to a python file (optionally without the .py) at the\n    end.  If it ends in a : then name must point to an object defined in\n    the module, which is returned instead of the module itself.\n\n    Args:\n        path (str): The path of the module to load\n        import_name (str): The explicity name that the module should be given.\n            If not specified, this defaults to being the basename() of\n            path.  However, if the module is inside of a support package,\n            you should pass the correct name so that relative imports\n            proceed correctly.\n\n    Returns:\n        str, object: The basename of the module loaded and the requested object..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected SSLSocket createSSLSocket( final String host, final int port, final int connectionTimeout, final boolean trustAll, final boolean verifyHttpsHost) throws IOException { final SocketFactory socketFactory = getSocketFactory(proxy, true, trustAll, connectionTimeout); final Socket socket; if (connectionTimeout < 0) { socket = socketFactory.createSocket(host, port); } else { // creates unconnected socket // unfortunately, this does not work always // sslSocket = (SSLSocket) socketFactory.createSocket(); // sslSocket.connect(new InetSocketAddress(host, port), connectionTimeout); // // Note: SSLSocketFactory has several create() methods. // Those that take arguments all connect immediately // and have no options for specifying a connection timeout. // // So, we have to create a socket and connect it (with a // connection timeout), then have the SSLSocketFactory wrap // the already-connected socket. // socket = Sockets.connect(host, port, connectionTimeout); //sock.setSoTimeout(readTimeout); //socket.connect(new InetSocketAddress(host, port), connectionTimeout); // continue to wrap this plain socket with ssl socket... } // wrap plain socket in an SSL socket SSLSocket sslSocket; if (socket instanceof SSLSocket) { sslSocket = (SSLSocket) socket; } else { if (socketFactory instanceof SSLSocketFactory) { sslSocket = (SSLSocket) ((SSLSocketFactory)socketFactory).createSocket(socket, host, port, true); } else { sslSocket = (SSLSocket) (getDefaultSSLSocketFactory(trustAll)).createSocket(socket, host, port, true); } } // sslSocket is now ready if (secureEnabledProtocols != null) { final String[] values = StringUtil.splitc(secureEnabledProtocols, ','); StringUtil.trimAll(values); sslSocket.setEnabledProtocols(values); } // set SSL parameters to allow host name verifier if (verifyHttpsHost) { final SSLParameters sslParams = new SSLParameters(); sslParams.setEndpointIdentificationAlgorithm(\"HTTPS\"); sslSocket.setSSLParameters(sslParams); } return sslSocket; }\n\n    ### Response:", "ground_truth": "Creates a SSL socket. Enables default secure enabled protocols if specified.", "predict": "\n    protected SSLSocket createSSLSocket( final String host, final int port, final int connectionTimeout, final boolean trustAll, final boolean verifyHttpsHost) throws IOException {\n        final SocketFactory socketFactory = getSocketFactory(proxy, true, trustAll, connectionTimeout);\n        final Socket socket;\n        // If connectionTimeout < 0\n        // creates an unconnected Socket\n        // If (connectionTimeout < 0), create SSLSocket;\n        // If (connectionTimeout < 0), creates an unconnected Socket\n        // sslSocket = (SSLSocket) socketFactory. create Socket;\n        // sslSocket. connect (new Inet Socket Address (host, port),\n        // connectionTimeout);\n        // sslSocket.connect(new Inet Socket Address (host, port),\n        // connectionTimeout);\n        // sslSocket.setEnabledProtocols(secureEnabledProtocols);\n        // sslSocket.setSSLParameters(sslParams);\n        // sslSocket"}, {"ID": 1698, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function PDFFindController_updateMatchPosition(pageIndex, index, elements, beginIdx) { if (this.selected.matchIdx === index && this.selected.pageIdx === pageIndex) { var spot = { top: FIND_SCROLL_OFFSET_TOP, left: FIND_SCROLL_OFFSET_LEFT }; scrollIntoView(elements[beginIdx], spot, /* skipOverflowHiddenElements = */ true); } }\n\n    ### Response: The method is called back from the text layer when match presentation\nis updated.\n@param {number} pageIndex - page index.\n@param {number} index - match index.\n@param {Array} elements - text layer div elements array.\n@param {number} beginIdx - start index of the div array for the match..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected SSLSocketFactory getDefaultSSLSocketFactory(final boolean trustAllCertificates) throws IOException { if (trustAllCertificates) { try { SSLContext sc = SSLContext.getInstance(sslProtocol); sc.init(null, TrustManagers.TRUST_ALL_CERTS, new java.security.SecureRandom()); return sc.getSocketFactory(); } catch (NoSuchAlgorithmException | KeyManagementException e) { throw new IOException(e); } } else { return (SSLSocketFactory) SSLSocketFactory.getDefault(); } }\n\n    ### Response:", "ground_truth": "Returns default SSL socket factory allowing setting trust managers.", "predict": "The default SSLSocketFactory for the given configuration\n(trustAllCertificates=false) or the default SocketFactory for the given configuration\n(trustAllCertificates=true)is retrieved and returned"}, {"ID": 1699, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function getUnwatchedKeys() { var arr1 = Object.keys(store._store), arr2 = Object.keys(store._key_to_watcher_subscriptions); return arr1.filter(function (i) { return arr2.indexOf(i) === -1; }); }\n\n    ### Response: return an array of keys that do not trigger any callbacks when changed, and therefore\nprobably don't need to be included in the global store.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected SocketFactory getSocketFactory( final ProxyInfo proxy, final boolean ssl, final boolean trustAllCertificates, final int connectionTimeout) throws IOException { switch (proxy.getProxyType()) { case NONE: if (ssl) { return getDefaultSSLSocketFactory(trustAllCertificates); } else { return SocketFactory.getDefault(); } case HTTP: return new HTTPProxySocketFactory(proxy, connectionTimeout); case SOCKS4: return new Socks4ProxySocketFactory(proxy, connectionTimeout); case SOCKS5: return new Socks5ProxySocketFactory(proxy, connectionTimeout); default: return null; } }\n\n    ### Response:", "ground_truth": "Returns socket factory based on proxy type and SSL requirements.", "predict": "This method generates a SocketFactory instance appropriate for the given proxy and configuration\n    parameters"}, {"ID": 1700, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Client) GetRawMempoolAsync() FutureGetRawMempoolResult { cmd := btcjson.NewGetRawMempoolCmd(btcjson.Bool(false)) return c.sendCmd(cmd) }\n\n    ### Response: // GetRawMempoolAsync returns an instance of a type that can be used to get the\n// result of the RPC at some future time by invoking the Receive function on the\n// returned instance.\n//\n// See GetRawMempool for the blocking version and more details..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String random(int count, final char[] chars) { if (count == 0) { return StringPool.EMPTY; } final char[] result = new char[count]; while (count-- > 0) { result[count] = chars[rnd.nextInt(chars.length)]; } return new String(result); }\n\n    ### Response:", "ground_truth": "Creates random string whose length is the number of characters specified.\nCharacters are chosen from the set of characters specified.", "predict": "// This method generates a string with characters picked randomly from the given string\n    // SsThe function picks random indices from the given string and populates the returned string with\n    // random characters from that string's characters array. It returns the populated string\n    // SsaEach invocation of random picks random indices from the string and populates the returned string\n    // SsaEach invocation of random may produce a different string since the characters chosen may vary\n    // SsaThis function may be used to add a random element to a string to break a possible pattern\n    // SsaThis function may also be used to add a random element to a string to break a possible\n    // SsaThis function may also be used to add a random element to a string to break a possible\n    // SsaThis function may also be used to add a random element to a string to break a possible\n    // SsaThis function may also be used to add a random element to a string to break a possible\n    //"}, {"ID": 1701, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function throw_exception($e=null) { $e = $e ?: new \\Exception(); foreach ($this->policies as $policy) { $policy->check_method_throws($this->className, $this->methodName, $e, true); } $this->will(function () use ($e) { throw $e; }); return $this; }\n\n    ### Response: Throws an exception on invocation.\n@param \\Exception|void $e the exception to throw. If not specified, Shmock will provide an instance of\nthe base \\Exception.\n@return \\Shmock\\Spec.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String random(int count, final char start, final char end) { if (count == 0) { return StringPool.EMPTY; } final char[] result = new char[count]; final int len = end - start + 1; while (count-- > 0) { result[count] = (char) (rnd.nextInt(len) + start); } return new String(result); }\n\n    ### Response:", "ground_truth": "Creates random string whose length is the number of characters specified.\nCharacters are chosen from the provided range.", "predict": "Generates random string with specified length and starting and ending characters"}, {"ID": 1702, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getCategories() { $apiCategories = []; $fileVersion = $this->getFileVersion(); $categories = $fileVersion->getCategories(); return array_map(function(CategoryEntity $category) { return $category->getId(); }, $categories->toArray()); }\n\n    ### Response: Returns the categories of the media.\n\n@VirtualProperty\n@SerializedName(\"categories\")\n\n@return Category[].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String randomRanges(int count, final char... ranges) { if (count == 0) { return StringPool.EMPTY; } int i = 0; int len = 0; final int[] lens = new int[ranges.length]; while (i < ranges.length) { int gap = ranges[i + 1] - ranges[i] + 1; len += gap; lens[i] = len; i += 2; } final char[] result = new char[count]; while (count-- > 0) { char c = 0; int r = rnd.nextInt(len); for (i = 0; i < ranges.length; i += 2) { if (r < lens[i]) { r += ranges[i]; if (i != 0) { r -= lens[i - 2]; } c = (char) r; break; } } result[count] = c; } return new String(result); }\n\n    ### Response:", "ground_truth": "Creates random string whose length is the number of characters specified.\nCharacters are chosen from the multiple sets defined by range pairs.\nAll ranges must be in acceding order.", "predict": "Generates random ranges of the given string values given an int parameter which defines how many ranges should be generated and an array of string values which defines the ranges of the string values to generate"}, {"ID": 1703, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def request_system_code(self): \"\"\"Return all system codes that are registered in the card. A card has one or more system codes that correspond to logical partitions (systems). Each system has a system code that could be used in a polling command to activate that system. The system codes responded by the card are returned as a list of 16-bit integers. :: for system_code in tag.request_system_code(): print(\"System {0:04X}\".format(system_code)) Command execution errors raise :exc:`~nfc.tag.TagCommandError`. \"\"\" log.debug(\"request system code list\") a, e = self.pmm[3] & 7, self.pmm[3] >> 6 timeout = max(302E-6 * (a + 1) * 4**e, 0.002) data = self.send_cmd_recv_rsp(0x0C, '', timeout, check_status=False) if len(data) != 1 + data[0] * 2: log.debug(\"insufficient data received from tag\") raise tt3.Type3TagCommandError(tt3.DATA_SIZE_ERROR) return [unpack(\">H\", data[i:i+2])[0] for i in range(1, len(data), 2)]\n\n    ### Response: Return all system codes that are registered in the card.\n\n        A card has one or more system codes that correspond to logical\n        partitions (systems). Each system has a system code that could\n        be used in a polling command to activate that system. The\n        system codes responded by the card are returned as a list of\n        16-bit integers. ::\n\n            for system_code in tag.request_system_code():\n                print(\"System {0:04X}\".format(system_code))\n\n        Command execution errors raise :exc:`~nfc.tag.TagCommandError`..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") protected Collection<Object> newArrayInstance(final Class targetType) { if (targetType == null || targetType == List.class || targetType == Collection.class || targetType.isArray()) { return listSupplier.get(); } if (targetType == Set.class) { return new HashSet<>(); } try { return (Collection<Object>) targetType.getDeclaredConstructor().newInstance(); } catch (Exception e) { throw new JsonException(e); } }\n\n    ### Response:", "ground_truth": "Creates new type for JSON array objects.\nIt returns a collection.\nLater, the collection will be converted into the target type.", "predict": "\n    Defines an empty Collection to be populated during deserialization of the Json representation of the objects to be added to the collection."}, {"ID": 1704, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (m *ServerMetrics) InitializeMetrics(server *grpc.Server) { serviceInfo := server.GetServiceInfo() for serviceName, info := range serviceInfo { for _, mInfo := range info.Methods { preRegisterMethod(m, serviceName, &mInfo) } } }\n\n    ### Response: // InitializeMetrics initializes all metrics, with their appropriate null\n// value, for all gRPC methods registered on a gRPC server. This is useful, to\n// ensure that all metrics exist when collecting and querying..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void injectValueIntoObject(final Object target, final PropertyDescriptor pd, final Object value) { Object convertedValue = value; if (value != null) { Class targetClass = pd.getType(); convertedValue = convertType(value, targetClass); } try { Setter setter = pd.getSetter(true); if (setter != null) { setter.invokeSetter(target, convertedValue); } } catch (Exception ex) { throw new JsonException(ex); } }\n\n    ### Response:", "ground_truth": "Injects value into the targets property.", "predict": "// InjectValueIntoObject Injects the given Value into the Object and its Properties of given Type // It handles the null values and ensures proper type conversion // It handles the Exceptions and provides appropriate error feedback"}, {"ID": 1705, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def import_disk(source, destination, print_progress = false, params = {}) use_template = params[:use_template] || false if use_template Log.debug \"import_disk :use_template => true\" if !template_exist?(source) Log.debug \"import_disk, template does not exist, importing.\" import_template(source, { :print_progress => print_progress }) end copy_from_template(source, destination) else import_disk_convert source, destination, print_progress end end\n\n    ### Response: Imports a VMDK\n\n if params has :use_template => true, the disk is saved as a template in\n @templates_dir and cloned from there.\n\n Destination directory must exist otherwise rises exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Object convertType(final Object value, final Class targetType) { final Class valueClass = value.getClass(); if (valueClass == targetType) { return value; } try { return TypeConverterManager.get().convertType(value, targetType); } catch (Exception ex) { if (!strictTypes) { return null; } throw new JsonException(\"Type conversion failed\", ex); } }\n\n    ### Response:", "ground_truth": "Converts type of the given value.", "predict": "Converts objects to specified type"}, {"ID": 1706, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def read_memory(self): \"\"\" This function read mean value of target`d` and input vector `x` from history \"\"\" if self.mem_empty == True: if self.mem_idx == 0: m_x = np.zeros(self.n) m_d = 0 else: m_x = np.mean(self.mem_x[:self.mem_idx+1], axis=0) m_d = np.mean(self.mem_d[:self.mem_idx]) else: m_x = np.mean(self.mem_x, axis=0) m_d = np.mean(np.delete(self.mem_d, self.mem_idx)) self.mem_idx += 1 if self.mem_idx > len(self.mem_x)-1: self.mem_idx = 0 self.mem_empty = False return m_d, m_x\n\n    ### Response: This function read mean value of target`d`\n        and input vector `x` from history.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visitProvide(final String service, final String... providers) { if (mv != null) { mv.visitProvide(service, providers); } }\n\n    ### Response:", "ground_truth": "Visit an implementation of a service.\n\n@param service the internal name of the service.\n@param providers the internal names of the implementations of the service (there is at least\none provider).", "predict": "The above method visits the given provider of the given service. It may do anything to prepare for its visit, such as inspect the provider and prepare any resources it may need to provide the service successfully. It may do anything it needs to do to provide the service successfully to the consumer, and may do anything it needs to do to complete its visit of the provider of this service. After its visit of this provider of this service has been completed, the visitor may do whatever is necessary to complete its visit of this service, and may do whatever is necessary to complete its visit of this consumer of this service. After its visit of this consumer of this service has been completed, the visitor may do whatever is necessary to complete its visit of this service and may do whatever is necessary to complete its visit of this consumer of this service. After its visit of this consumer of this service has been completed, the visitor may do whatever is necessary to complete its visit of this service and may do whatever is necessary to complete its visit of this consumer of this service. After its visit of this consumer"}, {"ID": 1707, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def coge(args): \"\"\" %prog coge cogefile Convert CoGe file to anchors file. \"\"\" p = OptionParser(coge.__doc__) opts, args = p.parse_args(args) if len(args) != 1: sys.exit(not p.print_help()) cogefile, = args fp = must_open(cogefile) cogefile = cogefile.replace(\".gz\", \"\") ksfile = cogefile + \".ks\" anchorsfile = cogefile + \".anchors\" fw_ks = must_open(ksfile, \"w\") fw_ac = must_open(anchorsfile, \"w\") tag = \"###\" print(tag, file=fw_ks) for header, lines in read_block(fp, tag): print(tag, file=fw_ac) lines = list(lines) for line in lines: if line[0] == '#': continue ks, ka, achr, a, astart, astop, bchr, \\ b, bstart, bstop, ev, ss = line.split() a = a.split(\"||\")[3] b = b.split(\"||\")[3] print(\"\\t\".join((a, b, ev)), file=fw_ac) print(\",\".join((\";\".join((a, b)), ks, ka, ks, ka)), file=fw_ks) fw_ks.close() fw_ac.close()\n\n    ### Response: %prog coge cogefile\n\n    Convert CoGe file to anchors file..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public static <A> TypeCache<A> createDefault() { return (TypeCache<A>)Defaults.implementation.get(); }\n\n    ### Response:", "ground_truth": "Creates default implementation of the type cache.", "predict": "Creates and returns an empty cache for the given generic parameter A"}, {"ID": 1708, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def regexp(__string: str, __pattern: str, __repl: Union[Callable, str], *, count: int = 0, flags: int = 0) -> str: \"\"\"Jinja filter for regexp replacements. See :func:`re.sub` for documentation. Returns: Text with substitutions applied \"\"\" return re.sub(__pattern, __repl, __string, count, flags)\n\n    ### Response: Jinja filter for regexp replacements.\n\n    See :func:`re.sub` for documentation.\n\n    Returns:\n        Text with substitutions applied.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T put(final Class<?> type, final T value) { return map.put(type, value); }\n\n    ### Response:", "ground_truth": "Add values to the map.", "predict": "\n    A method to add an entry to the Map of values to their corresponding objects of the given type."}, {"ID": 1709, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def referenceModel(self): \"\"\" Returns the model that this column references. :return <Table> || None \"\"\" model = orb.system.model(self.__reference) if not model: raise orb.errors.ModelNotFound(schema=self.__reference) return model\n\n    ### Response: Returns the model that this column references.\n\n        :return      || None.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public MethodDescriptor[] getAllMethodDescriptors() { if (allMethods == null) { final List<MethodDescriptor> allMethodsList = new ArrayList<>(); for (MethodDescriptor[] methodDescriptors : methodsMap.values()) { Collections.addAll(allMethodsList, methodDescriptors); } final MethodDescriptor[] allMethods = allMethodsList.toArray(new MethodDescriptor[0]); Arrays.sort(allMethods, Comparator.comparing(md -> md.getMethod().getName())); this.allMethods = allMethods; } return allMethods; }\n\n    ### Response:", "ground_truth": "Returns all methods. Cached. Lazy.", "predict": "\n    Returns the list of all public methods of this class, and\n    sorts it by method name in an ascending order\n    \"\"\""}, {"ID": 1710, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function challengeApply($challenge_string) { // Let's loop through all the packets and append the challenge where it is needed foreach ($this->packets as $packet_type => $packet) { $this->packets[$packet_type] = sprintf($packet, $challenge_string); } return true; }\n\n    ### Response: Apply the challenge string to all the packets that need it.\n\n@param string $challenge_string\n\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String resolveIpAddress(final String hostname) { try { InetAddress netAddress; if (hostname == null || hostname.equalsIgnoreCase(LOCAL_HOST)) { netAddress = InetAddress.getLocalHost(); } else { netAddress = Inet4Address.getByName(hostname); } return netAddress.getHostAddress(); } catch (UnknownHostException ignore) { return null; } }\n\n    ### Response:", "ground_truth": "Resolves IP address from a hostname.", "predict": "Resolve the given hostname to its corresponding IP address and return it."}, {"ID": 1711, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DeploymentService delete(long applicationId, long deploymentId) { HTTP.DELETE(String.format(\"/v2/applications/%d/deployments/%d.json\", applicationId, deploymentId)); return this; }\n\n    ### Response: Deletes the deployment with the given id.\n@param applicationId The application id for the deployments\n@param deploymentId The id of the deployment to delete\n@return This object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int getIpAsInt(final String ipAddress) { int ipIntValue = 0; String[] tokens = StringUtil.splitc(ipAddress, '.'); for (String token : tokens) { if (ipIntValue > 0) { ipIntValue <<= 8; } ipIntValue += Integer.parseInt(token); } return ipIntValue; }\n\n    ### Response:", "ground_truth": "Returns IP address as integer.", "predict": "Gets the given ip as int from dotted quad format."}, {"ID": 1712, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_stage_for_epoch(self, epoch_start, window_length=None, attr='stage'): \"\"\"Return stage for one specific epoch. Parameters ---------- id_epoch : str index of the epoch attr : str, optional 'stage' or 'quality' Returns ------- stage : str description of the stage. \"\"\" for epoch in self.epochs: if epoch['start'] == epoch_start: return epoch[attr] if window_length is not None: epoch_length = epoch['end'] - epoch['start'] if logical_and(window_length < epoch_length, 0 <= \\ (epoch_start - epoch['start']) < epoch_length): return epoch[attr]\n\n    ### Response: Return stage for one specific epoch.\n\n        Parameters\n        ----------\n        id_epoch : str\n            index of the epoch\n        attr : str, optional\n            'stage' or 'quality'\n\n        Returns\n        -------\n        stage : str\n            description of the stage..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean validateAgaintIPAdressV4Format(final String input) { if (input == null) { return false; } int hitDots = 0; char[] data = input.toCharArray(); for (int i = 0; i < data.length; i++) { char c = data[i]; int b = 0; do { if (c < '0' || c > '9') { return false; } b = (b * 10 + c) - 48; if (++i >= data.length) { break; } c = data[i]; } while (c != '.'); if (b > 255) { return false; } hitDots++; } return hitDots == 4; }\n\n    ### Response:", "ground_truth": "Checks given string against IP address v4 format.\n\n@param input an ip address - may be null\n@return true if param has a valid ip v4 format false otherwise\n@see ip address v4", "predict": "Validate against IP address V4 format\n\n    Parameters\n    ----------\n    input : str, cannot be null\n    Returns\n    -------\n    boolean : Whether the given input string matches the V4 format of an IP address, or\n                  false if the input string does not match the V4 format of an\n                  IP address"}, {"ID": 1713, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def send_and_receive(self, req): \"\"\"Interface function to send and receive an IPMI message. target: IPMI target req: IPMI message request Returns the IPMI message response. \"\"\" rx_data = self._send_and_receive(target=req.target, lun=req.lun, netfn=req.netfn, cmdid=req.cmdid, payload=encode_message(req)) rsp = create_message(req.netfn + 1, req.cmdid, req.group_extension) decode_message(rsp, rx_data) return rsp\n\n    ### Response: Interface function to send and receive an IPMI message.\n\n        target: IPMI target\n        req: IPMI message request\n\n        Returns the IPMI message response..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String resolveHostName(final byte[] ip) { try { InetAddress address = InetAddress.getByAddress(ip); return address.getHostName(); } catch (UnknownHostException ignore) { return null; } }\n\n    ### Response:", "ground_truth": "Resolves host name from IP address bytes.", "predict": "Resolves the given dotted quad (hostname) from its dotted quad (IP address)"}, {"ID": 1714, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setAudioEncoding($var) { GPBUtil::checkEnum($var, \\Google\\Cloud\\Dialogflow\\V2\\OutputAudioEncoding::class); $this->audio_encoding = $var; return $this; }\n\n    ### Response: Required. Audio encoding of the synthesized audio content.\n\nGenerated from protobuf field .google.cloud.dialogflow.v2.OutputAudioEncoding audio_encoding = 1;\n@param int $var\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static byte[] downloadBytes(final String url) throws IOException { try (InputStream inputStream = new URL(url).openStream()) { return StreamUtil.readBytes(inputStream); } }\n\n    ### Response:", "ground_truth": "Downloads resource as byte array.", "predict": "Download bytes from the given url.\n    *Download* *bytes* *from* *the* *given* *url* *and* *store* *them* *in* *an* *array* *. The returned array may be *large* *in* *which* *case* *it* *should* *be* *streamed* *in* *parts* to *prevent* *memory* *exhaustion*."}, {"ID": 1715, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function SvcAws (requestedSvc, options) { if (this.constructor.name === 'Object') { throw new Error('Must be instantiated using new') } else if (this.constructor.name === 'SvcAws') { throw new Error('Abstract class ' + this.constructor.name + ' should not be instantiated') } EventEmitter.call(this) let self = this // initialize the property bag of AWS services which will be created this._services = {} let credOptions = Object.assign({}, options) internals.initLogger(options.isLogging) this.logger = internals.logger credOptions.logger = this.logger let credsManager = new Credentials(credOptions) credsManager.once(internals.EVENT_INITIALIZED, function (err, data) { if (err) { self.logger.warn(internals.EVENT_INITIALIZED, err) internals.emitAsync.call(self, internals.EVENT_INITIALIZED, err) return } else { self.logger.info(internals.EVENT_INITIALIZED, 'success') } if (self._services.hasOwnProperty(requestedSvc.serviceIdentifier)) { let serviceName = requestedSvc.serviceIdentifier self.logger.info('Refreshing service: ' + serviceName) } // Always instantiate the requested aws service, even if old one exists internals.newService.call(self, credsManager._awsConfig, requestedSvc) }) }\n\n    ### Response: Constructs a new SvcAws object for managing aws credentials\n@constructor\n@abstract\n@arg {class} requestedSvc - The AWS.Service class to instantiate [aws docs]{@link http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Service.html}\n@arg {object} options - The AWS service IAM credentials\n@arg {object} options.keys - Credentials for the service API authentication. See [aws docs]{@link http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Credentials.html}\n@arg {string} options.keys.accessKeyId - AWS access key ID\n@arg {string} options.keys.secretAccessKey - AWS secret access key\n@arg {string} options.keys.region - The EC2 region to send service requests\n@arg {object} options.upgrade - Temporary Session Token credentials. See [aws docs]{@link http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/STS.html#getSessionToken-property}\n@arg {string} options.upgrade.serialNumber - Identifies the user's hardware or virtual MFA device\n@arg {number} options.upgrade.tokenCode - Time-based one-time password (TOTP) that the MFA devices produces\n@arg {number} [options.upgrade.durationSeconds=900] - The duration, in seconds, that the credentials should remain valid\n@arg {boolean} [options.isLogging=false] - Use internal logging\n@throws {error}\n@emits {intialized}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String downloadString(final String url, final String encoding) throws IOException { try (InputStream inputStream = new URL(url).openStream()) { return new String(StreamUtil.readChars(inputStream, encoding)); } }\n\n    ### Response:", "ground_truth": "Downloads resource as String.", "predict": "downloadString downloads a string from the given url to the given encoding"}, {"ID": 1716, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function getEngine(&$class) { $engine = null; if (($pos = strpos($class, '://')) !== false) { $proto = substr($class, 0, $pos); switch ($proto) { case 'file': $class = substr($class, $pos + 3); $engine = self::getEngineByFile($class); break; case 'http': case 'https': $engine = Resolver\\HttpUrl::class; break; default: $class = substr($class, $pos + 3); $engine = self::getEngineByProto($proto); } } elseif (is_file($class)) { $engine = self::getEngineByFile($class); } elseif (class_exists($class)) { $engine = PhpClass::class; } if ($engine === null) { $engine = PhpClass::class; } return $engine; }\n\n    ### Response: This method determines the fitting engine for the provided string. The\nprovided string gets modified in case it has the uri format\n\n@param string $class\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void downloadFile(final String url, final File file) throws IOException { try ( InputStream inputStream = new URL(url).openStream(); ReadableByteChannel rbc = Channels.newChannel(inputStream); FileChannel fileChannel = FileChannel.open( file.toPath(), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE) ) { fileChannel.transferFrom(rbc, 0, Long.MAX_VALUE); } }\n\n    ### Response:", "ground_truth": "Downloads resource to a file, potentially very efficiently.", "predict": "download and save a file to given location"}, {"ID": 1717, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public DescriptorValue calculate(IAtom atom, IAtomContainer container) { int period; String symbol = atom.getSymbol(); period = periodicTable.get(symbol); return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new IntegerResult(period), NAMES); }\n\n    ### Response: This method calculates the period of an atom.\n\n@param  atom              The IAtom for which the DescriptorValue is requested\n@param  container         Parameter is the atom container.\n@return                   The period.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void inject(final ActionRequest actionRequest) { final Targets targets = actionRequest.getTargets(); final ServletContext servletContext = actionRequest.getHttpServletRequest().getServletContext(); scopeResolver.forEachScope(madvocScope -> madvocScope.inject(servletContext, targets)); scopeResolver.forEachScope(madvocScope -> madvocScope.inject(actionRequest, targets)); }\n\n    ### Response:", "ground_truth": "Performs injection.", "predict": "Injects objects into the specified objects to support dependency inversion principle of the Spring framework."}, {"ID": 1718, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private int[] parse(String version) { final Matcher m = Pattern.compile(\"(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)-?(SNAPSHOT)?\\\\.?(\\\\d*)?\").matcher(version); if (!m.matches()) { throw new IllegalArgumentException(\"Malformed version string: \" + version); } return new int[] {Integer.parseInt(m.group(1)), // major Integer.parseInt(m.group(2)), // minor Integer.parseInt(m.group(3)), // revision m.group(4) == null ? 0 // no SNAPSHOT suffix : m.group(5).isEmpty() ? 0 // \"SNAPSHOT\" : Integer.parseInt(m.group(5)), // \"SNAPSHOT.123\" }; }\n\n    ### Response: Parses the version.\n@param version the version to parse\n@return an int array consisting of major, minor, revision, and suffix.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void outject(final ActionRequest actionRequest) { final Targets targets = actionRequest.getTargets(); scopeResolver.forEachScope(madvocScope -> madvocScope.outject(actionRequest, targets)); }\n\n    ### Response:", "ground_truth": "Performs outjection.", "predict": "Outjects objects to the given targets objects of the given action request."}, {"ID": 1719, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func setLangNumFmt(style *xlsxStyleSheet, formatStyle *formatStyle) int { numFmts, ok := langNumFmt[formatStyle.Lang] if !ok { return 0 } var fc string fc, ok = numFmts[formatStyle.NumFmt] if !ok { return 0 } nf := xlsxNumFmt{FormatCode: fc} if style.NumFmts != nil { nf.NumFmtID = style.NumFmts.NumFmt[len(style.NumFmts.NumFmt)-1].NumFmtID + 1 style.NumFmts.NumFmt = append(style.NumFmts.NumFmt, &nf) style.NumFmts.Count++ } else { nf.NumFmtID = formatStyle.NumFmt numFmts := xlsxNumFmts{ NumFmt: []*xlsxNumFmt{&nf}, Count: 1, } style.NumFmts = &numFmts } return nf.NumFmtID }\n\n    ### Response: // setLangNumFmt provides a function to set number format code with language..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Socket connect(final String hostname, final int port) throws IOException { final Socket socket = new Socket(); socket.connect(new InetSocketAddress(hostname, port)); return socket; }\n\n    ### Response:", "ground_truth": "Creates a socket.", "predict": "// This method connects to the given host and port and creates a Socket objects to represent the connection."}, {"ID": 1720, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def listen_to_node(self, id_): \"\"\"Attach a callback on the job pubsub if it exists\"\"\" if r_client.get(id_) is None: return else: self.toredis.subscribe(_pubsub_key(id_), callback=self.callback) self._listening_to[_pubsub_key(id_)] = id_ return id_\n\n    ### Response: Attach a callback on the job pubsub if it exists.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Socket connect(final String hostname, final int port, final int connectionTimeout) throws IOException { final Socket socket = new Socket(); if (connectionTimeout <= 0) { socket.connect(new InetSocketAddress(hostname, port)); } else { socket.connect(new InetSocketAddress(hostname, port), connectionTimeout); } return socket; }\n\n    ### Response:", "ground_truth": "Creates a socket with a timeout.", "predict": "connect to the given host and port and optionally optionally connect within the given time frame"}, {"ID": 1721, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def infer_from_frame_stack(self, ob_stack): \"\"\"Infer policy from stack of observations. Args: ob_stack: array of shape (1, frame_stack_size, height, width, channels) Returns: logits and vf. \"\"\" logits, vf = self.sess.run([self.logits_t, self.value_function_t], feed_dict={self.obs_t: ob_stack}) return logits, vf\n\n    ### Response: Infer policy from stack of observations.\n\n    Args:\n      ob_stack: array of shape (1, frame_stack_size, height, width, channels)\n\n    Returns:\n      logits and vf..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static int getPrimitiveClassNameIndex(final String className) { int dotIndex = className.indexOf('.'); if (dotIndex != -1) { return -1; } return Arrays.binarySearch(PRIMITIVE_TYPE_NAMES, className); }\n\n    ### Response:", "ground_truth": "Detects if provided class name is a primitive type.\nReturns >= 0 number if so.", "predict": "Get the name of the given class as its string representation and extract the first character of the returned string to get the name of the corresponding enum constant, or -1 if the given class does not map to any of the enum names of this class."}, {"ID": 1722, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function valueGet ( ) { var values = scope_Values.map(options.format.to); // If only one handle is used, return a single value. if ( values.length === 1 ){ return values[0]; } return values; }\n\n    ### Response: Get the slider value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Class loadClass(final String className, final ClassLoader classLoader) throws ClassNotFoundException { String arrayClassName = prepareArrayClassnameForLoading(className); if ((className.indexOf('.') == -1) && (arrayClassName == null)) { // maybe a primitive int primitiveNdx = getPrimitiveClassNameIndex(className); if (primitiveNdx >= 0) { return PRIMITIVE_TYPES[primitiveNdx]; } } // try #1 - using provided class loader if (classLoader != null) { Class klass = loadClass(className, arrayClassName, classLoader); if (klass != null) { return klass; } } // try #2 - using thread class loader ClassLoader currentThreadClassLoader = Thread.currentThread().getContextClassLoader(); if ((currentThreadClassLoader != null) && (currentThreadClassLoader != classLoader)) { Class klass = loadClass(className, arrayClassName, currentThreadClassLoader); if (klass != null) { return klass; } } // try #3 - using caller classloader, similar as Class.forName() //Class callerClass = ReflectUtil.getCallerClass(2); Class callerClass = ClassUtil.getCallerClass(); ClassLoader callerClassLoader = callerClass.getClassLoader(); if ((callerClassLoader != classLoader) && (callerClassLoader != currentThreadClassLoader)) { Class klass = loadClass(className, arrayClassName, callerClassLoader); if (klass != null) { return klass; } } // try #4 - everything failed, try alternative array loader if (arrayClassName != null) { try { return loadArrayClassByComponentType(className, classLoader); } catch (ClassNotFoundException ignore) { } } throw new ClassNotFoundException(\"Class not found: \" + className); }\n\n    ### Response:", "ground_truth": "Loads class by name.", "predict": "The function generates and returns the slider value for the given scope and options"}, {"ID": 1723, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (rule *edns0SubnetRule) Rewrite(ctx context.Context, state request.Request) Result { o := setupEdns0Opt(state.Req) for _, s := range o.Option { if e, ok := s.(*dns.EDNS0_SUBNET); ok { if rule.action == Replace || rule.action == Set { if rule.fillEcsData(state, e) == nil { return RewriteDone } } return RewriteIgnored } } // add option if not found if rule.action == Append || rule.action == Set { opt := &dns.EDNS0_SUBNET{Code: dns.EDNS0SUBNET} if rule.fillEcsData(state, opt) == nil { o.Option = append(o.Option, opt) return RewriteDone } } return RewriteIgnored }\n\n    ### Response: // Rewrite will alter the request EDNS0 subnet option..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Class loadArrayClassByComponentType(final String className, final ClassLoader classLoader) throws ClassNotFoundException { int ndx = className.indexOf('['); int multi = StringUtil.count(className, '['); String componentTypeName = className.substring(0, ndx); Class componentType = loadClass(componentTypeName, classLoader); if (multi == 1) { return Array.newInstance(componentType, 0).getClass(); } int[] multiSizes; if (multi == 2) { multiSizes = new int[] {0, 0}; } else if (multi == 3) { multiSizes = new int[] {0, 0, 0}; } else { multiSizes = (int[]) Array.newInstance(int.class, multi); } return Array.newInstance(componentType, multiSizes).getClass(); }\n\n    ### Response:", "ground_truth": "Loads array class using component type.", "predict": "// Class loadArrayClassByComponentType takes in an array name and componentType and uses reflection to generate an appropriate array and componentType for given names and then creates an instance of the given array and componentType and returns its Class object."}, {"ID": 1724, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function localize(string $name, array $data): AssetInterface { $this->localize[$name] = $data; return $this; }\n\n    ### Response: Localize the asset.\n\n@param string $name\n@param array  $data\n\n@return AssetInterface.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void shutdown() { for (final BeanData beanData : instances.values()) { beanData.callDestroyMethods(); } instances.clear(); }\n\n    ### Response:", "ground_truth": "Iterate all beans and invokes registered destroy methods.", "predict": "Destroy objects of this bean."}, {"ID": 1725, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def decorator(wrapped_decorator): \"\"\"Converts a function into a decorator that optionally accepts keyword arguments in its declaration. Example usage: @utils.decorator def decorator(func, args, kwds, op1=None): ... apply op1 ... return func(*args, **kwds) # Form (1), vanilla @decorator foo(...) ... # Form (2), with options @decorator(op1=5) foo(...) ... Args: wrapped_decorator: A function that accepts positional args (func, args, kwds) and any additional supported keyword arguments. Returns: A decorator with an additional 'wrapped_decorator' property that is set to the original function. \"\"\" def helper(_func=None, **options): def outer_wrapper(func): @wrapping(func) def inner_wrapper(*args, **kwds): return wrapped_decorator(func, args, kwds, **options) return inner_wrapper if _func is None: # Form (2), with options. return outer_wrapper # Form (1), vanilla. if options: # Don't allow @decorator(foo, op1=5). raise TypeError('positional arguments not supported') return outer_wrapper(_func) helper.wrapped_decorator = wrapped_decorator return helper\n\n    ### Response: Converts a function into a decorator that optionally accepts keyword\n  arguments in its declaration.\n\n  Example usage:\n    @utils.decorator\n    def decorator(func, args, kwds, op1=None):\n      ... apply op1 ...\n      return func(*args, **kwds)\n\n    # Form (1), vanilla\n    @decorator\n    foo(...)\n      ...\n\n    # Form (2), with options\n    @decorator(op1=5)\n    foo(...)\n      ...\n\n  Args:\n    wrapped_decorator: A function that accepts positional args (func, args,\n      kwds) and any additional supported keyword arguments.\n\n  Returns:\n    A decorator with an additional 'wrapped_decorator' property that is set to\n  the original function..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T extends Comparable> BinarySearch<T> forArray(final T[] array) { return new BinarySearch<T>() { @Override @SuppressWarnings( {\"unchecked\"}) protected int compare(final int index, final T element) { return array[index].compareTo(element); } @Override protected int getLastIndex() { return array.length - 1; } }; }\n\n    ### Response:", "ground_truth": "Creates binary search wrapper over an array.", "predict": "\n    // A factory method for creating a BinarySearch object for a given array of values\n    // It uses Comparable interface for equality comparison of objects\n    // It uses int array indices for identifying equality\n    // It uses int array indices for identifying inequality\n    // It uses int array indices for identifying inequality\n    // It uses int array indices for identifying inequality\n    // It uses int array indices for identifying inequality\n    // It uses int array indices for identifying inequality\n    // It uses int array indices for identifying inequality\n    // It uses int array indices for identifying inequality\n    // It uses int array indices for identifying inequality\n    // It uses int array indices for identifying inequality\n    // It uses int array indices for identifying inequality\n    // It uses int array indices for identifying inequality\n    // It uses int array indices for identifying inequality\n    // It uses int array indices for identifying inequality\n    // It uses int array indices for identifying inequality\n    // It uses"}, {"ID": 1726, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def eigenvector_sensitivity(T, k, j, right=True): r\"\"\"Sensitivity matrix of a selected eigenvector element. Parameters ---------- T : (M, M) ndarray Transition matrix (stochastic matrix). k : int Eigenvector index j : int Element index right : bool If True compute for right eigenvector, otherwise compute for left eigenvector. Returns ------- S : (M, M) ndarray Sensitivity matrix for the j-th element of the k-th eigenvector. \"\"\" T = _types.ensure_ndarray_or_sparse(T, ndim=2, uniform=True, kind='numeric') if _issparse(T): _showSparseConversionWarning() eigenvector_sensitivity(T.todense(), k, j, right=right) else: return dense.sensitivity.eigenvector_sensitivity(T, k, j, right=right)\n\n    ### Response: r\"\"\"Sensitivity matrix of a selected eigenvector element.\n\n    Parameters\n    ----------\n    T : (M, M) ndarray\n        Transition matrix (stochastic matrix).\n    k : int\n        Eigenvector index\n    j : int\n        Element index\n    right : bool\n        If True compute for right eigenvector, otherwise compute for left eigenvector.\n\n    Returns\n    -------\n    S : (M, M) ndarray\n        Sensitivity matrix for the j-th element of the k-th eigenvector..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> BinarySearch<T> forArray(final T[] array, final Comparator<T> comparator) { return new BinarySearch<T>() { @Override @SuppressWarnings( {\"unchecked\"}) protected int compare(final int index, final T element) { return comparator.compare(array[index], element); } @Override protected int getLastIndex() { return array.length - 1; } }; }\n\n    ### Response:", "ground_truth": "Creates binary search wrapper over an array with given comparator.", "predict": "r\"\"\"This method uses the binary search approach to search an \n     *  array of given size and compare values with the given comparator\n     *  to locate the given element. It uses the method compare to compare\n     *  the given element to the values in the given array and\n     *  returns the index of the given element (if found), -1 if\n     *  element is not found.\"\"\""}, {"ID": 1727, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _handle_template_param_value(self): \"\"\"Handle a template parameter's value at the head of the string.\"\"\" self._emit_all(self._pop()) self._context ^= contexts.TEMPLATE_PARAM_KEY self._context |= contexts.TEMPLATE_PARAM_VALUE self._emit(tokens.TemplateParamEquals())\n\n    ### Response: Handle a template parameter's value at the head of the string..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T exclude(final String... excludes) { for (String ex : excludes) { rules.exclude(ex); } return _this(); }\n\n    ### Response:", "ground_truth": "Defines excluded property names.", "predict": "Excludes given string from the objects included in the result"}, {"ID": 1728, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function postFeature(Request $request, Page $page) { $this->authorize('editFeature', $page); $page->setFeatureImageId($request->input('feature_image_id')); PageFacade::save($page); }\n\n    ### Response: Save the page feature image.\n\n@param Request $request\n@param Page    $page.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T include(final String... includes) { for (String in : includes) { rules.include(in); } return _this(); }\n\n    ### Response:", "ground_truth": "Defines included property names.", "predict": "Include specified strings in the given document"}, {"ID": 1729, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function requestToken($responseType = 'flat') { $this->log('requestToken()'); //Make the request $settings = array( 'responseType' => $responseType, 'includeCallback' => true, 'includeVerifier' => false ); $params = $this->makeRequest($this->_request_token_url, array(), 'POST', $settings); //Add token and secret to the session if (is_array($params) && isset($params['oauth_token']) && isset($params['oauth_token_secret'])) { $this->log('token set as '.$params['oauth_token']); $_SESSION['oauth']['token'] = $params['oauth_token']; $_SESSION['oauth']['token_secret'] = $params['oauth_token_secret']; if ($this->_debug) { $_SESSION['oauth']['debug']['token'] = $params['oauth_token']; $_SESSION['oauth']['debug']['token_secret'] = $params['oauth_token_secret']; } } else { //Throw exception if the required parameters were not found $this->log('request did not return oauth tokens'); if ($this->_debug) { $_SESSION['oauth']['debug']['response'] = $params; } if (is_array($params)) { if (isset($params['error'])) { $response = $params['error']; } else { $response = '???'; } } else { $response = $params; } throw new IncorrectParametersReturnedException('Incorrect access token parameters returned: '.$response); } }\n\n    ### Response: Request token for OAuth1\n\n@param string $responseType\n\n@throws IncorrectParametersReturnedException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T includeAs(final Class template) { blacklist = false; String[] properties = getAllBeanPropertyNames(template, false); include(properties); return _this(); }\n\n    ### Response:", "ground_truth": "Defines included property names as public properties\nof given template class. Sets to black list mode.", "predict": "Includes fields of the given template bean in the output Bean"}, {"ID": 1730, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function setProcessorOptions(array $options) { if (isset($options['fields_re'])) { $this->fields_re = $options['fields_re']; } if (isset($options['values_re'])) { $this->values_re = $options['values_re']; } }\n\n    ### Response: Override the default processor options\n\n@param array $options    Associative array of processor options.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void start(final int startIndex) { this.tagStartIndex = startIndex; this.name = null; this.idNdx = -1; this.attributesCount = 0; this.tagLength = 0; this.modified = false; this.type = TagType.START; this.rawTag = false; }\n\n    ### Response:", "ground_truth": "Starts the tag with the index of first '<'.\nResets all tag data.", "predict": "Initiates the tokenizer"}, {"ID": 1731, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function save($path = 'i') { $tmp_path = sys_get_temp_dir() . '/'; $this->handle->process($tmp_path); $this->s3->sendFile($tmp_path . $this->handle->file_dst_name, $path, $this->_new_name); unlink($tmp_path . $this->handle->file_dst_name); return $this->_new_name; }\n\n    ### Response: Save the current image on the desired path\n\n@param string $path File system path to save the image to.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> void registerComponent(final String name, final Class<T> component, final Consumer<T> consumer) { log.debug(() -> \"Madvoc WebApp component: [\" + name + \"] --> \" + component.getName()); madpc.removeBean(name); madpc.registerPetiteBean(component, name, null, null, false, consumer); }\n\n    ### Response:", "ground_truth": "Registers Madvoc component with given name.", "predict": "Register and manage Bean Life Cycle for given Bean component"}, {"ID": 1732, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setInput(String key, String value) { if (getAllowedKeys() != null && !getAllowedKeys().contains(key)) throw new IllegalStateException(\"The input key \" + key + \" is not allowed for lookups\"); _inputs.put(key, value); }\n\n    ### Response: Set the value of a single input.\n@param key key of input\n@param value value of input.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void resolveColumnDbSqlType(final Connection connection, final DbEntityColumnDescriptor dec) { if (dec.dbSqlType != SqlType.DB_SQLTYPE_UNKNOWN) { return; } ResultSet rs = null; DbEntityDescriptor ded = dec.getDbEntityDescriptor(); try { DatabaseMetaData dmd = connection.getMetaData(); rs = dmd.getColumns(null, ded.getSchemaName(), ded.getTableName(), dec.getColumnName()); if (rs.next()) { dec.dbSqlType = rs.getInt(\"DATA_TYPE\"); } else { dec.dbSqlType = SqlType.DB_SQLTYPE_NOT_AVAILABLE; if (log.isWarnEnabled()) { log.warn(\"Column SQL type not available: \" + ded.toString() + '.' + dec.getColumnName()); } } } catch (SQLException sex) { dec.dbSqlType = SqlType.DB_SQLTYPE_NOT_AVAILABLE; if (log.isWarnEnabled()) { log.warn(\"Column SQL type not resolved: \" + ded.toString() + '.' + dec.getColumnName(), sex); } } finally { DbUtil.close(rs); } }\n\n    ### Response:", "ground_truth": "Resolves column db sql type and populates it in column descriptor if missing.", "predict": "Resolves the SQLType for the given column to ensure proper mapping for the given database"}, {"ID": 1733, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def obj_to_string(obj): '''Render an object into a unicode string if possible''' if not obj: return None elif isinstance(obj, bytes): return obj.decode('utf-8') elif isinstance(obj, basestring): return obj elif is_lazy_string(obj): return obj.value elif hasattr(obj, '__html__'): return obj.__html__() else: return str(obj)\n\n    ### Response: Render an object into a unicode string if possible.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String preprocessSql(String sqlString) { // detects callable statement if (sqlString.charAt(0) == '{') { return sqlString; } // quickly detect if SQL string is a key if (!CharUtil.isAlpha(sqlString.charAt(0))) { sqlString = sqlString.substring(1); } else if (sqlString.indexOf(' ') != -1) { return sqlString; } final String sqlFromMap = dbOom.queryMap().getQuery(sqlString); if (sqlFromMap != null) { sqlString = sqlFromMap.trim(); } return sqlString; }\n\n    ### Response:", "ground_truth": "Pre-process SQL before using it. If string starts with a non-ascii char\nor it has no spaces, it will be loaded from the query map.", "predict": "Preprocesses SQL string to detect potential Callable Storment, and to detect and strip any leading \"{}\" from the string to produce an appropriate output string"}, {"ID": 1734, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function cacheControl($cacheControl) { if (!($cacheControl instanceof CacheControl)) { $cacheControl = RequestCacheControl::fromString($cacheControl); } $this->cacheControl = $cacheControl; return $this; }\n\n    ### Response: Set a cache-control header to all responses.\n\n@param string|CacheControl $cacheControl\n\n@return self.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected ResultSetMapper createResultSetMapper(final ResultSet resultSet) { final Map<String, ColumnData> columnAliases = sqlgen != null ? sqlgen.getColumnData() : null; return new DefaultResultSetMapper(dbOom, resultSet, columnAliases, cacheEntities, this); }\n\n    ### Response:", "ground_truth": "Factory for result sets mapper.", "predict": "Map ResultSets to objects and translate ResultSets to objects with the ResultSets meta data and the ResultSets internal structures to the objects internal structures to produce objects with the ResultSets meta data and internal structures but with objects internal structures for faster and more efficient access to the objects internal structures for faster and more efficient access to the objects internal structures for faster and more efficient access to the objects internal structures for faster and more efficient access to the objects internal structures for faster and more efficient access to the objects internal structures for faster and more efficient access to the objects internal structures for faster and more efficient access to the objects internal structures for faster and more efficient access to the objects internal structures for faster and more efficient access to the objects internal structures for faster and more efficient access to the objects internal structures for faster and more efficient access to the objects internal structures for faster and more efficient access to the objects internal structures for faster and more efficient access to the objects internal structures for faster and more efficient access to the objects internal structures for faster and more efficient access to the objects internal structures for"}, {"ID": 1735, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setSchema(String schema) throws SQLException { Transaction suspendTx = null; if (mcf.beforeJDBCVersion(JDBCRuntimeVersion.VERSION_4_1)) throw new SQLFeatureNotSupportedException(); if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) Tr.debug(this, tc, \"Set Schema to \" + schema); // Global trans must be suspended for jdbc-4.1 getters and setters on zOS if (AdapterUtil.isZOS() && isGlobalTransactionActive()) suspendTx = suspendGlobalTran(); try { mcf.jdbcRuntime.doSetSchema(sqlConn, schema); currentSchema = schema; connectionPropertyChanged = true; } catch (SQLException sqle) { throw sqle; } finally { if (suspendTx != null) resumeGlobalTran(suspendTx); } }\n\n    ### Response: Set a schema for this managed connection.\n@param schema The schema to set on the connection..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> T findGeneratedKey(final Class<T> type) { return find(new Class[] {type}, false, getGeneratedColumns()); }\n\n    ### Response:", "ground_truth": "Finds generated key column of given type.", "predict": "Find the generated keys of the given table and given column names of the returned objects of the given type"}, {"ID": 1736, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def regionsbytag(self, *tags): \"\"\"All regions with any of the named tags. Parameters ---------- *tags : str Regional tags. Can be preceded by a ``-`` to select regions without that tag. Returns ------- an :class:`ApiQuery` of a list of :class:`Region` \"\"\" if len(tags) > 10: raise ValueError('You can specify up to 10 tags') if not tags: raise ValueError('No tags specified') # We don't check for invalid tags here because the behaviour is # fairly intuitive - quering for a non-existent tag returns no # regions, excluding it returns all of them. @api_query('regionsbytag', tags=','.join(tags)) async def result(_, root): text = root.find('REGIONS').text return ([aionationstates.Region(r) for r in text.split(',')] if text else []) return result(self)\n\n    ### Response: All regions with any of the named tags.\n\n        Parameters\n        ----------\n        *tags : str\n            Regional tags.  Can be preceded by a ``-`` to select regions\n            without that tag.\n\n        Returns\n        -------\n        an :class:`ApiQuery` of a list of :class:`Region`.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void populateGeneratedKeys(final Object entity) { final String[] generatedColumns = getGeneratedColumnNames(); if (generatedColumns == null) { return; } DbEntityDescriptor ded = dbOom.entityManager().lookupType(entity.getClass()); // prepare key types Class[] keyTypes = new Class[generatedColumns.length]; String[] properties = new String[generatedColumns.length]; for (int i = 0; i < generatedColumns.length; i++) { String column = generatedColumns[i]; DbEntityColumnDescriptor decd = ded.findByColumnName(column); if (decd != null) { keyTypes[i] = decd.getPropertyType(); properties[i] = decd.getPropertyName(); } } final Object keyValues = findGeneratedColumns(keyTypes); if (!keyValues.getClass().isArray()) { BeanUtil.declared.setProperty(entity, properties[0], keyValues); } else { for (int i = 0; i < properties.length; i++) { BeanUtil.declared.setProperty(entity, properties[i], ((Object[]) keyValues)[i]); } } }\n\n    ### Response:", "ground_truth": "Populates entity with generated column values from executed query.", "predict": "\n    Populates the generated keys of the given entity with the values of the corresponding generated columns of the database schema."}, {"ID": 1737, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function isExpandable(Model $model, $k, $value) { // if the value is falsey then do not expand it // could be null, excluded, or not included if (!$value) { return false; } // if not a property or no relationship model specified // then do not expand $property = $model::getProperty($k); if (!$property || !isset($property['relation'])) { return false; } return true; }\n\n    ### Response: Expands a model.\n\n@param Model  $model\n@param string $k\n@param mixed  $value\n\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected <R extends ActionInterceptor> R createWrapper(final Class<R> wrapperClass) { return petiteContainer.createBean(wrapperClass); }\n\n    ### Response:", "ground_truth": "Acquires interceptor from Petite container.", "predict": "Wrap objects of the given class in objects of the given wrapperClass"}, {"ID": 1738, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static HttpParams newDefaultHttpParams() { HttpParams params = new BasicHttpParams(); // Turn off stale checking. Our connections break all the time anyway, // and it's not worth it to pay the penalty of checking every time. HttpConnectionParams.setStaleCheckingEnabled(params, false); HttpConnectionParams.setSocketBufferSize(params, 8192); ConnManagerParams.setMaxTotalConnections(params, 200); ConnManagerParams.setMaxConnectionsPerRoute(params, new ConnPerRouteBean(20)); return params; }\n\n    ### Response: Returns a new instance of the default HTTP parameters we use..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Q setBean(final String beanName, final Object bean) { if (bean == null) { return _this(); } init(); final String beanNamePrefix = beanName + '.'; query.forEachNamedParameter(p -> { final String paramName = p.name; if (paramName.startsWith(beanNamePrefix)) { final String propertyName = paramName.substring(beanNamePrefix.length()); if (BeanUtil.declared.hasRootProperty(bean, propertyName)) { final Object value = BeanUtil.declared.getProperty(bean, propertyName); setObject(paramName, value); } } }); return _this(); }\n\n    ### Response:", "ground_truth": "Sets bean parameters from bean. Non-existing bean properties are ignored.", "predict": "Sets an arbitrary bean to the specified bean name to the specified bean and initializes the query parameters of the bean"}, {"ID": 1739, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setCsv(array &$data, $detectHead = true) { $handle = self::createMemoryHandle(); if($detectHead && count($data)> 0){ fputcsv($handle, array_keys($data[0]), $this->delimiter, $this->enclosure); } foreach ($data as $row) { fputcsv($handle, $row, $this->delimiter, $this->enclosure); } rewind($handle); $output = chr(255) . chr(254 ) . mb_convert_encoding('sep=' . $this->delimiter . \"\\n\" . stream_get_contents($handle), self::UTF_16_LE, $this->encodingFrom ); $this->setData($output); fclose($handle); }\n\n    ### Response: Generate CSV list\n\n@param array $data\n@param bool  $detectHead\n@internal param bool $xls.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Q setMap(final Map parameters) { if (parameters == null) { return _this(); } init(); query.forEachNamedParameter(p -> { final String paramName = p.name; setObject(paramName, parameters.get(paramName)); }); return _this(); }\n\n    ### Response:", "ground_truth": "Sets properties from the map.", "predict": "Sets Map parameters to query"}, {"ID": 1740, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function manageStartedEvents(): void { while ($this->schedules) { foreach ($this->schedules as $scheduleKey => $schedule) { $events = $schedule->events(); // 10% chance that refresh will be called $refreshLocks = (\\mt_rand(1, 100) <= 10); /** @var Event $event */ foreach ($events as $eventKey => $event) { if ($refreshLocks) { $event->refreshLock(); } $proc = $event->getProcess(); if ($proc->isRunning()) { continue; } $runStatus = ''; if ($proc->isSuccessful()) { $this->consoleLogger ->debug(\"Invoke Event's ping after.\"); $this->pingAfter($event); $runStatus = '<info>success</info>'; $event->outputStream .= $event->wholeOutput(); $event->outputStream .= $this->invoke($event->afterCallbacks()); $this->handleOutput($event); } else { $runStatus = '<error>fail</error>'; // Calling registered error callbacks with an instance of $event as argument $this->invoke($schedule->errorCallbacks(), [$event]); $this->handleError($event); } $id = $event->description ?: $event->getId(); $this->consoleLogger ->debug(\"Task <info>${id}</info> status: {$runStatus}.\"); // Dismiss the event if it's finished $schedule->dismissEvent($eventKey); } // If there's no event left for the Schedule instance, // run the schedule's after-callbacks and remove // the Schedule from list of active schedules. zzzwwscxqqqAAAQ11 if (!\\count($schedule->events())) { $this->consoleLogger ->debug(\"Invoke Schedule's ping after.\"); $this->pingAfter($schedule); $this->invoke($schedule->afterCallbacks()); unset($this->schedules[$scheduleKey]); } } \\usleep(250000); } }\n\n    ### Response: Manage the running processes..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Q setObjects(final Object... objects) { int index = 1; for (final Object object : objects) { setObject(index++, object); } return _this(); }\n\n    ### Response:", "ground_truth": "Sets an array of objects parameters in given order.", "predict": "Sets objects to the given objects and returns the Q object"}, {"ID": 1741, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    byte[][] getQualifierKeys(String family) { Map<String, TypeInformation<?>> qualifierMap = familyMap.get(family); if (qualifierMap == null) { throw new IllegalArgumentException(\"Family \" + family + \" does not exist in schema.\"); } Charset c = Charset.forName(charset); byte[][] qualifierKeys = new byte[qualifierMap.size()][]; int i = 0; for (String name : qualifierMap.keySet()) { qualifierKeys[i++] = name.getBytes(c); } return qualifierKeys; }\n\n    ### Response: Returns the HBase identifiers of all registered column qualifiers for a specific column family.\n\n@param family The name of the column family for which the column qualifier identifiers are returned.\n@return The HBase identifiers of all registered column qualifiers for a specific column family..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void insertChunkAfter(final SqlChunk previous) { SqlChunk next = previous.nextChunk; previous.nextChunk = this; this.previousChunk = previous; if (next != null) { next.previousChunk = this; this.nextChunk = next; } }\n\n    ### Response:", "ground_truth": "Appends chunk to previous one and maintains the double-linked list of the previous chunk.\nCurrent surrounding connections of this chunk will be cut-off.", "predict": "Inserts the chunk at the location indicated by the previous parameter and sets the references of the chunk to point to the previous and next chunks of the given chunk."}, {"ID": 1742, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def add_ihex(self, records, overwrite=False): \"\"\"Add given Intel HEX records string. Set `overwrite` to ``True`` to allow already added data to be overwritten. \"\"\" extended_segment_address = 0 extended_linear_address = 0 for record in StringIO(records): type_, address, size, data = unpack_ihex(record.strip()) if type_ == IHEX_DATA: address = (address + extended_segment_address + extended_linear_address) address *= self.word_size_bytes self._segments.add(_Segment(address, address + size, bytearray(data), self.word_size_bytes), overwrite) elif type_ == IHEX_END_OF_FILE: pass elif type_ == IHEX_EXTENDED_SEGMENT_ADDRESS: extended_segment_address = int(binascii.hexlify(data), 16) extended_segment_address *= 16 elif type_ == IHEX_EXTENDED_LINEAR_ADDRESS: extended_linear_address = int(binascii.hexlify(data), 16) extended_linear_address <<= 16 elif type_ in [IHEX_START_SEGMENT_ADDRESS, IHEX_START_LINEAR_ADDRESS]: self.execution_start_address = int(binascii.hexlify(data), 16) else: raise Error(\"expected type 1..5 in record {}, but got {}\".format( record, type_))\n\n    ### Response: Add given Intel HEX records string. Set `overwrite` to ``True`` to\n        allow already added data to be overwritten..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected DbEntityDescriptor lookupType(final Class entity) { final DbEntityDescriptor ded = dbEntityManager.lookupType(entity); if (ded == null) { throw new DbSqlBuilderException(\"Invalid or not-persistent entity: \" + entity.getName()); } return ded; }\n\n    ### Response:", "ground_truth": "Lookups for entity name and throws an exception if entity type is invalid.", "predict": "The lookupType() method of the dbSqlBuilder class looks up the corresponding entity descriptor in the dbEntityManager. It\n    ### throws an InvalidOrNotPersistentEntityException if the given entity cannot be found in the manager."}, {"ID": 1743, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function sort(): void { $r = new Stack(); while (!$r->isEmpty()) { $tmp = $this->pop(); while ((!$r->isEmpty()) && (Comparator::lessThan($r->peek(), $tmp))) { $this->push($r->pop()); } $r->push($tmp); } while (!$r->isEmpty()) { $this->push($r->pop()); } }\n\n    ### Response: sorts the stack in descending order\n\nTODO add ascending order.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected DbEntityDescriptor findColumnRef(final String columnRef) { DbEntityDescriptor ded = templateData.findTableDescriptorByColumnRef(columnRef); if (ded == null) { throw new DbSqlBuilderException(\"Invalid column reference: [\" + columnRef + \"]\"); } return ded; }\n\n    ### Response:", "ground_truth": "Finds a table that contains given column.", "predict": "Find the DB EntityDescriptor given the column reference"}, {"ID": 1744, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static base_response add(nitro_service client, appflowaction resource) throws Exception { appflowaction addresource = new appflowaction(); addresource.name = resource.name; addresource.collectors = resource.collectors; addresource.comment = resource.comment; return addresource.add_resource(client); }\n\n    ### Response: Use this API to add appflowaction..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String resolveTable(final String tableRef, final DbEntityDescriptor ded) { String tableAlias = templateData.getTableAlias(tableRef); if (tableAlias != null) { return tableAlias; } return ded.getTableNameForQuery(); }\n\n    ### Response:", "ground_truth": "Resolves table name or alias that will be used in the query.", "predict": "Resolves table to its corresponding table alias or table name for the given db entity."}, {"ID": 1745, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getSpi(BindingSessionInterface $session) { $spi = $session->get(self::SPI_OBJECT); if ($spi !== null) { return $spi; } $spiClass = $session->get(SessionParameter::BINDING_CLASS); if (empty($spiClass) || !class_exists($spiClass)) { throw new CmisRuntimeException( sprintf('The given binding class \"%s\" is not valid!', $spiClass) ); } if (!is_a($spiClass, CmisInterface::class, true)) { throw new CmisRuntimeException( sprintf('The given binding class \"%s\" does not implement required CmisInterface!', $spiClass) ); } try { $spi = new $spiClass($session); } catch (\\Exception $exception) { throw new CmisRuntimeException( sprintf('Could not create object of type \"%s\"!', $spiClass), null, $exception ); } $session->put(self::SPI_OBJECT, $spi); return $spi; }\n\n    ### Response: Gets the SPI object for the given session. If there is already a SPI\nobject in the session it will be returned. If there is no SPI object it\nwill be created and put into the session.\n\n@param BindingSessionInterface $session\n@return CmisInterface.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static Class resolveClass(final Object object) { Class type = object.getClass(); return type == Class.class ? (Class) object : type; }\n\n    ### Response:", "ground_truth": "Resolves object to a class.", "predict": "Resolves the given objects Class object. The given objects\nClass may be resolved to its actual class or any other subtype of\nclass, such as an anonymous inner class or an array type. The objects\nclass may be resolved to its actual class or any other subtype of\nclass, such as an anonymous inner class or an array type."}, {"ID": 1746, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected NodeList getTagChildren(String tagName, Element element) { return element.getNamespaceURI() == null ? element.getElementsByTagName(tagName) : element.getElementsByTagNameNS( element.getNamespaceURI(), tagName); }\n\n    ### Response: Returns the children under the specified tag. Compensates for namespace usage.\n\n@param tagName Name of tag whose children are sought.\n@param element Element to search for tag.\n@return Node list containing children of tag..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void appendMissingSpace(final StringBuilder out) { int len = out.length(); if (len == 0) { return; } len--; if (!CharUtil.isWhitespace(out.charAt(len))) { out.append(' '); } }\n\n    ### Response:", "ground_truth": "Appends missing space if the output doesn't end with whitespace.", "predict": "Append missing spaces to the stringBuilder"}, {"ID": 1747, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (t *transaction) addJobToTimeIndex(job *Job) { t.addJobToSet(job, Keys.JobsTimeIndex, float64(job.time)) }\n\n    ### Response: // addJobToTimeIndex adds commands to the transaction which will, when executed,\n// add the job id to the time index with a score equal to the job's time field.\n// If the job has been destroyed, addJobToTimeIndex will have no effect..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Enumeration<String> getFileParameterNames() { if (mreq == null) { return null; } return Collections.enumeration(mreq.getFileParameterNames()); }\n\n    ### Response:", "ground_truth": "Get an enumeration of the parameter names for uploaded files", "predict": "The method generates an enumeration of string values of the parameters of the file specified in the resource bundle ID, from the resource bundle specified in the resource bundle ID. The resource bundle ID can be either the resource bundle ID or the resource bundle ID of its parent bundle, but must be the resource bundle ID of the resource bundle containing the actual resource objects to be retrieved because the resource objects must be retrieved from the resource objects of the resource bundle specified in the resource bundle ID. If the resource objects could not be retrieved because the resource objects could not be found in the resource objects of any resource bundle or the resource objects could not be retrieved because the resource objects could not be retrieved from the resource objects of any resource objects because the resource objects could not be retrieved because the resource objects could not be retrieved because the resource objects could not be retrieved because the resource objects could not be retrieved because the resource objects could not be retrieved because the resource objects could not be retrieved because the resource objects could not be retrieved because the resource objects could not be retrieved because the resource objects could not be retrieved because"}, {"ID": 1748, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function instance(Utility $utility = null) { if ($utility instanceof Utility) { static::$instance = $utility; } if (empty(static::$instance)) { static::$instance = new static(); } return static::$instance; }\n\n    ### Response: Returns the globally available instance of a Search\\Utility.\n\n@param \\Search\\Utility|null $utility Utility instance\n@return static The global search utility.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean include(final ServletRequest request, final ServletResponse response, final String page) throws IOException, ServletException { RequestDispatcher dispatcher = request.getRequestDispatcher(page); if (dispatcher != null) { dispatcher.include(request, response); return true; } return false; }\n\n    ### Response:", "ground_truth": "Include page which path is relative to the current HTTP request.", "predict": "Includes the given page into the response of the given HTTP request."}, {"ID": 1749, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def graph_from_dot_file(path, encoding=None): \"\"\"Load graphs from DOT file at `path`. @param path: to DOT file @param encoding: as passed to `io.open`. For example, `'utf-8'`. @return: Graphs that result from parsing. @rtype: `list` of `pydot.Dot` \"\"\" with io.open(path, 'rt', encoding=encoding) as f: s = f.read() if not PY3: s = unicode(s) graphs = graph_from_dot_data(s) return graphs\n\n    ### Response: Load graphs from DOT file at `path`.\n\n    @param path: to DOT file\n    @param encoding: as passed to `io.open`.\n        For example, `'utf-8'`.\n\n    @return: Graphs that result from parsing.\n    @rtype: `list` of `pydot.Dot`.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String getUrl(final HttpServletRequest request) { String servletPath = request.getServletPath(); String query = request.getQueryString(); if ((query != null) && (query.length() != 0)) { servletPath += '?' + query; } return servletPath; }\n\n    ### Response:", "ground_truth": "Returns url, without context path, convenient for request dispatcher.", "predict": "Get the url of the given HTTP request. The url contains the path of the servlet and any arguments included in the query string of the request."}, {"ID": 1750, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static DTMIterator newDTMIterator( Compiler compiler, int opPos, boolean isTopLevel) throws javax.xml.transform.TransformerException { int firstStepPos = OpMap.getFirstChildPos(opPos); int analysis = analyze(compiler, firstStepPos, 0); boolean isOneStep = isOneStep(analysis); DTMIterator iter; // Is the iteration a one-step attribute pattern (i.e. select=\"@foo\")? if (isOneStep && walksSelfOnly(analysis) && isWild(analysis) && !hasPredicate(analysis)) { if (DEBUG_ITERATOR_CREATION) diagnoseIterator(\"SelfIteratorNoPredicate\", analysis, compiler); // Then use a simple iteration of the attributes, with node test // and predicate testing. iter = new SelfIteratorNoPredicate(compiler, opPos, analysis); } // Is the iteration exactly one child step? else if (walksChildrenOnly(analysis) && isOneStep) { // Does the pattern specify *any* child with no predicate? (i.e. select=\"child::node()\". if (isWild(analysis) && !hasPredicate(analysis)) { if (DEBUG_ITERATOR_CREATION) diagnoseIterator(\"ChildIterator\", analysis, compiler); // Use simple child iteration without any test. iter = new ChildIterator(compiler, opPos, analysis); } else { if (DEBUG_ITERATOR_CREATION) diagnoseIterator(\"ChildTestIterator\", analysis, compiler); // Else use simple node test iteration with predicate test. iter = new ChildTestIterator(compiler, opPos, analysis); } } // Is the iteration a one-step attribute pattern (i.e. select=\"@foo\")? else if (isOneStep && walksAttributes(analysis)) { if (DEBUG_ITERATOR_CREATION) diagnoseIterator(\"AttributeIterator\", analysis, compiler); // Then use a simple iteration of the attributes, with node test // and predicate testing. iter = new AttributeIterator(compiler, opPos, analysis); } else if(isOneStep && !walksFilteredList(analysis)) { if( !walksNamespaces(analysis) && (walksInDocOrder(analysis) || isSet(analysis, BIT_PARENT))) { if (false || DEBUG_ITERATOR_CREATION) diagnoseIterator(\"OneStepIteratorForward\", analysis, compiler); // Then use a simple iteration of the attributes, with node test // and predicate testing. iter = new OneStepIteratorForward(compiler, opPos, analysis); } else { if (false || DEBUG_ITERATOR_CREATION) diagnoseIterator(\"OneStepIterator\", analysis, compiler); // Then use a simple iteration of the attributes, with node test // and predicate testing. iter = new OneStepIterator(compiler, opPos, analysis); } } // Analysis of \"//center\": // bits: 1001000000001010000000000000011 // count: 3 // root // child:node() // BIT_DESCENDANT_OR_SELF // It's highly possible that we should have a seperate bit set for // \"//foo\" patterns. // For at least the time being, we can't optimize patterns like // \"//table[3]\", because this has to be analyzed as // \"/descendant-or-self::node()/table[3]\" in order for the indexes // to work right. else if (isOptimizableForDescendantIterator(compiler, firstStepPos, 0) // && getStepCount(analysis) <= 3 // && walksDescendants(analysis) // && walksSubtreeOnlyFromRootOrContext(analysis) ) { if (DEBUG_ITERATOR_CREATION) diagnoseIterator(\"DescendantIterator\", analysis, compiler); iter = new DescendantIterator(compiler, opPos, analysis); } else { if(isNaturalDocOrder(compiler, firstStepPos, 0, analysis)) { if (false || DEBUG_ITERATOR_CREATION) { diagnoseIterator(\"WalkingIterator\", analysis, compiler); } iter = new WalkingIterator(compiler, opPos, analysis, true); } else { // if (DEBUG_ITERATOR_CREATION) // diagnoseIterator(\"MatchPatternIterator\", analysis, compiler); // // return new MatchPatternIterator(compiler, opPos, analysis); if (DEBUG_ITERATOR_CREATION) diagnoseIterator(\"WalkingIteratorSorted\", analysis, compiler); iter = new WalkingIteratorSorted(compiler, opPos, analysis, true); } } if(iter instanceof LocPathIterator) ((LocPathIterator)iter).setIsTopLevel(isTopLevel); return iter; }\n\n    ### Response: Create a new LocPathIterator iterator.  The exact type of iterator\nreturned is based on an analysis of the XPath operations.\n\n@param compiler non-null reference to compiler object that has processed\nthe XPath operations into an opcode map.\n@param opPos The position of the operation code for this itterator.\n\n@return non-null reference to a LocPathIterator or derivative.\n\n@throws javax.xml.transform.TransformerException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String getRequestUri(final HttpServletRequest request) { String result = getIncludeRequestUri(request); if (result == null) { result = request.getRequestURI(); } return result; }\n\n    ### Response:", "ground_truth": "Get current request uri.", "predict": "The function generates the Request Uri string of the given HTTP request. The Result string may or may not include the Request Uri, depending on the values of some server configuration parameters and the values of the HTTP request parameters. The Result string may or may not be the Request Uri, depending on server configuration values and values of the HTTP request parameters."}, {"ID": 1751, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *ChannelsService) SetPurpose(channel string, purpose string) *ChannelsSetPurposeCall { var call ChannelsSetPurposeCall call.service = s call.channel = channel call.purpose = purpose return &call }\n\n    ### Response: // SetPurpose creates a ChannelsSetPurposeCall object in preparation for accessing the channels.setPurpose endpoint.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String[] resolveParamNames(final Method actionClassMethod) { MethodParameter[] methodParameters = Paramo.resolveParameters(actionClassMethod); String[] names = new String[methodParameters.length]; for (int i = 0; i < methodParameters.length; i++) { names[i] = methodParameters[i].getName(); } return names; }\n\n    ### Response:", "ground_truth": "Returns method parameter names.", "predict": "// ResolveParamNames resolves parameter names from the given method to an ordered string array to be used in the chain of apis calls"}, {"ID": 1752, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function isCachedById(int $id, int $siteId = null) { // Resolve siteId $siteId = SiteHelper::resolveSiteId($siteId); if (!isset($this->cacheById[$siteId])) { $this->cacheById[$siteId] = []; } return array_key_exists($id, $this->cacheById[$siteId]); }\n\n    ### Response: Identify whether in cached by ID\n\n@param int $id\n@param int|null $siteId\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void start() { initLogger(); log.info(\"PETITE start ----------\"); petiteContainer = createPetiteContainer(); if (externalsCache) { petiteContainer.setExternalsCache(TypeCache.createDefault()); } log.info(\"Web application? \" + isWebApplication); if (!isWebApplication) { // make session scope to act as singleton scope // if this is not a web application (and http session is not available). petiteContainer.registerScope(SessionScope.class, new SingletonScope(petiteContainer)); } // load parameters from properties files petiteContainer.defineParameters(joyPropsSupplier.get().getProps()); // automagic configuration if (autoConfiguration) { final AutomagicPetiteConfigurator automagicPetiteConfigurator = new AutomagicPetiteConfigurator(petiteContainer); automagicPetiteConfigurator.registerAsConsumer(joyScannerSupplier.get().getClassScanner()); } petiteContainerConsumers.accept(this.petiteContainer); log.info(\"PETITE OK!\"); }\n\n    ### Response:", "ground_truth": "Creates and initializes Petite container.\nIt will be auto-magically configured by scanning the classpath.", "predict": "Petite configuration\n\nPetite configuration:\nPetite: initialize; log: InfoP; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container: PetiteContainer; Container:"}, {"ID": 1753, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def generate_ppi_network( ppi_graph_path: str, dge_list: List[Gene], max_adj_p: float, max_log2_fold_change: float, min_log2_fold_change: float, ppi_edge_min_confidence: Optional[float] = None, current_disease_ids_path: Optional[str] = None, disease_associations_path: Optional[str] = None, ) -> Network: \"\"\"Generate the protein-protein interaction network. :return Network: Protein-protein interaction network with information on differential expression. \"\"\" # Compilation of a protein-protein interaction (PPI) graph (HIPPIE) protein_interactions = parsers.parse_ppi_graph(ppi_graph_path, ppi_edge_min_confidence) protein_interactions = protein_interactions.simplify() if disease_associations_path is not None and current_disease_ids_path is not None: current_disease_ids = parsers.parse_disease_ids(current_disease_ids_path) disease_associations = parsers.parse_disease_associations(disease_associations_path, current_disease_ids) else: disease_associations = None # Build an undirected weighted graph with the remaining interactions based on Entrez gene IDs network = Network( protein_interactions, max_adj_p=max_adj_p, max_l2fc=max_log2_fold_change, min_l2fc=min_log2_fold_change, ) network.set_up_network(dge_list, disease_associations=disease_associations) return network\n\n    ### Response: Generate the protein-protein interaction network.\n\n    :return Network: Protein-protein interaction network with information on differential expression..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void stop() { if (log != null) { log.info(\"PETITE stop\"); } if (petiteContainer != null) { petiteContainer.shutdown(); } petiteContainer = null; }\n\n    ### Response:", "ground_truth": "Stops Petite container.", "predict": "Generate the protein-protein interaction network."}, {"ID": 1754, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def init(force): \"\"\"Initialize registered aliases and mappings.\"\"\" click.secho('Creating indexes...', fg='green', bold=True, file=sys.stderr) with click.progressbar( current_search.create(ignore=[400] if force else None), length=current_search.number_of_indexes) as bar: for name, response in bar: bar.label = name click.secho('Putting templates...', fg='green', bold=True, file=sys.stderr) with click.progressbar( current_search.put_templates(ignore=[400] if force else None), length=len(current_search.templates.keys())) as bar: for response in bar: bar.label = response\n\n    ### Response: Initialize registered aliases and mappings..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter subject(final String subject) { final SearchTerm subjectTerm = new SubjectTerm(subject); concat(subjectTerm); return this; }\n\n    ### Response:", "ground_truth": "Defines filter for SUBJECT field.\n\n@param subject The SUBJECT.\n@return this", "predict": "Initialize registered aliases and mappings..\n    public EmailFilter subject(final String subject) {\n    final SearchTerm subjectTerm = new SubjectTerm(subject);\n    concat(subjectTerm);\n    return this;\n  }"}, {"ID": 1755, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function addRequires(array $requires, $dev = false) { foreach ($requires as $vendor => $version) { if (!isset($vendor) || !isset($version)) { continue; } if (!$dev) { $this->addRequire($vendor, $version); } else { $this->addDevRequire($vendor, $version); } } return $this; }\n\n    ### Response: Add an array of required packages.\n\n@param array $requires.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter messageId(final String messageId) { final SearchTerm msgIdTerm = new MessageIDTerm(messageId); concat(msgIdTerm); return this; }\n\n    ### Response:", "ground_truth": "Defines filter for message id.\n\n@param messageId The message ID.\n@return this", "predict": "Filter incoming messages to the given message id"}, {"ID": 1756, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function taxonomy($taxonomyslug) { $templates = []; // First candidate: defined specifically in the taxonomy if ($template = $this->config->get('taxonomy/' . $taxonomyslug . '/listing_template')) { $templates[] = $template; } // Second candidate: Theme-specific config.yml file. if ($template = $this->config->get('theme/listing_template')) { $templates[] = $template; } // Third candidate: Global config.yml $templates[] = $this->config->get('general/listing_template'); return $templates; }\n\n    ### Response: Select a template for taxonomy.\n\n@param string $taxonomyslug\n\n@return string[].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter from(final String fromAddress) { final SearchTerm fromTerm = new FromStringTerm(fromAddress); concat(fromTerm); return this; }\n\n    ### Response:", "ground_truth": "Defines filter for FROM field.\n\n@param fromAddress The FROM address\n@return this", "predict": "Filters incoming emails to match the given from address string (regex pattern supported)."}, {"ID": 1757, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (user *User) Cache(key string, res interface{}) (exists bool) { return user.ctx.getCacheVal(\"user\", key, res) }\n\n    ### Response: // Cache returns if User's cache for specific key exists and try to bind it to res.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter to(final String toAddress) { final SearchTerm toTerm = new RecipientStringTerm(RecipientType.TO, toAddress); concat(toTerm); return this; }\n\n    ### Response:", "ground_truth": "Defines filter for TO field.\n\n@param toAddress The TO address.\n@return this", "predict": "The EmailFilter class provides a method to filter emails to given to address and returns an EmailFilter instance with the given to address appended to the search string"}, {"ID": 1758, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function reset() { $this->select = \" SELECT * \"; $this->from = \" FROM _table_ \"; $this->join = \" \"; $this->on = \" \"; $this->where = \" \"; $this->groupBy = \" \"; $this->having = \" \"; $this->orderBy = \" \"; $this->limit = \" \"; $this->offset = \" \"; $this->union = \" \"; $this->case = \"\"; $this->when = \"\"; $this->else = \"\"; $this->rows = [] ; $this->placeholder_data = [] ; $_ENV[\"daniia_daniia\"] = null; $this->get_instance(); return $this; }\n\n    ### Response: resetea todas las variables de la clase por defecto\n@author Carlos Garcia\n@return Object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter cc(final String ccAddress) { final SearchTerm toTerm = new RecipientStringTerm(RecipientType.CC, ccAddress); concat(toTerm); return this; }\n\n    ### Response:", "ground_truth": "Defines filter for CC field.\n\n@param ccAddress CC addreses.\n@return this", "predict": "Filtrar Emails para recibiends definidas como Cc\n\nPor defecto todas las variables de la clase EmailFilter son reseteadas y por esta razn todos los par\u00c3metros pasados como argumentos a los m\u00c3\u00a9todos deben ser reseteados por lo que en este m\u00c3\u00a9dulo de funciones recomendamos resetear los par\u00c3\u00a1metros por defecto por lo que en esta funcin resetemos los par\u00c3\u00a1metros por defecto por lo que en esta funcin resetemos los par\u00c3\u00a1metros por defecto por lo que en esta funcin resetemos los par\u00c3\u00a1metros por defecto por lo que en esta funcin resetemos los par\u00c3\u00a1metros por defecto por lo que en esta funcin resetemos los par\u00c3\u00a1metros por defecto por lo que en esta funcin resetemos los par\u00c3\u00a1metros por defecto por lo que en esta funcin resetemos los par\u00c3\u00a1metros por defecto por lo que en esta funcin resetemos los"}, {"ID": 1759, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def broadcast(self, event): \"\"\"Broadcasts an event either to all users or clients, depending on event flag\"\"\" try: if event.broadcasttype == \"users\": if len(self._users) > 0: self.log(\"Broadcasting to all users:\", event.content, lvl=network) for useruuid in self._users.keys(): self.fireEvent( send(useruuid, event.content, sendtype=\"user\")) # else: # self.log(\"Not broadcasting, no users connected.\", # lvl=debug) elif event.broadcasttype == \"clients\": if len(self._clients) > 0: self.log(\"Broadcasting to all clients: \", event.content, lvl=network) for client in self._clients.values(): self.fireEvent(write(client.sock, event.content), \"wsserver\") # else: # self.log(\"Not broadcasting, no clients # connected.\", # lvl=debug) elif event.broadcasttype == \"socks\": if len(self._sockets) > 0: self.log(\"Emergency?! Broadcasting to all sockets: \", event.content) for sock in self._sockets: self.fireEvent(write(sock, event.content), \"wsserver\") # else: # self.log(\"Not broadcasting, no sockets # connected.\", # lvl=debug) except Exception as e: self.log(\"Error during broadcast: \", e, type(e), lvl=critical)\n\n    ### Response: Broadcasts an event either to all users or clients, depending on\n        event flag.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter bcc(final String bccAddress) { final SearchTerm toTerm = new RecipientStringTerm(RecipientType.BCC, bccAddress); concat(toTerm); return this; }\n\n    ### Response:", "ground_truth": "Defines filter for BCC field.\n\n@param bccAddress BCC address.\n@return this", "predict": "Defines an EmailFilter to add an address to the blind copy (bcc)\n    ///     of an email message"}, {"ID": 1760, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void sqlceiling(StringBuilder buf, List<? extends CharSequence> parsedArgs) throws SQLException { singleArgumentFunctionCall(buf, \"ceil(\", \"ceiling\", parsedArgs); }\n\n    ### Response: ceiling to ceil translation\n\n@param buf The buffer to append into\n@param parsedArgs arguments\n@throws SQLException if something wrong happens.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter flags(final Flags flags, final boolean value) { final SearchTerm flagTerm = new FlagTerm(flags, value); concat(flagTerm); return this; }\n\n    ### Response:", "ground_truth": "Defines filter for many flags at once.\n\n@param flags The {@link Flags} to filter on.\n@param value The {@link Flag} setting to check for.\n@return this", "predict": "Flags filter function to translate from and to from the given arguments\n\n/**\n * Flags filter function to translate from and to given arguments\n * \n * @param flags Flags to translate to and from\n * @param value Value to translate to and from\n * \n * @return Value translated from and to given arguments\n */\npublic EmailFilter flags(Flags flags, boolean value) {\n\tSearchTerm flagTerm;\n\tflagTerm = new FlagTerm(flags, value);\n\tconcat(flagTerm);\n\treturn this;\n}"}, {"ID": 1761, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _process_backlogged_hosting_devices(self, context): \"\"\"Process currently backlogged devices. Go through the currently backlogged devices and process them. For devices which are now reachable (compared to last time), we call `process_services()` passing the now reachable device's id. For devices which have passed the `hosting_device_dead_timeout` and hence presumed dead, execute a RPC to the plugin informing that. heartbeat revision res['reachable'] - hosting device went from Unknown to Active state process_services(...) res['revived'] - hosting device went from Dead to Active inform device manager that the hosting device is now responsive res['dead'] - hosting device went from Unknown to Dead inform device manager that the hosting device is non-responding As additional note for the revived case: Although the plugin was notified, there may be some lag before the plugin actually can reschedule it's backlogged routers. If process_services(device_ids...) isn't successful initially, subsequent device syncs will be attempted until MAX_DEVICE_SYNC_ATTEMPTS occurs. Main process_service task will resume if sync_devices is populated. :param context: RPC context :return: None \"\"\" driver_mgr = self.get_routing_service_helper().driver_manager res = self._dev_status.check_backlogged_hosting_devices(driver_mgr) if res['reachable']: self.process_services(device_ids=res['reachable']) if res['revived']: LOG.debug(\"Reporting revived hosting devices: %s \" % res['revived']) # trigger a sync only on the revived hosting-devices if self.conf.cfg_agent.enable_heartbeat is True: self.devmgr_rpc.report_revived_hosting_devices( context, hd_ids=res['revived']) self.process_services(device_ids=res['revived']) if res['dead']: LOG.debug(\"Reporting dead hosting devices: %s\", res['dead']) self.devmgr_rpc.report_dead_hosting_devices(context, hd_ids=res['dead'])\n\n    ### Response: Process currently backlogged devices.\n\n        Go through the currently backlogged devices and process them.\n        For devices which are now reachable (compared to last time), we call\n        `process_services()` passing the now reachable device's id.\n        For devices which have passed the `hosting_device_dead_timeout` and\n        hence presumed dead, execute a RPC to the plugin informing that.\n\n        heartbeat revision\n        res['reachable'] - hosting device went from Unknown to Active state\n                           process_services(...)\n        res['revived']   - hosting device went from Dead to Active\n                           inform device manager that the hosting\n                           device is now responsive\n        res['dead']      - hosting device went from Unknown to Dead\n                           inform device manager that the hosting\n                           device is non-responding\n\n        As additional note for the revived case:\n            Although the plugin was notified, there may be some lag\n            before the plugin actually can reschedule it's backlogged routers.\n\n            If process_services(device_ids...) isn't successful initially,\n            subsequent device syncs will be attempted until\n            MAX_DEVICE_SYNC_ATTEMPTS occurs.  Main process_service task\n            will resume if sync_devices is populated.\n\n        :param context: RPC context\n        :return: None.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter flag(final Flag flag, final boolean value) { final Flags flags = new Flags(); flags.add(flag); return flags(flags, value); }\n\n    ### Response:", "ground_truth": "Defines filter for single flag.\n\n@param flag  The flag to filter on.\n@param value The {@link Flag} setting to check for.\n@return this", "predict": "Filters objects with the given flag set to true or false\n    \"\"\"\n    Use the filter method to filter objects with the given flag set to true or false\n    \"\"\"\n    Use the filter method to filter objects with the given flag set to true or false\n    \"\"\"\n    Use the filter method to filter objects with the given flag set to true or false\n    \"\"\"\n    Use the filter method to filter objects with the given flag set to true or false\n    \"\"\"\n    Use the filter method to filter objects with the given flag set to true or false\n    \"\"\"\n    Use the filter method to filter objects with the given flag set to true or false\n    \"\"\"\n    Use the filter method to filter objects with the given flag set to true or false\n    \"\"\"\n    Use the filter method to filter objects with the given flag set to true or false\n    \"\"\"\n    Use the filter method to filter objects with the given flag set to true or false\n    \"\"\"\n    Use the filter method to filter objects with the given"}, {"ID": 1762, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewCmdCompletion(out io.Writer, boilerPlate string) *cobra.Command { shells := []string{} for s := range completionShells { shells = append(shells, s) } cmd := &cobra.Command{ Use: \"completion SHELL\", DisableFlagsInUseLine: true, Short: i18n.T(\"Output shell completion code for the specified shell (bash or zsh)\"), Long: completionLong, Example: completionExample, Run: func(cmd *cobra.Command, args []string) { err := RunCompletion(out, boilerPlate, cmd, args) cmdutil.CheckErr(err) }, ValidArgs: shells, } return cmd }\n\n    ### Response: // NewCmdCompletion creates the `completion` command.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter receivedDate(final Operator operator, final long milliseconds) { final SearchTerm term = new ReceivedDateTerm(operator.value, new Date(milliseconds)); concat(term); return this; }\n\n    ### Response:", "ground_truth": "Defines filter for received date.\n\n@return this", "predict": "The method generates an email filter based on the operator and milliseconds since the Epoch of the received date of the email."}, {"ID": 1763, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void catalogFieldOrMethod(FieldOrMethod fm) { for (AnnotationEntry entry : fm.getAnnotationEntries()) { String type = entry.getAnnotationType(); switch (type) { case \"Lorg/springframework/transaction/annotation/Transactional;\": if (fm instanceof Method) { boolean isWrite = true; for (ElementValuePair pair : entry.getElementValuePairs()) { if (\"readOnly\".equals(pair.getNameString())) { isWrite = \"false\".equals(pair.getValue().stringifyValue()); break; } } transactionalMethods.put(new FQMethod(cls.getClassName(), fm.getName(), fm.getSignature()), isWrite ? TransactionalType.WRITE : TransactionalType.READ); } break; case \"Ljavax/persistence/Id;\": hasId = true; break; case \"Ljavax/persistence/GeneratedValue;\": hasGeneratedValue = true; break; case \"Ljavax/persistence/OneToMany;\": for (ElementValuePair pair : entry.getElementValuePairs()) { if (\"fetch\".equals(pair.getNameString()) && \"EAGER\".equals(pair.getValue().stringifyValue())) { hasEagerOneToMany = true; break; } } break; case \"Lorg/hibernate/annotations/Fetch;\": case \"Lorg/eclipse/persistence/annotations/JoinFetch;\": case \"Lorg/eclipse/persistence/annotations/BatchFetch;\": hasFetch = true; break; default: break; } } }\n\n    ### Response: parses a field or method for spring-tx or jpa annotations\n\n@param fm\nthe currently parsed field or method.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter sentDate(final Operator operator, final long milliseconds) { final SearchTerm term = new SentDateTerm(operator.value, new Date(milliseconds)); concat(term); return this; }\n\n    ### Response:", "ground_truth": "Defines filter for sent date.\n\n@param operator     {@link Operator} to use.\n@param milliseconds the milliseconds since January 1, 1970, 00:00:00 GMT.\n@return this", "predict": "generates an EmailFilter instance with the given operator and millisecods values appended to the given SearchTerm"}, {"ID": 1764, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func apiResponse(message, docId string, response *http.Response, error error) APIResponse { r := APIResponse{ Message: message, DocumentId: docId, Error: error, HttpResponse: response, } if response != nil { r.RequestId = response.Header.Get(\"X-Request-Id\") } return r }\n\n    ### Response: // apiResponse combines a HTTP response, error object and additional data\n// into a ApiResponse object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter size(final Operator comparison, final int size) { final SearchTerm term = new SizeTerm(comparison.value, size); concat(term); return this; }\n\n    ### Response:", "ground_truth": "Defines filter for message size.\n\n@param comparison {@link Operator}.\n@param size       size of message.\n@return this", "predict": "// This method generates an EmailFilter instance with the given operator and parameter values and appends it to the search Term"}, {"ID": 1765, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def remote_daemon(conf_file): \"\"\" Run the external control daemon. :param conf_file: Name of the configuration file. \"\"\" eventlet.monkey_patch() conf = config.Config(conf_file=conf_file) daemon = remote.RemoteControlDaemon(None, conf) daemon.serve()\n\n    ### Response: Run the external control daemon.\n\n    :param conf_file: Name of the configuration file..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter and(final EmailFilter... emailFilters) { final SearchTerm[] searchTerms = new SearchTerm[emailFilters.length]; for (int i = 0; i < emailFilters.length; i++) { searchTerms[i] = emailFilters[i].searchTerm; } concat(new AndTerm(searchTerms)); return this; }\n\n    ### Response:", "ground_truth": "Defines AND group of filters.\n\n@param emailFilters array of {@link EmailFilter}s to AND.\n@return this", "predict": "Combines multiple email filters into a single regular expression filter by combining the search terms of each of the given email filters into a single regular expression filter."}, {"ID": 1766, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setRegistry(BridgeHeadTypeRegistry registry) { this.registry.set(registry); for (FactoryAccessor<?> accessor : accessors) { registry.injectInto(accessor); } }\n\n    ### Response: Sets the registry that maps types to bridge factories.\n@param registry The registry to use.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter or(final EmailFilter... emailFilters) { final SearchTerm[] searchTerms = new SearchTerm[emailFilters.length]; for (int i = 0; i < emailFilters.length; i++) { searchTerms[i] = emailFilters[i].searchTerm; } concat(new OrTerm(searchTerms)); return this; }\n\n    ### Response:", "ground_truth": "Defines OR group of filters.\n\n@param emailFilters array of {@link EmailFilter}s to OR.\n@return this", "predict": "Allows you to combine multiple email filters into a single regular expression filter by passing in an array of email filters or a comma-separated string of email filters to the or method of EmailFilter. The or method of EmailFilter uses the regular expression library of Apache commons to combine the given email filters into a single regular expression filter which is used to filter messages in the email filter queue of your choice."}, {"ID": 1767, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setValue($values): void { foreach ($this->controls as $control) { $control->setValuesBase($values); } }\n\n    ### Response: Sets the values of the form controls of this complex control. The values of form controls for which no explicit\nvalue is set are set to null.\n\n@param mixed $values The values as a nested array.\n\n@since 1.0.0\n@api.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter not(final EmailFilter emailFilter) { final SearchTerm searchTerm = new NotTerm(emailFilter.searchTerm); concat(searchTerm); return this; }\n\n    ### Response:", "ground_truth": "Appends single filter as NOT.\n\n@param emailFilter {@link EmailFilter} to append.\n@return this", "predict": "The function generates a SearchTerm from the given EmailFilter such that the SearchTerm results in a regular\nexpression that would produce the same results as the given EmailFilter when used in a filter operator. The function\nconcat() may be used to combine the regular expressions of multiple SearchTerm objects to form a single regular\nexpression string"}, {"ID": 1768, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def match(pattern, text, no_escape=False, path_name=True, wild_star=True, period=False, case_fold=False): u\"\"\" Matches text against the supplied wildmatch pattern. To get git's behavior, use the `wild_star` flag. Note that the EXTMATCH (ksh extended glob patterns) option is not available :type pattern: text_type :param pattern: A wildmatch pattern :type text: text_type :param text: The text to match :type no_escape: bool :param no_escape: Disable backslash escaping :type path_name: bool :param path_name: Separator (slash) in text cannot be matched by an asterisk, question-mark nor bracket expression in pattern (only a literal). :type wild_star: bool :param wild_star: A True value forces the `path_name` flag to True. This allows the double-asterisk `**` to match any (0 to many) number of directories :type period: bool :param period: A leading period in text cannot be matched by an asterisk, question-mark nor bracket expression in pattern (only a literal). A period is \"leading\" if: - it is the first character of `text` OR - path_name (or wild_star) is True and the previous character is a slash :type case_fold: bool :param case_fold: Perform a case insensitive match (GNU Extension) :rtype: bool :return: Result of the match \"\"\" regex = translate(pattern, no_escape=no_escape, path_name=path_name, wild_star=wild_star, period=period, case_fold=case_fold, closed_regex=True) return regex.match(text) is not None\n\n    ### Response: u\"\"\"\n    Matches text against the supplied wildmatch pattern.\n\n    To get git's behavior, use the `wild_star` flag.\n\n    Note that the EXTMATCH (ksh extended glob patterns) option is not available\n\n    :type pattern: text_type\n    :param pattern: A wildmatch pattern\n    :type text: text_type\n    :param text: The text to match\n    :type no_escape: bool\n    :param no_escape: Disable backslash escaping\n    :type path_name: bool\n    :param path_name: Separator (slash) in text cannot be matched by an asterisk, question-mark nor\n                      bracket expression in pattern (only a literal).\n    :type wild_star: bool\n    :param wild_star: A True value forces the `path_name` flag to True. This allows the\n                      double-asterisk `**` to match any (0 to many) number of directories\n    :type period: bool\n    :param period: A leading period in text cannot be matched by an asterisk, question-mark nor\n                   bracket expression in pattern (only a literal). A period is \"leading\" if:\n                   - it is the first character of `text`\n                   OR\n                   - path_name (or wild_star) is True and the previous character is a slash\n    :type case_fold: bool\n    :param case_fold: Perform a case insensitive match (GNU Extension)\n    :rtype: bool\n    :return: Result of the match.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void concat(SearchTerm searchTerm) { if (nextIsNot) { searchTerm = new NotTerm(searchTerm); nextIsNot = false; } if (operatorAnd) { and(searchTerm); } else { or(searchTerm); } }\n\n    ### Response:", "ground_truth": "Concatenates last search term with new one.\n\n@param searchTerm searchTerm {@link SearchTerm} concatenate.\n@see #and(SearchTerm)\n@see #or(SearchTerm)", "predict": "\n    // This method appends the given search term to the search results. It first\n    // sets the flag to indicate that the operator and operatorAnd are not set\n    // and checks for the operatorNot setting the operator and operatorAnd to the\n    // given operator and operatorAnd respectively\n    // It appends the given search term to the search results and sets the\n    // operatorNot to true to indicate that the operator and operatorAnd have been\n    // set\n    // It may repeat this procedure for other given search terms until there\n    // is no search term left to add to the search results"}, {"ID": 1769, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function isWritable() { if (is_resource($this->stream) === true) { $metadata = $this->getMetadata(); return Validator::isWritable($metadata); } return false; }\n\n    ### Response: Returns whether or not the stream is writable.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String encode(final byte[] bytes) { StringBuilder base32 = new StringBuilder((bytes.length * 8 + 4) / 5); int currByte, digit, i = 0; while (i < bytes.length) { // STEP 0; insert new 5 bits, leave 3 bits currByte = bytes[i++] & 255; base32.append(CHARS[currByte >> 3]); digit = (currByte & 7) << 2; if (i >= bytes.length) { base32.append(CHARS[digit]); break; } // STEP 3: insert 2 new bits, then 5 bits, leave 1 bit currByte = bytes[i++] & 255; base32.append(CHARS[digit | (currByte >> 6)]); base32.append(CHARS[(currByte >> 1) & 31]); digit = (currByte & 1) << 4; if (i >= bytes.length) { base32.append(CHARS[digit]); break; } // STEP 1: insert 4 new bits, leave 4 bit currByte = bytes[i++] & 255; base32.append(CHARS[digit | (currByte >> 4)]); digit = (currByte & 15) << 1; if (i >= bytes.length) { base32.append(CHARS[digit]); break; } // STEP 4: insert 1 new bit, then 5 bits, leave 2 bits currByte = bytes[i++] & 255; base32.append(CHARS[digit | (currByte >> 7)]); base32.append(CHARS[(currByte >> 2) & 31]); digit = (currByte & 3) << 3; if (i >= bytes.length) { base32.append(CHARS[digit]); break; } // STEP 2: insert 3 new bits, then 5 bits, leave 0 bit currByte = bytes[i++] & 255; base32.append(CHARS[digit | (currByte >> 5)]); base32.append(CHARS[currByte & 31]); } return base32.toString(); }\n\n    ### Response:", "ground_truth": "Encode an array of binary bytes into a Base32 string.", "predict": "The function generates Base32-encoded string from given bytes."}, {"ID": 1770, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def gender(self, iso5218: bool = False, symbol: bool = False) -> Union[str, int]: \"\"\"Get a random gender. Get a random title of gender, code for the representation of human sexes is an international standard that defines a representation of human sexes through a language-neutral single-digit code or symbol of gender. :param iso5218: Codes for the representation of human sexes is an international standard (0 - not known, 1 - male, 2 - female, 9 - not applicable). :param symbol: Symbol of gender. :return: Title of gender. :Example: Male \"\"\" if iso5218: return self.random.choice([0, 1, 2, 9]) if symbol: return self.random.choice(GENDER_SYMBOLS) return self.random.choice(self._data['gender'])\n\n    ### Response: Get a random gender.\n\n        Get a random title of gender, code for the representation\n        of human sexes is an international standard that defines a\n        representation of human sexes through a language-neutral single-digit\n        code or symbol of gender.\n\n        :param iso5218:\n            Codes for the representation of human sexes is an international\n            standard (0 - not known, 1 - male, 2 - female, 9 - not applicable).\n        :param symbol: Symbol of gender.\n        :return: Title of gender.\n\n        :Example:\n            Male.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected byte[] convertValueToArray(final Object value) { if (value instanceof Blob) { final Blob blob = (Blob) value; try { final long length = blob.length(); if (length > Integer.MAX_VALUE) { throw new TypeConversionException(\"Blob is too big.\"); } return blob.getBytes(1, (int) length); } catch (SQLException sex) { throw new TypeConversionException(value, sex); } } if (value instanceof File) { try { return FileUtil.readBytes((File) value); } catch (IOException ioex) { throw new TypeConversionException(value, ioex); } } if (value instanceof Collection) { final Collection collection = (Collection) value; final byte[] target = new byte[collection.size()]; int i = 0; for (final Object element : collection) { target[i] = convertType(element); i++; } return target; } if (value instanceof Iterable) { final Iterable iterable = (Iterable) value; final ArrayList<Byte> byteArrayList = new ArrayList<>(); for (final Object element : iterable) { final byte convertedValue = convertType(element); byteArrayList.add(Byte.valueOf(convertedValue)); } final byte[] array = new byte[byteArrayList.size()]; for (int i = 0; i < byteArrayList.size(); i++) { final Byte b = byteArrayList.get(i); array[i] = b.byteValue(); } return array; } if (value instanceof CharSequence) { final String[] strings = StringUtil.splitc(value.toString(), ArrayConverter.NUMBER_DELIMITERS); return convertArrayToArray(strings); } // everything else: return convertToSingleElementArray(value); }\n\n    ### Response:", "ground_truth": "Converts non-array value to array. Detects various\ntypes and collections, iterates them to make conversion\nand to create target array.", "predict": "\n    Get values from objects of type Blob, Collection, Iterable, and CharSequence and convert to corresponding bytes arrays or vice versa"}, {"ID": 1771, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (ssec) CreateMetadata(metadata map[string]string, sealedKey SealedKey) map[string]string { if sealedKey.Algorithm != SealAlgorithm { logger.CriticalIf(context.Background(), fmt.Errorf(\"The seal algorithm '%s' is invalid for SSE-C\", sealedKey.Algorithm)) } if metadata == nil { metadata = map[string]string{} } metadata[SSESealAlgorithm] = SealAlgorithm metadata[SSEIV] = base64.StdEncoding.EncodeToString(sealedKey.IV[:]) metadata[SSECSealedKey] = base64.StdEncoding.EncodeToString(sealedKey.Key[:]) return metadata }\n\n    ### Response: // CreateMetadata encodes the sealed key into the metadata and returns the modified metadata.\n// It allocates a new metadata map if metadata is nil..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected boolean isGzipEligible(final HttpServletRequest request) { // request parameter name if (requestParameterName.length() != 0) { String forceGzipString = request.getParameter(requestParameterName); if (forceGzipString != null) { return Converter.get().toBooleanValue(forceGzipString, false); } } // extract uri String uri = request.getRequestURI(); if (uri == null) { return false; } uri = uri.toLowerCase(); boolean result = false; // check uri if (matches == null) { // match == * if (extensions == null) { // extensions == * return true; } // extension String extension = FileNameUtil.getExtension(uri); if (extension.length() > 0) { extension = extension.toLowerCase(); if (StringUtil.equalsOne(extension, extensions) != -1) { result = true; } } } else { if (wildcards) { result = Wildcard.matchPathOne(uri, matches) != -1; } else { for (String match : matches) { if (uri.contains(match)) { result = true; break; } } } } if ((result) && (excludes != null)) { if (wildcards) { if (Wildcard.matchPathOne(uri, excludes) != -1) { result = false; } } else { for (String exclude : excludes) { if (uri.contains(exclude)) { result = false; // excludes founded break; } } } } return result; }\n\n    ### Response:", "ground_truth": "Determine if request is eligible for GZipping.", "predict": "// This method checks if gzip compression should be used for the given HTTP request. It looks for the following parameters in the request to decide whether gzip compression should be used or not: `forceGzipString` (which can be given explicitly by the client to force gzip compression), `requestParameterName` (which contains the name of the parameter which contains the gzip extension to be used in the response; its value must be given explicitly by the client to enable gzip compression), and `matches` and `excludes` (which contain patterns of paths of the request and of the given resources to be served to the client to determine if gzip compression should be used for these paths or not and thus enable/disable gzip compression for these paths and resources given by the client and server respectively.). It looks for these parameters in the given HTTP request to decide if gzip compression should be used and returns true or false accordingly."}, {"ID": 1772, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getFileArray() { if (!$this->FileArray) { $user = $this->getConfig('user'); is_true_or_fail(is_positive($user), __d('me_cms', 'You have to set a valid user id'), InvalidArgumentException::class); $this->FileArray = new FileArray(LOGIN_RECORDS . 'user_' . $user . '.log'); } return $this->FileArray; }\n\n    ### Response: Gets the `FileArray` instance\n@return \\Tools\\FileArray\n@throws InvalidArgumentException\n@uses $FileArray.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<Violation> validate(final Object target) { return validate(ValidationContext.resolveFor(target.getClass()), target); }\n\n    ### Response:", "ground_truth": "Validate object using context from the annotations.", "predict": "Validates the given target and its annotations to see if there any validation violations\n\n// Uses the ValidationContext given to correctly resolve the target object and annotations\n\n// Returns a list of violations found during the validation\n\n// If there are no violations, returns an empty list"}, {"ID": 1773, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (provider *SoundcloudProvider) TripperFactory() common.TripperFactory { if provider.tripperFactory == nil { provider.tripperFactory = new(oauth2.OAuth2TripperFactory) } return provider.tripperFactory }\n\n    ### Response: // TipperFactory gets an OAuth2TripperFactory.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<Violation> validate(final ValidationContext ctx, final Object target, final String targetName) { for (Map.Entry<String, List<Check>> entry : ctx.map.entrySet()) { String name = entry.getKey(); Object value = BeanUtil.declaredSilent.getProperty(target, name); String valueName = targetName != null ? (targetName + '.' + name) : name; // move up ValidationConstraintContext vcc = new ValidationConstraintContext(this, target, valueName); for (Check check : entry.getValue()) { String[] checkProfiles = check.getProfiles(); if (!matchProfiles(checkProfiles)) { continue; } if (check.getSeverity() < severity) { continue; } ValidationConstraint constraint = check.getConstraint(); if (!constraint.isValid(vcc, value)) { addViolation(new Violation(valueName, target, value, check)); } } } return getViolations(); }\n\n    ### Response:", "ground_truth": "Performs validation of provided validation context and appends violations.", "predict": "// Validates the given target and its values against the given profiles of the given constraints of this validator."}, {"ID": 1774, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function fetch($template, $data = null) { $layout = $this->getLayout($data); $result = $this->render($template, $data); if (is_string($layout)) { $result = $this->renderLayout($layout, $result, $data); } return $result; }\n\n    ### Response: Override the default fetch mechanism to render a layout if set.\n\n@param string $template Path to template file relative to templates directory\n@param array  $data     Any additonal data to be passed to the template.\n@return string          The fully rendered view as a string..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void useProfile(final String profile) { if (profile == null) { return; } if (this.enabledProfiles == null) { this.enabledProfiles = new HashSet<>(); } this.enabledProfiles.add(profile); }\n\n    ### Response:", "ground_truth": "Enables single profile.", "predict": "Override the default behavior of fetch mechanism to enable profiles"}, {"ID": 1775, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public SearchQuery parseSearchQueryV1() { final String json = query.getContent(); if (json == null || json.isEmpty()) { throw new BadRequestException(HttpResponseStatus.BAD_REQUEST, \"Missing message content\", \"Supply valid JSON formatted data in the body of your request\"); } return JSON.parseToObject(json, SearchQuery.class); }\n\n    ### Response: Parses a SearchQuery request\n@return The parsed search query\n@throws JSONException if parsing failed\n@throws BadRequestException if the content was missing or parsing failed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void useProfiles(final String... enabledProfiles) { if (enabledProfiles == null) { return; } if (this.enabledProfiles == null) { this.enabledProfiles = new HashSet<>(); } Collections.addAll(this.enabledProfiles, enabledProfiles); }\n\n    ### Response:", "ground_truth": "Enables list of profiles.", "predict": "Allows profiles to be added or removed\n@param profiles The profiles to enable or disable\n@return The current profiles"}, {"ID": 1776, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setChangeType($var) { GPBUtil::checkEnum($var, \\Google\\Cloud\\Firestore\\Admin\\V1\\FieldOperationMetadata_IndexConfigDelta_ChangeType::class); $this->change_type = $var; return $this; }\n\n    ### Response: Specifies how the index is changing.\n\nGenerated from protobuf field .google.firestore.admin.v1.FieldOperationMetadata.IndexConfigDelta.ChangeType change_type = 1;\n@param int $var\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected boolean matchProfiles(final String[] checkProfiles) { // test for all profiles if ((checkProfiles != null) && (checkProfiles.length == 1) && checkProfiles[0].equals(ALL_PROFILES)) { return true; } if (enabledProfiles == null || enabledProfiles.isEmpty()) { if (validateAllProfilesByDefault) { return true; // all profiles are considered as enabled } // only default profile is enabled if ((checkProfiles == null) || (checkProfiles.length == 0)) { return true; } for (String profile : checkProfiles) { if (StringUtil.isEmpty(profile)) { return true; // default profile } if (profile.equals(DEFAULT_PROFILE)) { return true; } } return false; } // there are enabled profiles if ((checkProfiles == null) || (checkProfiles.length == 0)) { return enabledProfiles.contains(DEFAULT_PROFILE); } boolean result = false; for (String profile : checkProfiles) { boolean b = true; boolean must = false; if (StringUtil.isEmpty(profile)) { profile = DEFAULT_PROFILE; } else if (profile.charAt(0) == '-') { profile = profile.substring(1); b = false; } else if (profile.charAt(0) == '+') { profile = profile.substring(1); must = true; } if (enabledProfiles.contains(profile)) { if (!b) { return false; } result = true; } else { if (must) { return false; } } } return result; }\n\n    ### Response:", "ground_truth": "Determine if any of checks profiles is among enabled profiles.", "predict": "Match profiles string pattern of profiles given and enable profiles given to see if profiles match and enable profiles matching profiles string pattern to see if profiles match and enable profiles matching profiles string pattern"}, {"ID": 1777, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def authenticate(self): \"\"\"Send login request and update User instance, login headers, and token expiration\"\"\" # Temporarily remove auth from Swimlane session for auth request to avoid recursive loop during login request self._swimlane._session.auth = None resp = self._swimlane.request( 'post', 'user/login', json={ 'userName': self._username, 'password': self._password }, ) self._swimlane._session.auth = self # Get JWT from response content json_content = resp.json() token = json_content.pop('token', None) # Grab token expiration token_data = jwt.decode(token, verify=False) token_expiration = pendulum.from_timestamp(token_data['exp']) headers = { 'Authorization': 'Bearer {}'.format(token) } # Create User instance for authenticating user from login response data user = User(self._swimlane, _user_raw_from_login_content(json_content)) self._login_headers = headers self.user = user self._token_expiration = token_expiration\n\n    ### Response: Send login request and update User instance, login headers, and token expiration.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Object parseRequestBody(final String body, final Class targetType) { return JsonParser.create().parse(body, targetType); }\n\n    ### Response:", "ground_truth": "Parses request body into the target type.", "predict": "Parses request body in given format and returns corresponding Object"}, {"ID": 1778, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function allowsChild(TemplateInspector $child) { // Sometimes, a template can technically be allowed as a child but denied as a descendant if (!$this->allowsDescendant($child)) { return false; } foreach ($child->rootBitfields as $rootBitfield) { foreach ($this->allowChildBitfields as $allowChildBitfield) { if (!self::match($rootBitfield, $allowChildBitfield)) { return false; } } } return ($this->allowsText || !$child->hasRootText); }\n\n    ### Response: Return whether this template allows a given child\n\n@param  TemplateInspector $child\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public long toMilliseconds() { double then = (fraction - JD_1970.fraction) * MILLIS_IN_DAY; then += (integer - JD_1970.integer) * MILLIS_IN_DAY; then += then > 0 ? 1.0e-6 : -1.0e-6; return (long) then; }\n\n    ### Response:", "ground_truth": "Converts to milliseconds.", "predict": "Calculate millisecods of given date\n\nlong time;\ntime = toMilliseconds(date);\nreturn time;"}, {"ID": 1779, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def collect_ansible_classes(): \"\"\"Run playbook and collect classes of ansible that are run.\"\"\" def trace_calls(frame, event, arg): # pylint: disable=W0613 \"\"\"Trace function calls to collect ansible classes. Trace functions and check if they have self as an arg. If so, get their class if the class belongs to ansible. \"\"\" if event != 'call': return try: _locals = inspect.getargvalues(frame).locals if 'self' not in _locals: return _class = _locals['self'].__class__ _class_repr = repr(_class) if 'ansible' not in _class_repr: return ANSIBLE_CLASSES[_class] = True except (AttributeError, TypeError): pass print \"Gathering classes\" sys.settrace(trace_calls) main()\n\n    ### Response: Run playbook and collect classes of ansible that are run..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public JulianDate add(final JulianDate jds) { int i = this.integer + jds.integer; double f = this.fraction + jds.fraction; return new JulianDate(i, f); }\n\n    ### Response:", "ground_truth": "Adds a JD to current instance.", "predict": "Add two JulianDate objects to produce a sum of the corresponding date and time values of each object and returns the result in JulianDate objects. The integer and fraction values of the objects being added must be the same for the calculation to produce a valid JulianDate for the sum of the objects being added."}, {"ID": 1780, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function changeIdentity() { // Get the group and user ids to set for the daemon. $uid = (int) $this->get('application_uid', 0); $gid = (int) $this->get('application_gid', 0); // Get the application process id file path. $file = $this->get('application_pid_file'); // Change the user id for the process id file if necessary. if ($uid && (fileowner($file) != $uid) && (!@ chown($file, $uid))) { $this->getLogger()->error('Unable to change user ownership of the process id file.'); return false; } // Change the group id for the process id file if necessary. if ($gid && (filegroup($file) != $gid) && (!@ chgrp($file, $gid))) { $this->getLogger()->error('Unable to change group ownership of the process id file.'); return false; } // Set the correct home directory for the process. if ($uid && ($info = posix_getpwuid($uid)) && is_dir($info['dir'])) { system('export HOME=\"' . $info['dir'] . '\"'); } // Change the user id for the process necessary. if ($uid && (posix_getuid() != $uid) && (!@ posix_setuid($uid))) { $this->getLogger()->error('Unable to change user ownership of the proccess.'); return false; } // Change the group id for the process necessary. if ($gid && (posix_getgid() != $gid) && (!@ posix_setgid($gid))) { $this->getLogger()->error('Unable to change group ownership of the proccess.'); return false; } // Get the user and group information based on uid and gid. $user = posix_getpwuid($uid); $group = posix_getgrgid($gid); $this->getLogger()->info('Changed daemon identity to ' . $user['name'] . ':' . $group['name']); return true; }\n\n    ### Response: Method to change the identity of the daemon process and resources.\n\n@return  boolean  True if identity successfully changed\n\n@since   1.0\n@see     posix_setuid().\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public JulianDate sub(final JulianDate jds) { int i = this.integer - jds.integer; double f = this.fraction -jds.fraction; return new JulianDate(i, f); }\n\n    ### Response:", "ground_truth": "Subtracts a JD from current instance.", "predict": "Subtract two JulianDate objects to produce another JulianDate object with the difference subtracted in the corresponding fields of the objects being subtracted."}, {"ID": 1781, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_hours_data(self, entries, date_headers): \"\"\"Sum billable and non-billable hours across all users.\"\"\" project_totals = get_project_totals( entries, date_headers, total_column=False) if entries else [] data_map = {} for rows, totals in project_totals: for user, user_id, periods in rows: for period in periods: day = period['day'] if day not in data_map: data_map[day] = {'billable': 0, 'nonbillable': 0} data_map[day]['billable'] += period['billable'] data_map[day]['nonbillable'] += period['nonbillable'] return data_map\n\n    ### Response: Sum billable and non-billable hours across all users..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void set(final int i, double f) { integer = i; int fi = (int) f; f -= fi; integer += fi; if (f < 0) { f += 1; integer--; } this.fraction = f; }\n\n    ### Response:", "ground_truth": "Sets integer and fractional part with normalization.\nNormalization means that if double is out of range,\nvalues will be correctly fixed.", "predict": "The setter method sets an int parameter to the double parameter and subtracts from the int parameter to add it back to the int parameter to get the corrected double parameter which is assigned to this method's fraction parameter."}, {"ID": 1782, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def label_to_latex(text): # pylint: disable=anomalous-backslash-in-string r\"\"\"Convert text into a latex-passable representation. This method just escapes the following reserved LaTeX characters: % \\ _ ~ &, whilst trying to avoid doubly-escaping already escaped characters Parameters ---------- text : `str` input text to convert Returns ------- tex : `str` a modified version of the input text with all unescaped reserved latex characters escaped Examples -------- >>> from gwpy.plot.tex import label_to_latex >>> label_to_latex('normal text') 'normal text' >>> label_to_latex('$1 + 2 = 3$') '$1 + 2 = 3$' >>> label_to_latex('H1:ABC-DEF_GHI') 'H1:ABC-DEF\\\\_GHI' >>> label_to_latex('H1:ABC-DEF\\_GHI') 'H1:ABC-DEF\\\\_GHI' \"\"\" if text is None: return '' out = [] x = None # loop over matches in reverse order and replace for m in re_latex_control.finditer(text): a, b = m.span() char = m.group()[0] out.append(text[x:a]) out.append(r'\\%s' % char) x = b if not x: # no match return text # append prefix and return joined components out.append(text[b:]) return ''.join(out)\n\n    ### Response: r\"\"\"Convert text into a latex-passable representation.\n\n    This method just escapes the following reserved LaTeX characters:\n    % \\ _ ~ &, whilst trying to avoid doubly-escaping already escaped\n    characters\n\n    Parameters\n    ----------\n    text : `str`\n        input text to convert\n\n    Returns\n    -------\n    tex : `str`\n        a modified version of the input text with all unescaped reserved\n        latex characters escaped\n\n    Examples\n    --------\n    >>> from gwpy.plot.tex import label_to_latex\n    >>> label_to_latex('normal text')\n    'normal text'\n    >>> label_to_latex('$1 + 2 = 3$')\n    '$1 + 2 = 3$'\n    >>> label_to_latex('H1:ABC-DEF_GHI')\n    'H1:ABC-DEF\\\\_GHI'\n    >>> label_to_latex('H1:ABC-DEF\\_GHI')\n    'H1:ABC-DEF\\\\_GHI'.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected void initialize(final char[] input) { super.initialize(input); this.tag = new ParsedTag(); this.doctype = new ParsedDoctype(); this.text = new char[1024]; this.textLen = 0; this.parsingTime = -1; }\n\n    ### Response:", "ground_truth": "Initializes parser.", "predict": "\n    /* Override protected initialize(char[] input)\n    */\n    /* Super initialize() sets this object to its default values\n    */\n    /* This object has fields for holding its document token, its document type, its document text, its parsing time, and its document length\n    */\n    /* It reads its document token and its document type from the input string\n    */\n    /* It processes its document tokens and its document text to produce its document object\n    */\n    /* It resets its parsing time to -1 since its document object may be modified during parsing\n    */"}, {"ID": 1783, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (v *TimeIsPresent) IsValid(errors *validate.Errors) { t := time.Time{} if v.Field.UnixNano() != t.UnixNano() { return } if len(v.Message) > 0 { errors.Add(GenerateKey(v.Name), v.Message) return } errors.Add(GenerateKey(v.Name), fmt.Sprintf(\"%s can not be blank.\", v.Name)) }\n\n    ### Response: // IsValid adds an error if the field is not a valid time..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void emitComment(final int from, final int to) { if (config.enableConditionalComments) { // CC: downlevel-hidden starting if (match(CC_IF, from)) { int endBracketNdx = find(']', from + 3, to); CharSequence expression = charSequence(from + 1, endBracketNdx); ndx = endBracketNdx + 1; char c = input[ndx]; if (c != '>') { errorInvalidToken(); } visitor.condComment(expression, true, true, false); state = DATA_STATE; return; } if (to > CC_ENDIF2.length && match(CC_ENDIF2, to - CC_ENDIF2.length)) { // CC: downlevel-hidden ending visitor.condComment(_ENDIF, false, true, true); state = DATA_STATE; return; } } CharSequence comment = charSequence(from, to); visitor.comment(comment); commentStart = -1; }\n\n    ### Response:", "ground_truth": "Emits a comment. Also checks for conditional comments!", "predict": "// EmitComment generates the appropriate conditional comment for the given Code"}, {"ID": 1784, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_record(self, recid, read_cache=True): \"\"\" Returns the record with given recid \"\"\" if recid in self.cached_records or not read_cache: return self.cached_records[recid] else: return self.search(p=\"recid:\" + str(recid))\n\n    ### Response: Returns the record with given recid.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void _error(String message) { if (config.calculatePosition) { Position currentPosition = position(ndx); message = message .concat(StringPool.SPACE) .concat(currentPosition.toString()); } else { message = message .concat(\" [@\") .concat(Integer.toString(ndx)) .concat(StringPool.RIGHT_SQ_BRACKET); } visitor.error(message); }\n\n    ### Response:", "ground_truth": "Prepares error message and reports it to the visitor.", "predict": "Errors the token with the given message and positions the token appropriately in the document"}, {"ID": 1785, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getSubnetArrayReport() { return [ 'ip_address_with_network_size' => $this->getIPAddress() . '/' . $this->getNetworkSize(), 'ip_address' => [ 'quads' => $this->getIPAddress(), 'hex' => $this->getIPAddressHex(), 'binary' => $this->getIPAddressBinary() ], 'subnet_mask' => [ 'quads' => $this->getSubnetMask(), 'hex' => $this->getSubnetMaskHex(), 'binary' => $this->getSubnetMaskBinary() ], 'network_portion' => [ 'quads' => $this->getNetworkPortion(), 'hex' => $this->getNetworkPortionHex(), 'binary' => $this->getNetworkPortionBinary() ], 'host_portion' => [ 'quads' => $this->getHostPortion(), 'hex' => $this->getHostPortionHex(), 'binary' => $this->getHostPortionBinary() ], 'network_size' => $this->getNetworkSize(), 'number_of_ip_addresses' => $this->getNumberIPAddresses(), 'number_of_addressable_hosts' => $this->getNumberAddressableHosts(), 'ip_address_range' => $this->getIPAddressRange(), 'broadcast_address' => $this->getBroadcastAddress(), 'min_host' => $this->getMinHost(), 'max_host' => $this->getMaxHost(), ]; }\n\n    ### Response: Get subnet calculations as an associated array\nContains IP address, subnet mask, network portion and host portion.\nEach of the above is provided in dotted quads, hexedecimal, and binary notation.\nAlso contains number of IP addresses and number of addressable hosts, IP address range, and broadcast address.\n\n@return array of subnet calculations..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String createHash(final char[] password) { // Generate a random salt SecureRandom random = new SecureRandom(); byte[] salt = new byte[saltBytes]; random.nextBytes(salt); // Hash the password byte[] hash = pbkdf2(password, salt, pbkdf2Iterations, hashBytes); // format iterations:salt:hash return pbkdf2Iterations + \":\" + StringUtil.toHexString(salt) + \":\" + StringUtil.toHexString(hash); }\n\n    ### Response:", "ground_truth": "Returns a salted PBKDF2 hash of the password.\n\n@param password the password to hash\n@return a salted PBKDF2 hash of the password", "predict": "Generate salt and hash of given password"}, {"ID": 1786, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (es *etcdEventStream) Next(stop chan struct{}) chan pkg.Event { evchan := make(chan pkg.Event) go func() { for { select { case <-stop: return default: } res := watch(es.kAPI, path.Join(es.rootPrefix, jobPrefix), stop) if ev, ok := parse(res, es.rootPrefix); ok { evchan <- ev return } } }() return evchan }\n\n    ### Response: // Next returns a channel which will emit an Event as soon as one of interest occurs.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static byte[] pbkdf2(final char[] password, final byte[] salt, final int iterations, final int bytes) { PBEKeySpec spec = new PBEKeySpec(password, salt, iterations, bytes * 8); try { SecretKeyFactory skf = SecretKeyFactory.getInstance(PBKDF2_ALGORITHM); return skf.generateSecret(spec).getEncoded(); } catch (NoSuchAlgorithmException ignore) { return null; } catch (InvalidKeySpecException e) { throw new IllegalArgumentException(e); } }\n\n    ### Response:", "ground_truth": "Computes the PBKDF2 hash of a password.\n\n@param password the password to hash.\n@param salt the salt\n@param iterations the iteration count (slowness factor)\n@param bytes the length of the hash to compute in bytes\n@return the PBDKF2 hash of the password", "predict": "// This method generates a secret key from specified parameters\n    // and stores it in the given SecretKeyFactory"}, {"ID": 1787, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function computeRebuildVersion($installPath, $branch) { $version = ''; $branchPreg = preg_quote($branch); $process = new Process(\"cd $installPath; git describe --tags\"); $process->run(); if ($process->isSuccessful()) { $lastTag = strtok($process->getOutput(), \"\\n\"); // Make sure the tag starts as Drupal formatted (for eg. // 7.x-1.0-alpha1) and if we are on a proper branch (ie. not master) // then it's on that branch. if (preg_match('/^(?<drupalversion>'.$branchPreg.'\\.\\d+(?:-[^-]+)?)(?<gitextra>-(?<numberofcommits>\\d+-)g[0-9a-f]{7})?$/', $lastTag, $matches)) { if (isset($matches['gitextra'])) { // If we found additional git metadata (in particular, number of commits) // then use that info to build the version string. $version = $matches['drupalversion'].'+'.$matches['numberofcommits'].'dev'; } else { // Otherwise, the branch tip is pointing to the same commit as the // last tag on the branch, in which case we use the prior tag and // add '+0-dev' to indicate we're still on a -dev branch. $version = $lastTag.'+0-dev'; } } } return $version; }\n\n    ### Response: Helper function to compute the rebulid version string for a project.\n\nThis does some magic in Git to find the latest release tag along\nthe branch we're packaging from, count the number of commits since\nthen, and use that to construct this fancy alternate version string\nwhich is useful for the version-specific dependency support in Drupal\n7 and higher.\n\nNOTE: A similar function lives in git_deploy and in the drupal.org\npackaging script (see DrupalorgProjectPackageRelease.class.php inside\ndrupalorg/drupalorg_project/plugins/release_packager). Any changes to the\nactual logic in here should probably be reflected in the other places.\n\n@see drush_pm_git_drupalorg_compute_rebuild_version().\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static byte[] fromHex(final String hex) { final byte[] binary = new byte[hex.length() / 2]; for (int i = 0; i < binary.length; i++) { binary[i] = (byte) Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16); } return binary; }\n\n    ### Response:", "ground_truth": "Converts a string of hexadecimal characters into a byte array.\n\n@param hex the hex string\n@return the hex string decoded into a byte array", "predict": "Function to translate from hex to binary string"}, {"ID": 1788, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void manageDefaultStyleSheet(final Scene scene) { if (scene.getStylesheets().isEmpty()) { // No style sheet has been added to the scene LOGGER.log(NO_CSS_DEFINED); addCSS(scene, JRebirthStyles.DEFAULT); } }\n\n    ### Response: Attach default CSS file if none have been previously attached.\n\n@param scene the scene to check.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ProviderDefinition[] resolveProviderDefinitions(final Class type, final String name) { return providerResolver.resolve(type, name); }\n\n    ### Response:", "ground_truth": "Resolves provider definition defined in a bean.", "predict": "Resolves an instance of the given provider for the given class and name."}, {"ID": 1789, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static appfwprofile_xmlxss_binding[] get(nitro_service service, String name) throws Exception{ appfwprofile_xmlxss_binding obj = new appfwprofile_xmlxss_binding(); obj.set_name(name); appfwprofile_xmlxss_binding response[] = (appfwprofile_xmlxss_binding[]) obj.get_resources(service); return response; }\n\n    ### Response: Use this API to fetch appfwprofile_xmlxss_binding resources of given name ..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailAttachmentBuilder name(final String name) { if (name != null && !name.trim().isEmpty()) { this.name = name; } return this; }\n\n    ### Response:", "ground_truth": "Sets file name.\n\n@param name File name to set.\n@return this", "predict": "Allows you to associate an arbitrary string to an EmailAttachment resource ..\n\n    "}, {"ID": 1790, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerJob(final ExecutionGraph executionGraph, final boolean profilingAvailable, final long submissionTimestamp) { final Iterator<ExecutionVertex> it = new ExecutionGraphIterator(executionGraph, true); while (it.hasNext()) { final ExecutionVertex vertex = it.next(); // Register the listener object which will pass state changes on to the collector vertex.registerExecutionListener(new ExecutionListenerWrapper(this, vertex)); // Register the listener object which will pass assignment changes on to the collector vertex.registerVertexAssignmentListener(new VertexAssignmentListenerWrapper(this, executionGraph.getJobID())); } // Register one job status listener wrapper for the entire job executionGraph.registerJobStatusListener(new JobStatusListenerWrapper(this, executionGraph.getJobName(), profilingAvailable, submissionTimestamp)); }\n\n    ### Response: Registers a job in form of its execution graph representation\nwith the job progress collector. The collector will subscribe\nto state changes of the individual subtasks. A separate\nderegistration is not necessary since the job progress collector\nperiodically discards outdated progress information.\n\n@param executionGraph\nthe execution graph representing the job\n@param profilingAvailable\nindicates if profiling data is available for this job\n@param submissionTimestamp\nthe submission time stamp of the job.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected EmailAttachmentBuilder setContentIdFromNameIfMissing() { if (contentId == null) { if (name != null) { contentId(FileNameUtil.getName(name)); } else { contentId(NO_NAME); } } return this; }\n\n    ### Response:", "ground_truth": "Set content ID if it is missing.\n\n@return this\n@see #contentId(String)", "predict": "If no contentId or name is given, generates a default ID from the name of the attachement"}, {"ID": 1791, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def add_ones(a): \"\"\"Adds a column of 1s at the end of the array\"\"\" arr = N.ones((a.shape[0],a.shape[1]+1)) arr[:,:-1] = a return arr\n\n    ### Response: Adds a column of 1s at the end of the array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String resolveContentType(final String contentType) { if (contentType != null) { return contentType; } if (name == null) { return MimeTypes.MIME_APPLICATION_OCTET_STREAM; } final String extension = FileNameUtil.getExtension(name); return MimeTypes.getMimeType(extension); }\n\n    ### Response:", "ground_truth": "Resolves content type from all data.\n\n@param contentType Content type if we know it. {@code null} is fine to use.\n@return content type", "predict": "Resolves the ContentType of a given ContentType string or of an empty string to its appropriate Value or its Default Value in case of an error."}, {"ID": 1792, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ItemStack getItemStackFromParameterString(String parameters) { // Split into parameters: List<String> params = new ArrayList<String>(Arrays.asList(parameters.split(\" \"))); Colour col = null; Variation var = null; // See if any parameters appear to be a colour: Iterator<String> it = params.iterator(); while (it.hasNext() && col == null) { col = MinecraftTypeHelper.attemptToGetAsColour(it.next()); if (col != null) it.remove(); // This parameter was a colour - we've parsed it, so remove it. } // See if any parameters appear to be a variant: it = params.iterator(); while (it.hasNext() && var == null) { var = MinecraftTypeHelper.attemptToGetAsVariant(it.next()); if (var != null) it.remove(); // This parameter was a variant - we've parsed it, so remove it. } // Hopefully we have at most one parameter left, which will be the type. if (params.size() == 0) return null; // Dunno what to do, really. String itemName = params.get(0); DrawItem di = new DrawItem(); di.setColour(col); di.setVariant(var); di.setType(itemName); return getItemStackFromDrawItem(di); }\n\n    ### Response: Take a string of parameters, delimited by spaces, and create an ItemStack from it.\n@param parameters the item name, variation, colour etc of the required item, separated by spaces.\n@return an Itemstack for these parameters, or null if unrecognised..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    int computeAttributesSize() { symbolTable.addConstantUtf8(Constants.MODULE); // 6 attribute header bytes, 6 bytes for name, flags and version, and 5 * 2 bytes for counts. int size = 22 + requires.length + exports.length + opens.length + usesIndex.length + provides.length; if (packageCount > 0) { symbolTable.addConstantUtf8(Constants.MODULE_PACKAGES); // 6 attribute header bytes, and 2 bytes for package_count. size += 8 + packageIndex.length; } if (mainClassIndex > 0) { symbolTable.addConstantUtf8(Constants.MODULE_MAIN_CLASS); // 6 attribute header bytes, and 2 bytes for main_class_index. size += 8; } return size; }\n\n    ### Response:", "ground_truth": "Returns the size of the Module, ModulePackages and ModuleMainClass attributes generated by this\nModuleWriter. Also add the names of these attributes in the constant pool.\n\n@return the size in bytes of the Module, ModulePackages and ModuleMainClass attributes.", "predict": "Computes the total number of bytes of an attributes section of an APK file, plus additional bytes of information such as packages, packages indices, and the name of the main class of the APK file."}, {"ID": 1793, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void writeMediumShortArray( short[] values ) { int byteSize = values.length * 2 + 2; this.addUnsignedShort( values.length ); doWriteShortArray( values, byteSize ); }\n\n    ### Response: Write medium short array.\n\n@param values the values.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void putAttributes(final ByteVector output) { // 6 bytes for name, flags and version, and 5 * 2 bytes for counts. int moduleAttributeLength = 16 + requires.length + exports.length + opens.length + usesIndex.length + provides.length; output .putShort(symbolTable.addConstantUtf8(Constants.MODULE)) .putInt(moduleAttributeLength) .putShort(moduleNameIndex) .putShort(moduleFlags) .putShort(moduleVersionIndex) .putShort(requiresCount) .putByteArray(requires.data, 0, requires.length) .putShort(exportsCount) .putByteArray(exports.data, 0, exports.length) .putShort(opensCount) .putByteArray(opens.data, 0, opens.length) .putShort(usesCount) .putByteArray(usesIndex.data, 0, usesIndex.length) .putShort(providesCount) .putByteArray(provides.data, 0, provides.length); if (packageCount > 0) { output .putShort(symbolTable.addConstantUtf8(Constants.MODULE_PACKAGES)) .putInt(2 + packageIndex.length) .putShort(packageCount) .putByteArray(packageIndex.data, 0, packageIndex.length); } if (mainClassIndex > 0) { output .putShort(symbolTable.addConstantUtf8(Constants.MODULE_MAIN_CLASS)) .putInt(2) .putShort(mainClassIndex); } }\n\n    ### Response:", "ground_truth": "Puts the Module, ModulePackages and ModuleMainClass attributes generated by this ModuleWriter\nin the given ByteVector.\n\n@param output where the attributes must be put.", "predict": "Generates method level comments for the above java code which implements writing attributes to ByteVector output stream. It reads in various attributes of the program, such as its name, its flags, its version, its requires, its exports, its opens, its uses, its packages, its mainClassIndex, and its source position of its source code, and writes these attributes to ByteVector output stream in 6, 1, and 5 bytes respectively of allocated space of ByteVector output stream. It uses various fields of ByteVector output stream to carry these attributes to ByteVector output stream. It reads in these fields of ByteVector output stream to carry these attributes to ByteVector output stream. It reads in these fields of ByteVector output stream to carry these attributes to ByteVector output stream. It reads in these fields of ByteVector output stream to carry these attributes to ByteVector output stream. It reads in these fields of ByteVector output stream to carry these attributes to ByteVector output stream. It reads in these fields of ByteVector output stream to carry these attributes to ByteVector output"}, {"ID": 1794, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def generate_cert(name): ''' Generate an icinga2 certificate and key on the client. name The domain name for which this certificate and key will be generated ''' ret = {'name': name, 'changes': {}, 'result': True, 'comment': ''} cert = \"{0}{1}.crt\".format(get_certs_path(), name) key = \"{0}{1}.key\".format(get_certs_path(), name) # Checking if execution is needed. if os.path.isfile(cert) and os.path.isfile(key): ret['comment'] = 'No execution needed. Cert: {0} and key: {1} already generated.'.format(cert, key) return ret if __opts__['test']: ret['result'] = None ret['comment'] = 'Certificate and key generation would be executed' return ret # Executing the command. cert_save = __salt__['icinga2.generate_cert'](name) if not cert_save['retcode']: ret['comment'] = \"Certificate and key generated\" ret['changes']['cert'] = \"Executed. Certificate saved: {0}\".format(cert) ret['changes']['key'] = \"Executed. Key saved: {0}\".format(key) return ret\n\n    ### Response: Generate an icinga2 certificate and key on the client.\n\n    name\n        The domain name for which this certificate and key will be generated.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String decode(final String source, final String encoding) { return decode(source, encoding, false); }\n\n    ### Response:", "ground_truth": "Decodes URL elements. This method may be used for all\nparts of URL, except for the query parts, since it does\nnot decode the '+' character.\n@see #decodeQuery(String, String)", "predict": "Decodes a given source string to its original form in the given encoding."}, {"ID": 1795, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def connectivity_array(self): \"\"\" Provides connectivity array. Returns: connectivity: An array of shape [atomi, atomj, imagej]. atomi is the index of the atom in the input structure. Since the second atom can be outside of the unit cell, it must be described by both an atom index and an image index. Array data is the solid angle of polygon between atomi and imagej of atomj \"\"\" # shape = [site, axis] cart_coords = np.array(self.s.cart_coords) # shape = [site, image, axis] all_sites = cart_coords[:, None, :] + self.cart_offsets[None, :, :] vt = Voronoi(all_sites.reshape((-1, 3))) n_images = all_sites.shape[1] cs = (len(self.s), len(self.s), len(self.cart_offsets)) connectivity = np.zeros(cs) vts = np.array(vt.vertices) for (ki, kj), v in vt.ridge_dict.items(): atomi = ki // n_images atomj = kj // n_images imagei = ki % n_images imagej = kj % n_images if imagei != n_images // 2 and imagej != n_images // 2: continue if imagei == n_images // 2: # atomi is in original cell val = solid_angle(vt.points[ki], vts[v]) connectivity[atomi, atomj, imagej] = val if imagej == n_images // 2: # atomj is in original cell val = solid_angle(vt.points[kj], vts[v]) connectivity[atomj, atomi, imagei] = val if -10.101 in vts[v]: warn('Found connectivity with infinite vertex. ' 'Cutoff is too low, and results may be ' 'incorrect') return connectivity\n\n    ### Response: Provides connectivity array.\n\n        Returns:\n            connectivity: An array of shape [atomi, atomj, imagej]. atomi is\n            the index of the atom in the input structure. Since the second\n            atom can be outside of the unit cell, it must be described\n            by both an atom index and an image index. Array data is the\n            solid angle of polygon between atomi and imagej of atomj.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String decodeQuery(final String source, final String encoding) { return decode(source, encoding, true); }\n\n    ### Response:", "ground_truth": "Decodes query name or value.", "predict": "Decodes a query string to its normal form."}, {"ID": 1796, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (u *URL) UnmarshalBinary(b []byte) error { uu, err := url.Parse(string(b)) if err != nil { return err } *u = URL(*uu) return nil }\n\n    ### Response: // UnmarshalBinary unmarshals a raw byte slice into an URL.\n//\n// If the byte slice is not an URLv6 address, io.ErrUnexpectedEOF is\n// returned..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override @SuppressWarnings(\"unchecked\") public void start() { initLogger(); if (!databaseEnabled) { log.info(\"DB not enabled.\"); return; } log.info(\"DB start ----------\"); final PetiteContainer petiteContainer = joyPetiteSupplier.get().getPetiteContainer(); // connection pool connectionProvider = createConnectionProviderIfNotSupplied(); petiteContainer.addBean(beanNamePrefix() + \"pool\", connectionProvider); if (connectionProvider instanceof CoreConnectionPool) { final CoreConnectionPool pool = (CoreConnectionPool) connectionProvider; if (pool.getDriver() == null) { databaseEnabled = false; log.warn(\"DB configuration not set (\" + beanNamePrefix() + \"pool.*). DB will be disabled.\"); return; } } connectionProvider.init(); checkConnectionProvider(); // transactions manager jtxManager = createJtxTransactionManager(connectionProvider); jtxManager.setValidateExistingTransaction(true); final AnnotationTxAdviceManager annTxAdviceManager = new AnnotationTxAdviceManager(new LeanJtxWorker(jtxManager), jtxScopePattern); AnnotationTxAdviceSupport.manager = annTxAdviceManager; // create proxy joyProxettaSupplier.get().getProxetta().withAspect(createTxProxyAspects(annTxAdviceManager.getAnnotations())); final DbSessionProvider sessionProvider = new DbJtxSessionProvider(jtxManager); // querymap final long startTime = System.currentTimeMillis(); final QueryMap queryMap = new DbPropsQueryMap(); log.debug(\"Queries loaded in \" + (System.currentTimeMillis() - startTime) + \"ms.\"); log.debug(\"Total queries: \" + queryMap.size()); // dboom dbOom = DbOom.create() .withConnectionProvider(connectionProvider) .withSessionProvider(sessionProvider) .withQueryMap(queryMap) .get(); dbOom.connect(); final DbEntityManager dbEntityManager = dbOom.entityManager(); dbEntityManager.reset(); petiteContainer.addBean(beanNamePrefix() + \"query\", dbOom.queryConfig()); petiteContainer.addBean(beanNamePrefix() + \"oom\", dbOom.config()); // automatic configuration if (autoConfiguration) { final AutomagicDbOomConfigurator automagicDbOomConfigurator = new AutomagicDbOomConfigurator(dbEntityManager, true); automagicDbOomConfigurator.registerAsConsumer( joyScannerSupplier.get().getClassScanner()); } dbEntityManagerConsumers.accept(dbEntityManager); log.info(\"DB OK!\"); }\n\n    ### Response:", "ground_truth": "Initializes database. First, creates connection pool.\nand transaction manager. Then, Jodds DbEntityManager is\nconfigured. It is also configured automagically, by scanning\nthe class path for entities.", "predict": "// Starts the database // If the DB environment has been set up // and configuration loaded // and queries loaded // and DB connected // and DB reset // and DB configured // and DB consumed"}, {"ID": 1797, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static public function defaultExceptionHandler( $e ) { if( PHP_SAPI != 'cli' ) { header( 'HTTP/1.x 500 Internal Server Error' ); header( 'Content-Type: text/html' ); echo \"An unexpected error has occurred. Please contact the webmaster.<br />\"; if( eZDebug::isDebugEnabled() ) { echo $e->getMessage() . ' in ' . $e->getFile() . ' on line ' . $e->getLine(); } } else { $cli = eZCLI::instance(); $cli->error( \"An unexpected error has occurred. Please contact the webmaster.\"); if( eZDebug::isDebugEnabled() ) { $cli->error( $e->getMessage() . ' in ' . $e->getFile() . ' on line ' . $e->getLine() ); } } eZLog::write( 'Unexpected error, the message was : ' . $e->getMessage() . ' in ' . $e->getFile() . ' on line ' . $e->getLine(), 'error.log' ); eZExecution::cleanup(); eZExecution::setCleanExit(); exit( 1 ); }\n\n    ### Response: Installs the default Exception handler\n\n@params Exception|Throwable the exception\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void checkConnectionProvider() { final Connection connection = connectionProvider.getConnection(); try { final DatabaseMetaData databaseMetaData = connection.getMetaData(); String name = databaseMetaData.getDatabaseProductName(); String version = databaseMetaData.getDatabaseProductVersion(); if (log.isInfoEnabled()) { log.info(\"Connected to database: \" + name + \" v\" + version); } } catch (SQLException sex) { log.error(\"DB connection failed: \", sex); } finally { connectionProvider.closeConnection(connection); } }\n\n    ### Response:", "ground_truth": "Checks if connection provider can return a connection.", "predict": "Checks for connectivity of Database and log the error in case of any error\n\n@param Exception e The exception occurred during connectivity\n@return void"}, {"ID": 1798, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def stop(name=None, backdate=None, unique=None, keep_subdivisions=None, quick_print=None, un=None, ks=None, qp=None): \"\"\" Mark the end of timing. Optionally performs a stamp, hence accepts the same arguments. Notes: If keeping subdivisions and not calling a stamp, any awaiting subdivisions will be assigned to a special 'UNASSIGNED' position to indicate that they are not properly accounted for in the hierarchy (these can happen at different places and may be combined inadvertently). Backdating: For subdivisions only. Backdate time must be in the past but more recent than the latest stamp. Args: name (any, optional): If used, passed to a call to stamp() backdate (float, optional): time to use for stop instead of current unique (bool, optional): see stamp() keep_subdivisions (bool, optional): keep awaiting subdivisions quick_print (bool, optional): boolean, print total time un (bool, optional): see stamp() ks (bool, optional): see stamp() qp (bool, optional): see stamp() Returns: float: The current time. Raises: BackdateError: If given backdate is out of range, or if used in root timer. PausedError: If attempting stamp in paused timer. StoppedError: If timer already stopped. TypeError: If given backdate value is not type float. \"\"\" t = timer() if f.t.stopped: raise StoppedError(\"Timer already stopped.\") if backdate is None: t_stop = t else: if f.t is f.root: raise BackdateError(\"Cannot backdate stop of root timer.\") if not isinstance(backdate, float): raise TypeError(\"Backdate must be type float.\") if backdate > t: raise BackdateError(\"Cannot backdate to future time.\") if backdate < f.t.last_t: raise BackdateError(\"Cannot backdate to time earlier than last stamp.\") t_stop = backdate unique = SET['UN'] if (unique is None and un is None) else bool(unique or un) # bool(None) becomes False keep_subdivisions = SET['KS'] if (keep_subdivisions is None and ks is None) else bool(keep_subdivisions or ks) quick_print = SET['QP'] if (quick_print is None and qp is None) else bool(quick_print or qp) if name is not None: if f.t.paused: raise PausedError(\"Cannot stamp paused timer.\") elapsed = t_stop - f.t.last_t _stamp(name, elapsed, unique, keep_subdivisions, quick_print) else: times_priv.assign_subdivisions(UNASGN, keep_subdivisions) for s in f.t.rgstr_stamps: if s not in f.s.cum: f.s.cum[s] = 0. f.s.order.append(s) if not f.t.paused: f.t.tmp_total += t_stop - f.t.start_t f.t.tmp_total -= f.t.self_cut f.t.self_cut += timer() - t # AFTER subtraction from tmp_total, before dump times_priv.dump_times() f.t.stopped = True if quick_print: print(\"({}) Total: {:.4f}\".format(f.t.name, f.r.total)) return t\n\n    ### Response: Mark the end of timing.  Optionally performs a stamp, hence accepts the\n    same arguments.\n\n    Notes:\n        If keeping subdivisions and not calling a stamp, any awaiting subdivisions\n        will be assigned to a special 'UNASSIGNED' position to indicate that they\n        are not properly accounted for in the hierarchy (these can happen at\n        different places and may be combined inadvertently).\n\n        Backdating: For subdivisions only.  Backdate time must be in the past\n        but more recent than the latest stamp.\n\n    Args:\n        name (any, optional): If used, passed to a call to stamp()\n        backdate (float, optional): time to use for stop instead of current\n        unique (bool, optional): see stamp()\n        keep_subdivisions (bool, optional): keep awaiting subdivisions\n        quick_print (bool, optional): boolean, print total time\n        un (bool, optional): see stamp()\n        ks (bool, optional): see stamp()\n        qp (bool, optional): see stamp()\n\n\n    Returns:\n        float: The current time.\n\n    Raises:\n        BackdateError: If given backdate is out of range, or if used in root timer.\n        PausedError: If attempting stamp in paused timer.\n        StoppedError: If timer already stopped.\n        TypeError: If given backdate value is not type float..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) { // if ((access & AsmUtil.ACC_FINAL) != 0) { // return null; // skip finals // } MethodSignatureVisitor msign = createMethodSignature(access, name, desc, signature, exceptions, thisReference, this.generics); String key = ProxettaAsmUtil.createMethodSignaturesKey(access, name, desc, thisReference); methodSignatures.put(key, msign); allMethodSignatures.add(msign.getCleanSignature()); return new MethodAnnotationReader(msign); }\n\n    ### Response:", "ground_truth": "Stores method signature for target method.", "predict": "\n    If the method has been marked as `final` by writing an appropriate\n    modifier, no change should occur to the method code, hence the\n    return parameter should be set to `null` to skip these methods\n    during the translation of the program into native code and\n    avoids unnecessary allocations of objects of this method signature\n    during the translation of the program into native code\n    (which may occur without writing of these modifiers during\n    compilation of the program into native code because these\n    allocations may occur during the deduction of signature for\n    these method invocations during the translation of the program\n    into native code to produce native code for these invocations\n    of these method invocations during the translation of the\n    program into native code to produce native code for these\n    invocations of these method invocations during the\n    deduction of signature for these invocations during the\n    translation of the program into native code to produce native\n    code for these inv"}, {"ID": 1799, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def on_post(self): \"\"\"Extracts the request, feeds the module, and returns the response.\"\"\" request = self.environ['wsgi.input'] try: return self.process_request(request) except ClientError as exc: return self.on_client_error(exc) except BadGateway as exc: return self.on_bad_gateway(exc) except InvalidConfig: raise except Exception as exc: # pragma: no cover # pylint: disable=W0703 logging.error('Unknown exception: ', exc_info=exc) return self.on_internal_error()\n\n    ### Response: Extracts the request, feeds the module, and returns the response..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void visitEnd() { // prepare class annotations if (classAnnotations != null) { annotations = classAnnotations.toArray(new AnnotationInfo[0]); classAnnotations = null; } List<String> superList = new ArrayList<>(); Set<String> allInterfaces = new HashSet<>(); if (nextInterfaces != null) { allInterfaces.addAll(nextInterfaces); } // check all public super methods that are not overridden in superclass while (nextSupername != null) { InputStream inputStream = null; ClassReader cr; try { inputStream = ClassLoaderUtil.getClassAsStream(nextSupername, classLoader); cr = new ClassReader(inputStream); } catch (IOException ioex) { throw new ProxettaException(\"Unable to inspect super class: \" + nextSupername, ioex); } finally { StreamUtil.close(inputStream); } superList.add(nextSupername); superClassReaders.add(cr); // remember the super class reader cr.accept(new SuperClassVisitor(), 0); if (cr.getInterfaces() != null) { Collections.addAll(allInterfaces, cr.getInterfaces()); } } superClasses = superList.toArray(new String[0]); // check all interface methods that are not overridden in super-interface Set<String> todoInterfaces = new HashSet<>(allInterfaces); Set<String> newCollectedInterfaces = new HashSet<>(); while (true) { for (String next : todoInterfaces) { InputStream inputStream = null; ClassReader cr; try { inputStream = ClassLoaderUtil.getClassAsStream(next, classLoader); cr = new ClassReader(inputStream); } catch (IOException ioex) { throw new ProxettaException(\"Unable to inspect super interface: \" + next, ioex); } finally { StreamUtil.close(inputStream); } superClassReaders.add(cr); // remember the super class reader cr.accept(new SuperClassVisitor(), 0); if (cr.getInterfaces() != null) { for (String newInterface : cr.getInterfaces()) { if (!allInterfaces.contains(newInterface) && !todoInterfaces.contains(newInterface)) { // new interface found newCollectedInterfaces.add(newInterface); } } } } // perform collection allInterfaces.addAll(todoInterfaces); if (newCollectedInterfaces.isEmpty()) { // no new interface found break; } todoInterfaces.clear(); todoInterfaces.addAll(newCollectedInterfaces); newCollectedInterfaces.clear(); } }\n\n    ### Response:", "ground_truth": "Stores signatures for all super public methods not already overridden by target class.\nAll this methods will be accepted for proxyfication.", "predict": "Prepares class annotations, inspects superclass, and interfaces of the superclass of the given class to determine if any of its public methods should be overridden, and makes corresponding adjustment to the given class"}, {"ID": 1800, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def set_mode_rtl(self): '''enter RTL mode''' if self.mavlink10(): self.mav.command_long_send(self.target_system, self.target_component, mavlink.MAV_CMD_NAV_RETURN_TO_LAUNCH, 0, 0, 0, 0, 0, 0, 0, 0) else: MAV_ACTION_RETURN = 3 self.mav.action_send(self.target_system, self.target_component, MAV_ACTION_RETURN)\n\n    ### Response: enter RTL mode.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected MethodSignatureVisitor createMethodSignature( final int access, final String methodName, final String description, final String signature, final String[] exceptions, final String classname, final Map<String, String> declaredTypeGenerics) { MethodSignatureVisitor v = new MethodSignatureVisitor(methodName, access, classname, description, exceptions, signature, declaredTypeGenerics, this); new SignatureReader(signature != null ? signature : description).accept(v); return v; }\n\n    ### Response:", "ground_truth": "Creates method signature from method name.", "predict": "generates method level signature for the given method."}, {"ID": 1801, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewContext() *KBFSContext { g := libkb.NewGlobalContextInit() g.ConfigureConfig() g.ConfigureLogging() g.ConfigureCaches() g.ConfigureMerkleClient() return NewContextFromGlobalContext(g) }\n\n    ### Response: // NewContext constructs a context. This should only be called once in\n// main functions..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String toCsvString(final Object... elements) { StringBuilder line = new StringBuilder(); int last = elements.length -1; for (int i = 0; i < elements.length; i++) { if (elements[i] == null) { if (i != last) { line.append(FIELD_SEPARATOR); } continue; } String field = elements[i].toString(); // check for special cases int ndx = field.indexOf(FIELD_SEPARATOR); if (ndx == -1) { ndx = field.indexOf(FIELD_QUOTE); } if (ndx == -1) { if (field.startsWith(StringPool.SPACE) || field.endsWith(StringPool.SPACE)) { ndx = 1; } } if (ndx == -1) { ndx = StringUtil.indexOfChars(field, SPECIAL_CHARS); } // add field if (ndx != -1) { line.append(FIELD_QUOTE); } field = StringUtil.replace(field, StringPool.QUOTE, DOUBLE_QUOTE); line.append(field); if (ndx != -1) { line.append(FIELD_QUOTE); } // last if (i != last) { line.append(FIELD_SEPARATOR); } } return line.toString(); }\n\n    ### Response:", "ground_truth": "Parse fields as csv string,", "predict": "// This function generates csv string given an array of objects to add to it\n\n    // It appends comma and space to each row of objects\n    // It appends comma and newline to end of csv string\n    // It appends comma and tab to start of first row\n    // It appends comma and tab to start of first element of first row\n    // It appends comma and tab to start of first element of first element of first row\n    // It appends comma and tab to start of first element of first element of first element of first row\n    // It appends comma and tab to start of first element of first element of first element of first element of first row\n    // It appends comma and tab to start of first element of first element of first element of first element of first element of first row\n    // It appends comma and tab to start of first element of first element of first element of first element of first element of first element of first row\n    // It appends comma and tab to start"}, {"ID": 1802, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private String getVersion(final ClassLoader classLoader, final String className, final String methodName) { log.trace(\"Getting version; class-loader: {}, class-name: {}, method-name: {}\", classLoader, className, methodName); try { Class<?> type = classLoader.loadClass(className); Method method = type.getMethod(methodName); Object result = method.invoke(null); if (result != null) { return result.toString(); } } catch (Throwable e) { log.trace(\"Unable determine version from: {}\", className); } return null; }\n\n    ### Response: Get version from Groovy version helper utilities via reflection..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String[] toStringArray(final String line) { List<String> row = new ArrayList<>(); boolean inQuotedField = false; int fieldStart = 0; final int len = line.length(); for (int i = 0; i < len; i++) { char c = line.charAt(i); if (c == FIELD_SEPARATOR) { if (!inQuotedField) { // ignore we are quoting addField(row, line, fieldStart, i, inQuotedField); fieldStart = i + 1; } } else if (c == FIELD_QUOTE) { if (inQuotedField) { if (i + 1 == len || line.charAt(i + 1) == FIELD_SEPARATOR) { // we are already quoting - peek to see if this is the end of the field addField(row, line, fieldStart, i, inQuotedField); fieldStart = i + 2; i++; // and skip the comma inQuotedField = false; } } else if (fieldStart == i) { inQuotedField = true; // this is a beginning of a quote fieldStart++; // move field start } } } // add last field - but only if string was not empty if (len > 0 && fieldStart <= len) { addField(row, line, fieldStart, len, inQuotedField); } return row.toArray(new String[0]); }\n\n    ### Response:", "ground_truth": "Converts CSV line to string array.", "predict": "Utility to translate comma delimited string to string array"}, {"ID": 1803, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def addPrefs(self, prefs=[]): \"\"\"add preference in self.preferences\"\"\" if len(prefs) == len(self.preferences) == 0: logger.debug(\"no preferences\") return None self.preferences.extend(prefs) self.css1(path['search-btn']).click() count = 0 for pref in self.preferences: self.css1(path['search-pref']).fill(pref) self.css1(path['pref-icon']).click() btn = self.css1('div.add-to-watchlist-popup-item .icon-wrapper') if not self.css1('svg', btn)['class'] is None: btn.click() count += 1 # remove window self.css1(path['pref-icon']).click() # close finally self.css1(path['back-btn']).click() self.css1(path['back-btn']).click() logger.debug(\"updated %d preferences\" % count) return self.preferences\n\n    ### Response: add preference in self.preferences.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public CtorInjectionPoint resolve(final Class type, final boolean useAnnotation) { // lookup methods ClassDescriptor cd = ClassIntrospector.get().lookup(type); CtorDescriptor[] allCtors = cd.getAllCtorDescriptors(); Constructor foundedCtor = null; Constructor defaultCtor = null; BeanReferences[] references = null; for (CtorDescriptor ctorDescriptor : allCtors) { Constructor<?> ctor = ctorDescriptor.getConstructor(); Class<?>[] paramTypes = ctor.getParameterTypes(); if (paramTypes.length == 0) { defaultCtor = ctor; // detects default ctors } if (!useAnnotation) { continue; } BeanReferences[] ctorReferences = referencesResolver.readAllReferencesFromAnnotation(ctor); if (ctorReferences == null) { continue; } if (foundedCtor != null) { throw new PetiteException(\"Two or more constructors are annotated as injection points in the bean: \" + type.getName()); } foundedCtor = ctor; references = ctorReferences; } if (foundedCtor == null) { // there is no annotated constructor if (allCtors.length == 1) { foundedCtor = allCtors[0].getConstructor(); } else { foundedCtor = defaultCtor; } if (foundedCtor == null) { // no matching ctor found // still this is not an error if bean is already instantiated. return CtorInjectionPoint.EMPTY; } references = referencesResolver.readAllReferencesFromAnnotation(foundedCtor); if (references == null) { references = new BeanReferences[0]; } } return new CtorInjectionPoint(foundedCtor, references); }\n\n    ### Response:", "ground_truth": "Resolves constructor injection point from type. Looks for single annotated constructor.\nIf no annotated constructors found, the total number of constructors will be checked.\nIf there is only one constructor, that one will be used as injection point. If more\nconstructors exist, the default one will be used as injection point. Otherwise, exception\nis thrown.", "predict": "Resolves constructor points of the given bean of the given class and annotations and creates appropriate objects to carry references to the objects to be injected in the bean for its construction and initialization of objects during run time of the program"}, {"ID": 1804, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function replaceArgument($index, $argument) { if (0 === count($this->arguments)) { throw new OutOfBoundsException('Cannot replace arguments if none have been configured yet.'); } if ($index < 0 || $index > count($this->arguments) - 1) { throw new OutOfBoundsException(sprintf('The index \"%d\" is not in the range [0, %d].', $index, count($this->arguments) - 1)); } $this->arguments[$index] = $argument; return $this; }\n\n    ### Response: Sets a specific argument.\n\n@param int   $index\n@param mixed $argument\n\n@return $this\n\n@throws OutOfBoundsException When the replaced argument does not exist.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private ClassReader createAdviceClassReader(final Class<? extends ProxyAdvice> advice) { InputStream inputStream = null; try { inputStream = ClassLoaderUtil.getClassAsStream(advice); return new ClassReader(inputStream); } catch (IOException ioex) { throw new ProxettaException(ioex); } finally { StreamUtil.close(inputStream); } }\n\n    ### Response:", "ground_truth": "Creates advice's class reader.", "predict": "Creates an input stream for the given class file or directory."}, {"ID": 1805, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _validate_measure_count(self, times): \"\"\" check if \"times\" is within the borders defined in the class :param times: \"times\" to check :type times: int \"\"\" if not self.min_measures <= times <= self.max_measures: raise ParameterValidationError( \"{times} is not within the borders defined in the class\".format( times=times ) )\n\n    ### Response: check if \"times\" is within the borders defined in the class\n\n        :param times: \"times\" to check\n        :type times: int.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private ClassReader getCachedAdviceClassReader(final Class<? extends ProxyAdvice> advice) { if (adviceClassReaderCache == null) { adviceClassReaderCache = TypeCache.createDefault(); } ClassReader adviceReader = adviceClassReaderCache.get(advice); if (adviceReader == null) { adviceReader = createAdviceClassReader(advice); adviceClassReaderCache.put(advice, adviceReader); } return adviceReader; }\n\n    ### Response:", "ground_truth": "Returns class reader for advice.", "predict": "Get the cached adviceClassReader for the given Proxy Advice Class loaded from its jar file."}, {"ID": 1806, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function validateUserForgot() { $this->setSubmitted('user', null, false); $this->filterSubmitted(array('email', 'password')); $this->setSubmitted('user', $this->data_user); $this->validateComponent('user_reset_password'); return !$this->hasErrors(); }\n\n    ### Response: Validates a submitted data when a user wants to reset its password\n@return boolean.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String encrypt(final String str) { try { byte[] utf8 = StringUtil.getBytes(str); // encode the string into bytes using utf-8 byte[] enc = ecipher.doFinal(utf8); // encrypt return Base64.encodeToString(enc); // encode bytes to base64 to get a string } catch (Throwable ignore) { return null; } }\n\n    ### Response:", "ground_truth": "Symmetrically encrypts the string.", "predict": "Decrypts encrypted string to its original form"}, {"ID": 1807, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void setCrystal(ICrystal crystal) { if (this.crystal != null) this.crystal.removeListener(this); this.crystal = crystal; if (this.crystal != null) this.crystal.addListener(this); notifyChanged(); }\n\n    ### Response: Sets the Crystal contained in this ChemModel.\n\n@param   crystal  the Crystal to store in this model\n\n@see      #getCrystal.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String decrypt(String str) { try { str = StringUtil.replaceChar(str, ' ', '+'); // replace spaces with chars. byte[] dec = Base64.decode(str); // decode base64 to get bytes byte[] utf8 = dcipher.doFinal(dec); // decrypt return new String(utf8, UTF_8); // decode using utf-8 } catch (Throwable ignore) { return null; } }\n\n    ### Response:", "ground_truth": "Symmetrically decrypts the string.", "predict": "Decrypts the given string to its original form."}, {"ID": 1808, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _skip_spaces(string, idx): # type: (str, int) -> int \"\"\" Retrieves the next non-space character after idx index in the given string :param string: The string to look into :param idx: The base search index :return: The next non-space character index, -1 if not found \"\"\" i = idx for char in string[idx:]: if not char.isspace(): return i i += 1 return -1\n\n    ### Response: Retrieves the next non-space character after idx index in the given string\n\n    :param string: The string to look into\n    :param idx: The base search index\n    :return: The next non-space character index, -1 if not found.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Logger getLogger(final String name) { if (loggers == null) { return loggerProvider.apply(name); } return loggers.computeIfAbsent(name, loggerProvider); }\n\n    ### Response:", "ground_truth": "Returns logger for given name. Repeated calls to this method with the\nsame argument should return the very same instance of the logger.", "predict": "Get the logger for the given name or create the logger for the given name and return it\n    If the given name has been created, its corresponding logger or its default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of the default implementation of"}, {"ID": 1809, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final public function setDestinationFilename(string $filename) { $extension = pathinfo($filename, PATHINFO_EXTENSION); if (empty($extension) && !empty($this->uploadFile->getExtension())) { $filename .= '.' . $this->uploadFile->getExtension(); } $this->destinationFilename = $filename; }\n\n    ### Response: Apply the uploaded filename to be used in the destination directory. To\nkeep the same extension, simply omit to specify it in the filename.\n\n@param string $filename.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void setName(final String name) { if (name.contains(\";\") || name.contains(\",\") || name.startsWith(\"$\")) { throw new IllegalArgumentException(\"Invalid cookie name:\" + name); } for (int n = 0; n < name.length(); n++) { char c = name.charAt(n); if (c <= 0x20 || c >= 0x7f) { throw new IllegalArgumentException(\"Invalid cookie name:\" + name); } } this.name = name; }\n\n    ### Response:", "ground_truth": "Sets the cookie name and checks for validity.", "predict": "Sets the name of the cookie to the given value, to ensure proper functionality of the cookie"}, {"ID": 1810, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func GetUserRepositories(opts *UserRepoOptions) ([]*Repository, error) { sess := x.Where(\"owner_id=?\", opts.UserID).Desc(\"updated_unix\") if !opts.Private { sess.And(\"is_private=?\", false) } if opts.Page <= 0 { opts.Page = 1 } sess.Limit(opts.PageSize, (opts.Page-1)*opts.PageSize) repos := make([]*Repository, 0, opts.PageSize) return repos, sess.Find(&repos) }\n\n    ### Response: // GetUserRepositories returns a list of repositories of given user..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected ActionRequest createActionRequest( final String actionPath, final String[] actionPathChunks, final ActionRuntime actionRuntime, final Object action, final HttpServletRequest servletRequest, final HttpServletResponse servletResponse) { return new ActionRequest(this, actionPath, actionPathChunks, actionRuntime, action, servletRequest, servletResponse); }\n\n    ### Response:", "ground_truth": "", "predict": "// This method generates an ActionRequest object given an action path, action path chunks, and other parameters."}, {"ID": 1811, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func sortTemplates(templates map[string]Template, catalogSort bool) []Template { chain := make([]Template, 0, len(templates)*2) // build a full set of dependency chains var keyList []string var key string var t Template keyList = templateKeyList(templates, catalogSort) for _, key = range keyList { t = templates[key] tlist := templateChainDependencies(t) for _, tt := range tlist { if tt != nil { chain = append(chain, tt) } } } // reduce that to make a simple list sorted := make([]Template, 0, len(templates)) chain: for _, t := range chain { for _, already := range sorted { if t == already { continue chain } } sorted = append(sorted, t) } return sorted }\n\n    ### Response: // sortTemplates puts templates in a suitable order based on dependices.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected <R extends ActionFilter> R createWrapper(final Class<R> wrapperClass) { return petiteContainer.createBean(wrapperClass); }\n\n    ### Response:", "ground_truth": "Acquires filter from Petite container.", "predict": "// Override creates a wrapper around the given action filter implementation to convert into Spring Bean definition format"}, {"ID": 1812, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewKeyFinder(g *globals.Context) types.KeyFinder { return &KeyFinderImpl{ Contextified: globals.NewContextified(g), DebugLabeler: utils.NewDebugLabeler(g.GetLog(), \"KeyFinder\", false), keys: make(map[string]*types.NameInfo), decKeys: make(map[string]types.CryptKey), encKeys: make(map[string]encItem), } }\n\n    ### Response: // NewKeyFinder creates a KeyFinder..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void destroyBean(final BeanData beanData) { if (destroyableBeans == null) { return; } if (!isBeanDestroyable(beanData)) { return; } if (destroyableBeans.remove(beanData)) { beanData.callDestroyMethods(); } }\n\n    ### Response:", "ground_truth": "Removes destroyable bean from the list and calls it destroy methods.\nIf bean is not destroyable, does nothing. Bean gets destroyed only once.", "predict": "// DestroyBean destroys the given Bean....\n    // It makes sure that the bean does not get destroyed multiple times, by checking if the bean is destroyable and by checking if the bean has been destroyed already...."}, {"ID": 1813, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def wait_for_and_dismiss_alert(driver, timeout=settings.LARGE_TIMEOUT): \"\"\" Wait for and dismiss an alert. Returns the text from the alert. @Params driver - the webdriver object (required) timeout - the time to wait for the alert in seconds \"\"\" alert = wait_for_and_switch_to_alert(driver, timeout) alert_text = alert.text alert.dismiss() return alert_text\n\n    ### Response: Wait for and dismiss an alert. Returns the text from the alert.\n    @Params\n    driver - the webdriver object (required)\n    timeout - the time to wait for the alert in seconds.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void shutdown() { if (destroyableBeans == null) { return; } for (final BeanData destroyableBean : destroyableBeans) { destroyableBean.callDestroyMethods(); } destroyableBeans.clear(); }\n\n    ### Response:", "ground_truth": "Shutdowns the scope and calls all collected destroyable beans.", "predict": "Override the default behavior of the garbage collector to also destroy the objects of this class during its own disposal. It makes sure that the objects of this class are completely destroyed by calling the destroy() method of the objects during its own disposal. It makes sure that the objects of this class are completely destroyed by calling the destroy() method of the objects during its own disposal. It makes sure that the objects of this class are completely destroyed by calling the destroy() method of the objects during its own disposal. It makes sure that the objects of this class are completely destroyed by calling the destroy() method of the objects during its own disposal. It makes sure that the objects of this class are completely destroyed by calling the destroy() method of the objects during its own disposal. It makes sure that the objects of this class are completely destroyed by calling the destroy() method of the objects during its own disposal. It makes sure that the objects of this class are completely destroyed by calling the destroy() method of the objects during its own disposal. It makes sure"}, {"ID": 1814, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function maxHtmlLineLength($contents, $maxHtmlLineLength) { if (strlen($contents) <= $maxHtmlLineLength) { return $contents; } $result = ''; $splits = str_split($contents, $maxHtmlLineLength); foreach ($splits as $split) { $pos = strrpos($split, '><'); if ($pos === false) { $result .= $split; } else { $result .= substr_replace($split, PHP_EOL, $pos + 1, 0); } } return $result; }\n\n    ### Response: Old browsers, firewalls and more can't handle to long lines.\nTherefore add a linebreak after specified character length.\n\n@param int    $maxHtmlLineLength\n@param string $contents\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ReceivedEmail[] get() { if (fromFolder != null) { session.useFolder(fromFolder); } return session.receiveMessages(filter, flagsToSet, flagsToUnset, envelopeOnly, messages -> { if (targetFolder != null) { try { session.folder.copyMessages(messages, session.getFolder(targetFolder)); } catch (MessagingException e) { throw new MailException(\"Copying messages failed\"); } } }); }\n\n    ### Response:", "ground_truth": "Receives the emails as specified by the builder.", "predict": "Get emails from source folder and optionally filter and un-set flags of received emails in target folder"}, {"ID": 1815, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def register_argparse_arguments(parser): \"\"\"Register the arguments for argparse.\"\"\" parser.add_argument( \"-r\", \"--repository\", action=utils.EnvironmentDefault, env=\"TWINE_REPOSITORY\", default=\"pypi\", help=\"The repository (package index) to upload the package to. \" \"Should be a section in the config file (default: \" \"%(default)s). (Can also be set via %(env)s environment \" \"variable.)\", ) parser.add_argument( \"--repository-url\", action=utils.EnvironmentDefault, env=\"TWINE_REPOSITORY_URL\", default=None, required=False, help=\"The repository (package index) URL to upload the package to.\" \" This overrides --repository. \" \"(Can also be set via %(env)s environment variable.)\" ) parser.add_argument( \"-s\", \"--sign\", action=\"store_true\", default=False, help=\"Sign files to upload using GPG.\", ) parser.add_argument( \"--sign-with\", default=\"gpg\", help=\"GPG program used to sign uploads (default: %(default)s).\", ) parser.add_argument( \"-i\", \"--identity\", help=\"GPG identity used to sign files.\", ) parser.add_argument( \"-u\", \"--username\", action=utils.EnvironmentDefault, env=\"TWINE_USERNAME\", required=False, help=\"The username to authenticate to the repository \" \"(package index) as. (Can also be set via \" \"%(env)s environment variable.)\", ) parser.add_argument( \"-p\", \"--password\", action=utils.EnvironmentDefault, env=\"TWINE_PASSWORD\", required=False, help=\"The password to authenticate to the repository \" \"(package index) with. (Can also be set via \" \"%(env)s environment variable.)\", ) parser.add_argument( \"-c\", \"--comment\", help=\"The comment to include with the distribution file.\", ) parser.add_argument( \"--config-file\", default=\"~/.pypirc\", help=\"The .pypirc config file to use.\", ) parser.add_argument( \"--skip-existing\", default=False, action=\"store_true\", help=\"Continue uploading files if one already exists. (Only valid \" \"when uploading to PyPI. Other implementations may not \" \"support this.)\", ) parser.add_argument( \"--cert\", action=utils.EnvironmentDefault, env=\"TWINE_CERT\", default=None, required=False, metavar=\"path\", help=\"Path to alternate CA bundle (can also be set via %(env)s \" \"environment variable).\", ) parser.add_argument( \"--client-cert\", metavar=\"path\", help=\"Path to SSL client certificate, a single file containing the\" \" private key and the certificate in PEM format.\", ) parser.add_argument( \"--verbose\", default=False, required=False, action=\"store_true\", help=\"Show verbose output.\" ) parser.add_argument( \"--disable-progress-bar\", default=False, required=False, action=\"store_true\", help=\"Disable the progress bar.\" )\n\n    ### Response: Register the arguments for argparse..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void main(final String[] args) { loadPropertiesFiles(args); try (ClusteredServiceContainer container = launch()) { container.context().shutdownSignalBarrier().await(); System.out.println(\"Shutdown ClusteredServiceContainer...\"); } }\n\n    ### Response:", "ground_truth": "Launch the clustered service container and await a shutdown signal.\n\n@param args command line argument which is a list for properties files as URLs or filenames.", "predict": "Loads the configuration properties files and launches the clustered service container."}, {"ID": 1816, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void onSessionDestruction(Request currentRequest, Session session) { HttpServletResponse response = (HttpServletResponse)httpResponse.get(); storeSessionDataInCookie(SESSION_TOKEN_KEY, null, response); storeSessionDataInCookie(USER_ID_KEY, null, response); }\n\n    ### Response: Notification of a session destruction.\n\n@param session.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void run() { do { LockSupport.parkNanos(parkNs); final long currentTotalMessages = totalMessages; final long currentTotalBytes = totalBytes; final long currentTimestamp = System.nanoTime(); final long timeSpanNs = currentTimestamp - lastTimestamp; final double messagesPerSec = ((currentTotalMessages - lastTotalMessages) * (double)reportIntervalNs) / (double)timeSpanNs; final double bytesPerSec = ((currentTotalBytes - lastTotalBytes) * (double)reportIntervalNs) / (double)timeSpanNs; reportingFunc.onReport(messagesPerSec, bytesPerSec, currentTotalMessages, currentTotalBytes); lastTotalBytes = currentTotalBytes; lastTotalMessages = currentTotalMessages; lastTimestamp = currentTimestamp; } while (!halt); }\n\n    ### Response:", "ground_truth": "Run loop for the rate reporter", "predict": "Notification of a continuous run of the program with reporting details provided on specified intervals of time"}, {"ID": 1817, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function validateEntityIdCollectionItem() { $field = 'entity_id'; if ($this->isExcluded($field)) { return null; } $value = $this->getSubmitted($field); if ($this->isUpdating() && !isset($value)) { return null; } $title = $this->getSubmitted('title'); if (is_numeric($title)) { $value = $title; } $label = $this->translation->text('Entity'); if (empty($value) || !is_numeric($value)) { $this->setErrorInvalid($field, $label); return false; } $update = $this->getUpdating(); if (isset($update['collection_item_id']) && $update[$field] == $value) { return null; } $conditions = array( 'type' => $this->getSubmitted('collection.type'), 'collection_id' => $this->getSubmitted('collection.collection_id') ); $existing = $this->collection_item->getItems($conditions); if (isset($existing[$value])) { $this->setErrorExists($field, $label); return false; } $this->setSubmitted($field, $value); return true; }\n\n    ### Response: Validates submitted collection item entity ID\n@return boolean|null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unused\") public static void printError( final String channel, final int streamId, final int sessionId, final String message, final HeaderFlyweight cause) { System.out.println(message); }\n\n    ### Response:", "ground_truth": "Generic error handler that just prints message to stdout.\n\n@param channel   for the error\n@param streamId  for the error\n@param sessionId for the error, if source\n@param message   indicating what the error was\n@param cause     of the error", "predict": "Prints error message on console"}, {"ID": 1818, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setPropertyValue(Object instance, Object value, boolean forceDirect) { try { if (!forceDirect && instance instanceof IPropertyAccessor) { ((IPropertyAccessor) instance).setPropertyValue(this, value); return; } Method method = null; try { method = PropertyUtil.findSetter(setter, instance, value == null ? null : value.getClass()); } catch (Exception e) { if (value != null) { PropertySerializer<?> serializer = getPropertyType().getSerializer(); value = value instanceof String ? serializer.deserialize((String) value) : serializer.serialize(value); method = PropertyUtil.findSetter(setter, instance, value.getClass()); } else { throw e; } } if (method != null) { method.invoke(instance, value); } } catch (Exception e) { throw MiscUtil.toUnchecked(e); } }\n\n    ### Response: Sets the property value for a specified object instance.\n\n@param instance The object instance.\n@param value The value to assign.\n@param forceDirect If true, a forces a direct write to the instance even if it implements\nIPropertyAccessor.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void printRate( final double messagesPerSec, final double bytesPerSec, final long totalMessages, final long totalBytes) { System.out.println(String.format( \"%.02g msgs/sec, %.02g payload bytes/sec, totals %d messages %d MB\", messagesPerSec, bytesPerSec, totalMessages, totalBytes / (1024 * 1024))); }\n\n    ### Response:", "ground_truth": "Print the rates to stdout\n\n@param messagesPerSec being reported\n@param bytesPerSec    being reported\n@param totalMessages  being reported\n@param totalBytes     being reported", "predict": "Prints rate information for given values of messages and bytes per second of activity."}, {"ID": 1819, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getReport() { StringBuffer info = new StringBuffer(); if (!isCachingEnabled()) { info.append(\"cache behaviour: DISABLED\\n\"); } else if (isCachingPermanent()) { info.append(\"cache behaviour: PERMANENT\\n\"); } else { info.append(\"cache behaviour: NORMAL\\n\"); } info.append(\"time to live: \" + ttlInSeconds + \" s\\n\"); info.append(\"cleanup interval: \" + cleanupInterval + \" s\\n\"); info.append(\"cache size: \" + data.size() + \" objects\\n\"); info.append(\"cache mirror size: \" + mirror.size() + \" object(s)\\n\"); info.append(\"cache hits: \" + hits + '\\n'); info.append(\"cache misses: \" + misses + '\\n'); info.append(\"cache unavailable: \" + unavailable + '\\n'); info.append(\"cache delayed hits: \" + delayedHits + '\\n'); info.append(\"cache delayed misses: \" + delayedMisses + '\\n'); info.append(\"next cleanup run: \" + new Date(lastRun.getTime() + (cleanupInterval * 1000)) + \"\\n\"); return info.toString(); }\n\n    ### Response: Returns a status report containing behavior and statistics.\n\n@return status report.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static MappedByteBuffer mapExistingFileReadOnly(final File location) { if (!location.exists()) { final String msg = \"file not found: \" + location.getAbsolutePath(); throw new IllegalStateException(msg); } MappedByteBuffer mappedByteBuffer = null; try (RandomAccessFile file = new RandomAccessFile(location, \"r\"); FileChannel channel = file.getChannel()) { mappedByteBuffer = channel.map(READ_ONLY, 0, channel.size()); } catch (final IOException ex) { LangUtil.rethrowUnchecked(ex); } return mappedByteBuffer; }\n\n    ### Response:", "ground_truth": "Map an existing file as a read only buffer.\n\n@param location of file to map.\n@return the mapped file.", "predict": "Maps an existing file read-only to provide access to its contents."}, {"ID": 1820, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private IAtomContainer setFlags(IAtomContainer container, IAtomContainer ac, boolean b) { for (Iterator<IAtom> it = container.atoms().iterator(); it.hasNext();) { int positionA = ac.indexOf(it.next()); ac.getAtom(positionA).setFlag(CDKConstants.REACTIVE_CENTER, b); } for (Iterator<IBond> it = container.bonds().iterator(); it.hasNext();) { int positionB = ac.indexOf(it.next()); ac.getBond(positionB).setFlag(CDKConstants.REACTIVE_CENTER, b); } return ac; }\n\n    ### Response: Set the Flags to atoms and bonds from an atomContainer.\n\n@param container Container with the flags\n@param ac        Container to put the flags\n@param b         True, if the the flag is true\n@return          Container with added flags.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void close() { final State state = this.state; if (State.CLOSED != state) { if (isReplayActive) { isReplayActive = false; archive.stopReplay(replaySessionId); } if (State.MERGED != state) { subscription.removeDestination(replayDestination); } state(State.CLOSED); } }\n\n    ### Response:", "ground_truth": "Close the merge and stop any active replay. Will remove the replay destination from the subscription. Will\nNOT remove the live destination if it has been added.", "predict": "Closes the archive and sets the state to closed."}, {"ID": 1821, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func targetStrip(name string, targetStrip int) string { if targetStrip == 0 { return name } offset, end := 0, false for i := 0; i < targetStrip; i++ { offset, end = dns.NextLabel(name, offset) } if end { // We overshot the name, use the orignal one. offset = 0 } name = name[offset:] return name }\n\n    ### Response: // targetStrip strips \"targetstrip\" labels from the left side of the fully qualified name..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int doWork() { int workCount = 0; switch (state) { case AWAIT_INITIAL_RECORDING_POSITION: workCount += awaitInitialRecordingPosition(); break; case AWAIT_REPLAY: workCount += awaitReplay(); break; case AWAIT_CATCH_UP: workCount += awaitCatchUp(); break; case AWAIT_CURRENT_RECORDING_POSITION: workCount += awaitUpdatedRecordingPosition(); break; case AWAIT_STOP_REPLAY: workCount += awaitStopReplay(); break; } return workCount; }\n\n    ### Response:", "ground_truth": "Process the operation of the merge. Do not call the processing of fragments on the subscription.\n\n@return indication of work done processing the merge.", "predict": "The method \"doWork\" implements the logic to do work in the various \"state\" of the listener. It first seeks to its initial position in the recording (case \"Await Initial Recording Position\"), and if necessary seeks to catch up with the current location of the recording (case \"Await Catch Up\"), and updates the listener with its current location (case \"Await Updated Recording Position\"), and when necessary seeks to the next location (case \"Await Replay\"), and when necessary seeks to the next location (case \"Await Stop Replay\"), and when necessary seeks to the next location (case \"Await Current Recording Position\"), and when necessary seeks to the next location (case \"Await Initial Recording Position\"), and when necessary seeks to the next location (case \"Await Replay\"), and when necessary seeks to the next location (case \"Await Catch Up\"), and when necessary seeks to the next location (case \"Await Updated Recording Position\"), and when necessary see"}, {"ID": 1822, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_attributes(**kwargs): \"\"\" Get all attributes \"\"\" attrs = db.DBSession.query(Attr).order_by(Attr.name).all() return attrs\n\n    ### Response: Get all attributes.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public long position() { if (isClosed) { return CLOSED; } final long rawTail = rawTailVolatile(logMetaDataBuffer); final int termOffset = termOffset(rawTail, termBufferLength); return computePosition(termId(rawTail), termOffset, positionBitsToShift, initialTermId); }\n\n    ### Response:", "ground_truth": "Get the current position to which the publication has advanced for this stream.\n\n@return the current position to which the publication has advanced for this stream or {@link #CLOSED}.", "predict": "Get the position of the given document given its parameters."}, {"ID": 1823, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function error($fieldName, $str) { // by using this hook you can overwrite default behavior of this method if ($this->hookHasCallbacks('displayError')) { return $this->hook('displayError', [$fieldName, $str]); } $jsError = [$this->js()->form('add prompt', $fieldName, $str)]; return $jsError; }\n\n    ### Response: Causes form to generate error.\n\n@param string $fieldName Field name\n@param string $str       Error message\n\n@return jsChain|array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public long offer(final DirectBufferVector[] vectors, final ReservedValueSupplier reservedValueSupplier) { final int length = DirectBufferVector.validateAndComputeLength(vectors); long newPosition = CLOSED; if (!isClosed) { final long limit = positionLimit.getVolatile(); final ExclusiveTermAppender termAppender = termAppenders[activePartitionIndex]; final long position = termBeginPosition + termOffset; if (position < limit) { final int result; if (length <= maxPayloadLength) { result = termAppender.appendUnfragmentedMessage( termId, termOffset, headerWriter, vectors, length, reservedValueSupplier); } else { checkMaxMessageLength(length); result = termAppender.appendFragmentedMessage( termId, termOffset, headerWriter, vectors, length, maxPayloadLength, reservedValueSupplier); } newPosition = newPosition(result); } else { newPosition = backPressureStatus(position, length); } } return newPosition; }\n\n    ### Response:", "ground_truth": "Non-blocking publish by gathering buffer vectors into a message.\n\n@param vectors               which make up the message.\n@param reservedValueSupplier {@link ReservedValueSupplier} for the frame.\n@return The new stream position, otherwise a negative error value of {@link #NOT_CONNECTED},\n{@link #BACK_PRESSURED}, {@link #ADMIN_ACTION}, {@link #CLOSED}, or {@link #MAX_POSITION_EXCEEDED}.", "predict": "Offers data from multiple Direct Buffer Vectors to Single Destination"}, {"ID": 1824, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_stack(self, xvals, yvals, baselines, sign='positive'): \"\"\" Iterates over a x- and y-values in a stack layer and appropriately offsets the layer on top of the previous layer. \"\"\" bottoms, tops = [], [] for x, y in zip(xvals, yvals): baseline = baselines[x][sign] if sign == 'positive': bottom = baseline top = bottom+y baseline = top else: top = baseline bottom = top+y baseline = bottom baselines[x][sign] = baseline bottoms.append(bottom) tops.append(top) return bottoms, tops\n\n    ### Response: Iterates over a x- and y-values in a stack layer\n        and appropriately offsets the layer on top of the\n        previous layer..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public long appendPadding(final int length) { checkMaxMessageLength(length); long newPosition = CLOSED; if (!isClosed) { final long limit = positionLimit.getVolatile(); final ExclusiveTermAppender termAppender = termAppenders[activePartitionIndex]; final long position = termBeginPosition + termOffset; if (position < limit) { checkPositiveLength(length); final int result = termAppender.appendPadding(termId, termOffset, headerWriter, length); newPosition = newPosition(result); } else { newPosition = backPressureStatus(position, length); } } return newPosition; }\n\n    ### Response:", "ground_truth": "Append a padding record log of a given length to make up the log to a position.\n\n@param length of the range to claim, in bytes..\n@return The new stream position, otherwise a negative error value of {@link #NOT_CONNECTED},\n{@link #BACK_PRESSURED}, {@link #ADMIN_ACTION}, {@link #CLOSED}, or {@link #MAX_POSITION_EXCEEDED}.\n@throws IllegalArgumentException if the length is greater than {@link #maxMessageLength()}.", "predict": "Append padding to the end of the message to ensure that it\n    has an Integrity Checksum, when writing to a log where integrity\n    is enforced, or when writing to a log where corruption may occur\n    during transmission of the log message; or when writing to a log\n    where corruption may occur during log aggregation"}, {"ID": 1825, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function createClient(wsdlUrl, options, cb) { if (!cb) { cb = options; options = {}; } if (this.errOnCreateClient) { return setTimeout(cb.bind(null, new Error('forced error on createClient'))); } var client = getStub(wsdlUrl); if (client) { resetStubbedMethods(client); setTimeout(cb.bind(null, null, client)); } else { setTimeout(cb.bind(null, new Error('no client stubbed for ' + wsdlUrl))); } }\n\n    ### Response: Return a stubbed client based on the value of wsdlUrl.\n\n@throws if wsdlUrl is unknown.\n\n@param {String} wsdlUrl\n@param {Object} options\n@param {Function} cb\n@return {Object}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void close() { lock.lock(); try { if (!isClosed) { isClosed = true; archiveProxy.closeSession(controlSessionId); if (!context.ownsAeronClient()) { CloseHelper.close(controlResponsePoller.subscription()); CloseHelper.close(archiveProxy.publication()); } context.close(); } } finally { lock.unlock(); } }\n\n    ### Response:", "ground_truth": "Notify the archive that this control session is closed so it can promptly release resources then close the\nlocal resources associated with the client.", "predict": "Closes the aeron server component"}, {"ID": 1826, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def reset_sequence(self, topic): \"\"\"Reset the expected sequence number for a topic If the topic is unknown, this does nothing. This behaviour is useful when you have wildcard topics that only create queues once they receive the first message matching the topic. Args: topic (string): The topic to reset the packet queue on \"\"\" if topic in self.queues: self.queues[topic].reset()\n\n    ### Response: Reset the expected sequence number for a topic\n\n        If the topic is unknown, this does nothing.  This behaviour is\n        useful when you have wildcard topics that only create queues\n        once they receive the first message matching the topic.\n\n        Args:\n            topic (string): The topic to reset the packet queue on.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String pollForErrorResponse() { lock.lock(); try { ensureOpen(); if (controlResponsePoller.poll() != 0 && controlResponsePoller.isPollComplete()) { if (controlResponsePoller.controlSessionId() == controlSessionId && controlResponsePoller.templateId() == ControlResponseDecoder.TEMPLATE_ID && controlResponsePoller.code() == ControlResponseCode.ERROR) { return controlResponsePoller.errorMessage(); } } return null; } finally { lock.unlock(); } }\n\n    ### Response:", "ground_truth": "Poll the response stream once for an error. If another message is present then it will be skipped over\nso only call when not expecting another response.\n\n@return the error String otherwise null if no error is found.", "predict": "Polls the error response queue of the controller and\n    returns the error message of the first message if an error message\n    is present, or null otherwise"}, {"ID": 1827, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewTrapServer(args ServerArguments) (*TrapServer, error) { if err := args.validate(); err != nil { return nil, err } args.setDefault() return &TrapServer{ args: &args, mps: map[SNMPVersion]messageProcessing{ V2c: newMessageProcessing(V2c), V3: newMessageProcessing(V3), }, secs: map[SNMPVersion]*securityMap{ V2c: newSecurityMap(), V3: newSecurityMap(), }, transport: newTransport(&args), }, nil }\n\n    ### Response: // NewTrapServer returns a new Server and is using server arguments for configuration..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void stopReplay(final long replaySessionId) { lock.lock(); try { ensureOpen(); final long correlationId = aeron.nextCorrelationId(); if (!archiveProxy.stopReplay(replaySessionId, correlationId, controlSessionId)) { throw new ArchiveException(\"failed to send stop replay request\"); } pollForResponse(correlationId); } finally { lock.unlock(); } }\n\n    ### Response:", "ground_truth": "Stop a replay session.\n\n@param replaySessionId to stop replay for.", "predict": "The stopReplay() method stops the replay of the specified session ID, and sends the appropriate request to the aeron server to do so."}, {"ID": 1828, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def update_instrument_config( instrument, measured_center) -> Tuple[Point, float]: \"\"\" Update config and pose tree with instrument's x and y offsets and tip length based on delta between probe center and measured_center, persist updated config and return it \"\"\" from copy import deepcopy from opentrons.trackers.pose_tracker import update robot = instrument.robot config = robot.config instrument_offset = deepcopy(config.instrument_offset) dx, dy, dz = array(measured_center) - config.tip_probe.center log.debug(\"This is measured probe center dx {}\".format(Point(dx, dy, dz))) # any Z offset will adjust the tip length, so instruments have Z=0 offset old_x, old_y, _ = instrument_offset[instrument.mount][instrument.type] instrument_offset[instrument.mount][instrument.type] = \\ (old_x - dx, old_y - dy, 0.0) tip_length = deepcopy(config.tip_length) tip_length[instrument.name] = tip_length[instrument.name] + dz config = config \\ ._replace(instrument_offset=instrument_offset) \\ ._replace(tip_length=tip_length) robot.config = config log.debug(\"Updating config for {} instrument\".format(instrument.mount)) robot_configs.save_robot_settings(config) new_coordinates = change_base( robot.poses, src=instrument, dst=instrument.instrument_mover) - Point(dx, dy, 0.0) robot.poses = update(robot.poses, instrument, new_coordinates) return robot.config\n\n    ### Response: Update config and pose tree with instrument's x and y offsets\n    and tip length based on delta between probe center and measured_center,\n    persist updated config and return it.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void eventAvailableImage(final Image image) { final Subscription subscription = image.subscription(); System.out.format( \"new image on %s streamId %x sessionId %x from %s%n\", subscription.channel(), subscription.streamId(), image.sessionId(), image.sourceIdentity()); }\n\n    ### Response:", "ground_truth": "Print the information for an available image to stdout.\n\n@param image that has been created", "predict": "The above java Code generates the method-level comment which reads, \"\\n\" \\n\" new image on <channel> streamId <stream_id> sessionId <session_id> from <source_identity>\""}, {"ID": 1829, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getProjectStories($projectId = null) { $projectId = $projectId ?: $this->defaultProjectId; return $this->curl->get(\"projects/{$projectId}/stories\"); }\n\n    ### Response: Returns the list of stories associated with the object.\nAs usual with queries, stories are returned in compact form.\nHowever, the compact form for stories contains more\ninformation by default than just the ID.\nThere is presently no way to get a filtered set of stories.\n\n@param  string $projectId\n\n@return string|null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void eventUnavailableImage(final Image image) { final Subscription subscription = image.subscription(); System.out.format( \"inactive image on %s streamId %d sessionId %x%n\", subscription.channel(), subscription.streamId(), image.sessionId()); }\n\n    ### Response:", "ground_truth": "This handler is called when image is unavailable\n\n@param image that has gone inactive", "predict": "Shows an inactive image on the given channel, stream id and session id."}, {"ID": 1830, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *ListClustersOutput) SetClusterListEntries(v []*ClusterListEntry) *ListClustersOutput { s.ClusterListEntries = v return s }\n\n    ### Response: // SetClusterListEntries sets the ClusterListEntries field's value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static StatusIndicatorReader sendChannelStatus(final CountersReader countersReader, final String channel) { StatusIndicatorReader statusReader = null; final MutableInteger id = new MutableInteger(-1); countersReader.forEach( (counterId, typeId, keyBuffer, label) -> { if (typeId == SendChannelStatus.SEND_CHANNEL_STATUS_TYPE_ID) { if (channel.startsWith(keyBuffer.getStringAscii(ChannelEndpointStatus.CHANNEL_OFFSET))) { id.value = counterId; } } }); if (Aeron.NULL_VALUE != id.value) { statusReader = new UnsafeBufferStatusIndicator(countersReader.valuesBuffer(), id.value); } return statusReader; }\n\n    ### Response:", "ground_truth": "Return the read-only status indicator for the given send channel URI.\n\n@param countersReader that holds the status indicator.\n@param channel        for the send channel.\n@return read-only status indicator that can be used to query the status of the send channel or null\n@see ChannelEndpointStatus for status values and indications.", "predict": "// SendChannelStatus sends channel activity values to the specified channel ..."}, {"ID": 1831, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (t *Transaction) deleteNumericOrBooleanIndex(fs *fieldSpec, ms *modelSpec, modelID string) { indexKey, err := ms.fieldIndexKey(fs.name) if err != nil { t.setError(err) } t.Command(\"ZREM\", redis.Args{indexKey, modelID}, nil) }\n\n    ### Response: // deleteNumericOrBooleanIndex removes the model from a numeric or boolean index for the given\n// field. I.e. it removes the model id from a sorted set..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static StatusIndicatorReader receiveChannelStatus(final CountersReader countersReader, final String channel) { StatusIndicatorReader statusReader = null; final MutableInteger id = new MutableInteger(-1); countersReader.forEach( (counterId, typeId, keyBuffer, label) -> { if (typeId == ReceiveChannelStatus.RECEIVE_CHANNEL_STATUS_TYPE_ID) { if (channel.startsWith(keyBuffer.getStringAscii(ChannelEndpointStatus.CHANNEL_OFFSET))) { id.value = counterId; } } }); if (Aeron.NULL_VALUE != id.value) { statusReader = new UnsafeBufferStatusIndicator(countersReader.valuesBuffer(), id.value); } return statusReader; }\n\n    ### Response:", "ground_truth": "Return the read-only status indicator for the given receive channel URI.\n\n@param countersReader that holds the status indicator.\n@param channel        for the receive channel.\n@return read-only status indicator that can be used to query the status of the receive channel or null.\n@see ChannelEndpointStatus for status values and indications.", "predict": "// This listener processes the CHANNEL_STATUS message to add the corresponding channel\n// name to the CHANNEL_STATUS_RECEIVERS map of the given counters reader."}, {"ID": 1832, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function getThemeFiles({ brand, affiliate }) { return [ path.join(__dirname, '/themes/_default.yaml'), path.join(__dirname, `/themes/${brand}/_default.yaml`), path.join(__dirname, `/themes/${brand}/${affiliate.toUpperCase()}/_default.yaml`) ].filter(fs.existsSync); }\n\n    ### Response: Get theme files in YAML format\n@param  {Object} options\n@param  {string} options.brand - cheaptickets\n@param  {string} options.affiliate - NL\n@return {String}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void limit(final int limit) { if (limit < 0 || limit >= buffer.capacity()) { throw new IllegalArgumentException( \"limit outside range: capacity=\" + buffer.capacity() + \" limit=\" + limit); } this.limit = limit; }\n\n    ### Response:", "ground_truth": "Set this limit for this buffer as the position at which the next append operation will occur.\n\n@param limit to be the new value.", "predict": "Limit given number of items to the capacity of the given list\npublic void limit(int limit) {\n    limit(limit < 0 || limit >= this.buffer.capacity() ? IllegalArgumentException :\n             limit < 0 || limit > this.buffer.capacity() ? IllegalStateException :\n             limit);\n    }"}, {"ID": 1833, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void copyRecordInfo(Record recDest, Record recSource, boolean bCopyEditMode, boolean bOnlyModifiedFields) { if (recDest == null) recDest = this.getCurrentRecord(); if (recDest != recSource) { boolean bAllowFieldChange = false; // This will disable field behaviors on move boolean bMoveModifiedState = true; // This will move the modified status to the new field Object[] rgobjEnabledFieldsOld = recSource.setEnableFieldListeners(false); recDest.moveFields(recSource, null, DBConstants.DONT_DISPLAY, DBConstants.READ_MOVE, bAllowFieldChange, bOnlyModifiedFields, bMoveModifiedState, false); recSource.setEnableFieldListeners(rgobjEnabledFieldsOld); if (bCopyEditMode) recDest.setEditMode(recSource.getEditMode()); // Okay? } }\n\n    ### Response: Set the current table target.\n@param table The new current table..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public BufferBuilder append(final DirectBuffer srcBuffer, final int srcOffset, final int length) { ensureCapacity(length); buffer.putBytes(limit, srcBuffer, srcOffset, length); limit += length; return this; }\n\n    ### Response:", "ground_truth": "Append a source buffer to the end of the internal buffer, resizing the internal buffer as required.\n\n@param srcBuffer from which to copy.\n@param srcOffset in the source buffer from which to copy.\n@param length    in bytes to copy from the source buffer.\n@return the builder for fluent API usage.", "predict": "Append bytes from source to target."}, {"ID": 1834, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def crontab(minute='*', hour='*', day='*', month='*', day_of_week='*'): \"\"\" Convert a \"crontab\"-style set of parameters into a test function that will return True when the given datetime matches the parameters set forth in the crontab. For day-of-week, 0=Sunday and 6=Saturday. Acceptable inputs: * = every distinct value */n = run every \"n\" times, i.e. hours='*/4' == 0, 4, 8, 12, 16, 20 m-n = run every time m..n m,n = run on m and n \"\"\" validation = ( ('m', month, range(1, 13)), ('d', day, range(1, 32)), ('w', day_of_week, range(8)), # 0-6, but also 7 for Sunday. ('H', hour, range(24)), ('M', minute, range(60)) ) cron_settings = [] for (date_str, value, acceptable) in validation: settings = set([]) if isinstance(value, int): value = str(value) for piece in value.split(','): if piece == '*': settings.update(acceptable) continue if piece.isdigit(): piece = int(piece) if piece not in acceptable: raise ValueError('%d is not a valid input' % piece) elif date_str == 'w': piece %= 7 settings.add(piece) else: dash_match = dash_re.match(piece) if dash_match: lhs, rhs = map(int, dash_match.groups()) if lhs not in acceptable or rhs not in acceptable: raise ValueError('%s is not a valid input' % piece) elif date_str == 'w': lhs %= 7 rhs %= 7 settings.update(range(lhs, rhs + 1)) continue # Handle stuff like */3, */6. every_match = every_re.match(piece) if every_match: if date_str == 'w': raise ValueError('Cannot perform this kind of matching' ' on day-of-week.') interval = int(every_match.groups()[0]) settings.update(acceptable[::interval]) cron_settings.append(sorted(list(settings))) def validate_date(timestamp): _, m, d, H, M, _, w, _, _ = timestamp.timetuple() # fix the weekday to be sunday=0 w = (w + 1) % 7 for (date_piece, selection) in zip((m, d, w, H, M), cron_settings): if date_piece not in selection: return False return True return validate_date\n\n    ### Response: Convert a \"crontab\"-style set of parameters into a test function that will\n    return True when the given datetime matches the parameters set forth in\n    the crontab.\n\n    For day-of-week, 0=Sunday and 6=Saturday.\n\n    Acceptable inputs:\n    * = every distinct value\n    */n = run every \"n\" times, i.e. hours='*/4' == 0, 4, 8, 12, 16, 20\n    m-n = run every time m..n\n    m,n = run on m and n.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int poll() { controlSessionId = -1; correlationId = -1; relevantId = -1; templateId = -1; errorMessage = null; pollComplete = false; return subscription.controlledPoll(fragmentAssembler, fragmentLimit); }\n\n    ### Response:", "ground_truth": "Poll for control response events.\n\n@return the number of fragments read during the operation. Zero if no events are available.", "predict": "Polls for items to appear on the UI for the given item controller."}, {"ID": 1835, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def dispatch_job_hook(self, link, key, job_config, logfile, stream=sys.stdout): \"\"\"Hook to dispatch a single job\"\"\" raise NotImplementedError(\"SysInterface.dispatch_job_hook\")\n\n    ### Response: Hook to dispatch a single job.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static MappedByteBuffer mapLossReport(final String aeronDirectoryName, final int reportFileLength) { return mapNewFile(file(aeronDirectoryName), reportFileLength, false); }\n\n    ### Response:", "ground_truth": "Map a new loss report in the Aeron directory for a given length.\n\n@param aeronDirectoryName in which to create the file.\n@param reportFileLength   for the file.\n@return the newly mapped buffer for the file.", "predict": "Map new file or directory name to given length of report file."}, {"ID": 1836, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def add_dependencies(self, module): \"\"\" Adds a module and its dependencies to the list of dependencies. Top-level entry point for adding a module and its dependecies. \"\"\" if module in self._processed_modules: return None if hasattr(module, \"__name__\"): mn = module.__name__ else: mn = '<unknown>' _debug.debug(\"add_dependencies:module=%s\", module) # If the module in which the class/function is defined is __main__, don't add it. Just add its dependencies. if mn == \"__main__\": self._processed_modules.add(module) # add the module as a dependency elif not self._add_dependency(module, mn): _debug.debug(\"add_dependencies:not added:module=%s\", mn) return None _debug.debug(\"add_dependencies:ADDED:module=%s\", mn) # recursively get the module's imports and add those as dependencies for dm in self._find_dependent_modules(module): _debug.debug(\"add_dependencies:adding dependent module %s for %s\", dm, mn) self.add_dependencies(dm)\n\n    ### Response: Adds a module and its dependencies to the list of dependencies.\n\n        Top-level entry point for adding a module and its dependecies..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Map<StreamCompositeKey, List<StreamPosition>> snapshot() { final Map<StreamCompositeKey, List<StreamPosition>> streams = new HashMap<>(); counters.forEach( (counterId, typeId, keyBuffer, label) -> { if ((typeId >= PUBLISHER_LIMIT_TYPE_ID && typeId <= RECEIVER_POS_TYPE_ID) || typeId == SENDER_LIMIT_TYPE_ID || typeId == PER_IMAGE_TYPE_ID || typeId == PUBLISHER_POS_TYPE_ID) { final StreamCompositeKey key = new StreamCompositeKey( keyBuffer.getInt(SESSION_ID_OFFSET), keyBuffer.getInt(STREAM_ID_OFFSET), keyBuffer.getStringAscii(CHANNEL_OFFSET)); final StreamPosition position = new StreamPosition( keyBuffer.getLong(REGISTRATION_ID_OFFSET), counters.getCounterValue(counterId), typeId); streams .computeIfAbsent(key, (ignore) -> new ArrayList<>()) .add(position); } }); return streams; }\n\n    ### Response:", "ground_truth": "Take a snapshot of all the counters and group them by streams.\n\n@return a snapshot of all the counters and group them by streams.", "predict": "This method creates a map of StreamCompositeKeys to StreamPositions for each StreamCounter found in the counters Map."}, {"ID": 1837, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function _checkSelected(array $options, $selectedVal) { if (!empty($selectedVal) && !Arr::key($selectedVal, $options)) { $selectedVal = self::KEY_NO_EXITS_VAL; $options = array_merge(array(self::KEY_NO_EXITS_VAL => $this->_translate('No exits')), $options); } return array($options, $selectedVal); }\n\n    ### Response: Check selected option in list.\n\n@param array $options\n@param string $selectedVal\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static UnsafeBuffer createDefaultHeader(final int sessionId, final int streamId, final int termId) { final UnsafeBuffer buffer = new UnsafeBuffer( BufferUtil.allocateDirectAligned(HEADER_LENGTH, CACHE_LINE_LENGTH)); buffer.putByte(VERSION_FIELD_OFFSET, CURRENT_VERSION); buffer.putByte(FLAGS_FIELD_OFFSET, (byte)BEGIN_AND_END_FLAGS); buffer.putShort(TYPE_FIELD_OFFSET, (short)HDR_TYPE_DATA, LITTLE_ENDIAN); buffer.putInt(SESSION_ID_FIELD_OFFSET, sessionId, LITTLE_ENDIAN); buffer.putInt(STREAM_ID_FIELD_OFFSET, streamId, LITTLE_ENDIAN); buffer.putInt(TERM_ID_FIELD_OFFSET, termId, LITTLE_ENDIAN); buffer.putLong(RESERVED_VALUE_OFFSET, DEFAULT_RESERVE_VALUE); return buffer; }\n\n    ### Response:", "ground_truth": "Return an initialised default Data Frame Header.\n\n@param sessionId for the header\n@param streamId  for the header\n@param termId    for the header\n@return byte array containing the header", "predict": "Allocate direct aligned memory to hold header information of specified length, writes header version, flags, type, session id, stream id, term id to appropriate locations, sets reserved value to default reserve, and returns the created header."}, {"ID": 1838, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def format_to_json(data): \"\"\"Converts `data` into json If stdout is a tty it performs a pretty print. \"\"\" if sys.stdout.isatty(): return json.dumps(data, indent=4, separators=(',', ': ')) else: return json.dumps(data)\n\n    ### Response: Converts `data` into json\n    If stdout is a tty it performs a pretty print..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public CounterMessageFlyweight keyBuffer(final DirectBuffer keyBuffer, final int keyOffset, final int keyLength) { buffer.putInt(KEY_LENGTH_OFFSET, keyLength); if (null != keyBuffer && keyLength > 0) { buffer.putBytes(keyBufferOffset(), keyBuffer, keyOffset, keyLength); } return this; }\n\n    ### Response:", "ground_truth": "Fill the key buffer.\n\n@param keyBuffer containing the optional key for the counter.\n@param keyOffset within the keyBuffer at which the key begins.\n@param keyLength of the key in the keyBuffer.\n@return flyweight", "predict": "Pretty prints the message"}, {"ID": 1839, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def to_stream(confirm_valid=false) return false unless !confirm_valid || self.validate.empty? Relationship.clear_cached_instances zip = write_parts(Zip::OutputStream.new(StringIO.new, true)) stream = zip.close_buffer stream.rewind stream end\n\n    ### Response: Serialize your workbook to a StringIO instance\n @param [Boolean] confirm_valid Validate the package prior to serialization.\n @return [StringIO|Boolean] False if confirm_valid and validation errors exist. rewound string IO if not..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public CounterMessageFlyweight labelBuffer( final DirectBuffer labelBuffer, final int labelOffset, final int labelLength) { buffer.putInt(labelOffset(), labelLength); buffer.putBytes(labelBufferOffset(), labelBuffer, labelOffset, labelLength); return this; }\n\n    ### Response:", "ground_truth": "Fill the label buffer.\n\n@param labelBuffer containing the mandatory label for the counter.\n@param labelOffset within the labelBuffer at which the label begins.\n@param labelLength of the label in the labelBuffer.\n@return flyweight", "predict": "Allocate an internal Direct Buffer to hold the serialized string length and serialized string."}, {"ID": 1840, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def reset(self): \"\"\" Reset the Path for use next time. \"\"\" self._x = self._start_x self._y = self._start_y\n\n    ### Response: Reset the Path for use next time..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean connect(final String responseChannel, final int responseStreamId, final long correlationId) { connectRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .correlationId(correlationId) .responseStreamId(responseStreamId) .version(AeronArchive.Configuration.SEMANTIC_VERSION) .responseChannel(responseChannel); return offerWithTimeout(connectRequestEncoder.encodedLength(), null); }\n\n    ### Response:", "ground_truth": "Connect to an archive on its control interface providing the response stream details.\n\n@param responseChannel  for the control message responses.\n@param responseStreamId for the control message responses.\n@param correlationId    for this request.\n@return true if successfully offered otherwise false.", "predict": "connectRequestEncoder wraps and applies header to the given buffer. It sets correlation id to the given correlation id, and sets response stream id to the given response stream id, and version to AeronArchive.Configuration.SEMANTIC_VERSION. It writes the given responseChannel to the header, and writes length of the request in bytes to the header."}, {"ID": 1841, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def bulk_upsert(self, docs, namespace, timestamp): \"\"\"Upsert each document in a set of documents. This method may be overridden to upsert many documents at once. \"\"\" for doc in docs: self.upsert(doc, namespace, timestamp)\n\n    ### Response: Upsert each document in a set of documents.\n\n        This method may be overridden to upsert many documents at once..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean tryConnect(final String responseChannel, final int responseStreamId, final long correlationId) { connectRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .correlationId(correlationId) .responseStreamId(responseStreamId) .version(AeronArchive.Configuration.SEMANTIC_VERSION) .responseChannel(responseChannel); final int length = MessageHeaderEncoder.ENCODED_LENGTH + connectRequestEncoder.encodedLength(); return publication.offer(buffer, 0, length) > 0; }\n\n    ### Response:", "ground_truth": "Try Connect to an archive on its control interface providing the response stream details. Only one attempt will\nbe made to offer the request.\n\n@param responseChannel  for the control message responses.\n@param responseStreamId for the control message responses.\n@param correlationId    for this request.\n@return true if successfully offered otherwise false.", "predict": "connectRequestEncoder wraps and applies header to the given buffer. connectRequestEncoder may be overridden to customize header wrap and apply behavior for each message type.. connectRequestEncoder may also be customized to add header fields to each message to differentiate messages of different types.. connectRequestEncoder may also add header fields to differentiate messages intended for different destinations.. connectRequestEncoder may also add header fields to differentiate messages intended for different destinations.. connectRequestEncoder may also add header fields to differentiate messages intended for different destinations.. connectRequestEncoder may also add header fields to differentiate messages intended for different destinations.. connectRequestEncoder may also add header fields to differentiate messages intended for different destinations.. connectRequestEncoder may also add header fields to differentiate messages intended for different destinations.. connectRequestEncoder may also add header fields to differentiate messages intended for different destinations.. connectRequestEncoder may also add header fields to differentiate messages intended for different destinations.. connectRequestEncoder may"}, {"ID": 1842, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean startsWithAFilteredPAttern(String string) { Iterator<String> iterator = filteredFrames.iterator(); while (iterator.hasNext()) { if (string.trim().startsWith(iterator.next())) { return true; } } return false; }\n\n    ### Response: Check if the given string starts with any of the filtered patterns.\n@param string checked String\n@return true if the begininning of the string matches a filtered pattern, false\notherwise.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean closeSession(final long controlSessionId) { closeSessionRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId); return offer(closeSessionRequestEncoder.encodedLength()); }\n\n    ### Response:", "ground_truth": "Close this control session with the archive.\n\n@param controlSessionId with the archive.\n@return true if successfully offered otherwise false.", "predict": "Closes the given session by sending the appropriate request to the GSS mechanism with the given control session id."}, {"ID": 1843, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (mt *AccountLink) Validate() (err error) { if mt.Href == \"\" { err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, \"href\")) } return }\n\n    ### Response: // Validate validates the AccountLink media type instance..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean startRecording( final String channel, final int streamId, final SourceLocation sourceLocation, final long correlationId, final long controlSessionId) { startRecordingRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .streamId(streamId) .sourceLocation(sourceLocation) .channel(channel); return offer(startRecordingRequestEncoder.encodedLength()); }\n\n    ### Response:", "ground_truth": "Start recording streams for a given channel and stream id pairing.\n\n@param channel          to be recorded.\n@param streamId         to be recorded.\n@param sourceLocation   of the publication to be recorded.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "// startRecording handles the request to start recording media for the given source location, channel, stream id, correlation id, and control session id.."}, {"ID": 1844, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (d diffMessage) JSON() string { d.Status = \"success\" diffJSONBytes, e := json.MarshalIndent(d, \"\", \" \") fatalIf(probe.NewError(e), \"Unable to marshal diff message `\"+d.FirstURL+\"`, `\"+d.SecondURL+\"` and `\"+string(d.Diff)+\"`.\") return string(diffJSONBytes) }\n\n    ### Response: // JSON jsonified diff message.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean stopRecording( final String channel, final int streamId, final long correlationId, final long controlSessionId) { stopRecordingRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .streamId(streamId) .channel(channel); return offer(stopRecordingRequestEncoder.encodedLength()); }\n\n    ### Response:", "ground_truth": "Stop an active recording.\n\n@param channel          to be stopped.\n@param streamId         to be stopped.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "// Stops recording the given channel and correlates the recorded stream to the given channel and correlation id"}, {"ID": 1845, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (f *gzipWriter) Close() error { var errors []error if f.Writer != nil { errors = append(errors, f.Writer.Close()) f.Writer.Reset(ioutil.Discard) writerPool.Put(f.Writer) f.Writer = nil } if f.file != nil { errors = append(errors, f.file.Close()) f.file = nil } return trace.NewAggregate(errors...) }\n\n    ### Response: // Close closes gzip writer and file.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean replay( final long recordingId, final long position, final long length, final String replayChannel, final int replayStreamId, final long correlationId, final long controlSessionId) { replayRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .recordingId(recordingId) .position(position) .length(length) .replayStreamId(replayStreamId) .replayChannel(replayChannel); return offer(replayRequestEncoder.encodedLength()); }\n\n    ### Response:", "ground_truth": "Replay a recording from a given position.\n\n@param recordingId      to be replayed.\n@param position         from which the replay should be started.\n@param length           of the stream to be replayed. Use {@link Long#MAX_VALUE} to follow a live stream.\n@param replayChannel    to which the replay should be sent.\n@param replayStreamId   to which the replay should be sent.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "The replay function sends request header to the gRPC server to request for replaying the given recording with the given parameters."}, {"ID": 1846, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def getResultsRange(self): \"\"\"Returns the valid result range for this reference analysis based on the results ranges defined in the Reference Sample from which this analysis has been created. A Reference Analysis (control or blank) will be considered out of range if its results does not match with the result defined on its parent Reference Sample, with the % error as the margin of error, that will be used to set the range's min and max values :return: A dictionary with the keys min and max :rtype: dict \"\"\" specs = ResultsRangeDict(result=\"\") sample = self.getSample() if not sample: return specs service_uid = self.getServiceUID() sample_range = sample.getResultsRangeDict() return sample_range.get(service_uid, specs)\n\n    ### Response: Returns the valid result range for this reference analysis based on\n        the results ranges defined in the Reference Sample from which this\n        analysis has been created.\n\n        A Reference Analysis (control or blank) will be considered out of range\n        if its results does not match with the result defined on its parent\n        Reference Sample, with the % error as the margin of error, that will be\n        used to set the range's min and max values\n        :return: A dictionary with the keys min and max\n        :rtype: dict.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean stopReplay(final long replaySessionId, final long correlationId, final long controlSessionId) { stopReplayRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .replaySessionId(replaySessionId); return offer(replayRequestEncoder.encodedLength()); }\n\n    ### Response:", "ground_truth": "Stop an existing replay session.\n\n@param replaySessionId  that should be stopped.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Stops the replay of the given correlation ID on the given control session ID, and resets the given replay session ID to 0L for the next replay request"}, {"ID": 1847, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def apply_to_segmentlist(self, seglist): \"\"\" Apply our low and high windows to the segments in a segmentlist. \"\"\" for i, seg in enumerate(seglist): seglist[i] = seg.__class__(seg[0] - self.low_window, seg[1] + self.high_window)\n\n    ### Response: Apply our low and high windows to the segments in a\n\t\tsegmentlist..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean listRecordings( final long fromRecordingId, final int recordCount, final long correlationId, final long controlSessionId) { listRecordingsRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .fromRecordingId(fromRecordingId) .recordCount(recordCount); return offer(listRecordingsRequestEncoder.encodedLength()); }\n\n    ### Response:", "ground_truth": "List a range of recording descriptors.\n\n@param fromRecordingId  at which to begin listing.\n@param recordCount      for the number of descriptors to be listed.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "listRecordingsProcess encodes a listRecordings request message to send to the ExoPlayer server to retrieve corresponding recordings meta data. It contains information such as correlation id of the request, from recording id, record count and control session id of the requesting client. It offers encoded length of the request message to send to the ExoPlayer server."}, {"ID": 1848, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void cancelHadoopTokens(HadoopSecurityManager hadoopSecurityManager, String userToProxy, File tokenFile, Logger log) { if (tokenFile == null) { return; } try { hadoopSecurityManager.cancelTokens(tokenFile, userToProxy, log); } catch (HadoopSecurityManagerException e) { log.error(e.getCause() + e.getMessage()); } catch (Exception e) { log.error(e.getCause() + e.getMessage()); } if (tokenFile.exists()) { tokenFile.delete(); } }\n\n    ### Response: Invalidates a Hadoop authentication token file.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean listRecordingsForUri( final long fromRecordingId, final int recordCount, final String channelFragment, final int streamId, final long correlationId, final long controlSessionId) { listRecordingsForUriRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .fromRecordingId(fromRecordingId) .recordCount(recordCount) .streamId(streamId) .channel(channelFragment); return offer(listRecordingsForUriRequestEncoder.encodedLength()); }\n\n    ### Response:", "ground_truth": "List a range of recording descriptors which match a channel URI fragment and stream id.\n\n@param fromRecordingId  at which to begin listing.\n@param recordCount      for the number of descriptors to be listed.\n@param channelFragment  to match recordings on from the original channel URI in the archive descriptor.\n@param streamId         to match recordings on.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "List recordings given specified parameters of from recording id, recording count, channel fragment, stream id, correlation id and control session id of the given recording"}, {"ID": 1849, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function throttle() { if ((time() - $this->lastCpuCheck) >= $this->cpuCheckFrequency) { $load = sys_getloadavg(); if ($load[0]/$this->cpuCount >= $this->cpuTarget) { $this->pause += $this->throttleSensitivity; $this->controller->notify('Daemon throttling down'); } else { $this->pause -= $this->throttleSensitivity; $this->controller->notify('Daemon throttling up'); } $this->lastCpuCheck = time(); } // Never allow pause to dip below 1 microsecond if ($this->pause < 1) { $this->pause = 1; } return $this->pause; }\n\n    ### Response: Determine the throttle execution time, available to the public\n@return integer   microseconds.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean listRecording(final long recordingId, final long correlationId, final long controlSessionId) { listRecordingRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .recordingId(recordingId); return offer(listRecordingRequestEncoder.encodedLength()); }\n\n    ### Response:", "ground_truth": "List a recording descriptor for a given recording id.\n\n@param recordingId      at which to begin listing.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Examines values of correlation id, control session id and recording id to determine status of recording"}, {"ID": 1850, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void put( final CacheKey key, EncodedImage encodedImage) { try { if (FrescoSystrace.isTracing()) { FrescoSystrace.beginSection(\"BufferedDiskCache#put\"); } Preconditions.checkNotNull(key); Preconditions.checkArgument(EncodedImage.isValid(encodedImage)); // Store encodedImage in staging area mStagingArea.put(key, encodedImage); // Write to disk cache. This will be executed on background thread, so increment the ref // count. When this write completes (with success/failure), then we will bump down the // ref count again. final EncodedImage finalEncodedImage = EncodedImage.cloneOrNull(encodedImage); try { mWriteExecutor.execute( new Runnable() { @Override public void run() { try { if (FrescoSystrace.isTracing()) { FrescoSystrace.beginSection(\"BufferedDiskCache#putAsync\"); } writeToDiskCache(key, finalEncodedImage); } finally { mStagingArea.remove(key, finalEncodedImage); EncodedImage.closeSafely(finalEncodedImage); if (FrescoSystrace.isTracing()) { FrescoSystrace.endSection(); } } } }); } catch (Exception exception) { // We failed to enqueue cache write. Log failure and decrement ref count // TODO: 3697790 FLog.w(TAG, exception, \"Failed to schedule disk-cache write for %s\", key.getUriString()); mStagingArea.remove(key, encodedImage); EncodedImage.closeSafely(finalEncodedImage); } } finally { if (FrescoSystrace.isTracing()) { FrescoSystrace.endSection(); } } }\n\n    ### Response: Associates encodedImage with given key in disk cache. Disk write is performed on background\nthread, so the caller of this method is not blocked.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean extendRecording( final String channel, final int streamId, final SourceLocation sourceLocation, final long recordingId, final long correlationId, final long controlSessionId) { extendRecordingRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .recordingId(recordingId) .streamId(streamId) .sourceLocation(sourceLocation) .channel(channel); return offer(extendRecordingRequestEncoder.encodedLength()); }\n\n    ### Response:", "ground_truth": "Extend an existing, non-active, recorded stream for a the same channel and stream id.\n\nThe channel must be configured for the initial position from which it will be extended. This can be done\nwith {@link ChannelUriStringBuilder#initialPosition(long, int, int)}. The details required to initialise can\nbe found by calling {@link #listRecording(long, long, long)}.\n\n@param channel          to be recorded.\n@param streamId         to be recorded.\n@param sourceLocation   of the publication to be recorded.\n@param recordingId      to be extended.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Extends recording for the given source location, channel, stream id, recording id, correlation id and control session id to the disk cache."}, {"ID": 1851, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def reg_concrete(self, *args, **kwargs): \"\"\" Returns the contents of a register but, if that register is symbolic, raises a SimValueError. \"\"\" e = self.registers.load(*args, **kwargs) if self.solver.symbolic(e): raise SimValueError(\"target of reg_concrete is symbolic!\") return self.solver.eval(e)\n\n    ### Response: Returns the contents of a register but, if that register is symbolic,\n        raises a SimValueError..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean getRecordingPosition(final long recordingId, final long correlationId, final long controlSessionId) { recordingPositionRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .recordingId(recordingId); return offer(recordingPositionRequestEncoder.encodedLength()); }\n\n    ### Response:", "ground_truth": "Get the recorded position of an active recording.\n\n@param recordingId      of the active recording that the position is being requested for.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "The function generates a request message to fetch the recorded position of the specified recording ID and correlations ID under the specified control session ID. It sends this request message over the network to the specified address to fetch the recorded position of the specified recording ID and correlations ID under the specified control session ID."}, {"ID": 1852, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function validatePreset(Preset $preset) { foreach ($preset->getOptions() as $key => $value) { if (!isset($this->handbrake_conversion[$key])) { throw new \\InvalidArgumentException(sprintf(\"Unknown input argument {%s} in adapter {%s}.\", $key, $this->getKey())); } } }\n\n    ### Response: Check that given keys have actual handbrake equivalents\n\n{@inheritdoc}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean getStopPosition(final long recordingId, final long correlationId, final long controlSessionId) { stopPositionRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .recordingId(recordingId); return offer(stopPositionRequestEncoder.encodedLength()); }\n\n    ### Response:", "ground_truth": "Get the stop position of a recording.\n\n@param recordingId      of the recording that the stop position is being requested for.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Get the location of the recorded media file to be stopped, given the corresponding recording id, correlation id, and control session id of the request"}, {"ID": 1853, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewResourceStore() *ResourceStore { return &ResourceStore{ SecretStore: make(map[string]*corev1.Secret), ConfigMapStore: make(map[string]*corev1.ConfigMap), } }\n\n    ### Response: // NewResourceStore returns a pointer to a new resource store data structure..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean listRecordingSubscriptions( final int pseudoIndex, final int subscriptionCount, final String channelFragment, final int streamId, final boolean applyStreamId, final long correlationId, final long controlSessionId) { listRecordingSubscriptionsRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .pseudoIndex(pseudoIndex) .subscriptionCount(subscriptionCount) .applyStreamId(applyStreamId ? BooleanType.TRUE : BooleanType.FALSE) .streamId(streamId) .channel(channelFragment); return offer(listRecordingSubscriptionsRequestEncoder.encodedLength()); }\n\n    ### Response:", "ground_truth": "List registered subscriptions in the archive which have been used to record streams.\n\n@param pseudoIndex       in the list of active recording subscriptions.\n@param subscriptionCount for the number of descriptors to be listed.\n@param channelFragment   for a contains match on the stripped channel used with the registered subscription.\n@param streamId          for the subscription.\n@param applyStreamId     when matching.\n@param correlationId     for this request.\n@param controlSessionId  for this request.\n@return true if successfully offered otherwise false.", "predict": "The listRecordingSubscriptions() method sends list recording subscriptions request to the ExoPlayer server to retrieve the list of recording subscriptions matching the given parameters to the server. It uses the ExoPlayer protocol buffers to send the request to the server and receives data back in encoded form which is then decoded and used to retrieve the list of recording subscriptions matching the given parameters."}, {"ID": 1854, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Object setBeanProperties(MetaClass mc, Object bean, Map properties) { for (Iterator iter = properties.entrySet().iterator(); iter.hasNext();) { Map.Entry entry = (Map.Entry) iter.next(); String key = entry.getKey().toString(); Object value = entry.getValue(); mc.setProperty(bean, key, value); } return bean; }\n\n    ### Response: This method is called by he handle to realize the bean constructor\nwith property map..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean matchesTag(final UdpChannel udpChannel) { if (!hasTag || !udpChannel.hasTag() || tag != udpChannel.tag()) { return false; } if (udpChannel.remoteData().getAddress().isAnyLocalAddress() && udpChannel.remoteData().getPort() == 0 && udpChannel.localData().getAddress().isAnyLocalAddress() && udpChannel.localData().getPort() == 0) { return true; } throw new IllegalArgumentException(\"matching tag has set endpoint or control address\"); }\n\n    ### Response:", "ground_truth": "Does this channel have a tag match to another channel including endpoints.\n\n@param udpChannel to match against.\n@return true if there is a match otherwise false.", "predict": "Matches the given tag on the given channel"}, {"ID": 1855, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def init_gpg(self): \"\"\" Initialize gpg object and check if repository signing key is trusted \"\"\" if self.gpg_verify: logger.debug(\"gpg verification enabled, initializing gpg\") gpg_home = os.path.expanduser('~/.gnupg') self.gpg = gnupg.GPG(gnupghome=gpg_home) self.key_path, self.key_info = self.get_signing_key() logger.debug(\"{0} {1}\".format(self.key_path, self.key_info)) self.check_signing_key()\n\n    ### Response: Initialize gpg object and check if repository signing key is trusted.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static InetSocketAddress destinationAddress(final ChannelUri uri) { try { validateConfiguration(uri); return getEndpointAddress(uri); } catch (final Exception ex) { throw new InvalidChannelException(ErrorCode.INVALID_CHANNEL, ex); } }\n\n    ### Response:", "ground_truth": "Get the endpoint address from the URI.\n\n@param uri to check\n@return endpoint address for URI", "predict": "\n    The method destinationAddress(ChannelUri uri) resolves the given uri to an InetSocketAddress to send data to the given host and port of the given uri. It first checks if the configuration of the host and port of the given uri is valid by calling the validateConfiguration() method of the UriUtils class, and if the given uri is malformed, or if there is a configuration problem, then the InvalidChannelException exception is thrown to signal the error to the caller of this method. After the given uri has been successfully verified to be in an expected format, its endpoint address (host and port) is retrieved and used to create the InetSocketAddress to send data to the given host and port of the given uri."}, {"ID": 1856, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function convert(array $config) { foreach ($config as $index => $data) { if (is_array($data)) { $config[$index] = new Config($data); } } return $config; }\n\n    ### Response: Convert each sub array in an own config instance.\n\n@param array $config\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String description() { final StringBuilder builder = new StringBuilder(\"UdpChannel - \"); if (null != localInterface) { builder .append(\"interface: \") .append(localInterface.getDisplayName()) .append(\", \"); } builder .append(\"localData: \").append(localData) .append(\", remoteData: \").append(remoteData) .append(\", ttl: \").append(multicastTtl); return builder.toString(); }\n\n    ### Response:", "ground_truth": "Used for debugging to get a human readable description of the channel.\n\n@return a human readable description of the channel.", "predict": "Describe UdpChannel and its fields"}, {"ID": 1857, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def clean_cache(cached, **kwargs): \" Generate cache key and clean cached value. \" if isinstance(cached, basestring): cached = _str_to_model(cached) cache_key = generate_cache_key(cached, **kwargs) cache.delete(cache_key)\n\n    ### Response: Generate cache key and clean cached value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void addDestination(final int transportIndex, final ReceiveDestinationUdpTransport transport) { imageConnections = ArrayUtil.ensureCapacity(imageConnections, transportIndex + 1); if (transport.isMulticast()) { imageConnections[transportIndex] = new ImageConnection( cachedNanoClock.nanoTime(), transport.udpChannel().remoteControl()); } else if (transport.hasExplicitControl()) { imageConnections[transportIndex] = new ImageConnection( cachedNanoClock.nanoTime(), transport.explicitControlAddress()); } }\n\n    ### Response:", "ground_truth": "Add a destination to this image so it can merge streams.\n\n@param transportIndex from which packets will arrive.\n@param transport      from which packets will arrive.", "predict": "Generates cache key and cleans cached value.."}, {"ID": 1858, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void resolve (Observer observer) { // if we were waiting to unload, cancel that if (_state == UNLOADING) { _state = LOADED; _manager.restoreClip(this); } // if we're already loaded, this is easy if (_state == LOADED) { if (observer != null) { observer.clipLoaded(this); } return; } // queue up the observer if (observer != null) { _observers.add(observer); } // if we're already loading, we can stop here if (_state == LOADING) { return; } // create our OpenAL buffer and then queue ourselves up to have // our clip data loaded AL10.alGetError(); // throw away any unchecked error prior to an op we want to check _buffer = new Buffer(_manager); int errno = AL10.alGetError(); if (errno != AL10.AL_NO_ERROR) { log.warning(\"Failed to create buffer [key=\" + getKey() + \", errno=\" + errno + \"].\"); _buffer = null; // queue up a failure notification so that we properly return // from this method and our sound has a chance to register // itself as an observer before we jump up and declare failure _manager.queueClipFailure(this); } else { _state = LOADING; _manager.queueClipLoad(this); } }\n\n    ### Response: Instructs this buffer to resolve its underlying clip and be ready\nto be played ASAP..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    int insertPacket( final int termId, final int termOffset, final UnsafeBuffer buffer, final int length, final int transportIndex, final InetSocketAddress srcAddress) { final boolean isHeartbeat = DataHeaderFlyweight.isHeartbeat(buffer, length); final long packetPosition = computePosition(termId, termOffset, positionBitsToShift, initialTermId); final long proposedPosition = isHeartbeat ? packetPosition : packetPosition + length; if (!isFlowControlUnderRun(packetPosition) && !isFlowControlOverRun(proposedPosition)) { trackConnection(transportIndex, srcAddress, lastPacketTimestampNs); if (isHeartbeat) { if (DataHeaderFlyweight.isEndOfStream(buffer) && !isEndOfStream && allEos(transportIndex)) { LogBufferDescriptor.endOfStreamPosition(rawLog.metaData(), proposedPosition); isEndOfStream = true; } heartbeatsReceived.incrementOrdered(); } else { final UnsafeBuffer termBuffer = termBuffers[indexByPosition(packetPosition, positionBitsToShift)]; TermRebuilder.insert(termBuffer, termOffset, buffer, length); } lastPacketTimestampNs = cachedNanoClock.nanoTime(); hwmPosition.proposeMaxOrdered(proposedPosition); } return length; }\n\n    ### Response:", "ground_truth": "Insert frame into term buffer.\n\n@param termId         for the data packet to insert into the appropriate term.\n@param termOffset     for the start of the packet in the term.\n@param buffer         for the data packet to insert into the appropriate term.\n@param length         of the data packet\n@param transportIndex which the packet came from.\n@param srcAddress     which the packet came from.\n@return number of bytes applied as a result of this insertion.", "predict": "Inserts data from the given source (buffer, length) at the given (termOffset, position) into the given terminal."}, {"ID": 1859, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def ParseOptions(self, options): \"\"\"Parses tool specific options. Args: options (argparse.Namespace): command line arguments. Raises: BadConfigOption: if the options are invalid. \"\"\" # The extraction options are dependent on the data location. helpers_manager.ArgumentHelperManager.ParseOptions( options, self, names=['data_location']) self._ReadParserPresetsFromFile() # The output modules options are dependent on the preferred language # and preferred time zone options. self._ParseTimezoneOption(options) argument_helper_names = [ 'artifact_definitions', 'hashers', 'language', 'parsers'] helpers_manager.ArgumentHelperManager.ParseOptions( options, self, names=argument_helper_names) self.list_hashers = self._hasher_names_string == 'list' self.list_language_identifiers = self._preferred_language == 'list' self.list_parsers_and_plugins = self._parser_filter_expression == 'list' # Check the list options first otherwise required options will raise. if (self.list_hashers or self.list_language_identifiers or self.list_parsers_and_plugins or self.list_timezones): return # Check output modules after the other listable options, otherwise # it could raise with \"requires an output file\". helpers_manager.ArgumentHelperManager.ParseOptions( options, self, names=['output_modules']) self.list_output_modules = self._output_format == 'list' if self.list_output_modules: return self._ParseInformationalOptions(options) argument_helper_names = ['extraction', 'status_view'] helpers_manager.ArgumentHelperManager.ParseOptions( options, self, names=argument_helper_names) self._ParseLogFileOptions(options) self._ParseStorageMediaOptions(options) self._ParsePerformanceOptions(options) self._ParseProcessingOptions(options) self._storage_file_path = getattr(options, 'storage_file', None) if not self._storage_file_path: self._storage_file_path = self._GenerateStorageFileName() self._output_filename = getattr(options, 'write', None) if not self._output_filename: raise errors.BadConfigOption(( 'Output format: {0:s} requires an output file ' '(-w OUTPUT_FILE)').format(self._output_format)) if os.path.exists(self._output_filename): raise errors.BadConfigOption( 'Output file already exists: {0:s}.'.format(self._output_filename)) self._EnforceProcessMemoryLimit(self._process_memory_limit) self._output_module = self._CreateOutputModule(options)\n\n    ### Response: Parses tool specific options.\n\n    Args:\n      options (argparse.Namespace): command line arguments.\n\n    Raises:\n      BadConfigOption: if the options are invalid..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static AtomicCounter findControlToggle(final CountersReader counters) { final AtomicBuffer buffer = counters.metaDataBuffer(); for (int i = 0, size = counters.maxCounterId(); i < size; i++) { final int recordOffset = CountersReader.metaDataOffset(i); if (counters.getCounterState(i) == RECORD_ALLOCATED && buffer.getInt(recordOffset + TYPE_ID_OFFSET) == CONTROL_TOGGLE_TYPE_ID) { return new AtomicCounter(counters.valuesBuffer(), i, null); } } return null; }\n\n    ### Response:", "ground_truth": "Find the control toggle counter or return null if not found.\n\n@param counters to search for the control toggle.\n@return the control toggle counter or return null if not found.", "predict": "Parses command line arguments to retrieve the toggle counter for the given control."}, {"ID": 1860, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function find($id = NULL) { if ($id !== NULL) { $data = $this->getData(); $this->currentId = $id; $this->currentKey = $this->getRowKey($id); foreach ($data[$this->currentKey] as $field => $value) { $this->setField($field, $value); } } else { $this->limit(1)->findAll(); $data = $this->data; if (count($data)) { foreach ($data[0] as $field => $value) { $this->setField($field, $value); } $this->currentId = $this->getField('id'); $this->currentKey = $this->getRowKey($this->currentId); } } return clone $this; }\n\n    ### Response: Returns one row with specified ID\n@param integer $id Row ID\n@return self.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String put(final String key, final String value) { return params.put(key, value); }\n\n    ### Response:", "ground_truth": "Put a key and value pair in the map of params.\n\n@param key   of the param to be put.\n@param value of the param to be put.\n@return the existing value otherwise null.", "predict": "Stores the given key,value pair in the params Map and returns the updated Map"}, {"ID": 1861, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T extends ImageBase<T>,O extends CameraPinhole, D extends CameraPinhole> ImageDistort<T,T> changeCameraModel(AdjustmentType type, BorderType borderType, O original, D desired, D modified, ImageType<T> imageType) { Class bandType = imageType.getImageClass(); boolean skip = borderType == BorderType.SKIP; // it has to process the border at some point, so if skip is requested just skip stuff truly outside the image if( skip ) borderType = BorderType.EXTENDED; InterpolatePixelS interp = FactoryInterpolation.createPixelS(0, 255, InterpolationType.BILINEAR,borderType, bandType); Point2Transform2_F32 undistToDist = LensDistortionOps_F32.transformChangeModel(type, original, desired, true, modified); ImageDistort<T,T> distort = FactoryDistort.distort(true, interp, imageType); distort.setModel(new PointToPixelTransform_F32(undistToDist)); distort.setRenderAll(!skip ); return distort; }\n\n    ### Response: Creates a distortion for modifying the input image from one camera model into another camera model.  If\nrequested the camera model can be further modified to ensure certain visibility requirements are meet\nand the adjusted camera model will be returned.\n@param type How it should modify the image model to ensure visibility of pixels.\n@param borderType How the image border is handled\n@param original The original camera model\n@param desired The desired camera model\n@param modified (Optional) The desired camera model after being rescaled.  Can be null.\n@param imageType Type of image.\n@return Image distortion from original camera model to the modified one..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String channelTag() { return (null != tags && tags.length > CHANNEL_TAG_INDEX) ? tags[CHANNEL_TAG_INDEX] : null; }\n\n    ### Response:", "ground_truth": "Get the channel tag, if it exists, that refers to an another channel.\n\n@return channel tag if it exists or null if not in this URI.\n@see CommonContext#TAGS_PARAM_NAME\n@see CommonContext#TAG_PREFIX", "predict": "Returns the channel tag of the specified color image, or null if no channel tag is defined in the image."}, {"ID": 1862, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void updateBounds () { // invalidate the old... invalidate(); // size the bounds to fit our label Dimension size = _label.getSize(); _bounds.width = size.width + PADDING*2 + (_style == ROUNDED ? _arcWidth : 0); _bounds.height = size.height + PADDING*2; // ...and the new invalidate(); }\n\n    ### Response: Updates this sprite's bounds after a change to the label..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String entityTag() { return (null != tags && tags.length > ENTITY_TAG_INDEX) ? tags[ENTITY_TAG_INDEX] : null; }\n\n    ### Response:", "ground_truth": "Get the entity tag, if it exists, that refers to an entity such as subscription or publication.\n\n@return entity tag if it exists or null if not in this URI.\n@see CommonContext#TAGS_PARAM_NAME\n@see CommonContext#TAG_PREFIX", "predict": "Returns the entity tag of the sprite"}, {"ID": 1863, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (f *LevelFilter) Check(line []byte) bool { f.once.Do(f.init) // Check for a log level var level LogLevel x := bytes.IndexByte(line, '[') if x >= 0 { y := bytes.IndexByte(line[x:], ']') if y >= 0 { level = LogLevel(line[x+1 : x+y]) } } _, ok := f.badLevels[level] return !ok }\n\n    ### Response: // Check will check a given line if it would be included in the level\n// filter..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String addSessionId(final String channel, final int sessionId) { final ChannelUri channelUri = ChannelUri.parse(channel); channelUri.put(CommonContext.SESSION_ID_PARAM_NAME, Integer.toString(sessionId)); return channelUri.toString(); }\n\n    ### Response:", "ground_truth": "Add a sessionId to a given channel.\n\n@param channel   to add sessionId to.\n@param sessionId to add to channel.\n@return new string that represents channel with sessionId added.", "predict": "// This method generates the session id string from the given channel parameter and an int parameter\n    // It uses the UriTemplate to add the session id to the given channel parameter"}, {"ID": 1864, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (ab *AtomicBool) Set(newVal bool) { var i int32 if newVal { i = 1 } atomic.StoreInt32(&(ab.val), int32(i)) }\n\n    ### Response: // Set atomically sets the boolean value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long getTag(final String paramValue) { return isTagged(paramValue) ? AsciiEncoding.parseLongAscii(paramValue, 4, paramValue.length() - 4) : INVALID_TAG; }\n\n    ### Response:", "ground_truth": "Get the value of the tag from a given parameter value.\n\n@param paramValue to extract the tag value from.\n@return the value of the tag or {@link #INVALID_TAG} if not tagged.\n@see CommonContext#TAGS_PARAM_NAME\n@see CommonContext#TAG_PREFIX", "predict": "// Gets the tag of the given string parameter, or an invalid tag if the parameter does not contain the reserved word"}, {"ID": 1865, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def addMatch(self, callback, mtype=None, sender=None, interface=None, member=None, path=None, path_namespace=None, destination=None, arg=None, arg_path=None, arg0namespace=None): \"\"\" Creates a message matching rule, associates it with the specified callback function, and sends the match rule to the DBus daemon. The arguments to this function are exactly follow the DBus specification. Refer to the \\\"Message Bus Message Routing\\\" section of the DBus specification for details. @rtype: C{int} @returns: a L{Deferred} to an integer id that may be used to unregister the match rule \"\"\" l = [] def add(k, v): if v is not None: l.append(\"%s='%s'\" % (k, v)) add('type', mtype) add('sender', sender) add('interface', interface) add('member', member) add('path', path) add('path_namespace', path_namespace) add('destination', destination) if arg: for idx, v in arg: add('arg%d' % (idx,), v) if arg_path: for idx, v in arg_path: add('arg%dpath' % (idx,), v) add('arg0namespace', arg0namespace) rule = ','.join(l) d = self.callRemote( '/org/freedesktop/DBus', 'AddMatch', interface='org.freedesktop.DBus', destination='org.freedesktop.DBus', body=[rule], signature='s', ) def ok(_): rule_id = self.router.addMatch( callback, mtype, sender, interface, member, path, path_namespace, destination, arg, arg_path, arg0namespace, ) self.match_rules[rule_id] = rule return rule_id d.addCallbacks(ok) return d\n\n    ### Response: Creates a message matching rule, associates it with the specified\n        callback function, and sends the match rule to the DBus daemon.\n        The arguments to this function are exactly follow the DBus\n        specification.  Refer to the \\\"Message Bus Message Routing\\\" section of\n        the DBus specification for details.\n\n        @rtype: C{int}\n        @returns: a L{Deferred} to an integer id that may be used to unregister\n            the match rule.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int appendPadding( final int termId, final int termOffset, final HeaderWriter header, final int length) { final int frameLength = length + HEADER_LENGTH; final int alignedLength = align(frameLength, FRAME_ALIGNMENT); final UnsafeBuffer termBuffer = this.termBuffer; final int termLength = termBuffer.capacity(); int resultingOffset = termOffset + alignedLength; putRawTailOrdered(termId, resultingOffset); if (resultingOffset > termLength) { resultingOffset = handleEndOfLogCondition(termBuffer, termOffset, header, termLength, termId); } else { header.write(termBuffer, termOffset, frameLength, termId); frameType(termBuffer, termOffset, PADDING_FRAME_TYPE); frameLengthOrdered(termBuffer, termOffset, frameLength); } return resultingOffset; }\n\n    ### Response:", "ground_truth": "Pad a length of the term buffer with a padding record.\n\n@param termId     for the current term.\n@param termOffset in the term at which to append.\n@param header     for writing the default header.\n@param length     of the padding to be written.\n@return the resulting offset of the term after success otherwise {@link #FAILED}.", "predict": "Generates padding bytes to match the length of the header,\n    writing to termOffset, but not changing the length of the log entry,\n    when HEADER_LENGTH bytes of padding are added to the log entry length of\n    termOffset and length of padding frame of termOffset and padding frame\n    length of termOffset and padding frame type of termOffset and padding\n    frame type of termOffset and padding frame order of termOffset and padding\n    frame order of termOffset"}, {"ID": 1866, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewOperandEnumErr(pos int, expected ...string) error { if len(expected) == 1 { return NewOperandErr(pos, \"must be %v\", expected[0]) } return NewOperandErr(pos, \"must be one of {%v}\", strings.Join(expected, \", \")) }\n\n    ### Response: // NewOperandEnumErr returns an operand error indicating a value was wrong..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final int updatePublisherLimit() { int workCount = 0; final long senderPosition = this.senderPosition.getVolatile(); if (hasReceivers || (spiesSimulateConnection && spyPositions.length > 0)) { long minConsumerPosition = senderPosition; for (final ReadablePosition spyPosition : spyPositions) { minConsumerPosition = Math.min(minConsumerPosition, spyPosition.getVolatile()); } final long proposedPublisherLimit = minConsumerPosition + termWindowLength; if (publisherLimit.proposeMaxOrdered(proposedPublisherLimit)) { cleanBuffer(proposedPublisherLimit); workCount = 1; } } else if (publisherLimit.get() > senderPosition) { publisherLimit.setOrdered(senderPosition); } return workCount; }\n\n    ### Response:", "ground_truth": "Update the publishers limit for flow control as part of the conductor duty cycle.\n\n@return 1 if the limit has been updated otherwise 0.", "predict": "// The method updates the publisher limit which indicates the maximum number of pending publication to the recipient(s). It scans through the list of receiver positions and sets the limit to the first position lesser than the volatile position of this terminal. If the limit has already reached its maximum, the method updates the count of how many times the limit has been updated and returns the updated count of how many times the limit has been updated"}, {"ID": 1867, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function calculateHorizontals(segments) { var isRTL = opt('isRTL'); for (var i=0; i<segments.length; i++) { var segment = segments[i]; // Determine functions used for calulating the elements left/right coordinates, // depending on whether the view is RTL or not. // NOTE: // colLeft/colRight returns the coordinate butting up the edge of the cell. // colContentLeft/colContentRight is indented a little bit from the edge. var leftFunc = (isRTL ? segment.isEnd : segment.isStart) ? colContentLeft : colLeft; var rightFunc = (isRTL ? segment.isStart : segment.isEnd) ? colContentRight : colRight; var left = leftFunc(segment.leftCol); var right = rightFunc(segment.rightCol); segment.left = left; segment.outerWidth = right - left; } }\n\n    ### Response: Sets the `left` and `outerWidth` property of each segment. These values are the desired dimensions for the eventual DOM elements..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static UnsafeBufferPosition allocate( final MutableDirectBuffer tempBuffer, final String name, final int typeId, final CountersManager countersManager, final long registrationId, final int sessionId, final int streamId, final String channel) { return new UnsafeBufferPosition( (UnsafeBuffer)countersManager.valuesBuffer(), allocateCounterId(tempBuffer, name, typeId, countersManager, registrationId, sessionId, streamId, channel), countersManager); }\n\n    ### Response:", "ground_truth": "Allocate a counter for tracking a position on a stream of messages.\n\n@param tempBuffer      to be used for labels and key.\n@param name            of the counter for the label.\n@param typeId          of the counter for classification.\n@param countersManager from which to allocated the underlying storage.\n@param registrationId  to be associated with the counter.\n@param sessionId       for the stream of messages.\n@param streamId        for the stream of messages.\n@param channel         for the stream of messages.\n@return a new {@link UnsafeBufferPosition} for tracking the stream.", "predict": "Allocates an available counter ID to the given name, type ID, and other arguments to add counters to the given temporary Direct Buffer."}, {"ID": 1868, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def dispatch(self, method_frame): ''' Dispatch a method for this protocol. ''' method = self.dispatch_map.get(method_frame.method_id) if method: callback = self.channel.clear_synchronous_cb(method) callback(method_frame) else: raise self.InvalidMethod( \"no method is registered with id: %d\" % method_frame.method_id)\n\n    ### Response: Dispatch a method for this protocol..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String labelName(final int typeId) { switch (typeId) { case PublisherLimit.PUBLISHER_LIMIT_TYPE_ID: return PublisherLimit.NAME; case SenderPos.SENDER_POSITION_TYPE_ID: return SenderPos.NAME; case ReceiverHwm.RECEIVER_HWM_TYPE_ID: return ReceiverHwm.NAME; case SubscriberPos.SUBSCRIBER_POSITION_TYPE_ID: return SubscriberPos.NAME; case ReceiverPos.RECEIVER_POS_TYPE_ID: return ReceiverPos.NAME; case SenderLimit.SENDER_LIMIT_TYPE_ID: return SenderLimit.NAME; case PublisherPos.PUBLISHER_POS_TYPE_ID: return PublisherPos.NAME; case SenderBpe.SENDER_BPE_TYPE_ID: return SenderBpe.NAME; default: return \"<unknown>\"; } }\n\n    ### Response:", "ground_truth": "Return the label name for a counter type identifier.\n\n@param typeId of the counter.\n@return the label name as a String.", "predict": "The above method generates the details about the given method to the reader of the code. It gives details about the parameters, its type, its behaviour and its effects to the caller of this method. It also gives information about the different values this method can take to distinguish different behaviour of the method for different values of its arguments.<unknown>"}, {"ID": 1869, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (v VarBinds) MatchOid(oid *Oid) *VarBind { for _, o := range v { if o.Oid != nil && o.Oid.Equal(oid) { return o } } return nil }\n\n    ### Response: // Gets a VarBind that matches.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long scanForAvailability(final UnsafeBuffer termBuffer, final int offset, final int maxLength) { final int limit = Math.min(maxLength, termBuffer.capacity() - offset); int available = 0; int padding = 0; do { final int termOffset = offset + available; final int frameLength = frameLengthVolatile(termBuffer, termOffset); if (frameLength <= 0) { break; } int alignedFrameLength = align(frameLength, FRAME_ALIGNMENT); if (isPaddingFrame(termBuffer, termOffset)) { padding = alignedFrameLength - HEADER_LENGTH; alignedFrameLength = HEADER_LENGTH; } available += alignedFrameLength; if (available > limit) { available -= alignedFrameLength; padding = 0; break; } } while (0 == padding && available < limit); return pack(padding, available); }\n\n    ### Response:", "ground_truth": "Scan the term buffer for availability of new message fragments from a given offset up to a maxLength of bytes.\n\n@param termBuffer to be scanned for new message fragments.\n@param offset     at which the scan should begin.\n@param maxLength  in bytes of how much should be scanned.\n@return resulting status of the scan which packs the available bytes and padding into a long.", "predict": "// Scans for an availability frame of length at least min_length, but not more than max_length, from the given terminal."}, {"ID": 1870, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function (oldElt, newElt) { var parentNode = oldElt.parentNode; parentNode.insertBefore(newElt, oldElt); parentNode.removeChild(oldElt); }\n\n    ### Response: Simple utility method which replaces a dom element by another.\n@param {HTMLElement} oldElt\n@param {HTMLElement} newElt.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ChannelUriStringBuilder clear() { prefix = null; media = null; endpoint = null; networkInterface = null; controlEndpoint = null; controlMode = null; tags = null; alias = null; reliable = null; ttl = null; mtu = null; termLength = null; initialTermId = null; termId = null; termOffset = null; sessionId = null; linger = null; sparse = null; eos = null; tether = null; isSessionIdTagged = false; return this; }\n\n    ### Response:", "ground_truth": "Clear out all the values thus setting back to the initial state.\n\n@return this for a fluent API.", "predict": "Clear the values of the fields of this object to default values\n\n// This method resets this object to its default values\npublic ChannelUriStringBuilder clear() {\n\n     // Clear values of fields\n    prefix = null;\n    media = null;\n    endpoint = null;\n    networkInterface = null;\n    controlEndpoint = null;\n    controlMode = null;\n    tags = null;\n    alias = null;\n    reliable = null;\n    ttl = null;\n    mtu = null;\n    termLength = null;\n    initialTermId = null;\n    termId = null;\n    termOffset = null;\n    sessionId = null;\n    linger = null;\n    sparse = null;\n    eos = null;\n    tether = null;\n    isSessionIdTagged = false;\n\n    // Return this\n    return this;\n\n// End of method\n\n}"}, {"ID": 1871, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (f *Flash) GetInt64(key string) int64 { r, _ := f.Get(key).(int64) return r }\n\n    ### Response: // GetInt64 gets int64 from flash.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ChannelUriStringBuilder validate() { if (null == media) { throw new IllegalStateException(\"media type is mandatory\"); } if (CommonContext.UDP_MEDIA.equals(media) && (null == endpoint && null == controlEndpoint)) { throw new IllegalStateException(\"either 'endpoint' or 'control' must be specified for UDP.\"); } int count = 0; count += null == initialTermId ? 0 : 1; count += null == termId ? 0 : 1; count += null == termOffset ? 0 : 1; if (count > 0) { if (count < 3) { throw new IllegalStateException( \"if any of then a complete set of 'initialTermId', 'termId', and 'termOffset' must be provided\"); } if (termId - initialTermId < 0) // lgtm [java/dereferenced-value-may-be-null] { throw new IllegalStateException( \"difference greater than 2^31 - 1: termId=\" + termId + \" - initialTermId=\" + initialTermId); } if (null != termLength && termOffset > termLength) // lgtm [java/dereferenced-value-may-be-null] { throw new IllegalStateException(\"termOffset=\" + termOffset + \" > termLength=\" + termLength); } } return this; }\n\n    ### Response:", "ground_truth": "Validates that the collection of set parameters are valid together.\n\n@return this for a fluent API.\n@throws IllegalStateException if the combination of params is invalid.", "predict": "// validate() generates channel URI string given values of media, endpoint and control endpoint. It makes sure that following conditions are met\n    // 1) All values of media, endpoint and control endpoint must be provided\n    // 2) If any of values of media, endpoint and control endpoint are set to null, then corresponding other values must be provided\n    // 3) If values of media, endpoint and control endpoint are set to empty string, then corresponding other values must be provided\n    // 4) If values of media, endpoint and control endpoint are set to empty string, then corresponding other values must be provided\n    // 5) If values of media, endpoint and control endpoint are set to empty string, then corresponding other values must be provided\n    // 6) If values of media, endpoint and control endpoint are set to empty string, then corresponding other values must be provided\n    // 7) If values of media, endpoint and control endpoint are set to empty string, then corresponding other values must be provided\n    // "}, {"ID": 1872, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    String getURI (String prefix) { if (\"\".equals(prefix)) { return defaultNS; } else if (prefixTable == null) { return null; } else { return (String)prefixTable.get(prefix); } }\n\n    ### Response: Look up the URI associated with a prefix in this context.\n\n@param prefix The prefix to look up.\n@return The associated Namespace URI, or null if none is\ndeclared.\n@see org.xml.sax.helpers.NamespaceSupport2#getURI.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ChannelUriStringBuilder prefix(final String prefix) { if (null != prefix && !prefix.equals(\"\") && !prefix.equals(SPY_QUALIFIER)) { throw new IllegalArgumentException(\"invalid prefix: \" + prefix); } this.prefix = prefix; return this; }\n\n    ### Response:", "ground_truth": "Set the prefix for taking an addition action such as spying on an outgoing publication with \"aeron-spy\".\n\n@param prefix to be applied to the URI before the the scheme.\n@return this for a fluent API.\n@see ChannelUri#SPY_QUALIFIER", "predict": "Pre-fill the UriBuilder with the given prefix, or throw an exception in the case of an invalid prefix."}, {"ID": 1873, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (n *regexNode) reduceSet() *regexNode { // Extract empty-set, one and not-one case as special if n.set == nil { n.t = ntNothing } else if n.set.IsSingleton() { n.ch = n.set.SingletonChar() n.set = nil n.t += (ntOne - ntSet) } else if n.set.IsSingletonInverse() { n.ch = n.set.SingletonChar() n.set = nil n.t += (ntNotone - ntSet) } return n }\n\n    ### Response: // Simple optimization. If a set is a singleton, an inverse singleton,\n// or empty, it's transformed accordingly..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ChannelUriStringBuilder media(final String media) { switch (media) { case CommonContext.UDP_MEDIA: case CommonContext.IPC_MEDIA: break; default: throw new IllegalArgumentException(\"invalid media: \" + media); } this.media = media; return this; }\n\n    ### Response:", "ground_truth": "Set the media for this channel. Valid values are \"udp\" and \"ipc\".\n\n@param media for this channel.\n@return this for a fluent API.", "predict": "// Optimizes media switching"}, {"ID": 1874, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewPaperDocUntrashedType(Description string) *PaperDocUntrashedType { s := new(PaperDocUntrashedType) s.Description = Description return s }\n\n    ### Response: // NewPaperDocUntrashedType returns a new PaperDocUntrashedType instance.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ChannelUriStringBuilder controlMode(final String controlMode) { if (null != controlMode && !controlMode.equals(CommonContext.MDC_CONTROL_MODE_MANUAL) && !controlMode.equals(CommonContext.MDC_CONTROL_MODE_DYNAMIC)) { throw new IllegalArgumentException(\"invalid control mode: \" + controlMode); } this.controlMode = controlMode; return this; }\n\n    ### Response:", "ground_truth": "Set the control mode for multi-destination-cast. Set to \"manual\" for allowing control from the publication API.\n\n@param controlMode for taking control of MDC.\n@return this for a fluent API.\n@see Publication#addDestination(String)\n@see Publication#removeDestination(String)\n@see CommonContext#MDC_CONTROL_MODE_PARAM_NAME\n@see CommonContext#MDC_CONTROL_MODE_MANUAL\n@see CommonContext#MDC_CONTROL_MODE_DYNAMIC", "predict": "// Sets the control mode for the document to the given value."}, {"ID": 1875, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def task_pivot(self, task_resource): \"\"\"Pivot point on Tasks for this resource. This method will return all *resources* (group, indicators, victims, etc) for this resource that are associated with the provided task id. **Example Endpoints URI's** +--------------+-------------------------------------------------------------+ | HTTP Method | API Endpoint URI's | +==============+=============================================================+ | GET | /v2/tasks/{resourceId}/groups/{resourceType} | +--------------+-------------------------------------------------------------+ | GET | /v2/tasks/{resourceId}/groups/{resourceType}/{uniqueId} | +--------------+-------------------------------------------------------------+ | GET | /v2/tasks/{resourceId}/indicators/{resourceType} | +--------------+-------------------------------------------------------------+ | GET | /v2/tasks/{resourceId}/indicators/{resourceType}/{uniqueId} | +--------------+-------------------------------------------------------------+ Args: resource_id (integer): The resource pivot id (task id). \"\"\" resource = self.copy() resource._request_uri = '{}/{}'.format(task_resource.request_uri, resource._request_uri) return resource\n\n    ### Response: Pivot point on Tasks for this resource.\n\n        This method will return all *resources* (group, indicators, victims,\n        etc) for this resource that are associated with the provided task id.\n\n        **Example Endpoints URI's**\n\n        +--------------+-------------------------------------------------------------+\n        | HTTP Method  | API Endpoint URI's                                          |\n        +==============+=============================================================+\n        | GET          | /v2/tasks/{resourceId}/groups/{resourceType}                |\n        +--------------+-------------------------------------------------------------+\n        | GET          | /v2/tasks/{resourceId}/groups/{resourceType}/{uniqueId}     |\n        +--------------+-------------------------------------------------------------+\n        | GET          | /v2/tasks/{resourceId}/indicators/{resourceType}            |\n        +--------------+-------------------------------------------------------------+\n        | GET          | /v2/tasks/{resourceId}/indicators/{resourceType}/{uniqueId} |\n        +--------------+-------------------------------------------------------------+\n\n        Args:\n            resource_id (integer): The resource pivot id (task id)..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ChannelUriStringBuilder termLength(final Integer termLength) { if (null != termLength) { LogBufferDescriptor.checkTermLength(termLength); } this.termLength = termLength; return this; }\n\n    ### Response:", "ground_truth": "Set the length of buffer used for each term of the log. Valid values are powers of 2 in the 64K - 1G range.\n\n@param termLength of the buffer used for each term of the log.\n@return this for a fluent API.\n@see CommonContext#TERM_LENGTH_PARAM_NAME", "predict": "\n    Term length can be customized by passing an Integer argument to the method."}, {"ID": 1876, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function setConditionFormName(\\Magento\\Rule\\Model\\Condition\\AbstractCondition $conditions, $formName) { $conditions->setJsFormObject($formName); if ($conditions->getConditions() && is_array($conditions->getConditions())) { foreach ($conditions->getConditions() as $condition) { $this->setConditionFormName($condition, $formName); } } }\n\n    ### Response: Set proper form name to rule conditions.\n\n@param \\Magento\\Rule\\Model\\Condition\\AbstractCondition $conditions Rule conditions.\n@param string                                          $formName   Form Name.\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ChannelUriStringBuilder termOffset(final Integer termOffset) { if (null != termOffset) { if ((termOffset < 0 || termOffset > LogBufferDescriptor.TERM_MAX_LENGTH)) { throw new IllegalArgumentException(\"term offset not in range 0-1g: \" + termOffset); } if (0 != (termOffset & (FRAME_ALIGNMENT - 1))) { throw new IllegalArgumentException(\"term offset not multiple of FRAME_ALIGNMENT: \" + termOffset); } } this.termOffset = termOffset; return this; }\n\n    ### Response:", "ground_truth": "Set the offset within a term at which a publication will start. This when combined with the term id can establish\na starting position.\n\n@param termOffset within a term at which a publication will start.\n@return this for a fluent API.\n@see CommonContext#TERM_OFFSET_PARAM_NAME", "predict": "Allows you to set termOffset to desired position in log frame"}, {"ID": 1877, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def create_model(x_train, y_train, x_test, y_test): \"\"\" Create your model... \"\"\" layer_1_size = {{quniform(12, 256, 4)}} l1_dropout = {{uniform(0.001, 0.7)}} params = { 'l1_size': layer_1_size, 'l1_dropout': l1_dropout } num_classes = 10 model = Sequential() model.add(Dense(int(layer_1_size), activation='relu')) model.add(Dropout(l1_dropout)) model.add(Dense(num_classes, activation='softmax')) model.compile(loss='categorical_crossentropy', optimizer=RMSprop(), metrics=['accuracy']) model.fit(x_train, y_train, batch_size=128, epochs=10, validation_data=(x_test, y_test)) score, acc = model.evaluate(x_test, y_test, verbose=0) out = { 'loss': -acc, 'score': score, 'status': STATUS_OK, 'model_params': params, } # optionally store a dump of your model here so you can get it from the database later temp_name = tempfile.gettempdir()+'/'+next(tempfile._get_candidate_names()) + '.h5' model.save(temp_name) with open(temp_name, 'rb') as infile: model_bytes = infile.read() out['model_serial'] = model_bytes return out\n\n    ### Response: Create your model....\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ChannelUriStringBuilder linger(final Long lingerNs) { if (null != lingerNs && lingerNs < 0) { throw new IllegalArgumentException(\"linger value cannot be negative: \" + lingerNs); } this.linger = lingerNs; return this; }\n\n    ### Response:", "ground_truth": "Set the time a network publication will linger in nanoseconds after being drained. This time is so that tail loss\ncan be recovered.\n\n@param lingerNs time for the publication after it is drained.\n@return this for a fluent API.\n@see CommonContext#LINGER_PARAM_NAME", "predict": "Linger ... for ..."}, {"ID": 1878, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (m *MockLambdaAPI) ListFunctionsPagesWithContext(arg0 aws.Context, arg1 *lambda.ListFunctionsInput, arg2 func(*lambda.ListFunctionsOutput, bool) bool, arg3 ...request.Option) error { varargs := []interface{}{arg0, arg1, arg2} for _, a := range arg3 { varargs = append(varargs, a) } ret := m.ctrl.Call(m, \"ListFunctionsPagesWithContext\", varargs...) ret0, _ := ret[0].(error) return ret0 }\n\n    ### Response: // ListFunctionsPagesWithContext mocks base method.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void openDatagramChannel(final AtomicCounter statusIndicator) { try { sendDatagramChannel = DatagramChannel.open(udpChannel.protocolFamily()); receiveDatagramChannel = sendDatagramChannel; if (udpChannel.isMulticast()) { if (null != connectAddress) { receiveDatagramChannel = DatagramChannel.open(udpChannel.protocolFamily()); } receiveDatagramChannel.setOption(StandardSocketOptions.SO_REUSEADDR, true); receiveDatagramChannel.bind(new InetSocketAddress(endPointAddress.getPort())); receiveDatagramChannel.join(endPointAddress.getAddress(), udpChannel.localInterface()); sendDatagramChannel.setOption(StandardSocketOptions.IP_MULTICAST_IF, udpChannel.localInterface()); if (udpChannel.isHasMulticastTtl()) { sendDatagramChannel.setOption(StandardSocketOptions.IP_MULTICAST_TTL, udpChannel.multicastTtl()); multicastTtl = sendDatagramChannel.getOption(StandardSocketOptions.IP_MULTICAST_TTL); } else if (context.socketMulticastTtl() != 0) { sendDatagramChannel.setOption(StandardSocketOptions.IP_MULTICAST_TTL, context.socketMulticastTtl()); multicastTtl = sendDatagramChannel.getOption(StandardSocketOptions.IP_MULTICAST_TTL); } } else { sendDatagramChannel.bind(bindAddress); } if (null != connectAddress) { sendDatagramChannel.connect(connectAddress); } if (0 != context.socketSndbufLength()) { sendDatagramChannel.setOption(SO_SNDBUF, context.socketSndbufLength()); } if (0 != context.socketRcvbufLength()) { receiveDatagramChannel.setOption(SO_RCVBUF, context.socketRcvbufLength()); } sendDatagramChannel.configureBlocking(false); receiveDatagramChannel.configureBlocking(false); } catch (final IOException ex) { if (null != statusIndicator) { statusIndicator.setOrdered(ChannelEndpointStatus.ERRORED); } CloseHelper.quietClose(sendDatagramChannel); if (receiveDatagramChannel != sendDatagramChannel) { CloseHelper.quietClose(receiveDatagramChannel); } sendDatagramChannel = null; receiveDatagramChannel = null; throw new AeronException( \"channel error - \" + ex.getMessage() + \" (at \" + ex.getStackTrace()[0].toString() + \"): \" + udpChannel.originalUriString(), ex); } }\n\n    ### Response:", "ground_truth": "Create the underlying channel for reading and writing.\n\n@param statusIndicator to set for error status", "predict": "// This method opens DatagramChannel for the MockLambdaAPI and sets its options to send and receive data over the network in a multicast environment or a local address in a unicast environment"}, {"ID": 1879, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_project(project_id, opts = {}) data, _status_code, _headers = get_project_with_http_info(project_id, opts) return data end\n\n    ### Response: Get project by Id\n\n @param project_id A unique identifier of a Project.\n @param [Hash] opts the optional parameters\n @return [Project].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void close() { if (!isClosed) { isClosed = true; try { if (null != selectionKey) { selectionKey.cancel(); } if (null != transportPoller) { transportPoller.cancelRead(this); transportPoller.selectNowWithoutProcessing(); } if (null != sendDatagramChannel) { sendDatagramChannel.close(); } if (receiveDatagramChannel != sendDatagramChannel && null != receiveDatagramChannel) { receiveDatagramChannel.close(); } if (null != transportPoller) { transportPoller.selectNowWithoutProcessing(); } } catch (final IOException ex) { errorLog.record(ex); } } }\n\n    ### Response:", "ground_truth": "Close transport, canceling any pending read operations and closing channel", "predict": "Closes this SocketChannel"}, {"ID": 1880, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def cp(dest) unless in_zip? src = (m = marked_items).any? ? m.map(&:path) : current_item FileUtils.cp_r src, expand_path(dest) else raise 'cping multiple items in .zip is not supported.' if selected_items.size > 1 Zip::File.open(current_zip) do |zip| entry = zip.find_entry(selected_items.first.name).dup entry.name, entry.name_length = dest, dest.size zip.instance_variable_get(:@entry_set) << entry end end ls end\n\n    ### Response: Copy selected files and directories to the destination..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean isValidFrame(final UnsafeBuffer buffer, final int length) { boolean isFrameValid = true; if (frameVersion(buffer, 0) != HeaderFlyweight.CURRENT_VERSION) { isFrameValid = false; invalidPackets.increment(); } else if (length < HeaderFlyweight.MIN_HEADER_LENGTH) { isFrameValid = false; invalidPackets.increment(); } return isFrameValid; }\n\n    ### Response:", "ground_truth": "Is the received frame valid. This method will do some basic checks on the header and can be\noverridden in a subclass for further validation.\n\n@param buffer containing the frame.\n@param length of the frame.\n@return true if the frame is believed valid otherwise false.", "predict": "Checks if the given buffer contains a valid frame, and if so, returns true; otherwise returns false and increments the count of invalid packets"}, {"ID": 1881, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def execute(self, method, args, ref): \"\"\" Execute the method with args \"\"\" response = {'result': None, 'error': None, 'ref': ref} fun = self.methods.get(method) if not fun: response['error'] = 'Method `{}` not found'.format(method) else: try: response['result'] = fun(*args) except Exception as exception: logging.error(exception, exc_info=1) response['error'] = str(exception) return response\n\n    ### Response: Execute the method with args.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public InetSocketAddress receive(final ByteBuffer buffer) { buffer.clear(); InetSocketAddress address = null; try { if (receiveDatagramChannel.isOpen()) { address = (InetSocketAddress)receiveDatagramChannel.receive(buffer); } } catch (final PortUnreachableException ignored) { } catch (final Exception ex) { LangUtil.rethrowUnchecked(ex); } return address; }\n\n    ### Response:", "ground_truth": "Receive a datagram from the media layer.\n\n@param buffer into which the datagram will be received.\n@return the source address of the datagram if one is available otherwise false.", "predict": "The method receives a ByteBuffer and returns an InetSocketAddress."}, {"ID": 1882, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function (requestPath, params) { if (!params || params.length === 0) { // Nothing to do if there are no parameters return requestPath; } // Flatten the array of global parameters var flat = []; for (var i = 0, len = params.length; i < len; i += 1) { var par = params[i]; // The value is already encoded inside the addParam flat.push(par.name + '=' + par.value); } /* * Just in case we want to change it in the future. W3C recommends to use semi columns instead of ampersand * http://www.w3.org/TR/1999/REC-html401-19991224/appendix/notes.html#h-B.2.2 */ var parametersSeparator = \"&\"; var flatString = flat.join(parametersSeparator); return this.__appendActionParameters(requestPath, flatString); }\n\n    ### Response: Append the global parameters to a url request path. Global parameters are objects with properties name and\nvalue\n@param {String} requestPath The base requestPath\n@param {Array} params List of parameters (added through addParam)\n@return {String} the final requestPath\n@private.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void onNak( final int termId, final int termOffset, final int length, final int termLength, final RetransmitSender retransmitSender) { if (!isInvalid(termOffset, termLength)) { if (null == activeRetransmitsMap.get(termId, termOffset) && activeRetransmitsMap.size() < MAX_RETRANSMITS_DEFAULT) { final RetransmitAction action = assignRetransmitAction(); action.termId = termId; action.termOffset = termOffset; action.length = Math.min(length, termLength - termOffset); final long delay = delayGenerator.generateDelay(); if (0 == delay) { retransmitSender.resend(termId, termOffset, action.length); action.linger(lingerTimeoutGenerator.generateDelay(), nanoClock.nanoTime()); } else { action.delay(delay, nanoClock.nanoTime()); } activeRetransmitsMap.put(termId, termOffset, action); } } }\n\n    ### Response:", "ground_truth": "Called on reception of a NAK to start retransmits handling.\n\n@param termId           from the NAK and the term id of the buffer to retransmit from\n@param termOffset       from the NAK and the offset of the data to retransmit\n@param length           of the missing data\n@param termLength       of the term buffer.\n@param retransmitSender to call if an immediate retransmit is required", "predict": "Create and schedule transmissions of a given term to the remote peer if it's not been transmitted recently enough"}, {"ID": 1883, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function run(): void { try { /** @var \\Ffcms\\Core\\Arch\\Controller $callClass */ $callClass = $this->getCallbackClass(); $callMethod = 'action' . self::$Request->getAction(); $arguments = self::$Request->getArguments(); // check if callback method (action) is exist in class object if (!method_exists($callClass, $callMethod)) { throw new NotFoundException('Method \"' . App::$Security->strip_tags($callMethod) . '()\" not founded in \"' . get_class($callClass) . '\"'); } // check if method arguments counts equals passed count $requiredArgCount = $this->getMethodRequiredArgCount($callClass, $callMethod); // compare method arg count with passed if (count($arguments) < $requiredArgCount) { throw new NotFoundException(__('Arguments for method %method% is not enough. Expected: %required%, got: %current%.', [ 'method' => $callMethod, 'required' => $requiredArgCount, 'current' => count($arguments) ])); } // make callback call to action in controller and get response $response = call_user_func_array([$callClass, $callMethod], $arguments); // if no response - throw 404 not found if (!$response) { throw new NotFoundException('Page not found: 404 error'); } } catch (\\Exception $e) { // check if exception is system-based throw if ($e instanceof TemplateException) { $response = $e->display(); } else { // or hook exception to system based :))) if (App::$Debug) { $msg = $e->getMessage() . $e->getTraceAsString(); $response = (new NativeException($msg))->display(); } else { $response = (new NativeException($e->getMessage()))->display(); } } } // set full rendered content to response builder self::$Response->setContent($response); // echo full response to user via symfony http foundation self::$Response->send(); }\n\n    ### Response: Run applications and display output. Main entry point of system.\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void processTimeouts(final long nowNs, final RetransmitSender retransmitSender) { if (activeRetransmitsMap.size() > 0) { for (final RetransmitAction action : retransmitActionPool) { if (DELAYED == action.state && (action.expireNs - nowNs < 0)) { retransmitSender.resend(action.termId, action.termOffset, action.length); action.linger(lingerTimeoutGenerator.generateDelay(), nanoClock.nanoTime()); } else if (LINGERING == action.state && (action.expireNs - nowNs < 0)) { action.cancel(); activeRetransmitsMap.remove(action.termId, action.termOffset); } } } }\n\n    ### Response:", "ground_truth": "Called to process any outstanding timeouts.\n\n@param nowNs            time in nanoseconds\n@param retransmitSender to call on retransmissions", "predict": "Excessive Retransmission Management"}, {"ID": 1884, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func DecryptMerkleLeaf( privateKey TLFPrivateKey, publicKey TLFEphemeralPublicKey, encryptedMerkleLeaf EncryptedMerkleLeaf) ([]byte, error) { nonce, err := PrepareMerkleLeaf(encryptedMerkleLeaf) if err != nil { return nil, err } publicKeyData := publicKey.Data() privateKeyData := privateKey.Data() decryptedData, ok := box.Open(nil, encryptedMerkleLeaf.EncryptedData, &nonce, &publicKeyData, &privateKeyData) if !ok { return nil, errors.WithStack( libkb.DecryptionError{Cause: errors.New(\"Cannot open box\")}) } return decryptedData, nil }\n\n    ### Response: // DecryptMerkleLeaf decrypts an EncryptedMerkleLeaf using the given\n// private TLF key and ephemeral public key..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String status(final long status) { if (INITIALIZING == status) { return \"INITIALIZING\"; } if (ERRORED == status) { return \"ERRORED\"; } if (ACTIVE == status) { return \"ACTIVE\"; } if (CLOSING == status) { return \"CLOSING\"; } return \"unknown id=\" + status; }\n\n    ### Response:", "ground_truth": "String representation of the channel status.\n\n@param status to be converted.\n@return representation of the channel status.", "predict": "// This function returns the status of the chain as an informative string\n    // given the chain's long id number"}, {"ID": 1885, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func GetColor(bitmap C.MMBitmapRef, x, y int) C.MMRGBHex { color := C.bitmap_get_color(bitmap, C.size_t(x), C.size_t(y)) return color }\n\n    ### Response: // GetColor get bitmap color.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static AtomicCounter allocate( final MutableDirectBuffer tempBuffer, final String name, final int typeId, final CountersManager countersManager, final String channel) { final int keyLength = tempBuffer.putStringWithoutLengthAscii( CHANNEL_OFFSET + SIZE_OF_INT, channel, 0, MAX_CHANNEL_LENGTH); tempBuffer.putInt(CHANNEL_OFFSET, keyLength); int labelLength = 0; labelLength += tempBuffer.putStringWithoutLengthAscii(keyLength + labelLength, name); labelLength += tempBuffer.putStringWithoutLengthAscii(keyLength + labelLength, \": \"); labelLength += tempBuffer.putStringWithoutLengthAscii( keyLength + labelLength, channel, 0, MAX_LABEL_LENGTH - labelLength); return countersManager.newCounter(typeId, tempBuffer, 0, keyLength, tempBuffer, keyLength, labelLength); }\n\n    ### Response:", "ground_truth": "Allocate an indicator for tracking the status of a channel endpoint.\n\n@param tempBuffer      to be used for labels and metadata.\n@param name            of the counter for the label.\n@param typeId          of the counter for classification.\n@param countersManager from which to allocated the underlying storage.\n@param channel         for the stream of messages.\n@return a new {@link AtomicCounter} for tracking the status.", "predict": "// Allocate allocates counters for specific channel and names"}, {"ID": 1886, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private HttpMessage convertOutboundMessage(Message message) { HttpMessage httpMessage; if (message instanceof HttpMessage) { httpMessage = (HttpMessage) message; } else { httpMessage = new HttpMessage(message); } return httpMessage; }\n\n    ### Response: Converts the outbound Message object into a HttpMessage\n@param message The message to convert\n@return The converted message as HttpMessage.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DirectBufferVector reset(final DirectBuffer buffer, final int offset, final int length) { this.buffer = buffer; this.offset = offset; this.length = length; return this; }\n\n    ### Response:", "ground_truth": "Reset the values.\n\n@param buffer which is the super set.\n@param offset at which the vector begins.\n@param length of the vector.\n@return this for a fluent API.", "predict": "Resets the DirectBufferVector to the given values\n    @param buffer The Direct Buffer to reset\n    @param offset The offset in the Direct Buffer to reset to\n    @param length The length of data to reset to"}, {"ID": 1887, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (mr *MockSerializerMockRecorder) Unmarshal(arg0, arg1 interface{}) *gomock.Call { return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"Unmarshal\", reflect.TypeOf((*MockSerializer)(nil).Unmarshal), arg0, arg1) }\n\n    ### Response: // Unmarshal indicates an expected call of Unmarshal.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DirectBufferVector validate() { final int capacity = buffer.capacity(); if (offset < 0 || offset >= capacity) { throw new IllegalArgumentException(\"offset=\" + offset + \" capacity=\" + capacity); } if (length < 0 || length > (capacity - offset)) { throw new IllegalArgumentException(\"offset=\" + offset + \" capacity=\" + capacity + \" length=\" + length); } return this; }\n\n    ### Response:", "ground_truth": "Ensure the vector is valid for the buffer.\n\n@throws NullPointerException if the buffer is null.\n@throws IllegalArgumentException if the offset is out of range for the buffer.\n@throws IllegalArgumentException if the length is out of range for the buffer.\n@return this for a fluent API.", "predict": "// validate indicates an expected call of validate()."}, {"ID": 1888, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (r *Router) Handle(path string, h Handler) *Route { return r.getOrCreateRoute(r.mux.Handle(path, r.handler(h)), path) }\n\n    ### Response: // Handle registers a new route with a matcher for the URL path.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int validateAndComputeLength(final DirectBufferVector[] vectors) { int messageLength = 0; for (final DirectBufferVector vector : vectors) { vector.validate(); messageLength += vector.length; if (messageLength < 0) { throw new IllegalStateException(\"length overflow: \" + Arrays.toString(vectors)); } } return messageLength; }\n\n    ### Response:", "ground_truth": "Validate an array of vectors to make up a message and compute the total length.\n\n@param vectors to be validated summed.\n@return the sum of the vector lengths.", "predict": "// Validates and Computes length of DirectBufers given."}, {"ID": 1889, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Set<String> mergeMVFieldValues(Collection<String> currValueSet, Collection<String> removeValueSet, Collection<String> newValueSet) { Set<String> resultSet = new HashSet<>(); if (currValueSet != null) { resultSet.addAll(currValueSet); } if (removeValueSet != null) { resultSet.removeAll(removeValueSet); } if (newValueSet != null) { resultSet.addAll(newValueSet); } return resultSet; }\n\n    ### Response: Merge the given current, remove, and new MV field values into a new set..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int producerWindowLength(final int termBufferLength, final int defaultTermWindowLength) { int termWindowLength = termBufferLength / 2; if (0 != defaultTermWindowLength) { termWindowLength = Math.min(defaultTermWindowLength, termWindowLength); } return termWindowLength; }\n\n    ### Response:", "ground_truth": "How far ahead a producer can get from a consumer position.\n\n@param termBufferLength        for when default is not set and considering an appropriate minimum.\n@param defaultTermWindowLength to take priority.\n@return the length to be used for the producer window.", "predict": "Compute producer windows length given input values of term length and default producer window length.."}, {"ID": 1890, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Set<String> getIdsForTermWithAncestors(String s) { if (!indexByName.containsKey(s)) return new HashSet<String>(); Stack<String> idsToConsider = new Stack<String>(); idsToConsider.addAll(getIdsForTerm(s)); Set<String> resultIds = new HashSet<String>(); while (!idsToConsider.isEmpty()) { String id = idsToConsider.pop(); if (!resultIds.contains(id)) { resultIds.add(id); idsToConsider.addAll(terms.get(id).getIsA()); } } return resultIds; }\n\n    ### Response: Look up a term by name, and return its ID and the IDs of all of its\nancestors.\n\n@param s\nThe term name to look up.\n@return The full set of IDs, empty if the term was not found..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void validateSocketBufferLengths(final MediaDriver.Context ctx) { try (DatagramChannel probe = DatagramChannel.open()) { final int defaultSoSndBuf = probe.getOption(StandardSocketOptions.SO_SNDBUF); probe.setOption(StandardSocketOptions.SO_SNDBUF, Integer.MAX_VALUE); final int maxSoSndBuf = probe.getOption(StandardSocketOptions.SO_SNDBUF); if (maxSoSndBuf < ctx.socketSndbufLength()) { System.err.format( \"WARNING: Could not get desired SO_SNDBUF, adjust OS to allow %s: attempted=%d, actual=%d%n\", SOCKET_SNDBUF_LENGTH_PROP_NAME, ctx.socketSndbufLength(), maxSoSndBuf); } probe.setOption(StandardSocketOptions.SO_RCVBUF, Integer.MAX_VALUE); final int maxSoRcvBuf = probe.getOption(StandardSocketOptions.SO_RCVBUF); if (maxSoRcvBuf < ctx.socketRcvbufLength()) { System.err.format( \"WARNING: Could not get desired SO_RCVBUF, adjust OS to allow %s: attempted=%d, actual=%d%n\", SOCKET_RCVBUF_LENGTH_PROP_NAME, ctx.socketRcvbufLength(), maxSoRcvBuf); } final int soSndBuf = 0 == ctx.socketSndbufLength() ? defaultSoSndBuf : ctx.socketSndbufLength(); if (ctx.mtuLength() > soSndBuf) { throw new ConfigurationException(String.format( \"MTU greater than socket SO_SNDBUF, adjust %s to match MTU: mtuLength=%d, SO_SNDBUF=%d\", SOCKET_SNDBUF_LENGTH_PROP_NAME, ctx.mtuLength(), soSndBuf)); } if (ctx.initialWindowLength() > maxSoRcvBuf) { throw new ConfigurationException(\"window length greater than socket SO_RCVBUF, increase '\" + Configuration.INITIAL_WINDOW_LENGTH_PROP_NAME + \"' to match window: windowLength=\" + ctx.initialWindowLength() + \", SO_RCVBUF=\" + maxSoRcvBuf); } } catch (final IOException ex) { throw new AeronException(\"probe socket: \" + ex.toString(), ex); } }\n\n    ### Response:", "ground_truth": "Validate that the socket buffer lengths are sufficient for the media driver configuration.\n\n@param ctx to be validated.", "predict": "Check if the Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket Socket"}, {"ID": 1891, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def eval_policy(eval_positions): \"\"\"Evaluate all positions with all models save the policy heatmaps as CSVs CSV name is \"heatmap-<position_name>-<model-index>.csv\" CSV format is: model number, value network output, policy network outputs position_name is taken from the SGF file Policy network outputs (19x19) are saved in flat order (see coord.from_flat) \"\"\" model_paths = oneoff_utils.get_model_paths(fsdb.models_dir()) idx_start = FLAGS.idx_start eval_every = FLAGS.eval_every print(\"Evaluating models {}-{}, eval_every={}\".format( idx_start, len(model_paths), eval_every)) player = None for i, idx in enumerate(tqdm(range(idx_start, len(model_paths), eval_every))): if player and i % 20 == 0: player.network.sess.close() tf.reset_default_graph() player = None if not player: player = oneoff_utils.load_player(model_paths[idx]) else: oneoff_utils.restore_params(model_paths[idx], player) pos_names, positions = zip(*eval_positions) # This should be batched at somepoint. eval_probs, eval_values = player.network.run_many(positions) for pos_name, probs, value in zip(pos_names, eval_probs, eval_values): save_file = os.path.join( FLAGS.data_dir, \"heatmap-{}-{}.csv\".format(pos_name, idx)) with open(save_file, \"w\") as data: data.write(\"{}, {}, {}\\n\".format( idx, value, \",\".join(map(str, probs))))\n\n    ### Response: Evaluate all positions with all models save the policy heatmaps as CSVs\n\n    CSV name is \"heatmap--.csv\"\n    CSV format is: model number, value network output, policy network outputs\n\n    position_name is taken from the SGF file\n    Policy network outputs (19x19) are saved in flat order (see coord.from_flat).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void validatePageSize(final int pageSize) { if (pageSize < PAGE_MIN_SIZE) { throw new ConfigurationException( \"page size less than min size of \" + PAGE_MIN_SIZE + \": \" + pageSize); } if (pageSize > PAGE_MAX_SIZE) { throw new ConfigurationException( \"page size greater than max size of \" + PAGE_MAX_SIZE + \": \" + pageSize); } if (!BitUtil.isPowerOfTwo(pageSize)) { throw new ConfigurationException(\"page size not a power of 2: \" + pageSize); } }\n\n    ### Response:", "ground_truth": "Validate that page size is valid and alignment is valid.\n\n@param pageSize to be checked.\n@throws ConfigurationException if the size is not as expected.", "predict": "\n    Validate the given page size to make sure it meets certain criteria\n    If the given page size is less than the PageMinSize, an exception is thrown\n    If the given page size is greater than PageMaxSize, an exception is thrown\n    If the given page size is not a power of 2, an exception is thrown\n    Finally, the given page size must be a multiple of 2"}, {"ID": 1892, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function sqlConditions($buffer_id) { $first = true; if (isset($this->buffers[$buffer_id])) { echo $this->indent, $buffer_id; if ($this->no_parenthesis_in_conditions) { foreach ($this->buffers[$buffer_id] as $buf) { if ($first) { $first = false; echo ' '; } else { echo $this->sub_indent, \"AND \"; } echo $this->sqlBuffer($buf), \"\\n\"; } } else { foreach ($this->buffers[$buffer_id] as $buf) { if ($first) { $first = false; echo ' ('; } else { echo $this->sub_indent, \"AND (\"; } echo $this->sqlBuffer($buf), \")\\n\"; } } } }\n\n    ### Response: Generate SQL fragment made of conditions in AND statement..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void validateSessionIdRange(final int low, final int high) { if (low > high) { throw new ConfigurationException(\"low session id value \" + low + \" must be <= high value \" + high); } if (Math.abs((long)high - low) > Integer.MAX_VALUE) { throw new ConfigurationException(\"reserved range to too large\"); } }\n\n    ### Response:", "ground_truth": "Validate the range of session ids based on a high and low value provided which accounts for the values wrapping.\n\n@param low  value in the range.\n@param high value in the range.\n@throws ConfigurationException if the values are not valid.", "predict": "Validate if the given range of session id values (inclusive of low and high values) are in valid range and exception may be thrown if the given range values are invalid or too large"}, {"ID": 1893, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get(self, **kwargs): \"\"\"Get the details for a specific notification.\"\"\" # NOTE(trebskit) should actually be find_one, but # monasca does not support expected response format url = '%s/%s' % (self.base_url, kwargs['notification_id']) resp = self.client.list(path=url) return resp\n\n    ### Response: Get the details for a specific notification..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void validateUnblockTimeout( final long publicationUnblockTimeoutNs, final long clientLivenessTimeoutNs, final long timerIntervalNs) { if (publicationUnblockTimeoutNs <= clientLivenessTimeoutNs) { throw new ConfigurationException( \"publicationUnblockTimeoutNs=\" + publicationUnblockTimeoutNs + \" <= clientLivenessTimeoutNs=\" + clientLivenessTimeoutNs); } if (clientLivenessTimeoutNs <= timerIntervalNs) { throw new ConfigurationException( \"clientLivenessTimeoutNs=\" + clientLivenessTimeoutNs + \" <= timerIntervalNs=\" + timerIntervalNs); } }\n\n    ### Response:", "ground_truth": "Validate that the timeouts for unblocking publications from a client are valid.\n\n@param publicationUnblockTimeoutNs after which an uncommitted publication will be unblocked.\n@param clientLivenessTimeoutNs     after which a client will be considered not alive.\n@param timerIntervalNs             interval at which the driver will check timeouts.\n@throws ConfigurationException if the values are not valid.", "predict": "Validate if publication unblocking time for given topic and subscription has elapsed, or the topic has been unblocked and the client has not been kept alive for longer than its published topic unblocking time (in nanoseconds). If either of these conditions are true, raise an exception."}, {"ID": 1894, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function fetchOnlineRate($url, ExchangeRateQuery $exchangeRateQuery): ExchangeRate { $currencyPair = $exchangeRateQuery->getCurrencyPair(); $response = $this->getResponse($url); if (200 !== $response->getStatusCode()) { throw new Exception(\"Unexpected response status {$response->getReasonPhrase()}, $url\"); } $responsePayload = StringUtil::jsonToArray($response->getBody()->__toString()); $keyAsCurrencyPair = $this->stringifyCurrencyPair($currencyPair); if (empty($responsePayload['results'][$keyAsCurrencyPair]['val'])) { throw new Exception(\"Unexpected response body {$response->getReasonPhrase()}\"); } if ($responsePayload['results'][$keyAsCurrencyPair]['fr'] !== $currencyPair->getBaseCurrency()) { throw new Exception(\"Unexpected base currency {$responsePayload['results'][$keyAsCurrencyPair]['fr']}\"); } if ($responsePayload['results'][$keyAsCurrencyPair]['to'] !== $currencyPair->getQuoteCurrency()) { throw new Exception(\"Unexpected quote currency {$responsePayload['results'][$keyAsCurrencyPair]['to']}\"); } if ($exchangeRateQuery instanceof HistoricalExchangeRateQuery) { $dateStringified = $responsePayload['date']; $date = new \\DateTime($dateStringified); $rate = $responsePayload['results'][$keyAsCurrencyPair]['val'][$dateStringified]; } else { $date = new \\DateTime('now'); $rate = $responsePayload['results'][$keyAsCurrencyPair]['val']; } return $this->createRate($currencyPair, (float) $rate, $date); }\n\n    ### Response: Fetch online rate.\n\n@param string            $url\n@param ExchangeRateQuery $exchangeRateQuery\n\n@return ExchangeRate\n\n@throws Exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ErrorResponseFlyweight errorCode(final ErrorCode code) { buffer.putInt(offset + ERROR_CODE_OFFSET, code.value()); return this; }\n\n    ### Response:", "ground_truth": "Set the error code for the command.\n\n@param code for the error\n@return flyweight", "predict": "ErrorCode: Flyweight to send error codes to the client in serialized form"}, {"ID": 1895, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def serve server_options = {} options.each { |k, v| server_options[k.to_sym] = v } server_options[:server] = {} [:port, :handler, :host].each do |k| server_options[:server][k] = server_options.delete(k) if server_options.key?(k) end @project.server.set_options(server_options[:server]) end\n\n    ### Response: The handler to use.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void reset() { isBallotSent = false; isLeader = false; hasRequestedJoin = false; hasSentTerminationAck = false; vote = null; candidateTermId = Aeron.NULL_VALUE; leadershipTermId = Aeron.NULL_VALUE; logPosition = NULL_POSITION; }\n\n    ### Response:", "ground_truth": "Reset the state of a cluster member so it can be canvassed and reestablished.", "predict": "The reset() method resets the member state to its default values"}, {"ID": 1896, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void flushRows(final XMLUtil util, final ZipUTF8Writer writer) throws IOException { this.contentElement.flushRows(util, writer, this.settingsElement); }\n\n    ### Response: Flush the rows\n\n@param util   the util\n@param writer the stream to write\n@throws IOException when write fails.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String encodeAsString(final ClusterMember[] clusterMembers) { final StringBuilder builder = new StringBuilder(); for (int i = 0, length = clusterMembers.length; i < length; i++) { final ClusterMember member = clusterMembers[i]; builder .append(member.id()) .append(',') .append(member.endpointsDetail()); if ((length - 1) != i) { builder.append('|'); } } return builder.toString(); }\n\n    ### Response:", "ground_truth": "Encode member details from a cluster members array to a string.\n\n@param clusterMembers to fill the details from\n@return String representation suitable for use with {@link ClusterMember#parse}", "predict": "The function generates an XML string of the given cluster members by appending the member ids and details to an already constructed string builder."}, {"ID": 1897, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void sendRecordFailedNotify(String reason) { Status failedStatus = new Status(StatusCodes.NS_RECORD_FAILED); failedStatus.setLevel(Status.ERROR); failedStatus.setClientid(getStreamId()); failedStatus.setDetails(getPublishedName()); failedStatus.setDesciption(reason); StatusMessage failedMsg = new StatusMessage(); failedMsg.setBody(failedStatus); pushMessage(failedMsg); }\n\n    ### Response: Sends record failed notifications.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void addMemberStatusPublications( final ClusterMember[] members, final ClusterMember exclude, final ChannelUri channelUri, final int streamId, final Aeron aeron) { for (final ClusterMember member : members) { if (member != exclude) { channelUri.put(ENDPOINT_PARAM_NAME, member.memberFacingEndpoint()); member.publication = aeron.addExclusivePublication(channelUri.toString(), streamId); } } }\n\n    ### Response:", "ground_truth": "Add the publications for sending status messages to the other members of the cluster.\n\n@param members    of the cluster.\n@param exclude    this member when adding publications.\n@param channelUri for the publication.\n@param streamId   for the publication.\n@param aeron      to add the publications to.", "predict": "Adds member status publications to the given members and exclusive channel Uri string provided."}, {"ID": 1898, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _radixPass(a, b, r, n, K): \"\"\" Stable sort of the sequence a according to the keys given in r. >>> a=range(5) >>> b=[0]*5 >>> r=[2,1,3,0,4] >>> _radixPass(a, b, r, 5, 5) >>> b [3, 1, 0, 2, 4] When n is less than the length of a, the end of b must be left unaltered. >>> b=[5]*5 >>> _radixPass(a, b, r, 2, 2) >>> b [1, 0, 5, 5, 5] >>> _a=a=[1, 0] >>> b= [0]*2 >>> r=[0, 1] >>> _radixPass(a, b, r, 2, 2) >>> a=_a >>> b [0, 1] >>> a=[1, 1] >>> _radixPass(a, b, r, 2, 2) >>> b [1, 1] >>> a=[0, 1, 1, 0] >>> b= [0]*4 >>> r=[0, 1] >>> _radixPass(a, b, r, 4, 2) >>> a=_a >>> b [0, 0, 1, 1] \"\"\" c = _array(\"i\", [0] * (K + 1)) # counter array for i in range(n): # count occurrences c[r[a[i]]] += 1 sum = 0 for i in range(K + 1): # exclusive prefix sums t = c[i] c[i] = sum sum += t for a_i in a[:n]: # sort b[c[r[a_i]]] = a_i c[r[a_i]] += 1\n\n    ### Response: Stable sort of the sequence a according to the keys given in r.\n\n    >>> a=range(5)\n    >>> b=[0]*5\n    >>> r=[2,1,3,0,4]\n\n    >>> _radixPass(a, b, r, 5, 5)\n    >>> b\n    [3, 1, 0, 2, 4]\n\n    When n is less than the length of a, the end of b must be left unaltered.\n    >>> b=[5]*5\n    >>> _radixPass(a, b, r, 2, 2)\n    >>> b\n    [1, 0, 5, 5, 5]\n\n    >>> _a=a=[1, 0]\n    >>> b= [0]*2\n    >>> r=[0, 1]\n    >>> _radixPass(a, b, r, 2, 2)\n    >>> a=_a\n    >>> b\n    [0, 1]\n\n    >>> a=[1, 1]\n    >>> _radixPass(a, b, r, 2, 2)\n    >>> b\n    [1, 1]\n\n    >>> a=[0, 1, 1, 0]\n    >>> b= [0]*4\n    >>> r=[0, 1]\n    >>> _radixPass(a, b, r, 4, 2)\n    >>> a=_a\n    >>> b\n    [0, 0, 1, 1].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void closeMemberPublications(final ClusterMember[] clusterMembers) { for (final ClusterMember member : clusterMembers) { CloseHelper.close(member.publication); } }\n\n    ### Response:", "ground_truth": "Close the publications associated with members of the cluster.\n\n@param clusterMembers to close the publications for.", "predict": "Closes any unclosed publications of the given cluster members."}, {"ID": 1899, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def enumeration(*values, **kwargs): ''' Create an |Enumeration| object from a sequence of values. Call ``enumeration`` with a sequence of (unique) strings to create an Enumeration object: .. code-block:: python #: Specify the horizontal alignment for rendering text TextAlign = enumeration(\"left\", \"right\", \"center\") Args: values (str) : string enumeration values, passed as positional arguments The order of arguments is the order of the enumeration, and the first element will be considered the default value when used to create |Enum| properties. Keyword Args: case_sensitive (bool, optional) : Whether validation should consider case or not (default: True) quote (bool, optional): Whther values should be quoted in the string representations (default: False) Raises: ValueError if values empty, if any value is not a string or not unique Returns: Enumeration ''' if not (values and all(isinstance(value, string_types) and value for value in values)): raise ValueError(\"expected a non-empty sequence of strings, got %s\" % values) if len(values) != len(set(values)): raise ValueError(\"enumeration items must be unique, got %s\" % values) attrs = {value: value for value in values} attrs.update({ \"_values\": list(values), \"_default\": values[0], \"_case_sensitive\": kwargs.get(\"case_sensitive\", True), \"_quote\": kwargs.get(\"quote\", False), }) return type(str(\"Enumeration\"), (Enumeration,), attrs)()\n\n    ### Response: Create an |Enumeration| object from a sequence of values.\n\n    Call ``enumeration`` with a sequence of (unique) strings to create an\n    Enumeration object:\n\n    .. code-block:: python\n\n        #: Specify the horizontal alignment for rendering text\n        TextAlign = enumeration(\"left\", \"right\", \"center\")\n\n    Args:\n        values (str) : string enumeration values, passed as positional arguments\n\n            The order of arguments is the order of the enumeration, and the\n            first element will be considered the default value when used\n            to create |Enum| properties.\n\n    Keyword Args:\n        case_sensitive (bool, optional) :\n            Whether validation should consider case or not (default: True)\n\n        quote (bool, optional):\n            Whther values should be quoted in the string representations\n            (default: False)\n\n    Raises:\n        ValueError if values empty, if any value is not a string or not unique\n\n    Returns:\n        Enumeration.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean hasActiveQuorum( final ClusterMember[] clusterMembers, final long nowMs, final long timeoutMs) { int threshold = quorumThreshold(clusterMembers.length); for (final ClusterMember member : clusterMembers) { if (member.isLeader() || nowMs <= (member.timeOfLastAppendPositionMs() + timeoutMs)) { if (--threshold <= 0) { return true; } } } return false; }\n\n    ### Response:", "ground_truth": "Check if the cluster leader has an active quorum of cluster followers.\n\n@param clusterMembers for the current cluster.\n@param nowMs          for the current time.\n@param timeoutMs      after which a follower is not considered active.\n@return true if quorum of cluster members are considered active.", "predict": "\n    The method checks if there is an active quorum of nodes\n    (nodes who are either the leader of their own appends, or who\n    haven't timed out since the last append) in the cluster\n    for the given time frame (in millisecods since the member's\n    \"timeOfLastAppendPositonMs\" attribute was updated).\n    If there is an active quorum, the method returns true;\n    otherwise it returns false."}, {"ID": 1900, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _invertMapping(mapping): \"\"\"Converts a protein to peptide or peptide to protein mapping. :param mapping: dict, for each key contains a set of entries :returns: an inverted mapping that each entry of the values points to a set of initial keys. \"\"\" invertedMapping = ddict(set) for key, values in viewitems(mapping): for value in values: invertedMapping[value].add(key) return invertedMapping\n\n    ### Response: Converts a protein to peptide or peptide to protein mapping.\n\n    :param mapping: dict, for each key contains a set of entries\n\n    :returns: an inverted mapping that each entry of the values points to a set\n        of initial keys..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long quorumPosition(final ClusterMember[] members, final long[] rankedPositions) { final int length = rankedPositions.length; for (int i = 0; i < length; i++) { rankedPositions[i] = 0; } for (final ClusterMember member : members) { long newPosition = member.logPosition; for (int i = 0; i < length; i++) { final long rankedPosition = rankedPositions[i]; if (newPosition > rankedPosition) { rankedPositions[i] = newPosition; newPosition = rankedPosition; } } } return rankedPositions[length - 1]; }\n\n    ### Response:", "ground_truth": "Calculate the position reached by a quorum of cluster members.\n\n@param members         of the cluster.\n@param rankedPositions temp array to be used for sorting the positions to avoid allocation.\n@return the position reached by a quorum of cluster members.", "predict": "\n    Long quorumPosition(ClusterMember[] members, Long[] rankedPositions) {\n    int length = rankedPositions.length;\n    for (int i = 0; i < length; i++) {\n    rankedPositions[i] = 0;\n    }\n    for (ClusterMember member : members) {\n    Long newPosition = member.logPosition;\n    for (int i = 0; i < length; i++) {\n    Long rankedPosition = rankedPositions[i];\n    if (newPosition > rankedPosition) {\n    rankedPositions[i] = newPosition;\n    newPosition = rankedPosition;\n    }\n    }\n    }\n    return rankedPositions[length - 1];\n    }"}, {"ID": 1901, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *Selection) PrependSelection(sel *Selection) *Selection { return s.PrependNodes(sel.Nodes...) }\n\n    ### Response: // PrependSelection prepends the elements in the selection to each element in\n// the set of matched elements.\n//\n// This follows the same rules as Selection.Append..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void resetLogPositions(final ClusterMember[] clusterMembers, final long logPosition) { for (final ClusterMember member : clusterMembers) { member.logPosition(logPosition); } }\n\n    ### Response:", "ground_truth": "Reset the log position of all the members to the provided value.\n\n@param clusterMembers to be reset.\n@param logPosition    to set for them all.", "predict": "// ResetLogPositions resets the log positions of the given cluster member objects to the given log position.\n    // It follows the same rules as Selection.Append.."}, {"ID": 1902, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function readBlocks() { $open = false; $file = new FS_File_Reader( $this->fileName ); $lines = $file->readArray(); foreach( $lines as $line ) { $line = trim( $line ); if( $line ) { if( preg_match( $this->patternSection, $line ) ) { $section = preg_replace( $this->patternSection, \"\\\\1\", $line ); if( !isset( $this->blocks[$section] ) ) $this->blocks[$section] = array(); $open = true; } else if( $open ) { $this->blocks[$section][] = $line; } } } foreach( $this->blocks as $section => $block ) $this->blocks[$section] = implode( \"\\n\", $block ); }\n\n    ### Response: Reads Block File.\n@access\t\tprotected\n@return\t\tvoid.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean haveVotersReachedPosition( final ClusterMember[] clusterMembers, final long position, final long leadershipTermId) { for (final ClusterMember member : clusterMembers) { if (member.vote != null && (member.logPosition < position || member.leadershipTermId != leadershipTermId)) { return false; } } return true; }\n\n    ### Response:", "ground_truth": "Has the members of the cluster the voted reached the provided position in their log.\n\n@param clusterMembers   to check.\n@param position         to compare the {@link #logPosition()} against.\n@param leadershipTermId expected of the members.\n@return true if all members have reached this position otherwise false.", "predict": "Checks if any voter has reached the specified position of leadership election."}, {"ID": 1903, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void ensureNewLine() { try { if ((lastElementType == Element.PHRASE) || (lastElementType == Element.CHUNK)) { newLine(); flushLines(); } } catch (DocumentException ex) { throw new ExceptionConverter(ex); } }\n\n    ### Response: Ensures that a new line has been started..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean hasWonVoteOnFullCount(final ClusterMember[] members, final long candidateTermId) { int votes = 0; for (final ClusterMember member : members) { if (null == member.vote || member.candidateTermId != candidateTermId) { return false; } votes += member.vote ? 1 : 0; } return votes >= ClusterMember.quorumThreshold(members.length); }\n\n    ### Response:", "ground_truth": "Has the candidate got unanimous support of the cluster?\n\n@param members         to check for votes.\n@param candidateTermId for the vote.\n@return false if any member has not voted for the candidate.", "predict": "The method ensures that there are enough votes to win the election by counting the number of votes and seeing if they are above the quorum threshold of the members in the cluster."}, {"ID": 1904, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def select(self, ): \"\"\"Store the selected taskfileinfo self.selected and accept the dialog :returns: None :rtype: None :raises: None \"\"\" s = self.browser.selected_indexes(self.browser.get_depth()-1) if not s: return i = s[0].internalPointer() if i: tfi = i.internal_data() self.selected = tfi self.accept()\n\n    ### Response: Store the selected taskfileinfo self.selected and accept the dialog\n\n        :returns: None\n        :rtype: None\n        :raises: None.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean hasMajorityVote(final ClusterMember[] clusterMembers, final long candidateTermId) { int votes = 0; for (final ClusterMember member : clusterMembers) { if (Boolean.TRUE.equals(member.vote) && member.candidateTermId == candidateTermId) { ++votes; } } return votes >= ClusterMember.quorumThreshold(clusterMembers.length); }\n\n    ### Response:", "ground_truth": "Has sufficient votes being counted for a majority?\n\n@param clusterMembers  to check for votes.\n@param candidateTermId for the vote.\n@return true if a majority of positive votes.", "predict": "The method hasMajorityVote accepts an array of ClusterMember objects and a corresponding Term ID, and checks if the majority of objects in the array (or, equivalently, objects which indicated majority voting on the Term ID) indicated majority voting on the Term ID by examining if the Term ID's corresponding member indicated majority voting and the total number of objects which indicated majority voting on the Term ID is above the quorum threshold of the array of objects of the given size. If majority voting has been indicated, the method returns true; otherwise, it returns false."}, {"ID": 1905, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _nodedev_event_lifecycle_cb(conn, dev, event, detail, opaque): ''' Node device lifecycle events handler ''' _salt_send_event(opaque, conn, { 'nodedev': { 'name': dev.name() }, 'event': _get_libvirt_enum_string('VIR_NODE_DEVICE_EVENT_', event), 'detail': 'unknown' # currently unused })\n\n    ### Response: Node device lifecycle events handler.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ClusterMember determineMember( final ClusterMember[] clusterMembers, final int memberId, final String memberEndpoints) { ClusterMember member = NULL_VALUE != memberId ? ClusterMember.findMember(clusterMembers, memberId) : null; if ((null == clusterMembers || 0 == clusterMembers.length) && null == member) { member = ClusterMember.parseEndpoints(NULL_VALUE, memberEndpoints); } else { if (null == member) { throw new ClusterException(\"memberId=\" + memberId + \" not found in clusterMembers\"); } if (!\"\".equals(memberEndpoints)) { ClusterMember.validateMemberEndpoints(member, memberEndpoints); } } return member; }\n\n    ### Response:", "ground_truth": "Determine which member of a cluster this is and check endpoints.\n\n@param clusterMembers  for the current cluster which can be null.\n@param memberId        for this member.\n@param memberEndpoints for this member.\n@return the {@link ClusterMember} determined.", "predict": "Determines the specific member of the cluster given the provided member ID and endpoint information."}, {"ID": 1906, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def update(request) begin data = request.params['data'] hash = RackSessionAccess.decode(data) hash.each { |k, v| request.env[@key][k] = v } rescue => e return render(400) do |xml| xml.h2(\"Bad data #{data.inspect}: #{e.message} \") end end redirect_to action_path(:show) end\n\n    ### Response: Update session data.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void validateMemberEndpoints(final ClusterMember member, final String memberEndpoints) { final ClusterMember endpointMember = ClusterMember.parseEndpoints(Aeron.NULL_VALUE, memberEndpoints); if (!areSameEndpoints(member, endpointMember)) { throw new ClusterException( \"clusterMembers and memberEndpoints differ: \" + member.endpointsDetail() + \" != \" + memberEndpoints); } }\n\n    ### Response:", "ground_truth": "Check the member with the memberEndpoints\n\n@param member          to check memberEndpoints against\n@param memberEndpoints to check member against\n@see ConsensusModule.Context#memberEndpoints()\n@see ConsensusModule.Context#clusterMembers()", "predict": "Validate that the given member and its described endpoint members match."}, {"ID": 1907, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function constructProxyHeader() { return implode($this->version == 1 ? \"\\x20\" : \"\", array_filter([ $this->getSignature(), $this->getVersionCommand(), $this->getProtocol(), $this->getAddressLength(), $this->getAddresses(), $this->getPorts(), $this->version == 1 ? \"\\r\\n\" : null ])); }\n\n    ### Response: Constructs the header by concatenating all relevant fields.\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean areSameEndpoints(final ClusterMember lhs, final ClusterMember rhs) { return lhs.clientFacingEndpoint().equals(rhs.clientFacingEndpoint()) && lhs.memberFacingEndpoint().equals(rhs.memberFacingEndpoint()) && lhs.logEndpoint().equals(rhs.logEndpoint()) && lhs.transferEndpoint().equals(rhs.transferEndpoint()) && lhs.archiveEndpoint().equals(rhs.archiveEndpoint()); }\n\n    ### Response:", "ground_truth": "Are two cluster members using the same endpoints?\n\n@param lhs to check\n@param rhs to check\n@return true if both are using the same endpoints or false if not.", "predict": "Compares the addresses of the two members to see if they are the same endpoint."}, {"ID": 1908, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void handleNewCandlestick(final BitfinexCandlestickSymbol currencyPair, final BitfinexCandle tick) { updateChannelHeartbeat(currencyPair); candleCallbacks.handleEvent(currencyPair, tick); }\n\n    ### Response: Handle a new candlestick\n@param symbol\n@param tick.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isUnanimousCandidate(final ClusterMember[] clusterMembers, final ClusterMember candidate) { for (final ClusterMember member : clusterMembers) { if (NULL_POSITION == member.logPosition || compareLog(candidate, member) < 0) { return false; } } return true; }\n\n    ### Response:", "ground_truth": "Has the member achieved a unanimous view to be a suitable candidate in an election.\n\n@param clusterMembers to compare the candidate against.\n@param candidate      for leadership.\n@return true if the candidate is suitable otherwise false.", "predict": "Check if the given candidate has been unanimously chosen by the other cluster members\n    ClusterMember[] clusterMembers;\n    ClusterMember candidate;\n    boolean unanimous;\n    int logPos;\n    int diff;\n    int len;\n    int i;\n    int j;\n    int k;\n    int l;\n    int m;\n    int sum;\n    int count;\n    int tempCount;\n    int tempCount2;\n    int tempCount3;\n    int tempCount4;\n    int tempCount5;\n    int tempCount5_plus_one;\n    int tempCount5_plus_two;\n    int tempCount5_plus_three;\n    int tempCount5_plus_four;\n    int tempCount5_plus_five;\n    int tempCount5_plus_six;\n    int tempCount5_plus_seven;\n    int tempCount5_plus_eight;\n"}, {"ID": 1909, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function doWork(cb) { async.series([ async.apply(deleteTags), async.apply(createTag) ], cb); }\n\n    ### Response: Creates and deletes tags.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isQuorumCandidate(final ClusterMember[] clusterMembers, final ClusterMember candidate) { int possibleVotes = 0; for (final ClusterMember member : clusterMembers) { if (NULL_POSITION == member.logPosition || compareLog(candidate, member) < 0) { continue; } ++possibleVotes; } return possibleVotes >= ClusterMember.quorumThreshold(clusterMembers.length); }\n\n    ### Response:", "ground_truth": "Has the member achieved a quorum view to be a suitable candidate in an election.\n\n@param clusterMembers to compare the candidate against.\n@param candidate      for leadership.\n@return true if the candidate is suitable otherwise false.", "predict": "Checks if the given candidate has enough positive votes to be included in the quorum of the cluster for the given task."}, {"ID": 1910, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function mapItems(data, fn) { return data instanceof Array ? data.map(function (item) { return fn(item); }) : fn(data); }\n\n    ### Response: Iterate trough one item or array of items and call the defined function\n\n@export\n@template T\n@param {(object|Array)} data - Data which needs to be iterated\n@param {Function} fn - Function that needs to be callse\n@returns {(T|Array)} - The result of iteration.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isNotDuplicateEndpoints(final ClusterMember[] members, final String memberEndpoints) { for (final ClusterMember member : members) { if (member.endpointsDetail().equals(memberEndpoints)) { return false; } } return true; }\n\n    ### Response:", "ground_truth": "Is the string of member endpoints not duplicated in the members.\n\n@param members         to check if the provided endpoints have a duplicate.\n@param memberEndpoints to check for duplicates.\n@return true if no duplicate is found otherwise false.", "predict": "Check if there is no other member having endpoint as given parameter\n\n/**\n * Check if there is no other member having endpoint as given parameter\n *\n * @param {ClusterMember[]} members The members to check\n * @param {String} memberEndpoints The endpoint to check\n *\n * @returns {Boolean} Whether there is no other member having endpoint as given parameter\n */\npublic static boolean isNotDuplicateEndpoints(ClusterMember[] members, String memberEndpoints) {\n for (ClusterMember member : members) {\n if (member.endpointsDetail().equals(memberEndpoints))\n return false;\n }\n return true;\n\n}"}, {"ID": 1911, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_mysql_cfg(): \"\"\" Get the appropriate MySQL configuration \"\"\" environment = get_project_configuration()['environment'] cfg = get_database_configuration() if environment == 'production': mysql = cfg['mysql_online'] else: mysql = cfg['mysql_dev'] return mysql\n\n    ### Response: Get the appropriate MySQL configuration.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int findMemberIndex(final ClusterMember[] clusterMembers, final int memberId) { final int length = clusterMembers.length; int index = ArrayUtil.UNKNOWN_INDEX; for (int i = 0; i < length; i++) { if (clusterMembers[i].id() == memberId) { index = i; } } return index; }\n\n    ### Response:", "ground_truth": "Find the index at which a member id is present.\n\n@param clusterMembers to be searched.\n@param memberId       to search for.\n@return the index at which the member id is found otherwise {@link ArrayUtil#UNKNOWN_INDEX}.", "predict": "Find the member index of the given member ID in the given cluster member array."}, {"ID": 1912, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function convertLocationCoordinates(Location $location) { $coordinates = $location->getCoordinates()->getCoordinates(); $coordinate = doubleval($coordinates[1]) . '%' . doubleval($coordinates[0]); $coordinate = strtr($coordinate, [ '%'=>',', ','=>'.' ]); return $coordinate; }\n\n    ### Response: Convert Location coordinate into acceptable solr document format\n@param Location $location\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ClusterMember[] removeMember(final ClusterMember[] oldMembers, final int memberId) { return ArrayUtil.remove(oldMembers, findMemberIndex(oldMembers, memberId)); }\n\n    ### Response:", "ground_truth": "Remove a member from an array if found, otherwise return the array unmodified.\n\n@param oldMembers to remove a member from.\n@param memberId   of the member to remove.\n@return a new array with the member removed or the existing array if not found.", "predict": "Remove specified member from oldMembers and returns its indices in oldMembers."}, {"ID": 1913, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function WriteDefinitions($fp, $Definitions) { // Write the definitions. uksort($Definitions, 'strcasecmp'); $LastC = ''; foreach ($Definitions as $Key => $Value) { // Add a blank line between letters of the alphabet. if (isset($Key[0]) && strcasecmp($LastC, $Key[0]) != 0) { fwrite($fp, \"\\n\"); $LastC = $Key[0]; } $Str = '$Definition['.var_export($Key, TRUE).'] = '.var_export($Value, TRUE).\";\\n\"; fwrite($fp, $Str); } }\n\n    ### Response: Write a locale's definitions to a file.\n\n@param resource $fp The file to write to.\n@param array $Definitions The definitions to write..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int highMemberId(final ClusterMember[] clusterMembers) { int highId = Aeron.NULL_VALUE; for (final ClusterMember member : clusterMembers) { highId = Math.max(highId, member.id()); } return highId; }\n\n    ### Response:", "ground_truth": "Find the highest member id in an array of members.\n\n@param clusterMembers to search for the highest id.\n@return the highest id otherwise {@link Aeron#NULL_VALUE} if empty.", "predict": "Get the highest member ID of the given cluster members."}, {"ID": 1914, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def augments(cls_cpp): \"\"\"Attach methods of a Python support class to an existing class This monkeypatches all methods defined in the support class onto an existing class. Example: .. code-block:: python @augments(ClassDefinedInCpp) class SupportClass: def foo(self): pass The Python method 'foo' will be monkeypatched on ClassDefinedInCpp. SupportClass has no meaning on its own and should not be used, but gets returned from this function so IDE code inspection doesn't get too confused. We don't subclass because it's much more convenient to monkeypatch Python methods onto the existing Python binding of the C++ class. For one thing, this allows the implementation to be moved from Python to C++ or vice versa. It saves having to implement an intermediate Python subclass and then ensures that the C++ superclass never 'leaks' to pikepdf users. Finally, wrapper classes and subclasses can become problematic if the call stack crosses the C++/Python boundary multiple times. Any existing methods may be used, regardless of whether they defined elsewhere in the support class or in the target class. The target class does not have to be C++ or derived from pybind11. \"\"\" def class_augment(cls, cls_cpp=cls_cpp): for name, fn in inspect.getmembers(cls, inspect.isfunction): fn.__qualname__ = fn.__qualname__.replace(cls.__name__, cls_cpp.__name__) setattr(cls_cpp, name, fn) for name, fn in inspect.getmembers(cls, inspect.isdatadescriptor): setattr(cls_cpp, name, fn) def block_init(self): # Prevent initialization of the support class raise NotImplementedError(self.__class__.__name__ + '.__init__') cls.__init__ = block_init return cls return class_augment\n\n    ### Response: Attach methods of a Python support class to an existing class\n\n    This monkeypatches all methods defined in the support class onto an\n    existing class. Example:\n\n    .. code-block:: python\n\n        @augments(ClassDefinedInCpp)\n        class SupportClass:\n            def foo(self):\n                pass\n\n    The Python method 'foo' will be monkeypatched on ClassDefinedInCpp. SupportClass\n    has no meaning on its own and should not be used, but gets returned from\n    this function so IDE code inspection doesn't get too confused.\n\n    We don't subclass because it's much more convenient to monkeypatch Python\n    methods onto the existing Python binding of the C++ class. For one thing,\n    this allows the implementation to be moved from Python to C++ or vice\n    versa. It saves having to implement an intermediate Python subclass and then\n    ensures that the C++ superclass never 'leaks' to pikepdf users. Finally,\n    wrapper classes and subclasses can become problematic if the call stack\n    crosses the C++/Python boundary multiple times.\n\n    Any existing methods may be used, regardless of whether they defined\n    elsewhere in the support class or in the target class.\n\n    The target class does not have to be C++ or derived from pybind11..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public MappedByteBuffer mapExistingCncFile(final Consumer<String> logger) { final File cncFile = new File(aeronDirectory, CncFileDescriptor.CNC_FILE); if (cncFile.exists() && cncFile.length() > 0) { if (null != logger) { logger.accept(\"INFO: Aeron CnC file exists: \" + cncFile); } return IoUtil.mapExistingFile(cncFile, CncFileDescriptor.CNC_FILE); } return null; }\n\n    ### Response:", "ground_truth": "Map the CnC file if it exists.\n\n@param logger for feedback\n@return a new mapping for the file if it exists otherwise null;", "predict": "\n    Attempt to map an Aeron Cnc file into memory to prepare for publishing data to a source. The file must exist and should be of length greater than 0 to map successfully. If the file does exist, its length is verified and the mapped Cnc file is published to Aeron's source. If the file does not exist or its length is too small, no mapping attempt will occur and Aeron's source remains unchanged"}, {"ID": 1915, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean allParametersHaveDefaults(Map<String, QueryParameter> map) { for (QueryParameter qp : map.values()) { if ((qp.getDefaultValues() == null) || (qp.getDefaultValues().size() == 0)) { if ((qp.getDefaultSource() == null) || \"\".equals(qp.getDefaultSource().trim())) { return false; } } } return true; }\n\n    ### Response: See if all parameters have default values\n\n@param map map of parameters\n@return true if all parameters have default values.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isDriverActive( final File directory, final long driverTimeoutMs, final Consumer<String> logger) { final File cncFile = new File(directory, CncFileDescriptor.CNC_FILE); if (cncFile.exists() && cncFile.length() > 0) { logger.accept(\"INFO: Aeron CnC file exists: \" + cncFile); final MappedByteBuffer cncByteBuffer = IoUtil.mapExistingFile(cncFile, \"CnC file\"); try { return isDriverActive(driverTimeoutMs, logger, cncByteBuffer); } finally { IoUtil.unmap(cncByteBuffer); } } return false; }\n\n    ### Response:", "ground_truth": "Is a media driver active in the given directory?\n\n@param directory       to check\n@param driverTimeoutMs for the driver liveness check.\n@param logger          for feedback as liveness checked.\n@return true if a driver is active or false if not.", "predict": "Checks if Aeron CnC file exists\n    Checks if Aeron CnC file exists and has values defined\n    If Aeron CnC file does exist and has values defined, the driver should be considered active\n    If Aeron CnC file does exist and does not have values defined, the driver should be considered inactive\n    If Aeron CnC file does not exist or has values defined but not loaded, the driver should be considered inactive\n    If Aeron CnC file does not exist and does not have values defined, the driver should be considered inactive\n    If Aeron CnC file does not exist and loaded but does not have values defined, the driver should be considered inactive\n    If Aeron CnC file does not exist and loaded and has values defined, the driver should be considered active\n    If Aeron CnC file does not exist and loaded but does not have values defined, the driver should be considered inactive\n    If Aeron CnC file"}, {"ID": 1916, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function isOneOrMore(commands, iterator) { var list = commands.filter(iterator); if (list.length === 1) { return list[0]; } else if (list.length > 1) { return new Error(util.format('There are %d options for \"%s\": %s', list.length, cmd, list.join(', '))); } return false; }\n\n    ### Response: Determine how many commands match the iterator. Return one if command,.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean isDriverActive(final long driverTimeoutMs, final Consumer<String> logger) { final MappedByteBuffer cncByteBuffer = mapExistingCncFile(logger); try { return isDriverActive(driverTimeoutMs, logger, cncByteBuffer); } finally { IoUtil.unmap(cncByteBuffer); } }\n\n    ### Response:", "ground_truth": "Is a media driver active in the current Aeron directory?\n\n@param driverTimeoutMs for the driver liveness check.\n@param logger          for feedback as liveness checked.\n@return true if a driver is active or false if not.", "predict": "Check for active driver and prompt the log for proper error messages"}, {"ID": 1917, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void stop() { try { Stopwatch watch = Stopwatch.createStarted(); stopAsync(); log.info(\"Awaiting PeerGroup shutdown ...\"); executor.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS); log.info(\"... took {}\", watch); } catch (InterruptedException e) { throw new RuntimeException(e); } }\n\n    ### Response: Does a blocking stop.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isDriverActive( final long driverTimeoutMs, final Consumer<String> logger, final ByteBuffer cncByteBuffer) { if (null == cncByteBuffer) { return false; } final UnsafeBuffer cncMetaDataBuffer = CncFileDescriptor.createMetaDataBuffer(cncByteBuffer); final long startTimeMs = System.currentTimeMillis(); int cncVersion; while (0 == (cncVersion = cncMetaDataBuffer.getIntVolatile(CncFileDescriptor.cncVersionOffset(0)))) { if (System.currentTimeMillis() > (startTimeMs + driverTimeoutMs)) { throw new DriverTimeoutException(\"CnC file is created but not initialised.\"); } sleep(1); } if (CNC_VERSION != cncVersion) { throw new AeronException( \"Aeron CnC version does not match: required=\" + CNC_VERSION + \" version=\" + cncVersion); } final ManyToOneRingBuffer toDriverBuffer = new ManyToOneRingBuffer( CncFileDescriptor.createToDriverBuffer(cncByteBuffer, cncMetaDataBuffer)); final long timestamp = toDriverBuffer.consumerHeartbeatTime(); final long now = System.currentTimeMillis(); final long timestampAge = now - timestamp; logger.accept(\"INFO: Aeron toDriver consumer heartbeat is (ms): \" + timestampAge); return timestampAge <= driverTimeoutMs; }\n\n    ### Response:", "ground_truth": "Is a media driver active in the current mapped CnC buffer? If the driver is mid start then it will wait for\nup to the driverTimeoutMs by checking for the cncVersion being set.\n\n@param driverTimeoutMs for the driver liveness check.\n@param logger          for feedback as liveness checked.\n@param cncByteBuffer   for the existing CnC file.\n@return true if a driver is active or false if not.", "predict": "Checks if the Aeron CnC file version matches the given CnC file version and verifies that the toDriver heartbeat time for the Aeron toDriver consumer does not age beyond the given driverTimeoutMs since its initialization time since its initialization time since its creation."}, {"ID": 1918, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def visit_assign(self, node, parent): \"\"\"visit a Assign node by returning a fresh instance of it\"\"\" type_annotation = self.check_type_comment(node) newnode = nodes.Assign(node.lineno, node.col_offset, parent) newnode.postinit( targets=[self.visit(child, newnode) for child in node.targets], value=self.visit(node.value, newnode), type_annotation=type_annotation, ) return newnode\n\n    ### Response: visit a Assign node by returning a fresh instance of it.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean requestDriverTermination( final File directory, final DirectBuffer tokenBuffer, final int tokenOffset, final int tokenLength) { final File cncFile = new File(directory, CncFileDescriptor.CNC_FILE); if (cncFile.exists() && cncFile.length() > 0) { final MappedByteBuffer cncByteBuffer = IoUtil.mapExistingFile(cncFile, \"CnC file\"); try { final UnsafeBuffer cncMetaDataBuffer = CncFileDescriptor.createMetaDataBuffer(cncByteBuffer); final int cncVersion = cncMetaDataBuffer.getIntVolatile(cncVersionOffset(0)); if (CncFileDescriptor.CNC_VERSION != cncVersion) { throw new AeronException( \"Aeron CnC version does not match: required=\" + CNC_VERSION + \" version=\" + cncVersion); } final ManyToOneRingBuffer toDriverBuffer = new ManyToOneRingBuffer( CncFileDescriptor.createToDriverBuffer(cncByteBuffer, cncMetaDataBuffer)); final long clientId = toDriverBuffer.nextCorrelationId(); final DriverProxy driverProxy = new DriverProxy(toDriverBuffer, clientId); return driverProxy.terminateDriver(tokenBuffer, tokenOffset, tokenLength); } finally { IoUtil.unmap(cncByteBuffer); } } return false; }\n\n    ### Response:", "ground_truth": "Request a driver to run its termination hook.\n\n@param directory for the driver.\n@param tokenBuffer containing the optional token for the request.\n@param tokenOffset within the tokenBuffer at which the token begins.\n@param tokenLength of the token in the tokenBuffer.\n@return true if request was sent or false if request could not be sent.", "predict": "requestDriverTermination()\n    This method requestDriverTermination() reads a Cnc file to generate its Meta data Buffer and correlates its version to the source of the request to determine if the caller should terminate the Driver of Aeron's source. If the caller requires termination of Aeron's source, the DriverProxy and Client IDs of the caller are retrieved to send the Termination Request to Aeron's source. Finally, Aeron's source sends back its acknowledment of Termination Request which indicates Aeron's source has been successfully terminated. If Aeron's source does not support termination, the caller may attempt other ways to terminate Aeron's source such as system level commands or system level resources (ex. SYS_REQ flag of Linux kernel, SYS_REQ event of Linux kernel, SYS_REQ interrupt of Linux kernel, SYS_REQ interrupt of Linux kernel, SYS_REQ interrupt of Linux kernel, SYS_REQ interrupt of Linux kernel, SYS"}, {"ID": 1919, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func setQueryTimeouts(c net.Conn) { now := time.Now() c.SetReadDeadline(now.Add(readDeadline)) c.SetWriteDeadline(now.Add(writeDeadline)) }\n\n    ### Response: // configure DNS query expiration.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int frameLengthVolatile(final UnsafeBuffer buffer, final int termOffset) { int frameLength = buffer.getIntVolatile(termOffset); if (ByteOrder.nativeOrder() != LITTLE_ENDIAN) { frameLength = Integer.reverseBytes(frameLength); } return frameLength; }\n\n    ### Response:", "ground_truth": "Get the length of a frame from the header as a volatile read.\n\n@param buffer     containing the frame.\n@param termOffset at which a frame begins.\n@return the value for the frame length.", "predict": "// Compute length of an inspected volatile frame."}, {"ID": 1920, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *CookieOverseer) encode(plaintext string) (string, error) { nonce := make([]byte, c.gcmBlockMode.NonceSize()) if _, err := rand.Read(nonce); err != nil { return \"\", errors.Wrap(err, \"failed to encode session cookie value\") } // Append ciphertext to the end of nonce so we have the nonce for decrypt ciphertext := c.gcmBlockMode.Seal(nonce, nonce, []byte(plaintext), nil) return base64.StdEncoding.EncodeToString(ciphertext), nil }\n\n    ### Response: // encode into base64'd aes-gcm.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void frameLengthOrdered(final UnsafeBuffer buffer, final int termOffset, final int frameLength) { int length = frameLength; if (ByteOrder.nativeOrder() != LITTLE_ENDIAN) { length = Integer.reverseBytes(frameLength); } buffer.putIntOrdered(termOffset, length); }\n\n    ### Response:", "ground_truth": "Write the length header for a frame in a memory ordered fashion.\n\n@param buffer      containing the frame.\n@param termOffset  at which a frame begins.\n@param frameLength field to be set for the frame.", "predict": "// writes length of following frame in termOffset, Little Endian order."}, {"ID": 1921, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def set(self, attr, value): \"\"\"Set the value of an attribute in the submit description file. The value can be passed in as a Python type (i.e. a list, a tuple or a Python boolean). The Python values will be reformatted into strings based on the standards described in the HTCondor manual: http://research.cs.wisc.edu/htcondor/manual/current/condor_submit.html Args: attr (str): The name of the attribute to set. value (str): The value to assign to 'attr'. \"\"\" def escape_new_syntax(value, double_quote_escape='\"'): value = str(value) value = value.replace(\"'\", \"''\") value = value.replace('\"', '%s\"' % double_quote_escape) if ' ' in value or '\\t' in value: value = \"'%s'\" % value return value def escape_new_syntax_pre_post_script(value): return escape_new_syntax(value, '\\\\') def escape_remap(value): value = value.replace('=', '\\=') value = value.replace(';', '\\;') return value def join_function_template(join_string, escape_func): return lambda value: join_string.join([escape_func(i) for i in value]) def quote_join_function_template(join_string, escape_func): return lambda value: join_function_template(join_string, escape_func)(value) join_functions = {'rempas': quote_join_function_template('; ', escape_remap), 'arguments': quote_join_function_template(' ', escape_new_syntax), 'Arguments': quote_join_function_template(' ', escape_new_syntax_pre_post_script) } if value is False: value = 'false' elif value is True: value = 'true' elif isinstance(value, list) or isinstance(value, tuple): join_function = join_function_template(', ', str) for key in list(join_functions.keys()): if attr.endswith(key): join_function = join_functions[key] value = join_function(value) self.attributes[attr] = value\n\n    ### Response: Set the value of an attribute in the submit description file.\n\n        The value can be passed in as a Python type (i.e. a list, a tuple or a Python boolean).\n        The Python values will be reformatted into strings based on the standards described in\n        the HTCondor manual: http://research.cs.wisc.edu/htcondor/manual/current/condor_submit.html\n\n        Args:\n            attr (str): The name of the attribute to set.\n            value (str): The value to assign to 'attr'..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void frameType(final UnsafeBuffer buffer, final int termOffset, final int type) { buffer.putShort(typeOffset(termOffset), (short)type, LITTLE_ENDIAN); }\n\n    ### Response:", "ground_truth": "Write the type field for a frame.\n\n@param buffer     containing the frame.\n@param termOffset at which a frame begins.\n@param type       type value for the frame.", "predict": "\n    Public static void frameType(UnsafeBuffer buffer, int termOffset, int type){\n        int typeOffset = termOffset - FrameTermsOffset;\n        int frameOffset = typeOffset - FrameTermsOffset;\n        int frameTermTypeOffset;\n        int frameTermType;\n        int frameTermOffset;\n        int frameTermTypeOffset_TermOffset;\n        int frameTermType_TermOffset;\n        int frameTermOffset_TermOffset;\n        int frameTermOffset_TermOffset_TermOffset;\n        int frameTermOffset_TermOffset_TermOffset_TermOffset;\n        int frameTermOffset_TermOffset_TermOffset_TermOffset_TermOffset;\n        int frameTermOffset_TermOffset_TermOffset_TermOffset_TermOffset_TermOffset;\n        int frameTermOffset_TermOffset_TermOffset_TermOffset_TermOffset_TermOffset_TermOffset;\n        int frameTermOffset_TermOffset_TermOffset_TermOffset_TermOffset_"}, {"ID": 1922, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def bank_account_query(self, number, date, account_type, bank_id): \"\"\"Bank account statement request\"\"\" return self.authenticated_query( self._bareq(number, date, account_type, bank_id) )\n\n    ### Response: Bank account statement request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void frameFlags(final UnsafeBuffer buffer, final int termOffset, final byte flags) { buffer.putByte(flagsOffset(termOffset), flags); }\n\n    ### Response:", "ground_truth": "Write the flags field for a frame.\n\n@param buffer     containing the frame.\n@param termOffset at which a frame begins.\n@param flags      value for the frame.", "predict": "Stores an individual frame's terminal flags in the terminalInfo area of the Frame object."}, {"ID": 1923, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void obtainDialogMaxWidth(@NonNull final TypedArray typedArray) { try { int maxWidth = typedArray .getDimensionPixelSize(R.styleable.DialogPreference_dialogMaxWidth, -1); if (maxWidth != -1) { setDialogMaxWidth(maxWidth); } } catch (Resources.NotFoundException | UnsupportedOperationException e) { // No need to handle } }\n\n    ### Response: Obtains the maximum width of the preference's dialog from a specific typed array.\n\n@param typedArray\nThe typed array, the maximum width should be obtained from, as an instance of the\nclass {@link TypedArray}. The typed array may not be null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void frameTermOffset(final UnsafeBuffer buffer, final int termOffset) { buffer.putInt(termOffsetOffset(termOffset), termOffset, LITTLE_ENDIAN); }\n\n    ### Response:", "ground_truth": "Write the term offset field for a frame.\n\n@param buffer     containing the frame.\n@param termOffset at which a frame begins.", "predict": "Offsets the given termOffset from the beginning of the FrameTerm* structures to make room for the FrameTermOffset structures to hold the given termOffset, plus other values pertaining to the FrameTermOffset structures (which are also stored at other locations in the FrameTerm* structures)."}, {"ID": 1924, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function add(Message $message, $groupName = null) { if (!isset($this->messages[$groupName])) { $this->messages[$groupName] = array(); } $this->messages[$groupName][] = $message; }\n\n    ### Response: adds a Messsage object\n\n@param Message $message\tthe Message object.\n@param string $groupName\tthe name of the group, which helps to categorize messages..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void frameTermId(final UnsafeBuffer buffer, final int termOffset, final int termId) { buffer.putInt(termIdOffset(termOffset), termId, LITTLE_ENDIAN); }\n\n    ### Response:", "ground_truth": "Write the term id field for a frame.\n\n@param buffer     containing the frame.\n@param termOffset at which a frame begins.\n@param termId     value for the frame.", "predict": "Stores termOffset, termId into an UnsafeBuffer at termOffset and writes to Little Endian format"}, {"ID": 1925, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function classify (s) { const keys = { ak: 'account_pubkey', ok: 'oracle_pubkey' } if (!s.match(/^[a-z]{2}_.+/)) { throw Error('Not a valid hash') } const klass = s.substr(0, 2) if (klass in keys) { return keys[klass] } else { throw Error(`Unknown class ${klass}`) } }\n\n    ### Response: What kind of a hash is this? If it begins with 'ak_' it is an\naccount key, if with 'ok_' it's an oracle key.\n\n@param s - the hash.\nreturns the type, or throws an exception if type not found..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int findCounterIdByRecording(final CountersReader countersReader, final long recordingId) { final DirectBuffer buffer = countersReader.metaDataBuffer(); for (int i = 0, size = countersReader.maxCounterId(); i < size; i++) { if (countersReader.getCounterState(i) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(i); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECORDING_POSITION_TYPE_ID && buffer.getLong(recordOffset + KEY_OFFSET + RECORDING_ID_OFFSET) == recordingId) { return i; } } } return NULL_COUNTER_ID; }\n\n    ### Response:", "ground_truth": "Find the active counter id for a stream based on the recording id.\n\n@param countersReader to search within.\n@param recordingId    for the active recording.\n@return the counter id if found otherwise {@link CountersReader#NULL_COUNTER_ID}.", "predict": "Find the counter ID corresponding to the given recording ID by\nfirst identifying the type of recording ID, and then looking up the ID corresponding to the given recording ID in the counters meta data."}, {"ID": 1926, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _get_controller_agent(self, arg): \"\"\"Return a single or a complex controller agent.\"\"\" controller_agent = None controller = arg.get('arg') # There is either a single controller here if controller is not None: controller_agent, coords = self._get_agent_from_entity(controller) # Or the controller is a complex elif arg['argument-type'] == 'complex': controllers = list(arg.get('args').values()) controller_agent, coords = \\ self._get_agent_from_entity(controllers[0]) bound_agents = [self._get_agent_from_entity(c)[0] for c in controllers[1:]] bound_conditions = [BoundCondition(ba, True) for ba in bound_agents] controller_agent.bound_conditions = bound_conditions return controller_agent, coords\n\n    ### Response: Return a single or a complex controller agent..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int findCounterIdBySession(final CountersReader countersReader, final int sessionId) { final DirectBuffer buffer = countersReader.metaDataBuffer(); for (int i = 0, size = countersReader.maxCounterId(); i < size; i++) { if (countersReader.getCounterState(i) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(i); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECORDING_POSITION_TYPE_ID && buffer.getInt(recordOffset + KEY_OFFSET + SESSION_ID_OFFSET) == sessionId) { return i; } } } return NULL_COUNTER_ID; }\n\n    ### Response:", "ground_truth": "Find the active counter id for a stream based on the session id.\n\n@param countersReader to search within.\n@param sessionId      for the active recording.\n@return the counter id if found otherwise {@link CountersReader#NULL_COUNTER_ID}.", "predict": "Find the counter ID of the given session ID.."}, {"ID": 1927, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public BoxRequestsFolder.RestoreTrashedFolder getRestoreTrashedFolderRequest(String id) { BoxRequestsFolder.RestoreTrashedFolder request = new BoxRequestsFolder.RestoreTrashedFolder(id, getFolderInfoUrl(id), mSession); return request; }\n\n    ### Response: Gets a request that restores a trashed folder\n\n@param id        id of folder to restore\n@return      request to restore a folder from the trash.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long getRecordingId(final CountersReader countersReader, final int counterId) { final DirectBuffer buffer = countersReader.metaDataBuffer(); if (countersReader.getCounterState(counterId) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(counterId); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECORDING_POSITION_TYPE_ID) { return buffer.getLong(recordOffset + KEY_OFFSET + RECORDING_ID_OFFSET); } } return NULL_RECORDING_ID; }\n\n    ### Response:", "ground_truth": "Get the recording id for a given counter id.\n\n@param countersReader to search within.\n@param counterId      for the active recording.\n@return the counter id if found otherwise {@link #NULL_RECORDING_ID}.", "predict": "Get the recording id from counters reader"}, {"ID": 1928, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def svg(self, file, scale=1, module_color='#000', background=None, quiet_zone=4, xmldecl=True, svgns=True, title=None, svgclass='pyqrcode', lineclass='pyqrline', omithw=False, debug=False): \"\"\"This method writes the QR code out as an SVG document. The code is drawn by drawing only the modules corresponding to a 1. They are drawn using a line, such that contiguous modules in a row are drawn with a single line. The *file* parameter is used to specify where to write the document to. It can either be a writable stream or a file path. The *scale* parameter sets how large to draw a single module. By default one pixel is used to draw a single module. This may make the code too small to be read efficiently. Increasing the scale will make the code larger. Unlike the png() method, this method will accept fractional scales (e.g. 2.5). Note, three things are done to make the code more appropriate for embedding in a HTML document. The \"white\" part of the code is actually transparent. The code itself has a class given by *svgclass* parameter. The path making up the QR code uses the class set using the *lineclass*. These should make the code easier to style using CSS. By default the output of this function is a complete SVG document. If only the code itself is desired, set the *xmldecl* to false. This will result in a fragment that contains only the \"drawn\" portion of the code. Likewise, you can set the *title* of the document. The SVG name space attribute can be suppressed by setting *svgns* to False. When True the *omithw* indicates if width and height attributes should be omitted. If these attributes are omitted, a ``viewBox`` attribute will be added to the document. You can also set the colors directly using the *module_color* and *background* parameters. The *module_color* parameter sets what color to use for the data modules (the black part on most QR codes). The *background* parameter sets what color to use for the background (the white part on most QR codes). The parameters can be set to any valid SVG or HTML color. If the background is set to None, then no background will be drawn, i.e. the background will be transparent. Note, many color combinations are unreadable by scanners, so be careful. The *quiet_zone* parameter sets how wide the quiet zone around the code should be. According to the standard this should be 4 modules. It is left settable because such a wide quiet zone is unnecessary in many applications where the QR code is not being printed. Example: >>> code = pyqrcode.create('Hello. Uhh, can we have your liver?') >>> code.svg('live-organ-transplants.svg', 3.6) >>> code.svg('live-organ-transplants.svg', scale=4, module_color='brown', background='0xFFFFFF') \"\"\" builder._svg(self.code, self.version, file, scale=scale, module_color=module_color, background=background, quiet_zone=quiet_zone, xmldecl=xmldecl, svgns=svgns, title=title, svgclass=svgclass, lineclass=lineclass, omithw=omithw, debug=debug)\n\n    ### Response: This method writes the QR code out as an SVG document. The\n        code is drawn by drawing only the modules corresponding to a 1. They\n        are drawn using a line, such that contiguous modules in a row\n        are drawn with a single line.\n\n        The *file* parameter is used to specify where to write the document\n        to. It can either be a writable stream or a file path.\n        \n        The *scale* parameter sets how large to draw\n        a single module. By default one pixel is used to draw a single\n        module. This may make the code too small to be read efficiently.\n        Increasing the scale will make the code larger. Unlike the png() method,\n        this method will accept fractional scales (e.g. 2.5).\n\n        Note, three things are done to make the code more appropriate for\n        embedding in a HTML document. The \"white\" part of the code is actually\n        transparent. The code itself has a class given by *svgclass* parameter. \n        The path making up the QR code uses the class set using the *lineclass*.\n        These should make the code easier to style using CSS.\n\n        By default the output of this function is a complete SVG document. If\n        only the code itself is desired, set the *xmldecl* to false. This will\n        result in a fragment that contains only the \"drawn\" portion of the code.\n        Likewise, you can set the *title* of the document. The SVG name space\n        attribute can be suppressed by setting *svgns* to False.\n\n        When True the *omithw* indicates if width and height attributes should\n        be omitted. If these attributes are omitted, a ``viewBox`` attribute\n        will be added to the document.\n\n        You can also set the colors directly using the *module_color* and\n        *background* parameters. The *module_color* parameter sets what color to\n        use for the data modules (the black part on most QR codes). The\n        *background* parameter sets what color to use for the background (the\n        white part on most QR codes). The parameters can be set to any valid\n        SVG or HTML color. If the background is set to None, then no background\n        will be drawn, i.e. the background will be transparent. Note, many color\n        combinations are unreadable by scanners, so be careful.\n\n        The *quiet_zone* parameter sets how wide the quiet zone around the code\n        should be. According to the standard this should be 4 modules. It is\n        left settable because such a wide quiet zone is unnecessary in many\n        applications where the QR code is not being printed.\n        \n        Example:\n            >>> code = pyqrcode.create('Hello. Uhh, can we have your liver?')\n            >>> code.svg('live-organ-transplants.svg', 3.6)\n            >>> code.svg('live-organ-transplants.svg', scale=4,\n                         module_color='brown', background='0xFFFFFF').\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isActive(final CountersReader countersReader, final int counterId, final long recordingId) { final DirectBuffer buffer = countersReader.metaDataBuffer(); if (countersReader.getCounterState(counterId) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(counterId); return buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECORDING_POSITION_TYPE_ID && buffer.getLong(recordOffset + KEY_OFFSET + RECORDING_ID_OFFSET) == recordingId; } return false; }\n\n    ### Response:", "ground_truth": "Is the recording counter still active.\n\n@param countersReader to search within.\n@param counterId      to search for.\n@param recordingId    to confirm it is still the same value.\n@return true if the counter is still active otherwise false.", "predict": "\n    The countersReader.metaDataOffset() gives you information about the location of the counters meta data in the counters reader. The counters reader stores counters meta data in an indexed way, where counters are indexed by the counter id, but also contains information about the type of the counter, its name, timestamp, timestamp adjustment, timestamp adjustment rate, timestamp adjustment rate constant, timestamp adjustment rate offset, timestamp adjustment rate offset constant, timestamp adjustment rate offsetdelta, timestamp adjustment rate offsetdelta constant, timestamp adjustment rate offsetdelta constantdelta, timestamp adjustment rate offsetdelta constantdeltadelta and timestamp adjustment rate offsetdelta constantdeltadeltadelta for each counter id. The counters reader also stores other information such as recoding IDs, total number of counters and total storage size of counters in counters meta data. The counters reader also stores other information such as recoding IDs, total number of counters and total storage size of counters in counters meta data. The counters reader also stores"}, {"ID": 1929, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def remap_index_fn(ref_file): \"\"\"Map sequence references to snap reference directory, using standard layout. \"\"\" snap_dir = os.path.join(os.path.dirname(ref_file), os.pardir, \"snap\") assert os.path.exists(snap_dir) and os.path.isdir(snap_dir), snap_dir return snap_dir\n\n    ### Response: Map sequence references to snap reference directory, using standard layout..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public StatusMessageFlyweight applicationSpecificFeedback(final byte[] source, final int offset, final int length) { frameLength(HEADER_LENGTH + length); putBytes(APP_SPECIFIC_FEEDBACK_FIELD_OFFSET, source, offset, length); return this; }\n\n    ### Response:", "ground_truth": "Set the Application Specific Feedback for the Status Message.\n\n@param source of the feedback to set\n@param offset of the feedback in the source\n@param length of the feedback in bytes\n@return flyweight", "predict": "This method writes an \"application specific feedback\" message to the specified location in the serialized object frame. It reads an \"application specific feedback\" message from the source array starting at the given offset and length, and writes it to the serialized object frame at the given offset and length."}, {"ID": 1930, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def mutapply(self, function, fieldname): \"\"\" Applies `function` in-place to the field name specified. In other words, `mutapply` overwrites column `fieldname` ith the results of applying `function` to each element of that column. \"\"\" self[fieldname] = self.apply(function, fieldname)\n\n    ### Response: Applies `function` in-place to the field name specified.\n\n        In other words, `mutapply` overwrites column `fieldname`\n        ith the results of applying `function` to each element of that column..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void reload() { entries.clear(); indexByLeadershipTermIdMap.clear(); indexByLeadershipTermIdMap.compact(); nextEntryIndex = 0; byteBuffer.clear(); try { while (true) { final int bytes = fileChannel.read(byteBuffer); if (byteBuffer.remaining() == 0) { byteBuffer.flip(); captureEntriesFromBuffer(byteBuffer, buffer, entries); byteBuffer.clear(); } if (-1 == bytes) { if (byteBuffer.position() > 0) { byteBuffer.flip(); captureEntriesFromBuffer(byteBuffer, buffer, entries); byteBuffer.clear(); } break; } } } catch (final IOException ex) { LangUtil.rethrowUnchecked(ex); } }\n\n    ### Response:", "ground_truth": "Reload the log from disk.", "predict": "\n    The reload() method reads updated leadershipTermId and leadershipTermName values from file into indexed sets of indexedByLeadershipTermId and indexedByLeadershipTermName maps to support faster access to records with given values of leadershipTermId and leadershipTermName."}, {"ID": 1931, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private final void expand_array() { // if (tc.isEntryEnabled()) // SibTr.entry(tc, \"expand_array\"); int length = m_array.length; Object[] m_new = new Object[length*2]; System.arraycopy(m_array, m_head, m_new, m_head, length-m_head); System.arraycopy(m_array, 0, m_new, length, m_tail); m_tail += length; m_array = m_new; // if (tc.isEntryEnabled()) // SibTr.exit(tc, \"expand_array\"); }\n\n    ### Response: Increase the size of the internal array to accomodate more\nqueue elements..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Entry findLastTerm() { for (int i = entries.size() - 1; i >= 0; i--) { final Entry entry = entries.get(i); if (ENTRY_TYPE_TERM == entry.type) { return entry; } } return null; }\n\n    ### Response:", "ground_truth": "Find the last leadership term in the recording log.\n\n@return the last leadership term in the recording log.", "predict": "Find the last term (index of the last entry) of the given Stack."}, {"ID": 1932, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _property_descriptor_to_graphql_type(property_obj): \"\"\"Return the best GraphQL type representation for an OrientDB property descriptor.\"\"\" property_type = property_obj.type_id scalar_types = { PROPERTY_TYPE_BOOLEAN_ID: GraphQLBoolean, PROPERTY_TYPE_DATE_ID: GraphQLDate, PROPERTY_TYPE_DATETIME_ID: GraphQLDateTime, PROPERTY_TYPE_DECIMAL_ID: GraphQLDecimal, PROPERTY_TYPE_DOUBLE_ID: GraphQLFloat, PROPERTY_TYPE_FLOAT_ID: GraphQLFloat, PROPERTY_TYPE_INTEGER_ID: GraphQLInt, PROPERTY_TYPE_STRING_ID: GraphQLString, } result = scalar_types.get(property_type, None) if result: return result mapping_types = { PROPERTY_TYPE_EMBEDDED_SET_ID: GraphQLList, PROPERTY_TYPE_EMBEDDED_LIST_ID: GraphQLList, } wrapping_type = mapping_types.get(property_type, None) if wrapping_type: linked_property_obj = property_obj.qualifier # There are properties that are embedded collections of non-primitive types, # for example, ProxyEventSet.scalar_parameters. # The GraphQL compiler does not currently support these. if linked_property_obj in scalar_types: return wrapping_type(scalar_types[linked_property_obj]) # We weren't able to represent this property in GraphQL, so we'll hide it instead. return None\n\n    ### Response: Return the best GraphQL type representation for an OrientDB property descriptor..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RecoveryPlan createRecoveryPlan(final AeronArchive archive, final int serviceCount) { final ArrayList<Snapshot> snapshots = new ArrayList<>(); final ArrayList<Log> logs = new ArrayList<>(); planRecovery(snapshots, logs, entries, archive, serviceCount); long lastLeadershipTermId = NULL_VALUE; long lastTermBaseLogPosition = 0; long committedLogPosition = -1; long appendedLogPosition = 0; final int snapshotStepsSize = snapshots.size(); if (snapshotStepsSize > 0) { final Snapshot snapshot = snapshots.get(0); lastLeadershipTermId = snapshot.leadershipTermId; lastTermBaseLogPosition = snapshot.termBaseLogPosition; appendedLogPosition = snapshot.logPosition; committedLogPosition = snapshot.logPosition; } if (!logs.isEmpty()) { final Log log = logs.get(0); lastLeadershipTermId = log.leadershipTermId; lastTermBaseLogPosition = log.termBaseLogPosition; appendedLogPosition = log.stopPosition; committedLogPosition = log.logPosition; } return new RecoveryPlan( lastLeadershipTermId, lastTermBaseLogPosition, appendedLogPosition, committedLogPosition, snapshots, logs); }\n\n    ### Response:", "ground_truth": "Create a recovery plan for the cluster that when the steps are replayed will bring the cluster back to the\nlatest stable state.\n\n@param archive      to lookup recording descriptors.\n@param serviceCount of services that may have snapshots.\n@return a new {@link RecoveryPlan} for the cluster.", "predict": "Plan recovery by appending log entries to Aeron Archive and updating corresponding log metadata records in the system."}, {"ID": 1933, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def vanity_converted(phone) return phone unless Phonelib.vanity_conversion (phone || '').gsub(cr('[a-zA-Z]')) do |c| c.upcase! # subtract \"A\" n = (c.ord - 65) / 3 # account for #7 & #9 which have 4 chars n -= 1 if c.match(Core::VANITY_4_LETTERS_KEYS_REGEX) (n + 2).to_s end end\n\n    ### Response: converts symbols in phone to numbers.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static RecoveryPlan createRecoveryPlan(final ArrayList<RecordingLog.Snapshot> snapshots) { long lastLeadershipTermId = NULL_VALUE; long lastTermBaseLogPosition = 0; long committedLogPosition = -1; long appendedLogPosition = 0; final int snapshotStepsSize = snapshots.size(); if (snapshotStepsSize > 0) { final Snapshot snapshot = snapshots.get(0); lastLeadershipTermId = snapshot.leadershipTermId; lastTermBaseLogPosition = snapshot.termBaseLogPosition; appendedLogPosition = snapshot.logPosition; committedLogPosition = snapshot.logPosition; } return new RecoveryPlan( lastLeadershipTermId, lastTermBaseLogPosition, appendedLogPosition, committedLogPosition, snapshots, new ArrayList<>()); }\n\n    ### Response:", "ground_truth": "Create a recovery plan that has only snapshots. Used for dynamicJoin snapshot load.\n\n@param snapshots to construct plan from\n@return a new {@link RecoveryPlan} for the cluster", "predict": "generates RecoveryPlans given an array of Snapshot objects with information about the Recommender App's activity during the given Recommendation Interval (in steps)."}, {"ID": 1934, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def fetch(self): \"\"\" Fetch & return a new `Tag` object representing the tag's current state :rtype: Tag :raises DOAPIError: if the API endpoint replies with an error (e.g., if the tag no longer exists) \"\"\" api = self.doapi_manager return api._tag(api.request(self.url)[\"tag\"])\n\n    ### Response: Fetch & return a new `Tag` object representing the tag's current state\n\n        :rtype: Tag\n        :raises DOAPIError: if the API endpoint replies with an error (e.g., if\n            the tag no longer exists).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void appendTerm( final long recordingId, final long leadershipTermId, final long termBaseLogPosition, final long timestamp) { final int size = entries.size(); if (size > 0) { final Entry lastEntry = entries.get(size - 1); if (lastEntry.type != NULL_VALUE && lastEntry.leadershipTermId >= leadershipTermId) { throw new ClusterException(\"leadershipTermId out of sequence: previous \" + lastEntry.leadershipTermId + \" this \" + leadershipTermId); } } indexByLeadershipTermIdMap.put(leadershipTermId, nextEntryIndex); append( ENTRY_TYPE_TERM, recordingId, leadershipTermId, termBaseLogPosition, NULL_POSITION, timestamp, NULL_VALUE); }\n\n    ### Response:", "ground_truth": "Append a log entry for a leadership term.\n\n@param recordingId         of the log.\n@param leadershipTermId    for the current term.\n@param termBaseLogPosition reached at the beginning of the term.\n@param timestamp           at the beginning of the term.", "predict": "Append Term stores the given values to the given location of the given table"}, {"ID": 1935, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function restore() { if ($this->isKept) { $key = $this->getPKvalue(); $sql = 'update '.$this->DBtable.' set deleted_at=null where '.$this->keyName.\" = '\".$key.\"' \"; // if (Database::exec($sql)) { // Code to execute the init the model } } }\n\n    ### Response: restore if kept deleted..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void appendSnapshot( final long recordingId, final long leadershipTermId, final long termBaseLogPosition, final long logPosition, final long timestamp, final int serviceId) { final int size = entries.size(); if (size > 0) { final Entry entry = entries.get(size - 1); if (entry.type == ENTRY_TYPE_TERM && entry.leadershipTermId != leadershipTermId) { throw new ClusterException(\"leadershipTermId out of sequence: previous \" + entry.leadershipTermId + \" this \" + leadershipTermId); } } append( ENTRY_TYPE_SNAPSHOT, recordingId, leadershipTermId, termBaseLogPosition, logPosition, timestamp, serviceId); }\n\n    ### Response:", "ground_truth": "Append a log entry for a snapshot.\n\n@param recordingId         in the archive for the snapshot.\n@param leadershipTermId    for the current term\n@param termBaseLogPosition at the beginning of the leadership term.\n@param logPosition         for the position in the current term or length so far for that term.\n@param timestamp           at which the snapshot was taken.\n@param serviceId           for which the snapshot is recorded.", "predict": "Append snapshot entries..."}, {"ID": 1936, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def require_editable(f): \"\"\" Makes sure the registry key is editable before trying to edit it. \"\"\" def wrapper(self, *args, **kwargs): if not self._edit: raise RegistryKeyNotEditable(\"The key is not set as editable.\") return f(self, *args, **kwargs) return wrapper\n\n    ### Response: Makes sure the registry key is editable before trying to edit it..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void commitLogPosition(final long leadershipTermId, final long logPosition) { final int index = getLeadershipTermEntryIndex(leadershipTermId); commitEntryValue(index, logPosition, LOG_POSITION_OFFSET); final Entry entry = entries.get(index); entries.set(index, new Entry( entry.recordingId, entry.leadershipTermId, entry.termBaseLogPosition, logPosition, entry.timestamp, entry.serviceId, entry.type, entry.entryIndex)); }\n\n    ### Response:", "ground_truth": "Commit the position reached in a leadership term before a clean shutdown.\n\n@param leadershipTermId for committing the term position reached.\n@param logPosition      reached in the leadership term.", "predict": "The above method makes sure that the given logPosition of the corresponding leadershipTermId of the given ComitLogPosition is set to the given logPosition."}, {"ID": 1937, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected final void writeLEInt(int v) throws IOException { ensureAvailableBytes(4); this.buffer.order(ByteOrder.LITTLE_ENDIAN); this.buffer.putInt(v); }\n\n    ### Response: Write a little endian 4-byte integer.\n\n@param v is a little endian 4-byte integer.\n@throws IOException in case of error..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void tombstoneEntry(final long leadershipTermId, final int entryIndex) { int index = -1; for (int i = 0, size = entries.size(); i < size; i++) { final Entry entry = entries.get(i); if (entry.leadershipTermId == leadershipTermId && entry.entryIndex == entryIndex) { index = entry.entryIndex; if (ENTRY_TYPE_TERM == entry.type) { indexByLeadershipTermIdMap.remove(leadershipTermId); } break; } } if (-1 == index) { throw new ClusterException(\"unknown entry index: \" + entryIndex); } buffer.putInt(0, NULL_VALUE, LITTLE_ENDIAN); byteBuffer.limit(SIZE_OF_INT).position(0); final long filePosition = (index * (long)ENTRY_LENGTH) + ENTRY_TYPE_OFFSET; try { if (SIZE_OF_INT != fileChannel.write(byteBuffer, filePosition)) { throw new ClusterException(\"failed to write field atomically\"); } } catch (final Exception ex) { LangUtil.rethrowUnchecked(ex); } }\n\n    ### Response:", "ground_truth": "Tombstone an entry in the log so it is no longer valid.\n\n@param leadershipTermId to match for validation.\n@param entryIndex       reached in the leadership term.", "predict": "Store an int marker, reserved for writing future tombstone markers, and set the file position for writing an int length, int type, int entryIndex, int leadershipTermId, int reservedFlag, int reservedFlagFlag, int reservedFlagFlagFlag, int reservedFlagFlagFlagFlag, int reservedFlagFlagFlagFlagFlag, int reservedFlagFlagFlagFlagFlagFlag, int reservedFlagFlagFlagFlagFlagFlagFlag, int reservedFlagFlagFlagFlagFlagFlagFlagFlag, int reservedFlagFlagFlagFlagFlagFlagFlagFlagFlag, int reservedFlagFlagFlagFlagFlagFlagFlagFlagFlagFlag, int reservedFlagFlagFlagFlagFlagFlagFlagFlagFlagFlagFlag, int reservedFlagFlagFlagFlagFlagFlagFlagFlagFlagFlagFlagFlag, int reservedFlagFlagFlagFlagFlagFlagFlagFlagFlagFlagFlagFlagFlag, int reservedFlagFlagFlagFlagFlagFlagFlagFlagFlagFlagFlagFlagFlagFlag, int reservedFlagFlagFlagFlagFlagFlagFlagFlagFlagFlagFlagFlagFlagFlagFlag, int reservedFlagFlagFlagFlagFlagFlagFlagFlagFlagFlagFlagFlagFlag"}, {"ID": 1938, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func isDaemonsetPod(pod *v1.Pod) bool { ownerRefList := pod.ObjectMeta.GetOwnerReferences() for _, ownerRef := range ownerRefList { if ownerRef.Kind == \"DaemonSet\" { return true } } return false }\n\n    ### Response: // isDaemonSetPod checks where the pod is a daemonset pod..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void close() { if (null != publication && publication.isConnected()) { closeSession(); } if (!ctx.ownsAeronClient()) { CloseHelper.close(subscription); CloseHelper.close(publication); } ctx.close(); }\n\n    ### Response:", "ground_truth": "Close session and release associated resources.", "predict": "// Closes the aeron channel and socket if necessary.."}, {"ID": 1939, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function getRelation($field) { $relations = $this->getRelations(); return isset($relations[$field]) ? $relations[$field] : null; }\n\n    ### Response: Get relation by field name\n\n@param string $field Field name\n@return Schema\\Relation|null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public long offer(final DirectBufferVector[] vectors) { if (headerVector != vectors[0]) { vectors[0] = headerVector; } return publication.offer(vectors, null); }\n\n    ### Response:", "ground_truth": "Non-blocking publish by gathering buffer vectors into a message. The first vector will be replaced by the cluster\ningress header so must be left unused.\n\n@param vectors which make up the message.\n@return the same as {@link Publication#offer(DirectBufferVector[])}.\n@see Publication#offer(DirectBufferVector[])", "predict": "Offers publication from provided DirectBufferVector arrays to other objects"}, {"ID": 1940, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getValues($groupName = '') { $returnValue = array(); foreach($this->elements as $element){ if (!empty($this->systemElements) && in_array($element->getName(), $this->systemElements)) { continue; } if(empty($groupName) || !isset($this->groups[$groupName]) || in_array($element->getName(), $this->groups[$groupName]['elements'])) { $returnValue[tao_helpers_Uri::decode($element->getName())] = $element->getEvaluatedValue(); } } return (array) $returnValue; }\n\n    ### Response: Short description of method getValues\n\n@access public\n@author Bertrand Chevrier, \n@param  string $groupName\n@param  array $filterProperties List of properties which values are unneeded and must be filtered\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean unblock( final UnsafeBuffer[] termBuffers, final UnsafeBuffer logMetaDataBuffer, final long blockedPosition, final int termLength) { final int positionBitsToShift = LogBufferDescriptor.positionBitsToShift(termLength); final int blockedTermCount = (int)(blockedPosition >> positionBitsToShift); final int blockedOffset = (int)blockedPosition & (termLength - 1); final int activeTermCount = activeTermCount(logMetaDataBuffer); if (activeTermCount == (blockedTermCount - 1) && blockedOffset == 0) { final int currentTermId = termId(rawTailVolatile(logMetaDataBuffer, indexByTermCount(activeTermCount))); return rotateLog(logMetaDataBuffer, activeTermCount, currentTermId); } final int blockedIndex = indexByTermCount(blockedTermCount); final long rawTail = rawTailVolatile(logMetaDataBuffer, blockedIndex); final int termId = termId(rawTail); final int tailOffset = termOffset(rawTail, termLength); final UnsafeBuffer termBuffer = termBuffers[blockedIndex]; switch (TermUnblocker.unblock(logMetaDataBuffer, termBuffer, blockedOffset, tailOffset, termId)) { case UNBLOCKED_TO_END: rotateLog(logMetaDataBuffer, blockedTermCount, termId); // fall through case UNBLOCKED: return true; } return false; }\n\n    ### Response:", "ground_truth": "Attempt to unblock a log buffer at given position\n\n@param termBuffers       for current blockedOffset\n@param logMetaDataBuffer for log buffer\n@param blockedPosition   to attempt to unblock\n@param termLength        of the buffer for each term in the log\n@return whether unblocked or not", "predict": "Short description of method unblock\n\n* This method rotates the log meta data to align the log end with the next unlocked term*\n* It also sets the log meta data for the next unlocked term*\n* It sets the log meta data for the next unlocked term*\n* It sets the log meta data for the next unlocked term*\n* It sets the log meta data for the next unlocked term*\n* It sets the log meta data for the next unlocked term*\n* It sets the log meta data for the next unlocked term*\n* It sets the log meta data for the next unlocked term*\n* It sets the log meta data for the next unlocked term*\n* It sets the log meta data for the next unlocked term*\n* It sets the log meta data for the next unlocked term*\n* It sets the log meta data for the next unlocked term*\n* It sets the log meta data for the next unlocked term*\n* It sets the log"}, {"ID": 1941, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void assertIsSatisfied() { if (firstError != null) { throw firstError; } else if (!dispatcher.isSatisfied()) { throw expectationErrorTranslator.translate( ExpectationError.notAllSatisfied(this)); } }\n\n    ### Response: Fails the test if there are any expectations that have not been met..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String channel() { final int length = buffer.getInt(offset + CHANNEL_OFFSET); lengthOfChannel = SIZE_OF_INT + length; return buffer.getStringAscii(offset + CHANNEL_OFFSET, length); }\n\n    ### Response:", "ground_truth": "Get the channel field as ASCII\n\n@return channel field", "predict": "Returns the length of the channel, plus an extra length which contains the actual channel name."}, {"ID": 1942, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Discover firstAirDateYearGte(int year) { if (checkYear(year)) { params.add(Param.FIRST_AIR_DATE_GTE, year); } return this; }\n\n    ### Response: Filter the air dates to years that are greater than or equal to this year\n\n@param year\n@return.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ImageMessageFlyweight channel(final String channel) { lengthOfChannel = buffer.putStringAscii(offset + CHANNEL_OFFSET, channel); return this; }\n\n    ### Response:", "ground_truth": "Set the channel field as ASCII\n\n@param channel field value\n@return flyweight", "predict": "Store the given channel to the given location in the message"}, {"ID": 1943, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function renderAfterScenario($obj) { $print = array(); foreach ($this->rendererList as $name => $renderer) { $print[$name] = $renderer->renderAfterScenario($obj); } return $print; }\n\n    ### Response: Renders after a scenario.\n\n@param object : BehatHTMLFormatter object\n\n@return string : HTML generated.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void checkTermLength(final int termLength) { if (termLength < TERM_MIN_LENGTH) { throw new IllegalStateException( \"Term length less than min length of \" + TERM_MIN_LENGTH + \": length=\" + termLength); } if (termLength > TERM_MAX_LENGTH) { throw new IllegalStateException( \"Term length more than max length of \" + TERM_MAX_LENGTH + \": length=\" + termLength); } if (!BitUtil.isPowerOfTwo(termLength)) { throw new IllegalStateException(\"Term length not a power of 2: length=\" + termLength); } }\n\n    ### Response:", "ground_truth": "Check that term length is valid and alignment is valid.\n\n@param termLength to be checked.\n@throws IllegalStateException if the length is not as expected.", "predict": "\n    Checks that the length of the term is in range and is a power of 2"}, {"ID": 1944, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function createDataTableFromArchive($recordName, $idSite, $period, $date, $segment, $expanded = false, $flat = false, $idSubtable = null, $depth = null) { Piwik::checkUserHasViewAccess($idSite); if ($flat && !$idSubtable) { $expanded = true; } $archive = Archive::build($idSite, $period, $date, $segment, $_restrictSitesToLogin = false); if ($idSubtable === false) { $idSubtable = null; } if ($expanded) { $dataTable = $archive->getDataTableExpanded($recordName, $idSubtable, $depth); } else { $dataTable = $archive->getDataTable($recordName, $idSubtable); } $dataTable->queueFilter('ReplaceSummaryRowLabel'); $dataTable->queueFilter('ReplaceColumnNames'); if ($expanded) { $dataTable->queueFilterSubtables('ReplaceColumnNames'); } if ($flat) { $dataTable->disableRecursiveFilters(); } return $dataTable; }\n\n    ### Response: Helper function that creates an Archive instance and queries for report data using\nquery parameter data. API methods can use this method to reduce code redundancy.\n\n@param string $recordName The name of the report to return.\n@param int|string|array $idSite @see {@link build()}\n@param string $period @see {@link build()}\n@param string $date @see {@link build()}\n@param string $segment @see {@link build()}\n@param bool $expanded If true, loads all subtables. See {@link getDataTableExpanded()}\n@param bool $flat If true, loads all subtables and disabled all recursive filters.\n@param int|null $idSubtable See {@link getDataTableExpanded()}\n@param int|null $depth See {@link getDataTableExpanded()}\n@return DataTable|DataTable\\Map.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void checkPageSize(final int pageSize) { if (pageSize < PAGE_MIN_SIZE) { throw new IllegalStateException( \"Page size less than min size of \" + PAGE_MIN_SIZE + \": page size=\" + pageSize); } if (pageSize > PAGE_MAX_SIZE) { throw new IllegalStateException( \"Page size more than max size of \" + PAGE_MAX_SIZE + \": page size=\" + pageSize); } if (!BitUtil.isPowerOfTwo(pageSize)) { throw new IllegalStateException(\"Page size not a power of 2: page size=\" + pageSize); } }\n\n    ### Response:", "ground_truth": "Check that page size is valid and alignment is valid.\n\n@param pageSize to be checked.\n@throws IllegalStateException if the size is not as expected.", "predict": "Prevents the user from providing a page size that is too small or too big by\nthrowing an exception when the given page size does not match one of the specified\nconstants (PAGE_MIN_SIZE and PAGE_MAX_SIZE) or if it is not a power of 2."}, {"ID": 1945, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def slaveof(name, sentinel_host=None, sentinel_port=None, sentinel_password=None, **connection_args): ''' Set this redis instance as a slave. .. versionadded: 2016.3.0 name Master to make this a slave of sentinel_host Ip of the sentinel to check for the master sentinel_port Port of the sentinel to check for the master ''' ret = {'name': name, 'changes': {}, 'result': False, 'comment': 'Failed to setup slave'} kwargs = copy.copy(connection_args) sentinel_master = __salt__['redis.sentinel_get_master_ip'](name, sentinel_host, sentinel_port, sentinel_password) if sentinel_master['master_host'] in __salt__['network.ip_addrs'](): ret['result'] = True ret['comment'] = 'Minion is the master: {0}'.format(name) return ret first_master = __salt__['redis.get_master_ip'](**connection_args) if first_master == sentinel_master: ret['result'] = True ret['comment'] = 'Minion already slave of master: {0}'.format(name) return ret if __opts__['test'] is True: ret['comment'] = 'Minion will be made a slave of {0}: {1}'.format(name, sentinel_master['host']) ret['result'] = None return ret kwargs.update(**sentinel_master) __salt__['redis.slaveof'](**kwargs) current_master = __salt__['redis.get_master_ip'](**connection_args) if current_master != sentinel_master: return ret ret['result'] = True ret['changes'] = { 'old': first_master, 'new': current_master, } ret['comment'] = 'Minion successfully connected to master: {0}'.format(name) return ret\n\n    ### Response: Set this redis instance as a slave.\n\n    .. versionadded: 2016.3.0\n\n    name\n        Master to make this a slave of\n\n    sentinel_host\n        Ip of the sentinel to check for the master\n\n    sentinel_port\n        Port of the sentinel to check for the master.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean casActiveTermCount( final UnsafeBuffer metadataBuffer, final int expectedTermCount, final int updateTermCount) { return metadataBuffer.compareAndSetInt(LOG_ACTIVE_TERM_COUNT_OFFSET, expectedTermCount, updateTermCount); }\n\n    ### Response:", "ground_truth": "Compare and set the value of the current active term count.\n\n@param metadataBuffer    containing the meta data.\n@param expectedTermCount value of the active term count expected in the log\n@param updateTermCount   value of the active term count to be updated in the log\n@return true if successful otherwise false.", "predict": "\n    Public method to compare active Term Count across log buffers to detect log corruption during log compaction\n    If the method succeeds, expected Term Count of log is found, If the method succeeds, expected Term Count of log is found, If the method succeeds, expected Term Count of log is found, If the method succeeds, expected Term Count of log is found, If the method succeeds, expected Term Count of log is found, If the method succeeds, expected Term Count of log is found, If the method succeeds, expected Term Count of log is found, If the method succeeds, expected Term Count of log is found, If the method succeeds, expected Term Count of log is found, If the method succeeds, expected Term Count of log is found, If the method succeeds, expected Term Count of log is found, If the method succeeds, expected Term Count of log is found, If the method succeeds, expected Term Count of log is found, If the method succeeds, expected Term Count of"}, {"ID": 1946, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (ms *Component) AttachPrivateAPI(group *gin.RouterGroup) { group.POST(\"/profiles\", ms.rest.Post) group.DELETE(\"/profiles/:profileId\", ms.rest.Delete) }\n\n    ### Response: // AttachPrivateAPI add the profile micro-service private api with its dependencies.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long computePosition( final int activeTermId, final int termOffset, final int positionBitsToShift, final int initialTermId) { final long termCount = activeTermId - initialTermId; // copes with negative activeTermId on rollover return (termCount << positionBitsToShift) + termOffset; }\n\n    ### Response:", "ground_truth": "Compute the current position in absolute number of bytes.\n\n@param activeTermId        active term id.\n@param termOffset          in the term.\n@param positionBitsToShift number of times to left shift the term count\n@param initialTermId       the initial term id that this stream started on\n@return the absolute position in bytes", "predict": "// Compute the position of the given activeTermId given the position bits to shift, and the activeTermOffset. The returned position stores the activeTermOffset and position bits for the given activeTermOffset and position bits to shift, and stores the corresponding position for other values of activeTermOffset and position bits to shift in the case of rollover of activeTermOffset and position bits to shift values"}, {"ID": 1947, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def default_backend=(value) raise ArgumentError, \"default_backend must be a symbol!\" unless value.is_a? Symbol unless @backends.keys.include? value raise ArgumentError, \"Unregistered backend cannot be set as default!\" end @default_backend = value end\n\n    ### Response: Specify default sms backend. It must be registered.\n\n @param value [Symbol] Backend key which will be used as default.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long computeLogLength(final int termLength, final int filePageSize) { if (termLength < (1024 * 1024 * 1024)) { return align((termLength * PARTITION_COUNT) + LOG_META_DATA_LENGTH, filePageSize); } return (PARTITION_COUNT * (long)termLength) + align(LOG_META_DATA_LENGTH, filePageSize); }\n\n    ### Response:", "ground_truth": "Compute the total length of a log file given the term length.\n\nAssumes {@link #TERM_MAX_LENGTH} is 1GB and that filePageSize is 1GB or less and a power of 2.\n\n@param termLength   on which to base the calculation.\n@param filePageSize to use for log.\n@return the total length of the log file.", "predict": "Compute log length given term length, file page size\n    Compute log length given term length, file page size\n    If term length is less than (1024*1024*1024), compute log length from term length and file page size\n    Otherwise, compute log length from term length * PARTITION_COUNT and file page size\n    Align log length to multiple of file page size\n    Use LOG_META_DATA_LENGTH for aligning"}, {"ID": 1948, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function whereCollectionContains(string $collectionMemberExpression, $item) { $expression = $this->memberExpressionParser->parse($this->class, $collectionMemberExpression); $isEntityIdCollection = $expression->getResultingType()->nonNullable()->isSubsetOf(EntityIdCollection::type()); if ($isEntityIdCollection) { $memberParts = explode('.', $collectionMemberExpression); $lastPart = array_pop($memberParts); $memberParts[] = 'loadAll(' . $lastPart . ')'; $collectionMemberExpression = implode('.', $memberParts); $expression = $this->memberExpressionParser->parse($this->class, $collectionMemberExpression); } /** @var CollectionType $collectionType */ $collectionType = $expression->getResultingType()->nonNullable(); if (!$collectionType->isSubsetOf(Type::collectionOf(TypedObject::type()))) { throw InvalidMemberExpressionException::format( 'Invalid collection member expression supplied to %s: expecting type %s, %s (\\'%s\\') given', __METHOD__, Type::collectionOf(TypedObject::type())->asTypeString(), $collectionType->asTypeString(), $collectionMemberExpression ); } /** @var string|TypedObject $objectType */ $objectType = $collectionType->getElementType()->asTypeString(); if ($isEntityIdCollection) { if (!is_int($item)) { throw InvalidArgumentException::format( 'Invalid collection item supplied to %s: expecting type %s, %s given', __METHOD__, $objectType, Type::from($item)->asTypeString() ); } $specification = $objectType::specification(function (SpecificationDefinition $match) use ($item) { $match->where(Entity::ID, '=', $item); }); } else { if (!($item instanceof $objectType)) { throw InvalidArgumentException::format( 'Invalid collection item supplied to %s: expecting type %s, %s given', __METHOD__, $objectType, Type::from($item)->asTypeString() ); } $specification = $objectType::specification(function (SpecificationDefinition $match) use ($item) { $match->where('this', '=', $item); }); } return $this->whereHasAny($collectionMemberExpression, $specification); }\n\n    ### Response: Defines a condition that is satisfied when the collection\ncontains the supplied item.\n\n@param string $collectionMemberExpression\n@param mixed  $item\n\n@return static\n@throws InvalidArgumentException\n@throws InvalidMemberExpressionException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void storeDefaultFrameHeader(final UnsafeBuffer metadataBuffer, final DirectBuffer defaultHeader) { if (defaultHeader.capacity() != HEADER_LENGTH) { throw new IllegalArgumentException( \"Default header length not equal to HEADER_LENGTH: length=\" + defaultHeader.capacity()); } metadataBuffer.putInt(LOG_DEFAULT_FRAME_HEADER_LENGTH_OFFSET, HEADER_LENGTH); metadataBuffer.putBytes(LOG_DEFAULT_FRAME_HEADER_OFFSET, defaultHeader, 0, HEADER_LENGTH); }\n\n    ### Response:", "ground_truth": "Store the default frame header to the log meta data buffer.\n\n@param metadataBuffer into which the default headers should be stored.\n@param defaultHeader  to be stored.\n@throws IllegalArgumentException if the defaultHeader larger than {@link #LOG_DEFAULT_FRAME_HEADER_MAX_LENGTH}", "predict": "Stores default header information to the log metadata."}, {"ID": 1949, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function classifierExists($classifier) { if (strpos($classifier, '/') !== false) { $classifierArray = array_map('strtolower', explode('/', $classifier)); $testArray = array_change_key_case($this->classifiers); // Remap classifiers list to lowercase before validation foreach ($testArray as $key => $values) { $testArray [$key] = array_map('strtolower', $values); } if (!array_key_exists($classifierArray[0], $testArray)) { throw new \\Exception(\"Classifier namespace {$classifierArray[0]} does not exist in Classifiers list\"); } if (!in_array($classifierArray[1], $testArray[$classifierArray[0]])) { throw new \\Exception(\"Classifier {$classifierArray[1]} does not exist in Classifiers list\"); } return array($classifierArray[0], $classifierArray[1]); } return false; }\n\n    ### Response: Verify if the requested classifier exists\n\n@param string $classifier Classifier name, including provider namespace: namespace/classifier\n\n@return array|bool Array with namespace and classifier if it exists, false if it doesn't\n@throws \\Exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void applyDefaultHeader( final UnsafeBuffer metadataBuffer, final UnsafeBuffer termBuffer, final int termOffset) { termBuffer.putBytes(termOffset, metadataBuffer, LOG_DEFAULT_FRAME_HEADER_OFFSET, HEADER_LENGTH); }\n\n    ### Response:", "ground_truth": "Apply the default header for a message in a term.\n\n@param metadataBuffer containing the default headers.\n@param termBuffer     to which the default header should be applied.\n@param termOffset     at which the default should be applied.", "predict": "Store default header for term into termOffset"}, {"ID": 1950, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long getThreadId() { final Long threadId = THREAD_LOCAL.get(); if (threadId != null) { return threadId; } return Thread.currentThread().getId(); }\n\n    ### Response: Get the thread ID.\n\n@return the thread ID.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean rotateLog(final UnsafeBuffer metadataBuffer, final int termCount, final int termId) { final int nextTermId = termId + 1; final int nextTermCount = termCount + 1; final int nextIndex = indexByTermCount(nextTermCount); final int expectedTermId = nextTermId - PARTITION_COUNT; long rawTail; do { rawTail = rawTail(metadataBuffer, nextIndex); if (expectedTermId != termId(rawTail)) { break; } } while (!casRawTail(metadataBuffer, nextIndex, rawTail, packTail(nextTermId, 0))); return casActiveTermCount(metadataBuffer, termCount, nextTermCount); }\n\n    ### Response:", "ground_truth": "Rotate the log and update the tail counter for the new term.\n\nThis method is safe for concurrent use.\n\n@param metadataBuffer for the log.\n@param termCount      from which to rotate.\n@param termId         to be used in the default headers.\n@return true if log was rotated.", "predict": "Rotate log files by rotating active term indices and values across files to make sure that there is no overlap of active indices across files when new files are added to the log."}, {"ID": 1951, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function queryCoversRange(lessRestrictive, moreRestrictive) { // Short curcuit if there is an exact match if (lessRestrictive === moreRestrictive) { return true; } const lessRestrictiveParts = explodeMediaQuery(lessRestrictive); const moreRestrictiveParts = explodeMediaQuery(moreRestrictive); return lessRestrictiveParts.reduce((orPrevious, lessAndParts) => { // Short curcuit if a previous part was not satisfied if (!orPrevious) { return false; } return moreRestrictiveParts.reduce((prev, moreAndParts) => { return ( prev || arrayContainsAllElementsOfArray(lessAndParts, moreAndParts) ); }, false); }, true); }\n\n    ### Response: Determine if the more restrictive media query covers all cases of the less restrictive one\n\nFor MQ \"A\" to contain MQ \"B\", \"A\" must be at least as specific as \"B\".\n\n@example\n// returns `true`\nqueryCoversRange('(min-width: 600px)', '(min-width: 600px) and (max-width: 800px)');\n\n@example\n// returns `false`\nqueryCoversRange('(min-width: 600px), (max-width: 700px)', '(min-width: 600px) and (max-width: 800px)');\n\n@param {string} lessRestrictive\n@param {string} moreRestrictive the media query to check membership of\n@return {boolean}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void initialiseTailWithTermId( final UnsafeBuffer metadataBuffer, final int partitionIndex, final int termId) { metadataBuffer.putLong(TERM_TAIL_COUNTERS_OFFSET + (partitionIndex * SIZE_OF_LONG), packTail(termId, 0)); }\n\n    ### Response:", "ground_truth": "Set the initial value for the termId in the upper bits of the tail counter.\n\n@param metadataBuffer contain the tail counter.\n@param partitionIndex to be initialised.\n@param termId         to be set.", "predict": "Store the first packedTermOffset for the given termId to the terminal counter for the given partitionIndex\n\nPacking an int into an int requires simply using the int value itself since ints are 32-bit on every platform, resulting in an efficient packing process because there is no additional work to do to pack an int into an int, no shift values or other values need to be temporarily stored to complete the packing operation because ints already occupy 32 bits of memory on every platform, resulting in a simple packing operation to pack an int int for every int being packed regardless of int being packed or being unpacked because ints already occupy 32 bits of memory on every platform, resulting in a simple packing operation to pack an int int for every int being packed regardless of int being packed or being unpacked because ints already occupy 32 bits of memory on every platform, resulting in a simple packing operation to pack an int int for every int being packed regardless"}, {"ID": 1952, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def post_command(self, sender, name, result, args, kwargs): \"\"\" Call after we got the result of a redis command. By default, let the instance manage the post_modify signal \"\"\" return self._instance.post_command( sender=self, name=name, result=result, args=args, kwargs=kwargs )\n\n    ### Response: Call after we got the result of a redis command.\n        By default, let the instance manage the post_modify signal.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int termOffset(final long rawTail, final long termLength) { final long tail = rawTail & 0xFFFF_FFFFL; return (int)Math.min(tail, termLength); }\n\n    ### Response:", "ground_truth": "Read the termOffset from a packed raw tail value.\n\n@param rawTail    containing the termOffset.\n@param termLength that the offset cannot exceed.\n@return the termOffset value.", "predict": "Calculate the offset of term (raw string) from the end of the tail (raw string) of the given log. The returned int indicates how many bits were consumed from the tail to produce termOffset()'s output."}, {"ID": 1953, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function script() { echo $this->view->make('Assely::script', [ 'slug' => $this->metabox->getModel()->getSlug(), 'fingerprint' => $this->metabox->getModel()->getFingerprint(), 'fields' => json_encode($this->metabox->getFields()->all()), ]); }\n\n    ### Response: Render metabox script.\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long rawTailVolatile(final UnsafeBuffer metadataBuffer) { final int partitionIndex = indexByTermCount(activeTermCount(metadataBuffer)); return metadataBuffer.getLongVolatile(TERM_TAIL_COUNTERS_OFFSET + (SIZE_OF_LONG * partitionIndex)); }\n\n    ### Response:", "ground_truth": "Get the raw value of the tail for the current active partition.\n\n@param metadataBuffer containing the tail counters.\n@return the raw value of the tail for the current active partition.", "predict": "Compute tail volume for given metadata from termCount buckets produced by indexed metadata column values of given metadata column values of given document indexed for given document meta data column values of given document meta data column values of given document meta data column values of given document meta data column values of given document meta data column values of given document meta data column values of given document meta data column values of given document meta data column values of given document meta data column values of given document meta data column values of given document meta data column values of given document meta data column values of given document meta data column values of given document meta data column values of given document meta data column values of given document meta data column values of given document meta data column values of given document meta data column values of given document meta data column values of given document meta data column values of given document meta data column values of given document meta data column values of given document meta data column values of given document meta data column values of given document meta data column values of given document meta data column values of given document meta data column values"}, {"ID": 1954, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function updateAccessoryPosition(UpdatePositionEvent $event, $eventName, EventDispatcherInterface $dispatcher) { return $this->genericUpdatePosition(AccessoryQuery::create(), $event, $dispatcher); }\n\n    ### Response: Changes accessry position, selecting absolute ou relative change.\n\n@param UpdatePositionEvent $event\n@param $eventName\n@param EventDispatcherInterface $dispatcher\n@return Object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean casRawTail( final UnsafeBuffer metadataBuffer, final int partitionIndex, final long expectedRawTail, final long updateRawTail) { final int index = TERM_TAIL_COUNTERS_OFFSET + (SIZE_OF_LONG * partitionIndex); return metadataBuffer.compareAndSetLong(index, expectedRawTail, updateRawTail); }\n\n    ### Response:", "ground_truth": "Compare and set the raw value of the tail for the given partition.\n\n@param metadataBuffer  containing the tail counters.\n@param partitionIndex  for the tail counter.\n@param expectedRawTail expected current value.\n@param updateRawTail   to be applied.\n@return true if the update was successful otherwise false.", "predict": "Updates term tail counters by given values"}, {"ID": 1955, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function can_question_be_redone_now($slot) { return $this->get_quiz()->canredoquestions && !$this->is_finished() && $this->get_question_state($slot)->is_finished(); }\n\n    ### Response: Is it possible for this question to be re-started within this attempt?\n\n@param int $slot the number used to identify this question within this attempt.\n@return whether the student should be given the option to restart this question now..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public TerminateDriverFlyweight tokenBuffer( final DirectBuffer tokenBuffer, final int tokenOffset, final int tokenLength) { buffer.putInt(TOKEN_LENGTH_OFFSET, tokenLength); if (null != tokenBuffer && tokenLength > 0) { buffer.putBytes(tokenBufferOffset(), tokenBuffer, tokenOffset, tokenLength); } return this; }\n\n    ### Response:", "ground_truth": "Fill the token buffer.\n\n@param tokenBuffer containing the optional token for the request.\n@param tokenOffset within the tokenBuffer at which the token begins.\n@param tokenLength of the token in the tokenBuffer.\n@return flyweight", "predict": "Store token length in tokenOffset, and put the corresponding tokens from the tokenBuffer to the tokenOffset of the tokenOffset."}, {"ID": 1956, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Deferred<ArrayList<Boolean>> storeBranch(final TSDB tsdb, final Tree tree, final boolean store_leaves) { if (tree_id < 1 || tree_id > 65535) { throw new IllegalArgumentException(\"Missing or invalid tree ID\"); } final ArrayList<Deferred<Boolean>> storage_results = new ArrayList<Deferred<Boolean>>(leaves != null ? leaves.size() + 1 : 1); // compile the row key by making sure the display_name is in the path set // row ID = <treeID>[<parent.display_name.hashCode()>...] final byte[] row = this.compileBranchId(); // compile the object for storage, this will toss exceptions if we are // missing anything important final byte[] storage_data = toStorageJson(); final PutRequest put = new PutRequest(tsdb.treeTable(), row, Tree.TREE_FAMILY(), BRANCH_QUALIFIER, storage_data); put.setBufferable(true); storage_results.add(tsdb.getClient().compareAndSet(put, new byte[0])); // store leaves if told to and put the storage calls in our deferred group if (store_leaves && leaves != null && !leaves.isEmpty()) { for (final Leaf leaf : leaves.values()) { storage_results.add(leaf.storeLeaf(tsdb, row, tree)); } } return Deferred.group(storage_results); }\n\n    ### Response: Attempts to write the branch definition and optionally child leaves to\nstorage via CompareAndSets.\nEach returned deferred will be a boolean regarding whether the CAS call\nwas successful or not. This will be a mix of the branch call and leaves.\nSome of these may be false, which is OK, because if the branch\ndefinition already exists, we don't need to re-write it. Leaves will\nreturn false if there was a collision.\n@param tsdb The TSDB to use for access\n@param tree The tree to record collisions to\n@param store_leaves Whether or not child leaves should be written to\nstorage\n@return A list of deferreds to wait on for completion.\n@throws HBaseException if there was an issue\n@throws IllegalArgumentException if the tree ID was missing or data was\nmissing.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Counter allocate( final Aeron aeron, final MutableDirectBuffer tempBuffer, final long leadershipTermId, final long logPosition, final long timestamp, final boolean hasReplay, final long... snapshotRecordingIds) { tempBuffer.putLong(LEADERSHIP_TERM_ID_OFFSET, leadershipTermId); tempBuffer.putLong(LOG_POSITION_OFFSET, logPosition); tempBuffer.putLong(TIMESTAMP_OFFSET, timestamp); tempBuffer.putInt(REPLAY_FLAG_OFFSET, hasReplay ? 1 : 0); final int serviceCount = snapshotRecordingIds.length; tempBuffer.putInt(SERVICE_COUNT_OFFSET, serviceCount); final int keyLength = SNAPSHOT_RECORDING_IDS_OFFSET + (serviceCount * SIZE_OF_LONG); if (keyLength > MAX_KEY_LENGTH) { throw new ClusterException(keyLength + \" exceeds max key length \" + MAX_KEY_LENGTH); } for (int i = 0; i < serviceCount; i++) { tempBuffer.putLong(SNAPSHOT_RECORDING_IDS_OFFSET + (i * SIZE_OF_LONG), snapshotRecordingIds[i]); } final int labelOffset = BitUtil.align(keyLength, SIZE_OF_INT); int labelLength = 0; labelLength += tempBuffer.putStringWithoutLengthAscii(labelOffset + labelLength, NAME); labelLength += tempBuffer.putLongAscii(keyLength + labelLength, leadershipTermId); labelLength += tempBuffer.putStringWithoutLengthAscii(labelOffset + labelLength, \" logPosition=\"); labelLength += tempBuffer.putLongAscii(labelOffset + labelLength, logPosition); labelLength += tempBuffer.putStringWithoutLengthAscii(labelOffset + labelLength, \" hasReplay=\" + hasReplay); return aeron.addCounter(RECOVERY_STATE_TYPE_ID, tempBuffer, 0, keyLength, tempBuffer, labelOffset, labelLength); }\n\n    ### Response:", "ground_truth": "Allocate a counter to represent the snapshot services should load on start.\n\n@param aeron                to allocate the counter.\n@param tempBuffer           to use for building the key and label without allocation.\n@param leadershipTermId     at which the snapshot was taken.\n@param logPosition          at which the snapshot was taken.\n@param timestamp            the snapshot was taken.\n@param hasReplay            flag is true if all or part of the log must be replayed.\n@param snapshotRecordingIds for the services to use during recovery indexed by service id.\n@return the {@link Counter} for the recovery state.", "predict": "Allocates counters for the given Aeron instance to the given temporary Direct Buffer. It stores the given values in the counters and writes the values back to Aeron for tracking and reporting purposes."}, {"ID": 1957, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function promiseWithError( result, callback) { var deferred = Q.defer(); deferred.resolve(result); if ( typeof callback === 'function' ) { callback(null, result); } return deferred.promise; }\n\n    ### Response: Creates a promise that only returns a result to be used when promise is expected\nbut the result is already known and calls the callback if given\n@param result - the result value\n@param callback - optional, a callback with signature function( error, result).\nif given this one will be called despite returning a promise\n@returns {*|promise} - the promise.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int findCounterId(final CountersReader counters) { final DirectBuffer buffer = counters.metaDataBuffer(); for (int i = 0, size = counters.maxCounterId(); i < size; i++) { if (counters.getCounterState(i) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(i); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECOVERY_STATE_TYPE_ID) { return i; } } } return NULL_COUNTER_ID; }\n\n    ### Response:", "ground_truth": "Find the active counter id for recovery state.\n\n@param counters to search within.\n@return the counter id if found otherwise {@link CountersReader#NULL_COUNTER_ID}.", "predict": "Finds the ID of the recovery counter from counters meta data"}, {"ID": 1958, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void writeEntry(final GZIPArchive.Entry entry) throws IOException { // ID1 ID2 CM FLG this.output.write(GZIPArchive.GZIP_START); // MTIME writeLEInt(this.output, entry.mtime); // XFL OS this.output.write(GZIPArchive.XFL_OS); /* EXTRA begin */ // XLEN writeLEShort(this.output, GZIPArchive.XLEN); // SI1 SI2 (as in warc spec) this.output.write(GZIPArchive.SKIP_LEN); // LEN writeLEShort(this.output, GZIPArchive.SUB_LEN); // compressed-skip-length (as in warc spec) writeLEInt(this.output, entry.compressedSkipLength); // uncompressed length (as in warc spec) writeLEInt(this.output, entry.uncompressedSkipLength); /* EXTRA end */ // NAME this.output.write(entry.name); this.output.write(0); // COMMENT this.output.write(entry.comment); this.output.write(0); // compressed blocks this.output.write(deflaterStream.array, 0, deflaterStream.length); // CRC32 writeLEInt(this.output, entry.crc32); // ISIZE writeLEInt(this.output, entry.uncompressedSkipLength); }\n\n    ### Response: Writes the entry on the underlying stream.\n\nMore precisely, it writes the GZIP header, the content of the (bufferized) deflater stream and then the CZIP trailer..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean hasReplay(final CountersReader counters, final int counterId) { final DirectBuffer buffer = counters.metaDataBuffer(); if (counters.getCounterState(counterId) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(counterId); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECOVERY_STATE_TYPE_ID) { return buffer.getInt(recordOffset + KEY_OFFSET + REPLAY_FLAG_OFFSET) == 1; } } return false; }\n\n    ### Response:", "ground_truth": "Has the recovery process got a log to replay?\n\n@param counters  to search within.\n@param counterId for the active recovery counter.\n@return true if a replay is required.", "predict": "Checks if the given counters record has been allocated for recovery purposes or not."}, {"ID": 1959, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (v *VTY) Commands(cmds []string) error { for _, cmd := range cmds { if _, err := v.Command(cmd); err != nil { return err } } return nil }\n\n    ### Response: // Commands issues a sequence of commands over the Quagga VTY, discarding\n// responses..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long getSnapshotRecordingId(final CountersReader counters, final int counterId, final int serviceId) { final DirectBuffer buffer = counters.metaDataBuffer(); if (counters.getCounterState(counterId) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(counterId); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECOVERY_STATE_TYPE_ID) { final int serviceCount = buffer.getInt(recordOffset + KEY_OFFSET + SERVICE_COUNT_OFFSET); if (serviceId < 0 || serviceId >= serviceCount) { throw new ClusterException(\"invalid serviceId \" + serviceId + \" for count of \" + serviceCount); } return buffer.getLong( recordOffset + KEY_OFFSET + SNAPSHOT_RECORDING_IDS_OFFSET + (serviceId * SIZE_OF_LONG)); } } throw new ClusterException(\"Active counter not found \" + counterId); }\n\n    ### Response:", "ground_truth": "Get the recording id of the snapshot for a service.\n\n@param counters  to search within.\n@param counterId for the active recovery counter.\n@param serviceId for the snapshot required.\n@return the count of replay terms if found otherwise {@link Aeron#NULL_VALUE}.", "predict": "// Gets the Snapshot Recording ID from counters for the given VTY counter ID and\n// specific VTY service ID\n\n    "}, {"ID": 1960, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function registerNamespace($namespace, $directory, $extension = '.php', $prioritize = false) { if (self::$_namespaces === null) { self::$_namespaces = array(); } $directory = str_replace('\\\\', '/', realpath($directory)) . '/'; if($prioritize){ array_unshift(self::$_namespaces, array($namespace, $directory, strlen($namespace), $extension)); }else{ self::$_namespaces[] = array($namespace, $directory, strlen($namespace), $extension); } }\n\n    ### Response: Registers a namespace for auto loading.\n@param string $namespace Namespace like \\Vendor\\Product\\. Must end with a trailing \\.\n@param string $directory Directory which contains all files. Must end with a trailing /.\n@param string $extension Extension of files.\n@param bool $prioritize Namespace definition has priority over previous definitions.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static char[] flagsToChars(final short flags) { final char[] chars = new char[]{ '0', '0', '0', '0', '0', '0', '0', '0' }; final int length = chars.length; short mask = (short)(1 << (length - 1)); for (int i = 0; i < length; i++) { if ((flags & mask) == mask) { chars[i] = '1'; } mask >>= 1; } return chars; }\n\n    ### Response:", "ground_truth": "Convert header flags to an array of chars to be human readable.\n\n@param flags to be converted.\n@return header flags converted to an array of chars to be human readable.", "predict": "Turns bit flags into character codes of '\\' and '\\0'."}, {"ID": 1961, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Getenv(ctx context.Context, key string) string { return LookupEnv(ctx, key).Value }\n\n    ### Response: // Getenv returns the given value from the embedded subcommands.Env, or \"\" if\n// the value was unset and had no default..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public PublicationMessageFlyweight channel(final String channel) { lengthOfChannel = buffer.putStringAscii(offset + CHANNEL_OFFSET, channel); return this; }\n\n    ### Response:", "ground_truth": "Set the channel field in ASCII\n\n@param channel field value\n@return flyweight", "predict": "// Sets the given channel for the flyweight to the given channel, or an empty string\n// if the channel wasn't given.."}, {"ID": 1962, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def advance_page(self): # type: () -> List[Model] \"\"\"Force moving the cursor to the next azure call. This method is for advanced usage, iterator protocol is prefered. :raises: StopIteration if no further page :return: The current page list :rtype: list \"\"\" if self.next_link is None: raise StopIteration(\"End of paging\") self._current_page_iter_index = 0 self._response = self._get_next(self.next_link) self._derserializer(self, self._response) return self.current_page\n\n    ### Response: Force moving the cursor to the next azure call.\n\n        This method is for advanced usage, iterator protocol is prefered.\n\n        :raises: StopIteration if no further page\n        :return: The current page list\n        :rtype: list.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public long offer(final DirectBuffer buffer, final int offset, final int length) { return cluster.offer(id, responsePublication, buffer, offset, length); }\n\n    ### Response:", "ground_truth": "Non-blocking publish of a partial buffer containing a message to a cluster.\n\n@param buffer containing message.\n@param offset offset in the buffer at which the encoded message begins.\n@param length in bytes of the encoded message.\n@return the same as {@link Publication#offer(DirectBuffer, int, int)} when in {@link Cluster.Role#LEADER}\notherwise {@link #MOCKED_OFFER}.", "predict": "Long offering public data from an ID to other cluster nodes"}, {"ID": 1963, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Nonnull public static <A, B> Function<B, A> constant(final A a) { return b -> a; }\n\n    ### Response: Returns a function that ignores it's arguments and always returns the\ngiven value.\n\n@param a   The given value.\n@param  The type of the argument which is returned by the returned function.\n@param  The type of the returned functions parameter.\n@return The constant function..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final void wrap(final AtomicBuffer buffer, final int offset, final int length) { this.buffer.wrap(buffer, offset, length); }\n\n    ### Response:", "ground_truth": "Wrap a region of an underlying log buffer so can can represent a claimed space for use by a publisher.\n\n@param buffer to be wrapped.\n@param offset at which the claimed region begins including space for the header.\n@param length length of the underlying claimed region including space for the header.", "predict": "Wrap the given atomic buffer with the given range of values to make it readable for other processes."}, {"ID": 1964, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def centroid(data, method=median): \"returns the central vector of a list of vectors\" out = [] for i in range(len(data[0])): out.append(method([x[i] for x in data])) return tuple(out)\n\n    ### Response: returns the central vector of a list of vectors.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final void commit() { int frameLength = buffer.capacity(); if (ByteOrder.nativeOrder() != LITTLE_ENDIAN) { frameLength = Integer.reverseBytes(frameLength); } buffer.putIntOrdered(FRAME_LENGTH_FIELD_OFFSET, frameLength); }\n\n    ### Response:", "ground_truth": "Commit the message to the log buffer so that is it available to subscribers.", "predict": "Stores the length of the compressed image in little-endian order in the specified bytes at the specified offset in the compressed image frame."}, {"ID": 1965, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function createMergedCurlOpts($request) { // Merge default CURL options with overwritable CURL options $mergedCurlOpts = [ // see: http://curl.haxx.se/docs/sslcerts.html CURLOPT_CAINFO => __DIR__ . '/../../../../resources/cacert.pem', CURLOPT_SSL_VERIFYHOST => 2, CURLOPT_SSL_VERIFYPEER => true ]; foreach($this->additionalCurlOpts as $option => $value) { $mergedCurlOpts[$option] = $value; } // Set not overwritable CURL options $mergedCurlOpts[CURLOPT_RETURNTRANSFER] = true; $mergedCurlOpts[CURLOPT_ENCODING] = 'gzip, deflate'; $mergedCurlOpts[CURLOPT_POST] = true; $mergedCurlOpts[CURLOPT_POSTFIELDS] = $request; $mergedCurlOpts[CURLOPT_HTTPHEADER] = [ 'Content-Type: application/json', 'Content-Length: ' . strlen($request) ]; return $mergedCurlOpts; }\n\n    ### Response: Utility function used to create a set of CURL options from additional CURL options defined on the CURL client and\nnot overwritable CURL options.\n\n@param array $request the request to POST to the Pushwoosh Web Services.\n\n@return array the resulting CURL options to use..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final void abort() { int frameLength = buffer.capacity(); if (ByteOrder.nativeOrder() != LITTLE_ENDIAN) { frameLength = Integer.reverseBytes(frameLength); } buffer.putShort(TYPE_FIELD_OFFSET, (short)HDR_TYPE_PAD, LITTLE_ENDIAN); buffer.putIntOrdered(FRAME_LENGTH_FIELD_OFFSET, frameLength); }\n\n    ### Response:", "ground_truth": "Abort a claim of the message space to the log buffer so that the log can progress by ignoring this claim.", "predict": "Utility method to send an abort request to the push server"}, {"ID": 1966, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getIncludable(bool $assoc = false): array { if ($this->includable === self::ALLOW_ALL) { return self::ALLOW_ALL; } return $assoc ? $this->includable : array_keys($this->includable); }\n\n    ### Response: Get the includable relationships\n\n@param bool $assoc\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void main(final String[] args) { loadPropertiesFiles(args); final ShutdownSignalBarrier barrier = new ShutdownSignalBarrier(); final MediaDriver.Context ctx = new MediaDriver.Context(); ctx.terminationHook(barrier::signal); try (MediaDriver ignore = MediaDriver.launch(ctx)) { barrier.await(); System.out.println(\"Shutdown Driver...\"); } }\n\n    ### Response:", "ground_truth": "Start Media Driver as a stand-alone process.\n\n@param args command line arguments", "predict": "Loads Properties Files and launches the media driver\n\nCall the media driver's built in hook to terminate the driver and wait for the driver to terminate\n\nCall System.out to display feedback that the media driver has been successfully terminated"}, {"ID": 1967, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function createOutputContents( array $header, $delimiter = ',', $enclosure = '\"', $toConvert = true ) { $fp = fopen(\"php://temp\", 'r+b'); // header if ($header) { fputcsv($fp, $header, $delimiter, $enclosure); } foreach ($this->rows as $row) { fputcsv($fp, $row, $delimiter, $enclosure); } rewind($fp); $buffer = stream_get_contents($fp); if ($toConvert === false) { fclose($fp); return $buffer; } $ret = $this->convert($buffer); fclose($fp); return $ret; }\n\n    ### Response: Create an output content\n@param array $header\n@param string $delimiter\n@param string $enclosure\n@param boolean $toConvert true : LF => CRLF, UTF-8 => SJIS-win, false : LF, UTF-8\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void close() { CloseHelper.close(sharedRunner); CloseHelper.close(sharedNetworkRunner); CloseHelper.close(receiverRunner); CloseHelper.close(senderRunner); CloseHelper.close(conductorRunner); CloseHelper.close(sharedInvoker); if (ctx.useWindowsHighResTimer() && SystemUtil.osName().startsWith(\"win\")) { if (!wasHighResTimerEnabled) { HighResolutionTimer.disable(); } } }\n\n    ### Response:", "ground_truth": "Shutdown the media driver by stopping all threads and freeing resources.", "predict": "Closes the runner and sets the timer for Windows machines to Hour Resolutions"}, {"ID": 1968, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def delete_row(self, index): \"\"\"\"Deletes the row from the worksheet at the specified index. :param index: Index of a row for deletion. :type index: int \"\"\" body = { \"requests\": [{ \"deleteDimension\": { \"range\": { \"sheetId\": self.id, \"dimension\": \"ROWS\", \"startIndex\": index - 1, \"endIndex\": index } } }] } return self.spreadsheet.batch_update(body)\n\n    ### Response: Deletes the row from the worksheet at the specified index.\n\n        :param index: Index of a row for deletion.\n        :type index: int.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final long position() { final int resultingOffset = BitUtil.align(termOffset() + frameLength(), FRAME_ALIGNMENT); return computePosition(termId(), resultingOffset, positionBitsToShift, initialTermId); }\n\n    ### Response:", "ground_truth": "Get the current position to which the image has advanced on reading this message.\n\n@return the current position to which the image has advanced on reading this message.", "predict": "The position() method returns the position of the next read operation given the current position of the read operation, i.e., its corresponding terminal offset plus length of the frame, in an aligned form of an integer. It uses BitUtil.align() to align the given values to specific values to determine the position of the next read operation and applies BitUtil.positionBitsToShift() to translate the position of the next read operation to an actual position on the disk. It uses positionBitsToShift to determine how many bits represent the given position on the disk and applies BitUtil.shift( positionBitsToShift ) to translate it to an actual position on the disk. Finally, it applies BitUtil.align() to align it to specific values to translate it to an actual position on the disk in an aligned form of an integer to return it to the caller of the method."}, {"ID": 1969, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unused\") // called through reflection by RequestServer public ParseV3 parse(int version, ParseV3 parse) { ParserInfo parserInfo = ParserService.INSTANCE.getByName(parse.parse_type).info(); ParseSetup setup = new ParseSetup(parserInfo, parse.separator, parse.single_quotes, parse.check_header, parse.number_columns, delNulls(parse.column_names), ParseSetup.strToColumnTypes(parse.column_types), parse.domains, parse.na_strings, null, new ParseWriter.ParseErr[0], parse.chunk_size, parse.decrypt_tool != null ? parse.decrypt_tool.key() : null, parse.skipped_columns, parse.custom_non_data_line_markers != null ? parse.custom_non_data_line_markers.getBytes(): null); if (parse.source_frames == null) throw new H2OIllegalArgumentException(\"Data for Frame '\" + parse.destination_frame.name + \"' is not available. Please check that the path is valid (for all H2O nodes).'\"); Key[] srcs = new Key[parse.source_frames.length]; for (int i = 0; i < parse.source_frames.length; i++) srcs[i] = parse.source_frames[i].key(); if ((setup.getParseType().name().toLowerCase().equals(\"svmlight\") || (setup.getParseType().name().toLowerCase().equals(\"avro\") )) && ((setup.getSkippedColumns() != null) && (setup.getSkippedColumns().length >0))) throw new H2OIllegalArgumentException(\"Parser: skipped_columns are not supported for SVMlight or Avro parsers.\"); if (setup.getSkippedColumns() !=null && ((setup.get_parse_columns_indices()==null) || (setup.get_parse_columns_indices().length==0))) throw new H2OIllegalArgumentException(\"Parser: all columns in the file are skipped and no H2OFrame\" + \" can be returned.\"); // Need this to send error message to R parse.job = new JobV3(ParseDataset.parse( parse.destination_frame.key(), srcs, parse.delete_on_done, setup, parse.blocking )._job); if (parse.blocking) { Frame fr = DKV.getGet(parse.destination_frame.key()); parse.rows = fr.numRows(); } return parse; }\n\n    ### Response: Entry point for parsing..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Counter allocate( final Aeron aeron, final MutableDirectBuffer tempBuffer, final int serviceId) { tempBuffer.putInt(SERVICE_ID_OFFSET, serviceId); final int labelOffset = BitUtil.align(KEY_LENGTH, SIZE_OF_INT); int labelLength = 0; labelLength += tempBuffer.putStringWithoutLengthAscii(labelOffset + labelLength, NAME); labelLength += tempBuffer.putIntAscii(labelOffset + labelLength, serviceId); return aeron.addCounter( SERVICE_HEARTBEAT_TYPE_ID, tempBuffer, 0, KEY_LENGTH, tempBuffer, labelOffset, labelLength); }\n\n    ### Response:", "ground_truth": "Allocate a counter to represent the heartbeat of a clustered service.\n\n@param aeron           to allocate the counter.\n@param tempBuffer      to use for building the key and label without allocation.\n@param serviceId       of the service heartbeat.\n@return the {@link Counter} for the commit position.", "predict": "Allocates counters to specific destinations"}, {"ID": 1970, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function getTechnicalFieldsList() { if (empty(self::$technicalFieldsList)) { self::$technicalFieldsList = [ self::TC_DATA_WIDTH => ['method' => 'getWidth', 'type' => 'integer', 'analyzable' => false], self::TC_DATA_HEIGHT => ['method' => 'getHeight', 'type' => 'integer', 'analyzable' => false], self::TC_DATA_FOCALLENGTH => ['method' => 'getFocalLength', 'type' => 'float', 'analyzable' => false], self::TC_DATA_CHANNELS => ['method' => 'getChannels', 'type' => 'integer', 'analyzable' => false], self::TC_DATA_COLORDEPTH => ['method' => 'getColorDepth', 'type' => 'integer', 'analyzable' => false], self::TC_DATA_CAMERAMODEL => ['method' => 'getCameraModel', 'type' => 'string', 'analyzable' => false], self::TC_DATA_FLASHFIRED => ['method' => 'getFlashFired', 'type' => 'boolean', 'analyzable' => false], self::TC_DATA_APERTURE => ['method' => 'getAperture', 'type' => 'float', 'analyzable' => false], self::TC_DATA_SHUTTERSPEED => ['method' => 'getShutterSpeed', 'type' => 'float', 'analyzable' => false], self::TC_DATA_HYPERFOCALDISTANCE => ['method' => 'getHyperfocalDistance', 'type' => 'float', 'analyzable' => false], self::TC_DATA_ISO => ['method' => 'getISO', 'type' => 'integer', 'analyzable' => false], self::TC_DATA_LIGHTVALUE => ['method' => 'getLightValue', 'type' => 'float', 'analyzable' => false], self::TC_DATA_COLORSPACE => ['method' => 'getColorSpace', 'type' => 'integer', 'analyzable' => false], self::TC_DATA_DURATION => ['method' => 'getDuration', 'type' => 'float', 'analyzable' => false], self::TC_DATA_FRAMERATE => ['method' => 'getFrameRate', 'type' => 'float', 'analyzable' => false], self::TC_DATA_AUDIOSAMPLERATE => ['method' => 'getAudioSampleRate', 'type' => 'float', 'analyzable' => false], self::TC_DATA_VIDEOCODEC => ['method' => 'getVideoCodec', 'type' => 'string', 'analyzable' => false], self::TC_DATA_AUDIOCODEC => ['method' => 'getAudioCodec', 'type' => 'string', 'analyzable' => false], self::TC_DATA_ORIENTATION => ['method' => 'getOrientation', 'type' => 'integer', 'analyzable' => false], self::TC_DATA_LONGITUDE => ['method' => 'getLongitude', 'type' => 'float', 'analyzable' => false], self::TC_DATA_LONGITUDE_REF => ['method' => 'getLongitudeRef'], self::TC_DATA_LATITUDE => ['method' => 'getLatitude', 'type' => 'float', 'analyzable' => false], self::TC_DATA_LATITUDE_REF => ['method' => 'getLatitudeRef'], self::TC_DATA_MIMETYPE => ['type' => 'string', 'analyzable' => false], self::TC_DATA_FILESIZE => ['type' => 'long', 'analyzable' => false], ]; } return self::$technicalFieldsList; }\n\n    ### Response: Return list of technical data and their attributes\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int findCounterId(final CountersReader counters, final int serviceId) { final DirectBuffer buffer = counters.metaDataBuffer(); for (int i = 0, size = counters.maxCounterId(); i < size; i++) { if (counters.getCounterState(i) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(i); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == SERVICE_HEARTBEAT_TYPE_ID && buffer.getInt(recordOffset + KEY_OFFSET + SERVICE_ID_OFFSET) == serviceId) { return i; } } } return NULL_COUNTER_ID; }\n\n    ### Response:", "ground_truth": "Find the active counter id for heartbeat of a given service id.\n\n@param counters  to search within.\n@param serviceId to search for.\n@return the counter id if found otherwise {@link CountersReader#NULL_COUNTER_ID}.", "predict": "\n    Find the ID of the heart beat counter for the given service ID"}, {"ID": 1971, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func ParseFilterString(ctx context.Context, rawSearchString string) (criteria.Expression, *QueryOptions, error) { fm := map[string]interface{}{} // Parsing/Unmarshalling JSON encoding/json err := json.Unmarshal([]byte(rawSearchString), &fm) if err != nil { log.Error(ctx, map[string]interface{}{ \"err\": err, \"rawSearchString\": rawSearchString, }, \"failed to unmarshal raw search string\") return nil, nil, errors.NewBadParameterError(\"expression\", rawSearchString+\": \"+err.Error()) } q := Query{} parseMap(fm, &q) q.Options = parseOptions(fm) exp, err := q.generateExpression() return exp, q.Options, err }\n\n    ### Response: // ParseFilterString accepts a raw string and generates a criteria expression.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Map<StreamCompositeKey, StreamBacklog> snapshot() { final Map<StreamCompositeKey, StreamBacklog> streams = new HashMap<>(); counters.forEach( (counterId, typeId, keyBuffer, label) -> { if ((typeId >= PUBLISHER_LIMIT_TYPE_ID && typeId <= RECEIVER_POS_TYPE_ID) || typeId == SENDER_LIMIT_TYPE_ID || typeId == PER_IMAGE_TYPE_ID || typeId == PUBLISHER_POS_TYPE_ID) { final StreamCompositeKey key = new StreamCompositeKey( keyBuffer.getInt(SESSION_ID_OFFSET), keyBuffer.getInt(STREAM_ID_OFFSET), keyBuffer.getStringAscii(CHANNEL_OFFSET)); final StreamBacklog streamBacklog = streams.computeIfAbsent(key, (ignore) -> new StreamBacklog()); final long registrationId = keyBuffer.getLong(REGISTRATION_ID_OFFSET); final long value = counters.getCounterValue(counterId); switch (typeId) { case PublisherLimit.PUBLISHER_LIMIT_TYPE_ID: streamBacklog.createPublisherIfAbsent().registrationId(registrationId); streamBacklog.createPublisherIfAbsent().limit(value); break; case PublisherPos.PUBLISHER_POS_TYPE_ID: streamBacklog.createPublisherIfAbsent().registrationId(registrationId); streamBacklog.createPublisherIfAbsent().position(value); break; case SenderPos.SENDER_POSITION_TYPE_ID: streamBacklog.createSenderIfAbsent().registrationId(registrationId); streamBacklog.createSenderIfAbsent().position(value); break; case SenderLimit.SENDER_LIMIT_TYPE_ID: streamBacklog.createSenderIfAbsent().registrationId(registrationId); streamBacklog.createSenderIfAbsent().limit(value); break; case ReceiverHwm.RECEIVER_HWM_TYPE_ID: streamBacklog.createReceiverIfAbsent().registrationId(registrationId); streamBacklog.createReceiverIfAbsent().highWaterMark(value); break; case ReceiverPos.RECEIVER_POS_TYPE_ID: streamBacklog.createReceiverIfAbsent().registrationId(registrationId); streamBacklog.createReceiverIfAbsent().position(value); break; case SubscriberPos.SUBSCRIBER_POSITION_TYPE_ID: streamBacklog.subscriberBacklogs().put(registrationId, new Subscriber(value)); break; } } }); return streams; }\n\n    ### Response:", "ground_truth": "Take a snapshot of all the backlog information and group by stream.\n\n@return a snapshot of all the backlog information and group by stream.", "predict": "The snapshot() method creates and returns a Map of StreamCompositeKeys to StreamBacklogs for each StreamCounter found in counters. It creates and returns a Map of StreamCompositeKeys to StreamBacklogs for each StreamCounter found in counters. It creates and returns a Map of StreamCompositeKeys to StreamBacklogs for each StreamCounter found in counters. It creates and returns a Map of StreamCompositeKeys to StreamBacklogs for each StreamCounter found in counters. It creates and returns a Map of StreamCompositeKeys to StreamBacklogs for each StreamCounter found in counters. It creates and returns a Map of StreamCompositeKeys to StreamBacklogs for each StreamCounter found in counters. It creates and returns a Map of StreamCompositeKeys to StreamBacklogs for each StreamCounter found in counters. It creates and returns a Map of StreamCompositeKeys to StreamBacklogs for each StreamCounter found in counters. It creates and returns a Map of StreamCompositeKeys to"}, {"ID": 1972, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Client) MiddlewareFunc(middleware ...func(ctx *neptulon.ReqCtx) error) { c.conn.MiddlewareFunc(middleware...) }\n\n    ### Response: // MiddlewareFunc registers middleware function to handle incoming request messages..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static AtomicCounter allocate( final MutableDirectBuffer tempBuffer, final String name, final int typeId, final CountersManager countersManager, final long registrationId) { return new AtomicCounter( countersManager.valuesBuffer(), allocateCounterId(tempBuffer, name, typeId, countersManager, registrationId), countersManager); }\n\n    ### Response:", "ground_truth": "Allocate a counter for tracking the last heartbeat of an entity.\n\n@param tempBuffer      to be used for labels and key.\n@param name            of the counter for the label.\n@param typeId          of the counter for classification.\n@param countersManager from which to allocated the underlying storage.\n@param registrationId  to be associated with the counter.\n@return a new {@link AtomicCounter} for tracking the last heartbeat.", "predict": "// Allocate creates an atomic counter for the given name, type id and registration id.."}, {"ID": 1973, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function attemptBoolIndexing(selector, maxLen) { if (selector.type === exclusionProto.type) { var intIdxVector = attemptBoolIndexing(selector._selector, maxLen); return isUndefined(intIdxVector) ? undefined : excludeIntIndices(intIdxVector, maxLen); } if (Array.isArray(selector)) { selector = inferVectorDtype(selector.slice(), 'object'); } if (selector.type === vectorProto.type && selector.dtype === 'boolean') { if (selector.size() !== maxLen) { throw new Error('inappropriate boolean indexer length (' + selector.size() + '); expected length to be ' + maxLen); } return selector.which(); } }\n\n    ### Response: Performs boolean indexing if 'selector' is a boolean vector or array of the same length as maxLen or an exclusion wrapping such a vector or array. Returns undefined if 'selector' is inappropriate for boolean indexing; returns a vector of integer indices if boolean indexing resolves appropriately..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void close() { final MappedByteBuffer cncByteBuffer = this.cncByteBuffer; this.cncByteBuffer = null; IoUtil.unmap(cncByteBuffer); super.close(); }\n\n    ### Response:", "ground_truth": "Clean up all resources that the client uses to communicate with the Media Driver.", "predict": "Closes the mapped CNC Bytes representation of the MappedByteBuffer referenced by this MappedCounter. Unmaps the CNC Bytes representation of the mapped Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation of the Bytes representation"}, {"ID": 1974, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (set FeatureFlags) Admin(uid keybase1.UID) bool { for _, f := range set { if f == Feature(\"admin\") { return true } } return IsKeybaseAdmin(uid) }\n\n    ### Response: // Admin returns true if the admin feature set is on or the user is a keybase\n// admin..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void dispatchDescriptor( final RecordingDescriptorDecoder decoder, final RecordingDescriptorConsumer consumer) { consumer.onRecordingDescriptor( decoder.controlSessionId(), decoder.correlationId(), decoder.recordingId(), decoder.startTimestamp(), decoder.stopTimestamp(), decoder.startPosition(), decoder.stopPosition(), decoder.initialTermId(), decoder.segmentFileLength(), decoder.termBufferLength(), decoder.mtuLength(), decoder.sessionId(), decoder.streamId(), decoder.strippedChannel(), decoder.originalChannel(), decoder.sourceIdentity()); }\n\n    ### Response:", "ground_truth": "Dispatch a descriptor message to a consumer by reading the fields in the correct order.\n\n@param decoder  which wraps the encoded message ready for reading.\n@param consumer to which the decoded fields should be passed.", "predict": "The dispatchDescriptor method dispatches recorded media to the given listener. It accepts an ordered triplet of values corresponding to the media type, source channel, and source identity of the recorded media. It also provides details about the length of the media file, its buffer length, its media type, its timestamp, its position, and other values specific to the given media type."}, {"ID": 1975, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setCharset($charset) { if (is_string($charset)) { if (in_array($charset, mb_list_encodings())) { $this->charset = $charset; } else { throw new \\InvalidArgumentException( \"Invalid value '\" . $charset . \"' for argument 'charset' given. Charset not supported.\" ); } } else { throw new \\InvalidArgumentException( \"Invalid type '\" . gettype($charset). \"' for argument 'charset' given.\" ); } return $this; }\n\n    ### Response: Sets the charset for the style sheet.\n\n@param string $charset\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addSlab(int minimumSize) { int nextSlabSize; if (bytesUsed == 0) { nextSlabSize = initialSlabSize; } else if (bytesUsed > maxCapacityHint / 5) { // to avoid an overhead of up to twice the needed size, we get linear when approaching target page size nextSlabSize = maxCapacityHint / 5; } else { // double the size every time nextSlabSize = bytesUsed; } if (nextSlabSize < minimumSize) { LOG.debug(\"slab size {} too small for value of size {}. Bumping up slab size\", nextSlabSize, minimumSize); nextSlabSize = minimumSize; } LOG.debug(\"used {} slabs, adding new slab of size {}\", slabs.size(), nextSlabSize); this.currentSlab = allocator.allocate(nextSlabSize); this.slabs.add(currentSlab); this.bytesAllocated += nextSlabSize; this.currentSlabIndex = 0; }\n\n    ### Response:", "ground_truth": "the new slab is guaranteed to be at least minimumSize\n@param minimumSize the size of the data we want to copy in the new slab", "predict": "Incrementally allocates growing sets of objects to maximize memory usage and avoid unnecessary garbage collection"}, {"ID": 1976, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getStreams($filter = null) { if ($filter !== null) { if ( ! is_callable($filter)) { $filter = function (StreamInterface $stream) use ($filter) { return (bool) ($filter & $stream->getType()); }; } $streams = clone $this->streams; foreach ($streams as $index => $stream) { if ($filter($stream) === false) { $streams->offsetUnset($index); } } return $streams; } return $this->streams; }\n\n    ### Response: Get a list of streams.\n\n@param int|callable $filter\n\n@return Collection|StreamInterface[].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setByte(long index, byte value) { checkArgument(index < bytesUsed, \"Index: \" + index + \" is >= the current size of: \" + bytesUsed); long seen = 0; for (int i = 0; i < slabs.size(); i++) { ByteBuffer slab = slabs.get(i); if (index < seen + slab.limit()) { // ok found index slab.put((int)(index-seen), value); break; } seen += slab.limit(); } }\n\n    ### Response:", "ground_truth": "Replace the byte stored at position index in this stream with value\n\n@param index which byte to replace\n@param value the value to replace it with", "predict": "\n    Sets the given index to the given value in the given bit vector."}, {"ID": 1977, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function getUtcDateTime( BaseDateTime $date ) { $newDate = new BaseDateTime( ); $newDate->setTimestamp( $date->getTimestamp() ); $newDate->setTimezone( new DateTimeZone( 'UTC' ) ); return $newDate; }\n\n    ### Response: Converts the current date time object to UTC time.\n\n@param BaseDateTime $date the date time object to convert\n\n@return BaseDateTime the UTC date time object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void add(Statistics<?> stats) { if (stats.hasNonNullValue()) { nullPages.add(false); Object min = stats.genericGetMin(); Object max = stats.genericGetMax(); addMinMax(min, max); pageIndexes.add(nextPageIndex); minMaxSize += sizeOf(min); minMaxSize += sizeOf(max); } else { nullPages.add(true); } nullCounts.add(stats.getNumNulls()); ++nextPageIndex; }\n\n    ### Response:", "ground_truth": "Adds the data from the specified statistics to this builder\n\n@param stats\nthe statistics to be added", "predict": "Adds values from other Statistics objects to the min and max values of the current Statistics object and updates the min and max values of the other objects to be closer to the min and max values of the current objects to avoid unnecessary calculations of min and max values of other objects because of these values already reached their min and max values and to avoid unnecessary storage of these values because of these values already reached their min and max values"}, {"ID": 1978, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def feed_packets(self, binary_packets, linktype=LinkTypes.ETHERNET): \"\"\" Gets a list of binary packets, parses them using tshark and returns their parsed values. Keeps the packets in the internal packet list as well. By default, assumes the packets are ethernet packets. For another link type, supply the linktype argument (most can be found in the class LinkTypes) \"\"\" self._current_linktype = linktype parsed_packets = self.parse_packets(binary_packets) self._packets.extend(parsed_packets) self.close() return parsed_packets\n\n    ### Response: Gets a list of binary packets, parses them using tshark and returns their parsed values.\n        Keeps the packets in the internal packet list as well.\n\n        By default, assumes the packets are ethernet packets. For another link type, supply the linktype argument (most\n        can be found in the class LinkTypes).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static RowRanges calculateRowRanges(FilterCompat.Filter filter, ColumnIndexStore columnIndexStore, Set<ColumnPath> paths, long rowCount) { return filter.accept(new FilterCompat.Visitor<RowRanges>() { @Override public RowRanges visit(FilterPredicateCompat filterPredicateCompat) { try { return filterPredicateCompat.getFilterPredicate() .accept(new ColumnIndexFilter(columnIndexStore, paths, rowCount)); } catch (MissingOffsetIndexException e) { LOGGER.info(e.getMessage()); return RowRanges.createSingle(rowCount); } } @Override public RowRanges visit(UnboundRecordFilterCompat unboundRecordFilterCompat) { return RowRanges.createSingle(rowCount); } @Override public RowRanges visit(NoOpFilter noOpFilter) { return RowRanges.createSingle(rowCount); } }); }\n\n    ### Response:", "ground_truth": "Calculates the row ranges containing the indexes of the rows might match the specified filter.\n\n@param filter\nto be used for filtering the rows\n@param columnIndexStore\nthe store for providing column/offset indexes\n@param paths\nthe paths of the columns used in the actual projection; a column not being part of the projection will be\nhandled as containing {@code null} values only even if the column has values written in the file\n@param rowCount\nthe total number of rows in the row-group\n@return the ranges of the possible matching row indexes; the returned ranges will contain all the rows if any of\nthe required offset index is missing", "predict": "Calculate row ranges for given filter and column range store"}, {"ID": 1979, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Float32Array(name string, values []float32) FieldOpt { return func(em *eventMetadata, ed *eventData) { em.writeArray(name, inTypeFloat, outTypeDefault, 0) ed.writeUint16(uint16(len(values))) for _, v := range values { ed.writeUint32(math.Float32bits(v)) } } }\n\n    ### Response: // Float32Array adds an array of float32 to the event..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static GroupType convertArrayType(final String name, final ListTypeInfo typeInfo) { final TypeInfo subType = typeInfo.getListElementTypeInfo(); return listWrapper(name, listType(), new GroupType(Repetition.REPEATED, ParquetHiveSerDe.ARRAY.toString(), convertType(\"array_element\", subType))); }\n\n    ### Response:", "ground_truth": "1 anonymous element \"array_element\"", "predict": "// This function converts an Array to its appropriate Parquet type. It looks for an Array with the given name and populates an appropriate Parquet column with values from that Array. It first looks for an Element type for the given Array and then populates corresponding Parquet column with values from that Element type. It makes sure that values from the given Array are ordered and indexed properly to be used in Parquet column thus populates appropriate row group for given Parquet column."}, {"ID": 1980, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setOptions($options) { $this->title = (isset($options['title'])) ? $options['title'] : ''; $this->width = (isset($options['width'])) ? $options['width'] : ''; $this->order = (isset($options['order'])) ? $options['order'] : true; $this->sortable = (isset($options['sortable'])) ? $options['sortable'] : true; $this->separatable = (isset($options['separatable'])) ? $options['separatable'] : $this->getSeparatable(); $this->tableAlias = (isset($options['tableAlias'])) ? $options['tableAlias'] : ''; if (isset($options['editable']) && $options['editable'] == true) { $this->editable = $options['editable']; $this->getCell()->addDecorator('editable', array()); } return $this; }\n\n    ### Response: Set options like title, width, order\n\n@param array $options\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static GroupType convertStructType(final String name, final StructTypeInfo typeInfo) { final List<String> columnNames = typeInfo.getAllStructFieldNames(); final List<TypeInfo> columnTypes = typeInfo.getAllStructFieldTypeInfos(); return new GroupType(Repetition.OPTIONAL, name, convertTypes(columnNames, columnTypes)); }\n\n    ### Response:", "ground_truth": "An optional group containing multiple elements", "predict": "\n    The function convertsStructType converts anStructTypeInfo intoStructType and returns the newStructTypeGroup."}, {"ID": 1981, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func GetTableHandleKeyRange(tableID int64) (startKey, endKey []byte) { startKey = EncodeRowKeyWithHandle(tableID, math.MinInt64) endKey = EncodeRowKeyWithHandle(tableID, math.MaxInt64) return }\n\n    ### Response: // GetTableHandleKeyRange returns table handle's key range with tableID..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static String annotateMessage(String message, int pos) { StringBuilder sb = new StringBuilder(message); sb.append('\\n'); for (int i = 0; i < pos; i++) { sb.append('-'); } sb.append('^'); return sb.toString(); }\n\n    ### Response:", "ground_truth": "for pretty printing which character had the error", "predict": "// This annotation generates an error message with the source code position of the error highlighted in the message"}, {"ID": 1982, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void addAll(int index, T... items) { List<T> collection = Arrays.asList(items); synchronized (mLock) { if (mOriginalValues != null) { mOriginalValues.addAll(index, collection); } else { mObjects.addAll(index, collection); } } if (mNotifyOnChange) notifyDataSetChanged(); }\n\n    ### Response: Inserts the specified objects at the specified index in the array.\n\n@param items The objects to insert into the array.\n@param index The index at which the object must be inserted..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void endPreviousBitPackedRun() { if (bitPackedRunHeaderPointer == -1) { // we're not currently in a bit-packed-run return; } // create bit-packed-header, which needs to fit in 1 byte byte bitPackHeader = (byte) ((bitPackedGroupCount << 1) | 1); // update this byte baos.setByte(bitPackedRunHeaderPointer, bitPackHeader); // mark that this run is over bitPackedRunHeaderPointer = -1; // reset the number of groups bitPackedGroupCount = 0; }\n\n    ### Response:", "ground_truth": "If we are currently writing a bit-packed-run, update the\nbit-packed-header and consider this run to be over\n\ndoes nothing if we're not currently writing a bit-packed run", "predict": "Finishes the previously-started bit-packing run of values and resets the values to be packed to their normal values"}, {"ID": 1983, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *client) Pause(_ context.Context, containerID string) error { ctr, _, err := c.getProcess(containerID, libcontainerdtypes.InitProcessName) if err != nil { return err } if ctr.ociSpec.Windows.HyperV == nil { return errors.New(\"cannot pause Windows Server Containers\") } ctr.Lock() defer ctr.Unlock() if err = ctr.hcsContainer.Pause(); err != nil { return err } ctr.status = containerd.Paused c.eventQ.Append(containerID, func() { err := c.backend.ProcessEvent(containerID, libcontainerdtypes.EventPaused, libcontainerdtypes.EventInfo{ ContainerID: containerID, ProcessID: libcontainerdtypes.InitProcessName, }) c.logger.WithFields(logrus.Fields{ \"container\": ctr.id, \"event\": libcontainerdtypes.EventPaused, }).Info(\"sending event\") if err != nil { c.logger.WithError(err).WithFields(logrus.Fields{ \"container\": containerID, \"event\": libcontainerdtypes.EventPaused, }).Error(\"failed to process event\") } }) return nil }\n\n    ### Response: // Pause handles pause requests for containers.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void readOne(TProtocol in, TProtocol out) throws TException { readOneStruct(in, out); }\n\n    ### Response:", "ground_truth": "reads one record from in and writes it to out\nexceptions are not recoverable as record might be halfway written\n@param in input protocol\n@param out output protocol\n@throws TException if there is an error while reading or writing", "predict": "// Override the default behavior of the TTransportInputStream to translate the input stream into objects of type TStruct during the readOne() method of the TTransportInputStream."}, {"ID": 1984, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String sanitizeDefaultPort(String url) { int afterSchemeIndex = url.indexOf(\"://\"); if(afterSchemeIndex < 0) { return url; } String scheme = url.substring(0, afterSchemeIndex); int fromIndex = scheme.length() + 3; //Let's see if it is an IPv6 Address int ipv6StartIndex = url.indexOf('[', fromIndex); if (ipv6StartIndex > 0) { fromIndex = url.indexOf(']', ipv6StartIndex); } int portIndex = url.indexOf(':', fromIndex); if(portIndex >= 0) { int port = Integer.parseInt(url.substring(portIndex + 1)); if(isDefaultPort(port, scheme)) { return url.substring(0, portIndex); } } return url; }\n\n    ### Response: Removes the port from a URL if this port is the default one for the URL's scheme.\n@param url the url to be sanitized.\n@return  the sanitized url..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Deprecated public static List<Footer> readFooters(Configuration configuration, FileStatus pathStatus) throws IOException { return readFooters(configuration, pathStatus, false); }\n\n    ### Response:", "ground_truth": "this always returns the row groups\n@param configuration a configuration\n@param pathStatus a file status to read footers from\n@return a list of footers\n@throws IOException if an exception is thrown while reading the footers\n@deprecated will be removed in 2.0.0;\nuse {@link ParquetFileReader#open(InputFile, ParquetReadOptions)}", "predict": "Deprecated - reads footers from given url and path status."}, {"ID": 1985, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function offsetGet($offset) { if (!isset($this->container[$offset])) { $this->container[$offset] = new self(); } return $this->container[$offset]; }\n\n    ### Response: Get value from array.\n\n@param string|int $offset\n\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Deprecated public static List<Footer> readSummaryFile(Configuration configuration, FileStatus summaryStatus) throws IOException { final Path parent = summaryStatus.getPath().getParent(); ParquetMetadata mergedFooters = readFooter(configuration, summaryStatus, filter(false)); return footersFromSummaryFile(parent, mergedFooters); }\n\n    ### Response:", "ground_truth": "Specifically reads a given summary file\n@param configuration a configuration\n@param summaryStatus file status for a summary file\n@return the metadata translated for each file\n@throws IOException if an exception is thrown while reading the summary file\n@deprecated metadata files are not recommended and will be removed in 2.0.0", "predict": "\n    Reading footers from summary file\n    Parameters:\n    Configuration : Class holding information about where to find parquet metadata\n    FileStatus : Class holding information about status of Parquet file\n    ParquetMetadata : Class holding information about footers\n    Footer : Class holding information about individual parquet row groups\n    Path : Class holding information about location of Parquet file\n    List<Footer> : output of footers read operation"}, {"ID": 1986, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (p *Pod) AddSecret(envVar, secretName, sourceName string) *Pod { if p.Secrets == nil { p = p.EmptySecrets() } p.Secrets[secretName] = Secret{EnvVar: envVar, Source: sourceName} return p }\n\n    ### Response: // AddSecret adds the secret to the pod.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Deprecated public static final ParquetMetadata readFooter(InputFile file, MetadataFilter filter) throws IOException { ParquetReadOptions options; if (file instanceof HadoopInputFile) { options = HadoopReadOptions.builder(((HadoopInputFile) file).getConfiguration()) .withMetadataFilter(filter).build(); } else { options = ParquetReadOptions.builder().withMetadataFilter(filter).build(); } try (SeekableInputStream in = file.newStream()) { return readFooter(file, options, in); } }\n\n    ### Response:", "ground_truth": "Reads the meta data block in the footer of the file using provided input stream\n@param file a {@link InputFile} to read\n@param filter the filter to apply to row groups\n@return the metadata blocks in the footer\n@throws IOException if an error occurs while reading the file\n@deprecated will be removed in 2.0.0;\nuse {@link ParquetFileReader#open(InputFile, ParquetReadOptions)}", "predict": "// readFooter reads footers from Parquet file // Parameters: file, metadataFilter // Throws IOException if there //is an error during footers read // Deprecated because footers are not // part of Parquet format"}, {"ID": 1987, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function updateSite($serverId, $siteId, array $data) { return new Site( $this->put(\"servers/$serverId/sites/$siteId\", $data)['site'] + ['server_id' => $serverId], $this ); }\n\n    ### Response: Update the given site.\n\n@param  integer $serverId\n@param  integer $siteId\n@param  array $data\n@return Site.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public PageReadStore readNextRowGroup() throws IOException { if (currentBlock == blocks.size()) { return null; } BlockMetaData block = blocks.get(currentBlock); if (block.getRowCount() == 0) { throw new RuntimeException(\"Illegal row group of 0 rows\"); } this.currentRowGroup = new ColumnChunkPageReadStore(block.getRowCount()); // prepare the list of consecutive parts to read them in one scan List<ConsecutivePartList> allParts = new ArrayList<ConsecutivePartList>(); ConsecutivePartList currentParts = null; for (ColumnChunkMetaData mc : block.getColumns()) { ColumnPath pathKey = mc.getPath(); BenchmarkCounter.incrementTotalBytes(mc.getTotalSize()); ColumnDescriptor columnDescriptor = paths.get(pathKey); if (columnDescriptor != null) { long startingPos = mc.getStartingPos(); // first part or not consecutive => new list if (currentParts == null || currentParts.endPos() != startingPos) { currentParts = new ConsecutivePartList(startingPos); allParts.add(currentParts); } currentParts.addChunk(new ChunkDescriptor(columnDescriptor, mc, startingPos, (int)mc.getTotalSize())); } } // actually read all the chunks ChunkListBuilder builder = new ChunkListBuilder(); for (ConsecutivePartList consecutiveChunks : allParts) { consecutiveChunks.readAll(f, builder); } for (Chunk chunk : builder.build()) { currentRowGroup.addColumn(chunk.descriptor.col, chunk.readAllPages()); } // avoid re-reading bytes the dictionary reader is used after this call if (nextDictionaryReader != null) { nextDictionaryReader.setRowGroup(currentRowGroup); } advanceToNextBlock(); return currentRowGroup; }\n\n    ### Response:", "ground_truth": "Reads all the columns requested from the row group at the current file position.\n@throws IOException if an error occurs while reading\n@return the PageReadStore which can provide PageReaders for each column.", "predict": "Prepares and reads data from consecutive blocks of pages to facilitate column chunking of bulk loads of data to Hadoop MapReduce jobs to improve I/O efficiency of bulk loads of data to Hadoop MapReduce jobs to improve I/O efficiency of bulk loads of data to Hadoop MapReduce jobs to improve I/O efficiency of bulk loads of data to Hadoop MapReduce jobs to improve I/O efficiency of bulk loads of data to Hadoop MapReduce jobs to improve I/O efficiency of bulk loads of data to Hadoop MapReduce jobs to improve I/O efficiency of bulk loads of data to Hadoop MapReduce jobs to improve I/O efficiency of bulk loads of data to Hadoop MapReduce jobs to improve I/O efficiency of bulk loads of data to Hadoop MapReduce jobs to improve I/O efficiency of bulk loads of data to Hadoop MapReduce jobs to improve I/O efficiency of bulk loads of data to Hadoop Map"}, {"ID": 1988, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _AlignDecryptedDataOffset(self, decrypted_data_offset): \"\"\"Aligns the encrypted file with the decrypted data offset. Args: decrypted_data_offset (int): decrypted data offset. \"\"\" self._file_object.seek(0, os.SEEK_SET) self._decrypter = self._GetDecrypter() self._decrypted_data = b'' encrypted_data_offset = 0 encrypted_data_size = self._file_object.get_size() while encrypted_data_offset < encrypted_data_size: read_count = self._ReadEncryptedData(self._ENCRYPTED_DATA_BUFFER_SIZE) if read_count == 0: break encrypted_data_offset += read_count if decrypted_data_offset < self._decrypted_data_size: self._decrypted_data_offset = decrypted_data_offset break decrypted_data_offset -= self._decrypted_data_size\n\n    ### Response: Aligns the encrypted file with the decrypted data offset.\n\n    Args:\n      decrypted_data_offset (int): decrypted data offset..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public PageReadStore readNextFilteredRowGroup() throws IOException { if (currentBlock == blocks.size()) { return null; } if (!options.useColumnIndexFilter()) { return readNextRowGroup(); } BlockMetaData block = blocks.get(currentBlock); if (block.getRowCount() == 0) { throw new RuntimeException(\"Illegal row group of 0 rows\"); } ColumnIndexStore ciStore = getColumnIndexStore(currentBlock); RowRanges rowRanges = getRowRanges(currentBlock); long rowCount = rowRanges.rowCount(); if (rowCount == 0) { // There are no matching rows -> skipping this row-group advanceToNextBlock(); return readNextFilteredRowGroup(); } if (rowCount == block.getRowCount()) { // All rows are matching -> fall back to the non-filtering path return readNextRowGroup(); } this.currentRowGroup = new ColumnChunkPageReadStore(rowRanges); // prepare the list of consecutive parts to read them in one scan ChunkListBuilder builder = new ChunkListBuilder(); List<ConsecutivePartList> allParts = new ArrayList<ConsecutivePartList>(); ConsecutivePartList currentParts = null; for (ColumnChunkMetaData mc : block.getColumns()) { ColumnPath pathKey = mc.getPath(); ColumnDescriptor columnDescriptor = paths.get(pathKey); if (columnDescriptor != null) { OffsetIndex offsetIndex = ciStore.getOffsetIndex(mc.getPath()); OffsetIndex filteredOffsetIndex = filterOffsetIndex(offsetIndex, rowRanges, block.getRowCount()); for (OffsetRange range : calculateOffsetRanges(filteredOffsetIndex, mc, offsetIndex.getOffset(0))) { BenchmarkCounter.incrementTotalBytes(range.getLength()); long startingPos = range.getOffset(); // first part or not consecutive => new list if (currentParts == null || currentParts.endPos() != startingPos) { currentParts = new ConsecutivePartList(startingPos); allParts.add(currentParts); } ChunkDescriptor chunkDescriptor = new ChunkDescriptor(columnDescriptor, mc, startingPos, (int) range.getLength()); currentParts.addChunk(chunkDescriptor); builder.setOffsetIndex(chunkDescriptor, filteredOffsetIndex); } } } // actually read all the chunks for (ConsecutivePartList consecutiveChunks : allParts) { consecutiveChunks.readAll(f, builder); } for (Chunk chunk : builder.build()) { currentRowGroup.addColumn(chunk.descriptor.col, chunk.readAllPages()); } // avoid re-reading bytes the dictionary reader is used after this call if (nextDictionaryReader != null) { nextDictionaryReader.setRowGroup(currentRowGroup); } advanceToNextBlock(); return currentRowGroup; }\n\n    ### Response:", "ground_truth": "Reads all the columns requested from the row group at the current file position. It may skip specific pages based\non the column indexes according to the actual filter. As the rows are not aligned among the pages of the different\ncolumns row synchronization might be required. See the documentation of the class SynchronizingColumnReader for\ndetails.\n\n@return the PageReadStore which can provide PageReaders for each column\n@throws IOException\nif any I/O error occurs while reading", "predict": "Prepares and reads filtered row groups of data from column stores of indexed columns of the column families of the given column families meta data. It reads filtered row groups of data from indexed columns of the column families of the given column families meta data to prepare for dictionary compression of indexed columns of the given column families meta data. It reads filtered row groups of data from indexed columns of the column families of the given column families meta data to prepare for dictionary compression of indexed columns of the given column families meta data. It reads filtered row groups of data from indexed columns of the column families of the given column families meta data to prepare for dictionary compression of indexed columns of the given column families meta data. It reads filtered row groups of data from indexed columns of the column families of the given column families meta data to prepare for dictionary compression of indexed columns of the given column families meta data. It reads filtered row groups of data from indexed columns of the column families of the given column families meta data to prepare for dictionary compression of indexed columns of the given column families meta data. It reads filtered"}, {"ID": 1989, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function setPriceRules(array $order) { foreach (array_keys($order['data']['components']) as $component_id) { if (is_numeric($component_id)) { $rule = $this->price_rule->get($component_id); if (isset($rule['code']) && $rule['code'] !== '') { $this->price_rule->setUsed($rule['price_rule_id']); } } } }\n\n    ### Response: Sets price rules after the order was created\n@param array $order.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    DictionaryPage readDictionary(ColumnChunkMetaData meta) throws IOException { if (!meta.getEncodings().contains(Encoding.PLAIN_DICTIONARY) && !meta.getEncodings().contains(Encoding.RLE_DICTIONARY)) { return null; } // TODO: this should use getDictionaryPageOffset() but it isn't reliable. if (f.getPos() != meta.getStartingPos()) { f.seek(meta.getStartingPos()); } PageHeader pageHeader = Util.readPageHeader(f); if (!pageHeader.isSetDictionary_page_header()) { return null; // TODO: should this complain? } DictionaryPage compressedPage = readCompressedDictionary(pageHeader, f); BytesInputDecompressor decompressor = options.getCodecFactory().getDecompressor(meta.getCodec()); return new DictionaryPage( decompressor.decompress(compressedPage.getBytes(), compressedPage.getUncompressedSize()), compressedPage.getDictionarySize(), compressedPage.getEncoding()); }\n\n    ### Response:", "ground_truth": "Reads and decompresses a dictionary page for the given column chunk.\n\nReturns null if the given column chunk has no dictionary page.\n\n@param meta a column's ColumnChunkMetaData to read the dictionary from\n@return an uncompressed DictionaryPage or null\n@throws IOException if there is an error while reading the dictionary", "predict": "reads dictionary from indexed column chunk meta data"}, {"ID": 1990, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *Slice) Free() { if !s.freed { C.free(unsafe.Pointer(s.data)) s.freed = true } }\n\n    ### Response: // Free frees the slice data..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    synchronized void addWriter(InternalParquetRecordWriter writer, Long allocation) { Long oldValue = writerList.get(writer); if (oldValue == null) { writerList.put(writer, allocation); } else { throw new IllegalArgumentException(\"[BUG] The Parquet Memory Manager should not add an \" + \"instance of InternalParquetRecordWriter more than once. The Manager already contains \" + \"the writer: \" + writer); } updateAllocation(); }\n\n    ### Response:", "ground_truth": "Add a new writer and its memory allocation to the memory manager.\n@param writer the new created writer\n@param allocation the requested buffer size", "predict": "// This method addWriter syncs the list of writers to the given allocation // It updates allocation for the given writer // If allocation for the given writer wasn't found, allocWriter creates // and returns allocation for the given writer"}, {"ID": 1991, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static function _getMemory() { if (function_exists('memory_get_usage')) { return memory_get_usage(); } else { $output = array(); $pid = getmypid(); if (substr(PHP_OS, 0, 3) == 'WIN') { @exec('tasklist /FI \"PID eq ' . $pid . '\" /FO LIST', $output); if (!isset($output[5])) { $output[5] = null; } return (int)substr($output[5], strpos($output[5], ':') + 1); } else { @exec(\"ps -o rss -p $pid\", $output); return $output[1] * 1024; } } }\n\n    ### Response: Get current usage memory\n@return int.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    synchronized void removeWriter(InternalParquetRecordWriter writer) { if (writerList.containsKey(writer)) { writerList.remove(writer); } if (!writerList.isEmpty()) { updateAllocation(); } }\n\n    ### Response:", "ground_truth": "Remove the given writer from the memory manager.\n@param writer the writer that has been closed", "predict": "Remove writer from list of writers\n\n     * Remove writer from list of writers\n     * Update allocation if list of writers is empty\n     *"}, {"ID": 1992, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function deleteMediumAction($id) { $medium = $this->getMedium($id); $this->mediaManager->delete($medium); return ['deleted' => true]; }\n\n    ### Response: Deletes a medium.\n\n@ApiDoc(\nrequirements={\n{\"name\"=\"id\", \"dataType\"=\"integer\", \"requirement\"=\"\\d+\", \"description\"=\"medium identifier\"}\n},\nstatusCodes={\n200=\"Returned when medium is successfully deleted\",\n400=\"Returned when an error has occurred while deleting the medium\",\n404=\"Returned when unable to find medium\"\n}\n)\n\n@param int $id A medium identifier\n\n@throws NotFoundHttpException\n\n@return View.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void updateAllocation() { long totalAllocations = 0; for (Long allocation : writerList.values()) { totalAllocations += allocation; } if (totalAllocations <= totalMemoryPool) { scale = 1.0; } else { scale = (double) totalMemoryPool / totalAllocations; LOG.warn(String.format( \"Total allocation exceeds %.2f%% (%,d bytes) of heap memory\\n\" + \"Scaling row group sizes to %.2f%% for %d writers\", 100*memoryPoolRatio, totalMemoryPool, 100*scale, writerList.size())); for (Runnable callBack : callBacks.values()) { // we do not really want to start a new thread here. callBack.run(); } } int maxColCount = 0; for (InternalParquetRecordWriter w : writerList.keySet()) { maxColCount = Math.max(w.getSchema().getColumns().size(), maxColCount); } for (Map.Entry<InternalParquetRecordWriter, Long> entry : writerList.entrySet()) { long newSize = (long) Math.floor(entry.getValue() * scale); if(scale < 1.0 && minMemoryAllocation > 0 && newSize < minMemoryAllocation) { throw new ParquetRuntimeException(String.format(\"New Memory allocation %d bytes\" + \" is smaller than the minimum allocation size of %d bytes.\", newSize, minMemoryAllocation)){}; } entry.getKey().setRowGroupSizeThreshold(newSize); LOG.debug(String.format(\"Adjust block size from %,d to %,d for writer: %s\", entry.getValue(), newSize, entry.getKey())); } }\n\n    ### Response:", "ground_truth": "Update the allocated size of each writer based on the current allocations and pool size.", "predict": "Updates allocation for row groups produced by the parquet format writers to maximize memory usage"}, {"ID": 1993, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_file(self, fp, headers=None, cb=None, num_cb=10, torrent=False): \"\"\" Retrieves a file from a Key :type fp: file :param fp: File pointer to put the data into :type headers: string :param: ignored in this subclass. :type cb: function :param cb: ignored in this subclass. :type cb: int :param num_cb: ignored in this subclass. \"\"\" if self.key_type & self.KEY_STREAM_READABLE: raise BotoClientError('Stream is not Readable') elif self.key_type & self.KEY_STREAM_WRITABLE: key_file = self.fp else: key_file = open(self.full_path, 'rb') try: shutil.copyfileobj(key_file, fp) finally: key_file.close()\n\n    ### Response: Retrieves a file from a Key\n\n        :type fp: file\n        :param fp: File pointer to put the data into\n\n        :type headers: string\n        :param: ignored in this subclass.\n\n        :type cb: function\n        :param cb: ignored in this subclass.\n\n        :type cb: int\n        :param num_cb: ignored in this subclass..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerScaleCallBack(String callBackName, Runnable callBack) { Preconditions.checkNotNull(callBackName, \"callBackName\"); Preconditions.checkNotNull(callBack, \"callBack\"); if (callBacks.containsKey(callBackName)) { throw new IllegalArgumentException(\"The callBackName \" + callBackName + \" is duplicated and has been registered already.\"); } else { callBacks.put(callBackName, callBack); } }\n\n    ### Response:", "ground_truth": "Register callback and deduplicate it if any.\n@param callBackName the name of callback. It should be identical.\n@param callBack the callback passed in from upper layer, such as Hive.", "predict": "Preconditions provides tools to help detect potential bugs in the program logic of the program, by ensuring the validity of the input values."}, {"ID": 1994, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def __init_keystone_session_v3(self, check=False): \"\"\" Return a new session object, created using Keystone API v3. .. note:: Note that the only supported authN method is password authentication; token or other plug-ins are not currently supported. \"\"\" try: # may fail on Python 2.6? from keystoneauth1.identity import v3 as keystone_v3 except ImportError: log.warning(\"Cannot load Keystone API v3 library.\") return None auth = keystone_v3.Password( auth_url=self._os_auth_url, username=self._os_username, password=self._os_password, user_domain_name=self._os_user_domain_name, project_domain_name=self._os_project_domain_name, project_name=self._os_tenant_name, ) sess = keystoneauth1.session.Session(auth=auth, verify=self._os_cacert) if check: log.debug(\"Checking that Keystone API v3 session works...\") try: # if session is invalid, the following will raise some exception nova = nova_client.Client(self._compute_api_version, session=sess) nova.flavors.list() except keystoneauth1.exceptions.NotFound as err: log.warning(\"Creating Keystone v3 session failed: %s\", err) return None except keystoneauth1.exceptions.ClientException as err: log.error(\"OpenStack server rejected request (likely configuration error?): %s\", err) return None # FIXME: should we be raising an error instead? # if we got to this point, v3 session is valid log.info(\"Using Keystone API v3 session to authenticate to OpenStack\") return sess\n\n    ### Response: Return a new session object, created using Keystone API v3.\n\n        .. note::\n\n          Note that the only supported authN method is password authentication;\n          token or other plug-ins are not currently supported..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void start() throws IOException { state = state.start(); LOG.debug(\"{}: start\", out.getPos()); out.write(MAGIC); }\n\n    ### Response:", "ground_truth": "start the file\n@throws IOException if there is an error while writing", "predict": "\n    Public method to start the output stream writing the magic string to initiate the compression format\n    \"\"\"\n    state.start()\n    LOG.debug(\"{}: start\", out.getPos());\n    out.write(MAGIC);"}, {"ID": 1995, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def clean_before_output(kw_matches): \"\"\"Return a clean copy of the keywords data structure. Stripped off the standalone and other unwanted elements. \"\"\" filtered_kw_matches = {} for kw_match, info in iteritems(kw_matches): if not kw_match.nostandalone: filtered_kw_matches[kw_match] = info return filtered_kw_matches\n\n    ### Response: Return a clean copy of the keywords data structure.\n\n    Stripped off the standalone and other unwanted elements..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void startBlock(long recordCount) throws IOException { state = state.startBlock(); LOG.debug(\"{}: start block\", out.getPos()); // out.write(MAGIC); // TODO: add a magic delimiter alignment.alignForRowGroup(out); currentBlock = new BlockMetaData(); currentRecordCount = recordCount; currentColumnIndexes = new ArrayList<>(); currentOffsetIndexes = new ArrayList<>(); }\n\n    ### Response:", "ground_truth": "start a block\n@param recordCount the record count in this block\n@throws IOException if there is an error while writing", "predict": "Starts the row group for the given record count."}, {"ID": 1996, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <E> List<E> findByRange(Class<E> entityClass, EntityMetadata metadata, byte[] startRow, byte[] endRow, String[] columns, Filter f, Queue filterClausequeue) { EntityMetadata entityMetadata = KunderaMetadataManager.getEntityMetadata(kunderaMetadata, entityClass); // columnFamily has a different meaning for HBase, so it won't be used // here String tableName = entityMetadata.getSchema(); List results = new ArrayList(); FilterList filter = new FilterList(); if (f != null) { filter.addFilter(f); } if (isFindKeyOnly(metadata, columns)) { columns = null; filter.addFilter(new KeyOnlyFilter()); } try { MetamodelImpl metaModel = (MetamodelImpl) kunderaMetadata.getApplicationMetadata().getMetamodel( entityMetadata.getPersistenceUnit()); EntityType entityType = metaModel.entity(entityClass); List<AbstractManagedType> subManagedType = ((AbstractManagedType) entityType).getSubManagedType(); if (!subManagedType.isEmpty()) { for (AbstractManagedType subEntity : subManagedType) { EntityMetadata subEntityMetadata = KunderaMetadataManager.getEntityMetadata(kunderaMetadata, subEntity.getJavaType()); List found = handler.readDataByRange(tableName, subEntityMetadata.getEntityClazz(), subEntityMetadata, startRow, endRow, columns, filter); results.addAll(found); } } else { results = handler.readDataByRange(tableName, entityClass, metadata, startRow, endRow, columns, filter); } if (showQuery && filterClausequeue.size() > 0) { KunderaCoreUtils.printQueryWithFilterClause(filterClausequeue, entityMetadata.getTableName()); } } catch (IOException ioex) { log.error(\"Error during find by range, Caused by: .\", ioex); throw new KunderaException(ioex); } return results; }\n\n    ### Response: Handles find by range query for given start and end row key range values.\n\n@param \nparameterized entity class.\n@param entityClass\nentity class.\n@param metadata\nentity metadata\n@param startRow\nstart row.\n@param endRow\nend row.\n@param columns\nthe columns\n@param f\nthe f\n@param filterClausequeue\nthe filter clausequeue\n@return collection holding results..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void startColumn(ColumnDescriptor descriptor, long valueCount, CompressionCodecName compressionCodecName) throws IOException { state = state.startColumn(); encodingStatsBuilder.clear(); currentEncodings = new HashSet<Encoding>(); currentChunkPath = ColumnPath.get(descriptor.getPath()); currentChunkType = descriptor.getPrimitiveType(); currentChunkCodec = compressionCodecName; currentChunkValueCount = valueCount; currentChunkFirstDataPage = out.getPos(); compressedLength = 0; uncompressedLength = 0; // The statistics will be copied from the first one added at writeDataPage(s) so we have the correct typed one currentStatistics = null; columnIndexBuilder = ColumnIndexBuilder.getBuilder(currentChunkType, columnIndexTruncateLength); offsetIndexBuilder = OffsetIndexBuilder.getBuilder(); firstPageOffset = -1; }\n\n    ### Response:", "ground_truth": "start a column inside a block\n@param descriptor the column descriptor\n@param valueCount the value count in this column\n@param compressionCodecName a compression codec name\n@throws IOException if there is an error while writing", "predict": "Starts writing values to column meta data"}, {"ID": 1997, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def set_logging(cfg_obj): \"\"\" Enable or disable logging per config object parameter \"\"\" log_status = cfg_obj['LOGGING']['ENABLE_LOGGING'] if log_status: logger.disabled = False elif not log_status: logger.info( '%s: Logging disabled per local configuration file (%s) parameters.' % (inspect.stack()[0][3], cfg_obj['PROJECT']['CONFIG_PATH']) ) logger.disabled = True return log_status\n\n    ### Response: Enable or disable logging per config object parameter.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void writeDictionaryPage(DictionaryPage dictionaryPage) throws IOException { state = state.write(); LOG.debug(\"{}: write dictionary page: {} values\", out.getPos(), dictionaryPage.getDictionarySize()); currentChunkDictionaryPageOffset = out.getPos(); int uncompressedSize = dictionaryPage.getUncompressedSize(); int compressedPageSize = (int)dictionaryPage.getBytes().size(); // TODO: fix casts metadataConverter.writeDictionaryPageHeader( uncompressedSize, compressedPageSize, dictionaryPage.getDictionarySize(), dictionaryPage.getEncoding(), out); long headerSize = out.getPos() - currentChunkDictionaryPageOffset; this.uncompressedLength += uncompressedSize + headerSize; this.compressedLength += compressedPageSize + headerSize; LOG.debug(\"{}: write dictionary page content {}\", out.getPos(), compressedPageSize); dictionaryPage.getBytes().writeAllTo(out); encodingStatsBuilder.addDictEncoding(dictionaryPage.getEncoding()); currentEncodings.add(dictionaryPage.getEncoding()); }\n\n    ### Response:", "ground_truth": "writes a dictionary page page\n@param dictionaryPage the dictionary page\n@throws IOException if there is an error while writing", "predict": "Writes a dictionary page to the output stream and updates counters for later reporting of activity and storage information"}, {"ID": 1998, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setDocumentLocator(Locator locator) { try { if (null == m_resultContentHandler) createResultContentHandler(m_result); } catch (TransformerException te) { throw new org.apache.xml.utils.WrappedRuntimeException(te); } m_resultContentHandler.setDocumentLocator(locator); }\n\n    ### Response: Receive a Locator object for document events.\n\nBy default, do nothing.  Application writers may override this\nmethod in a subclass if they wish to store the locator for use\nwith other document events.\n\n@param locator A locator for all SAX document events.\n@see org.xml.sax.ContentHandler#setDocumentLocator\n@see org.xml.sax.Locator.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void writeDataPage( int valueCount, int uncompressedPageSize, BytesInput bytes, Statistics statistics, long rowCount, Encoding rlEncoding, Encoding dlEncoding, Encoding valuesEncoding) throws IOException { long beforeHeader = out.getPos(); innerWriteDataPage(valueCount, uncompressedPageSize, bytes, statistics, rlEncoding, dlEncoding, valuesEncoding); offsetIndexBuilder.add((int) (out.getPos() - beforeHeader), rowCount); }\n\n    ### Response:", "ground_truth": "Writes a single page\n@param valueCount count of values\n@param uncompressedPageSize the size of the data once uncompressed\n@param bytes the compressed data for the page without header\n@param statistics the statistics of the page\n@param rowCount the number of rows in the page\n@param rlEncoding encoding of the repetition level\n@param dlEncoding encoding of the definition level\n@param valuesEncoding encoding of values\n@throws IOException if any I/O error occurs during writing the file", "predict": "Writes an individual row to an output stream."}, {"ID": 1999, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String readPassword() { this.before = \"\"; this.after = \"\"; terminal.formatln(\"%s: \", message); try { for (; ; ) { Char c = terminal.read(); if (c == null) { throw new IOException(\"End of input.\"); } int ch = c.asInteger(); if (ch == Char.CR) { return before + after; } if (ch == Char.DEL || ch == Char.BS) { // backspace... if (before.length() > 0) { before = before.substring(0, before.length() - 1); printInputLine(); } continue; } if (c instanceof Control) { if (c.equals(Control.DELETE)) { if (after.length() > 0) { after = after.substring(1); } } else if (c.equals(Control.LEFT)) { if (before.length() > 0) { after = \"\" + before.charAt(before.length() - 1) + after; before = before.substring(0, before.length() - 1); } } else if (c.equals(Control.HOME)) { after = before + after; before = \"\"; } else if (c.equals(Control.RIGHT)) { if (after.length() > 0) { before = before + after.charAt(0); after = after.substring(1); } } else if (c.equals(Control.END)) { before = before + after; after = \"\"; } else { // Silently ignore unknown control chars. continue; } printInputLine(); continue; } if (ch == Char.ESC || ch == Char.ABR || ch == Char.EOF) { throw new IOException(\"User interrupted: \" + c.asString()); } if (ch < 0x20) { // Silently ignore unknown ASCII control characters. continue; } before = before + c.toString(); printInputLine(); } } catch (IOException e) { throw new UncheckedIOException(e); } }\n\n    ### Response: Read password from terminal.\n\n@return The resulting line..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void writeColumnChunk(ColumnDescriptor descriptor, long valueCount, CompressionCodecName compressionCodecName, DictionaryPage dictionaryPage, BytesInput bytes, long uncompressedTotalPageSize, long compressedTotalPageSize, Statistics<?> totalStats, ColumnIndexBuilder columnIndexBuilder, OffsetIndexBuilder offsetIndexBuilder, Set<Encoding> rlEncodings, Set<Encoding> dlEncodings, List<Encoding> dataEncodings) throws IOException { startColumn(descriptor, valueCount, compressionCodecName); state = state.write(); if (dictionaryPage != null) { writeDictionaryPage(dictionaryPage); } LOG.debug(\"{}: write data pages\", out.getPos()); long headersSize = bytes.size() - compressedTotalPageSize; this.uncompressedLength += uncompressedTotalPageSize + headersSize; this.compressedLength += compressedTotalPageSize + headersSize; LOG.debug(\"{}: write data pages content\", out.getPos()); firstPageOffset = out.getPos(); bytes.writeAllTo(out); encodingStatsBuilder.addDataEncodings(dataEncodings); if (rlEncodings.isEmpty()) { encodingStatsBuilder.withV2Pages(); } currentEncodings.addAll(rlEncodings); currentEncodings.addAll(dlEncodings); currentEncodings.addAll(dataEncodings); currentStatistics = totalStats; this.columnIndexBuilder = columnIndexBuilder; this.offsetIndexBuilder = offsetIndexBuilder; endColumn(); }\n\n    ### Response:", "ground_truth": "Writes a column chunk at once\n@param descriptor the descriptor of the column\n@param valueCount the value count in this column\n@param compressionCodecName the name of the compression codec used for compressing the pages\n@param dictionaryPage the dictionary page for this column chunk (might be null)\n@param bytes the encoded pages including page headers to be written as is\n@param uncompressedTotalPageSize total uncompressed size (without page headers)\n@param compressedTotalPageSize total compressed size (without page headers)\n@param totalStats accumulated statistics for the column chunk\n@param columnIndexBuilder the builder object for the column index\n@param offsetIndexBuilder the builder object for the offset index\n@param rlEncodings the RL encodings used in this column chunk\n@param dlEncodings the DL encodings used in this column chunk\n@param dataEncodings the data encodings used in this column chunk\n@throws IOException if there is an error while writing", "predict": "Writes values and row IDs to column chunk."}, {"ID": 2000, "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean isEnabled() { if (daysOfWeek != null && daysOfWeek.length > 0) { return true; } if (timesOfDay != null && timesOfDay.size() > 0) { return true; } return false; }\n\n    ### Response: Returns true if any exception data has been added, either days or time.\n\n@return true if any exception data has been added, either days or time..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void endBlock() throws IOException { state = state.endBlock(); LOG.debug(\"{}: end block\", out.getPos()); currentBlock.setRowCount(currentRecordCount); blocks.add(currentBlock); columnIndexes.add(currentColumnIndexes); offsetIndexes.add(currentOffsetIndexes); currentColumnIndexes = null; currentOffsetIndexes = null; currentBlock = null; }\n\n    ### Response:", "ground_truth": "ends a block once all column chunks have been written\n@throws IOException if there is an error while writing", "predict": "Throws IOException to signal error during record writing; debugs the location of the error; updates the row count, column indices, and offset indices of the blocks and sets the values of the blocks to be the values of the record being written; and sets the values of the blocks to be the values of the record being written; and sets the values of the blocks to be the values of the record being written; and sets the values of the blocks to be the values of the record being written; and sets the values of the blocks to be the values of the record being written; and sets the values of the blocks to be the values of the record being written; and sets the values of the blocks to be the values of the record being written; and sets the values of the blocks to be the values of the record being written; and sets the values of the blocks to be the values of the record being written; and sets the values of the blocks to be the values of the record being written; and sets the values of the blocks to be the values of the record"}]